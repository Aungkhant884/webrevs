{"files":[{"patch":"@@ -38,0 +38,1 @@\n+import java.util.ArrayList;\n@@ -44,1 +45,0 @@\n-    static final int INVOC_COUNT = Integer.getInteger(\"jdk.incubator.vector.test.loop-iterations\", 1000);\n@@ -46,6 +46,7 @@\n-    static VectorOperators.Conversion<Byte, Byte> B2B = VectorOperators.Conversion.ofCast(byte.class, byte.class);\n-    static VectorOperators.Conversion<Short, Short> S2S = VectorOperators.Conversion.ofCast(short.class, short.class);\n-    static VectorOperators.Conversion<Integer, Integer> I2I = VectorOperators.Conversion.ofCast(int.class, int.class);\n-    static VectorOperators.Conversion<Long, Long> L2L = VectorOperators.Conversion.ofCast(long.class, long.class);\n-    static VectorOperators.Conversion<Float, Float> F2F = VectorOperators.Conversion.ofCast(float.class, float.class);\n-    static VectorOperators.Conversion<Double, Double> D2D = VectorOperators.Conversion.ofCast(double.class, double.class);\n+    @AfterMethod\n+    public void getRunTime(ITestResult tr) {\n+        long time = tr.getEndMillis() - tr.getStartMillis();\n+        System.out.println(tr.getName() + \" took \" + time + \" ms\");\n+    }\n+\n+    static final int INVOC_COUNT = Integer.getInteger(\"jdk.incubator.vector.test.loop-iterations\", 1000);\n@@ -82,15 +83,0 @@\n-    interface ToBoolF {\n-        boolean apply(int i);\n-    }\n-\n-    static boolean[] fill_bool(int s, ToBoolF f) {\n-        return fill_bool(new boolean[s], f);\n-    }\n-\n-    static boolean[] fill_bool(boolean[] a, ToBoolF f) {\n-        for (int i = 0; i < a.length; i++) {\n-            a[i] = f.apply(i);\n-        }\n-        return a;\n-    }\n-\n@@ -101,1 +87,0 @@\n-\n@@ -177,25 +162,0 @@\n-\n-    @AfterMethod\n-    public void getRunTime(ITestResult tr) {\n-        long time = tr.getEndMillis() - tr.getStartMillis();\n-        System.out.println(tr.getName() + \" took \" + time + \" ms\");\n-    }\n-\n-    @DataProvider\n-    public Object[][] byteUnaryOpProvider() {\n-        return BYTE_GENERATORS.stream().\n-                map(f -> new Object[]{f}).\n-                toArray(Object[][]::new);\n-    }\n-\n-    static final List<IntFunction<boolean[]>> BOOL_GENERATORS = List.of(\n-            withToString(\"boolean(i%3)\", (int s) -> fill_bool(s, i -> i % 3 == 0))\n-    );\n-\n-    @DataProvider\n-    public Object[][] booleanUnaryOpProvider() {\n-        return BOOL_GENERATORS.stream().\n-                map(f -> new Object[]{f}).\n-                toArray(Object[][]::new);\n-    }\n-\n@@ -206,7 +166,0 @@\n-    @DataProvider\n-    public Object[][] shortUnaryOpProvider() {\n-        return SHORT_GENERATORS.stream().\n-                map(f -> new Object[]{f}).\n-                toArray(Object[][]::new);\n-    }\n-\n@@ -217,7 +170,0 @@\n-    @DataProvider\n-    public Object[][] intUnaryOpProvider() {\n-        return INT_GENERATORS.stream().\n-                map(f -> new Object[]{f}).\n-                toArray(Object[][]::new);\n-    }\n-\n@@ -228,7 +174,0 @@\n-    @DataProvider\n-    public Object[][] longUnaryOpProvider() {\n-        return LONG_GENERATORS.stream().\n-                map(f -> new Object[]{f}).\n-                toArray(Object[][]::new);\n-    }\n-\n@@ -239,8 +178,0 @@\n-\n-    @DataProvider\n-    public Object[][] floatUnaryOpProvider() {\n-        return FLOAT_GENERATORS.stream().\n-                map(f -> new Object[]{f}).\n-                toArray(Object[][]::new);\n-    }\n-\n@@ -251,5 +182,61 @@\n-    @DataProvider\n-    public Object[][] doubleUnaryOpProvider() {\n-        return DOUBLE_GENERATORS.stream().\n-                map(f -> new Object[]{f}).\n-                toArray(Object[][]::new);\n+    static List<?> sourceGenerators(Class<?> src) {\n+        if (src == byte.class) {\n+            return BYTE_GENERATORS;\n+        }\n+        else if (src == short.class) {\n+            return SHORT_GENERATORS;\n+        }\n+        else if (src == int.class) {\n+            return INT_GENERATORS;\n+        }\n+        else if (src == long.class) {\n+            return LONG_GENERATORS;\n+        }\n+        else if (src == float.class) {\n+            return FLOAT_GENERATORS;\n+        }\n+        else if (src == double.class) {\n+            return DOUBLE_GENERATORS;\n+        }\n+        else\n+            throw new IllegalStateException();\n+    }\n+\n+    static Object[][] fixedShapeXFixedShapeSpeciesArgs(VectorShape shape) {\n+        List<Object[]> args = new ArrayList<>();\n+\n+        for (Class<?> srcE : List.of(byte.class, short.class, int.class, long.class, float.class, double.class)) {\n+            VectorSpecies<?> src = VectorSpecies.of(srcE, shape);\n+            List<?> srcGens = sourceGenerators(srcE);\n+\n+            for (Class<?> dstE : List.of(byte.class, short.class, int.class, long.class, float.class, double.class)) {\n+                VectorSpecies<?> dst = VectorSpecies.of(dstE, shape);\n+\n+                for (Object srcGen : srcGens) {\n+                    args.add(new Object[]{src, dst, srcGen});\n+                }\n+            }\n+        }\n+\n+        return args.toArray(Object[][]::new);\n+    }\n+\n+    static Object[][] fixedShapeXShapeSpeciesArgs(VectorShape srcShape) {\n+        List<Object[]> args = new ArrayList<>();\n+\n+        for (Class<?> srcE : List.of(byte.class, short.class, int.class, long.class, float.class, double.class)) {\n+            VectorSpecies<?> src = VectorSpecies.of(srcE, srcShape);\n+            List<?> srcGens = sourceGenerators(srcE);\n+\n+            for (VectorShape dstShape : VectorShape.values()) {\n+                for (Class<?> dstE : List.of(byte.class, short.class, int.class, long.class, float.class, double.class)) {\n+                    VectorSpecies<?> dst = VectorSpecies.of(dstE, dstShape);\n+\n+                    for (Object srcGen : srcGens) {\n+                        args.add(new Object[]{src, dst, srcGen});\n+                    }\n+                }\n+            }\n+        }\n+\n+        return args.toArray(Object[][]::new);\n@@ -407,11 +394,0 @@\n-    static <E> void assertResultsEquals(E[] ref, E[] res, int species_len) {\n-        Assert.assertEquals(res.length, ref.length);\n-        int TRIP_COUNT = res.length - (res.length & ~(species_len - 1));\n-        for (int i = 0; i < TRIP_COUNT; i++) {\n-            \/\/ @@@ Is this needed?\n-            System.out.println(\"res[\" + i + \"] = \" + res[i] + \" ref[\" + i +\n-                    \"] = \" + ref[i]);\n-            Assert.assertEquals(res[i], ref[i]);\n-        }\n-    }\n-\n@@ -420,2 +396,4 @@\n-                                         VectorOperators.Conversion<I, O> OP, ConvAPI API,\n-                                         int in_len) {\n+                                         ConvAPI conv) {\n+        VectorOperators.Conversion<I, O> convOp = VectorOperators.Conversion.ofCast(\n+                srcSpecies.elementType(), destSpecies.elementType());\n+        int in_len = Array.getLength(in);\n@@ -453,15 +431,6 @@\n-                Vector<O> rv = null;\n-                switch (API) {\n-                    default:\n-                        assert (false);\n-                        break;\n-                    case CONVERT:\n-                        rv = av.convert(OP, part);\n-                        break;\n-                    case CONVERTSHAPE:\n-                        rv = av.convertShape(OP, destSpecies, part);\n-                        break;\n-                    case CASTSHAPE:\n-                        rv = av.castShape(destSpecies, part);\n-                        break;\n-                }\n+                Vector<O> rv = switch(conv) {\n+                    case CONVERT -> av.convert(convOp, part);\n+                    case CONVERTSHAPE -> av.convertShape(convOp, destSpecies, part);\n+                    case CASTSHAPE -> av.castShape(destSpecies, part);\n+                    case REINTERPRETSHAPE -> throw new UnsupportedOperationException();\n+                };\n@@ -476,2 +445,2 @@\n-                                          Object in,\n-                                          int in_len) {\n+                                          Object in) {\n+        int in_len = Array.getLength(in);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/AbstractVectorConversionTest.java","additions":81,"deletions":112,"binary":false,"changes":193,"status":"modified"},{"patch":"@@ -24,7 +24,3 @@\n-import jdk.incubator.vector.ByteVector;\n-import jdk.incubator.vector.DoubleVector;\n-import jdk.incubator.vector.FloatVector;\n-import jdk.incubator.vector.IntVector;\n-import jdk.incubator.vector.LongVector;\n-import jdk.incubator.vector.ShortVector;\n-import jdk.incubator.vector.VectorOperators;\n+import jdk.incubator.vector.VectorShape;\n+import jdk.incubator.vector.VectorSpecies;\n+import org.testng.annotations.DataProvider;\n@@ -46,4390 +42,1 @@\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertB2B_128_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, ByteVector.SPECIES_128,\n-                a, B2B,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertB2S_128_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, ShortVector.SPECIES_128,\n-                a, VectorOperators.B2S,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertB2I_128_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, IntVector.SPECIES_128,\n-                a, VectorOperators.B2I,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertB2L_128_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, LongVector.SPECIES_128,\n-                a, VectorOperators.B2L,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertB2F_128_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, FloatVector.SPECIES_128,\n-                a, VectorOperators.B2F,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertB2D_128_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, DoubleVector.SPECIES_128,\n-                a, VectorOperators.B2D,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2B_128_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, ByteVector.SPECIES_64,\n-                a, B2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2B_128_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, ByteVector.SPECIES_128,\n-                a, B2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2B_128_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, ByteVector.SPECIES_256,\n-                a, B2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2B_128_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, ByteVector.SPECIES_512,\n-                a, B2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2B_128_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, ByteVector.SPECIES_MAX,\n-                a, B2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2S_128_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, ShortVector.SPECIES_64,\n-                a, VectorOperators.B2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2S_128_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, ShortVector.SPECIES_128,\n-                a, VectorOperators.B2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2S_128_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, ShortVector.SPECIES_256,\n-                a, VectorOperators.B2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2S_128_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, ShortVector.SPECIES_512,\n-                a, VectorOperators.B2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2S_128_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, ShortVector.SPECIES_MAX,\n-                a, VectorOperators.B2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2I_128_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, IntVector.SPECIES_64,\n-                a, VectorOperators.B2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2I_128_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, IntVector.SPECIES_128,\n-                a, VectorOperators.B2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2I_128_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, IntVector.SPECIES_256,\n-                a, VectorOperators.B2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2I_128_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, IntVector.SPECIES_512,\n-                a, VectorOperators.B2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2I_128_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, IntVector.SPECIES_MAX,\n-                a, VectorOperators.B2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2L_128_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, LongVector.SPECIES_64,\n-                a, VectorOperators.B2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2L_128_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, LongVector.SPECIES_128,\n-                a, VectorOperators.B2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2L_128_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, LongVector.SPECIES_256,\n-                a, VectorOperators.B2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2L_128_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, LongVector.SPECIES_512,\n-                a, VectorOperators.B2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2L_128_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, LongVector.SPECIES_MAX,\n-                a, VectorOperators.B2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2F_128_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, FloatVector.SPECIES_64,\n-                a, VectorOperators.B2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2F_128_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, FloatVector.SPECIES_128,\n-                a, VectorOperators.B2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2F_128_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, FloatVector.SPECIES_256,\n-                a, VectorOperators.B2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2F_128_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, FloatVector.SPECIES_512,\n-                a, VectorOperators.B2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2F_128_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, FloatVector.SPECIES_MAX,\n-                a, VectorOperators.B2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2D_128_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, DoubleVector.SPECIES_64,\n-                a, VectorOperators.B2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2D_128_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, DoubleVector.SPECIES_128,\n-                a, VectorOperators.B2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2D_128_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, DoubleVector.SPECIES_256,\n-                a, VectorOperators.B2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2D_128_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, DoubleVector.SPECIES_512,\n-                a, VectorOperators.B2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2D_128_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, DoubleVector.SPECIES_MAX,\n-                a, VectorOperators.B2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2B_128_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, ByteVector.SPECIES_64,\n-                a, B2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2B_128_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, ByteVector.SPECIES_128,\n-                a, B2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2B_128_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, ByteVector.SPECIES_256,\n-                a, B2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2B_128_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, ByteVector.SPECIES_512,\n-                a, B2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2B_128_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, ByteVector.SPECIES_MAX,\n-                a, B2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2S_128_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, ShortVector.SPECIES_64,\n-                a, VectorOperators.B2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2S_128_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, ShortVector.SPECIES_128,\n-                a, VectorOperators.B2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2S_128_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, ShortVector.SPECIES_256,\n-                a, VectorOperators.B2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2S_128_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, ShortVector.SPECIES_512,\n-                a, VectorOperators.B2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2S_128_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, ShortVector.SPECIES_MAX,\n-                a, VectorOperators.B2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2I_128_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, IntVector.SPECIES_64,\n-                a, VectorOperators.B2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2I_128_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, IntVector.SPECIES_128,\n-                a, VectorOperators.B2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2I_128_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, IntVector.SPECIES_256,\n-                a, VectorOperators.B2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2I_128_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, IntVector.SPECIES_512,\n-                a, VectorOperators.B2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2I_128_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, IntVector.SPECIES_MAX,\n-                a, VectorOperators.B2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2L_128_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, LongVector.SPECIES_64,\n-                a, VectorOperators.B2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2L_128_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, LongVector.SPECIES_128,\n-                a, VectorOperators.B2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2L_128_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, LongVector.SPECIES_256,\n-                a, VectorOperators.B2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2L_128_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, LongVector.SPECIES_512,\n-                a, VectorOperators.B2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2L_128_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, LongVector.SPECIES_MAX,\n-                a, VectorOperators.B2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2F_128_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, FloatVector.SPECIES_64,\n-                a, VectorOperators.B2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2F_128_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, FloatVector.SPECIES_128,\n-                a, VectorOperators.B2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2F_128_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, FloatVector.SPECIES_256,\n-                a, VectorOperators.B2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2F_128_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, FloatVector.SPECIES_512,\n-                a, VectorOperators.B2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2F_128_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, FloatVector.SPECIES_MAX,\n-                a, VectorOperators.B2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2D_128_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, DoubleVector.SPECIES_64,\n-                a, VectorOperators.B2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2D_128_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, DoubleVector.SPECIES_128,\n-                a, VectorOperators.B2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2D_128_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, DoubleVector.SPECIES_256,\n-                a, VectorOperators.B2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2D_128_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, DoubleVector.SPECIES_512,\n-                a, VectorOperators.B2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2D_128_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_128, DoubleVector.SPECIES_MAX,\n-                a, VectorOperators.B2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2B_128_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_128, ByteVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2B_128_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_128, ByteVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2B_128_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_128, ByteVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2B_128_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_128, ByteVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2B_128_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_128, ByteVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2S_128_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_128, ShortVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2S_128_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_128, ShortVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2S_128_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_128, ShortVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2S_128_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_128, ShortVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2S_128_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_128, ShortVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2I_128_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_128, IntVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2I_128_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_128, IntVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2I_128_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_128, IntVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2I_128_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_128, IntVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2I_128_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_128, IntVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2L_128_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_128, LongVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2L_128_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_128, LongVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2L_128_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_128, LongVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2L_128_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_128, LongVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2L_128_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_128, LongVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2F_128_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_128, FloatVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2F_128_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_128, FloatVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2F_128_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_128, FloatVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2F_128_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_128, FloatVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2F_128_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_128, FloatVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2D_128_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_128, DoubleVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2D_128_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_128, DoubleVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2D_128_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_128, DoubleVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2D_128_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_128, DoubleVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2D_128_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_128, DoubleVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertD2B_128_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, ByteVector.SPECIES_128,\n-                a, VectorOperators.D2B,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertD2S_128_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, ShortVector.SPECIES_128,\n-                a, VectorOperators.D2S,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertD2I_128_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, IntVector.SPECIES_128,\n-                a, VectorOperators.D2I,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertD2L_128_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, LongVector.SPECIES_128,\n-                a, VectorOperators.D2L,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertD2F_128_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, FloatVector.SPECIES_128,\n-                a, VectorOperators.D2F,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertD2D_128_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, DoubleVector.SPECIES_128,\n-                a, D2D,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2B_128_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, ByteVector.SPECIES_64,\n-                a, VectorOperators.D2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2B_128_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, ByteVector.SPECIES_128,\n-                a, VectorOperators.D2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2B_128_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, ByteVector.SPECIES_256,\n-                a, VectorOperators.D2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2B_128_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, ByteVector.SPECIES_512,\n-                a, VectorOperators.D2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2B_128_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, ByteVector.SPECIES_MAX,\n-                a, VectorOperators.D2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2S_128_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, ShortVector.SPECIES_64,\n-                a, VectorOperators.D2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2S_128_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, ShortVector.SPECIES_128,\n-                a, VectorOperators.D2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2S_128_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, ShortVector.SPECIES_256,\n-                a, VectorOperators.D2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2S_128_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, ShortVector.SPECIES_512,\n-                a, VectorOperators.D2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2S_128_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, ShortVector.SPECIES_MAX,\n-                a, VectorOperators.D2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2I_128_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, IntVector.SPECIES_64,\n-                a, VectorOperators.D2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2I_128_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, IntVector.SPECIES_128,\n-                a, VectorOperators.D2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2I_128_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, IntVector.SPECIES_256,\n-                a, VectorOperators.D2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2I_128_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, IntVector.SPECIES_512,\n-                a, VectorOperators.D2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2I_128_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, IntVector.SPECIES_MAX,\n-                a, VectorOperators.D2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2L_128_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, LongVector.SPECIES_64,\n-                a, VectorOperators.D2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2L_128_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, LongVector.SPECIES_128,\n-                a, VectorOperators.D2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2L_128_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, LongVector.SPECIES_256,\n-                a, VectorOperators.D2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2L_128_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, LongVector.SPECIES_512,\n-                a, VectorOperators.D2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2L_128_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, LongVector.SPECIES_MAX,\n-                a, VectorOperators.D2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2F_128_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, FloatVector.SPECIES_64,\n-                a, VectorOperators.D2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2F_128_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, FloatVector.SPECIES_128,\n-                a, VectorOperators.D2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2F_128_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, FloatVector.SPECIES_256,\n-                a, VectorOperators.D2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2F_128_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, FloatVector.SPECIES_512,\n-                a, VectorOperators.D2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2F_128_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, FloatVector.SPECIES_MAX,\n-                a, VectorOperators.D2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2D_128_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, DoubleVector.SPECIES_64,\n-                a, D2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2D_128_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, DoubleVector.SPECIES_128,\n-                a, D2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2D_128_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, DoubleVector.SPECIES_256,\n-                a, D2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2D_128_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, DoubleVector.SPECIES_512,\n-                a, D2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2D_128_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, DoubleVector.SPECIES_MAX,\n-                a, D2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2B_128_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, ByteVector.SPECIES_64,\n-                a, VectorOperators.D2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2B_128_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, ByteVector.SPECIES_128,\n-                a, VectorOperators.D2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2B_128_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, ByteVector.SPECIES_256,\n-                a, VectorOperators.D2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2B_128_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, ByteVector.SPECIES_512,\n-                a, VectorOperators.D2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2B_128_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, ByteVector.SPECIES_MAX,\n-                a, VectorOperators.D2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2S_128_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, ShortVector.SPECIES_64,\n-                a, VectorOperators.D2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2S_128_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, ShortVector.SPECIES_128,\n-                a, VectorOperators.D2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2S_128_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, ShortVector.SPECIES_256,\n-                a, VectorOperators.D2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2S_128_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, ShortVector.SPECIES_512,\n-                a, VectorOperators.D2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2S_128_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, ShortVector.SPECIES_MAX,\n-                a, VectorOperators.D2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2I_128_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, IntVector.SPECIES_64,\n-                a, VectorOperators.D2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2I_128_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, IntVector.SPECIES_128,\n-                a, VectorOperators.D2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2I_128_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, IntVector.SPECIES_256,\n-                a, VectorOperators.D2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2I_128_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, IntVector.SPECIES_512,\n-                a, VectorOperators.D2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2I_128_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, IntVector.SPECIES_MAX,\n-                a, VectorOperators.D2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2L_128_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, LongVector.SPECIES_64,\n-                a, VectorOperators.D2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2L_128_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, LongVector.SPECIES_128,\n-                a, VectorOperators.D2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2L_128_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, LongVector.SPECIES_256,\n-                a, VectorOperators.D2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2L_128_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, LongVector.SPECIES_512,\n-                a, VectorOperators.D2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2L_128_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, LongVector.SPECIES_MAX,\n-                a, VectorOperators.D2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2F_128_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, FloatVector.SPECIES_64,\n-                a, VectorOperators.D2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2F_128_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, FloatVector.SPECIES_128,\n-                a, VectorOperators.D2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2F_128_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, FloatVector.SPECIES_256,\n-                a, VectorOperators.D2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2F_128_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, FloatVector.SPECIES_512,\n-                a, VectorOperators.D2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2F_128_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, FloatVector.SPECIES_MAX,\n-                a, VectorOperators.D2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2D_128_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, DoubleVector.SPECIES_64,\n-                a, D2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2D_128_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, DoubleVector.SPECIES_128,\n-                a, D2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2D_128_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, DoubleVector.SPECIES_256,\n-                a, D2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2D_128_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, DoubleVector.SPECIES_512,\n-                a, D2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2D_128_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_128, DoubleVector.SPECIES_MAX,\n-                a, D2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2B_128_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_128, ByteVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2B_128_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_128, ByteVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2B_128_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_128, ByteVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2B_128_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_128, ByteVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2B_128_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_128, ByteVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2S_128_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_128, ShortVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2S_128_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_128, ShortVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2S_128_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_128, ShortVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2S_128_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_128, ShortVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2S_128_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_128, ShortVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2I_128_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_128, IntVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2I_128_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_128, IntVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2I_128_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_128, IntVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2I_128_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_128, IntVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2I_128_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_128, IntVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2L_128_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_128, LongVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2L_128_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_128, LongVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2L_128_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_128, LongVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2L_128_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_128, LongVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2L_128_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_128, LongVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2F_128_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_128, FloatVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2F_128_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_128, FloatVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2F_128_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_128, FloatVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2F_128_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_128, FloatVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2F_128_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_128, FloatVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2D_128_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_128, DoubleVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2D_128_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_128, DoubleVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2D_128_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_128, DoubleVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2D_128_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_128, DoubleVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2D_128_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_128, DoubleVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertF2B_128_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, ByteVector.SPECIES_128,\n-                a, VectorOperators.F2B,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertF2S_128_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, ShortVector.SPECIES_128,\n-                a, VectorOperators.F2S,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertF2I_128_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, IntVector.SPECIES_128,\n-                a, VectorOperators.F2I,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertF2L_128_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, LongVector.SPECIES_128,\n-                a, VectorOperators.F2L,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertF2F_128_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, FloatVector.SPECIES_128,\n-                a, F2F,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertF2D_128_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, DoubleVector.SPECIES_128,\n-                a, VectorOperators.F2D,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2B_128_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, ByteVector.SPECIES_64,\n-                a, VectorOperators.F2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2B_128_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, ByteVector.SPECIES_128,\n-                a, VectorOperators.F2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2B_128_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, ByteVector.SPECIES_256,\n-                a, VectorOperators.F2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2B_128_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, ByteVector.SPECIES_512,\n-                a, VectorOperators.F2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2B_128_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, ByteVector.SPECIES_MAX,\n-                a, VectorOperators.F2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2S_128_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, ShortVector.SPECIES_64,\n-                a, VectorOperators.F2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2S_128_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, ShortVector.SPECIES_128,\n-                a, VectorOperators.F2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2S_128_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, ShortVector.SPECIES_256,\n-                a, VectorOperators.F2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2S_128_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, ShortVector.SPECIES_512,\n-                a, VectorOperators.F2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2S_128_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, ShortVector.SPECIES_MAX,\n-                a, VectorOperators.F2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2I_128_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, IntVector.SPECIES_64,\n-                a, VectorOperators.F2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2I_128_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, IntVector.SPECIES_128,\n-                a, VectorOperators.F2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2I_128_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, IntVector.SPECIES_256,\n-                a, VectorOperators.F2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2I_128_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, IntVector.SPECIES_512,\n-                a, VectorOperators.F2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2I_128_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, IntVector.SPECIES_MAX,\n-                a, VectorOperators.F2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2L_128_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, LongVector.SPECIES_64,\n-                a, VectorOperators.F2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2L_128_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, LongVector.SPECIES_128,\n-                a, VectorOperators.F2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2L_128_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, LongVector.SPECIES_256,\n-                a, VectorOperators.F2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2L_128_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, LongVector.SPECIES_512,\n-                a, VectorOperators.F2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2L_128_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, LongVector.SPECIES_MAX,\n-                a, VectorOperators.F2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2F_128_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, FloatVector.SPECIES_64,\n-                a, F2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2F_128_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, FloatVector.SPECIES_128,\n-                a, F2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2F_128_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, FloatVector.SPECIES_256,\n-                a, F2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2F_128_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, FloatVector.SPECIES_512,\n-                a, F2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2F_128_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, FloatVector.SPECIES_MAX,\n-                a, F2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2D_128_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, DoubleVector.SPECIES_64,\n-                a, VectorOperators.F2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2D_128_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, DoubleVector.SPECIES_128,\n-                a, VectorOperators.F2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2D_128_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, DoubleVector.SPECIES_256,\n-                a, VectorOperators.F2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2D_128_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, DoubleVector.SPECIES_512,\n-                a, VectorOperators.F2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2D_128_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, DoubleVector.SPECIES_MAX,\n-                a, VectorOperators.F2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2B_128_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, ByteVector.SPECIES_64,\n-                a, VectorOperators.F2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2B_128_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, ByteVector.SPECIES_128,\n-                a, VectorOperators.F2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2B_128_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, ByteVector.SPECIES_256,\n-                a, VectorOperators.F2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2B_128_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, ByteVector.SPECIES_512,\n-                a, VectorOperators.F2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2B_128_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, ByteVector.SPECIES_MAX,\n-                a, VectorOperators.F2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2S_128_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, ShortVector.SPECIES_64,\n-                a, VectorOperators.F2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2S_128_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, ShortVector.SPECIES_128,\n-                a, VectorOperators.F2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2S_128_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, ShortVector.SPECIES_256,\n-                a, VectorOperators.F2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2S_128_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, ShortVector.SPECIES_512,\n-                a, VectorOperators.F2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2S_128_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, ShortVector.SPECIES_MAX,\n-                a, VectorOperators.F2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2I_128_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, IntVector.SPECIES_64,\n-                a, VectorOperators.F2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2I_128_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, IntVector.SPECIES_128,\n-                a, VectorOperators.F2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2I_128_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, IntVector.SPECIES_256,\n-                a, VectorOperators.F2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2I_128_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, IntVector.SPECIES_512,\n-                a, VectorOperators.F2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2I_128_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, IntVector.SPECIES_MAX,\n-                a, VectorOperators.F2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2L_128_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, LongVector.SPECIES_64,\n-                a, VectorOperators.F2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2L_128_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, LongVector.SPECIES_128,\n-                a, VectorOperators.F2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2L_128_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, LongVector.SPECIES_256,\n-                a, VectorOperators.F2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2L_128_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, LongVector.SPECIES_512,\n-                a, VectorOperators.F2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2L_128_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, LongVector.SPECIES_MAX,\n-                a, VectorOperators.F2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2F_128_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, FloatVector.SPECIES_64,\n-                a, F2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2F_128_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, FloatVector.SPECIES_128,\n-                a, F2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2F_128_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, FloatVector.SPECIES_256,\n-                a, F2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2F_128_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, FloatVector.SPECIES_512,\n-                a, F2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2F_128_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, FloatVector.SPECIES_MAX,\n-                a, F2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2D_128_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, DoubleVector.SPECIES_64,\n-                a, VectorOperators.F2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2D_128_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, DoubleVector.SPECIES_128,\n-                a, VectorOperators.F2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2D_128_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, DoubleVector.SPECIES_256,\n-                a, VectorOperators.F2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2D_128_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, DoubleVector.SPECIES_512,\n-                a, VectorOperators.F2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2D_128_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_128, DoubleVector.SPECIES_MAX,\n-                a, VectorOperators.F2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2B_128_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_128, ByteVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2B_128_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_128, ByteVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2B_128_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_128, ByteVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2B_128_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_128, ByteVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2B_128_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_128, ByteVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2S_128_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_128, ShortVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2S_128_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_128, ShortVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2S_128_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_128, ShortVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2S_128_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_128, ShortVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2S_128_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_128, ShortVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2I_128_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_128, IntVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2I_128_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_128, IntVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2I_128_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_128, IntVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2I_128_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_128, IntVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2I_128_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_128, IntVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2L_128_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_128, LongVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2L_128_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_128, LongVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2L_128_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_128, LongVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2L_128_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_128, LongVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2L_128_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_128, LongVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2F_128_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_128, FloatVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2F_128_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_128, FloatVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2F_128_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_128, FloatVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2F_128_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_128, FloatVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2F_128_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_128, FloatVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2D_128_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_128, DoubleVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2D_128_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_128, DoubleVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2D_128_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_128, DoubleVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2D_128_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_128, DoubleVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2D_128_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_128, DoubleVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertI2B_128_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, ByteVector.SPECIES_128,\n-                a, VectorOperators.I2B,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertI2S_128_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, ShortVector.SPECIES_128,\n-                a, VectorOperators.I2S,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertI2I_128_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, IntVector.SPECIES_128,\n-                a, I2I,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertI2L_128_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, LongVector.SPECIES_128,\n-                a, VectorOperators.I2L,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertI2F_128_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, FloatVector.SPECIES_128,\n-                a, VectorOperators.I2F,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertI2D_128_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, DoubleVector.SPECIES_128,\n-                a, VectorOperators.I2D,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2B_128_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, ByteVector.SPECIES_64,\n-                a, VectorOperators.I2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2B_128_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, ByteVector.SPECIES_128,\n-                a, VectorOperators.I2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2B_128_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, ByteVector.SPECIES_256,\n-                a, VectorOperators.I2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2B_128_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, ByteVector.SPECIES_512,\n-                a, VectorOperators.I2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2B_128_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, ByteVector.SPECIES_MAX,\n-                a, VectorOperators.I2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2S_128_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, ShortVector.SPECIES_64,\n-                a, VectorOperators.I2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2S_128_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, ShortVector.SPECIES_128,\n-                a, VectorOperators.I2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2S_128_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, ShortVector.SPECIES_256,\n-                a, VectorOperators.I2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2S_128_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, ShortVector.SPECIES_512,\n-                a, VectorOperators.I2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2S_128_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, ShortVector.SPECIES_MAX,\n-                a, VectorOperators.I2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2I_128_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, IntVector.SPECIES_64,\n-                a, I2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2I_128_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, IntVector.SPECIES_128,\n-                a, I2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2I_128_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, IntVector.SPECIES_256,\n-                a, I2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2I_128_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, IntVector.SPECIES_512,\n-                a, I2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2I_128_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, IntVector.SPECIES_MAX,\n-                a, I2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2L_128_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, LongVector.SPECIES_64,\n-                a, VectorOperators.I2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2L_128_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, LongVector.SPECIES_128,\n-                a, VectorOperators.I2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2L_128_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, LongVector.SPECIES_256,\n-                a, VectorOperators.I2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2L_128_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, LongVector.SPECIES_512,\n-                a, VectorOperators.I2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2L_128_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, LongVector.SPECIES_MAX,\n-                a, VectorOperators.I2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2F_128_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, FloatVector.SPECIES_64,\n-                a, VectorOperators.I2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2F_128_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, FloatVector.SPECIES_128,\n-                a, VectorOperators.I2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2F_128_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, FloatVector.SPECIES_256,\n-                a, VectorOperators.I2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2F_128_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, FloatVector.SPECIES_512,\n-                a, VectorOperators.I2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2F_128_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, FloatVector.SPECIES_MAX,\n-                a, VectorOperators.I2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2D_128_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, DoubleVector.SPECIES_64,\n-                a, VectorOperators.I2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2D_128_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, DoubleVector.SPECIES_128,\n-                a, VectorOperators.I2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2D_128_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, DoubleVector.SPECIES_256,\n-                a, VectorOperators.I2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2D_128_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, DoubleVector.SPECIES_512,\n-                a, VectorOperators.I2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2D_128_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, DoubleVector.SPECIES_MAX,\n-                a, VectorOperators.I2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2B_128_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, ByteVector.SPECIES_64,\n-                a, VectorOperators.I2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2B_128_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, ByteVector.SPECIES_128,\n-                a, VectorOperators.I2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2B_128_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, ByteVector.SPECIES_256,\n-                a, VectorOperators.I2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2B_128_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, ByteVector.SPECIES_512,\n-                a, VectorOperators.I2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2B_128_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, ByteVector.SPECIES_MAX,\n-                a, VectorOperators.I2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2S_128_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, ShortVector.SPECIES_64,\n-                a, VectorOperators.I2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2S_128_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, ShortVector.SPECIES_128,\n-                a, VectorOperators.I2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2S_128_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, ShortVector.SPECIES_256,\n-                a, VectorOperators.I2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2S_128_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, ShortVector.SPECIES_512,\n-                a, VectorOperators.I2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2S_128_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, ShortVector.SPECIES_MAX,\n-                a, VectorOperators.I2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2I_128_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, IntVector.SPECIES_64,\n-                a, I2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2I_128_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, IntVector.SPECIES_128,\n-                a, I2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2I_128_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, IntVector.SPECIES_256,\n-                a, I2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2I_128_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, IntVector.SPECIES_512,\n-                a, I2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2I_128_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, IntVector.SPECIES_MAX,\n-                a, I2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2L_128_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, LongVector.SPECIES_64,\n-                a, VectorOperators.I2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2L_128_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, LongVector.SPECIES_128,\n-                a, VectorOperators.I2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2L_128_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, LongVector.SPECIES_256,\n-                a, VectorOperators.I2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2L_128_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, LongVector.SPECIES_512,\n-                a, VectorOperators.I2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2L_128_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, LongVector.SPECIES_MAX,\n-                a, VectorOperators.I2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2F_128_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, FloatVector.SPECIES_64,\n-                a, VectorOperators.I2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2F_128_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, FloatVector.SPECIES_128,\n-                a, VectorOperators.I2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2F_128_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, FloatVector.SPECIES_256,\n-                a, VectorOperators.I2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2F_128_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, FloatVector.SPECIES_512,\n-                a, VectorOperators.I2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2F_128_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, FloatVector.SPECIES_MAX,\n-                a, VectorOperators.I2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2D_128_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, DoubleVector.SPECIES_64,\n-                a, VectorOperators.I2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2D_128_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, DoubleVector.SPECIES_128,\n-                a, VectorOperators.I2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2D_128_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, DoubleVector.SPECIES_256,\n-                a, VectorOperators.I2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2D_128_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, DoubleVector.SPECIES_512,\n-                a, VectorOperators.I2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2D_128_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_128, DoubleVector.SPECIES_MAX,\n-                a, VectorOperators.I2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2B_128_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_128, ByteVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2B_128_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_128, ByteVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2B_128_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_128, ByteVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2B_128_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_128, ByteVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2B_128_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_128, ByteVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2S_128_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_128, ShortVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2S_128_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_128, ShortVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2S_128_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_128, ShortVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2S_128_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_128, ShortVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2S_128_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_128, ShortVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2I_128_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_128, IntVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2I_128_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_128, IntVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2I_128_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_128, IntVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2I_128_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_128, IntVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2I_128_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_128, IntVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2L_128_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_128, LongVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2L_128_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_128, LongVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2L_128_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_128, LongVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2L_128_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_128, LongVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2L_128_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_128, LongVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2F_128_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_128, FloatVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2F_128_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_128, FloatVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2F_128_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_128, FloatVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2F_128_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_128, FloatVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2F_128_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_128, FloatVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2D_128_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_128, DoubleVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2D_128_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_128, DoubleVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2D_128_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_128, DoubleVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2D_128_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_128, DoubleVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2D_128_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_128, DoubleVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertL2B_128_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, ByteVector.SPECIES_128,\n-                a, VectorOperators.L2B,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertL2S_128_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, ShortVector.SPECIES_128,\n-                a, VectorOperators.L2S,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertL2I_128_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, IntVector.SPECIES_128,\n-                a, VectorOperators.L2I,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertL2L_128_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, LongVector.SPECIES_128,\n-                a, L2L,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertL2F_128_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, FloatVector.SPECIES_128,\n-                a, VectorOperators.L2F,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertL2D_128_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, DoubleVector.SPECIES_128,\n-                a, VectorOperators.L2D,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2B_128_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, ByteVector.SPECIES_64,\n-                a, VectorOperators.L2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2B_128_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, ByteVector.SPECIES_128,\n-                a, VectorOperators.L2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2B_128_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, ByteVector.SPECIES_256,\n-                a, VectorOperators.L2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2B_128_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, ByteVector.SPECIES_512,\n-                a, VectorOperators.L2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2B_128_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, ByteVector.SPECIES_MAX,\n-                a, VectorOperators.L2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2S_128_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, ShortVector.SPECIES_64,\n-                a, VectorOperators.L2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2S_128_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, ShortVector.SPECIES_128,\n-                a, VectorOperators.L2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2S_128_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, ShortVector.SPECIES_256,\n-                a, VectorOperators.L2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2S_128_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, ShortVector.SPECIES_512,\n-                a, VectorOperators.L2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2S_128_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, ShortVector.SPECIES_MAX,\n-                a, VectorOperators.L2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2I_128_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, IntVector.SPECIES_64,\n-                a, VectorOperators.L2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2I_128_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, IntVector.SPECIES_128,\n-                a, VectorOperators.L2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2I_128_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, IntVector.SPECIES_256,\n-                a, VectorOperators.L2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2I_128_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, IntVector.SPECIES_512,\n-                a, VectorOperators.L2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2I_128_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, IntVector.SPECIES_MAX,\n-                a, VectorOperators.L2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2L_128_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, LongVector.SPECIES_64,\n-                a, L2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2L_128_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, LongVector.SPECIES_128,\n-                a, L2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2L_128_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, LongVector.SPECIES_256,\n-                a, L2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2L_128_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, LongVector.SPECIES_512,\n-                a, L2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2L_128_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, LongVector.SPECIES_MAX,\n-                a, L2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2F_128_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, FloatVector.SPECIES_64,\n-                a, VectorOperators.L2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2F_128_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, FloatVector.SPECIES_128,\n-                a, VectorOperators.L2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2F_128_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, FloatVector.SPECIES_256,\n-                a, VectorOperators.L2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2F_128_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, FloatVector.SPECIES_512,\n-                a, VectorOperators.L2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2F_128_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, FloatVector.SPECIES_MAX,\n-                a, VectorOperators.L2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2D_128_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, DoubleVector.SPECIES_64,\n-                a, VectorOperators.L2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2D_128_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, DoubleVector.SPECIES_128,\n-                a, VectorOperators.L2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2D_128_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, DoubleVector.SPECIES_256,\n-                a, VectorOperators.L2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2D_128_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, DoubleVector.SPECIES_512,\n-                a, VectorOperators.L2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2D_128_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, DoubleVector.SPECIES_MAX,\n-                a, VectorOperators.L2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2B_128_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, ByteVector.SPECIES_64,\n-                a, VectorOperators.L2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2B_128_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, ByteVector.SPECIES_128,\n-                a, VectorOperators.L2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2B_128_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, ByteVector.SPECIES_256,\n-                a, VectorOperators.L2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2B_128_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, ByteVector.SPECIES_512,\n-                a, VectorOperators.L2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2B_128_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, ByteVector.SPECIES_MAX,\n-                a, VectorOperators.L2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2S_128_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, ShortVector.SPECIES_64,\n-                a, VectorOperators.L2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2S_128_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, ShortVector.SPECIES_128,\n-                a, VectorOperators.L2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2S_128_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, ShortVector.SPECIES_256,\n-                a, VectorOperators.L2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2S_128_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, ShortVector.SPECIES_512,\n-                a, VectorOperators.L2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2S_128_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, ShortVector.SPECIES_MAX,\n-                a, VectorOperators.L2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2I_128_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, IntVector.SPECIES_64,\n-                a, VectorOperators.L2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2I_128_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, IntVector.SPECIES_128,\n-                a, VectorOperators.L2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2I_128_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, IntVector.SPECIES_256,\n-                a, VectorOperators.L2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2I_128_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, IntVector.SPECIES_512,\n-                a, VectorOperators.L2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2I_128_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, IntVector.SPECIES_MAX,\n-                a, VectorOperators.L2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2L_128_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, LongVector.SPECIES_64,\n-                a, L2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2L_128_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, LongVector.SPECIES_128,\n-                a, L2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2L_128_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, LongVector.SPECIES_256,\n-                a, L2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2L_128_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, LongVector.SPECIES_512,\n-                a, L2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2L_128_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, LongVector.SPECIES_MAX,\n-                a, L2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2F_128_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, FloatVector.SPECIES_64,\n-                a, VectorOperators.L2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2F_128_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, FloatVector.SPECIES_128,\n-                a, VectorOperators.L2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2F_128_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, FloatVector.SPECIES_256,\n-                a, VectorOperators.L2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2F_128_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, FloatVector.SPECIES_512,\n-                a, VectorOperators.L2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2F_128_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, FloatVector.SPECIES_MAX,\n-                a, VectorOperators.L2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2D_128_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, DoubleVector.SPECIES_64,\n-                a, VectorOperators.L2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2D_128_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, DoubleVector.SPECIES_128,\n-                a, VectorOperators.L2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2D_128_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, DoubleVector.SPECIES_256,\n-                a, VectorOperators.L2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2D_128_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, DoubleVector.SPECIES_512,\n-                a, VectorOperators.L2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2D_128_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_128, DoubleVector.SPECIES_MAX,\n-                a, VectorOperators.L2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2B_128_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_128, ByteVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2B_128_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_128, ByteVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2B_128_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_128, ByteVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2B_128_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_128, ByteVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2B_128_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_128, ByteVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2S_128_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_128, ShortVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2S_128_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_128, ShortVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2S_128_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_128, ShortVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2S_128_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_128, ShortVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2S_128_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_128, ShortVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2I_128_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_128, IntVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2I_128_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_128, IntVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2I_128_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_128, IntVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2I_128_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_128, IntVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2I_128_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_128, IntVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2L_128_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_128, LongVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2L_128_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_128, LongVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2L_128_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_128, LongVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2L_128_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_128, LongVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2L_128_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_128, LongVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2F_128_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_128, FloatVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2F_128_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_128, FloatVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2F_128_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_128, FloatVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2F_128_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_128, FloatVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2F_128_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_128, FloatVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2D_128_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_128, DoubleVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2D_128_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_128, DoubleVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2D_128_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_128, DoubleVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2D_128_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_128, DoubleVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2D_128_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_128, DoubleVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertS2B_128_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, ByteVector.SPECIES_128,\n-                a, VectorOperators.S2B,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertS2S_128_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, ShortVector.SPECIES_128,\n-                a, S2S,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertS2I_128_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, IntVector.SPECIES_128,\n-                a, VectorOperators.S2I,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertS2L_128_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, LongVector.SPECIES_128,\n-                a, VectorOperators.S2L,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertS2F_128_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, FloatVector.SPECIES_128,\n-                a, VectorOperators.S2F,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertS2D_128_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, DoubleVector.SPECIES_128,\n-                a, VectorOperators.S2D,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2B_128_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, ByteVector.SPECIES_64,\n-                a, VectorOperators.S2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2B_128_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, ByteVector.SPECIES_128,\n-                a, VectorOperators.S2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2B_128_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, ByteVector.SPECIES_256,\n-                a, VectorOperators.S2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2B_128_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, ByteVector.SPECIES_512,\n-                a, VectorOperators.S2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2B_128_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, ByteVector.SPECIES_MAX,\n-                a, VectorOperators.S2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2S_128_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, ShortVector.SPECIES_64,\n-                a, S2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2S_128_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, ShortVector.SPECIES_128,\n-                a, S2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2S_128_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, ShortVector.SPECIES_256,\n-                a, S2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2S_128_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, ShortVector.SPECIES_512,\n-                a, S2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2S_128_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, ShortVector.SPECIES_MAX,\n-                a, S2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2I_128_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, IntVector.SPECIES_64,\n-                a, VectorOperators.S2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2I_128_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, IntVector.SPECIES_128,\n-                a, VectorOperators.S2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2I_128_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, IntVector.SPECIES_256,\n-                a, VectorOperators.S2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2I_128_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, IntVector.SPECIES_512,\n-                a, VectorOperators.S2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2I_128_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, IntVector.SPECIES_MAX,\n-                a, VectorOperators.S2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2L_128_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, LongVector.SPECIES_64,\n-                a, VectorOperators.S2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2L_128_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, LongVector.SPECIES_128,\n-                a, VectorOperators.S2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2L_128_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, LongVector.SPECIES_256,\n-                a, VectorOperators.S2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2L_128_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, LongVector.SPECIES_512,\n-                a, VectorOperators.S2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2L_128_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, LongVector.SPECIES_MAX,\n-                a, VectorOperators.S2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2F_128_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, FloatVector.SPECIES_64,\n-                a, VectorOperators.S2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2F_128_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, FloatVector.SPECIES_128,\n-                a, VectorOperators.S2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2F_128_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, FloatVector.SPECIES_256,\n-                a, VectorOperators.S2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2F_128_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, FloatVector.SPECIES_512,\n-                a, VectorOperators.S2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2F_128_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, FloatVector.SPECIES_MAX,\n-                a, VectorOperators.S2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2D_128_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, DoubleVector.SPECIES_64,\n-                a, VectorOperators.S2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2D_128_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, DoubleVector.SPECIES_128,\n-                a, VectorOperators.S2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2D_128_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, DoubleVector.SPECIES_256,\n-                a, VectorOperators.S2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2D_128_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, DoubleVector.SPECIES_512,\n-                a, VectorOperators.S2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2D_128_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, DoubleVector.SPECIES_MAX,\n-                a, VectorOperators.S2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2B_128_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, ByteVector.SPECIES_64,\n-                a, VectorOperators.S2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2B_128_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, ByteVector.SPECIES_128,\n-                a, VectorOperators.S2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2B_128_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, ByteVector.SPECIES_256,\n-                a, VectorOperators.S2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2B_128_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, ByteVector.SPECIES_512,\n-                a, VectorOperators.S2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2B_128_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, ByteVector.SPECIES_MAX,\n-                a, VectorOperators.S2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2S_128_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, ShortVector.SPECIES_64,\n-                a, S2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2S_128_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, ShortVector.SPECIES_128,\n-                a, S2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2S_128_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, ShortVector.SPECIES_256,\n-                a, S2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2S_128_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, ShortVector.SPECIES_512,\n-                a, S2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2S_128_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, ShortVector.SPECIES_MAX,\n-                a, S2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2I_128_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, IntVector.SPECIES_64,\n-                a, VectorOperators.S2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2I_128_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, IntVector.SPECIES_128,\n-                a, VectorOperators.S2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2I_128_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, IntVector.SPECIES_256,\n-                a, VectorOperators.S2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2I_128_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, IntVector.SPECIES_512,\n-                a, VectorOperators.S2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2I_128_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, IntVector.SPECIES_MAX,\n-                a, VectorOperators.S2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2L_128_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, LongVector.SPECIES_64,\n-                a, VectorOperators.S2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2L_128_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, LongVector.SPECIES_128,\n-                a, VectorOperators.S2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2L_128_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, LongVector.SPECIES_256,\n-                a, VectorOperators.S2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2L_128_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, LongVector.SPECIES_512,\n-                a, VectorOperators.S2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2L_128_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, LongVector.SPECIES_MAX,\n-                a, VectorOperators.S2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2F_128_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, FloatVector.SPECIES_64,\n-                a, VectorOperators.S2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2F_128_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, FloatVector.SPECIES_128,\n-                a, VectorOperators.S2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2F_128_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, FloatVector.SPECIES_256,\n-                a, VectorOperators.S2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2F_128_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, FloatVector.SPECIES_512,\n-                a, VectorOperators.S2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2F_128_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, FloatVector.SPECIES_MAX,\n-                a, VectorOperators.S2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2D_128_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, DoubleVector.SPECIES_64,\n-                a, VectorOperators.S2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2D_128_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, DoubleVector.SPECIES_128,\n-                a, VectorOperators.S2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2D_128_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, DoubleVector.SPECIES_256,\n-                a, VectorOperators.S2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2D_128_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, DoubleVector.SPECIES_512,\n-                a, VectorOperators.S2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2D_128_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_128, DoubleVector.SPECIES_MAX,\n-                a, VectorOperators.S2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2B_128_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_128, ByteVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2B_128_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_128, ByteVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2B_128_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_128, ByteVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2B_128_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_128, ByteVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2B_128_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_128, ByteVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2S_128_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_128, ShortVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2S_128_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_128, ShortVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2S_128_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_128, ShortVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2S_128_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_128, ShortVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2S_128_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_128, ShortVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2I_128_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_128, IntVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2I_128_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_128, IntVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2I_128_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_128, IntVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2I_128_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_128, IntVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2I_128_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_128, IntVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2L_128_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_128, LongVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2L_128_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_128, LongVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2L_128_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_128, LongVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2L_128_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_128, LongVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2L_128_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_128, LongVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2F_128_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_128, FloatVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2F_128_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_128, FloatVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2F_128_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_128, FloatVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2F_128_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_128, FloatVector.SPECIES_512,\n-                a, a.length);\n-    }\n+    static final VectorShape SHAPE = VectorShape.S_128_BIT;\n@@ -4437,5 +44,3 @@\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2F_128_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_128, FloatVector.SPECIES_MAX,\n-                a, a.length);\n+    @DataProvider\n+    public Object[][] fixedShapeXfixedShape() {\n+        return fixedShapeXFixedShapeSpeciesArgs(SHAPE);\n@@ -4444,5 +49,3 @@\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2D_128_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_128, DoubleVector.SPECIES_64,\n-                a, a.length);\n+    @DataProvider\n+    public Object[][] fixedShapeXShape() {\n+        return fixedShapeXShapeSpeciesArgs(SHAPE);\n@@ -4451,5 +54,4 @@\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2D_128_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_128, DoubleVector.SPECIES_128,\n-                a, a.length);\n+    @Test(dataProvider = \"fixedShapeXfixedShape\")\n+    static <I, O> void convert(VectorSpecies<I> src, VectorSpecies<O> dst, IntFunction<?> fa) {\n+        Object a = fa.apply(1024);\n+        conversion_kernel(src, dst, a, ConvAPI.CONVERT);\n@@ -4458,5 +60,4 @@\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2D_128_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_128, DoubleVector.SPECIES_256,\n-                a, a.length);\n+    @Test(dataProvider = \"fixedShapeXShape\")\n+    static <I, O> void convertShape(VectorSpecies<I> src, VectorSpecies<O> dst, IntFunction<?> fa) {\n+        Object a = fa.apply(1024);\n+        conversion_kernel(src, dst, a, ConvAPI.CONVERTSHAPE);\n@@ -4465,5 +66,4 @@\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2D_128_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_128, DoubleVector.SPECIES_512,\n-                a, a.length);\n+    @Test(dataProvider = \"fixedShapeXShape\")\n+    static <I, O> void castShape(VectorSpecies<I> src, VectorSpecies<O> dst, IntFunction<?> fa) {\n+        Object a = fa.apply(1024);\n+        conversion_kernel(src, dst, a, ConvAPI.CASTSHAPE);\n@@ -4472,5 +72,4 @@\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2D_128_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_128, DoubleVector.SPECIES_MAX,\n-                a, a.length);\n+    @Test(dataProvider = \"fixedShapeXShape\")\n+    static <I, O> void reinterpret(VectorSpecies<I> src, VectorSpecies<O> dst, IntFunction<?> fa) {\n+        Object a = fa.apply(1024);\n+        reinterpret_kernel(src, dst, a);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Vector128ConversionTests.java","additions":26,"deletions":4427,"binary":false,"changes":4453,"status":"modified"},{"patch":"@@ -24,7 +24,3 @@\n-import jdk.incubator.vector.ByteVector;\n-import jdk.incubator.vector.DoubleVector;\n-import jdk.incubator.vector.FloatVector;\n-import jdk.incubator.vector.IntVector;\n-import jdk.incubator.vector.LongVector;\n-import jdk.incubator.vector.ShortVector;\n-import jdk.incubator.vector.VectorOperators;\n+import jdk.incubator.vector.VectorShape;\n+import jdk.incubator.vector.VectorSpecies;\n+import org.testng.annotations.DataProvider;\n@@ -46,4390 +42,1 @@\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertB2B_256_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, ByteVector.SPECIES_256,\n-                a, B2B,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertB2S_256_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, ShortVector.SPECIES_256,\n-                a, VectorOperators.B2S,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertB2I_256_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, IntVector.SPECIES_256,\n-                a, VectorOperators.B2I,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertB2L_256_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, LongVector.SPECIES_256,\n-                a, VectorOperators.B2L,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertB2F_256_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, FloatVector.SPECIES_256,\n-                a, VectorOperators.B2F,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertB2D_256_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, DoubleVector.SPECIES_256,\n-                a, VectorOperators.B2D,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2B_256_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, ByteVector.SPECIES_64,\n-                a, B2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2B_256_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, ByteVector.SPECIES_128,\n-                a, B2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2B_256_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, ByteVector.SPECIES_256,\n-                a, B2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2B_256_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, ByteVector.SPECIES_512,\n-                a, B2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2B_256_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, ByteVector.SPECIES_MAX,\n-                a, B2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2S_256_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, ShortVector.SPECIES_64,\n-                a, VectorOperators.B2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2S_256_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, ShortVector.SPECIES_128,\n-                a, VectorOperators.B2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2S_256_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, ShortVector.SPECIES_256,\n-                a, VectorOperators.B2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2S_256_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, ShortVector.SPECIES_512,\n-                a, VectorOperators.B2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2S_256_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, ShortVector.SPECIES_MAX,\n-                a, VectorOperators.B2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2I_256_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, IntVector.SPECIES_64,\n-                a, VectorOperators.B2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2I_256_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, IntVector.SPECIES_128,\n-                a, VectorOperators.B2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2I_256_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, IntVector.SPECIES_256,\n-                a, VectorOperators.B2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2I_256_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, IntVector.SPECIES_512,\n-                a, VectorOperators.B2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2I_256_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, IntVector.SPECIES_MAX,\n-                a, VectorOperators.B2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2L_256_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, LongVector.SPECIES_64,\n-                a, VectorOperators.B2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2L_256_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, LongVector.SPECIES_128,\n-                a, VectorOperators.B2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2L_256_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, LongVector.SPECIES_256,\n-                a, VectorOperators.B2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2L_256_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, LongVector.SPECIES_512,\n-                a, VectorOperators.B2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2L_256_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, LongVector.SPECIES_MAX,\n-                a, VectorOperators.B2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2F_256_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, FloatVector.SPECIES_64,\n-                a, VectorOperators.B2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2F_256_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, FloatVector.SPECIES_128,\n-                a, VectorOperators.B2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2F_256_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, FloatVector.SPECIES_256,\n-                a, VectorOperators.B2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2F_256_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, FloatVector.SPECIES_512,\n-                a, VectorOperators.B2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2F_256_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, FloatVector.SPECIES_MAX,\n-                a, VectorOperators.B2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2D_256_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, DoubleVector.SPECIES_64,\n-                a, VectorOperators.B2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2D_256_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, DoubleVector.SPECIES_128,\n-                a, VectorOperators.B2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2D_256_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, DoubleVector.SPECIES_256,\n-                a, VectorOperators.B2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2D_256_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, DoubleVector.SPECIES_512,\n-                a, VectorOperators.B2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2D_256_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, DoubleVector.SPECIES_MAX,\n-                a, VectorOperators.B2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2B_256_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, ByteVector.SPECIES_64,\n-                a, B2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2B_256_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, ByteVector.SPECIES_128,\n-                a, B2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2B_256_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, ByteVector.SPECIES_256,\n-                a, B2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2B_256_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, ByteVector.SPECIES_512,\n-                a, B2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2B_256_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, ByteVector.SPECIES_MAX,\n-                a, B2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2S_256_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, ShortVector.SPECIES_64,\n-                a, VectorOperators.B2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2S_256_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, ShortVector.SPECIES_128,\n-                a, VectorOperators.B2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2S_256_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, ShortVector.SPECIES_256,\n-                a, VectorOperators.B2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2S_256_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, ShortVector.SPECIES_512,\n-                a, VectorOperators.B2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2S_256_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, ShortVector.SPECIES_MAX,\n-                a, VectorOperators.B2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2I_256_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, IntVector.SPECIES_64,\n-                a, VectorOperators.B2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2I_256_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, IntVector.SPECIES_128,\n-                a, VectorOperators.B2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2I_256_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, IntVector.SPECIES_256,\n-                a, VectorOperators.B2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2I_256_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, IntVector.SPECIES_512,\n-                a, VectorOperators.B2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2I_256_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, IntVector.SPECIES_MAX,\n-                a, VectorOperators.B2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2L_256_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, LongVector.SPECIES_64,\n-                a, VectorOperators.B2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2L_256_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, LongVector.SPECIES_128,\n-                a, VectorOperators.B2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2L_256_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, LongVector.SPECIES_256,\n-                a, VectorOperators.B2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2L_256_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, LongVector.SPECIES_512,\n-                a, VectorOperators.B2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2L_256_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, LongVector.SPECIES_MAX,\n-                a, VectorOperators.B2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2F_256_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, FloatVector.SPECIES_64,\n-                a, VectorOperators.B2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2F_256_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, FloatVector.SPECIES_128,\n-                a, VectorOperators.B2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2F_256_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, FloatVector.SPECIES_256,\n-                a, VectorOperators.B2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2F_256_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, FloatVector.SPECIES_512,\n-                a, VectorOperators.B2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2F_256_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, FloatVector.SPECIES_MAX,\n-                a, VectorOperators.B2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2D_256_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, DoubleVector.SPECIES_64,\n-                a, VectorOperators.B2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2D_256_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, DoubleVector.SPECIES_128,\n-                a, VectorOperators.B2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2D_256_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, DoubleVector.SPECIES_256,\n-                a, VectorOperators.B2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2D_256_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, DoubleVector.SPECIES_512,\n-                a, VectorOperators.B2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2D_256_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_256, DoubleVector.SPECIES_MAX,\n-                a, VectorOperators.B2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2B_256_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_256, ByteVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2B_256_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_256, ByteVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2B_256_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_256, ByteVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2B_256_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_256, ByteVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2B_256_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_256, ByteVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2S_256_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_256, ShortVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2S_256_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_256, ShortVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2S_256_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_256, ShortVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2S_256_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_256, ShortVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2S_256_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_256, ShortVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2I_256_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_256, IntVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2I_256_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_256, IntVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2I_256_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_256, IntVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2I_256_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_256, IntVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2I_256_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_256, IntVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2L_256_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_256, LongVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2L_256_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_256, LongVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2L_256_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_256, LongVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2L_256_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_256, LongVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2L_256_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_256, LongVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2F_256_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_256, FloatVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2F_256_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_256, FloatVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2F_256_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_256, FloatVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2F_256_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_256, FloatVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2F_256_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_256, FloatVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2D_256_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_256, DoubleVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2D_256_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_256, DoubleVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2D_256_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_256, DoubleVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2D_256_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_256, DoubleVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2D_256_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_256, DoubleVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertD2B_256_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, ByteVector.SPECIES_256,\n-                a, VectorOperators.D2B,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertD2S_256_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, ShortVector.SPECIES_256,\n-                a, VectorOperators.D2S,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertD2I_256_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, IntVector.SPECIES_256,\n-                a, VectorOperators.D2I,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertD2L_256_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, LongVector.SPECIES_256,\n-                a, VectorOperators.D2L,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertD2F_256_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, FloatVector.SPECIES_256,\n-                a, VectorOperators.D2F,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertD2D_256_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, DoubleVector.SPECIES_256,\n-                a, D2D,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2B_256_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, ByteVector.SPECIES_64,\n-                a, VectorOperators.D2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2B_256_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, ByteVector.SPECIES_128,\n-                a, VectorOperators.D2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2B_256_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, ByteVector.SPECIES_256,\n-                a, VectorOperators.D2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2B_256_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, ByteVector.SPECIES_512,\n-                a, VectorOperators.D2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2B_256_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, ByteVector.SPECIES_MAX,\n-                a, VectorOperators.D2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2S_256_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, ShortVector.SPECIES_64,\n-                a, VectorOperators.D2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2S_256_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, ShortVector.SPECIES_128,\n-                a, VectorOperators.D2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2S_256_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, ShortVector.SPECIES_256,\n-                a, VectorOperators.D2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2S_256_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, ShortVector.SPECIES_512,\n-                a, VectorOperators.D2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2S_256_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, ShortVector.SPECIES_MAX,\n-                a, VectorOperators.D2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2I_256_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, IntVector.SPECIES_64,\n-                a, VectorOperators.D2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2I_256_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, IntVector.SPECIES_128,\n-                a, VectorOperators.D2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2I_256_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, IntVector.SPECIES_256,\n-                a, VectorOperators.D2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2I_256_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, IntVector.SPECIES_512,\n-                a, VectorOperators.D2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2I_256_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, IntVector.SPECIES_MAX,\n-                a, VectorOperators.D2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2L_256_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, LongVector.SPECIES_64,\n-                a, VectorOperators.D2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2L_256_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, LongVector.SPECIES_128,\n-                a, VectorOperators.D2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2L_256_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, LongVector.SPECIES_256,\n-                a, VectorOperators.D2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2L_256_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, LongVector.SPECIES_512,\n-                a, VectorOperators.D2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2L_256_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, LongVector.SPECIES_MAX,\n-                a, VectorOperators.D2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2F_256_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, FloatVector.SPECIES_64,\n-                a, VectorOperators.D2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2F_256_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, FloatVector.SPECIES_128,\n-                a, VectorOperators.D2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2F_256_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, FloatVector.SPECIES_256,\n-                a, VectorOperators.D2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2F_256_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, FloatVector.SPECIES_512,\n-                a, VectorOperators.D2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2F_256_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, FloatVector.SPECIES_MAX,\n-                a, VectorOperators.D2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2D_256_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, DoubleVector.SPECIES_64,\n-                a, D2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2D_256_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, DoubleVector.SPECIES_128,\n-                a, D2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2D_256_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, DoubleVector.SPECIES_256,\n-                a, D2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2D_256_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, DoubleVector.SPECIES_512,\n-                a, D2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2D_256_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, DoubleVector.SPECIES_MAX,\n-                a, D2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2B_256_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, ByteVector.SPECIES_64,\n-                a, VectorOperators.D2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2B_256_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, ByteVector.SPECIES_128,\n-                a, VectorOperators.D2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2B_256_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, ByteVector.SPECIES_256,\n-                a, VectorOperators.D2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2B_256_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, ByteVector.SPECIES_512,\n-                a, VectorOperators.D2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2B_256_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, ByteVector.SPECIES_MAX,\n-                a, VectorOperators.D2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2S_256_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, ShortVector.SPECIES_64,\n-                a, VectorOperators.D2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2S_256_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, ShortVector.SPECIES_128,\n-                a, VectorOperators.D2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2S_256_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, ShortVector.SPECIES_256,\n-                a, VectorOperators.D2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2S_256_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, ShortVector.SPECIES_512,\n-                a, VectorOperators.D2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2S_256_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, ShortVector.SPECIES_MAX,\n-                a, VectorOperators.D2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2I_256_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, IntVector.SPECIES_64,\n-                a, VectorOperators.D2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2I_256_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, IntVector.SPECIES_128,\n-                a, VectorOperators.D2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2I_256_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, IntVector.SPECIES_256,\n-                a, VectorOperators.D2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2I_256_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, IntVector.SPECIES_512,\n-                a, VectorOperators.D2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2I_256_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, IntVector.SPECIES_MAX,\n-                a, VectorOperators.D2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2L_256_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, LongVector.SPECIES_64,\n-                a, VectorOperators.D2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2L_256_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, LongVector.SPECIES_128,\n-                a, VectorOperators.D2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2L_256_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, LongVector.SPECIES_256,\n-                a, VectorOperators.D2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2L_256_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, LongVector.SPECIES_512,\n-                a, VectorOperators.D2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2L_256_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, LongVector.SPECIES_MAX,\n-                a, VectorOperators.D2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2F_256_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, FloatVector.SPECIES_64,\n-                a, VectorOperators.D2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2F_256_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, FloatVector.SPECIES_128,\n-                a, VectorOperators.D2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2F_256_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, FloatVector.SPECIES_256,\n-                a, VectorOperators.D2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2F_256_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, FloatVector.SPECIES_512,\n-                a, VectorOperators.D2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2F_256_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, FloatVector.SPECIES_MAX,\n-                a, VectorOperators.D2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2D_256_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, DoubleVector.SPECIES_64,\n-                a, D2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2D_256_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, DoubleVector.SPECIES_128,\n-                a, D2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2D_256_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, DoubleVector.SPECIES_256,\n-                a, D2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2D_256_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, DoubleVector.SPECIES_512,\n-                a, D2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2D_256_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_256, DoubleVector.SPECIES_MAX,\n-                a, D2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2B_256_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_256, ByteVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2B_256_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_256, ByteVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2B_256_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_256, ByteVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2B_256_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_256, ByteVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2B_256_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_256, ByteVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2S_256_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_256, ShortVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2S_256_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_256, ShortVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2S_256_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_256, ShortVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2S_256_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_256, ShortVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2S_256_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_256, ShortVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2I_256_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_256, IntVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2I_256_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_256, IntVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2I_256_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_256, IntVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2I_256_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_256, IntVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2I_256_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_256, IntVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2L_256_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_256, LongVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2L_256_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_256, LongVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2L_256_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_256, LongVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2L_256_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_256, LongVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2L_256_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_256, LongVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2F_256_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_256, FloatVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2F_256_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_256, FloatVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2F_256_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_256, FloatVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2F_256_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_256, FloatVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2F_256_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_256, FloatVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2D_256_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_256, DoubleVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2D_256_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_256, DoubleVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2D_256_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_256, DoubleVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2D_256_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_256, DoubleVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2D_256_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_256, DoubleVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertF2B_256_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, ByteVector.SPECIES_256,\n-                a, VectorOperators.F2B,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertF2S_256_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, ShortVector.SPECIES_256,\n-                a, VectorOperators.F2S,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertF2I_256_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, IntVector.SPECIES_256,\n-                a, VectorOperators.F2I,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertF2L_256_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, LongVector.SPECIES_256,\n-                a, VectorOperators.F2L,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertF2F_256_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, FloatVector.SPECIES_256,\n-                a, F2F,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertF2D_256_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, DoubleVector.SPECIES_256,\n-                a, VectorOperators.F2D,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2B_256_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, ByteVector.SPECIES_64,\n-                a, VectorOperators.F2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2B_256_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, ByteVector.SPECIES_128,\n-                a, VectorOperators.F2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2B_256_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, ByteVector.SPECIES_256,\n-                a, VectorOperators.F2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2B_256_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, ByteVector.SPECIES_512,\n-                a, VectorOperators.F2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2B_256_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, ByteVector.SPECIES_MAX,\n-                a, VectorOperators.F2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2S_256_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, ShortVector.SPECIES_64,\n-                a, VectorOperators.F2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2S_256_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, ShortVector.SPECIES_128,\n-                a, VectorOperators.F2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2S_256_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, ShortVector.SPECIES_256,\n-                a, VectorOperators.F2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2S_256_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, ShortVector.SPECIES_512,\n-                a, VectorOperators.F2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2S_256_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, ShortVector.SPECIES_MAX,\n-                a, VectorOperators.F2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2I_256_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, IntVector.SPECIES_64,\n-                a, VectorOperators.F2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2I_256_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, IntVector.SPECIES_128,\n-                a, VectorOperators.F2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2I_256_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, IntVector.SPECIES_256,\n-                a, VectorOperators.F2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2I_256_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, IntVector.SPECIES_512,\n-                a, VectorOperators.F2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2I_256_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, IntVector.SPECIES_MAX,\n-                a, VectorOperators.F2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2L_256_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, LongVector.SPECIES_64,\n-                a, VectorOperators.F2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2L_256_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, LongVector.SPECIES_128,\n-                a, VectorOperators.F2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2L_256_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, LongVector.SPECIES_256,\n-                a, VectorOperators.F2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2L_256_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, LongVector.SPECIES_512,\n-                a, VectorOperators.F2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2L_256_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, LongVector.SPECIES_MAX,\n-                a, VectorOperators.F2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2F_256_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, FloatVector.SPECIES_64,\n-                a, F2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2F_256_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, FloatVector.SPECIES_128,\n-                a, F2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2F_256_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, FloatVector.SPECIES_256,\n-                a, F2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2F_256_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, FloatVector.SPECIES_512,\n-                a, F2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2F_256_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, FloatVector.SPECIES_MAX,\n-                a, F2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2D_256_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, DoubleVector.SPECIES_64,\n-                a, VectorOperators.F2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2D_256_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, DoubleVector.SPECIES_128,\n-                a, VectorOperators.F2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2D_256_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, DoubleVector.SPECIES_256,\n-                a, VectorOperators.F2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2D_256_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, DoubleVector.SPECIES_512,\n-                a, VectorOperators.F2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2D_256_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, DoubleVector.SPECIES_MAX,\n-                a, VectorOperators.F2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2B_256_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, ByteVector.SPECIES_64,\n-                a, VectorOperators.F2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2B_256_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, ByteVector.SPECIES_128,\n-                a, VectorOperators.F2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2B_256_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, ByteVector.SPECIES_256,\n-                a, VectorOperators.F2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2B_256_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, ByteVector.SPECIES_512,\n-                a, VectorOperators.F2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2B_256_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, ByteVector.SPECIES_MAX,\n-                a, VectorOperators.F2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2S_256_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, ShortVector.SPECIES_64,\n-                a, VectorOperators.F2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2S_256_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, ShortVector.SPECIES_128,\n-                a, VectorOperators.F2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2S_256_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, ShortVector.SPECIES_256,\n-                a, VectorOperators.F2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2S_256_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, ShortVector.SPECIES_512,\n-                a, VectorOperators.F2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2S_256_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, ShortVector.SPECIES_MAX,\n-                a, VectorOperators.F2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2I_256_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, IntVector.SPECIES_64,\n-                a, VectorOperators.F2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2I_256_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, IntVector.SPECIES_128,\n-                a, VectorOperators.F2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2I_256_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, IntVector.SPECIES_256,\n-                a, VectorOperators.F2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2I_256_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, IntVector.SPECIES_512,\n-                a, VectorOperators.F2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2I_256_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, IntVector.SPECIES_MAX,\n-                a, VectorOperators.F2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2L_256_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, LongVector.SPECIES_64,\n-                a, VectorOperators.F2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2L_256_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, LongVector.SPECIES_128,\n-                a, VectorOperators.F2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2L_256_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, LongVector.SPECIES_256,\n-                a, VectorOperators.F2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2L_256_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, LongVector.SPECIES_512,\n-                a, VectorOperators.F2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2L_256_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, LongVector.SPECIES_MAX,\n-                a, VectorOperators.F2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2F_256_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, FloatVector.SPECIES_64,\n-                a, F2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2F_256_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, FloatVector.SPECIES_128,\n-                a, F2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2F_256_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, FloatVector.SPECIES_256,\n-                a, F2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2F_256_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, FloatVector.SPECIES_512,\n-                a, F2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2F_256_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, FloatVector.SPECIES_MAX,\n-                a, F2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2D_256_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, DoubleVector.SPECIES_64,\n-                a, VectorOperators.F2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2D_256_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, DoubleVector.SPECIES_128,\n-                a, VectorOperators.F2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2D_256_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, DoubleVector.SPECIES_256,\n-                a, VectorOperators.F2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2D_256_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, DoubleVector.SPECIES_512,\n-                a, VectorOperators.F2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2D_256_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_256, DoubleVector.SPECIES_MAX,\n-                a, VectorOperators.F2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2B_256_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_256, ByteVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2B_256_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_256, ByteVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2B_256_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_256, ByteVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2B_256_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_256, ByteVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2B_256_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_256, ByteVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2S_256_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_256, ShortVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2S_256_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_256, ShortVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2S_256_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_256, ShortVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2S_256_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_256, ShortVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2S_256_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_256, ShortVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2I_256_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_256, IntVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2I_256_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_256, IntVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2I_256_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_256, IntVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2I_256_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_256, IntVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2I_256_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_256, IntVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2L_256_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_256, LongVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2L_256_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_256, LongVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2L_256_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_256, LongVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2L_256_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_256, LongVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2L_256_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_256, LongVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2F_256_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_256, FloatVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2F_256_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_256, FloatVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2F_256_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_256, FloatVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2F_256_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_256, FloatVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2F_256_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_256, FloatVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2D_256_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_256, DoubleVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2D_256_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_256, DoubleVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2D_256_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_256, DoubleVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2D_256_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_256, DoubleVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2D_256_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_256, DoubleVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertI2B_256_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, ByteVector.SPECIES_256,\n-                a, VectorOperators.I2B,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertI2S_256_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, ShortVector.SPECIES_256,\n-                a, VectorOperators.I2S,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertI2I_256_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, IntVector.SPECIES_256,\n-                a, I2I,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertI2L_256_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, LongVector.SPECIES_256,\n-                a, VectorOperators.I2L,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertI2F_256_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, FloatVector.SPECIES_256,\n-                a, VectorOperators.I2F,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertI2D_256_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, DoubleVector.SPECIES_256,\n-                a, VectorOperators.I2D,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2B_256_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, ByteVector.SPECIES_64,\n-                a, VectorOperators.I2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2B_256_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, ByteVector.SPECIES_128,\n-                a, VectorOperators.I2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2B_256_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, ByteVector.SPECIES_256,\n-                a, VectorOperators.I2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2B_256_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, ByteVector.SPECIES_512,\n-                a, VectorOperators.I2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2B_256_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, ByteVector.SPECIES_MAX,\n-                a, VectorOperators.I2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2S_256_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, ShortVector.SPECIES_64,\n-                a, VectorOperators.I2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2S_256_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, ShortVector.SPECIES_128,\n-                a, VectorOperators.I2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2S_256_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, ShortVector.SPECIES_256,\n-                a, VectorOperators.I2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2S_256_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, ShortVector.SPECIES_512,\n-                a, VectorOperators.I2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2S_256_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, ShortVector.SPECIES_MAX,\n-                a, VectorOperators.I2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2I_256_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, IntVector.SPECIES_64,\n-                a, I2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2I_256_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, IntVector.SPECIES_128,\n-                a, I2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2I_256_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, IntVector.SPECIES_256,\n-                a, I2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2I_256_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, IntVector.SPECIES_512,\n-                a, I2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2I_256_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, IntVector.SPECIES_MAX,\n-                a, I2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2L_256_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, LongVector.SPECIES_64,\n-                a, VectorOperators.I2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2L_256_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, LongVector.SPECIES_128,\n-                a, VectorOperators.I2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2L_256_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, LongVector.SPECIES_256,\n-                a, VectorOperators.I2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2L_256_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, LongVector.SPECIES_512,\n-                a, VectorOperators.I2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2L_256_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, LongVector.SPECIES_MAX,\n-                a, VectorOperators.I2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2F_256_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, FloatVector.SPECIES_64,\n-                a, VectorOperators.I2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2F_256_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, FloatVector.SPECIES_128,\n-                a, VectorOperators.I2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2F_256_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, FloatVector.SPECIES_256,\n-                a, VectorOperators.I2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2F_256_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, FloatVector.SPECIES_512,\n-                a, VectorOperators.I2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2F_256_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, FloatVector.SPECIES_MAX,\n-                a, VectorOperators.I2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2D_256_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, DoubleVector.SPECIES_64,\n-                a, VectorOperators.I2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2D_256_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, DoubleVector.SPECIES_128,\n-                a, VectorOperators.I2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2D_256_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, DoubleVector.SPECIES_256,\n-                a, VectorOperators.I2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2D_256_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, DoubleVector.SPECIES_512,\n-                a, VectorOperators.I2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2D_256_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, DoubleVector.SPECIES_MAX,\n-                a, VectorOperators.I2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2B_256_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, ByteVector.SPECIES_64,\n-                a, VectorOperators.I2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2B_256_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, ByteVector.SPECIES_128,\n-                a, VectorOperators.I2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2B_256_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, ByteVector.SPECIES_256,\n-                a, VectorOperators.I2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2B_256_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, ByteVector.SPECIES_512,\n-                a, VectorOperators.I2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2B_256_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, ByteVector.SPECIES_MAX,\n-                a, VectorOperators.I2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2S_256_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, ShortVector.SPECIES_64,\n-                a, VectorOperators.I2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2S_256_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, ShortVector.SPECIES_128,\n-                a, VectorOperators.I2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2S_256_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, ShortVector.SPECIES_256,\n-                a, VectorOperators.I2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2S_256_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, ShortVector.SPECIES_512,\n-                a, VectorOperators.I2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2S_256_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, ShortVector.SPECIES_MAX,\n-                a, VectorOperators.I2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2I_256_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, IntVector.SPECIES_64,\n-                a, I2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2I_256_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, IntVector.SPECIES_128,\n-                a, I2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2I_256_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, IntVector.SPECIES_256,\n-                a, I2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2I_256_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, IntVector.SPECIES_512,\n-                a, I2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2I_256_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, IntVector.SPECIES_MAX,\n-                a, I2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2L_256_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, LongVector.SPECIES_64,\n-                a, VectorOperators.I2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2L_256_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, LongVector.SPECIES_128,\n-                a, VectorOperators.I2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2L_256_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, LongVector.SPECIES_256,\n-                a, VectorOperators.I2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2L_256_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, LongVector.SPECIES_512,\n-                a, VectorOperators.I2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2L_256_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, LongVector.SPECIES_MAX,\n-                a, VectorOperators.I2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2F_256_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, FloatVector.SPECIES_64,\n-                a, VectorOperators.I2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2F_256_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, FloatVector.SPECIES_128,\n-                a, VectorOperators.I2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2F_256_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, FloatVector.SPECIES_256,\n-                a, VectorOperators.I2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2F_256_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, FloatVector.SPECIES_512,\n-                a, VectorOperators.I2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2F_256_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, FloatVector.SPECIES_MAX,\n-                a, VectorOperators.I2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2D_256_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, DoubleVector.SPECIES_64,\n-                a, VectorOperators.I2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2D_256_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, DoubleVector.SPECIES_128,\n-                a, VectorOperators.I2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2D_256_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, DoubleVector.SPECIES_256,\n-                a, VectorOperators.I2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2D_256_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, DoubleVector.SPECIES_512,\n-                a, VectorOperators.I2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2D_256_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_256, DoubleVector.SPECIES_MAX,\n-                a, VectorOperators.I2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2B_256_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_256, ByteVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2B_256_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_256, ByteVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2B_256_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_256, ByteVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2B_256_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_256, ByteVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2B_256_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_256, ByteVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2S_256_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_256, ShortVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2S_256_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_256, ShortVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2S_256_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_256, ShortVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2S_256_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_256, ShortVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2S_256_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_256, ShortVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2I_256_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_256, IntVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2I_256_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_256, IntVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2I_256_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_256, IntVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2I_256_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_256, IntVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2I_256_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_256, IntVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2L_256_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_256, LongVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2L_256_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_256, LongVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2L_256_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_256, LongVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2L_256_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_256, LongVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2L_256_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_256, LongVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2F_256_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_256, FloatVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2F_256_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_256, FloatVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2F_256_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_256, FloatVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2F_256_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_256, FloatVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2F_256_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_256, FloatVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2D_256_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_256, DoubleVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2D_256_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_256, DoubleVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2D_256_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_256, DoubleVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2D_256_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_256, DoubleVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2D_256_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_256, DoubleVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertL2B_256_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, ByteVector.SPECIES_256,\n-                a, VectorOperators.L2B,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertL2S_256_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, ShortVector.SPECIES_256,\n-                a, VectorOperators.L2S,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertL2I_256_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, IntVector.SPECIES_256,\n-                a, VectorOperators.L2I,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertL2L_256_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, LongVector.SPECIES_256,\n-                a, L2L,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertL2F_256_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, FloatVector.SPECIES_256,\n-                a, VectorOperators.L2F,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertL2D_256_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, DoubleVector.SPECIES_256,\n-                a, VectorOperators.L2D,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2B_256_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, ByteVector.SPECIES_64,\n-                a, VectorOperators.L2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2B_256_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, ByteVector.SPECIES_128,\n-                a, VectorOperators.L2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2B_256_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, ByteVector.SPECIES_256,\n-                a, VectorOperators.L2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2B_256_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, ByteVector.SPECIES_512,\n-                a, VectorOperators.L2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2B_256_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, ByteVector.SPECIES_MAX,\n-                a, VectorOperators.L2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2S_256_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, ShortVector.SPECIES_64,\n-                a, VectorOperators.L2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2S_256_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, ShortVector.SPECIES_128,\n-                a, VectorOperators.L2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2S_256_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, ShortVector.SPECIES_256,\n-                a, VectorOperators.L2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2S_256_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, ShortVector.SPECIES_512,\n-                a, VectorOperators.L2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2S_256_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, ShortVector.SPECIES_MAX,\n-                a, VectorOperators.L2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2I_256_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, IntVector.SPECIES_64,\n-                a, VectorOperators.L2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2I_256_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, IntVector.SPECIES_128,\n-                a, VectorOperators.L2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2I_256_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, IntVector.SPECIES_256,\n-                a, VectorOperators.L2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2I_256_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, IntVector.SPECIES_512,\n-                a, VectorOperators.L2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2I_256_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, IntVector.SPECIES_MAX,\n-                a, VectorOperators.L2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2L_256_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, LongVector.SPECIES_64,\n-                a, L2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2L_256_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, LongVector.SPECIES_128,\n-                a, L2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2L_256_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, LongVector.SPECIES_256,\n-                a, L2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2L_256_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, LongVector.SPECIES_512,\n-                a, L2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2L_256_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, LongVector.SPECIES_MAX,\n-                a, L2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2F_256_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, FloatVector.SPECIES_64,\n-                a, VectorOperators.L2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2F_256_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, FloatVector.SPECIES_128,\n-                a, VectorOperators.L2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2F_256_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, FloatVector.SPECIES_256,\n-                a, VectorOperators.L2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2F_256_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, FloatVector.SPECIES_512,\n-                a, VectorOperators.L2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2F_256_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, FloatVector.SPECIES_MAX,\n-                a, VectorOperators.L2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2D_256_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, DoubleVector.SPECIES_64,\n-                a, VectorOperators.L2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2D_256_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, DoubleVector.SPECIES_128,\n-                a, VectorOperators.L2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2D_256_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, DoubleVector.SPECIES_256,\n-                a, VectorOperators.L2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2D_256_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, DoubleVector.SPECIES_512,\n-                a, VectorOperators.L2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2D_256_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, DoubleVector.SPECIES_MAX,\n-                a, VectorOperators.L2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2B_256_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, ByteVector.SPECIES_64,\n-                a, VectorOperators.L2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2B_256_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, ByteVector.SPECIES_128,\n-                a, VectorOperators.L2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2B_256_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, ByteVector.SPECIES_256,\n-                a, VectorOperators.L2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2B_256_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, ByteVector.SPECIES_512,\n-                a, VectorOperators.L2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2B_256_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, ByteVector.SPECIES_MAX,\n-                a, VectorOperators.L2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2S_256_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, ShortVector.SPECIES_64,\n-                a, VectorOperators.L2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2S_256_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, ShortVector.SPECIES_128,\n-                a, VectorOperators.L2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2S_256_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, ShortVector.SPECIES_256,\n-                a, VectorOperators.L2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2S_256_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, ShortVector.SPECIES_512,\n-                a, VectorOperators.L2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2S_256_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, ShortVector.SPECIES_MAX,\n-                a, VectorOperators.L2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2I_256_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, IntVector.SPECIES_64,\n-                a, VectorOperators.L2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2I_256_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, IntVector.SPECIES_128,\n-                a, VectorOperators.L2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2I_256_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, IntVector.SPECIES_256,\n-                a, VectorOperators.L2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2I_256_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, IntVector.SPECIES_512,\n-                a, VectorOperators.L2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2I_256_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, IntVector.SPECIES_MAX,\n-                a, VectorOperators.L2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2L_256_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, LongVector.SPECIES_64,\n-                a, L2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2L_256_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, LongVector.SPECIES_128,\n-                a, L2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2L_256_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, LongVector.SPECIES_256,\n-                a, L2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2L_256_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, LongVector.SPECIES_512,\n-                a, L2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2L_256_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, LongVector.SPECIES_MAX,\n-                a, L2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2F_256_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, FloatVector.SPECIES_64,\n-                a, VectorOperators.L2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2F_256_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, FloatVector.SPECIES_128,\n-                a, VectorOperators.L2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2F_256_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, FloatVector.SPECIES_256,\n-                a, VectorOperators.L2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2F_256_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, FloatVector.SPECIES_512,\n-                a, VectorOperators.L2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2F_256_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, FloatVector.SPECIES_MAX,\n-                a, VectorOperators.L2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2D_256_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, DoubleVector.SPECIES_64,\n-                a, VectorOperators.L2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2D_256_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, DoubleVector.SPECIES_128,\n-                a, VectorOperators.L2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2D_256_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, DoubleVector.SPECIES_256,\n-                a, VectorOperators.L2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2D_256_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, DoubleVector.SPECIES_512,\n-                a, VectorOperators.L2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2D_256_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_256, DoubleVector.SPECIES_MAX,\n-                a, VectorOperators.L2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2B_256_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_256, ByteVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2B_256_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_256, ByteVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2B_256_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_256, ByteVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2B_256_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_256, ByteVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2B_256_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_256, ByteVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2S_256_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_256, ShortVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2S_256_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_256, ShortVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2S_256_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_256, ShortVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2S_256_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_256, ShortVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2S_256_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_256, ShortVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2I_256_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_256, IntVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2I_256_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_256, IntVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2I_256_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_256, IntVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2I_256_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_256, IntVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2I_256_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_256, IntVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2L_256_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_256, LongVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2L_256_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_256, LongVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2L_256_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_256, LongVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2L_256_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_256, LongVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2L_256_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_256, LongVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2F_256_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_256, FloatVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2F_256_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_256, FloatVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2F_256_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_256, FloatVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2F_256_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_256, FloatVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2F_256_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_256, FloatVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2D_256_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_256, DoubleVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2D_256_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_256, DoubleVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2D_256_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_256, DoubleVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2D_256_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_256, DoubleVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2D_256_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_256, DoubleVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertS2B_256_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, ByteVector.SPECIES_256,\n-                a, VectorOperators.S2B,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertS2S_256_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, ShortVector.SPECIES_256,\n-                a, S2S,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertS2I_256_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, IntVector.SPECIES_256,\n-                a, VectorOperators.S2I,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertS2L_256_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, LongVector.SPECIES_256,\n-                a, VectorOperators.S2L,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertS2F_256_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, FloatVector.SPECIES_256,\n-                a, VectorOperators.S2F,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertS2D_256_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, DoubleVector.SPECIES_256,\n-                a, VectorOperators.S2D,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2B_256_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, ByteVector.SPECIES_64,\n-                a, VectorOperators.S2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2B_256_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, ByteVector.SPECIES_128,\n-                a, VectorOperators.S2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2B_256_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, ByteVector.SPECIES_256,\n-                a, VectorOperators.S2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2B_256_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, ByteVector.SPECIES_512,\n-                a, VectorOperators.S2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2B_256_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, ByteVector.SPECIES_MAX,\n-                a, VectorOperators.S2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2S_256_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, ShortVector.SPECIES_64,\n-                a, S2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2S_256_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, ShortVector.SPECIES_128,\n-                a, S2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2S_256_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, ShortVector.SPECIES_256,\n-                a, S2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2S_256_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, ShortVector.SPECIES_512,\n-                a, S2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2S_256_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, ShortVector.SPECIES_MAX,\n-                a, S2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2I_256_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, IntVector.SPECIES_64,\n-                a, VectorOperators.S2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2I_256_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, IntVector.SPECIES_128,\n-                a, VectorOperators.S2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2I_256_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, IntVector.SPECIES_256,\n-                a, VectorOperators.S2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2I_256_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, IntVector.SPECIES_512,\n-                a, VectorOperators.S2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2I_256_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, IntVector.SPECIES_MAX,\n-                a, VectorOperators.S2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2L_256_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, LongVector.SPECIES_64,\n-                a, VectorOperators.S2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2L_256_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, LongVector.SPECIES_128,\n-                a, VectorOperators.S2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2L_256_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, LongVector.SPECIES_256,\n-                a, VectorOperators.S2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2L_256_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, LongVector.SPECIES_512,\n-                a, VectorOperators.S2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2L_256_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, LongVector.SPECIES_MAX,\n-                a, VectorOperators.S2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2F_256_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, FloatVector.SPECIES_64,\n-                a, VectorOperators.S2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2F_256_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, FloatVector.SPECIES_128,\n-                a, VectorOperators.S2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2F_256_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, FloatVector.SPECIES_256,\n-                a, VectorOperators.S2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2F_256_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, FloatVector.SPECIES_512,\n-                a, VectorOperators.S2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2F_256_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, FloatVector.SPECIES_MAX,\n-                a, VectorOperators.S2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2D_256_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, DoubleVector.SPECIES_64,\n-                a, VectorOperators.S2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2D_256_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, DoubleVector.SPECIES_128,\n-                a, VectorOperators.S2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2D_256_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, DoubleVector.SPECIES_256,\n-                a, VectorOperators.S2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2D_256_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, DoubleVector.SPECIES_512,\n-                a, VectorOperators.S2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2D_256_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, DoubleVector.SPECIES_MAX,\n-                a, VectorOperators.S2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2B_256_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, ByteVector.SPECIES_64,\n-                a, VectorOperators.S2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2B_256_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, ByteVector.SPECIES_128,\n-                a, VectorOperators.S2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2B_256_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, ByteVector.SPECIES_256,\n-                a, VectorOperators.S2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2B_256_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, ByteVector.SPECIES_512,\n-                a, VectorOperators.S2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2B_256_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, ByteVector.SPECIES_MAX,\n-                a, VectorOperators.S2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2S_256_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, ShortVector.SPECIES_64,\n-                a, S2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2S_256_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, ShortVector.SPECIES_128,\n-                a, S2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2S_256_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, ShortVector.SPECIES_256,\n-                a, S2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2S_256_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, ShortVector.SPECIES_512,\n-                a, S2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2S_256_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, ShortVector.SPECIES_MAX,\n-                a, S2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2I_256_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, IntVector.SPECIES_64,\n-                a, VectorOperators.S2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2I_256_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, IntVector.SPECIES_128,\n-                a, VectorOperators.S2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2I_256_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, IntVector.SPECIES_256,\n-                a, VectorOperators.S2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2I_256_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, IntVector.SPECIES_512,\n-                a, VectorOperators.S2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2I_256_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, IntVector.SPECIES_MAX,\n-                a, VectorOperators.S2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2L_256_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, LongVector.SPECIES_64,\n-                a, VectorOperators.S2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2L_256_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, LongVector.SPECIES_128,\n-                a, VectorOperators.S2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2L_256_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, LongVector.SPECIES_256,\n-                a, VectorOperators.S2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2L_256_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, LongVector.SPECIES_512,\n-                a, VectorOperators.S2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2L_256_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, LongVector.SPECIES_MAX,\n-                a, VectorOperators.S2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2F_256_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, FloatVector.SPECIES_64,\n-                a, VectorOperators.S2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2F_256_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, FloatVector.SPECIES_128,\n-                a, VectorOperators.S2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2F_256_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, FloatVector.SPECIES_256,\n-                a, VectorOperators.S2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2F_256_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, FloatVector.SPECIES_512,\n-                a, VectorOperators.S2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2F_256_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, FloatVector.SPECIES_MAX,\n-                a, VectorOperators.S2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2D_256_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, DoubleVector.SPECIES_64,\n-                a, VectorOperators.S2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2D_256_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, DoubleVector.SPECIES_128,\n-                a, VectorOperators.S2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2D_256_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, DoubleVector.SPECIES_256,\n-                a, VectorOperators.S2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2D_256_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, DoubleVector.SPECIES_512,\n-                a, VectorOperators.S2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2D_256_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_256, DoubleVector.SPECIES_MAX,\n-                a, VectorOperators.S2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2B_256_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_256, ByteVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2B_256_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_256, ByteVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2B_256_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_256, ByteVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2B_256_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_256, ByteVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2B_256_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_256, ByteVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2S_256_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_256, ShortVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2S_256_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_256, ShortVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2S_256_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_256, ShortVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2S_256_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_256, ShortVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2S_256_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_256, ShortVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2I_256_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_256, IntVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2I_256_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_256, IntVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2I_256_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_256, IntVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2I_256_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_256, IntVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2I_256_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_256, IntVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2L_256_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_256, LongVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2L_256_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_256, LongVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2L_256_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_256, LongVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2L_256_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_256, LongVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2L_256_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_256, LongVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2F_256_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_256, FloatVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2F_256_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_256, FloatVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2F_256_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_256, FloatVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2F_256_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_256, FloatVector.SPECIES_512,\n-                a, a.length);\n-    }\n+    static final VectorShape SHAPE = VectorShape.S_256_BIT;\n@@ -4437,5 +44,3 @@\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2F_256_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_256, FloatVector.SPECIES_MAX,\n-                a, a.length);\n+    @DataProvider\n+    public Object[][] fixedShapeXfixedShape() {\n+        return fixedShapeXFixedShapeSpeciesArgs(SHAPE);\n@@ -4444,5 +49,3 @@\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2D_256_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_256, DoubleVector.SPECIES_64,\n-                a, a.length);\n+    @DataProvider\n+    public Object[][] fixedShapeXShape() {\n+        return fixedShapeXShapeSpeciesArgs(SHAPE);\n@@ -4451,5 +54,4 @@\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2D_256_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_256, DoubleVector.SPECIES_128,\n-                a, a.length);\n+    @Test(dataProvider = \"fixedShapeXfixedShape\")\n+    static <I, O> void convert(VectorSpecies<I> src, VectorSpecies<O> dst, IntFunction<?> fa) {\n+        Object a = fa.apply(1024);\n+        conversion_kernel(src, dst, a, ConvAPI.CONVERT);\n@@ -4458,5 +60,4 @@\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2D_256_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_256, DoubleVector.SPECIES_256,\n-                a, a.length);\n+    @Test(dataProvider = \"fixedShapeXShape\")\n+    static <I, O> void convertShape(VectorSpecies<I> src, VectorSpecies<O> dst, IntFunction<?> fa) {\n+        Object a = fa.apply(1024);\n+        conversion_kernel(src, dst, a, ConvAPI.CONVERTSHAPE);\n@@ -4465,5 +66,4 @@\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2D_256_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_256, DoubleVector.SPECIES_512,\n-                a, a.length);\n+    @Test(dataProvider = \"fixedShapeXShape\")\n+    static <I, O> void castShape(VectorSpecies<I> src, VectorSpecies<O> dst, IntFunction<?> fa) {\n+        Object a = fa.apply(1024);\n+        conversion_kernel(src, dst, a, ConvAPI.CASTSHAPE);\n@@ -4472,5 +72,4 @@\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2D_256_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_256, DoubleVector.SPECIES_MAX,\n-                a, a.length);\n+    @Test(dataProvider = \"fixedShapeXShape\")\n+    static <I, O> void reinterpret(VectorSpecies<I> src, VectorSpecies<O> dst, IntFunction<?> fa) {\n+        Object a = fa.apply(1024);\n+        reinterpret_kernel(src, dst, a);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Vector256ConversionTests.java","additions":26,"deletions":4427,"binary":false,"changes":4453,"status":"modified"},{"patch":"@@ -24,7 +24,3 @@\n-import jdk.incubator.vector.ByteVector;\n-import jdk.incubator.vector.DoubleVector;\n-import jdk.incubator.vector.FloatVector;\n-import jdk.incubator.vector.IntVector;\n-import jdk.incubator.vector.LongVector;\n-import jdk.incubator.vector.ShortVector;\n-import jdk.incubator.vector.VectorOperators;\n+import jdk.incubator.vector.VectorShape;\n+import jdk.incubator.vector.VectorSpecies;\n+import org.testng.annotations.DataProvider;\n@@ -46,4390 +42,1 @@\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertB2B_512_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, ByteVector.SPECIES_512,\n-                a, B2B,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertB2S_512_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, ShortVector.SPECIES_512,\n-                a, VectorOperators.B2S,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertB2I_512_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, IntVector.SPECIES_512,\n-                a, VectorOperators.B2I,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertB2L_512_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, LongVector.SPECIES_512,\n-                a, VectorOperators.B2L,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertB2F_512_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, FloatVector.SPECIES_512,\n-                a, VectorOperators.B2F,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertB2D_512_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, DoubleVector.SPECIES_512,\n-                a, VectorOperators.B2D,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2B_512_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, ByteVector.SPECIES_64,\n-                a, B2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2B_512_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, ByteVector.SPECIES_128,\n-                a, B2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2B_512_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, ByteVector.SPECIES_256,\n-                a, B2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2B_512_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, ByteVector.SPECIES_512,\n-                a, B2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2B_512_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, ByteVector.SPECIES_MAX,\n-                a, B2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2S_512_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, ShortVector.SPECIES_64,\n-                a, VectorOperators.B2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2S_512_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, ShortVector.SPECIES_128,\n-                a, VectorOperators.B2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2S_512_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, ShortVector.SPECIES_256,\n-                a, VectorOperators.B2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2S_512_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, ShortVector.SPECIES_512,\n-                a, VectorOperators.B2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2S_512_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, ShortVector.SPECIES_MAX,\n-                a, VectorOperators.B2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2I_512_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, IntVector.SPECIES_64,\n-                a, VectorOperators.B2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2I_512_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, IntVector.SPECIES_128,\n-                a, VectorOperators.B2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2I_512_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, IntVector.SPECIES_256,\n-                a, VectorOperators.B2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2I_512_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, IntVector.SPECIES_512,\n-                a, VectorOperators.B2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2I_512_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, IntVector.SPECIES_MAX,\n-                a, VectorOperators.B2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2L_512_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, LongVector.SPECIES_64,\n-                a, VectorOperators.B2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2L_512_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, LongVector.SPECIES_128,\n-                a, VectorOperators.B2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2L_512_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, LongVector.SPECIES_256,\n-                a, VectorOperators.B2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2L_512_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, LongVector.SPECIES_512,\n-                a, VectorOperators.B2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2L_512_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, LongVector.SPECIES_MAX,\n-                a, VectorOperators.B2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2F_512_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, FloatVector.SPECIES_64,\n-                a, VectorOperators.B2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2F_512_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, FloatVector.SPECIES_128,\n-                a, VectorOperators.B2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2F_512_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, FloatVector.SPECIES_256,\n-                a, VectorOperators.B2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2F_512_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, FloatVector.SPECIES_512,\n-                a, VectorOperators.B2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2F_512_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, FloatVector.SPECIES_MAX,\n-                a, VectorOperators.B2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2D_512_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, DoubleVector.SPECIES_64,\n-                a, VectorOperators.B2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2D_512_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, DoubleVector.SPECIES_128,\n-                a, VectorOperators.B2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2D_512_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, DoubleVector.SPECIES_256,\n-                a, VectorOperators.B2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2D_512_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, DoubleVector.SPECIES_512,\n-                a, VectorOperators.B2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2D_512_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, DoubleVector.SPECIES_MAX,\n-                a, VectorOperators.B2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2B_512_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, ByteVector.SPECIES_64,\n-                a, B2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2B_512_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, ByteVector.SPECIES_128,\n-                a, B2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2B_512_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, ByteVector.SPECIES_256,\n-                a, B2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2B_512_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, ByteVector.SPECIES_512,\n-                a, B2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2B_512_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, ByteVector.SPECIES_MAX,\n-                a, B2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2S_512_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, ShortVector.SPECIES_64,\n-                a, VectorOperators.B2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2S_512_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, ShortVector.SPECIES_128,\n-                a, VectorOperators.B2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2S_512_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, ShortVector.SPECIES_256,\n-                a, VectorOperators.B2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2S_512_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, ShortVector.SPECIES_512,\n-                a, VectorOperators.B2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2S_512_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, ShortVector.SPECIES_MAX,\n-                a, VectorOperators.B2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2I_512_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, IntVector.SPECIES_64,\n-                a, VectorOperators.B2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2I_512_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, IntVector.SPECIES_128,\n-                a, VectorOperators.B2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2I_512_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, IntVector.SPECIES_256,\n-                a, VectorOperators.B2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2I_512_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, IntVector.SPECIES_512,\n-                a, VectorOperators.B2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2I_512_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, IntVector.SPECIES_MAX,\n-                a, VectorOperators.B2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2L_512_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, LongVector.SPECIES_64,\n-                a, VectorOperators.B2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2L_512_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, LongVector.SPECIES_128,\n-                a, VectorOperators.B2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2L_512_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, LongVector.SPECIES_256,\n-                a, VectorOperators.B2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2L_512_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, LongVector.SPECIES_512,\n-                a, VectorOperators.B2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2L_512_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, LongVector.SPECIES_MAX,\n-                a, VectorOperators.B2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2F_512_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, FloatVector.SPECIES_64,\n-                a, VectorOperators.B2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2F_512_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, FloatVector.SPECIES_128,\n-                a, VectorOperators.B2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2F_512_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, FloatVector.SPECIES_256,\n-                a, VectorOperators.B2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2F_512_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, FloatVector.SPECIES_512,\n-                a, VectorOperators.B2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2F_512_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, FloatVector.SPECIES_MAX,\n-                a, VectorOperators.B2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2D_512_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, DoubleVector.SPECIES_64,\n-                a, VectorOperators.B2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2D_512_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, DoubleVector.SPECIES_128,\n-                a, VectorOperators.B2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2D_512_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, DoubleVector.SPECIES_256,\n-                a, VectorOperators.B2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2D_512_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, DoubleVector.SPECIES_512,\n-                a, VectorOperators.B2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2D_512_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_512, DoubleVector.SPECIES_MAX,\n-                a, VectorOperators.B2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2B_512_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_512, ByteVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2B_512_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_512, ByteVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2B_512_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_512, ByteVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2B_512_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_512, ByteVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2B_512_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_512, ByteVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2S_512_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_512, ShortVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2S_512_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_512, ShortVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2S_512_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_512, ShortVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2S_512_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_512, ShortVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2S_512_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_512, ShortVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2I_512_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_512, IntVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2I_512_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_512, IntVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2I_512_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_512, IntVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2I_512_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_512, IntVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2I_512_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_512, IntVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2L_512_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_512, LongVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2L_512_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_512, LongVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2L_512_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_512, LongVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2L_512_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_512, LongVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2L_512_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_512, LongVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2F_512_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_512, FloatVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2F_512_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_512, FloatVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2F_512_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_512, FloatVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2F_512_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_512, FloatVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2F_512_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_512, FloatVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2D_512_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_512, DoubleVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2D_512_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_512, DoubleVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2D_512_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_512, DoubleVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2D_512_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_512, DoubleVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2D_512_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_512, DoubleVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertD2B_512_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, ByteVector.SPECIES_512,\n-                a, VectorOperators.D2B,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertD2S_512_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, ShortVector.SPECIES_512,\n-                a, VectorOperators.D2S,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertD2I_512_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, IntVector.SPECIES_512,\n-                a, VectorOperators.D2I,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertD2L_512_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, LongVector.SPECIES_512,\n-                a, VectorOperators.D2L,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertD2F_512_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, FloatVector.SPECIES_512,\n-                a, VectorOperators.D2F,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertD2D_512_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, DoubleVector.SPECIES_512,\n-                a, D2D,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2B_512_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, ByteVector.SPECIES_64,\n-                a, VectorOperators.D2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2B_512_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, ByteVector.SPECIES_128,\n-                a, VectorOperators.D2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2B_512_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, ByteVector.SPECIES_256,\n-                a, VectorOperators.D2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2B_512_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, ByteVector.SPECIES_512,\n-                a, VectorOperators.D2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2B_512_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, ByteVector.SPECIES_MAX,\n-                a, VectorOperators.D2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2S_512_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, ShortVector.SPECIES_64,\n-                a, VectorOperators.D2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2S_512_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, ShortVector.SPECIES_128,\n-                a, VectorOperators.D2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2S_512_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, ShortVector.SPECIES_256,\n-                a, VectorOperators.D2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2S_512_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, ShortVector.SPECIES_512,\n-                a, VectorOperators.D2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2S_512_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, ShortVector.SPECIES_MAX,\n-                a, VectorOperators.D2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2I_512_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, IntVector.SPECIES_64,\n-                a, VectorOperators.D2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2I_512_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, IntVector.SPECIES_128,\n-                a, VectorOperators.D2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2I_512_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, IntVector.SPECIES_256,\n-                a, VectorOperators.D2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2I_512_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, IntVector.SPECIES_512,\n-                a, VectorOperators.D2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2I_512_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, IntVector.SPECIES_MAX,\n-                a, VectorOperators.D2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2L_512_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, LongVector.SPECIES_64,\n-                a, VectorOperators.D2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2L_512_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, LongVector.SPECIES_128,\n-                a, VectorOperators.D2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2L_512_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, LongVector.SPECIES_256,\n-                a, VectorOperators.D2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2L_512_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, LongVector.SPECIES_512,\n-                a, VectorOperators.D2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2L_512_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, LongVector.SPECIES_MAX,\n-                a, VectorOperators.D2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2F_512_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, FloatVector.SPECIES_64,\n-                a, VectorOperators.D2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2F_512_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, FloatVector.SPECIES_128,\n-                a, VectorOperators.D2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2F_512_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, FloatVector.SPECIES_256,\n-                a, VectorOperators.D2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2F_512_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, FloatVector.SPECIES_512,\n-                a, VectorOperators.D2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2F_512_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, FloatVector.SPECIES_MAX,\n-                a, VectorOperators.D2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2D_512_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, DoubleVector.SPECIES_64,\n-                a, D2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2D_512_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, DoubleVector.SPECIES_128,\n-                a, D2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2D_512_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, DoubleVector.SPECIES_256,\n-                a, D2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2D_512_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, DoubleVector.SPECIES_512,\n-                a, D2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2D_512_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, DoubleVector.SPECIES_MAX,\n-                a, D2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2B_512_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, ByteVector.SPECIES_64,\n-                a, VectorOperators.D2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2B_512_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, ByteVector.SPECIES_128,\n-                a, VectorOperators.D2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2B_512_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, ByteVector.SPECIES_256,\n-                a, VectorOperators.D2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2B_512_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, ByteVector.SPECIES_512,\n-                a, VectorOperators.D2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2B_512_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, ByteVector.SPECIES_MAX,\n-                a, VectorOperators.D2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2S_512_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, ShortVector.SPECIES_64,\n-                a, VectorOperators.D2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2S_512_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, ShortVector.SPECIES_128,\n-                a, VectorOperators.D2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2S_512_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, ShortVector.SPECIES_256,\n-                a, VectorOperators.D2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2S_512_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, ShortVector.SPECIES_512,\n-                a, VectorOperators.D2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2S_512_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, ShortVector.SPECIES_MAX,\n-                a, VectorOperators.D2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2I_512_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, IntVector.SPECIES_64,\n-                a, VectorOperators.D2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2I_512_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, IntVector.SPECIES_128,\n-                a, VectorOperators.D2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2I_512_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, IntVector.SPECIES_256,\n-                a, VectorOperators.D2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2I_512_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, IntVector.SPECIES_512,\n-                a, VectorOperators.D2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2I_512_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, IntVector.SPECIES_MAX,\n-                a, VectorOperators.D2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2L_512_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, LongVector.SPECIES_64,\n-                a, VectorOperators.D2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2L_512_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, LongVector.SPECIES_128,\n-                a, VectorOperators.D2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2L_512_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, LongVector.SPECIES_256,\n-                a, VectorOperators.D2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2L_512_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, LongVector.SPECIES_512,\n-                a, VectorOperators.D2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2L_512_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, LongVector.SPECIES_MAX,\n-                a, VectorOperators.D2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2F_512_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, FloatVector.SPECIES_64,\n-                a, VectorOperators.D2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2F_512_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, FloatVector.SPECIES_128,\n-                a, VectorOperators.D2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2F_512_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, FloatVector.SPECIES_256,\n-                a, VectorOperators.D2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2F_512_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, FloatVector.SPECIES_512,\n-                a, VectorOperators.D2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2F_512_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, FloatVector.SPECIES_MAX,\n-                a, VectorOperators.D2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2D_512_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, DoubleVector.SPECIES_64,\n-                a, D2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2D_512_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, DoubleVector.SPECIES_128,\n-                a, D2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2D_512_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, DoubleVector.SPECIES_256,\n-                a, D2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2D_512_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, DoubleVector.SPECIES_512,\n-                a, D2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2D_512_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_512, DoubleVector.SPECIES_MAX,\n-                a, D2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2B_512_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_512, ByteVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2B_512_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_512, ByteVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2B_512_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_512, ByteVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2B_512_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_512, ByteVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2B_512_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_512, ByteVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2S_512_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_512, ShortVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2S_512_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_512, ShortVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2S_512_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_512, ShortVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2S_512_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_512, ShortVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2S_512_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_512, ShortVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2I_512_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_512, IntVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2I_512_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_512, IntVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2I_512_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_512, IntVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2I_512_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_512, IntVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2I_512_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_512, IntVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2L_512_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_512, LongVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2L_512_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_512, LongVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2L_512_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_512, LongVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2L_512_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_512, LongVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2L_512_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_512, LongVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2F_512_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_512, FloatVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2F_512_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_512, FloatVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2F_512_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_512, FloatVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2F_512_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_512, FloatVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2F_512_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_512, FloatVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2D_512_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_512, DoubleVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2D_512_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_512, DoubleVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2D_512_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_512, DoubleVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2D_512_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_512, DoubleVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2D_512_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_512, DoubleVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertF2B_512_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, ByteVector.SPECIES_512,\n-                a, VectorOperators.F2B,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertF2S_512_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, ShortVector.SPECIES_512,\n-                a, VectorOperators.F2S,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertF2I_512_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, IntVector.SPECIES_512,\n-                a, VectorOperators.F2I,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertF2L_512_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, LongVector.SPECIES_512,\n-                a, VectorOperators.F2L,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertF2F_512_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, FloatVector.SPECIES_512,\n-                a, F2F,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertF2D_512_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, DoubleVector.SPECIES_512,\n-                a, VectorOperators.F2D,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2B_512_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, ByteVector.SPECIES_64,\n-                a, VectorOperators.F2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2B_512_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, ByteVector.SPECIES_128,\n-                a, VectorOperators.F2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2B_512_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, ByteVector.SPECIES_256,\n-                a, VectorOperators.F2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2B_512_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, ByteVector.SPECIES_512,\n-                a, VectorOperators.F2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2B_512_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, ByteVector.SPECIES_MAX,\n-                a, VectorOperators.F2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2S_512_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, ShortVector.SPECIES_64,\n-                a, VectorOperators.F2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2S_512_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, ShortVector.SPECIES_128,\n-                a, VectorOperators.F2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2S_512_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, ShortVector.SPECIES_256,\n-                a, VectorOperators.F2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2S_512_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, ShortVector.SPECIES_512,\n-                a, VectorOperators.F2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2S_512_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, ShortVector.SPECIES_MAX,\n-                a, VectorOperators.F2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2I_512_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, IntVector.SPECIES_64,\n-                a, VectorOperators.F2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2I_512_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, IntVector.SPECIES_128,\n-                a, VectorOperators.F2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2I_512_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, IntVector.SPECIES_256,\n-                a, VectorOperators.F2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2I_512_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, IntVector.SPECIES_512,\n-                a, VectorOperators.F2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2I_512_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, IntVector.SPECIES_MAX,\n-                a, VectorOperators.F2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2L_512_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, LongVector.SPECIES_64,\n-                a, VectorOperators.F2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2L_512_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, LongVector.SPECIES_128,\n-                a, VectorOperators.F2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2L_512_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, LongVector.SPECIES_256,\n-                a, VectorOperators.F2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2L_512_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, LongVector.SPECIES_512,\n-                a, VectorOperators.F2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2L_512_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, LongVector.SPECIES_MAX,\n-                a, VectorOperators.F2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2F_512_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, FloatVector.SPECIES_64,\n-                a, F2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2F_512_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, FloatVector.SPECIES_128,\n-                a, F2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2F_512_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, FloatVector.SPECIES_256,\n-                a, F2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2F_512_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, FloatVector.SPECIES_512,\n-                a, F2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2F_512_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, FloatVector.SPECIES_MAX,\n-                a, F2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2D_512_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, DoubleVector.SPECIES_64,\n-                a, VectorOperators.F2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2D_512_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, DoubleVector.SPECIES_128,\n-                a, VectorOperators.F2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2D_512_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, DoubleVector.SPECIES_256,\n-                a, VectorOperators.F2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2D_512_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, DoubleVector.SPECIES_512,\n-                a, VectorOperators.F2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2D_512_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, DoubleVector.SPECIES_MAX,\n-                a, VectorOperators.F2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2B_512_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, ByteVector.SPECIES_64,\n-                a, VectorOperators.F2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2B_512_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, ByteVector.SPECIES_128,\n-                a, VectorOperators.F2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2B_512_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, ByteVector.SPECIES_256,\n-                a, VectorOperators.F2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2B_512_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, ByteVector.SPECIES_512,\n-                a, VectorOperators.F2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2B_512_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, ByteVector.SPECIES_MAX,\n-                a, VectorOperators.F2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2S_512_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, ShortVector.SPECIES_64,\n-                a, VectorOperators.F2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2S_512_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, ShortVector.SPECIES_128,\n-                a, VectorOperators.F2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2S_512_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, ShortVector.SPECIES_256,\n-                a, VectorOperators.F2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2S_512_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, ShortVector.SPECIES_512,\n-                a, VectorOperators.F2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2S_512_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, ShortVector.SPECIES_MAX,\n-                a, VectorOperators.F2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2I_512_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, IntVector.SPECIES_64,\n-                a, VectorOperators.F2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2I_512_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, IntVector.SPECIES_128,\n-                a, VectorOperators.F2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2I_512_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, IntVector.SPECIES_256,\n-                a, VectorOperators.F2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2I_512_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, IntVector.SPECIES_512,\n-                a, VectorOperators.F2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2I_512_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, IntVector.SPECIES_MAX,\n-                a, VectorOperators.F2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2L_512_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, LongVector.SPECIES_64,\n-                a, VectorOperators.F2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2L_512_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, LongVector.SPECIES_128,\n-                a, VectorOperators.F2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2L_512_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, LongVector.SPECIES_256,\n-                a, VectorOperators.F2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2L_512_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, LongVector.SPECIES_512,\n-                a, VectorOperators.F2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2L_512_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, LongVector.SPECIES_MAX,\n-                a, VectorOperators.F2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2F_512_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, FloatVector.SPECIES_64,\n-                a, F2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2F_512_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, FloatVector.SPECIES_128,\n-                a, F2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2F_512_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, FloatVector.SPECIES_256,\n-                a, F2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2F_512_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, FloatVector.SPECIES_512,\n-                a, F2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2F_512_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, FloatVector.SPECIES_MAX,\n-                a, F2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2D_512_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, DoubleVector.SPECIES_64,\n-                a, VectorOperators.F2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2D_512_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, DoubleVector.SPECIES_128,\n-                a, VectorOperators.F2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2D_512_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, DoubleVector.SPECIES_256,\n-                a, VectorOperators.F2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2D_512_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, DoubleVector.SPECIES_512,\n-                a, VectorOperators.F2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2D_512_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_512, DoubleVector.SPECIES_MAX,\n-                a, VectorOperators.F2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2B_512_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_512, ByteVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2B_512_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_512, ByteVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2B_512_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_512, ByteVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2B_512_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_512, ByteVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2B_512_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_512, ByteVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2S_512_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_512, ShortVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2S_512_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_512, ShortVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2S_512_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_512, ShortVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2S_512_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_512, ShortVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2S_512_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_512, ShortVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2I_512_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_512, IntVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2I_512_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_512, IntVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2I_512_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_512, IntVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2I_512_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_512, IntVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2I_512_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_512, IntVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2L_512_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_512, LongVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2L_512_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_512, LongVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2L_512_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_512, LongVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2L_512_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_512, LongVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2L_512_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_512, LongVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2F_512_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_512, FloatVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2F_512_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_512, FloatVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2F_512_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_512, FloatVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2F_512_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_512, FloatVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2F_512_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_512, FloatVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2D_512_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_512, DoubleVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2D_512_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_512, DoubleVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2D_512_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_512, DoubleVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2D_512_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_512, DoubleVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2D_512_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_512, DoubleVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertI2B_512_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, ByteVector.SPECIES_512,\n-                a, VectorOperators.I2B,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertI2S_512_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, ShortVector.SPECIES_512,\n-                a, VectorOperators.I2S,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertI2I_512_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, IntVector.SPECIES_512,\n-                a, I2I,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertI2L_512_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, LongVector.SPECIES_512,\n-                a, VectorOperators.I2L,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertI2F_512_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, FloatVector.SPECIES_512,\n-                a, VectorOperators.I2F,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertI2D_512_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, DoubleVector.SPECIES_512,\n-                a, VectorOperators.I2D,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2B_512_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, ByteVector.SPECIES_64,\n-                a, VectorOperators.I2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2B_512_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, ByteVector.SPECIES_128,\n-                a, VectorOperators.I2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2B_512_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, ByteVector.SPECIES_256,\n-                a, VectorOperators.I2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2B_512_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, ByteVector.SPECIES_512,\n-                a, VectorOperators.I2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2B_512_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, ByteVector.SPECIES_MAX,\n-                a, VectorOperators.I2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2S_512_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, ShortVector.SPECIES_64,\n-                a, VectorOperators.I2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2S_512_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, ShortVector.SPECIES_128,\n-                a, VectorOperators.I2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2S_512_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, ShortVector.SPECIES_256,\n-                a, VectorOperators.I2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2S_512_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, ShortVector.SPECIES_512,\n-                a, VectorOperators.I2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2S_512_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, ShortVector.SPECIES_MAX,\n-                a, VectorOperators.I2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2I_512_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, IntVector.SPECIES_64,\n-                a, I2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2I_512_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, IntVector.SPECIES_128,\n-                a, I2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2I_512_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, IntVector.SPECIES_256,\n-                a, I2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2I_512_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, IntVector.SPECIES_512,\n-                a, I2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2I_512_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, IntVector.SPECIES_MAX,\n-                a, I2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2L_512_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, LongVector.SPECIES_64,\n-                a, VectorOperators.I2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2L_512_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, LongVector.SPECIES_128,\n-                a, VectorOperators.I2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2L_512_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, LongVector.SPECIES_256,\n-                a, VectorOperators.I2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2L_512_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, LongVector.SPECIES_512,\n-                a, VectorOperators.I2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2L_512_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, LongVector.SPECIES_MAX,\n-                a, VectorOperators.I2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2F_512_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, FloatVector.SPECIES_64,\n-                a, VectorOperators.I2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2F_512_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, FloatVector.SPECIES_128,\n-                a, VectorOperators.I2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2F_512_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, FloatVector.SPECIES_256,\n-                a, VectorOperators.I2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2F_512_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, FloatVector.SPECIES_512,\n-                a, VectorOperators.I2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2F_512_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, FloatVector.SPECIES_MAX,\n-                a, VectorOperators.I2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2D_512_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, DoubleVector.SPECIES_64,\n-                a, VectorOperators.I2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2D_512_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, DoubleVector.SPECIES_128,\n-                a, VectorOperators.I2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2D_512_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, DoubleVector.SPECIES_256,\n-                a, VectorOperators.I2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2D_512_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, DoubleVector.SPECIES_512,\n-                a, VectorOperators.I2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2D_512_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, DoubleVector.SPECIES_MAX,\n-                a, VectorOperators.I2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2B_512_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, ByteVector.SPECIES_64,\n-                a, VectorOperators.I2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2B_512_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, ByteVector.SPECIES_128,\n-                a, VectorOperators.I2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2B_512_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, ByteVector.SPECIES_256,\n-                a, VectorOperators.I2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2B_512_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, ByteVector.SPECIES_512,\n-                a, VectorOperators.I2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2B_512_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, ByteVector.SPECIES_MAX,\n-                a, VectorOperators.I2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2S_512_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, ShortVector.SPECIES_64,\n-                a, VectorOperators.I2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2S_512_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, ShortVector.SPECIES_128,\n-                a, VectorOperators.I2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2S_512_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, ShortVector.SPECIES_256,\n-                a, VectorOperators.I2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2S_512_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, ShortVector.SPECIES_512,\n-                a, VectorOperators.I2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2S_512_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, ShortVector.SPECIES_MAX,\n-                a, VectorOperators.I2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2I_512_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, IntVector.SPECIES_64,\n-                a, I2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2I_512_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, IntVector.SPECIES_128,\n-                a, I2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2I_512_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, IntVector.SPECIES_256,\n-                a, I2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2I_512_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, IntVector.SPECIES_512,\n-                a, I2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2I_512_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, IntVector.SPECIES_MAX,\n-                a, I2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2L_512_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, LongVector.SPECIES_64,\n-                a, VectorOperators.I2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2L_512_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, LongVector.SPECIES_128,\n-                a, VectorOperators.I2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2L_512_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, LongVector.SPECIES_256,\n-                a, VectorOperators.I2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2L_512_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, LongVector.SPECIES_512,\n-                a, VectorOperators.I2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2L_512_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, LongVector.SPECIES_MAX,\n-                a, VectorOperators.I2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2F_512_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, FloatVector.SPECIES_64,\n-                a, VectorOperators.I2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2F_512_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, FloatVector.SPECIES_128,\n-                a, VectorOperators.I2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2F_512_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, FloatVector.SPECIES_256,\n-                a, VectorOperators.I2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2F_512_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, FloatVector.SPECIES_512,\n-                a, VectorOperators.I2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2F_512_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, FloatVector.SPECIES_MAX,\n-                a, VectorOperators.I2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2D_512_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, DoubleVector.SPECIES_64,\n-                a, VectorOperators.I2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2D_512_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, DoubleVector.SPECIES_128,\n-                a, VectorOperators.I2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2D_512_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, DoubleVector.SPECIES_256,\n-                a, VectorOperators.I2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2D_512_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, DoubleVector.SPECIES_512,\n-                a, VectorOperators.I2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2D_512_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_512, DoubleVector.SPECIES_MAX,\n-                a, VectorOperators.I2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2B_512_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_512, ByteVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2B_512_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_512, ByteVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2B_512_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_512, ByteVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2B_512_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_512, ByteVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2B_512_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_512, ByteVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2S_512_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_512, ShortVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2S_512_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_512, ShortVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2S_512_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_512, ShortVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2S_512_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_512, ShortVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2S_512_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_512, ShortVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2I_512_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_512, IntVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2I_512_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_512, IntVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2I_512_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_512, IntVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2I_512_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_512, IntVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2I_512_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_512, IntVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2L_512_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_512, LongVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2L_512_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_512, LongVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2L_512_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_512, LongVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2L_512_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_512, LongVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2L_512_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_512, LongVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2F_512_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_512, FloatVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2F_512_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_512, FloatVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2F_512_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_512, FloatVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2F_512_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_512, FloatVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2F_512_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_512, FloatVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2D_512_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_512, DoubleVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2D_512_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_512, DoubleVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2D_512_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_512, DoubleVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2D_512_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_512, DoubleVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2D_512_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_512, DoubleVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertL2B_512_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, ByteVector.SPECIES_512,\n-                a, VectorOperators.L2B,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertL2S_512_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, ShortVector.SPECIES_512,\n-                a, VectorOperators.L2S,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertL2I_512_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, IntVector.SPECIES_512,\n-                a, VectorOperators.L2I,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertL2L_512_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, LongVector.SPECIES_512,\n-                a, L2L,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertL2F_512_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, FloatVector.SPECIES_512,\n-                a, VectorOperators.L2F,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertL2D_512_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, DoubleVector.SPECIES_512,\n-                a, VectorOperators.L2D,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2B_512_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, ByteVector.SPECIES_64,\n-                a, VectorOperators.L2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2B_512_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, ByteVector.SPECIES_128,\n-                a, VectorOperators.L2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2B_512_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, ByteVector.SPECIES_256,\n-                a, VectorOperators.L2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2B_512_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, ByteVector.SPECIES_512,\n-                a, VectorOperators.L2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2B_512_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, ByteVector.SPECIES_MAX,\n-                a, VectorOperators.L2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2S_512_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, ShortVector.SPECIES_64,\n-                a, VectorOperators.L2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2S_512_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, ShortVector.SPECIES_128,\n-                a, VectorOperators.L2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2S_512_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, ShortVector.SPECIES_256,\n-                a, VectorOperators.L2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2S_512_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, ShortVector.SPECIES_512,\n-                a, VectorOperators.L2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2S_512_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, ShortVector.SPECIES_MAX,\n-                a, VectorOperators.L2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2I_512_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, IntVector.SPECIES_64,\n-                a, VectorOperators.L2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2I_512_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, IntVector.SPECIES_128,\n-                a, VectorOperators.L2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2I_512_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, IntVector.SPECIES_256,\n-                a, VectorOperators.L2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2I_512_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, IntVector.SPECIES_512,\n-                a, VectorOperators.L2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2I_512_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, IntVector.SPECIES_MAX,\n-                a, VectorOperators.L2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2L_512_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, LongVector.SPECIES_64,\n-                a, L2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2L_512_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, LongVector.SPECIES_128,\n-                a, L2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2L_512_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, LongVector.SPECIES_256,\n-                a, L2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2L_512_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, LongVector.SPECIES_512,\n-                a, L2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2L_512_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, LongVector.SPECIES_MAX,\n-                a, L2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2F_512_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, FloatVector.SPECIES_64,\n-                a, VectorOperators.L2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2F_512_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, FloatVector.SPECIES_128,\n-                a, VectorOperators.L2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2F_512_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, FloatVector.SPECIES_256,\n-                a, VectorOperators.L2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2F_512_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, FloatVector.SPECIES_512,\n-                a, VectorOperators.L2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2F_512_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, FloatVector.SPECIES_MAX,\n-                a, VectorOperators.L2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2D_512_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, DoubleVector.SPECIES_64,\n-                a, VectorOperators.L2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2D_512_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, DoubleVector.SPECIES_128,\n-                a, VectorOperators.L2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2D_512_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, DoubleVector.SPECIES_256,\n-                a, VectorOperators.L2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2D_512_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, DoubleVector.SPECIES_512,\n-                a, VectorOperators.L2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2D_512_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, DoubleVector.SPECIES_MAX,\n-                a, VectorOperators.L2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2B_512_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, ByteVector.SPECIES_64,\n-                a, VectorOperators.L2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2B_512_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, ByteVector.SPECIES_128,\n-                a, VectorOperators.L2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2B_512_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, ByteVector.SPECIES_256,\n-                a, VectorOperators.L2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2B_512_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, ByteVector.SPECIES_512,\n-                a, VectorOperators.L2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2B_512_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, ByteVector.SPECIES_MAX,\n-                a, VectorOperators.L2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2S_512_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, ShortVector.SPECIES_64,\n-                a, VectorOperators.L2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2S_512_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, ShortVector.SPECIES_128,\n-                a, VectorOperators.L2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2S_512_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, ShortVector.SPECIES_256,\n-                a, VectorOperators.L2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2S_512_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, ShortVector.SPECIES_512,\n-                a, VectorOperators.L2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2S_512_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, ShortVector.SPECIES_MAX,\n-                a, VectorOperators.L2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2I_512_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, IntVector.SPECIES_64,\n-                a, VectorOperators.L2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2I_512_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, IntVector.SPECIES_128,\n-                a, VectorOperators.L2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2I_512_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, IntVector.SPECIES_256,\n-                a, VectorOperators.L2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2I_512_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, IntVector.SPECIES_512,\n-                a, VectorOperators.L2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2I_512_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, IntVector.SPECIES_MAX,\n-                a, VectorOperators.L2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2L_512_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, LongVector.SPECIES_64,\n-                a, L2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2L_512_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, LongVector.SPECIES_128,\n-                a, L2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2L_512_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, LongVector.SPECIES_256,\n-                a, L2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2L_512_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, LongVector.SPECIES_512,\n-                a, L2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2L_512_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, LongVector.SPECIES_MAX,\n-                a, L2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2F_512_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, FloatVector.SPECIES_64,\n-                a, VectorOperators.L2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2F_512_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, FloatVector.SPECIES_128,\n-                a, VectorOperators.L2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2F_512_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, FloatVector.SPECIES_256,\n-                a, VectorOperators.L2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2F_512_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, FloatVector.SPECIES_512,\n-                a, VectorOperators.L2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2F_512_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, FloatVector.SPECIES_MAX,\n-                a, VectorOperators.L2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2D_512_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, DoubleVector.SPECIES_64,\n-                a, VectorOperators.L2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2D_512_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, DoubleVector.SPECIES_128,\n-                a, VectorOperators.L2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2D_512_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, DoubleVector.SPECIES_256,\n-                a, VectorOperators.L2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2D_512_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, DoubleVector.SPECIES_512,\n-                a, VectorOperators.L2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2D_512_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_512, DoubleVector.SPECIES_MAX,\n-                a, VectorOperators.L2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2B_512_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_512, ByteVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2B_512_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_512, ByteVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2B_512_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_512, ByteVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2B_512_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_512, ByteVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2B_512_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_512, ByteVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2S_512_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_512, ShortVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2S_512_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_512, ShortVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2S_512_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_512, ShortVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2S_512_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_512, ShortVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2S_512_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_512, ShortVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2I_512_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_512, IntVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2I_512_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_512, IntVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2I_512_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_512, IntVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2I_512_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_512, IntVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2I_512_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_512, IntVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2L_512_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_512, LongVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2L_512_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_512, LongVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2L_512_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_512, LongVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2L_512_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_512, LongVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2L_512_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_512, LongVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2F_512_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_512, FloatVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2F_512_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_512, FloatVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2F_512_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_512, FloatVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2F_512_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_512, FloatVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2F_512_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_512, FloatVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2D_512_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_512, DoubleVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2D_512_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_512, DoubleVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2D_512_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_512, DoubleVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2D_512_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_512, DoubleVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2D_512_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_512, DoubleVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertS2B_512_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, ByteVector.SPECIES_512,\n-                a, VectorOperators.S2B,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertS2S_512_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, ShortVector.SPECIES_512,\n-                a, S2S,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertS2I_512_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, IntVector.SPECIES_512,\n-                a, VectorOperators.S2I,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertS2L_512_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, LongVector.SPECIES_512,\n-                a, VectorOperators.S2L,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertS2F_512_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, FloatVector.SPECIES_512,\n-                a, VectorOperators.S2F,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertS2D_512_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, DoubleVector.SPECIES_512,\n-                a, VectorOperators.S2D,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2B_512_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, ByteVector.SPECIES_64,\n-                a, VectorOperators.S2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2B_512_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, ByteVector.SPECIES_128,\n-                a, VectorOperators.S2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2B_512_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, ByteVector.SPECIES_256,\n-                a, VectorOperators.S2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2B_512_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, ByteVector.SPECIES_512,\n-                a, VectorOperators.S2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2B_512_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, ByteVector.SPECIES_MAX,\n-                a, VectorOperators.S2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2S_512_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, ShortVector.SPECIES_64,\n-                a, S2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2S_512_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, ShortVector.SPECIES_128,\n-                a, S2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2S_512_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, ShortVector.SPECIES_256,\n-                a, S2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2S_512_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, ShortVector.SPECIES_512,\n-                a, S2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2S_512_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, ShortVector.SPECIES_MAX,\n-                a, S2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2I_512_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, IntVector.SPECIES_64,\n-                a, VectorOperators.S2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2I_512_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, IntVector.SPECIES_128,\n-                a, VectorOperators.S2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2I_512_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, IntVector.SPECIES_256,\n-                a, VectorOperators.S2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2I_512_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, IntVector.SPECIES_512,\n-                a, VectorOperators.S2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2I_512_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, IntVector.SPECIES_MAX,\n-                a, VectorOperators.S2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2L_512_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, LongVector.SPECIES_64,\n-                a, VectorOperators.S2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2L_512_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, LongVector.SPECIES_128,\n-                a, VectorOperators.S2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2L_512_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, LongVector.SPECIES_256,\n-                a, VectorOperators.S2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2L_512_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, LongVector.SPECIES_512,\n-                a, VectorOperators.S2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2L_512_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, LongVector.SPECIES_MAX,\n-                a, VectorOperators.S2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2F_512_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, FloatVector.SPECIES_64,\n-                a, VectorOperators.S2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2F_512_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, FloatVector.SPECIES_128,\n-                a, VectorOperators.S2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2F_512_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, FloatVector.SPECIES_256,\n-                a, VectorOperators.S2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2F_512_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, FloatVector.SPECIES_512,\n-                a, VectorOperators.S2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2F_512_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, FloatVector.SPECIES_MAX,\n-                a, VectorOperators.S2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2D_512_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, DoubleVector.SPECIES_64,\n-                a, VectorOperators.S2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2D_512_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, DoubleVector.SPECIES_128,\n-                a, VectorOperators.S2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2D_512_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, DoubleVector.SPECIES_256,\n-                a, VectorOperators.S2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2D_512_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, DoubleVector.SPECIES_512,\n-                a, VectorOperators.S2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2D_512_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, DoubleVector.SPECIES_MAX,\n-                a, VectorOperators.S2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2B_512_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, ByteVector.SPECIES_64,\n-                a, VectorOperators.S2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2B_512_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, ByteVector.SPECIES_128,\n-                a, VectorOperators.S2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2B_512_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, ByteVector.SPECIES_256,\n-                a, VectorOperators.S2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2B_512_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, ByteVector.SPECIES_512,\n-                a, VectorOperators.S2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2B_512_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, ByteVector.SPECIES_MAX,\n-                a, VectorOperators.S2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2S_512_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, ShortVector.SPECIES_64,\n-                a, S2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2S_512_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, ShortVector.SPECIES_128,\n-                a, S2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2S_512_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, ShortVector.SPECIES_256,\n-                a, S2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2S_512_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, ShortVector.SPECIES_512,\n-                a, S2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2S_512_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, ShortVector.SPECIES_MAX,\n-                a, S2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2I_512_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, IntVector.SPECIES_64,\n-                a, VectorOperators.S2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2I_512_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, IntVector.SPECIES_128,\n-                a, VectorOperators.S2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2I_512_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, IntVector.SPECIES_256,\n-                a, VectorOperators.S2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2I_512_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, IntVector.SPECIES_512,\n-                a, VectorOperators.S2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2I_512_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, IntVector.SPECIES_MAX,\n-                a, VectorOperators.S2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2L_512_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, LongVector.SPECIES_64,\n-                a, VectorOperators.S2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2L_512_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, LongVector.SPECIES_128,\n-                a, VectorOperators.S2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2L_512_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, LongVector.SPECIES_256,\n-                a, VectorOperators.S2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2L_512_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, LongVector.SPECIES_512,\n-                a, VectorOperators.S2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2L_512_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, LongVector.SPECIES_MAX,\n-                a, VectorOperators.S2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2F_512_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, FloatVector.SPECIES_64,\n-                a, VectorOperators.S2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2F_512_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, FloatVector.SPECIES_128,\n-                a, VectorOperators.S2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2F_512_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, FloatVector.SPECIES_256,\n-                a, VectorOperators.S2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2F_512_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, FloatVector.SPECIES_512,\n-                a, VectorOperators.S2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2F_512_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, FloatVector.SPECIES_MAX,\n-                a, VectorOperators.S2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2D_512_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, DoubleVector.SPECIES_64,\n-                a, VectorOperators.S2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2D_512_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, DoubleVector.SPECIES_128,\n-                a, VectorOperators.S2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2D_512_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, DoubleVector.SPECIES_256,\n-                a, VectorOperators.S2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2D_512_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, DoubleVector.SPECIES_512,\n-                a, VectorOperators.S2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2D_512_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_512, DoubleVector.SPECIES_MAX,\n-                a, VectorOperators.S2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2B_512_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_512, ByteVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2B_512_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_512, ByteVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2B_512_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_512, ByteVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2B_512_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_512, ByteVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2B_512_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_512, ByteVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2S_512_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_512, ShortVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2S_512_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_512, ShortVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2S_512_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_512, ShortVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2S_512_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_512, ShortVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2S_512_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_512, ShortVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2I_512_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_512, IntVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2I_512_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_512, IntVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2I_512_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_512, IntVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2I_512_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_512, IntVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2I_512_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_512, IntVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2L_512_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_512, LongVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2L_512_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_512, LongVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2L_512_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_512, LongVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2L_512_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_512, LongVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2L_512_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_512, LongVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2F_512_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_512, FloatVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2F_512_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_512, FloatVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2F_512_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_512, FloatVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2F_512_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_512, FloatVector.SPECIES_512,\n-                a, a.length);\n-    }\n+    static final VectorShape SHAPE = VectorShape.S_512_BIT;\n@@ -4437,5 +44,3 @@\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2F_512_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_512, FloatVector.SPECIES_MAX,\n-                a, a.length);\n+    @DataProvider\n+    public Object[][] fixedShapeXfixedShape() {\n+        return fixedShapeXFixedShapeSpeciesArgs(SHAPE);\n@@ -4444,5 +49,3 @@\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2D_512_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_512, DoubleVector.SPECIES_64,\n-                a, a.length);\n+    @DataProvider\n+    public Object[][] fixedShapeXShape() {\n+        return fixedShapeXShapeSpeciesArgs(SHAPE);\n@@ -4451,5 +54,4 @@\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2D_512_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_512, DoubleVector.SPECIES_128,\n-                a, a.length);\n+    @Test(dataProvider = \"fixedShapeXfixedShape\")\n+    static <I, O> void convert(VectorSpecies<I> src, VectorSpecies<O> dst, IntFunction<?> fa) {\n+        Object a = fa.apply(1024);\n+        conversion_kernel(src, dst, a, ConvAPI.CONVERT);\n@@ -4458,5 +60,4 @@\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2D_512_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_512, DoubleVector.SPECIES_256,\n-                a, a.length);\n+    @Test(dataProvider = \"fixedShapeXShape\")\n+    static <I, O> void convertShape(VectorSpecies<I> src, VectorSpecies<O> dst, IntFunction<?> fa) {\n+        Object a = fa.apply(1024);\n+        conversion_kernel(src, dst, a, ConvAPI.CONVERTSHAPE);\n@@ -4465,5 +66,4 @@\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2D_512_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_512, DoubleVector.SPECIES_512,\n-                a, a.length);\n+    @Test(dataProvider = \"fixedShapeXShape\")\n+    static <I, O> void castShape(VectorSpecies<I> src, VectorSpecies<O> dst, IntFunction<?> fa) {\n+        Object a = fa.apply(1024);\n+        conversion_kernel(src, dst, a, ConvAPI.CASTSHAPE);\n@@ -4472,5 +72,4 @@\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2D_512_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_512, DoubleVector.SPECIES_MAX,\n-                a, a.length);\n+    @Test(dataProvider = \"fixedShapeXShape\")\n+    static <I, O> void reinterpret(VectorSpecies<I> src, VectorSpecies<O> dst, IntFunction<?> fa) {\n+        Object a = fa.apply(1024);\n+        reinterpret_kernel(src, dst, a);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Vector512ConversionTests.java","additions":26,"deletions":4427,"binary":false,"changes":4453,"status":"modified"},{"patch":"@@ -24,7 +24,3 @@\n-import jdk.incubator.vector.ByteVector;\n-import jdk.incubator.vector.DoubleVector;\n-import jdk.incubator.vector.FloatVector;\n-import jdk.incubator.vector.IntVector;\n-import jdk.incubator.vector.LongVector;\n-import jdk.incubator.vector.ShortVector;\n-import jdk.incubator.vector.VectorOperators;\n+import jdk.incubator.vector.VectorShape;\n+import jdk.incubator.vector.VectorSpecies;\n+import org.testng.annotations.DataProvider;\n@@ -47,4390 +43,1 @@\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertB2B_64_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, ByteVector.SPECIES_64,\n-                a, B2B,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertB2S_64_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, ShortVector.SPECIES_64,\n-                a, VectorOperators.B2S,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertB2I_64_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, IntVector.SPECIES_64,\n-                a, VectorOperators.B2I,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertB2L_64_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, LongVector.SPECIES_64,\n-                a, VectorOperators.B2L,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertB2F_64_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, FloatVector.SPECIES_64,\n-                a, VectorOperators.B2F,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertB2D_64_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, DoubleVector.SPECIES_64,\n-                a, VectorOperators.B2D,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2B_64_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, ByteVector.SPECIES_64,\n-                a, B2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2B_64_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, ByteVector.SPECIES_128,\n-                a, B2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2B_64_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, ByteVector.SPECIES_256,\n-                a, B2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2B_64_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, ByteVector.SPECIES_512,\n-                a, B2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2B_64_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, ByteVector.SPECIES_MAX,\n-                a, B2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2S_64_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, ShortVector.SPECIES_64,\n-                a, VectorOperators.B2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2S_64_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, ShortVector.SPECIES_128,\n-                a, VectorOperators.B2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2S_64_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, ShortVector.SPECIES_256,\n-                a, VectorOperators.B2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2S_64_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, ShortVector.SPECIES_512,\n-                a, VectorOperators.B2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2S_64_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, ShortVector.SPECIES_MAX,\n-                a, VectorOperators.B2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2I_64_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, IntVector.SPECIES_64,\n-                a, VectorOperators.B2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2I_64_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, IntVector.SPECIES_128,\n-                a, VectorOperators.B2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2I_64_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, IntVector.SPECIES_256,\n-                a, VectorOperators.B2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2I_64_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, IntVector.SPECIES_512,\n-                a, VectorOperators.B2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2I_64_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, IntVector.SPECIES_MAX,\n-                a, VectorOperators.B2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2L_64_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, LongVector.SPECIES_64,\n-                a, VectorOperators.B2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2L_64_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, LongVector.SPECIES_128,\n-                a, VectorOperators.B2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2L_64_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, LongVector.SPECIES_256,\n-                a, VectorOperators.B2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2L_64_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, LongVector.SPECIES_512,\n-                a, VectorOperators.B2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2L_64_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, LongVector.SPECIES_MAX,\n-                a, VectorOperators.B2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2F_64_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, FloatVector.SPECIES_64,\n-                a, VectorOperators.B2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2F_64_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, FloatVector.SPECIES_128,\n-                a, VectorOperators.B2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2F_64_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, FloatVector.SPECIES_256,\n-                a, VectorOperators.B2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2F_64_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, FloatVector.SPECIES_512,\n-                a, VectorOperators.B2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2F_64_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, FloatVector.SPECIES_MAX,\n-                a, VectorOperators.B2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2D_64_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, DoubleVector.SPECIES_64,\n-                a, VectorOperators.B2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2D_64_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, DoubleVector.SPECIES_128,\n-                a, VectorOperators.B2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2D_64_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, DoubleVector.SPECIES_256,\n-                a, VectorOperators.B2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2D_64_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, DoubleVector.SPECIES_512,\n-                a, VectorOperators.B2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2D_64_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, DoubleVector.SPECIES_MAX,\n-                a, VectorOperators.B2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2B_64_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, ByteVector.SPECIES_64,\n-                a, B2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2B_64_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, ByteVector.SPECIES_128,\n-                a, B2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2B_64_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, ByteVector.SPECIES_256,\n-                a, B2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2B_64_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, ByteVector.SPECIES_512,\n-                a, B2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2B_64_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, ByteVector.SPECIES_MAX,\n-                a, B2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2S_64_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, ShortVector.SPECIES_64,\n-                a, VectorOperators.B2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2S_64_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, ShortVector.SPECIES_128,\n-                a, VectorOperators.B2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2S_64_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, ShortVector.SPECIES_256,\n-                a, VectorOperators.B2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2S_64_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, ShortVector.SPECIES_512,\n-                a, VectorOperators.B2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2S_64_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, ShortVector.SPECIES_MAX,\n-                a, VectorOperators.B2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2I_64_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, IntVector.SPECIES_64,\n-                a, VectorOperators.B2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2I_64_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, IntVector.SPECIES_128,\n-                a, VectorOperators.B2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2I_64_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, IntVector.SPECIES_256,\n-                a, VectorOperators.B2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2I_64_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, IntVector.SPECIES_512,\n-                a, VectorOperators.B2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2I_64_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, IntVector.SPECIES_MAX,\n-                a, VectorOperators.B2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2L_64_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, LongVector.SPECIES_64,\n-                a, VectorOperators.B2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2L_64_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, LongVector.SPECIES_128,\n-                a, VectorOperators.B2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2L_64_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, LongVector.SPECIES_256,\n-                a, VectorOperators.B2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2L_64_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, LongVector.SPECIES_512,\n-                a, VectorOperators.B2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2L_64_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, LongVector.SPECIES_MAX,\n-                a, VectorOperators.B2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2F_64_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, FloatVector.SPECIES_64,\n-                a, VectorOperators.B2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2F_64_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, FloatVector.SPECIES_128,\n-                a, VectorOperators.B2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2F_64_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, FloatVector.SPECIES_256,\n-                a, VectorOperators.B2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2F_64_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, FloatVector.SPECIES_512,\n-                a, VectorOperators.B2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2F_64_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, FloatVector.SPECIES_MAX,\n-                a, VectorOperators.B2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2D_64_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, DoubleVector.SPECIES_64,\n-                a, VectorOperators.B2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2D_64_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, DoubleVector.SPECIES_128,\n-                a, VectorOperators.B2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2D_64_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, DoubleVector.SPECIES_256,\n-                a, VectorOperators.B2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2D_64_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, DoubleVector.SPECIES_512,\n-                a, VectorOperators.B2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2D_64_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_64, DoubleVector.SPECIES_MAX,\n-                a, VectorOperators.B2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2B_64_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_64, ByteVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2B_64_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_64, ByteVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2B_64_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_64, ByteVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2B_64_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_64, ByteVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2B_64_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_64, ByteVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2S_64_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_64, ShortVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2S_64_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_64, ShortVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2S_64_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_64, ShortVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2S_64_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_64, ShortVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2S_64_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_64, ShortVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2I_64_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_64, IntVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2I_64_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_64, IntVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2I_64_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_64, IntVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2I_64_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_64, IntVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2I_64_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_64, IntVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2L_64_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_64, LongVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2L_64_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_64, LongVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2L_64_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_64, LongVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2L_64_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_64, LongVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2L_64_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_64, LongVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2F_64_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_64, FloatVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2F_64_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_64, FloatVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2F_64_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_64, FloatVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2F_64_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_64, FloatVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2F_64_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_64, FloatVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2D_64_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_64, DoubleVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2D_64_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_64, DoubleVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2D_64_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_64, DoubleVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2D_64_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_64, DoubleVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2D_64_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_64, DoubleVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertD2B_64_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, ByteVector.SPECIES_64,\n-                a, VectorOperators.D2B,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertD2S_64_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, ShortVector.SPECIES_64,\n-                a, VectorOperators.D2S,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertD2I_64_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, IntVector.SPECIES_64,\n-                a, VectorOperators.D2I,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertD2L_64_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, LongVector.SPECIES_64,\n-                a, VectorOperators.D2L,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertD2F_64_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, FloatVector.SPECIES_64,\n-                a, VectorOperators.D2F,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertD2D_64_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, DoubleVector.SPECIES_64,\n-                a, D2D,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2B_64_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, ByteVector.SPECIES_64,\n-                a, VectorOperators.D2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2B_64_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, ByteVector.SPECIES_128,\n-                a, VectorOperators.D2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2B_64_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, ByteVector.SPECIES_256,\n-                a, VectorOperators.D2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2B_64_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, ByteVector.SPECIES_512,\n-                a, VectorOperators.D2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2B_64_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, ByteVector.SPECIES_MAX,\n-                a, VectorOperators.D2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2S_64_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, ShortVector.SPECIES_64,\n-                a, VectorOperators.D2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2S_64_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, ShortVector.SPECIES_128,\n-                a, VectorOperators.D2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2S_64_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, ShortVector.SPECIES_256,\n-                a, VectorOperators.D2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2S_64_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, ShortVector.SPECIES_512,\n-                a, VectorOperators.D2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2S_64_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, ShortVector.SPECIES_MAX,\n-                a, VectorOperators.D2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2I_64_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, IntVector.SPECIES_64,\n-                a, VectorOperators.D2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2I_64_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, IntVector.SPECIES_128,\n-                a, VectorOperators.D2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2I_64_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, IntVector.SPECIES_256,\n-                a, VectorOperators.D2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2I_64_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, IntVector.SPECIES_512,\n-                a, VectorOperators.D2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2I_64_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, IntVector.SPECIES_MAX,\n-                a, VectorOperators.D2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2L_64_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, LongVector.SPECIES_64,\n-                a, VectorOperators.D2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2L_64_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, LongVector.SPECIES_128,\n-                a, VectorOperators.D2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2L_64_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, LongVector.SPECIES_256,\n-                a, VectorOperators.D2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2L_64_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, LongVector.SPECIES_512,\n-                a, VectorOperators.D2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2L_64_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, LongVector.SPECIES_MAX,\n-                a, VectorOperators.D2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2F_64_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, FloatVector.SPECIES_64,\n-                a, VectorOperators.D2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2F_64_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, FloatVector.SPECIES_128,\n-                a, VectorOperators.D2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2F_64_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, FloatVector.SPECIES_256,\n-                a, VectorOperators.D2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2F_64_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, FloatVector.SPECIES_512,\n-                a, VectorOperators.D2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2F_64_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, FloatVector.SPECIES_MAX,\n-                a, VectorOperators.D2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2D_64_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, DoubleVector.SPECIES_64,\n-                a, D2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2D_64_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, DoubleVector.SPECIES_128,\n-                a, D2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2D_64_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, DoubleVector.SPECIES_256,\n-                a, D2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2D_64_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, DoubleVector.SPECIES_512,\n-                a, D2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2D_64_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, DoubleVector.SPECIES_MAX,\n-                a, D2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2B_64_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, ByteVector.SPECIES_64,\n-                a, VectorOperators.D2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2B_64_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, ByteVector.SPECIES_128,\n-                a, VectorOperators.D2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2B_64_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, ByteVector.SPECIES_256,\n-                a, VectorOperators.D2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2B_64_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, ByteVector.SPECIES_512,\n-                a, VectorOperators.D2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2B_64_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, ByteVector.SPECIES_MAX,\n-                a, VectorOperators.D2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2S_64_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, ShortVector.SPECIES_64,\n-                a, VectorOperators.D2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2S_64_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, ShortVector.SPECIES_128,\n-                a, VectorOperators.D2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2S_64_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, ShortVector.SPECIES_256,\n-                a, VectorOperators.D2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2S_64_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, ShortVector.SPECIES_512,\n-                a, VectorOperators.D2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2S_64_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, ShortVector.SPECIES_MAX,\n-                a, VectorOperators.D2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2I_64_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, IntVector.SPECIES_64,\n-                a, VectorOperators.D2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2I_64_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, IntVector.SPECIES_128,\n-                a, VectorOperators.D2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2I_64_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, IntVector.SPECIES_256,\n-                a, VectorOperators.D2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2I_64_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, IntVector.SPECIES_512,\n-                a, VectorOperators.D2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2I_64_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, IntVector.SPECIES_MAX,\n-                a, VectorOperators.D2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2L_64_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, LongVector.SPECIES_64,\n-                a, VectorOperators.D2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2L_64_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, LongVector.SPECIES_128,\n-                a, VectorOperators.D2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2L_64_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, LongVector.SPECIES_256,\n-                a, VectorOperators.D2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2L_64_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, LongVector.SPECIES_512,\n-                a, VectorOperators.D2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2L_64_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, LongVector.SPECIES_MAX,\n-                a, VectorOperators.D2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2F_64_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, FloatVector.SPECIES_64,\n-                a, VectorOperators.D2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2F_64_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, FloatVector.SPECIES_128,\n-                a, VectorOperators.D2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2F_64_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, FloatVector.SPECIES_256,\n-                a, VectorOperators.D2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2F_64_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, FloatVector.SPECIES_512,\n-                a, VectorOperators.D2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2F_64_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, FloatVector.SPECIES_MAX,\n-                a, VectorOperators.D2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2D_64_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, DoubleVector.SPECIES_64,\n-                a, D2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2D_64_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, DoubleVector.SPECIES_128,\n-                a, D2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2D_64_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, DoubleVector.SPECIES_256,\n-                a, D2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2D_64_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, DoubleVector.SPECIES_512,\n-                a, D2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2D_64_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_64, DoubleVector.SPECIES_MAX,\n-                a, D2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2B_64_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_64, ByteVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2B_64_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_64, ByteVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2B_64_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_64, ByteVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2B_64_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_64, ByteVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2B_64_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_64, ByteVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2S_64_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_64, ShortVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2S_64_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_64, ShortVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2S_64_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_64, ShortVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2S_64_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_64, ShortVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2S_64_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_64, ShortVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2I_64_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_64, IntVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2I_64_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_64, IntVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2I_64_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_64, IntVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2I_64_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_64, IntVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2I_64_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_64, IntVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2L_64_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_64, LongVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2L_64_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_64, LongVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2L_64_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_64, LongVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2L_64_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_64, LongVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2L_64_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_64, LongVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2F_64_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_64, FloatVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2F_64_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_64, FloatVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2F_64_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_64, FloatVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2F_64_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_64, FloatVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2F_64_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_64, FloatVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2D_64_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_64, DoubleVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2D_64_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_64, DoubleVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2D_64_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_64, DoubleVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2D_64_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_64, DoubleVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2D_64_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_64, DoubleVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertF2B_64_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, ByteVector.SPECIES_64,\n-                a, VectorOperators.F2B,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertF2S_64_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, ShortVector.SPECIES_64,\n-                a, VectorOperators.F2S,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertF2I_64_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, IntVector.SPECIES_64,\n-                a, VectorOperators.F2I,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertF2L_64_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, LongVector.SPECIES_64,\n-                a, VectorOperators.F2L,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertF2F_64_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, FloatVector.SPECIES_64,\n-                a, F2F,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertF2D_64_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, DoubleVector.SPECIES_64,\n-                a, VectorOperators.F2D,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2B_64_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, ByteVector.SPECIES_64,\n-                a, VectorOperators.F2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2B_64_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, ByteVector.SPECIES_128,\n-                a, VectorOperators.F2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2B_64_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, ByteVector.SPECIES_256,\n-                a, VectorOperators.F2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2B_64_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, ByteVector.SPECIES_512,\n-                a, VectorOperators.F2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2B_64_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, ByteVector.SPECIES_MAX,\n-                a, VectorOperators.F2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2S_64_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, ShortVector.SPECIES_64,\n-                a, VectorOperators.F2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2S_64_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, ShortVector.SPECIES_128,\n-                a, VectorOperators.F2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2S_64_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, ShortVector.SPECIES_256,\n-                a, VectorOperators.F2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2S_64_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, ShortVector.SPECIES_512,\n-                a, VectorOperators.F2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2S_64_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, ShortVector.SPECIES_MAX,\n-                a, VectorOperators.F2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2I_64_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, IntVector.SPECIES_64,\n-                a, VectorOperators.F2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2I_64_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, IntVector.SPECIES_128,\n-                a, VectorOperators.F2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2I_64_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, IntVector.SPECIES_256,\n-                a, VectorOperators.F2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2I_64_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, IntVector.SPECIES_512,\n-                a, VectorOperators.F2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2I_64_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, IntVector.SPECIES_MAX,\n-                a, VectorOperators.F2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2L_64_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, LongVector.SPECIES_64,\n-                a, VectorOperators.F2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2L_64_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, LongVector.SPECIES_128,\n-                a, VectorOperators.F2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2L_64_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, LongVector.SPECIES_256,\n-                a, VectorOperators.F2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2L_64_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, LongVector.SPECIES_512,\n-                a, VectorOperators.F2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2L_64_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, LongVector.SPECIES_MAX,\n-                a, VectorOperators.F2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2F_64_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, FloatVector.SPECIES_64,\n-                a, F2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2F_64_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, FloatVector.SPECIES_128,\n-                a, F2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2F_64_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, FloatVector.SPECIES_256,\n-                a, F2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2F_64_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, FloatVector.SPECIES_512,\n-                a, F2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2F_64_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, FloatVector.SPECIES_MAX,\n-                a, F2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2D_64_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, DoubleVector.SPECIES_64,\n-                a, VectorOperators.F2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2D_64_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, DoubleVector.SPECIES_128,\n-                a, VectorOperators.F2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2D_64_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, DoubleVector.SPECIES_256,\n-                a, VectorOperators.F2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2D_64_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, DoubleVector.SPECIES_512,\n-                a, VectorOperators.F2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2D_64_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, DoubleVector.SPECIES_MAX,\n-                a, VectorOperators.F2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2B_64_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, ByteVector.SPECIES_64,\n-                a, VectorOperators.F2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2B_64_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, ByteVector.SPECIES_128,\n-                a, VectorOperators.F2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2B_64_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, ByteVector.SPECIES_256,\n-                a, VectorOperators.F2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2B_64_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, ByteVector.SPECIES_512,\n-                a, VectorOperators.F2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2B_64_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, ByteVector.SPECIES_MAX,\n-                a, VectorOperators.F2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2S_64_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, ShortVector.SPECIES_64,\n-                a, VectorOperators.F2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2S_64_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, ShortVector.SPECIES_128,\n-                a, VectorOperators.F2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2S_64_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, ShortVector.SPECIES_256,\n-                a, VectorOperators.F2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2S_64_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, ShortVector.SPECIES_512,\n-                a, VectorOperators.F2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2S_64_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, ShortVector.SPECIES_MAX,\n-                a, VectorOperators.F2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2I_64_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, IntVector.SPECIES_64,\n-                a, VectorOperators.F2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2I_64_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, IntVector.SPECIES_128,\n-                a, VectorOperators.F2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2I_64_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, IntVector.SPECIES_256,\n-                a, VectorOperators.F2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2I_64_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, IntVector.SPECIES_512,\n-                a, VectorOperators.F2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2I_64_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, IntVector.SPECIES_MAX,\n-                a, VectorOperators.F2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2L_64_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, LongVector.SPECIES_64,\n-                a, VectorOperators.F2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2L_64_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, LongVector.SPECIES_128,\n-                a, VectorOperators.F2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2L_64_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, LongVector.SPECIES_256,\n-                a, VectorOperators.F2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2L_64_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, LongVector.SPECIES_512,\n-                a, VectorOperators.F2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2L_64_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, LongVector.SPECIES_MAX,\n-                a, VectorOperators.F2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2F_64_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, FloatVector.SPECIES_64,\n-                a, F2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2F_64_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, FloatVector.SPECIES_128,\n-                a, F2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2F_64_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, FloatVector.SPECIES_256,\n-                a, F2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2F_64_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, FloatVector.SPECIES_512,\n-                a, F2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2F_64_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, FloatVector.SPECIES_MAX,\n-                a, F2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2D_64_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, DoubleVector.SPECIES_64,\n-                a, VectorOperators.F2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2D_64_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, DoubleVector.SPECIES_128,\n-                a, VectorOperators.F2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2D_64_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, DoubleVector.SPECIES_256,\n-                a, VectorOperators.F2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2D_64_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, DoubleVector.SPECIES_512,\n-                a, VectorOperators.F2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2D_64_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_64, DoubleVector.SPECIES_MAX,\n-                a, VectorOperators.F2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2B_64_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_64, ByteVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2B_64_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_64, ByteVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2B_64_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_64, ByteVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2B_64_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_64, ByteVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2B_64_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_64, ByteVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2S_64_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_64, ShortVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2S_64_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_64, ShortVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2S_64_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_64, ShortVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2S_64_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_64, ShortVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2S_64_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_64, ShortVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2I_64_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_64, IntVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2I_64_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_64, IntVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2I_64_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_64, IntVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2I_64_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_64, IntVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2I_64_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_64, IntVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2L_64_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_64, LongVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2L_64_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_64, LongVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2L_64_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_64, LongVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2L_64_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_64, LongVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2L_64_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_64, LongVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2F_64_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_64, FloatVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2F_64_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_64, FloatVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2F_64_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_64, FloatVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2F_64_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_64, FloatVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2F_64_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_64, FloatVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2D_64_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_64, DoubleVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2D_64_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_64, DoubleVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2D_64_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_64, DoubleVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2D_64_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_64, DoubleVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2D_64_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_64, DoubleVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertI2B_64_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, ByteVector.SPECIES_64,\n-                a, VectorOperators.I2B,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertI2S_64_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, ShortVector.SPECIES_64,\n-                a, VectorOperators.I2S,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertI2I_64_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, IntVector.SPECIES_64,\n-                a, I2I,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertI2L_64_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, LongVector.SPECIES_64,\n-                a, VectorOperators.I2L,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertI2F_64_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, FloatVector.SPECIES_64,\n-                a, VectorOperators.I2F,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertI2D_64_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, DoubleVector.SPECIES_64,\n-                a, VectorOperators.I2D,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2B_64_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, ByteVector.SPECIES_64,\n-                a, VectorOperators.I2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2B_64_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, ByteVector.SPECIES_128,\n-                a, VectorOperators.I2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2B_64_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, ByteVector.SPECIES_256,\n-                a, VectorOperators.I2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2B_64_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, ByteVector.SPECIES_512,\n-                a, VectorOperators.I2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2B_64_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, ByteVector.SPECIES_MAX,\n-                a, VectorOperators.I2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2S_64_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, ShortVector.SPECIES_64,\n-                a, VectorOperators.I2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2S_64_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, ShortVector.SPECIES_128,\n-                a, VectorOperators.I2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2S_64_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, ShortVector.SPECIES_256,\n-                a, VectorOperators.I2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2S_64_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, ShortVector.SPECIES_512,\n-                a, VectorOperators.I2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2S_64_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, ShortVector.SPECIES_MAX,\n-                a, VectorOperators.I2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2I_64_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, IntVector.SPECIES_64,\n-                a, I2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2I_64_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, IntVector.SPECIES_128,\n-                a, I2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2I_64_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, IntVector.SPECIES_256,\n-                a, I2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2I_64_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, IntVector.SPECIES_512,\n-                a, I2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2I_64_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, IntVector.SPECIES_MAX,\n-                a, I2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2L_64_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, LongVector.SPECIES_64,\n-                a, VectorOperators.I2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2L_64_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, LongVector.SPECIES_128,\n-                a, VectorOperators.I2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2L_64_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, LongVector.SPECIES_256,\n-                a, VectorOperators.I2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2L_64_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, LongVector.SPECIES_512,\n-                a, VectorOperators.I2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2L_64_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, LongVector.SPECIES_MAX,\n-                a, VectorOperators.I2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2F_64_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, FloatVector.SPECIES_64,\n-                a, VectorOperators.I2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2F_64_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, FloatVector.SPECIES_128,\n-                a, VectorOperators.I2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2F_64_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, FloatVector.SPECIES_256,\n-                a, VectorOperators.I2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2F_64_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, FloatVector.SPECIES_512,\n-                a, VectorOperators.I2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2F_64_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, FloatVector.SPECIES_MAX,\n-                a, VectorOperators.I2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2D_64_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, DoubleVector.SPECIES_64,\n-                a, VectorOperators.I2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2D_64_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, DoubleVector.SPECIES_128,\n-                a, VectorOperators.I2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2D_64_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, DoubleVector.SPECIES_256,\n-                a, VectorOperators.I2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2D_64_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, DoubleVector.SPECIES_512,\n-                a, VectorOperators.I2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2D_64_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, DoubleVector.SPECIES_MAX,\n-                a, VectorOperators.I2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2B_64_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, ByteVector.SPECIES_64,\n-                a, VectorOperators.I2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2B_64_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, ByteVector.SPECIES_128,\n-                a, VectorOperators.I2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2B_64_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, ByteVector.SPECIES_256,\n-                a, VectorOperators.I2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2B_64_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, ByteVector.SPECIES_512,\n-                a, VectorOperators.I2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2B_64_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, ByteVector.SPECIES_MAX,\n-                a, VectorOperators.I2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2S_64_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, ShortVector.SPECIES_64,\n-                a, VectorOperators.I2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2S_64_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, ShortVector.SPECIES_128,\n-                a, VectorOperators.I2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2S_64_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, ShortVector.SPECIES_256,\n-                a, VectorOperators.I2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2S_64_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, ShortVector.SPECIES_512,\n-                a, VectorOperators.I2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2S_64_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, ShortVector.SPECIES_MAX,\n-                a, VectorOperators.I2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2I_64_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, IntVector.SPECIES_64,\n-                a, I2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2I_64_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, IntVector.SPECIES_128,\n-                a, I2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2I_64_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, IntVector.SPECIES_256,\n-                a, I2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2I_64_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, IntVector.SPECIES_512,\n-                a, I2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2I_64_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, IntVector.SPECIES_MAX,\n-                a, I2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2L_64_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, LongVector.SPECIES_64,\n-                a, VectorOperators.I2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2L_64_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, LongVector.SPECIES_128,\n-                a, VectorOperators.I2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2L_64_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, LongVector.SPECIES_256,\n-                a, VectorOperators.I2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2L_64_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, LongVector.SPECIES_512,\n-                a, VectorOperators.I2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2L_64_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, LongVector.SPECIES_MAX,\n-                a, VectorOperators.I2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2F_64_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, FloatVector.SPECIES_64,\n-                a, VectorOperators.I2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2F_64_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, FloatVector.SPECIES_128,\n-                a, VectorOperators.I2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2F_64_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, FloatVector.SPECIES_256,\n-                a, VectorOperators.I2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2F_64_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, FloatVector.SPECIES_512,\n-                a, VectorOperators.I2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2F_64_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, FloatVector.SPECIES_MAX,\n-                a, VectorOperators.I2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2D_64_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, DoubleVector.SPECIES_64,\n-                a, VectorOperators.I2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2D_64_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, DoubleVector.SPECIES_128,\n-                a, VectorOperators.I2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2D_64_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, DoubleVector.SPECIES_256,\n-                a, VectorOperators.I2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2D_64_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, DoubleVector.SPECIES_512,\n-                a, VectorOperators.I2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2D_64_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_64, DoubleVector.SPECIES_MAX,\n-                a, VectorOperators.I2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2B_64_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_64, ByteVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2B_64_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_64, ByteVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2B_64_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_64, ByteVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2B_64_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_64, ByteVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2B_64_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_64, ByteVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2S_64_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_64, ShortVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2S_64_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_64, ShortVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2S_64_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_64, ShortVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2S_64_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_64, ShortVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2S_64_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_64, ShortVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2I_64_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_64, IntVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2I_64_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_64, IntVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2I_64_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_64, IntVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2I_64_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_64, IntVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2I_64_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_64, IntVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2L_64_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_64, LongVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2L_64_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_64, LongVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2L_64_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_64, LongVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2L_64_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_64, LongVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2L_64_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_64, LongVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2F_64_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_64, FloatVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2F_64_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_64, FloatVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2F_64_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_64, FloatVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2F_64_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_64, FloatVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2F_64_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_64, FloatVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2D_64_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_64, DoubleVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2D_64_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_64, DoubleVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2D_64_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_64, DoubleVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2D_64_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_64, DoubleVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2D_64_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_64, DoubleVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertL2B_64_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, ByteVector.SPECIES_64,\n-                a, VectorOperators.L2B,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertL2S_64_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, ShortVector.SPECIES_64,\n-                a, VectorOperators.L2S,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertL2I_64_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, IntVector.SPECIES_64,\n-                a, VectorOperators.L2I,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertL2L_64_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, LongVector.SPECIES_64,\n-                a, L2L,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertL2F_64_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, FloatVector.SPECIES_64,\n-                a, VectorOperators.L2F,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertL2D_64_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, DoubleVector.SPECIES_64,\n-                a, VectorOperators.L2D,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2B_64_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, ByteVector.SPECIES_64,\n-                a, VectorOperators.L2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2B_64_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, ByteVector.SPECIES_128,\n-                a, VectorOperators.L2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2B_64_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, ByteVector.SPECIES_256,\n-                a, VectorOperators.L2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2B_64_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, ByteVector.SPECIES_512,\n-                a, VectorOperators.L2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2B_64_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, ByteVector.SPECIES_MAX,\n-                a, VectorOperators.L2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2S_64_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, ShortVector.SPECIES_64,\n-                a, VectorOperators.L2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2S_64_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, ShortVector.SPECIES_128,\n-                a, VectorOperators.L2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2S_64_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, ShortVector.SPECIES_256,\n-                a, VectorOperators.L2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2S_64_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, ShortVector.SPECIES_512,\n-                a, VectorOperators.L2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2S_64_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, ShortVector.SPECIES_MAX,\n-                a, VectorOperators.L2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2I_64_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, IntVector.SPECIES_64,\n-                a, VectorOperators.L2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2I_64_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, IntVector.SPECIES_128,\n-                a, VectorOperators.L2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2I_64_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, IntVector.SPECIES_256,\n-                a, VectorOperators.L2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2I_64_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, IntVector.SPECIES_512,\n-                a, VectorOperators.L2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2I_64_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, IntVector.SPECIES_MAX,\n-                a, VectorOperators.L2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2L_64_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, LongVector.SPECIES_64,\n-                a, L2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2L_64_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, LongVector.SPECIES_128,\n-                a, L2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2L_64_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, LongVector.SPECIES_256,\n-                a, L2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2L_64_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, LongVector.SPECIES_512,\n-                a, L2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2L_64_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, LongVector.SPECIES_MAX,\n-                a, L2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2F_64_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, FloatVector.SPECIES_64,\n-                a, VectorOperators.L2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2F_64_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, FloatVector.SPECIES_128,\n-                a, VectorOperators.L2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2F_64_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, FloatVector.SPECIES_256,\n-                a, VectorOperators.L2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2F_64_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, FloatVector.SPECIES_512,\n-                a, VectorOperators.L2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2F_64_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, FloatVector.SPECIES_MAX,\n-                a, VectorOperators.L2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2D_64_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, DoubleVector.SPECIES_64,\n-                a, VectorOperators.L2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2D_64_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, DoubleVector.SPECIES_128,\n-                a, VectorOperators.L2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2D_64_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, DoubleVector.SPECIES_256,\n-                a, VectorOperators.L2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2D_64_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, DoubleVector.SPECIES_512,\n-                a, VectorOperators.L2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2D_64_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, DoubleVector.SPECIES_MAX,\n-                a, VectorOperators.L2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2B_64_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, ByteVector.SPECIES_64,\n-                a, VectorOperators.L2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2B_64_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, ByteVector.SPECIES_128,\n-                a, VectorOperators.L2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2B_64_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, ByteVector.SPECIES_256,\n-                a, VectorOperators.L2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2B_64_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, ByteVector.SPECIES_512,\n-                a, VectorOperators.L2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2B_64_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, ByteVector.SPECIES_MAX,\n-                a, VectorOperators.L2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2S_64_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, ShortVector.SPECIES_64,\n-                a, VectorOperators.L2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2S_64_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, ShortVector.SPECIES_128,\n-                a, VectorOperators.L2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2S_64_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, ShortVector.SPECIES_256,\n-                a, VectorOperators.L2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2S_64_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, ShortVector.SPECIES_512,\n-                a, VectorOperators.L2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2S_64_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, ShortVector.SPECIES_MAX,\n-                a, VectorOperators.L2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2I_64_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, IntVector.SPECIES_64,\n-                a, VectorOperators.L2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2I_64_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, IntVector.SPECIES_128,\n-                a, VectorOperators.L2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2I_64_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, IntVector.SPECIES_256,\n-                a, VectorOperators.L2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2I_64_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, IntVector.SPECIES_512,\n-                a, VectorOperators.L2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2I_64_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, IntVector.SPECIES_MAX,\n-                a, VectorOperators.L2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2L_64_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, LongVector.SPECIES_64,\n-                a, L2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2L_64_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, LongVector.SPECIES_128,\n-                a, L2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2L_64_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, LongVector.SPECIES_256,\n-                a, L2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2L_64_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, LongVector.SPECIES_512,\n-                a, L2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2L_64_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, LongVector.SPECIES_MAX,\n-                a, L2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2F_64_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, FloatVector.SPECIES_64,\n-                a, VectorOperators.L2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2F_64_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, FloatVector.SPECIES_128,\n-                a, VectorOperators.L2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2F_64_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, FloatVector.SPECIES_256,\n-                a, VectorOperators.L2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2F_64_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, FloatVector.SPECIES_512,\n-                a, VectorOperators.L2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2F_64_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, FloatVector.SPECIES_MAX,\n-                a, VectorOperators.L2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2D_64_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, DoubleVector.SPECIES_64,\n-                a, VectorOperators.L2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2D_64_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, DoubleVector.SPECIES_128,\n-                a, VectorOperators.L2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2D_64_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, DoubleVector.SPECIES_256,\n-                a, VectorOperators.L2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2D_64_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, DoubleVector.SPECIES_512,\n-                a, VectorOperators.L2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2D_64_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_64, DoubleVector.SPECIES_MAX,\n-                a, VectorOperators.L2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2B_64_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_64, ByteVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2B_64_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_64, ByteVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2B_64_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_64, ByteVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2B_64_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_64, ByteVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2B_64_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_64, ByteVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2S_64_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_64, ShortVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2S_64_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_64, ShortVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2S_64_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_64, ShortVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2S_64_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_64, ShortVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2S_64_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_64, ShortVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2I_64_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_64, IntVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2I_64_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_64, IntVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2I_64_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_64, IntVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2I_64_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_64, IntVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2I_64_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_64, IntVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2L_64_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_64, LongVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2L_64_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_64, LongVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2L_64_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_64, LongVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2L_64_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_64, LongVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2L_64_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_64, LongVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2F_64_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_64, FloatVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2F_64_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_64, FloatVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2F_64_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_64, FloatVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2F_64_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_64, FloatVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2F_64_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_64, FloatVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2D_64_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_64, DoubleVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2D_64_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_64, DoubleVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2D_64_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_64, DoubleVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2D_64_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_64, DoubleVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2D_64_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_64, DoubleVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertS2B_64_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, ByteVector.SPECIES_64,\n-                a, VectorOperators.S2B,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertS2S_64_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, ShortVector.SPECIES_64,\n-                a, S2S,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertS2I_64_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, IntVector.SPECIES_64,\n-                a, VectorOperators.S2I,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertS2L_64_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, LongVector.SPECIES_64,\n-                a, VectorOperators.S2L,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertS2F_64_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, FloatVector.SPECIES_64,\n-                a, VectorOperators.S2F,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertS2D_64_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, DoubleVector.SPECIES_64,\n-                a, VectorOperators.S2D,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2B_64_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, ByteVector.SPECIES_64,\n-                a, VectorOperators.S2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2B_64_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, ByteVector.SPECIES_128,\n-                a, VectorOperators.S2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2B_64_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, ByteVector.SPECIES_256,\n-                a, VectorOperators.S2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2B_64_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, ByteVector.SPECIES_512,\n-                a, VectorOperators.S2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2B_64_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, ByteVector.SPECIES_MAX,\n-                a, VectorOperators.S2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2S_64_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, ShortVector.SPECIES_64,\n-                a, S2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2S_64_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, ShortVector.SPECIES_128,\n-                a, S2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2S_64_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, ShortVector.SPECIES_256,\n-                a, S2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2S_64_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, ShortVector.SPECIES_512,\n-                a, S2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2S_64_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, ShortVector.SPECIES_MAX,\n-                a, S2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2I_64_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, IntVector.SPECIES_64,\n-                a, VectorOperators.S2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2I_64_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, IntVector.SPECIES_128,\n-                a, VectorOperators.S2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2I_64_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, IntVector.SPECIES_256,\n-                a, VectorOperators.S2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2I_64_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, IntVector.SPECIES_512,\n-                a, VectorOperators.S2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2I_64_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, IntVector.SPECIES_MAX,\n-                a, VectorOperators.S2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2L_64_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, LongVector.SPECIES_64,\n-                a, VectorOperators.S2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2L_64_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, LongVector.SPECIES_128,\n-                a, VectorOperators.S2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2L_64_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, LongVector.SPECIES_256,\n-                a, VectorOperators.S2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2L_64_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, LongVector.SPECIES_512,\n-                a, VectorOperators.S2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2L_64_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, LongVector.SPECIES_MAX,\n-                a, VectorOperators.S2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2F_64_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, FloatVector.SPECIES_64,\n-                a, VectorOperators.S2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2F_64_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, FloatVector.SPECIES_128,\n-                a, VectorOperators.S2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2F_64_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, FloatVector.SPECIES_256,\n-                a, VectorOperators.S2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2F_64_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, FloatVector.SPECIES_512,\n-                a, VectorOperators.S2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2F_64_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, FloatVector.SPECIES_MAX,\n-                a, VectorOperators.S2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2D_64_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, DoubleVector.SPECIES_64,\n-                a, VectorOperators.S2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2D_64_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, DoubleVector.SPECIES_128,\n-                a, VectorOperators.S2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2D_64_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, DoubleVector.SPECIES_256,\n-                a, VectorOperators.S2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2D_64_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, DoubleVector.SPECIES_512,\n-                a, VectorOperators.S2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2D_64_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, DoubleVector.SPECIES_MAX,\n-                a, VectorOperators.S2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2B_64_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, ByteVector.SPECIES_64,\n-                a, VectorOperators.S2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2B_64_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, ByteVector.SPECIES_128,\n-                a, VectorOperators.S2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2B_64_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, ByteVector.SPECIES_256,\n-                a, VectorOperators.S2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2B_64_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, ByteVector.SPECIES_512,\n-                a, VectorOperators.S2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2B_64_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, ByteVector.SPECIES_MAX,\n-                a, VectorOperators.S2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2S_64_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, ShortVector.SPECIES_64,\n-                a, S2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2S_64_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, ShortVector.SPECIES_128,\n-                a, S2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2S_64_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, ShortVector.SPECIES_256,\n-                a, S2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2S_64_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, ShortVector.SPECIES_512,\n-                a, S2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2S_64_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, ShortVector.SPECIES_MAX,\n-                a, S2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2I_64_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, IntVector.SPECIES_64,\n-                a, VectorOperators.S2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2I_64_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, IntVector.SPECIES_128,\n-                a, VectorOperators.S2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2I_64_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, IntVector.SPECIES_256,\n-                a, VectorOperators.S2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2I_64_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, IntVector.SPECIES_512,\n-                a, VectorOperators.S2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2I_64_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, IntVector.SPECIES_MAX,\n-                a, VectorOperators.S2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2L_64_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, LongVector.SPECIES_64,\n-                a, VectorOperators.S2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2L_64_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, LongVector.SPECIES_128,\n-                a, VectorOperators.S2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2L_64_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, LongVector.SPECIES_256,\n-                a, VectorOperators.S2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2L_64_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, LongVector.SPECIES_512,\n-                a, VectorOperators.S2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2L_64_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, LongVector.SPECIES_MAX,\n-                a, VectorOperators.S2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2F_64_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, FloatVector.SPECIES_64,\n-                a, VectorOperators.S2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2F_64_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, FloatVector.SPECIES_128,\n-                a, VectorOperators.S2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2F_64_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, FloatVector.SPECIES_256,\n-                a, VectorOperators.S2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2F_64_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, FloatVector.SPECIES_512,\n-                a, VectorOperators.S2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2F_64_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, FloatVector.SPECIES_MAX,\n-                a, VectorOperators.S2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2D_64_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, DoubleVector.SPECIES_64,\n-                a, VectorOperators.S2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2D_64_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, DoubleVector.SPECIES_128,\n-                a, VectorOperators.S2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2D_64_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, DoubleVector.SPECIES_256,\n-                a, VectorOperators.S2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2D_64_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, DoubleVector.SPECIES_512,\n-                a, VectorOperators.S2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2D_64_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_64, DoubleVector.SPECIES_MAX,\n-                a, VectorOperators.S2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2B_64_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_64, ByteVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2B_64_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_64, ByteVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2B_64_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_64, ByteVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2B_64_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_64, ByteVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2B_64_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_64, ByteVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2S_64_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_64, ShortVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2S_64_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_64, ShortVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2S_64_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_64, ShortVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2S_64_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_64, ShortVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2S_64_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_64, ShortVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2I_64_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_64, IntVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2I_64_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_64, IntVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2I_64_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_64, IntVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2I_64_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_64, IntVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2I_64_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_64, IntVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2L_64_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_64, LongVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2L_64_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_64, LongVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2L_64_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_64, LongVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2L_64_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_64, LongVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2L_64_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_64, LongVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2F_64_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_64, FloatVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2F_64_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_64, FloatVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2F_64_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_64, FloatVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2F_64_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_64, FloatVector.SPECIES_512,\n-                a, a.length);\n-    }\n+    static final VectorShape SHAPE = VectorShape.S_64_BIT;\n@@ -4438,5 +45,3 @@\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2F_64_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_64, FloatVector.SPECIES_MAX,\n-                a, a.length);\n+    @DataProvider\n+    public Object[][] fixedShapeXfixedShape() {\n+        return fixedShapeXFixedShapeSpeciesArgs(SHAPE);\n@@ -4445,5 +50,3 @@\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2D_64_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_64, DoubleVector.SPECIES_64,\n-                a, a.length);\n+    @DataProvider\n+    public Object[][] fixedShapeXShape() {\n+        return fixedShapeXShapeSpeciesArgs(SHAPE);\n@@ -4452,5 +55,4 @@\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2D_64_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_64, DoubleVector.SPECIES_128,\n-                a, a.length);\n+    @Test(dataProvider = \"fixedShapeXfixedShape\")\n+    static <I, O> void convert(VectorSpecies<I> src, VectorSpecies<O> dst, IntFunction<?> fa) {\n+        Object a = fa.apply(1024);\n+        conversion_kernel(src, dst, a, ConvAPI.CONVERT);\n@@ -4459,5 +61,4 @@\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2D_64_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_64, DoubleVector.SPECIES_256,\n-                a, a.length);\n+    @Test(dataProvider = \"fixedShapeXShape\")\n+    static <I, O> void convertShape(VectorSpecies<I> src, VectorSpecies<O> dst, IntFunction<?> fa) {\n+        Object a = fa.apply(1024);\n+        conversion_kernel(src, dst, a, ConvAPI.CONVERTSHAPE);\n@@ -4466,5 +67,4 @@\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2D_64_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_64, DoubleVector.SPECIES_512,\n-                a, a.length);\n+    @Test(dataProvider = \"fixedShapeXShape\")\n+    static <I, O> void castShape(VectorSpecies<I> src, VectorSpecies<O> dst, IntFunction<?> fa) {\n+        Object a = fa.apply(1024);\n+        conversion_kernel(src, dst, a, ConvAPI.CASTSHAPE);\n@@ -4473,5 +73,4 @@\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2D_64_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_64, DoubleVector.SPECIES_MAX,\n-                a, a.length);\n+    @Test(dataProvider = \"fixedShapeXShape\")\n+    static <I, O> void reinterpret(VectorSpecies<I> src, VectorSpecies<O> dst, IntFunction<?> fa) {\n+        Object a = fa.apply(1024);\n+        reinterpret_kernel(src, dst, a);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Vector64ConversionTests.java","additions":26,"deletions":4427,"binary":false,"changes":4453,"status":"modified"},{"patch":"@@ -24,7 +24,3 @@\n-import jdk.incubator.vector.ByteVector;\n-import jdk.incubator.vector.DoubleVector;\n-import jdk.incubator.vector.FloatVector;\n-import jdk.incubator.vector.IntVector;\n-import jdk.incubator.vector.LongVector;\n-import jdk.incubator.vector.ShortVector;\n-import jdk.incubator.vector.VectorOperators;\n+import jdk.incubator.vector.VectorShape;\n+import jdk.incubator.vector.VectorSpecies;\n+import org.testng.annotations.DataProvider;\n@@ -46,4390 +42,1 @@\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertB2B_Max_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, ByteVector.SPECIES_MAX,\n-                a, B2B,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertB2S_Max_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, ShortVector.SPECIES_MAX,\n-                a, VectorOperators.B2S,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertB2I_Max_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, IntVector.SPECIES_MAX,\n-                a, VectorOperators.B2I,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertB2L_Max_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, LongVector.SPECIES_MAX,\n-                a, VectorOperators.B2L,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertB2F_Max_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, FloatVector.SPECIES_MAX,\n-                a, VectorOperators.B2F,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertB2D_Max_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, DoubleVector.SPECIES_MAX,\n-                a, VectorOperators.B2D,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2B_Max_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, ByteVector.SPECIES_64,\n-                a, B2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2B_Max_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, ByteVector.SPECIES_128,\n-                a, B2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2B_Max_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, ByteVector.SPECIES_256,\n-                a, B2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2B_Max_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, ByteVector.SPECIES_512,\n-                a, B2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2B_Max_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, ByteVector.SPECIES_MAX,\n-                a, B2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2S_Max_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, ShortVector.SPECIES_64,\n-                a, VectorOperators.B2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2S_Max_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, ShortVector.SPECIES_128,\n-                a, VectorOperators.B2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2S_Max_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, ShortVector.SPECIES_256,\n-                a, VectorOperators.B2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2S_Max_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, ShortVector.SPECIES_512,\n-                a, VectorOperators.B2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2S_Max_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, ShortVector.SPECIES_MAX,\n-                a, VectorOperators.B2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2I_Max_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, IntVector.SPECIES_64,\n-                a, VectorOperators.B2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2I_Max_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, IntVector.SPECIES_128,\n-                a, VectorOperators.B2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2I_Max_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, IntVector.SPECIES_256,\n-                a, VectorOperators.B2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2I_Max_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, IntVector.SPECIES_512,\n-                a, VectorOperators.B2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2I_Max_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, IntVector.SPECIES_MAX,\n-                a, VectorOperators.B2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2L_Max_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, LongVector.SPECIES_64,\n-                a, VectorOperators.B2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2L_Max_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, LongVector.SPECIES_128,\n-                a, VectorOperators.B2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2L_Max_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, LongVector.SPECIES_256,\n-                a, VectorOperators.B2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2L_Max_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, LongVector.SPECIES_512,\n-                a, VectorOperators.B2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2L_Max_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, LongVector.SPECIES_MAX,\n-                a, VectorOperators.B2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2F_Max_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, FloatVector.SPECIES_64,\n-                a, VectorOperators.B2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2F_Max_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, FloatVector.SPECIES_128,\n-                a, VectorOperators.B2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2F_Max_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, FloatVector.SPECIES_256,\n-                a, VectorOperators.B2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2F_Max_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, FloatVector.SPECIES_512,\n-                a, VectorOperators.B2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2F_Max_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, FloatVector.SPECIES_MAX,\n-                a, VectorOperators.B2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2D_Max_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, DoubleVector.SPECIES_64,\n-                a, VectorOperators.B2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2D_Max_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, DoubleVector.SPECIES_128,\n-                a, VectorOperators.B2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2D_Max_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, DoubleVector.SPECIES_256,\n-                a, VectorOperators.B2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2D_Max_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, DoubleVector.SPECIES_512,\n-                a, VectorOperators.B2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void convertShapeB2D_Max_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, DoubleVector.SPECIES_MAX,\n-                a, VectorOperators.B2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2B_Max_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, ByteVector.SPECIES_64,\n-                a, B2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2B_Max_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, ByteVector.SPECIES_128,\n-                a, B2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2B_Max_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, ByteVector.SPECIES_256,\n-                a, B2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2B_Max_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, ByteVector.SPECIES_512,\n-                a, B2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2B_Max_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, ByteVector.SPECIES_MAX,\n-                a, B2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2S_Max_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, ShortVector.SPECIES_64,\n-                a, VectorOperators.B2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2S_Max_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, ShortVector.SPECIES_128,\n-                a, VectorOperators.B2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2S_Max_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, ShortVector.SPECIES_256,\n-                a, VectorOperators.B2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2S_Max_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, ShortVector.SPECIES_512,\n-                a, VectorOperators.B2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2S_Max_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, ShortVector.SPECIES_MAX,\n-                a, VectorOperators.B2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2I_Max_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, IntVector.SPECIES_64,\n-                a, VectorOperators.B2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2I_Max_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, IntVector.SPECIES_128,\n-                a, VectorOperators.B2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2I_Max_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, IntVector.SPECIES_256,\n-                a, VectorOperators.B2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2I_Max_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, IntVector.SPECIES_512,\n-                a, VectorOperators.B2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2I_Max_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, IntVector.SPECIES_MAX,\n-                a, VectorOperators.B2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2L_Max_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, LongVector.SPECIES_64,\n-                a, VectorOperators.B2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2L_Max_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, LongVector.SPECIES_128,\n-                a, VectorOperators.B2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2L_Max_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, LongVector.SPECIES_256,\n-                a, VectorOperators.B2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2L_Max_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, LongVector.SPECIES_512,\n-                a, VectorOperators.B2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2L_Max_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, LongVector.SPECIES_MAX,\n-                a, VectorOperators.B2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2F_Max_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, FloatVector.SPECIES_64,\n-                a, VectorOperators.B2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2F_Max_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, FloatVector.SPECIES_128,\n-                a, VectorOperators.B2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2F_Max_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, FloatVector.SPECIES_256,\n-                a, VectorOperators.B2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2F_Max_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, FloatVector.SPECIES_512,\n-                a, VectorOperators.B2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2F_Max_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, FloatVector.SPECIES_MAX,\n-                a, VectorOperators.B2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2D_Max_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, DoubleVector.SPECIES_64,\n-                a, VectorOperators.B2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2D_Max_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, DoubleVector.SPECIES_128,\n-                a, VectorOperators.B2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2D_Max_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, DoubleVector.SPECIES_256,\n-                a, VectorOperators.B2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2D_Max_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, DoubleVector.SPECIES_512,\n-                a, VectorOperators.B2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void castShapeB2D_Max_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        conversion_kernel(ByteVector.SPECIES_MAX, DoubleVector.SPECIES_MAX,\n-                a, VectorOperators.B2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2B_Max_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_MAX, ByteVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2B_Max_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_MAX, ByteVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2B_Max_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_MAX, ByteVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2B_Max_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_MAX, ByteVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2B_Max_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_MAX, ByteVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2S_Max_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_MAX, ShortVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2S_Max_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_MAX, ShortVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2S_Max_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_MAX, ShortVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2S_Max_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_MAX, ShortVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2S_Max_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_MAX, ShortVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2I_Max_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_MAX, IntVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2I_Max_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_MAX, IntVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2I_Max_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_MAX, IntVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2I_Max_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_MAX, IntVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2I_Max_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_MAX, IntVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2L_Max_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_MAX, LongVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2L_Max_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_MAX, LongVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2L_Max_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_MAX, LongVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2L_Max_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_MAX, LongVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2L_Max_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_MAX, LongVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2F_Max_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_MAX, FloatVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2F_Max_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_MAX, FloatVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2F_Max_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_MAX, FloatVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2F_Max_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_MAX, FloatVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2F_Max_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_MAX, FloatVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2D_Max_To_64(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_MAX, DoubleVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2D_Max_To_128(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_MAX, DoubleVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2D_Max_To_256(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_MAX, DoubleVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2D_Max_To_512(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_MAX, DoubleVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"byteUnaryOpProvider\")\n-    static void reinterpretShapeB2D_Max_To_MAX(IntFunction<byte[]> fa) {\n-        byte[] a = fa.apply(1024);\n-        reinterpret_kernel(ByteVector.SPECIES_MAX, DoubleVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertD2B_Max_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, ByteVector.SPECIES_MAX,\n-                a, VectorOperators.D2B,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertD2S_Max_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, ShortVector.SPECIES_MAX,\n-                a, VectorOperators.D2S,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertD2I_Max_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, IntVector.SPECIES_MAX,\n-                a, VectorOperators.D2I,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertD2L_Max_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, LongVector.SPECIES_MAX,\n-                a, VectorOperators.D2L,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertD2F_Max_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, FloatVector.SPECIES_MAX,\n-                a, VectorOperators.D2F,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertD2D_Max_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, DoubleVector.SPECIES_MAX,\n-                a, D2D,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2B_Max_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, ByteVector.SPECIES_64,\n-                a, VectorOperators.D2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2B_Max_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, ByteVector.SPECIES_128,\n-                a, VectorOperators.D2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2B_Max_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, ByteVector.SPECIES_256,\n-                a, VectorOperators.D2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2B_Max_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, ByteVector.SPECIES_512,\n-                a, VectorOperators.D2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2B_Max_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, ByteVector.SPECIES_MAX,\n-                a, VectorOperators.D2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2S_Max_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, ShortVector.SPECIES_64,\n-                a, VectorOperators.D2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2S_Max_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, ShortVector.SPECIES_128,\n-                a, VectorOperators.D2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2S_Max_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, ShortVector.SPECIES_256,\n-                a, VectorOperators.D2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2S_Max_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, ShortVector.SPECIES_512,\n-                a, VectorOperators.D2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2S_Max_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, ShortVector.SPECIES_MAX,\n-                a, VectorOperators.D2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2I_Max_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, IntVector.SPECIES_64,\n-                a, VectorOperators.D2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2I_Max_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, IntVector.SPECIES_128,\n-                a, VectorOperators.D2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2I_Max_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, IntVector.SPECIES_256,\n-                a, VectorOperators.D2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2I_Max_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, IntVector.SPECIES_512,\n-                a, VectorOperators.D2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2I_Max_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, IntVector.SPECIES_MAX,\n-                a, VectorOperators.D2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2L_Max_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, LongVector.SPECIES_64,\n-                a, VectorOperators.D2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2L_Max_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, LongVector.SPECIES_128,\n-                a, VectorOperators.D2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2L_Max_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, LongVector.SPECIES_256,\n-                a, VectorOperators.D2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2L_Max_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, LongVector.SPECIES_512,\n-                a, VectorOperators.D2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2L_Max_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, LongVector.SPECIES_MAX,\n-                a, VectorOperators.D2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2F_Max_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, FloatVector.SPECIES_64,\n-                a, VectorOperators.D2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2F_Max_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, FloatVector.SPECIES_128,\n-                a, VectorOperators.D2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2F_Max_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, FloatVector.SPECIES_256,\n-                a, VectorOperators.D2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2F_Max_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, FloatVector.SPECIES_512,\n-                a, VectorOperators.D2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2F_Max_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, FloatVector.SPECIES_MAX,\n-                a, VectorOperators.D2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2D_Max_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, DoubleVector.SPECIES_64,\n-                a, D2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2D_Max_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, DoubleVector.SPECIES_128,\n-                a, D2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2D_Max_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, DoubleVector.SPECIES_256,\n-                a, D2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2D_Max_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, DoubleVector.SPECIES_512,\n-                a, D2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void convertShapeD2D_Max_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, DoubleVector.SPECIES_MAX,\n-                a, D2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2B_Max_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, ByteVector.SPECIES_64,\n-                a, VectorOperators.D2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2B_Max_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, ByteVector.SPECIES_128,\n-                a, VectorOperators.D2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2B_Max_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, ByteVector.SPECIES_256,\n-                a, VectorOperators.D2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2B_Max_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, ByteVector.SPECIES_512,\n-                a, VectorOperators.D2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2B_Max_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, ByteVector.SPECIES_MAX,\n-                a, VectorOperators.D2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2S_Max_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, ShortVector.SPECIES_64,\n-                a, VectorOperators.D2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2S_Max_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, ShortVector.SPECIES_128,\n-                a, VectorOperators.D2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2S_Max_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, ShortVector.SPECIES_256,\n-                a, VectorOperators.D2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2S_Max_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, ShortVector.SPECIES_512,\n-                a, VectorOperators.D2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2S_Max_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, ShortVector.SPECIES_MAX,\n-                a, VectorOperators.D2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2I_Max_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, IntVector.SPECIES_64,\n-                a, VectorOperators.D2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2I_Max_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, IntVector.SPECIES_128,\n-                a, VectorOperators.D2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2I_Max_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, IntVector.SPECIES_256,\n-                a, VectorOperators.D2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2I_Max_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, IntVector.SPECIES_512,\n-                a, VectorOperators.D2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2I_Max_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, IntVector.SPECIES_MAX,\n-                a, VectorOperators.D2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2L_Max_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, LongVector.SPECIES_64,\n-                a, VectorOperators.D2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2L_Max_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, LongVector.SPECIES_128,\n-                a, VectorOperators.D2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2L_Max_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, LongVector.SPECIES_256,\n-                a, VectorOperators.D2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2L_Max_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, LongVector.SPECIES_512,\n-                a, VectorOperators.D2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2L_Max_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, LongVector.SPECIES_MAX,\n-                a, VectorOperators.D2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2F_Max_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, FloatVector.SPECIES_64,\n-                a, VectorOperators.D2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2F_Max_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, FloatVector.SPECIES_128,\n-                a, VectorOperators.D2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2F_Max_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, FloatVector.SPECIES_256,\n-                a, VectorOperators.D2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2F_Max_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, FloatVector.SPECIES_512,\n-                a, VectorOperators.D2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2F_Max_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, FloatVector.SPECIES_MAX,\n-                a, VectorOperators.D2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2D_Max_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, DoubleVector.SPECIES_64,\n-                a, D2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2D_Max_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, DoubleVector.SPECIES_128,\n-                a, D2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2D_Max_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, DoubleVector.SPECIES_256,\n-                a, D2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2D_Max_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, DoubleVector.SPECIES_512,\n-                a, D2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void castShapeD2D_Max_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        conversion_kernel(DoubleVector.SPECIES_MAX, DoubleVector.SPECIES_MAX,\n-                a, D2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2B_Max_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_MAX, ByteVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2B_Max_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_MAX, ByteVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2B_Max_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_MAX, ByteVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2B_Max_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_MAX, ByteVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2B_Max_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_MAX, ByteVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2S_Max_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_MAX, ShortVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2S_Max_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_MAX, ShortVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2S_Max_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_MAX, ShortVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2S_Max_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_MAX, ShortVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2S_Max_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_MAX, ShortVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2I_Max_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_MAX, IntVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2I_Max_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_MAX, IntVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2I_Max_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_MAX, IntVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2I_Max_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_MAX, IntVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2I_Max_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_MAX, IntVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2L_Max_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_MAX, LongVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2L_Max_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_MAX, LongVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2L_Max_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_MAX, LongVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2L_Max_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_MAX, LongVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2L_Max_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_MAX, LongVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2F_Max_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_MAX, FloatVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2F_Max_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_MAX, FloatVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2F_Max_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_MAX, FloatVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2F_Max_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_MAX, FloatVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2F_Max_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_MAX, FloatVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2D_Max_To_64(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_MAX, DoubleVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2D_Max_To_128(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_MAX, DoubleVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2D_Max_To_256(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_MAX, DoubleVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2D_Max_To_512(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_MAX, DoubleVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"doubleUnaryOpProvider\")\n-    static void reinterpretShapeD2D_Max_To_MAX(IntFunction<double[]> fa) {\n-        double[] a = fa.apply(1024);\n-        reinterpret_kernel(DoubleVector.SPECIES_MAX, DoubleVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertF2B_Max_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, ByteVector.SPECIES_MAX,\n-                a, VectorOperators.F2B,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertF2S_Max_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, ShortVector.SPECIES_MAX,\n-                a, VectorOperators.F2S,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertF2I_Max_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, IntVector.SPECIES_MAX,\n-                a, VectorOperators.F2I,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertF2L_Max_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, LongVector.SPECIES_MAX,\n-                a, VectorOperators.F2L,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertF2F_Max_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, FloatVector.SPECIES_MAX,\n-                a, F2F,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertF2D_Max_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, DoubleVector.SPECIES_MAX,\n-                a, VectorOperators.F2D,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2B_Max_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, ByteVector.SPECIES_64,\n-                a, VectorOperators.F2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2B_Max_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, ByteVector.SPECIES_128,\n-                a, VectorOperators.F2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2B_Max_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, ByteVector.SPECIES_256,\n-                a, VectorOperators.F2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2B_Max_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, ByteVector.SPECIES_512,\n-                a, VectorOperators.F2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2B_Max_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, ByteVector.SPECIES_MAX,\n-                a, VectorOperators.F2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2S_Max_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, ShortVector.SPECIES_64,\n-                a, VectorOperators.F2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2S_Max_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, ShortVector.SPECIES_128,\n-                a, VectorOperators.F2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2S_Max_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, ShortVector.SPECIES_256,\n-                a, VectorOperators.F2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2S_Max_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, ShortVector.SPECIES_512,\n-                a, VectorOperators.F2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2S_Max_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, ShortVector.SPECIES_MAX,\n-                a, VectorOperators.F2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2I_Max_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, IntVector.SPECIES_64,\n-                a, VectorOperators.F2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2I_Max_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, IntVector.SPECIES_128,\n-                a, VectorOperators.F2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2I_Max_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, IntVector.SPECIES_256,\n-                a, VectorOperators.F2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2I_Max_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, IntVector.SPECIES_512,\n-                a, VectorOperators.F2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2I_Max_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, IntVector.SPECIES_MAX,\n-                a, VectorOperators.F2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2L_Max_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, LongVector.SPECIES_64,\n-                a, VectorOperators.F2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2L_Max_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, LongVector.SPECIES_128,\n-                a, VectorOperators.F2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2L_Max_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, LongVector.SPECIES_256,\n-                a, VectorOperators.F2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2L_Max_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, LongVector.SPECIES_512,\n-                a, VectorOperators.F2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2L_Max_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, LongVector.SPECIES_MAX,\n-                a, VectorOperators.F2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2F_Max_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, FloatVector.SPECIES_64,\n-                a, F2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2F_Max_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, FloatVector.SPECIES_128,\n-                a, F2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2F_Max_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, FloatVector.SPECIES_256,\n-                a, F2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2F_Max_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, FloatVector.SPECIES_512,\n-                a, F2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2F_Max_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, FloatVector.SPECIES_MAX,\n-                a, F2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2D_Max_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, DoubleVector.SPECIES_64,\n-                a, VectorOperators.F2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2D_Max_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, DoubleVector.SPECIES_128,\n-                a, VectorOperators.F2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2D_Max_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, DoubleVector.SPECIES_256,\n-                a, VectorOperators.F2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2D_Max_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, DoubleVector.SPECIES_512,\n-                a, VectorOperators.F2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void convertShapeF2D_Max_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, DoubleVector.SPECIES_MAX,\n-                a, VectorOperators.F2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2B_Max_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, ByteVector.SPECIES_64,\n-                a, VectorOperators.F2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2B_Max_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, ByteVector.SPECIES_128,\n-                a, VectorOperators.F2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2B_Max_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, ByteVector.SPECIES_256,\n-                a, VectorOperators.F2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2B_Max_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, ByteVector.SPECIES_512,\n-                a, VectorOperators.F2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2B_Max_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, ByteVector.SPECIES_MAX,\n-                a, VectorOperators.F2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2S_Max_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, ShortVector.SPECIES_64,\n-                a, VectorOperators.F2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2S_Max_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, ShortVector.SPECIES_128,\n-                a, VectorOperators.F2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2S_Max_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, ShortVector.SPECIES_256,\n-                a, VectorOperators.F2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2S_Max_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, ShortVector.SPECIES_512,\n-                a, VectorOperators.F2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2S_Max_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, ShortVector.SPECIES_MAX,\n-                a, VectorOperators.F2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2I_Max_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, IntVector.SPECIES_64,\n-                a, VectorOperators.F2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2I_Max_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, IntVector.SPECIES_128,\n-                a, VectorOperators.F2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2I_Max_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, IntVector.SPECIES_256,\n-                a, VectorOperators.F2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2I_Max_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, IntVector.SPECIES_512,\n-                a, VectorOperators.F2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2I_Max_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, IntVector.SPECIES_MAX,\n-                a, VectorOperators.F2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2L_Max_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, LongVector.SPECIES_64,\n-                a, VectorOperators.F2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2L_Max_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, LongVector.SPECIES_128,\n-                a, VectorOperators.F2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2L_Max_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, LongVector.SPECIES_256,\n-                a, VectorOperators.F2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2L_Max_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, LongVector.SPECIES_512,\n-                a, VectorOperators.F2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2L_Max_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, LongVector.SPECIES_MAX,\n-                a, VectorOperators.F2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2F_Max_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, FloatVector.SPECIES_64,\n-                a, F2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2F_Max_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, FloatVector.SPECIES_128,\n-                a, F2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2F_Max_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, FloatVector.SPECIES_256,\n-                a, F2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2F_Max_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, FloatVector.SPECIES_512,\n-                a, F2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2F_Max_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, FloatVector.SPECIES_MAX,\n-                a, F2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2D_Max_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, DoubleVector.SPECIES_64,\n-                a, VectorOperators.F2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2D_Max_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, DoubleVector.SPECIES_128,\n-                a, VectorOperators.F2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2D_Max_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, DoubleVector.SPECIES_256,\n-                a, VectorOperators.F2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2D_Max_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, DoubleVector.SPECIES_512,\n-                a, VectorOperators.F2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void castShapeF2D_Max_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        conversion_kernel(FloatVector.SPECIES_MAX, DoubleVector.SPECIES_MAX,\n-                a, VectorOperators.F2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2B_Max_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_MAX, ByteVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2B_Max_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_MAX, ByteVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2B_Max_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_MAX, ByteVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2B_Max_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_MAX, ByteVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2B_Max_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_MAX, ByteVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2S_Max_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_MAX, ShortVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2S_Max_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_MAX, ShortVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2S_Max_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_MAX, ShortVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2S_Max_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_MAX, ShortVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2S_Max_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_MAX, ShortVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2I_Max_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_MAX, IntVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2I_Max_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_MAX, IntVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2I_Max_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_MAX, IntVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2I_Max_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_MAX, IntVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2I_Max_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_MAX, IntVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2L_Max_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_MAX, LongVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2L_Max_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_MAX, LongVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2L_Max_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_MAX, LongVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2L_Max_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_MAX, LongVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2L_Max_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_MAX, LongVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2F_Max_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_MAX, FloatVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2F_Max_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_MAX, FloatVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2F_Max_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_MAX, FloatVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2F_Max_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_MAX, FloatVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2F_Max_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_MAX, FloatVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2D_Max_To_64(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_MAX, DoubleVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2D_Max_To_128(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_MAX, DoubleVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2D_Max_To_256(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_MAX, DoubleVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2D_Max_To_512(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_MAX, DoubleVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"floatUnaryOpProvider\")\n-    static void reinterpretShapeF2D_Max_To_MAX(IntFunction<float[]> fa) {\n-        float[] a = fa.apply(1024);\n-        reinterpret_kernel(FloatVector.SPECIES_MAX, DoubleVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertI2B_Max_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, ByteVector.SPECIES_MAX,\n-                a, VectorOperators.I2B,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertI2S_Max_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, ShortVector.SPECIES_MAX,\n-                a, VectorOperators.I2S,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertI2I_Max_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, IntVector.SPECIES_MAX,\n-                a, I2I,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertI2L_Max_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, LongVector.SPECIES_MAX,\n-                a, VectorOperators.I2L,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertI2F_Max_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, FloatVector.SPECIES_MAX,\n-                a, VectorOperators.I2F,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertI2D_Max_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, DoubleVector.SPECIES_MAX,\n-                a, VectorOperators.I2D,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2B_Max_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, ByteVector.SPECIES_64,\n-                a, VectorOperators.I2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2B_Max_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, ByteVector.SPECIES_128,\n-                a, VectorOperators.I2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2B_Max_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, ByteVector.SPECIES_256,\n-                a, VectorOperators.I2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2B_Max_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, ByteVector.SPECIES_512,\n-                a, VectorOperators.I2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2B_Max_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, ByteVector.SPECIES_MAX,\n-                a, VectorOperators.I2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2S_Max_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, ShortVector.SPECIES_64,\n-                a, VectorOperators.I2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2S_Max_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, ShortVector.SPECIES_128,\n-                a, VectorOperators.I2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2S_Max_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, ShortVector.SPECIES_256,\n-                a, VectorOperators.I2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2S_Max_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, ShortVector.SPECIES_512,\n-                a, VectorOperators.I2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2S_Max_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, ShortVector.SPECIES_MAX,\n-                a, VectorOperators.I2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2I_Max_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, IntVector.SPECIES_64,\n-                a, I2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2I_Max_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, IntVector.SPECIES_128,\n-                a, I2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2I_Max_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, IntVector.SPECIES_256,\n-                a, I2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2I_Max_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, IntVector.SPECIES_512,\n-                a, I2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2I_Max_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, IntVector.SPECIES_MAX,\n-                a, I2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2L_Max_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, LongVector.SPECIES_64,\n-                a, VectorOperators.I2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2L_Max_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, LongVector.SPECIES_128,\n-                a, VectorOperators.I2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2L_Max_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, LongVector.SPECIES_256,\n-                a, VectorOperators.I2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2L_Max_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, LongVector.SPECIES_512,\n-                a, VectorOperators.I2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2L_Max_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, LongVector.SPECIES_MAX,\n-                a, VectorOperators.I2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2F_Max_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, FloatVector.SPECIES_64,\n-                a, VectorOperators.I2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2F_Max_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, FloatVector.SPECIES_128,\n-                a, VectorOperators.I2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2F_Max_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, FloatVector.SPECIES_256,\n-                a, VectorOperators.I2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2F_Max_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, FloatVector.SPECIES_512,\n-                a, VectorOperators.I2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2F_Max_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, FloatVector.SPECIES_MAX,\n-                a, VectorOperators.I2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2D_Max_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, DoubleVector.SPECIES_64,\n-                a, VectorOperators.I2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2D_Max_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, DoubleVector.SPECIES_128,\n-                a, VectorOperators.I2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2D_Max_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, DoubleVector.SPECIES_256,\n-                a, VectorOperators.I2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2D_Max_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, DoubleVector.SPECIES_512,\n-                a, VectorOperators.I2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void convertShapeI2D_Max_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, DoubleVector.SPECIES_MAX,\n-                a, VectorOperators.I2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2B_Max_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, ByteVector.SPECIES_64,\n-                a, VectorOperators.I2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2B_Max_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, ByteVector.SPECIES_128,\n-                a, VectorOperators.I2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2B_Max_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, ByteVector.SPECIES_256,\n-                a, VectorOperators.I2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2B_Max_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, ByteVector.SPECIES_512,\n-                a, VectorOperators.I2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2B_Max_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, ByteVector.SPECIES_MAX,\n-                a, VectorOperators.I2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2S_Max_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, ShortVector.SPECIES_64,\n-                a, VectorOperators.I2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2S_Max_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, ShortVector.SPECIES_128,\n-                a, VectorOperators.I2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2S_Max_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, ShortVector.SPECIES_256,\n-                a, VectorOperators.I2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2S_Max_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, ShortVector.SPECIES_512,\n-                a, VectorOperators.I2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2S_Max_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, ShortVector.SPECIES_MAX,\n-                a, VectorOperators.I2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2I_Max_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, IntVector.SPECIES_64,\n-                a, I2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2I_Max_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, IntVector.SPECIES_128,\n-                a, I2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2I_Max_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, IntVector.SPECIES_256,\n-                a, I2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2I_Max_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, IntVector.SPECIES_512,\n-                a, I2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2I_Max_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, IntVector.SPECIES_MAX,\n-                a, I2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2L_Max_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, LongVector.SPECIES_64,\n-                a, VectorOperators.I2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2L_Max_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, LongVector.SPECIES_128,\n-                a, VectorOperators.I2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2L_Max_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, LongVector.SPECIES_256,\n-                a, VectorOperators.I2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2L_Max_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, LongVector.SPECIES_512,\n-                a, VectorOperators.I2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2L_Max_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, LongVector.SPECIES_MAX,\n-                a, VectorOperators.I2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2F_Max_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, FloatVector.SPECIES_64,\n-                a, VectorOperators.I2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2F_Max_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, FloatVector.SPECIES_128,\n-                a, VectorOperators.I2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2F_Max_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, FloatVector.SPECIES_256,\n-                a, VectorOperators.I2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2F_Max_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, FloatVector.SPECIES_512,\n-                a, VectorOperators.I2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2F_Max_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, FloatVector.SPECIES_MAX,\n-                a, VectorOperators.I2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2D_Max_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, DoubleVector.SPECIES_64,\n-                a, VectorOperators.I2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2D_Max_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, DoubleVector.SPECIES_128,\n-                a, VectorOperators.I2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2D_Max_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, DoubleVector.SPECIES_256,\n-                a, VectorOperators.I2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2D_Max_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, DoubleVector.SPECIES_512,\n-                a, VectorOperators.I2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void castShapeI2D_Max_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        conversion_kernel(IntVector.SPECIES_MAX, DoubleVector.SPECIES_MAX,\n-                a, VectorOperators.I2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2B_Max_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_MAX, ByteVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2B_Max_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_MAX, ByteVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2B_Max_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_MAX, ByteVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2B_Max_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_MAX, ByteVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2B_Max_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_MAX, ByteVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2S_Max_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_MAX, ShortVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2S_Max_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_MAX, ShortVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2S_Max_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_MAX, ShortVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2S_Max_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_MAX, ShortVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2S_Max_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_MAX, ShortVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2I_Max_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_MAX, IntVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2I_Max_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_MAX, IntVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2I_Max_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_MAX, IntVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2I_Max_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_MAX, IntVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2I_Max_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_MAX, IntVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2L_Max_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_MAX, LongVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2L_Max_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_MAX, LongVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2L_Max_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_MAX, LongVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2L_Max_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_MAX, LongVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2L_Max_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_MAX, LongVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2F_Max_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_MAX, FloatVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2F_Max_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_MAX, FloatVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2F_Max_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_MAX, FloatVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2F_Max_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_MAX, FloatVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2F_Max_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_MAX, FloatVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2D_Max_To_64(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_MAX, DoubleVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2D_Max_To_128(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_MAX, DoubleVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2D_Max_To_256(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_MAX, DoubleVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2D_Max_To_512(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_MAX, DoubleVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"intUnaryOpProvider\")\n-    static void reinterpretShapeI2D_Max_To_MAX(IntFunction<int[]> fa) {\n-        int[] a = fa.apply(1024);\n-        reinterpret_kernel(IntVector.SPECIES_MAX, DoubleVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertL2B_Max_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, ByteVector.SPECIES_MAX,\n-                a, VectorOperators.L2B,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertL2S_Max_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, ShortVector.SPECIES_MAX,\n-                a, VectorOperators.L2S,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertL2I_Max_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, IntVector.SPECIES_MAX,\n-                a, VectorOperators.L2I,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertL2L_Max_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, LongVector.SPECIES_MAX,\n-                a, L2L,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertL2F_Max_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, FloatVector.SPECIES_MAX,\n-                a, VectorOperators.L2F,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertL2D_Max_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, DoubleVector.SPECIES_MAX,\n-                a, VectorOperators.L2D,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2B_Max_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, ByteVector.SPECIES_64,\n-                a, VectorOperators.L2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2B_Max_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, ByteVector.SPECIES_128,\n-                a, VectorOperators.L2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2B_Max_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, ByteVector.SPECIES_256,\n-                a, VectorOperators.L2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2B_Max_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, ByteVector.SPECIES_512,\n-                a, VectorOperators.L2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2B_Max_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, ByteVector.SPECIES_MAX,\n-                a, VectorOperators.L2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2S_Max_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, ShortVector.SPECIES_64,\n-                a, VectorOperators.L2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2S_Max_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, ShortVector.SPECIES_128,\n-                a, VectorOperators.L2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2S_Max_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, ShortVector.SPECIES_256,\n-                a, VectorOperators.L2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2S_Max_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, ShortVector.SPECIES_512,\n-                a, VectorOperators.L2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2S_Max_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, ShortVector.SPECIES_MAX,\n-                a, VectorOperators.L2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2I_Max_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, IntVector.SPECIES_64,\n-                a, VectorOperators.L2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2I_Max_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, IntVector.SPECIES_128,\n-                a, VectorOperators.L2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2I_Max_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, IntVector.SPECIES_256,\n-                a, VectorOperators.L2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2I_Max_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, IntVector.SPECIES_512,\n-                a, VectorOperators.L2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2I_Max_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, IntVector.SPECIES_MAX,\n-                a, VectorOperators.L2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2L_Max_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, LongVector.SPECIES_64,\n-                a, L2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2L_Max_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, LongVector.SPECIES_128,\n-                a, L2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2L_Max_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, LongVector.SPECIES_256,\n-                a, L2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2L_Max_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, LongVector.SPECIES_512,\n-                a, L2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2L_Max_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, LongVector.SPECIES_MAX,\n-                a, L2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2F_Max_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, FloatVector.SPECIES_64,\n-                a, VectorOperators.L2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2F_Max_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, FloatVector.SPECIES_128,\n-                a, VectorOperators.L2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2F_Max_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, FloatVector.SPECIES_256,\n-                a, VectorOperators.L2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2F_Max_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, FloatVector.SPECIES_512,\n-                a, VectorOperators.L2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2F_Max_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, FloatVector.SPECIES_MAX,\n-                a, VectorOperators.L2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2D_Max_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, DoubleVector.SPECIES_64,\n-                a, VectorOperators.L2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2D_Max_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, DoubleVector.SPECIES_128,\n-                a, VectorOperators.L2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2D_Max_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, DoubleVector.SPECIES_256,\n-                a, VectorOperators.L2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2D_Max_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, DoubleVector.SPECIES_512,\n-                a, VectorOperators.L2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void convertShapeL2D_Max_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, DoubleVector.SPECIES_MAX,\n-                a, VectorOperators.L2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2B_Max_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, ByteVector.SPECIES_64,\n-                a, VectorOperators.L2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2B_Max_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, ByteVector.SPECIES_128,\n-                a, VectorOperators.L2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2B_Max_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, ByteVector.SPECIES_256,\n-                a, VectorOperators.L2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2B_Max_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, ByteVector.SPECIES_512,\n-                a, VectorOperators.L2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2B_Max_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, ByteVector.SPECIES_MAX,\n-                a, VectorOperators.L2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2S_Max_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, ShortVector.SPECIES_64,\n-                a, VectorOperators.L2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2S_Max_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, ShortVector.SPECIES_128,\n-                a, VectorOperators.L2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2S_Max_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, ShortVector.SPECIES_256,\n-                a, VectorOperators.L2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2S_Max_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, ShortVector.SPECIES_512,\n-                a, VectorOperators.L2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2S_Max_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, ShortVector.SPECIES_MAX,\n-                a, VectorOperators.L2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2I_Max_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, IntVector.SPECIES_64,\n-                a, VectorOperators.L2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2I_Max_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, IntVector.SPECIES_128,\n-                a, VectorOperators.L2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2I_Max_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, IntVector.SPECIES_256,\n-                a, VectorOperators.L2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2I_Max_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, IntVector.SPECIES_512,\n-                a, VectorOperators.L2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2I_Max_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, IntVector.SPECIES_MAX,\n-                a, VectorOperators.L2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2L_Max_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, LongVector.SPECIES_64,\n-                a, L2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2L_Max_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, LongVector.SPECIES_128,\n-                a, L2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2L_Max_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, LongVector.SPECIES_256,\n-                a, L2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2L_Max_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, LongVector.SPECIES_512,\n-                a, L2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2L_Max_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, LongVector.SPECIES_MAX,\n-                a, L2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2F_Max_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, FloatVector.SPECIES_64,\n-                a, VectorOperators.L2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2F_Max_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, FloatVector.SPECIES_128,\n-                a, VectorOperators.L2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2F_Max_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, FloatVector.SPECIES_256,\n-                a, VectorOperators.L2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2F_Max_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, FloatVector.SPECIES_512,\n-                a, VectorOperators.L2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2F_Max_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, FloatVector.SPECIES_MAX,\n-                a, VectorOperators.L2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2D_Max_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, DoubleVector.SPECIES_64,\n-                a, VectorOperators.L2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2D_Max_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, DoubleVector.SPECIES_128,\n-                a, VectorOperators.L2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2D_Max_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, DoubleVector.SPECIES_256,\n-                a, VectorOperators.L2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2D_Max_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, DoubleVector.SPECIES_512,\n-                a, VectorOperators.L2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void castShapeL2D_Max_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        conversion_kernel(LongVector.SPECIES_MAX, DoubleVector.SPECIES_MAX,\n-                a, VectorOperators.L2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2B_Max_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_MAX, ByteVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2B_Max_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_MAX, ByteVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2B_Max_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_MAX, ByteVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2B_Max_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_MAX, ByteVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2B_Max_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_MAX, ByteVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2S_Max_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_MAX, ShortVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2S_Max_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_MAX, ShortVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2S_Max_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_MAX, ShortVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2S_Max_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_MAX, ShortVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2S_Max_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_MAX, ShortVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2I_Max_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_MAX, IntVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2I_Max_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_MAX, IntVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2I_Max_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_MAX, IntVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2I_Max_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_MAX, IntVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2I_Max_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_MAX, IntVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2L_Max_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_MAX, LongVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2L_Max_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_MAX, LongVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2L_Max_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_MAX, LongVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2L_Max_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_MAX, LongVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2L_Max_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_MAX, LongVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2F_Max_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_MAX, FloatVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2F_Max_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_MAX, FloatVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2F_Max_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_MAX, FloatVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2F_Max_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_MAX, FloatVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2F_Max_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_MAX, FloatVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2D_Max_To_64(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_MAX, DoubleVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2D_Max_To_128(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_MAX, DoubleVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2D_Max_To_256(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_MAX, DoubleVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2D_Max_To_512(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_MAX, DoubleVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"longUnaryOpProvider\")\n-    static void reinterpretShapeL2D_Max_To_MAX(IntFunction<long[]> fa) {\n-        long[] a = fa.apply(1024);\n-        reinterpret_kernel(LongVector.SPECIES_MAX, DoubleVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertS2B_Max_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, ByteVector.SPECIES_MAX,\n-                a, VectorOperators.S2B,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertS2S_Max_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, ShortVector.SPECIES_MAX,\n-                a, S2S,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertS2I_Max_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, IntVector.SPECIES_MAX,\n-                a, VectorOperators.S2I,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertS2L_Max_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, LongVector.SPECIES_MAX,\n-                a, VectorOperators.S2L,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertS2F_Max_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, FloatVector.SPECIES_MAX,\n-                a, VectorOperators.S2F,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertS2D_Max_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, DoubleVector.SPECIES_MAX,\n-                a, VectorOperators.S2D,\n-                ConvAPI.CONVERT, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2B_Max_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, ByteVector.SPECIES_64,\n-                a, VectorOperators.S2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2B_Max_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, ByteVector.SPECIES_128,\n-                a, VectorOperators.S2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2B_Max_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, ByteVector.SPECIES_256,\n-                a, VectorOperators.S2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2B_Max_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, ByteVector.SPECIES_512,\n-                a, VectorOperators.S2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2B_Max_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, ByteVector.SPECIES_MAX,\n-                a, VectorOperators.S2B,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2S_Max_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, ShortVector.SPECIES_64,\n-                a, S2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2S_Max_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, ShortVector.SPECIES_128,\n-                a, S2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2S_Max_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, ShortVector.SPECIES_256,\n-                a, S2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2S_Max_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, ShortVector.SPECIES_512,\n-                a, S2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2S_Max_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, ShortVector.SPECIES_MAX,\n-                a, S2S,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2I_Max_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, IntVector.SPECIES_64,\n-                a, VectorOperators.S2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2I_Max_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, IntVector.SPECIES_128,\n-                a, VectorOperators.S2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2I_Max_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, IntVector.SPECIES_256,\n-                a, VectorOperators.S2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2I_Max_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, IntVector.SPECIES_512,\n-                a, VectorOperators.S2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2I_Max_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, IntVector.SPECIES_MAX,\n-                a, VectorOperators.S2I,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2L_Max_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, LongVector.SPECIES_64,\n-                a, VectorOperators.S2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2L_Max_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, LongVector.SPECIES_128,\n-                a, VectorOperators.S2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2L_Max_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, LongVector.SPECIES_256,\n-                a, VectorOperators.S2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2L_Max_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, LongVector.SPECIES_512,\n-                a, VectorOperators.S2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2L_Max_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, LongVector.SPECIES_MAX,\n-                a, VectorOperators.S2L,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2F_Max_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, FloatVector.SPECIES_64,\n-                a, VectorOperators.S2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2F_Max_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, FloatVector.SPECIES_128,\n-                a, VectorOperators.S2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2F_Max_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, FloatVector.SPECIES_256,\n-                a, VectorOperators.S2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2F_Max_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, FloatVector.SPECIES_512,\n-                a, VectorOperators.S2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2F_Max_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, FloatVector.SPECIES_MAX,\n-                a, VectorOperators.S2F,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2D_Max_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, DoubleVector.SPECIES_64,\n-                a, VectorOperators.S2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2D_Max_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, DoubleVector.SPECIES_128,\n-                a, VectorOperators.S2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2D_Max_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, DoubleVector.SPECIES_256,\n-                a, VectorOperators.S2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2D_Max_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, DoubleVector.SPECIES_512,\n-                a, VectorOperators.S2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void convertShapeS2D_Max_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, DoubleVector.SPECIES_MAX,\n-                a, VectorOperators.S2D,\n-                ConvAPI.CONVERTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2B_Max_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, ByteVector.SPECIES_64,\n-                a, VectorOperators.S2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2B_Max_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, ByteVector.SPECIES_128,\n-                a, VectorOperators.S2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2B_Max_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, ByteVector.SPECIES_256,\n-                a, VectorOperators.S2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2B_Max_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, ByteVector.SPECIES_512,\n-                a, VectorOperators.S2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2B_Max_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, ByteVector.SPECIES_MAX,\n-                a, VectorOperators.S2B,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2S_Max_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, ShortVector.SPECIES_64,\n-                a, S2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2S_Max_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, ShortVector.SPECIES_128,\n-                a, S2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2S_Max_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, ShortVector.SPECIES_256,\n-                a, S2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2S_Max_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, ShortVector.SPECIES_512,\n-                a, S2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2S_Max_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, ShortVector.SPECIES_MAX,\n-                a, S2S,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2I_Max_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, IntVector.SPECIES_64,\n-                a, VectorOperators.S2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2I_Max_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, IntVector.SPECIES_128,\n-                a, VectorOperators.S2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2I_Max_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, IntVector.SPECIES_256,\n-                a, VectorOperators.S2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2I_Max_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, IntVector.SPECIES_512,\n-                a, VectorOperators.S2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2I_Max_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, IntVector.SPECIES_MAX,\n-                a, VectorOperators.S2I,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2L_Max_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, LongVector.SPECIES_64,\n-                a, VectorOperators.S2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2L_Max_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, LongVector.SPECIES_128,\n-                a, VectorOperators.S2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2L_Max_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, LongVector.SPECIES_256,\n-                a, VectorOperators.S2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2L_Max_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, LongVector.SPECIES_512,\n-                a, VectorOperators.S2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2L_Max_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, LongVector.SPECIES_MAX,\n-                a, VectorOperators.S2L,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2F_Max_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, FloatVector.SPECIES_64,\n-                a, VectorOperators.S2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2F_Max_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, FloatVector.SPECIES_128,\n-                a, VectorOperators.S2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2F_Max_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, FloatVector.SPECIES_256,\n-                a, VectorOperators.S2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2F_Max_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, FloatVector.SPECIES_512,\n-                a, VectorOperators.S2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2F_Max_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, FloatVector.SPECIES_MAX,\n-                a, VectorOperators.S2F,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2D_Max_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, DoubleVector.SPECIES_64,\n-                a, VectorOperators.S2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2D_Max_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, DoubleVector.SPECIES_128,\n-                a, VectorOperators.S2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2D_Max_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, DoubleVector.SPECIES_256,\n-                a, VectorOperators.S2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2D_Max_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, DoubleVector.SPECIES_512,\n-                a, VectorOperators.S2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void castShapeS2D_Max_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        conversion_kernel(ShortVector.SPECIES_MAX, DoubleVector.SPECIES_MAX,\n-                a, VectorOperators.S2D,\n-                ConvAPI.CASTSHAPE, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2B_Max_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_MAX, ByteVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2B_Max_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_MAX, ByteVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2B_Max_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_MAX, ByteVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2B_Max_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_MAX, ByteVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2B_Max_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_MAX, ByteVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2S_Max_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_MAX, ShortVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2S_Max_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_MAX, ShortVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2S_Max_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_MAX, ShortVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2S_Max_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_MAX, ShortVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2S_Max_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_MAX, ShortVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2I_Max_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_MAX, IntVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2I_Max_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_MAX, IntVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2I_Max_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_MAX, IntVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2I_Max_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_MAX, IntVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2I_Max_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_MAX, IntVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2L_Max_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_MAX, LongVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2L_Max_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_MAX, LongVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2L_Max_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_MAX, LongVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2L_Max_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_MAX, LongVector.SPECIES_512,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2L_Max_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_MAX, LongVector.SPECIES_MAX,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2F_Max_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_MAX, FloatVector.SPECIES_64,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2F_Max_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_MAX, FloatVector.SPECIES_128,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2F_Max_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_MAX, FloatVector.SPECIES_256,\n-                a, a.length);\n-    }\n-\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2F_Max_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_MAX, FloatVector.SPECIES_512,\n-                a, a.length);\n-    }\n+    static final VectorShape SHAPE = VectorShape.S_Max_BIT;\n@@ -4437,5 +44,3 @@\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2F_Max_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_MAX, FloatVector.SPECIES_MAX,\n-                a, a.length);\n+    @DataProvider\n+    public Object[][] fixedShapeXfixedShape() {\n+        return fixedShapeXFixedShapeSpeciesArgs(SHAPE);\n@@ -4444,5 +49,3 @@\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2D_Max_To_64(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_MAX, DoubleVector.SPECIES_64,\n-                a, a.length);\n+    @DataProvider\n+    public Object[][] fixedShapeXShape() {\n+        return fixedShapeXShapeSpeciesArgs(SHAPE);\n@@ -4451,5 +54,4 @@\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2D_Max_To_128(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_MAX, DoubleVector.SPECIES_128,\n-                a, a.length);\n+    @Test(dataProvider = \"fixedShapeXfixedShape\")\n+    static <I, O> void convert(VectorSpecies<I> src, VectorSpecies<O> dst, IntFunction<?> fa) {\n+        Object a = fa.apply(1024);\n+        conversion_kernel(src, dst, a, ConvAPI.CONVERT);\n@@ -4458,5 +60,4 @@\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2D_Max_To_256(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_MAX, DoubleVector.SPECIES_256,\n-                a, a.length);\n+    @Test(dataProvider = \"fixedShapeXShape\")\n+    static <I, O> void convertShape(VectorSpecies<I> src, VectorSpecies<O> dst, IntFunction<?> fa) {\n+        Object a = fa.apply(1024);\n+        conversion_kernel(src, dst, a, ConvAPI.CONVERTSHAPE);\n@@ -4465,5 +66,4 @@\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2D_Max_To_512(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_MAX, DoubleVector.SPECIES_512,\n-                a, a.length);\n+    @Test(dataProvider = \"fixedShapeXShape\")\n+    static <I, O> void castShape(VectorSpecies<I> src, VectorSpecies<O> dst, IntFunction<?> fa) {\n+        Object a = fa.apply(1024);\n+        conversion_kernel(src, dst, a, ConvAPI.CASTSHAPE);\n@@ -4472,5 +72,4 @@\n-    @Test(dataProvider = \"shortUnaryOpProvider\")\n-    static void reinterpretShapeS2D_Max_To_MAX(IntFunction<short[]> fa) {\n-        short[] a = fa.apply(1024);\n-        reinterpret_kernel(ShortVector.SPECIES_MAX, DoubleVector.SPECIES_MAX,\n-                a, a.length);\n+    @Test(dataProvider = \"fixedShapeXShape\")\n+    static <I, O> void reinterpret(VectorSpecies<I> src, VectorSpecies<O> dst, IntFunction<?> fa) {\n+        Object a = fa.apply(1024);\n+        reinterpret_kernel(src, dst, a);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/VectorMaxConversionTests.java","additions":26,"deletions":4427,"binary":false,"changes":4453,"status":"modified"}]}