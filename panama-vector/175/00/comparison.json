{"files":[{"patch":"@@ -8621,0 +8621,1 @@\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n@@ -8622,1 +8623,5 @@\n-    __ evpmovqd($dst$$XMMRegister, $dst$$XMMRegister, vlen_enc);\n+    if ( bt == T_INT) {\n+      __ evpmovqd($dst$$XMMRegister, $dst$$XMMRegister, vlen_enc);\n+    } else {\n+      assert(bt == T_LONG, \"\");\n+    }\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1082,1 +1082,1 @@\n-    public void MINLanes(Blackhole bh) {\n+    public void MIN(Blackhole bh) {\n@@ -1084,0 +1084,1 @@\n+        byte[] r = fr.apply(SPECIES.length());\n@@ -1086,0 +1087,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MIN);\n+            }\n+        }\n+\n@@ -1090,1 +1098,1 @@\n-                ra = (byte)Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n+                ra = (byte) Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n@@ -1093,1 +1101,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -1097,1 +1106,1 @@\n-    public void MINMaskedLanes(Blackhole bh) {\n+    public void MINMasked(Blackhole bh) {\n@@ -1099,0 +1108,1 @@\n+        byte[] r = fr.apply(SPECIES.length());\n@@ -1103,0 +1113,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MIN, vmask);\n+            }\n+        }\n+\n@@ -1107,1 +1124,1 @@\n-                ra = (byte)Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n+                ra = (byte) Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n@@ -1110,1 +1127,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -1114,1 +1132,1 @@\n-    public void MAXLanes(Blackhole bh) {\n+    public void MAX(Blackhole bh) {\n@@ -1116,0 +1134,1 @@\n+        byte[] r = fr.apply(SPECIES.length());\n@@ -1118,0 +1137,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MAX);\n+            }\n+        }\n+\n@@ -1122,1 +1148,1 @@\n-                ra = (byte)Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n+                ra = (byte) Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n@@ -1125,1 +1151,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -1129,1 +1156,1 @@\n-    public void MAXMaskedLanes(Blackhole bh) {\n+    public void MAXMasked(Blackhole bh) {\n@@ -1131,0 +1158,1 @@\n+        byte[] r = fr.apply(SPECIES.length());\n@@ -1135,0 +1163,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MAX, vmask);\n+            }\n+        }\n+\n@@ -1139,1 +1174,1 @@\n-                ra = (byte)Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n+                ra = (byte) Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n@@ -1142,1 +1177,52 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n+    }\n+\n+    @Benchmark\n+    public void FIRST_NONZERO(Blackhole bh) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] r = fr.apply(SPECIES.length());\n+        byte ra = (byte) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (byte) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO));\n+            }\n+        }\n+\n+        bh.consume(r);\n+    }\n+\n+    @Benchmark\n+    public void FIRST_NONZEROMasked(Blackhole bh) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Byte> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        byte ra = (byte) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (byte) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask));\n+            }\n+        }\n+\n+        bh.consume(r);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte128Vector.java","additions":98,"deletions":12,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -1082,1 +1082,1 @@\n-    public void MINLanes(Blackhole bh) {\n+    public void MIN(Blackhole bh) {\n@@ -1084,0 +1084,1 @@\n+        byte[] r = fr.apply(SPECIES.length());\n@@ -1086,0 +1087,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MIN);\n+            }\n+        }\n+\n@@ -1090,1 +1098,1 @@\n-                ra = (byte)Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n+                ra = (byte) Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n@@ -1093,1 +1101,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -1097,1 +1106,1 @@\n-    public void MINMaskedLanes(Blackhole bh) {\n+    public void MINMasked(Blackhole bh) {\n@@ -1099,0 +1108,1 @@\n+        byte[] r = fr.apply(SPECIES.length());\n@@ -1103,0 +1113,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MIN, vmask);\n+            }\n+        }\n+\n@@ -1107,1 +1124,1 @@\n-                ra = (byte)Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n+                ra = (byte) Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n@@ -1110,1 +1127,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -1114,1 +1132,1 @@\n-    public void MAXLanes(Blackhole bh) {\n+    public void MAX(Blackhole bh) {\n@@ -1116,0 +1134,1 @@\n+        byte[] r = fr.apply(SPECIES.length());\n@@ -1118,0 +1137,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MAX);\n+            }\n+        }\n+\n@@ -1122,1 +1148,1 @@\n-                ra = (byte)Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n+                ra = (byte) Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n@@ -1125,1 +1151,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -1129,1 +1156,1 @@\n-    public void MAXMaskedLanes(Blackhole bh) {\n+    public void MAXMasked(Blackhole bh) {\n@@ -1131,0 +1158,1 @@\n+        byte[] r = fr.apply(SPECIES.length());\n@@ -1135,0 +1163,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MAX, vmask);\n+            }\n+        }\n+\n@@ -1139,1 +1174,1 @@\n-                ra = (byte)Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n+                ra = (byte) Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n@@ -1142,1 +1177,52 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n+    }\n+\n+    @Benchmark\n+    public void FIRST_NONZERO(Blackhole bh) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] r = fr.apply(SPECIES.length());\n+        byte ra = (byte) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (byte) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO));\n+            }\n+        }\n+\n+        bh.consume(r);\n+    }\n+\n+    @Benchmark\n+    public void FIRST_NONZEROMasked(Blackhole bh) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Byte> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        byte ra = (byte) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (byte) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask));\n+            }\n+        }\n+\n+        bh.consume(r);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte256Vector.java","additions":98,"deletions":12,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -1082,1 +1082,1 @@\n-    public void MINLanes(Blackhole bh) {\n+    public void MIN(Blackhole bh) {\n@@ -1084,0 +1084,1 @@\n+        byte[] r = fr.apply(SPECIES.length());\n@@ -1086,0 +1087,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MIN);\n+            }\n+        }\n+\n@@ -1090,1 +1098,1 @@\n-                ra = (byte)Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n+                ra = (byte) Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n@@ -1093,1 +1101,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -1097,1 +1106,1 @@\n-    public void MINMaskedLanes(Blackhole bh) {\n+    public void MINMasked(Blackhole bh) {\n@@ -1099,0 +1108,1 @@\n+        byte[] r = fr.apply(SPECIES.length());\n@@ -1103,0 +1113,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MIN, vmask);\n+            }\n+        }\n+\n@@ -1107,1 +1124,1 @@\n-                ra = (byte)Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n+                ra = (byte) Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n@@ -1110,1 +1127,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -1114,1 +1132,1 @@\n-    public void MAXLanes(Blackhole bh) {\n+    public void MAX(Blackhole bh) {\n@@ -1116,0 +1134,1 @@\n+        byte[] r = fr.apply(SPECIES.length());\n@@ -1118,0 +1137,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MAX);\n+            }\n+        }\n+\n@@ -1122,1 +1148,1 @@\n-                ra = (byte)Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n+                ra = (byte) Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n@@ -1125,1 +1151,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -1129,1 +1156,1 @@\n-    public void MAXMaskedLanes(Blackhole bh) {\n+    public void MAXMasked(Blackhole bh) {\n@@ -1131,0 +1158,1 @@\n+        byte[] r = fr.apply(SPECIES.length());\n@@ -1135,0 +1163,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MAX, vmask);\n+            }\n+        }\n+\n@@ -1139,1 +1174,1 @@\n-                ra = (byte)Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n+                ra = (byte) Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n@@ -1142,1 +1177,52 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n+    }\n+\n+    @Benchmark\n+    public void FIRST_NONZERO(Blackhole bh) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] r = fr.apply(SPECIES.length());\n+        byte ra = (byte) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (byte) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO));\n+            }\n+        }\n+\n+        bh.consume(r);\n+    }\n+\n+    @Benchmark\n+    public void FIRST_NONZEROMasked(Blackhole bh) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Byte> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        byte ra = (byte) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (byte) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask));\n+            }\n+        }\n+\n+        bh.consume(r);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte512Vector.java","additions":98,"deletions":12,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -1082,1 +1082,1 @@\n-    public void MINLanes(Blackhole bh) {\n+    public void MIN(Blackhole bh) {\n@@ -1084,0 +1084,1 @@\n+        byte[] r = fr.apply(SPECIES.length());\n@@ -1086,0 +1087,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MIN);\n+            }\n+        }\n+\n@@ -1090,1 +1098,1 @@\n-                ra = (byte)Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n+                ra = (byte) Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n@@ -1093,1 +1101,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -1097,1 +1106,1 @@\n-    public void MINMaskedLanes(Blackhole bh) {\n+    public void MINMasked(Blackhole bh) {\n@@ -1099,0 +1108,1 @@\n+        byte[] r = fr.apply(SPECIES.length());\n@@ -1103,0 +1113,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MIN, vmask);\n+            }\n+        }\n+\n@@ -1107,1 +1124,1 @@\n-                ra = (byte)Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n+                ra = (byte) Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n@@ -1110,1 +1127,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -1114,1 +1132,1 @@\n-    public void MAXLanes(Blackhole bh) {\n+    public void MAX(Blackhole bh) {\n@@ -1116,0 +1134,1 @@\n+        byte[] r = fr.apply(SPECIES.length());\n@@ -1118,0 +1137,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MAX);\n+            }\n+        }\n+\n@@ -1122,1 +1148,1 @@\n-                ra = (byte)Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n+                ra = (byte) Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n@@ -1125,1 +1151,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -1129,1 +1156,1 @@\n-    public void MAXMaskedLanes(Blackhole bh) {\n+    public void MAXMasked(Blackhole bh) {\n@@ -1131,0 +1158,1 @@\n+        byte[] r = fr.apply(SPECIES.length());\n@@ -1135,0 +1163,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MAX, vmask);\n+            }\n+        }\n+\n@@ -1139,1 +1174,1 @@\n-                ra = (byte)Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n+                ra = (byte) Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n@@ -1142,1 +1177,52 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n+    }\n+\n+    @Benchmark\n+    public void FIRST_NONZERO(Blackhole bh) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] r = fr.apply(SPECIES.length());\n+        byte ra = (byte) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (byte) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO));\n+            }\n+        }\n+\n+        bh.consume(r);\n+    }\n+\n+    @Benchmark\n+    public void FIRST_NONZEROMasked(Blackhole bh) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Byte> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        byte ra = (byte) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (byte) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask));\n+            }\n+        }\n+\n+        bh.consume(r);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte64Vector.java","additions":98,"deletions":12,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -1082,1 +1082,1 @@\n-    public void MINLanes(Blackhole bh) {\n+    public void MIN(Blackhole bh) {\n@@ -1084,0 +1084,1 @@\n+        byte[] r = fr.apply(SPECIES.length());\n@@ -1086,0 +1087,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MIN);\n+            }\n+        }\n+\n@@ -1090,1 +1098,1 @@\n-                ra = (byte)Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n+                ra = (byte) Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n@@ -1093,1 +1101,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -1097,1 +1106,1 @@\n-    public void MINMaskedLanes(Blackhole bh) {\n+    public void MINMasked(Blackhole bh) {\n@@ -1099,0 +1108,1 @@\n+        byte[] r = fr.apply(SPECIES.length());\n@@ -1103,0 +1113,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MIN, vmask);\n+            }\n+        }\n+\n@@ -1107,1 +1124,1 @@\n-                ra = (byte)Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n+                ra = (byte) Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n@@ -1110,1 +1127,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -1114,1 +1132,1 @@\n-    public void MAXLanes(Blackhole bh) {\n+    public void MAX(Blackhole bh) {\n@@ -1116,0 +1134,1 @@\n+        byte[] r = fr.apply(SPECIES.length());\n@@ -1118,0 +1137,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MAX);\n+            }\n+        }\n+\n@@ -1122,1 +1148,1 @@\n-                ra = (byte)Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n+                ra = (byte) Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n@@ -1125,1 +1151,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -1129,1 +1156,1 @@\n-    public void MAXMaskedLanes(Blackhole bh) {\n+    public void MAXMasked(Blackhole bh) {\n@@ -1131,0 +1158,1 @@\n+        byte[] r = fr.apply(SPECIES.length());\n@@ -1135,0 +1163,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MAX, vmask);\n+            }\n+        }\n+\n@@ -1139,1 +1174,1 @@\n-                ra = (byte)Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n+                ra = (byte) Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n@@ -1142,1 +1177,52 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n+    }\n+\n+    @Benchmark\n+    public void FIRST_NONZERO(Blackhole bh) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] r = fr.apply(SPECIES.length());\n+        byte ra = (byte) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (byte) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO));\n+            }\n+        }\n+\n+        bh.consume(r);\n+    }\n+\n+    @Benchmark\n+    public void FIRST_NONZEROMasked(Blackhole bh) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Byte> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        byte ra = (byte) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (byte) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask));\n+            }\n+        }\n+\n+        bh.consume(r);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ByteMaxVector.java","additions":98,"deletions":12,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -1074,56 +1074,0 @@\n-    @Benchmark\n-    public void MINLanes(Blackhole bh) {\n-        byte[] as = fa.apply(size);\n-        byte r = Byte.MAX_VALUE;\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            r = Byte.MAX_VALUE;\n-            for (int i = 0; i < as.length; i++) {\n-                r = (byte)Math.min(r, as[i]);\n-            }\n-        }\n-        bh.consume(r);\n-    }\n-\n-    @Benchmark\n-    public void MINMaskedLanes(Blackhole bh) {\n-        byte[] as = fa.apply(size);\n-        boolean[] ms = fm.apply(size);\n-        byte r = Byte.MAX_VALUE;\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            r = Byte.MAX_VALUE;\n-            for (int i = 0; i < as.length; i++) {\n-                if (ms[i % ms.length])\n-                    r = (byte)Math.min(r, as[i]);\n-            }\n-        }\n-        bh.consume(r);\n-    }\n-\n-    @Benchmark\n-    public void MAXLanes(Blackhole bh) {\n-        byte[] as = fa.apply(size);\n-        byte r = Byte.MIN_VALUE;\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            r = Byte.MIN_VALUE;\n-            for (int i = 0; i < as.length; i++) {\n-                r = (byte)Math.max(r, as[i]);\n-            }\n-        }\n-        bh.consume(r);\n-    }\n-\n-    @Benchmark\n-    public void MAXMaskedLanes(Blackhole bh) {\n-        byte[] as = fa.apply(size);\n-        boolean[] ms = fm.apply(size);\n-        byte r = Byte.MIN_VALUE;\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            r = Byte.MIN_VALUE;\n-            for (int i = 0; i < as.length; i++) {\n-                if (ms[i % ms.length])\n-                    r = (byte)Math.max(r, as[i]);\n-            }\n-        }\n-        bh.consume(r);\n-    }\n-\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ByteScalar.java","additions":0,"deletions":56,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -439,1 +439,1 @@\n-    public void MINLanes(Blackhole bh) {\n+    public void MIN(Blackhole bh) {\n@@ -441,0 +441,1 @@\n+        double[] r = fr.apply(SPECIES.length());\n@@ -443,0 +444,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MIN);\n+            }\n+        }\n+\n@@ -447,1 +455,1 @@\n-                ra = (double)Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n+                ra = (double) Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n@@ -450,1 +458,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -454,1 +463,1 @@\n-    public void MINMaskedLanes(Blackhole bh) {\n+    public void MINMasked(Blackhole bh) {\n@@ -456,0 +465,1 @@\n+        double[] r = fr.apply(SPECIES.length());\n@@ -460,0 +470,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MIN, vmask);\n+            }\n+        }\n+\n@@ -464,1 +481,1 @@\n-                ra = (double)Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n+                ra = (double) Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n@@ -467,1 +484,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -471,1 +489,1 @@\n-    public void MAXLanes(Blackhole bh) {\n+    public void MAX(Blackhole bh) {\n@@ -473,0 +491,1 @@\n+        double[] r = fr.apply(SPECIES.length());\n@@ -475,0 +494,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MAX);\n+            }\n+        }\n+\n@@ -479,1 +505,1 @@\n-                ra = (double)Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n+                ra = (double) Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n@@ -482,1 +508,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -486,1 +513,1 @@\n-    public void MAXMaskedLanes(Blackhole bh) {\n+    public void MAXMasked(Blackhole bh) {\n@@ -488,0 +515,1 @@\n+        double[] r = fr.apply(SPECIES.length());\n@@ -492,0 +520,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MAX, vmask);\n+            }\n+        }\n+\n@@ -496,1 +531,1 @@\n-                ra = (double)Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n+                ra = (double) Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n@@ -499,1 +534,52 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n+    }\n+\n+    @Benchmark\n+    public void FIRST_NONZERO(Blackhole bh) {\n+        double[] a = fa.apply(SPECIES.length());\n+        double[] r = fr.apply(SPECIES.length());\n+        double ra = (double) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (double) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO));\n+            }\n+        }\n+\n+        bh.consume(r);\n+    }\n+\n+    @Benchmark\n+    public void FIRST_NONZEROMasked(Blackhole bh) {\n+        double[] a = fa.apply(SPECIES.length());\n+        double[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Double> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        double ra = (double) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (double) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask));\n+            }\n+        }\n+\n+        bh.consume(r);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double128Vector.java","additions":98,"deletions":12,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -439,1 +439,1 @@\n-    public void MINLanes(Blackhole bh) {\n+    public void MIN(Blackhole bh) {\n@@ -441,0 +441,1 @@\n+        double[] r = fr.apply(SPECIES.length());\n@@ -443,0 +444,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MIN);\n+            }\n+        }\n+\n@@ -447,1 +455,1 @@\n-                ra = (double)Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n+                ra = (double) Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n@@ -450,1 +458,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -454,1 +463,1 @@\n-    public void MINMaskedLanes(Blackhole bh) {\n+    public void MINMasked(Blackhole bh) {\n@@ -456,0 +465,1 @@\n+        double[] r = fr.apply(SPECIES.length());\n@@ -460,0 +470,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MIN, vmask);\n+            }\n+        }\n+\n@@ -464,1 +481,1 @@\n-                ra = (double)Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n+                ra = (double) Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n@@ -467,1 +484,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -471,1 +489,1 @@\n-    public void MAXLanes(Blackhole bh) {\n+    public void MAX(Blackhole bh) {\n@@ -473,0 +491,1 @@\n+        double[] r = fr.apply(SPECIES.length());\n@@ -475,0 +494,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MAX);\n+            }\n+        }\n+\n@@ -479,1 +505,1 @@\n-                ra = (double)Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n+                ra = (double) Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n@@ -482,1 +508,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -486,1 +513,1 @@\n-    public void MAXMaskedLanes(Blackhole bh) {\n+    public void MAXMasked(Blackhole bh) {\n@@ -488,0 +515,1 @@\n+        double[] r = fr.apply(SPECIES.length());\n@@ -492,0 +520,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MAX, vmask);\n+            }\n+        }\n+\n@@ -496,1 +531,1 @@\n-                ra = (double)Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n+                ra = (double) Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n@@ -499,1 +534,52 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n+    }\n+\n+    @Benchmark\n+    public void FIRST_NONZERO(Blackhole bh) {\n+        double[] a = fa.apply(SPECIES.length());\n+        double[] r = fr.apply(SPECIES.length());\n+        double ra = (double) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (double) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO));\n+            }\n+        }\n+\n+        bh.consume(r);\n+    }\n+\n+    @Benchmark\n+    public void FIRST_NONZEROMasked(Blackhole bh) {\n+        double[] a = fa.apply(SPECIES.length());\n+        double[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Double> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        double ra = (double) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (double) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask));\n+            }\n+        }\n+\n+        bh.consume(r);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double256Vector.java","additions":98,"deletions":12,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -439,1 +439,1 @@\n-    public void MINLanes(Blackhole bh) {\n+    public void MIN(Blackhole bh) {\n@@ -441,0 +441,1 @@\n+        double[] r = fr.apply(SPECIES.length());\n@@ -443,0 +444,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MIN);\n+            }\n+        }\n+\n@@ -447,1 +455,1 @@\n-                ra = (double)Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n+                ra = (double) Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n@@ -450,1 +458,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -454,1 +463,1 @@\n-    public void MINMaskedLanes(Blackhole bh) {\n+    public void MINMasked(Blackhole bh) {\n@@ -456,0 +465,1 @@\n+        double[] r = fr.apply(SPECIES.length());\n@@ -460,0 +470,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MIN, vmask);\n+            }\n+        }\n+\n@@ -464,1 +481,1 @@\n-                ra = (double)Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n+                ra = (double) Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n@@ -467,1 +484,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -471,1 +489,1 @@\n-    public void MAXLanes(Blackhole bh) {\n+    public void MAX(Blackhole bh) {\n@@ -473,0 +491,1 @@\n+        double[] r = fr.apply(SPECIES.length());\n@@ -475,0 +494,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MAX);\n+            }\n+        }\n+\n@@ -479,1 +505,1 @@\n-                ra = (double)Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n+                ra = (double) Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n@@ -482,1 +508,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -486,1 +513,1 @@\n-    public void MAXMaskedLanes(Blackhole bh) {\n+    public void MAXMasked(Blackhole bh) {\n@@ -488,0 +515,1 @@\n+        double[] r = fr.apply(SPECIES.length());\n@@ -492,0 +520,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MAX, vmask);\n+            }\n+        }\n+\n@@ -496,1 +531,1 @@\n-                ra = (double)Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n+                ra = (double) Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n@@ -499,1 +534,52 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n+    }\n+\n+    @Benchmark\n+    public void FIRST_NONZERO(Blackhole bh) {\n+        double[] a = fa.apply(SPECIES.length());\n+        double[] r = fr.apply(SPECIES.length());\n+        double ra = (double) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (double) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO));\n+            }\n+        }\n+\n+        bh.consume(r);\n+    }\n+\n+    @Benchmark\n+    public void FIRST_NONZEROMasked(Blackhole bh) {\n+        double[] a = fa.apply(SPECIES.length());\n+        double[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Double> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        double ra = (double) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (double) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask));\n+            }\n+        }\n+\n+        bh.consume(r);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double512Vector.java","additions":98,"deletions":12,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -439,1 +439,1 @@\n-    public void MINLanes(Blackhole bh) {\n+    public void MIN(Blackhole bh) {\n@@ -441,0 +441,1 @@\n+        double[] r = fr.apply(SPECIES.length());\n@@ -443,0 +444,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MIN);\n+            }\n+        }\n+\n@@ -447,1 +455,1 @@\n-                ra = (double)Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n+                ra = (double) Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n@@ -450,1 +458,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -454,1 +463,1 @@\n-    public void MINMaskedLanes(Blackhole bh) {\n+    public void MINMasked(Blackhole bh) {\n@@ -456,0 +465,1 @@\n+        double[] r = fr.apply(SPECIES.length());\n@@ -460,0 +470,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MIN, vmask);\n+            }\n+        }\n+\n@@ -464,1 +481,1 @@\n-                ra = (double)Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n+                ra = (double) Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n@@ -467,1 +484,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -471,1 +489,1 @@\n-    public void MAXLanes(Blackhole bh) {\n+    public void MAX(Blackhole bh) {\n@@ -473,0 +491,1 @@\n+        double[] r = fr.apply(SPECIES.length());\n@@ -475,0 +494,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MAX);\n+            }\n+        }\n+\n@@ -479,1 +505,1 @@\n-                ra = (double)Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n+                ra = (double) Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n@@ -482,1 +508,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -486,1 +513,1 @@\n-    public void MAXMaskedLanes(Blackhole bh) {\n+    public void MAXMasked(Blackhole bh) {\n@@ -488,0 +515,1 @@\n+        double[] r = fr.apply(SPECIES.length());\n@@ -492,0 +520,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MAX, vmask);\n+            }\n+        }\n+\n@@ -496,1 +531,1 @@\n-                ra = (double)Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n+                ra = (double) Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n@@ -499,1 +534,52 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n+    }\n+\n+    @Benchmark\n+    public void FIRST_NONZERO(Blackhole bh) {\n+        double[] a = fa.apply(SPECIES.length());\n+        double[] r = fr.apply(SPECIES.length());\n+        double ra = (double) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (double) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO));\n+            }\n+        }\n+\n+        bh.consume(r);\n+    }\n+\n+    @Benchmark\n+    public void FIRST_NONZEROMasked(Blackhole bh) {\n+        double[] a = fa.apply(SPECIES.length());\n+        double[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Double> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        double ra = (double) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (double) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask));\n+            }\n+        }\n+\n+        bh.consume(r);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double64Vector.java","additions":98,"deletions":12,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -439,1 +439,1 @@\n-    public void MINLanes(Blackhole bh) {\n+    public void MIN(Blackhole bh) {\n@@ -441,0 +441,1 @@\n+        double[] r = fr.apply(SPECIES.length());\n@@ -443,0 +444,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MIN);\n+            }\n+        }\n+\n@@ -447,1 +455,1 @@\n-                ra = (double)Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n+                ra = (double) Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n@@ -450,1 +458,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -454,1 +463,1 @@\n-    public void MINMaskedLanes(Blackhole bh) {\n+    public void MINMasked(Blackhole bh) {\n@@ -456,0 +465,1 @@\n+        double[] r = fr.apply(SPECIES.length());\n@@ -460,0 +470,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MIN, vmask);\n+            }\n+        }\n+\n@@ -464,1 +481,1 @@\n-                ra = (double)Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n+                ra = (double) Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n@@ -467,1 +484,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -471,1 +489,1 @@\n-    public void MAXLanes(Blackhole bh) {\n+    public void MAX(Blackhole bh) {\n@@ -473,0 +491,1 @@\n+        double[] r = fr.apply(SPECIES.length());\n@@ -475,0 +494,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MAX);\n+            }\n+        }\n+\n@@ -479,1 +505,1 @@\n-                ra = (double)Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n+                ra = (double) Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n@@ -482,1 +508,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -486,1 +513,1 @@\n-    public void MAXMaskedLanes(Blackhole bh) {\n+    public void MAXMasked(Blackhole bh) {\n@@ -488,0 +515,1 @@\n+        double[] r = fr.apply(SPECIES.length());\n@@ -492,0 +520,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MAX, vmask);\n+            }\n+        }\n+\n@@ -496,1 +531,1 @@\n-                ra = (double)Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n+                ra = (double) Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n@@ -499,1 +534,52 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n+    }\n+\n+    @Benchmark\n+    public void FIRST_NONZERO(Blackhole bh) {\n+        double[] a = fa.apply(SPECIES.length());\n+        double[] r = fr.apply(SPECIES.length());\n+        double ra = (double) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (double) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO));\n+            }\n+        }\n+\n+        bh.consume(r);\n+    }\n+\n+    @Benchmark\n+    public void FIRST_NONZEROMasked(Blackhole bh) {\n+        double[] a = fa.apply(SPECIES.length());\n+        double[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Double> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        double ra = (double) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (double) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask));\n+            }\n+        }\n+\n+        bh.consume(r);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/DoubleMaxVector.java","additions":98,"deletions":12,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -448,56 +448,0 @@\n-        }\n-        bh.consume(r);\n-    }\n-\n-    @Benchmark\n-    public void MINLanes(Blackhole bh) {\n-        double[] as = fa.apply(size);\n-        double r = Double.POSITIVE_INFINITY;\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            r = Double.POSITIVE_INFINITY;\n-            for (int i = 0; i < as.length; i++) {\n-                r = (double)Math.min(r, as[i]);\n-            }\n-        }\n-        bh.consume(r);\n-    }\n-\n-    @Benchmark\n-    public void MINMaskedLanes(Blackhole bh) {\n-        double[] as = fa.apply(size);\n-        boolean[] ms = fm.apply(size);\n-        double r = Double.POSITIVE_INFINITY;\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            r = Double.POSITIVE_INFINITY;\n-            for (int i = 0; i < as.length; i++) {\n-                if (ms[i % ms.length])\n-                    r = (double)Math.min(r, as[i]);\n-            }\n-        }\n-        bh.consume(r);\n-    }\n-\n-    @Benchmark\n-    public void MAXLanes(Blackhole bh) {\n-        double[] as = fa.apply(size);\n-        double r = Double.NEGATIVE_INFINITY;\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            r = Double.NEGATIVE_INFINITY;\n-            for (int i = 0; i < as.length; i++) {\n-                r = (double)Math.max(r, as[i]);\n-            }\n-        }\n-        bh.consume(r);\n-    }\n-\n-    @Benchmark\n-    public void MAXMaskedLanes(Blackhole bh) {\n-        double[] as = fa.apply(size);\n-        boolean[] ms = fm.apply(size);\n-        double r = Double.NEGATIVE_INFINITY;\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            r = Double.NEGATIVE_INFINITY;\n-            for (int i = 0; i < as.length; i++) {\n-                if (ms[i % ms.length])\n-                    r = (double)Math.max(r, as[i]);\n-            }\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/DoubleScalar.java","additions":0,"deletions":56,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -439,1 +439,1 @@\n-    public void MINLanes(Blackhole bh) {\n+    public void MIN(Blackhole bh) {\n@@ -441,0 +441,1 @@\n+        float[] r = fr.apply(SPECIES.length());\n@@ -443,0 +444,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MIN);\n+            }\n+        }\n+\n@@ -447,1 +455,1 @@\n-                ra = (float)Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n+                ra = (float) Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n@@ -450,1 +458,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -454,1 +463,1 @@\n-    public void MINMaskedLanes(Blackhole bh) {\n+    public void MINMasked(Blackhole bh) {\n@@ -456,0 +465,1 @@\n+        float[] r = fr.apply(SPECIES.length());\n@@ -460,0 +470,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MIN, vmask);\n+            }\n+        }\n+\n@@ -464,1 +481,1 @@\n-                ra = (float)Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n+                ra = (float) Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n@@ -467,1 +484,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -471,1 +489,1 @@\n-    public void MAXLanes(Blackhole bh) {\n+    public void MAX(Blackhole bh) {\n@@ -473,0 +491,1 @@\n+        float[] r = fr.apply(SPECIES.length());\n@@ -475,0 +494,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MAX);\n+            }\n+        }\n+\n@@ -479,1 +505,1 @@\n-                ra = (float)Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n+                ra = (float) Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n@@ -482,1 +508,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -486,1 +513,1 @@\n-    public void MAXMaskedLanes(Blackhole bh) {\n+    public void MAXMasked(Blackhole bh) {\n@@ -488,0 +515,1 @@\n+        float[] r = fr.apply(SPECIES.length());\n@@ -492,0 +520,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MAX, vmask);\n+            }\n+        }\n+\n@@ -496,1 +531,1 @@\n-                ra = (float)Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n+                ra = (float) Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n@@ -499,1 +534,52 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n+    }\n+\n+    @Benchmark\n+    public void FIRST_NONZERO(Blackhole bh) {\n+        float[] a = fa.apply(SPECIES.length());\n+        float[] r = fr.apply(SPECIES.length());\n+        float ra = (float) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (float) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO));\n+            }\n+        }\n+\n+        bh.consume(r);\n+    }\n+\n+    @Benchmark\n+    public void FIRST_NONZEROMasked(Blackhole bh) {\n+        float[] a = fa.apply(SPECIES.length());\n+        float[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Float> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        float ra = (float) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (float) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask));\n+            }\n+        }\n+\n+        bh.consume(r);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float128Vector.java","additions":98,"deletions":12,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -439,1 +439,1 @@\n-    public void MINLanes(Blackhole bh) {\n+    public void MIN(Blackhole bh) {\n@@ -441,0 +441,1 @@\n+        float[] r = fr.apply(SPECIES.length());\n@@ -443,0 +444,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MIN);\n+            }\n+        }\n+\n@@ -447,1 +455,1 @@\n-                ra = (float)Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n+                ra = (float) Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n@@ -450,1 +458,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -454,1 +463,1 @@\n-    public void MINMaskedLanes(Blackhole bh) {\n+    public void MINMasked(Blackhole bh) {\n@@ -456,0 +465,1 @@\n+        float[] r = fr.apply(SPECIES.length());\n@@ -460,0 +470,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MIN, vmask);\n+            }\n+        }\n+\n@@ -464,1 +481,1 @@\n-                ra = (float)Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n+                ra = (float) Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n@@ -467,1 +484,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -471,1 +489,1 @@\n-    public void MAXLanes(Blackhole bh) {\n+    public void MAX(Blackhole bh) {\n@@ -473,0 +491,1 @@\n+        float[] r = fr.apply(SPECIES.length());\n@@ -475,0 +494,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MAX);\n+            }\n+        }\n+\n@@ -479,1 +505,1 @@\n-                ra = (float)Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n+                ra = (float) Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n@@ -482,1 +508,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -486,1 +513,1 @@\n-    public void MAXMaskedLanes(Blackhole bh) {\n+    public void MAXMasked(Blackhole bh) {\n@@ -488,0 +515,1 @@\n+        float[] r = fr.apply(SPECIES.length());\n@@ -492,0 +520,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MAX, vmask);\n+            }\n+        }\n+\n@@ -496,1 +531,1 @@\n-                ra = (float)Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n+                ra = (float) Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n@@ -499,1 +534,52 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n+    }\n+\n+    @Benchmark\n+    public void FIRST_NONZERO(Blackhole bh) {\n+        float[] a = fa.apply(SPECIES.length());\n+        float[] r = fr.apply(SPECIES.length());\n+        float ra = (float) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (float) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO));\n+            }\n+        }\n+\n+        bh.consume(r);\n+    }\n+\n+    @Benchmark\n+    public void FIRST_NONZEROMasked(Blackhole bh) {\n+        float[] a = fa.apply(SPECIES.length());\n+        float[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Float> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        float ra = (float) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (float) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask));\n+            }\n+        }\n+\n+        bh.consume(r);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float256Vector.java","additions":98,"deletions":12,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -439,1 +439,1 @@\n-    public void MINLanes(Blackhole bh) {\n+    public void MIN(Blackhole bh) {\n@@ -441,0 +441,1 @@\n+        float[] r = fr.apply(SPECIES.length());\n@@ -443,0 +444,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MIN);\n+            }\n+        }\n+\n@@ -447,1 +455,1 @@\n-                ra = (float)Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n+                ra = (float) Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n@@ -450,1 +458,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -454,1 +463,1 @@\n-    public void MINMaskedLanes(Blackhole bh) {\n+    public void MINMasked(Blackhole bh) {\n@@ -456,0 +465,1 @@\n+        float[] r = fr.apply(SPECIES.length());\n@@ -460,0 +470,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MIN, vmask);\n+            }\n+        }\n+\n@@ -464,1 +481,1 @@\n-                ra = (float)Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n+                ra = (float) Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n@@ -467,1 +484,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -471,1 +489,1 @@\n-    public void MAXLanes(Blackhole bh) {\n+    public void MAX(Blackhole bh) {\n@@ -473,0 +491,1 @@\n+        float[] r = fr.apply(SPECIES.length());\n@@ -475,0 +494,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MAX);\n+            }\n+        }\n+\n@@ -479,1 +505,1 @@\n-                ra = (float)Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n+                ra = (float) Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n@@ -482,1 +508,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -486,1 +513,1 @@\n-    public void MAXMaskedLanes(Blackhole bh) {\n+    public void MAXMasked(Blackhole bh) {\n@@ -488,0 +515,1 @@\n+        float[] r = fr.apply(SPECIES.length());\n@@ -492,0 +520,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MAX, vmask);\n+            }\n+        }\n+\n@@ -496,1 +531,1 @@\n-                ra = (float)Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n+                ra = (float) Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n@@ -499,1 +534,52 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n+    }\n+\n+    @Benchmark\n+    public void FIRST_NONZERO(Blackhole bh) {\n+        float[] a = fa.apply(SPECIES.length());\n+        float[] r = fr.apply(SPECIES.length());\n+        float ra = (float) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (float) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO));\n+            }\n+        }\n+\n+        bh.consume(r);\n+    }\n+\n+    @Benchmark\n+    public void FIRST_NONZEROMasked(Blackhole bh) {\n+        float[] a = fa.apply(SPECIES.length());\n+        float[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Float> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        float ra = (float) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (float) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask));\n+            }\n+        }\n+\n+        bh.consume(r);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float512Vector.java","additions":98,"deletions":12,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -439,1 +439,1 @@\n-    public void MINLanes(Blackhole bh) {\n+    public void MIN(Blackhole bh) {\n@@ -441,0 +441,1 @@\n+        float[] r = fr.apply(SPECIES.length());\n@@ -443,0 +444,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MIN);\n+            }\n+        }\n+\n@@ -447,1 +455,1 @@\n-                ra = (float)Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n+                ra = (float) Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n@@ -450,1 +458,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -454,1 +463,1 @@\n-    public void MINMaskedLanes(Blackhole bh) {\n+    public void MINMasked(Blackhole bh) {\n@@ -456,0 +465,1 @@\n+        float[] r = fr.apply(SPECIES.length());\n@@ -460,0 +470,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MIN, vmask);\n+            }\n+        }\n+\n@@ -464,1 +481,1 @@\n-                ra = (float)Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n+                ra = (float) Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n@@ -467,1 +484,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -471,1 +489,1 @@\n-    public void MAXLanes(Blackhole bh) {\n+    public void MAX(Blackhole bh) {\n@@ -473,0 +491,1 @@\n+        float[] r = fr.apply(SPECIES.length());\n@@ -475,0 +494,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MAX);\n+            }\n+        }\n+\n@@ -479,1 +505,1 @@\n-                ra = (float)Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n+                ra = (float) Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n@@ -482,1 +508,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -486,1 +513,1 @@\n-    public void MAXMaskedLanes(Blackhole bh) {\n+    public void MAXMasked(Blackhole bh) {\n@@ -488,0 +515,1 @@\n+        float[] r = fr.apply(SPECIES.length());\n@@ -492,0 +520,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MAX, vmask);\n+            }\n+        }\n+\n@@ -496,1 +531,1 @@\n-                ra = (float)Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n+                ra = (float) Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n@@ -499,1 +534,52 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n+    }\n+\n+    @Benchmark\n+    public void FIRST_NONZERO(Blackhole bh) {\n+        float[] a = fa.apply(SPECIES.length());\n+        float[] r = fr.apply(SPECIES.length());\n+        float ra = (float) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (float) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO));\n+            }\n+        }\n+\n+        bh.consume(r);\n+    }\n+\n+    @Benchmark\n+    public void FIRST_NONZEROMasked(Blackhole bh) {\n+        float[] a = fa.apply(SPECIES.length());\n+        float[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Float> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        float ra = (float) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (float) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask));\n+            }\n+        }\n+\n+        bh.consume(r);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float64Vector.java","additions":98,"deletions":12,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -439,1 +439,1 @@\n-    public void MINLanes(Blackhole bh) {\n+    public void MIN(Blackhole bh) {\n@@ -441,0 +441,1 @@\n+        float[] r = fr.apply(SPECIES.length());\n@@ -443,0 +444,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MIN);\n+            }\n+        }\n+\n@@ -447,1 +455,1 @@\n-                ra = (float)Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n+                ra = (float) Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n@@ -450,1 +458,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -454,1 +463,1 @@\n-    public void MINMaskedLanes(Blackhole bh) {\n+    public void MINMasked(Blackhole bh) {\n@@ -456,0 +465,1 @@\n+        float[] r = fr.apply(SPECIES.length());\n@@ -460,0 +470,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MIN, vmask);\n+            }\n+        }\n+\n@@ -464,1 +481,1 @@\n-                ra = (float)Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n+                ra = (float) Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n@@ -467,1 +484,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -471,1 +489,1 @@\n-    public void MAXLanes(Blackhole bh) {\n+    public void MAX(Blackhole bh) {\n@@ -473,0 +491,1 @@\n+        float[] r = fr.apply(SPECIES.length());\n@@ -475,0 +494,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MAX);\n+            }\n+        }\n+\n@@ -479,1 +505,1 @@\n-                ra = (float)Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n+                ra = (float) Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n@@ -482,1 +508,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -486,1 +513,1 @@\n-    public void MAXMaskedLanes(Blackhole bh) {\n+    public void MAXMasked(Blackhole bh) {\n@@ -488,0 +515,1 @@\n+        float[] r = fr.apply(SPECIES.length());\n@@ -492,0 +520,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MAX, vmask);\n+            }\n+        }\n+\n@@ -496,1 +531,1 @@\n-                ra = (float)Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n+                ra = (float) Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n@@ -499,1 +534,52 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n+    }\n+\n+    @Benchmark\n+    public void FIRST_NONZERO(Blackhole bh) {\n+        float[] a = fa.apply(SPECIES.length());\n+        float[] r = fr.apply(SPECIES.length());\n+        float ra = (float) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (float) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO));\n+            }\n+        }\n+\n+        bh.consume(r);\n+    }\n+\n+    @Benchmark\n+    public void FIRST_NONZEROMasked(Blackhole bh) {\n+        float[] a = fa.apply(SPECIES.length());\n+        float[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Float> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        float ra = (float) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (float) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask));\n+            }\n+        }\n+\n+        bh.consume(r);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/FloatMaxVector.java","additions":98,"deletions":12,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -452,56 +452,0 @@\n-    @Benchmark\n-    public void MINLanes(Blackhole bh) {\n-        float[] as = fa.apply(size);\n-        float r = Float.POSITIVE_INFINITY;\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            r = Float.POSITIVE_INFINITY;\n-            for (int i = 0; i < as.length; i++) {\n-                r = (float)Math.min(r, as[i]);\n-            }\n-        }\n-        bh.consume(r);\n-    }\n-\n-    @Benchmark\n-    public void MINMaskedLanes(Blackhole bh) {\n-        float[] as = fa.apply(size);\n-        boolean[] ms = fm.apply(size);\n-        float r = Float.POSITIVE_INFINITY;\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            r = Float.POSITIVE_INFINITY;\n-            for (int i = 0; i < as.length; i++) {\n-                if (ms[i % ms.length])\n-                    r = (float)Math.min(r, as[i]);\n-            }\n-        }\n-        bh.consume(r);\n-    }\n-\n-    @Benchmark\n-    public void MAXLanes(Blackhole bh) {\n-        float[] as = fa.apply(size);\n-        float r = Float.NEGATIVE_INFINITY;\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            r = Float.NEGATIVE_INFINITY;\n-            for (int i = 0; i < as.length; i++) {\n-                r = (float)Math.max(r, as[i]);\n-            }\n-        }\n-        bh.consume(r);\n-    }\n-\n-    @Benchmark\n-    public void MAXMaskedLanes(Blackhole bh) {\n-        float[] as = fa.apply(size);\n-        boolean[] ms = fm.apply(size);\n-        float r = Float.NEGATIVE_INFINITY;\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            r = Float.NEGATIVE_INFINITY;\n-            for (int i = 0; i < as.length; i++) {\n-                if (ms[i % ms.length])\n-                    r = (float)Math.max(r, as[i]);\n-            }\n-        }\n-        bh.consume(r);\n-    }\n-\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/FloatScalar.java","additions":0,"deletions":56,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -1082,1 +1082,1 @@\n-    public void MINLanes(Blackhole bh) {\n+    public void MIN(Blackhole bh) {\n@@ -1084,0 +1084,1 @@\n+        int[] r = fr.apply(SPECIES.length());\n@@ -1086,0 +1087,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MIN);\n+            }\n+        }\n+\n@@ -1090,1 +1098,1 @@\n-                ra = (int)Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n+                ra = (int) Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n@@ -1093,1 +1101,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -1097,1 +1106,1 @@\n-    public void MINMaskedLanes(Blackhole bh) {\n+    public void MINMasked(Blackhole bh) {\n@@ -1099,0 +1108,1 @@\n+        int[] r = fr.apply(SPECIES.length());\n@@ -1103,0 +1113,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MIN, vmask);\n+            }\n+        }\n+\n@@ -1107,1 +1124,1 @@\n-                ra = (int)Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n+                ra = (int) Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n@@ -1110,1 +1127,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -1114,1 +1132,1 @@\n-    public void MAXLanes(Blackhole bh) {\n+    public void MAX(Blackhole bh) {\n@@ -1116,0 +1134,1 @@\n+        int[] r = fr.apply(SPECIES.length());\n@@ -1118,0 +1137,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MAX);\n+            }\n+        }\n+\n@@ -1122,1 +1148,1 @@\n-                ra = (int)Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n+                ra = (int) Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n@@ -1125,1 +1151,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -1129,1 +1156,1 @@\n-    public void MAXMaskedLanes(Blackhole bh) {\n+    public void MAXMasked(Blackhole bh) {\n@@ -1131,0 +1158,1 @@\n+        int[] r = fr.apply(SPECIES.length());\n@@ -1135,0 +1163,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MAX, vmask);\n+            }\n+        }\n+\n@@ -1139,1 +1174,1 @@\n-                ra = (int)Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n+                ra = (int) Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n@@ -1142,1 +1177,52 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n+    }\n+\n+    @Benchmark\n+    public void FIRST_NONZERO(Blackhole bh) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+        int ra = (int) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (int) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO));\n+            }\n+        }\n+\n+        bh.consume(r);\n+    }\n+\n+    @Benchmark\n+    public void FIRST_NONZEROMasked(Blackhole bh) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Integer> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        int ra = (int) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (int) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask));\n+            }\n+        }\n+\n+        bh.consume(r);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int128Vector.java","additions":98,"deletions":12,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -1082,1 +1082,1 @@\n-    public void MINLanes(Blackhole bh) {\n+    public void MIN(Blackhole bh) {\n@@ -1084,0 +1084,1 @@\n+        int[] r = fr.apply(SPECIES.length());\n@@ -1086,0 +1087,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MIN);\n+            }\n+        }\n+\n@@ -1090,1 +1098,1 @@\n-                ra = (int)Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n+                ra = (int) Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n@@ -1093,1 +1101,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -1097,1 +1106,1 @@\n-    public void MINMaskedLanes(Blackhole bh) {\n+    public void MINMasked(Blackhole bh) {\n@@ -1099,0 +1108,1 @@\n+        int[] r = fr.apply(SPECIES.length());\n@@ -1103,0 +1113,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MIN, vmask);\n+            }\n+        }\n+\n@@ -1107,1 +1124,1 @@\n-                ra = (int)Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n+                ra = (int) Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n@@ -1110,1 +1127,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -1114,1 +1132,1 @@\n-    public void MAXLanes(Blackhole bh) {\n+    public void MAX(Blackhole bh) {\n@@ -1116,0 +1134,1 @@\n+        int[] r = fr.apply(SPECIES.length());\n@@ -1118,0 +1137,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MAX);\n+            }\n+        }\n+\n@@ -1122,1 +1148,1 @@\n-                ra = (int)Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n+                ra = (int) Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n@@ -1125,1 +1151,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -1129,1 +1156,1 @@\n-    public void MAXMaskedLanes(Blackhole bh) {\n+    public void MAXMasked(Blackhole bh) {\n@@ -1131,0 +1158,1 @@\n+        int[] r = fr.apply(SPECIES.length());\n@@ -1135,0 +1163,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MAX, vmask);\n+            }\n+        }\n+\n@@ -1139,1 +1174,1 @@\n-                ra = (int)Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n+                ra = (int) Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n@@ -1142,1 +1177,52 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n+    }\n+\n+    @Benchmark\n+    public void FIRST_NONZERO(Blackhole bh) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+        int ra = (int) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (int) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO));\n+            }\n+        }\n+\n+        bh.consume(r);\n+    }\n+\n+    @Benchmark\n+    public void FIRST_NONZEROMasked(Blackhole bh) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Integer> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        int ra = (int) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (int) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask));\n+            }\n+        }\n+\n+        bh.consume(r);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int256Vector.java","additions":98,"deletions":12,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -1082,1 +1082,1 @@\n-    public void MINLanes(Blackhole bh) {\n+    public void MIN(Blackhole bh) {\n@@ -1084,0 +1084,1 @@\n+        int[] r = fr.apply(SPECIES.length());\n@@ -1086,0 +1087,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MIN);\n+            }\n+        }\n+\n@@ -1090,1 +1098,1 @@\n-                ra = (int)Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n+                ra = (int) Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n@@ -1093,1 +1101,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -1097,1 +1106,1 @@\n-    public void MINMaskedLanes(Blackhole bh) {\n+    public void MINMasked(Blackhole bh) {\n@@ -1099,0 +1108,1 @@\n+        int[] r = fr.apply(SPECIES.length());\n@@ -1103,0 +1113,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MIN, vmask);\n+            }\n+        }\n+\n@@ -1107,1 +1124,1 @@\n-                ra = (int)Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n+                ra = (int) Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n@@ -1110,1 +1127,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -1114,1 +1132,1 @@\n-    public void MAXLanes(Blackhole bh) {\n+    public void MAX(Blackhole bh) {\n@@ -1116,0 +1134,1 @@\n+        int[] r = fr.apply(SPECIES.length());\n@@ -1118,0 +1137,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MAX);\n+            }\n+        }\n+\n@@ -1122,1 +1148,1 @@\n-                ra = (int)Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n+                ra = (int) Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n@@ -1125,1 +1151,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -1129,1 +1156,1 @@\n-    public void MAXMaskedLanes(Blackhole bh) {\n+    public void MAXMasked(Blackhole bh) {\n@@ -1131,0 +1158,1 @@\n+        int[] r = fr.apply(SPECIES.length());\n@@ -1135,0 +1163,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MAX, vmask);\n+            }\n+        }\n+\n@@ -1139,1 +1174,1 @@\n-                ra = (int)Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n+                ra = (int) Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n@@ -1142,1 +1177,52 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n+    }\n+\n+    @Benchmark\n+    public void FIRST_NONZERO(Blackhole bh) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+        int ra = (int) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (int) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO));\n+            }\n+        }\n+\n+        bh.consume(r);\n+    }\n+\n+    @Benchmark\n+    public void FIRST_NONZEROMasked(Blackhole bh) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Integer> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        int ra = (int) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (int) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask));\n+            }\n+        }\n+\n+        bh.consume(r);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int512Vector.java","additions":98,"deletions":12,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -1082,1 +1082,1 @@\n-    public void MINLanes(Blackhole bh) {\n+    public void MIN(Blackhole bh) {\n@@ -1084,0 +1084,1 @@\n+        int[] r = fr.apply(SPECIES.length());\n@@ -1086,0 +1087,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MIN);\n+            }\n+        }\n+\n@@ -1090,1 +1098,1 @@\n-                ra = (int)Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n+                ra = (int) Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n@@ -1093,1 +1101,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -1097,1 +1106,1 @@\n-    public void MINMaskedLanes(Blackhole bh) {\n+    public void MINMasked(Blackhole bh) {\n@@ -1099,0 +1108,1 @@\n+        int[] r = fr.apply(SPECIES.length());\n@@ -1103,0 +1113,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MIN, vmask);\n+            }\n+        }\n+\n@@ -1107,1 +1124,1 @@\n-                ra = (int)Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n+                ra = (int) Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n@@ -1110,1 +1127,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -1114,1 +1132,1 @@\n-    public void MAXLanes(Blackhole bh) {\n+    public void MAX(Blackhole bh) {\n@@ -1116,0 +1134,1 @@\n+        int[] r = fr.apply(SPECIES.length());\n@@ -1118,0 +1137,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MAX);\n+            }\n+        }\n+\n@@ -1122,1 +1148,1 @@\n-                ra = (int)Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n+                ra = (int) Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n@@ -1125,1 +1151,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -1129,1 +1156,1 @@\n-    public void MAXMaskedLanes(Blackhole bh) {\n+    public void MAXMasked(Blackhole bh) {\n@@ -1131,0 +1158,1 @@\n+        int[] r = fr.apply(SPECIES.length());\n@@ -1135,0 +1163,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MAX, vmask);\n+            }\n+        }\n+\n@@ -1139,1 +1174,1 @@\n-                ra = (int)Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n+                ra = (int) Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n@@ -1142,1 +1177,52 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n+    }\n+\n+    @Benchmark\n+    public void FIRST_NONZERO(Blackhole bh) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+        int ra = (int) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (int) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO));\n+            }\n+        }\n+\n+        bh.consume(r);\n+    }\n+\n+    @Benchmark\n+    public void FIRST_NONZEROMasked(Blackhole bh) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Integer> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        int ra = (int) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (int) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask));\n+            }\n+        }\n+\n+        bh.consume(r);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int64Vector.java","additions":98,"deletions":12,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -1082,1 +1082,1 @@\n-    public void MINLanes(Blackhole bh) {\n+    public void MIN(Blackhole bh) {\n@@ -1084,0 +1084,1 @@\n+        int[] r = fr.apply(SPECIES.length());\n@@ -1086,0 +1087,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MIN);\n+            }\n+        }\n+\n@@ -1090,1 +1098,1 @@\n-                ra = (int)Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n+                ra = (int) Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n@@ -1093,1 +1101,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -1097,1 +1106,1 @@\n-    public void MINMaskedLanes(Blackhole bh) {\n+    public void MINMasked(Blackhole bh) {\n@@ -1099,0 +1108,1 @@\n+        int[] r = fr.apply(SPECIES.length());\n@@ -1103,0 +1113,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MIN, vmask);\n+            }\n+        }\n+\n@@ -1107,1 +1124,1 @@\n-                ra = (int)Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n+                ra = (int) Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n@@ -1110,1 +1127,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -1114,1 +1132,1 @@\n-    public void MAXLanes(Blackhole bh) {\n+    public void MAX(Blackhole bh) {\n@@ -1116,0 +1134,1 @@\n+        int[] r = fr.apply(SPECIES.length());\n@@ -1118,0 +1137,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MAX);\n+            }\n+        }\n+\n@@ -1122,1 +1148,1 @@\n-                ra = (int)Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n+                ra = (int) Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n@@ -1125,1 +1151,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -1129,1 +1156,1 @@\n-    public void MAXMaskedLanes(Blackhole bh) {\n+    public void MAXMasked(Blackhole bh) {\n@@ -1131,0 +1158,1 @@\n+        int[] r = fr.apply(SPECIES.length());\n@@ -1135,0 +1163,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MAX, vmask);\n+            }\n+        }\n+\n@@ -1139,1 +1174,1 @@\n-                ra = (int)Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n+                ra = (int) Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n@@ -1142,1 +1177,52 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n+    }\n+\n+    @Benchmark\n+    public void FIRST_NONZERO(Blackhole bh) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+        int ra = (int) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (int) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO));\n+            }\n+        }\n+\n+        bh.consume(r);\n+    }\n+\n+    @Benchmark\n+    public void FIRST_NONZEROMasked(Blackhole bh) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Integer> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        int ra = (int) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (int) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask));\n+            }\n+        }\n+\n+        bh.consume(r);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/IntMaxVector.java","additions":98,"deletions":12,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -1074,56 +1074,0 @@\n-    @Benchmark\n-    public void MINLanes(Blackhole bh) {\n-        int[] as = fa.apply(size);\n-        int r = Integer.MAX_VALUE;\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            r = Integer.MAX_VALUE;\n-            for (int i = 0; i < as.length; i++) {\n-                r = (int)Math.min(r, as[i]);\n-            }\n-        }\n-        bh.consume(r);\n-    }\n-\n-    @Benchmark\n-    public void MINMaskedLanes(Blackhole bh) {\n-        int[] as = fa.apply(size);\n-        boolean[] ms = fm.apply(size);\n-        int r = Integer.MAX_VALUE;\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            r = Integer.MAX_VALUE;\n-            for (int i = 0; i < as.length; i++) {\n-                if (ms[i % ms.length])\n-                    r = (int)Math.min(r, as[i]);\n-            }\n-        }\n-        bh.consume(r);\n-    }\n-\n-    @Benchmark\n-    public void MAXLanes(Blackhole bh) {\n-        int[] as = fa.apply(size);\n-        int r = Integer.MIN_VALUE;\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            r = Integer.MIN_VALUE;\n-            for (int i = 0; i < as.length; i++) {\n-                r = (int)Math.max(r, as[i]);\n-            }\n-        }\n-        bh.consume(r);\n-    }\n-\n-    @Benchmark\n-    public void MAXMaskedLanes(Blackhole bh) {\n-        int[] as = fa.apply(size);\n-        boolean[] ms = fm.apply(size);\n-        int r = Integer.MIN_VALUE;\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            r = Integer.MIN_VALUE;\n-            for (int i = 0; i < as.length; i++) {\n-                if (ms[i % ms.length])\n-                    r = (int)Math.max(r, as[i]);\n-            }\n-        }\n-        bh.consume(r);\n-    }\n-\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/IntScalar.java","additions":0,"deletions":56,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -1082,1 +1082,1 @@\n-    public void MINLanes(Blackhole bh) {\n+    public void MIN(Blackhole bh) {\n@@ -1084,0 +1084,1 @@\n+        long[] r = fr.apply(SPECIES.length());\n@@ -1086,0 +1087,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MIN);\n+            }\n+        }\n+\n@@ -1090,1 +1098,1 @@\n-                ra = (long)Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n+                ra = (long) Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n@@ -1093,1 +1101,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -1097,1 +1106,1 @@\n-    public void MINMaskedLanes(Blackhole bh) {\n+    public void MINMasked(Blackhole bh) {\n@@ -1099,0 +1108,1 @@\n+        long[] r = fr.apply(SPECIES.length());\n@@ -1103,0 +1113,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MIN, vmask);\n+            }\n+        }\n+\n@@ -1107,1 +1124,1 @@\n-                ra = (long)Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n+                ra = (long) Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n@@ -1110,1 +1127,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -1114,1 +1132,1 @@\n-    public void MAXLanes(Blackhole bh) {\n+    public void MAX(Blackhole bh) {\n@@ -1116,0 +1134,1 @@\n+        long[] r = fr.apply(SPECIES.length());\n@@ -1118,0 +1137,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MAX);\n+            }\n+        }\n+\n@@ -1122,1 +1148,1 @@\n-                ra = (long)Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n+                ra = (long) Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n@@ -1125,1 +1151,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -1129,1 +1156,1 @@\n-    public void MAXMaskedLanes(Blackhole bh) {\n+    public void MAXMasked(Blackhole bh) {\n@@ -1131,0 +1158,1 @@\n+        long[] r = fr.apply(SPECIES.length());\n@@ -1135,0 +1163,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MAX, vmask);\n+            }\n+        }\n+\n@@ -1139,1 +1174,1 @@\n-                ra = (long)Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n+                ra = (long) Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n@@ -1142,1 +1177,52 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n+    }\n+\n+    @Benchmark\n+    public void FIRST_NONZERO(Blackhole bh) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+        long ra = (long) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (long) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO));\n+            }\n+        }\n+\n+        bh.consume(r);\n+    }\n+\n+    @Benchmark\n+    public void FIRST_NONZEROMasked(Blackhole bh) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Long> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        long ra = (long) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (long) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask));\n+            }\n+        }\n+\n+        bh.consume(r);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long128Vector.java","additions":98,"deletions":12,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -1082,1 +1082,1 @@\n-    public void MINLanes(Blackhole bh) {\n+    public void MIN(Blackhole bh) {\n@@ -1084,0 +1084,1 @@\n+        long[] r = fr.apply(SPECIES.length());\n@@ -1086,0 +1087,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MIN);\n+            }\n+        }\n+\n@@ -1090,1 +1098,1 @@\n-                ra = (long)Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n+                ra = (long) Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n@@ -1093,1 +1101,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -1097,1 +1106,1 @@\n-    public void MINMaskedLanes(Blackhole bh) {\n+    public void MINMasked(Blackhole bh) {\n@@ -1099,0 +1108,1 @@\n+        long[] r = fr.apply(SPECIES.length());\n@@ -1103,0 +1113,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MIN, vmask);\n+            }\n+        }\n+\n@@ -1107,1 +1124,1 @@\n-                ra = (long)Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n+                ra = (long) Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n@@ -1110,1 +1127,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -1114,1 +1132,1 @@\n-    public void MAXLanes(Blackhole bh) {\n+    public void MAX(Blackhole bh) {\n@@ -1116,0 +1134,1 @@\n+        long[] r = fr.apply(SPECIES.length());\n@@ -1118,0 +1137,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MAX);\n+            }\n+        }\n+\n@@ -1122,1 +1148,1 @@\n-                ra = (long)Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n+                ra = (long) Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n@@ -1125,1 +1151,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -1129,1 +1156,1 @@\n-    public void MAXMaskedLanes(Blackhole bh) {\n+    public void MAXMasked(Blackhole bh) {\n@@ -1131,0 +1158,1 @@\n+        long[] r = fr.apply(SPECIES.length());\n@@ -1135,0 +1163,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MAX, vmask);\n+            }\n+        }\n+\n@@ -1139,1 +1174,1 @@\n-                ra = (long)Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n+                ra = (long) Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n@@ -1142,1 +1177,52 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n+    }\n+\n+    @Benchmark\n+    public void FIRST_NONZERO(Blackhole bh) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+        long ra = (long) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (long) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO));\n+            }\n+        }\n+\n+        bh.consume(r);\n+    }\n+\n+    @Benchmark\n+    public void FIRST_NONZEROMasked(Blackhole bh) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Long> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        long ra = (long) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (long) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask));\n+            }\n+        }\n+\n+        bh.consume(r);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long256Vector.java","additions":98,"deletions":12,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -1082,1 +1082,1 @@\n-    public void MINLanes(Blackhole bh) {\n+    public void MIN(Blackhole bh) {\n@@ -1084,0 +1084,1 @@\n+        long[] r = fr.apply(SPECIES.length());\n@@ -1086,0 +1087,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MIN);\n+            }\n+        }\n+\n@@ -1090,1 +1098,1 @@\n-                ra = (long)Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n+                ra = (long) Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n@@ -1093,1 +1101,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -1097,1 +1106,1 @@\n-    public void MINMaskedLanes(Blackhole bh) {\n+    public void MINMasked(Blackhole bh) {\n@@ -1099,0 +1108,1 @@\n+        long[] r = fr.apply(SPECIES.length());\n@@ -1103,0 +1113,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MIN, vmask);\n+            }\n+        }\n+\n@@ -1107,1 +1124,1 @@\n-                ra = (long)Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n+                ra = (long) Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n@@ -1110,1 +1127,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -1114,1 +1132,1 @@\n-    public void MAXLanes(Blackhole bh) {\n+    public void MAX(Blackhole bh) {\n@@ -1116,0 +1134,1 @@\n+        long[] r = fr.apply(SPECIES.length());\n@@ -1118,0 +1137,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MAX);\n+            }\n+        }\n+\n@@ -1122,1 +1148,1 @@\n-                ra = (long)Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n+                ra = (long) Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n@@ -1125,1 +1151,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -1129,1 +1156,1 @@\n-    public void MAXMaskedLanes(Blackhole bh) {\n+    public void MAXMasked(Blackhole bh) {\n@@ -1131,0 +1158,1 @@\n+        long[] r = fr.apply(SPECIES.length());\n@@ -1135,0 +1163,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MAX, vmask);\n+            }\n+        }\n+\n@@ -1139,1 +1174,1 @@\n-                ra = (long)Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n+                ra = (long) Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n@@ -1142,1 +1177,52 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n+    }\n+\n+    @Benchmark\n+    public void FIRST_NONZERO(Blackhole bh) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+        long ra = (long) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (long) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO));\n+            }\n+        }\n+\n+        bh.consume(r);\n+    }\n+\n+    @Benchmark\n+    public void FIRST_NONZEROMasked(Blackhole bh) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Long> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        long ra = (long) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (long) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask));\n+            }\n+        }\n+\n+        bh.consume(r);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long512Vector.java","additions":98,"deletions":12,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -1082,1 +1082,1 @@\n-    public void MINLanes(Blackhole bh) {\n+    public void MIN(Blackhole bh) {\n@@ -1084,0 +1084,1 @@\n+        long[] r = fr.apply(SPECIES.length());\n@@ -1086,0 +1087,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MIN);\n+            }\n+        }\n+\n@@ -1090,1 +1098,1 @@\n-                ra = (long)Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n+                ra = (long) Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n@@ -1093,1 +1101,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -1097,1 +1106,1 @@\n-    public void MINMaskedLanes(Blackhole bh) {\n+    public void MINMasked(Blackhole bh) {\n@@ -1099,0 +1108,1 @@\n+        long[] r = fr.apply(SPECIES.length());\n@@ -1103,0 +1113,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MIN, vmask);\n+            }\n+        }\n+\n@@ -1107,1 +1124,1 @@\n-                ra = (long)Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n+                ra = (long) Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n@@ -1110,1 +1127,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -1114,1 +1132,1 @@\n-    public void MAXLanes(Blackhole bh) {\n+    public void MAX(Blackhole bh) {\n@@ -1116,0 +1134,1 @@\n+        long[] r = fr.apply(SPECIES.length());\n@@ -1118,0 +1137,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MAX);\n+            }\n+        }\n+\n@@ -1122,1 +1148,1 @@\n-                ra = (long)Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n+                ra = (long) Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n@@ -1125,1 +1151,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -1129,1 +1156,1 @@\n-    public void MAXMaskedLanes(Blackhole bh) {\n+    public void MAXMasked(Blackhole bh) {\n@@ -1131,0 +1158,1 @@\n+        long[] r = fr.apply(SPECIES.length());\n@@ -1135,0 +1163,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MAX, vmask);\n+            }\n+        }\n+\n@@ -1139,1 +1174,1 @@\n-                ra = (long)Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n+                ra = (long) Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n@@ -1142,1 +1177,52 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n+    }\n+\n+    @Benchmark\n+    public void FIRST_NONZERO(Blackhole bh) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+        long ra = (long) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (long) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO));\n+            }\n+        }\n+\n+        bh.consume(r);\n+    }\n+\n+    @Benchmark\n+    public void FIRST_NONZEROMasked(Blackhole bh) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Long> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        long ra = (long) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (long) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask));\n+            }\n+        }\n+\n+        bh.consume(r);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long64Vector.java","additions":98,"deletions":12,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -1082,1 +1082,1 @@\n-    public void MINLanes(Blackhole bh) {\n+    public void MIN(Blackhole bh) {\n@@ -1084,0 +1084,1 @@\n+        long[] r = fr.apply(SPECIES.length());\n@@ -1086,0 +1087,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MIN);\n+            }\n+        }\n+\n@@ -1090,1 +1098,1 @@\n-                ra = (long)Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n+                ra = (long) Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n@@ -1093,1 +1101,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -1097,1 +1106,1 @@\n-    public void MINMaskedLanes(Blackhole bh) {\n+    public void MINMasked(Blackhole bh) {\n@@ -1099,0 +1108,1 @@\n+        long[] r = fr.apply(SPECIES.length());\n@@ -1103,0 +1113,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MIN, vmask);\n+            }\n+        }\n+\n@@ -1107,1 +1124,1 @@\n-                ra = (long)Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n+                ra = (long) Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n@@ -1110,1 +1127,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -1114,1 +1132,1 @@\n-    public void MAXLanes(Blackhole bh) {\n+    public void MAX(Blackhole bh) {\n@@ -1116,0 +1134,1 @@\n+        long[] r = fr.apply(SPECIES.length());\n@@ -1118,0 +1137,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MAX);\n+            }\n+        }\n+\n@@ -1122,1 +1148,1 @@\n-                ra = (long)Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n+                ra = (long) Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n@@ -1125,1 +1151,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -1129,1 +1156,1 @@\n-    public void MAXMaskedLanes(Blackhole bh) {\n+    public void MAXMasked(Blackhole bh) {\n@@ -1131,0 +1158,1 @@\n+        long[] r = fr.apply(SPECIES.length());\n@@ -1135,0 +1163,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MAX, vmask);\n+            }\n+        }\n+\n@@ -1139,1 +1174,1 @@\n-                ra = (long)Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n+                ra = (long) Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n@@ -1142,1 +1177,52 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n+    }\n+\n+    @Benchmark\n+    public void FIRST_NONZERO(Blackhole bh) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+        long ra = (long) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (long) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO));\n+            }\n+        }\n+\n+        bh.consume(r);\n+    }\n+\n+    @Benchmark\n+    public void FIRST_NONZEROMasked(Blackhole bh) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Long> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        long ra = (long) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (long) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask));\n+            }\n+        }\n+\n+        bh.consume(r);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/LongMaxVector.java","additions":98,"deletions":12,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -1074,56 +1074,0 @@\n-    @Benchmark\n-    public void MINLanes(Blackhole bh) {\n-        long[] as = fa.apply(size);\n-        long r = Long.MAX_VALUE;\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            r = Long.MAX_VALUE;\n-            for (int i = 0; i < as.length; i++) {\n-                r = (long)Math.min(r, as[i]);\n-            }\n-        }\n-        bh.consume(r);\n-    }\n-\n-    @Benchmark\n-    public void MINMaskedLanes(Blackhole bh) {\n-        long[] as = fa.apply(size);\n-        boolean[] ms = fm.apply(size);\n-        long r = Long.MAX_VALUE;\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            r = Long.MAX_VALUE;\n-            for (int i = 0; i < as.length; i++) {\n-                if (ms[i % ms.length])\n-                    r = (long)Math.min(r, as[i]);\n-            }\n-        }\n-        bh.consume(r);\n-    }\n-\n-    @Benchmark\n-    public void MAXLanes(Blackhole bh) {\n-        long[] as = fa.apply(size);\n-        long r = Long.MIN_VALUE;\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            r = Long.MIN_VALUE;\n-            for (int i = 0; i < as.length; i++) {\n-                r = (long)Math.max(r, as[i]);\n-            }\n-        }\n-        bh.consume(r);\n-    }\n-\n-    @Benchmark\n-    public void MAXMaskedLanes(Blackhole bh) {\n-        long[] as = fa.apply(size);\n-        boolean[] ms = fm.apply(size);\n-        long r = Long.MIN_VALUE;\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            r = Long.MIN_VALUE;\n-            for (int i = 0; i < as.length; i++) {\n-                if (ms[i % ms.length])\n-                    r = (long)Math.max(r, as[i]);\n-            }\n-        }\n-        bh.consume(r);\n-    }\n-\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/LongScalar.java","additions":0,"deletions":56,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -1082,1 +1082,1 @@\n-    public void MINLanes(Blackhole bh) {\n+    public void MIN(Blackhole bh) {\n@@ -1084,0 +1084,1 @@\n+        short[] r = fr.apply(SPECIES.length());\n@@ -1086,0 +1087,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MIN);\n+            }\n+        }\n+\n@@ -1090,1 +1098,1 @@\n-                ra = (short)Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n+                ra = (short) Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n@@ -1093,1 +1101,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -1097,1 +1106,1 @@\n-    public void MINMaskedLanes(Blackhole bh) {\n+    public void MINMasked(Blackhole bh) {\n@@ -1099,0 +1108,1 @@\n+        short[] r = fr.apply(SPECIES.length());\n@@ -1103,0 +1113,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MIN, vmask);\n+            }\n+        }\n+\n@@ -1107,1 +1124,1 @@\n-                ra = (short)Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n+                ra = (short) Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n@@ -1110,1 +1127,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -1114,1 +1132,1 @@\n-    public void MAXLanes(Blackhole bh) {\n+    public void MAX(Blackhole bh) {\n@@ -1116,0 +1134,1 @@\n+        short[] r = fr.apply(SPECIES.length());\n@@ -1118,0 +1137,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MAX);\n+            }\n+        }\n+\n@@ -1122,1 +1148,1 @@\n-                ra = (short)Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n+                ra = (short) Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n@@ -1125,1 +1151,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -1129,1 +1156,1 @@\n-    public void MAXMaskedLanes(Blackhole bh) {\n+    public void MAXMasked(Blackhole bh) {\n@@ -1131,0 +1158,1 @@\n+        short[] r = fr.apply(SPECIES.length());\n@@ -1135,0 +1163,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MAX, vmask);\n+            }\n+        }\n+\n@@ -1139,1 +1174,1 @@\n-                ra = (short)Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n+                ra = (short) Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n@@ -1142,1 +1177,52 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n+    }\n+\n+    @Benchmark\n+    public void FIRST_NONZERO(Blackhole bh) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        short ra = (short) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (short) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO));\n+            }\n+        }\n+\n+        bh.consume(r);\n+    }\n+\n+    @Benchmark\n+    public void FIRST_NONZEROMasked(Blackhole bh) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Short> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        short ra = (short) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (short) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask));\n+            }\n+        }\n+\n+        bh.consume(r);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short128Vector.java","additions":98,"deletions":12,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -1082,1 +1082,1 @@\n-    public void MINLanes(Blackhole bh) {\n+    public void MIN(Blackhole bh) {\n@@ -1084,0 +1084,1 @@\n+        short[] r = fr.apply(SPECIES.length());\n@@ -1086,0 +1087,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MIN);\n+            }\n+        }\n+\n@@ -1090,1 +1098,1 @@\n-                ra = (short)Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n+                ra = (short) Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n@@ -1093,1 +1101,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -1097,1 +1106,1 @@\n-    public void MINMaskedLanes(Blackhole bh) {\n+    public void MINMasked(Blackhole bh) {\n@@ -1099,0 +1108,1 @@\n+        short[] r = fr.apply(SPECIES.length());\n@@ -1103,0 +1113,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MIN, vmask);\n+            }\n+        }\n+\n@@ -1107,1 +1124,1 @@\n-                ra = (short)Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n+                ra = (short) Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n@@ -1110,1 +1127,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -1114,1 +1132,1 @@\n-    public void MAXLanes(Blackhole bh) {\n+    public void MAX(Blackhole bh) {\n@@ -1116,0 +1134,1 @@\n+        short[] r = fr.apply(SPECIES.length());\n@@ -1118,0 +1137,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MAX);\n+            }\n+        }\n+\n@@ -1122,1 +1148,1 @@\n-                ra = (short)Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n+                ra = (short) Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n@@ -1125,1 +1151,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -1129,1 +1156,1 @@\n-    public void MAXMaskedLanes(Blackhole bh) {\n+    public void MAXMasked(Blackhole bh) {\n@@ -1131,0 +1158,1 @@\n+        short[] r = fr.apply(SPECIES.length());\n@@ -1135,0 +1163,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MAX, vmask);\n+            }\n+        }\n+\n@@ -1139,1 +1174,1 @@\n-                ra = (short)Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n+                ra = (short) Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n@@ -1142,1 +1177,52 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n+    }\n+\n+    @Benchmark\n+    public void FIRST_NONZERO(Blackhole bh) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        short ra = (short) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (short) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO));\n+            }\n+        }\n+\n+        bh.consume(r);\n+    }\n+\n+    @Benchmark\n+    public void FIRST_NONZEROMasked(Blackhole bh) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Short> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        short ra = (short) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (short) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask));\n+            }\n+        }\n+\n+        bh.consume(r);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short256Vector.java","additions":98,"deletions":12,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -1082,1 +1082,1 @@\n-    public void MINLanes(Blackhole bh) {\n+    public void MIN(Blackhole bh) {\n@@ -1084,0 +1084,1 @@\n+        short[] r = fr.apply(SPECIES.length());\n@@ -1086,0 +1087,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MIN);\n+            }\n+        }\n+\n@@ -1090,1 +1098,1 @@\n-                ra = (short)Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n+                ra = (short) Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n@@ -1093,1 +1101,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -1097,1 +1106,1 @@\n-    public void MINMaskedLanes(Blackhole bh) {\n+    public void MINMasked(Blackhole bh) {\n@@ -1099,0 +1108,1 @@\n+        short[] r = fr.apply(SPECIES.length());\n@@ -1103,0 +1113,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MIN, vmask);\n+            }\n+        }\n+\n@@ -1107,1 +1124,1 @@\n-                ra = (short)Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n+                ra = (short) Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n@@ -1110,1 +1127,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -1114,1 +1132,1 @@\n-    public void MAXLanes(Blackhole bh) {\n+    public void MAX(Blackhole bh) {\n@@ -1116,0 +1134,1 @@\n+        short[] r = fr.apply(SPECIES.length());\n@@ -1118,0 +1137,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MAX);\n+            }\n+        }\n+\n@@ -1122,1 +1148,1 @@\n-                ra = (short)Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n+                ra = (short) Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n@@ -1125,1 +1151,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -1129,1 +1156,1 @@\n-    public void MAXMaskedLanes(Blackhole bh) {\n+    public void MAXMasked(Blackhole bh) {\n@@ -1131,0 +1158,1 @@\n+        short[] r = fr.apply(SPECIES.length());\n@@ -1135,0 +1163,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MAX, vmask);\n+            }\n+        }\n+\n@@ -1139,1 +1174,1 @@\n-                ra = (short)Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n+                ra = (short) Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n@@ -1142,1 +1177,52 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n+    }\n+\n+    @Benchmark\n+    public void FIRST_NONZERO(Blackhole bh) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        short ra = (short) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (short) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO));\n+            }\n+        }\n+\n+        bh.consume(r);\n+    }\n+\n+    @Benchmark\n+    public void FIRST_NONZEROMasked(Blackhole bh) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Short> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        short ra = (short) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (short) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask));\n+            }\n+        }\n+\n+        bh.consume(r);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short512Vector.java","additions":98,"deletions":12,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -1082,1 +1082,1 @@\n-    public void MINLanes(Blackhole bh) {\n+    public void MIN(Blackhole bh) {\n@@ -1084,0 +1084,1 @@\n+        short[] r = fr.apply(SPECIES.length());\n@@ -1086,0 +1087,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MIN);\n+            }\n+        }\n+\n@@ -1090,1 +1098,1 @@\n-                ra = (short)Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n+                ra = (short) Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n@@ -1093,1 +1101,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -1097,1 +1106,1 @@\n-    public void MINMaskedLanes(Blackhole bh) {\n+    public void MINMasked(Blackhole bh) {\n@@ -1099,0 +1108,1 @@\n+        short[] r = fr.apply(SPECIES.length());\n@@ -1103,0 +1113,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MIN, vmask);\n+            }\n+        }\n+\n@@ -1107,1 +1124,1 @@\n-                ra = (short)Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n+                ra = (short) Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n@@ -1110,1 +1127,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -1114,1 +1132,1 @@\n-    public void MAXLanes(Blackhole bh) {\n+    public void MAX(Blackhole bh) {\n@@ -1116,0 +1134,1 @@\n+        short[] r = fr.apply(SPECIES.length());\n@@ -1118,0 +1137,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MAX);\n+            }\n+        }\n+\n@@ -1122,1 +1148,1 @@\n-                ra = (short)Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n+                ra = (short) Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n@@ -1125,1 +1151,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -1129,1 +1156,1 @@\n-    public void MAXMaskedLanes(Blackhole bh) {\n+    public void MAXMasked(Blackhole bh) {\n@@ -1131,0 +1158,1 @@\n+        short[] r = fr.apply(SPECIES.length());\n@@ -1135,0 +1163,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MAX, vmask);\n+            }\n+        }\n+\n@@ -1139,1 +1174,1 @@\n-                ra = (short)Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n+                ra = (short) Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n@@ -1142,1 +1177,52 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n+    }\n+\n+    @Benchmark\n+    public void FIRST_NONZERO(Blackhole bh) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        short ra = (short) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (short) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO));\n+            }\n+        }\n+\n+        bh.consume(r);\n+    }\n+\n+    @Benchmark\n+    public void FIRST_NONZEROMasked(Blackhole bh) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Short> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        short ra = (short) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (short) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask));\n+            }\n+        }\n+\n+        bh.consume(r);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short64Vector.java","additions":98,"deletions":12,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -1082,1 +1082,1 @@\n-    public void MINLanes(Blackhole bh) {\n+    public void MIN(Blackhole bh) {\n@@ -1084,0 +1084,1 @@\n+        short[] r = fr.apply(SPECIES.length());\n@@ -1086,0 +1087,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MIN);\n+            }\n+        }\n+\n@@ -1090,1 +1098,1 @@\n-                ra = (short)Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n+                ra = (short) Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n@@ -1093,1 +1101,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -1097,1 +1106,1 @@\n-    public void MINMaskedLanes(Blackhole bh) {\n+    public void MINMasked(Blackhole bh) {\n@@ -1099,0 +1108,1 @@\n+        short[] r = fr.apply(SPECIES.length());\n@@ -1103,0 +1113,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MIN, vmask);\n+            }\n+        }\n+\n@@ -1107,1 +1124,1 @@\n-                ra = (short)Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n+                ra = (short) Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n@@ -1110,1 +1127,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -1114,1 +1132,1 @@\n-    public void MAXLanes(Blackhole bh) {\n+    public void MAX(Blackhole bh) {\n@@ -1116,0 +1134,1 @@\n+        short[] r = fr.apply(SPECIES.length());\n@@ -1118,0 +1137,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MAX);\n+            }\n+        }\n+\n@@ -1122,1 +1148,1 @@\n-                ra = (short)Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n+                ra = (short) Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n@@ -1125,1 +1151,2 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n@@ -1129,1 +1156,1 @@\n-    public void MAXMaskedLanes(Blackhole bh) {\n+    public void MAXMasked(Blackhole bh) {\n@@ -1131,0 +1158,1 @@\n+        short[] r = fr.apply(SPECIES.length());\n@@ -1135,0 +1163,7 @@\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.MAX, vmask);\n+            }\n+        }\n+\n@@ -1139,1 +1174,1 @@\n-                ra = (short)Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n+                ra = (short) Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n@@ -1142,1 +1177,52 @@\n-        bh.consume(ra);\n+\n+        bh.consume(r);\n+    }\n+\n+    @Benchmark\n+    public void FIRST_NONZERO(Blackhole bh) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        short ra = (short) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (short) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO));\n+            }\n+        }\n+\n+        bh.consume(r);\n+    }\n+\n+    @Benchmark\n+    public void FIRST_NONZEROMasked(Blackhole bh) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Short> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        short ra = (short) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (short) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask));\n+            }\n+        }\n+\n+        bh.consume(r);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ShortMaxVector.java","additions":98,"deletions":12,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -1074,56 +1074,0 @@\n-    @Benchmark\n-    public void MINLanes(Blackhole bh) {\n-        short[] as = fa.apply(size);\n-        short r = Short.MAX_VALUE;\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            r = Short.MAX_VALUE;\n-            for (int i = 0; i < as.length; i++) {\n-                r = (short)Math.min(r, as[i]);\n-            }\n-        }\n-        bh.consume(r);\n-    }\n-\n-    @Benchmark\n-    public void MINMaskedLanes(Blackhole bh) {\n-        short[] as = fa.apply(size);\n-        boolean[] ms = fm.apply(size);\n-        short r = Short.MAX_VALUE;\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            r = Short.MAX_VALUE;\n-            for (int i = 0; i < as.length; i++) {\n-                if (ms[i % ms.length])\n-                    r = (short)Math.min(r, as[i]);\n-            }\n-        }\n-        bh.consume(r);\n-    }\n-\n-    @Benchmark\n-    public void MAXLanes(Blackhole bh) {\n-        short[] as = fa.apply(size);\n-        short r = Short.MIN_VALUE;\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            r = Short.MIN_VALUE;\n-            for (int i = 0; i < as.length; i++) {\n-                r = (short)Math.max(r, as[i]);\n-            }\n-        }\n-        bh.consume(r);\n-    }\n-\n-    @Benchmark\n-    public void MAXMaskedLanes(Blackhole bh) {\n-        short[] as = fa.apply(size);\n-        boolean[] ms = fm.apply(size);\n-        short r = Short.MIN_VALUE;\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            r = Short.MIN_VALUE;\n-            for (int i = 0; i < as.length; i++) {\n-                if (ms[i % ms.length])\n-                    r = (short)Math.max(r, as[i]);\n-            }\n-        }\n-        bh.consume(r);\n-    }\n-\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ShortScalar.java","additions":0,"deletions":56,"binary":false,"changes":56,"status":"modified"}]}