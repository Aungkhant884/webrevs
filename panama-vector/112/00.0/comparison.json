{"files":[{"patch":"@@ -1298,24 +1298,0 @@\n-  static inline BasicType vector_element_basic_type(const MachNode* n) {\n-    const TypeVect* vt = n->bottom_type()->is_vect();\n-    return vt->element_basic_type();\n-  }\n-\n-  static inline BasicType vector_element_basic_type(const MachNode* use, const MachOper* opnd) {\n-    int def_idx = use->operand_index(opnd);\n-    Node* def = use->in(def_idx);\n-    const TypeVect* vt = def->bottom_type()->is_vect();\n-    return vt->element_basic_type();\n-  }\n-\n-  static inline uint vector_length(const MachNode* n) {\n-    const TypeVect* vt = n->bottom_type()->is_vect();\n-    return vt->length();\n-  }\n-\n-  static inline uint vector_length(const MachNode* use, const MachOper* opnd) {\n-    int def_idx = use->operand_index(opnd);\n-    Node* def = use->in(def_idx);\n-    const TypeVect* vt = def->bottom_type()->is_vect();\n-    return vt->length();\n-  }\n-\n@@ -2188,1 +2164,1 @@\n-          if (cbuf) {\n+        if (is64) {\n@@ -15076,1 +15052,1 @@\n-instruct clearArray_imm_reg(immL cnt, iRegP_R10 base, Universe dummy, rFlagsReg cr)\n+instruct clearArray_imm_reg(immL cnt, iRegP_R10 base, iRegL_R11 temp, Universe dummy, rFlagsReg cr)\n@@ -15081,1 +15057,1 @@\n-  effect(USE_KILL base);\n+  effect(TEMP temp, USE_KILL base, KILL cr);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":3,"deletions":27,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -96,12 +96,0 @@\n-  static inline uint vector_length_in_bytes(const MachNode* n) {\n-    const TypeVect* vt = n->bottom_type()->is_vect();\n-    return vt->length_in_bytes();\n-  }\n-\n-  static inline uint vector_length_in_bytes(const MachNode* use, MachOper* opnd) {\n-    uint def_idx = use->operand_index(opnd);\n-    Node* def = use->in(def_idx);\n-    const TypeVect* vt = def->bottom_type()->is_vect();\n-    return vt->length_in_bytes();\n-  }\n-\n@@ -200,1 +188,1 @@\n-    BasicType bt = vector_element_basic_type(this);\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n@@ -216,1 +204,1 @@\n-    BasicType bt = vector_element_basic_type(this, $src);\n+    BasicType bt = Matcher::vector_element_basic_type(this, $src);\n@@ -325,2 +313,3 @@\n-    BasicType bt = vector_element_basic_type(this);\n-    __ sve_whilelo_zr_imm(as_PRegister($pTmp$$reg), __ elemType_to_regVariant(bt), vector_length(this));\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ sve_whilelo_zr_imm(as_PRegister($pTmp$$reg), __ elemType_to_regVariant(bt),\n+                          Matcher::vector_length(this));\n@@ -344,2 +333,3 @@\n-    BasicType bt = vector_element_basic_type(this, $src);\n-    __ sve_whilelo_zr_imm(as_PRegister($pTmp$$reg), __ elemType_to_regVariant(bt), vector_length(this, $src));\n+    BasicType bt = Matcher::vector_element_basic_type(this, $src);\n+    __ sve_whilelo_zr_imm(as_PRegister($pTmp$$reg), __ elemType_to_regVariant(bt),\n+                          Matcher::vector_length(this, $src));\n@@ -580,2 +570,2 @@\n-    uint length_in_bytes_src = vector_length_in_bytes(this, $src);\n-    uint length_in_bytes_dst = vector_length_in_bytes(this);\n+    uint length_in_bytes_src = Matcher::vector_length_in_bytes(this, $src);\n+    uint length_in_bytes_dst = Matcher::vector_length_in_bytes(this);\n@@ -1164,1 +1154,1 @@\n-    BasicType bt = vector_element_basic_type(this);\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n@@ -1184,1 +1174,1 @@\n-    BasicType bt = vector_element_basic_type(this);\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n@@ -1737,0 +1727,1 @@\n+<<<<<<< HEAD\n@@ -1739,0 +1730,4 @@\n+=======\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ sve_compare(as_PRegister($pTmp$$reg), bt, ptrue, as_FloatRegister($src1$$reg),\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -1751,0 +1746,1 @@\n+<<<<<<< HEAD\n@@ -1754,0 +1750,8 @@\n+=======\n+    Assembler::SIMD_RegVariant size =\n+      __ elemType_to_regVariant(Matcher::vector_element_basic_type(this));\n+    __ sve_cmpeq(as_PRegister($pTmp$$reg), size, ptrue,\n+                 as_FloatRegister($src3$$reg), -1);\n+    __ sve_sel(as_FloatRegister($dst$$reg), size, as_PRegister($pTmp$$reg),\n+               as_FloatRegister($src2$$reg), as_FloatRegister($src1$$reg));\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -1766,0 +1770,1 @@\n+<<<<<<< HEAD\n@@ -1770,0 +1775,8 @@\n+=======\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ sve_compare(as_PRegister($pTmp$$reg), bt, ptrue, as_FloatRegister($src3$$reg),\n+                   as_FloatRegister($src4$$reg), (int)$cond$$constant);\n+    __ sve_sel(as_FloatRegister($dst$$reg), __ elemType_to_regVariant(bt),\n+               as_PRegister($pTmp$$reg), as_FloatRegister($src2$$reg),\n+               as_FloatRegister($src1$$reg));\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -1912,0 +1925,1 @@\n+<<<<<<< HEAD\n@@ -1917,0 +1931,7 @@\n+=======\n+    FloatRegister dst_reg = as_FloatRegister($dst$$reg);\n+    BasicType to_vect_bt = Matcher::vector_element_basic_type(this);\n+    Assembler::SIMD_RegVariant to_vect_variant = __ elemType_to_regVariant(to_vect_bt);\n+    loadStoreA_predicated(C2_MacroAssembler(&cbuf), false, dst_reg, ptrue,\n+                          T_BOOLEAN, to_vect_bt, $mem->opcode(),\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -1934,0 +1955,1 @@\n+<<<<<<< HEAD\n@@ -1986,0 +2008,7 @@\n+=======\n+    FloatRegister dst_reg = as_FloatRegister($dst$$reg);\n+    BasicType to_vect_bt = Matcher::vector_element_basic_type(this);\n+    Assembler::SIMD_RegVariant to_vect_variant = __ elemType_to_regVariant(to_vect_bt);\n+    loadStoreA_predicated(C2_MacroAssembler(&cbuf), false, dst_reg, ptrue,\n+                          T_BOOLEAN, to_vect_bt, $mem->opcode(),\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -2001,0 +2030,1 @@\n+<<<<<<< HEAD\n@@ -2006,0 +2036,7 @@\n+=======\n+    BasicType from_vect_bt = Matcher::vector_element_basic_type(this, $src);\n+    assert(type2aelembytes(from_vect_bt) == (int)$esize$$constant, \"unsupported type.\");\n+    Assembler::SIMD_RegVariant from_vect_variant = __ elemBytes_to_regVariant($esize$$constant);\n+    __ sve_neg(as_FloatRegister($tmp$$reg), from_vect_variant, ptrue,\n+               as_FloatRegister($src$$reg));\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -2023,0 +2060,1 @@\n+<<<<<<< HEAD\n@@ -2028,0 +2066,7 @@\n+=======\n+    BasicType from_vect_bt = Matcher::vector_element_basic_type(this, $src);\n+    assert(type2aelembytes(from_vect_bt) == (int)$esize$$constant, \"unsupported type.\");\n+    Assembler::SIMD_RegVariant from_vect_variant = __ elemBytes_to_regVariant($esize$$constant);\n+    __ sve_neg(as_FloatRegister($tmp$$reg), from_vect_variant, ptrue,\n+               as_FloatRegister($src$$reg));\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -2046,0 +2091,1 @@\n+<<<<<<< HEAD\n@@ -2055,0 +2101,14 @@\n+=======\n+    BasicType bt = Matcher::vector_element_basic_type(this, $src2);\n+    Assembler::SIMD_RegVariant variant = __ elemType_to_regVariant(bt);\n+    __ sve_uaddv(as_FloatRegister($vtmp$$reg), variant, ptrue, as_FloatRegister($src2$$reg));\n+    __ umov($dst$$Register, as_FloatRegister($vtmp$$reg), variant, 0);\n+    __ addw($dst$$Register, $dst$$Register, $src1$$Register);\n+    if (bt == T_BYTE) {\n+      __ sxtb($dst$$Register, $dst$$Register);\n+    } else if (bt == T_SHORT) {\n+      __ sxth($dst$$Register, $dst$$Register);\n+    } else {\n+      assert(bt == T_INT, \"unsupported type\");\n+    }\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -2092,0 +2152,1 @@\n+<<<<<<< HEAD\n@@ -2096,0 +2157,17 @@\n+=======\n+    BasicType bt = Matcher::vector_element_basic_type(this, $src2);\n+    Assembler::SIMD_RegVariant variant = __ elemType_to_regVariant(bt);\n+    __ sve_whilelo_zr_imm(as_PRegister($ptmp$$reg), variant,\n+                          Matcher::vector_length(this, $src2));\n+    __ sve_uaddv(as_FloatRegister($vtmp$$reg), variant,\n+                 as_PRegister($ptmp$$reg), as_FloatRegister($src2$$reg));\n+    __ umov($dst$$Register, as_FloatRegister($vtmp$$reg), variant, 0);\n+    __ addw($dst$$Register, $dst$$Register, $src1$$Register);\n+    if (bt == T_BYTE) {\n+      __ sxtb($dst$$Register, $dst$$Register);\n+    } else if (bt == T_SHORT) {\n+      __ sxth($dst$$Register, $dst$$Register);\n+    } else {\n+      assert(bt == T_INT, \"unsupported type\");\n+    }\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -2169,0 +2247,1 @@\n+<<<<<<< HEAD\n@@ -2202,0 +2281,5 @@\n+=======\n+    __ sve_whilelo_zr_imm(as_PRegister($ptmp$$reg), __ D,\n+                          Matcher::vector_length(this, $src2));\n+    __ sve_uaddv(as_FloatRegister($vtmp$$reg), __ D,\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -2314,0 +2398,1 @@\n+<<<<<<< HEAD\n@@ -2317,0 +2402,4 @@\n+=======\n+    __ sve_whilelo_zr_imm(as_PRegister($ptmp$$reg), __ S,\n+                          Matcher::vector_length(this, $src2));\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -2857,0 +2946,1 @@\n+<<<<<<< HEAD\n@@ -2861,0 +2951,6 @@\n+=======\n+    __ sve_whilelo_zr_imm(as_PRegister($ptmp$$reg), __ D,\n+                          Matcher::vector_length(this, $src2));\n+    __ sve_fadda(as_FloatRegister($src1_dst$$reg), __ D,\n+                 as_PRegister($ptmp$$reg), as_FloatRegister($src2$$reg));\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -2874,0 +2970,1 @@\n+<<<<<<< HEAD\n@@ -2876,0 +2973,14 @@\n+=======\n+    BasicType bt = Matcher::vector_element_basic_type(this, $src2);\n+    Assembler::SIMD_RegVariant variant = __ elemType_to_regVariant(bt);\n+    __ sve_andv(as_FloatRegister($vtmp$$reg), variant, ptrue, as_FloatRegister($src2$$reg));\n+    __ smov($dst$$Register, as_FloatRegister($vtmp$$reg), variant, 0);\n+    __ andw($dst$$Register, $dst$$Register, $src1$$Register);\n+    if (bt == T_BYTE) {\n+      __ sxtb($dst$$Register, $dst$$Register);\n+    } else if (bt == T_SHORT) {\n+      __ sxth($dst$$Register, $dst$$Register);\n+    } else {\n+      assert(bt == T_INT, \"unsupported type\");\n+    }\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -2890,0 +3001,1 @@\n+<<<<<<< HEAD\n@@ -2893,0 +3005,17 @@\n+=======\n+    BasicType bt = Matcher::vector_element_basic_type(this, $src2);\n+    Assembler::SIMD_RegVariant variant = __ elemType_to_regVariant(bt);\n+    __ sve_whilelo_zr_imm(as_PRegister($ptmp$$reg), variant,\n+                          Matcher::vector_length(this, $src2));\n+    __ sve_andv(as_FloatRegister($vtmp$$reg), variant,\n+                as_PRegister($ptmp$$reg), as_FloatRegister($src2$$reg));\n+    __ smov($dst$$Register, as_FloatRegister($vtmp$$reg), variant, 0);\n+    __ andw($dst$$Register, $dst$$Register, $src1$$Register);\n+    if (bt == T_BYTE) {\n+      __ sxtb($dst$$Register, $dst$$Register);\n+    } else if (bt == T_SHORT) {\n+      __ sxth($dst$$Register, $dst$$Register);\n+    } else {\n+      assert(bt == T_INT, \"unsupported type\");\n+    }\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -2922,0 +3051,1 @@\n+<<<<<<< HEAD\n@@ -2925,0 +3055,8 @@\n+=======\n+    __ sve_whilelo_zr_imm(as_PRegister($ptmp$$reg), __ D,\n+                          Matcher::vector_length(this, $src2));\n+    __ sve_andv(as_FloatRegister($vtmp$$reg), __ D,\n+                as_PRegister($ptmp$$reg), as_FloatRegister($src2$$reg));\n+    __ umov($dst$$Register, as_FloatRegister($vtmp$$reg), __ D, 0);\n+    __ andr($dst$$Register, $dst$$Register, $src1$$Register);\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -2942,0 +3080,1 @@\n+<<<<<<< HEAD\n@@ -2946,0 +3085,14 @@\n+=======\n+    BasicType bt = Matcher::vector_element_basic_type(this, $src2);\n+    Assembler::SIMD_RegVariant variant = __ elemType_to_regVariant(bt);\n+    __ sve_orv(as_FloatRegister($vtmp$$reg), variant, ptrue, as_FloatRegister($src2$$reg));\n+    __ smov($dst$$Register, as_FloatRegister($vtmp$$reg), variant, 0);\n+    __ orrw($dst$$Register, $dst$$Register, $src1$$Register);\n+    if (bt == T_BYTE) {\n+      __ sxtb($dst$$Register, $dst$$Register);\n+    } else if (bt == T_SHORT) {\n+      __ sxth($dst$$Register, $dst$$Register);\n+    } else {\n+      assert(bt == T_INT, \"unsupported type\");\n+    }\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -2960,0 +3113,1 @@\n+<<<<<<< HEAD\n@@ -2963,0 +3117,17 @@\n+=======\n+    BasicType bt = Matcher::vector_element_basic_type(this, $src2);\n+    Assembler::SIMD_RegVariant variant = __ elemType_to_regVariant(bt);\n+    __ sve_whilelo_zr_imm(as_PRegister($ptmp$$reg), variant,\n+                          Matcher::vector_length(this, $src2));\n+    __ sve_orv(as_FloatRegister($vtmp$$reg), variant,\n+               as_PRegister($ptmp$$reg), as_FloatRegister($src2$$reg));\n+    __ smov($dst$$Register, as_FloatRegister($vtmp$$reg), variant, 0);\n+    __ orrw($dst$$Register, $dst$$Register, $src1$$Register);\n+    if (bt == T_BYTE) {\n+      __ sxtb($dst$$Register, $dst$$Register);\n+    } else if (bt == T_SHORT) {\n+      __ sxth($dst$$Register, $dst$$Register);\n+    } else {\n+      assert(bt == T_INT, \"unsupported type\");\n+    }\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -3000,0 +3171,1 @@\n+<<<<<<< HEAD\n@@ -3006,0 +3178,8 @@\n+=======\n+    __ sve_whilelo_zr_imm(as_PRegister($ptmp$$reg), __ D,\n+                          Matcher::vector_length(this, $src2));\n+    __ sve_orv(as_FloatRegister($vtmp$$reg), __ D,\n+               as_PRegister($ptmp$$reg), as_FloatRegister($src2$$reg));\n+    __ umov($dst$$Register, as_FloatRegister($vtmp$$reg), __ D, 0);\n+    __ orr($dst$$Register, $dst$$Register, $src1$$Register);\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -3018,0 +3198,1 @@\n+<<<<<<< HEAD\n@@ -3020,0 +3201,14 @@\n+=======\n+    BasicType bt = Matcher::vector_element_basic_type(this, $src2);\n+    Assembler::SIMD_RegVariant variant = __ elemType_to_regVariant(bt);\n+    __ sve_eorv(as_FloatRegister($vtmp$$reg), variant, ptrue, as_FloatRegister($src2$$reg));\n+    __ smov($dst$$Register, as_FloatRegister($vtmp$$reg), variant, 0);\n+    __ eorw($dst$$Register, $dst$$Register, $src1$$Register);\n+    if (bt == T_BYTE) {\n+      __ sxtb($dst$$Register, $dst$$Register);\n+    } else if (bt == T_SHORT) {\n+      __ sxth($dst$$Register, $dst$$Register);\n+    } else {\n+      assert(bt == T_INT, \"unsupported type\");\n+    }\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -3032,0 +3227,1 @@\n+<<<<<<< HEAD\n@@ -3034,0 +3230,17 @@\n+=======\n+    BasicType bt = Matcher::vector_element_basic_type(this, $src2);\n+    Assembler::SIMD_RegVariant variant = __ elemType_to_regVariant(bt);\n+    __ sve_whilelo_zr_imm(as_PRegister($ptmp$$reg), variant,\n+                          Matcher::vector_length(this, $src2));\n+    __ sve_eorv(as_FloatRegister($vtmp$$reg), variant,\n+                as_PRegister($ptmp$$reg), as_FloatRegister($src2$$reg));\n+    __ smov($dst$$Register, as_FloatRegister($vtmp$$reg), variant, 0);\n+    __ eorw($dst$$Register, $dst$$Register, $src1$$Register);\n+    if (bt == T_BYTE) {\n+      __ sxtb($dst$$Register, $dst$$Register);\n+    } else if (bt == T_SHORT) {\n+      __ sxth($dst$$Register, $dst$$Register);\n+    } else {\n+      assert(bt == T_INT, \"unsupported type\");\n+    }\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -3068,0 +3281,1 @@\n+<<<<<<< HEAD\n@@ -3074,0 +3288,8 @@\n+=======\n+    __ sve_whilelo_zr_imm(as_PRegister($ptmp$$reg), __ D,\n+                          Matcher::vector_length(this, $src2));\n+    __ sve_eorv(as_FloatRegister($vtmp$$reg), __ D,\n+                as_PRegister($ptmp$$reg), as_FloatRegister($src2$$reg));\n+    __ umov($dst$$Register, as_FloatRegister($vtmp$$reg), __ D, 0);\n+    __ eor($dst$$Register, $dst$$Register, $src1$$Register);\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -3090,0 +3312,1 @@\n+<<<<<<< HEAD\n@@ -3094,0 +3317,8 @@\n+=======\n+    BasicType bt = Matcher::vector_element_basic_type(this, $src2);\n+    Assembler::SIMD_RegVariant variant = __ elemType_to_regVariant(bt);\n+    __ sve_smaxv(as_FloatRegister($vtmp$$reg), variant, ptrue, as_FloatRegister($src2$$reg));\n+    __ smov($dst$$Register, as_FloatRegister($vtmp$$reg), variant, 0);\n+    __ cmpw($dst$$Register, $src1$$Register);\n+    __ cselw(as_Register($dst$$reg), as_Register($dst$$reg), as_Register($src1$$reg), Assembler::GT);\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -3107,0 +3338,1 @@\n+<<<<<<< HEAD\n@@ -3110,0 +3342,11 @@\n+=======\n+    BasicType bt = Matcher::vector_element_basic_type(this, $src2);\n+    Assembler::SIMD_RegVariant variant = __ elemType_to_regVariant(bt);\n+    __ sve_whilelo_zr_imm(as_PRegister($ptmp$$reg), variant,\n+                          Matcher::vector_length(this, $src2));\n+    __ sve_smaxv(as_FloatRegister($vtmp$$reg), variant,\n+                 as_PRegister($ptmp$$reg), as_FloatRegister($src2$$reg));\n+    __ smov($dst$$Register, as_FloatRegister($vtmp$$reg), variant, 0);\n+    __ cmpw($dst$$Register, $src1$$Register);\n+    __ cselw(as_Register($dst$$reg), as_Register($dst$$reg), as_Register($src1$$reg), Assembler::GT);\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -3145,0 +3388,1 @@\n+<<<<<<< HEAD\n@@ -3149,0 +3393,9 @@\n+=======\n+    __ sve_whilelo_zr_imm(as_PRegister($ptmp$$reg), __ D,\n+                          Matcher::vector_length(this, $src2));\n+    __ sve_smaxv(as_FloatRegister($vtmp$$reg), __ D,\n+                 as_PRegister($ptmp$$reg), as_FloatRegister($src2$$reg));\n+    __ umov($dst$$Register, as_FloatRegister($vtmp$$reg), __ D, 0);\n+    __ cmp($dst$$Register, $src1$$Register);\n+    __ csel(as_Register($dst$$reg), as_Register($dst$$reg), as_Register($src1$$reg), Assembler::GT);\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -3178,0 +3431,1 @@\n+<<<<<<< HEAD\n@@ -3181,0 +3435,7 @@\n+=======\n+    __ sve_whilelo_zr_imm(as_PRegister($ptmp$$reg), __ S,\n+                          Matcher::vector_length(this, $src2));\n+    __ sve_fmaxv(as_FloatRegister($dst$$reg), __ S,\n+         as_PRegister($ptmp$$reg), as_FloatRegister($src2$$reg));\n+    __ fmaxs(as_FloatRegister($dst$$reg), as_FloatRegister($dst$$reg), as_FloatRegister($src1$$reg));\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -3210,0 +3471,1 @@\n+<<<<<<< HEAD\n@@ -3213,0 +3475,7 @@\n+=======\n+    __ sve_whilelo_zr_imm(as_PRegister($ptmp$$reg), __ D,\n+                          Matcher::vector_length(this, $src2));\n+    __ sve_fmaxv(as_FloatRegister($dst$$reg), __ D,\n+         as_PRegister($ptmp$$reg), as_FloatRegister($src2$$reg));\n+    __ fmaxd(as_FloatRegister($dst$$reg), as_FloatRegister($dst$$reg), as_FloatRegister($src1$$reg));\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -3230,0 +3499,1 @@\n+<<<<<<< HEAD\n@@ -3234,0 +3504,8 @@\n+=======\n+    BasicType bt = Matcher::vector_element_basic_type(this, $src2);\n+    Assembler::SIMD_RegVariant variant = __ elemType_to_regVariant(bt);\n+    __ sve_sminv(as_FloatRegister($vtmp$$reg), variant, ptrue, as_FloatRegister($src2$$reg));\n+    __ smov($dst$$Register, as_FloatRegister($vtmp$$reg), variant, 0);\n+    __ cmpw($dst$$Register, $src1$$Register);\n+    __ cselw(as_Register($dst$$reg), as_Register($dst$$reg), as_Register($src1$$reg), Assembler::LT);\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -3248,0 +3526,1 @@\n+<<<<<<< HEAD\n@@ -3251,0 +3530,11 @@\n+=======\n+    BasicType bt = Matcher::vector_element_basic_type(this, $src2);\n+    Assembler::SIMD_RegVariant variant = __ elemType_to_regVariant(bt);\n+    __ sve_whilelo_zr_imm(as_PRegister($ptmp$$reg), variant,\n+                          Matcher::vector_length(this, $src2));\n+    __ sve_sminv(as_FloatRegister($vtmp$$reg), variant,\n+                 as_PRegister($ptmp$$reg), as_FloatRegister($src2$$reg));\n+    __ smov($dst$$Register, as_FloatRegister($vtmp$$reg), variant, 0);\n+    __ cmpw($dst$$Register, $src1$$Register);\n+    __ cselw(as_Register($dst$$reg), as_Register($dst$$reg), as_Register($src1$$reg), Assembler::LT);\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -3288,0 +3578,1 @@\n+<<<<<<< HEAD\n@@ -3294,0 +3585,9 @@\n+=======\n+    __ sve_whilelo_zr_imm(as_PRegister($ptmp$$reg), __ D,\n+                          Matcher::vector_length(this, $src2));\n+    __ sve_sminv(as_FloatRegister($vtmp$$reg), __ D,\n+                 as_PRegister($ptmp$$reg), as_FloatRegister($src2$$reg));\n+    __ umov($dst$$Register, as_FloatRegister($vtmp$$reg), __ D, 0);\n+    __ cmp($dst$$Register, $src1$$Register);\n+    __ csel(as_Register($dst$$reg), as_Register($dst$$reg), as_Register($src1$$reg), Assembler::LT);\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -3320,0 +3620,1 @@\n+<<<<<<< HEAD\n@@ -3322,0 +3623,7 @@\n+=======\n+    __ sve_whilelo_zr_imm(as_PRegister($ptmp$$reg), __ S,\n+                          Matcher::vector_length(this, $src2));\n+    __ sve_fminv(as_FloatRegister($dst$$reg), __ S,\n+         as_PRegister($ptmp$$reg), as_FloatRegister($src2$$reg));\n+    __ fmins(as_FloatRegister($dst$$reg), as_FloatRegister($dst$$reg), as_FloatRegister($src1$$reg));\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -3356,0 +3664,1 @@\n+<<<<<<< HEAD\n@@ -3359,0 +3668,4 @@\n+=======\n+    __ sve_whilelo_zr_imm(as_PRegister($ptmp$$reg), __ D,\n+                          Matcher::vector_length(this, $src2));\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -5058,0 +5371,1 @@\n+<<<<<<< HEAD\n@@ -5060,0 +5374,7 @@\n+=======\n+    \/\/ \"src2\" is not used for sve.\n+    BasicType bt = Matcher::vector_element_basic_type(this, $src1);\n+    Assembler::SIMD_RegVariant size = __ elemType_to_regVariant(bt);\n+    __ sve_cmpeq(as_PRegister($pTmp$$reg), size, ptrue,\n+                 as_FloatRegister($src1$$reg), 0);\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -5077,0 +5398,1 @@\n+<<<<<<< HEAD\n@@ -5078,0 +5400,6 @@\n+=======\n+    BasicType bt = Matcher::vector_element_basic_type(this, $src1);\n+    Assembler::SIMD_RegVariant size = __ elemType_to_regVariant(bt);\n+    __ sve_cmpeq(as_PRegister($pTmp$$reg), size, ptrue,\n+                 as_FloatRegister($src1$$reg), -1);\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -5093,0 +5421,1 @@\n+<<<<<<< HEAD\n@@ -5098,0 +5427,9 @@\n+=======\n+    \/\/ \"src2\" is not used for sve.\n+    BasicType bt = Matcher::vector_element_basic_type(this, $src1);\n+    Assembler::SIMD_RegVariant size = __ elemType_to_regVariant(bt);\n+    __ sve_whilelo_zr_imm(as_PRegister($pTmp$$reg), size,\n+                          Matcher::vector_length(this, $src1));\n+    __ sve_cmpeq(as_PRegister($pTmp$$reg), size, as_PRegister($pTmp$$reg),\n+                 as_FloatRegister($src1$$reg), 0);\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -5113,0 +5451,1 @@\n+<<<<<<< HEAD\n@@ -5118,0 +5457,9 @@\n+=======\n+    \/\/ \"src2\" is not used for sve.\n+    BasicType bt = Matcher::vector_element_basic_type(this, $src1);\n+    Assembler::SIMD_RegVariant size = __ elemType_to_regVariant(bt);\n+    __ sve_whilelo_zr_imm(as_PRegister($pTmp$$reg), size,\n+                          Matcher::vector_length(this, $src1));\n+    __ sve_cmpeq(as_PRegister($pTmp$$reg), size, as_PRegister($pTmp$$reg),\n+                 as_FloatRegister($src1$$reg), -1);\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -5139,1 +5487,1 @@\n-    BasicType bt = vector_element_basic_type(this, $src);\n+    BasicType bt = Matcher::vector_element_basic_type(this, $src);\n@@ -5186,1 +5534,1 @@\n-    BasicType bt = vector_element_basic_type(this, $src);\n+    BasicType bt = Matcher::vector_element_basic_type(this, $src);\n@@ -5339,1 +5687,1 @@\n-    BasicType bt = vector_element_basic_type(this, $src);\n+    BasicType bt = Matcher::vector_element_basic_type(this, $src);\n@@ -5358,1 +5706,2 @@\n-    __ sve_ld1w_gather(as_FloatRegister($dst$$reg), ptrue, as_Register($mem$$base), as_FloatRegister($idx$$reg));\n+    __ sve_ld1w_gather(as_FloatRegister($dst$$reg), ptrue,\n+                       as_Register($mem$$base), as_FloatRegister($idx$$reg));\n@@ -5373,1 +5722,2 @@\n-    __ sve_ld1d_gather(as_FloatRegister($dst$$reg), ptrue, as_Register($mem$$base), as_FloatRegister($idx$$reg));\n+    __ sve_ld1d_gather(as_FloatRegister($dst$$reg), ptrue,\n+                       as_Register($mem$$base), as_FloatRegister($idx$$reg));\n@@ -5390,0 +5740,1 @@\n+<<<<<<< HEAD\n@@ -5392,0 +5743,6 @@\n+=======\n+    __ sve_whilelo_zr_imm(as_PRegister($pTmp$$reg), __ S,\n+                          Matcher::vector_length(this));\n+    __ sve_ld1w_gather(as_FloatRegister($dst$$reg), as_PRegister($pTmp$$reg),\n+                       as_Register($mem$$base), as_FloatRegister($idx$$reg));\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -5477,0 +5834,1 @@\n+<<<<<<< HEAD\n@@ -5482,0 +5840,6 @@\n+=======\n+    __ sve_whilelo_zr_imm(as_PRegister($pTmp$$reg), __ D,\n+                          Matcher::vector_length(this));\n+    __ sve_uunpklo(as_FloatRegister($idx$$reg), __ D, as_FloatRegister($idx$$reg));\n+    __ sve_ld1d_gather(as_FloatRegister($dst$$reg), as_PRegister($pTmp$$reg),\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -5498,1 +5862,2 @@\n-    __ sve_st1w_scatter(as_FloatRegister($src$$reg), ptrue, as_Register($mem$$base), as_FloatRegister($idx$$reg));\n+    __ sve_st1w_scatter(as_FloatRegister($src$$reg), ptrue,\n+                        as_Register($mem$$base), as_FloatRegister($idx$$reg));\n@@ -5513,1 +5878,2 @@\n-    __ sve_st1d_scatter(as_FloatRegister($src$$reg), ptrue, as_Register($mem$$base), as_FloatRegister($idx$$reg));\n+    __ sve_st1d_scatter(as_FloatRegister($src$$reg), ptrue,\n+                        as_Register($mem$$base), as_FloatRegister($idx$$reg));\n@@ -5530,0 +5896,1 @@\n+<<<<<<< HEAD\n@@ -5532,0 +5899,6 @@\n+=======\n+    __ sve_whilelo_zr_imm(as_PRegister($pTmp$$reg), __ S,\n+                          Matcher::vector_length(this, $src));\n+    __ sve_st1w_scatter(as_FloatRegister($src$$reg), as_PRegister($pTmp$$reg),\n+                        as_Register($mem$$base), as_FloatRegister($idx$$reg));\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -5579,0 +5952,1 @@\n+<<<<<<< HEAD\n@@ -5581,0 +5955,6 @@\n+=======\n+    __ sve_whilelo_zr_imm(as_PRegister($pTmp$$reg), __ D,\n+                          Matcher::vector_length(this, $src));\n+    __ sve_uunpklo(as_FloatRegister($idx$$reg), __ D, as_FloatRegister($idx$$reg));\n+    __ sve_st1d_scatter(as_FloatRegister($src$$reg), as_PRegister($pTmp$$reg),\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -5732,1 +6112,2 @@\n-    __ sve_whilelo_zr_imm(as_PRegister($ptmp$$reg), __ B, vector_length(this, $src));\n+    __ sve_whilelo_zr_imm(as_PRegister($ptmp$$reg), __ B,\n+                          Matcher::vector_length(this, $src));\n@@ -5747,1 +6128,2 @@\n-    __ sve_whilelo_zr_imm(as_PRegister($pgtmp$$reg), __ B, vector_length(this, $src));\n+    __ sve_whilelo_zr_imm(as_PRegister($pgtmp$$reg), __ B,\n+                          Matcher::vector_length(this, $src));\n@@ -5762,1 +6144,2 @@\n-    __ sve_whilelo_zr_imm(as_PRegister($ptmp$$reg), __ B, vector_length(this, $src));\n+    __ sve_whilelo_zr_imm(as_PRegister($ptmp$$reg), __ B,\n+                          Matcher::vector_length(this, $src));\n@@ -5782,0 +6165,1 @@\n+<<<<<<< HEAD\n@@ -5783,0 +6167,4 @@\n+=======\n+    __ sve_vmask_reduction(this->ideal_Opcode(), $dst$$Register, variant, as_FloatRegister($src$$reg),\n+                           ptrue, as_PRegister($ptmp$$reg), Matcher::vector_length(this, $src));\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -5798,0 +6186,1 @@\n+<<<<<<< HEAD\n@@ -5801,0 +6190,4 @@\n+=======\n+    __ sve_vmask_reduction(this->ideal_Opcode(), $dst$$Register, variant, as_FloatRegister($src$$reg),\n+                           ptrue, as_PRegister($ptmp$$reg), Matcher::vector_length(this, $src));\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -5816,0 +6209,1 @@\n+<<<<<<< HEAD\n@@ -5819,0 +6213,4 @@\n+=======\n+    __ sve_vmask_reduction(this->ideal_Opcode(), $dst$$Register, variant, as_FloatRegister($src$$reg),\n+                           ptrue, as_PRegister($ptmp$$reg), Matcher::vector_length(this, $src));\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -5835,0 +6233,1 @@\n+<<<<<<< HEAD\n@@ -5837,0 +6236,6 @@\n+=======\n+    __ sve_whilelo_zr_imm(as_PRegister($ptmp$$reg), variant,\n+                          Matcher::vector_length(this, $src));\n+    __ sve_vmask_reduction(this->ideal_Opcode(), $dst$$Register, variant, as_FloatRegister($src$$reg),\n+                           as_PRegister($ptmp$$reg), as_PRegister($ptmp$$reg), MaxVectorSize \/ size);\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -5853,0 +6258,1 @@\n+<<<<<<< HEAD\n@@ -5857,0 +6263,6 @@\n+=======\n+    __ sve_whilelo_zr_imm(as_PRegister($pgtmp$$reg), variant,\n+                          Matcher::vector_length(this, $src));\n+    __ sve_vmask_reduction(this->ideal_Opcode(), $dst$$Register, variant, as_FloatRegister($src$$reg),\n+                           as_PRegister($pgtmp$$reg), as_PRegister($ptmp$$reg), MaxVectorSize \/ size);\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -5873,0 +6285,1 @@\n+<<<<<<< HEAD\n@@ -5879,0 +6292,6 @@\n+=======\n+    __ sve_whilelo_zr_imm(as_PRegister($ptmp$$reg), variant,\n+                          Matcher::vector_length(this, $src));\n+    __ sve_vmask_reduction(this->ideal_Opcode(), $dst$$Register, variant, as_FloatRegister($src$$reg),\n+                           as_PRegister($ptmp$$reg), as_PRegister($ptmp$$reg), MaxVectorSize \/ size);\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve.ad","additions":451,"deletions":32,"binary":false,"changes":483,"status":"modified"},{"patch":"@@ -91,12 +91,0 @@\n-  static inline uint vector_length_in_bytes(const MachNode* n) {\n-    const TypeVect* vt = n->bottom_type()->is_vect();\n-    return vt->length_in_bytes();\n-  }\n-\n-  static inline uint vector_length_in_bytes(const MachNode* use, MachOper* opnd) {\n-    uint def_idx = use->operand_index(opnd);\n-    Node* def = use->in(def_idx);\n-    const TypeVect* vt = def->bottom_type()->is_vect();\n-    return vt->length_in_bytes();\n-  }\n-\n@@ -203,1 +191,1 @@\n-    BasicType bt = vector_element_basic_type(this);\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n@@ -219,1 +207,1 @@\n-    BasicType bt = vector_element_basic_type(this, $src);\n+    BasicType bt = Matcher::vector_element_basic_type(this, $src);\n@@ -262,2 +250,3 @@\n-    BasicType bt = vector_element_basic_type(this);\n-    __ sve_whilelo_zr_imm(as_PRegister($pTmp$$reg), __ elemType_to_regVariant(bt), vector_length(this));\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ sve_whilelo_zr_imm(as_PRegister($pTmp$$reg), __ elemType_to_regVariant(bt),\n+                          Matcher::vector_length(this));\n@@ -281,2 +270,3 @@\n-    BasicType bt = vector_element_basic_type(this, $src);\n-    __ sve_whilelo_zr_imm(as_PRegister($pTmp$$reg), __ elemType_to_regVariant(bt), vector_length(this, $src));\n+    BasicType bt = Matcher::vector_element_basic_type(this, $src);\n+    __ sve_whilelo_zr_imm(as_PRegister($pTmp$$reg), __ elemType_to_regVariant(bt),\n+                          Matcher::vector_length(this, $src));\n@@ -471,2 +461,2 @@\n-    uint length_in_bytes_src = vector_length_in_bytes(this, $src);\n-    uint length_in_bytes_dst = vector_length_in_bytes(this);\n+    uint length_in_bytes_src = Matcher::vector_length_in_bytes(this, $src);\n+    uint length_in_bytes_dst = Matcher::vector_length_in_bytes(this);\n@@ -754,1 +744,1 @@\n-    BasicType bt = vector_element_basic_type(this);\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n@@ -782,1 +772,1 @@\n-    BasicType bt = vector_element_basic_type(this);\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n@@ -1018,0 +1008,1 @@\n+<<<<<<< HEAD\n@@ -1020,0 +1011,4 @@\n+=======\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ sve_compare(as_PRegister($pTmp$$reg), bt, ptrue, as_FloatRegister($src1$$reg),\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -1032,0 +1027,1 @@\n+<<<<<<< HEAD\n@@ -1035,0 +1031,8 @@\n+=======\n+    Assembler::SIMD_RegVariant size =\n+      __ elemType_to_regVariant(Matcher::vector_element_basic_type(this));\n+    __ sve_cmpeq(as_PRegister($pTmp$$reg), size, ptrue,\n+                 as_FloatRegister($src3$$reg), -1);\n+    __ sve_sel(as_FloatRegister($dst$$reg), size, as_PRegister($pTmp$$reg),\n+               as_FloatRegister($src2$$reg), as_FloatRegister($src1$$reg));\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -1047,0 +1051,1 @@\n+<<<<<<< HEAD\n@@ -1051,0 +1056,8 @@\n+=======\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    __ sve_compare(as_PRegister($pTmp$$reg), bt, ptrue, as_FloatRegister($src3$$reg),\n+                   as_FloatRegister($src4$$reg), (int)$cond$$constant);\n+    __ sve_sel(as_FloatRegister($dst$$reg), __ elemType_to_regVariant(bt),\n+               as_PRegister($pTmp$$reg), as_FloatRegister($src2$$reg),\n+               as_FloatRegister($src1$$reg));\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -1194,0 +1207,1 @@\n+<<<<<<< HEAD\n@@ -1199,0 +1213,7 @@\n+=======\n+    FloatRegister dst_reg = as_FloatRegister($dst$$reg);\n+    BasicType to_vect_bt = Matcher::vector_element_basic_type(this);\n+    Assembler::SIMD_RegVariant to_vect_variant = __ elemType_to_regVariant(to_vect_bt);\n+    loadStoreA_predicated(C2_MacroAssembler(&cbuf), false, dst_reg, ptrue,\n+                          T_BOOLEAN, to_vect_bt, $mem->opcode(),\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -1221,0 +1242,1 @@\n+<<<<<<< HEAD\n@@ -1226,0 +1248,7 @@\n+=======\n+    BasicType from_vect_bt = Matcher::vector_element_basic_type(this, $src);\n+    assert(type2aelembytes(from_vect_bt) == (int)$esize$$constant, \"unsupported type.\");\n+    Assembler::SIMD_RegVariant from_vect_variant = __ elemBytes_to_regVariant($esize$$constant);\n+    __ sve_neg(as_FloatRegister($tmp$$reg), from_vect_variant, ptrue,\n+               as_FloatRegister($src$$reg));\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -1312,0 +1341,1 @@\n+<<<<<<< HEAD\n@@ -1316,0 +1346,14 @@\n+=======\n+    BasicType bt = Matcher::vector_element_basic_type(this, $src2);\n+    Assembler::SIMD_RegVariant variant = __ elemType_to_regVariant(bt);\n+    __ sve_uaddv(as_FloatRegister($vtmp$$reg), variant, ptrue, as_FloatRegister($src2$$reg));\n+    __ umov($dst$$Register, as_FloatRegister($vtmp$$reg), variant, 0);\n+    __ addw($dst$$Register, $dst$$Register, $src1$$Register);\n+    if (bt == T_BYTE) {\n+      __ sxtb($dst$$Register, $dst$$Register);\n+    } else if (bt == T_SHORT) {\n+      __ sxth($dst$$Register, $dst$$Register);\n+    } else {\n+      assert(bt == T_INT, \"unsupported type\");\n+    }\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -1359,1 +1403,1 @@\n-    BasicType bt = vector_element_basic_type(this, $src2);\n+    BasicType bt = Matcher::vector_element_basic_type(this, $src2);\n@@ -1361,0 +1405,1 @@\n+<<<<<<< HEAD\n@@ -1365,0 +1410,29 @@\n+=======\n+    __ sve_whilelo_zr_imm(as_PRegister($ptmp$$reg), variant,\n+                          Matcher::vector_length(this, $src2));\n+    __ sve_uaddv(as_FloatRegister($vtmp$$reg), variant,\n+                 as_PRegister($ptmp$$reg), as_FloatRegister($src2$$reg));\n+    __ umov($dst$$Register, as_FloatRegister($vtmp$$reg), variant, 0);\n+    __ addw($dst$$Register, $dst$$Register, $src1$$Register);\n+    if (bt == T_BYTE) {\n+      __ sxtb($dst$$Register, $dst$$Register);\n+    } else if (bt == T_SHORT) {\n+      __ sxth($dst$$Register, $dst$$Register);\n+    } else {\n+      assert(bt == T_INT, \"unsupported type\");\n+    }\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct reduce_addL(iRegLNoSp dst, iRegL src1, vReg src2, vRegD vtmp) %{\n+  predicate(UseSVE > 0 && n->in(2)->bottom_type()->is_vect()->length_in_bytes() == MaxVectorSize);\n+  match(Set dst (AddReductionVL src1 src2));\n+  effect(TEMP_DEF dst, TEMP vtmp);\n+  ins_cost(SVE_COST);\n+  format %{ \"sve_reduce_addL $dst, $src1, $src2\\t# addL reduction (sve)\" %}\n+  ins_encode %{\n+    __ sve_uaddv(as_FloatRegister($vtmp$$reg), __ D, ptrue, as_FloatRegister($src2$$reg));\n+    __ umov($dst$$Register, as_FloatRegister($vtmp$$reg), __ D, 0);\n+    __ add($dst$$Register, $dst$$Register, $src1$$Register);\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -1385,0 +1459,1 @@\n+<<<<<<< HEAD\n@@ -1389,0 +1464,8 @@\n+=======\n+    __ sve_whilelo_zr_imm(as_PRegister($ptmp$$reg), __ D,\n+                          Matcher::vector_length(this, $src2));\n+    __ sve_uaddv(as_FloatRegister($vtmp$$reg), __ D,\n+                 as_PRegister($ptmp$$reg), as_FloatRegister($src2$$reg));\n+    __ umov($dst$$Register, as_FloatRegister($vtmp$$reg), __ D, 0);\n+    __ add($dst$$Register, $dst$$Register, $src1$$Register);\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -1421,1 +1504,2 @@\n-    __ sve_whilelo_zr_imm(as_PRegister($ptmp$$reg), __ $4, vector_length(this, $src2));\n+    __ sve_whilelo_zr_imm(as_PRegister($ptmp$$reg), __ $4,\n+                          Matcher::vector_length(this, $src2));\n@@ -1428,0 +1512,1 @@\n+<<<<<<< HEAD\n@@ -1441,0 +1526,127 @@\n+=======\n+REDUCE_ADDF(reduce_addF, F, vRegF, S)\n+REDUCE_ADDF_PARTIAL(reduce_addF_partial, F, vRegF, S)\n+REDUCE_ADDF(reduce_addD, D, vRegD, D)\n+REDUCE_ADDF_PARTIAL(reduce_addD_partial, D, vRegD, D)\n+\n+\/\/ vector and reduction\n+\n+instruct reduce_andI(iRegINoSp dst, iRegIorL2I src1, vReg src2, vRegD vtmp) %{\n+  predicate(UseSVE > 0 && n->in(2)->bottom_type()->is_vect()->element_basic_type() != T_LONG &&\n+            n->in(2)->bottom_type()->is_vect()->length_in_bytes() == MaxVectorSize);\n+  match(Set dst (AndReductionV src1 src2));\n+  effect(TEMP_DEF dst, TEMP vtmp);\n+  ins_cost(SVE_COST);\n+  format %{ \"sve_reduce_andI $dst, $src1, $src2\\t# andB\/S\/I reduction (sve) (may extend)\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this, $src2);\n+    Assembler::SIMD_RegVariant variant = __ elemType_to_regVariant(bt);\n+    __ sve_andv(as_FloatRegister($vtmp$$reg), variant, ptrue, as_FloatRegister($src2$$reg));\n+    __ smov($dst$$Register, as_FloatRegister($vtmp$$reg), variant, 0);\n+    __ andw($dst$$Register, $dst$$Register, $src1$$Register);\n+    if (bt == T_BYTE) {\n+      __ sxtb($dst$$Register, $dst$$Register);\n+    } else if (bt == T_SHORT) {\n+      __ sxth($dst$$Register, $dst$$Register);\n+    } else {\n+      assert(bt == T_INT, \"unsupported type\");\n+    }\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct reduce_andI_partial(iRegINoSp dst, iRegIorL2I src1, vReg src2, vRegD vtmp,\n+                             pRegGov ptmp, rFlagsReg cr) %{\n+  predicate(UseSVE > 0 && n->in(2)->bottom_type()->is_vect()->element_basic_type() != T_LONG &&\n+            n->in(2)->bottom_type()->is_vect()->length_in_bytes() < MaxVectorSize);\n+  match(Set dst (AndReductionV src1 src2));\n+  effect(TEMP_DEF dst, TEMP vtmp, TEMP ptmp, KILL cr);\n+  ins_cost(SVE_COST);\n+  format %{ \"sve_reduce_andI $dst, $src1, $src2\\t# andI reduction partial (sve) (may extend)\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this, $src2);\n+    Assembler::SIMD_RegVariant variant = __ elemType_to_regVariant(bt);\n+    __ sve_whilelo_zr_imm(as_PRegister($ptmp$$reg), variant,\n+                          Matcher::vector_length(this, $src2));\n+    __ sve_andv(as_FloatRegister($vtmp$$reg), variant,\n+                as_PRegister($ptmp$$reg), as_FloatRegister($src2$$reg));\n+    __ smov($dst$$Register, as_FloatRegister($vtmp$$reg), variant, 0);\n+    __ andw($dst$$Register, $dst$$Register, $src1$$Register);\n+    if (bt == T_BYTE) {\n+      __ sxtb($dst$$Register, $dst$$Register);\n+    } else if (bt == T_SHORT) {\n+      __ sxth($dst$$Register, $dst$$Register);\n+    } else {\n+      assert(bt == T_INT, \"unsupported type\");\n+    }\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct reduce_andL(iRegLNoSp dst, iRegL src1, vReg src2, vRegD vtmp) %{\n+  predicate(UseSVE > 0 && n->in(2)->bottom_type()->is_vect()->element_basic_type() == T_LONG &&\n+            n->in(2)->bottom_type()->is_vect()->length_in_bytes() == MaxVectorSize);\n+  match(Set dst (AndReductionV src1 src2));\n+  effect(TEMP_DEF dst, TEMP vtmp);\n+  ins_cost(SVE_COST);\n+  format %{ \"sve_reduce_andL $dst, $src1, $src2\\t# andL reduction (sve)\" %}\n+  ins_encode %{\n+    __ sve_andv(as_FloatRegister($vtmp$$reg), __ D, ptrue, as_FloatRegister($src2$$reg));\n+    __ umov($dst$$Register, as_FloatRegister($vtmp$$reg), __ D, 0);\n+    __ andr($dst$$Register, $dst$$Register, $src1$$Register);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct reduce_andL_partial(iRegLNoSp dst, iRegL src1, vReg src2, vRegD vtmp,\n+                             pRegGov ptmp, rFlagsReg cr) %{\n+  predicate(UseSVE > 0 && n->in(2)->bottom_type()->is_vect()->element_basic_type() == T_LONG &&\n+            n->in(2)->bottom_type()->is_vect()->length_in_bytes() < MaxVectorSize);\n+  match(Set dst (AndReductionV src1 src2));\n+  effect(TEMP_DEF dst, TEMP vtmp, TEMP ptmp, KILL cr);\n+  ins_cost(SVE_COST);\n+  format %{ \"sve_reduce_andL $dst, $src1, $src2\\t# andL reduction partial (sve)\" %}\n+  ins_encode %{\n+    __ sve_whilelo_zr_imm(as_PRegister($ptmp$$reg), __ D,\n+                          Matcher::vector_length(this, $src2));\n+    __ sve_andv(as_FloatRegister($vtmp$$reg), __ D,\n+                as_PRegister($ptmp$$reg), as_FloatRegister($src2$$reg));\n+    __ umov($dst$$Register, as_FloatRegister($vtmp$$reg), __ D, 0);\n+    __ andr($dst$$Register, $dst$$Register, $src1$$Register);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\/\/ vector or reduction\n+\n+instruct reduce_orI(iRegINoSp dst, iRegIorL2I src1, vReg src2, vRegD vtmp) %{\n+  predicate(UseSVE > 0 && n->in(2)->bottom_type()->is_vect()->element_basic_type() != T_LONG &&\n+            n->in(2)->bottom_type()->is_vect()->length_in_bytes() == MaxVectorSize);\n+  match(Set dst (OrReductionV src1 src2));\n+  effect(TEMP_DEF dst, TEMP vtmp);\n+  ins_cost(SVE_COST);\n+  format %{ \"sve_reduce_orI $dst, $src1, $src2\\t# orB\/S\/I reduction (sve) (may extend)\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this, $src2);\n+    Assembler::SIMD_RegVariant variant = __ elemType_to_regVariant(bt);\n+    __ sve_orv(as_FloatRegister($vtmp$$reg), variant, ptrue, as_FloatRegister($src2$$reg));\n+    __ smov($dst$$Register, as_FloatRegister($vtmp$$reg), variant, 0);\n+    __ orrw($dst$$Register, $dst$$Register, $src1$$Register);\n+    if (bt == T_BYTE) {\n+      __ sxtb($dst$$Register, $dst$$Register);\n+    } else if (bt == T_SHORT) {\n+      __ sxth($dst$$Register, $dst$$Register);\n+    } else {\n+      assert(bt == T_INT, \"unsupported type\");\n+    }\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct reduce_orI_partial(iRegINoSp dst, iRegIorL2I src1, vReg src2, vRegD vtmp,\n+                             pRegGov ptmp, rFlagsReg cr) %{\n+  predicate(UseSVE > 0 && n->in(2)->bottom_type()->is_vect()->element_basic_type() != T_LONG &&\n+            n->in(2)->bottom_type()->is_vect()->length_in_bytes() < MaxVectorSize);\n+  match(Set dst (OrReductionV src1 src2));\n+  effect(TEMP_DEF dst, TEMP vtmp, TEMP ptmp, KILL cr);\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -1444,0 +1656,1 @@\n+<<<<<<< HEAD\n@@ -1448,0 +1661,17 @@\n+=======\n+    BasicType bt = Matcher::vector_element_basic_type(this, $src2);\n+    Assembler::SIMD_RegVariant variant = __ elemType_to_regVariant(bt);\n+    __ sve_whilelo_zr_imm(as_PRegister($ptmp$$reg), variant,\n+                          Matcher::vector_length(this, $src2));\n+    __ sve_orv(as_FloatRegister($vtmp$$reg), variant,\n+               as_PRegister($ptmp$$reg), as_FloatRegister($src2$$reg));\n+    __ smov($dst$$Register, as_FloatRegister($vtmp$$reg), variant, 0);\n+    __ orrw($dst$$Register, $dst$$Register, $src1$$Register);\n+    if (bt == T_BYTE) {\n+      __ sxtb($dst$$Register, $dst$$Register);\n+    } else if (bt == T_SHORT) {\n+      __ sxth($dst$$Register, $dst$$Register);\n+    } else {\n+      assert(bt == T_INT, \"unsupported type\");\n+    }\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -1487,0 +1717,1 @@\n+<<<<<<< HEAD\n@@ -1489,0 +1720,3 @@\n+=======\n+  ins_cost(SVE_COST);\n+  format %{ \"sve_reduce_orL $dst, $src1, $src2\\t# orL reduction partial (sve)\" %}\n@@ -1490,1 +1724,22 @@\n-    BasicType bt = vector_element_basic_type(this, $src2);\n+    __ sve_whilelo_zr_imm(as_PRegister($ptmp$$reg), __ D,\n+                          Matcher::vector_length(this, $src2));\n+    __ sve_orv(as_FloatRegister($vtmp$$reg), __ D,\n+               as_PRegister($ptmp$$reg), as_FloatRegister($src2$$reg));\n+    __ umov($dst$$Register, as_FloatRegister($vtmp$$reg), __ D, 0);\n+    __ orr($dst$$Register, $dst$$Register, $src1$$Register);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\/\/ vector xor reduction\n+\n+instruct reduce_eorI(iRegINoSp dst, iRegIorL2I src1, vReg src2, vRegD vtmp) %{\n+  predicate(UseSVE > 0 && n->in(2)->bottom_type()->is_vect()->element_basic_type() != T_LONG &&\n+            n->in(2)->bottom_type()->is_vect()->length_in_bytes() == MaxVectorSize);\n+  match(Set dst (XorReductionV src1 src2));\n+  effect(TEMP_DEF dst, TEMP vtmp);\n+  ins_cost(SVE_COST);\n+  format %{ \"sve_reduce_eorI $dst, $src1, $src2\\t# xorB\/H\/I reduction (sve) (may extend)\" %}\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this, $src2);\n@@ -1518,0 +1773,1 @@\n+<<<<<<< HEAD\n@@ -1524,0 +1780,17 @@\n+=======\n+    BasicType bt = Matcher::vector_element_basic_type(this, $src2);\n+    Assembler::SIMD_RegVariant variant = __ elemType_to_regVariant(bt);\n+    __ sve_whilelo_zr_imm(as_PRegister($ptmp$$reg), variant,\n+                          Matcher::vector_length(this, $src2));\n+    __ sve_eorv(as_FloatRegister($vtmp$$reg), variant,\n+                as_PRegister($ptmp$$reg), as_FloatRegister($src2$$reg));\n+    __ smov($dst$$Register, as_FloatRegister($vtmp$$reg), variant, 0);\n+    __ eorw($dst$$Register, $dst$$Register, $src1$$Register);\n+    if (bt == T_BYTE) {\n+      __ sxtb($dst$$Register, $dst$$Register);\n+    } else if (bt == T_SHORT) {\n+      __ sxth($dst$$Register, $dst$$Register);\n+    } else {\n+      assert(bt == T_INT, \"unsupported type\");\n+    }\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -1555,0 +1828,1 @@\n+<<<<<<< HEAD\n@@ -1560,0 +1834,8 @@\n+=======\n+    __ sve_whilelo_zr_imm(as_PRegister($ptmp$$reg), __ D,\n+                          Matcher::vector_length(this, $src2));\n+    __ sve_eorv(as_FloatRegister($vtmp$$reg), __ D,\n+                as_PRegister($ptmp$$reg), as_FloatRegister($src2$$reg));\n+    __ umov($dst$$Register, as_FloatRegister($vtmp$$reg), __ D, 0);\n+    __ eor($dst$$Register, $dst$$Register, $src1$$Register);\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -1635,0 +1917,1 @@\n+<<<<<<< HEAD\n@@ -1639,0 +1922,8 @@\n+=======\n+    BasicType bt = Matcher::vector_element_basic_type(this, $src2);\n+    Assembler::SIMD_RegVariant variant = __ elemType_to_regVariant(bt);\n+    __ sve_s$1v(as_FloatRegister($vtmp$$reg), variant, ptrue, as_FloatRegister($src2$$reg));\n+    __ smov($dst$$Register, as_FloatRegister($vtmp$$reg), variant, 0);\n+    __ cmpw($dst$$Register, $src1$$Register);\n+    __ cselw(as_Register($dst$$reg), as_Register($dst$$reg), as_Register($src1$$reg), Assembler::$3);\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -1676,1 +1967,1 @@\n-    BasicType bt = vector_element_basic_type(this, $src2);\n+    BasicType bt = Matcher::vector_element_basic_type(this, $src2);\n@@ -1678,0 +1969,1 @@\n+<<<<<<< HEAD\n@@ -1682,0 +1974,9 @@\n+=======\n+    __ sve_whilelo_zr_imm(as_PRegister($ptmp$$reg), variant,\n+                          Matcher::vector_length(this, $src2));\n+    __ sve_s$1v(as_FloatRegister($vtmp$$reg), variant,\n+                 as_PRegister($ptmp$$reg), as_FloatRegister($src2$$reg));\n+    __ smov($dst$$Register, as_FloatRegister($vtmp$$reg), variant, 0);\n+    __ cmpw($dst$$Register, $src1$$Register);\n+    __ cselw(as_Register($dst$$reg), as_Register($dst$$reg), as_Register($src1$$reg), Assembler::$3);\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -1788,0 +2089,1 @@\n+<<<<<<< HEAD\n@@ -1794,0 +2096,9 @@\n+=======\n+    __ sve_whilelo_zr_imm(as_PRegister($ptmp$$reg), __ D,\n+                          Matcher::vector_length(this, $src2));\n+    __ sve_s$1v(as_FloatRegister($vtmp$$reg), __ D,\n+                 as_PRegister($ptmp$$reg), as_FloatRegister($src2$$reg));\n+    __ umov($dst$$Register, as_FloatRegister($vtmp$$reg), __ D, 0);\n+    __ cmp($dst$$Register, $src1$$Register);\n+    __ csel(as_Register($dst$$reg), as_Register($dst$$reg), as_Register($src1$$reg), Assembler::$3);\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -1866,0 +2177,1 @@\n+<<<<<<< HEAD\n@@ -1869,0 +2181,4 @@\n+=======\n+    __ sve_whilelo_zr_imm(as_PRegister($ptmp$$reg), __ $4,\n+                          Matcher::vector_length(this, $src2));\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -2573,0 +2889,1 @@\n+<<<<<<< HEAD\n@@ -2575,0 +2892,7 @@\n+=======\n+    BasicType bt = Matcher::vector_element_basic_type(this, $src1);\n+    Assembler::SIMD_RegVariant size = __ elemType_to_regVariant(bt);\n+    __ sve_cmpeq(as_PRegister($pTmp$$reg), size, ptrue,\n+                 as_FloatRegister($src1$$reg), $3);\n+    __ csetw(as_Register($dst$$reg), Assembler::$4);\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -2593,0 +2917,1 @@\n+<<<<<<< HEAD\n@@ -2598,0 +2923,9 @@\n+=======\n+    \/\/ \"src2\" is not used for sve.\n+    BasicType bt = Matcher::vector_element_basic_type(this, $src1);\n+    Assembler::SIMD_RegVariant size = __ elemType_to_regVariant(bt);\n+    __ sve_whilelo_zr_imm(as_PRegister($pTmp$$reg), size,\n+                          Matcher::vector_length(this, $src1));\n+    __ sve_cmpeq(as_PRegister($pTmp$$reg), size, as_PRegister($pTmp$$reg),\n+                 as_FloatRegister($src1$$reg), $3);\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -2622,1 +2956,1 @@\n-    BasicType bt = vector_element_basic_type(this, $src);\n+    BasicType bt = Matcher::vector_element_basic_type(this, $src);\n@@ -2669,1 +3003,1 @@\n-    BasicType bt = vector_element_basic_type(this, $src);\n+    BasicType bt = Matcher::vector_element_basic_type(this, $src);\n@@ -2806,1 +3140,1 @@\n-    BasicType bt = vector_element_basic_type(this, $src);\n+    BasicType bt = Matcher::vector_element_basic_type(this, $src);\n@@ -2825,1 +3159,2 @@\n-    __ sve_ld1w_gather(as_FloatRegister($dst$$reg), ptrue, as_Register($mem$$base), as_FloatRegister($idx$$reg));\n+    __ sve_ld1w_gather(as_FloatRegister($dst$$reg), ptrue,\n+                       as_Register($mem$$base), as_FloatRegister($idx$$reg));\n@@ -2840,1 +3175,2 @@\n-    __ sve_ld1d_gather(as_FloatRegister($dst$$reg), ptrue, as_Register($mem$$base), as_FloatRegister($idx$$reg));\n+    __ sve_ld1d_gather(as_FloatRegister($dst$$reg), ptrue,\n+                       as_Register($mem$$base), as_FloatRegister($idx$$reg));\n@@ -2857,0 +3193,1 @@\n+<<<<<<< HEAD\n@@ -2859,0 +3196,6 @@\n+=======\n+    __ sve_whilelo_zr_imm(as_PRegister($pTmp$$reg), __ S,\n+                          Matcher::vector_length(this));\n+    __ sve_ld1w_gather(as_FloatRegister($dst$$reg), as_PRegister($pTmp$$reg),\n+                       as_Register($mem$$base), as_FloatRegister($idx$$reg));\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -2944,0 +3287,1 @@\n+<<<<<<< HEAD\n@@ -2949,0 +3293,6 @@\n+=======\n+    __ sve_whilelo_zr_imm(as_PRegister($pTmp$$reg), __ D,\n+                          Matcher::vector_length(this));\n+    __ sve_uunpklo(as_FloatRegister($idx$$reg), __ D, as_FloatRegister($idx$$reg));\n+    __ sve_ld1d_gather(as_FloatRegister($dst$$reg), as_PRegister($pTmp$$reg),\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -2965,1 +3315,2 @@\n-    __ sve_st1w_scatter(as_FloatRegister($src$$reg), ptrue, as_Register($mem$$base), as_FloatRegister($idx$$reg));\n+    __ sve_st1w_scatter(as_FloatRegister($src$$reg), ptrue,\n+                        as_Register($mem$$base), as_FloatRegister($idx$$reg));\n@@ -2980,1 +3331,2 @@\n-    __ sve_st1d_scatter(as_FloatRegister($src$$reg), ptrue, as_Register($mem$$base), as_FloatRegister($idx$$reg));\n+    __ sve_st1d_scatter(as_FloatRegister($src$$reg), ptrue,\n+                        as_Register($mem$$base), as_FloatRegister($idx$$reg));\n@@ -2997,0 +3349,1 @@\n+<<<<<<< HEAD\n@@ -2999,0 +3352,6 @@\n+=======\n+    __ sve_whilelo_zr_imm(as_PRegister($pTmp$$reg), __ S,\n+                          Matcher::vector_length(this, $src));\n+    __ sve_st1w_scatter(as_FloatRegister($src$$reg), as_PRegister($pTmp$$reg),\n+                        as_Register($mem$$base), as_FloatRegister($idx$$reg));\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -3046,0 +3405,1 @@\n+<<<<<<< HEAD\n@@ -3069,0 +3429,6 @@\n+=======\n+    __ sve_whilelo_zr_imm(as_PRegister($pTmp$$reg), __ D,\n+                          Matcher::vector_length(this, $src));\n+    __ sve_uunpklo(as_FloatRegister($idx$$reg), __ D, as_FloatRegister($idx$$reg));\n+    __ sve_st1d_scatter(as_FloatRegister($src$$reg), as_PRegister($pTmp$$reg),\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -3167,1 +3533,2 @@\n-    __ sve_whilelo_zr_imm(as_PRegister(ifelse($1, `firsttrue', `$pgtmp', `$ptmp')$$reg), __ B, vector_length(this, $src));\n+    __ sve_whilelo_zr_imm(as_PRegister(ifelse($1, `firsttrue', `$pgtmp', `$ptmp')$$reg), __ B,\n+                          Matcher::vector_length(this, $src));\n@@ -3192,0 +3559,1 @@\n+<<<<<<< HEAD\n@@ -3198,0 +3566,5 @@\n+=======\n+    Assembler::SIMD_RegVariant variant = __ elemBytes_to_regVariant(size);\n+    __ sve_vmask_reduction(this->ideal_Opcode(), $dst$$Register, variant, as_FloatRegister($src$$reg),\n+                           ptrue, as_PRegister($ptmp$$reg), Matcher::vector_length(this, $src));\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n@@ -3222,0 +3595,1 @@\n+<<<<<<< HEAD\n@@ -3234,0 +3608,6 @@\n+=======\n+    __ sve_whilelo_zr_imm(as_PRegister(ifelse($1, `firsttrue', `$pgtmp', `$ptmp')$$reg), variant,\n+                          Matcher::vector_length(this, $src));\n+    __ sve_vmask_reduction(this->ideal_Opcode(), $dst$$Register, variant, as_FloatRegister($src$$reg),\n+                           as_PRegister(ifelse($1, `firsttrue', `$pgtmp', `$ptmp')$$reg), as_PRegister($ptmp$$reg), MaxVectorSize \/ size);\n+>>>>>>> 3b21593199cbb11cb4019ef53c831fd087a0ba50\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve_ad.m4","additions":414,"deletions":34,"binary":false,"changes":448,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+#include \"compiler\/compileTask.hpp\"\n@@ -4181,62 +4182,0 @@\n-\/\/ Zero words; len is in bytes\n-\/\/ Destroys all registers except addr\n-\/\/ len must be a nonzero multiple of wordSize\n-void MacroAssembler::zero_memory(Register addr, Register len, Register t1) {\n-  assert_different_registers(addr, len, t1, rscratch1, rscratch2);\n-\n-#ifdef ASSERT\n-  { Label L;\n-    tst(len, BytesPerWord - 1);\n-    br(Assembler::EQ, L);\n-    stop(\"len is not a multiple of BytesPerWord\");\n-    bind(L);\n-  }\n-#endif\n-\n-#ifndef PRODUCT\n-  block_comment(\"zero memory\");\n-#endif\n-\n-  Label loop;\n-  Label entry;\n-\n-\/\/  Algorithm:\n-\/\/\n-\/\/    scratch1 = cnt & 7;\n-\/\/    cnt -= scratch1;\n-\/\/    p += scratch1;\n-\/\/    switch (scratch1) {\n-\/\/      do {\n-\/\/        cnt -= 8;\n-\/\/          p[-8] = 0;\n-\/\/        case 7:\n-\/\/          p[-7] = 0;\n-\/\/        case 6:\n-\/\/          p[-6] = 0;\n-\/\/          \/\/ ...\n-\/\/        case 1:\n-\/\/          p[-1] = 0;\n-\/\/        case 0:\n-\/\/          p += 8;\n-\/\/      } while (cnt);\n-\/\/    }\n-\n-  const int unroll = 8; \/\/ Number of str(zr) instructions we'll unroll\n-\n-  lsr(len, len, LogBytesPerWord);\n-  andr(rscratch1, len, unroll - 1);  \/\/ tmp1 = cnt % unroll\n-  sub(len, len, rscratch1);      \/\/ cnt -= unroll\n-  \/\/ t1 always points to the end of the region we're about to zero\n-  add(t1, addr, rscratch1, Assembler::LSL, LogBytesPerWord);\n-  adr(rscratch2, entry);\n-  sub(rscratch2, rscratch2, rscratch1, Assembler::LSL, 2);\n-  br(rscratch2);\n-  bind(loop);\n-  sub(len, len, unroll);\n-  for (int i = -unroll; i < 0; i++)\n-    Assembler::str(zr, Address(t1, i * wordSize));\n-  bind(entry);\n-  add(t1, t1, unroll * wordSize);\n-  cbnz(len, loop);\n-}\n-\n@@ -4761,4 +4700,5 @@\n-\/\/ zero_words() is used by C2 ClearArray patterns.  It is as small as\n-\/\/ possible, handling small word counts locally and delegating\n-\/\/ anything larger to the zero_blocks stub.  It is expanded many times\n-\/\/ in compiled code, so it is important to keep it short.\n+\/\/ zero_words() is used by C2 ClearArray patterns and by\n+\/\/ C1_MacroAssembler.  It is as small as possible, handling small word\n+\/\/ counts locally and delegating anything larger to the zero_blocks\n+\/\/ stub.  It is expanded many times in compiled code, so it is\n+\/\/ important to keep it short.\n@@ -4773,1 +4713,0 @@\n-  assert(ptr == r10 && cnt == r11, \"mismatch in register usage\");\n@@ -4776,1 +4715,5 @@\n-  cmp(cnt, (u1)zero_words_block_size);\n+  assert(ptr == r10 && cnt == r11, \"mismatch in register usage\");\n+  RuntimeAddress zero_blocks = RuntimeAddress(StubRoutines::aarch64::zero_blocks());\n+  assert(zero_blocks.target() != NULL, \"zero_blocks stub has not been generated\");\n+\n+  subs(rscratch1, cnt, zero_words_block_size);\n@@ -4782,1 +4725,9 @@\n-    if (StubRoutines::aarch64::complete()) {\n+    \/\/ Make sure this is a C2 compilation. C1 allocates space only for\n+    \/\/ trampoline stubs generated by Call LIR ops, and in any case it\n+    \/\/ makes sense for a C1 compilation task to proceed as quickly as\n+    \/\/ possible.\n+    CompileTask* task;\n+    if (StubRoutines::aarch64::complete()\n+        && Thread::current()->is_Compiler_thread()\n+        && (task = ciEnv::current()->task())\n+        && is_c2_compile(task->comp_level())) {\n@@ -4786,1 +4737,1 @@\n-        postcond(pc() == badAddress);\n+        assert(false, \"failed to allocate space for trampoline\");\n@@ -4790,1 +4741,1 @@\n-      bl(zero_blocks);\n+      far_call(zero_blocks);\n@@ -4794,0 +4745,3 @@\n+\n+  \/\/ We have a few words left to do. zero_blocks has adjusted r10 and r11\n+  \/\/ for us.\n@@ -4798,1 +4752,1 @@\n-      stp(zr, zr, post(ptr, 16));\n+      stp(zr, zr, post(ptr, 2 * BytesPerWord));\n@@ -4808,0 +4762,1 @@\n+\n@@ -4809,1 +4764,0 @@\n-  postcond(pc() != badAddress);\n@@ -4815,1 +4769,2 @@\n-#define SmallArraySize (18 * BytesPerLong)\n+\/\/\n+\/\/ r10, r11, rscratch1, and rscratch2 are clobbered.\n@@ -4818,5 +4773,31 @@\n-  BLOCK_COMMENT(\"zero_words {\");\n-  int i = cnt & 1;  \/\/ store any odd word to start\n-  if (i) str(zr, Address(base));\n-\n-  if (cnt <= SmallArraySize \/ BytesPerLong) {\n+  guarantee(zero_words_block_size < BlockZeroingLowLimit,\n+            \"increase BlockZeroingLowLimit\");\n+  if (cnt <= (uint64_t)BlockZeroingLowLimit \/ BytesPerWord) {\n+#ifndef PRODUCT\n+    {\n+      char buf[64];\n+      snprintf(buf, sizeof buf, \"zero_words (count = %\" PRIu64 \") {\", cnt);\n+      BLOCK_COMMENT(buf);\n+    }\n+#endif\n+    if (cnt >= 16) {\n+      uint64_t loops = cnt\/16;\n+      if (loops > 1) {\n+        mov(rscratch2, loops - 1);\n+      }\n+      {\n+        Label loop;\n+        bind(loop);\n+        for (int i = 0; i < 16; i += 2) {\n+          stp(zr, zr, Address(base, i * BytesPerWord));\n+        }\n+        add(base, base, 16 * BytesPerWord);\n+        if (loops > 1) {\n+          subs(rscratch2, rscratch2, 1);\n+          br(GE, loop);\n+        }\n+      }\n+    }\n+    cnt %= 16;\n+    int i = cnt & 1;  \/\/ store any odd word to start\n+    if (i) str(zr, Address(base));\n@@ -4826,0 +4807,1 @@\n+    BLOCK_COMMENT(\"} zero_words\");\n@@ -4827,19 +4809,2 @@\n-    const int unroll = 4; \/\/ Number of stp(zr, zr) instructions we'll unroll\n-    int remainder = cnt % (2 * unroll);\n-    for (; i < remainder; i += 2) {\n-      stp(zr, zr, Address(base, i * wordSize));\n-    }\n-    Label loop;\n-    Register cnt_reg = rscratch1;\n-    Register loop_base = rscratch2;\n-    cnt = cnt - remainder;\n-    mov(cnt_reg, cnt);\n-    \/\/ adjust base and prebias by -2 * wordSize so we can pre-increment\n-    add(loop_base, base, (remainder - 2) * wordSize);\n-    bind(loop);\n-    sub(cnt_reg, cnt_reg, 2 * unroll);\n-    for (i = 1; i < unroll; i++) {\n-      stp(zr, zr, Address(loop_base, 2 * i * wordSize));\n-    }\n-    stp(zr, zr, Address(pre(loop_base, 2 * unroll * wordSize)));\n-    cbnz(cnt_reg, loop);\n+    mov(r10, base); mov(r11, cnt);\n+    zero_words(r10, r11);\n@@ -4847,1 +4812,0 @@\n-  BLOCK_COMMENT(\"} zero_words\");\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":63,"deletions":99,"binary":false,"changes":162,"status":"modified"},{"patch":"@@ -897,1 +897,0 @@\n-  void zero_memory(Register addr, Register len, Register t1);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1219,33 +1219,0 @@\n-\n-inline uint vector_length(const Node* n) {\n-  const TypeVect* vt = n->bottom_type()->is_vect();\n-  return vt->length();\n-}\n-\n-inline uint vector_length(const MachNode* use, MachOper* opnd) {\n-  uint def_idx = use->operand_index(opnd);\n-  Node* def = use->in(def_idx);\n-  return def->bottom_type()->is_vect()->length();\n-}\n-\n-inline uint vector_length_in_bytes(const Node* n) {\n-  const TypeVect* vt = n->bottom_type()->is_vect();\n-  return vt->length_in_bytes();\n-}\n-\n-inline uint vector_length_in_bytes(const MachNode* use, MachOper* opnd) {\n-  uint def_idx = use->operand_index(opnd);\n-  Node* def = use->in(def_idx);\n-  return def->bottom_type()->is_vect()->length_in_bytes();\n-}\n-\n-inline BasicType vector_element_basic_type(const Node *n) {\n-  return n->bottom_type()->is_vect()->element_basic_type();\n-}\n-\n-inline BasicType vector_element_basic_type(const MachNode *use, MachOper* opnd) {\n-  uint def_idx = use->operand_index(opnd);\n-  Node* def = use->in(def_idx);\n-  return def->bottom_type()->is_vect()->element_basic_type();\n-}\n-\n@@ -1268,1 +1235,1 @@\n-  return vector_length_encoding(vector_length_in_bytes(n));\n+  return vector_length_encoding(Matcher::vector_length_in_bytes(n));\n@@ -1596,0 +1563,9 @@\n+    case Op_CopySignD:\n+    case Op_CopySignF:\n+      if (UseAVX < 3 || !is_LP64)  {\n+        return false;\n+      }\n+      if (!VM_Version::supports_avx512vl()) {\n+        return false;\n+      }\n+      break;\n@@ -1674,0 +1650,3 @@\n+      if (bt != T_INT && bt != T_LONG) {\n+        return false;\n+      } \/\/ fallthrough\n@@ -3341,1 +3320,1 @@\n-  predicate(vector_length_in_bytes(n) == vector_length_in_bytes(n->in(1))); \/\/ dst == src\n+  predicate(Matcher::vector_length_in_bytes(n) == Matcher::vector_length_in_bytes(n->in(1))); \/\/ dst == src\n@@ -3353,1 +3332,1 @@\n-            (vector_length_in_bytes(n->in(1)) < vector_length_in_bytes(n))); \/\/ src < dst\n+            (Matcher::vector_length_in_bytes(n->in(1)) < Matcher::vector_length_in_bytes(n))); \/\/ src < dst\n@@ -3359,2 +3338,2 @@\n-    assert(vector_length_in_bytes(this)       <= 16, \"required\");\n-    assert(vector_length_in_bytes(this, $src) <=  8, \"required\");\n+    assert(Matcher::vector_length_in_bytes(this)       <= 16, \"required\");\n+    assert(Matcher::vector_length_in_bytes(this, $src) <=  8, \"required\");\n@@ -3362,1 +3341,1 @@\n-    int src_vlen_in_bytes = vector_length_in_bytes(this, $src);\n+    int src_vlen_in_bytes = Matcher::vector_length_in_bytes(this, $src);\n@@ -3376,2 +3355,2 @@\n-            (vector_length_in_bytes(n->in(1)) == 4) && \/\/ src\n-            (vector_length_in_bytes(n->in(1)) < vector_length_in_bytes(n))); \/\/ src < dst\n+            (Matcher::vector_length_in_bytes(n->in(1)) == 4) && \/\/ src\n+            (Matcher::vector_length_in_bytes(n->in(1)) < Matcher::vector_length_in_bytes(n))); \/\/ src < dst\n@@ -3391,2 +3370,2 @@\n-            (vector_length_in_bytes(n->in(1)) > 4) && \/\/ src\n-            (vector_length_in_bytes(n->in(1)) < vector_length_in_bytes(n))); \/\/ src < dst\n+            (Matcher::vector_length_in_bytes(n->in(1)) > 4) && \/\/ src\n+            (Matcher::vector_length_in_bytes(n->in(1)) < Matcher::vector_length_in_bytes(n))); \/\/ src < dst\n@@ -3397,1 +3376,1 @@\n-    switch (vector_length_in_bytes(this, $src)) {\n+    switch (Matcher::vector_length_in_bytes(this, $src)) {\n@@ -3408,1 +3387,1 @@\n-  predicate(vector_length_in_bytes(n->in(1)) > vector_length_in_bytes(n)); \/\/ src > dst\n+  predicate(Matcher::vector_length_in_bytes(n->in(1)) > Matcher::vector_length_in_bytes(n)); \/\/ src > dst\n@@ -3413,1 +3392,1 @@\n-    switch (vector_length_in_bytes(this)) {\n+    switch (Matcher::vector_length_in_bytes(this)) {\n@@ -3462,1 +3441,1 @@\n-  predicate(vector_length(n) < 8);\n+  predicate(Matcher::vector_length(n) < 8);\n@@ -3474,1 +3453,1 @@\n-  predicate(vector_length(n) == 8);\n+  predicate(Matcher::vector_length(n) == 8);\n@@ -3485,1 +3464,1 @@\n-  predicate(vector_length(n) < 8);\n+  predicate(Matcher::vector_length(n) < 8);\n@@ -3497,1 +3476,1 @@\n-  predicate(vector_length(n) == 8);\n+  predicate(Matcher::vector_length(n) == 8);\n@@ -3575,1 +3554,1 @@\n-    switch (vector_length_in_bytes(this)) {\n+    switch (Matcher::vector_length_in_bytes(this)) {\n@@ -3593,1 +3572,1 @@\n-    switch (vector_length_in_bytes(this, $src)) {\n+    switch (Matcher::vector_length_in_bytes(this, $src)) {\n@@ -3610,1 +3589,1 @@\n-  predicate(vector_length_in_bytes(n) <= 32);\n+  predicate(Matcher::vector_length_in_bytes(n) <= 32);\n@@ -3618,1 +3597,1 @@\n-    BasicType elem_bt = vector_element_basic_type(this);\n+    BasicType elem_bt = Matcher::vector_element_basic_type(this);\n@@ -3620,1 +3599,1 @@\n-    assert(vector_length_in_bytes(this) >= 16, \"sanity\");\n+    assert(Matcher::vector_length_in_bytes(this) >= 16, \"sanity\");\n@@ -3635,1 +3614,1 @@\n-  predicate(vector_length_in_bytes(n) == 64);\n+  predicate(Matcher::vector_length_in_bytes(n) == 64);\n@@ -3643,1 +3622,1 @@\n-    BasicType elem_bt = vector_element_basic_type(this);\n+    BasicType elem_bt = Matcher::vector_element_basic_type(this);\n@@ -3665,1 +3644,1 @@\n-    BasicType elem_bt = vector_element_basic_type(this, $src);\n+    BasicType elem_bt = Matcher::vector_element_basic_type(this, $src);\n@@ -3667,1 +3646,1 @@\n-    assert(vector_length_in_bytes(this, $src) >= 16, \"sanity\");\n+    assert(Matcher::vector_length_in_bytes(this, $src) >= 16, \"sanity\");\n@@ -3684,1 +3663,1 @@\n-    uint vlen = vector_length(this);\n+    uint vlen = Matcher::vector_length(this);\n@@ -3724,1 +3703,1 @@\n-    uint vlen = vector_length(this);\n+    uint vlen = Matcher::vector_length(this);\n@@ -3749,1 +3728,1 @@\n-    uint vlen = vector_length(this);\n+    uint vlen = Matcher::vector_length(this);\n@@ -3767,1 +3746,1 @@\n-    uint vlen = vector_length(this);\n+    uint vlen = Matcher::vector_length(this);\n@@ -3806,1 +3785,1 @@\n-    uint vlen = vector_length(this);\n+    uint vlen = Matcher::vector_length(this);\n@@ -3830,1 +3809,1 @@\n-    uint vlen = vector_length(this);\n+    uint vlen = Matcher::vector_length(this);\n@@ -3847,1 +3826,1 @@\n-    uint vlen = vector_length(this);\n+    uint vlen = Matcher::vector_length(this);\n@@ -3871,1 +3850,1 @@\n-    uint vlen = vector_length(this);\n+    uint vlen = Matcher::vector_length(this);\n@@ -3888,1 +3867,1 @@\n-    uint vlen = vector_length(this);\n+    uint vlen = Matcher::vector_length(this);\n@@ -3910,1 +3889,1 @@\n-    uint vlen = vector_length(this);\n+    uint vlen = Matcher::vector_length(this);\n@@ -3943,1 +3922,1 @@\n-    uint vlen = vector_length(this);\n+    uint vlen = Matcher::vector_length(this);\n@@ -3967,1 +3946,1 @@\n-  predicate(vector_length(n) <= 4);\n+  predicate(Matcher::vector_length(n) <= 4);\n@@ -3972,1 +3951,1 @@\n-    uint vlen = vector_length(this);\n+    uint vlen = Matcher::vector_length(this);\n@@ -3996,1 +3975,1 @@\n-  predicate(vector_length(n) == 8);\n+  predicate(Matcher::vector_length(n) == 8);\n@@ -4024,1 +4003,1 @@\n-    uint vlen = vector_length(this);\n+    uint vlen = Matcher::vector_length(this);\n@@ -4042,1 +4021,1 @@\n-    uint vlen = vector_length(this);\n+    uint vlen = Matcher::vector_length(this);\n@@ -4061,1 +4040,1 @@\n-    int vlen = vector_length(this);\n+    int vlen = Matcher::vector_length(this);\n@@ -4090,1 +4069,1 @@\n-    uint vlen = vector_length(this);\n+    uint vlen = Matcher::vector_length(this);\n@@ -4109,1 +4088,1 @@\n-    uint vlen = vector_length(this);\n+    uint vlen = Matcher::vector_length(this);\n@@ -4126,1 +4105,1 @@\n-    uint vlen = vector_length(this);\n+    uint vlen = Matcher::vector_length(this);\n@@ -4144,1 +4123,1 @@\n-    uint vlen = vector_length(this);\n+    uint vlen = Matcher::vector_length(this);\n@@ -4163,1 +4142,1 @@\n-    uint vlen = vector_length(this);\n+    uint vlen = Matcher::vector_length(this);\n@@ -4180,1 +4159,1 @@\n-    uint vlen = vector_length(this);\n+    uint vlen = Matcher::vector_length(this);\n@@ -4194,1 +4173,1 @@\n-  predicate(vector_length_in_bytes(n) < 32);\n+  predicate(Matcher::vector_length_in_bytes(n) < 32);\n@@ -4199,1 +4178,1 @@\n-    assert(vector_length_in_bytes(this) >= 8, \"required\");\n+    assert(Matcher::vector_length_in_bytes(this) >= 8, \"required\");\n@@ -4201,1 +4180,1 @@\n-    BasicType elem_bt = vector_element_basic_type(this);\n+    BasicType elem_bt = Matcher::vector_element_basic_type(this);\n@@ -4204,1 +4183,1 @@\n-    assert($idx$$constant < (int)vector_length(this), \"out of bounds\");\n+    assert($idx$$constant < (int)Matcher::vector_length(this), \"out of bounds\");\n@@ -4212,1 +4191,1 @@\n-  predicate(vector_length_in_bytes(n) == 32);\n+  predicate(Matcher::vector_length_in_bytes(n) == 32);\n@@ -4218,1 +4197,1 @@\n-    BasicType elem_bt = vector_element_basic_type(this);\n+    BasicType elem_bt = Matcher::vector_element_basic_type(this);\n@@ -4223,1 +4202,1 @@\n-    assert($idx$$constant < (int)vector_length(this), \"out of bounds\");\n+    assert($idx$$constant < (int)Matcher::vector_length(this), \"out of bounds\");\n@@ -4235,1 +4214,1 @@\n-  predicate(vector_length_in_bytes(n) == 64);\n+  predicate(Matcher::vector_length_in_bytes(n) == 64);\n@@ -4242,1 +4221,1 @@\n-    BasicType elem_bt = vector_element_basic_type(this);\n+    BasicType elem_bt = Matcher::vector_element_basic_type(this);\n@@ -4247,1 +4226,1 @@\n-    assert($idx$$constant < (int)vector_length(this), \"out of bounds\");\n+    assert($idx$$constant < (int)Matcher::vector_length(this), \"out of bounds\");\n@@ -4260,1 +4239,1 @@\n-  predicate(vector_length(n) == 2);\n+  predicate(Matcher::vector_length(n) == 2);\n@@ -4265,2 +4244,2 @@\n-    assert(vector_element_basic_type(this) == T_LONG, \"\");\n-    assert($idx$$constant < (int)vector_length(this), \"out of bounds\");\n+    assert(Matcher::vector_element_basic_type(this) == T_LONG, \"\");\n+    assert($idx$$constant < (int)Matcher::vector_length(this), \"out of bounds\");\n@@ -4274,1 +4253,1 @@\n-  predicate(vector_length(n) == 4);\n+  predicate(Matcher::vector_length(n) == 4);\n@@ -4279,2 +4258,2 @@\n-    assert(vector_element_basic_type(this) == T_LONG, \"\");\n-    assert($idx$$constant < (int)vector_length(this), \"out of bounds\");\n+    assert(Matcher::vector_element_basic_type(this) == T_LONG, \"\");\n+    assert($idx$$constant < (int)Matcher::vector_length(this), \"out of bounds\");\n@@ -4293,1 +4272,1 @@\n-  predicate(vector_length(n) == 8);\n+  predicate(Matcher::vector_length(n) == 8);\n@@ -4298,2 +4277,2 @@\n-    assert(vector_element_basic_type(this) == T_LONG, \"sanity\");\n-    assert($idx$$constant < (int)vector_length(this), \"out of bounds\");\n+    assert(Matcher::vector_element_basic_type(this) == T_LONG, \"sanity\");\n+    assert($idx$$constant < (int)Matcher::vector_length(this), \"out of bounds\");\n@@ -4312,1 +4291,1 @@\n-  predicate(vector_length(n) < 8);\n+  predicate(Matcher::vector_length(n) < 8);\n@@ -4318,2 +4297,2 @@\n-    assert(vector_element_basic_type(this) == T_FLOAT, \"sanity\");\n-    assert($idx$$constant < (int)vector_length(this), \"out of bounds\");\n+    assert(Matcher::vector_element_basic_type(this) == T_FLOAT, \"sanity\");\n+    assert($idx$$constant < (int)Matcher::vector_length(this), \"out of bounds\");\n@@ -4327,1 +4306,1 @@\n-  predicate(vector_length(n) >= 8);\n+  predicate(Matcher::vector_length(n) >= 8);\n@@ -4332,2 +4311,2 @@\n-    assert(vector_element_basic_type(this) == T_FLOAT, \"sanity\");\n-    assert($idx$$constant < (int)vector_length(this), \"out of bounds\");\n+    assert(Matcher::vector_element_basic_type(this) == T_FLOAT, \"sanity\");\n+    assert($idx$$constant < (int)Matcher::vector_length(this), \"out of bounds\");\n@@ -4335,1 +4314,1 @@\n-    int vlen = vector_length(this);\n+    int vlen = Matcher::vector_length(this);\n@@ -4356,1 +4335,1 @@\n-  predicate(vector_length(n) == 2);\n+  predicate(Matcher::vector_length(n) == 2);\n@@ -4362,2 +4341,2 @@\n-    assert(vector_element_basic_type(this) == T_DOUBLE, \"sanity\");\n-    assert($idx$$constant < (int)vector_length(this), \"out of bounds\");\n+    assert(Matcher::vector_element_basic_type(this) == T_DOUBLE, \"sanity\");\n+    assert($idx$$constant < (int)Matcher::vector_length(this), \"out of bounds\");\n@@ -4372,1 +4351,1 @@\n-  predicate(vector_length(n) == 4);\n+  predicate(Matcher::vector_length(n) == 4);\n@@ -4377,2 +4356,2 @@\n-    assert(vector_element_basic_type(this) == T_DOUBLE, \"sanity\");\n-    assert($idx$$constant < (int)vector_length(this), \"out of bounds\");\n+    assert(Matcher::vector_element_basic_type(this) == T_DOUBLE, \"sanity\");\n+    assert($idx$$constant < (int)Matcher::vector_length(this), \"out of bounds\");\n@@ -4392,1 +4371,1 @@\n-  predicate(vector_length(n) == 8);\n+  predicate(Matcher::vector_length(n) == 8);\n@@ -4397,2 +4376,2 @@\n-    assert(vector_element_basic_type(this) == T_DOUBLE, \"sanity\");\n-    assert($idx$$constant < (int)vector_length(this), \"out of bounds\");\n+    assert(Matcher::vector_element_basic_type(this) == T_DOUBLE, \"sanity\");\n+    assert($idx$$constant < (int)Matcher::vector_length(this), \"out of bounds\");\n@@ -4416,1 +4395,1 @@\n-  predicate(vector_element_basic_type(n->in(2)) == T_INT); \/\/ src2\n+  predicate(Matcher::vector_element_basic_type(n->in(2)) == T_INT); \/\/ src2\n@@ -4428,1 +4407,1 @@\n-    int vlen = vector_length(this, $src2);\n+    int vlen = Matcher::vector_length(this, $src2);\n@@ -4438,1 +4417,1 @@\n-  predicate(vector_element_basic_type(n->in(2)) == T_LONG && !VM_Version::supports_avx512dq());\n+  predicate(Matcher::vector_element_basic_type(n->in(2)) == T_LONG && !VM_Version::supports_avx512dq());\n@@ -4450,1 +4429,1 @@\n-    int vlen = vector_length(this, $src2);\n+    int vlen = Matcher::vector_length(this, $src2);\n@@ -4457,1 +4436,1 @@\n-  predicate(vector_element_basic_type(n->in(2)) == T_LONG && VM_Version::supports_avx512dq());\n+  predicate(Matcher::vector_element_basic_type(n->in(2)) == T_LONG && VM_Version::supports_avx512dq());\n@@ -4469,1 +4448,1 @@\n-    int vlen = vector_length(this, $src2);\n+    int vlen = Matcher::vector_length(this, $src2);\n@@ -4479,1 +4458,1 @@\n-  predicate(vector_length(n->in(2)) <= 4); \/\/ src\n+  predicate(Matcher::vector_length(n->in(2)) <= 4); \/\/ src\n@@ -4486,1 +4465,1 @@\n-    int vlen = vector_length(this, $src);\n+    int vlen = Matcher::vector_length(this, $src);\n@@ -4493,1 +4472,1 @@\n-  predicate(vector_length(n->in(2)) == 8); \/\/ src\n+  predicate(Matcher::vector_length(n->in(2)) == 8); \/\/ src\n@@ -4500,1 +4479,1 @@\n-    int vlen = vector_length(this, $src);\n+    int vlen = Matcher::vector_length(this, $src);\n@@ -4507,1 +4486,1 @@\n-  predicate(vector_length(n->in(2)) == 16); \/\/ src\n+  predicate(Matcher::vector_length(n->in(2)) == 16); \/\/ src\n@@ -4514,1 +4493,1 @@\n-    int vlen = vector_length(this, $src);\n+    int vlen = Matcher::vector_length(this, $src);\n@@ -4523,1 +4502,1 @@\n-  predicate(vector_length(n->in(2)) == 2); \/\/ src\n+  predicate(Matcher::vector_length(n->in(2)) == 2); \/\/ src\n@@ -4530,1 +4509,1 @@\n-    int vlen = vector_length(this, $src);\n+    int vlen = Matcher::vector_length(this, $src);\n@@ -4537,1 +4516,1 @@\n-  predicate(vector_length(n->in(2)) == 4); \/\/ src\n+  predicate(Matcher::vector_length(n->in(2)) == 4); \/\/ src\n@@ -4544,1 +4523,1 @@\n-    int vlen = vector_length(this, $src);\n+    int vlen = Matcher::vector_length(this, $src);\n@@ -4551,1 +4530,1 @@\n-  predicate(vector_length(n->in(2)) == 8); \/\/ src\n+  predicate(Matcher::vector_length(n->in(2)) == 8); \/\/ src\n@@ -4558,1 +4537,1 @@\n-    int vlen = vector_length(this, $src);\n+    int vlen = Matcher::vector_length(this, $src);\n@@ -4568,1 +4547,1 @@\n-  predicate(vector_element_basic_type(n->in(2)) == T_BYTE && !VM_Version::supports_avx512bw());\n+  predicate(Matcher::vector_element_basic_type(n->in(2)) == T_BYTE && !VM_Version::supports_avx512bw());\n@@ -4579,1 +4558,1 @@\n-    int vlen = vector_length(this, $src2);\n+    int vlen = Matcher::vector_length(this, $src2);\n@@ -4586,1 +4565,1 @@\n-  predicate(vector_element_basic_type(n->in(2)) == T_BYTE && VM_Version::supports_avx512bw());\n+  predicate(Matcher::vector_element_basic_type(n->in(2)) == T_BYTE && VM_Version::supports_avx512bw());\n@@ -4597,1 +4576,1 @@\n-    int vlen = vector_length(this, $src2);\n+    int vlen = Matcher::vector_length(this, $src2);\n@@ -4607,1 +4586,1 @@\n-  predicate(vector_element_basic_type(n->in(2)) == T_SHORT); \/\/ src2\n+  predicate(Matcher::vector_element_basic_type(n->in(2)) == T_SHORT); \/\/ src2\n@@ -4619,1 +4598,1 @@\n-    int vlen = vector_length(this, $src2);\n+    int vlen = Matcher::vector_length(this, $src2);\n@@ -4628,2 +4607,2 @@\n-  predicate(vector_element_basic_type(n->in(2)) == T_BYTE &&\n-            vector_length(n->in(2)) <= 32); \/\/ src2\n+  predicate(Matcher::vector_element_basic_type(n->in(2)) == T_BYTE &&\n+            Matcher::vector_length(n->in(2)) <= 32); \/\/ src2\n@@ -4635,1 +4614,1 @@\n-    int vlen = vector_length(this, $src2);\n+    int vlen = Matcher::vector_length(this, $src2);\n@@ -4642,2 +4621,2 @@\n-  predicate(vector_element_basic_type(n->in(2)) == T_BYTE &&\n-            vector_length(n->in(2)) == 64); \/\/ src2\n+  predicate(Matcher::vector_element_basic_type(n->in(2)) == T_BYTE &&\n+            Matcher::vector_length(n->in(2)) == 64); \/\/ src2\n@@ -4649,1 +4628,1 @@\n-    int vlen = vector_length(this, $src2);\n+    int vlen = Matcher::vector_length(this, $src2);\n@@ -4659,1 +4638,1 @@\n-  predicate(vector_element_basic_type(n->in(2)) == T_FLOAT &&\n+  predicate(Matcher::vector_element_basic_type(n->in(2)) == T_FLOAT &&\n@@ -4662,1 +4641,1 @@\n-            vector_length(n->in(2)) == 2);\n+            Matcher::vector_length(n->in(2)) == 2);\n@@ -4671,1 +4650,1 @@\n-    int vlen = vector_length(this, $src2);\n+    int vlen = Matcher::vector_length(this, $src2);\n@@ -4680,1 +4659,1 @@\n-  predicate(vector_element_basic_type(n->in(2)) == T_FLOAT &&\n+  predicate(Matcher::vector_element_basic_type(n->in(2)) == T_FLOAT &&\n@@ -4683,1 +4662,1 @@\n-            vector_length(n->in(2)) >= 4);\n+            Matcher::vector_length(n->in(2)) >= 4);\n@@ -4692,1 +4671,1 @@\n-    int vlen = vector_length(this, $src2);\n+    int vlen = Matcher::vector_length(this, $src2);\n@@ -4701,2 +4680,2 @@\n-  predicate(vector_element_basic_type(n->in(2)) == T_FLOAT &&\n-            vector_length(n->in(2)) == 2);\n+  predicate(Matcher::vector_element_basic_type(n->in(2)) == T_FLOAT &&\n+            Matcher::vector_length(n->in(2)) == 2);\n@@ -4711,1 +4690,1 @@\n-    int vlen = vector_length(this, $src);\n+    int vlen = Matcher::vector_length(this, $src);\n@@ -4721,2 +4700,2 @@\n-  predicate(vector_element_basic_type(n->in(2)) == T_FLOAT &&\n-            vector_length(n->in(2)) >= 4);\n+  predicate(Matcher::vector_element_basic_type(n->in(2)) == T_FLOAT &&\n+            Matcher::vector_length(n->in(2)) >= 4);\n@@ -4731,1 +4710,1 @@\n-    int vlen = vector_length(this, $src);\n+    int vlen = Matcher::vector_length(this, $src);\n@@ -4743,1 +4722,1 @@\n-  predicate(vector_element_basic_type(n->in(2)) == T_DOUBLE &&\n+  predicate(Matcher::vector_element_basic_type(n->in(2)) == T_DOUBLE &&\n@@ -4746,1 +4725,1 @@\n-            vector_length(n->in(2)) == 2);\n+            Matcher::vector_length(n->in(2)) == 2);\n@@ -4755,1 +4734,1 @@\n-    int vlen = vector_length(this, $src2);\n+    int vlen = Matcher::vector_length(this, $src2);\n@@ -4765,1 +4744,1 @@\n-  predicate(vector_element_basic_type(n->in(2)) == T_DOUBLE &&\n+  predicate(Matcher::vector_element_basic_type(n->in(2)) == T_DOUBLE &&\n@@ -4768,1 +4747,1 @@\n-            vector_length(n->in(2)) >= 4);\n+            Matcher::vector_length(n->in(2)) >= 4);\n@@ -4777,1 +4756,1 @@\n-    int vlen = vector_length(this, $src2);\n+    int vlen = Matcher::vector_length(this, $src2);\n@@ -4788,2 +4767,2 @@\n-  predicate(vector_element_basic_type(n->in(2)) == T_DOUBLE &&\n-            vector_length(n->in(2)) == 2);\n+  predicate(Matcher::vector_element_basic_type(n->in(2)) == T_DOUBLE &&\n+            Matcher::vector_length(n->in(2)) == 2);\n@@ -4798,1 +4777,1 @@\n-    int vlen = vector_length(this, $src);\n+    int vlen = Matcher::vector_length(this, $src);\n@@ -4808,2 +4787,2 @@\n-  predicate(vector_element_basic_type(n->in(2)) == T_DOUBLE &&\n-            vector_length(n->in(2)) >= 4);\n+  predicate(Matcher::vector_element_basic_type(n->in(2)) == T_DOUBLE &&\n+            Matcher::vector_length(n->in(2)) >= 4);\n@@ -4818,1 +4797,1 @@\n-    int vlen = vector_length(this, $src);\n+    int vlen = Matcher::vector_length(this, $src);\n@@ -4853,1 +4832,1 @@\n-            (vector_length_in_bytes(n->in(1)) > 8));\n+            (Matcher::vector_length_in_bytes(n->in(1)) > 8));\n@@ -4887,1 +4866,1 @@\n-            (vector_length_in_bytes(n->in(1)) > 8));\n+            (Matcher::vector_length_in_bytes(n->in(1)) > 8));\n@@ -4922,1 +4901,1 @@\n-            (vector_length_in_bytes(n->in(1)) > 8));\n+            (Matcher::vector_length_in_bytes(n->in(1)) > 8));\n@@ -4956,1 +4935,1 @@\n-            (vector_length_in_bytes(n->in(1)) > 8));\n+            (Matcher::vector_length_in_bytes(n->in(1)) > 8));\n@@ -4990,1 +4969,1 @@\n-            (vector_length_in_bytes(n->in(1)) > 8));\n+            (Matcher::vector_length_in_bytes(n->in(1)) > 8));\n@@ -5024,1 +5003,1 @@\n-            (vector_length_in_bytes(n->in(1)) > 8));\n+            (Matcher::vector_length_in_bytes(n->in(1)) > 8));\n@@ -5060,1 +5039,1 @@\n-            (vector_length_in_bytes(n->in(1)) > 8));\n+            (Matcher::vector_length_in_bytes(n->in(1)) > 8));\n@@ -5095,1 +5074,1 @@\n-            (vector_length_in_bytes(n->in(1)) > 8));\n+            (Matcher::vector_length_in_bytes(n->in(1)) > 8));\n@@ -5129,1 +5108,1 @@\n-            (vector_length_in_bytes(n->in(1)) > 8));\n+            (Matcher::vector_length_in_bytes(n->in(1)) > 8));\n@@ -5164,1 +5143,1 @@\n-            (vector_length_in_bytes(n->in(1)) > 8));\n+            (Matcher::vector_length_in_bytes(n->in(1)) > 8));\n@@ -5198,1 +5177,1 @@\n-            (vector_length_in_bytes(n->in(1)) > 8));\n+            (Matcher::vector_length_in_bytes(n->in(1)) > 8));\n@@ -5232,1 +5211,1 @@\n-            (vector_length_in_bytes(n->in(1)) > 8));\n+            (Matcher::vector_length_in_bytes(n->in(1)) > 8));\n@@ -5246,2 +5225,2 @@\n-  predicate(vector_length(n) == 4 ||\n-            vector_length(n) == 8);\n+  predicate(Matcher::vector_length(n) == 4 ||\n+            Matcher::vector_length(n) == 8);\n@@ -5264,1 +5243,1 @@\n-  predicate(vector_length(n) == 16 && UseAVX <= 1);\n+  predicate(Matcher::vector_length(n) == 16 && UseAVX <= 1);\n@@ -5287,1 +5266,1 @@\n-  predicate(vector_length(n) == 16 && UseAVX > 1);\n+  predicate(Matcher::vector_length(n) == 16 && UseAVX > 1);\n@@ -5305,1 +5284,1 @@\n-  predicate(vector_length(n) == 32);\n+  predicate(Matcher::vector_length(n) == 32);\n@@ -5331,1 +5310,1 @@\n-  predicate(vector_length(n) == 64);\n+  predicate(Matcher::vector_length(n) == 64);\n@@ -5381,1 +5360,1 @@\n-            (vector_length_in_bytes(n->in(1)) > 8));\n+            (Matcher::vector_length_in_bytes(n->in(1)) > 8));\n@@ -5416,1 +5395,1 @@\n-            (vector_length_in_bytes(n->in(1)) > 8));\n+            (Matcher::vector_length_in_bytes(n->in(1)) > 8));\n@@ -5441,1 +5420,1 @@\n-              (vector_length_in_bytes(n->in(1)) > 8));\n+              (Matcher::vector_length_in_bytes(n->in(1)) > 8));\n@@ -5453,1 +5432,1 @@\n-  predicate(vector_length(n) == 2 && !VM_Version::supports_avx512dq());\n+  predicate(Matcher::vector_length(n) == 2 && !VM_Version::supports_avx512dq());\n@@ -5479,1 +5458,1 @@\n-  predicate(vector_length(n) == 4 && !VM_Version::supports_avx512dq());\n+  predicate(Matcher::vector_length(n) == 4 && !VM_Version::supports_avx512dq());\n@@ -5527,1 +5506,1 @@\n-            (vector_length_in_bytes(n->in(1)) > 8));\n+            (Matcher::vector_length_in_bytes(n->in(1)) > 8));\n@@ -5561,1 +5540,1 @@\n-            (vector_length_in_bytes(n->in(1)) > 8));\n+            (Matcher::vector_length_in_bytes(n->in(1)) > 8));\n@@ -5572,1 +5551,1 @@\n-  predicate(vector_length(n) == 8);\n+  predicate(Matcher::vector_length(n) == 8);\n@@ -5590,1 +5569,1 @@\n-  predicate(vector_length(n) == 4);\n+  predicate(Matcher::vector_length(n) == 4);\n@@ -5633,1 +5612,1 @@\n-            (vector_length_in_bytes(n->in(1)) > 8));\n+            (Matcher::vector_length_in_bytes(n->in(1)) > 8));\n@@ -5667,1 +5646,1 @@\n-            (vector_length_in_bytes(n->in(1)) > 8));\n+            (Matcher::vector_length_in_bytes(n->in(1)) > 8));\n@@ -5681,1 +5660,1 @@\n-  predicate(is_integral_type(vector_element_basic_type(n)) && vector_element_basic_type(n) != T_LONG && \/\/ T_BYTE, T_SHORT, T_INT\n+  predicate(is_integral_type(Matcher::vector_element_basic_type(n)) && Matcher::vector_element_basic_type(n) != T_LONG && \/\/ T_BYTE, T_SHORT, T_INT\n@@ -5690,1 +5669,1 @@\n-    BasicType elem_bt = vector_element_basic_type(this);\n+    BasicType elem_bt = Matcher::vector_element_basic_type(this);\n@@ -5697,1 +5676,1 @@\n-  predicate(is_integral_type(vector_element_basic_type(n)) && vector_element_basic_type(n) != T_LONG && \/\/ T_BYTE, T_SHORT, T_INT\n+  predicate(is_integral_type(Matcher::vector_element_basic_type(n)) && Matcher::vector_element_basic_type(n) != T_LONG && \/\/ T_BYTE, T_SHORT, T_INT\n@@ -5705,1 +5684,1 @@\n-    BasicType elem_bt = vector_element_basic_type(this);\n+    BasicType elem_bt = Matcher::vector_element_basic_type(this);\n@@ -5714,1 +5693,1 @@\n-  predicate(vector_length_in_bytes(n) == 16 && vector_element_basic_type(n) == T_LONG &&\n+  predicate(Matcher::vector_length_in_bytes(n) == 16 && Matcher::vector_element_basic_type(n) == T_LONG &&\n@@ -5724,1 +5703,1 @@\n-    BasicType elem_bt = vector_element_basic_type(this);\n+    BasicType elem_bt = Matcher::vector_element_basic_type(this);\n@@ -5733,1 +5712,1 @@\n-  predicate(vector_length_in_bytes(n) <= 32 && vector_element_basic_type(n) == T_LONG &&\n+  predicate(Matcher::vector_length_in_bytes(n) <= 32 && Matcher::vector_element_basic_type(n) == T_LONG &&\n@@ -5742,1 +5721,1 @@\n-    BasicType elem_bt = vector_element_basic_type(this);\n+    BasicType elem_bt = Matcher::vector_element_basic_type(this);\n@@ -5751,2 +5730,2 @@\n-  predicate((vector_length_in_bytes(n) == 64 || VM_Version::supports_avx512vl()) &&\n-            vector_element_basic_type(n) == T_LONG);\n+  predicate((Matcher::vector_length_in_bytes(n) == 64 || VM_Version::supports_avx512vl()) &&\n+            Matcher::vector_element_basic_type(n) == T_LONG);\n@@ -5761,1 +5740,1 @@\n-    BasicType elem_bt = vector_element_basic_type(this);\n+    BasicType elem_bt = Matcher::vector_element_basic_type(this);\n@@ -5771,2 +5750,2 @@\n-  predicate(vector_length_in_bytes(n) <= 32 &&\n-            is_floating_point_type(vector_element_basic_type(n)) && \/\/ T_FLOAT, T_DOUBLE\n+  predicate(Matcher::vector_length_in_bytes(n) <= 32 &&\n+            is_floating_point_type(Matcher::vector_element_basic_type(n)) && \/\/ T_FLOAT, T_DOUBLE\n@@ -5783,1 +5762,1 @@\n-    BasicType elem_bt = vector_element_basic_type(this);\n+    BasicType elem_bt = Matcher::vector_element_basic_type(this);\n@@ -5793,2 +5772,2 @@\n-  predicate(vector_length_in_bytes(n) == 64 &&\n-            is_floating_point_type(vector_element_basic_type(n))); \/\/ T_FLOAT, T_DOUBLE\n+  predicate(Matcher::vector_length_in_bytes(n) == 64 &&\n+            is_floating_point_type(Matcher::vector_element_basic_type(n))); \/\/ T_FLOAT, T_DOUBLE\n@@ -5804,1 +5783,1 @@\n-    BasicType elem_bt = vector_element_basic_type(this);\n+    BasicType elem_bt = Matcher::vector_element_basic_type(this);\n@@ -5813,1 +5792,1 @@\n-\/\/ --------------------------------- Signum ---------------------------\n+\/\/ --------------------------------- Signum\/CopySign ---------------------------\n@@ -5837,0 +5816,47 @@\n+\/\/ ---------------------------------------\n+\/\/ For copySign use 0xE4 as writemask for vpternlog\n+\/\/ Desired Truth Table: A -> xmm0 bit, B -> xmm1 bit, C -> xmm2 bit\n+\/\/ C (xmm2) is set to 0x7FFFFFFF\n+\/\/ Wherever xmm2 is 0, we want to pick from B (sign)\n+\/\/ Wherever xmm2 is 1, we want to pick from A (src)\n+\/\/\n+\/\/ A B C Result\n+\/\/ 0 0 0 0\n+\/\/ 0 0 1 0\n+\/\/ 0 1 0 1\n+\/\/ 0 1 1 0\n+\/\/ 1 0 0 0\n+\/\/ 1 0 1 1\n+\/\/ 1 1 0 1\n+\/\/ 1 1 1 1\n+\/\/\n+\/\/ Result going from high bit to low bit is 0x11100100 = 0xe4\n+\/\/ ---------------------------------------\n+\n+#ifdef _LP64\n+instruct copySignF_reg(regF dst, regF src, regF tmp1, rRegI tmp2) %{\n+  match(Set dst (CopySignF dst src));\n+  effect(TEMP tmp1, TEMP tmp2);\n+  format %{ \"CopySignF $dst, $src\\t! using $tmp1 and $tmp2 as TEMP\" %}\n+  ins_encode %{\n+    __ movl($tmp2$$Register, 0x7FFFFFFF);\n+    __ movdl($tmp1$$XMMRegister, $tmp2$$Register);\n+    __ vpternlogd($dst$$XMMRegister, 0xE4, $src$$XMMRegister, $tmp1$$XMMRegister, Assembler::AVX_128bit);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n+instruct copySignD_imm(regD dst, regD src, regD tmp1, rRegL tmp2, immD zero) %{\n+  match(Set dst (CopySignD dst (Binary src zero)));\n+  ins_cost(100);\n+  effect(TEMP tmp1, TEMP tmp2);\n+  format %{ \"CopySignD  $dst, $src\\t! using $tmp1 and $tmp2 as TEMP\" %}\n+  ins_encode %{\n+    __ mov64($tmp2$$Register, 0x7FFFFFFFFFFFFFFF);\n+    __ movq($tmp1$$XMMRegister, $tmp2$$Register);\n+    __ vpternlogq($dst$$XMMRegister, 0xE4, $src$$XMMRegister, $tmp1$$XMMRegister, Assembler::AVX_128bit);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+#endif \/\/ _LP64\n+\n@@ -5851,1 +5877,1 @@\n-  predicate(vector_length_in_bytes(n->in(1)) > 8);\n+  predicate(Matcher::vector_length_in_bytes(n->in(1)) > 8);\n@@ -5875,1 +5901,1 @@\n-  predicate(vector_length_in_bytes(n->in(1)) > 8);\n+  predicate(Matcher::vector_length_in_bytes(n->in(1)) > 8);\n@@ -5902,1 +5928,1 @@\n-  predicate(vector_length(n) <= 8 && VectorNode::is_vshift_cnt(n->in(2)));\n+  predicate(Matcher::vector_length(n) <= 8 && VectorNode::is_vshift_cnt(n->in(2)));\n@@ -5922,1 +5948,1 @@\n-  predicate(vector_length(n) == 16 && VectorNode::is_vshift_cnt(n->in(2)) &&\n+  predicate(Matcher::vector_length(n) == 16 && VectorNode::is_vshift_cnt(n->in(2)) &&\n@@ -5947,1 +5973,1 @@\n-  predicate(vector_length(n) == 16 && VectorNode::is_vshift_cnt(n->in(2)) &&\n+  predicate(Matcher::vector_length(n) == 16 && VectorNode::is_vshift_cnt(n->in(2)) &&\n@@ -5968,1 +5994,1 @@\n-  predicate(vector_length(n) == 32 && VectorNode::is_vshift_cnt(n->in(2)));\n+  predicate(Matcher::vector_length(n) == 32 && VectorNode::is_vshift_cnt(n->in(2)));\n@@ -5993,1 +6019,1 @@\n-  predicate(vector_length(n) == 64 && VectorNode::is_vshift_cnt(n->in(2)));\n+  predicate(Matcher::vector_length(n) == 64 && VectorNode::is_vshift_cnt(n->in(2)));\n@@ -6038,1 +6064,1 @@\n-      int vlen = vector_length(this);\n+      int vlen = Matcher::vector_length(this);\n@@ -6069,1 +6095,1 @@\n-      int vlen = vector_length(this);\n+      int vlen = Matcher::vector_length(this);\n@@ -6095,1 +6121,1 @@\n-      int vlen = vector_length(this);\n+      int vlen = Matcher::vector_length(this);\n@@ -6122,1 +6148,1 @@\n-      assert(vector_length(this) == 2, \"\");\n+      assert(Matcher::vector_length(this) == 2, \"\");\n@@ -6141,1 +6167,1 @@\n-      assert(vector_length(this) == 2, \"\");\n+      assert(Matcher::vector_length(this) == 2, \"\");\n@@ -6157,1 +6183,1 @@\n-    uint vlen = vector_length(this);\n+    uint vlen = Matcher::vector_length(this);\n@@ -6194,1 +6220,1 @@\n-  predicate(vector_length(n) <= 8 &&\n+  predicate(Matcher::vector_length(n) <= 8 &&\n@@ -6214,1 +6240,1 @@\n-  predicate(vector_length(n) == 16 &&\n+  predicate(Matcher::vector_length(n) == 16 &&\n@@ -6242,1 +6268,1 @@\n-  predicate(vector_length(n) == 32 &&\n+  predicate(Matcher::vector_length(n) == 32 &&\n@@ -6278,1 +6304,1 @@\n-  predicate(vector_length(n) <= 32 &&\n+  predicate(Matcher::vector_length(n) <= 32 &&\n@@ -6297,1 +6323,1 @@\n-  predicate(vector_length(n) == 64 &&\n+  predicate(Matcher::vector_length(n) == 64 &&\n@@ -6321,1 +6347,1 @@\n-  predicate(vector_length(n) <= 8 &&\n+  predicate(Matcher::vector_length(n) <= 8 &&\n@@ -6346,1 +6372,1 @@\n-  predicate(vector_length(n) == 16 &&\n+  predicate(Matcher::vector_length(n) == 16 &&\n@@ -6436,1 +6462,1 @@\n-  predicate(vector_length(n) <= 4 &&\n+  predicate(Matcher::vector_length(n) <= 4 &&\n@@ -6489,1 +6515,1 @@\n-            (vector_length_in_bytes(n->in(1)) > 8));\n+            (Matcher::vector_length_in_bytes(n->in(1)) > 8));\n@@ -6524,1 +6550,1 @@\n-            (vector_length_in_bytes(n->in(1)) > 8));\n+            (Matcher::vector_length_in_bytes(n->in(1)) > 8));\n@@ -6559,1 +6585,1 @@\n-            (vector_length_in_bytes(n->in(1)) > 8));\n+            (Matcher::vector_length_in_bytes(n->in(1)) > 8));\n@@ -6577,1 +6603,1 @@\n-    BasicType to_elem_bt = vector_element_basic_type(this);\n+    BasicType to_elem_bt = Matcher::vector_element_basic_type(this);\n@@ -6606,2 +6632,2 @@\n-            vector_length(n->in(1)) <= 8 && \/\/ src\n-            vector_element_basic_type(n) == T_BYTE);\n+            Matcher::vector_length(n->in(1)) <= 8 && \/\/ src\n+            Matcher::vector_element_basic_type(n) == T_BYTE);\n@@ -6622,2 +6648,2 @@\n-            vector_length(n->in(1)) == 16 && \/\/ src\n-            vector_element_basic_type(n) == T_BYTE);\n+            Matcher::vector_length(n->in(1)) == 16 && \/\/ src\n+            Matcher::vector_element_basic_type(n) == T_BYTE);\n@@ -6630,1 +6656,1 @@\n-    int vlen_enc = vector_length_encoding(vector_length_in_bytes(this, $src));\n+    int vlen_enc = vector_length_encoding(Matcher::vector_length_in_bytes(this, $src));\n@@ -6640,1 +6666,1 @@\n-            (vector_length_in_bytes(n) >= vector_length_in_bytes(n->in(1)))); \/\/ dst >= src\n+            (Matcher::vector_length_in_bytes(n) >= Matcher::vector_length_in_bytes(n->in(1)))); \/\/ dst >= src\n@@ -6644,1 +6670,1 @@\n-    BasicType to_elem_bt = vector_element_basic_type(this);\n+    BasicType to_elem_bt = Matcher::vector_element_basic_type(this);\n@@ -6677,2 +6703,2 @@\n-            (vector_length_in_bytes(n->in(1)) <= 16) &&\n-            (vector_length_in_bytes(n) < vector_length_in_bytes(n->in(1)))); \/\/ dst < src\n+            (Matcher::vector_length_in_bytes(n->in(1)) <= 16) &&\n+            (Matcher::vector_length_in_bytes(n) < Matcher::vector_length_in_bytes(n->in(1)))); \/\/ dst < src\n@@ -6685,1 +6711,1 @@\n-    BasicType to_elem_bt = vector_element_basic_type(this);\n+    BasicType to_elem_bt = Matcher::vector_element_basic_type(this);\n@@ -6703,2 +6729,2 @@\n-            (vector_length_in_bytes(n->in(1)) == 32) &&\n-            (vector_length_in_bytes(n) < vector_length_in_bytes(n->in(1)))); \/\/ dst < src\n+            (Matcher::vector_length_in_bytes(n->in(1)) == 32) &&\n+            (Matcher::vector_length_in_bytes(n) < Matcher::vector_length_in_bytes(n->in(1)))); \/\/ dst < src\n@@ -6711,1 +6737,1 @@\n-    BasicType to_elem_bt = vector_element_basic_type(this);\n+    BasicType to_elem_bt = Matcher::vector_element_basic_type(this);\n@@ -6731,1 +6757,1 @@\n-            (vector_length_in_bytes(n) >= vector_length_in_bytes(n->in(1)))); \/\/ dst >= src\n+            (Matcher::vector_length_in_bytes(n) >= Matcher::vector_length_in_bytes(n->in(1)))); \/\/ dst >= src\n@@ -6737,1 +6763,1 @@\n-    BasicType dst_elem_bt = vector_element_basic_type(this);\n+    BasicType dst_elem_bt = Matcher::vector_element_basic_type(this);\n@@ -6770,1 +6796,1 @@\n-  predicate((vector_element_basic_type(n) == T_BYTE || vector_element_basic_type(n) == T_SHORT) &&\n+  predicate((Matcher::vector_element_basic_type(n) == T_BYTE || Matcher::vector_element_basic_type(n) == T_SHORT) &&\n@@ -6778,2 +6804,2 @@\n-    int vlen = vector_length_in_bytes(this, $src);\n-    BasicType to_elem_bt  = vector_element_basic_type(this);\n+    int vlen = Matcher::vector_length_in_bytes(this, $src);\n+    BasicType to_elem_bt  = Matcher::vector_element_basic_type(this);\n@@ -6802,3 +6828,3 @@\n-            (vector_element_basic_type(n) == T_INT ||\n-             vector_element_basic_type(n) == T_FLOAT ||\n-             vector_element_basic_type(n) == T_DOUBLE));\n+            (Matcher::vector_element_basic_type(n) == T_INT ||\n+             Matcher::vector_element_basic_type(n) == T_FLOAT ||\n+             Matcher::vector_element_basic_type(n) == T_DOUBLE));\n@@ -6808,2 +6834,2 @@\n-    BasicType to_elem_bt = vector_element_basic_type(this);\n-    int vlen = vector_length_in_bytes(this, $src);\n+    BasicType to_elem_bt = Matcher::vector_element_basic_type(this);\n+    int vlen = Matcher::vector_length_in_bytes(this, $src);\n@@ -6861,1 +6887,1 @@\n-  predicate(vector_element_basic_type(n) == T_DOUBLE);\n+  predicate(Matcher::vector_element_basic_type(n) == T_DOUBLE);\n@@ -6872,1 +6898,1 @@\n-  predicate(vector_element_basic_type(n) == T_FLOAT);\n+  predicate(Matcher::vector_element_basic_type(n) == T_FLOAT);\n@@ -6885,3 +6911,3 @@\n-  predicate(vector_length_in_bytes(n->in(1)->in(1)) >=  8 && \/\/ src1\n-            vector_length_in_bytes(n->in(1)->in(1)) <= 32 && \/\/ src1\n-            is_floating_point_type(vector_element_basic_type(n->in(1)->in(1)))); \/\/ src1 T_FLOAT, T_DOUBLE\n+  predicate(Matcher::vector_length_in_bytes(n->in(1)->in(1)) >=  8 && \/\/ src1\n+            Matcher::vector_length_in_bytes(n->in(1)->in(1)) <= 32 && \/\/ src1\n+            is_floating_point_type(Matcher::vector_element_basic_type(n->in(1)->in(1)))); \/\/ src1 T_FLOAT, T_DOUBLE\n@@ -6893,1 +6919,1 @@\n-    if (vector_element_basic_type(this, $src1) == T_FLOAT) {\n+    if (Matcher::vector_element_basic_type(this, $src1) == T_FLOAT) {\n@@ -6903,2 +6929,2 @@\n-  predicate(vector_length_in_bytes(n->in(1)->in(1)) == 64 && \/\/ src1\n-            is_floating_point_type(vector_element_basic_type(n->in(1)->in(1)))); \/\/ src1 T_FLOAT, T_DOUBLE\n+  predicate(Matcher::vector_length_in_bytes(n->in(1)->in(1)) == 64 && \/\/ src1\n+            is_floating_point_type(Matcher::vector_element_basic_type(n->in(1)->in(1)))); \/\/ src1 T_FLOAT, T_DOUBLE\n@@ -6912,1 +6938,1 @@\n-    if (vector_element_basic_type(this, $src1) == T_FLOAT) {\n+    if (Matcher::vector_element_basic_type(this, $src1) == T_FLOAT) {\n@@ -6926,3 +6952,3 @@\n-            vector_length_in_bytes(n->in(1)->in(1)) >=  4 && \/\/ src1\n-            vector_length_in_bytes(n->in(1)->in(1)) <= 32 && \/\/ src1\n-            is_integral_type(vector_element_basic_type(n->in(1)->in(1)))); \/\/ src1\n+            Matcher::vector_length_in_bytes(n->in(1)->in(1)) >=  4 && \/\/ src1\n+            Matcher::vector_length_in_bytes(n->in(1)->in(1)) <= 32 && \/\/ src1\n+            is_integral_type(Matcher::vector_element_basic_type(n->in(1)->in(1)))); \/\/ src1\n@@ -6935,1 +6961,1 @@\n-    Assembler::Width ww = widthForType(vector_element_basic_type(this, $src1));\n+    Assembler::Width ww = widthForType(Matcher::vector_element_basic_type(this, $src1));\n@@ -6944,3 +6970,3 @@\n-            vector_length_in_bytes(n->in(1)->in(1)) >=  8 && \/\/ src1\n-            vector_length_in_bytes(n->in(1)->in(1)) <= 16 && \/\/ src1\n-            is_integral_type(vector_element_basic_type(n->in(1)->in(1)))); \/\/ src1\n+            Matcher::vector_length_in_bytes(n->in(1)->in(1)) >=  8 && \/\/ src1\n+            Matcher::vector_length_in_bytes(n->in(1)->in(1)) <= 16 && \/\/ src1\n+            is_integral_type(Matcher::vector_element_basic_type(n->in(1)->in(1)))); \/\/ src1\n@@ -6951,1 +6977,1 @@\n-    int vlen = vector_length_in_bytes(this, $src1);\n+    int vlen = Matcher::vector_length_in_bytes(this, $src1);\n@@ -6953,1 +6979,1 @@\n-    BasicType bt = vector_element_basic_type(this, $src1);\n+    BasicType bt = Matcher::vector_element_basic_type(this, $src1);\n@@ -6963,2 +6989,2 @@\n-            vector_length_in_bytes(n->in(1)->in(1)) == 32 && \/\/ src1\n-            is_integral_type(vector_element_basic_type(n->in(1)->in(1)))); \/\/ src1\n+            Matcher::vector_length_in_bytes(n->in(1)->in(1)) == 32 && \/\/ src1\n+            is_integral_type(Matcher::vector_element_basic_type(n->in(1)->in(1)))); \/\/ src1\n@@ -6969,1 +6995,1 @@\n-    int vlen = vector_length_in_bytes(this, $src1);\n+    int vlen = Matcher::vector_length_in_bytes(this, $src1);\n@@ -6971,1 +6997,1 @@\n-    BasicType bt = vector_element_basic_type(this, $src1);\n+    BasicType bt = Matcher::vector_element_basic_type(this, $src1);\n@@ -6981,2 +7007,2 @@\n-             vector_length_in_bytes(n->in(1)->in(1)) == 64) && \/\/ src1\n-             is_integral_type(vector_element_basic_type(n->in(1)->in(1)))); \/\/ src1\n+             Matcher::vector_length_in_bytes(n->in(1)->in(1)) == 64) && \/\/ src1\n+             is_integral_type(Matcher::vector_element_basic_type(n->in(1)->in(1)))); \/\/ src1\n@@ -6994,1 +7020,1 @@\n-    BasicType src1_elem_bt = vector_element_basic_type(this, $src1);\n+    BasicType src1_elem_bt = Matcher::vector_element_basic_type(this, $src1);\n@@ -7027,1 +7053,1 @@\n-  predicate(vector_length_in_bytes(n->in(1)) <= 16); \/\/ src\n+  predicate(Matcher::vector_length_in_bytes(n->in(1)) <= 16); \/\/ src\n@@ -7035,1 +7061,1 @@\n-    assert($idx$$constant < (int)vector_length(this, $src), \"out of bounds\");\n+    assert($idx$$constant < (int)Matcher::vector_length(this, $src), \"out of bounds\");\n@@ -7037,1 +7063,1 @@\n-    BasicType elem_bt = vector_element_basic_type(this, $src);\n+    BasicType elem_bt = Matcher::vector_element_basic_type(this, $src);\n@@ -7044,2 +7070,2 @@\n-  predicate(vector_length_in_bytes(n->in(1)) == 32 || \/\/ src\n-            vector_length_in_bytes(n->in(1)) == 64);  \/\/ src\n+  predicate(Matcher::vector_length_in_bytes(n->in(1)) == 32 || \/\/ src\n+            Matcher::vector_length_in_bytes(n->in(1)) == 64);  \/\/ src\n@@ -7054,1 +7080,1 @@\n-    assert($idx$$constant < (int)vector_length(this, $src), \"out of bounds\");\n+    assert($idx$$constant < (int)Matcher::vector_length(this, $src), \"out of bounds\");\n@@ -7056,1 +7082,1 @@\n-    BasicType elem_bt = vector_element_basic_type(this, $src);\n+    BasicType elem_bt = Matcher::vector_element_basic_type(this, $src);\n@@ -7065,1 +7091,1 @@\n-  predicate(vector_length(n->in(1)) <= 2); \/\/ src\n+  predicate(Matcher::vector_length(n->in(1)) <= 2); \/\/ src\n@@ -7070,1 +7096,1 @@\n-    assert($idx$$constant < (int)vector_length(this, $src), \"out of bounds\");\n+    assert($idx$$constant < (int)Matcher::vector_length(this, $src), \"out of bounds\");\n@@ -7078,2 +7104,2 @@\n-  predicate(vector_length(n->in(1)) == 4 || \/\/ src\n-            vector_length(n->in(1)) == 8);  \/\/ src\n+  predicate(Matcher::vector_length(n->in(1)) == 4 || \/\/ src\n+            Matcher::vector_length(n->in(1)) == 8);  \/\/ src\n@@ -7084,1 +7110,1 @@\n-    assert($idx$$constant < (int)vector_length(this, $src), \"out of bounds\");\n+    assert($idx$$constant < (int)Matcher::vector_length(this, $src), \"out of bounds\");\n@@ -7094,1 +7120,1 @@\n-  predicate(vector_length(n->in(1)) <= 4);\n+  predicate(Matcher::vector_length(n->in(1)) <= 4);\n@@ -7099,1 +7125,1 @@\n-    assert($idx$$constant < (int)vector_length(this, $src), \"out of bounds\");\n+    assert($idx$$constant < (int)Matcher::vector_length(this, $src), \"out of bounds\");\n@@ -7107,2 +7133,2 @@\n-  predicate(vector_length(n->in(1)\/*src*\/) == 8 ||\n-            vector_length(n->in(1)\/*src*\/) == 16);\n+  predicate(Matcher::vector_length(n->in(1)\/*src*\/) == 8 ||\n+            Matcher::vector_length(n->in(1)\/*src*\/) == 16);\n@@ -7113,1 +7139,1 @@\n-    assert($idx$$constant < (int)vector_length(this, $src), \"out of bounds\");\n+    assert($idx$$constant < (int)Matcher::vector_length(this, $src), \"out of bounds\");\n@@ -7122,1 +7148,1 @@\n-  predicate(vector_length(n->in(1)) == 2); \/\/ src\n+  predicate(Matcher::vector_length(n->in(1)) == 2); \/\/ src\n@@ -7126,1 +7152,1 @@\n-    assert($idx$$constant < (int)vector_length(this, $src), \"out of bounds\");\n+    assert($idx$$constant < (int)Matcher::vector_length(this, $src), \"out of bounds\");\n@@ -7134,2 +7160,2 @@\n-  predicate(vector_length(n->in(1)) == 4 || \/\/ src\n-            vector_length(n->in(1)) == 8);  \/\/ src\n+  predicate(Matcher::vector_length(n->in(1)) == 4 || \/\/ src\n+            Matcher::vector_length(n->in(1)) == 8);  \/\/ src\n@@ -7140,1 +7166,1 @@\n-    assert($idx$$constant < (int)vector_length(this, $src), \"out of bounds\");\n+    assert($idx$$constant < (int)Matcher::vector_length(this, $src), \"out of bounds\");\n@@ -7168,2 +7194,2 @@\n-            vector_length_in_bytes(n) <= 32 &&\n-            is_integral_type(vector_element_basic_type(n)));\n+            Matcher::vector_length_in_bytes(n) <= 32 &&\n+            is_integral_type(Matcher::vector_element_basic_type(n)));\n@@ -7181,2 +7207,2 @@\n-            vector_length_in_bytes(n) <= 32 &&\n-            !is_integral_type(vector_element_basic_type(n)));\n+            Matcher::vector_length_in_bytes(n) <= 32 &&\n+            !is_integral_type(Matcher::vector_element_basic_type(n)));\n@@ -7193,1 +7219,1 @@\n-  predicate(vector_length_in_bytes(n) == 64);\n+  predicate(Matcher::vector_length_in_bytes(n) == 64);\n@@ -7199,1 +7225,1 @@\n-     BasicType elem_bt = vector_element_basic_type(this);\n+     BasicType elem_bt = Matcher::vector_element_basic_type(this);\n@@ -7212,1 +7238,1 @@\n-    uint vlen = vector_length(this);\n+    uint vlen = Matcher::vector_length(this);\n@@ -7227,1 +7253,1 @@\n-    uint vlen = vector_length(this);\n+    uint vlen = Matcher::vector_length(this);\n@@ -7242,1 +7268,1 @@\n-    uint vlen = vector_length(this);\n+    uint vlen = Matcher::vector_length(this);\n@@ -7270,1 +7296,1 @@\n-  predicate(vector_length(n) != 4); \/\/ handled by 1-operand instruction vabsneg4F\n+  predicate(Matcher::vector_length(n) != 4); \/\/ handled by 1-operand instruction vabsneg4F\n@@ -7278,1 +7304,1 @@\n-    int vlen = vector_length(this);\n+    int vlen = Matcher::vector_length(this);\n@@ -7291,1 +7317,1 @@\n-  predicate(vector_length(n) == 4);\n+  predicate(Matcher::vector_length(n) == 4);\n@@ -7311,1 +7337,1 @@\n-    uint vlen = vector_length(this);\n+    uint vlen = Matcher::vector_length(this);\n@@ -7327,2 +7353,2 @@\n-  predicate(vector_length_in_bytes(n->in(1)) >= 4 &&\n-            vector_length_in_bytes(n->in(1)) < 16 &&\n+  predicate(Matcher::vector_length_in_bytes(n->in(1)) >= 4 &&\n+            Matcher::vector_length_in_bytes(n->in(1)) < 16 &&\n@@ -7334,1 +7360,1 @@\n-    int vlen = vector_length_in_bytes(this, $src1);\n+    int vlen = Matcher::vector_length_in_bytes(this, $src1);\n@@ -7343,2 +7369,2 @@\n-  predicate(vector_length_in_bytes(n->in(1)) >= 16 &&\n-            vector_length_in_bytes(n->in(1)) <  64 &&\n+  predicate(Matcher::vector_length_in_bytes(n->in(1)) >= 16 &&\n+            Matcher::vector_length_in_bytes(n->in(1)) <  64 &&\n@@ -7350,1 +7376,1 @@\n-    int vlen = vector_length_in_bytes(this, $src1);\n+    int vlen = Matcher::vector_length_in_bytes(this, $src1);\n@@ -7359,1 +7385,1 @@\n-  predicate(vector_length_in_bytes(n->in(1)) == 64 &&\n+  predicate(Matcher::vector_length_in_bytes(n->in(1)) == 64 &&\n@@ -7365,1 +7391,1 @@\n-    int vlen = vector_length_in_bytes(this, $src1);\n+    int vlen = Matcher::vector_length_in_bytes(this, $src1);\n@@ -7374,2 +7400,2 @@\n-  predicate(vector_length_in_bytes(n->in(1)) >= 4 &&\n-            vector_length_in_bytes(n->in(1)) < 16 &&\n+  predicate(Matcher::vector_length_in_bytes(n->in(1)) >= 4 &&\n+            Matcher::vector_length_in_bytes(n->in(1)) < 16 &&\n@@ -7381,1 +7407,1 @@\n-    int vlen = vector_length_in_bytes(this, $src1);\n+    int vlen = Matcher::vector_length_in_bytes(this, $src1);\n@@ -7390,2 +7416,2 @@\n-  predicate(vector_length_in_bytes(n->in(1)) >= 16 &&\n-            vector_length_in_bytes(n->in(1)) < 64  &&\n+  predicate(Matcher::vector_length_in_bytes(n->in(1)) >= 16 &&\n+            Matcher::vector_length_in_bytes(n->in(1)) < 64  &&\n@@ -7397,1 +7423,1 @@\n-    int vlen = vector_length_in_bytes(this, $src1);\n+    int vlen = Matcher::vector_length_in_bytes(this, $src1);\n@@ -7406,1 +7432,1 @@\n-  predicate(vector_length_in_bytes(n->in(1)) == 64 &&\n+  predicate(Matcher::vector_length_in_bytes(n->in(1)) == 64 &&\n@@ -7412,1 +7438,1 @@\n-    int vlen = vector_length_in_bytes(this, $src1);\n+    int vlen = Matcher::vector_length_in_bytes(this, $src1);\n@@ -7421,2 +7447,2 @@\n-  predicate(vector_length_in_bytes(n->in(1)->in(1)) >= 4 &&\n-            vector_length_in_bytes(n->in(1)->in(1)) < 16 &&\n+  predicate(Matcher::vector_length_in_bytes(n->in(1)->in(1)) >= 4 &&\n+            Matcher::vector_length_in_bytes(n->in(1)->in(1)) < 16 &&\n@@ -7428,1 +7454,1 @@\n-    int vlen = vector_length_in_bytes(this, $src1);\n+    int vlen = Matcher::vector_length_in_bytes(this, $src1);\n@@ -7435,2 +7461,2 @@\n-  predicate(vector_length_in_bytes(n->in(1)->in(1)) >= 16 &&\n-            vector_length_in_bytes(n->in(1)->in(1)) <  64 &&\n+  predicate(Matcher::vector_length_in_bytes(n->in(1)->in(1)) >= 16 &&\n+            Matcher::vector_length_in_bytes(n->in(1)->in(1)) <  64 &&\n@@ -7441,1 +7467,1 @@\n-    int vlen = vector_length_in_bytes(this, $src1);\n+    int vlen = Matcher::vector_length_in_bytes(this, $src1);\n@@ -7448,1 +7474,1 @@\n-  predicate(vector_length_in_bytes(n->in(1)->in(1)) == 64 &&\n+  predicate(Matcher::vector_length_in_bytes(n->in(1)->in(1)) == 64 &&\n@@ -7454,1 +7480,1 @@\n-    int vlen = vector_length_in_bytes(this, $src1);\n+    int vlen = Matcher::vector_length_in_bytes(this, $src1);\n@@ -7469,2 +7495,2 @@\n-    int vlen_in_bytes = vector_length_in_bytes(this);\n-    BasicType elem_bt = vector_element_basic_type(this);\n+    int vlen_in_bytes = Matcher::vector_length_in_bytes(this);\n+    BasicType elem_bt = Matcher::vector_element_basic_type(this);\n@@ -7483,2 +7509,2 @@\n-    int vlen_in_bytes = vector_length_in_bytes(this);\n-    BasicType elem_bt = vector_element_basic_type(this);\n+    int vlen_in_bytes = Matcher::vector_length_in_bytes(this);\n+    BasicType elem_bt = Matcher::vector_element_basic_type(this);\n@@ -7494,1 +7520,1 @@\n-  predicate(vector_length(n) < 64 || VM_Version::supports_avx512vlbw());\n+  predicate(Matcher::vector_length(n) < 64 || VM_Version::supports_avx512vlbw());\n@@ -7499,1 +7525,1 @@\n-    if (vector_length_in_bytes(this) <= 16) {\n+    if (Matcher::vector_length_in_bytes(this) <= 16) {\n@@ -7511,1 +7537,1 @@\n-  predicate(vector_length(n) <= 8);\n+  predicate(Matcher::vector_length(n) <= 8);\n@@ -7523,1 +7549,1 @@\n-  predicate(vector_length(n) == 16 && !VM_Version::supports_avx512bw());\n+  predicate(Matcher::vector_length(n) == 16 && !VM_Version::supports_avx512bw());\n@@ -7550,1 +7576,1 @@\n-  predicate (vector_length(n) <= 4 && UseAVX <= 2);\n+  predicate(Matcher::vector_length(n) <= 4 && UseAVX <= 2);\n@@ -7563,1 +7589,1 @@\n-  predicate(vector_length(n) == 8 && UseAVX <= 2);\n+  predicate(Matcher::vector_length(n) == 8 && UseAVX <= 2);\n@@ -7594,1 +7620,1 @@\n-  predicate(vector_length(n) == 2 && UseAVX <= 2);\n+  predicate(Matcher::vector_length(n) == 2 && UseAVX <= 2);\n@@ -7608,1 +7634,1 @@\n-  predicate(vector_length(n) == 4 && UseAVX <= 2);\n+  predicate(Matcher::vector_length(n) == 4 && UseAVX <= 2);\n@@ -7641,2 +7667,2 @@\n-  predicate((vector_length(n) == vector_length(n->in(1))) &&\n-            (vector_length_in_bytes(n) == vector_length_in_bytes(n->in(1))));\n+  predicate((Matcher::vector_length(n) == Matcher::vector_length(n->in(1))) &&\n+            (Matcher::vector_length_in_bytes(n) == Matcher::vector_length_in_bytes(n->in(1))));\n@@ -7655,1 +7681,1 @@\n-  predicate(vector_element_basic_type(n) == T_BYTE);\n+  predicate(Matcher::vector_element_basic_type(n) == T_BYTE);\n@@ -7660,1 +7686,1 @@\n-     int vlen_in_bytes = vector_length_in_bytes(this);\n+     int vlen_in_bytes = Matcher::vector_length_in_bytes(this);\n@@ -7671,1 +7697,1 @@\n-  predicate(vector_element_basic_type(n) == T_BYTE);\n+  predicate(Matcher::vector_element_basic_type(n) == T_BYTE);\n@@ -7681,2 +7707,2 @@\n-  predicate(vector_element_basic_type(n) == T_BYTE &&\n-            vector_length(n) < 32);\n+  predicate(Matcher::vector_element_basic_type(n) == T_BYTE &&\n+            Matcher::vector_length(n) < 32);\n@@ -7693,2 +7719,2 @@\n-  predicate(vector_element_basic_type(n) == T_BYTE &&\n-            vector_length(n) == 32 && !VM_Version::supports_avx512_vbmi());\n+  predicate(Matcher::vector_element_basic_type(n) == T_BYTE &&\n+            Matcher::vector_length(n) == 32 && !VM_Version::supports_avx512_vbmi());\n@@ -7715,2 +7741,2 @@\n-  predicate(vector_element_basic_type(n) == T_BYTE &&\n-            vector_length(n) >= 32 && VM_Version::supports_avx512_vbmi());\n+  predicate(Matcher::vector_element_basic_type(n) == T_BYTE &&\n+            Matcher::vector_length(n) >= 32 && VM_Version::supports_avx512_vbmi());\n@@ -7729,2 +7755,2 @@\n-  predicate(vector_element_basic_type(n) == T_SHORT &&\n-            vector_length(n) <= 16 && !VM_Version::supports_avx512bw()); \/\/ NB! aligned with rearrangeS\n+  predicate(Matcher::vector_element_basic_type(n) == T_SHORT &&\n+            Matcher::vector_length(n) <= 16 && !VM_Version::supports_avx512bw()); \/\/ NB! aligned with rearrangeS\n@@ -7737,1 +7763,1 @@\n-    int vlen_in_bytes = vector_length_in_bytes(this);\n+    int vlen_in_bytes = Matcher::vector_length_in_bytes(this);\n@@ -7771,2 +7797,2 @@\n-  predicate(vector_element_basic_type(n) == T_SHORT &&\n-            vector_length(n) <= 8 && !VM_Version::supports_avx512bw());\n+  predicate(Matcher::vector_element_basic_type(n) == T_SHORT &&\n+            Matcher::vector_length(n) <= 8 && !VM_Version::supports_avx512bw());\n@@ -7783,2 +7809,2 @@\n-  predicate(vector_element_basic_type(n) == T_SHORT &&\n-            vector_length(n) == 16 && !VM_Version::supports_avx512bw());\n+  predicate(Matcher::vector_element_basic_type(n) == T_SHORT &&\n+            Matcher::vector_length(n) == 16 && !VM_Version::supports_avx512bw());\n@@ -7805,1 +7831,1 @@\n-  predicate(vector_element_basic_type(n) == T_SHORT &&\n+  predicate(Matcher::vector_element_basic_type(n) == T_SHORT &&\n@@ -7820,1 +7846,1 @@\n-  predicate(vector_element_basic_type(n) == T_SHORT &&\n+  predicate(Matcher::vector_element_basic_type(n) == T_SHORT &&\n@@ -7837,2 +7863,2 @@\n-  predicate((vector_element_basic_type(n) == T_INT || vector_element_basic_type(n) == T_FLOAT) &&\n-            vector_length(n) == 4 && UseAVX < 2);\n+  predicate((Matcher::vector_element_basic_type(n) == T_INT || Matcher::vector_element_basic_type(n) == T_FLOAT) &&\n+            Matcher::vector_length(n) == 4 && UseAVX < 2);\n@@ -7867,2 +7893,2 @@\n- predicate((vector_element_basic_type(n) == T_INT || vector_element_basic_type(n) == T_FLOAT) &&\n-           vector_length(n) == 4 && UseAVX < 2);\n+ predicate((Matcher::vector_element_basic_type(n) == T_INT || Matcher::vector_element_basic_type(n) == T_FLOAT) &&\n+           Matcher::vector_length(n) == 4 && UseAVX < 2);\n@@ -7879,1 +7905,1 @@\n-  predicate((vector_element_basic_type(n) == T_INT || vector_element_basic_type(n) == T_FLOAT) &&\n+  predicate((Matcher::vector_element_basic_type(n) == T_INT || Matcher::vector_element_basic_type(n) == T_FLOAT) &&\n@@ -7891,1 +7917,1 @@\n-  predicate((vector_element_basic_type(n) == T_INT || vector_element_basic_type(n) == T_FLOAT) &&\n+  predicate((Matcher::vector_element_basic_type(n) == T_INT || Matcher::vector_element_basic_type(n) == T_FLOAT) &&\n@@ -7908,2 +7934,2 @@\n-  predicate(is_double_word_type(vector_element_basic_type(n)) && \/\/ T_LONG, T_DOUBLE\n-            vector_length(n) < 8 && !VM_Version::supports_avx512vl());\n+  predicate(is_double_word_type(Matcher::vector_element_basic_type(n)) && \/\/ T_LONG, T_DOUBLE\n+            Matcher::vector_length(n) < 8 && !VM_Version::supports_avx512vl());\n@@ -7935,2 +7961,2 @@\n-  predicate(is_double_word_type(vector_element_basic_type(n)) && \/\/ T_LONG, T_DOUBLE\n-            vector_length(n) < 8 && !VM_Version::supports_avx512vl());\n+  predicate(is_double_word_type(Matcher::vector_element_basic_type(n)) && \/\/ T_LONG, T_DOUBLE\n+            Matcher::vector_length(n) < 8 && !VM_Version::supports_avx512vl());\n@@ -7949,2 +7975,2 @@\n-  predicate(is_double_word_type(vector_element_basic_type(n)) && \/\/ T_LONG, T_DOUBLE\n-            (vector_length(n) == 8 || VM_Version::supports_avx512vl()));\n+  predicate(is_double_word_type(Matcher::vector_element_basic_type(n)) && \/\/ T_LONG, T_DOUBLE\n+            (Matcher::vector_length(n) == 8 || VM_Version::supports_avx512vl()));\n@@ -7963,2 +7989,2 @@\n-  predicate(is_double_word_type(vector_element_basic_type(n)) && \/\/ T_LONG, T_DOUBLE\n-            (vector_length(n) == 8 || VM_Version::supports_avx512vl()));\n+  predicate(is_double_word_type(Matcher::vector_element_basic_type(n)) && \/\/ T_LONG, T_DOUBLE\n+            (Matcher::vector_length(n) == 8 || VM_Version::supports_avx512vl()));\n@@ -7995,1 +8021,1 @@\n-  predicate(vector_length_in_bytes(n->in(1)) > 8);\n+  predicate(Matcher::vector_length_in_bytes(n->in(1)) > 8);\n@@ -8020,1 +8046,1 @@\n-  predicate(vector_length_in_bytes(n->in(1)) > 8);\n+  predicate(Matcher::vector_length_in_bytes(n->in(1)) > 8);\n@@ -8098,1 +8124,1 @@\n-  predicate(vector_length_in_bytes(n->in(1)->in(1)) > 8);\n+  predicate(Matcher::vector_length_in_bytes(n->in(1)->in(1)) > 8);\n@@ -8145,1 +8171,1 @@\n-    assert(vector_element_basic_type(this, $src1) == vector_element_basic_type(this, $src2), \"mismatch\");\n+    assert(Matcher::vector_element_basic_type(this, $src1) == Matcher::vector_element_basic_type(this, $src2), \"mismatch\");\n@@ -8149,1 +8175,1 @@\n-    BasicType elem_bt = vector_element_basic_type(this, $src1);\n+    BasicType elem_bt = Matcher::vector_element_basic_type(this, $src1);\n@@ -8217,1 +8243,1 @@\n-    int mask_len = vector_length(this, $mask);\n+    int mask_len = Matcher::vector_length(this, $mask);\n@@ -8233,1 +8259,1 @@\n-    int mask_len = vector_length(this, $mask);\n+    int mask_len = Matcher::vector_length(this, $mask);\n@@ -8248,1 +8274,1 @@\n-    int mask_len = vector_length(this, $mask);\n+    int mask_len = Matcher::vector_length(this, $mask);\n@@ -8264,1 +8290,1 @@\n-    int mask_len = vector_length(this, $mask);\n+    int mask_len = Matcher::vector_length(this, $mask);\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":431,"deletions":405,"binary":false,"changes":836,"status":"modified"},{"patch":"@@ -478,0 +478,3 @@\n+  \/\/ simulate crash during compilation\n+  assert(CICrashAt < 0 || _compile->compile_id() != CICrashAt, \"just as planned\");\n+\n@@ -2111,4 +2114,0 @@\n-  \/\/ Now that all inlining is over, cut edge from root to loop\n-  \/\/ safepoints\n-  remove_root_to_sfpts_edges(igvn);\n-\n@@ -2152,0 +2151,4 @@\n+  \/\/ Now that all inlining is over and no PhaseRemoveUseless will run, cut edge from root to loop\n+  \/\/ safepoints\n+  remove_root_to_sfpts_edges(igvn);\n+\n@@ -2225,1 +2228,1 @@\n-  print_method(PHASE_CPP1, 2);\n+  print_method(PHASE_CCP1, 2);\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -341,0 +341,1 @@\n+  bool arch_supports_vector_rotate(int opc, int num_elem, BasicType elem_bt, VectorMaskUseType mask_use_type, bool has_scalar_args = false);\n","filename":"src\/hotspot\/share\/opto\/library_call.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2746,0 +2746,33 @@\n+uint Matcher::vector_length(const Node* n) {\n+  const TypeVect* vt = n->bottom_type()->is_vect();\n+  return vt->length();\n+}\n+\n+uint Matcher::vector_length(const MachNode* use, const MachOper* opnd) {\n+  int def_idx = use->operand_index(opnd);\n+  Node* def = use->in(def_idx);\n+  return def->bottom_type()->is_vect()->length();\n+}\n+\n+uint Matcher::vector_length_in_bytes(const Node* n) {\n+  const TypeVect* vt = n->bottom_type()->is_vect();\n+  return vt->length_in_bytes();\n+}\n+\n+uint Matcher::vector_length_in_bytes(const MachNode* use, const MachOper* opnd) {\n+  uint def_idx = use->operand_index(opnd);\n+  Node* def = use->in(def_idx);\n+  return def->bottom_type()->is_vect()->length_in_bytes();\n+}\n+\n+BasicType Matcher::vector_element_basic_type(const Node* n) {\n+  const TypeVect* vt = n->bottom_type()->is_vect();\n+  return vt->element_basic_type();\n+}\n+\n+BasicType Matcher::vector_element_basic_type(const MachNode* use, const MachOper* opnd) {\n+  int def_idx = use->operand_index(opnd);\n+  Node* def = use->in(def_idx);\n+  return def->bottom_type()->is_vect()->element_basic_type();\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/matcher.cpp","additions":33,"deletions":0,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -356,0 +356,12 @@\n+  \/\/ Vector length\n+  static uint vector_length(const Node* n);\n+  static uint vector_length(const MachNode* use, const MachOper* opnd);\n+\n+  \/\/ Vector length in bytes\n+  static uint vector_length_in_bytes(const Node* n);\n+  static uint vector_length_in_bytes(const MachNode* use, const MachOper* opnd);\n+\n+  \/\/ Vector element basic type\n+  static BasicType vector_element_basic_type(const Node* n);\n+  static BasicType vector_element_basic_type(const MachNode* use, const MachOper* opnd);\n+\n","filename":"src\/hotspot\/share\/opto\/matcher.hpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -70,0 +70,72 @@\n+bool LibraryCallKit::arch_supports_vector_rotate(int opc, int num_elem, BasicType elem_bt,\n+                                                 VectorMaskUseType mask_use_type, bool has_scalar_args) {\n+  bool is_supported = true;\n+\n+  \/\/ has_scalar_args flag is true only for non-constant scalar shift count,\n+  \/\/ since in this case shift needs to be broadcasted.\n+  if (!Matcher::match_rule_supported_vector(opc, num_elem, elem_bt) ||\n+       (has_scalar_args &&\n+         !arch_supports_vector(VectorNode::replicate_opcode(elem_bt), num_elem, elem_bt, VecMaskNotUsed))) {\n+    is_supported = false;\n+  }\n+\n+  if (is_supported) {\n+    \/\/ Check whether mask unboxing is supported.\n+    if ((mask_use_type & VecMaskUseLoad) != 0) {\n+      if (!Matcher::match_rule_supported_vector(Op_VectorLoadMask, num_elem, elem_bt)) {\n+      #ifndef PRODUCT\n+        if (C->print_intrinsics()) {\n+          tty->print_cr(\"  ** Rejected vector mask loading (%s,%s,%d) because architecture does not support it\",\n+                        NodeClassNames[Op_VectorLoadMask], type2name(elem_bt), num_elem);\n+        }\n+      #endif\n+        return false;\n+      }\n+    }\n+\n+    if ((mask_use_type & VecMaskUsePred) != 0) {\n+      if (!Matcher::has_predicated_vectors() ||\n+          !Matcher::match_rule_supported_vector_masked(opc, num_elem, elem_bt)) {\n+      #ifndef PRODUCT\n+        if (C->print_intrinsics()) {\n+          tty->print_cr(\"Rejected vector mask predicate using (%s,%s,%d) because architecture does not support it\",\n+                        NodeClassNames[opc], type2name(elem_bt), num_elem);\n+        }\n+      #endif\n+        return false;\n+      }\n+    }\n+  }\n+\n+  int lshiftopc, rshiftopc;\n+  switch(elem_bt) {\n+    case T_BYTE:\n+      lshiftopc = Op_LShiftI;\n+      rshiftopc = Op_URShiftB;\n+      break;\n+    case T_SHORT:\n+      lshiftopc = Op_LShiftI;\n+      rshiftopc = Op_URShiftS;\n+      break;\n+    case T_INT:\n+      lshiftopc = Op_LShiftI;\n+      rshiftopc = Op_URShiftI;\n+      break;\n+    case T_LONG:\n+      lshiftopc = Op_LShiftL;\n+      rshiftopc = Op_URShiftL;\n+      break;\n+    default:\n+      assert(false, \"Unexpected type\");\n+  }\n+  int lshiftvopc = VectorNode::opcode(lshiftopc, elem_bt);\n+  int rshiftvopc = VectorNode::opcode(rshiftopc, elem_bt);\n+  if (!is_supported &&\n+      arch_supports_vector(lshiftvopc, num_elem, elem_bt, VecMaskNotUsed, has_scalar_args) &&\n+      arch_supports_vector(rshiftvopc, num_elem, elem_bt, VecMaskNotUsed, has_scalar_args) &&\n+      arch_supports_vector(Op_OrV, num_elem, elem_bt, VecMaskNotUsed)) {\n+    is_supported = true;\n+  }\n+  return is_supported;\n+}\n+\n@@ -123,2 +195,2 @@\n-  \/\/ Check that architecture supports this op-size-type combination.\n-  if (!Matcher::match_rule_supported_vector(sopc, num_elem, type)) {\n+  if (VectorNode::is_vector_rotate(sopc)) {\n+    if(!arch_supports_vector_rotate(sopc, num_elem, type, mask_use_type, has_scalar_args)) {\n@@ -126,4 +198,4 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** Rejected vector op (%s,%s,%d) because architecture does not support it\",\n-                    NodeClassNames[sopc], type2name(type), num_elem);\n-    }\n+      if (C->print_intrinsics()) {\n+        tty->print_cr(\"  ** Rejected vector op (%s,%s,%d) because architecture does not support variable vector shifts\",\n+                      NodeClassNames[sopc], type2name(type), num_elem);\n+      }\n@@ -131,1 +203,2 @@\n-    return false;\n+      return false;\n+    }\n@@ -133,1 +206,12 @@\n-    assert(Matcher::match_rule_supported(sopc), \"must be supported\");\n+    \/\/ Check that architecture supports this op-size-type combination.\n+    if (!Matcher::match_rule_supported_vector(sopc, num_elem, type)) {\n+#ifndef PRODUCT\n+      if (C->print_intrinsics()) {\n+        tty->print_cr(\"  ** Rejected vector op (%s,%s,%d) because architecture does not support it\",\n+                      NodeClassNames[sopc], type2name(type), num_elem);\n+      }\n+#endif\n+      return false;\n+    } else {\n+      assert(Matcher::match_rule_supported(sopc), \"must be supported\");\n+    }\n@@ -847,2 +931,4 @@\n-  \/\/ Can base be NULL? Otherwise, always on-heap access.\n-  bool can_access_non_heap = TypePtr::NULL_PTR->higher_equal(gvn().type(base));\n+\n+  \/\/ The memory barrier checks are based on ones for unsafe access.\n+  \/\/ This is not 1-1 implementation.\n+  const Type *const base_type = gvn().type(base);\n@@ -853,0 +939,9 @@\n+  const bool in_native = TypePtr::NULL_PTR == base_type; \/\/ base always null\n+  const bool in_heap   = !TypePtr::NULL_PTR->higher_equal(base_type); \/\/ base never null\n+\n+  const bool is_mixed_access = !in_heap && !in_native;\n+\n+  const bool is_mismatched_access = in_heap && (addr_type->isa_aryptr() == NULL);\n+\n+  const bool needs_cpu_membar = is_mixed_access || is_mismatched_access;\n+\n@@ -910,1 +1005,1 @@\n-  if (can_access_non_heap) {\n+  if (needs_cpu_membar) {\n@@ -956,1 +1051,1 @@\n-  if (can_access_non_heap) {\n+  if (needs_cpu_membar) {\n@@ -1871,1 +1966,2 @@\n-  if (!arch_supports_vector(Op_VectorRearrange, num_elem, elem_bt, is_masked_op ? VecMaskUsePred : VecMaskNotUsed)) {\n+  VectorMaskUseType checkFlags = (VectorMaskUseType)(is_masked_op ? (VecMaskUseLoad | VecMaskUsePred) : VecMaskNotUsed);\n+  if (!arch_supports_vector(Op_VectorRearrange, num_elem, elem_bt, checkFlags)) {\n@@ -1874,1 +1970,2 @@\n-       (!arch_supports_vector(Op_VectorBlend, num_elem, elem_bt, VecMaskUseLoad) ||\n+       (!arch_supports_vector(Op_VectorRearrange, num_elem, elem_bt, VecMaskNotUsed) ||\n+        !arch_supports_vector(Op_VectorBlend, num_elem, elem_bt, VecMaskUseLoad)     ||\n@@ -2054,1 +2151,1 @@\n-  BasicType elem_bt = elem_type->basic_type();\n+\n@@ -2056,0 +2153,1 @@\n+  BasicType elem_bt = elem_type->basic_type();\n@@ -2057,1 +2155,5 @@\n-  if (opc == 0 || !VectorNode::is_shift_opcode(opc)) {\n+\n+  bool is_shift  = VectorNode::is_shift_opcode(opc);\n+  bool is_rotate = VectorNode::is_rotate_opcode(opc);\n+\n+  if (opc == 0 || (!is_shift && !is_rotate)) {\n@@ -2063,0 +2165,1 @@\n+\n@@ -2070,0 +2173,2 @@\n+\n+  Node* cnt  = argument(6);\n@@ -2072,0 +2177,15 @@\n+  const TypeInt* cnt_type = cnt->bottom_type()->isa_int();\n+\n+  \/\/ If CPU supports vector constant rotate instructions pass it directly\n+  bool is_const_rotate = is_rotate && cnt_type && cnt_type->is_con() &&\n+                         Matcher::supports_vector_constant_rotates(cnt_type->get_con());\n+  bool has_scalar_args = is_rotate ? !is_const_rotate : true;\n+\n+  VectorMaskUseType checkFlags = (VectorMaskUseType)(is_masked_op ? (VecMaskUseLoad | VecMaskUsePred) : VecMaskNotUsed);\n+  bool use_predicate = is_masked_op;\n+\n+  if (!arch_supports_vector(sopc, num_elem, elem_bt, checkFlags, has_scalar_args)) {\n+    use_predicate = false;\n+    if (!is_masked_op ||\n+        (!arch_supports_vector(sopc, num_elem, elem_bt, VecMaskNotUsed, has_scalar_args) ||\n+         !arch_supports_vector(Op_VectorBlend, num_elem, elem_bt, VecMaskUseLoad))) {\n@@ -2073,4 +2193,0 @@\n-  bool use_predicate = is_masked_op &&\n-                       arch_supports_vector(sopc, num_elem, elem_bt, (VectorMaskUseType) (VecMaskUseLoad | VecMaskUsePred), true);\n-  if (!use_predicate) {\n-    if (!arch_supports_vector(sopc, num_elem, elem_bt, VecMaskNotUsed, true \/*has_scalar_args*\/)) {\n@@ -2083,7 +2199,0 @@\n-    if (is_masked_op && !arch_supports_vector(Op_VectorBlend, num_elem, elem_bt, VecMaskUseLoad)) {\n-      if (C->print_intrinsics()) {\n-        tty->print_cr(\"  ** not supported: arity=0 op=int\/%d vlen=%d etype=%s is_masked_op=1\",\n-                      sopc, num_elem, type2name(elem_bt));\n-      }\n-      return false; \/\/ not supported\n-    }\n@@ -2092,1 +2201,15 @@\n-  Node* opd2 = vector_shift_count(argument(6), opc, elem_bt, num_elem);\n+  Node* opd2 = NULL;\n+  if (is_shift) {\n+    opd2 = vector_shift_count(cnt, opc, elem_bt, num_elem);\n+  } else {\n+    assert(is_rotate, \"unexpected operation\");\n+    if (!is_const_rotate) {\n+      const Type * type_bt = Type::get_const_basic_type(elem_bt);\n+      cnt = elem_bt == T_LONG ? gvn().transform(new ConvI2LNode(cnt)) : cnt;\n+      opd2 = gvn().transform(VectorNode::scalar2vector(cnt, num_elem, type_bt));\n+    } else {\n+      \/\/ Constant shift value.\n+      opd2 = cnt;\n+    }\n+  }\n+\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":151,"deletions":28,"binary":false,"changes":179,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"opto\/convertnode.hpp\"\n@@ -145,1 +146,1 @@\n-    return (bt == T_LONG || bt == T_INT ? Op_RotateLeftV : 0);\n+    return (is_integral_type(bt) ? Op_RotateLeftV : 0);\n@@ -147,1 +148,1 @@\n-    return (bt == T_LONG || bt == T_INT ? Op_RotateRightV : 0);\n+    return (is_integral_type(bt) ? Op_RotateRightV : 0);\n@@ -264,1 +265,1 @@\n-    if (vopc == Op_RotateLeftV || vopc == Op_RotateRightV) {\n+    if (VectorNode::is_vector_rotate(vopc)) {\n@@ -298,8 +299,1 @@\n-bool VectorNode::is_scalar_rotate(Node* n) {\n-  if (n->Opcode() == Op_RotateLeft || n->Opcode() == Op_RotateRight) {\n-    return true;\n-  }\n-  return false;\n-}\n-\n-  assert(vopc == Op_RotateLeftV || vopc == Op_RotateRightV, \"wrong opcode\");\n+  assert(VectorNode::is_vector_rotate(vopc), \"wrong opcode\");\n@@ -314,0 +308,8 @@\n+  \/\/ If target does not support variable shift operations then no point\n+  \/\/ in creating a rotate vector node since it will not be disintegratable.\n+  \/\/ Adding a pessimistic check to avoid complex pattern mathing which\n+  \/\/ may not be full proof.\n+  if (!Matcher::supports_vector_variable_shifts()) {\n+     return false;\n+  }\n+\n@@ -350,0 +352,17 @@\n+bool VectorNode::is_rotate_opcode(int opc) {\n+  switch (opc) {\n+  case Op_RotateRight:\n+  case Op_RotateLeft:\n+    return true;\n+  default:\n+    return false;\n+  }\n+}\n+\n+bool VectorNode::is_scalar_rotate(Node* n) {\n+  if (is_rotate_opcode(n->Opcode())) {\n+    return true;\n+  }\n+  return false;\n+}\n+\n@@ -616,0 +635,10 @@\n+bool VectorNode::is_vector_rotate(int opc) {\n+  switch (opc) {\n+  case Op_RotateLeftV:\n+  case Op_RotateRightV:\n+    return true;\n+  default:\n+    return false;\n+  }\n+}\n+\n@@ -1205,1 +1234,1 @@\n-  assert(bt == T_INT || bt == T_LONG, \"sanity\");\n+  assert(is_integral_type(bt), \"sanity\");\n@@ -1208,3 +1237,12 @@\n-  int shift_mask = (bt == T_INT) ? 0x1F : 0x3F;\n-  int shiftLOpc = (bt == T_INT) ? Op_LShiftI : Op_LShiftL;\n-  int shiftROpc = (bt == T_INT) ? Op_URShiftI: Op_URShiftL;\n+  int shift_mask = (type2aelembytes(bt) * 8) - 1;\n+  int shiftLOpc = (bt == T_LONG) ? Op_LShiftL : Op_LShiftI;\n+  auto urshiftopc = [=]() {\n+    switch(bt) {\n+      case T_INT: return Op_URShiftI;\n+      case T_LONG: return Op_URShiftL;\n+      case T_BYTE: return Op_URShiftB;\n+      case T_SHORT: return Op_URShiftS;\n+      default: return (Opcodes)0;\n+    }\n+  };\n+  int shiftROpc = urshiftopc();\n@@ -1216,3 +1254,5 @@\n-  if (cnt->is_Con() && cnt->bottom_type()->isa_int()) {\n-    \/\/ Constant shift case.\n-    int shift = cnt->get_int() & shift_mask;\n+  const TypeInt* cnt_type = cnt->bottom_type()->isa_int();\n+  bool is_binary_vector_op = false;\n+  if (cnt_type && cnt_type->is_con()) {\n+    \/\/ Constant shift.\n+    int shift = cnt_type->get_con() & shift_mask;\n@@ -1221,3 +1261,2 @@\n-  } else {\n-    \/\/ Variable shift case.\n-    assert(VectorNode::is_invariant_vector(cnt), \"Broadcast expected\");\n+  } else if (VectorNode::is_invariant_vector(cnt)) {\n+    \/\/ Scalar variable shift, handle replicates generated by auto vectorizer.\n@@ -1227,2 +1266,7 @@\n-      assert(cnt->Opcode() == Op_ConvI2L, \"ConvI2L expected\");\n-      cnt = cnt->in(1);\n+      if (cnt->Opcode() == Op_ConvI2L) {\n+         cnt = cnt->in(1);\n+      } else {\n+         assert(cnt->bottom_type()->isa_long() &&\n+                cnt->bottom_type()->is_long()->is_con(), \"Long constant expected\");\n+         cnt = phase->transform(new ConvL2INode(cnt));\n+      }\n@@ -1232,0 +1276,31 @@\n+  } else {\n+    \/\/ Variable vector rotate count.\n+    assert(Matcher::supports_vector_variable_shifts(), \"\");\n+\n+    int subVopc = 0;\n+    int addVopc = 0;\n+    Node* shift_mask_node = NULL;\n+    Node* const_one_node = NULL;\n+\n+    assert(cnt->bottom_type()->isa_vect(), \"Unexpected shift\");\n+    const Type* elem_ty = Type::get_const_basic_type(bt);\n+\n+    if (bt == T_LONG) {\n+      shift_mask_node = phase->longcon(shift_mask);\n+      const_one_node = phase->longcon(1L);\n+      subVopc = VectorNode::opcode(Op_SubL, bt);\n+      addVopc = VectorNode::opcode(Op_AddL, bt);\n+    } else {\n+      shift_mask_node = phase->intcon(shift_mask);\n+      const_one_node = phase->intcon(1);\n+      subVopc = VectorNode::opcode(Op_SubI, bt);\n+      addVopc = VectorNode::opcode(Op_AddI, bt);\n+    }\n+    Node* vector_mask = phase->transform(VectorNode::scalar2vector(shift_mask_node, vlen, elem_ty));\n+    Node* vector_one = phase->transform(VectorNode::scalar2vector(const_one_node, vlen, elem_ty));\n+\n+    shiftRCnt = cnt;\n+    shiftRCnt = phase->transform(VectorNode::make(Op_AndV, shiftRCnt, vector_mask, vt));\n+    vector_mask = phase->transform(VectorNode::make(addVopc, vector_one, vector_mask, vt));\n+    shiftLCnt = phase->transform(VectorNode::make(subVopc, vector_mask, shiftRCnt, vt));\n+    is_binary_vector_op = true;\n@@ -1239,2 +1314,4 @@\n-  shiftLCnt = phase->transform(new LShiftCntVNode(shiftLCnt, vt));\n-  shiftRCnt = phase->transform(new RShiftCntVNode(shiftRCnt, vt));\n+  if (!is_binary_vector_op) {\n+    shiftLCnt = phase->transform(new LShiftCntVNode(shiftLCnt, vt));\n+    shiftRCnt = phase->transform(new RShiftCntVNode(shiftRCnt, vt));\n+  }\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":102,"deletions":25,"binary":false,"changes":127,"status":"modified"},{"patch":"@@ -85,0 +85,1 @@\n+  static bool is_rotate_opcode(int opc);\n@@ -96,1 +97,1 @@\n-  static bool is_vector_rotate_supported(int vopc, uint vlen, BasicType bt);\n+  static bool is_vector_rotate_supported(int opc, uint vlen, BasicType bt);\n@@ -108,0 +109,1 @@\n+  static bool is_vector_rotate(int opc);\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -356,0 +356,3 @@\n+        static final long BYTE_BUFFER_IS_READ_ONLY\n+                = UNSAFE.objectFieldOffset(ByteBuffer.class, \"isReadOnly\");\n+\n@@ -376,0 +379,5 @@\n+    @ForceInline\n+    public static boolean isReadOnly(ByteBuffer bb) {\n+        return UNSAFE.getBoolean(bb, BufferAccess.BYTE_BUFFER_IS_READ_ONLY);\n+    }\n+\n@@ -409,0 +417,2 @@\n+            final byte[] base = (byte[]) BufferAccess.bufferBase(bb);\n+\n@@ -410,3 +420,3 @@\n-                    BufferAccess.bufferBase(bb), BufferAccess.bufferAddress(bb, offset),\n-                    bb, offset, s,\n-                    defaultImpl);\n+                      base, BufferAccess.bufferAddress(bb, offset),\n+                      bb, offset, s,\n+                      defaultImpl);\n@@ -494,0 +504,2 @@\n+            final byte[] base = (byte[]) BufferAccess.bufferBase(bb);\n+\n@@ -495,4 +507,4 @@\n-                    BufferAccess.bufferBase(bb), BufferAccess.bufferAddress(bb, offset),\n-                    v,\n-                    bb, offset,\n-                    defaultImpl);\n+                                base, BufferAccess.bufferAddress(bb, offset),\n+                                v,\n+                                bb, offset,\n+                                defaultImpl);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/X-ScopedMemoryAccess.java.template","additions":19,"deletions":7,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -73,0 +73,4 @@\n+    \/\/ Rotate operations\n+    public static final int VECTOR_OP_LROTATE = 22;\n+    public static final int VECTOR_OP_RROTATE = 23;\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/vector\/VectorSupport.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -406,0 +406,12 @@\n+    \/*package-private*\/\n+    @ForceInline\n+    static byte rotateLeft(byte a, int n) {\n+        return (byte)(((((byte)a) & Byte.toUnsignedInt((byte)-1)) << (n & Byte.SIZE-1)) | ((((byte)a) & Byte.toUnsignedInt((byte)-1)) >>> (Byte.SIZE - (n & Byte.SIZE-1))));\n+    }\n+\n+    \/*package-private*\/\n+    @ForceInline\n+    static byte rotateRight(byte a, int n) {\n+        return (byte)(((((byte)a) & Byte.toUnsignedInt((byte)-1)) >>> (n & Byte.SIZE-1)) | ((((byte)a) & Byte.toUnsignedInt((byte)-1)) << (Byte.SIZE - (n & Byte.SIZE-1))));\n+    }\n+\n@@ -651,6 +663,1 @@\n-            if (op == ROR || op == ROL) {  \/\/ FIXME: JIT should do this\n-                ByteVector neg = that.lanewise(NEG);\n-                ByteVector hi = this.lanewise(LSHL, (op == ROR) ? neg : that);\n-                ByteVector lo = this.lanewise(LSHR, (op == ROR) ? that : neg);\n-                return hi.lanewise(OR, lo);\n-            } else if (op == AND_NOT) {\n+            if (op == AND_NOT) {\n@@ -706,3 +713,1 @@\n-            if (op == ROR || op == ROL) {\n-                return blend(lanewise(op, v), m);\n-            } else if (op == AND_NOT) {\n+            if (op == AND_NOT) {\n@@ -758,0 +763,4 @@\n+            case VECTOR_OP_LROTATE: return (v0, v1, vm) ->\n+                    v0.bOp(v1, vm, (i, a, n) -> rotateLeft(a, (int)n));\n+            case VECTOR_OP_RROTATE: return (v0, v1, vm) ->\n+                    v0.bOp(v1, vm, (i, a, n) -> rotateRight(a, (int)n));\n@@ -892,5 +901,0 @@\n-        if (op == ROR || op == ROL) {  \/\/ FIXME: JIT should do this\n-            ByteVector hi = this.lanewise(LSHL, (op == ROR) ? -e : e);\n-            ByteVector lo = this.lanewise(LSHR, (op == ROR) ? e : -e);\n-            return hi.lanewise(OR, lo);\n-        }\n@@ -918,3 +922,0 @@\n-        if (op == ROR || op == ROL) {\n-            return blend(lanewiseShift(op, e), m);\n-        }\n@@ -940,0 +941,4 @@\n+            case VECTOR_OP_LROTATE: return (v, n, m) ->\n+                    v.uOp(m, (i, a) -> rotateLeft(a, (int)n));\n+            case VECTOR_OP_RROTATE: return (v, n, m) ->\n+                    v.uOp(m, (i, a) -> rotateRight(a, (int)n));\n@@ -3627,1 +3632,1 @@\n-        if (bb.isReadOnly()) {\n+        if (ScopedMemoryAccess.isReadOnly(bb)) {\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteVector.java","additions":23,"deletions":18,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -406,0 +406,1 @@\n+\n@@ -3190,1 +3191,1 @@\n-        if (bb.isReadOnly()) {\n+        if (ScopedMemoryAccess.isReadOnly(bb)) {\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleVector.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -406,0 +406,1 @@\n+\n@@ -3177,1 +3178,1 @@\n-        if (bb.isReadOnly()) {\n+        if (ScopedMemoryAccess.isReadOnly(bb)) {\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatVector.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -406,0 +406,12 @@\n+    \/*package-private*\/\n+    @ForceInline\n+    static int rotateLeft(int a, int n) {\n+        return Integer.rotateLeft(a, n);\n+    }\n+\n+    \/*package-private*\/\n+    @ForceInline\n+    static int rotateRight(int a, int n) {\n+        return Integer.rotateRight(a, n);\n+    }\n+\n@@ -651,6 +663,1 @@\n-            if (op == ROR || op == ROL) {  \/\/ FIXME: JIT should do this\n-                IntVector neg = that.lanewise(NEG);\n-                IntVector hi = this.lanewise(LSHL, (op == ROR) ? neg : that);\n-                IntVector lo = this.lanewise(LSHR, (op == ROR) ? that : neg);\n-                return hi.lanewise(OR, lo);\n-            } else if (op == AND_NOT) {\n+            if (op == AND_NOT) {\n@@ -706,3 +713,1 @@\n-            if (op == ROR || op == ROL) {\n-                return blend(lanewise(op, v), m);\n-            } else if (op == AND_NOT) {\n+            if (op == AND_NOT) {\n@@ -758,0 +763,4 @@\n+            case VECTOR_OP_LROTATE: return (v0, v1, vm) ->\n+                    v0.bOp(v1, vm, (i, a, n) -> rotateLeft(a, (int)n));\n+            case VECTOR_OP_RROTATE: return (v0, v1, vm) ->\n+                    v0.bOp(v1, vm, (i, a, n) -> rotateRight(a, (int)n));\n@@ -892,5 +901,0 @@\n-        if (op == ROR || op == ROL) {  \/\/ FIXME: JIT should do this\n-            IntVector hi = this.lanewise(LSHL, (op == ROR) ? -e : e);\n-            IntVector lo = this.lanewise(LSHR, (op == ROR) ? e : -e);\n-            return hi.lanewise(OR, lo);\n-        }\n@@ -918,3 +922,0 @@\n-        if (op == ROR || op == ROL) {\n-            return blend(lanewiseShift(op, e), m);\n-        }\n@@ -940,0 +941,4 @@\n+            case VECTOR_OP_LROTATE: return (v, n, m) ->\n+                    v.uOp(m, (i, a) -> rotateLeft(a, (int)n));\n+            case VECTOR_OP_RROTATE: return (v, n, m) ->\n+                    v.uOp(m, (i, a) -> rotateRight(a, (int)n));\n@@ -3343,1 +3348,1 @@\n-        if (bb.isReadOnly()) {\n+        if (ScopedMemoryAccess.isReadOnly(bb)) {\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntVector.java","additions":23,"deletions":18,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -406,0 +406,12 @@\n+    \/*package-private*\/\n+    @ForceInline\n+    static long rotateLeft(long a, int n) {\n+        return Long.rotateLeft(a, n);\n+    }\n+\n+    \/*package-private*\/\n+    @ForceInline\n+    static long rotateRight(long a, int n) {\n+        return Long.rotateRight(a, n);\n+    }\n+\n@@ -609,6 +621,1 @@\n-            if (op == ROR || op == ROL) {  \/\/ FIXME: JIT should do this\n-                LongVector neg = that.lanewise(NEG);\n-                LongVector hi = this.lanewise(LSHL, (op == ROR) ? neg : that);\n-                LongVector lo = this.lanewise(LSHR, (op == ROR) ? that : neg);\n-                return hi.lanewise(OR, lo);\n-            } else if (op == AND_NOT) {\n+            if (op == AND_NOT) {\n@@ -664,3 +671,1 @@\n-            if (op == ROR || op == ROL) {\n-                return blend(lanewise(op, v), m);\n-            } else if (op == AND_NOT) {\n+            if (op == AND_NOT) {\n@@ -717,0 +722,4 @@\n+            case VECTOR_OP_LROTATE: return (v0, v1, vm) ->\n+                    v0.bOp(v1, vm, (i, a, n) -> rotateLeft(a, (int)n));\n+            case VECTOR_OP_RROTATE: return (v0, v1, vm) ->\n+                    v0.bOp(v1, vm, (i, a, n) -> rotateRight(a, (int)n));\n@@ -805,5 +814,0 @@\n-        if (op == ROR || op == ROL) {  \/\/ FIXME: JIT should do this\n-            LongVector hi = this.lanewise(LSHL, (op == ROR) ? -e : e);\n-            LongVector lo = this.lanewise(LSHR, (op == ROR) ? e : -e);\n-            return hi.lanewise(OR, lo);\n-        }\n@@ -831,3 +835,0 @@\n-        if (op == ROR || op == ROL) {\n-            return blend(lanewiseShift(op, e), m);\n-        }\n@@ -853,0 +854,4 @@\n+            case VECTOR_OP_LROTATE: return (v, n, m) ->\n+                    v.uOp(m, (i, a) -> rotateLeft(a, (int)n));\n+            case VECTOR_OP_RROTATE: return (v, n, m) ->\n+                    v.uOp(m, (i, a) -> rotateRight(a, (int)n));\n@@ -3241,1 +3246,1 @@\n-        if (bb.isReadOnly()) {\n+        if (ScopedMemoryAccess.isReadOnly(bb)) {\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongVector.java","additions":23,"deletions":18,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -406,0 +406,12 @@\n+    \/*package-private*\/\n+    @ForceInline\n+    static short rotateLeft(short a, int n) {\n+        return (short)(((((short)a) & Short.toUnsignedInt((short)-1)) << (n & Short.SIZE-1)) | ((((short)a) & Short.toUnsignedInt((short)-1)) >>> (Short.SIZE - (n & Short.SIZE-1))));\n+    }\n+\n+    \/*package-private*\/\n+    @ForceInline\n+    static short rotateRight(short a, int n) {\n+        return (short)(((((short)a) & Short.toUnsignedInt((short)-1)) >>> (n & Short.SIZE-1)) | ((((short)a) & Short.toUnsignedInt((short)-1)) << (Short.SIZE - (n & Short.SIZE-1))));\n+    }\n+\n@@ -651,6 +663,1 @@\n-            if (op == ROR || op == ROL) {  \/\/ FIXME: JIT should do this\n-                ShortVector neg = that.lanewise(NEG);\n-                ShortVector hi = this.lanewise(LSHL, (op == ROR) ? neg : that);\n-                ShortVector lo = this.lanewise(LSHR, (op == ROR) ? that : neg);\n-                return hi.lanewise(OR, lo);\n-            } else if (op == AND_NOT) {\n+            if (op == AND_NOT) {\n@@ -706,3 +713,1 @@\n-            if (op == ROR || op == ROL) {\n-                return blend(lanewise(op, v), m);\n-            } else if (op == AND_NOT) {\n+            if (op == AND_NOT) {\n@@ -758,0 +763,4 @@\n+            case VECTOR_OP_LROTATE: return (v0, v1, vm) ->\n+                    v0.bOp(v1, vm, (i, a, n) -> rotateLeft(a, (int)n));\n+            case VECTOR_OP_RROTATE: return (v0, v1, vm) ->\n+                    v0.bOp(v1, vm, (i, a, n) -> rotateRight(a, (int)n));\n@@ -892,5 +901,0 @@\n-        if (op == ROR || op == ROL) {  \/\/ FIXME: JIT should do this\n-            ShortVector hi = this.lanewise(LSHL, (op == ROR) ? -e : e);\n-            ShortVector lo = this.lanewise(LSHR, (op == ROR) ? e : -e);\n-            return hi.lanewise(OR, lo);\n-        }\n@@ -918,3 +922,0 @@\n-        if (op == ROR || op == ROL) {\n-            return blend(lanewiseShift(op, e), m);\n-        }\n@@ -940,0 +941,4 @@\n+            case VECTOR_OP_LROTATE: return (v, n, m) ->\n+                    v.uOp(m, (i, a) -> rotateLeft(a, (int)n));\n+            case VECTOR_OP_RROTATE: return (v, n, m) ->\n+                    v.uOp(m, (i, a) -> rotateRight(a, (int)n));\n@@ -3613,1 +3618,1 @@\n-        if (bb.isReadOnly()) {\n+        if (ScopedMemoryAccess.isReadOnly(bb)) {\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortVector.java","additions":23,"deletions":18,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -410,0 +410,22 @@\n+#if[BITWISE]\n+    \/*package-private*\/\n+    @ForceInline\n+    static $type$ rotateLeft($type$ a, int n) {\n+#if[intOrLong]\n+        return $Boxtype$.rotateLeft(a, n);\n+#else[intOrLong]\n+        return ($type$)((((($type$)a) & $Boxtype$.toUnsignedInt(($type$)-1)) << (n & $Boxtype$.SIZE-1)) | (((($type$)a) & $Boxtype$.toUnsignedInt(($type$)-1)) >>> ($Boxtype$.SIZE - (n & $Boxtype$.SIZE-1))));\n+#end[intOrLong]\n+    }\n+\n+    \/*package-private*\/\n+    @ForceInline\n+    static $type$ rotateRight($type$ a, int n) {\n+#if[intOrLong]\n+        return $Boxtype$.rotateRight(a, n);\n+#else[intOrLong]\n+        return ($type$)((((($type$)a) & $Boxtype$.toUnsignedInt(($type$)-1)) >>> (n & $Boxtype$.SIZE-1)) | (((($type$)a) & $Boxtype$.toUnsignedInt(($type$)-1)) << ($Boxtype$.SIZE - (n & $Boxtype$.SIZE-1))));\n+#end[intOrLong]\n+    }\n+#end[BITWISE]\n+\n@@ -710,6 +732,1 @@\n-            if (op == ROR || op == ROL) {  \/\/ FIXME: JIT should do this\n-                $abstractvectortype$ neg = that.lanewise(NEG);\n-                $abstractvectortype$ hi = this.lanewise(LSHL, (op == ROR) ? neg : that);\n-                $abstractvectortype$ lo = this.lanewise(LSHR, (op == ROR) ? that : neg);\n-                return hi.lanewise(OR, lo);\n-            } else if (op == AND_NOT) {\n+            if (op == AND_NOT) {\n@@ -773,3 +790,1 @@\n-            if (op == ROR || op == ROL) {\n-                return blend(lanewise(op, v), m);\n-            } else if (op == AND_NOT) {\n+            if (op == AND_NOT) {\n@@ -828,0 +843,4 @@\n+            case VECTOR_OP_LROTATE: return (v0, v1, vm) ->\n+                    v0.bOp(v1, vm, (i, a, n) -> rotateLeft(a, (int)n));\n+            case VECTOR_OP_RROTATE: return (v0, v1, vm) ->\n+                    v0.bOp(v1, vm, (i, a, n) -> rotateRight(a, (int)n));\n@@ -987,5 +1006,0 @@\n-        if (op == ROR || op == ROL) {  \/\/ FIXME: JIT should do this\n-            $abstractvectortype$ hi = this.lanewise(LSHL, (op == ROR) ? -e : e);\n-            $abstractvectortype$ lo = this.lanewise(LSHR, (op == ROR) ? e : -e);\n-            return hi.lanewise(OR, lo);\n-        }\n@@ -1013,3 +1027,0 @@\n-        if (op == ROR || op == ROL) {\n-            return blend(lanewiseShift(op, e), m);\n-        }\n@@ -1035,0 +1046,4 @@\n+            case VECTOR_OP_LROTATE: return (v, n, m) ->\n+                    v.uOp(m, (i, a) -> rotateLeft(a, (int)n));\n+            case VECTOR_OP_RROTATE: return (v, n, m) ->\n+                    v.uOp(m, (i, a) -> rotateRight(a, (int)n));\n@@ -4576,1 +4591,1 @@\n-        if (bb.isReadOnly()) {\n+        if (ScopedMemoryAccess.isReadOnly(bb)) {\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template","additions":33,"deletions":18,"binary":false,"changes":51,"status":"modified"}]}