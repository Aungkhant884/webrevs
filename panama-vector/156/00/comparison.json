{"files":[{"patch":"@@ -7954,1 +7954,1 @@\n-  assert(VM_Version::supports_avx(), \"\");\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -8013,1 +8013,1 @@\n-  assert(VM_Version::supports_avx2(), \"\");\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -8026,1 +8026,1 @@\n-  assert(VM_Version::supports_avx(), \"\");\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -11344,0 +11344,14 @@\n+void Assembler::pext(Register dst, Register src1, Register src2) {\n+  assert(VM_Version::supports_bmi2(), \"bit manipulation instructions not supported\");\n+  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ true, \/* legacy_mode *\/ true, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n+  int encode = vex_prefix_and_encode(dst->encoding(), src1->encoding(), src2->encoding(), VEX_SIMD_F3, VEX_OPCODE_0F_38, &attributes);\n+  emit_int16((unsigned char)0xF5, (0xC0 | encode));\n+}\n+\n+void Assembler::pdep(Register dst, Register src1, Register src2) {\n+  assert(VM_Version::supports_bmi2(), \"bit manipulation instructions not supported\");\n+  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ true, \/* legacy_mode *\/ true, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n+  int encode = vex_prefix_and_encode(dst->encoding(), src1->encoding(), src2->encoding(), VEX_SIMD_F2, VEX_OPCODE_0F_38, &attributes);\n+  emit_int16((unsigned char)0xF5, (0xC0 | encode));\n+}\n+\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":17,"deletions":3,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2179,0 +2179,2 @@\n+  void pext(Register dst, Register src1, Register src2);\n+  void pdep(Register dst, Register src1, Register src2);\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4114,2 +4114,54 @@\n-void C2_MacroAssembler::compress_expand(int opcode, XMMRegister dst, XMMRegister src, KRegister mask,\n-                                          bool merge, BasicType bt, int vec_enc) {\n+void C2_MacroAssembler::vector_mask_compress(XMMRegister dst, XMMRegister src, Register rtmp1,\n+                                             Register rtmp2, XMMRegister xtmp, int mask_len,\n+                                             int vec_enc) {\n+  int index = 0;\n+  int vindex = 0;\n+  vpxor(xtmp, xtmp, xtmp, vec_enc);\n+  vpsubb(xtmp, xtmp, src, vec_enc);\n+  vpmovmskb(rtmp1, xtmp, vec_enc);\n+  andq(rtmp1, (0xFFFFFFFFFFFFFFFFUL >> (64 - mask_len)));\n+  mov64(rtmp2, -1L);\n+  pext(rtmp2, rtmp2, rtmp1);\n+  mov64(rtmp1, 0x0101010101010101L);\n+  pdep(rtmp1, rtmp2, rtmp1);\n+  if (mask_len > 8) {\n+    movq(xtmp, rtmp1);\n+  }\n+  movq(dst, rtmp1);\n+\n+  mask_len -= 8;\n+  while (mask_len > 0) {\n+    assert ((mask_len & 0x7) == 0, \"mask must be multiple of 8\");\n+    index++;\n+    if ((index % 2) == 0) {\n+      pxor(xtmp, xtmp);\n+    }\n+    mov64(rtmp1, 0x0101010101010101L);\n+    shrq(rtmp2, 8);\n+    pdep(rtmp1, rtmp2, rtmp1);\n+    pinsrq(xtmp, rtmp1, index % 2);\n+    vindex = index \/ 2;\n+    if (vindex) {\n+      \/\/ Write entire 16 byte vector when both 64 bit\n+      \/\/ lanes are update to save redundant instructions.\n+      if (index % 2) {\n+        vinsertf128(dst, dst, xtmp, vindex);\n+      }\n+    } else {\n+      vmovdqu(dst, xtmp);\n+    }\n+    mask_len -= 8;\n+  }\n+}\n+\n+void C2_MacroAssembler::vector_mask_compress(KRegister dst, KRegister src, Register rtmp1,\n+                                             Register rtmp2, int mask_len) {\n+  kmov(rtmp1, src);\n+  andq(rtmp1, (0xFFFFFFFFFFFFFFFFUL >> (64 - mask_len)));\n+  mov64(rtmp2, -1L);\n+  pext(rtmp2, rtmp2, rtmp1);\n+  kmov(dst, rtmp2);\n+}\n+\n+void C2_MacroAssembler::vector_compress_expand(int opcode, XMMRegister dst, XMMRegister src, KRegister mask,\n+                                               bool merge, BasicType bt, int vec_enc) {\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":54,"deletions":2,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -95,2 +95,7 @@\n-  void compress_expand(int opcode, XMMRegister dst, XMMRegister src, KRegister mask,\n-                       bool merge, BasicType bt, int vec_enc);\n+  void vector_compress_expand(int opcode, XMMRegister dst, XMMRegister src, KRegister mask,\n+                              bool merge, BasicType bt, int vec_enc);\n+\n+  void vector_mask_compress(XMMRegister dst, XMMRegister src, Register rtmp1, Register rtmp2,\n+                            XMMRegister xtmp, int mask_len, int vec_enc);\n+\n+  void vector_mask_compress(KRegister dst, KRegister src, Register rtmp1, Register rtmp2, int mask_len);\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.hpp","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1837,0 +1837,5 @@\n+    case Op_CompressM:\n+      if (UseAVX < 1 || !VM_Version::supports_bmi2()) {\n+        return false;\n+      }\n+      break;\n@@ -8785,1 +8790,28 @@\n-    __ compress_expand(opcode, $dst$$XMMRegister, $src$$XMMRegister, $mask$$KRegister, false, bt, vector_len);\n+    __ vector_compress_expand(opcode, $dst$$XMMRegister, $src$$XMMRegister, $mask$$KRegister, false, bt, vector_len);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n+instruct vcompress_mask_reg_evex(kReg dst, kReg mask, rRegL rtmp1, rRegL rtmp2, rFlagsReg cr) %{\n+  predicate(n->in(1)->bottom_type()->isa_vectmask());\n+  match(Set dst (CompressM mask));\n+  effect(TEMP rtmp1, TEMP rtmp2, KILL cr);\n+  format %{ \"mask_compress_evex $dst, $mask\\t! using $rtmp1 and $rtmp2 as TEMP\" %}\n+  ins_encode %{\n+    int mask_len = Matcher::vector_length(this);\n+    __ vector_mask_compress($dst$$KRegister, $mask$$KRegister, $rtmp1$$Register, $rtmp2$$Register, mask_len);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n+instruct vcompress_mask_reg_avx(vec dst, vec mask, rRegL rtmp1, rRegL rtmp2, vec xtmp, rFlagsReg cr) %{\n+  predicate(n->in(1)->bottom_type()->isa_vectmask() == NULL);\n+  match(Set dst (CompressM mask));\n+  effect(TEMP dst, TEMP rtmp1, TEMP rtmp2, TEMP xtmp, KILL cr);\n+  format %{ \"mask_compress_avx $dst, $mask\\t! using $rtmp1, $rtmp2 and $xtmp as TEMP\" %}\n+  ins_encode %{\n+    assert(Matcher::vector_element_basic_type(this, $mask) == T_BOOLEAN, \"\");\n+    int mask_len = Matcher::vector_length(this, $mask);\n+    int vec_enc = vector_length_encoding(this);\n+    __ vector_mask_compress($dst$$XMMRegister, $mask$$XMMRegister, $rtmp1$$Register,\n+                            $rtmp2$$Register, $xtmp$$XMMRegister, mask_len, vec_enc);\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":33,"deletions":1,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -4218,1 +4218,1 @@\n-    \"CompressV\", \"ExpandV\",\n+    \"CompressV\", \"ExpandV\", \"CompressM\",\n","filename":"src\/hotspot\/share\/adlc\/formssel.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1103,1 +1103,1 @@\n-                                      \"Ljdk\/internal\/vm\/vector\/VectorSupport$Vector;\")                                                         \\\n+                                      \"Ljdk\/internal\/vm\/vector\/VectorSupport$VectorPayload;\")                                                  \\\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -415,0 +415,1 @@\n+macro(CompressM)\n","filename":"src\/hotspot\/share\/opto\/classes.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2265,0 +2265,1 @@\n+    case Op_CompressM:\n","filename":"src\/hotspot\/share\/opto\/matcher.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -179,0 +179,1 @@\n+class CompressMNode;\n@@ -717,0 +718,1 @@\n+        DEFINE_CLASS_ID(CompressM, Vector, 5)\n@@ -947,0 +949,1 @@\n+  DEFINE_CLASS_QUERY(CompressM);\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -85,1 +85,2 @@\n-      if (!Matcher::match_rule_supported_vector(Op_VectorLoadMask, num_elem, elem_bt)) {\n+      if (!Matcher::match_rule_supported_vector(Op_VectorLoadMask, num_elem, elem_bt) ||\n+          !Matcher::match_rule_supported_vector(Op_LoadVector, num_elem, T_BOOLEAN)) {\n@@ -255,1 +256,2 @@\n-    if (!Matcher::match_rule_supported_vector(Op_VectorLoadMask, num_elem, type)) {\n+    if (!Matcher::match_rule_supported_vector(Op_VectorLoadMask, num_elem, type) ||\n+        !Matcher::match_rule_supported_vector(Op_LoadVector, num_elem, T_BOOLEAN)) {\n@@ -268,1 +270,2 @@\n-    if (!Matcher::match_rule_supported_vector(Op_VectorStoreMask, num_elem, type)) {\n+    if (!Matcher::match_rule_supported_vector(Op_VectorStoreMask, num_elem, type) ||\n+        !Matcher::match_rule_supported_vector(Op_StoreVector, num_elem, T_BOOLEAN)) {\n@@ -2746,1 +2749,0 @@\n-  BasicType elem_bt = elem_type->basic_type();\n@@ -2748,0 +2750,1 @@\n+  BasicType elem_bt = elem_type->basic_type();\n@@ -2750,2 +2753,7 @@\n-  ciKlass* vbox_klass = vector_klass->const_oop()->as_instance()->java_lang_Class_klass();\n-  const TypeInstPtr* vbox_type = TypeInstPtr::make_exact(TypePtr::NotNull, vbox_klass);\n+  VectorMaskUseType checkFlags = VecMaskNotUsed;\n+  if (opc == Op_CompressM) {\n+     checkFlags = VecMaskUseAll;\n+  } else {\n+     assert(opc == Op_ExpandV || opc == Op_CompressV, \"\");\n+     checkFlags = VecMaskUseLoad;\n+  }\n@@ -2753,1 +2761,1 @@\n-  if (!arch_supports_vector(opc, num_elem, elem_bt, VecMaskUseLoad)) {\n+  if (!arch_supports_vector(opc, num_elem, elem_bt, checkFlags)) {\n@@ -2761,5 +2769,12 @@\n-  Node* opd1 = unbox_vector(argument(5), vbox_type, elem_bt, num_elem);\n-  if (opd1 == NULL) {\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** unbox failed vector=%s\",\n-                    NodeClassNames[argument(5)->Opcode()]);\n+  Node* opd1 = NULL;\n+  const TypeInstPtr* vbox_type = NULL;\n+  if (opc != Op_CompressM) {\n+    ciKlass* vbox_klass = vector_klass->const_oop()->as_instance()->java_lang_Class_klass();\n+    vbox_type = TypeInstPtr::make_exact(TypePtr::NotNull, vbox_klass);\n+    opd1 = unbox_vector(argument(5), vbox_type, elem_bt, num_elem);\n+    if (opd1 == NULL) {\n+      if (C->print_intrinsics()) {\n+        tty->print_cr(\"  ** unbox failed vector=%s\",\n+                      NodeClassNames[argument(5)->Opcode()]);\n+      }\n+      return false;\n@@ -2767,1 +2782,0 @@\n-    return false;\n@@ -2783,2 +2797,10 @@\n-  const TypeVect* vt = TypeVect::make(elem_bt, num_elem);\n-  Node* operation = gvn().transform(VectorNode::make(opc, opd1, mask, vt));\n+  Node* operation = NULL;\n+  const TypeVect* vt = TypeVect::make(elem_bt, num_elem, opc == Op_CompressM);\n+  if (opc == Op_CompressM && vt->isa_vectmask() == NULL) {\n+    mask = gvn().transform(VectorStoreMaskNode::make(gvn(), mask, elem_bt, num_elem));\n+    const TypeVect* ivt = TypeVect::make(T_BOOLEAN, num_elem);\n+    operation = gvn().transform(VectorNode::make(opc, opd1, mask, ivt));\n+    operation = gvn().transform(new VectorLoadMaskNode(operation, vt));\n+  } else {\n+    operation = gvn().transform(VectorNode::make(opc, opd1, mask, vt));\n+  }\n@@ -2787,1 +2809,2 @@\n-  Node* vbox = box_vector(operation, vbox_type, elem_bt, num_elem);\n+  const TypeInstPtr* box_type = opc == Op_CompressM ? mbox_type : vbox_type;\n+  Node* vbox = box_vector(operation, box_type, elem_bt, num_elem);\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":39,"deletions":16,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -554,0 +554,1 @@\n+  case Op_CompressM: assert(n1 == NULL, \"\"); return new CompressMNode(n2, vt);\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -727,0 +727,9 @@\n+class CompressMNode: public VectorNode {\n+ public:\n+  CompressMNode(Node* mask, const TypeVect* vt) :\n+      VectorNode(mask, vt) {\n+    init_class_id(Class_CompressM);\n+  }\n+  virtual int Opcode() const;\n+};\n+\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -469,0 +469,12 @@\n+    case VECTOR_OP_MASK_COMPRESS: {\n+      switch (bt) {\n+        case T_BYTE:  \/\/ fall-through\n+        case T_SHORT: \/\/ fall-through\n+        case T_INT:   \/\/ fall-through\n+        case T_LONG:  \/\/ fall-through\n+        case T_FLOAT: \/\/ fall-through\n+        case T_DOUBLE: return Op_CompressM;\n+        default: fatal(\"MASK_COMPRESS: %s\", type2name(bt));\n+      }\n+      break;\n+    }\n","filename":"src\/hotspot\/share\/prims\/vectorSupport.cpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -93,0 +93,1 @@\n+    VECTOR_OP_MASK_COMPRESS = 27,\n","filename":"src\/hotspot\/share\/prims\/vectorSupport.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -81,0 +81,1 @@\n+    public static final int VECTOR_OP_MASK_COMPRESS = 27;\n@@ -630,1 +631,1 @@\n-        V apply(V v, M m);\n+        VectorPayload apply(V v, M m);\n@@ -638,4 +639,4 @@\n-    V comExpOp(int opr,\n-              Class<? extends V> vClass, Class<? extends M> mClass, Class<E> eClass,\n-              int length, V v, M m,\n-              ComExpOperation<V, M> defaultImpl) {\n+    VectorPayload comExpOp(int opr,\n+                           Class<? extends V> vClass, Class<? extends M> mClass, Class<E> eClass,\n+                           int length, V v, M m,\n+                           ComExpOperation<V, M> defaultImpl) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/vector\/VectorSupport.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -690,0 +690,10 @@\n+        @Override\n+        @ForceInline\n+        public Byte128Mask compress() {\n+            return (Byte128Mask)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+                                                      Byte128Vector.class, Byte128Mask.class, byte.class,\n+                                                      VLENGTH, null, this,\n+                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+        }\n+\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte128Vector.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -722,0 +722,10 @@\n+        @Override\n+        @ForceInline\n+        public Byte256Mask compress() {\n+            return (Byte256Mask)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+                                                      Byte256Vector.class, Byte256Mask.class, byte.class,\n+                                                      VLENGTH, null, this,\n+                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+        }\n+\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte256Vector.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -786,0 +786,10 @@\n+        @Override\n+        @ForceInline\n+        public Byte512Mask compress() {\n+            return (Byte512Mask)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+                                                      Byte512Vector.class, Byte512Mask.class, byte.class,\n+                                                      VLENGTH, null, this,\n+                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+        }\n+\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte512Vector.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -674,0 +674,10 @@\n+        @Override\n+        @ForceInline\n+        public Byte64Mask compress() {\n+            return (Byte64Mask)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+                                                      Byte64Vector.class, Byte64Mask.class, byte.class,\n+                                                      VLENGTH, null, this,\n+                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+        }\n+\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte64Vector.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -660,0 +660,10 @@\n+        @Override\n+        @ForceInline\n+        public ByteMaxMask compress() {\n+            return (ByteMaxMask)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+                                                      ByteMaxVector.class, ByteMaxMask.class, byte.class,\n+                                                      VLENGTH, null, this,\n+                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+        }\n+\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteMaxVector.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2404,3 +2404,3 @@\n-      return VectorSupport.comExpOp(VectorSupport.VECTOR_OP_COMPRESS, getClass(), masktype,\n-                                    byte.class, length(), this, m,\n-                                    (v1, m1) -> compressHelper(v1, m1));\n+      return (ByteVector) VectorSupport.comExpOp(VectorSupport.VECTOR_OP_COMPRESS, getClass(), masktype,\n+                                                   byte.class, length(), this, m,\n+                                                   (v1, m1) -> compressHelper(v1, m1));\n@@ -2422,3 +2422,3 @@\n-      return VectorSupport.comExpOp(VectorSupport.VECTOR_OP_EXPAND, getClass(), masktype,\n-                                    byte.class, length(), this, m,\n-                                    (v1, m1) -> expandHelper(v1, m1));\n+      return (ByteVector) VectorSupport.comExpOp(VectorSupport.VECTOR_OP_EXPAND, getClass(), masktype,\n+                                                   byte.class, length(), this, m,\n+                                                   (v1, m1) -> expandHelper(v1, m1));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteVector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -651,0 +651,10 @@\n+        @Override\n+        @ForceInline\n+        public Double128Mask compress() {\n+            return (Double128Mask)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+                                                      Double128Vector.class, Double128Mask.class, double.class,\n+                                                      VLENGTH, null, this,\n+                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+        }\n+\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double128Vector.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -655,0 +655,10 @@\n+        @Override\n+        @ForceInline\n+        public Double256Mask compress() {\n+            return (Double256Mask)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+                                                      Double256Vector.class, Double256Mask.class, double.class,\n+                                                      VLENGTH, null, this,\n+                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+        }\n+\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double256Vector.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -663,0 +663,10 @@\n+        @Override\n+        @ForceInline\n+        public Double512Mask compress() {\n+            return (Double512Mask)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+                                                      Double512Vector.class, Double512Mask.class, double.class,\n+                                                      VLENGTH, null, this,\n+                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+        }\n+\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double512Vector.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -649,0 +649,10 @@\n+        @Override\n+        @ForceInline\n+        public Double64Mask compress() {\n+            return (Double64Mask)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+                                                      Double64Vector.class, Double64Mask.class, double.class,\n+                                                      VLENGTH, null, this,\n+                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+        }\n+\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double64Vector.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -648,0 +648,10 @@\n+        @Override\n+        @ForceInline\n+        public DoubleMaxMask compress() {\n+            return (DoubleMaxMask)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+                                                      DoubleMaxVector.class, DoubleMaxMask.class, double.class,\n+                                                      VLENGTH, null, this,\n+                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+        }\n+\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleMaxVector.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2250,3 +2250,3 @@\n-      return VectorSupport.comExpOp(VectorSupport.VECTOR_OP_COMPRESS, getClass(), masktype,\n-                                    double.class, length(), this, m,\n-                                    (v1, m1) -> compressHelper(v1, m1));\n+      return (DoubleVector) VectorSupport.comExpOp(VectorSupport.VECTOR_OP_COMPRESS, getClass(), masktype,\n+                                                   double.class, length(), this, m,\n+                                                   (v1, m1) -> compressHelper(v1, m1));\n@@ -2268,3 +2268,3 @@\n-      return VectorSupport.comExpOp(VectorSupport.VECTOR_OP_EXPAND, getClass(), masktype,\n-                                    double.class, length(), this, m,\n-                                    (v1, m1) -> expandHelper(v1, m1));\n+      return (DoubleVector) VectorSupport.comExpOp(VectorSupport.VECTOR_OP_EXPAND, getClass(), masktype,\n+                                                   double.class, length(), this, m,\n+                                                   (v1, m1) -> expandHelper(v1, m1));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleVector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -655,0 +655,10 @@\n+        @Override\n+        @ForceInline\n+        public Float128Mask compress() {\n+            return (Float128Mask)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+                                                      Float128Vector.class, Float128Mask.class, float.class,\n+                                                      VLENGTH, null, this,\n+                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+        }\n+\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float128Vector.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -663,0 +663,10 @@\n+        @Override\n+        @ForceInline\n+        public Float256Mask compress() {\n+            return (Float256Mask)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+                                                      Float256Vector.class, Float256Mask.class, float.class,\n+                                                      VLENGTH, null, this,\n+                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+        }\n+\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float256Vector.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -679,0 +679,10 @@\n+        @Override\n+        @ForceInline\n+        public Float512Mask compress() {\n+            return (Float512Mask)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+                                                      Float512Vector.class, Float512Mask.class, float.class,\n+                                                      VLENGTH, null, this,\n+                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+        }\n+\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float512Vector.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -651,0 +651,10 @@\n+        @Override\n+        @ForceInline\n+        public Float64Mask compress() {\n+            return (Float64Mask)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+                                                      Float64Vector.class, Float64Mask.class, float.class,\n+                                                      VLENGTH, null, this,\n+                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+        }\n+\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float64Vector.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -648,0 +648,10 @@\n+        @Override\n+        @ForceInline\n+        public FloatMaxMask compress() {\n+            return (FloatMaxMask)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+                                                      FloatMaxVector.class, FloatMaxMask.class, float.class,\n+                                                      VLENGTH, null, this,\n+                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+        }\n+\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatMaxVector.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2262,3 +2262,3 @@\n-      return VectorSupport.comExpOp(VectorSupport.VECTOR_OP_COMPRESS, getClass(), masktype,\n-                                    float.class, length(), this, m,\n-                                    (v1, m1) -> compressHelper(v1, m1));\n+      return (FloatVector) VectorSupport.comExpOp(VectorSupport.VECTOR_OP_COMPRESS, getClass(), masktype,\n+                                                   float.class, length(), this, m,\n+                                                   (v1, m1) -> compressHelper(v1, m1));\n@@ -2280,3 +2280,3 @@\n-      return VectorSupport.comExpOp(VectorSupport.VECTOR_OP_EXPAND, getClass(), masktype,\n-                                    float.class, length(), this, m,\n-                                    (v1, m1) -> expandHelper(v1, m1));\n+      return (FloatVector) VectorSupport.comExpOp(VectorSupport.VECTOR_OP_EXPAND, getClass(), masktype,\n+                                                   float.class, length(), this, m,\n+                                                   (v1, m1) -> expandHelper(v1, m1));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatVector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -666,0 +666,10 @@\n+        @Override\n+        @ForceInline\n+        public Int128Mask compress() {\n+            return (Int128Mask)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+                                                      Int128Vector.class, Int128Mask.class, int.class,\n+                                                      VLENGTH, null, this,\n+                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+        }\n+\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int128Vector.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -674,0 +674,10 @@\n+        @Override\n+        @ForceInline\n+        public Int256Mask compress() {\n+            return (Int256Mask)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+                                                      Int256Vector.class, Int256Mask.class, int.class,\n+                                                      VLENGTH, null, this,\n+                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+        }\n+\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int256Vector.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -690,0 +690,10 @@\n+        @Override\n+        @ForceInline\n+        public Int512Mask compress() {\n+            return (Int512Mask)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+                                                      Int512Vector.class, Int512Mask.class, int.class,\n+                                                      VLENGTH, null, this,\n+                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+        }\n+\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int512Vector.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -662,0 +662,10 @@\n+        @Override\n+        @ForceInline\n+        public Int64Mask compress() {\n+            return (Int64Mask)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+                                                      Int64Vector.class, Int64Mask.class, int.class,\n+                                                      VLENGTH, null, this,\n+                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+        }\n+\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int64Vector.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -660,0 +660,10 @@\n+        @Override\n+        @ForceInline\n+        public IntMaxMask compress() {\n+            return (IntMaxMask)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+                                                      IntMaxVector.class, IntMaxMask.class, int.class,\n+                                                      VLENGTH, null, this,\n+                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+        }\n+\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntMaxVector.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2403,3 +2403,3 @@\n-      return VectorSupport.comExpOp(VectorSupport.VECTOR_OP_COMPRESS, getClass(), masktype,\n-                                    int.class, length(), this, m,\n-                                    (v1, m1) -> compressHelper(v1, m1));\n+      return (IntVector) VectorSupport.comExpOp(VectorSupport.VECTOR_OP_COMPRESS, getClass(), masktype,\n+                                                   int.class, length(), this, m,\n+                                                   (v1, m1) -> compressHelper(v1, m1));\n@@ -2421,3 +2421,3 @@\n-      return VectorSupport.comExpOp(VectorSupport.VECTOR_OP_EXPAND, getClass(), masktype,\n-                                    int.class, length(), this, m,\n-                                    (v1, m1) -> expandHelper(v1, m1));\n+      return (IntVector) VectorSupport.comExpOp(VectorSupport.VECTOR_OP_EXPAND, getClass(), masktype,\n+                                                   int.class, length(), this, m,\n+                                                   (v1, m1) -> expandHelper(v1, m1));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntVector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -652,0 +652,10 @@\n+        @Override\n+        @ForceInline\n+        public Long128Mask compress() {\n+            return (Long128Mask)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+                                                      Long128Vector.class, Long128Mask.class, long.class,\n+                                                      VLENGTH, null, this,\n+                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+        }\n+\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long128Vector.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -656,0 +656,10 @@\n+        @Override\n+        @ForceInline\n+        public Long256Mask compress() {\n+            return (Long256Mask)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+                                                      Long256Vector.class, Long256Mask.class, long.class,\n+                                                      VLENGTH, null, this,\n+                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+        }\n+\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long256Vector.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -664,0 +664,10 @@\n+        @Override\n+        @ForceInline\n+        public Long512Mask compress() {\n+            return (Long512Mask)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+                                                      Long512Vector.class, Long512Mask.class, long.class,\n+                                                      VLENGTH, null, this,\n+                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+        }\n+\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long512Vector.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -650,0 +650,10 @@\n+        @Override\n+        @ForceInline\n+        public Long64Mask compress() {\n+            return (Long64Mask)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+                                                      Long64Vector.class, Long64Mask.class, long.class,\n+                                                      VLENGTH, null, this,\n+                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+        }\n+\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long64Vector.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -650,0 +650,10 @@\n+        @Override\n+        @ForceInline\n+        public LongMaxMask compress() {\n+            return (LongMaxMask)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+                                                      LongMaxVector.class, LongMaxMask.class, long.class,\n+                                                      VLENGTH, null, this,\n+                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+        }\n+\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongMaxVector.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2269,3 +2269,3 @@\n-      return VectorSupport.comExpOp(VectorSupport.VECTOR_OP_COMPRESS, getClass(), masktype,\n-                                    long.class, length(), this, m,\n-                                    (v1, m1) -> compressHelper(v1, m1));\n+      return (LongVector) VectorSupport.comExpOp(VectorSupport.VECTOR_OP_COMPRESS, getClass(), masktype,\n+                                                   long.class, length(), this, m,\n+                                                   (v1, m1) -> compressHelper(v1, m1));\n@@ -2287,3 +2287,3 @@\n-      return VectorSupport.comExpOp(VectorSupport.VECTOR_OP_EXPAND, getClass(), masktype,\n-                                    long.class, length(), this, m,\n-                                    (v1, m1) -> expandHelper(v1, m1));\n+      return (LongVector) VectorSupport.comExpOp(VectorSupport.VECTOR_OP_EXPAND, getClass(), masktype,\n+                                                   long.class, length(), this, m,\n+                                                   (v1, m1) -> expandHelper(v1, m1));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongVector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -674,0 +674,10 @@\n+        @Override\n+        @ForceInline\n+        public Short128Mask compress() {\n+            return (Short128Mask)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+                                                      Short128Vector.class, Short128Mask.class, short.class,\n+                                                      VLENGTH, null, this,\n+                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+        }\n+\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short128Vector.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -690,0 +690,10 @@\n+        @Override\n+        @ForceInline\n+        public Short256Mask compress() {\n+            return (Short256Mask)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+                                                      Short256Vector.class, Short256Mask.class, short.class,\n+                                                      VLENGTH, null, this,\n+                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+        }\n+\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short256Vector.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -722,0 +722,10 @@\n+        @Override\n+        @ForceInline\n+        public Short512Mask compress() {\n+            return (Short512Mask)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+                                                      Short512Vector.class, Short512Mask.class, short.class,\n+                                                      VLENGTH, null, this,\n+                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+        }\n+\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short512Vector.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -666,0 +666,10 @@\n+        @Override\n+        @ForceInline\n+        public Short64Mask compress() {\n+            return (Short64Mask)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+                                                      Short64Vector.class, Short64Mask.class, short.class,\n+                                                      VLENGTH, null, this,\n+                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+        }\n+\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short64Vector.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -660,0 +660,10 @@\n+        @Override\n+        @ForceInline\n+        public ShortMaxMask compress() {\n+            return (ShortMaxMask)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+                                                      ShortMaxVector.class, ShortMaxMask.class, short.class,\n+                                                      VLENGTH, null, this,\n+                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+        }\n+\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortMaxVector.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2404,3 +2404,3 @@\n-      return VectorSupport.comExpOp(VectorSupport.VECTOR_OP_COMPRESS, getClass(), masktype,\n-                                    short.class, length(), this, m,\n-                                    (v1, m1) -> compressHelper(v1, m1));\n+      return (ShortVector) VectorSupport.comExpOp(VectorSupport.VECTOR_OP_COMPRESS, getClass(), masktype,\n+                                                   short.class, length(), this, m,\n+                                                   (v1, m1) -> compressHelper(v1, m1));\n@@ -2422,3 +2422,3 @@\n-      return VectorSupport.comExpOp(VectorSupport.VECTOR_OP_EXPAND, getClass(), masktype,\n-                                    short.class, length(), this, m,\n-                                    (v1, m1) -> expandHelper(v1, m1));\n+      return (ShortVector) VectorSupport.comExpOp(VectorSupport.VECTOR_OP_EXPAND, getClass(), masktype,\n+                                                   short.class, length(), this, m,\n+                                                   (v1, m1) -> expandHelper(v1, m1));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortVector.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -634,5 +634,1 @@\n-    public final VectorMask<E> compress() {\n-        \/\/ Temporary implementation\n-        AbstractSpecies<E> species = (AbstractSpecies<E>) vectorSpecies();\n-        return species.iota().compare(VectorOperators.LT, trueCount());\n-    }\n+    public abstract VectorMask<E> compress();\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/VectorMask.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2701,3 +2701,3 @@\n-      return VectorSupport.comExpOp(VectorSupport.VECTOR_OP_COMPRESS, getClass(), masktype,\n-                                    $type$.class, length(), this, m,\n-                                    (v1, m1) -> compressHelper(v1, m1));\n+      return ($Type$Vector) VectorSupport.comExpOp(VectorSupport.VECTOR_OP_COMPRESS, getClass(), masktype,\n+                                                   $type$.class, length(), this, m,\n+                                                   (v1, m1) -> compressHelper(v1, m1));\n@@ -2719,3 +2719,3 @@\n-      return VectorSupport.comExpOp(VectorSupport.VECTOR_OP_EXPAND, getClass(), masktype,\n-                                    $type$.class, length(), this, m,\n-                                    (v1, m1) -> expandHelper(v1, m1));\n+      return ($Type$Vector) VectorSupport.comExpOp(VectorSupport.VECTOR_OP_EXPAND, getClass(), masktype,\n+                                                   $type$.class, length(), this, m,\n+                                                   (v1, m1) -> expandHelper(v1, m1));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -933,0 +933,10 @@\n+        @Override\n+        @ForceInline\n+        public $masktype$ compress() {\n+            return ($masktype$)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+                                                      $vectortype$.class, $masktype$.class, $type$.class,\n+                                                      VLENGTH, null, this,\n+                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+        }\n+\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-VectorBits.java.template","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"}]}