[{"commit":{"message":"8278468: AArch64: [vectorapi] SVE backend support for CompressM and CompressV(B\/H)\n\nThis patch adds the backend rules for CompressM and CompressV on BYTE\nand SHORT types. The basic idea is to use SVE compact instruction which\nsupports INT type. The general process for vector compression is as\nbelow:\n\n1. Split and extend the vector into INT type.\n2. Compresse the extended vectors by COMPACT(S) and narrow the\n   results back to original type.\n3. Merge the results by concatenating the compressed elements together.\n\nThe generated code by \"ShortVector.compress\" is as follows:\n\n```\n        mov       z19.h, #0\n        sunpklo   z17.s, z16.h\n        punpklo   p0.h, p1.b\n        compact   z17.s, p0, z17.s\n        uzp1      z17.h, z17.h, z19.h\n        cntp      x8, p7, p0.s\n        punpkhi   p0.h, p1.b\n        sunpkhi   z18.s, z16.h\n        compact   z18.s, p0, z18.s\n        uzp1      z18.h, z18.h, z19.h\n        neg       x8, x8\n        index     z19.h, w8, #1\n        tbl       z18.h, {z18.h}, z19.h\n        orr       z17.d, z17.d, z18.d\n```\n\nThe performance has a significant improvement in my test machines.\n\nChange-Id: I20d1668bf2522af5fb6d2c5ce289beb9ece3b241"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve_ad.m4"},{"filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.hpp"},{"filename":"test\/hotspot\/gtest\/aarch64\/aarch64-asmtest.py"},{"filename":"test\/hotspot\/gtest\/aarch64\/asmtest.out.h"}],"sha":"46fa278463ee44fd71aad52753a9de17f3415df2"}]