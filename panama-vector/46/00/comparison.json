{"files":[{"patch":"@@ -2804,0 +2804,13 @@\n+instruct vcvtFtoI(vReg dst, vReg src)\n+%{\n+  predicate(UseSVE > 0 && n->bottom_type()->is_vect()->length_in_bytes() >= 16 &&\n+            n->bottom_type()->is_vect()->element_basic_type() == T_INT);\n+  match(Set dst (VectorCastF2X src));\n+  ins_cost(SVE_COST);\n+  format %{ \"sve_fcvtzs  $dst, S, $src, S\\t# convert F to I vector\" %}\n+  ins_encode %{\n+    __ sve_fcvtzs(as_FloatRegister($dst$$reg), __ S, ptrue, as_FloatRegister($src$$reg), __ S);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n@@ -2849,0 +2862,58 @@\n+\n+\n+instruct vcvtFtoS(vReg dst, vReg src, vReg tmp)\n+%{\n+  predicate(UseSVE > 0 && n->bottom_type()->is_vect()->length_in_bytes() >= 16 &&\n+            n->bottom_type()->is_vect()->element_basic_type() == T_SHORT);\n+  match(Set dst (VectorCastF2X src));\n+  effect(TEMP tmp);\n+  ins_cost(3 * SVE_COST);\n+  format %{ \"sve_fcvtzs  $dst, S, $src, S\\n\\t\"\n+            \"sve_dup  $tmp, H, 0\\n\\t\"\n+            \"sve_uzp1  $dst, H, $dst, tmp\\t# convert F to S vector\" %}\n+  ins_encode %{\n+    __ sve_fcvtzs(as_FloatRegister($dst$$reg), __ S, ptrue, as_FloatRegister($src$$reg), __ S);\n+    __ sve_dup(as_FloatRegister($tmp$$reg), __ H, 0);\n+    __ sve_uzp1(as_FloatRegister($dst$$reg), __ H, as_FloatRegister($dst$$reg), as_FloatRegister($tmp$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\n+\n+instruct vcvtFtoB(vReg dst, vReg src, vReg tmp)\n+%{\n+  predicate(UseSVE > 0 && n->bottom_type()->is_vect()->length_in_bytes() >= 16 &&\n+            n->bottom_type()->is_vect()->element_basic_type() == T_BYTE);\n+  match(Set dst (VectorCastF2X src));\n+  effect(TEMP_DEF dst, TEMP tmp);\n+  ins_cost(4 * SVE_COST);\n+  format %{ \"sve_fcvtzs  $dst, S, $src, S\\n\\t\"\n+            \"sve_dup  $tmp, H, 0\\n\\t\"\n+            \"sve_uzp1  $dst, H, $dst, tmp\\n\\t\"\n+            \"sve_uzp1  $dst, B, $dst, tmp\\n\\t# convert F to B vector\" %}\n+  ins_encode %{\n+    __ sve_fcvtzs(as_FloatRegister($dst$$reg), __ S, ptrue, as_FloatRegister($src$$reg), __ S);\n+    __ sve_dup(as_FloatRegister($tmp$$reg), __ H, 0);\n+    __ sve_uzp1(as_FloatRegister($dst$$reg), __ H, as_FloatRegister($dst$$reg), as_FloatRegister($tmp$$reg));\n+    __ sve_uzp1(as_FloatRegister($dst$$reg), __ B, as_FloatRegister($dst$$reg), as_FloatRegister($tmp$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\n+\n+instruct vcvtFtoL(vReg dst, vReg src)\n+%{\n+  predicate(UseSVE > 0 && n->bottom_type()->is_vect()->length_in_bytes() >= 16 &&\n+            n->bottom_type()->is_vect()->element_basic_type() == T_LONG);\n+  match(Set dst (VectorCastF2X src));\n+  ins_cost(2 * SVE_COST);\n+  format %{ \"sve_fcvtzs  $dst, S, $src, S\\n\\t\"\n+            \"sve_sunpklo  $dst, D, $dst\\t# convert F to L vector\" %}\n+  ins_encode %{\n+    __ sve_fcvtzs(as_FloatRegister($dst$$reg), __ S, ptrue, as_FloatRegister($src$$reg), __ S);\n+    __ sve_sunpklo(as_FloatRegister($dst$$reg), __ D, as_FloatRegister($dst$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve.ad","additions":71,"deletions":0,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -1657,1 +1657,1 @@\n-define(`VECTOR_CAST_I2F', `\n+define(`VECTOR_CAST_X2X', `\n@@ -1670,3 +1670,4 @@\n-dnl             $1 $2 $3     $4\n-VECTOR_CAST_I2F(I, F, scvtf, S)\n-VECTOR_CAST_I2F(L, D, scvtf, D)\n+dnl             $1 $2 $3      $4\n+VECTOR_CAST_X2X(I, F, scvtf,  S)\n+VECTOR_CAST_X2X(L, D, scvtf,  D)\n+VECTOR_CAST_X2X(F, I, fcvtzs, S)\n@@ -1694,0 +1695,67 @@\n+\n+dnl\n+define(`VECTOR_CAST_F2X_NARROW1', `\n+instruct vcvt$1to$2`'(vReg dst, vReg src, vReg tmp)\n+%{\n+  predicate(UseSVE > 0 && n->bottom_type()->is_vect()->length_in_bytes() >= 16 &&\n+            n->bottom_type()->is_vect()->element_basic_type() == T_`'TYPE2DATATYPE($2));\n+  match(Set dst (VectorCast$1`'2X src));\n+  effect(TEMP tmp);\n+  ins_cost(3 * SVE_COST);\n+  format %{ \"sve_$3  $dst, $4, $src, $4\\n\\t\"\n+            \"sve_$5  $tmp, $6, 0\\n\\t\"\n+            \"sve_$7  $dst, $6, $dst, tmp\\t# convert $1 to $2 vector\" %}\n+  ins_encode %{\n+    __ sve_$3(as_FloatRegister($dst$$reg), __ $4, ptrue, as_FloatRegister($src$$reg), __ $4);\n+    __ sve_$5(as_FloatRegister($tmp$$reg), __ $6, 0);\n+    __ sve_$7(as_FloatRegister($dst$$reg), __ $6, as_FloatRegister($dst$$reg), as_FloatRegister($tmp$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}')dnl\n+dnl                     $1 $2 $3      $4 $5   $6 $7\n+VECTOR_CAST_F2X_NARROW1(F, S, fcvtzs, S, dup, H, uzp1)\n+\n+\n+dnl\n+define(`VECTOR_CAST_F2X_NARROW2', `\n+instruct vcvt$1to$2`'(vReg dst, vReg src, vReg tmp)\n+%{\n+  predicate(UseSVE > 0 && n->bottom_type()->is_vect()->length_in_bytes() >= 16 &&\n+            n->bottom_type()->is_vect()->element_basic_type() == T_`'TYPE2DATATYPE($2));\n+  match(Set dst (VectorCast$1`'2X src));\n+  effect(TEMP_DEF dst, TEMP tmp);\n+  ins_cost(4 * SVE_COST);\n+  format %{ \"sve_$3  $dst, $4, $src, $4\\n\\t\"\n+            \"sve_$5  $tmp, $6, 0\\n\\t\"\n+            \"sve_$7  $dst, $6, $dst, tmp\\n\\t\"\n+            \"sve_$7  $dst, $8, $dst, tmp\\n\\t# convert $1 to $2 vector\" %}\n+  ins_encode %{\n+    __ sve_$3(as_FloatRegister($dst$$reg), __ $4, ptrue, as_FloatRegister($src$$reg), __ $4);\n+    __ sve_$5(as_FloatRegister($tmp$$reg), __ $6, 0);\n+    __ sve_$7(as_FloatRegister($dst$$reg), __ $6, as_FloatRegister($dst$$reg), as_FloatRegister($tmp$$reg));\n+    __ sve_$7(as_FloatRegister($dst$$reg), __ $8, as_FloatRegister($dst$$reg), as_FloatRegister($tmp$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}')dnl\n+dnl                     $1 $2 $3      $4 $5   $6 $7    $8\n+VECTOR_CAST_F2X_NARROW2(F, B, fcvtzs, S, dup, H, uzp1, B)\n+\n+\n+dnl\n+define(`VECTOR_CAST_F2X_EXTEND1', `\n+instruct vcvt$1to$2`'(vReg dst, vReg src)\n+%{\n+  predicate(UseSVE > 0 && n->bottom_type()->is_vect()->length_in_bytes() >= 16 &&\n+            n->bottom_type()->is_vect()->element_basic_type() == T_`'TYPE2DATATYPE($2));\n+  match(Set dst (VectorCast$1`'2X src));\n+  ins_cost(2 * SVE_COST);\n+  format %{ \"sve_$3  $dst, $4, $src, $4\\n\\t\"\n+            \"sve_$5  $dst, $6, $dst\\t# convert $1 to $2 vector\" %}\n+  ins_encode %{\n+    __ sve_$3(as_FloatRegister($dst$$reg), __ $4, ptrue, as_FloatRegister($src$$reg), __ $4);\n+    __ sve_$5(as_FloatRegister($dst$$reg), __ $6, as_FloatRegister($dst$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}')dnl\n+dnl                     $1 $2 $3      $4 $5       $6\n+VECTOR_CAST_F2X_EXTEND1(F, L, fcvtzs, S, sunpklo, D)\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve_ad.m4","additions":72,"deletions":4,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -3455,0 +3455,50 @@\n+private:\n+\n+  void encode_fcvtz_T (SIMD_RegVariant T_dst, SIMD_RegVariant T_src,\n+                       unsigned& opc, unsigned& opc2) {\n+    assert(T_src != B && T_dst != B &&\n+           T_src != Q && T_dst != Q, \"invalid register variant\");\n+    if (T_src != D) {\n+      assert(T_src <= T_dst, \"invalid register variant\");\n+    } else {\n+      assert(T_dst != H, \"invalid register variant\");\n+    }\n+    \/\/ In most cases we can treat T_dst,T_src as opc2,opc\n+    \/\/ except following four cases. These cases should be converted\n+    \/\/ according to Arm's architecture reference manual:\n+    \/\/ +-----+------+---+-------------------------------------+\n+    \/\/ | opc | opc2 | U |        Instruction Details          |\n+    \/\/ +-----+------+---+-------------------------------------+\n+    \/\/ |  11 |   10 | 0 | FCVTZS — Single-precision to 64-bit |\n+    \/\/ |  11 |   10 | 1 | FCVTZU — Single-precision to 64-bit |\n+    \/\/ |  11 |   00 | 0 | FCVTZS — Double-precision to 32-bit |\n+    \/\/ |  11 |   00 | 1 | FCVTZU — Double-precision to 32-bit |\n+    \/\/ +-----+------+---+-------------------------------------+\n+    if (T_dst == D && T_src == S) { \/\/ Single-precision to 64-bit\n+      T_dst = S;\n+      T_src = D;\n+    } else if (T_dst == S && T_src == D) { \/\/ Double-precision to 32-bit\n+      T_dst = B;\n+      T_src = D;\n+    }\n+    opc = T_src;\n+    opc2 = T_dst;\n+  }\n+public:\n+\n+\/\/ SVE floating-point convert to integer (predicated)\n+#define INSN(NAME, sign)                                                \\\n+  void NAME(FloatRegister Zd, SIMD_RegVariant T_dst, PRegister Pg,      \\\n+            FloatRegister Zn, SIMD_RegVariant T_src) {                  \\\n+    starti;                                                             \\\n+    unsigned opc, opc2;                                                 \\\n+    encode_fcvtz_T(T_dst, T_src, opc, opc2);                            \\\n+    f(0b01100101, 31, 24), f(opc, 23, 22), f(0b011, 21, 19);            \\\n+    f(opc2, 18, 17), f(sign, 16), f(0b101, 15, 13);                     \\\n+    pgrf(Pg, 10), rf(Zn, 5), rf(Zd, 0);                                 \\\n+  }\n+\n+  INSN(sve_fcvtzs, 0b0);\n+  INSN(sve_fcvtzu, 0b1);\n+#undef INSN\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":50,"deletions":0,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -1593,0 +1593,2 @@\n+                        [\"fcvtzs\",  \"__ sve_fcvtzs(z19, __ D, p2, z18, __ D);\",           \"fcvtzs\\tz19.d, p2\/m, z18.d\"],\n+                        [\"fcvtzu\",  \"__ sve_fcvtzu(z19, __ D, p2, z18, __ D);\",           \"fcvtzu\\tz19.d, p2\/m, z18.d\"],\n","filename":"test\/hotspot\/gtest\/aarch64\/aarch64-asmtest.py","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -778,0 +778,2 @@\n+    __ sve_fcvtzs(z19, __ D, p2, z18, __ D);           \/\/       fcvtzs  z19.d, p2\/m, z18.d\n+    __ sve_fcvtzu(z19, __ D, p2, z18, __ D);           \/\/       fcvtzu  z19.d, p2\/m, z18.d\n@@ -983,7 +985,7 @@\n-    0x14000000,     0x17ffffd7,     0x1400030e,     0x94000000,\n-    0x97ffffd4,     0x9400030b,     0x3400000a,     0x34fffa2a,\n-    0x3400610a,     0x35000008,     0x35fff9c8,     0x350060a8,\n-    0xb400000b,     0xb4fff96b,     0xb400604b,     0xb500001d,\n-    0xb5fff91d,     0xb5005ffd,     0x10000013,     0x10fff8b3,\n-    0x10005f93,     0x90000013,     0x36300016,     0x3637f836,\n-    0x36305f16,     0x3758000c,     0x375ff7cc,     0x37585eac,\n+    0x14000000,     0x17ffffd7,     0x14000310,     0x94000000,\n+    0x97ffffd4,     0x9400030d,     0x3400000a,     0x34fffa2a,\n+    0x3400614a,     0x35000008,     0x35fff9c8,     0x350060e8,\n+    0xb400000b,     0xb4fff96b,     0xb400608b,     0xb500001d,\n+    0xb5fff91d,     0xb500603d,     0x10000013,     0x10fff8b3,\n+    0x10005fd3,     0x90000013,     0x36300016,     0x3637f836,\n+    0x36305f56,     0x3758000c,     0x375ff7cc,     0x37585eec,\n@@ -994,13 +996,13 @@\n-    0x54005c80,     0x54000001,     0x54fff541,     0x54005c21,\n-    0x54000002,     0x54fff4e2,     0x54005bc2,     0x54000002,\n-    0x54fff482,     0x54005b62,     0x54000003,     0x54fff423,\n-    0x54005b03,     0x54000003,     0x54fff3c3,     0x54005aa3,\n-    0x54000004,     0x54fff364,     0x54005a44,     0x54000005,\n-    0x54fff305,     0x540059e5,     0x54000006,     0x54fff2a6,\n-    0x54005986,     0x54000007,     0x54fff247,     0x54005927,\n-    0x54000008,     0x54fff1e8,     0x540058c8,     0x54000009,\n-    0x54fff189,     0x54005869,     0x5400000a,     0x54fff12a,\n-    0x5400580a,     0x5400000b,     0x54fff0cb,     0x540057ab,\n-    0x5400000c,     0x54fff06c,     0x5400574c,     0x5400000d,\n-    0x54fff00d,     0x540056ed,     0x5400000e,     0x54ffefae,\n-    0x5400568e,     0x5400000f,     0x54ffef4f,     0x5400562f,\n+    0x54005cc0,     0x54000001,     0x54fff541,     0x54005c61,\n+    0x54000002,     0x54fff4e2,     0x54005c02,     0x54000002,\n+    0x54fff482,     0x54005ba2,     0x54000003,     0x54fff423,\n+    0x54005b43,     0x54000003,     0x54fff3c3,     0x54005ae3,\n+    0x54000004,     0x54fff364,     0x54005a84,     0x54000005,\n+    0x54fff305,     0x54005a25,     0x54000006,     0x54fff2a6,\n+    0x540059c6,     0x54000007,     0x54fff247,     0x54005967,\n+    0x54000008,     0x54fff1e8,     0x54005908,     0x54000009,\n+    0x54fff189,     0x540058a9,     0x5400000a,     0x54fff12a,\n+    0x5400584a,     0x5400000b,     0x54fff0cb,     0x540057eb,\n+    0x5400000c,     0x54fff06c,     0x5400578c,     0x5400000d,\n+    0x54fff00d,     0x5400572d,     0x5400000e,     0x54ffefae,\n+    0x540056ce,     0x5400000f,     0x54ffef4f,     0x5400566f,\n@@ -1038,1 +1040,1 @@\n-    0xbd1b1869,     0x5800467b,     0x1800000b,     0xf8945060,\n+    0xbd1b1869,     0x580046bb,     0x1800000b,     0xf8945060,\n@@ -1138,42 +1140,42 @@\n-    0x65d0a001,     0x65d1a443,     0x65cbac85,     0x1e601000,\n-    0x1e603000,     0x1e621000,     0x1e623000,     0x1e641000,\n-    0x1e643000,     0x1e661000,     0x1e663000,     0x1e681000,\n-    0x1e683000,     0x1e6a1000,     0x1e6a3000,     0x1e6c1000,\n-    0x1e6c3000,     0x1e6e1000,     0x1e6e3000,     0x1e701000,\n-    0x1e703000,     0x1e721000,     0x1e723000,     0x1e741000,\n-    0x1e743000,     0x1e761000,     0x1e763000,     0x1e781000,\n-    0x1e783000,     0x1e7a1000,     0x1e7a3000,     0x1e7c1000,\n-    0x1e7c3000,     0x1e7e1000,     0x1e7e3000,     0xf8238358,\n-    0xf83702af,     0xf8231118,     0xf8392214,     0xf8313022,\n-    0xf8205098,     0xf82343ec,     0xf83c734a,     0xf82261ec,\n-    0xf8bf81a1,     0xf8bd0260,     0xf8ac12d1,     0xf8ad23dc,\n-    0xf8bf3341,     0xf8bc53c4,     0xf8a443c6,     0xf8ba7130,\n-    0xf8a8600c,     0xf8f48301,     0xf8e20120,     0xf8f8121a,\n-    0xf8fe2143,     0xf8f7308a,     0xf8f05162,     0xf8e841ea,\n-    0xf8f17142,     0xf8ec61ec,     0xf86d80e2,     0xf874021a,\n-    0xf8641082,     0xf86c22b0,     0xf8703170,     0xf8755197,\n-    0xf87a4397,     0xf86e730b,     0xf86163ec,     0xb82a80f0,\n-    0xb82201a3,     0xb8331211,     0xb8232161,     0xb83e3105,\n-    0xb82f53dd,     0xb82040f4,     0xb8347397,     0xb835633b,\n-    0xb8a582e1,     0xb8b000bf,     0xb8ac1389,     0xb8af22dd,\n-    0xb8bf33f3,     0xb8a551ee,     0xb8bf4370,     0xb8b47190,\n-    0xb8ab60c9,     0xb8fe8371,     0xb8fc00fe,     0xb8ea1154,\n-    0xb8e42238,     0xb8f13076,     0xb8fd52cf,     0xb8f342d3,\n-    0xb8e270cf,     0xb8ec6170,     0xb86d8037,     0xb87e00b3,\n-    0xb8711202,     0xb876214d,     0xb875337d,     0xb86c507b,\n-    0xb861431f,     0xb8737131,     0xb87c61fb,     0xce367a86,\n-    0xce1e6858,     0xce768d51,     0xce910451,     0xce768338,\n-    0xce6c8622,     0xcec08363,     0xce708b9d,     0x04e900da,\n-    0x042404f1,     0x6596012f,     0x65d40b62,     0x65c00745,\n-    0x0456a72e,     0x04c0175b,     0x04109418,     0x041ab006,\n-    0x0413812f,     0x04118b65,     0x04101694,     0x04d7aa0a,\n-    0x045eb046,     0x04c81c5d,     0x044a1dd6,     0x040112fb,\n-    0x04dcad42,     0x65809aca,     0x658d9603,     0x65c69201,\n-    0x65878d8c,     0x65c28290,     0x04dda4e5,     0x65c2be0c,\n-    0x6580a386,     0x65c1a624,     0x658dae6d,     0x65819638,\n-    0x65f318ca,     0x65a030cd,     0x65a8532e,     0x65bb76d6,\n-    0x04144e23,     0x04407ce4,     0x04363270,     0x04b6312f,\n-    0x047e30b9,     0x052b6acd,     0x05b46d0d,     0x041a2c99,\n-    0x04d828d1,     0x04d93e04,     0x040829da,     0x040a3c6b,\n-    0x65c73aa1,     0x65c62a2e,     0x65d82678,     0x04c13611,\n-\n+    0x65d0a001,     0x65d1a443,     0x65cbac85,     0x65deaa53,\n+    0x65dfaa53,     0x1e601000,     0x1e603000,     0x1e621000,\n+    0x1e623000,     0x1e641000,     0x1e643000,     0x1e661000,\n+    0x1e663000,     0x1e681000,     0x1e683000,     0x1e6a1000,\n+    0x1e6a3000,     0x1e6c1000,     0x1e6c3000,     0x1e6e1000,\n+    0x1e6e3000,     0x1e701000,     0x1e703000,     0x1e721000,\n+    0x1e723000,     0x1e741000,     0x1e743000,     0x1e761000,\n+    0x1e763000,     0x1e781000,     0x1e783000,     0x1e7a1000,\n+    0x1e7a3000,     0x1e7c1000,     0x1e7c3000,     0x1e7e1000,\n+    0x1e7e3000,     0xf8238358,     0xf83702af,     0xf8231118,\n+    0xf8392214,     0xf8313022,     0xf8205098,     0xf82343ec,\n+    0xf83c734a,     0xf82261ec,     0xf8bf81a1,     0xf8bd0260,\n+    0xf8ac12d1,     0xf8ad23dc,     0xf8bf3341,     0xf8bc53c4,\n+    0xf8a443c6,     0xf8ba7130,     0xf8a8600c,     0xf8f48301,\n+    0xf8e20120,     0xf8f8121a,     0xf8fe2143,     0xf8f7308a,\n+    0xf8f05162,     0xf8e841ea,     0xf8f17142,     0xf8ec61ec,\n+    0xf86d80e2,     0xf874021a,     0xf8641082,     0xf86c22b0,\n+    0xf8703170,     0xf8755197,     0xf87a4397,     0xf86e730b,\n+    0xf86163ec,     0xb82a80f0,     0xb82201a3,     0xb8331211,\n+    0xb8232161,     0xb83e3105,     0xb82f53dd,     0xb82040f4,\n+    0xb8347397,     0xb835633b,     0xb8a582e1,     0xb8b000bf,\n+    0xb8ac1389,     0xb8af22dd,     0xb8bf33f3,     0xb8a551ee,\n+    0xb8bf4370,     0xb8b47190,     0xb8ab60c9,     0xb8fe8371,\n+    0xb8fc00fe,     0xb8ea1154,     0xb8e42238,     0xb8f13076,\n+    0xb8fd52cf,     0xb8f342d3,     0xb8e270cf,     0xb8ec6170,\n+    0xb86d8037,     0xb87e00b3,     0xb8711202,     0xb876214d,\n+    0xb875337d,     0xb86c507b,     0xb861431f,     0xb8737131,\n+    0xb87c61fb,     0xce367a86,     0xce1e6858,     0xce768d51,\n+    0xce910451,     0xce768338,     0xce6c8622,     0xcec08363,\n+    0xce708b9d,     0x04e900da,     0x042404f1,     0x6596012f,\n+    0x65d40b62,     0x65c00745,     0x0456a72e,     0x04c0175b,\n+    0x04109418,     0x041ab006,     0x0413812f,     0x04118b65,\n+    0x04101694,     0x04d7aa0a,     0x045eb046,     0x04c81c5d,\n+    0x044a1dd6,     0x040112fb,     0x04dcad42,     0x65809aca,\n+    0x658d9603,     0x65c69201,     0x65878d8c,     0x65c28290,\n+    0x04dda4e5,     0x65c2be0c,     0x6580a386,     0x65c1a624,\n+    0x658dae6d,     0x65819638,     0x65f318ca,     0x65a030cd,\n+    0x65a8532e,     0x65bb76d6,     0x04144e23,     0x04407ce4,\n+    0x04363270,     0x04b6312f,     0x047e30b9,     0x052b6acd,\n+    0x05b46d0d,     0x041a2c99,     0x04d828d1,     0x04d93e04,\n+    0x040829da,     0x040a3c6b,     0x65c73aa1,     0x65c62a2e,\n+    0x65d82678,     0x04c13611,\n","filename":"test\/hotspot\/gtest\/aarch64\/asmtest.out.h","additions":65,"deletions":63,"binary":false,"changes":128,"status":"modified"}]}