{"files":[{"patch":"@@ -4864,0 +4864,16 @@\n+void Assembler::vpopcntb(XMMRegister dst, XMMRegister src, int vector_len) {\n+  assert(VM_Version::supports_avx512_bitalg(), \"must support avx512bitalg feature\");\n+  InstructionAttr attributes(vector_len, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ true);\n+  attributes.set_is_evex_instruction();\n+  int encode = vex_prefix_and_encode(dst->encoding(), 0, src->encoding(), VEX_SIMD_66, VEX_OPCODE_0F_38, &attributes);\n+  emit_int16(0x54, (0xC0 | encode));\n+}\n+\n+void Assembler::vpopcntw(XMMRegister dst, XMMRegister src, int vector_len) {\n+  assert(VM_Version::supports_avx512_bitalg(), \"must support avx512bitalg feature\");\n+  InstructionAttr attributes(vector_len, \/* vex_w *\/ true, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ true);\n+  attributes.set_is_evex_instruction();\n+  int encode = vex_prefix_and_encode(dst->encoding(), 0, src->encoding(), VEX_SIMD_66, VEX_OPCODE_0F_38, &attributes);\n+  emit_int16(0x54, (0xC0 | encode));\n+}\n+\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -1868,0 +1868,2 @@\n+  void vpopcntb(XMMRegister dst, XMMRegister src, int vector_len);\n+  void vpopcntw(XMMRegister dst, XMMRegister src, int vector_len);\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4467,2 +4467,1 @@\n-                                            XMMRegister xtmp2, XMMRegister xtmp3, Register rtmp,\n-                                            int vec_enc) {\n+                                            XMMRegister xtmp2, Register rtmp, int vec_enc) {\n@@ -4471,0 +4470,26 @@\n+  } else {\n+    vector_popcount_byte(xtmp1, src, dst, xtmp2, rtmp, vec_enc);\n+    vpxor(xtmp2, xtmp2, xtmp2, vec_enc);\n+    vpunpckhdq(dst, xtmp1, xtmp2, vec_enc);\n+    vpsadbw(dst, dst, xtmp2, vec_enc);\n+    vpunpckldq(xtmp1, xtmp1, xtmp2, vec_enc);\n+    vpsadbw(xtmp1, xtmp1, xtmp2, vec_enc);\n+    vpackuswb(dst, xtmp1, dst, vec_enc);\n+  }\n+}\n+\n+void C2_MacroAssembler::vbroadcastd(XMMRegister dst, Register rtmp, int imm32, int vec_enc) {\n+  if (VM_Version::supports_avx512vl()) {\n+    movl(rtmp, imm32);\n+    evpbroadcastd(dst, rtmp, vec_enc);\n+  } else {\n+    movl(rtmp, imm32);\n+    movdl(dst, rtmp);\n+    vpbroadcastd(dst, dst, vec_enc);\n+  }\n+}\n+\n+void C2_MacroAssembler::vector_popcount_short(XMMRegister dst, XMMRegister src, XMMRegister xtmp1,\n+                                              XMMRegister xtmp2, Register rtmp, int vec_enc) {\n+  if (VM_Version::supports_avx512_bitalg()) {\n+    vpopcntw(dst, src, vec_enc);\n@@ -4473,10 +4498,15 @@\n-    movl(rtmp, 0x0F0F0F0F);\n-    movdl(xtmp1, rtmp);\n-    vpbroadcastd(xtmp1, xtmp1, vec_enc);\n-    if (Assembler::AVX_512bit == vec_enc) {\n-      evmovdqul(xtmp2, k0, ExternalAddress(StubRoutines::x86::vector_popcount_lut()), false, vec_enc, rtmp);\n-    } else {\n-      vmovdqu(xtmp2, ExternalAddress(StubRoutines::x86::vector_popcount_lut()), rtmp);\n-    }\n-    vpand(xtmp3, src, xtmp1, vec_enc);\n-    vpshufb(xtmp3, xtmp2, xtmp3, vec_enc);\n+    vector_popcount_byte(xtmp1, src, dst, xtmp2, rtmp, vec_enc);\n+    vbroadcastd(xtmp2, rtmp, 0x00FF00FF, vec_enc);\n+    vpsrlw(dst, xtmp1, 8, vec_enc);\n+    vpand(xtmp1, xtmp1, xtmp2, vec_enc);\n+    vpaddw(dst, dst, xtmp1, vec_enc);\n+  }\n+}\n+\n+void C2_MacroAssembler::vector_popcount_byte(XMMRegister dst, XMMRegister src, XMMRegister xtmp1,\n+                                             XMMRegister xtmp2, Register rtmp, int vec_enc) {\n+  if (VM_Version::supports_avx512_bitalg()) {\n+    vpopcntb(dst, src, vec_enc);\n+  } else {\n+    assert((vec_enc == Assembler::AVX_512bit && VM_Version::supports_avx512bw()) || VM_Version::supports_avx2(), \"\");\n+    vbroadcastd(xtmp1, rtmp, 0x0F0F0F0F, vec_enc);\n@@ -4485,0 +4515,3 @@\n+    vpand(xtmp1, src, xtmp1, vec_enc);\n+    vmovdqu(xtmp2, ExternalAddress(StubRoutines::x86::vector_popcount_lut()), rtmp, vec_enc);\n+    vpshufb(xtmp1, xtmp2, xtmp1, vec_enc);\n@@ -4486,7 +4519,1 @@\n-    vpaddb(xtmp3, dst, xtmp3, vec_enc);\n-    vpxor(xtmp1, xtmp1, xtmp1, vec_enc);\n-    vpunpckhdq(dst, xtmp3, xtmp1, vec_enc);\n-    vpsadbw(dst, dst, xtmp1, vec_enc);\n-    vpunpckldq(xtmp2, xtmp3, xtmp1, vec_enc);\n-    vpsadbw(xtmp2, xtmp2, xtmp1, vec_enc);\n-    vpackuswb(dst, xtmp2, dst, vec_enc);\n+    vpaddb(dst, dst, xtmp1, vec_enc);\n@@ -4496,2 +4523,2 @@\n-void C2_MacroAssembler::vector_popcount_long(BasicType bt, XMMRegister dst, XMMRegister src, XMMRegister xtmp1,\n-                                             XMMRegister xtmp2, XMMRegister xtmp3, Register rtmp, int vec_enc) {\n+void C2_MacroAssembler::vector_popcount_long(BasicType rbt, XMMRegister dst, XMMRegister src, XMMRegister xtmp1,\n+                                             XMMRegister xtmp2, Register rtmp, int vec_enc) {\n@@ -4501,13 +4528,3 @@\n-    assert(VM_Version::supports_avx512bw(), \"\");\n-    movl(rtmp, 0x0F0F0F0F);\n-    movdl(xtmp1, rtmp);\n-    vpbroadcastd(xtmp1, xtmp1, vec_enc);\n-    evmovdqul(xtmp2, k0, ExternalAddress(StubRoutines::x86::vector_popcount_lut()), true, vec_enc, rtmp);\n-    vpandq(xtmp3, src, xtmp1, vec_enc);\n-    vpshufb(xtmp3, xtmp2, xtmp3, vec_enc);\n-    vpsrlw(dst, src, 4, vec_enc);\n-    vpandq(dst, dst, xtmp1, vec_enc);\n-    vpshufb(dst, xtmp2, dst, vec_enc);\n-    vpaddb(xtmp3, dst, xtmp3, vec_enc);\n-    vpxorq(xtmp1, xtmp1, xtmp1, vec_enc);\n-    vpsadbw(dst, xtmp3, xtmp1, vec_enc);\n+    vector_popcount_byte(xtmp1, src, dst, xtmp2, rtmp, vec_enc);\n+    vpxorq(xtmp2, xtmp2, xtmp2, vec_enc);\n+    vpsadbw(dst, xtmp1, xtmp2, vec_enc);\n@@ -4520,1 +4537,1 @@\n-  if (bt == T_INT) {\n+  if (rbt == T_INT) {\n@@ -4525,0 +4542,18 @@\n+void C2_MacroAssembler::vector_popcount_integral(BasicType bt, XMMRegister dst, XMMRegister src, XMMRegister xtmp1,\n+                                                 XMMRegister xtmp2, Register rtmp, int vec_enc) {\n+  switch(bt) {\n+    case T_INT:\n+      vector_popcount_int(dst, src, xtmp1, xtmp2, rtmp, vec_enc);\n+      break;\n+    case T_SHORT:\n+      vector_popcount_short(dst, src, xtmp1, xtmp2, rtmp, vec_enc);\n+      break;\n+    case T_BYTE:\n+      vector_popcount_byte(dst, src, xtmp1, xtmp2, rtmp, vec_enc);\n+      break;\n+    default:\n+      ShouldNotReachHere();\n+  }\n+}\n+\n+\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":70,"deletions":35,"binary":false,"changes":105,"status":"modified"},{"patch":"@@ -325,2 +325,1 @@\n-                           XMMRegister xtmp2, XMMRegister xtmp3, Register rtmp,\n-                           int vec_enc);\n+                           XMMRegister xtmp2, Register rtmp, int vec_enc);\n@@ -328,2 +327,13 @@\n-  void vector_popcount_long(BasicType bt, XMMRegister dst, XMMRegister src, XMMRegister xtmp1,\n-                            XMMRegister xtmp2, XMMRegister xtmp3, Register rtmp, int vec_enc);\n+  void vector_popcount_long(BasicType rbt, XMMRegister dst, XMMRegister src, XMMRegister xtmp1,\n+                            XMMRegister xtmp2, Register rtmp, int vec_enc);\n+\n+  void vector_popcount_short(XMMRegister dst, XMMRegister src, XMMRegister xtmp1,\n+                             XMMRegister xtmp2, Register rtmp, int vec_enc);\n+\n+  void vector_popcount_byte(XMMRegister dst, XMMRegister src, XMMRegister xtmp1,\n+                            XMMRegister xtmp2, Register rtmp, int vec_enc);\n+\n+  void vector_popcount_integral(BasicType bt, XMMRegister dst, XMMRegister src, XMMRegister xtmp1,\n+                                XMMRegister xtmp2, Register rtmp, int vec_enc);\n+\n+  void vbroadcastd(XMMRegister dst, Register rtmp, int imm32, int vec_enc);\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.hpp","additions":14,"deletions":4,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2535,2 +2535,4 @@\n-  assert(vector_len <= AVX_256bit, \"AVX2 vector length\");\n-  if (vector_len == AVX_256bit) {\n+  assert(vector_len <= AVX_512bit, \"unexpected vector length\");\n+  if (vector_len == AVX_512bit) {\n+    evmovdqul(dst, k0, src, true, vector_len, scratch_reg);\n+  } else if (vector_len == AVX_256bit) {\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -190,2 +190,5 @@\n-      case Op_PopCountVI: return VM_Version::supports_avx512_vpopcntdq() ? 0 : 50;\n-      case Op_PopCountVL: return VM_Version::supports_avx512_vpopcntdq() ? 0 : 40;\n+      case Op_PopCountVI:\n+        return ((ety == T_INT && VM_Version::supports_avx512_vpopcntdq()) ||\n+           (is_subword_type(ety) && VM_Version::supports_avx512_bitalg())) ? 0 : 50;\n+      case Op_PopCountVL:\n+        return VM_Version::supports_avx512_vpopcntdq() ? 0 : 40;\n","filename":"src\/hotspot\/cpu\/x86\/matcher_x86.hpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -925,0 +925,1 @@\n+    _features &= ~CPU_AVX512_BITALG;\n@@ -954,0 +955,1 @@\n+      _features &= ~CPU_AVX512_BITALG;\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -364,1 +364,2 @@\n-    decl(SERIALIZE,         \"serialize\",         47) \/* CPU SERIALIZE *\/\n+    decl(SERIALIZE,         \"serialize\",         47) \/* CPU SERIALIZE *\/ \\\n+    decl(AVX512_BITALG,     \"avx512_bitalg\",     48)\n@@ -596,0 +597,2 @@\n+        if (_cpuid_info.sef_cpuid7_ecx.bits.avx512_bitalg != 0)\n+          result |= CPU_AVX512_BITALG;\n@@ -901,0 +904,1 @@\n+  static bool supports_avx512_bitalg()  { return (_features & CPU_AVX512_BITALG) != 0; }\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.hpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1897,2 +1897,3 @@\n-      if (!VM_Version::supports_avx512_vpopcntdq() &&\n-          (vlen == 16) && !VM_Version::supports_avx512bw()) {\n+      if (((bt == T_INT && !VM_Version::supports_avx512_vpopcntdq()) ||\n+           (is_subword_type(bt) && !VM_Version::supports_avx512_bitalg())) &&\n+           (size_in_bits == 512) && !VM_Version::supports_avx512bw()) {\n@@ -8619,1 +8620,2 @@\n-  predicate(VM_Version::supports_avx512_vpopcntdq());\n+  predicate((VM_Version::supports_avx512_vpopcntdq() && Matcher::vector_element_basic_type(n->in(1)) == T_INT) ||\n+            (VM_Version::supports_avx512_bitalg() && is_subword_type(Matcher::vector_element_basic_type(n->in(1)))));\n@@ -8624,0 +8626,1 @@\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n@@ -8625,1 +8628,1 @@\n-    __ vector_popcount_int($dst$$XMMRegister, $src$$XMMRegister, xnoreg, xnoreg, xnoreg, noreg, vlen_enc);\n+    __ vector_popcount_integral(bt, $dst$$XMMRegister, $src$$XMMRegister, xnoreg, xnoreg, noreg, vlen_enc);\n@@ -8630,2 +8633,3 @@\n-instruct vpopcountI(vec dst, vec src, vec xtmp1, vec xtmp2, vec xtmp3, rRegP rtmp, rFlagsReg cc) %{\n-  predicate(!VM_Version::supports_avx512_vpopcntdq());\n+instruct vpopcountI(vec dst, vec src, vec xtmp1, vec xtmp2, rRegP rtmp, rFlagsReg cc) %{\n+  predicate((!VM_Version::supports_avx512_vpopcntdq() && Matcher::vector_element_basic_type(n->in(1)) == T_INT) ||\n+            (!VM_Version::supports_avx512_bitalg() && is_subword_type(Matcher::vector_element_basic_type(n->in(1)))));\n@@ -8633,2 +8637,2 @@\n-  effect(TEMP dst, TEMP xtmp1, TEMP xtmp2, TEMP xtmp3, TEMP rtmp, KILL cc);\n-  format %{ \"vector_popcount_int  $dst, $src\\t! using $xtmp1, $xtmp2, $xtmp3, and $rtmp as TEMP\" %}\n+  effect(TEMP dst, TEMP xtmp1, TEMP xtmp2, TEMP rtmp, KILL cc);\n+  format %{ \"vector_popcount_int  $dst, $src\\t! using $xtmp1, $xtmp2 and $rtmp as TEMP\" %}\n@@ -8637,0 +8641,1 @@\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n@@ -8638,2 +8643,2 @@\n-    __ vector_popcount_int($dst$$XMMRegister, $src$$XMMRegister, $xtmp1$$XMMRegister, $xtmp2$$XMMRegister,\n-                           $xtmp3$$XMMRegister, $rtmp$$Register, vlen_enc);\n+    __ vector_popcount_integral(bt, $dst$$XMMRegister, $src$$XMMRegister, $xtmp1$$XMMRegister,\n+                                $xtmp2$$XMMRegister, $rtmp$$Register, vlen_enc);\n@@ -8651,2 +8656,2 @@\n-    BasicType bt = Matcher::vector_element_basic_type(this);\n-    __ vector_popcount_long(bt, $dst$$XMMRegister, $src$$XMMRegister, xnoreg, xnoreg, xnoreg, noreg, vlen_enc);\n+    BasicType rbt = Matcher::vector_element_basic_type(this);\n+    __ vector_popcount_long(rbt, $dst$$XMMRegister, $src$$XMMRegister, xnoreg, xnoreg, noreg, vlen_enc);\n@@ -8665,3 +8670,3 @@\n-    BasicType bt = Matcher::vector_element_basic_type(this);\n-    __ vector_popcount_long(bt, $dst$$XMMRegister, $src$$XMMRegister, $xtmp1$$XMMRegister, $xtmp2$$XMMRegister,\n-                            $xtmp3$$XMMRegister, $rtmp$$Register, vlen_enc);\n+    BasicType rbt = Matcher::vector_element_basic_type(this);\n+    __ vector_popcount_long(rbt, $dst$$XMMRegister, $src$$XMMRegister, $xtmp1$$XMMRegister,\n+                            $xtmp2$$XMMRegister, $rtmp$$Register, vlen_enc);\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":20,"deletions":15,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -154,3 +154,4 @@\n-    \/\/ Unimplemented for subword types since bit count changes\n-    \/\/ depending on size of lane (and sign bit).\n-    return (bt == T_INT ? Op_PopCountVI : 0);\n+    case T_BYTE:\n+    case T_SHORT:\n+    case T_INT:\n+    return Op_PopCountVI;\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"}]}