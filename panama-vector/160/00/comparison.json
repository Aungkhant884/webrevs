{"files":[{"patch":"@@ -919,2 +919,4 @@\n-                                      \"Ljdk\/internal\/vm\/vector\/VectorSupport$Vector;\"                                                          \\\n-                                      \"Ljava\/lang\/Object;ILjdk\/internal\/vm\/vector\/VectorSupport$StoreVectorOperation;)\"                        \\\n+                                      \"Ljdk\/internal\/vm\/vector\/VectorSupport$VectorPayload;\"                                                   \\\n+                                      \"Ljava\/lang\/Object;\"                                                                                     \\\n+                                      \"I\"                                                                                                      \\\n+                                      \"Ljdk\/internal\/vm\/vector\/VectorSupport$StoreVectorOperation;)\"                                           \\\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1049,0 +1049,5 @@\n+    } else {\n+      \/\/ Special handle for masks\n+      if (is_mask) {\n+        val = gvn().transform(VectorStoreMaskNode::make(gvn(), val, elem_bt, num_elem));\n+      }\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -435,2 +435,2 @@\n-                                          V extends Vector<?>> {\n-        void store(C container, int index, V v);\n+                                          VM extends VectorPayload> {\n+        void store(C container, int index, VM v);\n@@ -442,2 +442,2 @@\n-     V extends Vector<?>>\n-    void store(Class<?> vClass, Class<?> eClass,\n+     VM extends VectorPayload>\n+    void store(Class<?> vmClass, Class<?> eClass,\n@@ -446,2 +446,2 @@\n-               V v, C container, int index,\n-               StoreVectorOperation<C, V> defaultImpl) {\n+               VM v, C container, int index,\n+               StoreVectorOperation<C, VM> defaultImpl) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/vector\/VectorSupport.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -78,7 +78,5 @@\n-    public void intoArray(boolean[] bits, int i) {\n-        System.arraycopy(getBits(), 0, bits, i, length());\n-    }\n-\n-    @Override\n-    public boolean[] toArray() {\n-        return getBits().clone();\n+    @ForceInline\n+    public final boolean[] toArray() {\n+        boolean[] res = new boolean[length()];\n+        intoArray(res, 0);\n+        return res;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/AbstractMask.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -666,0 +667,12 @@\n+        \/\/ Mask Store operations\n+\n+        @Override\n+        @ForceInline\n+        public void intoArray(boolean[] bits, int offset) {\n+            offset = VectorIntrinsics.checkFromIndexSize(offset, VLENGTH, bits.length);\n+            VectorSupport.store(Byte128Mask.class, byte.class, VLENGTH,\n+                    bits, (long) offset + Unsafe.ARRAY_BOOLEAN_BASE_OFFSET,\n+                    this, bits, offset,\n+                    (c, idx, v) -> System.arraycopy(v.getBits(), 0, c, idx, VLENGTH));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte128Vector.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -698,0 +699,12 @@\n+        \/\/ Mask Store operations\n+\n+        @Override\n+        @ForceInline\n+        public void intoArray(boolean[] bits, int offset) {\n+            offset = VectorIntrinsics.checkFromIndexSize(offset, VLENGTH, bits.length);\n+            VectorSupport.store(Byte256Mask.class, byte.class, VLENGTH,\n+                    bits, (long) offset + Unsafe.ARRAY_BOOLEAN_BASE_OFFSET,\n+                    this, bits, offset,\n+                    (c, idx, v) -> System.arraycopy(v.getBits(), 0, c, idx, VLENGTH));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte256Vector.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -762,0 +763,12 @@\n+        \/\/ Mask Store operations\n+\n+        @Override\n+        @ForceInline\n+        public void intoArray(boolean[] bits, int offset) {\n+            offset = VectorIntrinsics.checkFromIndexSize(offset, VLENGTH, bits.length);\n+            VectorSupport.store(Byte512Mask.class, byte.class, VLENGTH,\n+                    bits, (long) offset + Unsafe.ARRAY_BOOLEAN_BASE_OFFSET,\n+                    this, bits, offset,\n+                    (c, idx, v) -> System.arraycopy(v.getBits(), 0, c, idx, VLENGTH));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte512Vector.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -650,0 +651,12 @@\n+        \/\/ Mask Store operations\n+\n+        @Override\n+        @ForceInline\n+        public void intoArray(boolean[] bits, int offset) {\n+            offset = VectorIntrinsics.checkFromIndexSize(offset, VLENGTH, bits.length);\n+            VectorSupport.store(Byte64Mask.class, byte.class, VLENGTH,\n+                    bits, (long) offset + Unsafe.ARRAY_BOOLEAN_BASE_OFFSET,\n+                    this, bits, offset,\n+                    (c, idx, v) -> System.arraycopy(v.getBits(), 0, c, idx, VLENGTH));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte64Vector.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -636,0 +637,12 @@\n+        \/\/ Mask Store operations\n+\n+        @Override\n+        @ForceInline\n+        public void intoArray(boolean[] bits, int offset) {\n+            offset = VectorIntrinsics.checkFromIndexSize(offset, VLENGTH, bits.length);\n+            VectorSupport.store(ByteMaxMask.class, byte.class, VLENGTH,\n+                    bits, (long) offset + Unsafe.ARRAY_BOOLEAN_BASE_OFFSET,\n+                    this, bits, offset,\n+                    (c, idx, v) -> System.arraycopy(v.getBits(), 0, c, idx, VLENGTH));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteMaxVector.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -627,0 +628,12 @@\n+        \/\/ Mask Store operations\n+\n+        @Override\n+        @ForceInline\n+        public void intoArray(boolean[] bits, int offset) {\n+            offset = VectorIntrinsics.checkFromIndexSize(offset, VLENGTH, bits.length);\n+            VectorSupport.store(Double128Mask.class, long.class, VLENGTH,\n+                    bits, (long) offset + Unsafe.ARRAY_BOOLEAN_BASE_OFFSET,\n+                    this, bits, offset,\n+                    (c, idx, v) -> System.arraycopy(v.getBits(), 0, c, idx, VLENGTH));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double128Vector.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -631,0 +632,12 @@\n+        \/\/ Mask Store operations\n+\n+        @Override\n+        @ForceInline\n+        public void intoArray(boolean[] bits, int offset) {\n+            offset = VectorIntrinsics.checkFromIndexSize(offset, VLENGTH, bits.length);\n+            VectorSupport.store(Double256Mask.class, long.class, VLENGTH,\n+                    bits, (long) offset + Unsafe.ARRAY_BOOLEAN_BASE_OFFSET,\n+                    this, bits, offset,\n+                    (c, idx, v) -> System.arraycopy(v.getBits(), 0, c, idx, VLENGTH));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double256Vector.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -639,0 +640,12 @@\n+        \/\/ Mask Store operations\n+\n+        @Override\n+        @ForceInline\n+        public void intoArray(boolean[] bits, int offset) {\n+            offset = VectorIntrinsics.checkFromIndexSize(offset, VLENGTH, bits.length);\n+            VectorSupport.store(Double512Mask.class, long.class, VLENGTH,\n+                    bits, (long) offset + Unsafe.ARRAY_BOOLEAN_BASE_OFFSET,\n+                    this, bits, offset,\n+                    (c, idx, v) -> System.arraycopy(v.getBits(), 0, c, idx, VLENGTH));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double512Vector.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -625,0 +626,12 @@\n+        \/\/ Mask Store operations\n+\n+        @Override\n+        @ForceInline\n+        public void intoArray(boolean[] bits, int offset) {\n+            offset = VectorIntrinsics.checkFromIndexSize(offset, VLENGTH, bits.length);\n+            VectorSupport.store(Double64Mask.class, long.class, VLENGTH,\n+                    bits, (long) offset + Unsafe.ARRAY_BOOLEAN_BASE_OFFSET,\n+                    this, bits, offset,\n+                    (c, idx, v) -> System.arraycopy(v.getBits(), 0, c, idx, VLENGTH));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double64Vector.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -624,0 +625,12 @@\n+        \/\/ Mask Store operations\n+\n+        @Override\n+        @ForceInline\n+        public void intoArray(boolean[] bits, int offset) {\n+            offset = VectorIntrinsics.checkFromIndexSize(offset, VLENGTH, bits.length);\n+            VectorSupport.store(DoubleMaxMask.class, long.class, VLENGTH,\n+                    bits, (long) offset + Unsafe.ARRAY_BOOLEAN_BASE_OFFSET,\n+                    this, bits, offset,\n+                    (c, idx, v) -> System.arraycopy(v.getBits(), 0, c, idx, VLENGTH));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleMaxVector.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -631,0 +632,12 @@\n+        \/\/ Mask Store operations\n+\n+        @Override\n+        @ForceInline\n+        public void intoArray(boolean[] bits, int offset) {\n+            offset = VectorIntrinsics.checkFromIndexSize(offset, VLENGTH, bits.length);\n+            VectorSupport.store(Float128Mask.class, int.class, VLENGTH,\n+                    bits, (long) offset + Unsafe.ARRAY_BOOLEAN_BASE_OFFSET,\n+                    this, bits, offset,\n+                    (c, idx, v) -> System.arraycopy(v.getBits(), 0, c, idx, VLENGTH));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float128Vector.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -639,0 +640,12 @@\n+        \/\/ Mask Store operations\n+\n+        @Override\n+        @ForceInline\n+        public void intoArray(boolean[] bits, int offset) {\n+            offset = VectorIntrinsics.checkFromIndexSize(offset, VLENGTH, bits.length);\n+            VectorSupport.store(Float256Mask.class, int.class, VLENGTH,\n+                    bits, (long) offset + Unsafe.ARRAY_BOOLEAN_BASE_OFFSET,\n+                    this, bits, offset,\n+                    (c, idx, v) -> System.arraycopy(v.getBits(), 0, c, idx, VLENGTH));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float256Vector.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -655,0 +656,12 @@\n+        \/\/ Mask Store operations\n+\n+        @Override\n+        @ForceInline\n+        public void intoArray(boolean[] bits, int offset) {\n+            offset = VectorIntrinsics.checkFromIndexSize(offset, VLENGTH, bits.length);\n+            VectorSupport.store(Float512Mask.class, int.class, VLENGTH,\n+                    bits, (long) offset + Unsafe.ARRAY_BOOLEAN_BASE_OFFSET,\n+                    this, bits, offset,\n+                    (c, idx, v) -> System.arraycopy(v.getBits(), 0, c, idx, VLENGTH));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float512Vector.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -627,0 +628,12 @@\n+        \/\/ Mask Store operations\n+\n+        @Override\n+        @ForceInline\n+        public void intoArray(boolean[] bits, int offset) {\n+            offset = VectorIntrinsics.checkFromIndexSize(offset, VLENGTH, bits.length);\n+            VectorSupport.store(Float64Mask.class, int.class, VLENGTH,\n+                    bits, (long) offset + Unsafe.ARRAY_BOOLEAN_BASE_OFFSET,\n+                    this, bits, offset,\n+                    (c, idx, v) -> System.arraycopy(v.getBits(), 0, c, idx, VLENGTH));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float64Vector.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -624,0 +625,12 @@\n+        \/\/ Mask Store operations\n+\n+        @Override\n+        @ForceInline\n+        public void intoArray(boolean[] bits, int offset) {\n+            offset = VectorIntrinsics.checkFromIndexSize(offset, VLENGTH, bits.length);\n+            VectorSupport.store(FloatMaxMask.class, int.class, VLENGTH,\n+                    bits, (long) offset + Unsafe.ARRAY_BOOLEAN_BASE_OFFSET,\n+                    this, bits, offset,\n+                    (c, idx, v) -> System.arraycopy(v.getBits(), 0, c, idx, VLENGTH));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatMaxVector.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -642,0 +643,12 @@\n+        \/\/ Mask Store operations\n+\n+        @Override\n+        @ForceInline\n+        public void intoArray(boolean[] bits, int offset) {\n+            offset = VectorIntrinsics.checkFromIndexSize(offset, VLENGTH, bits.length);\n+            VectorSupport.store(Int128Mask.class, int.class, VLENGTH,\n+                    bits, (long) offset + Unsafe.ARRAY_BOOLEAN_BASE_OFFSET,\n+                    this, bits, offset,\n+                    (c, idx, v) -> System.arraycopy(v.getBits(), 0, c, idx, VLENGTH));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int128Vector.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -650,0 +651,12 @@\n+        \/\/ Mask Store operations\n+\n+        @Override\n+        @ForceInline\n+        public void intoArray(boolean[] bits, int offset) {\n+            offset = VectorIntrinsics.checkFromIndexSize(offset, VLENGTH, bits.length);\n+            VectorSupport.store(Int256Mask.class, int.class, VLENGTH,\n+                    bits, (long) offset + Unsafe.ARRAY_BOOLEAN_BASE_OFFSET,\n+                    this, bits, offset,\n+                    (c, idx, v) -> System.arraycopy(v.getBits(), 0, c, idx, VLENGTH));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int256Vector.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -666,0 +667,12 @@\n+        \/\/ Mask Store operations\n+\n+        @Override\n+        @ForceInline\n+        public void intoArray(boolean[] bits, int offset) {\n+            offset = VectorIntrinsics.checkFromIndexSize(offset, VLENGTH, bits.length);\n+            VectorSupport.store(Int512Mask.class, int.class, VLENGTH,\n+                    bits, (long) offset + Unsafe.ARRAY_BOOLEAN_BASE_OFFSET,\n+                    this, bits, offset,\n+                    (c, idx, v) -> System.arraycopy(v.getBits(), 0, c, idx, VLENGTH));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int512Vector.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -638,0 +639,12 @@\n+        \/\/ Mask Store operations\n+\n+        @Override\n+        @ForceInline\n+        public void intoArray(boolean[] bits, int offset) {\n+            offset = VectorIntrinsics.checkFromIndexSize(offset, VLENGTH, bits.length);\n+            VectorSupport.store(Int64Mask.class, int.class, VLENGTH,\n+                    bits, (long) offset + Unsafe.ARRAY_BOOLEAN_BASE_OFFSET,\n+                    this, bits, offset,\n+                    (c, idx, v) -> System.arraycopy(v.getBits(), 0, c, idx, VLENGTH));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int64Vector.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -636,0 +637,12 @@\n+        \/\/ Mask Store operations\n+\n+        @Override\n+        @ForceInline\n+        public void intoArray(boolean[] bits, int offset) {\n+            offset = VectorIntrinsics.checkFromIndexSize(offset, VLENGTH, bits.length);\n+            VectorSupport.store(IntMaxMask.class, int.class, VLENGTH,\n+                    bits, (long) offset + Unsafe.ARRAY_BOOLEAN_BASE_OFFSET,\n+                    this, bits, offset,\n+                    (c, idx, v) -> System.arraycopy(v.getBits(), 0, c, idx, VLENGTH));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntMaxVector.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -628,0 +629,12 @@\n+        \/\/ Mask Store operations\n+\n+        @Override\n+        @ForceInline\n+        public void intoArray(boolean[] bits, int offset) {\n+            offset = VectorIntrinsics.checkFromIndexSize(offset, VLENGTH, bits.length);\n+            VectorSupport.store(Long128Mask.class, long.class, VLENGTH,\n+                    bits, (long) offset + Unsafe.ARRAY_BOOLEAN_BASE_OFFSET,\n+                    this, bits, offset,\n+                    (c, idx, v) -> System.arraycopy(v.getBits(), 0, c, idx, VLENGTH));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long128Vector.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -632,0 +633,12 @@\n+        \/\/ Mask Store operations\n+\n+        @Override\n+        @ForceInline\n+        public void intoArray(boolean[] bits, int offset) {\n+            offset = VectorIntrinsics.checkFromIndexSize(offset, VLENGTH, bits.length);\n+            VectorSupport.store(Long256Mask.class, long.class, VLENGTH,\n+                    bits, (long) offset + Unsafe.ARRAY_BOOLEAN_BASE_OFFSET,\n+                    this, bits, offset,\n+                    (c, idx, v) -> System.arraycopy(v.getBits(), 0, c, idx, VLENGTH));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long256Vector.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -640,0 +641,12 @@\n+        \/\/ Mask Store operations\n+\n+        @Override\n+        @ForceInline\n+        public void intoArray(boolean[] bits, int offset) {\n+            offset = VectorIntrinsics.checkFromIndexSize(offset, VLENGTH, bits.length);\n+            VectorSupport.store(Long512Mask.class, long.class, VLENGTH,\n+                    bits, (long) offset + Unsafe.ARRAY_BOOLEAN_BASE_OFFSET,\n+                    this, bits, offset,\n+                    (c, idx, v) -> System.arraycopy(v.getBits(), 0, c, idx, VLENGTH));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long512Vector.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -626,0 +627,12 @@\n+        \/\/ Mask Store operations\n+\n+        @Override\n+        @ForceInline\n+        public void intoArray(boolean[] bits, int offset) {\n+            offset = VectorIntrinsics.checkFromIndexSize(offset, VLENGTH, bits.length);\n+            VectorSupport.store(Long64Mask.class, long.class, VLENGTH,\n+                    bits, (long) offset + Unsafe.ARRAY_BOOLEAN_BASE_OFFSET,\n+                    this, bits, offset,\n+                    (c, idx, v) -> System.arraycopy(v.getBits(), 0, c, idx, VLENGTH));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long64Vector.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -626,0 +627,12 @@\n+        \/\/ Mask Store operations\n+\n+        @Override\n+        @ForceInline\n+        public void intoArray(boolean[] bits, int offset) {\n+            offset = VectorIntrinsics.checkFromIndexSize(offset, VLENGTH, bits.length);\n+            VectorSupport.store(LongMaxMask.class, long.class, VLENGTH,\n+                    bits, (long) offset + Unsafe.ARRAY_BOOLEAN_BASE_OFFSET,\n+                    this, bits, offset,\n+                    (c, idx, v) -> System.arraycopy(v.getBits(), 0, c, idx, VLENGTH));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongMaxVector.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -650,0 +651,12 @@\n+        \/\/ Mask Store operations\n+\n+        @Override\n+        @ForceInline\n+        public void intoArray(boolean[] bits, int offset) {\n+            offset = VectorIntrinsics.checkFromIndexSize(offset, VLENGTH, bits.length);\n+            VectorSupport.store(Short128Mask.class, short.class, VLENGTH,\n+                    bits, (long) offset + Unsafe.ARRAY_BOOLEAN_BASE_OFFSET,\n+                    this, bits, offset,\n+                    (c, idx, v) -> System.arraycopy(v.getBits(), 0, c, idx, VLENGTH));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short128Vector.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -666,0 +667,12 @@\n+        \/\/ Mask Store operations\n+\n+        @Override\n+        @ForceInline\n+        public void intoArray(boolean[] bits, int offset) {\n+            offset = VectorIntrinsics.checkFromIndexSize(offset, VLENGTH, bits.length);\n+            VectorSupport.store(Short256Mask.class, short.class, VLENGTH,\n+                    bits, (long) offset + Unsafe.ARRAY_BOOLEAN_BASE_OFFSET,\n+                    this, bits, offset,\n+                    (c, idx, v) -> System.arraycopy(v.getBits(), 0, c, idx, VLENGTH));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short256Vector.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -698,0 +699,12 @@\n+        \/\/ Mask Store operations\n+\n+        @Override\n+        @ForceInline\n+        public void intoArray(boolean[] bits, int offset) {\n+            offset = VectorIntrinsics.checkFromIndexSize(offset, VLENGTH, bits.length);\n+            VectorSupport.store(Short512Mask.class, short.class, VLENGTH,\n+                    bits, (long) offset + Unsafe.ARRAY_BOOLEAN_BASE_OFFSET,\n+                    this, bits, offset,\n+                    (c, idx, v) -> System.arraycopy(v.getBits(), 0, c, idx, VLENGTH));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short512Vector.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -642,0 +643,12 @@\n+        \/\/ Mask Store operations\n+\n+        @Override\n+        @ForceInline\n+        public void intoArray(boolean[] bits, int offset) {\n+            offset = VectorIntrinsics.checkFromIndexSize(offset, VLENGTH, bits.length);\n+            VectorSupport.store(Short64Mask.class, short.class, VLENGTH,\n+                    bits, (long) offset + Unsafe.ARRAY_BOOLEAN_BASE_OFFSET,\n+                    this, bits, offset,\n+                    (c, idx, v) -> System.arraycopy(v.getBits(), 0, c, idx, VLENGTH));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short64Vector.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -636,0 +637,12 @@\n+        \/\/ Mask Store operations\n+\n+        @Override\n+        @ForceInline\n+        public void intoArray(boolean[] bits, int offset) {\n+            offset = VectorIntrinsics.checkFromIndexSize(offset, VLENGTH, bits.length);\n+            VectorSupport.store(ShortMaxMask.class, short.class, VLENGTH,\n+                    bits, (long) offset + Unsafe.ARRAY_BOOLEAN_BASE_OFFSET,\n+                    this, bits, offset,\n+                    (c, idx, v) -> System.arraycopy(v.getBits(), 0, c, idx, VLENGTH));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortMaxVector.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -909,0 +910,12 @@\n+        \/\/ Mask Store operations\n+\n+        @Override\n+        @ForceInline\n+        public void intoArray(boolean[] bits, int offset) {\n+            offset = VectorIntrinsics.checkFromIndexSize(offset, VLENGTH, bits.length);\n+            VectorSupport.store($masktype$.class, $bitstype$.class, VLENGTH,\n+                    bits, (long) offset + Unsafe.ARRAY_BOOLEAN_BASE_OFFSET,\n+                    this, bits, offset,\n+                    (c, idx, v) -> System.arraycopy(v.getBits(), 0, c, idx, VLENGTH));\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-VectorBits.java.template","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"}]}