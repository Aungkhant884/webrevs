{"files":[{"patch":"@@ -2431,0 +2431,3 @@\n+    case Op_LoadVectorGather:\n+    case Op_StoreVectorScatter:\n+      return false;\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -230,0 +230,3 @@\n+      \/\/ Currently the implementation for partial vectors are not implemented yet.\n+      \/\/ Will add them in a separate patch.\n+        return vlen * type2aelembytes(bt) == MaxVectorSize;\n@@ -4116,0 +4119,29 @@\n+\n+\/\/ ------------------------------ Vector Store Scatter -------------------------------\n+instruct scatterI(vmemA mem, vReg src, vReg idx) %{\n+  predicate(UseSVE > 0 &&\n+           (n->in(3)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_INT ||\n+            n->in(3)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_FLOAT));\n+  match(Set mem (StoreVectorScatter mem (Binary src idx)));\n+  ins_cost(SVE_COST);\n+  format %{ \"store_vector_scatter $mem, $idx, $src\\t# vector store scatter (I\/F)\" %}\n+  ins_encode %{\n+    __ sve_st1w_scatter(as_FloatRegister($src$$reg), ptrue, as_Register($mem$$base), as_FloatRegister($idx$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct scatterL(vmemA mem, vReg src, vReg idx) %{\n+  predicate(UseSVE > 0 &&\n+           (n->in(3)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_LONG ||\n+            n->in(3)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_DOUBLE));\n+  match(Set mem (StoreVectorScatter mem (Binary src idx)));\n+  ins_cost(2 * SVE_COST);\n+  format %{ \"sve_uunpklo $idx, $idx\\n\\t\"\n+            \"store_vector_scatter $mem, $idx, $src\\t# vector store scatter (L\/D)\" %}\n+  ins_encode %{\n+    __ sve_uunpklo(as_FloatRegister($idx$$reg), __ D, as_FloatRegister($idx$$reg));\n+    __ sve_st1d_scatter(as_FloatRegister($src$$reg), ptrue, as_Register($mem$$base), as_FloatRegister($idx$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve.ad","additions":32,"deletions":0,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -225,0 +225,3 @@\n+      \/\/ Currently the implementation for partial vectors are not implemented yet.\n+      \/\/ Will add them in a separate patch.\n+        return vlen * type2aelembytes(bt) == MaxVectorSize;\n@@ -2397,0 +2400,29 @@\n+\n+\/\/ ------------------------------ Vector Store Scatter -------------------------------\n+instruct scatterI(vmemA mem, vReg src, vReg idx) %{\n+  predicate(UseSVE > 0 &&\n+           (n->in(3)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_INT ||\n+            n->in(3)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_FLOAT));\n+  match(Set mem (StoreVectorScatter mem (Binary src idx)));\n+  ins_cost(SVE_COST);\n+  format %{ \"store_vector_scatter $mem, $idx, $src\\t# vector store scatter (I\/F)\" %}\n+  ins_encode %{\n+    __ sve_st1w_scatter(as_FloatRegister($src$$reg), ptrue, as_Register($mem$$base), as_FloatRegister($idx$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct scatterL(vmemA mem, vReg src, vReg idx) %{\n+  predicate(UseSVE > 0 &&\n+           (n->in(3)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_LONG ||\n+            n->in(3)->in(1)->bottom_type()->is_vect()->element_basic_type() == T_DOUBLE));\n+  match(Set mem (StoreVectorScatter mem (Binary src idx)));\n+  ins_cost(2 * SVE_COST);\n+  format %{ \"sve_uunpklo $idx, $idx\\n\\t\"\n+            \"store_vector_scatter $mem, $idx, $src\\t# vector store scatter (L\/D)\" %}\n+  ins_encode %{\n+    __ sve_uunpklo(as_FloatRegister($idx$$reg), __ D, as_FloatRegister($idx$$reg));\n+    __ sve_st1d_scatter(as_FloatRegister($src$$reg), ptrue, as_Register($mem$$base), as_FloatRegister($idx$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve_ad.m4","additions":32,"deletions":0,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -3157,1 +3157,1 @@\n-\/\/ SVE load gather (scalar plus vector) - 32-bit scaled offset\n+\/\/ SVE load gather, store scatter (scalar plus vector) - 32-bit scaled offset\n@@ -3167,0 +3167,2 @@\n+  INSN(sve_st1w_scatter, 0b1110010, 0b10, 0b11, 0b100);\n+  INSN(sve_st1d_scatter, 0b1110010, 0b11, 0b01, 0b100);\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1607,0 +1607,2 @@\n+                        [\"st1w\",    \"__ sve_st1w_scatter(z15, p0, r5, z16);\",             \"st1w\\t{z15.s}, p0, [x5, z16.s, uxtw #2]\"],\n+                        [\"st1d\",    \"__ sve_st1d_scatter(z15, p0, r5, z16);\",             \"st1d\\t{z15.d}, p0, [x5, z16.d, uxtw #3]\"],\n","filename":"test\/hotspot\/gtest\/aarch64\/aarch64-asmtest.py","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -794,0 +794,2 @@\n+    __ sve_st1w_scatter(z15, p0, r5, z16);             \/\/       st1w    {z15.s}, p0, [x5, z16.s, uxtw #2]\n+    __ sve_st1d_scatter(z15, p0, r5, z16);             \/\/       st1d    {z15.d}, p0, [x5, z16.d, uxtw #3]\n@@ -999,7 +1001,7 @@\n-    0x14000000,     0x17ffffd7,     0x1400031e,     0x94000000,\n-    0x97ffffd4,     0x9400031b,     0x3400000a,     0x34fffa2a,\n-    0x3400630a,     0x35000008,     0x35fff9c8,     0x350062a8,\n-    0xb400000b,     0xb4fff96b,     0xb400624b,     0xb500001d,\n-    0xb5fff91d,     0xb50061fd,     0x10000013,     0x10fff8b3,\n-    0x10006193,     0x90000013,     0x36300016,     0x3637f836,\n-    0x36306116,     0x3758000c,     0x375ff7cc,     0x375860ac,\n+    0x14000000,     0x17ffffd7,     0x14000320,     0x94000000,\n+    0x97ffffd4,     0x9400031d,     0x3400000a,     0x34fffa2a,\n+    0x3400634a,     0x35000008,     0x35fff9c8,     0x350062e8,\n+    0xb400000b,     0xb4fff96b,     0xb400628b,     0xb500001d,\n+    0xb5fff91d,     0xb500623d,     0x10000013,     0x10fff8b3,\n+    0x100061d3,     0x90000013,     0x36300016,     0x3637f836,\n+    0x36306156,     0x3758000c,     0x375ff7cc,     0x375860ec,\n@@ -1010,13 +1012,13 @@\n-    0x54005e80,     0x54000001,     0x54fff541,     0x54005e21,\n-    0x54000002,     0x54fff4e2,     0x54005dc2,     0x54000002,\n-    0x54fff482,     0x54005d62,     0x54000003,     0x54fff423,\n-    0x54005d03,     0x54000003,     0x54fff3c3,     0x54005ca3,\n-    0x54000004,     0x54fff364,     0x54005c44,     0x54000005,\n-    0x54fff305,     0x54005be5,     0x54000006,     0x54fff2a6,\n-    0x54005b86,     0x54000007,     0x54fff247,     0x54005b27,\n-    0x54000008,     0x54fff1e8,     0x54005ac8,     0x54000009,\n-    0x54fff189,     0x54005a69,     0x5400000a,     0x54fff12a,\n-    0x54005a0a,     0x5400000b,     0x54fff0cb,     0x540059ab,\n-    0x5400000c,     0x54fff06c,     0x5400594c,     0x5400000d,\n-    0x54fff00d,     0x540058ed,     0x5400000e,     0x54ffefae,\n-    0x5400588e,     0x5400000f,     0x54ffef4f,     0x5400582f,\n+    0x54005ec0,     0x54000001,     0x54fff541,     0x54005e61,\n+    0x54000002,     0x54fff4e2,     0x54005e02,     0x54000002,\n+    0x54fff482,     0x54005da2,     0x54000003,     0x54fff423,\n+    0x54005d43,     0x54000003,     0x54fff3c3,     0x54005ce3,\n+    0x54000004,     0x54fff364,     0x54005c84,     0x54000005,\n+    0x54fff305,     0x54005c25,     0x54000006,     0x54fff2a6,\n+    0x54005bc6,     0x54000007,     0x54fff247,     0x54005b67,\n+    0x54000008,     0x54fff1e8,     0x54005b08,     0x54000009,\n+    0x54fff189,     0x54005aa9,     0x5400000a,     0x54fff12a,\n+    0x54005a4a,     0x5400000b,     0x54fff0cb,     0x540059eb,\n+    0x5400000c,     0x54fff06c,     0x5400598c,     0x5400000d,\n+    0x54fff00d,     0x5400592d,     0x5400000e,     0x54ffefae,\n+    0x540058ce,     0x5400000f,     0x54ffef4f,     0x5400586f,\n@@ -1054,1 +1056,1 @@\n-    0xbd1b1869,     0x5800487b,     0x1800000b,     0xf8945060,\n+    0xbd1b1869,     0x580048bb,     0x1800000b,     0xf8945060,\n@@ -1158,42 +1160,42 @@\n-    0x05b23230,     0x853040af,     0xc5b040af,     0x1e601000,\n-    0x1e603000,     0x1e621000,     0x1e623000,     0x1e641000,\n-    0x1e643000,     0x1e661000,     0x1e663000,     0x1e681000,\n-    0x1e683000,     0x1e6a1000,     0x1e6a3000,     0x1e6c1000,\n-    0x1e6c3000,     0x1e6e1000,     0x1e6e3000,     0x1e701000,\n-    0x1e703000,     0x1e721000,     0x1e723000,     0x1e741000,\n-    0x1e743000,     0x1e761000,     0x1e763000,     0x1e781000,\n-    0x1e783000,     0x1e7a1000,     0x1e7a3000,     0x1e7c1000,\n-    0x1e7c3000,     0x1e7e1000,     0x1e7e3000,     0xf8358303,\n-    0xf8280299,     0xf8301051,     0xf8212300,     0xf8243183,\n-    0xf83f515c,     0xf83a4182,     0xf830703f,     0xf82d601d,\n-    0xf8b3822c,     0xf8b6038d,     0xf8be103f,     0xf8ba209c,\n-    0xf8be30c4,     0xf8be51fa,     0xf8a94188,     0xf8a07034,\n-    0xf8b86002,     0xf8e98358,     0xf8f0007e,     0xf8ea1157,\n-    0xf8e42050,     0xf8eb3148,     0xf8ef5051,     0xf8ea418c,\n-    0xf8ef704d,     0xf8e76354,     0xf8708044,     0xf86401ec,\n-    0xf87511f0,     0xf86b22f5,     0xf86c32fa,     0xf87c516e,\n-    0xf8784181,     0xf87f720a,     0xf8676062,     0xb82d8233,\n-    0xb8300023,     0xb82b10be,     0xb82823af,     0xb83e3280,\n-    0xb82752f4,     0xb83c4375,     0xb8397025,     0xb83763f0,\n-    0xb8a5812c,     0xb8bc03af,     0xb8b6127f,     0xb8bf21c5,\n-    0xb8b031ff,     0xb8bb5214,     0xb8ac412b,     0xb8a6723e,\n-    0xb8bb63dc,     0xb8e7828a,     0xb8ea0304,     0xb8f112d1,\n-    0xb8e321fd,     0xb8f63273,     0xb8f651e2,     0xb8e6420c,\n-    0xb8eb72ed,     0xb8e1627e,     0xb8658051,     0xb87001b6,\n-    0xb86a13b5,     0xb87b236c,     0xb86333e1,     0xb8785233,\n-    0xb869437c,     0xb86f72a7,     0xb877633f,     0xce3a47c2,\n-    0xce110aca,     0xce788c11,     0xce8296d9,     0xce7b806c,\n-    0xce70879d,     0xcec080da,     0xce718b89,     0x04670087,\n-    0x042806c9,     0x659e029b,     0x6590081a,     0x65c80723,\n-    0x04d6bb55,     0x04000096,     0x04508071,     0x041aa8c1,\n-    0x04939ce9,     0x045194b6,     0x041013c8,     0x04d7a171,\n-    0x049ea35c,     0x04c80dbc,     0x040a18b0,     0x044109ed,\n-    0x049cb57a,     0x65809096,     0x658d9233,     0x65c68c4e,\n-    0x658796e3,     0x65828626,     0x049db21b,     0x6582bc62,\n-    0x6580b266,     0x65c1b50c,     0x658db013,     0x65c18677,\n-    0x65a010cd,     0x65a8332e,     0x65bb56d6,     0x65b46e23,\n-    0x04405ce4,     0x048476d0,     0x042b32c9,     0x04b033c5,\n-    0x04613176,     0x05f06a88,     0x05a46c8f,     0x041a27a8,\n-    0x04d833bc,     0x04592c49,     0x040820fc,     0x044a363a,\n-    0x65c732a8,     0x65c636a5,     0x65d833b6,     0x04812093,\n-\n+    0x05b23230,     0x853040af,     0xc5b040af,     0xe57080af,\n+    0xe5b080af,     0x1e601000,     0x1e603000,     0x1e621000,\n+    0x1e623000,     0x1e641000,     0x1e643000,     0x1e661000,\n+    0x1e663000,     0x1e681000,     0x1e683000,     0x1e6a1000,\n+    0x1e6a3000,     0x1e6c1000,     0x1e6c3000,     0x1e6e1000,\n+    0x1e6e3000,     0x1e701000,     0x1e703000,     0x1e721000,\n+    0x1e723000,     0x1e741000,     0x1e743000,     0x1e761000,\n+    0x1e763000,     0x1e781000,     0x1e783000,     0x1e7a1000,\n+    0x1e7a3000,     0x1e7c1000,     0x1e7c3000,     0x1e7e1000,\n+    0x1e7e3000,     0xf8358303,     0xf8280299,     0xf8301051,\n+    0xf8212300,     0xf8243183,     0xf83f515c,     0xf83a4182,\n+    0xf830703f,     0xf82d601d,     0xf8b3822c,     0xf8b6038d,\n+    0xf8be103f,     0xf8ba209c,     0xf8be30c4,     0xf8be51fa,\n+    0xf8a94188,     0xf8a07034,     0xf8b86002,     0xf8e98358,\n+    0xf8f0007e,     0xf8ea1157,     0xf8e42050,     0xf8eb3148,\n+    0xf8ef5051,     0xf8ea418c,     0xf8ef704d,     0xf8e76354,\n+    0xf8708044,     0xf86401ec,     0xf87511f0,     0xf86b22f5,\n+    0xf86c32fa,     0xf87c516e,     0xf8784181,     0xf87f720a,\n+    0xf8676062,     0xb82d8233,     0xb8300023,     0xb82b10be,\n+    0xb82823af,     0xb83e3280,     0xb82752f4,     0xb83c4375,\n+    0xb8397025,     0xb83763f0,     0xb8a5812c,     0xb8bc03af,\n+    0xb8b6127f,     0xb8bf21c5,     0xb8b031ff,     0xb8bb5214,\n+    0xb8ac412b,     0xb8a6723e,     0xb8bb63dc,     0xb8e7828a,\n+    0xb8ea0304,     0xb8f112d1,     0xb8e321fd,     0xb8f63273,\n+    0xb8f651e2,     0xb8e6420c,     0xb8eb72ed,     0xb8e1627e,\n+    0xb8658051,     0xb87001b6,     0xb86a13b5,     0xb87b236c,\n+    0xb86333e1,     0xb8785233,     0xb869437c,     0xb86f72a7,\n+    0xb877633f,     0xce3a47c2,     0xce110aca,     0xce788c11,\n+    0xce8296d9,     0xce7b806c,     0xce70879d,     0xcec080da,\n+    0xce718b89,     0x04670087,     0x042806c9,     0x659e029b,\n+    0x6590081a,     0x65c80723,     0x04d6bb55,     0x04000096,\n+    0x04508071,     0x041aa8c1,     0x04939ce9,     0x045194b6,\n+    0x041013c8,     0x04d7a171,     0x049ea35c,     0x04c80dbc,\n+    0x040a18b0,     0x044109ed,     0x049cb57a,     0x65809096,\n+    0x658d9233,     0x65c68c4e,     0x658796e3,     0x65828626,\n+    0x049db21b,     0x6582bc62,     0x6580b266,     0x65c1b50c,\n+    0x658db013,     0x65c18677,     0x65a010cd,     0x65a8332e,\n+    0x65bb56d6,     0x65b46e23,     0x04405ce4,     0x048476d0,\n+    0x042b32c9,     0x04b033c5,     0x04613176,     0x05f06a88,\n+    0x05a46c8f,     0x041a27a8,     0x04d833bc,     0x04592c49,\n+    0x040820fc,     0x044a363a,     0x65c732a8,     0x65c636a5,\n+    0x65d833b6,     0x04812093,\n","filename":"test\/hotspot\/gtest\/aarch64\/asmtest.out.h","additions":65,"deletions":63,"binary":false,"changes":128,"status":"modified"}]}