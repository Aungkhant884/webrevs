{"files":[{"patch":"@@ -5653,1 +5653,1 @@\n-\/\/------------------------CountLeadingZerosV-------------------------------\n+\/\/------------------------- CountLeadingZerosV -----------------------------\n@@ -5655,1 +5655,1 @@\n-instruct countLeadingZerosVID(vecD dst, vecD src) %{\n+instruct countLeadingZerosVD(vecD dst, vecD src) %{\n@@ -5668,3 +5668,2 @@\n-instruct countLeadingZerosVIX(vecX dst, vecX src) %{\n-  predicate(n->as_Vector()->length_in_bytes() == 16 &&\n-            n->bottom_type()->is_vect()->element_basic_type() != T_LONG);\n+instruct countLeadingZerosVX(vecX dst, vecX src) %{\n+  predicate(n->as_Vector()->length_in_bytes() == 16);\n@@ -5673,1 +5672,1 @@\n-  format %{ \"countLeadingZerosV $dst, $src\\t# vector (16B\/8H\/4S)\" %}\n+  format %{ \"countLeadingZerosV $dst, $src\\t# vector (16B\/8H\/4S\/2D)\" %}\n@@ -5677,18 +5676,10 @@\n-    __ clz(as_FloatRegister($dst$$reg), size, as_FloatRegister($src$$reg));\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct countLeadingZerosVL(vecX dst, vecX src) %{\n-  predicate(n->as_Vector()->length_in_bytes() == 16 &&\n-            n->bottom_type()->is_vect()->element_basic_type() == T_LONG);\n-  match(Set dst (CountLeadingZerosV src));\n-  ins_cost(6 * INSN_COST);\n-  format %{ \"countLeadingZerosV $dst, $src\\t# vector (2D)\" %}\n-  ins_encode %{\n-    __ umov(rscratch1, as_FloatRegister($src$$reg), __ D, 0);\n-    __ clz(rscratch1, rscratch1);\n-    __ mov(as_FloatRegister($dst$$reg), __ D, 0, rscratch1);\n-    __ umov(rscratch1, as_FloatRegister($src$$reg), __ D, 1);\n-    __ clz(rscratch1, rscratch1);\n-    __ mov(as_FloatRegister($dst$$reg), __ D, 1, rscratch1);\n+    if (bt != T_LONG) {\n+      __ clz(as_FloatRegister($dst$$reg), size, as_FloatRegister($src$$reg));\n+    } else {\n+      __ umov(rscratch1, as_FloatRegister($src$$reg), __ D, 0);\n+      __ clz(rscratch1, rscratch1);\n+      __ mov(as_FloatRegister($dst$$reg), __ D, 0, rscratch1);\n+      __ umov(rscratch1, as_FloatRegister($src$$reg), __ D, 1);\n+      __ clz(rscratch1, rscratch1);\n+      __ mov(as_FloatRegister($dst$$reg), __ D, 1, rscratch1);\n+    }\n@@ -5699,1 +5690,1 @@\n-\/\/----------------------------CountTrailingZerosV-------------------------------\n+\/\/------------------------- CountTrailingZerosV ----------------------------\n@@ -5701,1 +5692,1 @@\n-instruct countTrailingZerosVID(vecD dst, vecD src) %{\n+instruct countTrailingZerosVD(vecD dst, vecD src) %{\n@@ -5715,3 +5706,2 @@\n-instruct countTrailingZerosVIX(vecX dst, vecX src) %{\n-  predicate(n->as_Vector()->length_in_bytes() == 16 &&\n-            n->bottom_type()->is_vect()->element_basic_type() != T_LONG);\n+instruct countTrailingZerosVX(vecX dst, vecX src) %{\n+  predicate(n->as_Vector()->length_in_bytes() == 16);\n@@ -5720,1 +5710,1 @@\n-  format %{ \"countTrailingZerosV $dst, $src\\t# vector (16B\/8H\/4S)\" %}\n+  format %{ \"countTrailingZerosV $dst, $src\\t# vector (16B\/8H\/4S\/2D)\" %}\n@@ -5725,19 +5715,10 @@\n-    __ clz(as_FloatRegister($dst$$reg), size, as_FloatRegister($dst$$reg));\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-instruct countTrailingZerosVL(vecX dst, vecX src) %{\n-  predicate(n->as_Vector()->length_in_bytes() == 16 &&\n-            n->bottom_type()->is_vect()->element_basic_type() == T_LONG);\n-  match(Set dst (CountTrailingZerosV src));\n-  ins_cost(8 * INSN_COST);\n-  format %{ \"countTrailingZerosV $dst, $src\\t# vector (2D)\" %}\n-  ins_encode %{\n-    __ neon_reverse_bits(as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg), T_LONG, true);\n-    __ umov(rscratch1, as_FloatRegister($dst$$reg), __ D, 0);\n-    __ clz(rscratch1, rscratch1);\n-    __ mov(as_FloatRegister($dst$$reg), __ D, 0, rscratch1);\n-    __ umov(rscratch1, as_FloatRegister($dst$$reg), __ D, 1);\n-    __ clz(rscratch1, rscratch1);\n-    __ mov(as_FloatRegister($dst$$reg), __ D, 1, rscratch1);\n+    if (bt != T_LONG) {\n+      __ clz(as_FloatRegister($dst$$reg), size, as_FloatRegister($dst$$reg));\n+    } else {\n+      __ umov(rscratch1, as_FloatRegister($dst$$reg), __ D, 0);\n+      __ clz(rscratch1, rscratch1);\n+      __ mov(as_FloatRegister($dst$$reg), __ D, 0, rscratch1);\n+      __ umov(rscratch1, as_FloatRegister($dst$$reg), __ D, 1);\n+      __ clz(rscratch1, rscratch1);\n+      __ mov(as_FloatRegister($dst$$reg), __ D, 1, rscratch1);\n+    }\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_neon.ad","additions":30,"deletions":49,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -2517,10 +2517,6 @@\n-\/\/------------------------CountLeadingZerosV-------------------------------\n-dnl\n-dnl CLTZ_I($1,      $2,     $3  )\n-dnl CLTZ_I(op_name, suffix, type)\n-define(`CLTZ_I', `\n-instruct count$1I$2(vec$2 dst, vec$2 src) %{\n-  ifelse($2, D,\n-       `predicate(n->as_Vector()->length_in_bytes() == 8);',\n-       `predicate(n->as_Vector()->length_in_bytes() == 16 &&\n-            n->bottom_type()->is_vect()->element_basic_type() != T_LONG);')\n+dnl\n+dnl CLTZ_D($1     )\n+dnl CLTZ_D(op_name)\n+define(`CLTZ_D', `\n+instruct count$1D(vecD dst, vecD src) %{\n+  predicate(n->as_Vector()->length_in_bytes() == 8);\n@@ -2529,1 +2525,1 @@\n-  format %{ \"count$1 $dst, $src\\t# vector ($3)\" %}\n+  format %{ \"count$1 $dst, $src\\t# vector (8B\/4H\/2S)\" %}\n@@ -2532,1 +2528,1 @@\n-    Assembler::SIMD_Arrangement size = __ esize2arrangement((unsigned)type2aelembytes(bt), ifelse($2, D, false, true));dnl\n+    Assembler::SIMD_Arrangement size = __ esize2arrangement((unsigned)type2aelembytes(bt), false);dnl\n@@ -2534,1 +2530,1 @@\n-    __ neon_reverse_bits(as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg), bt, ifelse($2, D, false, true));', `')\n+    __ neon_reverse_bits(as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg), bt, false);', `')\n@@ -2540,6 +2536,5 @@\n-dnl CLTZ_L($1,      $2  )\n-dnl CLTZ_L(op_name, cost)\n-define(`CLTZ_L', `\n-instruct count$1L(vecX dst, vecX src) %{\n-  predicate(n->as_Vector()->length_in_bytes() == 16 &&\n-            n->bottom_type()->is_vect()->element_basic_type() == T_LONG);\n+dnl CLTZ_X($1     )\n+dnl CLTZ_X(op_name)\n+define(`CLTZ_X', `\n+instruct count$1X(vecX dst, vecX src) %{\n+  predicate(n->as_Vector()->length_in_bytes() == 16);\n@@ -2547,3 +2542,5 @@\n-  ins_cost($2 * INSN_COST);\n-  format %{ \"count$1 $dst, $src\\t# vector (2D)\" %}\n-  ins_encode %{dnl\n+  ins_cost(ifelse($1, `TrailingZerosV', `3 * ', `')INSN_COST);\n+  format %{ \"count$1 $dst, $src\\t# vector (16B\/8H\/4S\/2D)\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    Assembler::SIMD_Arrangement size = __ esize2arrangement((unsigned)type2aelembytes(bt), true);dnl\n@@ -2551,7 +2548,11 @@\n-    __ neon_reverse_bits(as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg), T_LONG, true);', `')\n-    __ umov(rscratch1, as_FloatRegister($ifelse($1, `TrailingZerosV', dst, src)$$reg), __ D, 0);\n-    __ clz(rscratch1, rscratch1);\n-    __ mov(as_FloatRegister($dst$$reg), __ D, 0, rscratch1);\n-    __ umov(rscratch1, as_FloatRegister($ifelse($1, `TrailingZerosV', dst, src)$$reg), __ D, 1);\n-    __ clz(rscratch1, rscratch1);\n-    __ mov(as_FloatRegister($dst$$reg), __ D, 1, rscratch1);\n+    __ neon_reverse_bits(as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg), bt, true);', `')\n+    if (bt != T_LONG) {\n+      __ clz(as_FloatRegister($dst$$reg), size, as_FloatRegister($ifelse($1, `TrailingZerosV', dst, src)$$reg));\n+    } else {\n+      __ umov(rscratch1, as_FloatRegister($ifelse($1, `TrailingZerosV', dst, src)$$reg), __ D, 0);\n+      __ clz(rscratch1, rscratch1);\n+      __ mov(as_FloatRegister($dst$$reg), __ D, 0, rscratch1);\n+      __ umov(rscratch1, as_FloatRegister($ifelse($1, `TrailingZerosV', dst, src)$$reg), __ D, 1);\n+      __ clz(rscratch1, rscratch1);\n+      __ mov(as_FloatRegister($dst$$reg), __ D, 1, rscratch1);\n+    }\n@@ -2562,3 +2563,3 @@\n-CLTZ_I(LeadingZerosV, D, 8B\/4H\/2S)\n-CLTZ_I(LeadingZerosV, X, 16B\/8H\/4S)\n-CLTZ_L(LeadingZerosV, 6)\n+\/\/------------------------- CountLeadingZerosV -----------------------------\n+CLTZ_D(LeadingZerosV)\n+CLTZ_X(LeadingZerosV)\n@@ -2566,4 +2567,3 @@\n-\/\/----------------------------CountTrailingZerosV-------------------------------\n-CLTZ_I(TrailingZerosV, D, 8B\/4H\/2S)\n-CLTZ_I(TrailingZerosV, X, 16B\/8H\/4S)\n-CLTZ_L(TrailingZerosV, 8)\n+\/\/------------------------- CountTrailingZerosV ----------------------------\n+CLTZ_D(TrailingZerosV)\n+CLTZ_X(TrailingZerosV)\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_neon_ad.m4","additions":36,"deletions":36,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -5844,0 +5844,2 @@\n+\/\/ The dst and src should use the same register to make sure the\n+\/\/ inactive lanes in dst save the same elements as src.\n@@ -5875,0 +5877,2 @@\n+\/\/ The dst and src should use the same register to make sure the\n+\/\/ inactive lanes in dst save the same elements as src.\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve.ad","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3325,0 +3325,2 @@\n+\/\/ The dst and src should use the same register to make sure the\n+\/\/ inactive lanes in dst save the same elements as src.\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve_ad.m4","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}