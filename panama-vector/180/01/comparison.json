{"files":[{"patch":"@@ -1,2 +1,2 @@\n-\/\/ Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n-\/\/ Copyright (c) 2020, 2021, Arm Limited. All rights reserved.\n+\/\/ Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ Copyright (c) 2020, 2022, Arm Limited. All rights reserved.\n@@ -5652,0 +5652,76 @@\n+\n+\/\/------------------------- CountLeadingZerosV -----------------------------\n+\n+instruct countLeadingZerosVD(vecD dst, vecD src) %{\n+  predicate(n->as_Vector()->length_in_bytes() == 8);\n+  match(Set dst (CountLeadingZerosV src));\n+  ins_cost(INSN_COST);\n+  format %{ \"countLeadingZerosV $dst, $src\\t# vector (8B\/4H\/2S)\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    Assembler::SIMD_Arrangement size = __ esize2arrangement((unsigned)type2aelembytes(bt), false);\n+    __ clz(as_FloatRegister($dst$$reg), size, as_FloatRegister($src$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct countLeadingZerosVX(vecX dst, vecX src) %{\n+  predicate(n->as_Vector()->length_in_bytes() == 16);\n+  match(Set dst (CountLeadingZerosV src));\n+  ins_cost(INSN_COST);\n+  format %{ \"countLeadingZerosV $dst, $src\\t# vector (16B\/8H\/4S\/2D)\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    Assembler::SIMD_Arrangement size = __ esize2arrangement((unsigned)type2aelembytes(bt), true);\n+    if (bt != T_LONG) {\n+      __ clz(as_FloatRegister($dst$$reg), size, as_FloatRegister($src$$reg));\n+    } else {\n+      __ umov(rscratch1, as_FloatRegister($src$$reg), __ D, 0);\n+      __ clz(rscratch1, rscratch1);\n+      __ mov(as_FloatRegister($dst$$reg), __ D, 0, rscratch1);\n+      __ umov(rscratch1, as_FloatRegister($src$$reg), __ D, 1);\n+      __ clz(rscratch1, rscratch1);\n+      __ mov(as_FloatRegister($dst$$reg), __ D, 1, rscratch1);\n+    }\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\/\/------------------------- CountTrailingZerosV ----------------------------\n+\n+instruct countTrailingZerosVD(vecD dst, vecD src) %{\n+  predicate(n->as_Vector()->length_in_bytes() == 8);\n+  match(Set dst (CountTrailingZerosV src));\n+  ins_cost(3 * INSN_COST);\n+  format %{ \"countTrailingZerosV $dst, $src\\t# vector (8B\/4H\/2S)\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    Assembler::SIMD_Arrangement size = __ esize2arrangement((unsigned)type2aelembytes(bt), false);\n+    __ neon_reverse_bits(as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg), bt, false);\n+    __ clz(as_FloatRegister($dst$$reg), size, as_FloatRegister($dst$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct countTrailingZerosVX(vecX dst, vecX src) %{\n+  predicate(n->as_Vector()->length_in_bytes() == 16);\n+  match(Set dst (CountTrailingZerosV src));\n+  ins_cost(3 * INSN_COST);\n+  format %{ \"countTrailingZerosV $dst, $src\\t# vector (16B\/8H\/4S\/2D)\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    Assembler::SIMD_Arrangement size = __ esize2arrangement((unsigned)type2aelembytes(bt), true);\n+    __ neon_reverse_bits(as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg), bt, true);\n+    if (bt != T_LONG) {\n+      __ clz(as_FloatRegister($dst$$reg), size, as_FloatRegister($dst$$reg));\n+    } else {\n+      __ umov(rscratch1, as_FloatRegister($dst$$reg), __ D, 0);\n+      __ clz(rscratch1, rscratch1);\n+      __ mov(as_FloatRegister($dst$$reg), __ D, 0, rscratch1);\n+      __ umov(rscratch1, as_FloatRegister($dst$$reg), __ D, 1);\n+      __ clz(rscratch1, rscratch1);\n+      __ mov(as_FloatRegister($dst$$reg), __ D, 1, rscratch1);\n+    }\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_neon.ad","additions":78,"deletions":2,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -1,2 +1,2 @@\n-\/\/ Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n-\/\/ Copyright (c) 2020, 2021, Arm Limited. All rights reserved.\n+\/\/ Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ Copyright (c) 2020, 2022, Arm Limited. All rights reserved.\n@@ -2516,0 +2516,54 @@\n+\n+dnl\n+dnl CLTZ_D($1     )\n+dnl CLTZ_D(op_name)\n+define(`CLTZ_D', `\n+instruct count$1D(vecD dst, vecD src) %{\n+  predicate(n->as_Vector()->length_in_bytes() == 8);\n+  match(Set dst (Count$1 src));\n+  ins_cost(ifelse($1, `TrailingZerosV', `3 * ', `')INSN_COST);\n+  format %{ \"count$1 $dst, $src\\t# vector (8B\/4H\/2S)\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    Assembler::SIMD_Arrangement size = __ esize2arrangement((unsigned)type2aelembytes(bt), false);dnl\n+ifelse($1, `TrailingZerosV', `\n+    __ neon_reverse_bits(as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg), bt, false);', `')\n+    __ clz(as_FloatRegister($dst$$reg), size, as_FloatRegister($ifelse($1, `TrailingZerosV', dst, src)$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}')dnl\n+dnl\n+dnl CLTZ_X($1     )\n+dnl CLTZ_X(op_name)\n+define(`CLTZ_X', `\n+instruct count$1X(vecX dst, vecX src) %{\n+  predicate(n->as_Vector()->length_in_bytes() == 16);\n+  match(Set dst (Count$1 src));\n+  ins_cost(ifelse($1, `TrailingZerosV', `3 * ', `')INSN_COST);\n+  format %{ \"count$1 $dst, $src\\t# vector (16B\/8H\/4S\/2D)\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    Assembler::SIMD_Arrangement size = __ esize2arrangement((unsigned)type2aelembytes(bt), true);dnl\n+ifelse($1, `TrailingZerosV', `\n+    __ neon_reverse_bits(as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg), bt, true);', `')\n+    if (bt != T_LONG) {\n+      __ clz(as_FloatRegister($dst$$reg), size, as_FloatRegister($ifelse($1, `TrailingZerosV', dst, src)$$reg));\n+    } else {\n+      __ umov(rscratch1, as_FloatRegister($ifelse($1, `TrailingZerosV', dst, src)$$reg), __ D, 0);\n+      __ clz(rscratch1, rscratch1);\n+      __ mov(as_FloatRegister($dst$$reg), __ D, 0, rscratch1);\n+      __ umov(rscratch1, as_FloatRegister($ifelse($1, `TrailingZerosV', dst, src)$$reg), __ D, 1);\n+      __ clz(rscratch1, rscratch1);\n+      __ mov(as_FloatRegister($dst$$reg), __ D, 1, rscratch1);\n+    }\n+  %}\n+  ins_pipe(pipe_slow);\n+%}')dnl\n+dnl\n+\/\/------------------------- CountLeadingZerosV -----------------------------\n+CLTZ_D(LeadingZerosV)\n+CLTZ_X(LeadingZerosV)\n+\n+\/\/------------------------- CountTrailingZerosV ----------------------------\n+CLTZ_D(TrailingZerosV)\n+CLTZ_X(TrailingZerosV)\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_neon_ad.m4","additions":56,"deletions":2,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -5827,0 +5827,67 @@\n+\n+\/\/ ------------------------------ CountLeadingZerosV ------------------------------\n+\n+instruct countLeadingZerosV(vReg dst, vReg src) %{\n+  predicate(UseSVE > 0 &&\n+            !n->as_Vector()->is_predicated_vector());\n+  match(Set dst (CountLeadingZerosV src));\n+  ins_cost(SVE_COST);\n+  format %{ \"countLeadingZerosV $dst, $src\\t# vector (sve)\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    Assembler::SIMD_RegVariant size = __ elemType_to_regVariant(bt);\n+    __ sve_clz(as_FloatRegister($dst$$reg), size, ptrue, as_FloatRegister($src$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\/\/ The dst and src should use the same register to make sure the\n+\/\/ inactive lanes in dst save the same elements as src.\n+instruct countLeadingZerosV_masked(vReg dst_src, pRegGov pg) %{\n+  predicate(UseSVE > 0);\n+  match(Set dst_src (CountLeadingZerosV dst_src pg));\n+  ins_cost(SVE_COST);\n+  format %{ \"countLeadingZerosV $dst_src, $pg, $dst_src\\t# vector (sve)\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    Assembler::SIMD_RegVariant size = __ elemType_to_regVariant(bt);\n+    __ sve_clz(as_FloatRegister($dst_src$$reg), size,\n+        as_PRegister($pg$$reg), as_FloatRegister($dst_src$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\/\/ ------------------------------ CountTrailingZerosV -----------------------------\n+\n+instruct countTrailingZerosV(vReg dst, vReg src) %{\n+  predicate(UseSVE > 0 &&\n+            !n->as_Vector()->is_predicated_vector());\n+  match(Set dst (CountTrailingZerosV src));\n+  ins_cost(2 * SVE_COST);\n+  format %{ \"countTrailingZerosV $dst, $src\\t# vector (sve)\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    Assembler::SIMD_RegVariant size = __ elemType_to_regVariant(bt);\n+    __ sve_rbit(as_FloatRegister($dst$$reg), size, ptrue, as_FloatRegister($src$$reg));\n+    __ sve_clz(as_FloatRegister($dst$$reg), size, ptrue, as_FloatRegister($dst$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\/\/ The dst and src should use the same register to make sure the\n+\/\/ inactive lanes in dst save the same elements as src.\n+instruct countTrailingZerosV_masked(vReg dst_src, pRegGov pg) %{\n+  predicate(UseSVE > 0);\n+  match(Set dst_src (CountTrailingZerosV dst_src pg));\n+  ins_cost(2 * SVE_COST);\n+  format %{ \"countTrailingZerosV $dst_src, $pg, $dst_src\\t# vector (sve)\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    Assembler::SIMD_RegVariant size = __ elemType_to_regVariant(bt);\n+    __ sve_rbit(as_FloatRegister($dst_src$$reg), size,\n+        as_PRegister($pg$$reg), as_FloatRegister($dst_src$$reg));\n+    __ sve_clz(as_FloatRegister($dst_src$$reg), size,\n+        as_PRegister($pg$$reg), as_FloatRegister($dst_src$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve.ad","additions":67,"deletions":0,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -3300,0 +3300,51 @@\n+\n+dnl\n+dnl CLTZ($1     )\n+dnl CLTZ(op_name)\n+define(`CLTZ', `\n+instruct count$1(vReg dst, vReg src) %{\n+  predicate(UseSVE > 0 &&\n+            !n->as_Vector()->is_predicated_vector());\n+  match(Set dst (Count$1 src));\n+  ins_cost(ifelse($1, `TrailingZerosV', `2 * ', `')SVE_COST);\n+  format %{ \"count$1 $dst, $src\\t# vector (sve)\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    Assembler::SIMD_RegVariant size = __ elemType_to_regVariant(bt);dnl\n+ifelse($1, `TrailingZerosV', `\n+    __ sve_rbit(as_FloatRegister($dst$$reg), size, ptrue, as_FloatRegister($src$$reg));', `')\n+    __ sve_clz(as_FloatRegister($dst$$reg), size, ptrue, as_FloatRegister($ifelse($1, `LeadingZerosV', src, dst)$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}')dnl\n+dnl\n+dnl\n+dnl CLTZ_PREDICATE($1     )\n+dnl CLTZ_PREDICATE(op_name)\n+define(`CLTZ_PREDICATE', `\n+\/\/ The dst and src should use the same register to make sure the\n+\/\/ inactive lanes in dst save the same elements as src.\n+instruct count$1_masked(vReg dst_src, pRegGov pg) %{\n+  predicate(UseSVE > 0);\n+  match(Set dst_src (Count$1 dst_src pg));\n+  ins_cost(ifelse($1, `TrailingZerosV', `2 * ', `')SVE_COST);\n+  format %{ \"count$1 $dst_src, $pg, $dst_src\\t# vector (sve)\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    Assembler::SIMD_RegVariant size = __ elemType_to_regVariant(bt);dnl\n+ifelse($1, `TrailingZerosV', `\n+    __ sve_rbit(as_FloatRegister($dst_src$$reg), size,\n+        as_PRegister($pg$$reg), as_FloatRegister($dst_src$$reg));', `')\n+    __ sve_clz(as_FloatRegister($dst_src$$reg), size,\n+        as_PRegister($pg$$reg), as_FloatRegister($dst_src$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}')dnl\n+dnl\n+\/\/ ------------------------------ CountLeadingZerosV ------------------------------\n+CLTZ(LeadingZerosV)\n+CLTZ_PREDICATE(LeadingZerosV)\n+\n+\/\/ ------------------------------ CountTrailingZerosV -----------------------------\n+CLTZ(TrailingZerosV)\n+CLTZ_PREDICATE(TrailingZerosV)\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve_ad.m4","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -3049,0 +3049,1 @@\n+  INSN(sve_clz,  0b00000100, 0b011001101); \/\/ vector count leading zero bits\n@@ -3060,0 +3061,1 @@\n+  INSN(sve_rbit, 0b00000101, 0b100111100); \/\/ vector reverse bits\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1383,0 +1383,25 @@\n+\n+void C2_MacroAssembler::neon_reverse_bits(FloatRegister dst, FloatRegister src, BasicType bt, bool isQ) {\n+  assert(bt == T_BYTE || bt == T_SHORT || bt == T_INT || bt == T_LONG, \"unsupported basic type\");\n+  SIMD_Arrangement size = isQ ? T16B : T8B;\n+  switch (bt) {\n+    case T_BYTE:\n+      rbit(dst, size, src);\n+      break;\n+    case T_SHORT:\n+      rev16(dst, size, src);\n+      rbit(dst, size, dst);\n+      break;\n+    case T_INT:\n+      rev32(dst, size, src);\n+      rbit(dst, size, dst);\n+      break;\n+    case T_LONG:\n+      rev64(dst, size, src);\n+      rbit(dst, size, dst);\n+      break;\n+    default:\n+      assert(false, \"unsupported\");\n+      ShouldNotReachHere();\n+  }\n+}\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp","additions":26,"deletions":1,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -126,0 +126,2 @@\n+  void neon_reverse_bits(FloatRegister dst, FloatRegister src, BasicType bt, bool isQ);\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -4241,0 +4241,1 @@\n+    \"CountLeadingZerosV\", \"CountTrailingZerosV\",\n","filename":"src\/hotspot\/share\/adlc\/formssel.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -156,0 +156,1 @@\n+macro(CountLeadingZerosV)\n@@ -158,0 +159,1 @@\n+macro(CountTrailingZerosV)\n","filename":"src\/hotspot\/share\/opto\/classes.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -243,0 +243,6 @@\n+  case Op_CountLeadingZerosI:\n+  case Op_CountLeadingZerosL:\n+    return Op_CountLeadingZerosV;\n+  case Op_CountTrailingZerosI:\n+  case Op_CountTrailingZerosL:\n+    return Op_CountTrailingZerosV;\n@@ -582,0 +588,2 @@\n+  case Op_CountLeadingZerosV: return new CountLeadingZerosVNode(n1, vt);\n+  case Op_CountTrailingZerosV: return new CountTrailingZerosVNode(n1, vt);\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1672,0 +1672,17 @@\n+\n+class CountLeadingZerosVNode : public VectorNode {\n+ public:\n+  CountLeadingZerosVNode(Node* in, const TypeVect* vt)\n+  : VectorNode(in, vt) {}\n+\n+  virtual int Opcode() const;\n+};\n+\n+class CountTrailingZerosVNode : public VectorNode {\n+ public:\n+  CountTrailingZerosVNode(Node* in, const TypeVect* vt)\n+  : VectorNode(in, vt) {}\n+\n+  virtual int Opcode() const;\n+};\n+\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -1859,0 +1859,2 @@\n+  declare_c2_type(CountLeadingZerosVNode, VectorNode)                     \\\n+  declare_c2_type(CountTrailingZerosVNode, VectorNode)                    \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1802,0 +1802,1 @@\n+                       [\"clz\", \"ZPZ\", \"m\"],\n@@ -1810,0 +1811,1 @@\n+                       [\"rbit\", \"ZPZ\", \"m\"],\n","filename":"test\/hotspot\/gtest\/aarch64\/aarch64-asmtest.py","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1088,36 +1088,38 @@\n-    __ sve_cnt(z9, __ H, p3, z2);                      \/\/       cnt     z9.h, p3\/m, z2.h\n-    __ sve_eor(z28, __ B, p0, z7);                     \/\/       eor     z28.b, p0\/m, z28.b, z7.b\n-    __ sve_lsl(z26, __ H, p5, z17);                    \/\/       lsl     z26.h, p5\/m, z26.h, z17.h\n-    __ sve_lsr(z8, __ D, p4, z21);                     \/\/       lsr     z8.d, p4\/m, z8.d, z21.d\n-    __ sve_mul(z5, __ S, p5, z21);                     \/\/       mul     z5.s, p5\/m, z5.s, z21.s\n-    __ sve_neg(z22, __ S, p4, z29);                    \/\/       neg     z22.s, p4\/m, z29.s\n-    __ sve_not(z19, __ S, p0, z4);                     \/\/       not     z19.s, p0\/m, z4.s\n-    __ sve_orr(z23, __ B, p1, z19);                    \/\/       orr     z23.b, p1\/m, z23.b, z19.b\n-    __ sve_smax(z23, __ B, p6, z19);                   \/\/       smax    z23.b, p6\/m, z23.b, z19.b\n-    __ sve_smin(z8, __ D, p2, z14);                    \/\/       smin    z8.d, p2\/m, z8.d, z14.d\n-    __ sve_sub(z17, __ B, p7, z21);                    \/\/       sub     z17.b, p7\/m, z17.b, z21.b\n-    __ sve_fabs(z30, __ D, p0, z10);                   \/\/       fabs    z30.d, p0\/m, z10.d\n-    __ sve_fadd(z12, __ S, p0, z9);                    \/\/       fadd    z12.s, p0\/m, z12.s, z9.s\n-    __ sve_fdiv(z24, __ D, p4, z4);                    \/\/       fdiv    z24.d, p4\/m, z24.d, z4.d\n-    __ sve_fmax(z6, __ D, p2, z27);                    \/\/       fmax    z6.d, p2\/m, z6.d, z27.d\n-    __ sve_fmin(z13, __ D, p4, z30);                   \/\/       fmin    z13.d, p4\/m, z13.d, z30.d\n-    __ sve_fmul(z22, __ D, p5, z30);                   \/\/       fmul    z22.d, p5\/m, z22.d, z30.d\n-    __ sve_fneg(z9, __ S, p3, z19);                    \/\/       fneg    z9.s, p3\/m, z19.s\n-    __ sve_frintm(z20, __ S, p7, z9);                  \/\/       frintm  z20.s, p7\/m, z9.s\n-    __ sve_frintn(z13, __ S, p3, z19);                 \/\/       frintn  z13.s, p3\/m, z19.s\n-    __ sve_frintp(z24, __ S, p2, z19);                 \/\/       frintp  z24.s, p2\/m, z19.s\n-    __ sve_fsqrt(z17, __ S, p4, z16);                  \/\/       fsqrt   z17.s, p4\/m, z16.s\n-    __ sve_fsub(z0, __ S, p0, z11);                    \/\/       fsub    z0.s, p0\/m, z0.s, z11.s\n-    __ sve_fmad(z15, __ S, p3, z15, z4);               \/\/       fmad    z15.s, p3\/m, z15.s, z4.s\n-    __ sve_fmla(z29, __ D, p1, z0, z10);               \/\/       fmla    z29.d, p1\/m, z0.d, z10.d\n-    __ sve_fmls(z26, __ D, p0, z0, z9);                \/\/       fmls    z26.d, p0\/m, z0.d, z9.d\n-    __ sve_fnmla(z28, __ D, p2, z24, z3);              \/\/       fnmla   z28.d, p2\/m, z24.d, z3.d\n-    __ sve_fnmls(z7, __ D, p6, z28, z13);              \/\/       fnmls   z7.d, p6\/m, z28.d, z13.d\n-    __ sve_mla(z10, __ D, p6, z12, z17);               \/\/       mla     z10.d, p6\/m, z12.d, z17.d\n-    __ sve_mls(z17, __ S, p3, z2, z29);                \/\/       mls     z17.s, p3\/m, z2.s, z29.s\n-    __ sve_and(z21, z20, z7);                          \/\/       and     z21.d, z20.d, z7.d\n-    __ sve_eor(z2, z1, z26);                           \/\/       eor     z2.d, z1.d, z26.d\n-    __ sve_orr(z9, z16, z17);                          \/\/       orr     z9.d, z16.d, z17.d\n-    __ sve_bic(z0, z4, z2);                            \/\/       bic     z0.d, z4.d, z2.d\n-    __ sve_uzp1(z14, __ S, z6, z11);                   \/\/       uzp1    z14.s, z6.s, z11.s\n-    __ sve_uzp2(z14, __ H, z16, z29);                  \/\/       uzp2    z14.h, z16.h, z29.h\n+    __ sve_clz(z9, __ H, p3, z2);                      \/\/       clz     z9.h, p3\/m, z2.h\n+    __ sve_cnt(z28, __ B, p0, z7);                     \/\/       cnt     z28.b, p0\/m, z7.b\n+    __ sve_eor(z26, __ H, p5, z17);                    \/\/       eor     z26.h, p5\/m, z26.h, z17.h\n+    __ sve_lsl(z8, __ D, p4, z21);                     \/\/       lsl     z8.d, p4\/m, z8.d, z21.d\n+    __ sve_lsr(z5, __ S, p5, z21);                     \/\/       lsr     z5.s, p5\/m, z5.s, z21.s\n+    __ sve_mul(z22, __ S, p4, z29);                    \/\/       mul     z22.s, p4\/m, z22.s, z29.s\n+    __ sve_neg(z19, __ S, p0, z4);                     \/\/       neg     z19.s, p0\/m, z4.s\n+    __ sve_not(z23, __ B, p1, z19);                    \/\/       not     z23.b, p1\/m, z19.b\n+    __ sve_orr(z23, __ B, p6, z19);                    \/\/       orr     z23.b, p6\/m, z23.b, z19.b\n+    __ sve_rbit(z8, __ D, p2, z14);                    \/\/       rbit    z8.d, p2\/m, z14.d\n+    __ sve_smax(z17, __ B, p7, z21);                   \/\/       smax    z17.b, p7\/m, z17.b, z21.b\n+    __ sve_smin(z30, __ S, p0, z10);                   \/\/       smin    z30.s, p0\/m, z30.s, z10.s\n+    __ sve_sub(z12, __ B, p0, z9);                     \/\/       sub     z12.b, p0\/m, z12.b, z9.b\n+    __ sve_fabs(z24, __ D, p4, z4);                    \/\/       fabs    z24.d, p4\/m, z4.d\n+    __ sve_fadd(z6, __ D, p2, z27);                    \/\/       fadd    z6.d, p2\/m, z6.d, z27.d\n+    __ sve_fdiv(z13, __ D, p4, z30);                   \/\/       fdiv    z13.d, p4\/m, z13.d, z30.d\n+    __ sve_fmax(z22, __ D, p5, z30);                   \/\/       fmax    z22.d, p5\/m, z22.d, z30.d\n+    __ sve_fmin(z9, __ S, p3, z19);                    \/\/       fmin    z9.s, p3\/m, z9.s, z19.s\n+    __ sve_fmul(z20, __ S, p7, z9);                    \/\/       fmul    z20.s, p7\/m, z20.s, z9.s\n+    __ sve_fneg(z13, __ S, p3, z19);                   \/\/       fneg    z13.s, p3\/m, z19.s\n+    __ sve_frintm(z24, __ S, p2, z19);                 \/\/       frintm  z24.s, p2\/m, z19.s\n+    __ sve_frintn(z17, __ S, p4, z16);                 \/\/       frintn  z17.s, p4\/m, z16.s\n+    __ sve_frintp(z0, __ S, p0, z11);                  \/\/       frintp  z0.s, p0\/m, z11.s\n+    __ sve_fsqrt(z15, __ S, p3, z15);                  \/\/       fsqrt   z15.s, p3\/m, z15.s\n+    __ sve_fsub(z15, __ S, p7, z5);                    \/\/       fsub    z15.s, p7\/m, z15.s, z5.s\n+    __ sve_fmad(z10, __ S, p5, z26, z3);               \/\/       fmad    z10.s, p5\/m, z26.s, z3.s\n+    __ sve_fmla(z9, __ D, p4, z28, z10);               \/\/       fmla    z9.d, p4\/m, z28.d, z10.d\n+    __ sve_fmls(z3, __ D, p5, z7, z23);                \/\/       fmls    z3.d, p5\/m, z7.d, z23.d\n+    __ sve_fnmla(z13, __ S, p5, z10, z26);             \/\/       fnmla   z13.s, p5\/m, z10.s, z26.s\n+    __ sve_fnmls(z17, __ S, p7, z17, z14);             \/\/       fnmls   z17.s, p7\/m, z17.s, z14.s\n+    __ sve_mla(z29, __ B, p4, z21, z20);               \/\/       mla     z29.b, p4\/m, z21.b, z20.b\n+    __ sve_mls(z19, __ S, p0, z1, z26);                \/\/       mls     z19.s, p0\/m, z1.s, z26.s\n+    __ sve_and(z9, z16, z17);                          \/\/       and     z9.d, z16.d, z17.d\n+    __ sve_eor(z0, z4, z2);                            \/\/       eor     z0.d, z4.d, z2.d\n+    __ sve_orr(z14, z6, z11);                          \/\/       orr     z14.d, z6.d, z11.d\n+    __ sve_bic(z14, z16, z29);                         \/\/       bic     z14.d, z16.d, z29.d\n+    __ sve_uzp1(z3, __ H, z3, z22);                    \/\/       uzp1    z3.h, z3.h, z22.h\n+    __ sve_uzp2(z3, __ B, z24, z27);                   \/\/       uzp2    z3.b, z24.b, z27.b\n@@ -1126,9 +1128,9 @@\n-    __ sve_andv(v3, __ H, p0, z22);                    \/\/       andv h3, p0, z22.h\n-    __ sve_orv(v3, __ B, p6, z27);                     \/\/       orv b3, p6, z27.b\n-    __ sve_eorv(v19, __ D, p5, z7);                    \/\/       eorv d19, p5, z7.d\n-    __ sve_smaxv(v21, __ H, p3, z5);                   \/\/       smaxv h21, p3, z5.h\n-    __ sve_sminv(v25, __ S, p1, z21);                  \/\/       sminv s25, p1, z21.s\n-    __ sve_fminv(v17, __ S, p0, z3);                   \/\/       fminv s17, p0, z3.s\n-    __ sve_fmaxv(v19, __ S, p3, z7);                   \/\/       fmaxv s19, p3, z7.s\n-    __ sve_fadda(v14, __ S, p4, z17);                  \/\/       fadda s14, p4, s14, z17.s\n-    __ sve_uaddv(v13, __ D, p6, z17);                  \/\/       uaddv d13, p6, z17.d\n+    __ sve_andv(v19, __ D, p5, z7);                    \/\/       andv d19, p5, z7.d\n+    __ sve_orv(v21, __ H, p3, z5);                     \/\/       orv h21, p3, z5.h\n+    __ sve_eorv(v25, __ S, p1, z21);                   \/\/       eorv s25, p1, z21.s\n+    __ sve_smaxv(v17, __ H, p0, z3);                   \/\/       smaxv h17, p0, z3.h\n+    __ sve_sminv(v19, __ H, p3, z7);                   \/\/       sminv h19, p3, z7.h\n+    __ sve_fminv(v14, __ S, p4, z17);                  \/\/       fminv s14, p4, z17.s\n+    __ sve_fmaxv(v13, __ D, p6, z17);                  \/\/       fmaxv d13, p6, z17.d\n+    __ sve_fadda(v17, __ S, p2, z15);                  \/\/       fadda s17, p2, s17, z15.s\n+    __ sve_uaddv(v26, __ S, p5, z27);                  \/\/       uaddv d26, p5, z27.s\n@@ -1153,7 +1155,7 @@\n-    0x14000000,     0x17ffffd7,     0x140003a6,     0x94000000,\n-    0x97ffffd4,     0x940003a3,     0x3400000a,     0x34fffa2a,\n-    0x3400740a,     0x35000008,     0x35fff9c8,     0x350073a8,\n-    0xb400000b,     0xb4fff96b,     0xb400734b,     0xb500001d,\n-    0xb5fff91d,     0xb50072fd,     0x10000013,     0x10fff8b3,\n-    0x10007293,     0x90000013,     0x36300016,     0x3637f836,\n-    0x36307216,     0x3758000c,     0x375ff7cc,     0x375871ac,\n+    0x14000000,     0x17ffffd7,     0x140003ae,     0x94000000,\n+    0x97ffffd4,     0x940003ab,     0x3400000a,     0x34fffa2a,\n+    0x3400750a,     0x35000008,     0x35fff9c8,     0x350074a8,\n+    0xb400000b,     0xb4fff96b,     0xb400744b,     0xb500001d,\n+    0xb5fff91d,     0xb50073fd,     0x10000013,     0x10fff8b3,\n+    0x10007393,     0x90000013,     0x36300016,     0x3637f836,\n+    0x36307316,     0x3758000c,     0x375ff7cc,     0x375872ac,\n@@ -1164,13 +1166,13 @@\n-    0x54006f80,     0x54000001,     0x54fff541,     0x54006f21,\n-    0x54000002,     0x54fff4e2,     0x54006ec2,     0x54000002,\n-    0x54fff482,     0x54006e62,     0x54000003,     0x54fff423,\n-    0x54006e03,     0x54000003,     0x54fff3c3,     0x54006da3,\n-    0x54000004,     0x54fff364,     0x54006d44,     0x54000005,\n-    0x54fff305,     0x54006ce5,     0x54000006,     0x54fff2a6,\n-    0x54006c86,     0x54000007,     0x54fff247,     0x54006c27,\n-    0x54000008,     0x54fff1e8,     0x54006bc8,     0x54000009,\n-    0x54fff189,     0x54006b69,     0x5400000a,     0x54fff12a,\n-    0x54006b0a,     0x5400000b,     0x54fff0cb,     0x54006aab,\n-    0x5400000c,     0x54fff06c,     0x54006a4c,     0x5400000d,\n-    0x54fff00d,     0x540069ed,     0x5400000e,     0x54ffefae,\n-    0x5400698e,     0x5400000f,     0x54ffef4f,     0x5400692f,\n+    0x54007080,     0x54000001,     0x54fff541,     0x54007021,\n+    0x54000002,     0x54fff4e2,     0x54006fc2,     0x54000002,\n+    0x54fff482,     0x54006f62,     0x54000003,     0x54fff423,\n+    0x54006f03,     0x54000003,     0x54fff3c3,     0x54006ea3,\n+    0x54000004,     0x54fff364,     0x54006e44,     0x54000005,\n+    0x54fff305,     0x54006de5,     0x54000006,     0x54fff2a6,\n+    0x54006d86,     0x54000007,     0x54fff247,     0x54006d27,\n+    0x54000008,     0x54fff1e8,     0x54006cc8,     0x54000009,\n+    0x54fff189,     0x54006c69,     0x5400000a,     0x54fff12a,\n+    0x54006c0a,     0x5400000b,     0x54fff0cb,     0x54006bab,\n+    0x5400000c,     0x54fff06c,     0x54006b4c,     0x5400000d,\n+    0x54fff00d,     0x54006aed,     0x5400000e,     0x54ffefae,\n+    0x54006a8e,     0x5400000f,     0x54ffef4f,     0x54006a2f,\n@@ -1208,1 +1210,1 @@\n-    0xbd1b1869,     0x5800597b,     0x1800000b,     0xf8945060,\n+    0xbd1b1869,     0x58005a7b,     0x1800000b,     0xf8945060,\n@@ -1338,50 +1340,51 @@\n-    0x05e14c00,     0x05304001,     0x05314001,     0x1e601000,\n-    0x1e603000,     0x1e621000,     0x1e623000,     0x1e641000,\n-    0x1e643000,     0x1e661000,     0x1e663000,     0x1e681000,\n-    0x1e683000,     0x1e6a1000,     0x1e6a3000,     0x1e6c1000,\n-    0x1e6c3000,     0x1e6e1000,     0x1e6e3000,     0x1e701000,\n-    0x1e703000,     0x1e721000,     0x1e723000,     0x1e741000,\n-    0x1e743000,     0x1e761000,     0x1e763000,     0x1e781000,\n-    0x1e783000,     0x1e7a1000,     0x1e7a3000,     0x1e7c1000,\n-    0x1e7c3000,     0x1e7e1000,     0x1e7e3000,     0xf8208193,\n-    0xf83101b6,     0xf83c13fe,     0xf821239a,     0xf824309e,\n-    0xf826535e,     0xf8304109,     0xf82c7280,     0xf8216058,\n-    0xf8a08309,     0xf8ba03d0,     0xf8a312ea,     0xf8aa21e4,\n-    0xf8a2310b,     0xf8aa522f,     0xf8a2418a,     0xf8ac71af,\n-    0xf8a26287,     0xf8fa8090,     0xf8e20184,     0xf8f01215,\n-    0xf8f022ab,     0xf8f7334c,     0xf8f751dc,     0xf8eb4038,\n-    0xf8ec715f,     0xf8f06047,     0xf863826d,     0xf8710070,\n-    0xf86113cb,     0xf86521e8,     0xf87d301e,     0xf8745287,\n-    0xf87742bc,     0xf87b70b9,     0xf8616217,     0xb83f8185,\n-    0xb82901fc,     0xb83d13f6,     0xb83320bf,     0xb82e33f0,\n-    0xb830529b,     0xb830416c,     0xb82973c6,     0xb831639b,\n-    0xb8be8147,     0xb8b4008a,     0xb8b81231,     0xb8b623a3,\n-    0xb8af3276,     0xb8b35056,     0xb8af4186,     0xb8b071ab,\n-    0xb8b763c1,     0xb8f38225,     0xb8e202d0,     0xb8ed12aa,\n-    0xb8fd219b,     0xb8fb3023,     0xb8ff5278,     0xb8f14389,\n-    0xb8fb70ef,     0xb8f563f7,     0xb87983e2,     0xb87b0150,\n-    0xb8771073,     0xb8702320,     0xb87a3057,     0xb870508c,\n-    0xb87c43be,     0xb87070db,     0xb86961fd,     0xce273c87,\n-    0xce080ac9,     0xce7e8e9b,     0xce808b45,     0xce79806e,\n-    0xce758768,     0xcec0835a,     0xce608ad8,     0x2520d264,\n-    0x2521cf80,     0x058074c1,     0x054242c9,     0x05004476,\n-    0x25a0df08,     0x25a1c206,     0x0583288b,     0x05401c3a,\n-    0x05027e8d,     0x2520ce05,     0x25a1cb0a,     0x0580989a,\n-    0x0540e096,     0x0500fb73,     0x2560c2ce,     0x2521d590,\n-    0x05803e97,     0x05400d31,     0x05003ed0,     0x2520c623,\n-    0x25a1cdd1,     0x058052ac,     0x0540ba33,     0x05003ed7,\n-    0x25a0c6cd,     0x2521cf00,     0x0583c5b1,     0x05407336,\n-    0x05001e62,     0x04e400f4,     0x04a80407,     0x65c402d3,\n-    0x65cb0ac9,     0x659007c5,     0x0456ac36,     0x04c01608,\n-    0x049a048f,     0x041087a8,     0x04db13bc,     0x045aac49,\n-    0x041900fc,     0x0453963a,     0x04d192a8,     0x049016a5,\n-    0x0497b3b6,     0x049ea093,     0x04180677,     0x04081a77,\n-    0x04ca09c8,     0x04011eb1,     0x04dca15e,     0x6580812c,\n-    0x65cd9098,     0x65c68b66,     0x65c793cd,     0x65c297d6,\n-    0x049dae69,     0x6582bd34,     0x6580ae6d,     0x6581aa78,\n-    0x658db211,     0x65818160,     0x65a48def,     0x65ea041d,\n-    0x65e9201a,     0x65e34b1c,     0x65ed7b87,     0x04d1598a,\n-    0x049d6c51,     0x04273295,     0x04ba3022,     0x04713209,\n-    0x04e23080,     0x05ab68ce,     0x057d6e0e,     0x045a22c3,\n-    0x04183b63,     0x04d934f3,     0x04482cb5,     0x048a26b9,\n-    0x65872071,     0x65862cf3,     0x6598322e,     0x04c13a2d,\n+    0x05e14c00,     0x05304001,     0x05314001,     0x05a18610,\n+    0x05e18610,     0x1e601000,     0x1e603000,     0x1e621000,\n+    0x1e623000,     0x1e641000,     0x1e643000,     0x1e661000,\n+    0x1e663000,     0x1e681000,     0x1e683000,     0x1e6a1000,\n+    0x1e6a3000,     0x1e6c1000,     0x1e6c3000,     0x1e6e1000,\n+    0x1e6e3000,     0x1e701000,     0x1e703000,     0x1e721000,\n+    0x1e723000,     0x1e741000,     0x1e743000,     0x1e761000,\n+    0x1e763000,     0x1e781000,     0x1e783000,     0x1e7a1000,\n+    0x1e7a3000,     0x1e7c1000,     0x1e7c3000,     0x1e7e1000,\n+    0x1e7e3000,     0xf8208193,     0xf83101b6,     0xf83c13fe,\n+    0xf821239a,     0xf824309e,     0xf826535e,     0xf8304109,\n+    0xf82c7280,     0xf8216058,     0xf8a08309,     0xf8ba03d0,\n+    0xf8a312ea,     0xf8aa21e4,     0xf8a2310b,     0xf8aa522f,\n+    0xf8a2418a,     0xf8ac71af,     0xf8a26287,     0xf8fa8090,\n+    0xf8e20184,     0xf8f01215,     0xf8f022ab,     0xf8f7334c,\n+    0xf8f751dc,     0xf8eb4038,     0xf8ec715f,     0xf8f06047,\n+    0xf863826d,     0xf8710070,     0xf86113cb,     0xf86521e8,\n+    0xf87d301e,     0xf8745287,     0xf87742bc,     0xf87b70b9,\n+    0xf8616217,     0xb83f8185,     0xb82901fc,     0xb83d13f6,\n+    0xb83320bf,     0xb82e33f0,     0xb830529b,     0xb830416c,\n+    0xb82973c6,     0xb831639b,     0xb8be8147,     0xb8b4008a,\n+    0xb8b81231,     0xb8b623a3,     0xb8af3276,     0xb8b35056,\n+    0xb8af4186,     0xb8b071ab,     0xb8b763c1,     0xb8f38225,\n+    0xb8e202d0,     0xb8ed12aa,     0xb8fd219b,     0xb8fb3023,\n+    0xb8ff5278,     0xb8f14389,     0xb8fb70ef,     0xb8f563f7,\n+    0xb87983e2,     0xb87b0150,     0xb8771073,     0xb8702320,\n+    0xb87a3057,     0xb870508c,     0xb87c43be,     0xb87070db,\n+    0xb86961fd,     0xce273c87,     0xce080ac9,     0xce7e8e9b,\n+    0xce808b45,     0xce79806e,     0xce758768,     0xcec0835a,\n+    0xce608ad8,     0x2520d264,     0x2521cf80,     0x058074c1,\n+    0x054242c9,     0x05004476,     0x25a0df08,     0x25a1c206,\n+    0x0583288b,     0x05401c3a,     0x05027e8d,     0x2520ce05,\n+    0x25a1cb0a,     0x0580989a,     0x0540e096,     0x0500fb73,\n+    0x2560c2ce,     0x2521d590,     0x05803e97,     0x05400d31,\n+    0x05003ed0,     0x2520c623,     0x25a1cdd1,     0x058052ac,\n+    0x0540ba33,     0x05003ed7,     0x25a0c6cd,     0x2521cf00,\n+    0x0583c5b1,     0x05407336,     0x05001e62,     0x04e400f4,\n+    0x04a80407,     0x65c402d3,     0x65cb0ac9,     0x659007c5,\n+    0x0456ac36,     0x04c01608,     0x049a048f,     0x041087a8,\n+    0x04db13bc,     0x0459ac49,     0x041aa0fc,     0x0459163a,\n+    0x04d392a8,     0x049196a5,     0x049013b6,     0x0497a093,\n+    0x041ea677,     0x04181a77,     0x05e789c8,     0x04081eb1,\n+    0x048a015e,     0x0401012c,     0x04dcb098,     0x65c08b66,\n+    0x65cd93cd,     0x65c697d6,     0x65878e69,     0x65829d34,\n+    0x049dae6d,     0x6582aa78,     0x6580b211,     0x6581a160,\n+    0x658dadef,     0x65819caf,     0x65a3974a,     0x65ea1389,\n+    0x65f734e3,     0x65ba554d,     0x65ae7e31,     0x041452bd,\n+    0x049a6033,     0x04313209,     0x04a23080,     0x046b30ce,\n+    0x04fd320e,     0x05766863,     0x053b6f03,     0x04da34f3,\n+    0x04582cb5,     0x049926b9,     0x04482071,     0x044a2cf3,\n+    0x6587322e,     0x65c63a2d,     0x659829f1,     0x0481377a,\n","filename":"test\/hotspot\/gtest\/aarch64\/asmtest.out.h","additions":119,"deletions":116,"binary":false,"changes":235,"status":"modified"}]}