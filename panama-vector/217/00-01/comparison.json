{"files":[{"patch":"@@ -239,2 +239,2 @@\n-        if (UseSVE == 0 && (!VM_Version::supports_fphp() || !VM_Version::supports_asimdhp())) {\n-          return false;\n+        if (UseSVE > 0 || (VM_Version::supports_fphp() && VM_Version::supports_asimdhp())) {\n+          break;\n@@ -242,1 +242,1 @@\n-        break;\n+        return false;\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -229,2 +229,2 @@\n-        if (UseSVE == 0 && (!VM_Version::supports_fphp() || !VM_Version::supports_asimdhp())) {\n-          return false;\n+        if (UseSVE > 0 || (VM_Version::supports_fphp() && VM_Version::supports_asimdhp())) {\n+          break;\n@@ -232,1 +232,1 @@\n-        break;\n+        return false;\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -228,0 +228,13 @@\n+\/\/ This method is used to generate Advanced SIMD data processing instructions\n+void Assembler::fp_arithmetic(Instruction_aarch64 &current_insn, FloatRegister Vd,\n+                              SIMD_Arrangement T, FloatRegister Vn, FloatRegister Vm,\n+                              int op1, int op2, int op3) {\n+  assert(T == T4H || T == T8H || T == T2S || T == T4S || T == T2D, \"invalid arrangement\");\n+  int op22 = (T == T2S || T == T4S) ? 0b0 : 0b1;\n+  int op21 = (T == T4H || T == T8H) ? 0b0 : 0b1;\n+  int op14 = (T == T4H || T == T8H) ? 0b00 : 0b11;\n+  f(0, 31), f((int)T & 1, 30), f(op1, 29), f(0b01110, 28, 24), f(op2, 23);\n+  f(op22, 22); f(op21, 21), rf(Vm, 16), f(op14, 15, 14), f(op3, 13, 10), rf(Vn, 5);\n+  rf(Vd, 0);\n+}\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.cpp","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2720,0 +2720,4 @@\n+  void fp_arithmetic(Instruction_aarch64 &current_insn, FloatRegister Vd,\n+                     SIMD_Arrangement T, FloatRegister Vn, FloatRegister Vm,\n+                     int op1, int op2, int op3);\n+\n@@ -2724,8 +2728,2 @@\n-    assert(T== T4H || T == T8H || T == T2S || T == T4S || T == T2D, \"invalid arrangement\"); \\\n-    int op22 = (T == T2S || T == T4S) ? 0b0 : 0b1;                                          \\\n-    int op21 = (T == T4H || T == T8H) ? 0b0 : 0b1;                                          \\\n-    int op15 = (T == T4H || T == T8H) ? 0b00 : 0b11;                                        \\\n-    f(0, 31), f((int)T & 1, 30), f(op1, 29), f(0b01110, 28, 24), f(op2, 23);                \\\n-    f(op22, 22); f(op21, 21), rf(Vm, 16), f(op15, 15, 14), f(op3, 13, 10), rf(Vn, 5);       \\\n-    rf(Vd, 0);                                                                              \\\n-  }\n+    fp_arithmetic(current_insn, Vd, T, Vn, Vm, op1, op2, op3);                              \\\n+ }\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"}]}