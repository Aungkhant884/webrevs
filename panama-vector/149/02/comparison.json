{"files":[{"patch":"@@ -0,0 +1,138 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Alibaba Group Holding Limited. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.jdk.incubator.vector.bigdata;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.random.RandomGenerator;\n+\n+import jdk.incubator.vector.IntVector;\n+import jdk.incubator.vector.VectorSpecies;\n+import jdk.incubator.vector.VectorMask;\n+import jdk.incubator.vector.VectorOperators;\n+\n+import org.openjdk.jmh.annotations.*;\n+\n+@BenchmarkMode(Mode.Throughput)\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@State(Scope.Benchmark)\n+@Warmup(iterations = 10, time = 1)\n+@Measurement(iterations = 10, time = 1)\n+@Fork(value = 1, jvmArgsPrepend = {\"--add-modules=jdk.incubator.vector\"})\n+public class SelectiveStore {\n+\n+  @Param(\"1024\")\n+  int ARRAY_LENGTH;\n+\n+  private static final VectorSpecies<Integer> INT_64_SPECIES =\n+    IntVector.SPECIES_64;\n+  private static final VectorSpecies<Integer> INT_128_SPECIES =\n+    IntVector.SPECIES_128;\n+  private static final VectorSpecies<Integer> INT_256_SPECIES =\n+    IntVector.SPECIES_256;\n+  private static final VectorSpecies<Integer> INT_512_SPECIES =\n+    IntVector.SPECIES_512;\n+  private static final VectorSpecies<Integer> INT_PREFERRED_SPECIES =\n+    IntVector.SPECIES_PREFERRED;\n+\n+  private int conflict_cnt;\n+  private int[] index;\n+  private int[] input1;\n+  private int[] input2;\n+  private int[] conflict_array;\n+\n+  @Setup\n+  public void init() {\n+    index = new int[ARRAY_LENGTH];\n+    input1 = new int[ARRAY_LENGTH];\n+    input2 = new int[ARRAY_LENGTH];\n+    conflict_array = new int[ARRAY_LENGTH];\n+\n+    RandomGenerator rng = RandomGenerator.getDefault();\n+    int conflict_id_each_5_elements = rng.nextInt(5);\n+\n+    for (int i = 0; i < ARRAY_LENGTH; i++) {\n+      index[i] = rng.nextInt(ARRAY_LENGTH);\n+      input1[i] = rng.nextInt();\n+      \/\/ Generate 20% conflict data\n+      int remainder = i % 5;\n+      if (remainder == conflict_id_each_5_elements) {\n+        input2[i] = rng.nextInt();\n+      } else {\n+        input2[i] = input1[i];\n+      }\n+      conflict_array[i] = 0;\n+    }\n+  }\n+\n+  private void selectiveStore(VectorSpecies<Integer> species) {\n+    conflict_cnt = 0;\n+    for (int i = 0; i < ARRAY_LENGTH; i += species.length()) {\n+      IntVector av = IntVector.fromArray(species, input1, i);\n+      IntVector bv = IntVector.fromArray(species, input2, i);\n+      IntVector cv = IntVector.fromArray(species, index, i);\n+      VectorMask<Integer> mask = av.compare(VectorOperators.NE, bv);\n+      IntVector dv = cv.compress(mask);\n+      dv.intoArray(conflict_array, conflict_cnt, mask.compress());\n+      conflict_cnt += mask.trueCount();\n+    }\n+  }\n+\n+  @Benchmark\n+  public void selectiveStore_scalar() {\n+    conflict_cnt = 0;\n+    for (int i = 0; i < ARRAY_LENGTH; i++) {\n+      if (input1[i] != input2[i]) {\n+        conflict_array[conflict_cnt] = index[i];\n+        conflict_cnt++;\n+      }\n+    }\n+  }\n+\n+  @Benchmark\n+  public void selectiveStore_vector_64() {\n+    selectiveStore(INT_64_SPECIES);\n+  }\n+\n+  @Benchmark\n+  public void selectiveStore_vector_128() {\n+    selectiveStore(INT_128_SPECIES);\n+  }\n+\n+  @Benchmark\n+  public void selectiveStore_vector_256() {\n+    selectiveStore(INT_256_SPECIES);\n+  }\n+\n+  @Benchmark\n+  public void selectiveStore_vector_512() {\n+    selectiveStore(INT_512_SPECIES);\n+  }\n+\n+  @Benchmark\n+  public void selectiveStore_vector_preferred() {\n+    selectiveStore(INT_PREFERRED_SPECIES);\n+  }\n+}\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/bigdata\/SelectiveStore.java","additions":138,"deletions":0,"binary":false,"changes":138,"status":"added"}]}