{"files":[{"patch":"@@ -0,0 +1,189 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Alibaba Group Holding Limited. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.jdk.incubator.vector.bigdata;\n+\n+import java.util.Random;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import jdk.incubator.vector.IntVector;\n+import jdk.incubator.vector.VectorSpecies;\n+import jdk.incubator.vector.VectorMask;\n+import jdk.incubator.vector.VectorOperators;\n+\n+import org.openjdk.jmh.annotations.*;\n+\n+@BenchmarkMode(Mode.Throughput)\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@State(Scope.Benchmark)\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 10, time = 1)\n+@Fork(value = 1, jvmArgsPrepend = {\"--add-modules=jdk.incubator.vector\", \"--add-exports\", \"java.base\/jdk.internal.vm.vector=ALL-UNNAMED\", \"-ea\"})\n+public class SelectiveStore {\n+\n+  private static int ARRAY_LENGTH = 1024;\n+\n+  private static final VectorSpecies<Integer> INT_128_SPECIES =\n+    IntVector.SPECIES_128;\n+  private static final VectorSpecies<Integer> INT_256_SPECIES =\n+    IntVector.SPECIES_256;\n+  private static final VectorSpecies<Integer> INT_512_SPECIES =\n+    IntVector.SPECIES_512;\n+  private static final VectorSpecies<Integer> INT_PREFERRED_SPECIES =\n+    IntVector.SPECIES_PREFERRED;\n+\n+  @State(Scope.Thread)\n+  public static class ThreadLocalData {\n+\n+    private int conflict_scalar_cnt = 0;\n+    private int conflict_vector_cnt = 0;\n+    private int[] index = new int[ARRAY_LENGTH];\n+    private int[] conflict_scalar = new int[ARRAY_LENGTH];\n+    private int[] conflict_vector = new int[ARRAY_LENGTH];\n+    private int[] input1 = new int[ARRAY_LENGTH];\n+    private int[] input2 = new int[ARRAY_LENGTH];\n+    private Random rand = new Random();\n+\n+    @Setup(Level.Trial)\n+    public void doSetup() {\n+      int conflict_id_each_5_elements = ThreadLocalRandom.current().nextInt(5);\n+\n+      for (int i = 0; i < ARRAY_LENGTH; i++) {\n+        index[i] = ThreadLocalRandom.current().nextInt(ARRAY_LENGTH);\n+        input1[i] = ThreadLocalRandom.current().nextInt();\n+        \/\/ Generate 20% conflict data\n+        int remainder = i % 5;\n+        if (remainder == conflict_id_each_5_elements) {\n+          input2[i] = ThreadLocalRandom.current().nextInt();\n+        } else {\n+          input2[i] = input1[i];\n+        }\n+\n+        conflict_scalar[i] = 0;\n+        conflict_vector[i] = 0;\n+      }\n+    }\n+  }\n+\n+  @Benchmark\n+  @Threads(8)\n+  public void selectiveStore_scalar(ThreadLocalData tld) {\n+    tld.conflict_scalar_cnt = 0;\n+    for (int i = 0; i < ARRAY_LENGTH; i++) {\n+      if (tld.input1[i] != tld.input2[i]) {\n+        tld.conflict_scalar[tld.conflict_scalar_cnt++] = tld.index[i];\n+      }\n+    }\n+  }\n+\n+  @Benchmark\n+  @Threads(8)\n+  public void selectiveStore_vector_128(ThreadLocalData tld) {\n+    tld.conflict_vector_cnt = 0;\n+    for (int i = 0; i < ARRAY_LENGTH; i += INT_128_SPECIES.length()) {\n+      IntVector av = IntVector.fromArray(INT_128_SPECIES, tld.input1, i);\n+      IntVector bv = IntVector.fromArray(INT_128_SPECIES, tld.input2, i);\n+      IntVector cv = IntVector.fromArray(INT_128_SPECIES, tld.index, i);\n+      VectorMask<Integer> mask = av.compare(VectorOperators.NE, bv);\n+      IntVector dv = cv.compress(mask);\n+      dv.intoArray(tld.conflict_vector, tld.conflict_vector_cnt, mask.prefixMask());\n+      tld.conflict_vector_cnt += mask.trueCount();\n+    }\n+  }\n+\n+  @Benchmark\n+  @Threads(8)\n+  public void selectiveStore_vector_256(ThreadLocalData tld) {\n+    tld.conflict_vector_cnt = 0;\n+    for (int i = 0; i < ARRAY_LENGTH; i += INT_256_SPECIES.length()) {\n+      IntVector av = IntVector.fromArray(INT_256_SPECIES, tld.input1, i);\n+      IntVector bv = IntVector.fromArray(INT_256_SPECIES, tld.input2, i);\n+      IntVector cv = IntVector.fromArray(INT_256_SPECIES, tld.index, i);\n+      VectorMask<Integer> mask = av.compare(VectorOperators.NE, bv);\n+      IntVector dv = cv.compress(mask);\n+      dv.intoArray(tld.conflict_vector, tld.conflict_vector_cnt, mask.prefixMask());\n+      tld.conflict_vector_cnt += mask.trueCount();\n+    }\n+  }\n+\n+  @Benchmark\n+  @Threads(8)\n+  public void selectiveStore_vector_512(ThreadLocalData tld) {\n+    tld.conflict_vector_cnt = 0;\n+    for (int i = 0; i < ARRAY_LENGTH; i += INT_512_SPECIES.length()) {\n+      IntVector av = IntVector.fromArray(INT_512_SPECIES, tld.input1, i);\n+      IntVector bv = IntVector.fromArray(INT_512_SPECIES, tld.input2, i);\n+      IntVector cv = IntVector.fromArray(INT_512_SPECIES, tld.index, i);\n+      VectorMask<Integer> mask = av.compare(VectorOperators.NE, bv);\n+      IntVector dv = cv.compress(mask);\n+      dv.intoArray(tld.conflict_vector, tld.conflict_vector_cnt, mask.prefixMask());\n+      tld.conflict_vector_cnt += mask.trueCount();\n+    }\n+  }\n+\n+  @Benchmark\n+  @Threads(8)\n+  public void selectiveStore_vector_preferred(ThreadLocalData tld) {\n+    tld.conflict_vector_cnt = 0;\n+    for (int i = 0; i < ARRAY_LENGTH; i += INT_PREFERRED_SPECIES.length()) {\n+      IntVector av = IntVector.fromArray(INT_PREFERRED_SPECIES, tld.input1, i);\n+      IntVector bv = IntVector.fromArray(INT_PREFERRED_SPECIES, tld.input2, i);\n+      IntVector cv = IntVector.fromArray(INT_PREFERRED_SPECIES, tld.index, i);\n+      VectorMask<Integer> mask = av.compare(VectorOperators.NE, bv);\n+      IntVector dv = cv.compress(mask);\n+      dv.intoArray(tld.conflict_vector, tld.conflict_vector_cnt, mask.prefixMask());\n+      tld.conflict_vector_cnt += mask.trueCount();\n+    }\n+  }\n+\n+  @Benchmark\n+  @Threads(8)\n+  public void selectiveStore_verify(ThreadLocalData tld) {\n+    \/\/ Initialization\n+    int conflict_id_each_5_elements = ThreadLocalRandom.current().nextInt(5);\n+    for (int i = 0; i < ARRAY_LENGTH; i++) {\n+      tld.index[i] = ThreadLocalRandom.current().nextInt(ARRAY_LENGTH);\n+      tld.input1[i] = ThreadLocalRandom.current().nextInt();\n+      \/\/ Generate 20% conflict data\n+      int remainder = i % 5;\n+      if (remainder == conflict_id_each_5_elements) {\n+        tld.input2[i] = ThreadLocalRandom.current().nextInt();\n+      } else {\n+        tld.input2[i] = tld.input1[i];\n+      }\n+      tld.conflict_scalar[i] = 0;\n+      tld.conflict_vector[i] = 0;\n+    }\n+    \/\/ Test\n+    selectiveStore_scalar(tld);\n+    selectiveStore_vector_preferred(tld);\n+    \/\/ Verify\n+    for (int i = 0; i < ARRAY_LENGTH; i++) {\n+      assert(tld.conflict_scalar[i] == tld.conflict_vector[i]);\n+    }\n+    assert(tld.conflict_scalar_cnt == tld.conflict_vector_cnt);\n+  }\n+}\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/bigdata\/SelectiveStore.java","additions":189,"deletions":0,"binary":false,"changes":189,"status":"added"}]}