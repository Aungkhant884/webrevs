{"files":[{"patch":"@@ -1811,1 +1811,1 @@\n-      if (is_integral_type(bt) && size_in_bits == 256 && UseAVX < 2) {\n+      if (size_in_bits == 256 && UseAVX < 2) {\n@@ -1816,1 +1816,1 @@\n-      if (is_integral_type(bt) && size_in_bits == 256 && UseAVX < 2) {\n+      if (size_in_bits == 256 && UseAVX < 2) {\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -758,1 +758,1 @@\n-  int cast_vopc = VectorCastNode::opcode(T_BYTE); \/\/ from shuffle of type T_BYTE\n+  int cast_vopc = VectorCastNode::opcode(T_BYTE, false); \/\/ from shuffle of type T_BYTE\n@@ -2439,1 +2439,1 @@\n-    int cast_vopc = VectorCastNode::opcode(new_elem_bt_from);\n+    int cast_vopc = VectorCastNode::opcode(new_elem_bt_from, is_ucast);\n@@ -2466,1 +2466,1 @@\n-      op = gvn().transform(VectorCastNode::make(cast_vopc, op, elem_bt_to, num_elem_for_cast, is_ucast));\n+      op = gvn().transform(VectorCastNode::make(cast_vopc, op, elem_bt_to, num_elem_for_cast));\n@@ -2491,1 +2491,1 @@\n-      op = gvn().transform(VectorCastNode::make(cast_vopc, op, elem_bt_to, num_elem_to, is_ucast));\n+      op = gvn().transform(VectorCastNode::make(cast_vopc, op, elem_bt_to, num_elem_to));\n@@ -2517,1 +2517,1 @@\n-        op = gvn().transform(VectorCastNode::make(cast_vopc, op, elem_bt_to, num_elem_to, is_ucast));\n+        op = gvn().transform(VectorCastNode::make(cast_vopc, op, elem_bt_to, num_elem_to));\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1072,1 +1072,1 @@\n-VectorCastNode* VectorCastNode::make(int vopc, Node* n1, BasicType bt, uint vlen, bool is_unsigned) {\n+VectorCastNode* VectorCastNode::make(int vopc, Node* n1, BasicType bt, uint vlen) {\n@@ -1074,27 +1074,13 @@\n-  if (!is_unsigned) {\n-    switch (vopc) {\n-      case Op_VectorCastB2X: return new VectorCastB2XNode(n1, vt);\n-      case Op_VectorCastS2X: return new VectorCastS2XNode(n1, vt);\n-      case Op_VectorCastI2X: return new VectorCastI2XNode(n1, vt);\n-      case Op_VectorCastL2X: return new VectorCastL2XNode(n1, vt);\n-      case Op_VectorCastF2X: return new VectorCastF2XNode(n1, vt);\n-      case Op_VectorCastD2X: return new VectorCastD2XNode(n1, vt);\n-      default:\n-        assert(false, \"unknown node: %s\", NodeClassNames[vopc]);\n-        return NULL;\n-    }\n-  } else {\n-    switch (vopc) {\n-      case Op_VectorCastB2X:\n-        assert(bt == T_SHORT || bt == T_INT || bt == T_LONG, \"illegal\");\n-        return new VectorUCastB2XNode(n1, vt);\n-      case Op_VectorCastS2X:\n-        assert(bt == T_INT || bt == T_LONG, \"illegal\");\n-        return new VectorUCastS2XNode(n1, vt);\n-      case Op_VectorCastI2X:\n-        assert(bt == T_LONG, \"illegal\");\n-        return new VectorUCastI2XNode(n1, vt);\n-      default:\n-        assert(false, \"unknown node: %s\", NodeClassNames[vopc]);\n-        return NULL;\n-    }\n+  switch (vopc) {\n+    case Op_VectorCastB2X:  return new VectorCastB2XNode(n1, vt);\n+    case Op_VectorCastS2X:  return new VectorCastS2XNode(n1, vt);\n+    case Op_VectorCastI2X:  return new VectorCastI2XNode(n1, vt);\n+    case Op_VectorCastL2X:  return new VectorCastL2XNode(n1, vt);\n+    case Op_VectorCastF2X:  return new VectorCastF2XNode(n1, vt);\n+    case Op_VectorCastD2X:  return new VectorCastD2XNode(n1, vt);\n+    case Op_VectorUCastB2X: return new VectorUCastB2XNode(n1, vt);\n+    case Op_VectorUCastS2X: return new VectorUCastS2XNode(n1, vt);\n+    case Op_VectorUCastI2X: return new VectorUCastI2XNode(n1, vt);\n+    default:\n+      assert(false, \"unknown node: %s\", NodeClassNames[vopc]);\n+      return NULL;\n@@ -1104,1 +1090,1 @@\n-int VectorCastNode::opcode(BasicType bt) {\n+int VectorCastNode::opcode(BasicType bt, bool is_unsigned) {\n@@ -1106,3 +1092,3 @@\n-    case T_BYTE:   return Op_VectorCastB2X;\n-    case T_SHORT:  return Op_VectorCastS2X;\n-    case T_INT:    return Op_VectorCastI2X;\n+    case T_BYTE:   return is_unsigned ? Op_VectorUCastB2X : Op_VectorCastB2X;\n+    case T_SHORT:  return is_unsigned ? Op_VectorUCastS2X : Op_VectorCastS2X;\n+    case T_INT:    return is_unsigned ? Op_VectorUCastI2X : Op_VectorCastI2X;\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":18,"deletions":32,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -1425,2 +1425,2 @@\n-  static VectorCastNode* make(int vopc, Node* n1, BasicType bt, uint vlen, bool is_unsigned = false);\n-  static int  opcode(BasicType bt);\n+  static VectorCastNode* make(int vopc, Node* n1, BasicType bt, uint vlen);\n+  static int  opcode(BasicType bt, bool is_unsigned);\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}