{"files":[{"patch":"@@ -2398,0 +2398,6 @@\n+    case Op_VectorLoadShuffle:\n+    case Op_VectorRearrange:\n+      if (vlen < 4) {\n+        return false;\n+      }\n+      break;\n@@ -2409,0 +2415,4 @@\n+bool Matcher::supports_vector_variable_shifts(void) {\n+  return true;\n+}\n+\n@@ -2454,2 +2464,2 @@\n-  } else {\n-    \/\/  For the moment limit the vector size to 8 bytes with NEON.\n+  } else { \/\/ NEON\n+    \/\/ Limit the vector size to 8 bytes\n@@ -2457,0 +2467,7 @@\n+    if (bt == T_BYTE) {\n+      \/\/ To support vector api shuffle\/rearrange.\n+      size = 4;\n+    } else if (bt == T_BOOLEAN) {\n+      \/\/ To support vector api load\/store mask.\n+      size = 2;\n+    }\n@@ -2458,1 +2475,1 @@\n-    return size;\n+    return MIN2(size,max_size);\n@@ -2477,0 +2494,3 @@\n+    \/\/ For 16-bit\/32-bit mask vector, reuse VecD.\n+    case  2:\n+    case  4:\n@@ -3119,0 +3139,6 @@\n+  enc_class aarch64_enc_ldrvH(vecD dst, memory mem) %{\n+    FloatRegister dst_reg = as_FloatRegister($dst$$reg);\n+    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldr, dst_reg, MacroAssembler::H,\n+       $mem->opcode(), as_Register($mem$$base), $mem$$index, $mem$$scale, $mem$$disp);\n+  %}\n+\n@@ -3137,0 +3163,6 @@\n+  enc_class aarch64_enc_strvH(vecD src, memory mem) %{\n+    FloatRegister src_reg = as_FloatRegister($src$$reg);\n+    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::str, src_reg, MacroAssembler::H,\n+       $mem->opcode(), as_Register($mem$$base), $mem$$index, $mem$$scale, $mem$$disp);\n+  %}\n+\n@@ -4240,0 +4272,20 @@\n+operand immI_2()\n+%{\n+  predicate(n->get_int() == 2);\n+  match(ConI);\n+\n+  op_cost(0);\n+  format %{ %}\n+  interface(CONST_INTER);\n+%}\n+\n+operand immI_4()\n+%{\n+  predicate(n->get_int() == 4);\n+  match(ConI);\n+\n+  op_cost(0);\n+  format %{ %}\n+  interface(CONST_INTER);\n+%}\n+\n@@ -11210,0 +11262,1 @@\n+\/\/ This section is generated from aarch64_ad.m4\n@@ -16816,0 +16869,1 @@\n+  predicate(n->in(2)->bottom_type()->is_vect()->element_basic_type() == T_INT);\n@@ -16835,0 +16889,1 @@\n+  predicate(n->in(2)->bottom_type()->is_vect()->element_basic_type() == T_INT);\n@@ -16853,0 +16908,1 @@\n+  predicate(n->in(2)->bottom_type()->is_vect()->element_basic_type() == T_INT);\n@@ -16872,0 +16928,1 @@\n+  predicate(n->in(2)->bottom_type()->is_vect()->element_basic_type() == T_INT);\n@@ -17953,2 +18010,1 @@\n-    __ fabs(as_FloatRegister($dst$$reg), __ T2S,\n-            as_FloatRegister($src$$reg));\n+    __ fabs(as_FloatRegister($dst$$reg), __ T2S, as_FloatRegister($src$$reg));\n@@ -17966,2 +18022,1 @@\n-    __ fabs(as_FloatRegister($dst$$reg), __ T4S,\n-            as_FloatRegister($src$$reg));\n+    __ fabs(as_FloatRegister($dst$$reg), __ T4S, as_FloatRegister($src$$reg));\n@@ -17979,2 +18034,1 @@\n-    __ fabs(as_FloatRegister($dst$$reg), __ T2D,\n-            as_FloatRegister($src$$reg));\n+    __ fabs(as_FloatRegister($dst$$reg), __ T2D, as_FloatRegister($src$$reg));\n@@ -18121,1 +18175,2 @@\n-  predicate(n->as_Vector()->length_in_bytes() == 8);\n+  predicate(n->as_Vector()->length_in_bytes() == 4 ||\n+            n->as_Vector()->length_in_bytes() == 8);\n@@ -18945,6 +19000,6 @@\n-     __ cnt(as_FloatRegister($dst$$reg), __ T16B,\n-            as_FloatRegister($src$$reg));\n-     __ uaddlp(as_FloatRegister($dst$$reg), __ T16B,\n-               as_FloatRegister($dst$$reg));\n-     __ uaddlp(as_FloatRegister($dst$$reg), __ T8H,\n-               as_FloatRegister($dst$$reg));\n+    __ cnt(as_FloatRegister($dst$$reg), __ T16B,\n+           as_FloatRegister($src$$reg));\n+    __ uaddlp(as_FloatRegister($dst$$reg), __ T16B,\n+              as_FloatRegister($dst$$reg));\n+    __ uaddlp(as_FloatRegister($dst$$reg), __ T8H,\n+              as_FloatRegister($dst$$reg));\n@@ -18964,6 +19019,6 @@\n-     __ cnt(as_FloatRegister($dst$$reg), __ T8B,\n-            as_FloatRegister($src$$reg));\n-     __ uaddlp(as_FloatRegister($dst$$reg), __ T8B,\n-               as_FloatRegister($dst$$reg));\n-     __ uaddlp(as_FloatRegister($dst$$reg), __ T4H,\n-               as_FloatRegister($dst$$reg));\n+    __ cnt(as_FloatRegister($dst$$reg), __ T8B,\n+           as_FloatRegister($src$$reg));\n+    __ uaddlp(as_FloatRegister($dst$$reg), __ T8B,\n+              as_FloatRegister($dst$$reg));\n+    __ uaddlp(as_FloatRegister($dst$$reg), __ T4H,\n+              as_FloatRegister($dst$$reg));\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":77,"deletions":22,"binary":false,"changes":99,"status":"modified"},{"patch":"@@ -996,0 +996,4 @@\n+bool Matcher::supports_vector_variable_shifts(void) {\n+  return VM_Version::has_simd();\n+}\n+\n","filename":"src\/hotspot\/cpu\/arm\/arm.ad","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2164,0 +2164,4 @@\n+bool Matcher::supports_vector_variable_shifts(void) {\n+  return false; \/\/ not supported\n+}\n+\n","filename":"src\/hotspot\/cpu\/ppc\/ppc.ad","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1576,0 +1576,4 @@\n+bool Matcher::supports_vector_variable_shifts(void) {\n+  return false; \/\/ not supported\n+}\n+\n","filename":"src\/hotspot\/cpu\/s390\/s390.ad","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3318,1 +3318,1 @@\n-operand immI0() %{\n+operand immI_0() %{\n@@ -3328,1 +3328,1 @@\n-operand immI1() %{\n+operand immI_1() %{\n@@ -3422,2 +3422,2 @@\n-operand immI_1() %{\n-  predicate( n->get_int() == 1 );\n+operand immI_2() %{\n+  predicate( n->get_int() == 2 );\n@@ -3431,2 +3431,2 @@\n-operand immI_2() %{\n-  predicate( n->get_int() == 2 );\n+operand immI_3() %{\n+  predicate( n->get_int() == 3 );\n@@ -3440,2 +3440,13 @@\n-operand immI_3() %{\n-  predicate( n->get_int() == 3 );\n+operand immI_4()\n+%{\n+  predicate(n->get_int() == 4);\n+  match(ConI);\n+\n+  op_cost(0);\n+  format %{ %}\n+  interface(CONST_INTER);\n+%}\n+\n+operand immI_8()\n+%{\n+  predicate(n->get_int() == 8);\n@@ -3818,0 +3829,12 @@\n+operand rRegP() %{\n+  constraint(ALLOC_IN_RC(int_reg));\n+  match(RegP);\n+  match(eAXRegP);\n+  match(eBXRegP);\n+  match(eCXRegP);\n+  match(eDIRegP);\n+\n+  format %{ %}\n+  interface(REG_INTER);\n+%}\n+\n@@ -3950,0 +3973,9 @@\n+\/\/ Flags register, used as output of compare instructions\n+operand rFlagsReg() %{\n+  constraint(ALLOC_IN_RC(int_flags));\n+  match(RegFlags);\n+\n+  format %{ \"EFLAGS\" %}\n+  interface(REG_INTER);\n+%}\n+\n@@ -4080,0 +4112,8 @@\n+operand legRegF() %{\n+  predicate( UseSSE>=1 );\n+  constraint(ALLOC_IN_RC(float_reg_legacy));\n+  match(RegF);\n+  format %{ %}\n+  interface(REG_INTER);\n+%}\n+\n@@ -4099,0 +4139,8 @@\n+operand legRegD() %{\n+  predicate( UseSSE>=2 );\n+  constraint(ALLOC_IN_RC(double_reg_legacy));\n+  match(RegD);\n+  format %{ %}\n+  interface(REG_INTER);\n+%}\n+\n@@ -5849,0 +5897,40 @@\n+\/\/ Load Float\n+instruct MoveF2LEG(legRegF dst, regF src) %{\n+  match(Set dst src);\n+  format %{ \"movss $dst,$src\\t# if src != dst load float (4 bytes)\" %}\n+  ins_encode %{\n+    __ movflt($dst$$XMMRegister, $src$$XMMRegister);\n+  %}\n+  ins_pipe( fpu_reg_reg );\n+%}\n+\n+\/\/ Load Float\n+instruct MoveLEG2F(regF dst, legRegF src) %{\n+  match(Set dst src);\n+  format %{ \"movss $dst,$src\\t# if src != dst load float (4 bytes)\" %}\n+  ins_encode %{\n+    __ movflt($dst$$XMMRegister, $src$$XMMRegister);\n+  %}\n+  ins_pipe( fpu_reg_reg );\n+%}\n+\n+\/\/ Load Double\n+instruct MoveD2LEG(legRegD dst, regD src) %{\n+  match(Set dst src);\n+  format %{ \"movsd $dst,$src\\t# if src != dst load double (8 bytes)\" %}\n+  ins_encode %{\n+    __ movdbl($dst$$XMMRegister, $src$$XMMRegister);\n+  %}\n+  ins_pipe( fpu_reg_reg );\n+%}\n+\n+\/\/ Load Double\n+instruct MoveLEG2D(regD dst, legRegD src) %{\n+  match(Set dst src);\n+  format %{ \"movsd $dst,$src\\t# if src != dst load double (8 bytes)\" %}\n+  ins_encode %{\n+    __ movdbl($dst$$XMMRegister, $src$$XMMRegister);\n+  %}\n+  ins_pipe( fpu_reg_reg );\n+%}\n+\n@@ -5974,1 +6062,1 @@\n-instruct loadConI0(rRegI dst, immI0 src, eFlagsReg cr) %{\n+instruct loadConI0(rRegI dst, immI_0 src, eFlagsReg cr) %{\n@@ -7086,1 +7174,1 @@\n-instruct incI_eReg(rRegI dst, immI1 src, eFlagsReg cr) %{\n+instruct incI_eReg(rRegI dst, immI_1 src, eFlagsReg cr) %{\n@@ -7186,1 +7274,1 @@\n-instruct incI_mem(memory dst, immI1 src, eFlagsReg cr) %{\n+instruct incI_mem(memory dst, immI_1 src, eFlagsReg cr) %{\n@@ -7555,1 +7643,1 @@\n-instruct subP_eReg(eRegP dst, rRegI src, immI0 zero, eFlagsReg cr) %{\n+instruct subP_eReg(eRegP dst, rRegI src, immI_0 zero, eFlagsReg cr) %{\n@@ -7566,1 +7654,1 @@\n-instruct negI_eReg(rRegI dst, immI0 zero, eFlagsReg cr) %{\n+instruct negI_eReg(rRegI dst, immI_0 zero, eFlagsReg cr) %{\n@@ -8020,1 +8108,1 @@\n-instruct shlI_eReg_1(rRegI dst, immI1 shift, eFlagsReg cr) %{\n+instruct shlI_eReg_1(rRegI dst, immI_1 shift, eFlagsReg cr) %{\n@@ -8056,1 +8144,1 @@\n-instruct sarI_eReg_1(rRegI dst, immI1 shift, eFlagsReg cr) %{\n+instruct sarI_eReg_1(rRegI dst, immI_1 shift, eFlagsReg cr) %{\n@@ -8068,1 +8156,1 @@\n-instruct sarI_mem_1(memory dst, immI1 shift, eFlagsReg cr) %{\n+instruct sarI_mem_1(memory dst, immI_1 shift, eFlagsReg cr) %{\n@@ -8113,1 +8201,1 @@\n-instruct shrI_eReg_1(rRegI dst, immI1 shift, eFlagsReg cr) %{\n+instruct shrI_eReg_1(rRegI dst, immI_1 shift, eFlagsReg cr) %{\n@@ -8269,1 +8357,1 @@\n-instruct blsiI_rReg_rReg(rRegI dst, rRegI src, immI0 imm_zero, eFlagsReg cr) %{\n+instruct blsiI_rReg_rReg(rRegI dst, rRegI src, immI_0 imm_zero, eFlagsReg cr) %{\n@@ -8282,1 +8370,1 @@\n-instruct blsiI_rReg_mem(rRegI dst, memory src, immI0 imm_zero, eFlagsReg cr) %{\n+instruct blsiI_rReg_mem(rRegI dst, memory src, immI_0 imm_zero, eFlagsReg cr) %{\n@@ -8434,1 +8522,1 @@\n-instruct rolI_eReg_imm1(rRegI dst, immI1 shift, eFlagsReg cr) %{\n+instruct rolI_eReg_imm1(rRegI dst, immI_1 shift, eFlagsReg cr) %{\n@@ -8463,1 +8551,1 @@\n-instruct rolI_eReg_i1(rRegI dst, immI1 lshift, immI_M1 rshift, eFlagsReg cr) %{\n+instruct rolI_eReg_i1(rRegI dst, immI_1 lshift, immI_M1 rshift, eFlagsReg cr) %{\n@@ -8482,1 +8570,1 @@\n-instruct rolI_eReg_Var_C0(ncxRegI dst, eCXRegI shift, immI0 zero, eFlagsReg cr) %{\n+instruct rolI_eReg_Var_C0(ncxRegI dst, eCXRegI shift, immI_0 zero, eFlagsReg cr) %{\n@@ -8500,1 +8588,1 @@\n-instruct rorI_eReg_imm1(rRegI dst, immI1 shift, eFlagsReg cr) %{\n+instruct rorI_eReg_imm1(rRegI dst, immI_1 shift, eFlagsReg cr) %{\n@@ -8529,1 +8617,1 @@\n-instruct rorI_eReg_i1(rRegI dst, immI1 rshift, immI_M1 lshift, eFlagsReg cr) %{\n+instruct rorI_eReg_i1(rRegI dst, immI_1 rshift, immI_M1 lshift, eFlagsReg cr) %{\n@@ -8548,1 +8636,1 @@\n-instruct rorI_eReg_Var_C0(ncxRegI dst, eCXRegI shift, immI0 zero, eFlagsReg cr) %{\n+instruct rorI_eReg_Var_C0(ncxRegI dst, eCXRegI shift, immI_0 zero, eFlagsReg cr) %{\n@@ -8716,1 +8804,1 @@\n-instruct cmpLTMask0(rRegI dst, immI0 zero, eFlagsReg cr) %{\n+instruct cmpLTMask0(rRegI dst, immI_0 zero, eFlagsReg cr) %{\n@@ -8830,1 +8918,1 @@\n-instruct overflowNegI_rReg(eFlagsReg cr, immI0 zero, eAXRegI op2)\n+instruct overflowNegI_rReg(eFlagsReg cr, immI_0 zero, eAXRegI op2)\n@@ -11968,1 +12056,1 @@\n-instruct testI_reg( eFlagsReg cr, rRegI src, immI0 zero ) %{\n+instruct testI_reg( eFlagsReg cr, rRegI src, immI_0 zero ) %{\n@@ -11978,1 +12066,1 @@\n-instruct testI_reg_imm( eFlagsReg cr, rRegI src, immI con, immI0 zero ) %{\n+instruct testI_reg_imm( eFlagsReg cr, rRegI src, immI con, immI_0 zero ) %{\n@@ -11987,1 +12075,1 @@\n-instruct testI_reg_mem( eFlagsReg cr, rRegI src, memory mem, immI0 zero ) %{\n+instruct testI_reg_mem( eFlagsReg cr, rRegI src, memory mem, immI_0 zero ) %{\n@@ -12037,1 +12125,1 @@\n-instruct testU_reg( eFlagsRegU cr, rRegI src, immI0 zero ) %{\n+instruct testU_reg( eFlagsRegU cr, rRegI src, immI_0 zero ) %{\n@@ -12114,1 +12202,1 @@\n-instruct testP_Reg_mem( eFlagsReg cr, memory op, immI0 zero ) %{\n+instruct testP_Reg_mem( eFlagsReg cr, memory op, immI_0 zero ) %{\n@@ -13485,1 +13573,1 @@\n-\/\/ instruct incI_eReg(rRegI dst, immI1 src, eFlagsReg cr) %{\n+\/\/ instruct incI_eReg(rRegI dst, immI_1 src, eFlagsReg cr) %{\n","filename":"src\/hotspot\/cpu\/x86\/x86_32.ad","additions":121,"deletions":33,"binary":false,"changes":154,"status":"modified"},{"patch":"@@ -2870,1 +2870,1 @@\n-operand immI0()\n+operand immI_0()\n@@ -2881,1 +2881,1 @@\n-operand immI1()\n+operand immI_1()\n@@ -2902,0 +2902,30 @@\n+operand immI_2()\n+%{\n+  predicate(n->get_int() == 2);\n+  match(ConI);\n+\n+  op_cost(0);\n+  format %{ %}\n+  interface(CONST_INTER);\n+%}\n+\n+operand immI_4()\n+%{\n+  predicate(n->get_int() == 4);\n+  match(ConI);\n+\n+  op_cost(0);\n+  format %{ %}\n+  interface(CONST_INTER);\n+%}\n+\n+operand immI_8()\n+%{\n+  predicate(n->get_int() == 8);\n+  match(ConI);\n+\n+  op_cost(0);\n+  format %{ %}\n+  interface(CONST_INTER);\n+%}\n+\n@@ -5236,2 +5266,2 @@\n-     \"blendvps         $btmp,$b,$a,$b           \\n\\t\"\n-     \"blendvps         $atmp,$a,$b,$b           \\n\\t\"\n+     \"vblendvps        $btmp,$b,$a,$b           \\n\\t\"\n+     \"vblendvps        $atmp,$a,$b,$b           \\n\\t\"\n@@ -5239,2 +5269,2 @@\n-     \"cmpps.unordered  $btmp,$atmp,$atmp        \\n\\t\"\n-     \"blendvps         $dst,$tmp,$atmp,$btmp    \\n\\t\"\n+     \"vcmpps.unordered $btmp,$atmp,$atmp        \\n\\t\"\n+     \"vblendvps        $dst,$tmp,$atmp,$btmp    \\n\\t\"\n@@ -5244,2 +5274,2 @@\n-    __ blendvps($btmp$$XMMRegister, $b$$XMMRegister, $a$$XMMRegister, $b$$XMMRegister, vector_len);\n-    __ blendvps($atmp$$XMMRegister, $a$$XMMRegister, $b$$XMMRegister, $b$$XMMRegister, vector_len);\n+    __ vblendvps($btmp$$XMMRegister, $b$$XMMRegister, $a$$XMMRegister, $b$$XMMRegister, vector_len);\n+    __ vblendvps($atmp$$XMMRegister, $a$$XMMRegister, $b$$XMMRegister, $b$$XMMRegister, vector_len);\n@@ -5247,2 +5277,2 @@\n-    __ cmpps($btmp$$XMMRegister, $atmp$$XMMRegister, $atmp$$XMMRegister, Assembler::_false, vector_len);\n-    __ blendvps($dst$$XMMRegister, $tmp$$XMMRegister, $atmp$$XMMRegister, $btmp$$XMMRegister, vector_len);\n+    __ vcmpps($btmp$$XMMRegister, $atmp$$XMMRegister, $atmp$$XMMRegister, Assembler::_false, vector_len);\n+    __ vblendvps($dst$$XMMRegister, $tmp$$XMMRegister, $atmp$$XMMRegister, $btmp$$XMMRegister, vector_len);\n@@ -5272,2 +5302,2 @@\n-     \"blendvpd         $btmp,$b,$a,$b            \\n\\t\"\n-     \"blendvpd         $atmp,$a,$b,$b            \\n\\t\"\n+     \"vblendvpd        $btmp,$b,$a,$b            \\n\\t\"\n+     \"vblendvpd        $atmp,$a,$b,$b            \\n\\t\"\n@@ -5275,2 +5305,2 @@\n-     \"cmppd.unordered  $btmp,$atmp,$atmp         \\n\\t\"\n-     \"blendvpd         $dst,$tmp,$atmp,$btmp     \\n\\t\"\n+     \"vcmppd.unordered $btmp,$atmp,$atmp         \\n\\t\"\n+     \"vblendvpd        $dst,$tmp,$atmp,$btmp     \\n\\t\"\n@@ -5280,2 +5310,2 @@\n-    __ blendvpd($btmp$$XMMRegister, $b$$XMMRegister, $a$$XMMRegister, $b$$XMMRegister, vector_len);\n-    __ blendvpd($atmp$$XMMRegister, $a$$XMMRegister, $b$$XMMRegister, $b$$XMMRegister, vector_len);\n+    __ vblendvpd($btmp$$XMMRegister, $b$$XMMRegister, $a$$XMMRegister, $b$$XMMRegister, vector_len);\n+    __ vblendvpd($atmp$$XMMRegister, $a$$XMMRegister, $b$$XMMRegister, $b$$XMMRegister, vector_len);\n@@ -5283,2 +5313,2 @@\n-    __ cmppd($btmp$$XMMRegister, $atmp$$XMMRegister, $atmp$$XMMRegister, Assembler::_false, vector_len);\n-    __ blendvpd($dst$$XMMRegister, $tmp$$XMMRegister, $atmp$$XMMRegister, $btmp$$XMMRegister, vector_len);\n+    __ vcmppd($btmp$$XMMRegister, $atmp$$XMMRegister, $atmp$$XMMRegister, Assembler::_false, vector_len);\n+    __ vblendvpd($dst$$XMMRegister, $tmp$$XMMRegister, $atmp$$XMMRegister, $btmp$$XMMRegister, vector_len);\n@@ -5308,2 +5338,2 @@\n-     \"blendvps         $atmp,$a,$b,$a             \\n\\t\"\n-     \"blendvps         $btmp,$b,$a,$a             \\n\\t\"\n+     \"vblendvps        $atmp,$a,$b,$a             \\n\\t\"\n+     \"vblendvps        $btmp,$b,$a,$a             \\n\\t\"\n@@ -5311,2 +5341,2 @@\n-     \"cmpps.unordered  $btmp,$atmp,$atmp          \\n\\t\"\n-     \"blendvps         $dst,$tmp,$atmp,$btmp      \\n\\t\"\n+     \"vcmpps.unordered $btmp,$atmp,$atmp          \\n\\t\"\n+     \"vblendvps        $dst,$tmp,$atmp,$btmp      \\n\\t\"\n@@ -5316,2 +5346,2 @@\n-    __ blendvps($atmp$$XMMRegister, $a$$XMMRegister, $b$$XMMRegister, $a$$XMMRegister, vector_len);\n-    __ blendvps($btmp$$XMMRegister, $b$$XMMRegister, $a$$XMMRegister, $a$$XMMRegister, vector_len);\n+    __ vblendvps($atmp$$XMMRegister, $a$$XMMRegister, $b$$XMMRegister, $a$$XMMRegister, vector_len);\n+    __ vblendvps($btmp$$XMMRegister, $b$$XMMRegister, $a$$XMMRegister, $a$$XMMRegister, vector_len);\n@@ -5319,2 +5349,2 @@\n-    __ cmpps($btmp$$XMMRegister, $atmp$$XMMRegister, $atmp$$XMMRegister, Assembler::_false, vector_len);\n-    __ blendvps($dst$$XMMRegister, $tmp$$XMMRegister, $atmp$$XMMRegister, $btmp$$XMMRegister, vector_len);\n+    __ vcmpps($btmp$$XMMRegister, $atmp$$XMMRegister, $atmp$$XMMRegister, Assembler::_false, vector_len);\n+    __ vblendvps($dst$$XMMRegister, $tmp$$XMMRegister, $atmp$$XMMRegister, $btmp$$XMMRegister, vector_len);\n@@ -5344,2 +5374,2 @@\n-     \"blendvpd         $atmp,$a,$b,$a           \\n\\t\"\n-     \"blendvpd         $btmp,$b,$a,$a           \\n\\t\"\n+     \"vblendvpd        $atmp,$a,$b,$a           \\n\\t\"\n+     \"vblendvpd        $btmp,$b,$a,$a           \\n\\t\"\n@@ -5347,2 +5377,2 @@\n-     \"cmppd.unordered  $btmp,$atmp,$atmp        \\n\\t\"\n-     \"blendvpd         $dst,$tmp,$atmp,$btmp    \\n\\t\"\n+     \"vcmppd.unordered $btmp,$atmp,$atmp        \\n\\t\"\n+     \"vblendvpd        $dst,$tmp,$atmp,$btmp    \\n\\t\"\n@@ -5352,2 +5382,2 @@\n-    __ blendvpd($atmp$$XMMRegister, $a$$XMMRegister, $b$$XMMRegister, $a$$XMMRegister, vector_len);\n-    __ blendvpd($btmp$$XMMRegister, $b$$XMMRegister, $a$$XMMRegister, $a$$XMMRegister, vector_len);\n+    __ vblendvpd($atmp$$XMMRegister, $a$$XMMRegister, $b$$XMMRegister, $a$$XMMRegister, vector_len);\n+    __ vblendvpd($btmp$$XMMRegister, $b$$XMMRegister, $a$$XMMRegister, $a$$XMMRegister, vector_len);\n@@ -5355,2 +5385,2 @@\n-    __ cmppd($btmp$$XMMRegister, $atmp$$XMMRegister, $atmp$$XMMRegister, Assembler::_false, vector_len);\n-    __ blendvpd($dst$$XMMRegister, $tmp$$XMMRegister, $atmp$$XMMRegister, $btmp$$XMMRegister, vector_len);\n+    __ vcmppd($btmp$$XMMRegister, $atmp$$XMMRegister, $atmp$$XMMRegister, Assembler::_false, vector_len);\n+    __ vblendvpd($dst$$XMMRegister, $tmp$$XMMRegister, $atmp$$XMMRegister, $btmp$$XMMRegister, vector_len);\n@@ -5580,1 +5610,1 @@\n-instruct loadConI0(rRegI dst, immI0 src, rFlagsReg cr)\n+instruct loadConI0(rRegI dst, immI_0 src, rFlagsReg cr)\n@@ -6016,1 +6046,1 @@\n-instruct storeImmI0(memory mem, immI0 zero)\n+instruct storeImmI0(memory mem, immI_0 zero)\n@@ -6066,1 +6096,1 @@\n-instruct storeImmC0(memory mem, immI0 zero)\n+instruct storeImmC0(memory mem, immI_0 zero)\n@@ -6092,1 +6122,1 @@\n-instruct storeImmB0(memory mem, immI0 zero)\n+instruct storeImmB0(memory mem, immI_0 zero)\n@@ -6117,1 +6147,1 @@\n-instruct storeImmCM0_reg(memory mem, immI0 zero)\n+instruct storeImmCM0_reg(memory mem, immI_0 zero)\n@@ -6130,1 +6160,1 @@\n-instruct storeImmCM0(memory mem, immI0 src)\n+instruct storeImmCM0(memory mem, immI_0 src)\n@@ -7215,1 +7245,1 @@\n-instruct incI_rReg(rRegI dst, immI1 src, rFlagsReg cr)\n+instruct incI_rReg(rRegI dst, immI_1 src, rFlagsReg cr)\n@@ -7227,1 +7257,1 @@\n-instruct incI_mem(memory dst, immI1 src, rFlagsReg cr)\n+instruct incI_mem(memory dst, immI_1 src, rFlagsReg cr)\n@@ -8110,1 +8140,1 @@\n-instruct subP_rReg(rRegP dst, rRegI src, immI0 zero, rFlagsReg cr)\n+instruct subP_rReg(rRegP dst, rRegI src, immI_0 zero, rFlagsReg cr)\n@@ -8121,1 +8151,1 @@\n-instruct negI_rReg(rRegI dst, immI0 zero, rFlagsReg cr)\n+instruct negI_rReg(rRegI dst, immI_0 zero, rFlagsReg cr)\n@@ -8132,1 +8162,13 @@\n-instruct negI_mem(memory dst, immI0 zero, rFlagsReg cr)\n+instruct negI_rReg_2(rRegI dst, rFlagsReg cr)\n+%{\n+  match(Set dst (NegI dst));\n+  effect(KILL cr);\n+\n+  format %{ \"negl    $dst\\t# int\" %}\n+  ins_encode %{\n+    __ negl($dst$$Register);\n+  %}\n+  ins_pipe(ialu_reg);\n+%}\n+\n+instruct negI_mem(memory dst, immI_0 zero, rFlagsReg cr)\n@@ -8154,0 +8196,12 @@\n+instruct negL_rReg_2(rRegL dst, rFlagsReg cr)\n+%{\n+  match(Set dst (NegL dst));\n+  effect(KILL cr);\n+\n+  format %{ \"negq    $dst\\t# int\" %}\n+  ins_encode %{\n+    __ negq($dst$$Register);\n+  %}\n+  ins_pipe(ialu_reg);\n+%}\n+\n@@ -8479,1 +8533,1 @@\n-instruct salI_rReg_1(rRegI dst, immI1 shift, rFlagsReg cr)\n+instruct salI_rReg_1(rRegI dst, immI_1 shift, rFlagsReg cr)\n@@ -8491,1 +8545,1 @@\n-instruct salI_mem_1(memory dst, immI1 shift, rFlagsReg cr)\n+instruct salI_mem_1(memory dst, immI_1 shift, rFlagsReg cr)\n@@ -8551,1 +8605,1 @@\n-instruct sarI_rReg_1(rRegI dst, immI1 shift, rFlagsReg cr)\n+instruct sarI_rReg_1(rRegI dst, immI_1 shift, rFlagsReg cr)\n@@ -8563,1 +8617,1 @@\n-instruct sarI_mem_1(memory dst, immI1 shift, rFlagsReg cr)\n+instruct sarI_mem_1(memory dst, immI_1 shift, rFlagsReg cr)\n@@ -8623,1 +8677,1 @@\n-instruct shrI_rReg_1(rRegI dst, immI1 shift, rFlagsReg cr)\n+instruct shrI_rReg_1(rRegI dst, immI_1 shift, rFlagsReg cr)\n@@ -8635,1 +8689,1 @@\n-instruct shrI_mem_1(memory dst, immI1 shift, rFlagsReg cr)\n+instruct shrI_mem_1(memory dst, immI_1 shift, rFlagsReg cr)\n@@ -8696,1 +8750,1 @@\n-instruct salL_rReg_1(rRegL dst, immI1 shift, rFlagsReg cr)\n+instruct salL_rReg_1(rRegL dst, immI_1 shift, rFlagsReg cr)\n@@ -8708,1 +8762,1 @@\n-instruct salL_mem_1(memory dst, immI1 shift, rFlagsReg cr)\n+instruct salL_mem_1(memory dst, immI_1 shift, rFlagsReg cr)\n@@ -8769,1 +8823,1 @@\n-instruct sarL_rReg_1(rRegL dst, immI1 shift, rFlagsReg cr)\n+instruct sarL_rReg_1(rRegL dst, immI_1 shift, rFlagsReg cr)\n@@ -8781,1 +8835,1 @@\n-instruct sarL_mem_1(memory dst, immI1 shift, rFlagsReg cr)\n+instruct sarL_mem_1(memory dst, immI_1 shift, rFlagsReg cr)\n@@ -8842,1 +8896,1 @@\n-instruct shrL_rReg_1(rRegL dst, immI1 shift, rFlagsReg cr)\n+instruct shrL_rReg_1(rRegL dst, immI_1 shift, rFlagsReg cr)\n@@ -8854,1 +8908,1 @@\n-instruct shrL_mem_1(memory dst, immI1 shift, rFlagsReg cr)\n+instruct shrL_mem_1(memory dst, immI_1 shift, rFlagsReg cr)\n@@ -9226,1 +9280,1 @@\n-instruct blsiI_rReg_rReg(rRegI dst, rRegI src, immI0 imm_zero, rFlagsReg cr) %{\n+instruct blsiI_rReg_rReg(rRegI dst, rRegI src, immI_0 imm_zero, rFlagsReg cr) %{\n@@ -9239,1 +9293,1 @@\n-instruct blsiI_rReg_mem(rRegI dst, memory src, immI0 imm_zero, rFlagsReg cr) %{\n+instruct blsiI_rReg_mem(rRegI dst, memory src, immI_0 imm_zero, rFlagsReg cr) %{\n@@ -9922,1 +9976,1 @@\n-instruct cmpLTMask0(rRegI dst, immI0 zero, rFlagsReg cr)\n+instruct cmpLTMask0(rRegI dst, immI_0 zero, rFlagsReg cr)\n@@ -11255,1 +11309,1 @@\n-instruct overflowNegI_rReg(rFlagsReg cr, immI0 zero, rax_RegI op2)\n+instruct overflowNegI_rReg(rFlagsReg cr, immI_0 zero, rax_RegI op2)\n@@ -11364,1 +11418,1 @@\n-instruct testI_reg(rFlagsReg cr, rRegI src, immI0 zero)\n+instruct testI_reg(rFlagsReg cr, rRegI src, immI_0 zero)\n@@ -11374,1 +11428,1 @@\n-instruct testI_reg_imm(rFlagsReg cr, rRegI src, immI con, immI0 zero)\n+instruct testI_reg_imm(rFlagsReg cr, rRegI src, immI con, immI_0 zero)\n@@ -11384,1 +11438,1 @@\n-instruct testI_reg_mem(rFlagsReg cr, rRegI src, memory mem, immI0 zero)\n+instruct testI_reg_mem(rFlagsReg cr, rRegI src, memory mem, immI_0 zero)\n@@ -11438,1 +11492,1 @@\n-instruct testU_reg(rFlagsRegU cr, rRegI src, immI0 zero)\n+instruct testU_reg(rFlagsRegU cr, rRegI src, immI_0 zero)\n@@ -11776,1 +11830,1 @@\n-instruct testUB_mem_imm(rFlagsReg cr, memory mem, immU8 imm, immI0 zero)\n+instruct testUB_mem_imm(rFlagsReg cr, memory mem, immU8 imm, immI_0 zero)\n@@ -11786,1 +11840,1 @@\n-instruct testB_mem_imm(rFlagsReg cr, memory mem, immI8 imm, immI0 zero)\n+instruct testB_mem_imm(rFlagsReg cr, memory mem, immI8 imm, immI_0 zero)\n@@ -12509,1 +12563,1 @@\n-\/\/ instruct incI_rReg(rRegI dst, immI1 src, rFlagsReg cr)\n+\/\/ instruct incI_rReg(rRegI dst, immI_1 src, rFlagsReg cr)\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":122,"deletions":68,"binary":false,"changes":190,"status":"modified"},{"patch":"@@ -225,0 +225,1 @@\n+      holder->is_in_package(\"jdk\/internal\/vm\/vector\") || holder->is_in_package(\"jdk\/incubator\/vector\") ||\n","filename":"src\/hotspot\/share\/ci\/ciField.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1355,0 +1355,5 @@\n+bool ciMethod::is_vector_method() const {\n+  return (holder() == ciEnv::current()->vector_VectorSupport_klass()) &&\n+         (intrinsic_id() != vmIntrinsics::_none);\n+}\n+\n","filename":"src\/hotspot\/share\/ci\/ciMethod.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -4540,0 +4540,24 @@\n+int vector_VectorPayload::_payload_offset;\n+\n+#define VECTORPAYLOAD_FIELDS_DO(macro) \\\n+  macro(_payload_offset, k, \"payload\", object_signature, false)\n+\n+void vector_VectorPayload::compute_offsets() {\n+  InstanceKlass* k = SystemDictionary::vector_VectorPayload_klass();\n+  VECTORPAYLOAD_FIELDS_DO(FIELD_COMPUTE_OFFSET);\n+}\n+\n+#if INCLUDE_CDS\n+void vector_VectorPayload::serialize_offsets(SerializeClosure* f) {\n+  VECTORPAYLOAD_FIELDS_DO(FIELD_SERIALIZE_OFFSET);\n+}\n+#endif\n+\n+void vector_VectorPayload::set_payload(oop o, oop val) {\n+  o->obj_field_put(_payload_offset, val);\n+}\n+\n+bool vector_VectorPayload::is_instance(oop obj) {\n+  return obj != NULL && is_subclass(obj->klass());\n+}\n+\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -78,0 +78,1 @@\n+  f(vector_VectorPayload) \\\n@@ -1566,0 +1567,18 @@\n+\/\/ Interface to jdk.internal.vm.vector.VectorSupport.VectorPayload objects\n+\n+class vector_VectorPayload : AllStatic {\n+ private:\n+  static int _payload_offset;\n+ public:\n+  static void set_payload(oop o, oop val);\n+\n+  static void compute_offsets();\n+  static void serialize_offsets(SerializeClosure* f) NOT_CDS_RETURN;\n+\n+  \/\/ Testers\n+  static bool is_subclass(Klass* klass) {\n+    return klass->is_subclass_of(SystemDictionary::vector_VectorPayload_klass());\n+  }\n+  static bool is_instance(oop obj);\n+};\n+\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+#include \"runtime\/globals_extension.hpp\"\n@@ -455,0 +456,18 @@\n+\n+#ifdef COMPILER2\n+  \/\/ Special handling of jdk.incubator.vector\n+  if (strcmp(module_name, \"jdk.incubator.vector\") == 0) {\n+    if (FLAG_IS_DEFAULT(EnableVectorSupport)) {\n+      FLAG_SET_DEFAULT(EnableVectorSupport, true);\n+    }\n+    if (EnableVectorSupport && FLAG_IS_DEFAULT(EnableVectorReboxing)) {\n+      FLAG_SET_DEFAULT(EnableVectorReboxing, true);\n+    }\n+    if (EnableVectorSupport && EnableVectorReboxing && FLAG_IS_DEFAULT(EnableVectorAggressiveReboxing)) {\n+      FLAG_SET_DEFAULT(EnableVectorAggressiveReboxing, true);\n+    }\n+    log_info(compilation)(\"EnableVectorSupport=%s\",            (EnableVectorSupport            ? \"true\" : \"false\"));\n+    log_info(compilation)(\"EnableVectorReboxing=%s\",           (EnableVectorReboxing           ? \"true\" : \"false\"));\n+    log_info(compilation)(\"EnableVectorAggressiveReboxing=%s\", (EnableVectorAggressiveReboxing ? \"true\" : \"false\"));\n+  }\n+#endif \/\/ COMPILER2\n","filename":"src\/hotspot\/share\/classfile\/modules.cpp","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -228,0 +228,7 @@\n+  \/* support for vectors*\/                                                                                      \\\n+  do_klass(vector_VectorSupport_klass,                  jdk_internal_vm_vector_VectorSupport                  ) \\\n+  do_klass(vector_VectorPayload_klass,                  jdk_internal_vm_vector_VectorPayload                  ) \\\n+  do_klass(vector_Vector_klass,                         jdk_internal_vm_vector_Vector                         ) \\\n+  do_klass(vector_VectorMask_klass,                     jdk_internal_vm_vector_VectorMask                     ) \\\n+  do_klass(vector_VectorShuffle_klass,                  jdk_internal_vm_vector_VectorShuffle                  ) \\\n+                                                                                                                \\\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -780,0 +780,116 @@\n+                                                                                                                                               \\\n+  \/* Vector API intrinsification support *\/                                                                                                    \\\n+                                                                                                                                               \\\n+  do_intrinsic(_VectorUnaryOp, jdk_internal_vm_vector_VectorSupport, vector_unary_op_name, vector_unary_op_sig, F_S)                           \\\n+   do_signature(vector_unary_op_sig, \"(ILjava\/lang\/Class;Ljava\/lang\/Class;ILjava\/lang\/Object;Ljava\/util\/function\/Function;)Ljava\/lang\/Object;\") \\\n+   do_name(vector_unary_op_name,     \"unaryOp\")                                                                                                \\\n+                                                                                                                                               \\\n+  do_intrinsic(_VectorBinaryOp, jdk_internal_vm_vector_VectorSupport, vector_binary_op_name, vector_binary_op_sig, F_S)                        \\\n+   do_signature(vector_binary_op_sig, \"(ILjava\/lang\/Class;Ljava\/lang\/Class;ILjava\/lang\/Object;Ljava\/lang\/Object;\"                              \\\n+                                       \"Ljava\/util\/function\/BiFunction;)Ljava\/lang\/Object;\")                                                   \\\n+   do_name(vector_binary_op_name,     \"binaryOp\")                                                                                              \\\n+                                                                                                                                               \\\n+  do_intrinsic(_VectorTernaryOp, jdk_internal_vm_vector_VectorSupport, vector_ternary_op_name, vector_ternary_op_sig, F_S)                     \\\n+   do_signature(vector_ternary_op_sig, \"(ILjava\/lang\/Class;Ljava\/lang\/Class;ILjava\/lang\/Object;Ljava\/lang\/Object;\"                             \\\n+                                        \"Ljava\/lang\/Object;Ljdk\/internal\/vm\/vector\/VectorSupport$TernaryOperation;)Ljava\/lang\/Object;\")        \\\n+   do_name(vector_ternary_op_name,     \"ternaryOp\")                                                                                            \\\n+                                                                                                                                               \\\n+  do_intrinsic(_VectorBroadcastCoerced, jdk_internal_vm_vector_VectorSupport, vector_broadcast_coerced_name, vector_broadcast_coerced_sig, F_S)\\\n+   do_signature(vector_broadcast_coerced_sig, \"(Ljava\/lang\/Class;Ljava\/lang\/Class;IJLjdk\/internal\/vm\/vector\/VectorSupport$VectorSpecies;\"      \\\n+                                               \"Ljdk\/internal\/vm\/vector\/VectorSupport$BroadcastOperation;)Ljava\/lang\/Object;\")                 \\\n+   do_name(vector_broadcast_coerced_name, \"broadcastCoerced\")                                                                                  \\\n+                                                                                                                                               \\\n+  do_intrinsic(_VectorShuffleIota, jdk_internal_vm_vector_VectorSupport, vector_shuffle_step_iota_name, vector_shuffle_step_iota_sig, F_S)     \\\n+   do_signature(vector_shuffle_step_iota_sig, \"(Ljava\/lang\/Class;Ljava\/lang\/Class;Ljdk\/internal\/vm\/vector\/VectorSupport$VectorSpecies;\"        \\\n+                                               \"IIIILjdk\/internal\/vm\/vector\/VectorSupport$ShuffleIotaOperation;)Ljdk\/internal\/vm\/vector\/VectorSupport$VectorShuffle;\") \\\n+   do_name(vector_shuffle_step_iota_name, \"shuffleIota\")                                                                                       \\\n+                                                                                                                                               \\\n+  do_intrinsic(_VectorShuffleToVector, jdk_internal_vm_vector_VectorSupport, vector_shuffle_to_vector_name, vector_shuffle_to_vector_sig, F_S) \\\n+   do_signature(vector_shuffle_to_vector_sig, \"(Ljava\/lang\/Class;Ljava\/lang\/Class;Ljava\/lang\/Class;Ljdk\/internal\/vm\/vector\/VectorSupport$VectorShuffle;\" \\\n+                                               \"ILjdk\/internal\/vm\/vector\/VectorSupport$ShuffleToVectorOperation;)Ljava\/lang\/Object;\")          \\\n+   do_name(vector_shuffle_to_vector_name, \"shuffleToVector\")                                                                                   \\\n+                                                                                                                                               \\\n+  do_intrinsic(_VectorLoadOp, jdk_internal_vm_vector_VectorSupport, vector_load_op_name, vector_load_op_sig, F_S)                              \\\n+   do_signature(vector_load_op_sig, \"(Ljava\/lang\/Class;Ljava\/lang\/Class;ILjava\/lang\/Object;JLjava\/lang\/Object;\"                                \\\n+                                     \"ILjdk\/internal\/vm\/vector\/VectorSupport$VectorSpecies;Ljdk\/internal\/vm\/vector\/VectorSupport$LoadOperation;)Ljava\/lang\/Object;\") \\\n+   do_name(vector_load_op_name,     \"load\")                                                                                                    \\\n+                                                                                                                                               \\\n+  do_intrinsic(_VectorStoreOp, jdk_internal_vm_vector_VectorSupport, vector_store_op_name, vector_store_op_sig, F_S)                           \\\n+   do_signature(vector_store_op_sig, \"(Ljava\/lang\/Class;Ljava\/lang\/Class;ILjava\/lang\/Object;JLjdk\/internal\/vm\/vector\/VectorSupport$Vector;\"    \\\n+                                      \"Ljava\/lang\/Object;ILjdk\/internal\/vm\/vector\/VectorSupport$StoreVectorOperation;)V\")                      \\\n+   do_name(vector_store_op_name,     \"store\")                                                                                                  \\\n+                                                                                                                                               \\\n+  do_intrinsic(_VectorReductionCoerced, jdk_internal_vm_vector_VectorSupport, vector_reduction_coerced_name, vector_reduction_coerced_sig, F_S) \\\n+   do_signature(vector_reduction_coerced_sig, \"(ILjava\/lang\/Class;Ljava\/lang\/Class;ILjdk\/internal\/vm\/vector\/VectorSupport$Vector;Ljava\/util\/function\/Function;)J\") \\\n+   do_name(vector_reduction_coerced_name, \"reductionCoerced\")                                                                                  \\\n+                                                                                                                                               \\\n+  do_intrinsic(_VectorTest, jdk_internal_vm_vector_VectorSupport, vector_test_name, vector_test_sig, F_S)                                      \\\n+   do_signature(vector_test_sig, \"(ILjava\/lang\/Class;Ljava\/lang\/Class;ILjava\/lang\/Object;Ljava\/lang\/Object;Ljava\/util\/function\/BiFunction;)Z\") \\\n+   do_name(vector_test_name, \"test\")                                                                                                           \\\n+                                                                                                                                               \\\n+  do_intrinsic(_VectorBlend, jdk_internal_vm_vector_VectorSupport, vector_blend_name, vector_blend_sig, F_S)                                   \\\n+   do_signature(vector_blend_sig, \"(Ljava\/lang\/Class;Ljava\/lang\/Class;Ljava\/lang\/Class;I\"                                                      \\\n+                                   \"Ljdk\/internal\/vm\/vector\/VectorSupport$Vector;Ljdk\/internal\/vm\/vector\/VectorSupport$Vector;Ljdk\/internal\/vm\/vector\/VectorSupport$VectorMask;\" \\\n+                                   \"Ljdk\/internal\/vm\/vector\/VectorSupport$VectorBlendOp;)Ljdk\/internal\/vm\/vector\/VectorSupport$Vector;\")       \\\n+   do_name(vector_blend_name, \"blend\")                                                                                                         \\\n+                                                                                                                                               \\\n+  do_intrinsic(_VectorCompare, jdk_internal_vm_vector_VectorSupport, vector_compare_name, vector_compare_sig, F_S)                             \\\n+   do_signature(vector_compare_sig, \"(ILjava\/lang\/Class;Ljava\/lang\/Class;Ljava\/lang\/Class;I\"                                                   \\\n+                                     \"Ljdk\/internal\/vm\/vector\/VectorSupport$Vector;\" \"Ljdk\/internal\/vm\/vector\/VectorSupport$Vector;\"           \\\n+                                     \"Ljdk\/internal\/vm\/vector\/VectorSupport$VectorCompareOp;\" \")\" \"Ljdk\/internal\/vm\/vector\/VectorSupport$VectorMask;\") \\\n+   do_name(vector_compare_name, \"compare\")                                                                                                     \\\n+                                                                                                                                               \\\n+  do_intrinsic(_VectorRearrange, jdk_internal_vm_vector_VectorSupport, vector_rearrange_name, vector_rearrange_sig, F_S)                       \\\n+   do_signature(vector_rearrange_sig, \"(Ljava\/lang\/Class;Ljava\/lang\/Class;Ljava\/lang\/Class;I\"                                                  \\\n+                                       \"Ljdk\/internal\/vm\/vector\/VectorSupport$Vector;Ljdk\/internal\/vm\/vector\/VectorSupport$VectorShuffle;\"     \\\n+                                       \"Ljdk\/internal\/vm\/vector\/VectorSupport$VectorRearrangeOp;)Ljdk\/internal\/vm\/vector\/VectorSupport$Vector;\") \\\n+   do_name(vector_rearrange_name, \"rearrangeOp\")                                                                                               \\\n+                                                                                                                                               \\\n+  do_intrinsic(_VectorExtract, jdk_internal_vm_vector_VectorSupport, vector_extract_name, vector_extract_sig, F_S)                             \\\n+   do_signature(vector_extract_sig, \"(Ljava\/lang\/Class;Ljava\/lang\/Class;I\"                                                                     \\\n+                                     \"Ljdk\/internal\/vm\/vector\/VectorSupport$Vector;I\"                                                          \\\n+                                     \"Ljdk\/internal\/vm\/vector\/VectorSupport$VecExtractOp;)J\")                                                  \\\n+   do_name(vector_extract_name, \"extract\")                                                                                                     \\\n+                                                                                                                                               \\\n+ do_intrinsic(_VectorInsert, jdk_internal_vm_vector_VectorSupport, vector_insert_name, vector_insert_sig, F_S)                                 \\\n+   do_signature(vector_insert_sig, \"(Ljava\/lang\/Class;Ljava\/lang\/Class;I\"                                                                      \\\n+                                    \"Ljdk\/internal\/vm\/vector\/VectorSupport$Vector;IJ\"                                                          \\\n+                                    \"Ljdk\/internal\/vm\/vector\/VectorSupport$VecInsertOp;)Ljdk\/internal\/vm\/vector\/VectorSupport$Vector;\")        \\\n+   do_name(vector_insert_name, \"insert\")                                                                                                       \\\n+                                                                                                                                               \\\n+  do_intrinsic(_VectorBroadcastInt, jdk_internal_vm_vector_VectorSupport, vector_broadcast_int_name, vector_broadcast_int_sig, F_S)            \\\n+   do_signature(vector_broadcast_int_sig, \"(ILjava\/lang\/Class;Ljava\/lang\/Class;I\"                                                              \\\n+                                           \"Ljdk\/internal\/vm\/vector\/VectorSupport$Vector;I\"                                                    \\\n+                                           \"Ljdk\/internal\/vm\/vector\/VectorSupport$VectorBroadcastIntOp;)Ljdk\/internal\/vm\/vector\/VectorSupport$Vector;\") \\\n+   do_name(vector_broadcast_int_name, \"broadcastInt\")                                                                                          \\\n+                                                                                                                                               \\\n+  do_intrinsic(_VectorConvert, jdk_internal_vm_vector_VectorSupport, vector_convert_name, vector_convert_sig, F_S)                             \\\n+   do_signature(vector_convert_sig, \"(ILjava\/lang\/Class;Ljava\/lang\/Class;I\"                                                                    \\\n+                                     \"Ljava\/lang\/Class;Ljava\/lang\/Class;I\"                                                                     \\\n+                                     \"Ljdk\/internal\/vm\/vector\/VectorSupport$VectorPayload;\"                                                    \\\n+                                     \"Ljdk\/internal\/vm\/vector\/VectorSupport$VectorSpecies;\"                                                    \\\n+                                     \"Ljdk\/internal\/vm\/vector\/VectorSupport$VectorConvertOp;)Ljdk\/internal\/vm\/vector\/VectorSupport$VectorPayload;\") \\\n+   do_name(vector_convert_name, \"convert\")                                                                                                     \\\n+                                                                                                                                               \\\n+   do_intrinsic(_VectorGatherOp, jdk_internal_vm_vector_VectorSupport, vector_gather_name, vector_gather_sig, F_S)                             \\\n+    do_signature(vector_gather_sig, \"(Ljava\/lang\/Class;Ljava\/lang\/Class;ILjava\/lang\/Class;\"                                                    \\\n+                                     \"Ljava\/lang\/Object;J\"                                                                                     \\\n+                                     \"Ljdk\/internal\/vm\/vector\/VectorSupport$Vector;\"                                                           \\\n+                                     \"Ljava\/lang\/Object;I[II\"                                                                                  \\\n+                                     \"Ljdk\/internal\/vm\/vector\/VectorSupport$VectorSpecies;\"                                                    \\\n+                                     \"Ljdk\/internal\/vm\/vector\/VectorSupport$LoadVectorOperationWithMap;)\"                                      \\\n+                                     \"Ljdk\/internal\/vm\/vector\/VectorSupport$Vector;\")                                                          \\\n+    do_name(vector_gather_name, \"loadWithMap\")                                                                                                 \\\n+                                                                                                                                               \\\n+   do_intrinsic(_VectorScatterOp, jdk_internal_vm_vector_VectorSupport, vector_scatter_name, vector_scatter_sig, F_S)                          \\\n+    do_signature(vector_scatter_sig, \"(Ljava\/lang\/Class;Ljava\/lang\/Class;ILjava\/lang\/Class;\"                                                   \\\n+                                      \"Ljava\/lang\/Object;J\"                                                                                    \\\n+                                      \"Ljdk\/internal\/vm\/vector\/VectorSupport$Vector;Ljdk\/internal\/vm\/vector\/VectorSupport$Vector;\"             \\\n+                                      \"Ljava\/lang\/Object;I[II\"                                                                                 \\\n+                                      \"Ljdk\/internal\/vm\/vector\/VectorSupport$StoreVectorOperationWithMap;)V\")                                  \\\n+    do_name(vector_scatter_name, \"storeWithMap\")                                                                                               \\\n+                                                                                                                                               \\\n+  do_intrinsic(_VectorRebox, jdk_internal_vm_vector_VectorSupport, vector_rebox_name, vector_rebox_sig, F_S)                                   \\\n+   do_alias(vector_rebox_sig, object_object_signature)                                                                                         \\\n+   do_name(vector_rebox_name, \"maybeRebox\")                                                                                                    \\\n+                                                                                                                                               \\\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":116,"deletions":0,"binary":false,"changes":116,"status":"modified"},{"patch":"@@ -84,0 +84,10 @@\n+                                                                                                  \\\n+  template(jdk_internal_vm_vector_VectorSupport,      \"jdk\/internal\/vm\/vector\/VectorSupport\")               \\\n+  template(jdk_internal_vm_vector_VectorPayload,      \"jdk\/internal\/vm\/vector\/VectorSupport$VectorPayload\") \\\n+  template(jdk_internal_vm_vector_Vector,             \"jdk\/internal\/vm\/vector\/VectorSupport$Vector\")        \\\n+  template(jdk_internal_vm_vector_VectorMask,         \"jdk\/internal\/vm\/vector\/VectorSupport$VectorMask\")    \\\n+  template(jdk_internal_vm_vector_VectorShuffle,      \"jdk\/internal\/vm\/vector\/VectorSupport$VectorShuffle\") \\\n+  template(payload_name,                              \"payload\")                                            \\\n+  template(ETYPE_name,                                \"ETYPE\")                                              \\\n+  template(VLENGTH_name,                              \"VLENGTH\")                                            \\\n+                                                                                                  \\\n@@ -767,1 +777,1 @@\n-    LAST_COMPILER_INLINE = _getAndSetReference,\n+    LAST_COMPILER_INLINE = _VectorScatterOp,\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -734,0 +734,9 @@\n+  product(bool, EnableVectorSupport, false, EXPERIMENTAL,                   \\\n+          \"Enables VectorSupport intrinsics\")                               \\\n+                                                                            \\\n+  product(bool, EnableVectorReboxing, false, EXPERIMENTAL,                  \\\n+          \"Enables reboxing of vectors\")                                    \\\n+                                                                            \\\n+  product(bool, EnableVectorAggressiveReboxing, false, EXPERIMENTAL,        \\\n+          \"Enables aggressive reboxing of vectors\")                         \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/opto\/c2_globals.hpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -433,1 +433,1 @@\n-#define NOF_STACK_MASKS (3*6+6)\n+#define NOF_STACK_MASKS (3*12)\n@@ -476,0 +476,14 @@\n+  idealreg2debugmask  [Op_VecA] = &rms[24];\n+  idealreg2debugmask  [Op_VecS] = &rms[25];\n+  idealreg2debugmask  [Op_VecD] = &rms[26];\n+  idealreg2debugmask  [Op_VecX] = &rms[27];\n+  idealreg2debugmask  [Op_VecY] = &rms[28];\n+  idealreg2debugmask  [Op_VecZ] = &rms[29];\n+\n+  idealreg2mhdebugmask[Op_VecA] = &rms[30];\n+  idealreg2mhdebugmask[Op_VecS] = &rms[31];\n+  idealreg2mhdebugmask[Op_VecD] = &rms[32];\n+  idealreg2mhdebugmask[Op_VecX] = &rms[33];\n+  idealreg2mhdebugmask[Op_VecY] = &rms[34];\n+  idealreg2mhdebugmask[Op_VecZ] = &rms[35];\n+\n@@ -523,0 +537,2 @@\n+  } else {\n+    *idealreg2spillmask[Op_VecS] = RegMask::Empty;\n@@ -524,0 +540,1 @@\n+\n@@ -529,0 +546,2 @@\n+  } else {\n+    *idealreg2spillmask[Op_VecD] = RegMask::Empty;\n@@ -530,0 +549,1 @@\n+\n@@ -547,0 +567,2 @@\n+  } else {\n+    *idealreg2spillmask[Op_VecX] = RegMask::Empty;\n@@ -548,0 +570,1 @@\n+\n@@ -559,0 +582,2 @@\n+  } else {\n+    *idealreg2spillmask[Op_VecY] = RegMask::Empty;\n@@ -560,0 +585,1 @@\n+\n@@ -571,0 +597,2 @@\n+  } else {\n+    *idealreg2spillmask[Op_VecZ] = RegMask::Empty;\n@@ -625,0 +653,7 @@\n+  *idealreg2debugmask  [Op_VecA] = *idealreg2spillmask[Op_VecA];\n+  *idealreg2debugmask  [Op_VecS] = *idealreg2spillmask[Op_VecS];\n+  *idealreg2debugmask  [Op_VecD] = *idealreg2spillmask[Op_VecD];\n+  *idealreg2debugmask  [Op_VecX] = *idealreg2spillmask[Op_VecX];\n+  *idealreg2debugmask  [Op_VecY] = *idealreg2spillmask[Op_VecY];\n+  *idealreg2debugmask  [Op_VecZ] = *idealreg2spillmask[Op_VecZ];\n+\n@@ -632,0 +667,7 @@\n+  *idealreg2mhdebugmask[Op_VecA] = *idealreg2spillmask[Op_VecA];\n+  *idealreg2mhdebugmask[Op_VecS] = *idealreg2spillmask[Op_VecS];\n+  *idealreg2mhdebugmask[Op_VecD] = *idealreg2spillmask[Op_VecD];\n+  *idealreg2mhdebugmask[Op_VecX] = *idealreg2spillmask[Op_VecX];\n+  *idealreg2mhdebugmask[Op_VecY] = *idealreg2spillmask[Op_VecY];\n+  *idealreg2mhdebugmask[Op_VecZ] = *idealreg2spillmask[Op_VecZ];\n+\n@@ -645,0 +687,7 @@\n+  idealreg2debugmask[Op_VecA]->SUBTRACT(*caller_save_mask);\n+  idealreg2debugmask[Op_VecS]->SUBTRACT(*caller_save_mask);\n+  idealreg2debugmask[Op_VecD]->SUBTRACT(*caller_save_mask);\n+  idealreg2debugmask[Op_VecX]->SUBTRACT(*caller_save_mask);\n+  idealreg2debugmask[Op_VecY]->SUBTRACT(*caller_save_mask);\n+  idealreg2debugmask[Op_VecZ]->SUBTRACT(*caller_save_mask);\n+\n@@ -651,0 +700,7 @@\n+\n+  idealreg2mhdebugmask[Op_VecA]->SUBTRACT(*mh_caller_save_mask);\n+  idealreg2mhdebugmask[Op_VecS]->SUBTRACT(*mh_caller_save_mask);\n+  idealreg2mhdebugmask[Op_VecD]->SUBTRACT(*mh_caller_save_mask);\n+  idealreg2mhdebugmask[Op_VecX]->SUBTRACT(*mh_caller_save_mask);\n+  idealreg2mhdebugmask[Op_VecY]->SUBTRACT(*mh_caller_save_mask);\n+  idealreg2mhdebugmask[Op_VecZ]->SUBTRACT(*mh_caller_save_mask);\n@@ -1956,1 +2012,0 @@\n-\n@@ -2311,0 +2366,19 @@\n+    case Op_VectorBlend:\n+    case Op_VectorInsert: {\n+      Node* pair = new BinaryNode(n->in(1), n->in(2));\n+      n->set_req(1, pair);\n+      n->set_req(2, n->in(3));\n+      n->del_req(3);\n+      break;\n+    }\n+    case Op_StoreVectorScatter: {\n+      Node* pair = new BinaryNode(n->in(MemNode::ValueIn), n->in(MemNode::ValueIn+1));\n+      n->set_req(MemNode::ValueIn, pair);\n+      n->del_req(MemNode::ValueIn+1);\n+      break;\n+    }\n+    case Op_VectorMaskCmp: {\n+      n->set_req(1, new BinaryNode(n->in(1), n->in(2)));\n+      n->set_req(2, n->in(3));\n+      n->del_req(3);\n+      break;\n@@ -2313,0 +2387,1 @@\n+    }\n","filename":"src\/hotspot\/share\/opto\/matcher.cpp","additions":77,"deletions":2,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -348,0 +348,3 @@\n+  \/\/ Does the CPU supports vector variable shift instructions?\n+  static bool supports_vector_variable_shifts(void);\n+\n","filename":"src\/hotspot\/share\/opto\/matcher.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -442,0 +442,2 @@\n+  TypeF::MAX = TypeF::make(max_jfloat); \/\/ Float MAX\n+  TypeF::MIN = TypeF::make(min_jfloat); \/\/ Float MIN\n@@ -447,0 +449,2 @@\n+  TypeD::MAX = TypeD::make(max_jdouble); \/\/ Double MAX\n+  TypeD::MIN = TypeD::make(min_jdouble); \/\/ Double MIN\n@@ -452,0 +456,2 @@\n+  TypeInt::MAX = TypeInt::make(max_jint); \/\/ Int MAX\n+  TypeInt::MIN = TypeInt::make(min_jint); \/\/ Int MIN\n@@ -480,0 +486,2 @@\n+  TypeLong::MAX = TypeLong::make(max_jlong);  \/\/ Long MAX\n+  TypeLong::MIN = TypeLong::make(min_jlong);  \/\/ Long MIN\n@@ -1122,0 +1130,2 @@\n+const TypeF *TypeF::MAX;        \/\/ Floating point max\n+const TypeF *TypeF::MIN;        \/\/ Floating point min\n@@ -1232,0 +1242,2 @@\n+const TypeD *TypeD::MAX;        \/\/ Floating point max\n+const TypeD *TypeD::MIN;        \/\/ Floating point min\n@@ -1338,0 +1350,2 @@\n+const TypeInt *TypeInt::MAX;    \/\/ INT_MAX\n+const TypeInt *TypeInt::MIN;    \/\/ INT_MIN\n@@ -1607,0 +1621,2 @@\n+const TypeLong *TypeLong::MAX;\n+const TypeLong *TypeLong::MIN;\n","filename":"src\/hotspot\/share\/opto\/type.cpp","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -486,0 +486,2 @@\n+  static const TypeF *MAX;\n+  static const TypeF *MIN;\n@@ -515,0 +517,2 @@\n+  static const TypeD *MAX;\n+  static const TypeD *MIN;\n@@ -558,0 +562,2 @@\n+  static const TypeInt *MAX;\n+  static const TypeInt *MIN;\n@@ -623,0 +629,2 @@\n+  static const TypeLong *MAX;\n+  static const TypeLong *MIN;\n","filename":"src\/hotspot\/share\/opto\/type.hpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -4199,1 +4199,17 @@\n-#endif\n+\n+  if (!EnableVectorSupport) {\n+    if (!FLAG_IS_DEFAULT(EnableVectorReboxing) && EnableVectorReboxing) {\n+      warning(\"Disabling EnableVectorReboxing since EnableVectorSupport is turned off.\");\n+    }\n+    FLAG_SET_DEFAULT(EnableVectorReboxing, false);\n+\n+    if (!FLAG_IS_DEFAULT(EnableVectorAggressiveReboxing) && EnableVectorAggressiveReboxing) {\n+      if (!EnableVectorReboxing) {\n+        warning(\"Disabling EnableVectorAggressiveReboxing since EnableVectorReboxing is turned off.\");\n+      } else {\n+        warning(\"Disabling EnableVectorAggressiveReboxing since EnableVectorSupport is turned off.\");\n+      }\n+    }\n+    FLAG_SET_DEFAULT(EnableVectorAggressiveReboxing, false);\n+  }\n+#endif \/\/ COMPILER2\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -52,0 +52,1 @@\n+#include \"prims\/vectorSupport.hpp\"\n@@ -1005,0 +1006,7 @@\n+#ifdef COMPILER2\n+        if (EnableVectorSupport && VectorSupport::is_vector(ik)) {\n+          obj = VectorSupport::allocate_vector(ik, fr, reg_map, sv, THREAD);\n+        } else {\n+          obj = ik->allocate_instance(THREAD);\n+        }\n+#else\n@@ -1006,0 +1014,1 @@\n+#endif \/\/ COMPILER2\n@@ -1342,0 +1351,5 @@\n+#ifdef COMPILER2\n+    if (EnableVectorSupport && VectorSupport::is_vector(k)) {\n+      continue; \/\/ skip field reassignment for vectors\n+    }\n+#endif\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1504,0 +1504,2 @@\n+  declare_c2_type(MaxLNode, MaxNode)                                      \\\n+  declare_c2_type(MinLNode, MaxNode)                                      \\\n@@ -1738,0 +1740,2 @@\n+  declare_c2_type(NegINode, NegNode)                                      \\\n+  declare_c2_type(NegLNode, NegNode)                                      \\\n@@ -1747,4 +1751,6 @@\n-  declare_c2_type(AbsVBNode, VectorNode)                                   \\\n-  declare_c2_type(AbsVSNode, VectorNode)                                   \\\n-  declare_c2_type(AbsVINode, VectorNode)                                   \\\n-  declare_c2_type(AbsVLNode, VectorNode)                                   \\\n+  declare_c2_type(AbsVFNode, VectorNode)                                  \\\n+  declare_c2_type(AbsVDNode, VectorNode)                                  \\\n+  declare_c2_type(AbsVBNode, VectorNode)                                  \\\n+  declare_c2_type(AbsVSNode, VectorNode)                                  \\\n+  declare_c2_type(AbsVINode, VectorNode)                                  \\\n+  declare_c2_type(AbsVLNode, VectorNode)                                  \\\n@@ -1776,0 +1782,1 @@\n+  declare_c2_type(NegVINode, VectorNode)                                  \\\n@@ -1798,0 +1805,2 @@\n+  declare_c2_type(MinReductionVNode, ReductionNode)                       \\\n+  declare_c2_type(MaxReductionVNode, ReductionNode)                       \\\n@@ -1806,2 +1815,0 @@\n-  declare_c2_type(MaxReductionVNode, ReductionNode)                       \\\n-  declare_c2_type(MinReductionVNode, ReductionNode)                       \\\n@@ -1849,0 +1856,21 @@\n+  declare_c2_type(LoadVectorGatherNode, LoadVectorNode)                   \\\n+  declare_c2_type(StoreVectorScatterNode, StoreVectorNode)                \\\n+  declare_c2_type(VectorLoadMaskNode, VectorNode)                         \\\n+  declare_c2_type(VectorLoadShuffleNode, VectorNode)                      \\\n+  declare_c2_type(VectorStoreMaskNode, VectorNode)                        \\\n+  declare_c2_type(VectorBlendNode, VectorNode)                            \\\n+  declare_c2_type(VectorRearrangeNode, VectorNode)                        \\\n+  declare_c2_type(VectorMaskWrapperNode, VectorNode)                      \\\n+  declare_c2_type(VectorMaskCmpNode, VectorNode)                          \\\n+  declare_c2_type(VectorCastB2XNode, VectorNode)                          \\\n+  declare_c2_type(VectorCastS2XNode, VectorNode)                          \\\n+  declare_c2_type(VectorCastI2XNode, VectorNode)                          \\\n+  declare_c2_type(VectorCastL2XNode, VectorNode)                          \\\n+  declare_c2_type(VectorCastF2XNode, VectorNode)                          \\\n+  declare_c2_type(VectorCastD2XNode, VectorNode)                          \\\n+  declare_c2_type(VectorInsertNode, VectorNode)                           \\\n+  declare_c2_type(VectorUnboxNode, VectorNode)                            \\\n+  declare_c2_type(VectorReinterpretNode, VectorNode)                      \\\n+  declare_c2_type(VectorBoxNode, Node)                                    \\\n+  declare_c2_type(VectorBoxAllocateNode, CallStaticJavaNode)              \\\n+  declare_c2_type(VectorTestNode, Node)                                   \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":34,"deletions":6,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -240,0 +240,3 @@\n+inline jfloat jfloat_cast(jint x);\n+inline jdouble jdouble_cast(jlong x);\n+\n@@ -250,0 +253,7 @@\n+\/\/-------------------------------------------\n+\/\/ Constant for jdouble\n+const jlong min_jlongDouble = CONST64(0x0000000000000001);\n+const jdouble min_jdouble = jdouble_cast(min_jlongDouble);\n+const jlong max_jlongDouble = CONST64(0x7fefffffffffffff);\n+const jdouble max_jdouble = jdouble_cast(max_jlongDouble);\n+\n@@ -472,0 +482,5 @@\n+const jint min_jintFloat = (jint)(0x00000001);\n+const jfloat min_jfloat = jfloat_cast(min_jintFloat);\n+const jint max_jintFloat = (jint)(0x7f7fffff);\n+const jfloat max_jfloat = jfloat_cast(max_jintFloat);\n+\n@@ -676,0 +691,8 @@\n+inline bool is_integral_type(BasicType t) {\n+  return is_subword_type(t) || t == T_INT || t == T_LONG;\n+}\n+\n+inline bool is_floating_point_type(BasicType t) {\n+  return (t == T_FLOAT || t == T_DOUBLE);\n+}\n+\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"}]}