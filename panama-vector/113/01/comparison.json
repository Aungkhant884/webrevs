{"files":[{"patch":"@@ -8024,2 +8024,1 @@\n-  predicate((Matcher::vector_length(n) == Matcher::vector_length(n->in(1))) &&\n-            (Matcher::vector_length_in_bytes(n) == Matcher::vector_length_in_bytes(n->in(1))));\n+  predicate(Matcher::vector_length(n) == Matcher::vector_length(n->in(1)));\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2318,3 +2318,0 @@\n-  if (is_mask && (type2aelembytes(elem_bt_from) != type2aelembytes(elem_bt_to))) {\n-    return false; \/\/ elem size mismatch\n-  }\n@@ -2371,2 +2368,6 @@\n-    assert(!is_mask, \"masks cannot be casted\");\n-    int cast_vopc = VectorCastNode::opcode(elem_bt_from);\n+    BasicType new_elem_bt_to = elem_bt_to;\n+    BasicType new_elem_bt_from = elem_bt_from;\n+    if (is_mask && is_floating_point_type(elem_bt_from)) {\n+      new_elem_bt_from = elem_bt_from == T_FLOAT ? T_INT : T_LONG;\n+    }\n+    int cast_vopc = VectorCastNode::opcode(new_elem_bt_from);\n@@ -2427,3 +2428,26 @@\n-      \/\/ Since input and output number of elements match, and since we know this vector size is\n-      \/\/ supported, simply do a cast with no resize needed.\n-      op = gvn().transform(VectorCastNode::make(cast_vopc, op, elem_bt_to, num_elem_to));\n+      if (is_mask) {\n+        if((dst_type->isa_vectmask() && src_type->isa_vectmask()) ||\n+           (type2aelembytes(elem_bt_from) == type2aelembytes(elem_bt_to))) {\n+          op = gvn().transform(new VectorMaskCastNode(op, dst_type));\n+        } else {\n+          \/\/ Special handling for casting operation involving floating point types.\n+          \/\/ Case A) F -> X :=  F -> VectorMaskCast (F->I\/L [NOP]) -> VectorCast[I\/L]2X\n+          \/\/ Case B) X -> F :=  X -> VectorCastX2[I\/L] -> VectorMaskCast ([I\/L]->F [NOP])\n+          \/\/ Case C) F -> F :=  VectorMaskCast (F->I\/L [NOP]) -> VectorCast[I\/L]2[L\/I] -> VectotMaskCast (L\/I->F [NOP])\n+          if (is_floating_point_type(elem_bt_from)) {\n+            const TypeVect* new_src_type = TypeVect::make(new_elem_bt_from, num_elem_to, is_mask);\n+            op = gvn().transform(new VectorMaskCastNode(op, new_src_type));\n+          }\n+          if (is_floating_point_type(elem_bt_to)) {\n+            new_elem_bt_to = elem_bt_to == T_FLOAT ? T_INT : T_LONG;\n+          }\n+          op = gvn().transform(VectorCastNode::make(cast_vopc, op, new_elem_bt_to, num_elem_to));\n+          if (new_elem_bt_to != elem_bt_to) {\n+            op = gvn().transform(new VectorMaskCastNode(op, dst_type));\n+          }\n+        }\n+      } else {\n+        \/\/ Since input and output number of elements match, and since we know this vector size is\n+        \/\/ supported, simply do a cast with no resize needed.\n+        op = gvn().transform(VectorCastNode::make(cast_vopc, op, elem_bt_to, num_elem_to));\n+      }\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":32,"deletions":8,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -650,10 +650,6 @@\n-            if (VSIZE == species.vectorBitSize()) {\n-                Class<?> dtype = species.elementType();\n-                Class<?> dmtype = species.maskType();\n-                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n-                    this.getClass(), ETYPE, VLENGTH,\n-                    dmtype, dtype, VLENGTH,\n-                    this, species,\n-                    Byte128Mask::defaultMaskCast);\n-            }\n-            return this.defaultMaskCast(species);\n+\n+            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n+                this.getClass(), ETYPE, VLENGTH,\n+                species.maskType(), species.elementType(), VLENGTH,\n+                this, species,\n+                Byte128Mask::defaultMaskCast);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte128Vector.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -682,10 +682,6 @@\n-            if (VSIZE == species.vectorBitSize()) {\n-                Class<?> dtype = species.elementType();\n-                Class<?> dmtype = species.maskType();\n-                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n-                    this.getClass(), ETYPE, VLENGTH,\n-                    dmtype, dtype, VLENGTH,\n-                    this, species,\n-                    Byte256Mask::defaultMaskCast);\n-            }\n-            return this.defaultMaskCast(species);\n+\n+            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n+                this.getClass(), ETYPE, VLENGTH,\n+                species.maskType(), species.elementType(), VLENGTH,\n+                this, species,\n+                Byte256Mask::defaultMaskCast);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte256Vector.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -746,10 +746,6 @@\n-            if (VSIZE == species.vectorBitSize()) {\n-                Class<?> dtype = species.elementType();\n-                Class<?> dmtype = species.maskType();\n-                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n-                    this.getClass(), ETYPE, VLENGTH,\n-                    dmtype, dtype, VLENGTH,\n-                    this, species,\n-                    Byte512Mask::defaultMaskCast);\n-            }\n-            return this.defaultMaskCast(species);\n+\n+            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n+                this.getClass(), ETYPE, VLENGTH,\n+                species.maskType(), species.elementType(), VLENGTH,\n+                this, species,\n+                Byte512Mask::defaultMaskCast);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte512Vector.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -634,10 +634,6 @@\n-            if (VSIZE == species.vectorBitSize()) {\n-                Class<?> dtype = species.elementType();\n-                Class<?> dmtype = species.maskType();\n-                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n-                    this.getClass(), ETYPE, VLENGTH,\n-                    dmtype, dtype, VLENGTH,\n-                    this, species,\n-                    Byte64Mask::defaultMaskCast);\n-            }\n-            return this.defaultMaskCast(species);\n+\n+            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n+                this.getClass(), ETYPE, VLENGTH,\n+                species.maskType(), species.elementType(), VLENGTH,\n+                this, species,\n+                Byte64Mask::defaultMaskCast);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte64Vector.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -620,10 +620,6 @@\n-            if (VSIZE == species.vectorBitSize()) {\n-                Class<?> dtype = species.elementType();\n-                Class<?> dmtype = species.maskType();\n-                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n-                    this.getClass(), ETYPE, VLENGTH,\n-                    dmtype, dtype, VLENGTH,\n-                    this, species,\n-                    ByteMaxMask::defaultMaskCast);\n-            }\n-            return this.defaultMaskCast(species);\n+\n+            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n+                this.getClass(), ETYPE, VLENGTH,\n+                species.maskType(), species.elementType(), VLENGTH,\n+                this, species,\n+                ByteMaxMask::defaultMaskCast);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteMaxVector.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -611,10 +611,6 @@\n-            if (VSIZE == species.vectorBitSize()) {\n-                Class<?> dtype = species.elementType();\n-                Class<?> dmtype = species.maskType();\n-                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n-                    this.getClass(), ETYPE, VLENGTH,\n-                    dmtype, dtype, VLENGTH,\n-                    this, species,\n-                    Double128Mask::defaultMaskCast);\n-            }\n-            return this.defaultMaskCast(species);\n+\n+            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n+                this.getClass(), ETYPE, VLENGTH,\n+                species.maskType(), species.elementType(), VLENGTH,\n+                this, species,\n+                Double128Mask::defaultMaskCast);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double128Vector.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -615,10 +615,6 @@\n-            if (VSIZE == species.vectorBitSize()) {\n-                Class<?> dtype = species.elementType();\n-                Class<?> dmtype = species.maskType();\n-                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n-                    this.getClass(), ETYPE, VLENGTH,\n-                    dmtype, dtype, VLENGTH,\n-                    this, species,\n-                    Double256Mask::defaultMaskCast);\n-            }\n-            return this.defaultMaskCast(species);\n+\n+            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n+                this.getClass(), ETYPE, VLENGTH,\n+                species.maskType(), species.elementType(), VLENGTH,\n+                this, species,\n+                Double256Mask::defaultMaskCast);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double256Vector.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -623,10 +623,6 @@\n-            if (VSIZE == species.vectorBitSize()) {\n-                Class<?> dtype = species.elementType();\n-                Class<?> dmtype = species.maskType();\n-                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n-                    this.getClass(), ETYPE, VLENGTH,\n-                    dmtype, dtype, VLENGTH,\n-                    this, species,\n-                    Double512Mask::defaultMaskCast);\n-            }\n-            return this.defaultMaskCast(species);\n+\n+            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n+                this.getClass(), ETYPE, VLENGTH,\n+                species.maskType(), species.elementType(), VLENGTH,\n+                this, species,\n+                Double512Mask::defaultMaskCast);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double512Vector.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -609,10 +609,6 @@\n-            if (VSIZE == species.vectorBitSize()) {\n-                Class<?> dtype = species.elementType();\n-                Class<?> dmtype = species.maskType();\n-                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n-                    this.getClass(), ETYPE, VLENGTH,\n-                    dmtype, dtype, VLENGTH,\n-                    this, species,\n-                    Double64Mask::defaultMaskCast);\n-            }\n-            return this.defaultMaskCast(species);\n+\n+            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n+                this.getClass(), ETYPE, VLENGTH,\n+                species.maskType(), species.elementType(), VLENGTH,\n+                this, species,\n+                Double64Mask::defaultMaskCast);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double64Vector.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -608,10 +608,6 @@\n-            if (VSIZE == species.vectorBitSize()) {\n-                Class<?> dtype = species.elementType();\n-                Class<?> dmtype = species.maskType();\n-                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n-                    this.getClass(), ETYPE, VLENGTH,\n-                    dmtype, dtype, VLENGTH,\n-                    this, species,\n-                    DoubleMaxMask::defaultMaskCast);\n-            }\n-            return this.defaultMaskCast(species);\n+\n+            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n+                this.getClass(), ETYPE, VLENGTH,\n+                species.maskType(), species.elementType(), VLENGTH,\n+                this, species,\n+                DoubleMaxMask::defaultMaskCast);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleMaxVector.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -615,10 +615,6 @@\n-            if (VSIZE == species.vectorBitSize()) {\n-                Class<?> dtype = species.elementType();\n-                Class<?> dmtype = species.maskType();\n-                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n-                    this.getClass(), ETYPE, VLENGTH,\n-                    dmtype, dtype, VLENGTH,\n-                    this, species,\n-                    Float128Mask::defaultMaskCast);\n-            }\n-            return this.defaultMaskCast(species);\n+\n+            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n+                this.getClass(), ETYPE, VLENGTH,\n+                species.maskType(), species.elementType(), VLENGTH,\n+                this, species,\n+                Float128Mask::defaultMaskCast);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float128Vector.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -623,10 +623,6 @@\n-            if (VSIZE == species.vectorBitSize()) {\n-                Class<?> dtype = species.elementType();\n-                Class<?> dmtype = species.maskType();\n-                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n-                    this.getClass(), ETYPE, VLENGTH,\n-                    dmtype, dtype, VLENGTH,\n-                    this, species,\n-                    Float256Mask::defaultMaskCast);\n-            }\n-            return this.defaultMaskCast(species);\n+\n+            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n+                this.getClass(), ETYPE, VLENGTH,\n+                species.maskType(), species.elementType(), VLENGTH,\n+                this, species,\n+                Float256Mask::defaultMaskCast);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float256Vector.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -639,10 +639,6 @@\n-            if (VSIZE == species.vectorBitSize()) {\n-                Class<?> dtype = species.elementType();\n-                Class<?> dmtype = species.maskType();\n-                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n-                    this.getClass(), ETYPE, VLENGTH,\n-                    dmtype, dtype, VLENGTH,\n-                    this, species,\n-                    Float512Mask::defaultMaskCast);\n-            }\n-            return this.defaultMaskCast(species);\n+\n+            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n+                this.getClass(), ETYPE, VLENGTH,\n+                species.maskType(), species.elementType(), VLENGTH,\n+                this, species,\n+                Float512Mask::defaultMaskCast);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float512Vector.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -611,10 +611,6 @@\n-            if (VSIZE == species.vectorBitSize()) {\n-                Class<?> dtype = species.elementType();\n-                Class<?> dmtype = species.maskType();\n-                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n-                    this.getClass(), ETYPE, VLENGTH,\n-                    dmtype, dtype, VLENGTH,\n-                    this, species,\n-                    Float64Mask::defaultMaskCast);\n-            }\n-            return this.defaultMaskCast(species);\n+\n+            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n+                this.getClass(), ETYPE, VLENGTH,\n+                species.maskType(), species.elementType(), VLENGTH,\n+                this, species,\n+                Float64Mask::defaultMaskCast);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float64Vector.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -608,10 +608,6 @@\n-            if (VSIZE == species.vectorBitSize()) {\n-                Class<?> dtype = species.elementType();\n-                Class<?> dmtype = species.maskType();\n-                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n-                    this.getClass(), ETYPE, VLENGTH,\n-                    dmtype, dtype, VLENGTH,\n-                    this, species,\n-                    FloatMaxMask::defaultMaskCast);\n-            }\n-            return this.defaultMaskCast(species);\n+\n+            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n+                this.getClass(), ETYPE, VLENGTH,\n+                species.maskType(), species.elementType(), VLENGTH,\n+                this, species,\n+                FloatMaxMask::defaultMaskCast);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatMaxVector.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -626,10 +626,6 @@\n-            if (VSIZE == species.vectorBitSize()) {\n-                Class<?> dtype = species.elementType();\n-                Class<?> dmtype = species.maskType();\n-                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n-                    this.getClass(), ETYPE, VLENGTH,\n-                    dmtype, dtype, VLENGTH,\n-                    this, species,\n-                    Int128Mask::defaultMaskCast);\n-            }\n-            return this.defaultMaskCast(species);\n+\n+            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n+                this.getClass(), ETYPE, VLENGTH,\n+                species.maskType(), species.elementType(), VLENGTH,\n+                this, species,\n+                Int128Mask::defaultMaskCast);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int128Vector.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -634,10 +634,6 @@\n-            if (VSIZE == species.vectorBitSize()) {\n-                Class<?> dtype = species.elementType();\n-                Class<?> dmtype = species.maskType();\n-                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n-                    this.getClass(), ETYPE, VLENGTH,\n-                    dmtype, dtype, VLENGTH,\n-                    this, species,\n-                    Int256Mask::defaultMaskCast);\n-            }\n-            return this.defaultMaskCast(species);\n+\n+            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n+                this.getClass(), ETYPE, VLENGTH,\n+                species.maskType(), species.elementType(), VLENGTH,\n+                this, species,\n+                Int256Mask::defaultMaskCast);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int256Vector.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -650,10 +650,6 @@\n-            if (VSIZE == species.vectorBitSize()) {\n-                Class<?> dtype = species.elementType();\n-                Class<?> dmtype = species.maskType();\n-                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n-                    this.getClass(), ETYPE, VLENGTH,\n-                    dmtype, dtype, VLENGTH,\n-                    this, species,\n-                    Int512Mask::defaultMaskCast);\n-            }\n-            return this.defaultMaskCast(species);\n+\n+            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n+                this.getClass(), ETYPE, VLENGTH,\n+                species.maskType(), species.elementType(), VLENGTH,\n+                this, species,\n+                Int512Mask::defaultMaskCast);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int512Vector.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -622,10 +622,6 @@\n-            if (VSIZE == species.vectorBitSize()) {\n-                Class<?> dtype = species.elementType();\n-                Class<?> dmtype = species.maskType();\n-                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n-                    this.getClass(), ETYPE, VLENGTH,\n-                    dmtype, dtype, VLENGTH,\n-                    this, species,\n-                    Int64Mask::defaultMaskCast);\n-            }\n-            return this.defaultMaskCast(species);\n+\n+            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n+                this.getClass(), ETYPE, VLENGTH,\n+                species.maskType(), species.elementType(), VLENGTH,\n+                this, species,\n+                Int64Mask::defaultMaskCast);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int64Vector.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -620,10 +620,6 @@\n-            if (VSIZE == species.vectorBitSize()) {\n-                Class<?> dtype = species.elementType();\n-                Class<?> dmtype = species.maskType();\n-                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n-                    this.getClass(), ETYPE, VLENGTH,\n-                    dmtype, dtype, VLENGTH,\n-                    this, species,\n-                    IntMaxMask::defaultMaskCast);\n-            }\n-            return this.defaultMaskCast(species);\n+\n+            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n+                this.getClass(), ETYPE, VLENGTH,\n+                species.maskType(), species.elementType(), VLENGTH,\n+                this, species,\n+                IntMaxMask::defaultMaskCast);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntMaxVector.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -612,10 +612,6 @@\n-            if (VSIZE == species.vectorBitSize()) {\n-                Class<?> dtype = species.elementType();\n-                Class<?> dmtype = species.maskType();\n-                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n-                    this.getClass(), ETYPE, VLENGTH,\n-                    dmtype, dtype, VLENGTH,\n-                    this, species,\n-                    Long128Mask::defaultMaskCast);\n-            }\n-            return this.defaultMaskCast(species);\n+\n+            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n+                this.getClass(), ETYPE, VLENGTH,\n+                species.maskType(), species.elementType(), VLENGTH,\n+                this, species,\n+                Long128Mask::defaultMaskCast);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long128Vector.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -616,10 +616,6 @@\n-            if (VSIZE == species.vectorBitSize()) {\n-                Class<?> dtype = species.elementType();\n-                Class<?> dmtype = species.maskType();\n-                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n-                    this.getClass(), ETYPE, VLENGTH,\n-                    dmtype, dtype, VLENGTH,\n-                    this, species,\n-                    Long256Mask::defaultMaskCast);\n-            }\n-            return this.defaultMaskCast(species);\n+\n+            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n+                this.getClass(), ETYPE, VLENGTH,\n+                species.maskType(), species.elementType(), VLENGTH,\n+                this, species,\n+                Long256Mask::defaultMaskCast);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long256Vector.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -624,10 +624,6 @@\n-            if (VSIZE == species.vectorBitSize()) {\n-                Class<?> dtype = species.elementType();\n-                Class<?> dmtype = species.maskType();\n-                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n-                    this.getClass(), ETYPE, VLENGTH,\n-                    dmtype, dtype, VLENGTH,\n-                    this, species,\n-                    Long512Mask::defaultMaskCast);\n-            }\n-            return this.defaultMaskCast(species);\n+\n+            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n+                this.getClass(), ETYPE, VLENGTH,\n+                species.maskType(), species.elementType(), VLENGTH,\n+                this, species,\n+                Long512Mask::defaultMaskCast);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long512Vector.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -610,10 +610,6 @@\n-            if (VSIZE == species.vectorBitSize()) {\n-                Class<?> dtype = species.elementType();\n-                Class<?> dmtype = species.maskType();\n-                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n-                    this.getClass(), ETYPE, VLENGTH,\n-                    dmtype, dtype, VLENGTH,\n-                    this, species,\n-                    Long64Mask::defaultMaskCast);\n-            }\n-            return this.defaultMaskCast(species);\n+\n+            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n+                this.getClass(), ETYPE, VLENGTH,\n+                species.maskType(), species.elementType(), VLENGTH,\n+                this, species,\n+                Long64Mask::defaultMaskCast);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long64Vector.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -610,10 +610,6 @@\n-            if (VSIZE == species.vectorBitSize()) {\n-                Class<?> dtype = species.elementType();\n-                Class<?> dmtype = species.maskType();\n-                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n-                    this.getClass(), ETYPE, VLENGTH,\n-                    dmtype, dtype, VLENGTH,\n-                    this, species,\n-                    LongMaxMask::defaultMaskCast);\n-            }\n-            return this.defaultMaskCast(species);\n+\n+            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n+                this.getClass(), ETYPE, VLENGTH,\n+                species.maskType(), species.elementType(), VLENGTH,\n+                this, species,\n+                LongMaxMask::defaultMaskCast);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongMaxVector.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -634,10 +634,6 @@\n-            if (VSIZE == species.vectorBitSize()) {\n-                Class<?> dtype = species.elementType();\n-                Class<?> dmtype = species.maskType();\n-                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n-                    this.getClass(), ETYPE, VLENGTH,\n-                    dmtype, dtype, VLENGTH,\n-                    this, species,\n-                    Short128Mask::defaultMaskCast);\n-            }\n-            return this.defaultMaskCast(species);\n+\n+            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n+                this.getClass(), ETYPE, VLENGTH,\n+                species.maskType(), species.elementType(), VLENGTH,\n+                this, species,\n+                Short128Mask::defaultMaskCast);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short128Vector.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -650,10 +650,6 @@\n-            if (VSIZE == species.vectorBitSize()) {\n-                Class<?> dtype = species.elementType();\n-                Class<?> dmtype = species.maskType();\n-                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n-                    this.getClass(), ETYPE, VLENGTH,\n-                    dmtype, dtype, VLENGTH,\n-                    this, species,\n-                    Short256Mask::defaultMaskCast);\n-            }\n-            return this.defaultMaskCast(species);\n+\n+            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n+                this.getClass(), ETYPE, VLENGTH,\n+                species.maskType(), species.elementType(), VLENGTH,\n+                this, species,\n+                Short256Mask::defaultMaskCast);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short256Vector.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -682,10 +682,6 @@\n-            if (VSIZE == species.vectorBitSize()) {\n-                Class<?> dtype = species.elementType();\n-                Class<?> dmtype = species.maskType();\n-                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n-                    this.getClass(), ETYPE, VLENGTH,\n-                    dmtype, dtype, VLENGTH,\n-                    this, species,\n-                    Short512Mask::defaultMaskCast);\n-            }\n-            return this.defaultMaskCast(species);\n+\n+            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n+                this.getClass(), ETYPE, VLENGTH,\n+                species.maskType(), species.elementType(), VLENGTH,\n+                this, species,\n+                Short512Mask::defaultMaskCast);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short512Vector.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -626,10 +626,6 @@\n-            if (VSIZE == species.vectorBitSize()) {\n-                Class<?> dtype = species.elementType();\n-                Class<?> dmtype = species.maskType();\n-                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n-                    this.getClass(), ETYPE, VLENGTH,\n-                    dmtype, dtype, VLENGTH,\n-                    this, species,\n-                    Short64Mask::defaultMaskCast);\n-            }\n-            return this.defaultMaskCast(species);\n+\n+            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n+                this.getClass(), ETYPE, VLENGTH,\n+                species.maskType(), species.elementType(), VLENGTH,\n+                this, species,\n+                Short64Mask::defaultMaskCast);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short64Vector.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -620,10 +620,6 @@\n-            if (VSIZE == species.vectorBitSize()) {\n-                Class<?> dtype = species.elementType();\n-                Class<?> dmtype = species.maskType();\n-                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n-                    this.getClass(), ETYPE, VLENGTH,\n-                    dmtype, dtype, VLENGTH,\n-                    this, species,\n-                    ShortMaxMask::defaultMaskCast);\n-            }\n-            return this.defaultMaskCast(species);\n+\n+            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n+                this.getClass(), ETYPE, VLENGTH,\n+                species.maskType(), species.elementType(), VLENGTH,\n+                this, species,\n+                ShortMaxMask::defaultMaskCast);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortMaxVector.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -893,10 +893,6 @@\n-            if (VSIZE == species.vectorBitSize()) {\n-                Class<?> dtype = species.elementType();\n-                Class<?> dmtype = species.maskType();\n-                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n-                    this.getClass(), ETYPE, VLENGTH,\n-                    dmtype, dtype, VLENGTH,\n-                    this, species,\n-                    $Type$$bits$Mask::defaultMaskCast);\n-            }\n-            return this.defaultMaskCast(species);\n+\n+            return VectorSupport.convert(VectorSupport.VECTOR_OP_CAST,\n+                this.getClass(), ETYPE, VLENGTH,\n+                species.maskType(), species.elementType(), VLENGTH,\n+                this, species,\n+                $Type$$bits$Mask::defaultMaskCast);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-VectorBits.java.template","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,223 @@\n+\/*\n+ *  Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ *  This code is free software; you can redistribute it and\/or modify it\n+ *  under the terms of the GNU General Public License version 2 only, as\n+ *  published by the Free Software Foundation.\n+ *\n+ *  This code is distributed in the hope that it will be useful, but WITHOUT\n+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ *  version 2 for more details (a copy is included in the LICENSE file that\n+ *  accompanied this code).\n+ *\n+ *  You should have received a copy of the GNU General Public License version\n+ *  2 along with this work; if not, write to the Free Software Foundation,\n+ *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ *  Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ *  or visit www.oracle.com if you need additional information or have any\n+ *  questions.\n+ *\n+ *\/\n+\n+package org.openjdk.bench.jdk.incubator.vector;\n+\n+import jdk.incubator.vector.*;\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.*;\n+\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@State(Scope.Thread)\n+public class MaskCastOperationsBenchmark {\n+    VectorMask<Byte> bmask64;\n+    VectorMask<Byte> bmask128;\n+    VectorMask<Byte> bmask256;\n+\n+    VectorMask<Short> smask64;\n+    VectorMask<Short> smask128;\n+    VectorMask<Short> smask256;\n+    VectorMask<Short> smask512;\n+\n+    VectorMask<Integer> imask64;\n+    VectorMask<Integer> imask128;\n+    VectorMask<Integer> imask256;\n+    VectorMask<Integer> imask512;\n+\n+    VectorMask<Long> lmask128;\n+    VectorMask<Long> lmask256;\n+    VectorMask<Long> lmask512;\n+\n+    static final boolean [] mask_arr = {\n+       false, false, false, true, false, false, false, false,\n+       false, false, false, true, false, false, false, false,\n+       false, false, false, true, false, false, false, false,\n+       true, true, true, true, true, true, true, true,\n+       true, true, true, true, true, true, true, true,\n+       false, false, false, true, false, false, false, false,\n+       false, false, false, true, false, false, false, false,\n+       false, false, false, true, false, false, false, false\n+    };\n+\n+    @Setup(Level.Trial)\n+    public void BmSetup() {\n+        bmask64 = VectorMask.fromArray(ByteVector.SPECIES_64, mask_arr, 0);\n+        bmask128 = VectorMask.fromArray(ByteVector.SPECIES_128, mask_arr, 0);\n+        bmask256 = VectorMask.fromArray(ByteVector.SPECIES_256, mask_arr, 0);\n+\n+        smask64 = VectorMask.fromArray(ShortVector.SPECIES_64, mask_arr, 0);\n+        smask128 = VectorMask.fromArray(ShortVector.SPECIES_128, mask_arr, 0);\n+        smask256 = VectorMask.fromArray(ShortVector.SPECIES_256, mask_arr, 0);\n+        smask512 = VectorMask.fromArray(ShortVector.SPECIES_512, mask_arr, 0);\n+\n+        imask64 = VectorMask.fromArray(IntVector.SPECIES_64, mask_arr, 0);\n+        imask128 = VectorMask.fromArray(IntVector.SPECIES_128, mask_arr, 0);\n+        imask256 = VectorMask.fromArray(IntVector.SPECIES_256, mask_arr, 0);\n+        imask512 = VectorMask.fromArray(IntVector.SPECIES_512, mask_arr, 0);\n+\n+        lmask128 = VectorMask.fromArray(LongVector.SPECIES_128, mask_arr, 0);\n+        lmask256 = VectorMask.fromArray(LongVector.SPECIES_256, mask_arr, 0);\n+        lmask512 = VectorMask.fromArray(LongVector.SPECIES_512, mask_arr, 0);\n+    }\n+\n+    @Benchmark\n+    public VectorMask<Short> microMaskCastByte64ToShort128() {\n+        return bmask64.cast(ShortVector.SPECIES_128);\n+    }\n+\n+    @Benchmark\n+    public VectorMask<Integer> microMaskCastByte64ToInteger256() {\n+        return bmask64.cast(IntVector.SPECIES_256);\n+    }\n+\n+    @Benchmark\n+    public VectorMask<Long> microMaskCastByte64ToLong512() {\n+        return bmask64.cast(LongVector.SPECIES_512);\n+    }\n+\n+    @Benchmark\n+    public VectorMask<Short> microMaskCastByte128ToShort256() {\n+        return bmask128.cast(ShortVector.SPECIES_256);\n+    }\n+\n+    @Benchmark\n+    public VectorMask<Integer> microMaskCastByte128ToInteger512() {\n+        return bmask128.cast(IntVector.SPECIES_512);\n+    }\n+\n+    @Benchmark\n+    public VectorMask<Short> microMaskCastByte256ToShort512() {\n+        return bmask256.cast(ShortVector.SPECIES_512);\n+    }\n+\n+    @Benchmark\n+    public VectorMask<Integer> microMaskCastShort64ToInteger128() {\n+        return smask64.cast(IntVector.SPECIES_128);\n+    }\n+\n+    @Benchmark\n+    public VectorMask<Long> microMaskCastShort64ToLong256() {\n+        return smask64.cast(LongVector.SPECIES_256);\n+    }\n+\n+    @Benchmark\n+    public VectorMask<Byte> microMaskCastShort128ToByte64() {\n+        return smask128.cast(ByteVector.SPECIES_64);\n+    }\n+\n+    @Benchmark\n+    public VectorMask<Integer> microMaskCastShort128ToInteger256() {\n+        return smask128.cast(IntVector.SPECIES_256);\n+    }\n+\n+    @Benchmark\n+    public VectorMask<Long> microMaskCastShort128ToLong512() {\n+        return smask128.cast(LongVector.SPECIES_512);\n+    }\n+\n+    @Benchmark\n+    public VectorMask<Byte> microMaskCastShort256ToByte128() {\n+        return smask256.cast(ByteVector.SPECIES_128);\n+    }\n+\n+    @Benchmark\n+    public VectorMask<Integer> microMaskCastShort256ToInteger512() {\n+        return smask256.cast(IntVector.SPECIES_512);\n+    }\n+\n+    @Benchmark\n+    public VectorMask<Byte> microMaskCastShort512ToByte256() {\n+        return smask512.cast(ByteVector.SPECIES_256);\n+    }\n+\n+    @Benchmark\n+    public VectorMask<Long> microMaskCastInteger64ToLong128() {\n+        return imask64.cast(LongVector.SPECIES_128);\n+    }\n+\n+    @Benchmark\n+    public VectorMask<Short> microMaskCastInteger128ToShort64() {\n+        return imask128.cast(ShortVector.SPECIES_64);\n+    }\n+\n+    @Benchmark\n+    public VectorMask<Long> microMaskCastInteger128ToLong256() {\n+        return imask128.cast(LongVector.SPECIES_256);\n+    }\n+\n+    @Benchmark\n+    public VectorMask<Byte> microMaskCastInteger256ToByte64() {\n+        return imask256.cast(ByteVector.SPECIES_64);\n+    }\n+\n+    @Benchmark\n+    public VectorMask<Short> microMaskCastInteger256ToShort128() {\n+        return imask256.cast(ShortVector.SPECIES_128);\n+    }\n+\n+    @Benchmark\n+    public VectorMask<Long> microMaskCastInteger256ToLong512() {\n+        return imask256.cast(LongVector.SPECIES_512);\n+    }\n+\n+    @Benchmark\n+    public VectorMask<Byte> microMaskCastInteger512ToByte128() {\n+        return imask512.cast(ByteVector.SPECIES_128);\n+    }\n+\n+    @Benchmark\n+    public VectorMask<Short> microMaskCastInteger512ToShort256() {\n+        return imask512.cast(ShortVector.SPECIES_256);\n+    }\n+\n+    @Benchmark\n+    public VectorMask<Integer> microMaskCastLong128ToInteger64() {\n+        return lmask128.cast(IntVector.SPECIES_64);\n+    }\n+\n+    @Benchmark\n+    public VectorMask<Short> microMaskCastLong256ToShort64() {\n+        return lmask256.cast(ShortVector.SPECIES_64);\n+    }\n+\n+    @Benchmark\n+    public VectorMask<Integer> microMaskCastLong256ToInteger128() {\n+        return lmask256.cast(IntVector.SPECIES_128);\n+    }\n+\n+    @Benchmark\n+    public VectorMask<Byte> microMaskCastLong512ToByte64() {\n+        return lmask512.cast(ByteVector.SPECIES_64);\n+    }\n+\n+    @Benchmark\n+    public VectorMask<Short> microMaskCastLong512ToShort128() {\n+        return lmask512.cast(ShortVector.SPECIES_128);\n+    }\n+\n+    @Benchmark\n+    public VectorMask<Integer> microMaskCastLong512ToInteger256() {\n+        return lmask512.cast(IntVector.SPECIES_256);\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/MaskCastOperationsBenchmark.java","additions":223,"deletions":0,"binary":false,"changes":223,"status":"added"}]}