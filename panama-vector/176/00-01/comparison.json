{"files":[{"patch":"@@ -492,1 +492,1 @@\n-    case VECTOR_OP_CTZ: {\n+    case VECTOR_OP_TZ_COUNT: {\n@@ -498,1 +498,1 @@\n-        default: fatal(\"CTZ: %s\", type2name(bt));\n+        default: fatal(\"TZ_COUNT: %s\", type2name(bt));\n@@ -502,1 +502,1 @@\n-    case VECTOR_OP_CLZ: {\n+    case VECTOR_OP_LZ_COUNT: {\n@@ -508,1 +508,1 @@\n-        default: fatal(\"CLZ: %s\", type2name(bt));\n+        default: fatal(\"LZ_COUNT: %s\", type2name(bt));\n","filename":"src\/hotspot\/share\/prims\/vectorSupport.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -58,2 +58,0 @@\n-    VECTOR_OP_CTZ     = 29,\n-    VECTOR_OP_CLZ     = 30,\n@@ -99,0 +97,3 @@\n+    VECTOR_OP_TZ_COUNT = 29,\n+    VECTOR_OP_LZ_COUNT = 30,\n+\n","filename":"src\/hotspot\/share\/prims\/vectorSupport.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -45,2 +45,0 @@\n-    public static final int VECTOR_OP_CTZ  = 29;\n-    public static final int VECTOR_OP_CLZ  = 30;\n@@ -87,0 +85,4 @@\n+    \/\/ Leading\/Trailing zeros count operations\n+    public static final int VECTOR_OP_TZ_COUNT  = 29;\n+    public static final int VECTOR_OP_LZ_COUNT  = 30;\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/vector\/VectorSupport.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -660,2 +660,1 @@\n-\n-            case VECTOR_OP_CTZ: return (v0, m) ->\n+            case VECTOR_OP_TZ_COUNT: return (v0, m) ->\n@@ -663,2 +662,1 @@\n-\n-            case VECTOR_OP_CLZ: return (v0, m) ->\n+            case VECTOR_OP_LZ_COUNT: return (v0, m) ->\n@@ -666,1 +664,0 @@\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteVector.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -636,3 +636,0 @@\n-\n-\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleVector.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -636,3 +636,0 @@\n-\n-\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatVector.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -660,2 +660,1 @@\n-\n-            case VECTOR_OP_CTZ: return (v0, m) ->\n+            case VECTOR_OP_TZ_COUNT: return (v0, m) ->\n@@ -663,2 +662,1 @@\n-\n-            case VECTOR_OP_CLZ: return (v0, m) ->\n+            case VECTOR_OP_LZ_COUNT: return (v0, m) ->\n@@ -666,1 +664,0 @@\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntVector.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -618,2 +618,1 @@\n-\n-            case VECTOR_OP_CTZ: return (v0, m) ->\n+            case VECTOR_OP_TZ_COUNT: return (v0, m) ->\n@@ -621,2 +620,1 @@\n-\n-            case VECTOR_OP_CLZ: return (v0, m) ->\n+            case VECTOR_OP_LZ_COUNT: return (v0, m) ->\n@@ -624,1 +622,0 @@\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongVector.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -660,2 +660,1 @@\n-\n-            case VECTOR_OP_CTZ: return (v0, m) ->\n+            case VECTOR_OP_TZ_COUNT: return (v0, m) ->\n@@ -663,2 +662,1 @@\n-\n-            case VECTOR_OP_CLZ: return (v0, m) ->\n+            case VECTOR_OP_LZ_COUNT: return (v0, m) ->\n@@ -666,1 +664,0 @@\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortVector.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -456,1 +456,1 @@\n-    public static final Unary CTZ = unary(\"CTZ\", \"numberOfTrailingZeros\", VectorSupport.VECTOR_OP_CTZ, VO_NOFP);\n+    public static final Unary TRAILING_ZEROS_COUNT = unary(\"TRAILING_ZEROS_COUNT\", \"numberOfTrailingZeros\", VectorSupport.VECTOR_OP_TZ_COUNT, VO_NOFP);\n@@ -458,1 +458,1 @@\n-    public static final Unary CLZ = unary(\"CLZ\", \"numberOfLeadingZeros\", VectorSupport.VECTOR_OP_CLZ, VO_NOFP);\n+    public static final Unary LEADING_ZEROS_COUNT = unary(\"LEADING_ZEROS_COUNT\", \"numberOfLeadingZeros\", VectorSupport.VECTOR_OP_LZ_COUNT, VO_NOFP);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/VectorOperators.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -685,1 +685,0 @@\n-            case VECTOR_OP_BIT_COUNT: return (v0, m) ->\n@@ -687,0 +686,1 @@\n+            case VECTOR_OP_BIT_COUNT: return (v0, m) ->\n@@ -688,8 +688,1 @@\n-#else[intOrLong]\n-                    v0.uOp(m, (i, a) -> ($type$) bitCount(a));\n-#end[intOrLong]\n-#end[!FP]\n-\n-#if[!FP]\n-            case VECTOR_OP_CTZ: return (v0, m) ->\n-#if[intOrLong]\n+            case VECTOR_OP_TZ_COUNT: return (v0, m) ->\n@@ -697,8 +690,1 @@\n-#else[intOrLong]\n-                    v0.uOp(m, (i, a) -> ($type$) numberOfTrailingZeros(a));\n-#end[intOrLong]\n-#end[!FP]\n-\n-#if[!FP]\n-            case VECTOR_OP_CLZ: return (v0, m) ->\n-#if[intOrLong]\n+            case VECTOR_OP_LZ_COUNT: return (v0, m) ->\n@@ -707,0 +693,5 @@\n+            case VECTOR_OP_BIT_COUNT: return (v0, m) ->\n+                    v0.uOp(m, (i, a) -> ($type$) bitCount(a));\n+            case VECTOR_OP_TZ_COUNT: return (v0, m) ->\n+                    v0.uOp(m, (i, a) -> ($type$) numberOfTrailingZeros(a));\n+            case VECTOR_OP_LZ_COUNT: return (v0, m) ->\n@@ -710,1 +701,0 @@\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template","additions":9,"deletions":19,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1213,1 +1213,1 @@\n-    static byte CTZ_scalar(byte a) {\n+    static byte TRAILING_ZEROS_COUNT_scalar(byte a) {\n@@ -1217,1 +1217,1 @@\n-    static byte CLZ_scalar(byte a) {\n+    static byte LEADING_ZEROS_COUNT_scalar(byte a) {\n@@ -5322,2 +5322,2 @@\n-    static byte CTZ(byte a) {\n-        return (byte)(CTZ_scalar(a));\n+    static byte TRAILING_ZEROS_COUNT(byte a) {\n+        return (byte)(TRAILING_ZEROS_COUNT_scalar(a));\n@@ -5329,1 +5329,1 @@\n-    static void CTZByte128VectorTests(IntFunction<byte[]> fa) {\n+    static void TRAILING_ZEROS_COUNTByte128VectorTests(IntFunction<byte[]> fa) {\n@@ -5336,1 +5336,1 @@\n-                av.lanewise(VectorOperators.CTZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT).intoArray(r, i);\n@@ -5340,1 +5340,1 @@\n-        assertArraysEquals(r, a, Byte128VectorTests::CTZ);\n+        assertArraysEquals(r, a, Byte128VectorTests::TRAILING_ZEROS_COUNT);\n@@ -5346,1 +5346,1 @@\n-    static void CTZMaskedByte128VectorTests(IntFunction<byte[]> fa,\n+    static void TRAILING_ZEROS_COUNTMaskedByte128VectorTests(IntFunction<byte[]> fa,\n@@ -5356,1 +5356,1 @@\n-                av.lanewise(VectorOperators.CTZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT, vmask).intoArray(r, i);\n@@ -5360,1 +5360,1 @@\n-        assertArraysEquals(r, a, mask, Byte128VectorTests::CTZ);\n+        assertArraysEquals(r, a, mask, Byte128VectorTests::TRAILING_ZEROS_COUNT);\n@@ -5365,2 +5365,2 @@\n-    static byte CLZ(byte a) {\n-        return (byte)(CLZ_scalar(a));\n+    static byte LEADING_ZEROS_COUNT(byte a) {\n+        return (byte)(LEADING_ZEROS_COUNT_scalar(a));\n@@ -5372,1 +5372,1 @@\n-    static void CLZByte128VectorTests(IntFunction<byte[]> fa) {\n+    static void LEADING_ZEROS_COUNTByte128VectorTests(IntFunction<byte[]> fa) {\n@@ -5379,1 +5379,1 @@\n-                av.lanewise(VectorOperators.CLZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT).intoArray(r, i);\n@@ -5383,1 +5383,1 @@\n-        assertArraysEquals(r, a, Byte128VectorTests::CLZ);\n+        assertArraysEquals(r, a, Byte128VectorTests::LEADING_ZEROS_COUNT);\n@@ -5389,1 +5389,1 @@\n-    static void CLZMaskedByte128VectorTests(IntFunction<byte[]> fa,\n+    static void LEADING_ZEROS_COUNTMaskedByte128VectorTests(IntFunction<byte[]> fa,\n@@ -5399,1 +5399,1 @@\n-                av.lanewise(VectorOperators.CLZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT, vmask).intoArray(r, i);\n@@ -5403,1 +5403,1 @@\n-        assertArraysEquals(r, a, mask, Byte128VectorTests::CLZ);\n+        assertArraysEquals(r, a, mask, Byte128VectorTests::LEADING_ZEROS_COUNT);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte128VectorTests.java","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1213,1 +1213,1 @@\n-    static byte CTZ_scalar(byte a) {\n+    static byte TRAILING_ZEROS_COUNT_scalar(byte a) {\n@@ -1217,1 +1217,1 @@\n-    static byte CLZ_scalar(byte a) {\n+    static byte LEADING_ZEROS_COUNT_scalar(byte a) {\n@@ -5322,2 +5322,2 @@\n-    static byte CTZ(byte a) {\n-        return (byte)(CTZ_scalar(a));\n+    static byte TRAILING_ZEROS_COUNT(byte a) {\n+        return (byte)(TRAILING_ZEROS_COUNT_scalar(a));\n@@ -5329,1 +5329,1 @@\n-    static void CTZByte256VectorTests(IntFunction<byte[]> fa) {\n+    static void TRAILING_ZEROS_COUNTByte256VectorTests(IntFunction<byte[]> fa) {\n@@ -5336,1 +5336,1 @@\n-                av.lanewise(VectorOperators.CTZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT).intoArray(r, i);\n@@ -5340,1 +5340,1 @@\n-        assertArraysEquals(r, a, Byte256VectorTests::CTZ);\n+        assertArraysEquals(r, a, Byte256VectorTests::TRAILING_ZEROS_COUNT);\n@@ -5346,1 +5346,1 @@\n-    static void CTZMaskedByte256VectorTests(IntFunction<byte[]> fa,\n+    static void TRAILING_ZEROS_COUNTMaskedByte256VectorTests(IntFunction<byte[]> fa,\n@@ -5356,1 +5356,1 @@\n-                av.lanewise(VectorOperators.CTZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT, vmask).intoArray(r, i);\n@@ -5360,1 +5360,1 @@\n-        assertArraysEquals(r, a, mask, Byte256VectorTests::CTZ);\n+        assertArraysEquals(r, a, mask, Byte256VectorTests::TRAILING_ZEROS_COUNT);\n@@ -5365,2 +5365,2 @@\n-    static byte CLZ(byte a) {\n-        return (byte)(CLZ_scalar(a));\n+    static byte LEADING_ZEROS_COUNT(byte a) {\n+        return (byte)(LEADING_ZEROS_COUNT_scalar(a));\n@@ -5372,1 +5372,1 @@\n-    static void CLZByte256VectorTests(IntFunction<byte[]> fa) {\n+    static void LEADING_ZEROS_COUNTByte256VectorTests(IntFunction<byte[]> fa) {\n@@ -5379,1 +5379,1 @@\n-                av.lanewise(VectorOperators.CLZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT).intoArray(r, i);\n@@ -5383,1 +5383,1 @@\n-        assertArraysEquals(r, a, Byte256VectorTests::CLZ);\n+        assertArraysEquals(r, a, Byte256VectorTests::LEADING_ZEROS_COUNT);\n@@ -5389,1 +5389,1 @@\n-    static void CLZMaskedByte256VectorTests(IntFunction<byte[]> fa,\n+    static void LEADING_ZEROS_COUNTMaskedByte256VectorTests(IntFunction<byte[]> fa,\n@@ -5399,1 +5399,1 @@\n-                av.lanewise(VectorOperators.CLZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT, vmask).intoArray(r, i);\n@@ -5403,1 +5403,1 @@\n-        assertArraysEquals(r, a, mask, Byte256VectorTests::CLZ);\n+        assertArraysEquals(r, a, mask, Byte256VectorTests::LEADING_ZEROS_COUNT);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte256VectorTests.java","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1213,1 +1213,1 @@\n-    static byte CTZ_scalar(byte a) {\n+    static byte TRAILING_ZEROS_COUNT_scalar(byte a) {\n@@ -1217,1 +1217,1 @@\n-    static byte CLZ_scalar(byte a) {\n+    static byte LEADING_ZEROS_COUNT_scalar(byte a) {\n@@ -5322,2 +5322,2 @@\n-    static byte CTZ(byte a) {\n-        return (byte)(CTZ_scalar(a));\n+    static byte TRAILING_ZEROS_COUNT(byte a) {\n+        return (byte)(TRAILING_ZEROS_COUNT_scalar(a));\n@@ -5329,1 +5329,1 @@\n-    static void CTZByte512VectorTests(IntFunction<byte[]> fa) {\n+    static void TRAILING_ZEROS_COUNTByte512VectorTests(IntFunction<byte[]> fa) {\n@@ -5336,1 +5336,1 @@\n-                av.lanewise(VectorOperators.CTZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT).intoArray(r, i);\n@@ -5340,1 +5340,1 @@\n-        assertArraysEquals(r, a, Byte512VectorTests::CTZ);\n+        assertArraysEquals(r, a, Byte512VectorTests::TRAILING_ZEROS_COUNT);\n@@ -5346,1 +5346,1 @@\n-    static void CTZMaskedByte512VectorTests(IntFunction<byte[]> fa,\n+    static void TRAILING_ZEROS_COUNTMaskedByte512VectorTests(IntFunction<byte[]> fa,\n@@ -5356,1 +5356,1 @@\n-                av.lanewise(VectorOperators.CTZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT, vmask).intoArray(r, i);\n@@ -5360,1 +5360,1 @@\n-        assertArraysEquals(r, a, mask, Byte512VectorTests::CTZ);\n+        assertArraysEquals(r, a, mask, Byte512VectorTests::TRAILING_ZEROS_COUNT);\n@@ -5365,2 +5365,2 @@\n-    static byte CLZ(byte a) {\n-        return (byte)(CLZ_scalar(a));\n+    static byte LEADING_ZEROS_COUNT(byte a) {\n+        return (byte)(LEADING_ZEROS_COUNT_scalar(a));\n@@ -5372,1 +5372,1 @@\n-    static void CLZByte512VectorTests(IntFunction<byte[]> fa) {\n+    static void LEADING_ZEROS_COUNTByte512VectorTests(IntFunction<byte[]> fa) {\n@@ -5379,1 +5379,1 @@\n-                av.lanewise(VectorOperators.CLZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT).intoArray(r, i);\n@@ -5383,1 +5383,1 @@\n-        assertArraysEquals(r, a, Byte512VectorTests::CLZ);\n+        assertArraysEquals(r, a, Byte512VectorTests::LEADING_ZEROS_COUNT);\n@@ -5389,1 +5389,1 @@\n-    static void CLZMaskedByte512VectorTests(IntFunction<byte[]> fa,\n+    static void LEADING_ZEROS_COUNTMaskedByte512VectorTests(IntFunction<byte[]> fa,\n@@ -5399,1 +5399,1 @@\n-                av.lanewise(VectorOperators.CLZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT, vmask).intoArray(r, i);\n@@ -5403,1 +5403,1 @@\n-        assertArraysEquals(r, a, mask, Byte512VectorTests::CLZ);\n+        assertArraysEquals(r, a, mask, Byte512VectorTests::LEADING_ZEROS_COUNT);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte512VectorTests.java","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1213,1 +1213,1 @@\n-    static byte CTZ_scalar(byte a) {\n+    static byte TRAILING_ZEROS_COUNT_scalar(byte a) {\n@@ -1217,1 +1217,1 @@\n-    static byte CLZ_scalar(byte a) {\n+    static byte LEADING_ZEROS_COUNT_scalar(byte a) {\n@@ -5322,2 +5322,2 @@\n-    static byte CTZ(byte a) {\n-        return (byte)(CTZ_scalar(a));\n+    static byte TRAILING_ZEROS_COUNT(byte a) {\n+        return (byte)(TRAILING_ZEROS_COUNT_scalar(a));\n@@ -5329,1 +5329,1 @@\n-    static void CTZByte64VectorTests(IntFunction<byte[]> fa) {\n+    static void TRAILING_ZEROS_COUNTByte64VectorTests(IntFunction<byte[]> fa) {\n@@ -5336,1 +5336,1 @@\n-                av.lanewise(VectorOperators.CTZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT).intoArray(r, i);\n@@ -5340,1 +5340,1 @@\n-        assertArraysEquals(r, a, Byte64VectorTests::CTZ);\n+        assertArraysEquals(r, a, Byte64VectorTests::TRAILING_ZEROS_COUNT);\n@@ -5346,1 +5346,1 @@\n-    static void CTZMaskedByte64VectorTests(IntFunction<byte[]> fa,\n+    static void TRAILING_ZEROS_COUNTMaskedByte64VectorTests(IntFunction<byte[]> fa,\n@@ -5356,1 +5356,1 @@\n-                av.lanewise(VectorOperators.CTZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT, vmask).intoArray(r, i);\n@@ -5360,1 +5360,1 @@\n-        assertArraysEquals(r, a, mask, Byte64VectorTests::CTZ);\n+        assertArraysEquals(r, a, mask, Byte64VectorTests::TRAILING_ZEROS_COUNT);\n@@ -5365,2 +5365,2 @@\n-    static byte CLZ(byte a) {\n-        return (byte)(CLZ_scalar(a));\n+    static byte LEADING_ZEROS_COUNT(byte a) {\n+        return (byte)(LEADING_ZEROS_COUNT_scalar(a));\n@@ -5372,1 +5372,1 @@\n-    static void CLZByte64VectorTests(IntFunction<byte[]> fa) {\n+    static void LEADING_ZEROS_COUNTByte64VectorTests(IntFunction<byte[]> fa) {\n@@ -5379,1 +5379,1 @@\n-                av.lanewise(VectorOperators.CLZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT).intoArray(r, i);\n@@ -5383,1 +5383,1 @@\n-        assertArraysEquals(r, a, Byte64VectorTests::CLZ);\n+        assertArraysEquals(r, a, Byte64VectorTests::LEADING_ZEROS_COUNT);\n@@ -5389,1 +5389,1 @@\n-    static void CLZMaskedByte64VectorTests(IntFunction<byte[]> fa,\n+    static void LEADING_ZEROS_COUNTMaskedByte64VectorTests(IntFunction<byte[]> fa,\n@@ -5399,1 +5399,1 @@\n-                av.lanewise(VectorOperators.CLZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT, vmask).intoArray(r, i);\n@@ -5403,1 +5403,1 @@\n-        assertArraysEquals(r, a, mask, Byte64VectorTests::CLZ);\n+        assertArraysEquals(r, a, mask, Byte64VectorTests::LEADING_ZEROS_COUNT);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte64VectorTests.java","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1218,1 +1218,1 @@\n-    static byte CTZ_scalar(byte a) {\n+    static byte TRAILING_ZEROS_COUNT_scalar(byte a) {\n@@ -1222,1 +1222,1 @@\n-    static byte CLZ_scalar(byte a) {\n+    static byte LEADING_ZEROS_COUNT_scalar(byte a) {\n@@ -5327,2 +5327,2 @@\n-    static byte CTZ(byte a) {\n-        return (byte)(CTZ_scalar(a));\n+    static byte TRAILING_ZEROS_COUNT(byte a) {\n+        return (byte)(TRAILING_ZEROS_COUNT_scalar(a));\n@@ -5334,1 +5334,1 @@\n-    static void CTZByteMaxVectorTests(IntFunction<byte[]> fa) {\n+    static void TRAILING_ZEROS_COUNTByteMaxVectorTests(IntFunction<byte[]> fa) {\n@@ -5341,1 +5341,1 @@\n-                av.lanewise(VectorOperators.CTZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT).intoArray(r, i);\n@@ -5345,1 +5345,1 @@\n-        assertArraysEquals(r, a, ByteMaxVectorTests::CTZ);\n+        assertArraysEquals(r, a, ByteMaxVectorTests::TRAILING_ZEROS_COUNT);\n@@ -5351,1 +5351,1 @@\n-    static void CTZMaskedByteMaxVectorTests(IntFunction<byte[]> fa,\n+    static void TRAILING_ZEROS_COUNTMaskedByteMaxVectorTests(IntFunction<byte[]> fa,\n@@ -5361,1 +5361,1 @@\n-                av.lanewise(VectorOperators.CTZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT, vmask).intoArray(r, i);\n@@ -5365,1 +5365,1 @@\n-        assertArraysEquals(r, a, mask, ByteMaxVectorTests::CTZ);\n+        assertArraysEquals(r, a, mask, ByteMaxVectorTests::TRAILING_ZEROS_COUNT);\n@@ -5370,2 +5370,2 @@\n-    static byte CLZ(byte a) {\n-        return (byte)(CLZ_scalar(a));\n+    static byte LEADING_ZEROS_COUNT(byte a) {\n+        return (byte)(LEADING_ZEROS_COUNT_scalar(a));\n@@ -5377,1 +5377,1 @@\n-    static void CLZByteMaxVectorTests(IntFunction<byte[]> fa) {\n+    static void LEADING_ZEROS_COUNTByteMaxVectorTests(IntFunction<byte[]> fa) {\n@@ -5384,1 +5384,1 @@\n-                av.lanewise(VectorOperators.CLZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT).intoArray(r, i);\n@@ -5388,1 +5388,1 @@\n-        assertArraysEquals(r, a, ByteMaxVectorTests::CLZ);\n+        assertArraysEquals(r, a, ByteMaxVectorTests::LEADING_ZEROS_COUNT);\n@@ -5394,1 +5394,1 @@\n-    static void CLZMaskedByteMaxVectorTests(IntFunction<byte[]> fa,\n+    static void LEADING_ZEROS_COUNTMaskedByteMaxVectorTests(IntFunction<byte[]> fa,\n@@ -5404,1 +5404,1 @@\n-                av.lanewise(VectorOperators.CLZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT, vmask).intoArray(r, i);\n@@ -5408,1 +5408,1 @@\n-        assertArraysEquals(r, a, mask, ByteMaxVectorTests::CLZ);\n+        assertArraysEquals(r, a, mask, ByteMaxVectorTests::LEADING_ZEROS_COUNT);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ByteMaxVectorTests.java","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double128VectorTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double256VectorTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double512VectorTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double64VectorTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/jdk\/incubator\/vector\/DoubleMaxVectorTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float128VectorTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float256VectorTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float512VectorTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float64VectorTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/jdk\/incubator\/vector\/FloatMaxVectorTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1173,1 +1173,1 @@\n-    static int CTZ_scalar(int a) {\n+    static int TRAILING_ZEROS_COUNT_scalar(int a) {\n@@ -1177,1 +1177,1 @@\n-    static int CLZ_scalar(int a) {\n+    static int LEADING_ZEROS_COUNT_scalar(int a) {\n@@ -5287,2 +5287,2 @@\n-    static int CTZ(int a) {\n-        return (int)(CTZ_scalar(a));\n+    static int TRAILING_ZEROS_COUNT(int a) {\n+        return (int)(TRAILING_ZEROS_COUNT_scalar(a));\n@@ -5294,1 +5294,1 @@\n-    static void CTZInt128VectorTests(IntFunction<int[]> fa) {\n+    static void TRAILING_ZEROS_COUNTInt128VectorTests(IntFunction<int[]> fa) {\n@@ -5301,1 +5301,1 @@\n-                av.lanewise(VectorOperators.CTZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT).intoArray(r, i);\n@@ -5305,1 +5305,1 @@\n-        assertArraysEquals(r, a, Int128VectorTests::CTZ);\n+        assertArraysEquals(r, a, Int128VectorTests::TRAILING_ZEROS_COUNT);\n@@ -5311,1 +5311,1 @@\n-    static void CTZMaskedInt128VectorTests(IntFunction<int[]> fa,\n+    static void TRAILING_ZEROS_COUNTMaskedInt128VectorTests(IntFunction<int[]> fa,\n@@ -5321,1 +5321,1 @@\n-                av.lanewise(VectorOperators.CTZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT, vmask).intoArray(r, i);\n@@ -5325,1 +5325,1 @@\n-        assertArraysEquals(r, a, mask, Int128VectorTests::CTZ);\n+        assertArraysEquals(r, a, mask, Int128VectorTests::TRAILING_ZEROS_COUNT);\n@@ -5330,2 +5330,2 @@\n-    static int CLZ(int a) {\n-        return (int)(CLZ_scalar(a));\n+    static int LEADING_ZEROS_COUNT(int a) {\n+        return (int)(LEADING_ZEROS_COUNT_scalar(a));\n@@ -5337,1 +5337,1 @@\n-    static void CLZInt128VectorTests(IntFunction<int[]> fa) {\n+    static void LEADING_ZEROS_COUNTInt128VectorTests(IntFunction<int[]> fa) {\n@@ -5344,1 +5344,1 @@\n-                av.lanewise(VectorOperators.CLZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT).intoArray(r, i);\n@@ -5348,1 +5348,1 @@\n-        assertArraysEquals(r, a, Int128VectorTests::CLZ);\n+        assertArraysEquals(r, a, Int128VectorTests::LEADING_ZEROS_COUNT);\n@@ -5354,1 +5354,1 @@\n-    static void CLZMaskedInt128VectorTests(IntFunction<int[]> fa,\n+    static void LEADING_ZEROS_COUNTMaskedInt128VectorTests(IntFunction<int[]> fa,\n@@ -5364,1 +5364,1 @@\n-                av.lanewise(VectorOperators.CLZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT, vmask).intoArray(r, i);\n@@ -5368,1 +5368,1 @@\n-        assertArraysEquals(r, a, mask, Int128VectorTests::CLZ);\n+        assertArraysEquals(r, a, mask, Int128VectorTests::LEADING_ZEROS_COUNT);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int128VectorTests.java","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1173,1 +1173,1 @@\n-    static int CTZ_scalar(int a) {\n+    static int TRAILING_ZEROS_COUNT_scalar(int a) {\n@@ -1177,1 +1177,1 @@\n-    static int CLZ_scalar(int a) {\n+    static int LEADING_ZEROS_COUNT_scalar(int a) {\n@@ -5287,2 +5287,2 @@\n-    static int CTZ(int a) {\n-        return (int)(CTZ_scalar(a));\n+    static int TRAILING_ZEROS_COUNT(int a) {\n+        return (int)(TRAILING_ZEROS_COUNT_scalar(a));\n@@ -5294,1 +5294,1 @@\n-    static void CTZInt256VectorTests(IntFunction<int[]> fa) {\n+    static void TRAILING_ZEROS_COUNTInt256VectorTests(IntFunction<int[]> fa) {\n@@ -5301,1 +5301,1 @@\n-                av.lanewise(VectorOperators.CTZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT).intoArray(r, i);\n@@ -5305,1 +5305,1 @@\n-        assertArraysEquals(r, a, Int256VectorTests::CTZ);\n+        assertArraysEquals(r, a, Int256VectorTests::TRAILING_ZEROS_COUNT);\n@@ -5311,1 +5311,1 @@\n-    static void CTZMaskedInt256VectorTests(IntFunction<int[]> fa,\n+    static void TRAILING_ZEROS_COUNTMaskedInt256VectorTests(IntFunction<int[]> fa,\n@@ -5321,1 +5321,1 @@\n-                av.lanewise(VectorOperators.CTZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT, vmask).intoArray(r, i);\n@@ -5325,1 +5325,1 @@\n-        assertArraysEquals(r, a, mask, Int256VectorTests::CTZ);\n+        assertArraysEquals(r, a, mask, Int256VectorTests::TRAILING_ZEROS_COUNT);\n@@ -5330,2 +5330,2 @@\n-    static int CLZ(int a) {\n-        return (int)(CLZ_scalar(a));\n+    static int LEADING_ZEROS_COUNT(int a) {\n+        return (int)(LEADING_ZEROS_COUNT_scalar(a));\n@@ -5337,1 +5337,1 @@\n-    static void CLZInt256VectorTests(IntFunction<int[]> fa) {\n+    static void LEADING_ZEROS_COUNTInt256VectorTests(IntFunction<int[]> fa) {\n@@ -5344,1 +5344,1 @@\n-                av.lanewise(VectorOperators.CLZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT).intoArray(r, i);\n@@ -5348,1 +5348,1 @@\n-        assertArraysEquals(r, a, Int256VectorTests::CLZ);\n+        assertArraysEquals(r, a, Int256VectorTests::LEADING_ZEROS_COUNT);\n@@ -5354,1 +5354,1 @@\n-    static void CLZMaskedInt256VectorTests(IntFunction<int[]> fa,\n+    static void LEADING_ZEROS_COUNTMaskedInt256VectorTests(IntFunction<int[]> fa,\n@@ -5364,1 +5364,1 @@\n-                av.lanewise(VectorOperators.CLZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT, vmask).intoArray(r, i);\n@@ -5368,1 +5368,1 @@\n-        assertArraysEquals(r, a, mask, Int256VectorTests::CLZ);\n+        assertArraysEquals(r, a, mask, Int256VectorTests::LEADING_ZEROS_COUNT);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int256VectorTests.java","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1173,1 +1173,1 @@\n-    static int CTZ_scalar(int a) {\n+    static int TRAILING_ZEROS_COUNT_scalar(int a) {\n@@ -1177,1 +1177,1 @@\n-    static int CLZ_scalar(int a) {\n+    static int LEADING_ZEROS_COUNT_scalar(int a) {\n@@ -5287,2 +5287,2 @@\n-    static int CTZ(int a) {\n-        return (int)(CTZ_scalar(a));\n+    static int TRAILING_ZEROS_COUNT(int a) {\n+        return (int)(TRAILING_ZEROS_COUNT_scalar(a));\n@@ -5294,1 +5294,1 @@\n-    static void CTZInt512VectorTests(IntFunction<int[]> fa) {\n+    static void TRAILING_ZEROS_COUNTInt512VectorTests(IntFunction<int[]> fa) {\n@@ -5301,1 +5301,1 @@\n-                av.lanewise(VectorOperators.CTZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT).intoArray(r, i);\n@@ -5305,1 +5305,1 @@\n-        assertArraysEquals(r, a, Int512VectorTests::CTZ);\n+        assertArraysEquals(r, a, Int512VectorTests::TRAILING_ZEROS_COUNT);\n@@ -5311,1 +5311,1 @@\n-    static void CTZMaskedInt512VectorTests(IntFunction<int[]> fa,\n+    static void TRAILING_ZEROS_COUNTMaskedInt512VectorTests(IntFunction<int[]> fa,\n@@ -5321,1 +5321,1 @@\n-                av.lanewise(VectorOperators.CTZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT, vmask).intoArray(r, i);\n@@ -5325,1 +5325,1 @@\n-        assertArraysEquals(r, a, mask, Int512VectorTests::CTZ);\n+        assertArraysEquals(r, a, mask, Int512VectorTests::TRAILING_ZEROS_COUNT);\n@@ -5330,2 +5330,2 @@\n-    static int CLZ(int a) {\n-        return (int)(CLZ_scalar(a));\n+    static int LEADING_ZEROS_COUNT(int a) {\n+        return (int)(LEADING_ZEROS_COUNT_scalar(a));\n@@ -5337,1 +5337,1 @@\n-    static void CLZInt512VectorTests(IntFunction<int[]> fa) {\n+    static void LEADING_ZEROS_COUNTInt512VectorTests(IntFunction<int[]> fa) {\n@@ -5344,1 +5344,1 @@\n-                av.lanewise(VectorOperators.CLZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT).intoArray(r, i);\n@@ -5348,1 +5348,1 @@\n-        assertArraysEquals(r, a, Int512VectorTests::CLZ);\n+        assertArraysEquals(r, a, Int512VectorTests::LEADING_ZEROS_COUNT);\n@@ -5354,1 +5354,1 @@\n-    static void CLZMaskedInt512VectorTests(IntFunction<int[]> fa,\n+    static void LEADING_ZEROS_COUNTMaskedInt512VectorTests(IntFunction<int[]> fa,\n@@ -5364,1 +5364,1 @@\n-                av.lanewise(VectorOperators.CLZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT, vmask).intoArray(r, i);\n@@ -5368,1 +5368,1 @@\n-        assertArraysEquals(r, a, mask, Int512VectorTests::CLZ);\n+        assertArraysEquals(r, a, mask, Int512VectorTests::LEADING_ZEROS_COUNT);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int512VectorTests.java","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1173,1 +1173,1 @@\n-    static int CTZ_scalar(int a) {\n+    static int TRAILING_ZEROS_COUNT_scalar(int a) {\n@@ -1177,1 +1177,1 @@\n-    static int CLZ_scalar(int a) {\n+    static int LEADING_ZEROS_COUNT_scalar(int a) {\n@@ -5287,2 +5287,2 @@\n-    static int CTZ(int a) {\n-        return (int)(CTZ_scalar(a));\n+    static int TRAILING_ZEROS_COUNT(int a) {\n+        return (int)(TRAILING_ZEROS_COUNT_scalar(a));\n@@ -5294,1 +5294,1 @@\n-    static void CTZInt64VectorTests(IntFunction<int[]> fa) {\n+    static void TRAILING_ZEROS_COUNTInt64VectorTests(IntFunction<int[]> fa) {\n@@ -5301,1 +5301,1 @@\n-                av.lanewise(VectorOperators.CTZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT).intoArray(r, i);\n@@ -5305,1 +5305,1 @@\n-        assertArraysEquals(r, a, Int64VectorTests::CTZ);\n+        assertArraysEquals(r, a, Int64VectorTests::TRAILING_ZEROS_COUNT);\n@@ -5311,1 +5311,1 @@\n-    static void CTZMaskedInt64VectorTests(IntFunction<int[]> fa,\n+    static void TRAILING_ZEROS_COUNTMaskedInt64VectorTests(IntFunction<int[]> fa,\n@@ -5321,1 +5321,1 @@\n-                av.lanewise(VectorOperators.CTZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT, vmask).intoArray(r, i);\n@@ -5325,1 +5325,1 @@\n-        assertArraysEquals(r, a, mask, Int64VectorTests::CTZ);\n+        assertArraysEquals(r, a, mask, Int64VectorTests::TRAILING_ZEROS_COUNT);\n@@ -5330,2 +5330,2 @@\n-    static int CLZ(int a) {\n-        return (int)(CLZ_scalar(a));\n+    static int LEADING_ZEROS_COUNT(int a) {\n+        return (int)(LEADING_ZEROS_COUNT_scalar(a));\n@@ -5337,1 +5337,1 @@\n-    static void CLZInt64VectorTests(IntFunction<int[]> fa) {\n+    static void LEADING_ZEROS_COUNTInt64VectorTests(IntFunction<int[]> fa) {\n@@ -5344,1 +5344,1 @@\n-                av.lanewise(VectorOperators.CLZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT).intoArray(r, i);\n@@ -5348,1 +5348,1 @@\n-        assertArraysEquals(r, a, Int64VectorTests::CLZ);\n+        assertArraysEquals(r, a, Int64VectorTests::LEADING_ZEROS_COUNT);\n@@ -5354,1 +5354,1 @@\n-    static void CLZMaskedInt64VectorTests(IntFunction<int[]> fa,\n+    static void LEADING_ZEROS_COUNTMaskedInt64VectorTests(IntFunction<int[]> fa,\n@@ -5364,1 +5364,1 @@\n-                av.lanewise(VectorOperators.CLZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT, vmask).intoArray(r, i);\n@@ -5368,1 +5368,1 @@\n-        assertArraysEquals(r, a, mask, Int64VectorTests::CLZ);\n+        assertArraysEquals(r, a, mask, Int64VectorTests::LEADING_ZEROS_COUNT);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int64VectorTests.java","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1178,1 +1178,1 @@\n-    static int CTZ_scalar(int a) {\n+    static int TRAILING_ZEROS_COUNT_scalar(int a) {\n@@ -1182,1 +1182,1 @@\n-    static int CLZ_scalar(int a) {\n+    static int LEADING_ZEROS_COUNT_scalar(int a) {\n@@ -5292,2 +5292,2 @@\n-    static int CTZ(int a) {\n-        return (int)(CTZ_scalar(a));\n+    static int TRAILING_ZEROS_COUNT(int a) {\n+        return (int)(TRAILING_ZEROS_COUNT_scalar(a));\n@@ -5299,1 +5299,1 @@\n-    static void CTZIntMaxVectorTests(IntFunction<int[]> fa) {\n+    static void TRAILING_ZEROS_COUNTIntMaxVectorTests(IntFunction<int[]> fa) {\n@@ -5306,1 +5306,1 @@\n-                av.lanewise(VectorOperators.CTZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT).intoArray(r, i);\n@@ -5310,1 +5310,1 @@\n-        assertArraysEquals(r, a, IntMaxVectorTests::CTZ);\n+        assertArraysEquals(r, a, IntMaxVectorTests::TRAILING_ZEROS_COUNT);\n@@ -5316,1 +5316,1 @@\n-    static void CTZMaskedIntMaxVectorTests(IntFunction<int[]> fa,\n+    static void TRAILING_ZEROS_COUNTMaskedIntMaxVectorTests(IntFunction<int[]> fa,\n@@ -5326,1 +5326,1 @@\n-                av.lanewise(VectorOperators.CTZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT, vmask).intoArray(r, i);\n@@ -5330,1 +5330,1 @@\n-        assertArraysEquals(r, a, mask, IntMaxVectorTests::CTZ);\n+        assertArraysEquals(r, a, mask, IntMaxVectorTests::TRAILING_ZEROS_COUNT);\n@@ -5335,2 +5335,2 @@\n-    static int CLZ(int a) {\n-        return (int)(CLZ_scalar(a));\n+    static int LEADING_ZEROS_COUNT(int a) {\n+        return (int)(LEADING_ZEROS_COUNT_scalar(a));\n@@ -5342,1 +5342,1 @@\n-    static void CLZIntMaxVectorTests(IntFunction<int[]> fa) {\n+    static void LEADING_ZEROS_COUNTIntMaxVectorTests(IntFunction<int[]> fa) {\n@@ -5349,1 +5349,1 @@\n-                av.lanewise(VectorOperators.CLZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT).intoArray(r, i);\n@@ -5353,1 +5353,1 @@\n-        assertArraysEquals(r, a, IntMaxVectorTests::CLZ);\n+        assertArraysEquals(r, a, IntMaxVectorTests::LEADING_ZEROS_COUNT);\n@@ -5359,1 +5359,1 @@\n-    static void CLZMaskedIntMaxVectorTests(IntFunction<int[]> fa,\n+    static void LEADING_ZEROS_COUNTMaskedIntMaxVectorTests(IntFunction<int[]> fa,\n@@ -5369,1 +5369,1 @@\n-                av.lanewise(VectorOperators.CLZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT, vmask).intoArray(r, i);\n@@ -5373,1 +5373,1 @@\n-        assertArraysEquals(r, a, mask, IntMaxVectorTests::CLZ);\n+        assertArraysEquals(r, a, mask, IntMaxVectorTests::LEADING_ZEROS_COUNT);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/IntMaxVectorTests.java","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1195,1 +1195,1 @@\n-    static long CTZ_scalar(long a) {\n+    static long TRAILING_ZEROS_COUNT_scalar(long a) {\n@@ -1199,1 +1199,1 @@\n-    static long CLZ_scalar(long a) {\n+    static long LEADING_ZEROS_COUNT_scalar(long a) {\n@@ -5237,2 +5237,2 @@\n-    static long CTZ(long a) {\n-        return (long)(CTZ_scalar(a));\n+    static long TRAILING_ZEROS_COUNT(long a) {\n+        return (long)(TRAILING_ZEROS_COUNT_scalar(a));\n@@ -5244,1 +5244,1 @@\n-    static void CTZLong128VectorTests(IntFunction<long[]> fa) {\n+    static void TRAILING_ZEROS_COUNTLong128VectorTests(IntFunction<long[]> fa) {\n@@ -5251,1 +5251,1 @@\n-                av.lanewise(VectorOperators.CTZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT).intoArray(r, i);\n@@ -5255,1 +5255,1 @@\n-        assertArraysEquals(r, a, Long128VectorTests::CTZ);\n+        assertArraysEquals(r, a, Long128VectorTests::TRAILING_ZEROS_COUNT);\n@@ -5261,1 +5261,1 @@\n-    static void CTZMaskedLong128VectorTests(IntFunction<long[]> fa,\n+    static void TRAILING_ZEROS_COUNTMaskedLong128VectorTests(IntFunction<long[]> fa,\n@@ -5271,1 +5271,1 @@\n-                av.lanewise(VectorOperators.CTZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT, vmask).intoArray(r, i);\n@@ -5275,1 +5275,1 @@\n-        assertArraysEquals(r, a, mask, Long128VectorTests::CTZ);\n+        assertArraysEquals(r, a, mask, Long128VectorTests::TRAILING_ZEROS_COUNT);\n@@ -5280,2 +5280,2 @@\n-    static long CLZ(long a) {\n-        return (long)(CLZ_scalar(a));\n+    static long LEADING_ZEROS_COUNT(long a) {\n+        return (long)(LEADING_ZEROS_COUNT_scalar(a));\n@@ -5287,1 +5287,1 @@\n-    static void CLZLong128VectorTests(IntFunction<long[]> fa) {\n+    static void LEADING_ZEROS_COUNTLong128VectorTests(IntFunction<long[]> fa) {\n@@ -5294,1 +5294,1 @@\n-                av.lanewise(VectorOperators.CLZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT).intoArray(r, i);\n@@ -5298,1 +5298,1 @@\n-        assertArraysEquals(r, a, Long128VectorTests::CLZ);\n+        assertArraysEquals(r, a, Long128VectorTests::LEADING_ZEROS_COUNT);\n@@ -5304,1 +5304,1 @@\n-    static void CLZMaskedLong128VectorTests(IntFunction<long[]> fa,\n+    static void LEADING_ZEROS_COUNTMaskedLong128VectorTests(IntFunction<long[]> fa,\n@@ -5314,1 +5314,1 @@\n-                av.lanewise(VectorOperators.CLZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT, vmask).intoArray(r, i);\n@@ -5318,1 +5318,1 @@\n-        assertArraysEquals(r, a, mask, Long128VectorTests::CLZ);\n+        assertArraysEquals(r, a, mask, Long128VectorTests::LEADING_ZEROS_COUNT);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long128VectorTests.java","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1195,1 +1195,1 @@\n-    static long CTZ_scalar(long a) {\n+    static long TRAILING_ZEROS_COUNT_scalar(long a) {\n@@ -1199,1 +1199,1 @@\n-    static long CLZ_scalar(long a) {\n+    static long LEADING_ZEROS_COUNT_scalar(long a) {\n@@ -5237,2 +5237,2 @@\n-    static long CTZ(long a) {\n-        return (long)(CTZ_scalar(a));\n+    static long TRAILING_ZEROS_COUNT(long a) {\n+        return (long)(TRAILING_ZEROS_COUNT_scalar(a));\n@@ -5244,1 +5244,1 @@\n-    static void CTZLong256VectorTests(IntFunction<long[]> fa) {\n+    static void TRAILING_ZEROS_COUNTLong256VectorTests(IntFunction<long[]> fa) {\n@@ -5251,1 +5251,1 @@\n-                av.lanewise(VectorOperators.CTZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT).intoArray(r, i);\n@@ -5255,1 +5255,1 @@\n-        assertArraysEquals(r, a, Long256VectorTests::CTZ);\n+        assertArraysEquals(r, a, Long256VectorTests::TRAILING_ZEROS_COUNT);\n@@ -5261,1 +5261,1 @@\n-    static void CTZMaskedLong256VectorTests(IntFunction<long[]> fa,\n+    static void TRAILING_ZEROS_COUNTMaskedLong256VectorTests(IntFunction<long[]> fa,\n@@ -5271,1 +5271,1 @@\n-                av.lanewise(VectorOperators.CTZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT, vmask).intoArray(r, i);\n@@ -5275,1 +5275,1 @@\n-        assertArraysEquals(r, a, mask, Long256VectorTests::CTZ);\n+        assertArraysEquals(r, a, mask, Long256VectorTests::TRAILING_ZEROS_COUNT);\n@@ -5280,2 +5280,2 @@\n-    static long CLZ(long a) {\n-        return (long)(CLZ_scalar(a));\n+    static long LEADING_ZEROS_COUNT(long a) {\n+        return (long)(LEADING_ZEROS_COUNT_scalar(a));\n@@ -5287,1 +5287,1 @@\n-    static void CLZLong256VectorTests(IntFunction<long[]> fa) {\n+    static void LEADING_ZEROS_COUNTLong256VectorTests(IntFunction<long[]> fa) {\n@@ -5294,1 +5294,1 @@\n-                av.lanewise(VectorOperators.CLZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT).intoArray(r, i);\n@@ -5298,1 +5298,1 @@\n-        assertArraysEquals(r, a, Long256VectorTests::CLZ);\n+        assertArraysEquals(r, a, Long256VectorTests::LEADING_ZEROS_COUNT);\n@@ -5304,1 +5304,1 @@\n-    static void CLZMaskedLong256VectorTests(IntFunction<long[]> fa,\n+    static void LEADING_ZEROS_COUNTMaskedLong256VectorTests(IntFunction<long[]> fa,\n@@ -5314,1 +5314,1 @@\n-                av.lanewise(VectorOperators.CLZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT, vmask).intoArray(r, i);\n@@ -5318,1 +5318,1 @@\n-        assertArraysEquals(r, a, mask, Long256VectorTests::CLZ);\n+        assertArraysEquals(r, a, mask, Long256VectorTests::LEADING_ZEROS_COUNT);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long256VectorTests.java","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1195,1 +1195,1 @@\n-    static long CTZ_scalar(long a) {\n+    static long TRAILING_ZEROS_COUNT_scalar(long a) {\n@@ -1199,1 +1199,1 @@\n-    static long CLZ_scalar(long a) {\n+    static long LEADING_ZEROS_COUNT_scalar(long a) {\n@@ -5237,2 +5237,2 @@\n-    static long CTZ(long a) {\n-        return (long)(CTZ_scalar(a));\n+    static long TRAILING_ZEROS_COUNT(long a) {\n+        return (long)(TRAILING_ZEROS_COUNT_scalar(a));\n@@ -5244,1 +5244,1 @@\n-    static void CTZLong512VectorTests(IntFunction<long[]> fa) {\n+    static void TRAILING_ZEROS_COUNTLong512VectorTests(IntFunction<long[]> fa) {\n@@ -5251,1 +5251,1 @@\n-                av.lanewise(VectorOperators.CTZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT).intoArray(r, i);\n@@ -5255,1 +5255,1 @@\n-        assertArraysEquals(r, a, Long512VectorTests::CTZ);\n+        assertArraysEquals(r, a, Long512VectorTests::TRAILING_ZEROS_COUNT);\n@@ -5261,1 +5261,1 @@\n-    static void CTZMaskedLong512VectorTests(IntFunction<long[]> fa,\n+    static void TRAILING_ZEROS_COUNTMaskedLong512VectorTests(IntFunction<long[]> fa,\n@@ -5271,1 +5271,1 @@\n-                av.lanewise(VectorOperators.CTZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT, vmask).intoArray(r, i);\n@@ -5275,1 +5275,1 @@\n-        assertArraysEquals(r, a, mask, Long512VectorTests::CTZ);\n+        assertArraysEquals(r, a, mask, Long512VectorTests::TRAILING_ZEROS_COUNT);\n@@ -5280,2 +5280,2 @@\n-    static long CLZ(long a) {\n-        return (long)(CLZ_scalar(a));\n+    static long LEADING_ZEROS_COUNT(long a) {\n+        return (long)(LEADING_ZEROS_COUNT_scalar(a));\n@@ -5287,1 +5287,1 @@\n-    static void CLZLong512VectorTests(IntFunction<long[]> fa) {\n+    static void LEADING_ZEROS_COUNTLong512VectorTests(IntFunction<long[]> fa) {\n@@ -5294,1 +5294,1 @@\n-                av.lanewise(VectorOperators.CLZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT).intoArray(r, i);\n@@ -5298,1 +5298,1 @@\n-        assertArraysEquals(r, a, Long512VectorTests::CLZ);\n+        assertArraysEquals(r, a, Long512VectorTests::LEADING_ZEROS_COUNT);\n@@ -5304,1 +5304,1 @@\n-    static void CLZMaskedLong512VectorTests(IntFunction<long[]> fa,\n+    static void LEADING_ZEROS_COUNTMaskedLong512VectorTests(IntFunction<long[]> fa,\n@@ -5314,1 +5314,1 @@\n-                av.lanewise(VectorOperators.CLZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT, vmask).intoArray(r, i);\n@@ -5318,1 +5318,1 @@\n-        assertArraysEquals(r, a, mask, Long512VectorTests::CLZ);\n+        assertArraysEquals(r, a, mask, Long512VectorTests::LEADING_ZEROS_COUNT);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long512VectorTests.java","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1195,1 +1195,1 @@\n-    static long CTZ_scalar(long a) {\n+    static long TRAILING_ZEROS_COUNT_scalar(long a) {\n@@ -1199,1 +1199,1 @@\n-    static long CLZ_scalar(long a) {\n+    static long LEADING_ZEROS_COUNT_scalar(long a) {\n@@ -5237,2 +5237,2 @@\n-    static long CTZ(long a) {\n-        return (long)(CTZ_scalar(a));\n+    static long TRAILING_ZEROS_COUNT(long a) {\n+        return (long)(TRAILING_ZEROS_COUNT_scalar(a));\n@@ -5244,1 +5244,1 @@\n-    static void CTZLong64VectorTests(IntFunction<long[]> fa) {\n+    static void TRAILING_ZEROS_COUNTLong64VectorTests(IntFunction<long[]> fa) {\n@@ -5251,1 +5251,1 @@\n-                av.lanewise(VectorOperators.CTZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT).intoArray(r, i);\n@@ -5255,1 +5255,1 @@\n-        assertArraysEquals(r, a, Long64VectorTests::CTZ);\n+        assertArraysEquals(r, a, Long64VectorTests::TRAILING_ZEROS_COUNT);\n@@ -5261,1 +5261,1 @@\n-    static void CTZMaskedLong64VectorTests(IntFunction<long[]> fa,\n+    static void TRAILING_ZEROS_COUNTMaskedLong64VectorTests(IntFunction<long[]> fa,\n@@ -5271,1 +5271,1 @@\n-                av.lanewise(VectorOperators.CTZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT, vmask).intoArray(r, i);\n@@ -5275,1 +5275,1 @@\n-        assertArraysEquals(r, a, mask, Long64VectorTests::CTZ);\n+        assertArraysEquals(r, a, mask, Long64VectorTests::TRAILING_ZEROS_COUNT);\n@@ -5280,2 +5280,2 @@\n-    static long CLZ(long a) {\n-        return (long)(CLZ_scalar(a));\n+    static long LEADING_ZEROS_COUNT(long a) {\n+        return (long)(LEADING_ZEROS_COUNT_scalar(a));\n@@ -5287,1 +5287,1 @@\n-    static void CLZLong64VectorTests(IntFunction<long[]> fa) {\n+    static void LEADING_ZEROS_COUNTLong64VectorTests(IntFunction<long[]> fa) {\n@@ -5294,1 +5294,1 @@\n-                av.lanewise(VectorOperators.CLZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT).intoArray(r, i);\n@@ -5298,1 +5298,1 @@\n-        assertArraysEquals(r, a, Long64VectorTests::CLZ);\n+        assertArraysEquals(r, a, Long64VectorTests::LEADING_ZEROS_COUNT);\n@@ -5304,1 +5304,1 @@\n-    static void CLZMaskedLong64VectorTests(IntFunction<long[]> fa,\n+    static void LEADING_ZEROS_COUNTMaskedLong64VectorTests(IntFunction<long[]> fa,\n@@ -5314,1 +5314,1 @@\n-                av.lanewise(VectorOperators.CLZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT, vmask).intoArray(r, i);\n@@ -5318,1 +5318,1 @@\n-        assertArraysEquals(r, a, mask, Long64VectorTests::CLZ);\n+        assertArraysEquals(r, a, mask, Long64VectorTests::LEADING_ZEROS_COUNT);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long64VectorTests.java","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1200,1 +1200,1 @@\n-    static long CTZ_scalar(long a) {\n+    static long TRAILING_ZEROS_COUNT_scalar(long a) {\n@@ -1204,1 +1204,1 @@\n-    static long CLZ_scalar(long a) {\n+    static long LEADING_ZEROS_COUNT_scalar(long a) {\n@@ -5242,2 +5242,2 @@\n-    static long CTZ(long a) {\n-        return (long)(CTZ_scalar(a));\n+    static long TRAILING_ZEROS_COUNT(long a) {\n+        return (long)(TRAILING_ZEROS_COUNT_scalar(a));\n@@ -5249,1 +5249,1 @@\n-    static void CTZLongMaxVectorTests(IntFunction<long[]> fa) {\n+    static void TRAILING_ZEROS_COUNTLongMaxVectorTests(IntFunction<long[]> fa) {\n@@ -5256,1 +5256,1 @@\n-                av.lanewise(VectorOperators.CTZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT).intoArray(r, i);\n@@ -5260,1 +5260,1 @@\n-        assertArraysEquals(r, a, LongMaxVectorTests::CTZ);\n+        assertArraysEquals(r, a, LongMaxVectorTests::TRAILING_ZEROS_COUNT);\n@@ -5266,1 +5266,1 @@\n-    static void CTZMaskedLongMaxVectorTests(IntFunction<long[]> fa,\n+    static void TRAILING_ZEROS_COUNTMaskedLongMaxVectorTests(IntFunction<long[]> fa,\n@@ -5276,1 +5276,1 @@\n-                av.lanewise(VectorOperators.CTZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT, vmask).intoArray(r, i);\n@@ -5280,1 +5280,1 @@\n-        assertArraysEquals(r, a, mask, LongMaxVectorTests::CTZ);\n+        assertArraysEquals(r, a, mask, LongMaxVectorTests::TRAILING_ZEROS_COUNT);\n@@ -5285,2 +5285,2 @@\n-    static long CLZ(long a) {\n-        return (long)(CLZ_scalar(a));\n+    static long LEADING_ZEROS_COUNT(long a) {\n+        return (long)(LEADING_ZEROS_COUNT_scalar(a));\n@@ -5292,1 +5292,1 @@\n-    static void CLZLongMaxVectorTests(IntFunction<long[]> fa) {\n+    static void LEADING_ZEROS_COUNTLongMaxVectorTests(IntFunction<long[]> fa) {\n@@ -5299,1 +5299,1 @@\n-                av.lanewise(VectorOperators.CLZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT).intoArray(r, i);\n@@ -5303,1 +5303,1 @@\n-        assertArraysEquals(r, a, LongMaxVectorTests::CLZ);\n+        assertArraysEquals(r, a, LongMaxVectorTests::LEADING_ZEROS_COUNT);\n@@ -5309,1 +5309,1 @@\n-    static void CLZMaskedLongMaxVectorTests(IntFunction<long[]> fa,\n+    static void LEADING_ZEROS_COUNTMaskedLongMaxVectorTests(IntFunction<long[]> fa,\n@@ -5319,1 +5319,1 @@\n-                av.lanewise(VectorOperators.CLZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT, vmask).intoArray(r, i);\n@@ -5323,1 +5323,1 @@\n-        assertArraysEquals(r, a, mask, LongMaxVectorTests::CLZ);\n+        assertArraysEquals(r, a, mask, LongMaxVectorTests::LEADING_ZEROS_COUNT);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/LongMaxVectorTests.java","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1203,1 +1203,1 @@\n-    static short CTZ_scalar(short a) {\n+    static short TRAILING_ZEROS_COUNT_scalar(short a) {\n@@ -1207,1 +1207,1 @@\n-    static short CLZ_scalar(short a) {\n+    static short LEADING_ZEROS_COUNT_scalar(short a) {\n@@ -5312,2 +5312,2 @@\n-    static short CTZ(short a) {\n-        return (short)(CTZ_scalar(a));\n+    static short TRAILING_ZEROS_COUNT(short a) {\n+        return (short)(TRAILING_ZEROS_COUNT_scalar(a));\n@@ -5319,1 +5319,1 @@\n-    static void CTZShort128VectorTests(IntFunction<short[]> fa) {\n+    static void TRAILING_ZEROS_COUNTShort128VectorTests(IntFunction<short[]> fa) {\n@@ -5326,1 +5326,1 @@\n-                av.lanewise(VectorOperators.CTZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT).intoArray(r, i);\n@@ -5330,1 +5330,1 @@\n-        assertArraysEquals(r, a, Short128VectorTests::CTZ);\n+        assertArraysEquals(r, a, Short128VectorTests::TRAILING_ZEROS_COUNT);\n@@ -5336,1 +5336,1 @@\n-    static void CTZMaskedShort128VectorTests(IntFunction<short[]> fa,\n+    static void TRAILING_ZEROS_COUNTMaskedShort128VectorTests(IntFunction<short[]> fa,\n@@ -5346,1 +5346,1 @@\n-                av.lanewise(VectorOperators.CTZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT, vmask).intoArray(r, i);\n@@ -5350,1 +5350,1 @@\n-        assertArraysEquals(r, a, mask, Short128VectorTests::CTZ);\n+        assertArraysEquals(r, a, mask, Short128VectorTests::TRAILING_ZEROS_COUNT);\n@@ -5355,2 +5355,2 @@\n-    static short CLZ(short a) {\n-        return (short)(CLZ_scalar(a));\n+    static short LEADING_ZEROS_COUNT(short a) {\n+        return (short)(LEADING_ZEROS_COUNT_scalar(a));\n@@ -5362,1 +5362,1 @@\n-    static void CLZShort128VectorTests(IntFunction<short[]> fa) {\n+    static void LEADING_ZEROS_COUNTShort128VectorTests(IntFunction<short[]> fa) {\n@@ -5369,1 +5369,1 @@\n-                av.lanewise(VectorOperators.CLZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT).intoArray(r, i);\n@@ -5373,1 +5373,1 @@\n-        assertArraysEquals(r, a, Short128VectorTests::CLZ);\n+        assertArraysEquals(r, a, Short128VectorTests::LEADING_ZEROS_COUNT);\n@@ -5379,1 +5379,1 @@\n-    static void CLZMaskedShort128VectorTests(IntFunction<short[]> fa,\n+    static void LEADING_ZEROS_COUNTMaskedShort128VectorTests(IntFunction<short[]> fa,\n@@ -5389,1 +5389,1 @@\n-                av.lanewise(VectorOperators.CLZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT, vmask).intoArray(r, i);\n@@ -5393,1 +5393,1 @@\n-        assertArraysEquals(r, a, mask, Short128VectorTests::CLZ);\n+        assertArraysEquals(r, a, mask, Short128VectorTests::LEADING_ZEROS_COUNT);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short128VectorTests.java","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1203,1 +1203,1 @@\n-    static short CTZ_scalar(short a) {\n+    static short TRAILING_ZEROS_COUNT_scalar(short a) {\n@@ -1207,1 +1207,1 @@\n-    static short CLZ_scalar(short a) {\n+    static short LEADING_ZEROS_COUNT_scalar(short a) {\n@@ -5312,2 +5312,2 @@\n-    static short CTZ(short a) {\n-        return (short)(CTZ_scalar(a));\n+    static short TRAILING_ZEROS_COUNT(short a) {\n+        return (short)(TRAILING_ZEROS_COUNT_scalar(a));\n@@ -5319,1 +5319,1 @@\n-    static void CTZShort256VectorTests(IntFunction<short[]> fa) {\n+    static void TRAILING_ZEROS_COUNTShort256VectorTests(IntFunction<short[]> fa) {\n@@ -5326,1 +5326,1 @@\n-                av.lanewise(VectorOperators.CTZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT).intoArray(r, i);\n@@ -5330,1 +5330,1 @@\n-        assertArraysEquals(r, a, Short256VectorTests::CTZ);\n+        assertArraysEquals(r, a, Short256VectorTests::TRAILING_ZEROS_COUNT);\n@@ -5336,1 +5336,1 @@\n-    static void CTZMaskedShort256VectorTests(IntFunction<short[]> fa,\n+    static void TRAILING_ZEROS_COUNTMaskedShort256VectorTests(IntFunction<short[]> fa,\n@@ -5346,1 +5346,1 @@\n-                av.lanewise(VectorOperators.CTZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT, vmask).intoArray(r, i);\n@@ -5350,1 +5350,1 @@\n-        assertArraysEquals(r, a, mask, Short256VectorTests::CTZ);\n+        assertArraysEquals(r, a, mask, Short256VectorTests::TRAILING_ZEROS_COUNT);\n@@ -5355,2 +5355,2 @@\n-    static short CLZ(short a) {\n-        return (short)(CLZ_scalar(a));\n+    static short LEADING_ZEROS_COUNT(short a) {\n+        return (short)(LEADING_ZEROS_COUNT_scalar(a));\n@@ -5362,1 +5362,1 @@\n-    static void CLZShort256VectorTests(IntFunction<short[]> fa) {\n+    static void LEADING_ZEROS_COUNTShort256VectorTests(IntFunction<short[]> fa) {\n@@ -5369,1 +5369,1 @@\n-                av.lanewise(VectorOperators.CLZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT).intoArray(r, i);\n@@ -5373,1 +5373,1 @@\n-        assertArraysEquals(r, a, Short256VectorTests::CLZ);\n+        assertArraysEquals(r, a, Short256VectorTests::LEADING_ZEROS_COUNT);\n@@ -5379,1 +5379,1 @@\n-    static void CLZMaskedShort256VectorTests(IntFunction<short[]> fa,\n+    static void LEADING_ZEROS_COUNTMaskedShort256VectorTests(IntFunction<short[]> fa,\n@@ -5389,1 +5389,1 @@\n-                av.lanewise(VectorOperators.CLZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT, vmask).intoArray(r, i);\n@@ -5393,1 +5393,1 @@\n-        assertArraysEquals(r, a, mask, Short256VectorTests::CLZ);\n+        assertArraysEquals(r, a, mask, Short256VectorTests::LEADING_ZEROS_COUNT);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short256VectorTests.java","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1203,1 +1203,1 @@\n-    static short CTZ_scalar(short a) {\n+    static short TRAILING_ZEROS_COUNT_scalar(short a) {\n@@ -1207,1 +1207,1 @@\n-    static short CLZ_scalar(short a) {\n+    static short LEADING_ZEROS_COUNT_scalar(short a) {\n@@ -5312,2 +5312,2 @@\n-    static short CTZ(short a) {\n-        return (short)(CTZ_scalar(a));\n+    static short TRAILING_ZEROS_COUNT(short a) {\n+        return (short)(TRAILING_ZEROS_COUNT_scalar(a));\n@@ -5319,1 +5319,1 @@\n-    static void CTZShort512VectorTests(IntFunction<short[]> fa) {\n+    static void TRAILING_ZEROS_COUNTShort512VectorTests(IntFunction<short[]> fa) {\n@@ -5326,1 +5326,1 @@\n-                av.lanewise(VectorOperators.CTZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT).intoArray(r, i);\n@@ -5330,1 +5330,1 @@\n-        assertArraysEquals(r, a, Short512VectorTests::CTZ);\n+        assertArraysEquals(r, a, Short512VectorTests::TRAILING_ZEROS_COUNT);\n@@ -5336,1 +5336,1 @@\n-    static void CTZMaskedShort512VectorTests(IntFunction<short[]> fa,\n+    static void TRAILING_ZEROS_COUNTMaskedShort512VectorTests(IntFunction<short[]> fa,\n@@ -5346,1 +5346,1 @@\n-                av.lanewise(VectorOperators.CTZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT, vmask).intoArray(r, i);\n@@ -5350,1 +5350,1 @@\n-        assertArraysEquals(r, a, mask, Short512VectorTests::CTZ);\n+        assertArraysEquals(r, a, mask, Short512VectorTests::TRAILING_ZEROS_COUNT);\n@@ -5355,2 +5355,2 @@\n-    static short CLZ(short a) {\n-        return (short)(CLZ_scalar(a));\n+    static short LEADING_ZEROS_COUNT(short a) {\n+        return (short)(LEADING_ZEROS_COUNT_scalar(a));\n@@ -5362,1 +5362,1 @@\n-    static void CLZShort512VectorTests(IntFunction<short[]> fa) {\n+    static void LEADING_ZEROS_COUNTShort512VectorTests(IntFunction<short[]> fa) {\n@@ -5369,1 +5369,1 @@\n-                av.lanewise(VectorOperators.CLZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT).intoArray(r, i);\n@@ -5373,1 +5373,1 @@\n-        assertArraysEquals(r, a, Short512VectorTests::CLZ);\n+        assertArraysEquals(r, a, Short512VectorTests::LEADING_ZEROS_COUNT);\n@@ -5379,1 +5379,1 @@\n-    static void CLZMaskedShort512VectorTests(IntFunction<short[]> fa,\n+    static void LEADING_ZEROS_COUNTMaskedShort512VectorTests(IntFunction<short[]> fa,\n@@ -5389,1 +5389,1 @@\n-                av.lanewise(VectorOperators.CLZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT, vmask).intoArray(r, i);\n@@ -5393,1 +5393,1 @@\n-        assertArraysEquals(r, a, mask, Short512VectorTests::CLZ);\n+        assertArraysEquals(r, a, mask, Short512VectorTests::LEADING_ZEROS_COUNT);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short512VectorTests.java","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1203,1 +1203,1 @@\n-    static short CTZ_scalar(short a) {\n+    static short TRAILING_ZEROS_COUNT_scalar(short a) {\n@@ -1207,1 +1207,1 @@\n-    static short CLZ_scalar(short a) {\n+    static short LEADING_ZEROS_COUNT_scalar(short a) {\n@@ -5312,2 +5312,2 @@\n-    static short CTZ(short a) {\n-        return (short)(CTZ_scalar(a));\n+    static short TRAILING_ZEROS_COUNT(short a) {\n+        return (short)(TRAILING_ZEROS_COUNT_scalar(a));\n@@ -5319,1 +5319,1 @@\n-    static void CTZShort64VectorTests(IntFunction<short[]> fa) {\n+    static void TRAILING_ZEROS_COUNTShort64VectorTests(IntFunction<short[]> fa) {\n@@ -5326,1 +5326,1 @@\n-                av.lanewise(VectorOperators.CTZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT).intoArray(r, i);\n@@ -5330,1 +5330,1 @@\n-        assertArraysEquals(r, a, Short64VectorTests::CTZ);\n+        assertArraysEquals(r, a, Short64VectorTests::TRAILING_ZEROS_COUNT);\n@@ -5336,1 +5336,1 @@\n-    static void CTZMaskedShort64VectorTests(IntFunction<short[]> fa,\n+    static void TRAILING_ZEROS_COUNTMaskedShort64VectorTests(IntFunction<short[]> fa,\n@@ -5346,1 +5346,1 @@\n-                av.lanewise(VectorOperators.CTZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT, vmask).intoArray(r, i);\n@@ -5350,1 +5350,1 @@\n-        assertArraysEquals(r, a, mask, Short64VectorTests::CTZ);\n+        assertArraysEquals(r, a, mask, Short64VectorTests::TRAILING_ZEROS_COUNT);\n@@ -5355,2 +5355,2 @@\n-    static short CLZ(short a) {\n-        return (short)(CLZ_scalar(a));\n+    static short LEADING_ZEROS_COUNT(short a) {\n+        return (short)(LEADING_ZEROS_COUNT_scalar(a));\n@@ -5362,1 +5362,1 @@\n-    static void CLZShort64VectorTests(IntFunction<short[]> fa) {\n+    static void LEADING_ZEROS_COUNTShort64VectorTests(IntFunction<short[]> fa) {\n@@ -5369,1 +5369,1 @@\n-                av.lanewise(VectorOperators.CLZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT).intoArray(r, i);\n@@ -5373,1 +5373,1 @@\n-        assertArraysEquals(r, a, Short64VectorTests::CLZ);\n+        assertArraysEquals(r, a, Short64VectorTests::LEADING_ZEROS_COUNT);\n@@ -5379,1 +5379,1 @@\n-    static void CLZMaskedShort64VectorTests(IntFunction<short[]> fa,\n+    static void LEADING_ZEROS_COUNTMaskedShort64VectorTests(IntFunction<short[]> fa,\n@@ -5389,1 +5389,1 @@\n-                av.lanewise(VectorOperators.CLZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT, vmask).intoArray(r, i);\n@@ -5393,1 +5393,1 @@\n-        assertArraysEquals(r, a, mask, Short64VectorTests::CLZ);\n+        assertArraysEquals(r, a, mask, Short64VectorTests::LEADING_ZEROS_COUNT);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short64VectorTests.java","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1208,1 +1208,1 @@\n-    static short CTZ_scalar(short a) {\n+    static short TRAILING_ZEROS_COUNT_scalar(short a) {\n@@ -1212,1 +1212,1 @@\n-    static short CLZ_scalar(short a) {\n+    static short LEADING_ZEROS_COUNT_scalar(short a) {\n@@ -5317,2 +5317,2 @@\n-    static short CTZ(short a) {\n-        return (short)(CTZ_scalar(a));\n+    static short TRAILING_ZEROS_COUNT(short a) {\n+        return (short)(TRAILING_ZEROS_COUNT_scalar(a));\n@@ -5324,1 +5324,1 @@\n-    static void CTZShortMaxVectorTests(IntFunction<short[]> fa) {\n+    static void TRAILING_ZEROS_COUNTShortMaxVectorTests(IntFunction<short[]> fa) {\n@@ -5331,1 +5331,1 @@\n-                av.lanewise(VectorOperators.CTZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT).intoArray(r, i);\n@@ -5335,1 +5335,1 @@\n-        assertArraysEquals(r, a, ShortMaxVectorTests::CTZ);\n+        assertArraysEquals(r, a, ShortMaxVectorTests::TRAILING_ZEROS_COUNT);\n@@ -5341,1 +5341,1 @@\n-    static void CTZMaskedShortMaxVectorTests(IntFunction<short[]> fa,\n+    static void TRAILING_ZEROS_COUNTMaskedShortMaxVectorTests(IntFunction<short[]> fa,\n@@ -5351,1 +5351,1 @@\n-                av.lanewise(VectorOperators.CTZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT, vmask).intoArray(r, i);\n@@ -5355,1 +5355,1 @@\n-        assertArraysEquals(r, a, mask, ShortMaxVectorTests::CTZ);\n+        assertArraysEquals(r, a, mask, ShortMaxVectorTests::TRAILING_ZEROS_COUNT);\n@@ -5360,2 +5360,2 @@\n-    static short CLZ(short a) {\n-        return (short)(CLZ_scalar(a));\n+    static short LEADING_ZEROS_COUNT(short a) {\n+        return (short)(LEADING_ZEROS_COUNT_scalar(a));\n@@ -5367,1 +5367,1 @@\n-    static void CLZShortMaxVectorTests(IntFunction<short[]> fa) {\n+    static void LEADING_ZEROS_COUNTShortMaxVectorTests(IntFunction<short[]> fa) {\n@@ -5374,1 +5374,1 @@\n-                av.lanewise(VectorOperators.CLZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT).intoArray(r, i);\n@@ -5378,1 +5378,1 @@\n-        assertArraysEquals(r, a, ShortMaxVectorTests::CLZ);\n+        assertArraysEquals(r, a, ShortMaxVectorTests::LEADING_ZEROS_COUNT);\n@@ -5384,1 +5384,1 @@\n-    static void CLZMaskedShortMaxVectorTests(IntFunction<short[]> fa,\n+    static void LEADING_ZEROS_COUNTMaskedShortMaxVectorTests(IntFunction<short[]> fa,\n@@ -5394,1 +5394,1 @@\n-                av.lanewise(VectorOperators.CLZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT, vmask).intoArray(r, i);\n@@ -5398,1 +5398,1 @@\n-        assertArraysEquals(r, a, mask, ShortMaxVectorTests::CLZ);\n+        assertArraysEquals(r, a, mask, ShortMaxVectorTests::LEADING_ZEROS_COUNT);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ShortMaxVectorTests.java","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-# Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -555,2 +555,2 @@\n-gen_unary_alu_op \"CTZ\" \"CTZ_scalar(a)\" \"BITWISE\"\n-gen_unary_alu_op \"CLZ\" \"CLZ_scalar(a)\" \"BITWISE\"\n+gen_unary_alu_op \"TRAILING_ZEROS_COUNT\" \"TRAILING_ZEROS_COUNT_scalar(a)\" \"BITWISE\"\n+gen_unary_alu_op \"LEADING_ZEROS_COUNT\" \"LEADING_ZEROS_COUNT_scalar(a)\" \"BITWISE\"\n","filename":"test\/jdk\/jdk\/incubator\/vector\/gen-template.sh","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -151,1 +151,1 @@\n-    static $type$ CTZ_scalar($type$ a) {\n+    static $type$ TRAILING_ZEROS_COUNT_scalar($type$ a) {\n@@ -163,1 +163,1 @@\n-    static $type$ CLZ_scalar($type$ a) {\n+    static $type$ LEADING_ZEROS_COUNT_scalar($type$ a) {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-header.template","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1460,1 +1460,1 @@\n-    static $type$ CTZ_scalar($type$ a) {\n+    static $type$ TRAILING_ZEROS_COUNT_scalar($type$ a) {\n@@ -1472,1 +1472,1 @@\n-    static $type$ CLZ_scalar($type$ a) {\n+    static $type$ LEADING_ZEROS_COUNT_scalar($type$ a) {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-header.template","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2146,1 +2146,1 @@\n-    public void CTZ(Blackhole bh) {\n+    public void TRAILING_ZEROS_COUNT(Blackhole bh) {\n@@ -2153,1 +2153,1 @@\n-                av.lanewise(VectorOperators.CTZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT).intoArray(r, i);\n@@ -2163,1 +2163,1 @@\n-    public void CTZMasked(Blackhole bh) {\n+    public void TRAILING_ZEROS_COUNTMasked(Blackhole bh) {\n@@ -2172,1 +2172,1 @@\n-                av.lanewise(VectorOperators.CTZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT, vmask).intoArray(r, i);\n@@ -2182,1 +2182,1 @@\n-    public void CLZ(Blackhole bh) {\n+    public void LEADING_ZEROS_COUNT(Blackhole bh) {\n@@ -2189,1 +2189,1 @@\n-                av.lanewise(VectorOperators.CLZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT).intoArray(r, i);\n@@ -2199,1 +2199,1 @@\n-    public void CLZMasked(Blackhole bh) {\n+    public void LEADING_ZEROS_COUNTMasked(Blackhole bh) {\n@@ -2208,1 +2208,1 @@\n-                av.lanewise(VectorOperators.CLZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT, vmask).intoArray(r, i);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte128Vector.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2146,1 +2146,1 @@\n-    public void CTZ(Blackhole bh) {\n+    public void TRAILING_ZEROS_COUNT(Blackhole bh) {\n@@ -2153,1 +2153,1 @@\n-                av.lanewise(VectorOperators.CTZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT).intoArray(r, i);\n@@ -2163,1 +2163,1 @@\n-    public void CTZMasked(Blackhole bh) {\n+    public void TRAILING_ZEROS_COUNTMasked(Blackhole bh) {\n@@ -2172,1 +2172,1 @@\n-                av.lanewise(VectorOperators.CTZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT, vmask).intoArray(r, i);\n@@ -2182,1 +2182,1 @@\n-    public void CLZ(Blackhole bh) {\n+    public void LEADING_ZEROS_COUNT(Blackhole bh) {\n@@ -2189,1 +2189,1 @@\n-                av.lanewise(VectorOperators.CLZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT).intoArray(r, i);\n@@ -2199,1 +2199,1 @@\n-    public void CLZMasked(Blackhole bh) {\n+    public void LEADING_ZEROS_COUNTMasked(Blackhole bh) {\n@@ -2208,1 +2208,1 @@\n-                av.lanewise(VectorOperators.CLZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT, vmask).intoArray(r, i);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte256Vector.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2146,1 +2146,1 @@\n-    public void CTZ(Blackhole bh) {\n+    public void TRAILING_ZEROS_COUNT(Blackhole bh) {\n@@ -2153,1 +2153,1 @@\n-                av.lanewise(VectorOperators.CTZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT).intoArray(r, i);\n@@ -2163,1 +2163,1 @@\n-    public void CTZMasked(Blackhole bh) {\n+    public void TRAILING_ZEROS_COUNTMasked(Blackhole bh) {\n@@ -2172,1 +2172,1 @@\n-                av.lanewise(VectorOperators.CTZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT, vmask).intoArray(r, i);\n@@ -2182,1 +2182,1 @@\n-    public void CLZ(Blackhole bh) {\n+    public void LEADING_ZEROS_COUNT(Blackhole bh) {\n@@ -2189,1 +2189,1 @@\n-                av.lanewise(VectorOperators.CLZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT).intoArray(r, i);\n@@ -2199,1 +2199,1 @@\n-    public void CLZMasked(Blackhole bh) {\n+    public void LEADING_ZEROS_COUNTMasked(Blackhole bh) {\n@@ -2208,1 +2208,1 @@\n-                av.lanewise(VectorOperators.CLZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT, vmask).intoArray(r, i);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte512Vector.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2146,1 +2146,1 @@\n-    public void CTZ(Blackhole bh) {\n+    public void TRAILING_ZEROS_COUNT(Blackhole bh) {\n@@ -2153,1 +2153,1 @@\n-                av.lanewise(VectorOperators.CTZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT).intoArray(r, i);\n@@ -2163,1 +2163,1 @@\n-    public void CTZMasked(Blackhole bh) {\n+    public void TRAILING_ZEROS_COUNTMasked(Blackhole bh) {\n@@ -2172,1 +2172,1 @@\n-                av.lanewise(VectorOperators.CTZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT, vmask).intoArray(r, i);\n@@ -2182,1 +2182,1 @@\n-    public void CLZ(Blackhole bh) {\n+    public void LEADING_ZEROS_COUNT(Blackhole bh) {\n@@ -2189,1 +2189,1 @@\n-                av.lanewise(VectorOperators.CLZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT).intoArray(r, i);\n@@ -2199,1 +2199,1 @@\n-    public void CLZMasked(Blackhole bh) {\n+    public void LEADING_ZEROS_COUNTMasked(Blackhole bh) {\n@@ -2208,1 +2208,1 @@\n-                av.lanewise(VectorOperators.CLZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT, vmask).intoArray(r, i);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte64Vector.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2146,1 +2146,1 @@\n-    public void CTZ(Blackhole bh) {\n+    public void TRAILING_ZEROS_COUNT(Blackhole bh) {\n@@ -2153,1 +2153,1 @@\n-                av.lanewise(VectorOperators.CTZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT).intoArray(r, i);\n@@ -2163,1 +2163,1 @@\n-    public void CTZMasked(Blackhole bh) {\n+    public void TRAILING_ZEROS_COUNTMasked(Blackhole bh) {\n@@ -2172,1 +2172,1 @@\n-                av.lanewise(VectorOperators.CTZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT, vmask).intoArray(r, i);\n@@ -2182,1 +2182,1 @@\n-    public void CLZ(Blackhole bh) {\n+    public void LEADING_ZEROS_COUNT(Blackhole bh) {\n@@ -2189,1 +2189,1 @@\n-                av.lanewise(VectorOperators.CLZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT).intoArray(r, i);\n@@ -2199,1 +2199,1 @@\n-    public void CLZMasked(Blackhole bh) {\n+    public void LEADING_ZEROS_COUNTMasked(Blackhole bh) {\n@@ -2208,1 +2208,1 @@\n-                av.lanewise(VectorOperators.CLZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT, vmask).intoArray(r, i);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ByteMaxVector.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -132,1 +132,1 @@\n-    static byte CTZ_scalar(byte a) {\n+    static byte TRAILING_ZEROS_COUNT_scalar(byte a) {\n@@ -136,1 +136,1 @@\n-    static byte CLZ_scalar(byte a) {\n+    static byte LEADING_ZEROS_COUNT_scalar(byte a) {\n@@ -1713,1 +1713,1 @@\n-    public void CTZ(Blackhole bh) {\n+    public void TRAILING_ZEROS_COUNT(Blackhole bh) {\n@@ -1720,1 +1720,1 @@\n-                rs[i] = (byte)(CTZ_scalar(a));\n+                rs[i] = (byte)(TRAILING_ZEROS_COUNT_scalar(a));\n@@ -1730,1 +1730,1 @@\n-    public void CTZMasked(Blackhole bh) {\n+    public void TRAILING_ZEROS_COUNTMasked(Blackhole bh) {\n@@ -1739,1 +1739,1 @@\n-                rs[i] = (m ? (byte)(CTZ_scalar(a)) : a);\n+                rs[i] = (m ? (byte)(TRAILING_ZEROS_COUNT_scalar(a)) : a);\n@@ -1749,1 +1749,1 @@\n-    public void CLZ(Blackhole bh) {\n+    public void LEADING_ZEROS_COUNT(Blackhole bh) {\n@@ -1756,1 +1756,1 @@\n-                rs[i] = (byte)(CLZ_scalar(a));\n+                rs[i] = (byte)(LEADING_ZEROS_COUNT_scalar(a));\n@@ -1766,1 +1766,1 @@\n-    public void CLZMasked(Blackhole bh) {\n+    public void LEADING_ZEROS_COUNTMasked(Blackhole bh) {\n@@ -1775,1 +1775,1 @@\n-                rs[i] = (m ? (byte)(CLZ_scalar(a)) : a);\n+                rs[i] = (m ? (byte)(LEADING_ZEROS_COUNT_scalar(a)) : a);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ByteScalar.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/DoubleScalar.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/FloatScalar.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2146,1 +2146,1 @@\n-    public void CTZ(Blackhole bh) {\n+    public void TRAILING_ZEROS_COUNT(Blackhole bh) {\n@@ -2153,1 +2153,1 @@\n-                av.lanewise(VectorOperators.CTZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT).intoArray(r, i);\n@@ -2163,1 +2163,1 @@\n-    public void CTZMasked(Blackhole bh) {\n+    public void TRAILING_ZEROS_COUNTMasked(Blackhole bh) {\n@@ -2172,1 +2172,1 @@\n-                av.lanewise(VectorOperators.CTZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT, vmask).intoArray(r, i);\n@@ -2182,1 +2182,1 @@\n-    public void CLZ(Blackhole bh) {\n+    public void LEADING_ZEROS_COUNT(Blackhole bh) {\n@@ -2189,1 +2189,1 @@\n-                av.lanewise(VectorOperators.CLZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT).intoArray(r, i);\n@@ -2199,1 +2199,1 @@\n-    public void CLZMasked(Blackhole bh) {\n+    public void LEADING_ZEROS_COUNTMasked(Blackhole bh) {\n@@ -2208,1 +2208,1 @@\n-                av.lanewise(VectorOperators.CLZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT, vmask).intoArray(r, i);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int128Vector.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2146,1 +2146,1 @@\n-    public void CTZ(Blackhole bh) {\n+    public void TRAILING_ZEROS_COUNT(Blackhole bh) {\n@@ -2153,1 +2153,1 @@\n-                av.lanewise(VectorOperators.CTZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT).intoArray(r, i);\n@@ -2163,1 +2163,1 @@\n-    public void CTZMasked(Blackhole bh) {\n+    public void TRAILING_ZEROS_COUNTMasked(Blackhole bh) {\n@@ -2172,1 +2172,1 @@\n-                av.lanewise(VectorOperators.CTZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT, vmask).intoArray(r, i);\n@@ -2182,1 +2182,1 @@\n-    public void CLZ(Blackhole bh) {\n+    public void LEADING_ZEROS_COUNT(Blackhole bh) {\n@@ -2189,1 +2189,1 @@\n-                av.lanewise(VectorOperators.CLZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT).intoArray(r, i);\n@@ -2199,1 +2199,1 @@\n-    public void CLZMasked(Blackhole bh) {\n+    public void LEADING_ZEROS_COUNTMasked(Blackhole bh) {\n@@ -2208,1 +2208,1 @@\n-                av.lanewise(VectorOperators.CLZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT, vmask).intoArray(r, i);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int256Vector.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2146,1 +2146,1 @@\n-    public void CTZ(Blackhole bh) {\n+    public void TRAILING_ZEROS_COUNT(Blackhole bh) {\n@@ -2153,1 +2153,1 @@\n-                av.lanewise(VectorOperators.CTZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT).intoArray(r, i);\n@@ -2163,1 +2163,1 @@\n-    public void CTZMasked(Blackhole bh) {\n+    public void TRAILING_ZEROS_COUNTMasked(Blackhole bh) {\n@@ -2172,1 +2172,1 @@\n-                av.lanewise(VectorOperators.CTZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT, vmask).intoArray(r, i);\n@@ -2182,1 +2182,1 @@\n-    public void CLZ(Blackhole bh) {\n+    public void LEADING_ZEROS_COUNT(Blackhole bh) {\n@@ -2189,1 +2189,1 @@\n-                av.lanewise(VectorOperators.CLZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT).intoArray(r, i);\n@@ -2199,1 +2199,1 @@\n-    public void CLZMasked(Blackhole bh) {\n+    public void LEADING_ZEROS_COUNTMasked(Blackhole bh) {\n@@ -2208,1 +2208,1 @@\n-                av.lanewise(VectorOperators.CLZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT, vmask).intoArray(r, i);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int512Vector.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2146,1 +2146,1 @@\n-    public void CTZ(Blackhole bh) {\n+    public void TRAILING_ZEROS_COUNT(Blackhole bh) {\n@@ -2153,1 +2153,1 @@\n-                av.lanewise(VectorOperators.CTZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT).intoArray(r, i);\n@@ -2163,1 +2163,1 @@\n-    public void CTZMasked(Blackhole bh) {\n+    public void TRAILING_ZEROS_COUNTMasked(Blackhole bh) {\n@@ -2172,1 +2172,1 @@\n-                av.lanewise(VectorOperators.CTZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT, vmask).intoArray(r, i);\n@@ -2182,1 +2182,1 @@\n-    public void CLZ(Blackhole bh) {\n+    public void LEADING_ZEROS_COUNT(Blackhole bh) {\n@@ -2189,1 +2189,1 @@\n-                av.lanewise(VectorOperators.CLZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT).intoArray(r, i);\n@@ -2199,1 +2199,1 @@\n-    public void CLZMasked(Blackhole bh) {\n+    public void LEADING_ZEROS_COUNTMasked(Blackhole bh) {\n@@ -2208,1 +2208,1 @@\n-                av.lanewise(VectorOperators.CLZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT, vmask).intoArray(r, i);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int64Vector.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2146,1 +2146,1 @@\n-    public void CTZ(Blackhole bh) {\n+    public void TRAILING_ZEROS_COUNT(Blackhole bh) {\n@@ -2153,1 +2153,1 @@\n-                av.lanewise(VectorOperators.CTZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT).intoArray(r, i);\n@@ -2163,1 +2163,1 @@\n-    public void CTZMasked(Blackhole bh) {\n+    public void TRAILING_ZEROS_COUNTMasked(Blackhole bh) {\n@@ -2172,1 +2172,1 @@\n-                av.lanewise(VectorOperators.CTZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT, vmask).intoArray(r, i);\n@@ -2182,1 +2182,1 @@\n-    public void CLZ(Blackhole bh) {\n+    public void LEADING_ZEROS_COUNT(Blackhole bh) {\n@@ -2189,1 +2189,1 @@\n-                av.lanewise(VectorOperators.CLZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT).intoArray(r, i);\n@@ -2199,1 +2199,1 @@\n-    public void CLZMasked(Blackhole bh) {\n+    public void LEADING_ZEROS_COUNTMasked(Blackhole bh) {\n@@ -2208,1 +2208,1 @@\n-                av.lanewise(VectorOperators.CLZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT, vmask).intoArray(r, i);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/IntMaxVector.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -132,1 +132,1 @@\n-    static int CTZ_scalar(int a) {\n+    static int TRAILING_ZEROS_COUNT_scalar(int a) {\n@@ -136,1 +136,1 @@\n-    static int CLZ_scalar(int a) {\n+    static int LEADING_ZEROS_COUNT_scalar(int a) {\n@@ -1713,1 +1713,1 @@\n-    public void CTZ(Blackhole bh) {\n+    public void TRAILING_ZEROS_COUNT(Blackhole bh) {\n@@ -1720,1 +1720,1 @@\n-                rs[i] = (int)(CTZ_scalar(a));\n+                rs[i] = (int)(TRAILING_ZEROS_COUNT_scalar(a));\n@@ -1730,1 +1730,1 @@\n-    public void CTZMasked(Blackhole bh) {\n+    public void TRAILING_ZEROS_COUNTMasked(Blackhole bh) {\n@@ -1739,1 +1739,1 @@\n-                rs[i] = (m ? (int)(CTZ_scalar(a)) : a);\n+                rs[i] = (m ? (int)(TRAILING_ZEROS_COUNT_scalar(a)) : a);\n@@ -1749,1 +1749,1 @@\n-    public void CLZ(Blackhole bh) {\n+    public void LEADING_ZEROS_COUNT(Blackhole bh) {\n@@ -1756,1 +1756,1 @@\n-                rs[i] = (int)(CLZ_scalar(a));\n+                rs[i] = (int)(LEADING_ZEROS_COUNT_scalar(a));\n@@ -1766,1 +1766,1 @@\n-    public void CLZMasked(Blackhole bh) {\n+    public void LEADING_ZEROS_COUNTMasked(Blackhole bh) {\n@@ -1775,1 +1775,1 @@\n-                rs[i] = (m ? (int)(CLZ_scalar(a)) : a);\n+                rs[i] = (m ? (int)(LEADING_ZEROS_COUNT_scalar(a)) : a);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/IntScalar.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2146,1 +2146,1 @@\n-    public void CTZ(Blackhole bh) {\n+    public void TRAILING_ZEROS_COUNT(Blackhole bh) {\n@@ -2153,1 +2153,1 @@\n-                av.lanewise(VectorOperators.CTZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT).intoArray(r, i);\n@@ -2163,1 +2163,1 @@\n-    public void CTZMasked(Blackhole bh) {\n+    public void TRAILING_ZEROS_COUNTMasked(Blackhole bh) {\n@@ -2172,1 +2172,1 @@\n-                av.lanewise(VectorOperators.CTZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT, vmask).intoArray(r, i);\n@@ -2182,1 +2182,1 @@\n-    public void CLZ(Blackhole bh) {\n+    public void LEADING_ZEROS_COUNT(Blackhole bh) {\n@@ -2189,1 +2189,1 @@\n-                av.lanewise(VectorOperators.CLZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT).intoArray(r, i);\n@@ -2199,1 +2199,1 @@\n-    public void CLZMasked(Blackhole bh) {\n+    public void LEADING_ZEROS_COUNTMasked(Blackhole bh) {\n@@ -2208,1 +2208,1 @@\n-                av.lanewise(VectorOperators.CLZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT, vmask).intoArray(r, i);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long128Vector.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2146,1 +2146,1 @@\n-    public void CTZ(Blackhole bh) {\n+    public void TRAILING_ZEROS_COUNT(Blackhole bh) {\n@@ -2153,1 +2153,1 @@\n-                av.lanewise(VectorOperators.CTZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT).intoArray(r, i);\n@@ -2163,1 +2163,1 @@\n-    public void CTZMasked(Blackhole bh) {\n+    public void TRAILING_ZEROS_COUNTMasked(Blackhole bh) {\n@@ -2172,1 +2172,1 @@\n-                av.lanewise(VectorOperators.CTZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT, vmask).intoArray(r, i);\n@@ -2182,1 +2182,1 @@\n-    public void CLZ(Blackhole bh) {\n+    public void LEADING_ZEROS_COUNT(Blackhole bh) {\n@@ -2189,1 +2189,1 @@\n-                av.lanewise(VectorOperators.CLZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT).intoArray(r, i);\n@@ -2199,1 +2199,1 @@\n-    public void CLZMasked(Blackhole bh) {\n+    public void LEADING_ZEROS_COUNTMasked(Blackhole bh) {\n@@ -2208,1 +2208,1 @@\n-                av.lanewise(VectorOperators.CLZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT, vmask).intoArray(r, i);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long256Vector.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2146,1 +2146,1 @@\n-    public void CTZ(Blackhole bh) {\n+    public void TRAILING_ZEROS_COUNT(Blackhole bh) {\n@@ -2153,1 +2153,1 @@\n-                av.lanewise(VectorOperators.CTZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT).intoArray(r, i);\n@@ -2163,1 +2163,1 @@\n-    public void CTZMasked(Blackhole bh) {\n+    public void TRAILING_ZEROS_COUNTMasked(Blackhole bh) {\n@@ -2172,1 +2172,1 @@\n-                av.lanewise(VectorOperators.CTZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT, vmask).intoArray(r, i);\n@@ -2182,1 +2182,1 @@\n-    public void CLZ(Blackhole bh) {\n+    public void LEADING_ZEROS_COUNT(Blackhole bh) {\n@@ -2189,1 +2189,1 @@\n-                av.lanewise(VectorOperators.CLZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT).intoArray(r, i);\n@@ -2199,1 +2199,1 @@\n-    public void CLZMasked(Blackhole bh) {\n+    public void LEADING_ZEROS_COUNTMasked(Blackhole bh) {\n@@ -2208,1 +2208,1 @@\n-                av.lanewise(VectorOperators.CLZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT, vmask).intoArray(r, i);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long512Vector.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2146,1 +2146,1 @@\n-    public void CTZ(Blackhole bh) {\n+    public void TRAILING_ZEROS_COUNT(Blackhole bh) {\n@@ -2153,1 +2153,1 @@\n-                av.lanewise(VectorOperators.CTZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT).intoArray(r, i);\n@@ -2163,1 +2163,1 @@\n-    public void CTZMasked(Blackhole bh) {\n+    public void TRAILING_ZEROS_COUNTMasked(Blackhole bh) {\n@@ -2172,1 +2172,1 @@\n-                av.lanewise(VectorOperators.CTZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT, vmask).intoArray(r, i);\n@@ -2182,1 +2182,1 @@\n-    public void CLZ(Blackhole bh) {\n+    public void LEADING_ZEROS_COUNT(Blackhole bh) {\n@@ -2189,1 +2189,1 @@\n-                av.lanewise(VectorOperators.CLZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT).intoArray(r, i);\n@@ -2199,1 +2199,1 @@\n-    public void CLZMasked(Blackhole bh) {\n+    public void LEADING_ZEROS_COUNTMasked(Blackhole bh) {\n@@ -2208,1 +2208,1 @@\n-                av.lanewise(VectorOperators.CLZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT, vmask).intoArray(r, i);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long64Vector.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2146,1 +2146,1 @@\n-    public void CTZ(Blackhole bh) {\n+    public void TRAILING_ZEROS_COUNT(Blackhole bh) {\n@@ -2153,1 +2153,1 @@\n-                av.lanewise(VectorOperators.CTZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT).intoArray(r, i);\n@@ -2163,1 +2163,1 @@\n-    public void CTZMasked(Blackhole bh) {\n+    public void TRAILING_ZEROS_COUNTMasked(Blackhole bh) {\n@@ -2172,1 +2172,1 @@\n-                av.lanewise(VectorOperators.CTZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT, vmask).intoArray(r, i);\n@@ -2182,1 +2182,1 @@\n-    public void CLZ(Blackhole bh) {\n+    public void LEADING_ZEROS_COUNT(Blackhole bh) {\n@@ -2189,1 +2189,1 @@\n-                av.lanewise(VectorOperators.CLZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT).intoArray(r, i);\n@@ -2199,1 +2199,1 @@\n-    public void CLZMasked(Blackhole bh) {\n+    public void LEADING_ZEROS_COUNTMasked(Blackhole bh) {\n@@ -2208,1 +2208,1 @@\n-                av.lanewise(VectorOperators.CLZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT, vmask).intoArray(r, i);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/LongMaxVector.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -132,1 +132,1 @@\n-    static long CTZ_scalar(long a) {\n+    static long TRAILING_ZEROS_COUNT_scalar(long a) {\n@@ -136,1 +136,1 @@\n-    static long CLZ_scalar(long a) {\n+    static long LEADING_ZEROS_COUNT_scalar(long a) {\n@@ -1713,1 +1713,1 @@\n-    public void CTZ(Blackhole bh) {\n+    public void TRAILING_ZEROS_COUNT(Blackhole bh) {\n@@ -1720,1 +1720,1 @@\n-                rs[i] = (long)(CTZ_scalar(a));\n+                rs[i] = (long)(TRAILING_ZEROS_COUNT_scalar(a));\n@@ -1730,1 +1730,1 @@\n-    public void CTZMasked(Blackhole bh) {\n+    public void TRAILING_ZEROS_COUNTMasked(Blackhole bh) {\n@@ -1739,1 +1739,1 @@\n-                rs[i] = (m ? (long)(CTZ_scalar(a)) : a);\n+                rs[i] = (m ? (long)(TRAILING_ZEROS_COUNT_scalar(a)) : a);\n@@ -1749,1 +1749,1 @@\n-    public void CLZ(Blackhole bh) {\n+    public void LEADING_ZEROS_COUNT(Blackhole bh) {\n@@ -1756,1 +1756,1 @@\n-                rs[i] = (long)(CLZ_scalar(a));\n+                rs[i] = (long)(LEADING_ZEROS_COUNT_scalar(a));\n@@ -1766,1 +1766,1 @@\n-    public void CLZMasked(Blackhole bh) {\n+    public void LEADING_ZEROS_COUNTMasked(Blackhole bh) {\n@@ -1775,1 +1775,1 @@\n-                rs[i] = (m ? (long)(CLZ_scalar(a)) : a);\n+                rs[i] = (m ? (long)(LEADING_ZEROS_COUNT_scalar(a)) : a);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/LongScalar.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2146,1 +2146,1 @@\n-    public void CTZ(Blackhole bh) {\n+    public void TRAILING_ZEROS_COUNT(Blackhole bh) {\n@@ -2153,1 +2153,1 @@\n-                av.lanewise(VectorOperators.CTZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT).intoArray(r, i);\n@@ -2163,1 +2163,1 @@\n-    public void CTZMasked(Blackhole bh) {\n+    public void TRAILING_ZEROS_COUNTMasked(Blackhole bh) {\n@@ -2172,1 +2172,1 @@\n-                av.lanewise(VectorOperators.CTZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT, vmask).intoArray(r, i);\n@@ -2182,1 +2182,1 @@\n-    public void CLZ(Blackhole bh) {\n+    public void LEADING_ZEROS_COUNT(Blackhole bh) {\n@@ -2189,1 +2189,1 @@\n-                av.lanewise(VectorOperators.CLZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT).intoArray(r, i);\n@@ -2199,1 +2199,1 @@\n-    public void CLZMasked(Blackhole bh) {\n+    public void LEADING_ZEROS_COUNTMasked(Blackhole bh) {\n@@ -2208,1 +2208,1 @@\n-                av.lanewise(VectorOperators.CLZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT, vmask).intoArray(r, i);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short128Vector.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2146,1 +2146,1 @@\n-    public void CTZ(Blackhole bh) {\n+    public void TRAILING_ZEROS_COUNT(Blackhole bh) {\n@@ -2153,1 +2153,1 @@\n-                av.lanewise(VectorOperators.CTZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT).intoArray(r, i);\n@@ -2163,1 +2163,1 @@\n-    public void CTZMasked(Blackhole bh) {\n+    public void TRAILING_ZEROS_COUNTMasked(Blackhole bh) {\n@@ -2172,1 +2172,1 @@\n-                av.lanewise(VectorOperators.CTZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT, vmask).intoArray(r, i);\n@@ -2182,1 +2182,1 @@\n-    public void CLZ(Blackhole bh) {\n+    public void LEADING_ZEROS_COUNT(Blackhole bh) {\n@@ -2189,1 +2189,1 @@\n-                av.lanewise(VectorOperators.CLZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT).intoArray(r, i);\n@@ -2199,1 +2199,1 @@\n-    public void CLZMasked(Blackhole bh) {\n+    public void LEADING_ZEROS_COUNTMasked(Blackhole bh) {\n@@ -2208,1 +2208,1 @@\n-                av.lanewise(VectorOperators.CLZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT, vmask).intoArray(r, i);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short256Vector.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2146,1 +2146,1 @@\n-    public void CTZ(Blackhole bh) {\n+    public void TRAILING_ZEROS_COUNT(Blackhole bh) {\n@@ -2153,1 +2153,1 @@\n-                av.lanewise(VectorOperators.CTZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT).intoArray(r, i);\n@@ -2163,1 +2163,1 @@\n-    public void CTZMasked(Blackhole bh) {\n+    public void TRAILING_ZEROS_COUNTMasked(Blackhole bh) {\n@@ -2172,1 +2172,1 @@\n-                av.lanewise(VectorOperators.CTZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT, vmask).intoArray(r, i);\n@@ -2182,1 +2182,1 @@\n-    public void CLZ(Blackhole bh) {\n+    public void LEADING_ZEROS_COUNT(Blackhole bh) {\n@@ -2189,1 +2189,1 @@\n-                av.lanewise(VectorOperators.CLZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT).intoArray(r, i);\n@@ -2199,1 +2199,1 @@\n-    public void CLZMasked(Blackhole bh) {\n+    public void LEADING_ZEROS_COUNTMasked(Blackhole bh) {\n@@ -2208,1 +2208,1 @@\n-                av.lanewise(VectorOperators.CLZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT, vmask).intoArray(r, i);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short512Vector.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2146,1 +2146,1 @@\n-    public void CTZ(Blackhole bh) {\n+    public void TRAILING_ZEROS_COUNT(Blackhole bh) {\n@@ -2153,1 +2153,1 @@\n-                av.lanewise(VectorOperators.CTZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT).intoArray(r, i);\n@@ -2163,1 +2163,1 @@\n-    public void CTZMasked(Blackhole bh) {\n+    public void TRAILING_ZEROS_COUNTMasked(Blackhole bh) {\n@@ -2172,1 +2172,1 @@\n-                av.lanewise(VectorOperators.CTZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT, vmask).intoArray(r, i);\n@@ -2182,1 +2182,1 @@\n-    public void CLZ(Blackhole bh) {\n+    public void LEADING_ZEROS_COUNT(Blackhole bh) {\n@@ -2189,1 +2189,1 @@\n-                av.lanewise(VectorOperators.CLZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT).intoArray(r, i);\n@@ -2199,1 +2199,1 @@\n-    public void CLZMasked(Blackhole bh) {\n+    public void LEADING_ZEROS_COUNTMasked(Blackhole bh) {\n@@ -2208,1 +2208,1 @@\n-                av.lanewise(VectorOperators.CLZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT, vmask).intoArray(r, i);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short64Vector.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2146,1 +2146,1 @@\n-    public void CTZ(Blackhole bh) {\n+    public void TRAILING_ZEROS_COUNT(Blackhole bh) {\n@@ -2153,1 +2153,1 @@\n-                av.lanewise(VectorOperators.CTZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT).intoArray(r, i);\n@@ -2163,1 +2163,1 @@\n-    public void CTZMasked(Blackhole bh) {\n+    public void TRAILING_ZEROS_COUNTMasked(Blackhole bh) {\n@@ -2172,1 +2172,1 @@\n-                av.lanewise(VectorOperators.CTZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.TRAILING_ZEROS_COUNT, vmask).intoArray(r, i);\n@@ -2182,1 +2182,1 @@\n-    public void CLZ(Blackhole bh) {\n+    public void LEADING_ZEROS_COUNT(Blackhole bh) {\n@@ -2189,1 +2189,1 @@\n-                av.lanewise(VectorOperators.CLZ).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT).intoArray(r, i);\n@@ -2199,1 +2199,1 @@\n-    public void CLZMasked(Blackhole bh) {\n+    public void LEADING_ZEROS_COUNTMasked(Blackhole bh) {\n@@ -2208,1 +2208,1 @@\n-                av.lanewise(VectorOperators.CLZ, vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LEADING_ZEROS_COUNT, vmask).intoArray(r, i);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ShortMaxVector.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -132,1 +132,1 @@\n-    static short CTZ_scalar(short a) {\n+    static short TRAILING_ZEROS_COUNT_scalar(short a) {\n@@ -136,1 +136,1 @@\n-    static short CLZ_scalar(short a) {\n+    static short LEADING_ZEROS_COUNT_scalar(short a) {\n@@ -1713,1 +1713,1 @@\n-    public void CTZ(Blackhole bh) {\n+    public void TRAILING_ZEROS_COUNT(Blackhole bh) {\n@@ -1720,1 +1720,1 @@\n-                rs[i] = (short)(CTZ_scalar(a));\n+                rs[i] = (short)(TRAILING_ZEROS_COUNT_scalar(a));\n@@ -1730,1 +1730,1 @@\n-    public void CTZMasked(Blackhole bh) {\n+    public void TRAILING_ZEROS_COUNTMasked(Blackhole bh) {\n@@ -1739,1 +1739,1 @@\n-                rs[i] = (m ? (short)(CTZ_scalar(a)) : a);\n+                rs[i] = (m ? (short)(TRAILING_ZEROS_COUNT_scalar(a)) : a);\n@@ -1749,1 +1749,1 @@\n-    public void CLZ(Blackhole bh) {\n+    public void LEADING_ZEROS_COUNT(Blackhole bh) {\n@@ -1756,1 +1756,1 @@\n-                rs[i] = (short)(CLZ_scalar(a));\n+                rs[i] = (short)(LEADING_ZEROS_COUNT_scalar(a));\n@@ -1766,1 +1766,1 @@\n-    public void CLZMasked(Blackhole bh) {\n+    public void LEADING_ZEROS_COUNTMasked(Blackhole bh) {\n@@ -1775,1 +1775,1 @@\n-                rs[i] = (m ? (short)(CLZ_scalar(a)) : a);\n+                rs[i] = (m ? (short)(LEADING_ZEROS_COUNT_scalar(a)) : a);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ShortScalar.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"}]}