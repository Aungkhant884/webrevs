{"files":[{"patch":"@@ -660,0 +660,1 @@\n+\n@@ -1789,0 +1790,1 @@\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteVector.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -636,0 +636,1 @@\n+\n@@ -1627,0 +1628,1 @@\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleVector.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -636,0 +636,1 @@\n+\n@@ -1635,0 +1636,1 @@\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatVector.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -660,0 +660,1 @@\n+\n@@ -1785,0 +1786,1 @@\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntVector.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -618,0 +618,1 @@\n+\n@@ -1698,0 +1699,1 @@\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongVector.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -660,0 +660,1 @@\n+\n@@ -1789,0 +1790,1 @@\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortVector.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -685,1 +685,0 @@\n-#if[!double]\n@@ -692,1 +691,0 @@\n-#end[!double]\n@@ -694,0 +692,1 @@\n+\n@@ -2048,0 +2047,1 @@\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,84 +0,0 @@\n-\/*\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @modules jdk.incubator.vector\n- * @requires vm.compiler2.enabled\n- *\/\n-\n-import jdk.incubator.vector.LongVector;\n-import jdk.incubator.vector.IntVector;\n-import jdk.incubator.vector.VectorShape;\n-import jdk.incubator.vector.VectorSpecies;\n-import jdk.incubator.vector.Vector;\n-\n-import java.util.Arrays;\n-import java.util.stream.IntStream;\n-\n-public class PopcountUnitTest {\n-    static final VectorSpecies<Long> SPECIESL =\n-            LongVector.SPECIES_256;\n-    static final VectorSpecies<Integer> SPECIESI =\n-            IntVector.SPECIES_256;\n-\n-    static final int SIZE = 1024;\n-    static int[] a = new int[SIZE];\n-    static int[] b = new int[SIZE];\n-    static long[] c = new long[SIZE];\n-    static long[] d = new long[SIZE];\n-\n-    static {\n-        for (int i = 0; i < SIZE; i++) {\n-            a[i] = 7;\n-            c[i] = -63;\n-        }\n-    }\n-\n-    static void workload() {\n-        for (int i = 0; i < a.length; i += SPECIESI.length()) {\n-            IntVector av = IntVector.fromArray(SPECIESI, a, i);\n-            av.popcnt().intoArray(b, i);\n-        }\n-         for (int i = 0; i < c.length; i += SPECIESL.length()) {\n-            LongVector cv = LongVector.fromArray(SPECIESL, c, i);\n-            cv.popcnt().intoArray(d, i);\n-        }\n-    }\n-\n-    public static void main(String args[]) {\n-        for (int i = 0; i < 30_0000; i++) {\n-            workload();\n-        }\n-        for (int i = 0; i < a.length; i++) {\n-            if (b[i] != Integer.bitCount(a[i]))\n-                throw new AssertionError();\n-        }\n-        for (int i = 0; i < c.length; i++) {\n-            if (d[i] != Long.bitCount(c[i]))\n-                throw new AssertionError();\n-        }\n-        System.out.println(\"b[0] = \" + b[0]);\n-        System.out.println(\"d[0] = \" + d[0]);\n-    }\n-}\n","filename":"test\/jdk\/jdk\/incubator\/vector\/PopcountUnitTest.java","additions":0,"deletions":84,"binary":false,"changes":84,"status":"deleted"}]}