{"files":[{"patch":"@@ -79,0 +79,1 @@\n+macro(ExpandBits)\n","filename":"src\/hotspot\/share\/opto\/classes.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -396,1 +396,9 @@\n-  CompressBitsNode( Node *in1, Node *in2 ) : Node(0,in1,in2) {}\n+  CompressBitsNode(Node *in1, Node *in2) : Node(0,in1,in2) {}\n+  virtual int Opcode() const;\n+};\n+\n+\/\/------------------------------ExpandBitsNode---------------------------------\n+\/\/ ExpandBits placeholder node\n+class ExpandBitsNode : public Node {\n+public:\n+  ExpandBitsNode(Node *in1, Node *in2) : Node(0,in1,in2) {}\n","filename":"src\/hotspot\/share\/opto\/mulnode.hpp","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -168,0 +168,3 @@\n+  case Op_ExpandBits:\n+    \/\/ Not implemented. Returning 0 temporarily\n+    return 0;\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -483,1 +483,1 @@\n-     switch (bt) {\n+      switch (bt) {\n@@ -493,1 +493,1 @@\n-     switch (bt) {\n+      switch (bt) {\n@@ -503,1 +503,1 @@\n-     switch (bt) {\n+      switch (bt) {\n@@ -513,1 +513,1 @@\n-     switch (bt) {\n+      switch (bt) {\n@@ -523,1 +523,1 @@\n-     switch (bt) {\n+      switch (bt) {\n@@ -533,3 +533,1 @@\n-     switch (bt) {\n-        case T_BYTE: \/\/ Returning Op_CompressBits for\n-        case T_SHORT:\/\/ all types temporarily.\n+      switch (bt) {\n@@ -542,0 +540,8 @@\n+    case VECTOR_OP_EXPAND_BITS: {\n+      switch (bt) {\n+        case T_INT:\n+        case T_LONG: return Op_ExpandBits;\n+        default: fatal(\"EXPAND_BITS: %s\", type2name(bt));\n+      }\n+      break;\n+    }\n","filename":"src\/hotspot\/share\/prims\/vectorSupport.cpp","additions":14,"deletions":8,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -102,0 +102,1 @@\n+    VECTOR_OP_EXPAND_BITS = 34,\n","filename":"src\/hotspot\/share\/prims\/vectorSupport.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -93,1 +93,1 @@\n-    \/\/ Compress Bits operation\n+    \/\/ Compress and Expand Bits operation\n@@ -95,0 +95,1 @@\n+    public static final int VECTOR_OP_EXPAND_BITS = 34;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/vector\/VectorSupport.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -448,25 +448,0 @@\n-    \/* Implementation note: The implementation is based on Compress or Generalized Extract mentioned in\n-     * Henry S. Warren, Jr's Hackers Delight, Addison Wesley, 2002.\n-     *\/\n-    static byte compressBits(byte a, byte bitmask) {\n-        a = (byte) (a & bitmask); \/\/ Clear irrelevant bits\n-        byte count_mask = (byte) (~bitmask << 1); \/\/ Count 0's to right\n-\n-        \/\/ Prefix mask identifies bits of bitmask that have odd number of 0's to the right\n-        \/\/ Move mask identifies the bits to be moved\n-        \/\/ temp identifies the bits of the given number to be moved\n-        byte prefix_mask, move_mask, temp;\n-        int iters = 3;\n-\n-        for (int i = 0; i < iters; i++) {\n-            prefix_mask = (byte) (count_mask  ^ (count_mask  << 1)); \/\/ Parallel prefix\n-            prefix_mask = (byte) (prefix_mask ^ (prefix_mask << 2));\n-            prefix_mask = (byte) (prefix_mask ^ (prefix_mask << 4));\n-            move_mask = (byte) (prefix_mask & bitmask); \/\/ Bits to move\n-            bitmask = (byte)(bitmask ^ move_mask | (move_mask >> (1 << i))); \/\/ Compress bitmask\n-            temp = (byte) (a & move_mask); \/\/ Bits of the number a to be moved.\n-            a = (byte) (a ^ temp | (temp >> (1 << i))); \/\/ Compress a\n-            count_mask = (byte) (count_mask & ~prefix_mask); \/\/ adjust count_mask by identifying bits that have 0 to the right\n-        }\n-        return a;\n-    }\n@@ -834,2 +809,0 @@\n-            case VECTOR_OP_COMPRESS_BITS: return (v0, v1, vm) ->\n-                    v0.bOp(v1, vm, (i, a, n) -> compressBits(a, n));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteVector.java","additions":0,"deletions":27,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -451,8 +451,3 @@\n-    static int compressBits(int a, int bitmask) {\n-        a = (int) (a & bitmask); \/\/ Clear irrelevant bits\n-        int count_mask = (int) (~bitmask << 1); \/\/ Count 0's to right\n-\n-        \/\/ Prefix mask identifies bits of bitmask that have odd number of 0's to the right\n-        \/\/ Move mask identifies the bits to be moved\n-        \/\/ temp identifies the bits of the given number to be moved\n-        int prefix_mask, move_mask, temp;\n+    static int compressBits(int a, int mask) {\n+        a = a & mask; \/\/ Clear irrelevant bits\n+        int maskCount = ~mask << 1; \/\/ Count 0's to right\n@@ -461,11 +456,18 @@\n-        for (int i = 0; i < iters; i++) {\n-            prefix_mask = (int) (count_mask  ^ (count_mask  << 1)); \/\/ Parallel prefix\n-            prefix_mask = (int) (prefix_mask ^ (prefix_mask << 2));\n-            prefix_mask = (int) (prefix_mask ^ (prefix_mask << 4));\n-            prefix_mask = (int) (prefix_mask ^ (prefix_mask << 8));\n-            prefix_mask = (int) (prefix_mask ^ (prefix_mask << 16));\n-            move_mask = (int) (prefix_mask & bitmask); \/\/ Bits to move\n-            bitmask = (int)(bitmask ^ move_mask | (move_mask >> (1 << i))); \/\/ Compress bitmask\n-            temp = (int) (a & move_mask); \/\/ Bits of the number a to be moved.\n-            a = (int) (a ^ temp | (temp >> (1 << i))); \/\/ Compress a\n-            count_mask = (int) (count_mask & ~prefix_mask); \/\/ adjust count_mask by identifying bits that have 0 to the right\n+        for (int j = 0; j < iters; j++) {\n+            \/\/ Parallel prefix\n+            \/\/ maskPrefix identifies bits of the mask that have odd number of 0's to the right\n+            int maskPrefix = maskCount  ^ (maskCount  << 1);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 2);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 4);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 8);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 16);\n+            \/\/ Bits to move\n+            int maskMove = maskPrefix & mask;\n+            \/\/ Compress mask\n+            mask = (mask ^ maskMove) | (maskMove >>> (1 << j));\n+            \/\/ Bits of a to be moved\n+            int t = a & maskMove;\n+            \/\/ Compress a\n+            a = (a ^ t) | (t >>> (1 << j));\n+            \/\/ Adjust the countMask by identifying the bits that have 0 to the right\n+            maskCount = maskCount & ~maskPrefix;\n@@ -476,0 +478,32 @@\n+    static int expandBits(int a, int mask) {\n+        int originalMask = mask; \/\/ Save original mask\n+        int maskCount = ~mask << 1; \/\/ Count 0's to right\n+        int[] array = new int[5];\n+        int iters = 5;\n+\n+        for (int j = 0; j < iters; j++) {\n+            \/\/ Parallel prefix\n+            int maskPrefix = maskCount  ^ (maskCount  << 1);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 2);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 4);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 8);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 16);\n+            \/\/ Bits to move\n+            int maskMove = maskPrefix & mask;\n+            array[j] = maskMove;\n+            \/\/ Compress mask\n+            mask = (mask ^ maskMove) | (maskMove >>> (1 << j));\n+            \/\/ Adjust the countMask by identifying the bits that have 0 to the right\n+            maskCount = maskCount & ~maskPrefix;\n+        }\n+\n+        for (int j = iters-1; j >= 0; j--) {\n+            int maskMove = array[j];\n+            int t = a << (1 << j);\n+            a = (a & ~maskMove) | (t & maskMove);\n+        }\n+\n+        \/\/ Clear irrelevant bits\n+        return (a & originalMask);\n+    }\n+\n@@ -838,0 +872,2 @@\n+            case VECTOR_OP_EXPAND_BITS: return (v0, v1, vm) ->\n+                    v0.bOp(v1, vm, (i, a, n) -> expandBits(a, n));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntVector.java","additions":55,"deletions":19,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -451,8 +451,3 @@\n-    static long compressBits(long a, long bitmask) {\n-        a = (long) (a & bitmask); \/\/ Clear irrelevant bits\n-        long count_mask = (long) (~bitmask << 1); \/\/ Count 0's to right\n-\n-        \/\/ Prefix mask identifies bits of bitmask that have odd number of 0's to the right\n-        \/\/ Move mask identifies the bits to be moved\n-        \/\/ temp identifies the bits of the given number to be moved\n-        long prefix_mask, move_mask, temp;\n+    static long compressBits(long a, long mask) {\n+        a = a & mask; \/\/ Clear irrelevant bits\n+        long maskCount = ~mask << 1; \/\/ Count 0's to right\n@@ -461,12 +456,19 @@\n-        for (int i = 0; i < iters; i++) {\n-            prefix_mask = (long) (count_mask  ^ (count_mask  << 1)); \/\/ Parallel prefix\n-            prefix_mask = (long) (prefix_mask ^ (prefix_mask << 2));\n-            prefix_mask = (long) (prefix_mask ^ (prefix_mask << 4));\n-            prefix_mask = (long) (prefix_mask ^ (prefix_mask << 8));\n-            prefix_mask = (long) (prefix_mask ^ (prefix_mask << 16));\n-            prefix_mask = (long) (prefix_mask ^ (prefix_mask << 32));\n-            move_mask = (long) (prefix_mask & bitmask); \/\/ Bits to move\n-            bitmask = (long)(bitmask ^ move_mask | (move_mask >> (1 << i))); \/\/ Compress bitmask\n-            temp = (long) (a & move_mask); \/\/ Bits of the number a to be moved.\n-            a = (long) (a ^ temp | (temp >> (1 << i))); \/\/ Compress a\n-            count_mask = (long) (count_mask & ~prefix_mask); \/\/ adjust count_mask by identifying bits that have 0 to the right\n+        for (int j = 0; j < iters; j++) {\n+            \/\/ Parallel prefix\n+            \/\/ maskPrefix identifies bits of the mask that have odd number of 0's to the right\n+            long maskPrefix = maskCount  ^ (maskCount  << 1);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 2);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 4);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 8);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 16);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 32);\n+            \/\/ Bits to move\n+            long maskMove = maskPrefix & mask;\n+            \/\/ Compress mask\n+            mask = (mask ^ maskMove) | (maskMove >>> (1 << j));\n+            \/\/ Bits of a to be moved\n+            long t = a & maskMove;\n+            \/\/ Compress a\n+            a = (a ^ t) | (t >>> (1 << j));\n+            \/\/ Adjust the countMask by identifying the bits that have 0 to the right\n+            maskCount = maskCount & ~maskPrefix;\n@@ -477,0 +479,33 @@\n+    static long expandBits(long a, long mask) {\n+        long originalMask = mask; \/\/ Save original mask\n+        long maskCount = ~mask << 1; \/\/ Count 0's to right\n+        long[] array = new long[6];\n+        int iters = 6;\n+\n+        for (int j = 0; j < iters; j++) {\n+            \/\/ Parallel prefix\n+            long maskPrefix = maskCount  ^ (maskCount  << 1);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 2);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 4);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 8);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 16);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 32);\n+            \/\/ Bits to move\n+            long maskMove = maskPrefix & mask;\n+            array[j] = maskMove;\n+            \/\/ Compress mask\n+            mask = (mask ^ maskMove) | (maskMove >>> (1 << j));\n+            \/\/ Adjust the countMask by identifying the bits that have 0 to the right\n+            maskCount = maskCount & ~maskPrefix;\n+        }\n+\n+        for (int j = iters-1; j >= 0; j--) {\n+            long maskMove = array[j];\n+            long t = a << (1 << j);\n+            a = (a & ~maskMove) | (t & maskMove);\n+        }\n+\n+        \/\/ Clear irrelevant bits\n+        return (a & originalMask);\n+    }\n+\n@@ -797,0 +832,2 @@\n+            case VECTOR_OP_EXPAND_BITS: return (v0, v1, vm) ->\n+                    v0.bOp(v1, vm, (i, a, n) -> expandBits(a, n));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongVector.java","additions":57,"deletions":20,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -448,26 +448,0 @@\n-    \/* Implementation note: The implementation is based on Compress or Generalized Extract mentioned in\n-     * Henry S. Warren, Jr's Hackers Delight, Addison Wesley, 2002.\n-     *\/\n-    static short compressBits(short a, short bitmask) {\n-        a = (short) (a & bitmask); \/\/ Clear irrelevant bits\n-        short count_mask = (short) (~bitmask << 1); \/\/ Count 0's to right\n-\n-        \/\/ Prefix mask identifies bits of bitmask that have odd number of 0's to the right\n-        \/\/ Move mask identifies the bits to be moved\n-        \/\/ temp identifies the bits of the given number to be moved\n-        short prefix_mask, move_mask, temp;\n-        int iters = 4;\n-\n-        for (int i = 0; i < iters; i++) {\n-            prefix_mask = (short) (count_mask  ^ (count_mask  << 1)); \/\/ Parallel prefix\n-            prefix_mask = (short) (prefix_mask ^ (prefix_mask << 2));\n-            prefix_mask = (short) (prefix_mask ^ (prefix_mask << 4));\n-            prefix_mask = (short) (prefix_mask ^ (prefix_mask << 8));\n-            move_mask = (short) (prefix_mask & bitmask); \/\/ Bits to move\n-            bitmask = (short)(bitmask ^ move_mask | (move_mask >> (1 << i))); \/\/ Compress bitmask\n-            temp = (short) (a & move_mask); \/\/ Bits of the number a to be moved.\n-            a = (short) (a ^ temp | (temp >> (1 << i))); \/\/ Compress a\n-            count_mask = (short) (count_mask & ~prefix_mask); \/\/ adjust count_mask by identifying bits that have 0 to the right\n-        }\n-        return a;\n-    }\n@@ -835,2 +809,0 @@\n-            case VECTOR_OP_COMPRESS_BITS: return (v0, v1, vm) ->\n-                    v0.bOp(v1, vm, (i, a, n) -> compressBits(a, n));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortVector.java","additions":0,"deletions":28,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -567,1 +567,1 @@\n-    \/** Produce {@code compressBits(a,n)}. Integral Only. *\/\n+    \/** Produce {@code compressBits(a,n)}. Integral only. *\/\n@@ -569,0 +569,2 @@\n+    \/** Produce {@code expandBits(a,n)}. Integral only. *\/\n+    public static final \/*bitwise*\/ Binary EXPAND_BITS = binary(\"EXPAND_BITS\", \"expandBits\", VectorSupport.VECTOR_OP_EXPAND_BITS, VO_NOFP);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/VectorOperators.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -461,0 +461,1 @@\n+#if[intOrLong]\n@@ -464,9 +465,3 @@\n-    static $type$ compressBits($type$ a, $type$ bitmask) {\n-        a = ($type$) (a & bitmask); \/\/ Clear irrelevant bits\n-        $type$ count_mask = ($type$) (~bitmask << 1); \/\/ Count 0's to right\n-\n-        \/\/ Prefix mask identifies bits of bitmask that have odd number of 0's to the right\n-        \/\/ Move mask identifies the bits to be moved\n-        \/\/ temp identifies the bits of the given number to be moved\n-        $type$ prefix_mask, move_mask, temp;\n-#if[intOrLong]\n+    static $type$ compressBits($type$ a, $type$ mask) {\n+        a = a & mask; \/\/ Clear irrelevant bits\n+        $type$ maskCount = ~mask << 1; \/\/ Count 0's to right\n@@ -478,7 +473,0 @@\n-#end[intOrLong]\n-#if[short]\n-        int iters = 4;\n-#end[short]\n-#if[byte]\n-        int iters = 3;\n-#end[byte]\n@@ -486,9 +474,8 @@\n-        for (int i = 0; i < iters; i++) {\n-            prefix_mask = ($type$) (count_mask  ^ (count_mask  << 1)); \/\/ Parallel prefix\n-            prefix_mask = ($type$) (prefix_mask ^ (prefix_mask << 2));\n-            prefix_mask = ($type$) (prefix_mask ^ (prefix_mask << 4));\n-#if[!byte]\n-            prefix_mask = ($type$) (prefix_mask ^ (prefix_mask << 8));\n-#end[!byte]\n-#if[intOrLong]\n-            prefix_mask = ($type$) (prefix_mask ^ (prefix_mask << 16));\n+        for (int j = 0; j < iters; j++) {\n+            \/\/ Parallel prefix\n+            \/\/ maskPrefix identifies bits of the mask that have odd number of 0's to the right\n+            $type$ maskPrefix = maskCount  ^ (maskCount  << 1);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 2);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 4);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 8);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 16);\n@@ -496,1 +483,1 @@\n-            prefix_mask = ($type$) (prefix_mask ^ (prefix_mask << 32));\n+            maskPrefix = maskPrefix ^ (maskPrefix << 32);\n@@ -498,6 +485,10 @@\n-#end[intOrLong]\n-            move_mask = ($type$) (prefix_mask & bitmask); \/\/ Bits to move\n-            bitmask = ($type$)(bitmask ^ move_mask | (move_mask >> (1 << i))); \/\/ Compress bitmask\n-            temp = ($type$) (a & move_mask); \/\/ Bits of the number a to be moved.\n-            a = ($type$) (a ^ temp | (temp >> (1 << i))); \/\/ Compress a\n-            count_mask = ($type$) (count_mask & ~prefix_mask); \/\/ adjust count_mask by identifying bits that have 0 to the right\n+            \/\/ Bits to move\n+            $type$ maskMove = maskPrefix & mask;\n+            \/\/ Compress mask\n+            mask = (mask ^ maskMove) | (maskMove >>> (1 << j));\n+            \/\/ Bits of a to be moved\n+            $type$ t = a & maskMove;\n+            \/\/ Compress a\n+            a = (a ^ t) | (t >>> (1 << j));\n+            \/\/ Adjust the countMask by identifying the bits that have 0 to the right\n+            maskCount = maskCount & ~maskPrefix;\n@@ -507,0 +498,41 @@\n+\n+    static $type$ expandBits($type$ a, $type$ mask) {\n+        $type$ originalMask = mask; \/\/ Save original mask\n+        $type$ maskCount = ~mask << 1; \/\/ Count 0's to right\n+#if[int]\n+        $type$[] array = new $type$[5];\n+        int iters = 5;\n+#else[int]\n+        $type$[] array = new $type$[6];\n+        int iters = 6;\n+#end[int]\n+\n+        for (int j = 0; j < iters; j++) {\n+            \/\/ Parallel prefix\n+            $type$ maskPrefix = maskCount  ^ (maskCount  << 1);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 2);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 4);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 8);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 16);\n+#if[long]\n+            maskPrefix = maskPrefix ^ (maskPrefix << 32);\n+#end[long]\n+            \/\/ Bits to move\n+            $type$ maskMove = maskPrefix & mask;\n+            array[j] = maskMove;\n+            \/\/ Compress mask\n+            mask = (mask ^ maskMove) | (maskMove >>> (1 << j));\n+            \/\/ Adjust the countMask by identifying the bits that have 0 to the right\n+            maskCount = maskCount & ~maskPrefix;\n+        }\n+\n+        for (int j = iters-1; j >= 0; j--) {\n+            $type$ maskMove = array[j];\n+            $type$ t = a << (1 << j);\n+            a = (a & ~maskMove) | (t & maskMove);\n+        }\n+\n+        \/\/ Clear irrelevant bits\n+        return (a & originalMask);\n+    }\n+#end[intOrLong]\n@@ -954,0 +986,1 @@\n+#if[intOrLong]\n@@ -956,0 +989,3 @@\n+            case VECTOR_OP_EXPAND_BITS: return (v0, v1, vm) ->\n+                    v0.bOp(v1, vm, (i, a, n) -> expandBits(a, n));\n+#end[intOrLong]\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template","additions":68,"deletions":32,"binary":false,"changes":100,"status":"modified"},{"patch":"@@ -1228,19 +1228,0 @@\n-    static byte COMPRESSBITS_scalar(byte a, byte b) {\n-        byte prefix_mask, move_mask, temp;\n-        a = (byte) (a & b);\n-        byte count_mask = (byte) (~b << 1);\n-        byte mp, mv, t;\n-        int iters = 3;\n-\n-        for (int i = 0; i < iters; i++) {\n-            prefix_mask = (byte) (count_mask  ^ (count_mask  << 1));\n-            prefix_mask = (byte) (prefix_mask ^ (prefix_mask << 2));\n-            prefix_mask = (byte) (prefix_mask ^ (prefix_mask << 4));\n-            move_mask = (byte) (prefix_mask & b);\n-            b = (byte)(b ^ move_mask | (move_mask >> (1 << i)));\n-            temp = (byte) (a & move_mask);\n-            a = (byte) (a ^ temp | (temp >> (1 << i)));\n-            count_mask = (byte) (count_mask & ~prefix_mask);\n-        }\n-        return a;\n-    }\n@@ -1972,20 +1953,0 @@\n-    static byte COMPRESS_BITS(byte a, byte b) {\n-        return (byte)(COMPRESSBITS_scalar(a,b));\n-    }\n-\n-    @Test(dataProvider = \"byteBinaryOpProvider\")\n-    static void COMPRESS_BITSByte128VectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n-        byte[] a = fa.apply(SPECIES.length());\n-        byte[] b = fb.apply(SPECIES.length());\n-        byte[] r = fr.apply(SPECIES.length());\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n-                ByteVector bv = ByteVector.fromArray(SPECIES, b, i);\n-                av.lanewise(VectorOperators.COMPRESS_BITS, bv).intoArray(r, i);\n-            }\n-        }\n-\n-        assertArraysEquals(r, a, b, Byte128VectorTests::COMPRESS_BITS);\n-    }\n@@ -1995,20 +1956,0 @@\n-    @Test(dataProvider = \"byteBinaryOpMaskProvider\")\n-    static void COMPRESS_BITSByte128VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        byte[] a = fa.apply(SPECIES.length());\n-        byte[] b = fb.apply(SPECIES.length());\n-        byte[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Byte> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n-                ByteVector bv = ByteVector.fromArray(SPECIES, b, i);\n-                av.lanewise(VectorOperators.COMPRESS_BITS, bv, vmask).intoArray(r, i);\n-            }\n-        }\n-\n-        assertArraysEquals(r, a, b, mask, Byte128VectorTests::COMPRESS_BITS);\n-    }\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte128VectorTests.java","additions":0,"deletions":59,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -1228,19 +1228,0 @@\n-    static byte COMPRESSBITS_scalar(byte a, byte b) {\n-        byte prefix_mask, move_mask, temp;\n-        a = (byte) (a & b);\n-        byte count_mask = (byte) (~b << 1);\n-        byte mp, mv, t;\n-        int iters = 3;\n-\n-        for (int i = 0; i < iters; i++) {\n-            prefix_mask = (byte) (count_mask  ^ (count_mask  << 1));\n-            prefix_mask = (byte) (prefix_mask ^ (prefix_mask << 2));\n-            prefix_mask = (byte) (prefix_mask ^ (prefix_mask << 4));\n-            move_mask = (byte) (prefix_mask & b);\n-            b = (byte)(b ^ move_mask | (move_mask >> (1 << i)));\n-            temp = (byte) (a & move_mask);\n-            a = (byte) (a ^ temp | (temp >> (1 << i)));\n-            count_mask = (byte) (count_mask & ~prefix_mask);\n-        }\n-        return a;\n-    }\n@@ -1972,20 +1953,0 @@\n-    static byte COMPRESS_BITS(byte a, byte b) {\n-        return (byte)(COMPRESSBITS_scalar(a,b));\n-    }\n-\n-    @Test(dataProvider = \"byteBinaryOpProvider\")\n-    static void COMPRESS_BITSByte256VectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n-        byte[] a = fa.apply(SPECIES.length());\n-        byte[] b = fb.apply(SPECIES.length());\n-        byte[] r = fr.apply(SPECIES.length());\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n-                ByteVector bv = ByteVector.fromArray(SPECIES, b, i);\n-                av.lanewise(VectorOperators.COMPRESS_BITS, bv).intoArray(r, i);\n-            }\n-        }\n-\n-        assertArraysEquals(r, a, b, Byte256VectorTests::COMPRESS_BITS);\n-    }\n@@ -1995,20 +1956,0 @@\n-    @Test(dataProvider = \"byteBinaryOpMaskProvider\")\n-    static void COMPRESS_BITSByte256VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        byte[] a = fa.apply(SPECIES.length());\n-        byte[] b = fb.apply(SPECIES.length());\n-        byte[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Byte> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n-                ByteVector bv = ByteVector.fromArray(SPECIES, b, i);\n-                av.lanewise(VectorOperators.COMPRESS_BITS, bv, vmask).intoArray(r, i);\n-            }\n-        }\n-\n-        assertArraysEquals(r, a, b, mask, Byte256VectorTests::COMPRESS_BITS);\n-    }\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte256VectorTests.java","additions":0,"deletions":59,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -1228,19 +1228,0 @@\n-    static byte COMPRESSBITS_scalar(byte a, byte b) {\n-        byte prefix_mask, move_mask, temp;\n-        a = (byte) (a & b);\n-        byte count_mask = (byte) (~b << 1);\n-        byte mp, mv, t;\n-        int iters = 3;\n-\n-        for (int i = 0; i < iters; i++) {\n-            prefix_mask = (byte) (count_mask  ^ (count_mask  << 1));\n-            prefix_mask = (byte) (prefix_mask ^ (prefix_mask << 2));\n-            prefix_mask = (byte) (prefix_mask ^ (prefix_mask << 4));\n-            move_mask = (byte) (prefix_mask & b);\n-            b = (byte)(b ^ move_mask | (move_mask >> (1 << i)));\n-            temp = (byte) (a & move_mask);\n-            a = (byte) (a ^ temp | (temp >> (1 << i)));\n-            count_mask = (byte) (count_mask & ~prefix_mask);\n-        }\n-        return a;\n-    }\n@@ -1972,20 +1953,0 @@\n-    static byte COMPRESS_BITS(byte a, byte b) {\n-        return (byte)(COMPRESSBITS_scalar(a,b));\n-    }\n-\n-    @Test(dataProvider = \"byteBinaryOpProvider\")\n-    static void COMPRESS_BITSByte512VectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n-        byte[] a = fa.apply(SPECIES.length());\n-        byte[] b = fb.apply(SPECIES.length());\n-        byte[] r = fr.apply(SPECIES.length());\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n-                ByteVector bv = ByteVector.fromArray(SPECIES, b, i);\n-                av.lanewise(VectorOperators.COMPRESS_BITS, bv).intoArray(r, i);\n-            }\n-        }\n-\n-        assertArraysEquals(r, a, b, Byte512VectorTests::COMPRESS_BITS);\n-    }\n@@ -1995,20 +1956,0 @@\n-    @Test(dataProvider = \"byteBinaryOpMaskProvider\")\n-    static void COMPRESS_BITSByte512VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        byte[] a = fa.apply(SPECIES.length());\n-        byte[] b = fb.apply(SPECIES.length());\n-        byte[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Byte> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n-                ByteVector bv = ByteVector.fromArray(SPECIES, b, i);\n-                av.lanewise(VectorOperators.COMPRESS_BITS, bv, vmask).intoArray(r, i);\n-            }\n-        }\n-\n-        assertArraysEquals(r, a, b, mask, Byte512VectorTests::COMPRESS_BITS);\n-    }\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte512VectorTests.java","additions":0,"deletions":59,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -1228,19 +1228,0 @@\n-    static byte COMPRESSBITS_scalar(byte a, byte b) {\n-        byte prefix_mask, move_mask, temp;\n-        a = (byte) (a & b);\n-        byte count_mask = (byte) (~b << 1);\n-        byte mp, mv, t;\n-        int iters = 3;\n-\n-        for (int i = 0; i < iters; i++) {\n-            prefix_mask = (byte) (count_mask  ^ (count_mask  << 1));\n-            prefix_mask = (byte) (prefix_mask ^ (prefix_mask << 2));\n-            prefix_mask = (byte) (prefix_mask ^ (prefix_mask << 4));\n-            move_mask = (byte) (prefix_mask & b);\n-            b = (byte)(b ^ move_mask | (move_mask >> (1 << i)));\n-            temp = (byte) (a & move_mask);\n-            a = (byte) (a ^ temp | (temp >> (1 << i)));\n-            count_mask = (byte) (count_mask & ~prefix_mask);\n-        }\n-        return a;\n-    }\n@@ -1972,20 +1953,0 @@\n-    static byte COMPRESS_BITS(byte a, byte b) {\n-        return (byte)(COMPRESSBITS_scalar(a,b));\n-    }\n-\n-    @Test(dataProvider = \"byteBinaryOpProvider\")\n-    static void COMPRESS_BITSByte64VectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n-        byte[] a = fa.apply(SPECIES.length());\n-        byte[] b = fb.apply(SPECIES.length());\n-        byte[] r = fr.apply(SPECIES.length());\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n-                ByteVector bv = ByteVector.fromArray(SPECIES, b, i);\n-                av.lanewise(VectorOperators.COMPRESS_BITS, bv).intoArray(r, i);\n-            }\n-        }\n-\n-        assertArraysEquals(r, a, b, Byte64VectorTests::COMPRESS_BITS);\n-    }\n@@ -1995,20 +1956,0 @@\n-    @Test(dataProvider = \"byteBinaryOpMaskProvider\")\n-    static void COMPRESS_BITSByte64VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        byte[] a = fa.apply(SPECIES.length());\n-        byte[] b = fb.apply(SPECIES.length());\n-        byte[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Byte> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n-                ByteVector bv = ByteVector.fromArray(SPECIES, b, i);\n-                av.lanewise(VectorOperators.COMPRESS_BITS, bv, vmask).intoArray(r, i);\n-            }\n-        }\n-\n-        assertArraysEquals(r, a, b, mask, Byte64VectorTests::COMPRESS_BITS);\n-    }\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte64VectorTests.java","additions":0,"deletions":59,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -1233,19 +1233,0 @@\n-    static byte COMPRESSBITS_scalar(byte a, byte b) {\n-        byte prefix_mask, move_mask, temp;\n-        a = (byte) (a & b);\n-        byte count_mask = (byte) (~b << 1);\n-        byte mp, mv, t;\n-        int iters = 3;\n-\n-        for (int i = 0; i < iters; i++) {\n-            prefix_mask = (byte) (count_mask  ^ (count_mask  << 1));\n-            prefix_mask = (byte) (prefix_mask ^ (prefix_mask << 2));\n-            prefix_mask = (byte) (prefix_mask ^ (prefix_mask << 4));\n-            move_mask = (byte) (prefix_mask & b);\n-            b = (byte)(b ^ move_mask | (move_mask >> (1 << i)));\n-            temp = (byte) (a & move_mask);\n-            a = (byte) (a ^ temp | (temp >> (1 << i)));\n-            count_mask = (byte) (count_mask & ~prefix_mask);\n-        }\n-        return a;\n-    }\n@@ -1977,20 +1958,0 @@\n-    static byte COMPRESS_BITS(byte a, byte b) {\n-        return (byte)(COMPRESSBITS_scalar(a,b));\n-    }\n-\n-    @Test(dataProvider = \"byteBinaryOpProvider\")\n-    static void COMPRESS_BITSByteMaxVectorTests(IntFunction<byte[]> fa, IntFunction<byte[]> fb) {\n-        byte[] a = fa.apply(SPECIES.length());\n-        byte[] b = fb.apply(SPECIES.length());\n-        byte[] r = fr.apply(SPECIES.length());\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n-                ByteVector bv = ByteVector.fromArray(SPECIES, b, i);\n-                av.lanewise(VectorOperators.COMPRESS_BITS, bv).intoArray(r, i);\n-            }\n-        }\n-\n-        assertArraysEquals(r, a, b, ByteMaxVectorTests::COMPRESS_BITS);\n-    }\n@@ -2000,20 +1961,0 @@\n-    @Test(dataProvider = \"byteBinaryOpMaskProvider\")\n-    static void COMPRESS_BITSByteMaxVectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        byte[] a = fa.apply(SPECIES.length());\n-        byte[] b = fb.apply(SPECIES.length());\n-        byte[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Byte> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n-                ByteVector bv = ByteVector.fromArray(SPECIES, b, i);\n-                av.lanewise(VectorOperators.COMPRESS_BITS, bv, vmask).intoArray(r, i);\n-            }\n-        }\n-\n-        assertArraysEquals(r, a, b, mask, ByteMaxVectorTests::COMPRESS_BITS);\n-    }\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ByteMaxVectorTests.java","additions":0,"deletions":59,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -1807,0 +1807,2 @@\n+\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double128VectorTests.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1807,0 +1807,2 @@\n+\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double256VectorTests.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1807,0 +1807,2 @@\n+\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double512VectorTests.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1807,0 +1807,2 @@\n+\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double64VectorTests.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1812,0 +1812,2 @@\n+\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/DoubleMaxVectorTests.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1817,0 +1817,2 @@\n+\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float128VectorTests.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1817,0 +1817,2 @@\n+\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float256VectorTests.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1817,0 +1817,2 @@\n+\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float512VectorTests.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1817,0 +1817,2 @@\n+\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float64VectorTests.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1822,0 +1822,2 @@\n+\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/FloatMaxVectorTests.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1186,4 +1186,2 @@\n-        int prefix_mask, move_mask, temp;\n-        a = (int) (a & b);\n-        int count_mask = (int) (~b << 1);\n-        int mp, mv, t;\n+        a = a & b;\n+        int maskCount = ~b << 1;\n@@ -1193,10 +1191,10 @@\n-            prefix_mask = (int) (count_mask  ^ (count_mask  << 1));\n-            prefix_mask = (int) (prefix_mask ^ (prefix_mask << 2));\n-            prefix_mask = (int) (prefix_mask ^ (prefix_mask << 4));\n-            prefix_mask = (int) (prefix_mask ^ (prefix_mask << 8));\n-            prefix_mask = (int) (prefix_mask ^ (prefix_mask << 16));\n-            move_mask = (int) (prefix_mask & b);\n-            b = (int)(b ^ move_mask | (move_mask >> (1 << i)));\n-            temp = (int) (a & move_mask);\n-            a = (int) (a ^ temp | (temp >> (1 << i)));\n-            count_mask = (int) (count_mask & ~prefix_mask);\n+            int maskPrefix = maskCount  ^ (maskCount << 1);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 2);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 4);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 8);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 16);\n+            int maskMove = maskPrefix & b;\n+            b = (b ^ maskMove) | (maskMove >>> (1 << i));\n+            int t = a & maskMove;\n+            a = (a ^ t) | (t >>> (1 << i));\n+            maskCount = maskCount & ~maskPrefix;\n@@ -1207,0 +1205,26 @@\n+    static int EXPANDBITS_scalar(int a, int b) {\n+        int originalMask = b;\n+        int maskCount = ~b << 1;\n+        int[] array = new int[5];\n+        int iters = 5;\n+\n+        for (int j = 0; j < iters; j++) {\n+            int maskPrefix = maskCount  ^ (maskCount  << 1);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 2);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 4);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 8);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 16);\n+            int maskMove = maskPrefix & b;\n+            array[j] = maskMove;\n+            b = (b ^ maskMove) | (maskMove >>> (1 << j));\n+            maskCount = maskCount & ~maskPrefix;\n+        }\n+\n+        for (int j = iters-1; j >= 0; j--) {\n+            int maskMove = array[j];\n+            int t = a << (1 << j);\n+            a = (a & ~maskMove) | (t & maskMove);\n+        }\n+        return (a & originalMask);\n+    }\n+\n@@ -1980,0 +2004,44 @@\n+    static int EXPAND_BITS(int a, int b) {\n+        return (int)(EXPANDBITS_scalar(a,b));\n+    }\n+\n+    @Test(dataProvider = \"intBinaryOpProvider\")\n+    static void EXPAND_BITSInt128VectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] b = fb.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                IntVector bv = IntVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.EXPAND_BITS, bv).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, Int128VectorTests::EXPAND_BITS);\n+    }\n+\n+\n+\n+    @Test(dataProvider = \"intBinaryOpMaskProvider\")\n+    static void EXPAND_BITSInt128VectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+                                          IntFunction<boolean[]> fm) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] b = fb.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Integer> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                IntVector bv = IntVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.EXPAND_BITS, bv, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, mask, Int128VectorTests::EXPAND_BITS);\n+    }\n+\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int128VectorTests.java","additions":82,"deletions":14,"binary":false,"changes":96,"status":"modified"},{"patch":"@@ -1186,4 +1186,2 @@\n-        int prefix_mask, move_mask, temp;\n-        a = (int) (a & b);\n-        int count_mask = (int) (~b << 1);\n-        int mp, mv, t;\n+        a = a & b;\n+        int maskCount = ~b << 1;\n@@ -1193,10 +1191,10 @@\n-            prefix_mask = (int) (count_mask  ^ (count_mask  << 1));\n-            prefix_mask = (int) (prefix_mask ^ (prefix_mask << 2));\n-            prefix_mask = (int) (prefix_mask ^ (prefix_mask << 4));\n-            prefix_mask = (int) (prefix_mask ^ (prefix_mask << 8));\n-            prefix_mask = (int) (prefix_mask ^ (prefix_mask << 16));\n-            move_mask = (int) (prefix_mask & b);\n-            b = (int)(b ^ move_mask | (move_mask >> (1 << i)));\n-            temp = (int) (a & move_mask);\n-            a = (int) (a ^ temp | (temp >> (1 << i)));\n-            count_mask = (int) (count_mask & ~prefix_mask);\n+            int maskPrefix = maskCount  ^ (maskCount << 1);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 2);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 4);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 8);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 16);\n+            int maskMove = maskPrefix & b;\n+            b = (b ^ maskMove) | (maskMove >>> (1 << i));\n+            int t = a & maskMove;\n+            a = (a ^ t) | (t >>> (1 << i));\n+            maskCount = maskCount & ~maskPrefix;\n@@ -1207,0 +1205,26 @@\n+    static int EXPANDBITS_scalar(int a, int b) {\n+        int originalMask = b;\n+        int maskCount = ~b << 1;\n+        int[] array = new int[5];\n+        int iters = 5;\n+\n+        for (int j = 0; j < iters; j++) {\n+            int maskPrefix = maskCount  ^ (maskCount  << 1);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 2);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 4);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 8);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 16);\n+            int maskMove = maskPrefix & b;\n+            array[j] = maskMove;\n+            b = (b ^ maskMove) | (maskMove >>> (1 << j));\n+            maskCount = maskCount & ~maskPrefix;\n+        }\n+\n+        for (int j = iters-1; j >= 0; j--) {\n+            int maskMove = array[j];\n+            int t = a << (1 << j);\n+            a = (a & ~maskMove) | (t & maskMove);\n+        }\n+        return (a & originalMask);\n+    }\n+\n@@ -1980,0 +2004,44 @@\n+    static int EXPAND_BITS(int a, int b) {\n+        return (int)(EXPANDBITS_scalar(a,b));\n+    }\n+\n+    @Test(dataProvider = \"intBinaryOpProvider\")\n+    static void EXPAND_BITSInt256VectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] b = fb.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                IntVector bv = IntVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.EXPAND_BITS, bv).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, Int256VectorTests::EXPAND_BITS);\n+    }\n+\n+\n+\n+    @Test(dataProvider = \"intBinaryOpMaskProvider\")\n+    static void EXPAND_BITSInt256VectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+                                          IntFunction<boolean[]> fm) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] b = fb.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Integer> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                IntVector bv = IntVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.EXPAND_BITS, bv, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, mask, Int256VectorTests::EXPAND_BITS);\n+    }\n+\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int256VectorTests.java","additions":82,"deletions":14,"binary":false,"changes":96,"status":"modified"},{"patch":"@@ -1186,4 +1186,2 @@\n-        int prefix_mask, move_mask, temp;\n-        a = (int) (a & b);\n-        int count_mask = (int) (~b << 1);\n-        int mp, mv, t;\n+        a = a & b;\n+        int maskCount = ~b << 1;\n@@ -1193,10 +1191,10 @@\n-            prefix_mask = (int) (count_mask  ^ (count_mask  << 1));\n-            prefix_mask = (int) (prefix_mask ^ (prefix_mask << 2));\n-            prefix_mask = (int) (prefix_mask ^ (prefix_mask << 4));\n-            prefix_mask = (int) (prefix_mask ^ (prefix_mask << 8));\n-            prefix_mask = (int) (prefix_mask ^ (prefix_mask << 16));\n-            move_mask = (int) (prefix_mask & b);\n-            b = (int)(b ^ move_mask | (move_mask >> (1 << i)));\n-            temp = (int) (a & move_mask);\n-            a = (int) (a ^ temp | (temp >> (1 << i)));\n-            count_mask = (int) (count_mask & ~prefix_mask);\n+            int maskPrefix = maskCount  ^ (maskCount << 1);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 2);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 4);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 8);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 16);\n+            int maskMove = maskPrefix & b;\n+            b = (b ^ maskMove) | (maskMove >>> (1 << i));\n+            int t = a & maskMove;\n+            a = (a ^ t) | (t >>> (1 << i));\n+            maskCount = maskCount & ~maskPrefix;\n@@ -1207,0 +1205,26 @@\n+    static int EXPANDBITS_scalar(int a, int b) {\n+        int originalMask = b;\n+        int maskCount = ~b << 1;\n+        int[] array = new int[5];\n+        int iters = 5;\n+\n+        for (int j = 0; j < iters; j++) {\n+            int maskPrefix = maskCount  ^ (maskCount  << 1);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 2);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 4);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 8);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 16);\n+            int maskMove = maskPrefix & b;\n+            array[j] = maskMove;\n+            b = (b ^ maskMove) | (maskMove >>> (1 << j));\n+            maskCount = maskCount & ~maskPrefix;\n+        }\n+\n+        for (int j = iters-1; j >= 0; j--) {\n+            int maskMove = array[j];\n+            int t = a << (1 << j);\n+            a = (a & ~maskMove) | (t & maskMove);\n+        }\n+        return (a & originalMask);\n+    }\n+\n@@ -1980,0 +2004,44 @@\n+    static int EXPAND_BITS(int a, int b) {\n+        return (int)(EXPANDBITS_scalar(a,b));\n+    }\n+\n+    @Test(dataProvider = \"intBinaryOpProvider\")\n+    static void EXPAND_BITSInt512VectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] b = fb.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                IntVector bv = IntVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.EXPAND_BITS, bv).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, Int512VectorTests::EXPAND_BITS);\n+    }\n+\n+\n+\n+    @Test(dataProvider = \"intBinaryOpMaskProvider\")\n+    static void EXPAND_BITSInt512VectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+                                          IntFunction<boolean[]> fm) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] b = fb.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Integer> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                IntVector bv = IntVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.EXPAND_BITS, bv, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, mask, Int512VectorTests::EXPAND_BITS);\n+    }\n+\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int512VectorTests.java","additions":82,"deletions":14,"binary":false,"changes":96,"status":"modified"},{"patch":"@@ -1186,4 +1186,2 @@\n-        int prefix_mask, move_mask, temp;\n-        a = (int) (a & b);\n-        int count_mask = (int) (~b << 1);\n-        int mp, mv, t;\n+        a = a & b;\n+        int maskCount = ~b << 1;\n@@ -1193,10 +1191,10 @@\n-            prefix_mask = (int) (count_mask  ^ (count_mask  << 1));\n-            prefix_mask = (int) (prefix_mask ^ (prefix_mask << 2));\n-            prefix_mask = (int) (prefix_mask ^ (prefix_mask << 4));\n-            prefix_mask = (int) (prefix_mask ^ (prefix_mask << 8));\n-            prefix_mask = (int) (prefix_mask ^ (prefix_mask << 16));\n-            move_mask = (int) (prefix_mask & b);\n-            b = (int)(b ^ move_mask | (move_mask >> (1 << i)));\n-            temp = (int) (a & move_mask);\n-            a = (int) (a ^ temp | (temp >> (1 << i)));\n-            count_mask = (int) (count_mask & ~prefix_mask);\n+            int maskPrefix = maskCount  ^ (maskCount << 1);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 2);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 4);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 8);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 16);\n+            int maskMove = maskPrefix & b;\n+            b = (b ^ maskMove) | (maskMove >>> (1 << i));\n+            int t = a & maskMove;\n+            a = (a ^ t) | (t >>> (1 << i));\n+            maskCount = maskCount & ~maskPrefix;\n@@ -1207,0 +1205,26 @@\n+    static int EXPANDBITS_scalar(int a, int b) {\n+        int originalMask = b;\n+        int maskCount = ~b << 1;\n+        int[] array = new int[5];\n+        int iters = 5;\n+\n+        for (int j = 0; j < iters; j++) {\n+            int maskPrefix = maskCount  ^ (maskCount  << 1);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 2);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 4);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 8);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 16);\n+            int maskMove = maskPrefix & b;\n+            array[j] = maskMove;\n+            b = (b ^ maskMove) | (maskMove >>> (1 << j));\n+            maskCount = maskCount & ~maskPrefix;\n+        }\n+\n+        for (int j = iters-1; j >= 0; j--) {\n+            int maskMove = array[j];\n+            int t = a << (1 << j);\n+            a = (a & ~maskMove) | (t & maskMove);\n+        }\n+        return (a & originalMask);\n+    }\n+\n@@ -1980,0 +2004,44 @@\n+    static int EXPAND_BITS(int a, int b) {\n+        return (int)(EXPANDBITS_scalar(a,b));\n+    }\n+\n+    @Test(dataProvider = \"intBinaryOpProvider\")\n+    static void EXPAND_BITSInt64VectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] b = fb.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                IntVector bv = IntVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.EXPAND_BITS, bv).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, Int64VectorTests::EXPAND_BITS);\n+    }\n+\n+\n+\n+    @Test(dataProvider = \"intBinaryOpMaskProvider\")\n+    static void EXPAND_BITSInt64VectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+                                          IntFunction<boolean[]> fm) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] b = fb.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Integer> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                IntVector bv = IntVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.EXPAND_BITS, bv, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, mask, Int64VectorTests::EXPAND_BITS);\n+    }\n+\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int64VectorTests.java","additions":82,"deletions":14,"binary":false,"changes":96,"status":"modified"},{"patch":"@@ -1191,4 +1191,2 @@\n-        int prefix_mask, move_mask, temp;\n-        a = (int) (a & b);\n-        int count_mask = (int) (~b << 1);\n-        int mp, mv, t;\n+        a = a & b;\n+        int maskCount = ~b << 1;\n@@ -1198,10 +1196,10 @@\n-            prefix_mask = (int) (count_mask  ^ (count_mask  << 1));\n-            prefix_mask = (int) (prefix_mask ^ (prefix_mask << 2));\n-            prefix_mask = (int) (prefix_mask ^ (prefix_mask << 4));\n-            prefix_mask = (int) (prefix_mask ^ (prefix_mask << 8));\n-            prefix_mask = (int) (prefix_mask ^ (prefix_mask << 16));\n-            move_mask = (int) (prefix_mask & b);\n-            b = (int)(b ^ move_mask | (move_mask >> (1 << i)));\n-            temp = (int) (a & move_mask);\n-            a = (int) (a ^ temp | (temp >> (1 << i)));\n-            count_mask = (int) (count_mask & ~prefix_mask);\n+            int maskPrefix = maskCount  ^ (maskCount << 1);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 2);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 4);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 8);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 16);\n+            int maskMove = maskPrefix & b;\n+            b = (b ^ maskMove) | (maskMove >>> (1 << i));\n+            int t = a & maskMove;\n+            a = (a ^ t) | (t >>> (1 << i));\n+            maskCount = maskCount & ~maskPrefix;\n@@ -1212,0 +1210,26 @@\n+    static int EXPANDBITS_scalar(int a, int b) {\n+        int originalMask = b;\n+        int maskCount = ~b << 1;\n+        int[] array = new int[5];\n+        int iters = 5;\n+\n+        for (int j = 0; j < iters; j++) {\n+            int maskPrefix = maskCount  ^ (maskCount  << 1);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 2);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 4);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 8);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 16);\n+            int maskMove = maskPrefix & b;\n+            array[j] = maskMove;\n+            b = (b ^ maskMove) | (maskMove >>> (1 << j));\n+            maskCount = maskCount & ~maskPrefix;\n+        }\n+\n+        for (int j = iters-1; j >= 0; j--) {\n+            int maskMove = array[j];\n+            int t = a << (1 << j);\n+            a = (a & ~maskMove) | (t & maskMove);\n+        }\n+        return (a & originalMask);\n+    }\n+\n@@ -1985,0 +2009,44 @@\n+    static int EXPAND_BITS(int a, int b) {\n+        return (int)(EXPANDBITS_scalar(a,b));\n+    }\n+\n+    @Test(dataProvider = \"intBinaryOpProvider\")\n+    static void EXPAND_BITSIntMaxVectorTests(IntFunction<int[]> fa, IntFunction<int[]> fb) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] b = fb.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                IntVector bv = IntVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.EXPAND_BITS, bv).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, IntMaxVectorTests::EXPAND_BITS);\n+    }\n+\n+\n+\n+    @Test(dataProvider = \"intBinaryOpMaskProvider\")\n+    static void EXPAND_BITSIntMaxVectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n+                                          IntFunction<boolean[]> fm) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] b = fb.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Integer> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                IntVector bv = IntVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.EXPAND_BITS, bv, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, mask, IntMaxVectorTests::EXPAND_BITS);\n+    }\n+\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/IntMaxVectorTests.java","additions":82,"deletions":14,"binary":false,"changes":96,"status":"modified"},{"patch":"@@ -1208,4 +1208,2 @@\n-        long prefix_mask, move_mask, temp;\n-        a = (long) (a & b);\n-        long count_mask = (long) (~b << 1);\n-        long mp, mv, t;\n+        a = a & b;\n+        long maskCount = ~b << 1;\n@@ -1215,11 +1213,11 @@\n-            prefix_mask = (long) (count_mask  ^ (count_mask  << 1));\n-            prefix_mask = (long) (prefix_mask ^ (prefix_mask << 2));\n-            prefix_mask = (long) (prefix_mask ^ (prefix_mask << 4));\n-            prefix_mask = (long) (prefix_mask ^ (prefix_mask << 8));\n-            prefix_mask = (long) (prefix_mask ^ (prefix_mask << 16));\n-            prefix_mask = (long) (prefix_mask ^ (prefix_mask << 32));\n-            move_mask = (long) (prefix_mask & b);\n-            b = (long)(b ^ move_mask | (move_mask >> (1 << i)));\n-            temp = (long) (a & move_mask);\n-            a = (long) (a ^ temp | (temp >> (1 << i)));\n-            count_mask = (long) (count_mask & ~prefix_mask);\n+            long maskPrefix = maskCount  ^ (maskCount << 1);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 2);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 4);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 8);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 16);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 32);\n+            long maskMove = maskPrefix & b;\n+            b = (b ^ maskMove) | (maskMove >>> (1 << i));\n+            long t = a & maskMove;\n+            a = (a ^ t) | (t >>> (1 << i));\n+            maskCount = maskCount & ~maskPrefix;\n@@ -1230,0 +1228,27 @@\n+    static long EXPANDBITS_scalar(long a, long b) {\n+        long originalMask = b;\n+        long maskCount = ~b << 1;\n+        long[] array = new long[6];\n+        int iters = 6;\n+\n+        for (int j = 0; j < iters; j++) {\n+            long maskPrefix = maskCount  ^ (maskCount  << 1);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 2);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 4);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 8);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 16);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 32);\n+            long maskMove = maskPrefix & b;\n+            array[j] = maskMove;\n+            b = (b ^ maskMove) | (maskMove >>> (1 << j));\n+            maskCount = maskCount & ~maskPrefix;\n+        }\n+\n+        for (int j = iters-1; j >= 0; j--) {\n+            long maskMove = array[j];\n+            long t = a << (1 << j);\n+            a = (a & ~maskMove) | (t & maskMove);\n+        }\n+        return (a & originalMask);\n+    }\n+\n@@ -2003,0 +2028,44 @@\n+    static long EXPAND_BITS(long a, long b) {\n+        return (long)(EXPANDBITS_scalar(a,b));\n+    }\n+\n+    @Test(dataProvider = \"longBinaryOpProvider\")\n+    static void EXPAND_BITSLong128VectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] b = fb.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                LongVector bv = LongVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.EXPAND_BITS, bv).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, Long128VectorTests::EXPAND_BITS);\n+    }\n+\n+\n+\n+    @Test(dataProvider = \"longBinaryOpMaskProvider\")\n+    static void EXPAND_BITSLong128VectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+                                          IntFunction<boolean[]> fm) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] b = fb.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Long> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                LongVector bv = LongVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.EXPAND_BITS, bv, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, mask, Long128VectorTests::EXPAND_BITS);\n+    }\n+\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long128VectorTests.java","additions":84,"deletions":15,"binary":false,"changes":99,"status":"modified"},{"patch":"@@ -1208,4 +1208,2 @@\n-        long prefix_mask, move_mask, temp;\n-        a = (long) (a & b);\n-        long count_mask = (long) (~b << 1);\n-        long mp, mv, t;\n+        a = a & b;\n+        long maskCount = ~b << 1;\n@@ -1215,11 +1213,11 @@\n-            prefix_mask = (long) (count_mask  ^ (count_mask  << 1));\n-            prefix_mask = (long) (prefix_mask ^ (prefix_mask << 2));\n-            prefix_mask = (long) (prefix_mask ^ (prefix_mask << 4));\n-            prefix_mask = (long) (prefix_mask ^ (prefix_mask << 8));\n-            prefix_mask = (long) (prefix_mask ^ (prefix_mask << 16));\n-            prefix_mask = (long) (prefix_mask ^ (prefix_mask << 32));\n-            move_mask = (long) (prefix_mask & b);\n-            b = (long)(b ^ move_mask | (move_mask >> (1 << i)));\n-            temp = (long) (a & move_mask);\n-            a = (long) (a ^ temp | (temp >> (1 << i)));\n-            count_mask = (long) (count_mask & ~prefix_mask);\n+            long maskPrefix = maskCount  ^ (maskCount << 1);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 2);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 4);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 8);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 16);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 32);\n+            long maskMove = maskPrefix & b;\n+            b = (b ^ maskMove) | (maskMove >>> (1 << i));\n+            long t = a & maskMove;\n+            a = (a ^ t) | (t >>> (1 << i));\n+            maskCount = maskCount & ~maskPrefix;\n@@ -1230,0 +1228,27 @@\n+    static long EXPANDBITS_scalar(long a, long b) {\n+        long originalMask = b;\n+        long maskCount = ~b << 1;\n+        long[] array = new long[6];\n+        int iters = 6;\n+\n+        for (int j = 0; j < iters; j++) {\n+            long maskPrefix = maskCount  ^ (maskCount  << 1);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 2);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 4);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 8);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 16);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 32);\n+            long maskMove = maskPrefix & b;\n+            array[j] = maskMove;\n+            b = (b ^ maskMove) | (maskMove >>> (1 << j));\n+            maskCount = maskCount & ~maskPrefix;\n+        }\n+\n+        for (int j = iters-1; j >= 0; j--) {\n+            long maskMove = array[j];\n+            long t = a << (1 << j);\n+            a = (a & ~maskMove) | (t & maskMove);\n+        }\n+        return (a & originalMask);\n+    }\n+\n@@ -2003,0 +2028,44 @@\n+    static long EXPAND_BITS(long a, long b) {\n+        return (long)(EXPANDBITS_scalar(a,b));\n+    }\n+\n+    @Test(dataProvider = \"longBinaryOpProvider\")\n+    static void EXPAND_BITSLong256VectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] b = fb.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                LongVector bv = LongVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.EXPAND_BITS, bv).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, Long256VectorTests::EXPAND_BITS);\n+    }\n+\n+\n+\n+    @Test(dataProvider = \"longBinaryOpMaskProvider\")\n+    static void EXPAND_BITSLong256VectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+                                          IntFunction<boolean[]> fm) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] b = fb.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Long> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                LongVector bv = LongVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.EXPAND_BITS, bv, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, mask, Long256VectorTests::EXPAND_BITS);\n+    }\n+\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long256VectorTests.java","additions":84,"deletions":15,"binary":false,"changes":99,"status":"modified"},{"patch":"@@ -1208,4 +1208,2 @@\n-        long prefix_mask, move_mask, temp;\n-        a = (long) (a & b);\n-        long count_mask = (long) (~b << 1);\n-        long mp, mv, t;\n+        a = a & b;\n+        long maskCount = ~b << 1;\n@@ -1215,11 +1213,11 @@\n-            prefix_mask = (long) (count_mask  ^ (count_mask  << 1));\n-            prefix_mask = (long) (prefix_mask ^ (prefix_mask << 2));\n-            prefix_mask = (long) (prefix_mask ^ (prefix_mask << 4));\n-            prefix_mask = (long) (prefix_mask ^ (prefix_mask << 8));\n-            prefix_mask = (long) (prefix_mask ^ (prefix_mask << 16));\n-            prefix_mask = (long) (prefix_mask ^ (prefix_mask << 32));\n-            move_mask = (long) (prefix_mask & b);\n-            b = (long)(b ^ move_mask | (move_mask >> (1 << i)));\n-            temp = (long) (a & move_mask);\n-            a = (long) (a ^ temp | (temp >> (1 << i)));\n-            count_mask = (long) (count_mask & ~prefix_mask);\n+            long maskPrefix = maskCount  ^ (maskCount << 1);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 2);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 4);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 8);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 16);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 32);\n+            long maskMove = maskPrefix & b;\n+            b = (b ^ maskMove) | (maskMove >>> (1 << i));\n+            long t = a & maskMove;\n+            a = (a ^ t) | (t >>> (1 << i));\n+            maskCount = maskCount & ~maskPrefix;\n@@ -1230,0 +1228,27 @@\n+    static long EXPANDBITS_scalar(long a, long b) {\n+        long originalMask = b;\n+        long maskCount = ~b << 1;\n+        long[] array = new long[6];\n+        int iters = 6;\n+\n+        for (int j = 0; j < iters; j++) {\n+            long maskPrefix = maskCount  ^ (maskCount  << 1);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 2);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 4);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 8);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 16);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 32);\n+            long maskMove = maskPrefix & b;\n+            array[j] = maskMove;\n+            b = (b ^ maskMove) | (maskMove >>> (1 << j));\n+            maskCount = maskCount & ~maskPrefix;\n+        }\n+\n+        for (int j = iters-1; j >= 0; j--) {\n+            long maskMove = array[j];\n+            long t = a << (1 << j);\n+            a = (a & ~maskMove) | (t & maskMove);\n+        }\n+        return (a & originalMask);\n+    }\n+\n@@ -2003,0 +2028,44 @@\n+    static long EXPAND_BITS(long a, long b) {\n+        return (long)(EXPANDBITS_scalar(a,b));\n+    }\n+\n+    @Test(dataProvider = \"longBinaryOpProvider\")\n+    static void EXPAND_BITSLong512VectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] b = fb.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                LongVector bv = LongVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.EXPAND_BITS, bv).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, Long512VectorTests::EXPAND_BITS);\n+    }\n+\n+\n+\n+    @Test(dataProvider = \"longBinaryOpMaskProvider\")\n+    static void EXPAND_BITSLong512VectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+                                          IntFunction<boolean[]> fm) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] b = fb.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Long> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                LongVector bv = LongVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.EXPAND_BITS, bv, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, mask, Long512VectorTests::EXPAND_BITS);\n+    }\n+\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long512VectorTests.java","additions":84,"deletions":15,"binary":false,"changes":99,"status":"modified"},{"patch":"@@ -1208,4 +1208,2 @@\n-        long prefix_mask, move_mask, temp;\n-        a = (long) (a & b);\n-        long count_mask = (long) (~b << 1);\n-        long mp, mv, t;\n+        a = a & b;\n+        long maskCount = ~b << 1;\n@@ -1215,11 +1213,11 @@\n-            prefix_mask = (long) (count_mask  ^ (count_mask  << 1));\n-            prefix_mask = (long) (prefix_mask ^ (prefix_mask << 2));\n-            prefix_mask = (long) (prefix_mask ^ (prefix_mask << 4));\n-            prefix_mask = (long) (prefix_mask ^ (prefix_mask << 8));\n-            prefix_mask = (long) (prefix_mask ^ (prefix_mask << 16));\n-            prefix_mask = (long) (prefix_mask ^ (prefix_mask << 32));\n-            move_mask = (long) (prefix_mask & b);\n-            b = (long)(b ^ move_mask | (move_mask >> (1 << i)));\n-            temp = (long) (a & move_mask);\n-            a = (long) (a ^ temp | (temp >> (1 << i)));\n-            count_mask = (long) (count_mask & ~prefix_mask);\n+            long maskPrefix = maskCount  ^ (maskCount << 1);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 2);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 4);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 8);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 16);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 32);\n+            long maskMove = maskPrefix & b;\n+            b = (b ^ maskMove) | (maskMove >>> (1 << i));\n+            long t = a & maskMove;\n+            a = (a ^ t) | (t >>> (1 << i));\n+            maskCount = maskCount & ~maskPrefix;\n@@ -1230,0 +1228,27 @@\n+    static long EXPANDBITS_scalar(long a, long b) {\n+        long originalMask = b;\n+        long maskCount = ~b << 1;\n+        long[] array = new long[6];\n+        int iters = 6;\n+\n+        for (int j = 0; j < iters; j++) {\n+            long maskPrefix = maskCount  ^ (maskCount  << 1);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 2);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 4);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 8);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 16);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 32);\n+            long maskMove = maskPrefix & b;\n+            array[j] = maskMove;\n+            b = (b ^ maskMove) | (maskMove >>> (1 << j));\n+            maskCount = maskCount & ~maskPrefix;\n+        }\n+\n+        for (int j = iters-1; j >= 0; j--) {\n+            long maskMove = array[j];\n+            long t = a << (1 << j);\n+            a = (a & ~maskMove) | (t & maskMove);\n+        }\n+        return (a & originalMask);\n+    }\n+\n@@ -2003,0 +2028,44 @@\n+    static long EXPAND_BITS(long a, long b) {\n+        return (long)(EXPANDBITS_scalar(a,b));\n+    }\n+\n+    @Test(dataProvider = \"longBinaryOpProvider\")\n+    static void EXPAND_BITSLong64VectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] b = fb.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                LongVector bv = LongVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.EXPAND_BITS, bv).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, Long64VectorTests::EXPAND_BITS);\n+    }\n+\n+\n+\n+    @Test(dataProvider = \"longBinaryOpMaskProvider\")\n+    static void EXPAND_BITSLong64VectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+                                          IntFunction<boolean[]> fm) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] b = fb.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Long> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                LongVector bv = LongVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.EXPAND_BITS, bv, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, mask, Long64VectorTests::EXPAND_BITS);\n+    }\n+\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long64VectorTests.java","additions":84,"deletions":15,"binary":false,"changes":99,"status":"modified"},{"patch":"@@ -1213,4 +1213,2 @@\n-        long prefix_mask, move_mask, temp;\n-        a = (long) (a & b);\n-        long count_mask = (long) (~b << 1);\n-        long mp, mv, t;\n+        a = a & b;\n+        long maskCount = ~b << 1;\n@@ -1220,11 +1218,11 @@\n-            prefix_mask = (long) (count_mask  ^ (count_mask  << 1));\n-            prefix_mask = (long) (prefix_mask ^ (prefix_mask << 2));\n-            prefix_mask = (long) (prefix_mask ^ (prefix_mask << 4));\n-            prefix_mask = (long) (prefix_mask ^ (prefix_mask << 8));\n-            prefix_mask = (long) (prefix_mask ^ (prefix_mask << 16));\n-            prefix_mask = (long) (prefix_mask ^ (prefix_mask << 32));\n-            move_mask = (long) (prefix_mask & b);\n-            b = (long)(b ^ move_mask | (move_mask >> (1 << i)));\n-            temp = (long) (a & move_mask);\n-            a = (long) (a ^ temp | (temp >> (1 << i)));\n-            count_mask = (long) (count_mask & ~prefix_mask);\n+            long maskPrefix = maskCount  ^ (maskCount << 1);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 2);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 4);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 8);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 16);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 32);\n+            long maskMove = maskPrefix & b;\n+            b = (b ^ maskMove) | (maskMove >>> (1 << i));\n+            long t = a & maskMove;\n+            a = (a ^ t) | (t >>> (1 << i));\n+            maskCount = maskCount & ~maskPrefix;\n@@ -1235,0 +1233,27 @@\n+    static long EXPANDBITS_scalar(long a, long b) {\n+        long originalMask = b;\n+        long maskCount = ~b << 1;\n+        long[] array = new long[6];\n+        int iters = 6;\n+\n+        for (int j = 0; j < iters; j++) {\n+            long maskPrefix = maskCount  ^ (maskCount  << 1);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 2);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 4);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 8);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 16);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 32);\n+            long maskMove = maskPrefix & b;\n+            array[j] = maskMove;\n+            b = (b ^ maskMove) | (maskMove >>> (1 << j));\n+            maskCount = maskCount & ~maskPrefix;\n+        }\n+\n+        for (int j = iters-1; j >= 0; j--) {\n+            long maskMove = array[j];\n+            long t = a << (1 << j);\n+            a = (a & ~maskMove) | (t & maskMove);\n+        }\n+        return (a & originalMask);\n+    }\n+\n@@ -2008,0 +2033,44 @@\n+    static long EXPAND_BITS(long a, long b) {\n+        return (long)(EXPANDBITS_scalar(a,b));\n+    }\n+\n+    @Test(dataProvider = \"longBinaryOpProvider\")\n+    static void EXPAND_BITSLongMaxVectorTests(IntFunction<long[]> fa, IntFunction<long[]> fb) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] b = fb.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                LongVector bv = LongVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.EXPAND_BITS, bv).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, LongMaxVectorTests::EXPAND_BITS);\n+    }\n+\n+\n+\n+    @Test(dataProvider = \"longBinaryOpMaskProvider\")\n+    static void EXPAND_BITSLongMaxVectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n+                                          IntFunction<boolean[]> fm) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] b = fb.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Long> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                LongVector bv = LongVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.EXPAND_BITS, bv, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, mask, LongMaxVectorTests::EXPAND_BITS);\n+    }\n+\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/LongMaxVectorTests.java","additions":84,"deletions":15,"binary":false,"changes":99,"status":"modified"},{"patch":"@@ -1219,20 +1219,0 @@\n-    static short COMPRESSBITS_scalar(short a, short b) {\n-        short prefix_mask, move_mask, temp;\n-        a = (short) (a & b);\n-        short count_mask = (short) (~b << 1);\n-        short mp, mv, t;\n-        int iters = 4;\n-\n-        for (int i = 0; i < iters; i++) {\n-            prefix_mask = (short) (count_mask  ^ (count_mask  << 1));\n-            prefix_mask = (short) (prefix_mask ^ (prefix_mask << 2));\n-            prefix_mask = (short) (prefix_mask ^ (prefix_mask << 4));\n-            prefix_mask = (short) (prefix_mask ^ (prefix_mask << 8));\n-            move_mask = (short) (prefix_mask & b);\n-            b = (short)(b ^ move_mask | (move_mask >> (1 << i)));\n-            temp = (short) (a & move_mask);\n-            a = (short) (a ^ temp | (temp >> (1 << i)));\n-            count_mask = (short) (count_mask & ~prefix_mask);\n-        }\n-        return a;\n-    }\n@@ -1964,20 +1944,0 @@\n-    static short COMPRESS_BITS(short a, short b) {\n-        return (short)(COMPRESSBITS_scalar(a,b));\n-    }\n-\n-    @Test(dataProvider = \"shortBinaryOpProvider\")\n-    static void COMPRESS_BITSShort128VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n-        short[] a = fa.apply(SPECIES.length());\n-        short[] b = fb.apply(SPECIES.length());\n-        short[] r = fr.apply(SPECIES.length());\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n-                ShortVector bv = ShortVector.fromArray(SPECIES, b, i);\n-                av.lanewise(VectorOperators.COMPRESS_BITS, bv).intoArray(r, i);\n-            }\n-        }\n-\n-        assertArraysEquals(r, a, b, Short128VectorTests::COMPRESS_BITS);\n-    }\n@@ -1987,20 +1947,0 @@\n-    @Test(dataProvider = \"shortBinaryOpMaskProvider\")\n-    static void COMPRESS_BITSShort128VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        short[] a = fa.apply(SPECIES.length());\n-        short[] b = fb.apply(SPECIES.length());\n-        short[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Short> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n-                ShortVector bv = ShortVector.fromArray(SPECIES, b, i);\n-                av.lanewise(VectorOperators.COMPRESS_BITS, bv, vmask).intoArray(r, i);\n-            }\n-        }\n-\n-        assertArraysEquals(r, a, b, mask, Short128VectorTests::COMPRESS_BITS);\n-    }\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short128VectorTests.java","additions":0,"deletions":60,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -1219,20 +1219,0 @@\n-    static short COMPRESSBITS_scalar(short a, short b) {\n-        short prefix_mask, move_mask, temp;\n-        a = (short) (a & b);\n-        short count_mask = (short) (~b << 1);\n-        short mp, mv, t;\n-        int iters = 4;\n-\n-        for (int i = 0; i < iters; i++) {\n-            prefix_mask = (short) (count_mask  ^ (count_mask  << 1));\n-            prefix_mask = (short) (prefix_mask ^ (prefix_mask << 2));\n-            prefix_mask = (short) (prefix_mask ^ (prefix_mask << 4));\n-            prefix_mask = (short) (prefix_mask ^ (prefix_mask << 8));\n-            move_mask = (short) (prefix_mask & b);\n-            b = (short)(b ^ move_mask | (move_mask >> (1 << i)));\n-            temp = (short) (a & move_mask);\n-            a = (short) (a ^ temp | (temp >> (1 << i)));\n-            count_mask = (short) (count_mask & ~prefix_mask);\n-        }\n-        return a;\n-    }\n@@ -1964,20 +1944,0 @@\n-    static short COMPRESS_BITS(short a, short b) {\n-        return (short)(COMPRESSBITS_scalar(a,b));\n-    }\n-\n-    @Test(dataProvider = \"shortBinaryOpProvider\")\n-    static void COMPRESS_BITSShort256VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n-        short[] a = fa.apply(SPECIES.length());\n-        short[] b = fb.apply(SPECIES.length());\n-        short[] r = fr.apply(SPECIES.length());\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n-                ShortVector bv = ShortVector.fromArray(SPECIES, b, i);\n-                av.lanewise(VectorOperators.COMPRESS_BITS, bv).intoArray(r, i);\n-            }\n-        }\n-\n-        assertArraysEquals(r, a, b, Short256VectorTests::COMPRESS_BITS);\n-    }\n@@ -1987,20 +1947,0 @@\n-    @Test(dataProvider = \"shortBinaryOpMaskProvider\")\n-    static void COMPRESS_BITSShort256VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        short[] a = fa.apply(SPECIES.length());\n-        short[] b = fb.apply(SPECIES.length());\n-        short[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Short> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n-                ShortVector bv = ShortVector.fromArray(SPECIES, b, i);\n-                av.lanewise(VectorOperators.COMPRESS_BITS, bv, vmask).intoArray(r, i);\n-            }\n-        }\n-\n-        assertArraysEquals(r, a, b, mask, Short256VectorTests::COMPRESS_BITS);\n-    }\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short256VectorTests.java","additions":0,"deletions":60,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -1219,20 +1219,0 @@\n-    static short COMPRESSBITS_scalar(short a, short b) {\n-        short prefix_mask, move_mask, temp;\n-        a = (short) (a & b);\n-        short count_mask = (short) (~b << 1);\n-        short mp, mv, t;\n-        int iters = 4;\n-\n-        for (int i = 0; i < iters; i++) {\n-            prefix_mask = (short) (count_mask  ^ (count_mask  << 1));\n-            prefix_mask = (short) (prefix_mask ^ (prefix_mask << 2));\n-            prefix_mask = (short) (prefix_mask ^ (prefix_mask << 4));\n-            prefix_mask = (short) (prefix_mask ^ (prefix_mask << 8));\n-            move_mask = (short) (prefix_mask & b);\n-            b = (short)(b ^ move_mask | (move_mask >> (1 << i)));\n-            temp = (short) (a & move_mask);\n-            a = (short) (a ^ temp | (temp >> (1 << i)));\n-            count_mask = (short) (count_mask & ~prefix_mask);\n-        }\n-        return a;\n-    }\n@@ -1964,20 +1944,0 @@\n-    static short COMPRESS_BITS(short a, short b) {\n-        return (short)(COMPRESSBITS_scalar(a,b));\n-    }\n-\n-    @Test(dataProvider = \"shortBinaryOpProvider\")\n-    static void COMPRESS_BITSShort512VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n-        short[] a = fa.apply(SPECIES.length());\n-        short[] b = fb.apply(SPECIES.length());\n-        short[] r = fr.apply(SPECIES.length());\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n-                ShortVector bv = ShortVector.fromArray(SPECIES, b, i);\n-                av.lanewise(VectorOperators.COMPRESS_BITS, bv).intoArray(r, i);\n-            }\n-        }\n-\n-        assertArraysEquals(r, a, b, Short512VectorTests::COMPRESS_BITS);\n-    }\n@@ -1987,20 +1947,0 @@\n-    @Test(dataProvider = \"shortBinaryOpMaskProvider\")\n-    static void COMPRESS_BITSShort512VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        short[] a = fa.apply(SPECIES.length());\n-        short[] b = fb.apply(SPECIES.length());\n-        short[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Short> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n-                ShortVector bv = ShortVector.fromArray(SPECIES, b, i);\n-                av.lanewise(VectorOperators.COMPRESS_BITS, bv, vmask).intoArray(r, i);\n-            }\n-        }\n-\n-        assertArraysEquals(r, a, b, mask, Short512VectorTests::COMPRESS_BITS);\n-    }\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short512VectorTests.java","additions":0,"deletions":60,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -1219,20 +1219,0 @@\n-    static short COMPRESSBITS_scalar(short a, short b) {\n-        short prefix_mask, move_mask, temp;\n-        a = (short) (a & b);\n-        short count_mask = (short) (~b << 1);\n-        short mp, mv, t;\n-        int iters = 4;\n-\n-        for (int i = 0; i < iters; i++) {\n-            prefix_mask = (short) (count_mask  ^ (count_mask  << 1));\n-            prefix_mask = (short) (prefix_mask ^ (prefix_mask << 2));\n-            prefix_mask = (short) (prefix_mask ^ (prefix_mask << 4));\n-            prefix_mask = (short) (prefix_mask ^ (prefix_mask << 8));\n-            move_mask = (short) (prefix_mask & b);\n-            b = (short)(b ^ move_mask | (move_mask >> (1 << i)));\n-            temp = (short) (a & move_mask);\n-            a = (short) (a ^ temp | (temp >> (1 << i)));\n-            count_mask = (short) (count_mask & ~prefix_mask);\n-        }\n-        return a;\n-    }\n@@ -1964,20 +1944,0 @@\n-    static short COMPRESS_BITS(short a, short b) {\n-        return (short)(COMPRESSBITS_scalar(a,b));\n-    }\n-\n-    @Test(dataProvider = \"shortBinaryOpProvider\")\n-    static void COMPRESS_BITSShort64VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n-        short[] a = fa.apply(SPECIES.length());\n-        short[] b = fb.apply(SPECIES.length());\n-        short[] r = fr.apply(SPECIES.length());\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n-                ShortVector bv = ShortVector.fromArray(SPECIES, b, i);\n-                av.lanewise(VectorOperators.COMPRESS_BITS, bv).intoArray(r, i);\n-            }\n-        }\n-\n-        assertArraysEquals(r, a, b, Short64VectorTests::COMPRESS_BITS);\n-    }\n@@ -1987,20 +1947,0 @@\n-    @Test(dataProvider = \"shortBinaryOpMaskProvider\")\n-    static void COMPRESS_BITSShort64VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        short[] a = fa.apply(SPECIES.length());\n-        short[] b = fb.apply(SPECIES.length());\n-        short[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Short> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n-                ShortVector bv = ShortVector.fromArray(SPECIES, b, i);\n-                av.lanewise(VectorOperators.COMPRESS_BITS, bv, vmask).intoArray(r, i);\n-            }\n-        }\n-\n-        assertArraysEquals(r, a, b, mask, Short64VectorTests::COMPRESS_BITS);\n-    }\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short64VectorTests.java","additions":0,"deletions":60,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -1224,20 +1224,0 @@\n-    static short COMPRESSBITS_scalar(short a, short b) {\n-        short prefix_mask, move_mask, temp;\n-        a = (short) (a & b);\n-        short count_mask = (short) (~b << 1);\n-        short mp, mv, t;\n-        int iters = 4;\n-\n-        for (int i = 0; i < iters; i++) {\n-            prefix_mask = (short) (count_mask  ^ (count_mask  << 1));\n-            prefix_mask = (short) (prefix_mask ^ (prefix_mask << 2));\n-            prefix_mask = (short) (prefix_mask ^ (prefix_mask << 4));\n-            prefix_mask = (short) (prefix_mask ^ (prefix_mask << 8));\n-            move_mask = (short) (prefix_mask & b);\n-            b = (short)(b ^ move_mask | (move_mask >> (1 << i)));\n-            temp = (short) (a & move_mask);\n-            a = (short) (a ^ temp | (temp >> (1 << i)));\n-            count_mask = (short) (count_mask & ~prefix_mask);\n-        }\n-        return a;\n-    }\n@@ -1969,20 +1949,0 @@\n-    static short COMPRESS_BITS(short a, short b) {\n-        return (short)(COMPRESSBITS_scalar(a,b));\n-    }\n-\n-    @Test(dataProvider = \"shortBinaryOpProvider\")\n-    static void COMPRESS_BITSShortMaxVectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb) {\n-        short[] a = fa.apply(SPECIES.length());\n-        short[] b = fb.apply(SPECIES.length());\n-        short[] r = fr.apply(SPECIES.length());\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n-                ShortVector bv = ShortVector.fromArray(SPECIES, b, i);\n-                av.lanewise(VectorOperators.COMPRESS_BITS, bv).intoArray(r, i);\n-            }\n-        }\n-\n-        assertArraysEquals(r, a, b, ShortMaxVectorTests::COMPRESS_BITS);\n-    }\n@@ -1992,20 +1952,0 @@\n-    @Test(dataProvider = \"shortBinaryOpMaskProvider\")\n-    static void COMPRESS_BITSShortMaxVectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        short[] a = fa.apply(SPECIES.length());\n-        short[] b = fb.apply(SPECIES.length());\n-        short[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Short> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n-                ShortVector bv = ShortVector.fromArray(SPECIES, b, i);\n-                av.lanewise(VectorOperators.COMPRESS_BITS, bv, vmask).intoArray(r, i);\n-            }\n-        }\n-\n-        assertArraysEquals(r, a, b, mask, ShortMaxVectorTests::COMPRESS_BITS);\n-    }\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ShortMaxVectorTests.java","additions":0,"deletions":60,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -406,1 +406,2 @@\n-gen_binary_alu_op \"COMPRESS_BITS\" \"COMPRESSBITS_scalar(a,b)\" \"BITWISE\"\n+gen_binary_alu_op \"COMPRESS_BITS\" \"COMPRESSBITS_scalar(a,b)\" \"intOrLong\"\n+gen_binary_alu_op \"EXPAND_BITS\" \"EXPANDBITS_scalar(a,b)\" \"intOrLong\"\n","filename":"test\/jdk\/jdk\/incubator\/vector\/gen-template.sh","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -576,1 +576,1 @@\n-#if[BITWISE]\n+#if[intOrLong]\n@@ -595,1 +595,1 @@\n-#end[BITWISE]\n+#end[intOrLong]\n@@ -597,1 +597,1 @@\n-#if[BITWISE]\n+#if[intOrLong]\n@@ -620,1 +620,47 @@\n-#end[BITWISE]\n+#end[intOrLong]\n+\n+#if[intOrLong]\n+\n+\n+    @Benchmark\n+    public void EXPAND_BITS(Blackhole bh) {\n+        $type$[] as = fa.apply(size);\n+        $type$[] bs = fb.apply(size);\n+        $type$[] rs = fr.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < as.length; i++) {\n+                $type$ a = as[i];\n+                $type$ b = bs[i];\n+                rs[i] = ($type$)(EXPANDBITS_scalar(a,b));\n+            }\n+        }\n+\n+        bh.consume(rs);\n+    }\n+#end[intOrLong]\n+\n+#if[intOrLong]\n+\n+\n+    @Benchmark\n+    public void EXPAND_BITSMasked(Blackhole bh) {\n+        $type$[] as = fa.apply(size);\n+        $type$[] bs = fb.apply(size);\n+        $type$[] rs = fr.apply(size);\n+        boolean[] ms = fm.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < as.length; i++) {\n+                $type$ a = as[i];\n+                $type$ b = bs[i];\n+                if (ms[i % ms.length]) {\n+                    rs[i] = ($type$)(EXPANDBITS_scalar(a,b));\n+                } else {\n+                    rs[i] = a;\n+                }\n+            }\n+        }\n+        bh.consume(rs);\n+    }\n+#end[intOrLong]\n","filename":"test\/jdk\/jdk\/incubator\/vector\/perf_scalar_tests.template","additions":50,"deletions":4,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -532,1 +532,1 @@\n-#if[BITWISE]\n+#if[intOrLong]\n@@ -551,1 +551,1 @@\n-#end[BITWISE]\n+#end[intOrLong]\n@@ -553,1 +553,1 @@\n-#if[BITWISE]\n+#if[intOrLong]\n@@ -574,1 +574,45 @@\n-#end[BITWISE]\n+#end[intOrLong]\n+\n+#if[intOrLong]\n+\n+\n+    @Benchmark\n+    public void EXPAND_BITS(Blackhole bh) {\n+        $type$[] a = fa.apply(SPECIES.length());\n+        $type$[] b = fb.apply(SPECIES.length());\n+        $type$[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);\n+                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.EXPAND_BITS, bv).intoArray(r, i);\n+            }\n+        }\n+\n+        bh.consume(r);\n+    }\n+#end[intOrLong]\n+\n+#if[intOrLong]\n+\n+\n+    @Benchmark\n+    public void EXPAND_BITSMasked(Blackhole bh) {\n+        $type$[] a = fa.apply(SPECIES.length());\n+        $type$[] b = fb.apply(SPECIES.length());\n+        $type$[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);\n+                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.EXPAND_BITS, bv, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        bh.consume(r);\n+    }\n+#end[intOrLong]\n","filename":"test\/jdk\/jdk\/incubator\/vector\/perf_tests.template","additions":48,"deletions":4,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -1503,5 +1503,0 @@\n-    static $type$ COMPRESSBITS_scalar($type$ a, $type$ b) {\n-        $type$ prefix_mask, move_mask, temp;\n-        a = ($type$) (a & b);\n-        $type$ count_mask = ($type$) (~b << 1);\n-        $type$ mp, mv, t;\n@@ -1509,0 +1504,3 @@\n+    static $type$ COMPRESSBITS_scalar($type$ a, $type$ b) {\n+        a = a & b;\n+        $type$ maskCount = ~b << 1;\n@@ -1514,7 +1512,0 @@\n-#end[intOrLong]\n-#if[short]\n-        int iters = 4;\n-#end[short]\n-#if[byte]\n-        int iters = 3;\n-#end[byte]\n@@ -1523,8 +1514,5 @@\n-            prefix_mask = ($type$) (count_mask  ^ (count_mask  << 1));\n-            prefix_mask = ($type$) (prefix_mask ^ (prefix_mask << 2));\n-            prefix_mask = ($type$) (prefix_mask ^ (prefix_mask << 4));\n-#if[!byte]\n-            prefix_mask = ($type$) (prefix_mask ^ (prefix_mask << 8));\n-#end[!byte]\n-#if[intOrLong]\n-            prefix_mask = ($type$) (prefix_mask ^ (prefix_mask << 16));\n+            $type$ maskPrefix = maskCount  ^ (maskCount << 1);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 2);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 4);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 8);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 16);\n@@ -1532,1 +1520,1 @@\n-            prefix_mask = ($type$) (prefix_mask ^ (prefix_mask << 32));\n+            maskPrefix = maskPrefix ^ (maskPrefix << 32);\n@@ -1534,6 +1522,5 @@\n-#end[intOrLong]\n-            move_mask = ($type$) (prefix_mask & b);\n-            b = ($type$)(b ^ move_mask | (move_mask >> (1 << i)));\n-            temp = ($type$) (a & move_mask);\n-            a = ($type$) (a ^ temp | (temp >> (1 << i)));\n-            count_mask = ($type$) (count_mask & ~prefix_mask);\n+            $type$ maskMove = maskPrefix & b;\n+            b = (b ^ maskMove) | (maskMove >>> (1 << i));\n+            $type$ t = a & maskMove;\n+            a = (a ^ t) | (t >>> (1 << i));\n+            maskCount = maskCount & ~maskPrefix;\n@@ -1544,0 +1531,35 @@\n+    static $type$ EXPANDBITS_scalar($type$ a, $type$ b) {\n+        $type$ originalMask = b;\n+        $type$ maskCount = ~b << 1;\n+#if[int]\n+        $type$[] array = new $type$[5];\n+        int iters = 5;\n+#else[int]\n+        $type$[] array = new $type$[6];\n+        int iters = 6;\n+#end[int]\n+\n+        for (int j = 0; j < iters; j++) {\n+            $type$ maskPrefix = maskCount  ^ (maskCount  << 1);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 2);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 4);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 8);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 16);\n+#if[long]\n+            maskPrefix = maskPrefix ^ (maskPrefix << 32);\n+#end[long]\n+            $type$ maskMove = maskPrefix & b;\n+            array[j] = maskMove;\n+            b = (b ^ maskMove) | (maskMove >>> (1 << j));\n+            maskCount = maskCount & ~maskPrefix;\n+        }\n+\n+        for (int j = iters-1; j >= 0; j--) {\n+            $type$ maskMove = array[j];\n+            $type$ t = a << (1 << j);\n+            a = (a & ~maskMove) | (t & maskMove);\n+        }\n+        return (a & originalMask);\n+    }\n+#end[intOrLong]\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-header.template","additions":49,"deletions":27,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -1503,5 +1503,0 @@\n-    static $type$ COMPRESSBITS_scalar($type$ a, $type$ b) {\n-        $type$ prefix_mask, move_mask, temp;\n-        a = ($type$) (a & b);\n-        $type$ count_mask = ($type$) (~b << 1);\n-        $type$ mp, mv, t;\n@@ -1509,0 +1504,3 @@\n+    static $type$ COMPRESSBITS_scalar($type$ a, $type$ b) {\n+        a = a & b;\n+        $type$ maskCount = ~b << 1;\n@@ -1514,7 +1512,0 @@\n-#end[intOrLong]\n-#if[short]\n-        int iters = 4;\n-#end[short]\n-#if[byte]\n-        int iters = 3;\n-#end[byte]\n@@ -1523,8 +1514,5 @@\n-            prefix_mask = ($type$) (count_mask  ^ (count_mask  << 1));\n-            prefix_mask = ($type$) (prefix_mask ^ (prefix_mask << 2));\n-            prefix_mask = ($type$) (prefix_mask ^ (prefix_mask << 4));\n-#if[!byte]\n-            prefix_mask = ($type$) (prefix_mask ^ (prefix_mask << 8));\n-#end[!byte]\n-#if[intOrLong]\n-            prefix_mask = ($type$) (prefix_mask ^ (prefix_mask << 16));\n+            $type$ maskPrefix = maskCount  ^ (maskCount << 1);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 2);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 4);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 8);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 16);\n@@ -1532,1 +1520,1 @@\n-            prefix_mask = ($type$) (prefix_mask ^ (prefix_mask << 32));\n+            maskPrefix = maskPrefix ^ (maskPrefix << 32);\n@@ -1534,6 +1522,5 @@\n-#end[intOrLong]\n-            move_mask = ($type$) (prefix_mask & b);\n-            b = ($type$)(b ^ move_mask | (move_mask >> (1 << i)));\n-            temp = ($type$) (a & move_mask);\n-            a = ($type$) (a ^ temp | (temp >> (1 << i)));\n-            count_mask = ($type$) (count_mask & ~prefix_mask);\n+            $type$ maskMove = maskPrefix & b;\n+            b = (b ^ maskMove) | (maskMove >>> (1 << i));\n+            $type$ t = a & maskMove;\n+            a = (a ^ t) | (t >>> (1 << i));\n+            maskCount = maskCount & ~maskPrefix;\n@@ -1544,0 +1531,35 @@\n+    static $type$ EXPANDBITS_scalar($type$ a, $type$ b) {\n+        $type$ originalMask = b;\n+        $type$ maskCount = ~b << 1;\n+#if[int]\n+        $type$[] array = new $type$[5];\n+        int iters = 5;\n+#else[int]\n+        $type$[] array = new $type$[6];\n+        int iters = 6;\n+#end[int]\n+\n+        for (int j = 0; j < iters; j++) {\n+            $type$ maskPrefix = maskCount  ^ (maskCount  << 1);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 2);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 4);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 8);\n+            maskPrefix = maskPrefix ^ (maskPrefix << 16);\n+#if[long]\n+            maskPrefix = maskPrefix ^ (maskPrefix << 32);\n+#end[long]\n+            $type$ maskMove = maskPrefix & b;\n+            array[j] = maskMove;\n+            b = (b ^ maskMove) | (maskMove >>> (1 << j));\n+            maskCount = maskCount & ~maskPrefix;\n+        }\n+\n+        for (int j = iters-1; j >= 0; j--) {\n+            $type$ maskMove = array[j];\n+            $type$ t = a << (1 << j);\n+            a = (a & ~maskMove) | (t & maskMove);\n+        }\n+        return (a & originalMask);\n+    }\n+#end[intOrLong]\n+\n@@ -2407,1 +2429,1 @@\n-#if[BITWISE]\n+#if[intOrLong]\n@@ -2429,1 +2451,1 @@\n-#end[BITWISE]\n+#end[intOrLong]\n@@ -2431,1 +2453,1 @@\n-#if[BITWISE]\n+#if[intOrLong]\n@@ -2453,1 +2475,49 @@\n-#end[BITWISE]\n+#end[intOrLong]\n+\n+#if[intOrLong]\n+\n+    static $type$ EXPAND_BITS($type$ a, $type$ b) {\n+        return ($type$)(EXPANDBITS_scalar(a,b));\n+    }\n+\n+    @Test(dataProvider = \"$type$BinaryOpProvider\")\n+    static void EXPAND_BITS$vectorteststype$(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {\n+        $type$[] a = fa.apply(SPECIES.length());\n+        $type$[] b = fb.apply(SPECIES.length());\n+        $type$[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);\n+                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.EXPAND_BITS, bv).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, $vectorteststype$::EXPAND_BITS);\n+    }\n+#end[intOrLong]\n+\n+#if[intOrLong]\n+\n+\n+    @Test(dataProvider = \"$type$BinaryOpMaskProvider\")\n+    static void EXPAND_BITS$vectorteststype$Masked(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,\n+                                          IntFunction<boolean[]> fm) {\n+        $type$[] a = fa.apply(SPECIES.length());\n+        $type$[] b = fb.apply(SPECIES.length());\n+        $type$[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);\n+                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.EXPAND_BITS, bv, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, mask, $vectorteststype$::EXPAND_BITS);\n+    }\n+#end[intOrLong]\n","filename":"test\/jdk\/jdk\/incubator\/vector\/unit_tests.template","additions":101,"deletions":31,"binary":false,"changes":132,"status":"modified"},{"patch":"@@ -466,18 +466,0 @@\n-    @Benchmark\n-    public void COMPRESS_BITS(Blackhole bh) {\n-        byte[] a = fa.apply(SPECIES.length());\n-        byte[] b = fb.apply(SPECIES.length());\n-        byte[] r = fr.apply(SPECIES.length());\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n-                ByteVector bv = ByteVector.fromArray(SPECIES, b, i);\n-                av.lanewise(VectorOperators.COMPRESS_BITS, bv).intoArray(r, i);\n-            }\n-        }\n-\n-        bh.consume(r);\n-    }\n-\n-\n@@ -485,18 +467,0 @@\n-    @Benchmark\n-    public void COMPRESS_BITSMasked(Blackhole bh) {\n-        byte[] a = fa.apply(SPECIES.length());\n-        byte[] b = fb.apply(SPECIES.length());\n-        byte[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Byte> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n-                ByteVector bv = ByteVector.fromArray(SPECIES, b, i);\n-                av.lanewise(VectorOperators.COMPRESS_BITS, bv, vmask).intoArray(r, i);\n-            }\n-        }\n-\n-        bh.consume(r);\n-    }\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte128Vector.java","additions":0,"deletions":36,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -466,18 +466,0 @@\n-    @Benchmark\n-    public void COMPRESS_BITS(Blackhole bh) {\n-        byte[] a = fa.apply(SPECIES.length());\n-        byte[] b = fb.apply(SPECIES.length());\n-        byte[] r = fr.apply(SPECIES.length());\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n-                ByteVector bv = ByteVector.fromArray(SPECIES, b, i);\n-                av.lanewise(VectorOperators.COMPRESS_BITS, bv).intoArray(r, i);\n-            }\n-        }\n-\n-        bh.consume(r);\n-    }\n-\n-\n@@ -485,18 +467,0 @@\n-    @Benchmark\n-    public void COMPRESS_BITSMasked(Blackhole bh) {\n-        byte[] a = fa.apply(SPECIES.length());\n-        byte[] b = fb.apply(SPECIES.length());\n-        byte[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Byte> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n-                ByteVector bv = ByteVector.fromArray(SPECIES, b, i);\n-                av.lanewise(VectorOperators.COMPRESS_BITS, bv, vmask).intoArray(r, i);\n-            }\n-        }\n-\n-        bh.consume(r);\n-    }\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte256Vector.java","additions":0,"deletions":36,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -466,18 +466,0 @@\n-    @Benchmark\n-    public void COMPRESS_BITS(Blackhole bh) {\n-        byte[] a = fa.apply(SPECIES.length());\n-        byte[] b = fb.apply(SPECIES.length());\n-        byte[] r = fr.apply(SPECIES.length());\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n-                ByteVector bv = ByteVector.fromArray(SPECIES, b, i);\n-                av.lanewise(VectorOperators.COMPRESS_BITS, bv).intoArray(r, i);\n-            }\n-        }\n-\n-        bh.consume(r);\n-    }\n-\n-\n@@ -485,18 +467,0 @@\n-    @Benchmark\n-    public void COMPRESS_BITSMasked(Blackhole bh) {\n-        byte[] a = fa.apply(SPECIES.length());\n-        byte[] b = fb.apply(SPECIES.length());\n-        byte[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Byte> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n-                ByteVector bv = ByteVector.fromArray(SPECIES, b, i);\n-                av.lanewise(VectorOperators.COMPRESS_BITS, bv, vmask).intoArray(r, i);\n-            }\n-        }\n-\n-        bh.consume(r);\n-    }\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte512Vector.java","additions":0,"deletions":36,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -466,18 +466,0 @@\n-    @Benchmark\n-    public void COMPRESS_BITS(Blackhole bh) {\n-        byte[] a = fa.apply(SPECIES.length());\n-        byte[] b = fb.apply(SPECIES.length());\n-        byte[] r = fr.apply(SPECIES.length());\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n-                ByteVector bv = ByteVector.fromArray(SPECIES, b, i);\n-                av.lanewise(VectorOperators.COMPRESS_BITS, bv).intoArray(r, i);\n-            }\n-        }\n-\n-        bh.consume(r);\n-    }\n-\n-\n@@ -485,18 +467,0 @@\n-    @Benchmark\n-    public void COMPRESS_BITSMasked(Blackhole bh) {\n-        byte[] a = fa.apply(SPECIES.length());\n-        byte[] b = fb.apply(SPECIES.length());\n-        byte[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Byte> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n-                ByteVector bv = ByteVector.fromArray(SPECIES, b, i);\n-                av.lanewise(VectorOperators.COMPRESS_BITS, bv, vmask).intoArray(r, i);\n-            }\n-        }\n-\n-        bh.consume(r);\n-    }\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte64Vector.java","additions":0,"deletions":36,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -466,18 +466,0 @@\n-    @Benchmark\n-    public void COMPRESS_BITS(Blackhole bh) {\n-        byte[] a = fa.apply(SPECIES.length());\n-        byte[] b = fb.apply(SPECIES.length());\n-        byte[] r = fr.apply(SPECIES.length());\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n-                ByteVector bv = ByteVector.fromArray(SPECIES, b, i);\n-                av.lanewise(VectorOperators.COMPRESS_BITS, bv).intoArray(r, i);\n-            }\n-        }\n-\n-        bh.consume(r);\n-    }\n-\n-\n@@ -485,18 +467,0 @@\n-    @Benchmark\n-    public void COMPRESS_BITSMasked(Blackhole bh) {\n-        byte[] a = fa.apply(SPECIES.length());\n-        byte[] b = fb.apply(SPECIES.length());\n-        byte[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Byte> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n-                ByteVector bv = ByteVector.fromArray(SPECIES, b, i);\n-                av.lanewise(VectorOperators.COMPRESS_BITS, bv, vmask).intoArray(r, i);\n-            }\n-        }\n-\n-        bh.consume(r);\n-    }\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ByteMaxVector.java","additions":0,"deletions":36,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -470,25 +470,0 @@\n-    @Benchmark\n-    public void COMPRESS_BITS(Blackhole bh) {\n-        byte[] as = fa.apply(size);\n-        byte[] bs = fb.apply(size);\n-        byte[] rs = fr.apply(size);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < as.length; i++) {\n-                byte a = as[i];\n-                byte b = bs[i];\n-                rs[i] = (byte)(COMPRESSBITS_scalar(a,b));\n-            }\n-        }\n-\n-        bh.consume(rs);\n-    }\n-\n-\n-\n-    @Benchmark\n-    public void COMPRESS_BITSMasked(Blackhole bh) {\n-        byte[] as = fa.apply(size);\n-        byte[] bs = fb.apply(size);\n-        byte[] rs = fr.apply(size);\n-        boolean[] ms = fm.apply(size);\n@@ -496,13 +471,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < as.length; i++) {\n-                byte a = as[i];\n-                byte b = bs[i];\n-                if (ms[i % ms.length]) {\n-                    rs[i] = (byte)(COMPRESSBITS_scalar(a,b));\n-                } else {\n-                    rs[i] = a;\n-                }\n-            }\n-        }\n-        bh.consume(rs);\n-    }\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ByteScalar.java","additions":0,"deletions":38,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -337,0 +337,2 @@\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double128Vector.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -337,0 +337,2 @@\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double256Vector.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -337,0 +337,2 @@\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double512Vector.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -337,0 +337,2 @@\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double64Vector.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -337,0 +337,2 @@\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/DoubleMaxVector.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -355,0 +355,2 @@\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/DoubleScalar.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -337,0 +337,2 @@\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float128Vector.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -337,0 +337,2 @@\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float256Vector.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -337,0 +337,2 @@\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float512Vector.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -337,0 +337,2 @@\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float64Vector.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -337,0 +337,2 @@\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/FloatMaxVector.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -355,0 +355,2 @@\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/FloatScalar.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -506,0 +506,40 @@\n+    @Benchmark\n+    public void EXPAND_BITS(Blackhole bh) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] b = fb.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                IntVector bv = IntVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.EXPAND_BITS, bv).intoArray(r, i);\n+            }\n+        }\n+\n+        bh.consume(r);\n+    }\n+\n+\n+\n+    @Benchmark\n+    public void EXPAND_BITSMasked(Blackhole bh) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] b = fb.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Integer> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                IntVector bv = IntVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.EXPAND_BITS, bv, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        bh.consume(r);\n+    }\n+\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int128Vector.java","additions":40,"deletions":0,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -506,0 +506,40 @@\n+    @Benchmark\n+    public void EXPAND_BITS(Blackhole bh) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] b = fb.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                IntVector bv = IntVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.EXPAND_BITS, bv).intoArray(r, i);\n+            }\n+        }\n+\n+        bh.consume(r);\n+    }\n+\n+\n+\n+    @Benchmark\n+    public void EXPAND_BITSMasked(Blackhole bh) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] b = fb.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Integer> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                IntVector bv = IntVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.EXPAND_BITS, bv, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        bh.consume(r);\n+    }\n+\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int256Vector.java","additions":40,"deletions":0,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -506,0 +506,40 @@\n+    @Benchmark\n+    public void EXPAND_BITS(Blackhole bh) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] b = fb.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                IntVector bv = IntVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.EXPAND_BITS, bv).intoArray(r, i);\n+            }\n+        }\n+\n+        bh.consume(r);\n+    }\n+\n+\n+\n+    @Benchmark\n+    public void EXPAND_BITSMasked(Blackhole bh) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] b = fb.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Integer> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                IntVector bv = IntVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.EXPAND_BITS, bv, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        bh.consume(r);\n+    }\n+\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int512Vector.java","additions":40,"deletions":0,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -506,0 +506,40 @@\n+    @Benchmark\n+    public void EXPAND_BITS(Blackhole bh) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] b = fb.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                IntVector bv = IntVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.EXPAND_BITS, bv).intoArray(r, i);\n+            }\n+        }\n+\n+        bh.consume(r);\n+    }\n+\n+\n+\n+    @Benchmark\n+    public void EXPAND_BITSMasked(Blackhole bh) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] b = fb.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Integer> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                IntVector bv = IntVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.EXPAND_BITS, bv, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        bh.consume(r);\n+    }\n+\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int64Vector.java","additions":40,"deletions":0,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -506,0 +506,40 @@\n+    @Benchmark\n+    public void EXPAND_BITS(Blackhole bh) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] b = fb.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                IntVector bv = IntVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.EXPAND_BITS, bv).intoArray(r, i);\n+            }\n+        }\n+\n+        bh.consume(r);\n+    }\n+\n+\n+\n+    @Benchmark\n+    public void EXPAND_BITSMasked(Blackhole bh) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] b = fb.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Integer> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                IntVector bv = IntVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.EXPAND_BITS, bv, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        bh.consume(r);\n+    }\n+\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/IntMaxVector.java","additions":40,"deletions":0,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -509,0 +509,42 @@\n+    @Benchmark\n+    public void EXPAND_BITS(Blackhole bh) {\n+        int[] as = fa.apply(size);\n+        int[] bs = fb.apply(size);\n+        int[] rs = fr.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < as.length; i++) {\n+                int a = as[i];\n+                int b = bs[i];\n+                rs[i] = (int)(EXPANDBITS_scalar(a,b));\n+            }\n+        }\n+\n+        bh.consume(rs);\n+    }\n+\n+\n+\n+    @Benchmark\n+    public void EXPAND_BITSMasked(Blackhole bh) {\n+        int[] as = fa.apply(size);\n+        int[] bs = fb.apply(size);\n+        int[] rs = fr.apply(size);\n+        boolean[] ms = fm.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < as.length; i++) {\n+                int a = as[i];\n+                int b = bs[i];\n+                if (ms[i % ms.length]) {\n+                    rs[i] = (int)(EXPANDBITS_scalar(a,b));\n+                } else {\n+                    rs[i] = a;\n+                }\n+            }\n+        }\n+        bh.consume(rs);\n+    }\n+\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/IntScalar.java","additions":42,"deletions":0,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -506,0 +506,40 @@\n+    @Benchmark\n+    public void EXPAND_BITS(Blackhole bh) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] b = fb.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                LongVector bv = LongVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.EXPAND_BITS, bv).intoArray(r, i);\n+            }\n+        }\n+\n+        bh.consume(r);\n+    }\n+\n+\n+\n+    @Benchmark\n+    public void EXPAND_BITSMasked(Blackhole bh) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] b = fb.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Long> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                LongVector bv = LongVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.EXPAND_BITS, bv, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        bh.consume(r);\n+    }\n+\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long128Vector.java","additions":40,"deletions":0,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -506,0 +506,40 @@\n+    @Benchmark\n+    public void EXPAND_BITS(Blackhole bh) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] b = fb.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                LongVector bv = LongVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.EXPAND_BITS, bv).intoArray(r, i);\n+            }\n+        }\n+\n+        bh.consume(r);\n+    }\n+\n+\n+\n+    @Benchmark\n+    public void EXPAND_BITSMasked(Blackhole bh) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] b = fb.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Long> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                LongVector bv = LongVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.EXPAND_BITS, bv, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        bh.consume(r);\n+    }\n+\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long256Vector.java","additions":40,"deletions":0,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -506,0 +506,40 @@\n+    @Benchmark\n+    public void EXPAND_BITS(Blackhole bh) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] b = fb.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                LongVector bv = LongVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.EXPAND_BITS, bv).intoArray(r, i);\n+            }\n+        }\n+\n+        bh.consume(r);\n+    }\n+\n+\n+\n+    @Benchmark\n+    public void EXPAND_BITSMasked(Blackhole bh) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] b = fb.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Long> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                LongVector bv = LongVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.EXPAND_BITS, bv, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        bh.consume(r);\n+    }\n+\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long512Vector.java","additions":40,"deletions":0,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -506,0 +506,40 @@\n+    @Benchmark\n+    public void EXPAND_BITS(Blackhole bh) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] b = fb.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                LongVector bv = LongVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.EXPAND_BITS, bv).intoArray(r, i);\n+            }\n+        }\n+\n+        bh.consume(r);\n+    }\n+\n+\n+\n+    @Benchmark\n+    public void EXPAND_BITSMasked(Blackhole bh) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] b = fb.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Long> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                LongVector bv = LongVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.EXPAND_BITS, bv, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        bh.consume(r);\n+    }\n+\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long64Vector.java","additions":40,"deletions":0,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -506,0 +506,40 @@\n+    @Benchmark\n+    public void EXPAND_BITS(Blackhole bh) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] b = fb.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                LongVector bv = LongVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.EXPAND_BITS, bv).intoArray(r, i);\n+            }\n+        }\n+\n+        bh.consume(r);\n+    }\n+\n+\n+\n+    @Benchmark\n+    public void EXPAND_BITSMasked(Blackhole bh) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] b = fb.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Long> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                LongVector bv = LongVector.fromArray(SPECIES, b, i);\n+                av.lanewise(VectorOperators.EXPAND_BITS, bv, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        bh.consume(r);\n+    }\n+\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/LongMaxVector.java","additions":40,"deletions":0,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -509,0 +509,42 @@\n+    @Benchmark\n+    public void EXPAND_BITS(Blackhole bh) {\n+        long[] as = fa.apply(size);\n+        long[] bs = fb.apply(size);\n+        long[] rs = fr.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < as.length; i++) {\n+                long a = as[i];\n+                long b = bs[i];\n+                rs[i] = (long)(EXPANDBITS_scalar(a,b));\n+            }\n+        }\n+\n+        bh.consume(rs);\n+    }\n+\n+\n+\n+    @Benchmark\n+    public void EXPAND_BITSMasked(Blackhole bh) {\n+        long[] as = fa.apply(size);\n+        long[] bs = fb.apply(size);\n+        long[] rs = fr.apply(size);\n+        boolean[] ms = fm.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < as.length; i++) {\n+                long a = as[i];\n+                long b = bs[i];\n+                if (ms[i % ms.length]) {\n+                    rs[i] = (long)(EXPANDBITS_scalar(a,b));\n+                } else {\n+                    rs[i] = a;\n+                }\n+            }\n+        }\n+        bh.consume(rs);\n+    }\n+\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/LongScalar.java","additions":42,"deletions":0,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -466,18 +466,0 @@\n-    @Benchmark\n-    public void COMPRESS_BITS(Blackhole bh) {\n-        short[] a = fa.apply(SPECIES.length());\n-        short[] b = fb.apply(SPECIES.length());\n-        short[] r = fr.apply(SPECIES.length());\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n-                ShortVector bv = ShortVector.fromArray(SPECIES, b, i);\n-                av.lanewise(VectorOperators.COMPRESS_BITS, bv).intoArray(r, i);\n-            }\n-        }\n-\n-        bh.consume(r);\n-    }\n-\n-\n@@ -485,18 +467,0 @@\n-    @Benchmark\n-    public void COMPRESS_BITSMasked(Blackhole bh) {\n-        short[] a = fa.apply(SPECIES.length());\n-        short[] b = fb.apply(SPECIES.length());\n-        short[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Short> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n-                ShortVector bv = ShortVector.fromArray(SPECIES, b, i);\n-                av.lanewise(VectorOperators.COMPRESS_BITS, bv, vmask).intoArray(r, i);\n-            }\n-        }\n-\n-        bh.consume(r);\n-    }\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short128Vector.java","additions":0,"deletions":36,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -466,18 +466,0 @@\n-    @Benchmark\n-    public void COMPRESS_BITS(Blackhole bh) {\n-        short[] a = fa.apply(SPECIES.length());\n-        short[] b = fb.apply(SPECIES.length());\n-        short[] r = fr.apply(SPECIES.length());\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n-                ShortVector bv = ShortVector.fromArray(SPECIES, b, i);\n-                av.lanewise(VectorOperators.COMPRESS_BITS, bv).intoArray(r, i);\n-            }\n-        }\n-\n-        bh.consume(r);\n-    }\n-\n-\n@@ -485,18 +467,0 @@\n-    @Benchmark\n-    public void COMPRESS_BITSMasked(Blackhole bh) {\n-        short[] a = fa.apply(SPECIES.length());\n-        short[] b = fb.apply(SPECIES.length());\n-        short[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Short> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n-                ShortVector bv = ShortVector.fromArray(SPECIES, b, i);\n-                av.lanewise(VectorOperators.COMPRESS_BITS, bv, vmask).intoArray(r, i);\n-            }\n-        }\n-\n-        bh.consume(r);\n-    }\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short256Vector.java","additions":0,"deletions":36,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -466,18 +466,0 @@\n-    @Benchmark\n-    public void COMPRESS_BITS(Blackhole bh) {\n-        short[] a = fa.apply(SPECIES.length());\n-        short[] b = fb.apply(SPECIES.length());\n-        short[] r = fr.apply(SPECIES.length());\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n-                ShortVector bv = ShortVector.fromArray(SPECIES, b, i);\n-                av.lanewise(VectorOperators.COMPRESS_BITS, bv).intoArray(r, i);\n-            }\n-        }\n-\n-        bh.consume(r);\n-    }\n-\n-\n@@ -485,18 +467,0 @@\n-    @Benchmark\n-    public void COMPRESS_BITSMasked(Blackhole bh) {\n-        short[] a = fa.apply(SPECIES.length());\n-        short[] b = fb.apply(SPECIES.length());\n-        short[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Short> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n-                ShortVector bv = ShortVector.fromArray(SPECIES, b, i);\n-                av.lanewise(VectorOperators.COMPRESS_BITS, bv, vmask).intoArray(r, i);\n-            }\n-        }\n-\n-        bh.consume(r);\n-    }\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short512Vector.java","additions":0,"deletions":36,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -466,18 +466,0 @@\n-    @Benchmark\n-    public void COMPRESS_BITS(Blackhole bh) {\n-        short[] a = fa.apply(SPECIES.length());\n-        short[] b = fb.apply(SPECIES.length());\n-        short[] r = fr.apply(SPECIES.length());\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n-                ShortVector bv = ShortVector.fromArray(SPECIES, b, i);\n-                av.lanewise(VectorOperators.COMPRESS_BITS, bv).intoArray(r, i);\n-            }\n-        }\n-\n-        bh.consume(r);\n-    }\n-\n-\n@@ -485,18 +467,0 @@\n-    @Benchmark\n-    public void COMPRESS_BITSMasked(Blackhole bh) {\n-        short[] a = fa.apply(SPECIES.length());\n-        short[] b = fb.apply(SPECIES.length());\n-        short[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Short> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n-                ShortVector bv = ShortVector.fromArray(SPECIES, b, i);\n-                av.lanewise(VectorOperators.COMPRESS_BITS, bv, vmask).intoArray(r, i);\n-            }\n-        }\n-\n-        bh.consume(r);\n-    }\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short64Vector.java","additions":0,"deletions":36,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -466,18 +466,0 @@\n-    @Benchmark\n-    public void COMPRESS_BITS(Blackhole bh) {\n-        short[] a = fa.apply(SPECIES.length());\n-        short[] b = fb.apply(SPECIES.length());\n-        short[] r = fr.apply(SPECIES.length());\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n-                ShortVector bv = ShortVector.fromArray(SPECIES, b, i);\n-                av.lanewise(VectorOperators.COMPRESS_BITS, bv).intoArray(r, i);\n-            }\n-        }\n-\n-        bh.consume(r);\n-    }\n-\n-\n@@ -485,18 +467,0 @@\n-    @Benchmark\n-    public void COMPRESS_BITSMasked(Blackhole bh) {\n-        short[] a = fa.apply(SPECIES.length());\n-        short[] b = fb.apply(SPECIES.length());\n-        short[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Short> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n-                ShortVector bv = ShortVector.fromArray(SPECIES, b, i);\n-                av.lanewise(VectorOperators.COMPRESS_BITS, bv, vmask).intoArray(r, i);\n-            }\n-        }\n-\n-        bh.consume(r);\n-    }\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ShortMaxVector.java","additions":0,"deletions":36,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -471,25 +471,0 @@\n-    @Benchmark\n-    public void COMPRESS_BITS(Blackhole bh) {\n-        short[] as = fa.apply(size);\n-        short[] bs = fb.apply(size);\n-        short[] rs = fr.apply(size);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < as.length; i++) {\n-                short a = as[i];\n-                short b = bs[i];\n-                rs[i] = (short)(COMPRESSBITS_scalar(a,b));\n-            }\n-        }\n-\n-        bh.consume(rs);\n-    }\n-\n-\n-\n-    @Benchmark\n-    public void COMPRESS_BITSMasked(Blackhole bh) {\n-        short[] as = fa.apply(size);\n-        short[] bs = fb.apply(size);\n-        short[] rs = fr.apply(size);\n-        boolean[] ms = fm.apply(size);\n@@ -497,13 +472,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < as.length; i++) {\n-                short a = as[i];\n-                short b = bs[i];\n-                if (ms[i % ms.length]) {\n-                    rs[i] = (short)(COMPRESSBITS_scalar(a,b));\n-                } else {\n-                    rs[i] = a;\n-                }\n-            }\n-        }\n-        bh.consume(rs);\n-    }\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ShortScalar.java","additions":0,"deletions":38,"binary":false,"changes":38,"status":"modified"}]}