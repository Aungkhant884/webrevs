{"files":[{"patch":"@@ -301,1 +301,9 @@\n-        Object za = Array.newInstance(elementType(), laneCount);\n+        Object za;\n+        \/\/ FIXME: Remove the following special handling for\n+        \/\/ Halffloat till Valhalla integration when Halffloat\n+        \/\/ will become a primitive class.\n+        if (elementType() == Halffloat.class) {\n+           za = Array.newInstance(short.class, laneCount);\n+        } else {\n+           za = Array.newInstance(elementType(), laneCount);\n+        }\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/AbstractSpecies.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -50,2 +50,2 @@\n-            a[i] = 0x3C66;\n-            b[i] = 0x4066;\n+            a[i] = Halffloat.valueOf((float)i);\n+            b[i] = Halffloat.valueOf((float)i);\n@@ -58,3 +58,2 @@\n-            \/\/HalffloatVector bv = HalffloatVector.fromArray(SPECIES, b, i);\n-            \/\/av.add(bv).intoArray(c, i);\n-            av.intoArray(c,i);\n+            HalffloatVector bv = HalffloatVector.fromArray(SPECIES, b, i);\n+            av.add(bv).intoArray(c, i);\n@@ -79,1 +78,6 @@\n-            if (c[i] != a[i] + b[i])\n+            Halffloat hfa = new Halffloat(a[i]);\n+            Halffloat hfb = new Halffloat(b[i]);\n+            Halffloat hfc = new Halffloat(c[i]);\n+\n+            if (hfc.floatValue() != (hfa.floatValue() + hfb.floatValue())) {\n+                System.out.println(\"RES: \" + hfc.floatValue() + \" EXPECTED: \" + (hfa.floatValue() + hfb.floatValue()));\n@@ -81,0 +85,1 @@\n+            }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/AddTest.java","additions":11,"deletions":6,"binary":false,"changes":17,"status":"modified"}]}