{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,17 +36,15 @@\n-@SuppressWarnings(\"cast\")\n-public final class Halffloat {\n-   \/**\n-    * Display here: {@value}\n-   *\/\n-    static final short MAX_VALUE = valueOf(0x1.fffffeP+127f);\n-    \/* Definitions for FP16 *\/\n-    static final short MIN_VALUE = valueOf(0x0.000002P-126f);\n-    \/* Definitions for FP16 *\/\n-    static final short POSITIVE_INFINITY = valueOf(1.0f\/0.0f);\n-    \/* Definitions for FP16 *\/\n-    static final short NEGATIVE_INFINITY = valueOf(-1.0f\/0.0f);\n-    \/* Definitions for FP16 *\/\n-    static final int SIZE = 16;\n-    \/* Definitions for FP16 *\/\n-    static final int BYTES = SIZE \/ Byte.SIZE;\n-    \/* Definitions for FP16 *\/\n+@SuppressWarnings(\"serial\")\n+public final class Halffloat extends Number implements Comparable<Halffloat>{\n+   \/** Definitions for FP16*\/\n+    public static final short MAX_VALUE = 0x7bff;\n+    \/** Definitions for FP16 *\/\n+    public static final short MIN_VALUE = 0x400;\n+    \/** Definitions for FP16 *\/\n+    public static final short POSITIVE_INFINITY = 0x7c00;\n+    \/** Definitions for FP16 *\/\n+    public static final short NEGATIVE_INFINITY = (short)0xfc00;\n+    \/** Definitions for FP16 *\/\n+    public static final int SIZE = 16;\n+    \/** Definitions for FP16 *\/\n+    public static final int BYTES = SIZE \/ Byte.SIZE;\n+    \/** Definitions for FP16 *\/\n@@ -78,0 +76,10 @@\n+\n+    \/**\n+     * Returns true if the number passed is finite\n+     * @param f float value to be checked\n+     * @return boolean value\n+     *\/\n+    public static boolean isFinite(float f) {\n+        return Math.abs(f) <= Halffloat.MAX_VALUE;\n+    }\n+\n@@ -84,0 +92,2 @@\n+        if (!isFinite(f)) return Halffloat.POSITIVE_INFINITY;\n+\n@@ -88,0 +98,16 @@\n+\n+    \/** doublevalue *\/\n+    public double doubleValue() {\n+       return (double) floatValue();\n+    }\n+\n+    \/** longValue *\/\n+    public long longValue() {\n+       return (long) value;\n+    }\n+\n+    \/** IntValue *\/\n+    public int intValue() {\n+       return (int) value;\n+    }\n+\n@@ -112,0 +138,11 @@\n+\n+    \/**\n+       Compares two halffloats\n+     * @param hf value to be compared\n+     * @return 0, 1, -1\n+    *\/\n+    public int compareTo(Halffloat hf) {\n+        float f1 = floatValue();\n+        float f2 = hf.floatValue();\n+        return Float.compare(f1, f2);\n+    }\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Halffloat.java","additions":55,"deletions":18,"binary":false,"changes":73,"status":"modified"}]}