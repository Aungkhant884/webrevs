{"files":[{"patch":"@@ -119,6 +119,7 @@\n-        T_FLOAT   = 6,\n-        T_DOUBLE  = 7,\n-        T_BYTE    = 8,\n-        T_SHORT   = 9,\n-        T_INT     = 10,\n-        T_LONG    = 11;\n+        T_HALFFLOAT = 5,\n+        T_FLOAT     = 6,\n+        T_DOUBLE    = 7,\n+        T_BYTE      = 8,\n+        T_SHORT     = 9,\n+        T_INT       = 10,\n+        T_LONG      = 11;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/vector\/VectorSupport.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -533,0 +533,1 @@\n+        \/\/ FIXME: Add lanetype for Halffloat\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/AbstractVector.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-    HALFFLOAT(Halffloat.class, Short.class, short[].class, 'F', 11, Halffloat.SIZE, T_SHORT);\n+    HALFFLOAT(Halffloat.class, Short.class, short[].class, 'F', 11, Halffloat.SIZE, T_HALFFLOAT);\n@@ -70,1 +70,1 @@\n-        assert(\"FDBSIL\".indexOf(typeChar) == ordinal()) : this;\n+        assert(\"FDBSILH\".indexOf(typeChar) == ordinal()) : this;\n@@ -76,1 +76,1 @@\n-        assert(\"....zcFDBSILoav..\".charAt(basicType) == typeChar);\n+        assert(\"....zHFDBSILoav..\".charAt(basicType) == typeChar);\n@@ -249,1 +249,2 @@\n-            } else {\n+            } else if (value.basicType != T_SHORT) {\n+                \/\/ FIXME: Support asFloating for short to be Halffloat\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LaneType.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -265,0 +265,3 @@\n+        if (etype == Halffloat.class) {\n+            etype = short.class;\n+        }\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/VectorShape.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}