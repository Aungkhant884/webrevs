{"files":[{"patch":"@@ -2168,1 +2168,0 @@\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleVector.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2180,1 +2180,0 @@\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatVector.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -606,32 +606,0 @@\n-            case VECTOR_OP_SIN: return (v0, m) ->\n-                    v0.uOp(m, (i, a) -> (short) Math.sin(a));\n-            case VECTOR_OP_COS: return (v0, m) ->\n-                    v0.uOp(m, (i, a) -> (short) Math.cos(a));\n-            case VECTOR_OP_TAN: return (v0, m) ->\n-                    v0.uOp(m, (i, a) -> (short) Math.tan(a));\n-            case VECTOR_OP_ASIN: return (v0, m) ->\n-                    v0.uOp(m, (i, a) -> (short) Math.asin(a));\n-            case VECTOR_OP_ACOS: return (v0, m) ->\n-                    v0.uOp(m, (i, a) -> (short) Math.acos(a));\n-            case VECTOR_OP_ATAN: return (v0, m) ->\n-                    v0.uOp(m, (i, a) -> (short) Math.atan(a));\n-            case VECTOR_OP_EXP: return (v0, m) ->\n-                    v0.uOp(m, (i, a) -> (short) Math.exp(a));\n-            case VECTOR_OP_LOG: return (v0, m) ->\n-                    v0.uOp(m, (i, a) -> (short) Math.log(a));\n-            case VECTOR_OP_LOG10: return (v0, m) ->\n-                    v0.uOp(m, (i, a) -> (short) Math.log10(a));\n-            case VECTOR_OP_SQRT: return (v0, m) ->\n-                    v0.uOp(m, (i, a) -> (short) Math.sqrt(a));\n-            case VECTOR_OP_CBRT: return (v0, m) ->\n-                    v0.uOp(m, (i, a) -> (short) Math.cbrt(a));\n-            case VECTOR_OP_SINH: return (v0, m) ->\n-                    v0.uOp(m, (i, a) -> (short) Math.sinh(a));\n-            case VECTOR_OP_COSH: return (v0, m) ->\n-                    v0.uOp(m, (i, a) -> (short) Math.cosh(a));\n-            case VECTOR_OP_TANH: return (v0, m) ->\n-                    v0.uOp(m, (i, a) -> (short) Math.tanh(a));\n-            case VECTOR_OP_EXPM1: return (v0, m) ->\n-                    v0.uOp(m, (i, a) -> (short) Math.expm1(a));\n-            case VECTOR_OP_LOG1P: return (v0, m) ->\n-                    v0.uOp(m, (i, a) -> (short) Math.log1p(a));\n@@ -3919,1 +3887,1 @@\n-        public Class<Halffloat> elementType() {\n+        public final Class<Halffloat> elementType() {\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/HalffloatVector.java","additions":1,"deletions":33,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -613,12 +613,1 @@\n-#if[FP]\n-#if[short]\n-            opc, getClass(), null, Halffloat.class, length(),\n-            this, null,\n-            UN_IMPL.find(op, opc, $abstractvectortype$::unaryOperations));\n-#else[short]\n-            opc, getClass(), null, $type$.class, length(),\n-            this, null,\n-            UN_IMPL.find(op, opc, $abstractvectortype$::unaryOperations));\n-#end[short]\n-#else[FP]\n-            opc, getClass(), null, $type$.class, length(),\n+            opc, getClass(), null, $elemtype$.class, length(),\n@@ -627,1 +616,0 @@\n-#end[FP]\n@@ -657,7 +645,1 @@\n-#if[FP]\n-#if[short]\n-            opc, getClass(), maskClass, Halffloat.class, length(),\n-            this, m,\n-            UN_IMPL.find(op, opc, $abstractvectortype$::unaryOperations));\n-#else[short]\n-            opc, getClass(), maskClass, $type$.class, length(),\n+            opc, getClass(), maskClass, $elemtype$.class, length(),\n@@ -666,6 +648,0 @@\n-#end[short]\n-#else[FP]\n-            opc, getClass(), maskClass, $type$.class, length(),\n-            this, m,\n-            UN_IMPL.find(op, opc, $abstractvectortype$::unaryOperations));\n-#end[FP]\n@@ -685,0 +661,1 @@\n+#if[!short]\n@@ -717,0 +694,1 @@\n+#end[!short]\n@@ -777,12 +755,1 @@\n-#if[FP]\n-#if[short]\n-            opc, getClass(), null, Halffloat.class, length(),\n-            this, that, null,\n-            BIN_IMPL.find(op, opc, $abstractvectortype$::binaryOperations));\n-#else[short]\n-            opc, getClass(), null, $type$.class, length(),\n-            this, that, null,\n-            BIN_IMPL.find(op, opc, $abstractvectortype$::binaryOperations));\n-#end[short]\n-#else[FP]\n-            opc, getClass(), null, $type$.class, length(),\n+            opc, getClass(), null, $elemtype$.class, length(),\n@@ -791,1 +758,0 @@\n-#end[FP]\n@@ -848,2 +814,0 @@\n-#if[FP]\n-#if[short]\n@@ -851,1 +815,1 @@\n-            opc, getClass(), maskClass, Halffloat.class, length(),\n+            opc, getClass(), maskClass, $elemtype$.class, length(),\n@@ -854,12 +818,0 @@\n-#else[short]\n-        return VectorSupport.binaryOp(\n-            opc, getClass(), maskClass, $type$.class, length(),\n-            this, that, m,\n-            BIN_IMPL.find(op, opc, $abstractvectortype$::binaryOperations));\n-#end[short]\n-#else[FP]\n-        return VectorSupport.binaryOp(\n-            opc, getClass(), maskClass, $type$.class, length(),\n-            this, that, m,\n-            BIN_IMPL.find(op, opc, $abstractvectortype$::binaryOperations));\n-#end[FP]\n@@ -1115,12 +1067,1 @@\n-#if[FP]\n-#if[short]\n-            opc, getClass(), maskClass, Halffloat.class, length(),\n-            this, e, m,\n-            BIN_INT_IMPL.find(op, opc, $abstractvectortype$::broadcastIntOperations));\n-#else[short]\n-            opc, getClass(), maskClass, $type$.class, length(),\n-            this, e, m,\n-            BIN_INT_IMPL.find(op, opc, $abstractvectortype$::broadcastIntOperations));\n-#end[short]\n-#else[FP]\n-            opc, getClass(), maskClass, $type$.class, length(),\n+            opc, getClass(), maskClass, $elemtype$.class, length(),\n@@ -1129,1 +1070,0 @@\n-#end[FP]\n@@ -1211,3 +1151,1 @@\n-#if[FP]\n-#if[short]\n-            opc, getClass(), null, Halffloat.class, length(),\n+            opc, getClass(), null, $elemtype$.class, length(),\n@@ -1216,10 +1154,0 @@\n-#else[short]\n-            opc, getClass(), null, $type$.class, length(),\n-            this, that, tother, null,\n-            TERN_IMPL.find(op, opc, $abstractvectortype$::ternaryOperations));\n-#end[short]\n-#else[FP]\n-            opc, getClass(), null, $type$.class, length(),\n-            this, that, tother, null,\n-            TERN_IMPL.find(op, opc, $abstractvectortype$::ternaryOperations));\n-#end[FP]\n@@ -1265,3 +1193,1 @@\n-#if[FP]\n-#if[short]\n-            opc, getClass(), maskClass, Halffloat.class, length(),\n+            opc, getClass(), maskClass, $elemtype$.class, length(),\n@@ -1270,10 +1196,0 @@\n-#else[short]\n-            opc, getClass(), maskClass, $type$.class, length(),\n-            this, that, tother, m,\n-            TERN_IMPL.find(op, opc, $abstractvectortype$::ternaryOperations));\n-#end[short]\n-#else[FP]\n-            opc, getClass(), maskClass, $type$.class, length(),\n-            this, that, tother, m,\n-            TERN_IMPL.find(op, opc, $abstractvectortype$::ternaryOperations));\n-#end[FP]\n@@ -2320,9 +2236,1 @@\n-#if[FP]\n-#if[short]\n-            opc, getClass(), maskType, Halffloat.class, length(),\n-#else[short]\n-            opc, getClass(), maskType, $type$.class, length(),\n-#end[short]\n-#else[FP]\n-            opc, getClass(), maskType, $type$.class, length(),\n-#end[FP]\n+            opc, getClass(), maskType, $elemtype$.class, length(),\n@@ -2350,9 +2258,1 @@\n-#if[FP]\n-#if[short]\n-            opc, getClass(), maskType, Halffloat.class, length(),\n-#else[short]\n-            opc, getClass(), maskType, $type$.class, length(),\n-#end[short]\n-#else[FP]\n-            opc, getClass(), maskType, $type$.class, length(),\n-#end[FP]\n+            opc, getClass(), maskType, $elemtype$.class, length(),\n@@ -2512,9 +2412,1 @@\n-#if[FP]\n-#if[short]\n-            getClass(), maskType, Halffloat.class, length(),\n-#else[short]\n-            getClass(), maskType, $type$.class, length(),\n-#end[short]\n-#else[FP]\n-            getClass(), maskType, $type$.class, length(),\n-#end[FP]\n+            getClass(), maskType, $elemtype$.class, length(),\n@@ -2537,9 +2429,1 @@\n-#if[FP]\n-#if[short]\n-            getClass(), Halffloat.class, length(),\n-#else[short]\n-            getClass(), $type$.class, length(),\n-#end[short]\n-#else[FP]\n-            getClass(), $type$.class, length(),\n-#end[FP]\n+            getClass(), $elemtype$.class, length(),\n@@ -2737,9 +2621,1 @@\n-#if[FP]\n-#if[short]\n-            getClass(), shuffletype, null, Halffloat.class, length(),\n-#else[short]\n-            getClass(), shuffletype, null, $type$.class, length(),\n-#end[short]\n-#else[FP]\n-            getClass(), shuffletype, null, $type$.class, length(),\n-#end[FP]\n+            getClass(), shuffletype, null, $elemtype$.class, length(),\n@@ -2777,9 +2653,1 @@\n-#if[FP]\n-#if[short]\n-                   getClass(), shuffletype, masktype, Halffloat.class, length(),\n-#else[short]\n-                   getClass(), shuffletype, masktype, $type$.class, length(),\n-#end[short]\n-#else[FP]\n-                   getClass(), shuffletype, masktype, $type$.class, length(),\n-#end[FP]\n+                   getClass(), shuffletype, masktype, $elemtype$.class, length(),\n@@ -2813,10 +2681,1 @@\n-#if[FP]\n-#if[short]\n-                getClass(), shuffletype, null, Halffloat.class, length(),\n-#else[short]\n-                getClass(), shuffletype, null, $type$.class, length(),\n-\n-#end[short]\n-#else[FP]\n-                getClass(), shuffletype, null, $type$.class, length(),\n-#end[FP]\n+                getClass(), shuffletype, null, $elemtype$.class, length(),\n@@ -2830,9 +2689,1 @@\n-#if[FP]\n-#if[short]\n-                getClass(), shuffletype, null, Halffloat.class, length(),\n-#else[short]\n-                getClass(), shuffletype, null, $type$.class, length(),\n-#end[short]\n-#else[FP]\n-                getClass(), shuffletype, null, $type$.class, length(),\n-#end[FP]\n+                getClass(), shuffletype, null, $elemtype$.class, length(),\n@@ -3241,7 +3092,1 @@\n-#if[FP]\n-#if[short]\n-            opc, getClass(), maskClass, Halffloat.class, length(),\n-            this, m,\n-            REDUCE_IMPL.find(op, opc, $abstractvectortype$::reductionOperations)));\n-#else[short]\n-            opc, getClass(), maskClass, $type$.class, length(),\n+            opc, getClass(), maskClass, $elemtype$.class, length(),\n@@ -3250,6 +3095,0 @@\n-#end[short]\n-#else[FP]\n-            opc, getClass(), maskClass, $type$.class, length(),\n-            this, m,\n-            REDUCE_IMPL.find(op, opc, $abstractvectortype$::reductionOperations)));\n-#end[FP]\n@@ -3270,3 +3109,1 @@\n-#if[FP]\n-#if[short]\n-            opc, getClass(), null, Halffloat.class, length(),\n+            opc, getClass(), null, $elemtype$.class, length(),\n@@ -3275,10 +3112,0 @@\n-#else[short]\n-            opc, getClass(), null, $type$.class, length(),\n-            this, null,\n-            REDUCE_IMPL.find(op, opc, $abstractvectortype$::reductionOperations)));\n-#end[short]\n-#else[FP]\n-            opc, getClass(), null, $type$.class, length(),\n-            this, null,\n-            REDUCE_IMPL.find(op, opc, $abstractvectortype$::reductionOperations)));\n-#end[FP]\n@@ -5657,2 +5484,0 @@\n-#if[FP]\n-#if[!short]\n@@ -5660,6 +5485,1 @@\n-            return $type$.class;\n-        }\n-#end[!short]\n-#if[short]\n-        public Class<Halffloat> elementType() {\n-            return Halffloat.class;\n+            return $elemtype$.class;\n@@ -5667,6 +5487,0 @@\n-#end[short]\n-#else[FP]\n-        public final Class<$Boxtype$> elementType() {\n-            return $type$.class;\n-        }\n-#end[FP]\n@@ -5698,2 +5512,0 @@\n-#if[FP]\n-#if[short]\n@@ -5701,1 +5513,1 @@\n-                    vectorType, Halffloat.class, laneCount,\n+                    vectorType, $elemtype$.class, laneCount,\n@@ -5704,12 +5516,0 @@\n-#else[short]\n-                VectorSupport.broadcastCoerced(\n-                    vectorType, $type$.class, laneCount,\n-                    bits, this,\n-                    (bits_, s_) -> s_.rvOp(i -> bits_));\n-#end[short]\n-#else[FP]\n-                VectorSupport.broadcastCoerced(\n-                    vectorType, $type$.class, laneCount,\n-                    bits, this,\n-                    (bits_, s_) -> s_.rvOp(i -> bits_));\n-#end[FP]\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template","additions":21,"deletions":221,"binary":false,"changes":242,"status":"modified"},{"patch":"@@ -55,9 +55,1 @@\n-#if[FP]\n-#if[short]\n-    static final Class<$Boxtype$> ETYPE = Halffloat.class; \/\/ used by the JVM\n-#else[short]\n-    static final Class<$Boxtype$> ETYPE = $type$.class; \/\/ used by the JVM\n-#end[short]\n-#else[FP]\n-    static final Class<$Boxtype$> ETYPE = $type$.class; \/\/ used by the JVM\n-#end[FP]\n+    static final Class<$Boxtype$> ETYPE = $elemtype$.class; \/\/ used by the JVM\n@@ -99,10 +91,1 @@\n-#if[FP]\n-#if[!short]\n-    public final Class<$Boxtype$> elementType() { return $type$.class; }\n-#end[!short]\n-#if[short]\n-    public final Class<Halffloat> elementType() { return Halffloat.class; }\n-#end[short]\n-#else[FP]\n-    public final Class<$Boxtype$> elementType() { return $type$.class; }\n-#end[FP]\n+    public final Class<$Boxtype$> elementType() { return $elemtype$.class; }\n@@ -821,9 +804,1 @@\n-#if[FP]\n-#if[short]\n-        static final Class<$Boxtype$> ETYPE = Halffloat.class; \/\/ used by the JVM\n-#else[short]\n-        static final Class<$Boxtype$> ETYPE = $type$.class; \/\/ used by the JVM\n-#end[short]\n-#else[FP]\n-        static final Class<$Boxtype$> ETYPE = $type$.class; \/\/ used by the JVM\n-#end[FP]\n+        static final Class<$Boxtype$> ETYPE = $elemtype$.class; \/\/ used by the JVM\n@@ -1056,9 +1031,1 @@\n-#if[FP]\n-#if[short]\n-        static final Class<$Boxtype$> ETYPE = Halffloat.class; \/\/ used by the JVM\n-#else[short]\n-        static final Class<$Boxtype$> ETYPE = $type$.class; \/\/ used by the JVM\n-#end[short]\n-#else[FP]\n-        static final Class<$Boxtype$> ETYPE = $type$.class; \/\/ used by the JVM\n-#end[FP]\n+        static final Class<$Boxtype$> ETYPE = $elemtype$.class; \/\/ used by the JVM\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-VectorBits.java.template","additions":4,"deletions":37,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -84,0 +84,1 @@\n+  elemtype=$type\n@@ -138,0 +139,1 @@\n+      elemtype=Halffloat\n@@ -146,0 +148,1 @@\n+  args=\"$args -Delemtype=$elemtype\"\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/gen-src.sh","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}