{"files":[{"patch":"@@ -207,0 +207,1 @@\n+        case BoolTest::uge: masm.sve_cmphs(pd, size, pg, zn, zm); break;\n@@ -208,0 +209,1 @@\n+        case BoolTest::ugt: masm.sve_cmphi(pd, size, pg, zn, zm); break;\n@@ -209,0 +211,1 @@\n+        case BoolTest::ule: masm.sve_cmphs(pd, size, pg, zm, zn); break;\n@@ -210,0 +213,1 @@\n+        case BoolTest::ult: masm.sve_cmphi(pd, size, pg, zm, zn); break;\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve.ad","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -202,0 +202,1 @@\n+        case BoolTest::uge: masm.sve_cmphs(pd, size, pg, zn, zm); break;\n@@ -203,0 +204,1 @@\n+        case BoolTest::ugt: masm.sve_cmphi(pd, size, pg, zn, zm); break;\n@@ -204,0 +206,1 @@\n+        case BoolTest::ule: masm.sve_cmphs(pd, size, pg, zm, zn); break;\n@@ -205,0 +208,1 @@\n+        case BoolTest::ult: masm.sve_cmphi(pd, size, pg, zm, zn); break;\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve_ad.m4","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3303,0 +3303,1 @@\n+  INSN(sve_cmphs, 0b00100100, 0b0000, 0);\n@@ -3304,0 +3305,1 @@\n+  INSN(sve_cmphi, 0b00100100, 0b0001, 0);\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -456,1 +456,1 @@\n-    ConINode* pred_node = (ConINode*)gvn().makecon(TypeInt::make(BoolTest::ge));\n+    ConINode* pred_node = (ConINode*)gvn().makecon(TypeInt::make(BoolTest::ugt));\n@@ -459,1 +459,1 @@\n-    Node* mask = gvn().transform(new VectorMaskCmpNode(BoolTest::ge, bcast_lane_cnt, res, pred_node, vt));\n+    Node* mask = gvn().transform(new VectorMaskCmpNode(BoolTest::ugt, bcast_lane_cnt, res, pred_node, vt));\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1566,0 +1566,1 @@\n+                        [\"cmphs\",   \"__ sve_cmphs(p1, __ S, p2, z4, z5);\",                \"cmphs\\tp1.s, p2\/z, z4.s, z5.s\"],\n@@ -1567,0 +1568,1 @@\n+                        [\"cmphi\",   \"__ sve_cmphi(p1, __ D, p3, z6, z7);\",                \"cmphi\\tp1.d, p3\/z, z6.d, z7.d\"],\n","filename":"test\/hotspot\/gtest\/aarch64\/aarch64-asmtest.py","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -753,0 +753,1 @@\n+    __ sve_cmphs(p1, __ S, p2, z4, z5);                \/\/       cmphs   p1.s, p2\/z, z4.s, z5.s\n@@ -754,0 +755,1 @@\n+    __ sve_cmphi(p1, __ D, p3, z6, z7);                \/\/       cmphi   p1.d, p3\/z, z6.d, z7.d\n@@ -1002,7 +1004,7 @@\n-    0x14000000,     0x17ffffd7,     0x1400031f,     0x94000000,\n-    0x97ffffd4,     0x9400031c,     0x3400000a,     0x34fffa2a,\n-    0x3400632a,     0x35000008,     0x35fff9c8,     0x350062c8,\n-    0xb400000b,     0xb4fff96b,     0xb400626b,     0xb500001d,\n-    0xb5fff91d,     0xb500621d,     0x10000013,     0x10fff8b3,\n-    0x100061b3,     0x90000013,     0x36300016,     0x3637f836,\n-    0x36306136,     0x3758000c,     0x375ff7cc,     0x375860cc,\n+    0x14000000,     0x17ffffd7,     0x14000323,     0x94000000,\n+    0x97ffffd4,     0x94000320,     0x3400000a,     0x34fffa2a,\n+    0x340063aa,     0x35000008,     0x35fff9c8,     0x35006348,\n+    0xb400000b,     0xb4fff96b,     0xb40062eb,     0xb500001d,\n+    0xb5fff91d,     0xb500629d,     0x10000013,     0x10fff8b3,\n+    0x10006233,     0x90000013,     0x36300016,     0x3637f836,\n+    0x363061b6,     0x3758000c,     0x375ff7cc,     0x3758614c,\n@@ -1013,13 +1015,13 @@\n-    0x54005ea0,     0x54000001,     0x54fff541,     0x54005e41,\n-    0x54000002,     0x54fff4e2,     0x54005de2,     0x54000002,\n-    0x54fff482,     0x54005d82,     0x54000003,     0x54fff423,\n-    0x54005d23,     0x54000003,     0x54fff3c3,     0x54005cc3,\n-    0x54000004,     0x54fff364,     0x54005c64,     0x54000005,\n-    0x54fff305,     0x54005c05,     0x54000006,     0x54fff2a6,\n-    0x54005ba6,     0x54000007,     0x54fff247,     0x54005b47,\n-    0x54000008,     0x54fff1e8,     0x54005ae8,     0x54000009,\n-    0x54fff189,     0x54005a89,     0x5400000a,     0x54fff12a,\n-    0x54005a2a,     0x5400000b,     0x54fff0cb,     0x540059cb,\n-    0x5400000c,     0x54fff06c,     0x5400596c,     0x5400000d,\n-    0x54fff00d,     0x5400590d,     0x5400000e,     0x54ffefae,\n-    0x540058ae,     0x5400000f,     0x54ffef4f,     0x5400584f,\n+    0x54005f20,     0x54000001,     0x54fff541,     0x54005ec1,\n+    0x54000002,     0x54fff4e2,     0x54005e62,     0x54000002,\n+    0x54fff482,     0x54005e02,     0x54000003,     0x54fff423,\n+    0x54005da3,     0x54000003,     0x54fff3c3,     0x54005d43,\n+    0x54000004,     0x54fff364,     0x54005ce4,     0x54000005,\n+    0x54fff305,     0x54005c85,     0x54000006,     0x54fff2a6,\n+    0x54005c26,     0x54000007,     0x54fff247,     0x54005bc7,\n+    0x54000008,     0x54fff1e8,     0x54005b68,     0x54000009,\n+    0x54fff189,     0x54005b09,     0x5400000a,     0x54fff12a,\n+    0x54005aaa,     0x5400000b,     0x54fff0cb,     0x54005a4b,\n+    0x5400000c,     0x54fff06c,     0x540059ec,     0x5400000d,\n+    0x54fff00d,     0x5400598d,     0x5400000e,     0x54ffefae,\n+    0x5400592e,     0x5400000f,     0x54ffef4f,     0x540058cf,\n@@ -1057,1 +1059,1 @@\n-    0xbd1b1869,     0x5800489b,     0x1800000b,     0xf8945060,\n+    0xbd1b1869,     0x5800491b,     0x1800000b,     0xf8945060,\n@@ -1151,11 +1153,12 @@\n-    0x2443a051,     0x24858881,     0x24c78cd1,     0x240b8142,\n-    0x24918213,     0x250f9001,     0x25508051,     0x25802491,\n-    0x25df28c1,     0x25850c81,     0x251e10d1,     0x65816001,\n-    0x65c36051,     0x65854891,     0x65c74cc1,     0x658b4152,\n-    0x65d14203,     0x05733820,     0x05b238a4,     0x05f138e6,\n-    0x0570396a,     0x25221420,     0x25640461,     0x25a614b2,\n-    0x25eb0553,     0x25221c24,     0x25640c60,     0x25a61cb1,\n-    0x25eb0d52,     0x65d0a001,     0x65d1a443,     0x65cbac85,\n-    0x65deaa53,     0x65dfaa53,     0x0520a1e0,     0x0521a601,\n-    0x052281e0,     0x05238601,     0x04a14026,     0x0568aca7,\n-    0x05b23230,     0x853040af,     0xc5b040af,     0x1e601000,\n+    0x2443a051,     0x24858881,     0x24850881,     0x24c78cd1,\n+    0x24c70cd1,     0x240b8142,     0x24918213,     0x250f9001,\n+    0x25508051,     0x25802491,     0x25df28c1,     0x25850c81,\n+    0x251e10d1,     0x65816001,     0x65c36051,     0x65854891,\n+    0x65c74cc1,     0x658b4152,     0x65d14203,     0x05733820,\n+    0x05b238a4,     0x05f138e6,     0x0570396a,     0x25221420,\n+    0x25640461,     0x25a614b2,     0x25eb0553,     0x25221c24,\n+    0x25640c60,     0x25a61cb1,     0x25eb0d52,     0x65d0a001,\n+    0x65d1a443,     0x65cbac85,     0x65deaa53,     0x65dfaa53,\n+    0x0520a1e0,     0x0521a601,     0x052281e0,     0x05238601,\n+    0x04a14026,     0x0568aca7,     0x05b23230,     0x853040af,\n+    0xc5b040af,     0xe57080af,     0xe5b080af,     0x1e601000,\n","filename":"test\/hotspot\/gtest\/aarch64\/asmtest.out.h","additions":35,"deletions":32,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2021, Huawei Technologies Co. Ltd. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.vectorapi;\n+\n+import jdk.incubator.vector.ByteVector;\n+import jdk.incubator.vector.VectorSpecies;\n+import jdk.incubator.vector.VectorShuffle;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+\n+\/*\n+ * @test\n+ * @bug 8266720\n+ * @modules jdk.incubator.vector\n+ * @run testng\/othervm compiler.vectorapi.TestVectorShuffleIotaByte1024\n+ *\/\n+\n+@Test\n+public class TestVectorShuffleIotaByte1024 {\n+    static final VectorSpecies<Byte> SPECIESb_1024 = ByteVector.SPECIES_MAX;\n+\n+    static final int INVOC_COUNT = Integer.getInteger(\"jdk.incubator.vector.test.loop-iterations\", 50000);\n+\n+    static final byte[] ab_1024 = {50, 49, 47, 53, 47, 49, 50, 48, 50, 32, 46, 116, 105, 32, 115,\n+                                   110, 101, 104, 116, 103, 110, 101, 114, 116, 115, 32, 101,\n+                                   99, 110, 101, 115, 101, 114, 112, 44, 101, 118, 111, 108,\n+                                   32, 115, 110, 101, 112, 114, 97, 104, 115, 32, 101, 99, 110,\n+                                   101, 115, 98, 65, 46, 117, 111, 121, 32, 101, 118, 111, 108,\n+                                   32, 73, 46, 103, 110, 97, 117, 72, 32, 71, 78, 65, 87, 45, 45,\n+                                   33, 117, 111, 121, 32, 103, 110, 105, 115, 115, 105, 77, 46, 117,\n+                                   111, 121, 32, 111, 116, 32, 114, 101, 116, 116, 101, 108, 32,\n+                                   104, 116, 52, 32, 121, 109, 32, 115, 105, 32, 115, 105, 104, 116,\n+                                   44, 121, 116, 101, 101, 119, 83};\n+\n+    static final byte[] expected_1024 = {0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48,\n+                                         51, 54, 57, 60, 63, 66, 69, 72, 75, 78, 81, 84, 87, 90, 93, 96,\n+                                         99, 102, 105, 108, 111, 114, 117, 120, 123, 126, -127, -124,\n+                                         -121, -118, -115, -112, -109, -106, -103, -100, -97, -94, -91,\n+                                         -88, -85, -82, -79, -76, -73, -70, -67, -64, -61, -58, -55, -52,\n+                                         -49, -46, -43, -40, -37, -34, -31, -28, -25, -22, -19, -16, -13,\n+                                         -10, -7, -4, -1, -126, -123, -120, -117, -114, -111, -108, -105,\n+                                         -102, -99, -96, -93, -90, -87, -84, -81, -78, -75, -72, -69, -66,\n+                                         -63, -60, -57, -54, -51, -48, -45, -42, -39, -36, -33, -30, -27,\n+                                         -24, -21, -18, -15, -12, -9, -6, -3};\n+\n+    static void testShuffleIota_1024() {\n+        ByteVector bv = (ByteVector) VectorShuffle.iota(SPECIESb_1024, 0, 3, false).toVector();\n+        bv4.intoArray(ab_1024, 0);\n+    }\n+\n+    static void testIota_1024() {\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            testShuffleIota_1024();\n+        }\n+        Assert.assertEquals(ab_1024, expected_1024);\n+    }\n+\n+    @Test\n+    static void testIota() {\n+        if (SPECESb_1024.length() == 1024) {\n+            testIota_1024();\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/TestVectorShuffleIota1024.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"}]}