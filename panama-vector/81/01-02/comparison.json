{"files":[{"patch":"@@ -207,1 +207,0 @@\n-        case BoolTest::uge: masm.sve_cmphs(pd, size, pg, zn, zm); break;\n@@ -209,1 +208,0 @@\n-        case BoolTest::ugt: masm.sve_cmphi(pd, size, pg, zn, zm); break;\n@@ -211,1 +209,0 @@\n-        case BoolTest::ule: masm.sve_cmphs(pd, size, pg, zm, zn); break;\n@@ -213,1 +210,0 @@\n-        case BoolTest::ult: masm.sve_cmphi(pd, size, pg, zm, zn); break;\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve.ad","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -202,1 +202,0 @@\n-        case BoolTest::uge: masm.sve_cmphs(pd, size, pg, zn, zm); break;\n@@ -204,1 +203,0 @@\n-        case BoolTest::ugt: masm.sve_cmphi(pd, size, pg, zn, zm); break;\n@@ -206,1 +204,0 @@\n-        case BoolTest::ule: masm.sve_cmphs(pd, size, pg, zm, zn); break;\n@@ -208,1 +205,0 @@\n-        case BoolTest::ult: masm.sve_cmphi(pd, size, pg, zm, zn); break;\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve_ad.m4","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3302,1 +3302,0 @@\n-  INSN(sve_cmphs, 0b00100100, 0b0000, 0);\n@@ -3304,1 +3303,0 @@\n-  INSN(sve_cmphi, 0b00100100, 0b0001, 0);\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -457,1 +457,2 @@\n-    ConINode* pred_node = (ConINode*)gvn().makecon(TypeInt::make(BoolTest::ugt));\n+    Node* mask = nullptr;\n+    ConINode* pred_node = nullptr;\n@@ -460,1 +461,0 @@\n-    Node* mask = gvn().transform(new VectorMaskCmpNode(BoolTest::ugt, bcast_lane_cnt, res, pred_node, vt));\n@@ -462,0 +462,12 @@\n+    if (Matcher::supports_unsigned_vector_comparison(num_elem, elem_bt)) {\n+      pred_node = (ConINode*)gvn().makecon(TypeInt::make(BoolTest::ugt));\n+      mask = gvn().transform(new VectorMaskCmpNode(BoolTest::ugt, bcast_lane_cnt, res, pred_node, vt));\n+    } else {\n+      \/\/ Currently it works well for vector_length <= 1024-bits.\n+      \/\/ for vector_length > 1024, we don't support now\n+      \/\/ TODO: remove this branch if all archs support ugt\n+      pred_node = (ConINode*)gvn().makecon(TypeInt::make(BoolTest::ge));\n+      Node * lane_cnt_tmp  = gvn().makecon(TypeInt::make(num_elem - 1));\n+      Node * bcast_lane_cnt_tmp = gvn().transform(VectorNode::scalar2vector(lane_cnt_tmp, num_elem, type_bt));\n+      mask = gvn().transform(new VectorMaskCmpNode(BoolTest::ge, bcast_lane_cnt_tmp, res, pred_node, vt));\n+    }\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -1566,1 +1566,0 @@\n-                        [\"cmphs\",   \"__ sve_cmphs(p1, __ S, p2, z4, z5);\",                \"cmphs\\tp1.s, p2\/z, z4.s, z5.s\"],\n@@ -1568,1 +1567,0 @@\n-                        [\"cmphi\",   \"__ sve_cmphi(p1, __ D, p3, z6, z7);\",                \"cmphi\\tp1.d, p3\/z, z6.d, z7.d\"],\n","filename":"test\/hotspot\/gtest\/aarch64\/aarch64-asmtest.py","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}