{"files":[{"patch":"@@ -457,1 +457,2 @@\n-    ConINode* pred_node = (ConINode*)gvn().makecon(TypeInt::make(BoolTest::ge));\n+    Node* mask = nullptr;\n+    ConINode* pred_node = nullptr;\n@@ -460,1 +461,0 @@\n-    Node* mask = gvn().transform(new VectorMaskCmpNode(BoolTest::ge, bcast_lane_cnt, res, pred_node, vt));\n@@ -462,0 +462,12 @@\n+    if (Matcher::supports_unsigned_vector_comparison(num_elem, elem_bt)) {\n+      pred_node = (ConINode*)gvn().makecon(TypeInt::make(BoolTest::ugt));\n+      mask = gvn().transform(new VectorMaskCmpNode(BoolTest::ugt, bcast_lane_cnt, res, pred_node, vt));\n+    } else {\n+      \/\/ Currently it works well for vector_length <= 1024-bits.\n+      \/\/ for vector_length > 1024, we don't support now\n+      \/\/ TODO: remove this branch if all archs support ugt\n+      pred_node = (ConINode*)gvn().makecon(TypeInt::make(BoolTest::ge));\n+      Node * lane_cnt_tmp  = gvn().makecon(TypeInt::make(num_elem - 1));\n+      Node * bcast_lane_cnt_tmp = gvn().transform(VectorNode::scalar2vector(lane_cnt_tmp, num_elem, type_bt));\n+      mask = gvn().transform(new VectorMaskCmpNode(BoolTest::ge, bcast_lane_cnt_tmp, res, pred_node, vt));\n+    }\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2021, Huawei Technologies Co. Ltd. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.vectorapi;\n+\n+import jdk.incubator.vector.ByteVector;\n+import jdk.incubator.vector.VectorSpecies;\n+import jdk.incubator.vector.VectorShuffle;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+\n+\/*\n+ * @test\n+ * @bug 8266720\n+ * @modules jdk.incubator.vector\n+ * @run testng\/othervm compiler.vectorapi.TestVectorShuffleIotaByte1024\n+ *\/\n+\n+@Test\n+public class TestVectorShuffleIotaByte1024 {\n+    static final VectorSpecies<Byte> SPECIESb_1024 = ByteVector.SPECIES_MAX;\n+\n+    static final int INVOC_COUNT = Integer.getInteger(\"jdk.incubator.vector.test.loop-iterations\", 50000);\n+\n+    static final byte[] ab_1024 = {50, 49, 47, 53, 47, 49, 50, 48, 50, 32, 46, 116, 105, 32, 115,\n+                                   110, 101, 104, 116, 103, 110, 101, 114, 116, 115, 32, 101,\n+                                   99, 110, 101, 115, 101, 114, 112, 44, 101, 118, 111, 108,\n+                                   32, 115, 110, 101, 112, 114, 97, 104, 115, 32, 101, 99, 110,\n+                                   101, 115, 98, 65, 46, 117, 111, 121, 32, 101, 118, 111, 108,\n+                                   32, 73, 46, 103, 110, 97, 117, 72, 32, 71, 78, 65, 87, 45, 45,\n+                                   33, 117, 111, 121, 32, 103, 110, 105, 115, 115, 105, 77, 46, 117,\n+                                   111, 121, 32, 111, 116, 32, 114, 101, 116, 116, 101, 108, 32,\n+                                   104, 116, 52, 32, 121, 109, 32, 115, 105, 32, 115, 105, 104, 116,\n+                                   44, 121, 116, 101, 101, 119, 83};\n+\n+    static final byte[] expected_1024 = {0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48,\n+                                         51, 54, 57, 60, 63, 66, 69, 72, 75, 78, 81, 84, 87, 90, 93, 96,\n+                                         99, 102, 105, 108, 111, 114, 117, 120, 123, 126, -127, -124,\n+                                         -121, -118, -115, -112, -109, -106, -103, -100, -97, -94, -91,\n+                                         -88, -85, -82, -79, -76, -73, -70, -67, -64, -61, -58, -55, -52,\n+                                         -49, -46, -43, -40, -37, -34, -31, -28, -25, -22, -19, -16, -13,\n+                                         -10, -7, -4, -1, -126, -123, -120, -117, -114, -111, -108, -105,\n+                                         -102, -99, -96, -93, -90, -87, -84, -81, -78, -75, -72, -69, -66,\n+                                         -63, -60, -57, -54, -51, -48, -45, -42, -39, -36, -33, -30, -27,\n+                                         -24, -21, -18, -15, -12, -9, -6, -3};\n+\n+    static void testShuffleIota_1024() {\n+        ByteVector bv = (ByteVector) VectorShuffle.iota(SPECIESb_1024, 0, 3, false).toVector();\n+        bv4.intoArray(ab_1024, 0);\n+    }\n+\n+    static void testIota_1024() {\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            testShuffleIota_1024();\n+        }\n+        Assert.assertEquals(ab_1024, expected_1024);\n+    }\n+\n+    @Test\n+    static void testIota() {\n+        if (SPECESb_1024.length() == 1024) {\n+            testIota_1024();\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/TestVectorShuffleIota1024.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"}]}