{"files":[{"patch":"@@ -658,9 +658,13 @@\n-          OptoReg::Name lo = OptoReg::add(hi, (1-num_regs)); \/\/ Find lo\n-          \/\/ We have to use pair [lo,lo+1] even for wide vectors\/vmasks because\n-          \/\/ the rest of code generation works only with pairs. It is safe\n-          \/\/ since for registers encoding only 'lo' is used.\n-          \/\/ Second reg from pair is used in ScheduleAndBundle on SPARC where\n-          \/\/ vector max size is 8 which corresponds to registers pair.\n-          \/\/ It is also used in BuildOopMaps but oop operations are not\n-          \/\/ vectorized.\n-          set2(i, lo);\n+          if (num_regs == 1) {\n+            set1(i, hi);\n+          } else {\n+            OptoReg::Name lo = OptoReg::add(hi, (1 - num_regs)); \/\/ Find lo\n+            \/\/ We have to use pair [lo,lo+1] even for wide vectors\/vmasks because\n+            \/\/ the rest of code generation works only with pairs. It is safe\n+            \/\/ since for registers encoding only 'lo' is used.\n+            \/\/ Second reg from pair is used in ScheduleAndBundle on SPARC where\n+            \/\/ vector max size is 8 which corresponds to registers pair.\n+            \/\/ It is also used in BuildOopMaps but oop operations are not\n+            \/\/ vectorized.\n+            set2(i, lo);\n+          }\n","filename":"src\/hotspot\/share\/opto\/chaitin.cpp","additions":13,"deletions":9,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -647,0 +647,1 @@\n+    *idealreg2spillmask[Op_RegVectMask] = *idealreg2regmask[Op_RegVectMask];\n","filename":"src\/hotspot\/share\/opto\/matcher.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+ * @key randomness\n@@ -51,0 +52,7 @@\n+\/\/ Current vector mask cast test cases at test\/jdk\/jdk\/incubator\/vector\/*ConversionTests.java\n+\/\/ could not be intrinsfied, hence not able to verify compiler codegen, see [1]. As a\n+\/\/ supplement, we add more tests for vector mask cast operations, which could be intrinsified\n+\/\/ by c2 compiler to generate vector\/mask instructions on supported targets.\n+\/\/\n+\/\/ [1] https:\/\/bugs.openjdk.java.net\/browse\/JDK-8259610\n+\n@@ -458,1 +466,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorMaskCastTest.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"}]}