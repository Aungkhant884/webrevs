[{"commit":{"message":"fix comment\n\nChange-Id: I01670a0e4a8df4f3a9a62b779ca5659863ec05d9"},"files":[{"filename":"src\/hotspot\/share\/opto\/chaitin.cpp"}],"sha":"14cecf97e69f545b767fc821afbc649c102a8711"},{"commit":{"message":"add comment to test case\n\nChange-Id: I9db7b5c3a263cc21bfd06aeff91f45873201e1ed"},"files":[{"filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorMaskCastTest.java"}],"sha":"624e7239ab11d3399b96e31ea7d552eeb03de6cd"},{"commit":{"message":"Fix a predicate register allocation issue\n\nWhen a predicate live range has a predicate register mask chosen, we\ncreate a map between node and opto reg. For scalable register, when it\nis allocated at stack, we need to record the real hi\/lo opto reg  pair\nto indicate the size of stack it occupied. But for a physical register\nallocated, we just mask the whole reg mask slots, e.g. only one slot\nfor predicate register. This patch fixes the issue for predicate\nregister handling. When predicate is allocated as a physical register,\ne.g. 335 (P15), we should not call set2(), which will assign both 335\nand 336 for this live range.\n\nAlso move idealreg2spillmask[Op_RegVectMask] initialization code into\nscalable vector handling block to align with the handling for Op_VecA.\n\nChange-Id: I64b42f654a158c2f40a0b6792740678d07aac933"},"files":[{"filename":"src\/hotspot\/share\/opto\/chaitin.cpp"},{"filename":"src\/hotspot\/share\/opto\/matcher.cpp"}],"sha":"a07c9bf4902ff9eb8a0e8517844dceab604d9bf3"},{"commit":{"message":"small fix\n\nChange-Id: I4f5b75c498a3daadf9938e64be5021c43068af67"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp"},{"filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorMaskCastTest.java"}],"sha":"84761ce06492748249424f989d31c95e64e9fc9a"},{"commit":{"message":"Merge remote-tracking branch 'upstream\/vectorIntrinsics+mask' into masked-cast\n\nChange-Id: I5f9e0f627090bb914d496b757091461dbd6a7f72"},"files":[],"sha":"8543e1d2de1b4eb3eac718a9d7c51569c5035f3c"},{"commit":{"message":"8273264: AArch64: [vector] Add missing rules for VectorMaskCast\n\nThis patch\n1. Adds missing rules for VectorMaskCast for compatible species, E.g.\n   ByteVector.SPECIES_64 --> ShortVector.SPECIES_128\n2. Fixes a matching failure on AArch64.\n\nThe performance improves about 60% compared with the unintrinsified\nversion.\n\nChange-Id: I1bcfc5a09b93c5f4625f39bd3b6a146154f69ad7"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve_ad.m4"},{"filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp"},{"filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.hpp"},{"filename":"test\/hotspot\/gtest\/aarch64\/aarch64-asmtest.py"},{"filename":"test\/hotspot\/gtest\/aarch64\/asmtest.out.h"},{"filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorMaskCastTest.java"}],"sha":"9e3ef6bde8f75bf3ca129d356058ef0faf27482e"}]