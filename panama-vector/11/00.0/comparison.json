{"files":[{"patch":"@@ -617,2 +617,2 @@\n-\/\/ 2) reg_class compiler_method_oop_reg    ( \/* as def'd in frame section *\/ )\n-\/\/ 2) reg_class interpreter_method_oop_reg ( \/* as def'd in frame section *\/ )\n+\/\/ 2) reg_class compiler_method_reg        ( \/* as def'd in frame section *\/ )\n+\/\/ 2) reg_class interpreter_method_reg     ( \/* as def'd in frame section *\/ )\n@@ -2437,6 +2437,0 @@\n-int Matcher::regnum_to_fpu_offset(int regnum)\n-{\n-  Unimplemented();\n-  return 0;\n-}\n-\n@@ -4092,3 +4086,0 @@\n-  \/\/ What direction does stack grow in (assumed to be same for C & Java)\n-  stack_direction(TOWARDS_LOW);\n-\n@@ -4101,2 +4092,2 @@\n-  \/\/ Method Oop Register when calling interpreter.\n-  interpreter_method_oop_reg(R12);\n+  \/\/ Method Register when calling interpreter.\n+  interpreter_method_reg(R12);\n@@ -5691,1 +5682,1 @@\n-operand interpreter_method_oop_RegP(iRegP reg)\n+operand interpreter_method_RegP(iRegP reg)\n@@ -5693,1 +5684,1 @@\n-  constraint(ALLOC_IN_RC(method_reg)); \/\/ interpreter_method_oop_reg\n+  constraint(ALLOC_IN_RC(method_reg)); \/\/ interpreter_method_reg\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":6,"deletions":15,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -1018,4 +1018,0 @@\n-int Matcher::regnum_to_fpu_offset(int regnum) {\n-  return regnum - 32; \/\/ The FP registers are in the second chunk\n-}\n-\n@@ -1685,3 +1681,0 @@\n-  \/\/ What direction does stack grow in (assumed to be same for native & Java)\n-  stack_direction(TOWARDS_LOW);\n-\n@@ -1691,1 +1684,1 @@\n-  interpreter_method_oop_reg(R_Rmethod); \/\/ Method Oop Register when calling interpreter\n+  interpreter_method_reg(R_Rmethod);     \/\/ Method Register when calling interpreter\n@@ -2551,1 +2544,1 @@\n-operand interpreter_method_oop_regP(iRegP reg) %{\n+operand interpreter_method_regP(iRegP reg) %{\n","filename":"src\/hotspot\/cpu\/arm\/arm.ad","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -538,2 +538,2 @@\n-\/\/ 2) reg_class compiler_method_oop_reg    ( as defined in frame section )\n-\/\/ 2) reg_class interpreter_method_oop_reg ( as defined in frame section )\n+\/\/ 2) reg_class compiler_method_reg        ( as defined in frame section )\n+\/\/ 2) reg_class interpreter_method_reg     ( as defined in frame section )\n@@ -1373,25 +1373,0 @@\n-\/\/ Macro used instead of the common __ to emulate the pipes of PPC.\n-\/\/ Instead of e.g. __ ld(...) one hase to write ___(ld) ld(...) This enables the\n-\/\/ micro scheduler to cope with \"hand written\" assembler like in the prolog. Though\n-\/\/ still no scheduling of this code is possible, the micro scheduler is aware of the\n-\/\/ code and can update its internal data. The following mechanism is used to achieve this:\n-\/\/ The micro scheduler calls size() of each compound node during scheduling. size() does a\n-\/\/ dummy emit and only during this dummy emit C->hb_scheduling() is not NULL.\n-#if 0 \/\/ TODO: PPC port\n-#define ___(op) if (UsePower6SchedulerPPC64 && C->hb_scheduling())                    \\\n-                  C->hb_scheduling()->_pdScheduling->PdEmulatePipe(ppc64Opcode_##op); \\\n-                _masm.\n-#define ___stop if (UsePower6SchedulerPPC64 && C->hb_scheduling())                    \\\n-                  C->hb_scheduling()->_pdScheduling->PdEmulatePipe(archOpcode_none)\n-#define ___advance if (UsePower6SchedulerPPC64 && C->hb_scheduling())                 \\\n-                  C->hb_scheduling()->_pdScheduling->advance_offset\n-#else\n-#define ___(op) if (UsePower6SchedulerPPC64)                                          \\\n-                  Unimplemented();                                                    \\\n-                _masm.\n-#define ___stop if (UsePower6SchedulerPPC64)                                          \\\n-                  Unimplemented()\n-#define ___advance if (UsePower6SchedulerPPC64)                                       \\\n-                  Unimplemented()\n-#endif\n-\n@@ -1417,1 +1392,1 @@\n-    ___(nop) nop();\n+    __ nop();\n@@ -1420,1 +1395,1 @@\n-    ___(mflr) mflr(return_pc);\n+    __ mflr(return_pc);\n@@ -1480,1 +1455,1 @@\n-          ___(ld) ld(R0,  (int)(signed short)stdoffset, R1_SP);\n+          __ ld(R0,  (int)(signed short)stdoffset, R1_SP);\n@@ -1482,1 +1457,1 @@\n-          ___(std) std(R0, (int)(signed short)stdoffset, R1_SP);\n+          __ std(R0, (int)(signed short)stdoffset, R1_SP);\n@@ -1490,1 +1465,1 @@\n-        ___(addis) addis(tmp, R1_SP, hi);\n+        __ addis(tmp, R1_SP, hi);\n@@ -1492,1 +1467,1 @@\n-          ___(ld) ld(R0, lo, tmp);\n+          __ ld(R0, lo, tmp);\n@@ -1494,1 +1469,1 @@\n-          ___(std) std(R0, lo, tmp);\n+          __ std(R0, lo, tmp);\n@@ -1509,10 +1484,0 @@\n-  \/\/ Optimized version for most common case.\n-  if (UsePower6SchedulerPPC64 &&\n-      !method_is_frameless && Assembler::is_simm((int)(-offset), 16) &&\n-      !(false \/* ConstantsALot TODO: PPC port*\/)) {\n-    ___(or) mr(callers_sp, R1_SP);\n-    ___(std) std(return_pc, _abi(lr), R1_SP);\n-    ___(stdu) stdu(R1_SP, -offset, R1_SP);\n-    return;\n-  }\n-\n@@ -1521,1 +1486,1 @@\n-    ___(or) mr(callers_sp, R1_SP);\n+    __ mr(callers_sp, R1_SP);\n@@ -1530,1 +1495,1 @@\n-      ___(stdu) stdu(R1_SP, -offset, R1_SP);\n+      __ stdu(R1_SP, -offset, R1_SP);\n@@ -1534,5 +1499,5 @@\n-      ___(addis)  lis( tmp, (int)((signed short)(((x >> 32) & 0xffff0000) >> 16)));\n-      ___(ori)    ori( tmp, tmp, ((x >> 32) & 0x0000ffff));\n-      ___(rldicr) sldi(tmp, tmp, 32);\n-      ___(oris)   oris(tmp, tmp, (x & 0xffff0000) >> 16);\n-      ___(ori)    ori( tmp, tmp, (x & 0x0000ffff));\n+      __ lis( tmp, (int)((signed short)(((x >> 32) & 0xffff0000) >> 16)));\n+      __ ori( tmp, tmp, ((x >> 32) & 0x0000ffff));\n+      __ sldi(tmp, tmp, 32);\n+      __ oris(tmp, tmp, (x & 0xffff0000) >> 16);\n+      __ ori( tmp, tmp, (x & 0x0000ffff));\n@@ -1540,1 +1505,1 @@\n-      ___(stdux) stdux(R1_SP, R1_SP, tmp);\n+      __ stdux(R1_SP, R1_SP, tmp);\n@@ -1555,1 +1520,1 @@\n-    ___(std) std(return_pc, _abi(lr), callers_sp);\n+    __ std(return_pc, _abi(lr), callers_sp);\n@@ -1560,3 +1525,0 @@\n-#undef ___\n-#undef ___stop\n-#undef ___advance\n@@ -1644,29 +1606,0 @@\n-#if 0 \/\/ TODO: PPC port\n-void MachLoadPollAddrLateNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {\n-  C2_MacroAssembler _masm(&cbuf);\n-  if (LoadPollAddressFromThread) {\n-    _masm.ld(R11, in_bytes(JavaThread::poll_address_offset()), R16_thread);\n-  } else {\n-    _masm.nop();\n-  }\n-}\n-\n-uint MachLoadPollAddrLateNode::size(PhaseRegAlloc* ra_) const {\n-  if (LoadPollAddressFromThread) {\n-    return 4;\n-  } else {\n-    return 4;\n-  }\n-}\n-\n-#ifndef PRODUCT\n-void MachLoadPollAddrLateNode::format(PhaseRegAlloc* ra_, outputStream* st) const {\n-  st->print_cr(\" LD R11, PollAddressOffset, R16_thread \\t\/\/ LoadPollAddressFromThread\");\n-}\n-#endif\n-\n-const RegMask &MachLoadPollAddrLateNode::out_RegMask() const {\n-  return RSCRATCH1_BITS64_REG_mask();\n-}\n-#endif \/\/ PPC port\n-\n@@ -1955,96 +1888,0 @@\n-#if 0 \/\/ TODO: PPC port\n-ArchOpcode MachSpillCopyNode_archOpcode(MachSpillCopyNode *n, PhaseRegAlloc *ra_) {\n-#ifndef PRODUCT\n-  if (ra_->node_regs_max_index() == 0) return archOpcode_undefined;\n-#endif\n-  assert(ra_->node_regs_max_index() != 0, \"\");\n-\n-  \/\/ Get registers to move.\n-  OptoReg::Name src_hi = ra_->get_reg_second(n->in(1));\n-  OptoReg::Name src_lo = ra_->get_reg_first(n->in(1));\n-  OptoReg::Name dst_hi = ra_->get_reg_second(n);\n-  OptoReg::Name dst_lo = ra_->get_reg_first(n);\n-\n-  enum RC src_lo_rc = rc_class(src_lo);\n-  enum RC dst_lo_rc = rc_class(dst_lo);\n-\n-  if (src_lo == dst_lo && src_hi == dst_hi)\n-    return ppc64Opcode_none;            \/\/ Self copy, no move.\n-\n-  \/\/ --------------------------------------\n-  \/\/ Memory->Memory Spill. Use R0 to hold the value.\n-  if (src_lo_rc == rc_stack && dst_lo_rc == rc_stack) {\n-    return ppc64Opcode_compound;\n-  }\n-\n-  \/\/ --------------------------------------\n-  \/\/ Check for float->int copy; requires a trip through memory.\n-  if (src_lo_rc == rc_float && dst_lo_rc == rc_int) {\n-    Unimplemented();\n-  }\n-\n-  \/\/ --------------------------------------\n-  \/\/ Check for integer reg-reg copy.\n-  if (src_lo_rc == rc_int && dst_lo_rc == rc_int) {\n-    Register Rsrc = as_Register(Matcher::_regEncode[src_lo]);\n-    Register Rdst = as_Register(Matcher::_regEncode[dst_lo]);\n-    if (Rsrc == Rdst) {\n-      return ppc64Opcode_none;\n-    } else {\n-      return ppc64Opcode_or;\n-    }\n-  }\n-\n-  \/\/ Check for integer store.\n-  if (src_lo_rc == rc_int && dst_lo_rc == rc_stack) {\n-    if (src_hi != OptoReg::Bad) {\n-      return ppc64Opcode_std;\n-    } else {\n-      return ppc64Opcode_stw;\n-    }\n-  }\n-\n-  \/\/ Check for integer load.\n-  if (dst_lo_rc == rc_int && src_lo_rc == rc_stack) {\n-    if (src_hi != OptoReg::Bad) {\n-      return ppc64Opcode_ld;\n-    } else {\n-      return ppc64Opcode_lwz;\n-    }\n-  }\n-\n-  \/\/ Check for float reg-reg copy.\n-  if (src_lo_rc == rc_float && dst_lo_rc == rc_float) {\n-    return ppc64Opcode_fmr;\n-  }\n-\n-  \/\/ Check for float store.\n-  if (src_lo_rc == rc_float && dst_lo_rc == rc_stack) {\n-    if (src_hi != OptoReg::Bad) {\n-      return ppc64Opcode_stfd;\n-    } else {\n-      return ppc64Opcode_stfs;\n-    }\n-  }\n-\n-  \/\/ Check for float load.\n-  if (dst_lo_rc == rc_float && src_lo_rc == rc_stack) {\n-    if (src_hi != OptoReg::Bad) {\n-      return ppc64Opcode_lfd;\n-    } else {\n-      return ppc64Opcode_lfs;\n-    }\n-  }\n-\n-  \/\/ --------------------------------------------------------------------\n-  \/\/ Check for hi bits still needing moving. Only happens for misaligned\n-  \/\/ arguments to native calls.\n-  if (src_hi == dst_hi) {\n-    return ppc64Opcode_none;               \/\/ Self copy; no move.\n-  }\n-\n-  ShouldNotReachHere();\n-  return ppc64Opcode_undefined;\n-}\n-#endif \/\/ PPC port\n-\n@@ -2146,7 +1983,0 @@\n-#if 0 \/\/ TODO: PPC port\n-\/\/ Optimize UEP code on z (save a load_const() call in main path).\n-int MachUEPNode::ep_offset() {\n-  return 0;\n-}\n-#endif\n-\n@@ -2356,6 +2186,0 @@\n-int Matcher::regnum_to_fpu_offset(int regnum) {\n-  \/\/ No user for this method?\n-  Unimplemented();\n-  return 999;\n-}\n-\n@@ -2699,1 +2523,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -2706,1 +2529,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -2710,1 +2532,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_none);\n@@ -2715,1 +2536,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_lbz);\n@@ -2723,1 +2543,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -2732,1 +2551,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_lhz);\n@@ -2741,1 +2559,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -2751,1 +2568,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_lwz);\n@@ -2760,1 +2576,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -2770,1 +2585,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_ld);\n@@ -2780,1 +2594,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -2791,1 +2604,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_lfd);\n@@ -2798,1 +2610,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_ld);\n@@ -2822,1 +2633,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addis);\n@@ -3057,1 +2867,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_ld);\n@@ -3090,1 +2899,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addis);\n@@ -3225,1 +3033,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_stw);\n@@ -3232,1 +3039,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_std);\n@@ -3241,1 +3047,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_stfs);\n@@ -3248,1 +3053,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_stfd);\n@@ -3257,1 +3061,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -3273,7 +3076,0 @@\n-#if 0 \/\/ TODO: PPC port\n-    \/\/ Check CMSCollectorCardTableBarrierSetBSExt::_requires_release and do the\n-    \/\/ StoreStore barrier conditionally.\n-    __ lwz(R0, 0, $releaseFieldAddr$$Register);\n-    __ cmpwi($crx$$CondRegister, R0, 0);\n-    __ beq_predict_taken($crx$$CondRegister, skip_storestore);\n-#endif\n@@ -3282,3 +3078,0 @@\n-#if 0 \/\/ TODO: PPC port\n-    __ bind(skip_storestore);\n-#endif\n@@ -3489,1 +3282,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmove);\n@@ -3499,1 +3291,0 @@\n-    \/\/ TODO PPC port __ endgroup_if_needed(_size == 12);\n@@ -3504,1 +3295,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmove);\n@@ -3512,1 +3302,0 @@\n-    \/\/ TODO PPC port __ endgroup_if_needed(_size == 12);\n@@ -3519,1 +3308,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_andc);\n@@ -3525,1 +3313,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -3538,1 +3325,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -3551,1 +3337,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmove);\n@@ -3558,1 +3343,0 @@\n-    \/\/ TODO PPC port __ endgroup_if_needed(_size == 12);\n@@ -3563,1 +3347,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmove);\n@@ -3569,1 +3352,0 @@\n-    \/\/ TODO PPC port __ endgroup_if_needed(_size == 12);\n@@ -3574,1 +3356,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_bc);\n@@ -3604,1 +3385,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_bc);\n@@ -3632,41 +3412,0 @@\n-  \/\/ Branch used with Power6 scheduling (can be shortened without changing the node).\n-  enc_class enc_bc_short_far(flagsRegSrc crx, cmpOp cmp, Label lbl) %{\n-    \/\/ The scheduler doesn't know about branch shortening, so we set the opcode\n-    \/\/ to ppc64Opcode_bc in order to hide this detail from the scheduler.\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_bc);\n-\n-    C2_MacroAssembler _masm(&cbuf);\n-    Label d;   \/\/ dummy\n-    __ bind(d);\n-    Label* p = ($lbl$$label);\n-    \/\/ `p' is `NULL' when this encoding class is used only to\n-    \/\/ determine the size of the encoded instruction.\n-    Label& l = (NULL == p)? d : *(p);\n-    int cc = $cmp$$cmpcode;\n-    int flags_reg = $crx$$reg;\n-    int bhint = Assembler::bhintNoHint;\n-\n-    if (UseStaticBranchPredictionForUncommonPathsPPC64) {\n-      if (_prob <= PROB_NEVER) {\n-        bhint = Assembler::bhintIsNotTaken;\n-      } else if (_prob >= PROB_ALWAYS) {\n-        bhint = Assembler::bhintIsTaken;\n-      }\n-    }\n-\n-#if 0 \/\/ TODO: PPC port\n-    if (_size == 8) {\n-      \/\/ Tell the conditional far branch to optimize itself when being relocated.\n-      __ bc_far(Assembler::add_bhint_to_boint(bhint, cc_to_boint(cc)),\n-                    cc_to_biint(cc, flags_reg),\n-                    l,\n-                    MacroAssembler::bc_far_optimize_on_relocate);\n-    } else {\n-      __ bc    (Assembler::add_bhint_to_boint(bhint, cc_to_boint(cc)),\n-                    cc_to_biint(cc, flags_reg),\n-                    l);\n-    }\n-#endif\n-    Unimplemented();\n-  %}\n-\n@@ -3719,1 +3458,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_ld);\n@@ -3777,1 +3515,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_bl);\n@@ -3827,1 +3564,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_bl);\n@@ -3884,1 +3620,0 @@\n-    call->_argsize           = _argsize;\n@@ -3931,1 +3666,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -3989,1 +3723,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -4023,1 +3756,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_mtctr);\n@@ -4088,1 +3820,0 @@\n-    call->_argsize     = _argsize;\n@@ -4139,3 +3870,0 @@\n-  \/\/ What direction does stack grow in (assumed to be same for native & Java).\n-  stack_direction(TOWARDS_LOW);\n-\n@@ -4148,2 +3876,2 @@\n-  \/\/ Method Oop Register when calling interpreter.\n-  interpreter_method_oop_reg(R19); \/\/ R19_method\n+  \/\/ Method Register when calling interpreter.\n+  interpreter_method_reg(R19); \/\/ R19_method\n@@ -5058,2 +4786,2 @@\n-operand compiler_method_oop_regP(iRegPdst reg) %{\n-  constraint(ALLOC_IN_RC(rscratch1_bits64_reg)); \/\/ compiler_method_oop_reg\n+operand compiler_method_regP(iRegPdst reg) %{\n+  constraint(ALLOC_IN_RC(rscratch1_bits64_reg)); \/\/ compiler_method_reg\n@@ -5065,2 +4793,2 @@\n-operand interpreter_method_oop_regP(iRegPdst reg) %{\n-  constraint(ALLOC_IN_RC(r19_bits64_reg)); \/\/ interpreter_method_oop_reg\n+operand interpreter_method_regP(iRegPdst reg) %{\n+  constraint(ALLOC_IN_RC(r19_bits64_reg)); \/\/ interpreter_method_reg\n@@ -5535,1 +5263,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_extsb);\n@@ -5693,1 +5420,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_lha);\n@@ -5710,1 +5436,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -5817,1 +5542,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_lwa);\n@@ -5834,1 +5558,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_lwa);\n@@ -6036,1 +5759,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_lfs);\n@@ -6056,1 +5778,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -6093,1 +5814,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -6128,1 +5848,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addis);\n@@ -6142,1 +5861,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_ori);\n@@ -6155,1 +5873,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addi);\n@@ -6169,1 +5886,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addis);\n@@ -6186,1 +5902,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_ori);\n@@ -6214,1 +5929,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addi);\n@@ -6228,1 +5942,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addis);\n@@ -6244,1 +5957,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_ori);\n@@ -6324,1 +6036,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_ld);\n@@ -6351,1 +6062,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addi);\n@@ -6365,1 +6075,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addis);\n@@ -6379,1 +6088,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addi);\n@@ -6410,1 +6118,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicl);\n@@ -6423,1 +6130,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -6471,1 +6177,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addis);\n@@ -6487,1 +6192,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicl);\n@@ -6503,1 +6207,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_ori);\n@@ -6561,1 +6264,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addi);\n@@ -6609,1 +6311,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_ld);\n@@ -6646,1 +6347,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_lfs);\n@@ -6669,1 +6369,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -6710,1 +6409,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_lfd);\n@@ -6734,1 +6432,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -6777,1 +6474,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_dcbtst);\n@@ -6791,1 +6487,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_dcbtst);\n@@ -6805,1 +6500,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_dcbtst);\n@@ -6819,1 +6513,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_dcbtst);\n@@ -6835,1 +6528,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_stb);\n@@ -6850,1 +6542,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_sth);\n@@ -7004,1 +6695,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -7026,1 +6716,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicl);\n@@ -7040,1 +6729,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -7056,1 +6744,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -7075,1 +6762,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -7089,1 +6775,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicl);\n@@ -7128,1 +6813,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicl);\n@@ -7143,1 +6827,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_or);\n@@ -7160,1 +6843,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicr);\n@@ -7174,1 +6856,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -7193,1 +6874,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -7214,1 +6894,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -7243,1 +6922,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicr);\n@@ -7260,1 +6938,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldimi);\n@@ -7371,1 +7048,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_or);\n@@ -7386,1 +7062,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_or);\n@@ -7405,1 +7080,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicl);\n@@ -7420,1 +7094,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_subf);\n@@ -7434,1 +7107,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicl);\n@@ -7494,1 +7166,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicr);\n@@ -7510,1 +7181,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_add);\n@@ -7574,1 +7244,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_lwsync);\n@@ -7608,1 +7277,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_lwsync);\n@@ -7621,1 +7289,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_lwsync);\n@@ -7644,1 +7311,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_sync);\n@@ -7703,1 +7369,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -7720,1 +7385,1 @@\n-  size((false \/* TODO: PPC PORT Compile::current()->do_hb_scheduling()*\/ ? 12 : 8));\n+  size(8);\n@@ -7733,1 +7398,1 @@\n-  size((false \/* TODO: PPC PORT Compile::current()->do_hb_scheduling()*\/ ? 12 : 8));\n+  size(8);\n@@ -7749,1 +7414,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -7766,1 +7430,1 @@\n-  size((false \/* TODO: PPC PORT Compile::current()->do_hb_scheduling()*\/ ? 12 : 8));\n+  size(8);\n@@ -7779,1 +7443,1 @@\n-  size((false \/* TODO: PPC PORT Compile::current()->do_hb_scheduling()*\/ ? 12 : 8));\n+  size(8);\n@@ -7795,1 +7459,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -7813,1 +7476,1 @@\n-  size((false \/* TODO: PPC PORT Compile::current()->do_hb_scheduling()*\/ ? 12 : 8));\n+  size(8);\n@@ -7826,1 +7489,1 @@\n-  size((false \/* TODO: PPC PORT Compile::current()->do_hb_scheduling()*\/ ? 12 : 8));\n+  size(8);\n@@ -7842,1 +7505,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -7859,1 +7521,1 @@\n-  size((false \/* TODO: PPC PORT Compile::current()->do_hb_scheduling()*\/ ? 12 : 8));\n+  size(8);\n@@ -7872,1 +7534,1 @@\n-  size((false \/* TODO: PPC PORT Compile::current()->do_hb_scheduling()*\/ ? 12 : 8));\n+  size(8);\n@@ -7885,1 +7547,1 @@\n-  size((false \/* TODO: PPC PORT (InsertEndGroupPPC64 && Compile::current()->do_hb_scheduling())*\/ ? 12 : 8));\n+  size(8);\n@@ -7887,1 +7549,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmovef);\n@@ -7893,1 +7554,0 @@\n-    \/\/ TODO PPC port __ endgroup_if_needed(_size == 12);\n@@ -7907,1 +7567,1 @@\n-  size((false \/* TODO: PPC PORT (InsertEndGroupPPC64 && Compile::current()->do_hb_scheduling())*\/ ? 12 : 8));\n+  size(8);\n@@ -7909,1 +7569,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmovef);\n@@ -7915,1 +7574,0 @@\n-    \/\/ TODO PPC port __ endgroup_if_needed(_size == 12);\n@@ -7937,1 +7595,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -7957,1 +7614,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_stdcx_);\n@@ -7973,1 +7629,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_ldarx);\n@@ -7993,1 +7648,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8013,1 +7667,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8033,1 +7686,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8053,1 +7705,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8072,1 +7723,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8091,1 +7741,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8110,1 +7759,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8129,1 +7777,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8151,1 +7798,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8166,1 +7812,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8181,1 +7826,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8196,1 +7840,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8211,1 +7854,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8226,1 +7868,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8241,1 +7882,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8256,1 +7896,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8271,1 +7910,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8286,1 +7924,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8303,1 +7940,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8318,1 +7954,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8335,1 +7970,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8351,1 +7985,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8368,1 +8001,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8383,1 +8015,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8402,1 +8033,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8417,1 +8047,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8432,1 +8061,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8453,1 +8081,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8474,1 +8101,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8489,1 +8115,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8504,1 +8129,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8525,1 +8149,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8546,1 +8169,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8561,1 +8183,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8582,1 +8203,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8597,1 +8217,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8618,1 +8237,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8633,1 +8251,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8654,1 +8271,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8669,1 +8285,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -8927,1 +8542,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_add);\n@@ -8940,1 +8554,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_add);\n@@ -8966,1 +8579,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addi);\n@@ -8978,1 +8590,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addis);\n@@ -8990,1 +8601,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_add);\n@@ -9003,1 +8613,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_add);\n@@ -9030,1 +8639,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_add);\n@@ -9043,1 +8651,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addi);\n@@ -9057,1 +8664,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addis);\n@@ -9069,1 +8675,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_add);\n@@ -9083,1 +8688,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addi);\n@@ -9097,1 +8701,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addis);\n@@ -9112,1 +8715,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_subf);\n@@ -9129,1 +8731,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_subfic);\n@@ -9145,1 +8746,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_srawi);\n@@ -9169,1 +8769,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_neg);\n@@ -9181,1 +8780,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_subf);\n@@ -9194,1 +8792,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_subf);\n@@ -9210,1 +8807,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_sradi);\n@@ -9226,1 +8822,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_sradi);\n@@ -9251,1 +8846,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_neg);\n@@ -9264,1 +8858,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_neg);\n@@ -9281,1 +8874,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_mullw);\n@@ -9295,1 +8887,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_mulli);\n@@ -9308,1 +8899,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_mulld);\n@@ -9322,1 +8912,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_mulhd);\n@@ -9336,1 +8925,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_mulli);\n@@ -9350,1 +8938,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_neg);\n@@ -9367,1 +8954,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_divw);\n@@ -9381,1 +8967,1 @@\n-  size((false \/* TODO: PPC PORT (InsertEndGroupPPC64 && Compile::current()->do_hb_scheduling())*\/ ? 12 : 8));\n+  size(8);\n@@ -9383,1 +8969,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmove);\n@@ -9387,1 +8972,0 @@\n-    \/\/ TODO PPC port __ endgroup_if_needed(_size == 12);\n@@ -9415,1 +8999,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_neg);\n@@ -9430,1 +9013,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_divd);\n@@ -9444,1 +9026,1 @@\n-  size((false \/* TODO: PPC PORT (InsertEndGroupPPC64 && Compile::current()->do_hb_scheduling())*\/ ? 12 : 8));\n+  size(8);\n@@ -9446,1 +9028,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmove);\n@@ -9450,1 +9031,0 @@\n-    \/\/ TODO PPC port __ endgroup_if_needed(_size == 12);\n@@ -9520,1 +9100,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicl);\n@@ -9534,1 +9113,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_slw);\n@@ -9558,1 +9136,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rlwinm);\n@@ -9572,1 +9149,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rlwinm); \/\/ FIXME: assert that rlwinm is equal to addi\n@@ -9593,1 +9169,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rlwinm); \/\/ FIXME: assert that rlwinm is equal to addi\n@@ -9614,1 +9189,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_sld);\n@@ -9638,1 +9212,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicr);\n@@ -9652,1 +9225,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicr);\n@@ -9667,1 +9239,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldic);\n@@ -9681,1 +9252,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_sraw);\n@@ -9706,1 +9276,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_srawi);\n@@ -9720,1 +9289,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_srad);\n@@ -9746,1 +9314,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_sradi);\n@@ -9759,1 +9326,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_sradi);\n@@ -9773,1 +9339,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_srw);\n@@ -9799,1 +9364,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rlwinm);\n@@ -9813,1 +9377,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_srd);\n@@ -9839,1 +9402,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicl);\n@@ -9852,1 +9414,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicl);\n@@ -9865,1 +9426,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicl);\n@@ -9878,1 +9438,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicl);\n@@ -9897,1 +9456,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicl);\n@@ -9915,1 +9473,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_extsw);\n@@ -9931,1 +9488,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rlwinm);\n@@ -9945,1 +9501,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rlwinm);\n@@ -9960,1 +9515,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fadds);\n@@ -9973,1 +9527,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fadd);\n@@ -9986,1 +9539,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fsubs);\n@@ -9998,1 +9550,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fsub);\n@@ -10010,1 +9561,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fmuls);\n@@ -10022,1 +9572,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fmul);\n@@ -10034,1 +9583,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fdivs);\n@@ -10046,1 +9594,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fdiv);\n@@ -10058,1 +9605,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fabs);\n@@ -10070,1 +9616,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fabs);\n@@ -10081,1 +9626,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fneg);\n@@ -10092,1 +9636,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fneg);\n@@ -10104,1 +9647,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fnabs);\n@@ -10116,1 +9658,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fnabs);\n@@ -10129,1 +9670,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fsqrt);\n@@ -10144,1 +9684,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fsqrts);\n@@ -10181,1 +9720,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fmadds);\n@@ -10194,1 +9732,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fmadd);\n@@ -10208,1 +9745,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fnmsubs);\n@@ -10222,1 +9758,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fnmsub);\n@@ -10236,1 +9771,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fnmadds);\n@@ -10250,1 +9784,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fnmadd);\n@@ -10263,1 +9796,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fmsubs);\n@@ -10276,1 +9808,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fmsub);\n@@ -10293,1 +9824,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_and);\n@@ -10306,1 +9836,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_andis_);\n@@ -10320,1 +9849,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_andi_);\n@@ -10333,1 +9861,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicr);\n@@ -10344,1 +9871,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicl);\n@@ -10356,1 +9882,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rlwinm);\n@@ -10371,1 +9896,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_and);\n@@ -10385,1 +9909,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_andi_);\n@@ -10398,1 +9921,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicr);\n@@ -10409,1 +9931,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicl);\n@@ -10423,1 +9944,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicl);\n@@ -10437,1 +9957,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_or);\n@@ -10450,1 +9969,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_or);\n@@ -10476,1 +9994,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_ori);\n@@ -10490,1 +10007,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_or);\n@@ -10504,1 +10020,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_or);\n@@ -10518,1 +10033,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_ori);\n@@ -10532,1 +10046,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_xor);\n@@ -10545,1 +10058,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_xor);\n@@ -10571,1 +10083,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_xori);\n@@ -10585,1 +10096,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_xor);\n@@ -10599,1 +10109,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_xor);\n@@ -10613,1 +10122,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_xori);\n@@ -10626,1 +10134,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_nor);\n@@ -10639,1 +10146,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_nor);\n@@ -10665,1 +10171,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_andc);\n@@ -10792,1 +10297,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_lfs);\n@@ -10880,1 +10384,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_or);\n@@ -10895,1 +10398,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_or);\n@@ -10908,1 +10410,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_or);\n@@ -11023,1 +10524,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rlwinm);\n@@ -11125,1 +10625,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_srawi);\n@@ -11143,1 +10642,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_extsb);\n@@ -11165,1 +10663,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_extsh);\n@@ -11178,1 +10675,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_extsw);\n@@ -11189,1 +10685,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_or);\n@@ -11203,1 +10698,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fctiwz);;\n@@ -11218,1 +10712,1 @@\n-  size((false \/* TODO: PPC PORT(InsertEndGroupPPC64 && Compile::current()->do_hb_scheduling())*\/ ? 12 : 8));\n+  size(8);\n@@ -11232,1 +10726,1 @@\n-  size((false \/* TODO: PPC PORT(InsertEndGroupPPC64 && Compile::current()->do_hb_scheduling())*\/ ? 12 : 8));\n+  size(8);\n@@ -11385,1 +10879,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fctiwz);\n@@ -11430,1 +10923,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_extsw);\n@@ -11444,1 +10936,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicl);\n@@ -11458,1 +10949,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicl);\n@@ -11472,1 +10962,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fctiwz);\n@@ -11487,1 +10976,1 @@\n-  size((false \/* TODO: PPC PORT Compile::current()->do_hb_scheduling()*\/ ? 12 : 8));\n+  size(8);\n@@ -11501,1 +10990,1 @@\n-  size((false \/* TODO: PPC PORT Compile::current()->do_hb_scheduling()*\/ ? 12 : 8));\n+  size(8);\n@@ -11648,1 +11137,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fctiwz);\n@@ -11697,1 +11185,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fcfid);\n@@ -11709,1 +11196,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_frsp);\n@@ -11742,1 +11228,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fcfid);\n@@ -11871,1 +11356,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fmr);\n@@ -11886,1 +11370,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmp);\n@@ -11897,1 +11380,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmpi);\n@@ -11910,1 +11392,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_andi_);\n@@ -11921,1 +11402,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmp);\n@@ -11932,1 +11412,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmpi);\n@@ -11944,1 +11423,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmpl);\n@@ -11955,1 +11433,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmpli);\n@@ -11967,1 +11444,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_and_);\n@@ -11979,1 +11455,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_andi_);\n@@ -11994,1 +11469,1 @@\n-  size((false \/* TODO: PPC PORTInsertEndGroupPPC64 && Compile::current()->do_hb_scheduling())*\/ ? 20 : 16));\n+  size(16);\n@@ -11996,1 +11471,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmove);\n@@ -12003,1 +11477,0 @@\n-    \/\/ TODO: PPC port__ endgroup_if_needed(_size == 20);\n@@ -12092,1 +11565,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_twi);\n@@ -12119,1 +11591,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_tw);\n@@ -12146,1 +11617,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_twi);\n@@ -12164,1 +11634,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmpl);\n@@ -12175,1 +11644,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmpli);\n@@ -12197,1 +11665,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_tdi);\n@@ -12218,1 +11685,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmpl);\n@@ -12232,1 +11698,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmpli);\n@@ -12254,1 +11719,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_tdi);\n@@ -12273,1 +11737,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmpl);\n@@ -12284,1 +11747,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmpl);\n@@ -12301,1 +11763,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmpi);\n@@ -12318,1 +11779,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fcmpu);\n@@ -12333,1 +11793,1 @@\n-  size((false \/* TODO: PPC PORT(InsertEndGroupPPC64 && Compile::current()->do_hb_scheduling())*\/ ? 16 : 12));\n+  size(12);\n@@ -12335,1 +11795,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cmovecr);\n@@ -12340,1 +11799,0 @@\n-    \/\/ TODO PPC port __ endgroup_if_needed(_size == 16);\n@@ -12433,1 +11891,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fcmpu);\n@@ -12638,1 +12095,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_b);\n@@ -12678,1 +12134,0 @@\n-  predicate(!false \/* TODO: PPC port HB_Schedule*\/);\n@@ -12691,20 +12146,0 @@\n-\/\/ Conditional Branch used with Power6 scheduler (can be far or short).\n-instruct branchConSched(cmpOp cmp, flagsRegSrc crx, label lbl) %{\n-  \/\/ Same match rule as `branchCon'.\n-  match(If cmp crx);\n-  effect(USE crx, USE lbl);\n-  predicate(false \/* TODO: PPC port HB_Schedule*\/);\n-  \/\/ Higher cost than `branchCon'.\n-  ins_cost(5*BRANCH_COST);\n-\n-  \/\/ Actually size doesn't depend on alignment but on shortening.\n-  ins_variable_size_depending_on_alignment(true);\n-  \/\/ long variant.\n-  ins_short_branch(0);\n-\n-  format %{ \"B_FAR$cmp $crx, $lbl\" %}\n-  size(8); \/\/ worst case\n-  ins_encode( enc_bc_short_far(crx, cmp, lbl) );\n-  ins_pipe(pipe_class_default);\n-%}\n-\n@@ -12728,1 +12163,0 @@\n-  predicate(!false \/* TODO: PPC port HB_Schedule *\/);\n@@ -12740,19 +12174,0 @@\n-\/\/ Conditional Branch used with Power6 scheduler (can be far or short).\n-instruct branchLoopEndSched(cmpOp cmp, flagsRegSrc crx, label labl) %{\n-  match(CountedLoopEnd cmp crx);\n-  effect(USE labl);\n-  predicate(false \/* TODO: PPC port HB_Schedule *\/);\n-  \/\/ Higher cost than `branchCon'.\n-  ins_cost(5*BRANCH_COST);\n-\n-  \/\/ Actually size doesn't depend on alignment but on shortening.\n-  ins_variable_size_depending_on_alignment(true);\n-  \/\/ Long variant.\n-  ins_short_branch(0);\n-\n-  format %{ \"B_FAR$cmp $crx, $labl \\t\/\/ counted loop end\" %}\n-  size(8); \/\/ worst case\n-  ins_encode( enc_bc_short_far(crx, cmp, labl) );\n-  ins_pipe(pipe_class_default);\n-%}\n-\n@@ -12778,1 +12193,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -12794,1 +12208,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -12813,1 +12226,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -12834,1 +12246,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -12853,1 +12264,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -12871,1 +12281,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldicr);\n@@ -12884,1 +12293,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_subf);\n@@ -12898,1 +12306,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -12912,1 +12319,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -12926,1 +12332,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -12940,1 +12345,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -12957,1 +12361,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -12974,1 +12377,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -12991,1 +12393,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -13008,1 +12409,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -13024,1 +12424,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -13040,1 +12439,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -13056,1 +12454,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -13078,1 +12475,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -13112,1 +12508,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -13139,1 +12534,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -13167,1 +12561,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -13202,1 +12595,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -13230,1 +12622,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -13253,1 +12644,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -13278,1 +12668,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -13306,1 +12695,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -13334,1 +12722,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -13359,1 +12746,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -13381,1 +12767,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -13403,1 +12788,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -13421,1 +12805,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -13444,1 +12827,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -13465,1 +12847,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -13481,1 +12862,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -13538,1 +12918,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -13572,1 +12951,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -13590,1 +12968,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_popcntb);\n@@ -13605,1 +12982,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_popcntb);\n@@ -13619,1 +12995,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cntlzw);\n@@ -13633,1 +13008,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cntlzd);\n@@ -13647,1 +13021,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_cntlzd);\n@@ -13724,1 +13097,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rlwimi);\n@@ -13738,1 +13110,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rlwimi);\n@@ -14133,1 +13504,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldimi);\n@@ -14147,1 +13517,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldimi);\n@@ -14161,1 +13530,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_rldimi);\n@@ -14184,1 +13552,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addi);\n@@ -14196,1 +13563,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addi);\n@@ -14258,1 +13624,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addi);\n@@ -14270,1 +13635,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addi);\n@@ -14332,1 +13696,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addi);\n@@ -14344,1 +13707,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addi);\n@@ -14422,1 +13784,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_addi);\n@@ -14870,1 +14231,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -14883,1 +14243,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -14896,1 +14255,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -14909,1 +14267,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -15174,1 +14531,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_bctrl);\n@@ -15223,1 +14579,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -15236,1 +14591,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_blr);\n@@ -15258,1 +14612,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -15287,1 +14640,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_compound);\n@@ -15302,1 +14654,0 @@\n-      \/\/ TODO: PPC port $archOpcode(ppc64Opcode_tdi);\n@@ -15336,1 +14687,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_endgroup);\n@@ -15352,1 +14702,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fmr);\n@@ -15366,1 +14715,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fmr);\n@@ -15380,1 +14728,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_fmr);\n@@ -15391,1 +14738,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_mcrf);\n@@ -15406,1 +14752,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_mcrf);\n@@ -15420,1 +14765,0 @@\n-    \/\/ TODO: PPC port $archOpcode(ppc64Opcode_mcrf);\n","filename":"src\/hotspot\/cpu\/ppc\/ppc.ad","additions":42,"deletions":698,"binary":false,"changes":740,"status":"modified"},{"patch":"@@ -281,2 +281,2 @@\n-\/\/ 2) reg_class compiler_method_oop_reg    (as defined in frame section)\n-\/\/ 2) reg_class interpreter_method_oop_reg (as defined in frame section)\n+\/\/ 2) reg_class compiler_method_reg        (as defined in frame section)\n+\/\/ 2) reg_class interpreter_method_reg     (as defined in frame section)\n@@ -1572,5 +1572,0 @@\n-int Matcher::regnum_to_fpu_offset(int regnum) {\n-  ShouldNotReachHere();\n-  return regnum - 32; \/\/ The FP registers are in the second chunk.\n-}\n-\n@@ -2477,3 +2472,0 @@\n-  \/\/ What direction does stack grow in (assumed to be same for native & Java).\n-  stack_direction(TOWARDS_LOW);\n-\n@@ -2492,1 +2484,1 @@\n-  \/\/ compiler_method_oop_reg(Z_R1);\/\/Z_R1_scratch\n+  \/\/ compiler_method_reg(Z_R1);\/\/Z_R1_scratch\n@@ -2494,2 +2486,2 @@\n-  \/\/ Method Oop Register when calling interpreter\n-  interpreter_method_oop_reg(Z_R9);\/\/Z_method\n+  \/\/ Method Register when calling interpreter\n+  interpreter_method_reg(Z_R9);\/\/Z_method\n@@ -3560,2 +3552,2 @@\n-operand compiler_method_oop_regP(iRegP reg) %{\n-  constraint(ALLOC_IN_RC(z_r1_RegP)); \/\/ compiler_method_oop_reg\n+operand compiler_method_regP(iRegP reg) %{\n+  constraint(ALLOC_IN_RC(z_r1_RegP)); \/\/ compiler_method_reg\n@@ -3567,2 +3559,2 @@\n-operand interpreter_method_oop_regP(iRegP reg) %{\n-  constraint(ALLOC_IN_RC(z_r9_regP)); \/\/ interpreter_method_oop_reg\n+operand interpreter_method_regP(iRegP reg) %{\n+  constraint(ALLOC_IN_RC(z_r9_regP)); \/\/ interpreter_method_reg\n","filename":"src\/hotspot\/cpu\/s390\/s390.ad","additions":9,"deletions":17,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2016, 2019, SAP SE. All rights reserved.\n+ * Copyright (c) 2016, 2019 SAP SE. All rights reserved.\n","filename":"src\/hotspot\/cpu\/s390\/sharedRuntime_s390.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -134,2 +134,2 @@\n-\/\/ 2) reg_class compiler_method_oop_reg    ( \/* as def'd in frame section *\/ )\n-\/\/ 2) reg_class interpreter_method_oop_reg ( \/* as def'd in frame section *\/ )\n+\/\/ 2) reg_class compiler_method_reg        ( \/* as def'd in frame section *\/ )\n+\/\/ 2) reg_class interpreter_method_reg     ( \/* as def'd in frame section *\/ )\n@@ -1388,4 +1388,0 @@\n-int Matcher::regnum_to_fpu_offset(int regnum) {\n-  return regnum - 32; \/\/ The FP registers are in the second chunk\n-}\n-\n@@ -1948,1 +1944,1 @@\n-\/\/     \/\/ int imo_reg    = Matcher::interpreter_method_oop_reg();\n+\/\/     \/\/ int imo_reg    = Matcher::interpreter_method_reg();\n@@ -3208,3 +3204,0 @@\n-  \/\/ What direction does stack grow in (assumed to be same for C & Java)\n-  stack_direction(TOWARDS_LOW);\n-\n@@ -3214,1 +3207,1 @@\n-  interpreter_method_oop_reg(EBX);      \/\/ Method Oop Register when calling interpreter\n+  interpreter_method_reg(EBX);          \/\/ Method Register when calling interpreter\n","filename":"src\/hotspot\/cpu\/x86\/x86_32.ad","additions":4,"deletions":11,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -164,2 +164,2 @@\n-\/\/ 2) reg_class compiler_method_oop_reg    ( \/* as def'd in frame section *\/ )\n-\/\/ 2) reg_class interpreter_method_oop_reg ( \/* as def'd in frame section *\/ )\n+\/\/ 2) reg_class compiler_method_reg        ( \/* as def'd in frame section *\/ )\n+\/\/ 2) reg_class interpreter_method_reg     ( \/* as def'd in frame section *\/ )\n@@ -1598,5 +1598,0 @@\n-int Matcher::regnum_to_fpu_offset(int regnum)\n-{\n-  return regnum - 32; \/\/ The FP registers are in the second chunk\n-}\n-\n@@ -2760,3 +2755,0 @@\n-  \/\/ What direction does stack grow in (assumed to be same for C & Java)\n-  stack_direction(TOWARDS_LOW);\n-\n@@ -2766,1 +2758,1 @@\n-  interpreter_method_oop_reg(RBX);      \/\/ Method Oop Register when\n+  interpreter_method_reg(RBX);          \/\/ Method Register when\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":3,"deletions":11,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"classfile\/classLoaderDataShared.hpp\"\n@@ -42,0 +43,1 @@\n+#include \"memory\/metaspaceShared.hpp\"\n@@ -43,0 +45,2 @@\n+#include \"prims\/jvmtiExport.hpp\"\n+#include \"runtime\/globals_extension.hpp\"\n@@ -271,0 +275,1 @@\n+  check_cds_restrictions(CHECK);\n@@ -475,0 +480,40 @@\n+#if INCLUDE_CDS_JAVA_HEAP\n+void Modules::define_archived_modules(jobject platform_loader, jobject system_loader, TRAPS) {\n+  assert(UseSharedSpaces && MetaspaceShared::use_full_module_graph(), \"must be\");\n+\n+  \/\/ We don't want the classes used by the archived full module graph to be redefined by JVMTI.\n+  \/\/ Luckily, such classes are loaded in the JVMTI \"early\" phase, and CDS is disabled if a JVMTI\n+  \/\/ agent wants to redefine classes in this phase.\n+  JVMTI_ONLY(assert(JvmtiExport::is_early_phase(), \"must be\"));\n+  assert(!(JvmtiExport::should_post_class_file_load_hook() && JvmtiExport::has_early_class_hook_env()),\n+         \"CDS should be disabled if early class hooks are enabled\");\n+\n+  Handle java_base_module(THREAD, ClassLoaderDataShared::restore_archived_oops_for_null_class_loader_data());\n+  \/\/ Patch any previously loaded class's module field with java.base's java.lang.Module.\n+  ModuleEntryTable::patch_javabase_entries(java_base_module);\n+\n+  if (platform_loader == NULL) {\n+    THROW_MSG(vmSymbols::java_lang_NullPointerException(), \"Null platform loader object\");\n+  }\n+\n+  if (system_loader == NULL) {\n+    THROW_MSG(vmSymbols::java_lang_NullPointerException(), \"Null system loader object\");\n+  }\n+\n+  Handle h_platform_loader(THREAD, JNIHandles::resolve_non_null(platform_loader));\n+  ClassLoaderData* platform_loader_data = SystemDictionary::register_loader(h_platform_loader);\n+  ClassLoaderDataShared::restore_java_platform_loader_from_archive(platform_loader_data);\n+\n+  Handle h_system_loader(THREAD, JNIHandles::resolve_non_null(system_loader));\n+  ClassLoaderData* system_loader_data = SystemDictionary::register_loader(h_system_loader);\n+  ClassLoaderDataShared::restore_java_system_loader_from_archive(system_loader_data);\n+}\n+\n+void Modules::check_cds_restrictions(TRAPS) {\n+  if (DumpSharedSpaces && Universe::is_module_initialized() && MetaspaceShared::use_full_module_graph()) {\n+    THROW_MSG(vmSymbols::java_lang_UnsupportedOperationException(),\n+              \"During -Xshare:dump, module system cannot be modified after it's initialized\");\n+  }\n+}\n+#endif \/\/ INCLUDE_CDS_JAVA_HEAP\n+\n@@ -513,0 +558,1 @@\n+  check_cds_restrictions(CHECK);\n@@ -580,0 +626,1 @@\n+  check_cds_restrictions(CHECK);\n@@ -588,0 +635,1 @@\n+  check_cds_restrictions(CHECK);\n@@ -693,0 +741,1 @@\n+  check_cds_restrictions(CHECK);\n","filename":"src\/hotspot\/share\/classfile\/modules.cpp","additions":49,"deletions":0,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -38,12 +38,9 @@\n-#define C2_FLAGS(develop, \\\n-                 develop_pd, \\\n-                 product, \\\n-                 product_pd, \\\n-                 diagnostic, \\\n-                 diagnostic_pd, \\\n-                 experimental, \\\n-                 notproduct, \\\n-                 range, \\\n-                 constraint) \\\n-                                                                            \\\n-  diagnostic(bool, StressLCM, false,                                        \\\n+#define C2_FLAGS(develop,                                                   \\\n+                 develop_pd,                                                \\\n+                 product,                                                   \\\n+                 product_pd,                                                \\\n+                 notproduct,                                                \\\n+                 range,                                                     \\\n+                 constraint)                                                \\\n+                                                                            \\\n+  product(bool, StressLCM, false, DIAGNOSTIC,                               \\\n@@ -52,1 +49,1 @@\n-  diagnostic(bool, StressGCM, false,                                        \\\n+  product(bool, StressGCM, false, DIAGNOSTIC,                               \\\n@@ -119,1 +116,1 @@\n-  diagnostic_pd(bool, IdealizeClearArrayNode,                               \\\n+  product_pd(bool, IdealizeClearArrayNode, DIAGNOSTIC,                      \\\n@@ -140,1 +137,1 @@\n-  diagnostic(bool, PrintOptoAssembly, false,                                \\\n+  product(bool, PrintOptoAssembly, false, DIAGNOSTIC,                       \\\n@@ -180,1 +177,1 @@\n-  experimental(bool, PostLoopMultiversioning, false,                        \\\n+  product(bool, PostLoopMultiversioning, false, EXPERIMENTAL,               \\\n@@ -186,1 +183,1 @@\n-  diagnostic(bool, UseVectorMacroLogic, true,                               \\\n+  product(bool, UseVectorMacroLogic, true, DIAGNOSTIC,                      \\\n@@ -387,3 +384,0 @@\n-  product(bool, InsertMemBarAfterArraycopy, true,                           \\\n-          \"Insert memory barrier after arraycopy call\")                     \\\n-                                                                            \\\n@@ -488,1 +482,1 @@\n-  diagnostic(bool, PrintPreciseBiasedLockingStatistics, false,              \\\n+  product(bool, PrintPreciseBiasedLockingStatistics, false, DIAGNOSTIC,     \\\n@@ -492,1 +486,1 @@\n-  diagnostic(bool, PrintPreciseRTMLockingStatistics, false,                 \\\n+  product(bool, PrintPreciseRTMLockingStatistics, false, DIAGNOSTIC,        \\\n@@ -505,1 +499,1 @@\n-  diagnostic(bool, AggressiveUnboxing, true,                                \\\n+  product(bool, AggressiveUnboxing, true, DIAGNOSTIC,                       \\\n@@ -560,1 +554,1 @@\n-  diagnostic(intx, DominatorSearchLimit, 1000,                              \\\n+  product(intx, DominatorSearchLimit, 1000, DIAGNOSTIC,                     \\\n@@ -575,1 +569,1 @@\n-  diagnostic(bool, InlineReflectionGetCallerClass, true,                    \\\n+  product(bool, InlineReflectionGetCallerClass, true, DIAGNOSTIC,           \\\n@@ -579,1 +573,1 @@\n-  diagnostic(bool, InlineObjectCopy, true,                                  \\\n+  product(bool, InlineObjectCopy, true, DIAGNOSTIC,                         \\\n@@ -582,1 +576,1 @@\n-  diagnostic(bool, SpecialStringCompareTo, true,                            \\\n+  product(bool, SpecialStringCompareTo, true, DIAGNOSTIC,                   \\\n@@ -585,1 +579,1 @@\n-  diagnostic(bool, SpecialStringIndexOf, true,                              \\\n+  product(bool, SpecialStringIndexOf, true, DIAGNOSTIC,                     \\\n@@ -588,1 +582,1 @@\n-  diagnostic(bool, SpecialStringEquals, true,                               \\\n+  product(bool, SpecialStringEquals, true, DIAGNOSTIC,                      \\\n@@ -591,1 +585,1 @@\n-  diagnostic(bool, SpecialArraysEquals, true,                               \\\n+  product(bool, SpecialArraysEquals, true, DIAGNOSTIC,                      \\\n@@ -594,1 +588,1 @@\n-  diagnostic(bool, SpecialEncodeISOArray, true,                             \\\n+  product(bool, SpecialEncodeISOArray, true, DIAGNOSTIC,                    \\\n@@ -616,1 +610,1 @@\n-  diagnostic(bool, TraceSpilling, false,                                    \\\n+  product(bool, TraceSpilling, false, DIAGNOSTIC,                           \\\n@@ -619,1 +613,1 @@\n-  diagnostic(bool, TraceTypeProfile, false,                                 \\\n+  product(bool, TraceTypeProfile, false, DIAGNOSTIC,                        \\\n@@ -635,1 +629,1 @@\n-  diagnostic(bool, PrintIntrinsics, false,                                  \\\n+  product(bool, PrintIntrinsics, false, DIAGNOSTIC,                         \\\n@@ -641,1 +635,1 @@\n-  diagnostic(bool, DebugInlinedCalls, true,                                 \\\n+  product(bool, DebugInlinedCalls, true, DIAGNOSTIC,                        \\\n@@ -647,1 +641,1 @@\n-  diagnostic(bool, ProfileDynamicTypes, true,                               \\\n+  product(bool, ProfileDynamicTypes, true, DIAGNOSTIC,                      \\\n@@ -709,1 +703,1 @@\n-  diagnostic(bool, IncrementalInlineVirtual, true,                          \\\n+  product(bool, IncrementalInlineVirtual, true, DIAGNOSTIC,                 \\\n@@ -719,1 +713,1 @@\n-  diagnostic(bool, OptimizeExpensiveOps, true,                              \\\n+  product(bool, OptimizeExpensiveOps, true, DIAGNOSTIC,                     \\\n@@ -722,1 +716,1 @@\n-  diagnostic(bool, UseMathExactIntrinsics, true,                            \\\n+  product(bool, UseMathExactIntrinsics, true, DIAGNOSTIC,                   \\\n@@ -725,1 +719,1 @@\n-  diagnostic(bool, UseCharacterCompareIntrinsics, false,                    \\\n+  product(bool, UseCharacterCompareIntrinsics, false, DIAGNOSTIC,           \\\n@@ -728,1 +722,1 @@\n-  diagnostic(bool, UseMultiplyToLenIntrinsic, false,                        \\\n+  product(bool, UseMultiplyToLenIntrinsic, false, DIAGNOSTIC,               \\\n@@ -731,1 +725,1 @@\n-  diagnostic(bool, UseSquareToLenIntrinsic, false,                          \\\n+  product(bool, UseSquareToLenIntrinsic, false, DIAGNOSTIC,                 \\\n@@ -734,1 +728,1 @@\n-  diagnostic(bool, UseMulAddIntrinsic, false,                               \\\n+  product(bool, UseMulAddIntrinsic, false, DIAGNOSTIC,                      \\\n@@ -737,1 +731,1 @@\n-  diagnostic(bool, UseMontgomeryMultiplyIntrinsic, false,                   \\\n+  product(bool, UseMontgomeryMultiplyIntrinsic, false, DIAGNOSTIC,          \\\n@@ -740,1 +734,1 @@\n-  diagnostic(bool, UseMontgomerySquareIntrinsic, false,                     \\\n+  product(bool, UseMontgomerySquareIntrinsic, false, DIAGNOSTIC,            \\\n@@ -743,1 +737,1 @@\n-  experimental(bool, EnableVectorSupport, false,                            \\\n+  product(bool, EnableVectorSupport, false, EXPERIMENTAL,                   \\\n@@ -746,1 +740,1 @@\n-  experimental(bool, EnableVectorReboxing, false,                           \\\n+  product(bool, EnableVectorReboxing, false, EXPERIMENTAL,                  \\\n@@ -749,1 +743,1 @@\n-  experimental(bool, EnableVectorAggressiveReboxing, false,                 \\\n+  product(bool, EnableVectorAggressiveReboxing, false, EXPERIMENTAL,        \\\n@@ -752,1 +746,1 @@\n-  experimental(bool, UseVectorStubs, false,                                 \\\n+  product(bool, UseVectorStubs, false, EXPERIMENTAL,                        \\\n@@ -758,1 +752,1 @@\n-  diagnostic(bool, UseInlineDepthForSpeculativeTypes, true,                 \\\n+  product(bool, UseInlineDepthForSpeculativeTypes, true, DIAGNOSTIC,        \\\n@@ -789,2 +783,4 @@\n-  diagnostic(bool, ExpandSubTypeCheckAtParseTime, false,                    \\\n-          \"Do not use subtype check macro node\")                            \\\n+  product(bool, ExpandSubTypeCheckAtParseTime, false, DIAGNOSTIC,           \\\n+          \"Do not use subtype check macro node\")\n+\n+\/\/ end of C2_FLAGS\n","filename":"src\/hotspot\/share\/opto\/c2_globals.hpp","additions":48,"deletions":52,"binary":false,"changes":100,"status":"modified"},{"patch":"@@ -58,1 +58,0 @@\n-class OopMap;\n@@ -333,1 +332,0 @@\n-      _oop_map(NULL),\n@@ -340,1 +338,0 @@\n-  OopMap*         _oop_map;   \/\/ Array of OopMap info (8-bit char) for GC\n@@ -353,2 +350,0 @@\n-  OopMap *oop_map() const { return _oop_map; }\n-  void set_oop_map(OopMap *om) { _oop_map = om; }\n","filename":"src\/hotspot\/share\/opto\/callnode.hpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1375,4 +1375,0 @@\n-\n-    \/\/ Compute number of stack slots needed to restore stack in case of\n-    \/\/ Pascal-style argument popping.\n-    mcall->_argsize = out_arg_limit_per_call - begin_out_arg_area;\n@@ -1416,3 +1412,0 @@\n-  \/\/ Move the OopMap\n-  msfpt->_oop_map = sfpt->_oop_map;\n-\n","filename":"src\/hotspot\/share\/opto\/matcher.cpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -364,3 +364,0 @@\n-  \/\/ TRUE - grows up, FALSE - grows down (Intel)\n-  virtual bool stack_direction() const;\n-\n@@ -424,2 +421,2 @@\n-  static OptoReg::Name  interpreter_method_oop_reg();\n-  static int            interpreter_method_oop_reg_encode();\n+  static OptoReg::Name  interpreter_method_reg();\n+  static int            interpreter_method_reg_encode();\n@@ -427,3 +424,3 @@\n-  static OptoReg::Name  compiler_method_oop_reg();\n-  static const RegMask &compiler_method_oop_reg_mask();\n-  static int            compiler_method_oop_reg_encode();\n+  static OptoReg::Name  compiler_method_reg();\n+  static const RegMask &compiler_method_reg_mask();\n+  static int            compiler_method_reg_encode();\n@@ -453,3 +450,0 @@\n-  \/\/ !!!!! Special stuff for building ScopeDescs\n-  virtual int      regnum_to_fpu_offset(int regnum);\n-\n","filename":"src\/hotspot\/share\/opto\/matcher.hpp","additions":5,"deletions":11,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -556,0 +556,1 @@\n+  { \"InsertMemBarAfterArraycopy\",    JDK_Version::undefined(), JDK_Version::jdk(16), JDK_Version::jdk(17) },\n@@ -1461,1 +1462,8 @@\n-    log_info(cds)(\"Using optimized module handling disabled due to incompatible property: %s=%s\", key, value);\n+    log_info(cds)(\"optimized module handling: disabled due to incompatible property: %s=%s\", key, value);\n+  }\n+  if (strcmp(key, \"jdk.module.showModuleResolution\") == 0 ||\n+      strcmp(key, \"jdk.module.illegalAccess\") == 0 ||\n+      strcmp(key, \"jdk.module.validation\") == 0 ||\n+      strcmp(key, \"java.system.class.loader\") == 0) {\n+    MetaspaceShared::disable_full_module_graph();\n+    log_info(cds)(\"full module graph: disabled due to incompatible property: %s=%s\", key, value);\n@@ -2510,1 +2518,1 @@\n-      log_info(cds)(\"Using optimized module handling disabled due to bootclasspath was appended\");\n+      log_info(cds)(\"optimized module handling: disabled because bootclasspath was appended\");\n@@ -3900,4 +3908,1 @@\n-\n-  \/\/ Initialize ranges and constraints\n-  JVMFlagRangeList::init();\n-  JVMFlagConstraintList::init();\n+  JVMFlag::check_all_flag_declarations();\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":11,"deletions":6,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -341,3 +341,3 @@\n-  \/********************************\/                                                                                                 \\\n-  \/* MethodOop-related structures *\/                                                                                                 \\\n-  \/********************************\/                                                                                                 \\\n+  \/*****************************\/                                                                                                    \\\n+  \/* Method related structures *\/                                                                                                    \\\n+  \/*****************************\/                                                                                                    \\\n@@ -1287,3 +1287,3 @@\n-  \/*************************************\/                                 \\\n-  \/* MethodOop-related data structures *\/                                 \\\n-  \/*************************************\/                                 \\\n+  \/**********************************\/                                    \\\n+  \/* Method related data structures *\/                                    \\\n+  \/**********************************\/                                    \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -999,6 +999,6 @@\n-template<class T> inline T MAX2(T a, T b)           { return (a > b) ? a : b; }\n-template<class T> inline T MIN2(T a, T b)           { return (a < b) ? a : b; }\n-template<class T> inline T MAX3(T a, T b, T c)      { return MAX2(MAX2(a, b), c); }\n-template<class T> inline T MIN3(T a, T b, T c)      { return MIN2(MIN2(a, b), c); }\n-template<class T> inline T MAX4(T a, T b, T c, T d) { return MAX2(MAX3(a, b, c), d); }\n-template<class T> inline T MIN4(T a, T b, T c, T d) { return MIN2(MIN3(a, b, c), d); }\n+template<class T> constexpr T MAX2(T a, T b)           { return (a > b) ? a : b; }\n+template<class T> constexpr T MIN2(T a, T b)           { return (a < b) ? a : b; }\n+template<class T> constexpr T MAX3(T a, T b, T c)      { return MAX2(MAX2(a, b), c); }\n+template<class T> constexpr T MIN3(T a, T b, T c)      { return MIN2(MIN2(a, b), c); }\n+template<class T> constexpr T MAX4(T a, T b, T c, T d) { return MAX2(MAX3(a, b, c), d); }\n+template<class T> constexpr T MIN4(T a, T b, T c, T d) { return MIN2(MIN3(a, b, c), d); }\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}