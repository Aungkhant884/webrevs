{"files":[{"patch":"@@ -479,8 +479,0 @@\n-    @Override\n-    @ForceInline\n-    public Byte128Vector compress(VectorMask<Byte> m, Vector<Byte> v) {\n-        return (Byte128Vector)\n-            super.compressTemplate(Byte128Mask.class,\n-                                   (Byte128Mask) m, (Byte128Vector) v);  \/\/ specialize\n-    }\n-\n@@ -495,8 +487,0 @@\n-    @Override\n-    @ForceInline\n-    public Byte128Vector expand(VectorMask<Byte> m, Vector<Byte> v) {\n-        return (Byte128Vector)\n-            super.expandTemplate(Byte128Mask.class,\n-                                   (Byte128Mask) m, (Byte128Vector) v);  \/\/ specialize\n-    }\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte128Vector.java","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -479,8 +479,0 @@\n-    @Override\n-    @ForceInline\n-    public Byte256Vector compress(VectorMask<Byte> m, Vector<Byte> v) {\n-        return (Byte256Vector)\n-            super.compressTemplate(Byte256Mask.class,\n-                                   (Byte256Mask) m, (Byte256Vector) v);  \/\/ specialize\n-    }\n-\n@@ -495,8 +487,0 @@\n-    @Override\n-    @ForceInline\n-    public Byte256Vector expand(VectorMask<Byte> m, Vector<Byte> v) {\n-        return (Byte256Vector)\n-            super.expandTemplate(Byte256Mask.class,\n-                                   (Byte256Mask) m, (Byte256Vector) v);  \/\/ specialize\n-    }\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte256Vector.java","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -479,8 +479,0 @@\n-    @Override\n-    @ForceInline\n-    public Byte512Vector compress(VectorMask<Byte> m, Vector<Byte> v) {\n-        return (Byte512Vector)\n-            super.compressTemplate(Byte512Mask.class,\n-                                   (Byte512Mask) m, (Byte512Vector) v);  \/\/ specialize\n-    }\n-\n@@ -495,8 +487,0 @@\n-    @Override\n-    @ForceInline\n-    public Byte512Vector expand(VectorMask<Byte> m, Vector<Byte> v) {\n-        return (Byte512Vector)\n-            super.expandTemplate(Byte512Mask.class,\n-                                   (Byte512Mask) m, (Byte512Vector) v);  \/\/ specialize\n-    }\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte512Vector.java","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -479,8 +479,0 @@\n-    @Override\n-    @ForceInline\n-    public Byte64Vector compress(VectorMask<Byte> m, Vector<Byte> v) {\n-        return (Byte64Vector)\n-            super.compressTemplate(Byte64Mask.class,\n-                                   (Byte64Mask) m, (Byte64Vector) v);  \/\/ specialize\n-    }\n-\n@@ -495,8 +487,0 @@\n-    @Override\n-    @ForceInline\n-    public Byte64Vector expand(VectorMask<Byte> m, Vector<Byte> v) {\n-        return (Byte64Vector)\n-            super.expandTemplate(Byte64Mask.class,\n-                                   (Byte64Mask) m, (Byte64Vector) v);  \/\/ specialize\n-    }\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte64Vector.java","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -479,8 +479,0 @@\n-    @Override\n-    @ForceInline\n-    public ByteMaxVector compress(VectorMask<Byte> m, Vector<Byte> v) {\n-        return (ByteMaxVector)\n-            super.compressTemplate(ByteMaxMask.class,\n-                                   (ByteMaxMask) m, (ByteMaxVector) v);  \/\/ specialize\n-    }\n-\n@@ -495,8 +487,0 @@\n-    @Override\n-    @ForceInline\n-    public ByteMaxVector expand(VectorMask<Byte> m, Vector<Byte> v) {\n-        return (ByteMaxVector)\n-            super.expandTemplate(ByteMaxMask.class,\n-                                   (ByteMaxMask) m, (ByteMaxVector) v);  \/\/ specialize\n-    }\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteMaxVector.java","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2384,22 +2384,0 @@\n-    \/**\n-     * {@inheritDoc} <!--workaround-->\n-     *\/\n-    @Override\n-    public abstract\n-    ByteVector compress(VectorMask<Byte> m, Vector<Byte> v);\n-\n-    \/*package-private*\/\n-    @ForceInline\n-    final\n-    <M extends VectorMask<Byte>>\n-    ByteVector compressTemplate(Class<M> masktype, M m, ByteVector v) {\n-      m.check(masktype, this);\n-      int j = 0;\n-      for (int i = 0; i < length(); i++) {\n-        if (m.laneIsSet(i)) {\n-           v = v.withLane(j++, lane(i));\n-        }\n-      }\n-      return v;\n-    }\n-\n@@ -2424,22 +2402,0 @@\n-        }\n-      }\n-      return v;\n-    }\n-\n-    \/**\n-     * {@inheritDoc} <!--workaround-->\n-     *\/\n-    @Override\n-    public abstract\n-    ByteVector expand(VectorMask<Byte> m, Vector<Byte> v);\n-\n-    \/*package-private*\/\n-    @ForceInline\n-    final\n-    <M extends VectorMask<Byte>>\n-    ByteVector expandTemplate(Class<M> masktype, M m, ByteVector v) {\n-      m.check(masktype, this);\n-      int j = 0;\n-      for (int i = 0; i < length(); i++) {\n-        if (m.laneIsSet(i)) {\n-           v = v.withLane(i, lane(j++));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteVector.java","additions":0,"deletions":44,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -466,8 +466,0 @@\n-    @Override\n-    @ForceInline\n-    public Double128Vector compress(VectorMask<Double> m, Vector<Double> v) {\n-        return (Double128Vector)\n-            super.compressTemplate(Double128Mask.class,\n-                                   (Double128Mask) m, (Double128Vector) v);  \/\/ specialize\n-    }\n-\n@@ -480,8 +472,0 @@\n-    }\n-\n-    @Override\n-    @ForceInline\n-    public Double128Vector expand(VectorMask<Double> m, Vector<Double> v) {\n-        return (Double128Vector)\n-            super.expandTemplate(Double128Mask.class,\n-                                   (Double128Mask) m, (Double128Vector) v);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double128Vector.java","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -466,8 +466,0 @@\n-    @Override\n-    @ForceInline\n-    public Double256Vector compress(VectorMask<Double> m, Vector<Double> v) {\n-        return (Double256Vector)\n-            super.compressTemplate(Double256Mask.class,\n-                                   (Double256Mask) m, (Double256Vector) v);  \/\/ specialize\n-    }\n-\n@@ -482,8 +474,0 @@\n-    @Override\n-    @ForceInline\n-    public Double256Vector expand(VectorMask<Double> m, Vector<Double> v) {\n-        return (Double256Vector)\n-            super.expandTemplate(Double256Mask.class,\n-                                   (Double256Mask) m, (Double256Vector) v);  \/\/ specialize\n-    }\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double256Vector.java","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -466,8 +466,0 @@\n-    @Override\n-    @ForceInline\n-    public Double512Vector compress(VectorMask<Double> m, Vector<Double> v) {\n-        return (Double512Vector)\n-            super.compressTemplate(Double512Mask.class,\n-                                   (Double512Mask) m, (Double512Vector) v);  \/\/ specialize\n-    }\n-\n@@ -482,8 +474,0 @@\n-    @Override\n-    @ForceInline\n-    public Double512Vector expand(VectorMask<Double> m, Vector<Double> v) {\n-        return (Double512Vector)\n-            super.expandTemplate(Double512Mask.class,\n-                                   (Double512Mask) m, (Double512Vector) v);  \/\/ specialize\n-    }\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double512Vector.java","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -466,8 +466,0 @@\n-    @Override\n-    @ForceInline\n-    public Double64Vector compress(VectorMask<Double> m, Vector<Double> v) {\n-        return (Double64Vector)\n-            super.compressTemplate(Double64Mask.class,\n-                                   (Double64Mask) m, (Double64Vector) v);  \/\/ specialize\n-    }\n-\n@@ -482,8 +474,0 @@\n-    @Override\n-    @ForceInline\n-    public Double64Vector expand(VectorMask<Double> m, Vector<Double> v) {\n-        return (Double64Vector)\n-            super.expandTemplate(Double64Mask.class,\n-                                   (Double64Mask) m, (Double64Vector) v);  \/\/ specialize\n-    }\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double64Vector.java","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -466,8 +466,0 @@\n-    @Override\n-    @ForceInline\n-    public DoubleMaxVector compress(VectorMask<Double> m, Vector<Double> v) {\n-        return (DoubleMaxVector)\n-            super.compressTemplate(DoubleMaxMask.class,\n-                                   (DoubleMaxMask) m, (DoubleMaxVector) v);  \/\/ specialize\n-    }\n-\n@@ -482,8 +474,0 @@\n-    @Override\n-    @ForceInline\n-    public DoubleMaxVector expand(VectorMask<Double> m, Vector<Double> v) {\n-        return (DoubleMaxVector)\n-            super.expandTemplate(DoubleMaxMask.class,\n-                                   (DoubleMaxMask) m, (DoubleMaxVector) v);  \/\/ specialize\n-    }\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleMaxVector.java","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2230,22 +2230,0 @@\n-    \/**\n-     * {@inheritDoc} <!--workaround-->\n-     *\/\n-    @Override\n-    public abstract\n-    DoubleVector compress(VectorMask<Double> m, Vector<Double> v);\n-\n-    \/*package-private*\/\n-    @ForceInline\n-    final\n-    <M extends VectorMask<Double>>\n-    DoubleVector compressTemplate(Class<M> masktype, M m, DoubleVector v) {\n-      m.check(masktype, this);\n-      int j = 0;\n-      for (int i = 0; i < length(); i++) {\n-        if (m.laneIsSet(i)) {\n-           v = v.withLane(j++, lane(i));\n-        }\n-      }\n-      return v;\n-    }\n-\n@@ -2275,22 +2253,0 @@\n-    \/**\n-     * {@inheritDoc} <!--workaround-->\n-     *\/\n-    @Override\n-    public abstract\n-    DoubleVector expand(VectorMask<Double> m, Vector<Double> v);\n-\n-    \/*package-private*\/\n-    @ForceInline\n-    final\n-    <M extends VectorMask<Double>>\n-    DoubleVector expandTemplate(Class<M> masktype, M m, DoubleVector v) {\n-      m.check(masktype, this);\n-      int j = 0;\n-      for (int i = 0; i < length(); i++) {\n-        if (m.laneIsSet(i)) {\n-           v = v.withLane(i, lane(j++));\n-        }\n-      }\n-      return v;\n-    }\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleVector.java","additions":0,"deletions":44,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -466,8 +466,0 @@\n-    @Override\n-    @ForceInline\n-    public Float128Vector compress(VectorMask<Float> m, Vector<Float> v) {\n-        return (Float128Vector)\n-            super.compressTemplate(Float128Mask.class,\n-                                   (Float128Mask) m, (Float128Vector) v);  \/\/ specialize\n-    }\n-\n@@ -484,8 +476,0 @@\n-    public Float128Vector expand(VectorMask<Float> m, Vector<Float> v) {\n-        return (Float128Vector)\n-            super.expandTemplate(Float128Mask.class,\n-                                   (Float128Mask) m, (Float128Vector) v);  \/\/ specialize\n-    }\n-\n-    @Override\n-    @ForceInline\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float128Vector.java","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -466,8 +466,0 @@\n-    @Override\n-    @ForceInline\n-    public Float256Vector compress(VectorMask<Float> m, Vector<Float> v) {\n-        return (Float256Vector)\n-            super.compressTemplate(Float256Mask.class,\n-                                   (Float256Mask) m, (Float256Vector) v);  \/\/ specialize\n-    }\n-\n@@ -482,8 +474,0 @@\n-    @Override\n-    @ForceInline\n-    public Float256Vector expand(VectorMask<Float> m, Vector<Float> v) {\n-        return (Float256Vector)\n-            super.expandTemplate(Float256Mask.class,\n-                                   (Float256Mask) m, (Float256Vector) v);  \/\/ specialize\n-    }\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float256Vector.java","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -466,8 +466,0 @@\n-    @Override\n-    @ForceInline\n-    public Float512Vector compress(VectorMask<Float> m, Vector<Float> v) {\n-        return (Float512Vector)\n-            super.compressTemplate(Float512Mask.class,\n-                                   (Float512Mask) m, (Float512Vector) v);  \/\/ specialize\n-    }\n-\n@@ -482,8 +474,0 @@\n-    @Override\n-    @ForceInline\n-    public Float512Vector expand(VectorMask<Float> m, Vector<Float> v) {\n-        return (Float512Vector)\n-            super.expandTemplate(Float512Mask.class,\n-                                   (Float512Mask) m, (Float512Vector) v);  \/\/ specialize\n-    }\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float512Vector.java","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -466,8 +466,0 @@\n-    @Override\n-    @ForceInline\n-    public Float64Vector compress(VectorMask<Float> m, Vector<Float> v) {\n-        return (Float64Vector)\n-            super.compressTemplate(Float64Mask.class,\n-                                   (Float64Mask) m, (Float64Vector) v);  \/\/ specialize\n-    }\n-\n@@ -482,8 +474,0 @@\n-    @Override\n-    @ForceInline\n-    public Float64Vector expand(VectorMask<Float> m, Vector<Float> v) {\n-        return (Float64Vector)\n-            super.expandTemplate(Float64Mask.class,\n-                                   (Float64Mask) m, (Float64Vector) v);  \/\/ specialize\n-    }\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float64Vector.java","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -466,8 +466,0 @@\n-    @Override\n-    @ForceInline\n-    public FloatMaxVector compress(VectorMask<Float> m, Vector<Float> v) {\n-        return (FloatMaxVector)\n-            super.compressTemplate(FloatMaxMask.class,\n-                                   (FloatMaxMask) m, (FloatMaxVector) v);  \/\/ specialize\n-    }\n-\n@@ -482,8 +474,0 @@\n-    @Override\n-    @ForceInline\n-    public FloatMaxVector expand(VectorMask<Float> m, Vector<Float> v) {\n-        return (FloatMaxVector)\n-            super.expandTemplate(FloatMaxMask.class,\n-                                   (FloatMaxMask) m, (FloatMaxVector) v);  \/\/ specialize\n-    }\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatMaxVector.java","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2242,22 +2242,0 @@\n-    \/**\n-     * {@inheritDoc} <!--workaround-->\n-     *\/\n-    @Override\n-    public abstract\n-    FloatVector compress(VectorMask<Float> m, Vector<Float> v);\n-\n-    \/*package-private*\/\n-    @ForceInline\n-    final\n-    <M extends VectorMask<Float>>\n-    FloatVector compressTemplate(Class<M> masktype, M m, FloatVector v) {\n-      m.check(masktype, this);\n-      int j = 0;\n-      for (int i = 0; i < length(); i++) {\n-        if (m.laneIsSet(i)) {\n-           v = v.withLane(j++, lane(i));\n-        }\n-      }\n-      return v;\n-    }\n-\n@@ -2287,22 +2265,0 @@\n-    \/**\n-     * {@inheritDoc} <!--workaround-->\n-     *\/\n-    @Override\n-    public abstract\n-    FloatVector expand(VectorMask<Float> m, Vector<Float> v);\n-\n-    \/*package-private*\/\n-    @ForceInline\n-    final\n-    <M extends VectorMask<Float>>\n-    FloatVector expandTemplate(Class<M> masktype, M m, FloatVector v) {\n-      m.check(masktype, this);\n-      int j = 0;\n-      for (int i = 0; i < length(); i++) {\n-        if (m.laneIsSet(i)) {\n-           v = v.withLane(i, lane(j++));\n-        }\n-      }\n-      return v;\n-    }\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatVector.java","additions":0,"deletions":44,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -479,8 +479,0 @@\n-    @Override\n-    @ForceInline\n-    public Int128Vector compress(VectorMask<Integer> m, Vector<Integer> v) {\n-        return (Int128Vector)\n-            super.compressTemplate(Int128Mask.class,\n-                                   (Int128Mask) m, (Int128Vector) v);  \/\/ specialize\n-    }\n-\n@@ -495,8 +487,0 @@\n-    @Override\n-    @ForceInline\n-    public Int128Vector expand(VectorMask<Integer> m, Vector<Integer> v) {\n-        return (Int128Vector)\n-            super.expandTemplate(Int128Mask.class,\n-                                   (Int128Mask) m, (Int128Vector) v);  \/\/ specialize\n-    }\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int128Vector.java","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -479,8 +479,0 @@\n-    @Override\n-    @ForceInline\n-    public Int256Vector compress(VectorMask<Integer> m, Vector<Integer> v) {\n-        return (Int256Vector)\n-            super.compressTemplate(Int256Mask.class,\n-                                   (Int256Mask) m, (Int256Vector) v);  \/\/ specialize\n-    }\n-\n@@ -495,8 +487,0 @@\n-    @Override\n-    @ForceInline\n-    public Int256Vector expand(VectorMask<Integer> m, Vector<Integer> v) {\n-        return (Int256Vector)\n-            super.expandTemplate(Int256Mask.class,\n-                                   (Int256Mask) m, (Int256Vector) v);  \/\/ specialize\n-    }\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int256Vector.java","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -479,8 +479,0 @@\n-    @Override\n-    @ForceInline\n-    public Int512Vector compress(VectorMask<Integer> m, Vector<Integer> v) {\n-        return (Int512Vector)\n-            super.compressTemplate(Int512Mask.class,\n-                                   (Int512Mask) m, (Int512Vector) v);  \/\/ specialize\n-    }\n-\n@@ -495,8 +487,0 @@\n-    @Override\n-    @ForceInline\n-    public Int512Vector expand(VectorMask<Integer> m, Vector<Integer> v) {\n-        return (Int512Vector)\n-            super.expandTemplate(Int512Mask.class,\n-                                   (Int512Mask) m, (Int512Vector) v);  \/\/ specialize\n-    }\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int512Vector.java","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -479,8 +479,0 @@\n-    @Override\n-    @ForceInline\n-    public Int64Vector compress(VectorMask<Integer> m, Vector<Integer> v) {\n-        return (Int64Vector)\n-            super.compressTemplate(Int64Mask.class,\n-                                   (Int64Mask) m, (Int64Vector) v);  \/\/ specialize\n-    }\n-\n@@ -495,8 +487,0 @@\n-    @Override\n-    @ForceInline\n-    public Int64Vector expand(VectorMask<Integer> m, Vector<Integer> v) {\n-        return (Int64Vector)\n-            super.expandTemplate(Int64Mask.class,\n-                                   (Int64Mask) m, (Int64Vector) v);  \/\/ specialize\n-    }\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int64Vector.java","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -479,8 +479,0 @@\n-    @Override\n-    @ForceInline\n-    public IntMaxVector compress(VectorMask<Integer> m, Vector<Integer> v) {\n-        return (IntMaxVector)\n-            super.compressTemplate(IntMaxMask.class,\n-                                   (IntMaxMask) m, (IntMaxVector) v);  \/\/ specialize\n-    }\n-\n@@ -495,8 +487,0 @@\n-    @Override\n-    @ForceInline\n-    public IntMaxVector expand(VectorMask<Integer> m, Vector<Integer> v) {\n-        return (IntMaxVector)\n-            super.expandTemplate(IntMaxMask.class,\n-                                   (IntMaxMask) m, (IntMaxVector) v);  \/\/ specialize\n-    }\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntMaxVector.java","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2383,22 +2383,0 @@\n-    \/**\n-     * {@inheritDoc} <!--workaround-->\n-     *\/\n-    @Override\n-    public abstract\n-    IntVector compress(VectorMask<Integer> m, Vector<Integer> v);\n-\n-    \/*package-private*\/\n-    @ForceInline\n-    final\n-    <M extends VectorMask<Integer>>\n-    IntVector compressTemplate(Class<M> masktype, M m, IntVector v) {\n-      m.check(masktype, this);\n-      int j = 0;\n-      for (int i = 0; i < length(); i++) {\n-        if (m.laneIsSet(i)) {\n-           v = v.withLane(j++, lane(i));\n-        }\n-      }\n-      return v;\n-    }\n-\n@@ -2423,22 +2401,0 @@\n-        }\n-      }\n-      return v;\n-    }\n-\n-    \/**\n-     * {@inheritDoc} <!--workaround-->\n-     *\/\n-    @Override\n-    public abstract\n-    IntVector expand(VectorMask<Integer> m, Vector<Integer> v);\n-\n-    \/*package-private*\/\n-    @ForceInline\n-    final\n-    <M extends VectorMask<Integer>>\n-    IntVector expandTemplate(Class<M> masktype, M m, IntVector v) {\n-      m.check(masktype, this);\n-      int j = 0;\n-      for (int i = 0; i < length(); i++) {\n-        if (m.laneIsSet(i)) {\n-           v = v.withLane(i, lane(j++));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntVector.java","additions":0,"deletions":44,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -469,8 +469,0 @@\n-    @Override\n-    @ForceInline\n-    public Long128Vector compress(VectorMask<Long> m, Vector<Long> v) {\n-        return (Long128Vector)\n-            super.compressTemplate(Long128Mask.class,\n-                                   (Long128Mask) m, (Long128Vector) v);  \/\/ specialize\n-    }\n-\n@@ -485,8 +477,0 @@\n-    @Override\n-    @ForceInline\n-    public Long128Vector expand(VectorMask<Long> m, Vector<Long> v) {\n-        return (Long128Vector)\n-            super.expandTemplate(Long128Mask.class,\n-                                   (Long128Mask) m, (Long128Vector) v);  \/\/ specialize\n-    }\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long128Vector.java","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -469,8 +469,0 @@\n-    @Override\n-    @ForceInline\n-    public Long256Vector compress(VectorMask<Long> m, Vector<Long> v) {\n-        return (Long256Vector)\n-            super.compressTemplate(Long256Mask.class,\n-                                   (Long256Mask) m, (Long256Vector) v);  \/\/ specialize\n-    }\n-\n@@ -485,8 +477,0 @@\n-    @Override\n-    @ForceInline\n-    public Long256Vector expand(VectorMask<Long> m, Vector<Long> v) {\n-        return (Long256Vector)\n-            super.expandTemplate(Long256Mask.class,\n-                                   (Long256Mask) m, (Long256Vector) v);  \/\/ specialize\n-    }\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long256Vector.java","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -469,8 +469,0 @@\n-    @Override\n-    @ForceInline\n-    public Long512Vector compress(VectorMask<Long> m, Vector<Long> v) {\n-        return (Long512Vector)\n-            super.compressTemplate(Long512Mask.class,\n-                                   (Long512Mask) m, (Long512Vector) v);  \/\/ specialize\n-    }\n-\n@@ -485,8 +477,0 @@\n-    @Override\n-    @ForceInline\n-    public Long512Vector expand(VectorMask<Long> m, Vector<Long> v) {\n-        return (Long512Vector)\n-            super.expandTemplate(Long512Mask.class,\n-                                   (Long512Mask) m, (Long512Vector) v);  \/\/ specialize\n-    }\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long512Vector.java","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -469,8 +469,0 @@\n-    @Override\n-    @ForceInline\n-    public Long64Vector compress(VectorMask<Long> m, Vector<Long> v) {\n-        return (Long64Vector)\n-            super.compressTemplate(Long64Mask.class,\n-                                   (Long64Mask) m, (Long64Vector) v);  \/\/ specialize\n-    }\n-\n@@ -485,8 +477,0 @@\n-    @Override\n-    @ForceInline\n-    public Long64Vector expand(VectorMask<Long> m, Vector<Long> v) {\n-        return (Long64Vector)\n-            super.expandTemplate(Long64Mask.class,\n-                                   (Long64Mask) m, (Long64Vector) v);  \/\/ specialize\n-    }\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long64Vector.java","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -469,8 +469,0 @@\n-    @Override\n-    @ForceInline\n-    public LongMaxVector compress(VectorMask<Long> m, Vector<Long> v) {\n-        return (LongMaxVector)\n-            super.compressTemplate(LongMaxMask.class,\n-                                   (LongMaxMask) m, (LongMaxVector) v);  \/\/ specialize\n-    }\n-\n@@ -485,8 +477,0 @@\n-    @Override\n-    @ForceInline\n-    public LongMaxVector expand(VectorMask<Long> m, Vector<Long> v) {\n-        return (LongMaxVector)\n-            super.expandTemplate(LongMaxMask.class,\n-                                   (LongMaxMask) m, (LongMaxVector) v);  \/\/ specialize\n-    }\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongMaxVector.java","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2249,22 +2249,0 @@\n-    \/**\n-     * {@inheritDoc} <!--workaround-->\n-     *\/\n-    @Override\n-    public abstract\n-    LongVector compress(VectorMask<Long> m, Vector<Long> v);\n-\n-    \/*package-private*\/\n-    @ForceInline\n-    final\n-    <M extends VectorMask<Long>>\n-    LongVector compressTemplate(Class<M> masktype, M m, LongVector v) {\n-      m.check(masktype, this);\n-      int j = 0;\n-      for (int i = 0; i < length(); i++) {\n-        if (m.laneIsSet(i)) {\n-           v = v.withLane(j++, lane(i));\n-        }\n-      }\n-      return v;\n-    }\n-\n@@ -2287,22 +2265,0 @@\n-        if (m.laneIsSet(i)) {\n-           v = v.withLane(i, lane(j++));\n-        }\n-      }\n-      return v;\n-    }\n-\n-    \/**\n-     * {@inheritDoc} <!--workaround-->\n-     *\/\n-    @Override\n-    public abstract\n-    LongVector expand(VectorMask<Long> m, Vector<Long> v);\n-\n-    \/*package-private*\/\n-    @ForceInline\n-    final\n-    <M extends VectorMask<Long>>\n-    LongVector expandTemplate(Class<M> masktype, M m, LongVector v) {\n-      m.check(masktype, this);\n-      int j = 0;\n-      for (int i = 0; i < length(); i++) {\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongVector.java","additions":0,"deletions":44,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -479,8 +479,0 @@\n-    @Override\n-    @ForceInline\n-    public Short128Vector compress(VectorMask<Short> m, Vector<Short> v) {\n-        return (Short128Vector)\n-            super.compressTemplate(Short128Mask.class,\n-                                   (Short128Mask) m, (Short128Vector) v);  \/\/ specialize\n-    }\n-\n@@ -495,8 +487,0 @@\n-    @Override\n-    @ForceInline\n-    public Short128Vector expand(VectorMask<Short> m, Vector<Short> v) {\n-        return (Short128Vector)\n-            super.expandTemplate(Short128Mask.class,\n-                                   (Short128Mask) m, (Short128Vector) v);  \/\/ specialize\n-    }\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short128Vector.java","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -479,8 +479,0 @@\n-    @Override\n-    @ForceInline\n-    public Short256Vector compress(VectorMask<Short> m, Vector<Short> v) {\n-        return (Short256Vector)\n-            super.compressTemplate(Short256Mask.class,\n-                                   (Short256Mask) m, (Short256Vector) v);  \/\/ specialize\n-    }\n-\n@@ -495,8 +487,0 @@\n-    @Override\n-    @ForceInline\n-    public Short256Vector expand(VectorMask<Short> m, Vector<Short> v) {\n-        return (Short256Vector)\n-            super.expandTemplate(Short256Mask.class,\n-                                   (Short256Mask) m, (Short256Vector) v);  \/\/ specialize\n-    }\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short256Vector.java","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -479,8 +479,0 @@\n-    @Override\n-    @ForceInline\n-    public Short512Vector compress(VectorMask<Short> m, Vector<Short> v) {\n-        return (Short512Vector)\n-            super.compressTemplate(Short512Mask.class,\n-                                   (Short512Mask) m, (Short512Vector) v);  \/\/ specialize\n-    }\n-\n@@ -495,8 +487,0 @@\n-    @Override\n-    @ForceInline\n-    public Short512Vector expand(VectorMask<Short> m, Vector<Short> v) {\n-        return (Short512Vector)\n-            super.expandTemplate(Short512Mask.class,\n-                                   (Short512Mask) m, (Short512Vector) v);  \/\/ specialize\n-    }\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short512Vector.java","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -479,8 +479,0 @@\n-    @Override\n-    @ForceInline\n-    public Short64Vector compress(VectorMask<Short> m, Vector<Short> v) {\n-        return (Short64Vector)\n-            super.compressTemplate(Short64Mask.class,\n-                                   (Short64Mask) m, (Short64Vector) v);  \/\/ specialize\n-    }\n-\n@@ -493,8 +485,0 @@\n-    }\n-\n-    @Override\n-    @ForceInline\n-    public Short64Vector expand(VectorMask<Short> m, Vector<Short> v) {\n-        return (Short64Vector)\n-            super.expandTemplate(Short64Mask.class,\n-                                   (Short64Mask) m, (Short64Vector) v);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short64Vector.java","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -479,8 +479,0 @@\n-    @Override\n-    @ForceInline\n-    public ShortMaxVector compress(VectorMask<Short> m, Vector<Short> v) {\n-        return (ShortMaxVector)\n-            super.compressTemplate(ShortMaxMask.class,\n-                                   (ShortMaxMask) m, (ShortMaxVector) v);  \/\/ specialize\n-    }\n-\n@@ -495,8 +487,0 @@\n-    @Override\n-    @ForceInline\n-    public ShortMaxVector expand(VectorMask<Short> m, Vector<Short> v) {\n-        return (ShortMaxVector)\n-            super.expandTemplate(ShortMaxMask.class,\n-                                   (ShortMaxMask) m, (ShortMaxVector) v);  \/\/ specialize\n-    }\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortMaxVector.java","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2384,22 +2384,0 @@\n-    \/**\n-     * {@inheritDoc} <!--workaround-->\n-     *\/\n-    @Override\n-    public abstract\n-    ShortVector compress(VectorMask<Short> m, Vector<Short> v);\n-\n-    \/*package-private*\/\n-    @ForceInline\n-    final\n-    <M extends VectorMask<Short>>\n-    ShortVector compressTemplate(Class<M> masktype, M m, ShortVector v) {\n-      m.check(masktype, this);\n-      int j = 0;\n-      for (int i = 0; i < length(); i++) {\n-        if (m.laneIsSet(i)) {\n-           v = v.withLane(j++, lane(i));\n-        }\n-      }\n-      return v;\n-    }\n-\n@@ -2429,22 +2407,0 @@\n-    \/**\n-     * {@inheritDoc} <!--workaround-->\n-     *\/\n-    @Override\n-    public abstract\n-    ShortVector expand(VectorMask<Short> m, Vector<Short> v);\n-\n-    \/*package-private*\/\n-    @ForceInline\n-    final\n-    <M extends VectorMask<Short>>\n-    ShortVector expandTemplate(Class<M> masktype, M m, ShortVector v) {\n-      m.check(masktype, this);\n-      int j = 0;\n-      for (int i = 0; i < length(); i++) {\n-        if (m.laneIsSet(i)) {\n-           v = v.withLane(i, lane(j++));\n-        }\n-      }\n-      return v;\n-    }\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortVector.java","additions":0,"deletions":44,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2708,1 +2708,0 @@\n-     * @see #compress(VectorMask,Vector)\n@@ -2712,24 +2711,0 @@\n-    \/**\n-     * Compresses the lane elements of this vector within another\n-     * background vector selecting lanes under the control of a\n-     * specific mask.\n-     *\n-     * This is a cross-lane operation that compresses the lane\n-     * elements of this vector within another background vector\n-     * as selected by the specified mask.\n-     *\n-     * For each lane {@code N} of the mask, if the mask at\n-     * lane {@code N} is set, the element at lane {@code N}\n-     * of this vector is selected and stored into the\n-     * output vector contiguously starting from the lane {@code 0}.\n-     * All the upper remaining lanes, if any, of the output\n-     * vector get the value from the corresponding lanes\n-     * of the background vector.\n-     *\n-     * @param m the mask controlling the compression\n-     * @param v the background vector\n-     * @return the compressed lane elements of this vector\n-     * @see #compress(VectorMask)\n-     *\/\n-    public abstract Vector<E> compress(VectorMask<E> m, Vector<E> v);\n-\n@@ -2752,1 +2727,0 @@\n-     * @see #expand(VectorMask,Vector)\n@@ -2756,24 +2730,0 @@\n-    \/**\n-     * Expands the lane elements of this vector into another background\n-     * vector under the control of a specific mask.\n-     *\n-     * This is a cross-lane operation that expands the contguous lane\n-     * elements of this vector into lanes of a background vector\n-     * as selected by the specified mask.\n-     *\n-     * For each lane {@code N} of the mask, if the mask at\n-     * lane {@code N} is set, the next contiguous element of input vector\n-     * starting from lane {@code 0} is selected and stored into the output\n-     * vector at lane {@code N}.\n-     * All the remaining lanes, if any, of the output\n-     * vector get the value from the corresponding lanes\n-     * of the background vector.\n-     *\n-     * @param m the mask controlling the compression\n-     * @param v the background vector\n-     * @return the expanded lane elements of this vector\n-     * @see #expand(VectorMask)\n-     *\/\n-    public abstract Vector<E> expand(VectorMask<E> m, Vector<E> v);\n-\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Vector.java","additions":0,"deletions":50,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -2681,22 +2681,0 @@\n-    \/**\n-     * {@inheritDoc} <!--workaround-->\n-     *\/\n-    @Override\n-    public abstract\n-    $Type$Vector compress(VectorMask<$Boxtype$> m, Vector<$Boxtype$> v);\n-\n-    \/*package-private*\/\n-    @ForceInline\n-    final\n-    <M extends VectorMask<$Boxtype$>>\n-    $Type$Vector compressTemplate(Class<M> masktype, M m, $Type$Vector v) {\n-      m.check(masktype, this);\n-      int j = 0;\n-      for (int i = 0; i < length(); i++) {\n-        if (m.laneIsSet(i)) {\n-           v = v.withLane(j++, lane(i));\n-        }\n-      }\n-      return v;\n-    }\n-\n@@ -2728,22 +2706,0 @@\n-     *\/\n-    @Override\n-    public abstract\n-    $abstractvectortype$ expand(VectorMask<$Boxtype$> m, Vector<$Boxtype$> v);\n-\n-    \/*package-private*\/\n-    @ForceInline\n-    final\n-    <M extends VectorMask<$Boxtype$>>\n-    $Type$Vector expandTemplate(Class<M> masktype, M m, $Type$Vector v) {\n-      m.check(masktype, this);\n-      int j = 0;\n-      for (int i = 0; i < length(); i++) {\n-        if (m.laneIsSet(i)) {\n-           v = v.withLane(i, lane(j++));\n-        }\n-      }\n-      return v;\n-    }\n-\n-    \/**\n-     * {@inheritDoc} <!--workaround-->\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template","additions":0,"deletions":44,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -485,8 +485,0 @@\n-    @Override\n-    @ForceInline\n-    public $vectortype$ compress(VectorMask<$Boxtype$> m, Vector<$Boxtype$> v) {\n-        return ($vectortype$)\n-            super.compressTemplate($masktype$.class,\n-                                   ($masktype$) m, ($vectortype$) v);  \/\/ specialize\n-    }\n-\n@@ -501,8 +493,0 @@\n-    @Override\n-    @ForceInline\n-    public $vectortype$ expand(VectorMask<$Boxtype$> m, Vector<$Boxtype$> v) {\n-        return ($vectortype$)\n-            super.expandTemplate($masktype$.class,\n-                                   ($masktype$) m, ($vectortype$) v);  \/\/ specialize\n-    }\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-VectorBits.java.template","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -287,25 +287,0 @@\n-    static void assertcompressArraysEquals(byte[] r, byte[] a, byte[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + k], a[i + j]);\n-                        k++;\n-                    }\n-                }\n-                for (; k < vector_len; k++) {\n-                    Assert.assertEquals(r[i + k], b[i + k]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + k;\n-            if (m[(i + j) % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + j], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n@@ -336,24 +311,0 @@\n-    static void assertexpandArraysEquals(byte[] r, byte[] a, byte[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + j], a[i + k]);\n-                        k++;\n-                    } else {\n-                        Assert.assertEquals(r[i + j], b[i + j]);\n-                    }\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + j;\n-            if (m[idx % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + k], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n@@ -4344,18 +4295,0 @@\n-    @Test(dataProvider = \"byteBinaryOpMaskProvider\")\n-    static void compressByte128VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        byte[] a = fa.apply(SPECIES.length());\n-        byte[] b = fb.apply(SPECIES.length());\n-        byte[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Byte> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n-                ByteVector bv = ByteVector.fromArray(SPECIES, b, i);\n-                av.compress(vmask, bv).intoArray(r, i);\n-            }\n-        }\n-        assertcompressArraysEquals(r, a, b, mask, SPECIES.length());\n-    }\n@@ -4381,18 +4314,0 @@\n-    @Test(dataProvider = \"byteBinaryOpMaskProvider\")\n-    static void expandByte128VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        byte[] a = fa.apply(SPECIES.length());\n-        byte[] b = fb.apply(SPECIES.length());\n-        byte[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Byte> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n-                ByteVector bv = ByteVector.fromArray(SPECIES, b, i);\n-                av.expand(vmask, bv).intoArray(r, i);\n-            }\n-        }\n-        assertexpandArraysEquals(r, a, b, mask, SPECIES.length());\n-    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte128VectorTests.java","additions":0,"deletions":85,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -287,25 +287,0 @@\n-    static void assertcompressArraysEquals(byte[] r, byte[] a, byte[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + k], a[i + j]);\n-                        k++;\n-                    }\n-                }\n-                for (; k < vector_len; k++) {\n-                    Assert.assertEquals(r[i + k], b[i + k]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + k;\n-            if (m[(i + j) % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + j], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n@@ -336,24 +311,0 @@\n-    static void assertexpandArraysEquals(byte[] r, byte[] a, byte[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + j], a[i + k]);\n-                        k++;\n-                    } else {\n-                        Assert.assertEquals(r[i + j], b[i + j]);\n-                    }\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + j;\n-            if (m[idx % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + k], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n@@ -4344,18 +4295,0 @@\n-    @Test(dataProvider = \"byteBinaryOpMaskProvider\")\n-    static void compressByte256VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        byte[] a = fa.apply(SPECIES.length());\n-        byte[] b = fb.apply(SPECIES.length());\n-        byte[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Byte> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n-                ByteVector bv = ByteVector.fromArray(SPECIES, b, i);\n-                av.compress(vmask, bv).intoArray(r, i);\n-            }\n-        }\n-        assertcompressArraysEquals(r, a, b, mask, SPECIES.length());\n-    }\n@@ -4381,18 +4314,0 @@\n-    @Test(dataProvider = \"byteBinaryOpMaskProvider\")\n-    static void expandByte256VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        byte[] a = fa.apply(SPECIES.length());\n-        byte[] b = fb.apply(SPECIES.length());\n-        byte[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Byte> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n-                ByteVector bv = ByteVector.fromArray(SPECIES, b, i);\n-                av.expand(vmask, bv).intoArray(r, i);\n-            }\n-        }\n-        assertexpandArraysEquals(r, a, b, mask, SPECIES.length());\n-    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte256VectorTests.java","additions":0,"deletions":85,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -287,25 +287,0 @@\n-    static void assertcompressArraysEquals(byte[] r, byte[] a, byte[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + k], a[i + j]);\n-                        k++;\n-                    }\n-                }\n-                for (; k < vector_len; k++) {\n-                    Assert.assertEquals(r[i + k], b[i + k]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + k;\n-            if (m[(i + j) % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + j], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n@@ -336,24 +311,0 @@\n-    static void assertexpandArraysEquals(byte[] r, byte[] a, byte[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + j], a[i + k]);\n-                        k++;\n-                    } else {\n-                        Assert.assertEquals(r[i + j], b[i + j]);\n-                    }\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + j;\n-            if (m[idx % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + k], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n@@ -4344,18 +4295,0 @@\n-    @Test(dataProvider = \"byteBinaryOpMaskProvider\")\n-    static void compressByte512VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        byte[] a = fa.apply(SPECIES.length());\n-        byte[] b = fb.apply(SPECIES.length());\n-        byte[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Byte> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n-                ByteVector bv = ByteVector.fromArray(SPECIES, b, i);\n-                av.compress(vmask, bv).intoArray(r, i);\n-            }\n-        }\n-        assertcompressArraysEquals(r, a, b, mask, SPECIES.length());\n-    }\n@@ -4381,18 +4314,0 @@\n-    @Test(dataProvider = \"byteBinaryOpMaskProvider\")\n-    static void expandByte512VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        byte[] a = fa.apply(SPECIES.length());\n-        byte[] b = fb.apply(SPECIES.length());\n-        byte[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Byte> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n-                ByteVector bv = ByteVector.fromArray(SPECIES, b, i);\n-                av.expand(vmask, bv).intoArray(r, i);\n-            }\n-        }\n-        assertexpandArraysEquals(r, a, b, mask, SPECIES.length());\n-    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte512VectorTests.java","additions":0,"deletions":85,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -287,25 +287,0 @@\n-    static void assertcompressArraysEquals(byte[] r, byte[] a, byte[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + k], a[i + j]);\n-                        k++;\n-                    }\n-                }\n-                for (; k < vector_len; k++) {\n-                    Assert.assertEquals(r[i + k], b[i + k]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + k;\n-            if (m[(i + j) % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + j], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n@@ -336,24 +311,0 @@\n-    static void assertexpandArraysEquals(byte[] r, byte[] a, byte[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + j], a[i + k]);\n-                        k++;\n-                    } else {\n-                        Assert.assertEquals(r[i + j], b[i + j]);\n-                    }\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + j;\n-            if (m[idx % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + k], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n@@ -4344,18 +4295,0 @@\n-    @Test(dataProvider = \"byteBinaryOpMaskProvider\")\n-    static void compressByte64VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        byte[] a = fa.apply(SPECIES.length());\n-        byte[] b = fb.apply(SPECIES.length());\n-        byte[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Byte> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n-                ByteVector bv = ByteVector.fromArray(SPECIES, b, i);\n-                av.compress(vmask, bv).intoArray(r, i);\n-            }\n-        }\n-        assertcompressArraysEquals(r, a, b, mask, SPECIES.length());\n-    }\n@@ -4381,18 +4314,0 @@\n-    @Test(dataProvider = \"byteBinaryOpMaskProvider\")\n-    static void expandByte64VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        byte[] a = fa.apply(SPECIES.length());\n-        byte[] b = fb.apply(SPECIES.length());\n-        byte[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Byte> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n-                ByteVector bv = ByteVector.fromArray(SPECIES, b, i);\n-                av.expand(vmask, bv).intoArray(r, i);\n-            }\n-        }\n-        assertexpandArraysEquals(r, a, b, mask, SPECIES.length());\n-    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte64VectorTests.java","additions":0,"deletions":85,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -292,25 +292,0 @@\n-    static void assertcompressArraysEquals(byte[] r, byte[] a, byte[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + k], a[i + j]);\n-                        k++;\n-                    }\n-                }\n-                for (; k < vector_len; k++) {\n-                    Assert.assertEquals(r[i + k], b[i + k]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + k;\n-            if (m[(i + j) % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + j], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n@@ -341,24 +316,0 @@\n-    static void assertexpandArraysEquals(byte[] r, byte[] a, byte[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + j], a[i + k]);\n-                        k++;\n-                    } else {\n-                        Assert.assertEquals(r[i + j], b[i + j]);\n-                    }\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + j;\n-            if (m[idx % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + k], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n@@ -4349,18 +4300,0 @@\n-    @Test(dataProvider = \"byteBinaryOpMaskProvider\")\n-    static void compressByteMaxVectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        byte[] a = fa.apply(SPECIES.length());\n-        byte[] b = fb.apply(SPECIES.length());\n-        byte[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Byte> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n-                ByteVector bv = ByteVector.fromArray(SPECIES, b, i);\n-                av.compress(vmask, bv).intoArray(r, i);\n-            }\n-        }\n-        assertcompressArraysEquals(r, a, b, mask, SPECIES.length());\n-    }\n@@ -4386,18 +4319,0 @@\n-    @Test(dataProvider = \"byteBinaryOpMaskProvider\")\n-    static void expandByteMaxVectorTestsMasked(IntFunction<byte[]> fa, IntFunction<byte[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        byte[] a = fa.apply(SPECIES.length());\n-        byte[] b = fb.apply(SPECIES.length());\n-        byte[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Byte> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n-                ByteVector bv = ByteVector.fromArray(SPECIES, b, i);\n-                av.expand(vmask, bv).intoArray(r, i);\n-            }\n-        }\n-        assertexpandArraysEquals(r, a, b, mask, SPECIES.length());\n-    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ByteMaxVectorTests.java","additions":0,"deletions":85,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -287,25 +287,0 @@\n-    static void assertcompressArraysEquals(double[] r, double[] a, double[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + k], a[i + j]);\n-                        k++;\n-                    }\n-                }\n-                for (; k < vector_len; k++) {\n-                    Assert.assertEquals(r[i + k], b[i + k]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + k;\n-            if (m[(i + j) % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + j], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n@@ -336,24 +311,0 @@\n-    static void assertexpandArraysEquals(double[] r, double[] a, double[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + j], a[i + k]);\n-                        k++;\n-                    } else {\n-                        Assert.assertEquals(r[i + j], b[i + j]);\n-                    }\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + j;\n-            if (m[idx % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + k], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n@@ -3294,18 +3245,0 @@\n-    @Test(dataProvider = \"doubleBinaryOpMaskProvider\")\n-    static void compressDouble128VectorTestsMasked(IntFunction<double[]> fa, IntFunction<double[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        double[] a = fa.apply(SPECIES.length());\n-        double[] b = fb.apply(SPECIES.length());\n-        double[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Double> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n-                DoubleVector bv = DoubleVector.fromArray(SPECIES, b, i);\n-                av.compress(vmask, bv).intoArray(r, i);\n-            }\n-        }\n-        assertcompressArraysEquals(r, a, b, mask, SPECIES.length());\n-    }\n@@ -3331,18 +3264,0 @@\n-    @Test(dataProvider = \"doubleBinaryOpMaskProvider\")\n-    static void expandDouble128VectorTestsMasked(IntFunction<double[]> fa, IntFunction<double[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        double[] a = fa.apply(SPECIES.length());\n-        double[] b = fb.apply(SPECIES.length());\n-        double[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Double> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n-                DoubleVector bv = DoubleVector.fromArray(SPECIES, b, i);\n-                av.expand(vmask, bv).intoArray(r, i);\n-            }\n-        }\n-        assertexpandArraysEquals(r, a, b, mask, SPECIES.length());\n-    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double128VectorTests.java","additions":0,"deletions":85,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -287,25 +287,0 @@\n-    static void assertcompressArraysEquals(double[] r, double[] a, double[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + k], a[i + j]);\n-                        k++;\n-                    }\n-                }\n-                for (; k < vector_len; k++) {\n-                    Assert.assertEquals(r[i + k], b[i + k]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + k;\n-            if (m[(i + j) % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + j], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n@@ -336,24 +311,0 @@\n-    static void assertexpandArraysEquals(double[] r, double[] a, double[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + j], a[i + k]);\n-                        k++;\n-                    } else {\n-                        Assert.assertEquals(r[i + j], b[i + j]);\n-                    }\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + j;\n-            if (m[idx % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + k], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n@@ -3294,18 +3245,0 @@\n-    @Test(dataProvider = \"doubleBinaryOpMaskProvider\")\n-    static void compressDouble256VectorTestsMasked(IntFunction<double[]> fa, IntFunction<double[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        double[] a = fa.apply(SPECIES.length());\n-        double[] b = fb.apply(SPECIES.length());\n-        double[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Double> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n-                DoubleVector bv = DoubleVector.fromArray(SPECIES, b, i);\n-                av.compress(vmask, bv).intoArray(r, i);\n-            }\n-        }\n-        assertcompressArraysEquals(r, a, b, mask, SPECIES.length());\n-    }\n@@ -3331,18 +3264,0 @@\n-    @Test(dataProvider = \"doubleBinaryOpMaskProvider\")\n-    static void expandDouble256VectorTestsMasked(IntFunction<double[]> fa, IntFunction<double[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        double[] a = fa.apply(SPECIES.length());\n-        double[] b = fb.apply(SPECIES.length());\n-        double[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Double> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n-                DoubleVector bv = DoubleVector.fromArray(SPECIES, b, i);\n-                av.expand(vmask, bv).intoArray(r, i);\n-            }\n-        }\n-        assertexpandArraysEquals(r, a, b, mask, SPECIES.length());\n-    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double256VectorTests.java","additions":0,"deletions":85,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -287,25 +287,0 @@\n-    static void assertcompressArraysEquals(double[] r, double[] a, double[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + k], a[i + j]);\n-                        k++;\n-                    }\n-                }\n-                for (; k < vector_len; k++) {\n-                    Assert.assertEquals(r[i + k], b[i + k]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + k;\n-            if (m[(i + j) % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + j], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n@@ -336,24 +311,0 @@\n-    static void assertexpandArraysEquals(double[] r, double[] a, double[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + j], a[i + k]);\n-                        k++;\n-                    } else {\n-                        Assert.assertEquals(r[i + j], b[i + j]);\n-                    }\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + j;\n-            if (m[idx % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + k], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n@@ -3294,18 +3245,0 @@\n-    @Test(dataProvider = \"doubleBinaryOpMaskProvider\")\n-    static void compressDouble512VectorTestsMasked(IntFunction<double[]> fa, IntFunction<double[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        double[] a = fa.apply(SPECIES.length());\n-        double[] b = fb.apply(SPECIES.length());\n-        double[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Double> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n-                DoubleVector bv = DoubleVector.fromArray(SPECIES, b, i);\n-                av.compress(vmask, bv).intoArray(r, i);\n-            }\n-        }\n-        assertcompressArraysEquals(r, a, b, mask, SPECIES.length());\n-    }\n@@ -3331,18 +3264,0 @@\n-    @Test(dataProvider = \"doubleBinaryOpMaskProvider\")\n-    static void expandDouble512VectorTestsMasked(IntFunction<double[]> fa, IntFunction<double[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        double[] a = fa.apply(SPECIES.length());\n-        double[] b = fb.apply(SPECIES.length());\n-        double[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Double> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n-                DoubleVector bv = DoubleVector.fromArray(SPECIES, b, i);\n-                av.expand(vmask, bv).intoArray(r, i);\n-            }\n-        }\n-        assertexpandArraysEquals(r, a, b, mask, SPECIES.length());\n-    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double512VectorTests.java","additions":0,"deletions":85,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -287,25 +287,0 @@\n-    static void assertcompressArraysEquals(double[] r, double[] a, double[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + k], a[i + j]);\n-                        k++;\n-                    }\n-                }\n-                for (; k < vector_len; k++) {\n-                    Assert.assertEquals(r[i + k], b[i + k]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + k;\n-            if (m[(i + j) % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + j], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n@@ -336,24 +311,0 @@\n-    static void assertexpandArraysEquals(double[] r, double[] a, double[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + j], a[i + k]);\n-                        k++;\n-                    } else {\n-                        Assert.assertEquals(r[i + j], b[i + j]);\n-                    }\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + j;\n-            if (m[idx % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + k], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n@@ -3294,18 +3245,0 @@\n-    @Test(dataProvider = \"doubleBinaryOpMaskProvider\")\n-    static void compressDouble64VectorTestsMasked(IntFunction<double[]> fa, IntFunction<double[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        double[] a = fa.apply(SPECIES.length());\n-        double[] b = fb.apply(SPECIES.length());\n-        double[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Double> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n-                DoubleVector bv = DoubleVector.fromArray(SPECIES, b, i);\n-                av.compress(vmask, bv).intoArray(r, i);\n-            }\n-        }\n-        assertcompressArraysEquals(r, a, b, mask, SPECIES.length());\n-    }\n@@ -3331,18 +3264,0 @@\n-    @Test(dataProvider = \"doubleBinaryOpMaskProvider\")\n-    static void expandDouble64VectorTestsMasked(IntFunction<double[]> fa, IntFunction<double[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        double[] a = fa.apply(SPECIES.length());\n-        double[] b = fb.apply(SPECIES.length());\n-        double[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Double> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n-                DoubleVector bv = DoubleVector.fromArray(SPECIES, b, i);\n-                av.expand(vmask, bv).intoArray(r, i);\n-            }\n-        }\n-        assertexpandArraysEquals(r, a, b, mask, SPECIES.length());\n-    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double64VectorTests.java","additions":0,"deletions":85,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -292,25 +292,0 @@\n-    static void assertcompressArraysEquals(double[] r, double[] a, double[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + k], a[i + j]);\n-                        k++;\n-                    }\n-                }\n-                for (; k < vector_len; k++) {\n-                    Assert.assertEquals(r[i + k], b[i + k]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + k;\n-            if (m[(i + j) % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + j], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n@@ -341,24 +316,0 @@\n-    static void assertexpandArraysEquals(double[] r, double[] a, double[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + j], a[i + k]);\n-                        k++;\n-                    } else {\n-                        Assert.assertEquals(r[i + j], b[i + j]);\n-                    }\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + j;\n-            if (m[idx % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + k], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n@@ -3299,18 +3250,0 @@\n-    @Test(dataProvider = \"doubleBinaryOpMaskProvider\")\n-    static void compressDoubleMaxVectorTestsMasked(IntFunction<double[]> fa, IntFunction<double[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        double[] a = fa.apply(SPECIES.length());\n-        double[] b = fb.apply(SPECIES.length());\n-        double[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Double> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n-                DoubleVector bv = DoubleVector.fromArray(SPECIES, b, i);\n-                av.compress(vmask, bv).intoArray(r, i);\n-            }\n-        }\n-        assertcompressArraysEquals(r, a, b, mask, SPECIES.length());\n-    }\n@@ -3336,18 +3269,0 @@\n-    @Test(dataProvider = \"doubleBinaryOpMaskProvider\")\n-    static void expandDoubleMaxVectorTestsMasked(IntFunction<double[]> fa, IntFunction<double[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        double[] a = fa.apply(SPECIES.length());\n-        double[] b = fb.apply(SPECIES.length());\n-        double[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Double> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n-                DoubleVector bv = DoubleVector.fromArray(SPECIES, b, i);\n-                av.expand(vmask, bv).intoArray(r, i);\n-            }\n-        }\n-        assertexpandArraysEquals(r, a, b, mask, SPECIES.length());\n-    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/DoubleMaxVectorTests.java","additions":0,"deletions":85,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -287,25 +287,0 @@\n-    static void assertcompressArraysEquals(float[] r, float[] a, float[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + k], a[i + j]);\n-                        k++;\n-                    }\n-                }\n-                for (; k < vector_len; k++) {\n-                    Assert.assertEquals(r[i + k], b[i + k]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + k;\n-            if (m[(i + j) % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + j], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n@@ -336,24 +311,0 @@\n-    static void assertexpandArraysEquals(float[] r, float[] a, float[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + j], a[i + k]);\n-                        k++;\n-                    } else {\n-                        Assert.assertEquals(r[i + j], b[i + j]);\n-                    }\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + j;\n-            if (m[idx % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + k], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n@@ -3304,18 +3255,0 @@\n-    @Test(dataProvider = \"floatBinaryOpMaskProvider\")\n-    static void compressFloat128VectorTestsMasked(IntFunction<float[]> fa, IntFunction<float[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        float[] a = fa.apply(SPECIES.length());\n-        float[] b = fb.apply(SPECIES.length());\n-        float[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Float> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n-                FloatVector bv = FloatVector.fromArray(SPECIES, b, i);\n-                av.compress(vmask, bv).intoArray(r, i);\n-            }\n-        }\n-        assertcompressArraysEquals(r, a, b, mask, SPECIES.length());\n-    }\n@@ -3341,18 +3274,0 @@\n-    @Test(dataProvider = \"floatBinaryOpMaskProvider\")\n-    static void expandFloat128VectorTestsMasked(IntFunction<float[]> fa, IntFunction<float[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        float[] a = fa.apply(SPECIES.length());\n-        float[] b = fb.apply(SPECIES.length());\n-        float[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Float> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n-                FloatVector bv = FloatVector.fromArray(SPECIES, b, i);\n-                av.expand(vmask, bv).intoArray(r, i);\n-            }\n-        }\n-        assertexpandArraysEquals(r, a, b, mask, SPECIES.length());\n-    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float128VectorTests.java","additions":0,"deletions":85,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -287,25 +287,0 @@\n-    static void assertcompressArraysEquals(float[] r, float[] a, float[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + k], a[i + j]);\n-                        k++;\n-                    }\n-                }\n-                for (; k < vector_len; k++) {\n-                    Assert.assertEquals(r[i + k], b[i + k]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + k;\n-            if (m[(i + j) % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + j], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n@@ -336,24 +311,0 @@\n-    static void assertexpandArraysEquals(float[] r, float[] a, float[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + j], a[i + k]);\n-                        k++;\n-                    } else {\n-                        Assert.assertEquals(r[i + j], b[i + j]);\n-                    }\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + j;\n-            if (m[idx % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + k], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n@@ -3304,18 +3255,0 @@\n-    @Test(dataProvider = \"floatBinaryOpMaskProvider\")\n-    static void compressFloat256VectorTestsMasked(IntFunction<float[]> fa, IntFunction<float[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        float[] a = fa.apply(SPECIES.length());\n-        float[] b = fb.apply(SPECIES.length());\n-        float[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Float> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n-                FloatVector bv = FloatVector.fromArray(SPECIES, b, i);\n-                av.compress(vmask, bv).intoArray(r, i);\n-            }\n-        }\n-        assertcompressArraysEquals(r, a, b, mask, SPECIES.length());\n-    }\n@@ -3341,18 +3274,0 @@\n-    @Test(dataProvider = \"floatBinaryOpMaskProvider\")\n-    static void expandFloat256VectorTestsMasked(IntFunction<float[]> fa, IntFunction<float[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        float[] a = fa.apply(SPECIES.length());\n-        float[] b = fb.apply(SPECIES.length());\n-        float[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Float> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n-                FloatVector bv = FloatVector.fromArray(SPECIES, b, i);\n-                av.expand(vmask, bv).intoArray(r, i);\n-            }\n-        }\n-        assertexpandArraysEquals(r, a, b, mask, SPECIES.length());\n-    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float256VectorTests.java","additions":0,"deletions":85,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -287,25 +287,0 @@\n-    static void assertcompressArraysEquals(float[] r, float[] a, float[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + k], a[i + j]);\n-                        k++;\n-                    }\n-                }\n-                for (; k < vector_len; k++) {\n-                    Assert.assertEquals(r[i + k], b[i + k]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + k;\n-            if (m[(i + j) % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + j], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n@@ -336,24 +311,0 @@\n-    static void assertexpandArraysEquals(float[] r, float[] a, float[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + j], a[i + k]);\n-                        k++;\n-                    } else {\n-                        Assert.assertEquals(r[i + j], b[i + j]);\n-                    }\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + j;\n-            if (m[idx % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + k], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n@@ -3304,18 +3255,0 @@\n-    @Test(dataProvider = \"floatBinaryOpMaskProvider\")\n-    static void compressFloat512VectorTestsMasked(IntFunction<float[]> fa, IntFunction<float[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        float[] a = fa.apply(SPECIES.length());\n-        float[] b = fb.apply(SPECIES.length());\n-        float[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Float> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n-                FloatVector bv = FloatVector.fromArray(SPECIES, b, i);\n-                av.compress(vmask, bv).intoArray(r, i);\n-            }\n-        }\n-        assertcompressArraysEquals(r, a, b, mask, SPECIES.length());\n-    }\n@@ -3341,18 +3274,0 @@\n-    @Test(dataProvider = \"floatBinaryOpMaskProvider\")\n-    static void expandFloat512VectorTestsMasked(IntFunction<float[]> fa, IntFunction<float[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        float[] a = fa.apply(SPECIES.length());\n-        float[] b = fb.apply(SPECIES.length());\n-        float[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Float> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n-                FloatVector bv = FloatVector.fromArray(SPECIES, b, i);\n-                av.expand(vmask, bv).intoArray(r, i);\n-            }\n-        }\n-        assertexpandArraysEquals(r, a, b, mask, SPECIES.length());\n-    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float512VectorTests.java","additions":0,"deletions":85,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -287,25 +287,0 @@\n-    static void assertcompressArraysEquals(float[] r, float[] a, float[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + k], a[i + j]);\n-                        k++;\n-                    }\n-                }\n-                for (; k < vector_len; k++) {\n-                    Assert.assertEquals(r[i + k], b[i + k]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + k;\n-            if (m[(i + j) % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + j], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n@@ -336,24 +311,0 @@\n-    static void assertexpandArraysEquals(float[] r, float[] a, float[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + j], a[i + k]);\n-                        k++;\n-                    } else {\n-                        Assert.assertEquals(r[i + j], b[i + j]);\n-                    }\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + j;\n-            if (m[idx % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + k], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n@@ -3304,18 +3255,0 @@\n-    @Test(dataProvider = \"floatBinaryOpMaskProvider\")\n-    static void compressFloat64VectorTestsMasked(IntFunction<float[]> fa, IntFunction<float[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        float[] a = fa.apply(SPECIES.length());\n-        float[] b = fb.apply(SPECIES.length());\n-        float[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Float> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n-                FloatVector bv = FloatVector.fromArray(SPECIES, b, i);\n-                av.compress(vmask, bv).intoArray(r, i);\n-            }\n-        }\n-        assertcompressArraysEquals(r, a, b, mask, SPECIES.length());\n-    }\n@@ -3341,18 +3274,0 @@\n-    @Test(dataProvider = \"floatBinaryOpMaskProvider\")\n-    static void expandFloat64VectorTestsMasked(IntFunction<float[]> fa, IntFunction<float[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        float[] a = fa.apply(SPECIES.length());\n-        float[] b = fb.apply(SPECIES.length());\n-        float[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Float> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n-                FloatVector bv = FloatVector.fromArray(SPECIES, b, i);\n-                av.expand(vmask, bv).intoArray(r, i);\n-            }\n-        }\n-        assertexpandArraysEquals(r, a, b, mask, SPECIES.length());\n-    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float64VectorTests.java","additions":0,"deletions":85,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -292,25 +292,0 @@\n-    static void assertcompressArraysEquals(float[] r, float[] a, float[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + k], a[i + j]);\n-                        k++;\n-                    }\n-                }\n-                for (; k < vector_len; k++) {\n-                    Assert.assertEquals(r[i + k], b[i + k]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + k;\n-            if (m[(i + j) % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + j], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n@@ -341,24 +316,0 @@\n-    static void assertexpandArraysEquals(float[] r, float[] a, float[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + j], a[i + k]);\n-                        k++;\n-                    } else {\n-                        Assert.assertEquals(r[i + j], b[i + j]);\n-                    }\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + j;\n-            if (m[idx % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + k], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n@@ -3309,18 +3260,0 @@\n-    @Test(dataProvider = \"floatBinaryOpMaskProvider\")\n-    static void compressFloatMaxVectorTestsMasked(IntFunction<float[]> fa, IntFunction<float[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        float[] a = fa.apply(SPECIES.length());\n-        float[] b = fb.apply(SPECIES.length());\n-        float[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Float> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n-                FloatVector bv = FloatVector.fromArray(SPECIES, b, i);\n-                av.compress(vmask, bv).intoArray(r, i);\n-            }\n-        }\n-        assertcompressArraysEquals(r, a, b, mask, SPECIES.length());\n-    }\n@@ -3346,18 +3279,0 @@\n-    @Test(dataProvider = \"floatBinaryOpMaskProvider\")\n-    static void expandFloatMaxVectorTestsMasked(IntFunction<float[]> fa, IntFunction<float[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        float[] a = fa.apply(SPECIES.length());\n-        float[] b = fb.apply(SPECIES.length());\n-        float[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Float> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n-                FloatVector bv = FloatVector.fromArray(SPECIES, b, i);\n-                av.expand(vmask, bv).intoArray(r, i);\n-            }\n-        }\n-        assertexpandArraysEquals(r, a, b, mask, SPECIES.length());\n-    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/FloatMaxVectorTests.java","additions":0,"deletions":85,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -287,25 +287,0 @@\n-    static void assertcompressArraysEquals(int[] r, int[] a, int[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + k], a[i + j]);\n-                        k++;\n-                    }\n-                }\n-                for (; k < vector_len; k++) {\n-                    Assert.assertEquals(r[i + k], b[i + k]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + k;\n-            if (m[(i + j) % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + j], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n@@ -336,24 +311,0 @@\n-    static void assertexpandArraysEquals(int[] r, int[] a, int[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + j], a[i + k]);\n-                        k++;\n-                    } else {\n-                        Assert.assertEquals(r[i + j], b[i + j]);\n-                    }\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + j;\n-            if (m[idx % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + k], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n@@ -4309,18 +4260,0 @@\n-    @Test(dataProvider = \"intBinaryOpMaskProvider\")\n-    static void compressInt128VectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        int[] a = fa.apply(SPECIES.length());\n-        int[] b = fb.apply(SPECIES.length());\n-        int[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Integer> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                IntVector av = IntVector.fromArray(SPECIES, a, i);\n-                IntVector bv = IntVector.fromArray(SPECIES, b, i);\n-                av.compress(vmask, bv).intoArray(r, i);\n-            }\n-        }\n-        assertcompressArraysEquals(r, a, b, mask, SPECIES.length());\n-    }\n@@ -4346,18 +4279,0 @@\n-    @Test(dataProvider = \"intBinaryOpMaskProvider\")\n-    static void expandInt128VectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        int[] a = fa.apply(SPECIES.length());\n-        int[] b = fb.apply(SPECIES.length());\n-        int[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Integer> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                IntVector av = IntVector.fromArray(SPECIES, a, i);\n-                IntVector bv = IntVector.fromArray(SPECIES, b, i);\n-                av.expand(vmask, bv).intoArray(r, i);\n-            }\n-        }\n-        assertexpandArraysEquals(r, a, b, mask, SPECIES.length());\n-    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int128VectorTests.java","additions":0,"deletions":85,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -287,25 +287,0 @@\n-    static void assertcompressArraysEquals(int[] r, int[] a, int[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + k], a[i + j]);\n-                        k++;\n-                    }\n-                }\n-                for (; k < vector_len; k++) {\n-                    Assert.assertEquals(r[i + k], b[i + k]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + k;\n-            if (m[(i + j) % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + j], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n@@ -336,24 +311,0 @@\n-    static void assertexpandArraysEquals(int[] r, int[] a, int[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + j], a[i + k]);\n-                        k++;\n-                    } else {\n-                        Assert.assertEquals(r[i + j], b[i + j]);\n-                    }\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + j;\n-            if (m[idx % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + k], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n@@ -4309,18 +4260,0 @@\n-    @Test(dataProvider = \"intBinaryOpMaskProvider\")\n-    static void compressInt256VectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        int[] a = fa.apply(SPECIES.length());\n-        int[] b = fb.apply(SPECIES.length());\n-        int[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Integer> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                IntVector av = IntVector.fromArray(SPECIES, a, i);\n-                IntVector bv = IntVector.fromArray(SPECIES, b, i);\n-                av.compress(vmask, bv).intoArray(r, i);\n-            }\n-        }\n-        assertcompressArraysEquals(r, a, b, mask, SPECIES.length());\n-    }\n@@ -4346,18 +4279,0 @@\n-    @Test(dataProvider = \"intBinaryOpMaskProvider\")\n-    static void expandInt256VectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        int[] a = fa.apply(SPECIES.length());\n-        int[] b = fb.apply(SPECIES.length());\n-        int[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Integer> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                IntVector av = IntVector.fromArray(SPECIES, a, i);\n-                IntVector bv = IntVector.fromArray(SPECIES, b, i);\n-                av.expand(vmask, bv).intoArray(r, i);\n-            }\n-        }\n-        assertexpandArraysEquals(r, a, b, mask, SPECIES.length());\n-    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int256VectorTests.java","additions":0,"deletions":85,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -287,25 +287,0 @@\n-    static void assertcompressArraysEquals(int[] r, int[] a, int[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + k], a[i + j]);\n-                        k++;\n-                    }\n-                }\n-                for (; k < vector_len; k++) {\n-                    Assert.assertEquals(r[i + k], b[i + k]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + k;\n-            if (m[(i + j) % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + j], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n@@ -336,24 +311,0 @@\n-    static void assertexpandArraysEquals(int[] r, int[] a, int[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + j], a[i + k]);\n-                        k++;\n-                    } else {\n-                        Assert.assertEquals(r[i + j], b[i + j]);\n-                    }\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + j;\n-            if (m[idx % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + k], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n@@ -4309,18 +4260,0 @@\n-    @Test(dataProvider = \"intBinaryOpMaskProvider\")\n-    static void compressInt512VectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        int[] a = fa.apply(SPECIES.length());\n-        int[] b = fb.apply(SPECIES.length());\n-        int[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Integer> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                IntVector av = IntVector.fromArray(SPECIES, a, i);\n-                IntVector bv = IntVector.fromArray(SPECIES, b, i);\n-                av.compress(vmask, bv).intoArray(r, i);\n-            }\n-        }\n-        assertcompressArraysEquals(r, a, b, mask, SPECIES.length());\n-    }\n@@ -4346,18 +4279,0 @@\n-    @Test(dataProvider = \"intBinaryOpMaskProvider\")\n-    static void expandInt512VectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        int[] a = fa.apply(SPECIES.length());\n-        int[] b = fb.apply(SPECIES.length());\n-        int[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Integer> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                IntVector av = IntVector.fromArray(SPECIES, a, i);\n-                IntVector bv = IntVector.fromArray(SPECIES, b, i);\n-                av.expand(vmask, bv).intoArray(r, i);\n-            }\n-        }\n-        assertexpandArraysEquals(r, a, b, mask, SPECIES.length());\n-    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int512VectorTests.java","additions":0,"deletions":85,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -287,25 +287,0 @@\n-    static void assertcompressArraysEquals(int[] r, int[] a, int[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + k], a[i + j]);\n-                        k++;\n-                    }\n-                }\n-                for (; k < vector_len; k++) {\n-                    Assert.assertEquals(r[i + k], b[i + k]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + k;\n-            if (m[(i + j) % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + j], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n@@ -336,24 +311,0 @@\n-    static void assertexpandArraysEquals(int[] r, int[] a, int[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + j], a[i + k]);\n-                        k++;\n-                    } else {\n-                        Assert.assertEquals(r[i + j], b[i + j]);\n-                    }\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + j;\n-            if (m[idx % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + k], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n@@ -4309,18 +4260,0 @@\n-    @Test(dataProvider = \"intBinaryOpMaskProvider\")\n-    static void compressInt64VectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        int[] a = fa.apply(SPECIES.length());\n-        int[] b = fb.apply(SPECIES.length());\n-        int[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Integer> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                IntVector av = IntVector.fromArray(SPECIES, a, i);\n-                IntVector bv = IntVector.fromArray(SPECIES, b, i);\n-                av.compress(vmask, bv).intoArray(r, i);\n-            }\n-        }\n-        assertcompressArraysEquals(r, a, b, mask, SPECIES.length());\n-    }\n@@ -4346,18 +4279,0 @@\n-    @Test(dataProvider = \"intBinaryOpMaskProvider\")\n-    static void expandInt64VectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        int[] a = fa.apply(SPECIES.length());\n-        int[] b = fb.apply(SPECIES.length());\n-        int[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Integer> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                IntVector av = IntVector.fromArray(SPECIES, a, i);\n-                IntVector bv = IntVector.fromArray(SPECIES, b, i);\n-                av.expand(vmask, bv).intoArray(r, i);\n-            }\n-        }\n-        assertexpandArraysEquals(r, a, b, mask, SPECIES.length());\n-    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int64VectorTests.java","additions":0,"deletions":85,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -292,25 +292,0 @@\n-    static void assertcompressArraysEquals(int[] r, int[] a, int[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + k], a[i + j]);\n-                        k++;\n-                    }\n-                }\n-                for (; k < vector_len; k++) {\n-                    Assert.assertEquals(r[i + k], b[i + k]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + k;\n-            if (m[(i + j) % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + j], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n@@ -341,24 +316,0 @@\n-    static void assertexpandArraysEquals(int[] r, int[] a, int[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + j], a[i + k]);\n-                        k++;\n-                    } else {\n-                        Assert.assertEquals(r[i + j], b[i + j]);\n-                    }\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + j;\n-            if (m[idx % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + k], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n@@ -4314,18 +4265,0 @@\n-    @Test(dataProvider = \"intBinaryOpMaskProvider\")\n-    static void compressIntMaxVectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        int[] a = fa.apply(SPECIES.length());\n-        int[] b = fb.apply(SPECIES.length());\n-        int[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Integer> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                IntVector av = IntVector.fromArray(SPECIES, a, i);\n-                IntVector bv = IntVector.fromArray(SPECIES, b, i);\n-                av.compress(vmask, bv).intoArray(r, i);\n-            }\n-        }\n-        assertcompressArraysEquals(r, a, b, mask, SPECIES.length());\n-    }\n@@ -4351,18 +4284,0 @@\n-    @Test(dataProvider = \"intBinaryOpMaskProvider\")\n-    static void expandIntMaxVectorTestsMasked(IntFunction<int[]> fa, IntFunction<int[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        int[] a = fa.apply(SPECIES.length());\n-        int[] b = fb.apply(SPECIES.length());\n-        int[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Integer> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                IntVector av = IntVector.fromArray(SPECIES, a, i);\n-                IntVector bv = IntVector.fromArray(SPECIES, b, i);\n-                av.expand(vmask, bv).intoArray(r, i);\n-            }\n-        }\n-        assertexpandArraysEquals(r, a, b, mask, SPECIES.length());\n-    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/IntMaxVectorTests.java","additions":0,"deletions":85,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -244,25 +244,0 @@\n-    static void assertcompressArraysEquals(long[] r, long[] a, long[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + k], a[i + j]);\n-                        k++;\n-                    }\n-                }\n-                for (; k < vector_len; k++) {\n-                    Assert.assertEquals(r[i + k], b[i + k]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + k;\n-            if (m[(i + j) % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + j], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n@@ -293,24 +268,0 @@\n-    static void assertexpandArraysEquals(long[] r, long[] a, long[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + j], a[i + k]);\n-                        k++;\n-                    } else {\n-                        Assert.assertEquals(r[i + j], b[i + j]);\n-                    }\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + j;\n-            if (m[idx % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + k], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n@@ -4259,18 +4210,0 @@\n-    @Test(dataProvider = \"longBinaryOpMaskProvider\")\n-    static void compressLong128VectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        long[] a = fa.apply(SPECIES.length());\n-        long[] b = fb.apply(SPECIES.length());\n-        long[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Long> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                LongVector av = LongVector.fromArray(SPECIES, a, i);\n-                LongVector bv = LongVector.fromArray(SPECIES, b, i);\n-                av.compress(vmask, bv).intoArray(r, i);\n-            }\n-        }\n-        assertcompressArraysEquals(r, a, b, mask, SPECIES.length());\n-    }\n@@ -4296,18 +4229,0 @@\n-    @Test(dataProvider = \"longBinaryOpMaskProvider\")\n-    static void expandLong128VectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        long[] a = fa.apply(SPECIES.length());\n-        long[] b = fb.apply(SPECIES.length());\n-        long[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Long> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                LongVector av = LongVector.fromArray(SPECIES, a, i);\n-                LongVector bv = LongVector.fromArray(SPECIES, b, i);\n-                av.expand(vmask, bv).intoArray(r, i);\n-            }\n-        }\n-        assertexpandArraysEquals(r, a, b, mask, SPECIES.length());\n-    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long128VectorTests.java","additions":0,"deletions":85,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -244,25 +244,0 @@\n-    static void assertcompressArraysEquals(long[] r, long[] a, long[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + k], a[i + j]);\n-                        k++;\n-                    }\n-                }\n-                for (; k < vector_len; k++) {\n-                    Assert.assertEquals(r[i + k], b[i + k]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + k;\n-            if (m[(i + j) % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + j], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n@@ -293,24 +268,0 @@\n-    static void assertexpandArraysEquals(long[] r, long[] a, long[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + j], a[i + k]);\n-                        k++;\n-                    } else {\n-                        Assert.assertEquals(r[i + j], b[i + j]);\n-                    }\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + j;\n-            if (m[idx % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + k], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n@@ -4259,18 +4210,0 @@\n-    @Test(dataProvider = \"longBinaryOpMaskProvider\")\n-    static void compressLong256VectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        long[] a = fa.apply(SPECIES.length());\n-        long[] b = fb.apply(SPECIES.length());\n-        long[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Long> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                LongVector av = LongVector.fromArray(SPECIES, a, i);\n-                LongVector bv = LongVector.fromArray(SPECIES, b, i);\n-                av.compress(vmask, bv).intoArray(r, i);\n-            }\n-        }\n-        assertcompressArraysEquals(r, a, b, mask, SPECIES.length());\n-    }\n@@ -4296,18 +4229,0 @@\n-    @Test(dataProvider = \"longBinaryOpMaskProvider\")\n-    static void expandLong256VectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        long[] a = fa.apply(SPECIES.length());\n-        long[] b = fb.apply(SPECIES.length());\n-        long[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Long> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                LongVector av = LongVector.fromArray(SPECIES, a, i);\n-                LongVector bv = LongVector.fromArray(SPECIES, b, i);\n-                av.expand(vmask, bv).intoArray(r, i);\n-            }\n-        }\n-        assertexpandArraysEquals(r, a, b, mask, SPECIES.length());\n-    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long256VectorTests.java","additions":0,"deletions":85,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -244,25 +244,0 @@\n-    static void assertcompressArraysEquals(long[] r, long[] a, long[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + k], a[i + j]);\n-                        k++;\n-                    }\n-                }\n-                for (; k < vector_len; k++) {\n-                    Assert.assertEquals(r[i + k], b[i + k]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + k;\n-            if (m[(i + j) % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + j], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n@@ -293,24 +268,0 @@\n-    static void assertexpandArraysEquals(long[] r, long[] a, long[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + j], a[i + k]);\n-                        k++;\n-                    } else {\n-                        Assert.assertEquals(r[i + j], b[i + j]);\n-                    }\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + j;\n-            if (m[idx % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + k], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n@@ -4259,18 +4210,0 @@\n-    @Test(dataProvider = \"longBinaryOpMaskProvider\")\n-    static void compressLong512VectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        long[] a = fa.apply(SPECIES.length());\n-        long[] b = fb.apply(SPECIES.length());\n-        long[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Long> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                LongVector av = LongVector.fromArray(SPECIES, a, i);\n-                LongVector bv = LongVector.fromArray(SPECIES, b, i);\n-                av.compress(vmask, bv).intoArray(r, i);\n-            }\n-        }\n-        assertcompressArraysEquals(r, a, b, mask, SPECIES.length());\n-    }\n@@ -4296,18 +4229,0 @@\n-    @Test(dataProvider = \"longBinaryOpMaskProvider\")\n-    static void expandLong512VectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        long[] a = fa.apply(SPECIES.length());\n-        long[] b = fb.apply(SPECIES.length());\n-        long[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Long> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                LongVector av = LongVector.fromArray(SPECIES, a, i);\n-                LongVector bv = LongVector.fromArray(SPECIES, b, i);\n-                av.expand(vmask, bv).intoArray(r, i);\n-            }\n-        }\n-        assertexpandArraysEquals(r, a, b, mask, SPECIES.length());\n-    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long512VectorTests.java","additions":0,"deletions":85,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -244,25 +244,0 @@\n-    static void assertcompressArraysEquals(long[] r, long[] a, long[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + k], a[i + j]);\n-                        k++;\n-                    }\n-                }\n-                for (; k < vector_len; k++) {\n-                    Assert.assertEquals(r[i + k], b[i + k]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + k;\n-            if (m[(i + j) % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + j], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n@@ -293,24 +268,0 @@\n-    static void assertexpandArraysEquals(long[] r, long[] a, long[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + j], a[i + k]);\n-                        k++;\n-                    } else {\n-                        Assert.assertEquals(r[i + j], b[i + j]);\n-                    }\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + j;\n-            if (m[idx % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + k], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n@@ -4259,18 +4210,0 @@\n-    @Test(dataProvider = \"longBinaryOpMaskProvider\")\n-    static void compressLong64VectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        long[] a = fa.apply(SPECIES.length());\n-        long[] b = fb.apply(SPECIES.length());\n-        long[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Long> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                LongVector av = LongVector.fromArray(SPECIES, a, i);\n-                LongVector bv = LongVector.fromArray(SPECIES, b, i);\n-                av.compress(vmask, bv).intoArray(r, i);\n-            }\n-        }\n-        assertcompressArraysEquals(r, a, b, mask, SPECIES.length());\n-    }\n@@ -4296,18 +4229,0 @@\n-    @Test(dataProvider = \"longBinaryOpMaskProvider\")\n-    static void expandLong64VectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        long[] a = fa.apply(SPECIES.length());\n-        long[] b = fb.apply(SPECIES.length());\n-        long[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Long> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                LongVector av = LongVector.fromArray(SPECIES, a, i);\n-                LongVector bv = LongVector.fromArray(SPECIES, b, i);\n-                av.expand(vmask, bv).intoArray(r, i);\n-            }\n-        }\n-        assertexpandArraysEquals(r, a, b, mask, SPECIES.length());\n-    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long64VectorTests.java","additions":0,"deletions":85,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -249,25 +249,0 @@\n-    static void assertcompressArraysEquals(long[] r, long[] a, long[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + k], a[i + j]);\n-                        k++;\n-                    }\n-                }\n-                for (; k < vector_len; k++) {\n-                    Assert.assertEquals(r[i + k], b[i + k]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + k;\n-            if (m[(i + j) % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + j], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n@@ -298,24 +273,0 @@\n-    static void assertexpandArraysEquals(long[] r, long[] a, long[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + j], a[i + k]);\n-                        k++;\n-                    } else {\n-                        Assert.assertEquals(r[i + j], b[i + j]);\n-                    }\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + j;\n-            if (m[idx % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + k], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n@@ -4264,18 +4215,0 @@\n-    @Test(dataProvider = \"longBinaryOpMaskProvider\")\n-    static void compressLongMaxVectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        long[] a = fa.apply(SPECIES.length());\n-        long[] b = fb.apply(SPECIES.length());\n-        long[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Long> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                LongVector av = LongVector.fromArray(SPECIES, a, i);\n-                LongVector bv = LongVector.fromArray(SPECIES, b, i);\n-                av.compress(vmask, bv).intoArray(r, i);\n-            }\n-        }\n-        assertcompressArraysEquals(r, a, b, mask, SPECIES.length());\n-    }\n@@ -4301,18 +4234,0 @@\n-    @Test(dataProvider = \"longBinaryOpMaskProvider\")\n-    static void expandLongMaxVectorTestsMasked(IntFunction<long[]> fa, IntFunction<long[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        long[] a = fa.apply(SPECIES.length());\n-        long[] b = fb.apply(SPECIES.length());\n-        long[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Long> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                LongVector av = LongVector.fromArray(SPECIES, a, i);\n-                LongVector bv = LongVector.fromArray(SPECIES, b, i);\n-                av.expand(vmask, bv).intoArray(r, i);\n-            }\n-        }\n-        assertexpandArraysEquals(r, a, b, mask, SPECIES.length());\n-    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/LongMaxVectorTests.java","additions":0,"deletions":85,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -287,25 +287,0 @@\n-    static void assertcompressArraysEquals(short[] r, short[] a, short[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + k], a[i + j]);\n-                        k++;\n-                    }\n-                }\n-                for (; k < vector_len; k++) {\n-                    Assert.assertEquals(r[i + k], b[i + k]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + k;\n-            if (m[(i + j) % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + j], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n@@ -336,24 +311,0 @@\n-    static void assertexpandArraysEquals(short[] r, short[] a, short[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + j], a[i + k]);\n-                        k++;\n-                    } else {\n-                        Assert.assertEquals(r[i + j], b[i + j]);\n-                    }\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + j;\n-            if (m[idx % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + k], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n@@ -4334,18 +4285,0 @@\n-    @Test(dataProvider = \"shortBinaryOpMaskProvider\")\n-    static void compressShort128VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        short[] a = fa.apply(SPECIES.length());\n-        short[] b = fb.apply(SPECIES.length());\n-        short[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Short> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n-                ShortVector bv = ShortVector.fromArray(SPECIES, b, i);\n-                av.compress(vmask, bv).intoArray(r, i);\n-            }\n-        }\n-        assertcompressArraysEquals(r, a, b, mask, SPECIES.length());\n-    }\n@@ -4371,18 +4304,0 @@\n-    @Test(dataProvider = \"shortBinaryOpMaskProvider\")\n-    static void expandShort128VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        short[] a = fa.apply(SPECIES.length());\n-        short[] b = fb.apply(SPECIES.length());\n-        short[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Short> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n-                ShortVector bv = ShortVector.fromArray(SPECIES, b, i);\n-                av.expand(vmask, bv).intoArray(r, i);\n-            }\n-        }\n-        assertexpandArraysEquals(r, a, b, mask, SPECIES.length());\n-    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short128VectorTests.java","additions":0,"deletions":85,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -287,25 +287,0 @@\n-    static void assertcompressArraysEquals(short[] r, short[] a, short[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + k], a[i + j]);\n-                        k++;\n-                    }\n-                }\n-                for (; k < vector_len; k++) {\n-                    Assert.assertEquals(r[i + k], b[i + k]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + k;\n-            if (m[(i + j) % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + j], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n@@ -336,24 +311,0 @@\n-    static void assertexpandArraysEquals(short[] r, short[] a, short[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + j], a[i + k]);\n-                        k++;\n-                    } else {\n-                        Assert.assertEquals(r[i + j], b[i + j]);\n-                    }\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + j;\n-            if (m[idx % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + k], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n@@ -4334,18 +4285,0 @@\n-    @Test(dataProvider = \"shortBinaryOpMaskProvider\")\n-    static void compressShort256VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        short[] a = fa.apply(SPECIES.length());\n-        short[] b = fb.apply(SPECIES.length());\n-        short[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Short> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n-                ShortVector bv = ShortVector.fromArray(SPECIES, b, i);\n-                av.compress(vmask, bv).intoArray(r, i);\n-            }\n-        }\n-        assertcompressArraysEquals(r, a, b, mask, SPECIES.length());\n-    }\n@@ -4371,18 +4304,0 @@\n-    @Test(dataProvider = \"shortBinaryOpMaskProvider\")\n-    static void expandShort256VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        short[] a = fa.apply(SPECIES.length());\n-        short[] b = fb.apply(SPECIES.length());\n-        short[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Short> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n-                ShortVector bv = ShortVector.fromArray(SPECIES, b, i);\n-                av.expand(vmask, bv).intoArray(r, i);\n-            }\n-        }\n-        assertexpandArraysEquals(r, a, b, mask, SPECIES.length());\n-    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short256VectorTests.java","additions":0,"deletions":85,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -287,25 +287,0 @@\n-    static void assertcompressArraysEquals(short[] r, short[] a, short[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + k], a[i + j]);\n-                        k++;\n-                    }\n-                }\n-                for (; k < vector_len; k++) {\n-                    Assert.assertEquals(r[i + k], b[i + k]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + k;\n-            if (m[(i + j) % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + j], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n@@ -336,24 +311,0 @@\n-    static void assertexpandArraysEquals(short[] r, short[] a, short[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + j], a[i + k]);\n-                        k++;\n-                    } else {\n-                        Assert.assertEquals(r[i + j], b[i + j]);\n-                    }\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + j;\n-            if (m[idx % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + k], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n@@ -4334,18 +4285,0 @@\n-    @Test(dataProvider = \"shortBinaryOpMaskProvider\")\n-    static void compressShort512VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        short[] a = fa.apply(SPECIES.length());\n-        short[] b = fb.apply(SPECIES.length());\n-        short[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Short> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n-                ShortVector bv = ShortVector.fromArray(SPECIES, b, i);\n-                av.compress(vmask, bv).intoArray(r, i);\n-            }\n-        }\n-        assertcompressArraysEquals(r, a, b, mask, SPECIES.length());\n-    }\n@@ -4371,18 +4304,0 @@\n-    @Test(dataProvider = \"shortBinaryOpMaskProvider\")\n-    static void expandShort512VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        short[] a = fa.apply(SPECIES.length());\n-        short[] b = fb.apply(SPECIES.length());\n-        short[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Short> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n-                ShortVector bv = ShortVector.fromArray(SPECIES, b, i);\n-                av.expand(vmask, bv).intoArray(r, i);\n-            }\n-        }\n-        assertexpandArraysEquals(r, a, b, mask, SPECIES.length());\n-    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short512VectorTests.java","additions":0,"deletions":85,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -287,25 +287,0 @@\n-    static void assertcompressArraysEquals(short[] r, short[] a, short[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + k], a[i + j]);\n-                        k++;\n-                    }\n-                }\n-                for (; k < vector_len; k++) {\n-                    Assert.assertEquals(r[i + k], b[i + k]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + k;\n-            if (m[(i + j) % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + j], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n@@ -336,24 +311,0 @@\n-    static void assertexpandArraysEquals(short[] r, short[] a, short[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + j], a[i + k]);\n-                        k++;\n-                    } else {\n-                        Assert.assertEquals(r[i + j], b[i + j]);\n-                    }\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + j;\n-            if (m[idx % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + k], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n@@ -4334,18 +4285,0 @@\n-    @Test(dataProvider = \"shortBinaryOpMaskProvider\")\n-    static void compressShort64VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        short[] a = fa.apply(SPECIES.length());\n-        short[] b = fb.apply(SPECIES.length());\n-        short[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Short> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n-                ShortVector bv = ShortVector.fromArray(SPECIES, b, i);\n-                av.compress(vmask, bv).intoArray(r, i);\n-            }\n-        }\n-        assertcompressArraysEquals(r, a, b, mask, SPECIES.length());\n-    }\n@@ -4371,18 +4304,0 @@\n-    @Test(dataProvider = \"shortBinaryOpMaskProvider\")\n-    static void expandShort64VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        short[] a = fa.apply(SPECIES.length());\n-        short[] b = fb.apply(SPECIES.length());\n-        short[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Short> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n-                ShortVector bv = ShortVector.fromArray(SPECIES, b, i);\n-                av.expand(vmask, bv).intoArray(r, i);\n-            }\n-        }\n-        assertexpandArraysEquals(r, a, b, mask, SPECIES.length());\n-    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short64VectorTests.java","additions":0,"deletions":85,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -292,25 +292,0 @@\n-    static void assertcompressArraysEquals(short[] r, short[] a, short[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + k], a[i + j]);\n-                        k++;\n-                    }\n-                }\n-                for (; k < vector_len; k++) {\n-                    Assert.assertEquals(r[i + k], b[i + k]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + k;\n-            if (m[(i + j) % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + j], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n@@ -341,24 +316,0 @@\n-    static void assertexpandArraysEquals(short[] r, short[] a, short[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + j], a[i + k]);\n-                        k++;\n-                    } else {\n-                        Assert.assertEquals(r[i + j], b[i + j]);\n-                    }\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + j;\n-            if (m[idx % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + k], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n@@ -4339,18 +4290,0 @@\n-    @Test(dataProvider = \"shortBinaryOpMaskProvider\")\n-    static void compressShortMaxVectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        short[] a = fa.apply(SPECIES.length());\n-        short[] b = fb.apply(SPECIES.length());\n-        short[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Short> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n-                ShortVector bv = ShortVector.fromArray(SPECIES, b, i);\n-                av.compress(vmask, bv).intoArray(r, i);\n-            }\n-        }\n-        assertcompressArraysEquals(r, a, b, mask, SPECIES.length());\n-    }\n@@ -4376,18 +4309,0 @@\n-    @Test(dataProvider = \"shortBinaryOpMaskProvider\")\n-    static void expandShortMaxVectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        short[] a = fa.apply(SPECIES.length());\n-        short[] b = fb.apply(SPECIES.length());\n-        short[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<Short> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n-                ShortVector bv = ShortVector.fromArray(SPECIES, b, i);\n-                av.expand(vmask, bv).intoArray(r, i);\n-            }\n-        }\n-        assertexpandArraysEquals(r, a, b, mask, SPECIES.length());\n-    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ShortMaxVectorTests.java","additions":0,"deletions":85,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -20,18 +20,0 @@\n-    @Test(dataProvider = \"$type$BinaryOpMaskProvider\")\n-    static void [[TEST]]$vectorteststype$Masked(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,\n-                                          IntFunction<boolean[]> fm) {\n-        $type$[] a = fa.apply(SPECIES.length());\n-        $type$[] b = fb.apply(SPECIES.length());\n-        $type$[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);\n-                $abstractvectortype$ bv = $abstractvectortype$.fromArray(SPECIES, b, i);\n-                av.[[TEST]](vmask, bv).intoArray(r, i);\n-            }\n-        }\n-        assert[[TEST]]ArraysEquals(r, a, b, mask, SPECIES.length());\n-    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-CompressExpand.template","additions":0,"deletions":18,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -318,25 +318,0 @@\n-    static void assertcompressArraysEquals($type$[] r, $type$[] a, $type$[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + k], a[i + j]);\n-                        k++;\n-                    }\n-                }\n-                for (; k < vector_len; k++) {\n-                    Assert.assertEquals(r[i + k], b[i + k]);\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + k;\n-            if (m[(i + j) % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + j], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n@@ -367,24 +342,0 @@\n-    static void assertexpandArraysEquals($type$[] r, $type$[] a, $type$[] b, boolean[] m, int vector_len) {\n-        int i = 0, j = 0, k = 0;\n-        try {\n-            for (; i < a.length; i += vector_len) {\n-                k = 0;\n-                for (j = 0; j < vector_len; j++) {\n-                    if (m[(i + j) % SPECIES.length()]) {\n-                        Assert.assertEquals(r[i + j], a[i + k]);\n-                        k++;\n-                    } else {\n-                        Assert.assertEquals(r[i + j], b[i + j]);\n-                    }\n-                }\n-            }\n-        } catch (AssertionError e) {\n-            int idx = i + j;\n-            if (m[idx % SPECIES.length()]) {\n-                Assert.assertEquals(r[idx], a[i + k], \"at index #\" + idx);\n-            } else {\n-                Assert.assertEquals(r[idx], b[idx], \"at index #\" + idx);\n-            }\n-        }\n-    }\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-header.template","additions":0,"deletions":49,"binary":false,"changes":49,"status":"modified"}]}