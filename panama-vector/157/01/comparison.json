{"files":[{"patch":"@@ -4114,43 +4114,0 @@\n-void C2_MacroAssembler::vector_mask_compress(XMMRegister dst, XMMRegister src, Register rtmp1,\n-                                             Register rtmp2, XMMRegister xtmp, int mask_len,\n-                                             int vec_enc) {\n-  int index = 0;\n-  int vindex = 0;\n-  vpxor(xtmp, xtmp, xtmp, vec_enc);\n-  vpsubb(xtmp, xtmp, src, vec_enc);\n-  vpmovmskb(rtmp1, xtmp, vec_enc);\n-  andq(rtmp1, (0xFFFFFFFFFFFFFFFFUL >> (64 - mask_len)));\n-  mov64(rtmp2, -1L);\n-  pext(rtmp2, rtmp2, rtmp1);\n-  mov64(rtmp1, 0x0101010101010101L);\n-  pdep(rtmp1, rtmp2, rtmp1);\n-  if (mask_len > 8) {\n-    movq(xtmp, rtmp1);\n-  }\n-  movq(dst, rtmp1);\n-\n-  mask_len -= 8;\n-  while (mask_len > 0) {\n-    assert ((mask_len & 0x7) == 0, \"mask must be multiple of 8\");\n-    index++;\n-    if ((index % 2) == 0) {\n-      pxor(xtmp, xtmp);\n-    }\n-    mov64(rtmp1, 0x0101010101010101L);\n-    shrq(rtmp2, 8);\n-    pdep(rtmp1, rtmp2, rtmp1);\n-    pinsrq(xtmp, rtmp1, index % 2);\n-    vindex = index \/ 2;\n-    if (vindex) {\n-      \/\/ Write entire 16 byte vector when both 64 bit\n-      \/\/ lanes are update to save redundant instructions.\n-      if (index % 2) {\n-        vinsertf128(dst, dst, xtmp, vindex);\n-      }\n-    } else {\n-      vmovdqu(dst, xtmp);\n-    }\n-    mask_len -= 8;\n-  }\n-}\n-\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":0,"deletions":43,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -98,3 +98,0 @@\n-  void vector_mask_compress(XMMRegister dst, XMMRegister src, Register rtmp1, Register rtmp2,\n-                            XMMRegister xtmp, int mask_len, int vec_enc);\n-\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1602,0 +1602,11 @@\n+    case Op_CompressM:\n+      if (!VM_Version::supports_avx512vl() || !VM_Version::supports_bmi2()) {\n+        return false;\n+      }\n+      break;\n+    case Op_CompressV:\n+    case Op_ExpandV:\n+      if (!VM_Version::supports_avx512vl()) {\n+        return false;\n+      }\n+      break;\n@@ -1838,1 +1849,1 @@\n-      if (UseAVX < 1 || !VM_Version::supports_bmi2()) {\n+      if (UseAVX < 3 || !VM_Version::supports_bmi2()) {\n@@ -1950,2 +1961,0 @@\n-    case Op_CompressV:\n-    case Op_ExpandV:\n@@ -8796,1 +8805,0 @@\n-  predicate(n->in(1)->bottom_type()->isa_vectmask());\n@@ -8801,0 +8809,1 @@\n+    assert(this->in(1)->bottom_type()->isa_vectmask(), \"\");\n@@ -8807,15 +8816,0 @@\n-instruct vcompress_mask_reg_avx(vec dst, vec mask, rRegL rtmp1, rRegL rtmp2, vec xtmp, rFlagsReg cr) %{\n-  predicate(n->in(1)->bottom_type()->isa_vectmask() == NULL);\n-  match(Set dst (CompressM mask));\n-  effect(TEMP dst, TEMP rtmp1, TEMP rtmp2, TEMP xtmp, KILL cr);\n-  format %{ \"mask_compress_avx $dst, $mask\\t! using $rtmp1, $rtmp2 and $xtmp as TEMP\" %}\n-  ins_encode %{\n-    assert(Matcher::vector_element_basic_type(this, $mask) == T_BOOLEAN, \"\");\n-    int mask_len = Matcher::vector_length(this, $mask);\n-    int vec_enc = vector_length_encoding(this);\n-    __ vector_mask_compress($dst$$XMMRegister, $mask$$XMMRegister, $rtmp1$$Register,\n-                            $rtmp2$$Register, $xtmp$$XMMRegister, mask_len, vec_enc);\n-  %}\n-  ins_pipe( pipe_slow );\n-%}\n-\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":13,"deletions":19,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -919,1 +919,1 @@\n-                                      \"Ljdk\/internal\/vm\/vector\/VectorSupport$Vector;\"                                                          \\\n+                                      \"Ljdk\/internal\/vm\/vector\/VectorSupport$VectorPayload;\"                                                   \\\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -491,0 +491,4 @@\n+  case vmIntrinsics::_VectorComExp:\n+    if (!Matcher::match_rule_supported(Op_CompressM)) return false;\n+    if (!Matcher::match_rule_supported(Op_CompressV)) return false;\n+    break;\n@@ -700,1 +704,0 @@\n-  case vmIntrinsics::_VectorComExp:\n","filename":"src\/hotspot\/share\/opto\/c2compiler.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -683,8 +683,0 @@\n-  if (!arch_supports_vector(Op_LoadVector, num_elem, T_BOOLEAN, VecMaskNotUsed)) {\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** not supported: arity=1 op=cast#%d\/3 vlen2=%d etype2=%s\",\n-                    Op_LoadVector, num_elem, type2name(T_BOOLEAN));\n-    }\n-    return false; \/\/ not supported\n-  }\n-\n@@ -692,1 +684,1 @@\n-  if (!arch_supports_vector(mopc, num_elem, elem_bt, VecMaskNotUsed)) {\n+  if (!arch_supports_vector(mopc, num_elem, elem_bt, VecMaskUseLoad)) {\n@@ -1006,10 +998,0 @@\n-    if (!arch_supports_vector(Op_LoadVector, num_elem, T_BOOLEAN, VecMaskNotUsed)) {\n-      if (C->print_intrinsics()) {\n-        tty->print_cr(\"  ** not supported: arity=%d op=%s\/mask vlen=%d etype=bit ismask=no\",\n-                      is_store, is_store ? \"store\" : \"load\",\n-                      num_elem);\n-      }\n-      set_map(old_map);\n-      set_sp(old_sp);\n-      return false; \/\/ not supported\n-    }\n@@ -1053,1 +1035,3 @@\n-\n+    if (is_mask) {\n+      val = gvn().transform(VectorStoreMaskNode::make(gvn(), val, elem_bt, num_elem));\n+    }\n@@ -2753,9 +2737,1 @@\n-  VectorMaskUseType checkFlags = VecMaskNotUsed;\n-  if (opc == Op_CompressM) {\n-     checkFlags = VecMaskUseAll;\n-  } else {\n-     assert(opc == Op_ExpandV || opc == Op_CompressV, \"\");\n-     checkFlags = VecMaskUseLoad;\n-  }\n-\n-  if (!arch_supports_vector(opc, num_elem, elem_bt, checkFlags)) {\n+  if (!arch_supports_vector(opc, num_elem, elem_bt, VecMaskUseLoad)) {\n@@ -2797,1 +2773,0 @@\n-  Node* operation = NULL;\n@@ -2799,8 +2774,1 @@\n-  if (opc == Op_CompressM && vt->isa_vectmask() == NULL) {\n-    mask = gvn().transform(VectorStoreMaskNode::make(gvn(), mask, elem_bt, num_elem));\n-    const TypeVect* ivt = TypeVect::make(T_BOOLEAN, num_elem);\n-    operation = gvn().transform(VectorNode::make(opc, opd1, mask, ivt));\n-    operation = gvn().transform(new VectorLoadMaskNode(operation, vt));\n-  } else {\n-    operation = gvn().transform(VectorNode::make(opc, opd1, mask, vt));\n-  }\n+  Node* operation = gvn().transform(VectorNode::make(opc, opd1, mask, vt));\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":6,"deletions":38,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -440,1 +440,1 @@\n-                                          V extends Vector<?>> {\n+                                          V extends VectorPayload> {\n@@ -447,1 +447,1 @@\n-     V extends Vector<?>>\n+     V extends VectorPayload>\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/vector\/VectorSupport.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,0 +31,4 @@\n+import jdk.internal.misc.Unsafe;\n+\n+import jdk.internal.vm.vector.VectorSupport;\n+\n@@ -79,1 +83,9 @@\n-        System.arraycopy(getBits(), 0, bits, i, length());\n+        AbstractSpecies<E> vsp = (AbstractSpecies<E>) vectorSpecies();\n+        int laneCount = vsp.laneCount();\n+        i = VectorIntrinsics.checkFromIndexSize(i, laneCount, bits.length);\n+        VectorSupport.store(\n+            vsp.maskType(), vsp.elementType(), laneCount,\n+            bits, (long) i + Unsafe.ARRAY_BOOLEAN_BASE_OFFSET,\n+            this, bits, i,\n+            (c, idx, s) -> System.arraycopy(s.getBits(), 0, c, idx, s.length()));\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/AbstractMask.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -694,3 +694,2 @@\n-                                                      Byte128Vector.class, Byte128Mask.class, byte.class,\n-                                                      VLENGTH, null, this,\n-                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+                Byte128Vector.class, Byte128Mask.class, ETYPE, VLENGTH, null, this,\n+                (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte128Vector.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -726,3 +726,2 @@\n-                                                      Byte256Vector.class, Byte256Mask.class, byte.class,\n-                                                      VLENGTH, null, this,\n-                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+                Byte256Vector.class, Byte256Mask.class, ETYPE, VLENGTH, null, this,\n+                (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte256Vector.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -790,3 +790,2 @@\n-                                                      Byte512Vector.class, Byte512Mask.class, byte.class,\n-                                                      VLENGTH, null, this,\n-                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+                Byte512Vector.class, Byte512Mask.class, ETYPE, VLENGTH, null, this,\n+                (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte512Vector.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -678,3 +678,2 @@\n-                                                      Byte64Vector.class, Byte64Mask.class, byte.class,\n-                                                      VLENGTH, null, this,\n-                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+                Byte64Vector.class, Byte64Mask.class, ETYPE, VLENGTH, null, this,\n+                (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte64Vector.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -664,3 +664,2 @@\n-                                                      ByteMaxVector.class, ByteMaxMask.class, byte.class,\n-                                                      VLENGTH, null, this,\n-                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+                ByteMaxVector.class, ByteMaxMask.class, ETYPE, VLENGTH, null, this,\n+                (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteMaxVector.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2401,1 +2401,1 @@\n-    <M extends VectorMask<Byte>>\n+    <M extends AbstractMask<Byte>>\n@@ -2419,1 +2419,1 @@\n-    <M extends VectorMask<Byte>>\n+    <M extends AbstractMask<Byte>>\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteVector.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -655,3 +655,2 @@\n-                                                      Double128Vector.class, Double128Mask.class, double.class,\n-                                                      VLENGTH, null, this,\n-                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+                Double128Vector.class, Double128Mask.class, ETYPE, VLENGTH, null, this,\n+                (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double128Vector.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -659,3 +659,2 @@\n-                                                      Double256Vector.class, Double256Mask.class, double.class,\n-                                                      VLENGTH, null, this,\n-                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+                Double256Vector.class, Double256Mask.class, ETYPE, VLENGTH, null, this,\n+                (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double256Vector.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -667,3 +667,2 @@\n-                                                      Double512Vector.class, Double512Mask.class, double.class,\n-                                                      VLENGTH, null, this,\n-                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+                Double512Vector.class, Double512Mask.class, ETYPE, VLENGTH, null, this,\n+                (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double512Vector.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -653,3 +653,2 @@\n-                                                      Double64Vector.class, Double64Mask.class, double.class,\n-                                                      VLENGTH, null, this,\n-                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+                Double64Vector.class, Double64Mask.class, ETYPE, VLENGTH, null, this,\n+                (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double64Vector.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -652,3 +652,2 @@\n-                                                      DoubleMaxVector.class, DoubleMaxMask.class, double.class,\n-                                                      VLENGTH, null, this,\n-                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+                DoubleMaxVector.class, DoubleMaxMask.class, ETYPE, VLENGTH, null, this,\n+                (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleMaxVector.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2247,1 +2247,1 @@\n-    <M extends VectorMask<Double>>\n+    <M extends AbstractMask<Double>>\n@@ -2265,1 +2265,1 @@\n-    <M extends VectorMask<Double>>\n+    <M extends AbstractMask<Double>>\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleVector.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -659,3 +659,2 @@\n-                                                      Float128Vector.class, Float128Mask.class, float.class,\n-                                                      VLENGTH, null, this,\n-                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+                Float128Vector.class, Float128Mask.class, ETYPE, VLENGTH, null, this,\n+                (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float128Vector.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -667,3 +667,2 @@\n-                                                      Float256Vector.class, Float256Mask.class, float.class,\n-                                                      VLENGTH, null, this,\n-                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+                Float256Vector.class, Float256Mask.class, ETYPE, VLENGTH, null, this,\n+                (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float256Vector.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -683,3 +683,2 @@\n-                                                      Float512Vector.class, Float512Mask.class, float.class,\n-                                                      VLENGTH, null, this,\n-                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+                Float512Vector.class, Float512Mask.class, ETYPE, VLENGTH, null, this,\n+                (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float512Vector.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -655,3 +655,2 @@\n-                                                      Float64Vector.class, Float64Mask.class, float.class,\n-                                                      VLENGTH, null, this,\n-                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+                Float64Vector.class, Float64Mask.class, ETYPE, VLENGTH, null, this,\n+                (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float64Vector.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -652,3 +652,2 @@\n-                                                      FloatMaxVector.class, FloatMaxMask.class, float.class,\n-                                                      VLENGTH, null, this,\n-                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+                FloatMaxVector.class, FloatMaxMask.class, ETYPE, VLENGTH, null, this,\n+                (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatMaxVector.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2259,1 +2259,1 @@\n-    <M extends VectorMask<Float>>\n+    <M extends AbstractMask<Float>>\n@@ -2277,1 +2277,1 @@\n-    <M extends VectorMask<Float>>\n+    <M extends AbstractMask<Float>>\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatVector.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -670,3 +670,2 @@\n-                                                      Int128Vector.class, Int128Mask.class, int.class,\n-                                                      VLENGTH, null, this,\n-                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+                Int128Vector.class, Int128Mask.class, ETYPE, VLENGTH, null, this,\n+                (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int128Vector.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -678,3 +678,2 @@\n-                                                      Int256Vector.class, Int256Mask.class, int.class,\n-                                                      VLENGTH, null, this,\n-                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+                Int256Vector.class, Int256Mask.class, ETYPE, VLENGTH, null, this,\n+                (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int256Vector.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -694,3 +694,2 @@\n-                                                      Int512Vector.class, Int512Mask.class, int.class,\n-                                                      VLENGTH, null, this,\n-                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+                Int512Vector.class, Int512Mask.class, ETYPE, VLENGTH, null, this,\n+                (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int512Vector.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -666,3 +666,2 @@\n-                                                      Int64Vector.class, Int64Mask.class, int.class,\n-                                                      VLENGTH, null, this,\n-                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+                Int64Vector.class, Int64Mask.class, ETYPE, VLENGTH, null, this,\n+                (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int64Vector.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -664,3 +664,2 @@\n-                                                      IntMaxVector.class, IntMaxMask.class, int.class,\n-                                                      VLENGTH, null, this,\n-                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+                IntMaxVector.class, IntMaxMask.class, ETYPE, VLENGTH, null, this,\n+                (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntMaxVector.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2400,1 +2400,1 @@\n-    <M extends VectorMask<Integer>>\n+    <M extends AbstractMask<Integer>>\n@@ -2418,1 +2418,1 @@\n-    <M extends VectorMask<Integer>>\n+    <M extends AbstractMask<Integer>>\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntVector.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -656,3 +656,2 @@\n-                                                      Long128Vector.class, Long128Mask.class, long.class,\n-                                                      VLENGTH, null, this,\n-                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+                Long128Vector.class, Long128Mask.class, ETYPE, VLENGTH, null, this,\n+                (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long128Vector.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -660,3 +660,2 @@\n-                                                      Long256Vector.class, Long256Mask.class, long.class,\n-                                                      VLENGTH, null, this,\n-                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+                Long256Vector.class, Long256Mask.class, ETYPE, VLENGTH, null, this,\n+                (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long256Vector.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -668,3 +668,2 @@\n-                                                      Long512Vector.class, Long512Mask.class, long.class,\n-                                                      VLENGTH, null, this,\n-                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+                Long512Vector.class, Long512Mask.class, ETYPE, VLENGTH, null, this,\n+                (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long512Vector.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -654,3 +654,2 @@\n-                                                      Long64Vector.class, Long64Mask.class, long.class,\n-                                                      VLENGTH, null, this,\n-                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+                Long64Vector.class, Long64Mask.class, ETYPE, VLENGTH, null, this,\n+                (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long64Vector.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -654,3 +654,2 @@\n-                                                      LongMaxVector.class, LongMaxMask.class, long.class,\n-                                                      VLENGTH, null, this,\n-                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+                LongMaxVector.class, LongMaxMask.class, ETYPE, VLENGTH, null, this,\n+                (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongMaxVector.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2266,1 +2266,1 @@\n-    <M extends VectorMask<Long>>\n+    <M extends AbstractMask<Long>>\n@@ -2284,1 +2284,1 @@\n-    <M extends VectorMask<Long>>\n+    <M extends AbstractMask<Long>>\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongVector.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -678,3 +678,2 @@\n-                                                      Short128Vector.class, Short128Mask.class, short.class,\n-                                                      VLENGTH, null, this,\n-                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+                Short128Vector.class, Short128Mask.class, ETYPE, VLENGTH, null, this,\n+                (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short128Vector.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -694,3 +694,2 @@\n-                                                      Short256Vector.class, Short256Mask.class, short.class,\n-                                                      VLENGTH, null, this,\n-                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+                Short256Vector.class, Short256Mask.class, ETYPE, VLENGTH, null, this,\n+                (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short256Vector.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -726,3 +726,2 @@\n-                                                      Short512Vector.class, Short512Mask.class, short.class,\n-                                                      VLENGTH, null, this,\n-                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+                Short512Vector.class, Short512Mask.class, ETYPE, VLENGTH, null, this,\n+                (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short512Vector.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -670,3 +670,2 @@\n-                                                      Short64Vector.class, Short64Mask.class, short.class,\n-                                                      VLENGTH, null, this,\n-                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+                Short64Vector.class, Short64Mask.class, ETYPE, VLENGTH, null, this,\n+                (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short64Vector.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -664,3 +664,2 @@\n-                                                      ShortMaxVector.class, ShortMaxMask.class, short.class,\n-                                                      VLENGTH, null, this,\n-                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+                ShortMaxVector.class, ShortMaxMask.class, ETYPE, VLENGTH, null, this,\n+                (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortMaxVector.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2401,1 +2401,1 @@\n-    <M extends VectorMask<Short>>\n+    <M extends AbstractMask<Short>>\n@@ -2419,1 +2419,1 @@\n-    <M extends VectorMask<Short>>\n+    <M extends AbstractMask<Short>>\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortVector.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2698,1 +2698,1 @@\n-    <M extends VectorMask<$Boxtype$>>\n+    <M extends AbstractMask<$Boxtype$>>\n@@ -2716,1 +2716,1 @@\n-    <M extends VectorMask<$Boxtype$>>\n+    <M extends AbstractMask<$Boxtype$>>\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -937,3 +937,2 @@\n-                                                      $vectortype$.class, $masktype$.class, $type$.class,\n-                                                      VLENGTH, null, this,\n-                                                      (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n+                $vectortype$.class, $masktype$.class, ETYPE, VLENGTH, null, this,\n+                (v1, m1) -> VSPECIES.iota().compare(VectorOperators.LT, m1.trueCount()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-VectorBits.java.template","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -4278,1 +4278,1 @@\n-    static void compressMaskedByte128VectorTests(IntFunction<byte[]> fa,\n+    static void compressByte128VectorTests(IntFunction<byte[]> fa,\n@@ -4295,1 +4295,0 @@\n-\n@@ -4297,1 +4296,1 @@\n-    static void expandMaskedByte128VectorTests(IntFunction<byte[]> fa,\n+    static void expandByte128VectorTests(IntFunction<byte[]> fa,\n@@ -4313,1 +4312,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte128VectorTests.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -4278,1 +4278,1 @@\n-    static void compressMaskedByte256VectorTests(IntFunction<byte[]> fa,\n+    static void compressByte256VectorTests(IntFunction<byte[]> fa,\n@@ -4295,1 +4295,0 @@\n-\n@@ -4297,1 +4296,1 @@\n-    static void expandMaskedByte256VectorTests(IntFunction<byte[]> fa,\n+    static void expandByte256VectorTests(IntFunction<byte[]> fa,\n@@ -4313,1 +4312,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte256VectorTests.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -4278,1 +4278,1 @@\n-    static void compressMaskedByte512VectorTests(IntFunction<byte[]> fa,\n+    static void compressByte512VectorTests(IntFunction<byte[]> fa,\n@@ -4295,1 +4295,0 @@\n-\n@@ -4297,1 +4296,1 @@\n-    static void expandMaskedByte512VectorTests(IntFunction<byte[]> fa,\n+    static void expandByte512VectorTests(IntFunction<byte[]> fa,\n@@ -4313,1 +4312,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte512VectorTests.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -4278,1 +4278,1 @@\n-    static void compressMaskedByte64VectorTests(IntFunction<byte[]> fa,\n+    static void compressByte64VectorTests(IntFunction<byte[]> fa,\n@@ -4295,1 +4295,0 @@\n-\n@@ -4297,1 +4296,1 @@\n-    static void expandMaskedByte64VectorTests(IntFunction<byte[]> fa,\n+    static void expandByte64VectorTests(IntFunction<byte[]> fa,\n@@ -4313,1 +4312,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte64VectorTests.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -4283,1 +4283,1 @@\n-    static void compressMaskedByteMaxVectorTests(IntFunction<byte[]> fa,\n+    static void compressByteMaxVectorTests(IntFunction<byte[]> fa,\n@@ -4300,1 +4300,0 @@\n-\n@@ -4302,1 +4301,1 @@\n-    static void expandMaskedByteMaxVectorTests(IntFunction<byte[]> fa,\n+    static void expandByteMaxVectorTests(IntFunction<byte[]> fa,\n@@ -4318,1 +4317,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ByteMaxVectorTests.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3228,1 +3228,1 @@\n-    static void compressMaskedDouble128VectorTests(IntFunction<double[]> fa,\n+    static void compressDouble128VectorTests(IntFunction<double[]> fa,\n@@ -3245,1 +3245,0 @@\n-\n@@ -3247,1 +3246,1 @@\n-    static void expandMaskedDouble128VectorTests(IntFunction<double[]> fa,\n+    static void expandDouble128VectorTests(IntFunction<double[]> fa,\n@@ -3263,1 +3262,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double128VectorTests.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3228,1 +3228,1 @@\n-    static void compressMaskedDouble256VectorTests(IntFunction<double[]> fa,\n+    static void compressDouble256VectorTests(IntFunction<double[]> fa,\n@@ -3245,1 +3245,0 @@\n-\n@@ -3247,1 +3246,1 @@\n-    static void expandMaskedDouble256VectorTests(IntFunction<double[]> fa,\n+    static void expandDouble256VectorTests(IntFunction<double[]> fa,\n@@ -3263,1 +3262,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double256VectorTests.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3228,1 +3228,1 @@\n-    static void compressMaskedDouble512VectorTests(IntFunction<double[]> fa,\n+    static void compressDouble512VectorTests(IntFunction<double[]> fa,\n@@ -3245,1 +3245,0 @@\n-\n@@ -3247,1 +3246,1 @@\n-    static void expandMaskedDouble512VectorTests(IntFunction<double[]> fa,\n+    static void expandDouble512VectorTests(IntFunction<double[]> fa,\n@@ -3263,1 +3262,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double512VectorTests.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3228,1 +3228,1 @@\n-    static void compressMaskedDouble64VectorTests(IntFunction<double[]> fa,\n+    static void compressDouble64VectorTests(IntFunction<double[]> fa,\n@@ -3245,1 +3245,0 @@\n-\n@@ -3247,1 +3246,1 @@\n-    static void expandMaskedDouble64VectorTests(IntFunction<double[]> fa,\n+    static void expandDouble64VectorTests(IntFunction<double[]> fa,\n@@ -3263,1 +3262,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double64VectorTests.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3233,1 +3233,1 @@\n-    static void compressMaskedDoubleMaxVectorTests(IntFunction<double[]> fa,\n+    static void compressDoubleMaxVectorTests(IntFunction<double[]> fa,\n@@ -3250,1 +3250,0 @@\n-\n@@ -3252,1 +3251,1 @@\n-    static void expandMaskedDoubleMaxVectorTests(IntFunction<double[]> fa,\n+    static void expandDoubleMaxVectorTests(IntFunction<double[]> fa,\n@@ -3268,1 +3267,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/DoubleMaxVectorTests.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3238,1 +3238,1 @@\n-    static void compressMaskedFloat128VectorTests(IntFunction<float[]> fa,\n+    static void compressFloat128VectorTests(IntFunction<float[]> fa,\n@@ -3255,1 +3255,0 @@\n-\n@@ -3257,1 +3256,1 @@\n-    static void expandMaskedFloat128VectorTests(IntFunction<float[]> fa,\n+    static void expandFloat128VectorTests(IntFunction<float[]> fa,\n@@ -3273,1 +3272,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float128VectorTests.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3238,1 +3238,1 @@\n-    static void compressMaskedFloat256VectorTests(IntFunction<float[]> fa,\n+    static void compressFloat256VectorTests(IntFunction<float[]> fa,\n@@ -3255,1 +3255,0 @@\n-\n@@ -3257,1 +3256,1 @@\n-    static void expandMaskedFloat256VectorTests(IntFunction<float[]> fa,\n+    static void expandFloat256VectorTests(IntFunction<float[]> fa,\n@@ -3273,1 +3272,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float256VectorTests.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3238,1 +3238,1 @@\n-    static void compressMaskedFloat512VectorTests(IntFunction<float[]> fa,\n+    static void compressFloat512VectorTests(IntFunction<float[]> fa,\n@@ -3255,1 +3255,0 @@\n-\n@@ -3257,1 +3256,1 @@\n-    static void expandMaskedFloat512VectorTests(IntFunction<float[]> fa,\n+    static void expandFloat512VectorTests(IntFunction<float[]> fa,\n@@ -3273,1 +3272,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float512VectorTests.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3238,1 +3238,1 @@\n-    static void compressMaskedFloat64VectorTests(IntFunction<float[]> fa,\n+    static void compressFloat64VectorTests(IntFunction<float[]> fa,\n@@ -3255,1 +3255,0 @@\n-\n@@ -3257,1 +3256,1 @@\n-    static void expandMaskedFloat64VectorTests(IntFunction<float[]> fa,\n+    static void expandFloat64VectorTests(IntFunction<float[]> fa,\n@@ -3273,1 +3272,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float64VectorTests.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3243,1 +3243,1 @@\n-    static void compressMaskedFloatMaxVectorTests(IntFunction<float[]> fa,\n+    static void compressFloatMaxVectorTests(IntFunction<float[]> fa,\n@@ -3260,1 +3260,0 @@\n-\n@@ -3262,1 +3261,1 @@\n-    static void expandMaskedFloatMaxVectorTests(IntFunction<float[]> fa,\n+    static void expandFloatMaxVectorTests(IntFunction<float[]> fa,\n@@ -3278,1 +3277,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/FloatMaxVectorTests.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -4243,1 +4243,1 @@\n-    static void compressMaskedInt128VectorTests(IntFunction<int[]> fa,\n+    static void compressInt128VectorTests(IntFunction<int[]> fa,\n@@ -4260,1 +4260,0 @@\n-\n@@ -4262,1 +4261,1 @@\n-    static void expandMaskedInt128VectorTests(IntFunction<int[]> fa,\n+    static void expandInt128VectorTests(IntFunction<int[]> fa,\n@@ -4278,1 +4277,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int128VectorTests.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -4243,1 +4243,1 @@\n-    static void compressMaskedInt256VectorTests(IntFunction<int[]> fa,\n+    static void compressInt256VectorTests(IntFunction<int[]> fa,\n@@ -4260,1 +4260,0 @@\n-\n@@ -4262,1 +4261,1 @@\n-    static void expandMaskedInt256VectorTests(IntFunction<int[]> fa,\n+    static void expandInt256VectorTests(IntFunction<int[]> fa,\n@@ -4278,1 +4277,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int256VectorTests.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -4243,1 +4243,1 @@\n-    static void compressMaskedInt512VectorTests(IntFunction<int[]> fa,\n+    static void compressInt512VectorTests(IntFunction<int[]> fa,\n@@ -4260,1 +4260,0 @@\n-\n@@ -4262,1 +4261,1 @@\n-    static void expandMaskedInt512VectorTests(IntFunction<int[]> fa,\n+    static void expandInt512VectorTests(IntFunction<int[]> fa,\n@@ -4278,1 +4277,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int512VectorTests.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -4243,1 +4243,1 @@\n-    static void compressMaskedInt64VectorTests(IntFunction<int[]> fa,\n+    static void compressInt64VectorTests(IntFunction<int[]> fa,\n@@ -4260,1 +4260,0 @@\n-\n@@ -4262,1 +4261,1 @@\n-    static void expandMaskedInt64VectorTests(IntFunction<int[]> fa,\n+    static void expandInt64VectorTests(IntFunction<int[]> fa,\n@@ -4278,1 +4277,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int64VectorTests.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -4248,1 +4248,1 @@\n-    static void compressMaskedIntMaxVectorTests(IntFunction<int[]> fa,\n+    static void compressIntMaxVectorTests(IntFunction<int[]> fa,\n@@ -4265,1 +4265,0 @@\n-\n@@ -4267,1 +4266,1 @@\n-    static void expandMaskedIntMaxVectorTests(IntFunction<int[]> fa,\n+    static void expandIntMaxVectorTests(IntFunction<int[]> fa,\n@@ -4283,1 +4282,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/IntMaxVectorTests.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -4193,1 +4193,1 @@\n-    static void compressMaskedLong128VectorTests(IntFunction<long[]> fa,\n+    static void compressLong128VectorTests(IntFunction<long[]> fa,\n@@ -4210,1 +4210,0 @@\n-\n@@ -4212,1 +4211,1 @@\n-    static void expandMaskedLong128VectorTests(IntFunction<long[]> fa,\n+    static void expandLong128VectorTests(IntFunction<long[]> fa,\n@@ -4228,1 +4227,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long128VectorTests.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -4193,1 +4193,1 @@\n-    static void compressMaskedLong256VectorTests(IntFunction<long[]> fa,\n+    static void compressLong256VectorTests(IntFunction<long[]> fa,\n@@ -4210,1 +4210,0 @@\n-\n@@ -4212,1 +4211,1 @@\n-    static void expandMaskedLong256VectorTests(IntFunction<long[]> fa,\n+    static void expandLong256VectorTests(IntFunction<long[]> fa,\n@@ -4228,1 +4227,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long256VectorTests.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -4193,1 +4193,1 @@\n-    static void compressMaskedLong512VectorTests(IntFunction<long[]> fa,\n+    static void compressLong512VectorTests(IntFunction<long[]> fa,\n@@ -4210,1 +4210,0 @@\n-\n@@ -4212,1 +4211,1 @@\n-    static void expandMaskedLong512VectorTests(IntFunction<long[]> fa,\n+    static void expandLong512VectorTests(IntFunction<long[]> fa,\n@@ -4228,1 +4227,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long512VectorTests.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -4193,1 +4193,1 @@\n-    static void compressMaskedLong64VectorTests(IntFunction<long[]> fa,\n+    static void compressLong64VectorTests(IntFunction<long[]> fa,\n@@ -4210,1 +4210,0 @@\n-\n@@ -4212,1 +4211,1 @@\n-    static void expandMaskedLong64VectorTests(IntFunction<long[]> fa,\n+    static void expandLong64VectorTests(IntFunction<long[]> fa,\n@@ -4228,1 +4227,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long64VectorTests.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -4198,1 +4198,1 @@\n-    static void compressMaskedLongMaxVectorTests(IntFunction<long[]> fa,\n+    static void compressLongMaxVectorTests(IntFunction<long[]> fa,\n@@ -4215,1 +4215,0 @@\n-\n@@ -4217,1 +4216,1 @@\n-    static void expandMaskedLongMaxVectorTests(IntFunction<long[]> fa,\n+    static void expandLongMaxVectorTests(IntFunction<long[]> fa,\n@@ -4233,1 +4232,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/LongMaxVectorTests.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -4268,1 +4268,1 @@\n-    static void compressMaskedShort128VectorTests(IntFunction<short[]> fa,\n+    static void compressShort128VectorTests(IntFunction<short[]> fa,\n@@ -4285,1 +4285,0 @@\n-\n@@ -4287,1 +4286,1 @@\n-    static void expandMaskedShort128VectorTests(IntFunction<short[]> fa,\n+    static void expandShort128VectorTests(IntFunction<short[]> fa,\n@@ -4303,1 +4302,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short128VectorTests.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -4268,1 +4268,1 @@\n-    static void compressMaskedShort256VectorTests(IntFunction<short[]> fa,\n+    static void compressShort256VectorTests(IntFunction<short[]> fa,\n@@ -4285,1 +4285,0 @@\n-\n@@ -4287,1 +4286,1 @@\n-    static void expandMaskedShort256VectorTests(IntFunction<short[]> fa,\n+    static void expandShort256VectorTests(IntFunction<short[]> fa,\n@@ -4303,1 +4302,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short256VectorTests.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -4268,1 +4268,1 @@\n-    static void compressMaskedShort512VectorTests(IntFunction<short[]> fa,\n+    static void compressShort512VectorTests(IntFunction<short[]> fa,\n@@ -4285,1 +4285,0 @@\n-\n@@ -4287,1 +4286,1 @@\n-    static void expandMaskedShort512VectorTests(IntFunction<short[]> fa,\n+    static void expandShort512VectorTests(IntFunction<short[]> fa,\n@@ -4303,1 +4302,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short512VectorTests.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -4268,1 +4268,1 @@\n-    static void compressMaskedShort64VectorTests(IntFunction<short[]> fa,\n+    static void compressShort64VectorTests(IntFunction<short[]> fa,\n@@ -4285,1 +4285,0 @@\n-\n@@ -4287,1 +4286,1 @@\n-    static void expandMaskedShort64VectorTests(IntFunction<short[]> fa,\n+    static void expandShort64VectorTests(IntFunction<short[]> fa,\n@@ -4303,1 +4302,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short64VectorTests.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -4273,1 +4273,1 @@\n-    static void compressMaskedShortMaxVectorTests(IntFunction<short[]> fa,\n+    static void compressShortMaxVectorTests(IntFunction<short[]> fa,\n@@ -4290,1 +4290,0 @@\n-\n@@ -4292,1 +4291,1 @@\n-    static void expandMaskedShortMaxVectorTests(IntFunction<short[]> fa,\n+    static void expandShortMaxVectorTests(IntFunction<short[]> fa,\n@@ -4308,1 +4307,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ShortMaxVectorTests.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -508,2 +508,1 @@\n-gen_op_tmpl $compressexpand_template \"compress\" \"\"\n-gen_op_tmpl $compressexpand_template \"expand\" \"\"\n+gen_op_tmpl $compressexpand_template \"compress_expand\" \"\"\n","filename":"test\/jdk\/jdk\/incubator\/vector\/gen-template.sh","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-    static void [[TEST]]Masked$vectorteststype$(IntFunction<$type$[]> fa,\n+    static void compress$vectorteststype$(IntFunction<$type$[]> fa,\n@@ -13,1 +13,1 @@\n-                av.[[TEST]](vmask).intoArray(r, i);\n+                av.compress(vmask).intoArray(r, i);\n@@ -17,1 +17,1 @@\n-        assert[[TEST]]ArraysEquals(r, a, mask, SPECIES.length());\n+        assertcompressArraysEquals(r, a, mask, SPECIES.length());\n@@ -20,0 +20,17 @@\n+    @Test(dataProvider = \"$type$UnaryOpMaskProvider\")\n+    static void expand$vectorteststype$(IntFunction<$type$[]> fa,\n+                                                IntFunction<boolean[]> fm) {\n+        $type$[] a = fa.apply(SPECIES.length());\n+        $type$[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);\n+                av.expand(vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertexpandArraysEquals(r, a, mask, SPECIES.length());\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-CompressExpand.template","additions":20,"deletions":3,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -1320,0 +1320,51 @@\n+    @Benchmark\n+    public Object compress() {\n+        byte[] a = fa.apply(size);\n+        byte[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Byte> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                av.compress(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object expand() {\n+        byte[] a = fa.apply(size);\n+        byte[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Byte> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                av.expand(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object maskCompress() {\n+        boolean[] ms = fmt.apply(size);\n+        boolean[] rs = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < ms.length; i += SPECIES.length()) {\n+                VectorMask<Byte> m = VectorMask.fromArray(SPECIES, ms, i);\n+                m.compress().intoArray(rs, j);\n+                j += m.trueCount();\n+            }\n+        }\n+\n+        return rs;\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte128Vector.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -1320,0 +1320,51 @@\n+    @Benchmark\n+    public Object compress() {\n+        byte[] a = fa.apply(size);\n+        byte[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Byte> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                av.compress(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object expand() {\n+        byte[] a = fa.apply(size);\n+        byte[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Byte> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                av.expand(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object maskCompress() {\n+        boolean[] ms = fmt.apply(size);\n+        boolean[] rs = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < ms.length; i += SPECIES.length()) {\n+                VectorMask<Byte> m = VectorMask.fromArray(SPECIES, ms, i);\n+                m.compress().intoArray(rs, j);\n+                j += m.trueCount();\n+            }\n+        }\n+\n+        return rs;\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte256Vector.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -1320,0 +1320,51 @@\n+    @Benchmark\n+    public Object compress() {\n+        byte[] a = fa.apply(size);\n+        byte[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Byte> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                av.compress(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object expand() {\n+        byte[] a = fa.apply(size);\n+        byte[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Byte> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                av.expand(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object maskCompress() {\n+        boolean[] ms = fmt.apply(size);\n+        boolean[] rs = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < ms.length; i += SPECIES.length()) {\n+                VectorMask<Byte> m = VectorMask.fromArray(SPECIES, ms, i);\n+                m.compress().intoArray(rs, j);\n+                j += m.trueCount();\n+            }\n+        }\n+\n+        return rs;\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte512Vector.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -1320,0 +1320,51 @@\n+    @Benchmark\n+    public Object compress() {\n+        byte[] a = fa.apply(size);\n+        byte[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Byte> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                av.compress(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object expand() {\n+        byte[] a = fa.apply(size);\n+        byte[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Byte> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                av.expand(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object maskCompress() {\n+        boolean[] ms = fmt.apply(size);\n+        boolean[] rs = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < ms.length; i += SPECIES.length()) {\n+                VectorMask<Byte> m = VectorMask.fromArray(SPECIES, ms, i);\n+                m.compress().intoArray(rs, j);\n+                j += m.trueCount();\n+            }\n+        }\n+\n+        return rs;\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte64Vector.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -1320,0 +1320,51 @@\n+    @Benchmark\n+    public Object compress() {\n+        byte[] a = fa.apply(size);\n+        byte[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Byte> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                av.compress(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object expand() {\n+        byte[] a = fa.apply(size);\n+        byte[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Byte> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                av.expand(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object maskCompress() {\n+        boolean[] ms = fmt.apply(size);\n+        boolean[] rs = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < ms.length; i += SPECIES.length()) {\n+                VectorMask<Byte> m = VectorMask.fromArray(SPECIES, ms, i);\n+                m.compress().intoArray(rs, j);\n+                j += m.trueCount();\n+            }\n+        }\n+\n+        return rs;\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ByteMaxVector.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -1238,0 +1238,50 @@\n+\n+    @Benchmark\n+    public void compressScalar(Blackhole bh) {\n+        byte[] as = fa.apply(size);\n+        byte[] rs = new byte[size];\n+        boolean[] im = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < as.length; i++) {\n+                if (im[i]) {\n+                    rs[j++] = as[i];\n+                }\n+            }\n+        }\n+\n+        bh.consume(rs);\n+    }\n+\n+    @Benchmark\n+    public void expandScalar(Blackhole bh) {\n+        byte[] as = fa.apply(size);\n+        byte[] rs = new byte[size];\n+        boolean[] im = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < as.length; i++) {\n+                if (im[i]) {\n+                    rs[i++] = as[j++];\n+                }\n+            }\n+        }\n+\n+        bh.consume(rs);\n+    }\n+\n+    @Benchmark\n+    public void maskCompressScalar(Blackhole bh) {\n+        boolean[] im = fmt.apply(size);\n+        boolean[] rm = new boolean[size];\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < im.length; i++) {\n+                if (im[i]) {\n+                    rm[j++] = im[i];\n+                }\n+            }\n+        }\n+\n+        bh.consume(rm);\n+    }\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ByteScalar.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -317,0 +317,8 @@\n+\n+\n+\n+\n+\n+\n+\n+\n@@ -766,0 +774,51 @@\n+    @Benchmark\n+    public Object compress() {\n+        double[] a = fa.apply(size);\n+        double[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Double> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                av.compress(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object expand() {\n+        double[] a = fa.apply(size);\n+        double[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Double> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                av.expand(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object maskCompress() {\n+        boolean[] ms = fmt.apply(size);\n+        boolean[] rs = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < ms.length; i += SPECIES.length()) {\n+                VectorMask<Double> m = VectorMask.fromArray(SPECIES, ms, i);\n+                m.compress().intoArray(rs, j);\n+                j += m.trueCount();\n+            }\n+        }\n+\n+        return rs;\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double128Vector.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -317,0 +317,8 @@\n+\n+\n+\n+\n+\n+\n+\n+\n@@ -766,0 +774,51 @@\n+    @Benchmark\n+    public Object compress() {\n+        double[] a = fa.apply(size);\n+        double[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Double> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                av.compress(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object expand() {\n+        double[] a = fa.apply(size);\n+        double[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Double> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                av.expand(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object maskCompress() {\n+        boolean[] ms = fmt.apply(size);\n+        boolean[] rs = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < ms.length; i += SPECIES.length()) {\n+                VectorMask<Double> m = VectorMask.fromArray(SPECIES, ms, i);\n+                m.compress().intoArray(rs, j);\n+                j += m.trueCount();\n+            }\n+        }\n+\n+        return rs;\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double256Vector.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -317,0 +317,8 @@\n+\n+\n+\n+\n+\n+\n+\n+\n@@ -766,0 +774,51 @@\n+    @Benchmark\n+    public Object compress() {\n+        double[] a = fa.apply(size);\n+        double[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Double> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                av.compress(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object expand() {\n+        double[] a = fa.apply(size);\n+        double[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Double> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                av.expand(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object maskCompress() {\n+        boolean[] ms = fmt.apply(size);\n+        boolean[] rs = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < ms.length; i += SPECIES.length()) {\n+                VectorMask<Double> m = VectorMask.fromArray(SPECIES, ms, i);\n+                m.compress().intoArray(rs, j);\n+                j += m.trueCount();\n+            }\n+        }\n+\n+        return rs;\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double512Vector.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -317,0 +317,8 @@\n+\n+\n+\n+\n+\n+\n+\n+\n@@ -766,0 +774,51 @@\n+    @Benchmark\n+    public Object compress() {\n+        double[] a = fa.apply(size);\n+        double[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Double> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                av.compress(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object expand() {\n+        double[] a = fa.apply(size);\n+        double[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Double> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                av.expand(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object maskCompress() {\n+        boolean[] ms = fmt.apply(size);\n+        boolean[] rs = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < ms.length; i += SPECIES.length()) {\n+                VectorMask<Double> m = VectorMask.fromArray(SPECIES, ms, i);\n+                m.compress().intoArray(rs, j);\n+                j += m.trueCount();\n+            }\n+        }\n+\n+        return rs;\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double64Vector.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -317,0 +317,8 @@\n+\n+\n+\n+\n+\n+\n+\n+\n@@ -766,0 +774,51 @@\n+    @Benchmark\n+    public Object compress() {\n+        double[] a = fa.apply(size);\n+        double[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Double> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                av.compress(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object expand() {\n+        double[] a = fa.apply(size);\n+        double[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Double> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                av.expand(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object maskCompress() {\n+        boolean[] ms = fmt.apply(size);\n+        boolean[] rs = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < ms.length; i += SPECIES.length()) {\n+                VectorMask<Double> m = VectorMask.fromArray(SPECIES, ms, i);\n+                m.compress().intoArray(rs, j);\n+                j += m.trueCount();\n+            }\n+        }\n+\n+        return rs;\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/DoubleMaxVector.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -338,0 +338,8 @@\n+\n+\n+\n+\n+\n+\n+\n+\n@@ -735,0 +743,50 @@\n+\n+    @Benchmark\n+    public void compressScalar(Blackhole bh) {\n+        double[] as = fa.apply(size);\n+        double[] rs = new double[size];\n+        boolean[] im = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < as.length; i++) {\n+                if (im[i]) {\n+                    rs[j++] = as[i];\n+                }\n+            }\n+        }\n+\n+        bh.consume(rs);\n+    }\n+\n+    @Benchmark\n+    public void expandScalar(Blackhole bh) {\n+        double[] as = fa.apply(size);\n+        double[] rs = new double[size];\n+        boolean[] im = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < as.length; i++) {\n+                if (im[i]) {\n+                    rs[i++] = as[j++];\n+                }\n+            }\n+        }\n+\n+        bh.consume(rs);\n+    }\n+\n+    @Benchmark\n+    public void maskCompressScalar(Blackhole bh) {\n+        boolean[] im = fmt.apply(size);\n+        boolean[] rm = new boolean[size];\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < im.length; i++) {\n+                if (im[i]) {\n+                    rm[j++] = im[i];\n+                }\n+            }\n+        }\n+\n+        bh.consume(rm);\n+    }\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/DoubleScalar.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -317,0 +317,8 @@\n+\n+\n+\n+\n+\n+\n+\n+\n@@ -766,0 +774,51 @@\n+    @Benchmark\n+    public Object compress() {\n+        float[] a = fa.apply(size);\n+        float[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Float> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                av.compress(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object expand() {\n+        float[] a = fa.apply(size);\n+        float[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Float> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                av.expand(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object maskCompress() {\n+        boolean[] ms = fmt.apply(size);\n+        boolean[] rs = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < ms.length; i += SPECIES.length()) {\n+                VectorMask<Float> m = VectorMask.fromArray(SPECIES, ms, i);\n+                m.compress().intoArray(rs, j);\n+                j += m.trueCount();\n+            }\n+        }\n+\n+        return rs;\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float128Vector.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -317,0 +317,8 @@\n+\n+\n+\n+\n+\n+\n+\n+\n@@ -766,0 +774,51 @@\n+    @Benchmark\n+    public Object compress() {\n+        float[] a = fa.apply(size);\n+        float[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Float> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                av.compress(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object expand() {\n+        float[] a = fa.apply(size);\n+        float[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Float> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                av.expand(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object maskCompress() {\n+        boolean[] ms = fmt.apply(size);\n+        boolean[] rs = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < ms.length; i += SPECIES.length()) {\n+                VectorMask<Float> m = VectorMask.fromArray(SPECIES, ms, i);\n+                m.compress().intoArray(rs, j);\n+                j += m.trueCount();\n+            }\n+        }\n+\n+        return rs;\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float256Vector.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -317,0 +317,8 @@\n+\n+\n+\n+\n+\n+\n+\n+\n@@ -766,0 +774,51 @@\n+    @Benchmark\n+    public Object compress() {\n+        float[] a = fa.apply(size);\n+        float[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Float> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                av.compress(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object expand() {\n+        float[] a = fa.apply(size);\n+        float[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Float> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                av.expand(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object maskCompress() {\n+        boolean[] ms = fmt.apply(size);\n+        boolean[] rs = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < ms.length; i += SPECIES.length()) {\n+                VectorMask<Float> m = VectorMask.fromArray(SPECIES, ms, i);\n+                m.compress().intoArray(rs, j);\n+                j += m.trueCount();\n+            }\n+        }\n+\n+        return rs;\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float512Vector.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -317,0 +317,8 @@\n+\n+\n+\n+\n+\n+\n+\n+\n@@ -766,0 +774,51 @@\n+    @Benchmark\n+    public Object compress() {\n+        float[] a = fa.apply(size);\n+        float[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Float> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                av.compress(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object expand() {\n+        float[] a = fa.apply(size);\n+        float[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Float> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                av.expand(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object maskCompress() {\n+        boolean[] ms = fmt.apply(size);\n+        boolean[] rs = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < ms.length; i += SPECIES.length()) {\n+                VectorMask<Float> m = VectorMask.fromArray(SPECIES, ms, i);\n+                m.compress().intoArray(rs, j);\n+                j += m.trueCount();\n+            }\n+        }\n+\n+        return rs;\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float64Vector.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -317,0 +317,8 @@\n+\n+\n+\n+\n+\n+\n+\n+\n@@ -766,0 +774,51 @@\n+    @Benchmark\n+    public Object compress() {\n+        float[] a = fa.apply(size);\n+        float[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Float> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                av.compress(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object expand() {\n+        float[] a = fa.apply(size);\n+        float[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Float> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                av.expand(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object maskCompress() {\n+        boolean[] ms = fmt.apply(size);\n+        boolean[] rs = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < ms.length; i += SPECIES.length()) {\n+                VectorMask<Float> m = VectorMask.fromArray(SPECIES, ms, i);\n+                m.compress().intoArray(rs, j);\n+                j += m.trueCount();\n+            }\n+        }\n+\n+        return rs;\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/FloatMaxVector.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -338,0 +338,8 @@\n+\n+\n+\n+\n+\n+\n+\n+\n@@ -735,0 +743,50 @@\n+\n+    @Benchmark\n+    public void compressScalar(Blackhole bh) {\n+        float[] as = fa.apply(size);\n+        float[] rs = new float[size];\n+        boolean[] im = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < as.length; i++) {\n+                if (im[i]) {\n+                    rs[j++] = as[i];\n+                }\n+            }\n+        }\n+\n+        bh.consume(rs);\n+    }\n+\n+    @Benchmark\n+    public void expandScalar(Blackhole bh) {\n+        float[] as = fa.apply(size);\n+        float[] rs = new float[size];\n+        boolean[] im = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < as.length; i++) {\n+                if (im[i]) {\n+                    rs[i++] = as[j++];\n+                }\n+            }\n+        }\n+\n+        bh.consume(rs);\n+    }\n+\n+    @Benchmark\n+    public void maskCompressScalar(Blackhole bh) {\n+        boolean[] im = fmt.apply(size);\n+        boolean[] rm = new boolean[size];\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < im.length; i++) {\n+                if (im[i]) {\n+                    rm[j++] = im[i];\n+                }\n+            }\n+        }\n+\n+        bh.consume(rm);\n+    }\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/FloatScalar.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -1320,0 +1320,51 @@\n+    @Benchmark\n+    public Object compress() {\n+        int[] a = fa.apply(size);\n+        int[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Integer> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                av.compress(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object expand() {\n+        int[] a = fa.apply(size);\n+        int[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Integer> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                av.expand(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object maskCompress() {\n+        boolean[] ms = fmt.apply(size);\n+        boolean[] rs = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < ms.length; i += SPECIES.length()) {\n+                VectorMask<Integer> m = VectorMask.fromArray(SPECIES, ms, i);\n+                m.compress().intoArray(rs, j);\n+                j += m.trueCount();\n+            }\n+        }\n+\n+        return rs;\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int128Vector.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -1320,0 +1320,51 @@\n+    @Benchmark\n+    public Object compress() {\n+        int[] a = fa.apply(size);\n+        int[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Integer> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                av.compress(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object expand() {\n+        int[] a = fa.apply(size);\n+        int[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Integer> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                av.expand(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object maskCompress() {\n+        boolean[] ms = fmt.apply(size);\n+        boolean[] rs = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < ms.length; i += SPECIES.length()) {\n+                VectorMask<Integer> m = VectorMask.fromArray(SPECIES, ms, i);\n+                m.compress().intoArray(rs, j);\n+                j += m.trueCount();\n+            }\n+        }\n+\n+        return rs;\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int256Vector.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -1320,0 +1320,51 @@\n+    @Benchmark\n+    public Object compress() {\n+        int[] a = fa.apply(size);\n+        int[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Integer> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                av.compress(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object expand() {\n+        int[] a = fa.apply(size);\n+        int[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Integer> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                av.expand(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object maskCompress() {\n+        boolean[] ms = fmt.apply(size);\n+        boolean[] rs = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < ms.length; i += SPECIES.length()) {\n+                VectorMask<Integer> m = VectorMask.fromArray(SPECIES, ms, i);\n+                m.compress().intoArray(rs, j);\n+                j += m.trueCount();\n+            }\n+        }\n+\n+        return rs;\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int512Vector.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -1320,0 +1320,51 @@\n+    @Benchmark\n+    public Object compress() {\n+        int[] a = fa.apply(size);\n+        int[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Integer> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                av.compress(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object expand() {\n+        int[] a = fa.apply(size);\n+        int[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Integer> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                av.expand(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object maskCompress() {\n+        boolean[] ms = fmt.apply(size);\n+        boolean[] rs = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < ms.length; i += SPECIES.length()) {\n+                VectorMask<Integer> m = VectorMask.fromArray(SPECIES, ms, i);\n+                m.compress().intoArray(rs, j);\n+                j += m.trueCount();\n+            }\n+        }\n+\n+        return rs;\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int64Vector.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -1320,0 +1320,51 @@\n+    @Benchmark\n+    public Object compress() {\n+        int[] a = fa.apply(size);\n+        int[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Integer> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                av.compress(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object expand() {\n+        int[] a = fa.apply(size);\n+        int[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Integer> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                av.expand(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object maskCompress() {\n+        boolean[] ms = fmt.apply(size);\n+        boolean[] rs = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < ms.length; i += SPECIES.length()) {\n+                VectorMask<Integer> m = VectorMask.fromArray(SPECIES, ms, i);\n+                m.compress().intoArray(rs, j);\n+                j += m.trueCount();\n+            }\n+        }\n+\n+        return rs;\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/IntMaxVector.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -1238,0 +1238,50 @@\n+\n+    @Benchmark\n+    public void compressScalar(Blackhole bh) {\n+        int[] as = fa.apply(size);\n+        int[] rs = new int[size];\n+        boolean[] im = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < as.length; i++) {\n+                if (im[i]) {\n+                    rs[j++] = as[i];\n+                }\n+            }\n+        }\n+\n+        bh.consume(rs);\n+    }\n+\n+    @Benchmark\n+    public void expandScalar(Blackhole bh) {\n+        int[] as = fa.apply(size);\n+        int[] rs = new int[size];\n+        boolean[] im = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < as.length; i++) {\n+                if (im[i]) {\n+                    rs[i++] = as[j++];\n+                }\n+            }\n+        }\n+\n+        bh.consume(rs);\n+    }\n+\n+    @Benchmark\n+    public void maskCompressScalar(Blackhole bh) {\n+        boolean[] im = fmt.apply(size);\n+        boolean[] rm = new boolean[size];\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < im.length; i++) {\n+                if (im[i]) {\n+                    rm[j++] = im[i];\n+                }\n+            }\n+        }\n+\n+        bh.consume(rm);\n+    }\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/IntScalar.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -1320,0 +1320,51 @@\n+    @Benchmark\n+    public Object compress() {\n+        long[] a = fa.apply(size);\n+        long[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Long> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                av.compress(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object expand() {\n+        long[] a = fa.apply(size);\n+        long[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Long> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                av.expand(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object maskCompress() {\n+        boolean[] ms = fmt.apply(size);\n+        boolean[] rs = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < ms.length; i += SPECIES.length()) {\n+                VectorMask<Long> m = VectorMask.fromArray(SPECIES, ms, i);\n+                m.compress().intoArray(rs, j);\n+                j += m.trueCount();\n+            }\n+        }\n+\n+        return rs;\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long128Vector.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -1320,0 +1320,51 @@\n+    @Benchmark\n+    public Object compress() {\n+        long[] a = fa.apply(size);\n+        long[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Long> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                av.compress(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object expand() {\n+        long[] a = fa.apply(size);\n+        long[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Long> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                av.expand(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object maskCompress() {\n+        boolean[] ms = fmt.apply(size);\n+        boolean[] rs = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < ms.length; i += SPECIES.length()) {\n+                VectorMask<Long> m = VectorMask.fromArray(SPECIES, ms, i);\n+                m.compress().intoArray(rs, j);\n+                j += m.trueCount();\n+            }\n+        }\n+\n+        return rs;\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long256Vector.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -1320,0 +1320,51 @@\n+    @Benchmark\n+    public Object compress() {\n+        long[] a = fa.apply(size);\n+        long[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Long> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                av.compress(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object expand() {\n+        long[] a = fa.apply(size);\n+        long[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Long> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                av.expand(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object maskCompress() {\n+        boolean[] ms = fmt.apply(size);\n+        boolean[] rs = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < ms.length; i += SPECIES.length()) {\n+                VectorMask<Long> m = VectorMask.fromArray(SPECIES, ms, i);\n+                m.compress().intoArray(rs, j);\n+                j += m.trueCount();\n+            }\n+        }\n+\n+        return rs;\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long512Vector.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -1320,0 +1320,51 @@\n+    @Benchmark\n+    public Object compress() {\n+        long[] a = fa.apply(size);\n+        long[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Long> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                av.compress(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object expand() {\n+        long[] a = fa.apply(size);\n+        long[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Long> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                av.expand(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object maskCompress() {\n+        boolean[] ms = fmt.apply(size);\n+        boolean[] rs = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < ms.length; i += SPECIES.length()) {\n+                VectorMask<Long> m = VectorMask.fromArray(SPECIES, ms, i);\n+                m.compress().intoArray(rs, j);\n+                j += m.trueCount();\n+            }\n+        }\n+\n+        return rs;\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long64Vector.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -1320,0 +1320,51 @@\n+    @Benchmark\n+    public Object compress() {\n+        long[] a = fa.apply(size);\n+        long[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Long> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                av.compress(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object expand() {\n+        long[] a = fa.apply(size);\n+        long[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Long> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                av.expand(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object maskCompress() {\n+        boolean[] ms = fmt.apply(size);\n+        boolean[] rs = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < ms.length; i += SPECIES.length()) {\n+                VectorMask<Long> m = VectorMask.fromArray(SPECIES, ms, i);\n+                m.compress().intoArray(rs, j);\n+                j += m.trueCount();\n+            }\n+        }\n+\n+        return rs;\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/LongMaxVector.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -1238,0 +1238,50 @@\n+\n+    @Benchmark\n+    public void compressScalar(Blackhole bh) {\n+        long[] as = fa.apply(size);\n+        long[] rs = new long[size];\n+        boolean[] im = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < as.length; i++) {\n+                if (im[i]) {\n+                    rs[j++] = as[i];\n+                }\n+            }\n+        }\n+\n+        bh.consume(rs);\n+    }\n+\n+    @Benchmark\n+    public void expandScalar(Blackhole bh) {\n+        long[] as = fa.apply(size);\n+        long[] rs = new long[size];\n+        boolean[] im = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < as.length; i++) {\n+                if (im[i]) {\n+                    rs[i++] = as[j++];\n+                }\n+            }\n+        }\n+\n+        bh.consume(rs);\n+    }\n+\n+    @Benchmark\n+    public void maskCompressScalar(Blackhole bh) {\n+        boolean[] im = fmt.apply(size);\n+        boolean[] rm = new boolean[size];\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < im.length; i++) {\n+                if (im[i]) {\n+                    rm[j++] = im[i];\n+                }\n+            }\n+        }\n+\n+        bh.consume(rm);\n+    }\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/LongScalar.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -1320,0 +1320,51 @@\n+    @Benchmark\n+    public Object compress() {\n+        short[] a = fa.apply(size);\n+        short[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Short> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                av.compress(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object expand() {\n+        short[] a = fa.apply(size);\n+        short[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Short> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                av.expand(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object maskCompress() {\n+        boolean[] ms = fmt.apply(size);\n+        boolean[] rs = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < ms.length; i += SPECIES.length()) {\n+                VectorMask<Short> m = VectorMask.fromArray(SPECIES, ms, i);\n+                m.compress().intoArray(rs, j);\n+                j += m.trueCount();\n+            }\n+        }\n+\n+        return rs;\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short128Vector.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -1320,0 +1320,51 @@\n+    @Benchmark\n+    public Object compress() {\n+        short[] a = fa.apply(size);\n+        short[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Short> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                av.compress(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object expand() {\n+        short[] a = fa.apply(size);\n+        short[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Short> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                av.expand(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object maskCompress() {\n+        boolean[] ms = fmt.apply(size);\n+        boolean[] rs = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < ms.length; i += SPECIES.length()) {\n+                VectorMask<Short> m = VectorMask.fromArray(SPECIES, ms, i);\n+                m.compress().intoArray(rs, j);\n+                j += m.trueCount();\n+            }\n+        }\n+\n+        return rs;\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short256Vector.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -1320,0 +1320,51 @@\n+    @Benchmark\n+    public Object compress() {\n+        short[] a = fa.apply(size);\n+        short[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Short> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                av.compress(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object expand() {\n+        short[] a = fa.apply(size);\n+        short[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Short> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                av.expand(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object maskCompress() {\n+        boolean[] ms = fmt.apply(size);\n+        boolean[] rs = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < ms.length; i += SPECIES.length()) {\n+                VectorMask<Short> m = VectorMask.fromArray(SPECIES, ms, i);\n+                m.compress().intoArray(rs, j);\n+                j += m.trueCount();\n+            }\n+        }\n+\n+        return rs;\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short512Vector.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -1320,0 +1320,51 @@\n+    @Benchmark\n+    public Object compress() {\n+        short[] a = fa.apply(size);\n+        short[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Short> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                av.compress(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object expand() {\n+        short[] a = fa.apply(size);\n+        short[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Short> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                av.expand(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object maskCompress() {\n+        boolean[] ms = fmt.apply(size);\n+        boolean[] rs = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < ms.length; i += SPECIES.length()) {\n+                VectorMask<Short> m = VectorMask.fromArray(SPECIES, ms, i);\n+                m.compress().intoArray(rs, j);\n+                j += m.trueCount();\n+            }\n+        }\n+\n+        return rs;\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short64Vector.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -1320,0 +1320,51 @@\n+    @Benchmark\n+    public Object compress() {\n+        short[] a = fa.apply(size);\n+        short[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Short> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                av.compress(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object expand() {\n+        short[] a = fa.apply(size);\n+        short[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Short> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                av.expand(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object maskCompress() {\n+        boolean[] ms = fmt.apply(size);\n+        boolean[] rs = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < ms.length; i += SPECIES.length()) {\n+                VectorMask<Short> m = VectorMask.fromArray(SPECIES, ms, i);\n+                m.compress().intoArray(rs, j);\n+                j += m.trueCount();\n+            }\n+        }\n+\n+        return rs;\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ShortMaxVector.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -1238,0 +1238,50 @@\n+\n+    @Benchmark\n+    public void compressScalar(Blackhole bh) {\n+        short[] as = fa.apply(size);\n+        short[] rs = new short[size];\n+        boolean[] im = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < as.length; i++) {\n+                if (im[i]) {\n+                    rs[j++] = as[i];\n+                }\n+            }\n+        }\n+\n+        bh.consume(rs);\n+    }\n+\n+    @Benchmark\n+    public void expandScalar(Blackhole bh) {\n+        short[] as = fa.apply(size);\n+        short[] rs = new short[size];\n+        boolean[] im = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < as.length; i++) {\n+                if (im[i]) {\n+                    rs[i++] = as[j++];\n+                }\n+            }\n+        }\n+\n+        bh.consume(rs);\n+    }\n+\n+    @Benchmark\n+    public void maskCompressScalar(Blackhole bh) {\n+        boolean[] im = fmt.apply(size);\n+        boolean[] rm = new boolean[size];\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < im.length; i++) {\n+                if (im[i]) {\n+                    rm[j++] = im[i];\n+                }\n+            }\n+        }\n+\n+        bh.consume(rm);\n+    }\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ShortScalar.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"modified"}]}