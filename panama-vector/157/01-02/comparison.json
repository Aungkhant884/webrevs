{"files":[{"patch":"@@ -0,0 +1,51 @@\n+\n+    @Benchmark\n+    public Object compress[[TEST_TYPE]][[OP_NAME]]() {\n+        $type$[] a = fa.apply(size);\n+        $type$[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<$Wideboxtype$> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);\n+                av.compress(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object expand[[TEST_TYPE]][[OP_NAME]]() {\n+        $type$[] a = fa.apply(size);\n+        $type$[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<$Wideboxtype$> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);\n+                av.expand(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object maskCompress[[TEST_TYPE]][[OP_NAME]]() {\n+        boolean[] ms = fmt.apply(size);\n+        boolean[] rs = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < a.length; i += SPECIES.length()) {\n+                VectorMask<$Wideboxtype$> m = VectorMask.fromArray(SPECIES, ms, i);\n+                m.compress().intoArray(rs, j);\n+                j += m.trueCount();\n+            }\n+        }\n+\n+        return rs;\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-CompressExpand.template","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"},{"patch":"@@ -0,0 +1,50 @@\n+\n+    @Benchmark\n+    public void compressScalar[[TEST_TYPE]][[OP_NAME]](Blackhole bh) {\n+        $type$[] as = fa.apply(size);\n+        $type$[] rs = new $type$[size];\n+        boolean[] im = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < as.length; i++) {\n+                if (im[i]) {\n+                    rs[j++] = as[i];\n+                }\n+            }\n+        }\n+\n+        bh.consume(rs);\n+    }\n+\n+    @Benchmark\n+    public void expandScalar[[TEST_TYPE]][[OP_NAME]](Blackhole bh) {\n+        $type$[] as = fa.apply(size);\n+        $type$[] rs = new $type$[size];\n+        boolean[] im = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < as.length; i++) {\n+                if (im[i]) {\n+                    rs[i++] = as[j++];\n+                }\n+            }\n+        }\n+\n+        bh.consume(rs);\n+    }\n+\n+    @Benchmark\n+    public void maskCompressScalar[[TEST_TYPE]][[OP_NAME]](Blackhole bh) {\n+        boolean[] im = fmt.apply(size);\n+        boolean[] rm = new boolean[size];\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < im.length; i++) {\n+                if (im[i]) {\n+                    rm[j++] = im[i];\n+                }\n+            }\n+        }\n+\n+        bh.consume(rm);\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-CompressExpand.template","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"}]}