{"files":[{"patch":"@@ -409,3 +409,2 @@\n-  if (opr == NULL || vector_klass == NULL || mask_klass == NULL || elem_klass == NULL || vlen == NULL ||\n-      !opr->is_con() || vector_klass->const_oop() == NULL || mask_klass->const_oop() == NULL ||\n-      elem_klass->const_oop() == NULL || !vlen->is_con()) {\n+  if (opr == NULL || vector_klass == NULL || elem_klass == NULL || vlen == NULL ||\n+      !opr->is_con() || vector_klass->const_oop() == NULL || elem_klass->const_oop() == NULL || !vlen->is_con()) {\n@@ -413,1 +412,1 @@\n-      tty->print_cr(\"  ** missing constant: opr=%s vclass=%s maskclass=%s etype=%s vlen=%s\",\n+      tty->print_cr(\"  ** missing constant: opr=%s vclass=%s etype=%s vlen=%s\",\n@@ -416,1 +415,0 @@\n-                    NodeClassNames[argument(2)->Opcode()],\n@@ -422,0 +420,1 @@\n+\n@@ -436,0 +435,27 @@\n+  \/\/ \"argument(n + 5)\" should be the mask object. We assume it is \"null\" when no mask\n+  \/\/ is used to control this operation.\n+  const Type* vmask_type = gvn().type(argument(n + 5));\n+  bool is_masked_op = vmask_type != TypePtr::NULL_PTR;\n+  if (is_masked_op) {\n+    if (mask_klass == NULL || mask_klass->const_oop() == NULL) {\n+      if (C->print_intrinsics()) {\n+        tty->print_cr(\"  ** missing constant: maskclass=%s\", NodeClassNames[argument(2)->Opcode()]);\n+      }\n+      return false; \/\/ not enough info for intrinsification\n+    }\n+\n+    if (!is_klass_initialized(mask_klass)) {\n+      if (C->print_intrinsics()) {\n+        tty->print_cr(\"  ** mask klass argument not initialized\");\n+      }\n+      return false;\n+    }\n+\n+    if (vmask_type->maybe_null()) {\n+      if (C->print_intrinsics()) {\n+        tty->print_cr(\"  ** null mask values are not allowed for masked op\");\n+      }\n+      return false;\n+    }\n+  }\n+\n@@ -449,3 +475,0 @@\n-  \/\/ \"argument(n + 5)\" should be the mask object. We assume it is \"null\" when no mask\n-  \/\/ is used to control this operation.\n-  bool is_masked_op = gvn().type(argument(n + 5)) != TypePtr::NULL_PTR;\n@@ -456,7 +479,0 @@\n-  if (is_masked_op && !is_klass_initialized(mask_klass)) {\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** mask klass argument not initialized\");\n-    }\n-    return false;\n-  }\n-\n@@ -551,1 +567,2 @@\n-    use_predicate = sopc != 0 && Matcher::match_rule_supported_vector_masked(sopc, num_elem, elem_bt);\n+    use_predicate = sopc != 0 && Matcher::has_predicated_vectors() &&\n+                    Matcher::match_rule_supported_vector_masked(sopc, num_elem, elem_bt);\n@@ -585,1 +602,4 @@\n-      \/\/ TODO: add predicate implementation for masked operation.\n+      if (C->print_intrinsics()) {\n+        tty->print_cr(\"  ** predicate feature is not supported yet!\");\n+      }\n+      return false;\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":37,"deletions":17,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -279,1 +279,1 @@\n-        return (Byte128Vector) super.lanewiseTemplate(op, Byte128Mask.class, v);  \/\/ specialize\n+        return (Byte128Vector) super.lanewiseTemplate(op, v);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte128Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -279,1 +279,1 @@\n-        return (Byte256Vector) super.lanewiseTemplate(op, Byte256Mask.class, v);  \/\/ specialize\n+        return (Byte256Vector) super.lanewiseTemplate(op, v);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte256Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -279,1 +279,1 @@\n-        return (Byte512Vector) super.lanewiseTemplate(op, Byte512Mask.class, v);  \/\/ specialize\n+        return (Byte512Vector) super.lanewiseTemplate(op, v);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte512Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -279,1 +279,1 @@\n-        return (Byte64Vector) super.lanewiseTemplate(op, Byte64Mask.class, v);  \/\/ specialize\n+        return (Byte64Vector) super.lanewiseTemplate(op, v);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte64Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -279,1 +279,1 @@\n-        return (ByteMaxVector) super.lanewiseTemplate(op, ByteMaxMask.class, v);  \/\/ specialize\n+        return (ByteMaxVector) super.lanewiseTemplate(op, v);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteMaxVector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -602,1 +602,0 @@\n-                                          Class<? extends VectorMask<Byte>> maskClass,\n@@ -639,1 +638,1 @@\n-            opc, getClass(), maskClass, byte.class, length(),\n+            opc, getClass(), null, byte.class, length(),\n@@ -821,2 +820,1 @@\n-            && !(opKind(op, VO_SHIFT) && (int)e1 == e)\n-            ) {\n+            && !(opKind(op, VO_SHIFT) && (int)e1 == e)) {\n@@ -845,2 +843,1 @@\n-            && !(opKind(op, VO_SHIFT) && (int)e1 == e)\n-            ) {\n+            && !(opKind(op, VO_SHIFT) && (int)e1 == e)) {\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteVector.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -279,1 +279,1 @@\n-        return (Double128Vector) super.lanewiseTemplate(op, Double128Mask.class, v);  \/\/ specialize\n+        return (Double128Vector) super.lanewiseTemplate(op, v);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double128Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -279,1 +279,1 @@\n-        return (Double256Vector) super.lanewiseTemplate(op, Double256Mask.class, v);  \/\/ specialize\n+        return (Double256Vector) super.lanewiseTemplate(op, v);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double256Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -279,1 +279,1 @@\n-        return (Double512Vector) super.lanewiseTemplate(op, Double512Mask.class, v);  \/\/ specialize\n+        return (Double512Vector) super.lanewiseTemplate(op, v);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double512Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -279,1 +279,1 @@\n-        return (Double64Vector) super.lanewiseTemplate(op, Double64Mask.class, v);  \/\/ specialize\n+        return (Double64Vector) super.lanewiseTemplate(op, v);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double64Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -279,1 +279,1 @@\n-        return (DoubleMaxVector) super.lanewiseTemplate(op, DoubleMaxMask.class, v);  \/\/ specialize\n+        return (DoubleMaxVector) super.lanewiseTemplate(op, v);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleMaxVector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -628,1 +628,0 @@\n-                                          Class<? extends VectorMask<Double>> maskClass,\n@@ -649,1 +648,1 @@\n-            opc, getClass(), maskClass, double.class, length(),\n+            opc, getClass(), null, double.class, length(),\n@@ -789,2 +788,1 @@\n-        if ((long)e1 != e\n-            ) {\n+        if ((long)e1 != e) {\n@@ -811,2 +809,1 @@\n-        if ((long)e1 != e\n-            ) {\n+        if ((long)e1 != e) {\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleVector.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -279,1 +279,1 @@\n-        return (Float128Vector) super.lanewiseTemplate(op, Float128Mask.class, v);  \/\/ specialize\n+        return (Float128Vector) super.lanewiseTemplate(op, v);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float128Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -279,1 +279,1 @@\n-        return (Float256Vector) super.lanewiseTemplate(op, Float256Mask.class, v);  \/\/ specialize\n+        return (Float256Vector) super.lanewiseTemplate(op, v);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float256Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -279,1 +279,1 @@\n-        return (Float512Vector) super.lanewiseTemplate(op, Float512Mask.class, v);  \/\/ specialize\n+        return (Float512Vector) super.lanewiseTemplate(op, v);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float512Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -279,1 +279,1 @@\n-        return (Float64Vector) super.lanewiseTemplate(op, Float64Mask.class, v);  \/\/ specialize\n+        return (Float64Vector) super.lanewiseTemplate(op, v);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float64Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -279,1 +279,1 @@\n-        return (FloatMaxVector) super.lanewiseTemplate(op, FloatMaxMask.class, v);  \/\/ specialize\n+        return (FloatMaxVector) super.lanewiseTemplate(op, v);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatMaxVector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -628,1 +628,0 @@\n-                                          Class<? extends VectorMask<Float>> maskClass,\n@@ -649,1 +648,1 @@\n-            opc, getClass(), maskClass, float.class, length(),\n+            opc, getClass(), null, float.class, length(),\n@@ -789,2 +788,1 @@\n-        if ((long)e1 != e\n-            ) {\n+        if ((long)e1 != e) {\n@@ -811,2 +809,1 @@\n-        if ((long)e1 != e\n-            ) {\n+        if ((long)e1 != e) {\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatVector.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -279,1 +279,1 @@\n-        return (Int128Vector) super.lanewiseTemplate(op, Int128Mask.class, v);  \/\/ specialize\n+        return (Int128Vector) super.lanewiseTemplate(op, v);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int128Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -279,1 +279,1 @@\n-        return (Int256Vector) super.lanewiseTemplate(op, Int256Mask.class, v);  \/\/ specialize\n+        return (Int256Vector) super.lanewiseTemplate(op, v);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int256Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -279,1 +279,1 @@\n-        return (Int512Vector) super.lanewiseTemplate(op, Int512Mask.class, v);  \/\/ specialize\n+        return (Int512Vector) super.lanewiseTemplate(op, v);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int512Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -279,1 +279,1 @@\n-        return (Int64Vector) super.lanewiseTemplate(op, Int64Mask.class, v);  \/\/ specialize\n+        return (Int64Vector) super.lanewiseTemplate(op, v);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int64Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -279,1 +279,1 @@\n-        return (IntMaxVector) super.lanewiseTemplate(op, IntMaxMask.class, v);  \/\/ specialize\n+        return (IntMaxVector) super.lanewiseTemplate(op, v);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntMaxVector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -602,1 +602,0 @@\n-                                          Class<? extends VectorMask<Integer>> maskClass,\n@@ -639,1 +638,1 @@\n-            opc, getClass(), maskClass, int.class, length(),\n+            opc, getClass(), null, int.class, length(),\n@@ -821,2 +820,1 @@\n-            && !(opKind(op, VO_SHIFT) && (int)e1 == e)\n-            ) {\n+            && !(opKind(op, VO_SHIFT) && (int)e1 == e)) {\n@@ -845,2 +843,1 @@\n-            && !(opKind(op, VO_SHIFT) && (int)e1 == e)\n-            ) {\n+            && !(opKind(op, VO_SHIFT) && (int)e1 == e)) {\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntVector.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -274,1 +274,1 @@\n-        return (Long128Vector) super.lanewiseTemplate(op, Long128Mask.class, v);  \/\/ specialize\n+        return (Long128Vector) super.lanewiseTemplate(op, v);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long128Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -274,1 +274,1 @@\n-        return (Long256Vector) super.lanewiseTemplate(op, Long256Mask.class, v);  \/\/ specialize\n+        return (Long256Vector) super.lanewiseTemplate(op, v);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long256Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -274,1 +274,1 @@\n-        return (Long512Vector) super.lanewiseTemplate(op, Long512Mask.class, v);  \/\/ specialize\n+        return (Long512Vector) super.lanewiseTemplate(op, v);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long512Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -274,1 +274,1 @@\n-        return (Long64Vector) super.lanewiseTemplate(op, Long64Mask.class, v);  \/\/ specialize\n+        return (Long64Vector) super.lanewiseTemplate(op, v);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long64Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -274,1 +274,1 @@\n-        return (LongMaxVector) super.lanewiseTemplate(op, LongMaxMask.class, v);  \/\/ specialize\n+        return (LongMaxVector) super.lanewiseTemplate(op, v);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongMaxVector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -560,1 +560,0 @@\n-                                          Class<? extends VectorMask<Long>> maskClass,\n@@ -597,1 +596,1 @@\n-            opc, getClass(), maskClass, long.class, length(),\n+            opc, getClass(), null, long.class, length(),\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongVector.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -279,1 +279,1 @@\n-        return (Short128Vector) super.lanewiseTemplate(op, Short128Mask.class, v);  \/\/ specialize\n+        return (Short128Vector) super.lanewiseTemplate(op, v);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short128Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -279,1 +279,1 @@\n-        return (Short256Vector) super.lanewiseTemplate(op, Short256Mask.class, v);  \/\/ specialize\n+        return (Short256Vector) super.lanewiseTemplate(op, v);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short256Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -279,1 +279,1 @@\n-        return (Short512Vector) super.lanewiseTemplate(op, Short512Mask.class, v);  \/\/ specialize\n+        return (Short512Vector) super.lanewiseTemplate(op, v);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short512Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -279,1 +279,1 @@\n-        return (Short64Vector) super.lanewiseTemplate(op, Short64Mask.class, v);  \/\/ specialize\n+        return (Short64Vector) super.lanewiseTemplate(op, v);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short64Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -279,1 +279,1 @@\n-        return (ShortMaxVector) super.lanewiseTemplate(op, ShortMaxMask.class, v);  \/\/ specialize\n+        return (ShortMaxVector) super.lanewiseTemplate(op, v);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortMaxVector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -602,1 +602,0 @@\n-                                          Class<? extends VectorMask<Short>> maskClass,\n@@ -639,1 +638,1 @@\n-            opc, getClass(), maskClass, short.class, length(),\n+            opc, getClass(), null, short.class, length(),\n@@ -821,2 +820,1 @@\n-            && !(opKind(op, VO_SHIFT) && (int)e1 == e)\n-            ) {\n+            && !(opKind(op, VO_SHIFT) && (int)e1 == e)) {\n@@ -845,2 +843,1 @@\n-            && !(opKind(op, VO_SHIFT) && (int)e1 == e)\n-            ) {\n+            && !(opKind(op, VO_SHIFT) && (int)e1 == e)) {\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortVector.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -650,1 +650,0 @@\n-                                          Class<? extends VectorMask<$Boxtype$>> maskClass,\n@@ -697,1 +696,1 @@\n-            opc, getClass(), maskClass, $type$.class, length(),\n+            opc, getClass(), null, $type$.class, length(),\n@@ -902,1 +901,0 @@\n-        if ((long)e1 != e\n@@ -904,0 +902,1 @@\n+        if ((long)e1 != e\n@@ -905,1 +904,3 @@\n-            && !(opKind(op, VO_SHIFT) && (int)e1 == e)\n+            && !(opKind(op, VO_SHIFT) && (int)e1 == e)) {\n+#else[BITWISE]\n+        if ((long)e1 != e) {\n@@ -907,1 +908,0 @@\n-            ) {\n@@ -928,1 +928,0 @@\n-        if ((long)e1 != e\n@@ -930,0 +929,1 @@\n+        if ((long)e1 != e\n@@ -931,1 +931,3 @@\n-            && !(opKind(op, VO_SHIFT) && (int)e1 == e)\n+            && !(opKind(op, VO_SHIFT) && (int)e1 == e)) {\n+#else[BITWISE]\n+        if ((long)e1 != e) {\n@@ -933,1 +935,0 @@\n-            ) {\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -281,1 +281,1 @@\n-        return ($vectortype$) super.lanewiseTemplate(op, $masktype$.class, v);  \/\/ specialize\n+        return ($vectortype$) super.lanewiseTemplate(op, v);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-VectorBits.java.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}