{"files":[{"patch":"@@ -229,1 +229,0 @@\n-      case Op_VectorInsert:\n@@ -3179,0 +3178,130 @@\n+\n+\/\/ ------------------------------ Vector insert ---------------------------------\n+\n+instruct insertB(vReg dst, vReg src, iRegIorL2I val, immI idx, vReg tmp, vReg tmp2, pRegGov pTmp, rFlagsReg cr)\n+%{\n+  predicate(UseSVE > 0 &&\n+            n->bottom_type()->is_vect()->element_basic_type() == T_BYTE);\n+  match(Set dst (VectorInsert (Binary src val) idx));\n+  effect(TEMP tmp, TEMP tmp2, TEMP pTmp, KILL cr);\n+  ins_cost(5 * SVE_COST);\n+  format %{ \"sve_index $tmp, B, 0, 1\\n\\t\"\n+            \"sve_dup $tmp2, B, $idx\\n\\t\"\n+            \"sve_cmpeq $pTmp, $tmp, $tmp2\\n\\t\"\n+            \"sve_orr $dst, $src, $src\\n\\t\"\n+            \"sve_cpy $dst, $pTmp, $val\\n\\t# insert into vector(B)\" %}\n+  ins_encode %{\n+    Assembler::SIMD_RegVariant size =\n+              elemType_to_regVariant(vector_element_basic_type(this));\n+    __ sve_index(as_FloatRegister($tmp$$reg), __ B, 0, 1);\n+    __ sve_dup(as_FloatRegister($tmp2$$reg), __ B, (int)($idx$$constant));\n+    __ sve_cmpeq(as_PRegister($pTmp$$reg), size, ptrue,\n+                 as_FloatRegister($tmp$$reg), as_FloatRegister($tmp2$$reg));\n+    \/\/ If src and dst are the same reg, this move is not needed.\n+    if (as_FloatRegister($dst$$reg) != as_FloatRegister($src$$reg)) {\n+      __ sve_orr(as_FloatRegister($dst$$reg),\n+             as_FloatRegister($src$$reg),\n+             as_FloatRegister($src$$reg));\n+    }\n+    __ sve_cpy(as_FloatRegister($dst$$reg), __ B,\n+               as_PRegister($pTmp$$reg), as_Register($val$$reg));\n+\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct insertS(vReg dst, vReg src, iRegIorL2I val, immI idx, vReg tmp, vReg tmp2, pRegGov pTmp, rFlagsReg cr)\n+%{\n+  predicate(UseSVE > 0 &&\n+            n->bottom_type()->is_vect()->element_basic_type() == T_SHORT);\n+  match(Set dst (VectorInsert (Binary src val) idx));\n+  effect(TEMP tmp, TEMP tmp2, TEMP pTmp, KILL cr);\n+  ins_cost(5 * SVE_COST);\n+  format %{ \"sve_index $tmp, H, 0, 1\\n\\t\"\n+            \"sve_dup $tmp2, H, $idx\\n\\t\"\n+            \"sve_cmpeq $pTmp, $tmp, $tmp2\\n\\t\"\n+            \"sve_orr $dst, $src, $src\\n\\t\"\n+            \"sve_cpy $dst, $pTmp, $val\\n\\t# insert into vector(S)\" %}\n+  ins_encode %{\n+    Assembler::SIMD_RegVariant size =\n+              elemType_to_regVariant(vector_element_basic_type(this));\n+    __ sve_index(as_FloatRegister($tmp$$reg), __ H, 0, 1);\n+    __ sve_dup(as_FloatRegister($tmp2$$reg), __ H, (int)($idx$$constant));\n+    __ sve_cmpeq(as_PRegister($pTmp$$reg), size, ptrue,\n+                 as_FloatRegister($tmp$$reg), as_FloatRegister($tmp2$$reg));\n+    \/\/ If src and dst are the same reg, this move is not needed.\n+    if (as_FloatRegister($dst$$reg) != as_FloatRegister($src$$reg)) {\n+      __ sve_orr(as_FloatRegister($dst$$reg),\n+             as_FloatRegister($src$$reg),\n+             as_FloatRegister($src$$reg));\n+    }\n+    __ sve_cpy(as_FloatRegister($dst$$reg), __ H,\n+               as_PRegister($pTmp$$reg), as_Register($val$$reg));\n+\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct insertI(vReg dst, vReg src, iRegIorL2I val, immI idx, vReg tmp, vReg tmp2, pRegGov pTmp, rFlagsReg cr)\n+%{\n+  predicate(UseSVE > 0 &&\n+            n->bottom_type()->is_vect()->element_basic_type() == T_INT);\n+  match(Set dst (VectorInsert (Binary src val) idx));\n+  effect(TEMP tmp, TEMP tmp2, TEMP pTmp, KILL cr);\n+  ins_cost(5 * SVE_COST);\n+  format %{ \"sve_index $tmp, S, 0, 1\\n\\t\"\n+            \"sve_dup $tmp2, S, $idx\\n\\t\"\n+            \"sve_cmpeq $pTmp, $tmp, $tmp2\\n\\t\"\n+            \"sve_orr $dst, $src, $src\\n\\t\"\n+            \"sve_cpy $dst, $pTmp, $val\\n\\t# insert into vector(I)\" %}\n+  ins_encode %{\n+    Assembler::SIMD_RegVariant size =\n+              elemType_to_regVariant(vector_element_basic_type(this));\n+    __ sve_index(as_FloatRegister($tmp$$reg), __ S, 0, 1);\n+    __ sve_dup(as_FloatRegister($tmp2$$reg), __ S, (int)($idx$$constant));\n+    __ sve_cmpeq(as_PRegister($pTmp$$reg), size, ptrue,\n+                 as_FloatRegister($tmp$$reg), as_FloatRegister($tmp2$$reg));\n+    \/\/ If src and dst are the same reg, this move is not needed.\n+    if (as_FloatRegister($dst$$reg) != as_FloatRegister($src$$reg)) {\n+      __ sve_orr(as_FloatRegister($dst$$reg),\n+             as_FloatRegister($src$$reg),\n+             as_FloatRegister($src$$reg));\n+    }\n+    __ sve_cpy(as_FloatRegister($dst$$reg), __ S,\n+               as_PRegister($pTmp$$reg), as_Register($val$$reg));\n+\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct insertL(vReg dst, vReg src, iRegL val, immI idx, vReg tmp, vReg tmp2, pRegGov pTmp, rFlagsReg cr)\n+%{\n+  predicate(UseSVE > 0 &&\n+            n->bottom_type()->is_vect()->element_basic_type() == T_LONG);\n+  match(Set dst (VectorInsert (Binary src val) idx));\n+  effect(TEMP tmp, TEMP tmp2, TEMP pTmp, KILL cr);\n+  ins_cost(5 * SVE_COST);\n+  format %{ \"sve_index $tmp, D, 0, 1\\n\\t\"\n+            \"sve_dup $tmp2, D, $idx\\n\\t\"\n+            \"sve_cmpeq $pTmp, $tmp, $tmp2\\n\\t\"\n+            \"sve_orr $dst, $src, $src\\n\\t\"\n+            \"sve_cpy $dst, $pTmp, $val\\n\\t# insert into vector(L)\" %}\n+  ins_encode %{\n+    Assembler::SIMD_RegVariant size =\n+              elemType_to_regVariant(vector_element_basic_type(this));\n+    __ sve_index(as_FloatRegister($tmp$$reg), __ D, 0, 1);\n+    __ sve_dup(as_FloatRegister($tmp2$$reg), __ D, (int)($idx$$constant));\n+    __ sve_cmpeq(as_PRegister($pTmp$$reg), size, ptrue,\n+                 as_FloatRegister($tmp$$reg), as_FloatRegister($tmp2$$reg));\n+    \/\/ If src and dst are the same reg, this move is not needed.\n+    if (as_FloatRegister($dst$$reg) != as_FloatRegister($src$$reg)) {\n+      __ sve_orr(as_FloatRegister($dst$$reg),\n+             as_FloatRegister($src$$reg),\n+             as_FloatRegister($src$$reg));\n+    }\n+    __ sve_cpy(as_FloatRegister($dst$$reg), __ D,\n+               as_PRegister($pTmp$$reg), as_Register($val$$reg));\n+\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve.ad","additions":130,"deletions":1,"binary":false,"changes":131,"status":"modified"},{"patch":"@@ -225,1 +225,0 @@\n-      case Op_VectorInsert:\n@@ -1887,0 +1886,39 @@\n+\n+\/\/ ------------------------------ Vector insert ---------------------------------\n+define(`VECTOR_INSERT', `\n+instruct insert$1`'(vReg dst, vReg src, $2 val, immI idx, vReg tmp, vReg tmp2, pRegGov pTmp, rFlagsReg cr)\n+%{\n+  predicate(UseSVE > 0 &&\n+            n->bottom_type()->is_vect()->element_basic_type() == T_`'TYPE2DATATYPE($1));\n+  match(Set dst (VectorInsert (Binary src val) idx));\n+  effect(TEMP tmp, TEMP tmp2, TEMP pTmp, KILL cr);\n+  ins_cost(5 * SVE_COST);\n+  format %{ \"sve_index $tmp, $3, 0, 1\\n\\t\"\n+            \"sve_dup $tmp2, $3, $idx\\n\\t\"\n+            \"sve_cmpeq $pTmp, $tmp, $tmp2\\n\\t\"\n+            \"sve_orr $dst, $src, $src\\n\\t\"\n+            \"sve_cpy $dst, $pTmp, $val\\n\\t# insert into vector($1)\" %}\n+  ins_encode %{\n+    Assembler::SIMD_RegVariant size =\n+              elemType_to_regVariant(vector_element_basic_type(this));\n+    __ sve_index(as_FloatRegister($tmp$$reg), __ $3, 0, 1);\n+    __ sve_dup(as_FloatRegister($tmp2$$reg), __ $3, (int)($idx$$constant));\n+    __ sve_cmpeq(as_PRegister($pTmp$$reg), size, ptrue,\n+                 as_FloatRegister($tmp$$reg), as_FloatRegister($tmp2$$reg));\n+    \/\/ If src and dst are the same reg, this move is not needed.\n+    if (as_FloatRegister($dst$$reg) != as_FloatRegister($src$$reg)) {\n+      __ sve_orr(as_FloatRegister($dst$$reg),\n+             as_FloatRegister($src$$reg),\n+             as_FloatRegister($src$$reg));\n+    }\n+    __ sve_cpy(as_FloatRegister($dst$$reg), __ $3,\n+               as_PRegister($pTmp$$reg), as_$4($val$$reg));\n+\n+  %}\n+  ins_pipe(pipe_slow);\n+%}')dnl\n+dnl           $1 $2          $3 $4\n+VECTOR_INSERT(B, iRegIorL2I, B, Register)\n+VECTOR_INSERT(S, iRegIorL2I, H, Register)\n+VECTOR_INSERT(I, iRegIorL2I, S, Register)\n+VECTOR_INSERT(L, iRegL,      D, Register)\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve_ad.m4","additions":39,"deletions":1,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -3530,0 +3530,17 @@\n+\/\/ SVE cpy general-purpose register\n+  void sve_cpy(FloatRegister Zd, SIMD_RegVariant T, PRegister Pg, Register Rn) {\n+    starti;\n+    assert(T != Q, \"invalid size\");\n+    f(0b00000101, 31, 24), f(T, 23, 22), f(0b101000101, 21, 13);\n+    pgrf(Pg, 10), srf(Rn, 5), rf(Zd, 0);\n+  }\n+\n+\/\/ SVE INDEX (immediates)\n+  void sve_index(FloatRegister Zd, SIMD_RegVariant T,\n+                 int imm1, int imm2) {\n+    starti;\n+    f(0b00000100, 31, 24), f(T, 23, 22), f(0b1, 21);\n+    f(imm2, 20, 16), f(0b010000, 15, 10);\n+    f(imm1, 9, 5), rf(Zd, 0);\n+  }\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -1599,0 +1599,2 @@\n+                        [\"index\",   \"__ sve_index(z6, __ S, 1, 1);\",                      \"index\\tz6.s, #1, #1\"],\n+                        [\"cpy\",     \"__ sve_cpy(z7, __ H, p3, r5);\",                      \"cpy\\tz7.h, p3\/m, w5\"],\n","filename":"test\/hotspot\/gtest\/aarch64\/aarch64-asmtest.py","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -784,0 +784,2 @@\n+    __ sve_index(z6, __ S, 1, 1);                      \/\/       index   z6.s, #1, #1\n+    __ sve_cpy(z7, __ H, p3, r5);                      \/\/       cpy     z7.h, p3\/m, w5\n@@ -989,7 +991,7 @@\n-    0x14000000,     0x17ffffd7,     0x14000314,     0x94000000,\n-    0x97ffffd4,     0x94000311,     0x3400000a,     0x34fffa2a,\n-    0x340061ca,     0x35000008,     0x35fff9c8,     0x35006168,\n-    0xb400000b,     0xb4fff96b,     0xb400610b,     0xb500001d,\n-    0xb5fff91d,     0xb50060bd,     0x10000013,     0x10fff8b3,\n-    0x10006053,     0x90000013,     0x36300016,     0x3637f836,\n-    0x36305fd6,     0x3758000c,     0x375ff7cc,     0x37585f6c,\n+    0x14000000,     0x17ffffd7,     0x14000316,     0x94000000,\n+    0x97ffffd4,     0x94000313,     0x3400000a,     0x34fffa2a,\n+    0x3400620a,     0x35000008,     0x35fff9c8,     0x350061a8,\n+    0xb400000b,     0xb4fff96b,     0xb400614b,     0xb500001d,\n+    0xb5fff91d,     0xb50060fd,     0x10000013,     0x10fff8b3,\n+    0x10006093,     0x90000013,     0x36300016,     0x3637f836,\n+    0x36306016,     0x3758000c,     0x375ff7cc,     0x37585fac,\n@@ -1000,13 +1002,13 @@\n-    0x54005d40,     0x54000001,     0x54fff541,     0x54005ce1,\n-    0x54000002,     0x54fff4e2,     0x54005c82,     0x54000002,\n-    0x54fff482,     0x54005c22,     0x54000003,     0x54fff423,\n-    0x54005bc3,     0x54000003,     0x54fff3c3,     0x54005b63,\n-    0x54000004,     0x54fff364,     0x54005b04,     0x54000005,\n-    0x54fff305,     0x54005aa5,     0x54000006,     0x54fff2a6,\n-    0x54005a46,     0x54000007,     0x54fff247,     0x540059e7,\n-    0x54000008,     0x54fff1e8,     0x54005988,     0x54000009,\n-    0x54fff189,     0x54005929,     0x5400000a,     0x54fff12a,\n-    0x540058ca,     0x5400000b,     0x54fff0cb,     0x5400586b,\n-    0x5400000c,     0x54fff06c,     0x5400580c,     0x5400000d,\n-    0x54fff00d,     0x540057ad,     0x5400000e,     0x54ffefae,\n-    0x5400574e,     0x5400000f,     0x54ffef4f,     0x540056ef,\n+    0x54005d80,     0x54000001,     0x54fff541,     0x54005d21,\n+    0x54000002,     0x54fff4e2,     0x54005cc2,     0x54000002,\n+    0x54fff482,     0x54005c62,     0x54000003,     0x54fff423,\n+    0x54005c03,     0x54000003,     0x54fff3c3,     0x54005ba3,\n+    0x54000004,     0x54fff364,     0x54005b44,     0x54000005,\n+    0x54fff305,     0x54005ae5,     0x54000006,     0x54fff2a6,\n+    0x54005a86,     0x54000007,     0x54fff247,     0x54005a27,\n+    0x54000008,     0x54fff1e8,     0x540059c8,     0x54000009,\n+    0x54fff189,     0x54005969,     0x5400000a,     0x54fff12a,\n+    0x5400590a,     0x5400000b,     0x54fff0cb,     0x540058ab,\n+    0x5400000c,     0x54fff06c,     0x5400584c,     0x5400000d,\n+    0x54fff00d,     0x540057ed,     0x5400000e,     0x54ffefae,\n+    0x5400578e,     0x5400000f,     0x54ffef4f,     0x5400572f,\n@@ -1044,1 +1046,1 @@\n-    0xbd1b1869,     0x5800473b,     0x1800000b,     0xf8945060,\n+    0xbd1b1869,     0x5800477b,     0x1800000b,     0xf8945060,\n@@ -1146,41 +1148,42 @@\n-    0x05238601,     0x1e601000,     0x1e603000,     0x1e621000,\n-    0x1e623000,     0x1e641000,     0x1e643000,     0x1e661000,\n-    0x1e663000,     0x1e681000,     0x1e683000,     0x1e6a1000,\n-    0x1e6a3000,     0x1e6c1000,     0x1e6c3000,     0x1e6e1000,\n-    0x1e6e3000,     0x1e701000,     0x1e703000,     0x1e721000,\n-    0x1e723000,     0x1e741000,     0x1e743000,     0x1e761000,\n-    0x1e763000,     0x1e781000,     0x1e783000,     0x1e7a1000,\n-    0x1e7a3000,     0x1e7c1000,     0x1e7c3000,     0x1e7e1000,\n-    0x1e7e3000,     0xf8238358,     0xf83702af,     0xf8231118,\n-    0xf8392214,     0xf8313022,     0xf8205098,     0xf82343ec,\n-    0xf83c734a,     0xf82261ec,     0xf8bf81a1,     0xf8bd0260,\n-    0xf8ac12d1,     0xf8ad23dc,     0xf8bf3341,     0xf8bc53c4,\n-    0xf8a443c6,     0xf8ba7130,     0xf8a8600c,     0xf8f48301,\n-    0xf8e20120,     0xf8f8121a,     0xf8fe2143,     0xf8f7308a,\n-    0xf8f05162,     0xf8e841ea,     0xf8f17142,     0xf8ec61ec,\n-    0xf86d80e2,     0xf874021a,     0xf8641082,     0xf86c22b0,\n-    0xf8703170,     0xf8755197,     0xf87a4397,     0xf86e730b,\n-    0xf86163ec,     0xb82a80f0,     0xb82201a3,     0xb8331211,\n-    0xb8232161,     0xb83e3105,     0xb82f53dd,     0xb82040f4,\n-    0xb8347397,     0xb835633b,     0xb8a582e1,     0xb8b000bf,\n-    0xb8ac1389,     0xb8af22dd,     0xb8bf33f3,     0xb8a551ee,\n-    0xb8bf4370,     0xb8b47190,     0xb8ab60c9,     0xb8fe8371,\n-    0xb8fc00fe,     0xb8ea1154,     0xb8e42238,     0xb8f13076,\n-    0xb8fd52cf,     0xb8f342d3,     0xb8e270cf,     0xb8ec6170,\n-    0xb86d8037,     0xb87e00b3,     0xb8711202,     0xb876214d,\n-    0xb875337d,     0xb86c507b,     0xb861431f,     0xb8737131,\n-    0xb87c61fb,     0xce367a86,     0xce1e6858,     0xce768d51,\n-    0xce910451,     0xce768338,     0xce6c8622,     0xcec08363,\n-    0xce708b9d,     0x04e900da,     0x042404f1,     0x6596012f,\n-    0x65d40b62,     0x65c00745,     0x0456a72e,     0x04c0175b,\n-    0x04109418,     0x041ab006,     0x0413812f,     0x04118b65,\n-    0x04101694,     0x04d7aa0a,     0x045eb046,     0x04c81c5d,\n-    0x044a1dd6,     0x040112fb,     0x04dcad42,     0x65809aca,\n-    0x658d9603,     0x65c69201,     0x65878d8c,     0x65c28290,\n-    0x04dda4e5,     0x65c2be0c,     0x6580a386,     0x65c1a624,\n-    0x658dae6d,     0x65819638,     0x65f318ca,     0x65a030cd,\n-    0x65a8532e,     0x65bb76d6,     0x04144e23,     0x04407ce4,\n-    0x04363270,     0x04b6312f,     0x047e30b9,     0x052b6acd,\n-    0x05b46d0d,     0x041a2c99,     0x04d828d1,     0x04d93e04,\n-    0x040829da,     0x040a3c6b,     0x65c73aa1,     0x65c62a2e,\n-    0x65d82678,     0x04c13611,\n+    0x05238601,     0x04a14026,     0x0568aca7,     0x1e601000,\n+    0x1e603000,     0x1e621000,     0x1e623000,     0x1e641000,\n+    0x1e643000,     0x1e661000,     0x1e663000,     0x1e681000,\n+    0x1e683000,     0x1e6a1000,     0x1e6a3000,     0x1e6c1000,\n+    0x1e6c3000,     0x1e6e1000,     0x1e6e3000,     0x1e701000,\n+    0x1e703000,     0x1e721000,     0x1e723000,     0x1e741000,\n+    0x1e743000,     0x1e761000,     0x1e763000,     0x1e781000,\n+    0x1e783000,     0x1e7a1000,     0x1e7a3000,     0x1e7c1000,\n+    0x1e7c3000,     0x1e7e1000,     0x1e7e3000,     0xf8238358,\n+    0xf83702af,     0xf8231118,     0xf8392214,     0xf8313022,\n+    0xf8205098,     0xf82343ec,     0xf83c734a,     0xf82261ec,\n+    0xf8bf81a1,     0xf8bd0260,     0xf8ac12d1,     0xf8ad23dc,\n+    0xf8bf3341,     0xf8bc53c4,     0xf8a443c6,     0xf8ba7130,\n+    0xf8a8600c,     0xf8f48301,     0xf8e20120,     0xf8f8121a,\n+    0xf8fe2143,     0xf8f7308a,     0xf8f05162,     0xf8e841ea,\n+    0xf8f17142,     0xf8ec61ec,     0xf86d80e2,     0xf874021a,\n+    0xf8641082,     0xf86c22b0,     0xf8703170,     0xf8755197,\n+    0xf87a4397,     0xf86e730b,     0xf86163ec,     0xb82a80f0,\n+    0xb82201a3,     0xb8331211,     0xb8232161,     0xb83e3105,\n+    0xb82f53dd,     0xb82040f4,     0xb8347397,     0xb835633b,\n+    0xb8a582e1,     0xb8b000bf,     0xb8ac1389,     0xb8af22dd,\n+    0xb8bf33f3,     0xb8a551ee,     0xb8bf4370,     0xb8b47190,\n+    0xb8ab60c9,     0xb8fe8371,     0xb8fc00fe,     0xb8ea1154,\n+    0xb8e42238,     0xb8f13076,     0xb8fd52cf,     0xb8f342d3,\n+    0xb8e270cf,     0xb8ec6170,     0xb86d8037,     0xb87e00b3,\n+    0xb8711202,     0xb876214d,     0xb875337d,     0xb86c507b,\n+    0xb861431f,     0xb8737131,     0xb87c61fb,     0xce367a86,\n+    0xce1e6858,     0xce768d51,     0xce910451,     0xce768338,\n+    0xce6c8622,     0xcec08363,     0xce708b9d,     0x04e900da,\n+    0x042404f1,     0x6596012f,     0x65d40b62,     0x65c00745,\n+    0x0456a72e,     0x04c0175b,     0x04109418,     0x041ab006,\n+    0x0413812f,     0x04118b65,     0x04101694,     0x04d7aa0a,\n+    0x045eb046,     0x04c81c5d,     0x044a1dd6,     0x040112fb,\n+    0x04dcad42,     0x65809aca,     0x658d9603,     0x65c69201,\n+    0x65878d8c,     0x65c28290,     0x04dda4e5,     0x65c2be0c,\n+    0x6580a386,     0x65c1a624,     0x658dae6d,     0x65819638,\n+    0x65f318ca,     0x65a030cd,     0x65a8532e,     0x65bb76d6,\n+    0x04144e23,     0x04407ce4,     0x04363270,     0x04b6312f,\n+    0x047e30b9,     0x052b6acd,     0x05b46d0d,     0x041a2c99,\n+    0x04d828d1,     0x04d93e04,     0x040829da,     0x040a3c6b,\n+    0x65c73aa1,     0x65c62a2e,     0x65d82678,     0x04c13611,\n+\n","filename":"test\/hotspot\/gtest\/aarch64\/asmtest.out.h","additions":65,"deletions":62,"binary":false,"changes":127,"status":"modified"}]}