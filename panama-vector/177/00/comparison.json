{"files":[{"patch":"@@ -1,17 +0,0 @@\n-\n-    @Benchmark\n-    public void [[TEST]][[TEST_TYPE]][[OP_NAME]]Lanes(Blackhole bh) {\n-        $type$[] a = fa.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-        $type$ ra = [[TEST_INIT]];\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            ra = [[TEST_INIT]];\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);\n-                ra = ($type$)Math.max(ra, av.reduceLanes(VectorOperators.[[TEST]], vmask));\n-            }\n-        }\n-        bh.consume(ra);\n-    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Reduction-Masked-Max-op.template","additions":0,"deletions":17,"binary":false,"changes":17,"status":"deleted"},{"patch":"@@ -1,17 +0,0 @@\n-\n-    @Benchmark\n-    public void [[TEST]][[TEST_TYPE]][[OP_NAME]]Lanes(Blackhole bh) {\n-        $type$[] a = fa.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-        $type$ ra = [[TEST_INIT]];\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            ra = [[TEST_INIT]];\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);\n-                ra = ($type$)Math.min(ra, av.reduceLanes(VectorOperators.[[TEST]], vmask));\n-            }\n-        }\n-        bh.consume(ra);\n-    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Reduction-Masked-Min-op.template","additions":0,"deletions":17,"binary":false,"changes":17,"status":"deleted"},{"patch":"@@ -0,0 +1,17 @@\n+\n+    @Benchmark\n+    public void [[TEST]][[TEST_TYPE]][[OP_NAME]]Lanes(Blackhole bh) {\n+        $type$[] a = fa.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        $type$ ra = [[TEST_INIT]];\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = [[TEST_INIT]];\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);\n+                ra = [[TEST_OP]](ra, av.reduceLanes(VectorOperators.[[TEST]], vmask));\n+            }\n+        }\n+        bh.consume(ra);\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Reduction-Masked-op-func.template","additions":17,"deletions":0,"binary":false,"changes":17,"status":"added"},{"patch":"@@ -1,15 +0,0 @@\n-\n-    @Benchmark\n-    public void [[TEST]][[TEST_TYPE]][[OP_NAME]]Lanes(Blackhole bh) {\n-        $type$[] a = fa.apply(SPECIES.length());\n-        $type$ ra = [[TEST_INIT]];\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            ra = [[TEST_INIT]];\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);\n-                ra = ($type$)Math.max(ra, av.reduceLanes(VectorOperators.[[TEST]]));\n-            }\n-        }\n-        bh.consume(ra);\n-    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Reduction-Max-op.template","additions":0,"deletions":15,"binary":false,"changes":15,"status":"deleted"},{"patch":"@@ -1,15 +0,0 @@\n-\n-    @Benchmark\n-    public void [[TEST]][[TEST_TYPE]][[OP_NAME]]Lanes(Blackhole bh) {\n-        $type$[] a = fa.apply(SPECIES.length());\n-        $type$ ra = [[TEST_INIT]];\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            ra = [[TEST_INIT]];\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);\n-                ra = ($type$)Math.min(ra, av.reduceLanes(VectorOperators.[[TEST]]));\n-            }\n-        }\n-        bh.consume(ra);\n-    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Reduction-Min-op.template","additions":0,"deletions":15,"binary":false,"changes":15,"status":"deleted"},{"patch":"@@ -0,0 +1,15 @@\n+\n+    @Benchmark\n+    public void [[TEST]][[TEST_TYPE]][[OP_NAME]]Lanes(Blackhole bh) {\n+        $type$[] a = fa.apply(SPECIES.length());\n+        $type$ ra = [[TEST_INIT]];\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = [[TEST_INIT]];\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);\n+                ra = [[TEST_OP]](ra, av.reduceLanes(VectorOperators.[[TEST]]));\n+            }\n+        }\n+        bh.consume(ra);\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Reduction-op-func.template","additions":15,"deletions":0,"binary":false,"changes":15,"status":"added"},{"patch":"@@ -76,0 +76,4 @@\n+    static $type$ firstNonZero($type$ a, $type$ b) {\n+        return $Boxtype$.compare(a, ($type$) 0) != 0 ? a : b;\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-header.template","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -70,0 +70,4 @@\n+    static byte firstNonZero(byte a, byte b) {\n+        return Byte.compare(a, (byte) 0) != 0 ? a : b;\n+    }\n+\n@@ -1082,1 +1086,1 @@\n-    public void MIN(Blackhole bh) {\n+    public void MINLanes(Blackhole bh) {\n@@ -1084,1 +1088,0 @@\n-        byte[] r = fr.apply(SPECIES.length());\n@@ -1087,7 +1090,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MIN);\n-            }\n-        }\n-\n@@ -1101,2 +1097,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1106,1 +1101,1 @@\n-    public void MINMasked(Blackhole bh) {\n+    public void MINMaskedLanes(Blackhole bh) {\n@@ -1108,1 +1103,0 @@\n-        byte[] r = fr.apply(SPECIES.length());\n@@ -1113,7 +1107,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MIN, vmask);\n-            }\n-        }\n-\n@@ -1127,2 +1114,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1132,1 +1118,1 @@\n-    public void MAX(Blackhole bh) {\n+    public void MAXLanes(Blackhole bh) {\n@@ -1134,1 +1120,0 @@\n-        byte[] r = fr.apply(SPECIES.length());\n@@ -1137,7 +1122,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MAX);\n-            }\n-        }\n-\n@@ -1151,2 +1129,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1156,1 +1133,1 @@\n-    public void MAXMasked(Blackhole bh) {\n+    public void MAXMaskedLanes(Blackhole bh) {\n@@ -1158,1 +1135,0 @@\n-        byte[] r = fr.apply(SPECIES.length());\n@@ -1163,7 +1139,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MAX, vmask);\n-            }\n-        }\n-\n@@ -1177,2 +1146,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1182,1 +1150,1 @@\n-    public void FIRST_NONZERO(Blackhole bh) {\n+    public void FIRST_NONZEROLanes(Blackhole bh) {\n@@ -1184,1 +1152,0 @@\n-        byte[] r = fr.apply(SPECIES.length());\n@@ -1187,7 +1154,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n-            }\n-        }\n-\n@@ -1201,2 +1161,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1206,1 +1165,1 @@\n-    public void FIRST_NONZEROMasked(Blackhole bh) {\n+    public void FIRST_NONZEROMaskedLanes(Blackhole bh) {\n@@ -1208,1 +1167,0 @@\n-        byte[] r = fr.apply(SPECIES.length());\n@@ -1213,7 +1171,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n-            }\n-        }\n-\n@@ -1227,2 +1178,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte128Vector.java","additions":16,"deletions":66,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -70,0 +70,4 @@\n+    static byte firstNonZero(byte a, byte b) {\n+        return Byte.compare(a, (byte) 0) != 0 ? a : b;\n+    }\n+\n@@ -1082,1 +1086,1 @@\n-    public void MIN(Blackhole bh) {\n+    public void MINLanes(Blackhole bh) {\n@@ -1084,1 +1088,0 @@\n-        byte[] r = fr.apply(SPECIES.length());\n@@ -1087,7 +1090,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MIN);\n-            }\n-        }\n-\n@@ -1101,2 +1097,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1106,1 +1101,1 @@\n-    public void MINMasked(Blackhole bh) {\n+    public void MINMaskedLanes(Blackhole bh) {\n@@ -1108,1 +1103,0 @@\n-        byte[] r = fr.apply(SPECIES.length());\n@@ -1113,7 +1107,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MIN, vmask);\n-            }\n-        }\n-\n@@ -1127,2 +1114,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1132,1 +1118,1 @@\n-    public void MAX(Blackhole bh) {\n+    public void MAXLanes(Blackhole bh) {\n@@ -1134,1 +1120,0 @@\n-        byte[] r = fr.apply(SPECIES.length());\n@@ -1137,7 +1122,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MAX);\n-            }\n-        }\n-\n@@ -1151,2 +1129,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1156,1 +1133,1 @@\n-    public void MAXMasked(Blackhole bh) {\n+    public void MAXMaskedLanes(Blackhole bh) {\n@@ -1158,1 +1135,0 @@\n-        byte[] r = fr.apply(SPECIES.length());\n@@ -1163,7 +1139,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MAX, vmask);\n-            }\n-        }\n-\n@@ -1177,2 +1146,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1182,1 +1150,1 @@\n-    public void FIRST_NONZERO(Blackhole bh) {\n+    public void FIRST_NONZEROLanes(Blackhole bh) {\n@@ -1184,1 +1152,0 @@\n-        byte[] r = fr.apply(SPECIES.length());\n@@ -1187,7 +1154,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n-            }\n-        }\n-\n@@ -1201,2 +1161,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1206,1 +1165,1 @@\n-    public void FIRST_NONZEROMasked(Blackhole bh) {\n+    public void FIRST_NONZEROMaskedLanes(Blackhole bh) {\n@@ -1208,1 +1167,0 @@\n-        byte[] r = fr.apply(SPECIES.length());\n@@ -1213,7 +1171,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n-            }\n-        }\n-\n@@ -1227,2 +1178,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte256Vector.java","additions":16,"deletions":66,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -70,0 +70,4 @@\n+    static byte firstNonZero(byte a, byte b) {\n+        return Byte.compare(a, (byte) 0) != 0 ? a : b;\n+    }\n+\n@@ -1082,1 +1086,1 @@\n-    public void MIN(Blackhole bh) {\n+    public void MINLanes(Blackhole bh) {\n@@ -1084,1 +1088,0 @@\n-        byte[] r = fr.apply(SPECIES.length());\n@@ -1087,7 +1090,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MIN);\n-            }\n-        }\n-\n@@ -1101,2 +1097,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1106,1 +1101,1 @@\n-    public void MINMasked(Blackhole bh) {\n+    public void MINMaskedLanes(Blackhole bh) {\n@@ -1108,1 +1103,0 @@\n-        byte[] r = fr.apply(SPECIES.length());\n@@ -1113,7 +1107,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MIN, vmask);\n-            }\n-        }\n-\n@@ -1127,2 +1114,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1132,1 +1118,1 @@\n-    public void MAX(Blackhole bh) {\n+    public void MAXLanes(Blackhole bh) {\n@@ -1134,1 +1120,0 @@\n-        byte[] r = fr.apply(SPECIES.length());\n@@ -1137,7 +1122,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MAX);\n-            }\n-        }\n-\n@@ -1151,2 +1129,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1156,1 +1133,1 @@\n-    public void MAXMasked(Blackhole bh) {\n+    public void MAXMaskedLanes(Blackhole bh) {\n@@ -1158,1 +1135,0 @@\n-        byte[] r = fr.apply(SPECIES.length());\n@@ -1163,7 +1139,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MAX, vmask);\n-            }\n-        }\n-\n@@ -1177,2 +1146,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1182,1 +1150,1 @@\n-    public void FIRST_NONZERO(Blackhole bh) {\n+    public void FIRST_NONZEROLanes(Blackhole bh) {\n@@ -1184,1 +1152,0 @@\n-        byte[] r = fr.apply(SPECIES.length());\n@@ -1187,7 +1154,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n-            }\n-        }\n-\n@@ -1201,2 +1161,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1206,1 +1165,1 @@\n-    public void FIRST_NONZEROMasked(Blackhole bh) {\n+    public void FIRST_NONZEROMaskedLanes(Blackhole bh) {\n@@ -1208,1 +1167,0 @@\n-        byte[] r = fr.apply(SPECIES.length());\n@@ -1213,7 +1171,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n-            }\n-        }\n-\n@@ -1227,2 +1178,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte512Vector.java","additions":16,"deletions":66,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -70,0 +70,4 @@\n+    static byte firstNonZero(byte a, byte b) {\n+        return Byte.compare(a, (byte) 0) != 0 ? a : b;\n+    }\n+\n@@ -1082,1 +1086,1 @@\n-    public void MIN(Blackhole bh) {\n+    public void MINLanes(Blackhole bh) {\n@@ -1084,1 +1088,0 @@\n-        byte[] r = fr.apply(SPECIES.length());\n@@ -1087,7 +1090,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MIN);\n-            }\n-        }\n-\n@@ -1101,2 +1097,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1106,1 +1101,1 @@\n-    public void MINMasked(Blackhole bh) {\n+    public void MINMaskedLanes(Blackhole bh) {\n@@ -1108,1 +1103,0 @@\n-        byte[] r = fr.apply(SPECIES.length());\n@@ -1113,7 +1107,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MIN, vmask);\n-            }\n-        }\n-\n@@ -1127,2 +1114,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1132,1 +1118,1 @@\n-    public void MAX(Blackhole bh) {\n+    public void MAXLanes(Blackhole bh) {\n@@ -1134,1 +1120,0 @@\n-        byte[] r = fr.apply(SPECIES.length());\n@@ -1137,7 +1122,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MAX);\n-            }\n-        }\n-\n@@ -1151,2 +1129,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1156,1 +1133,1 @@\n-    public void MAXMasked(Blackhole bh) {\n+    public void MAXMaskedLanes(Blackhole bh) {\n@@ -1158,1 +1135,0 @@\n-        byte[] r = fr.apply(SPECIES.length());\n@@ -1163,7 +1139,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MAX, vmask);\n-            }\n-        }\n-\n@@ -1177,2 +1146,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1182,1 +1150,1 @@\n-    public void FIRST_NONZERO(Blackhole bh) {\n+    public void FIRST_NONZEROLanes(Blackhole bh) {\n@@ -1184,1 +1152,0 @@\n-        byte[] r = fr.apply(SPECIES.length());\n@@ -1187,7 +1154,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n-            }\n-        }\n-\n@@ -1201,2 +1161,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1206,1 +1165,1 @@\n-    public void FIRST_NONZEROMasked(Blackhole bh) {\n+    public void FIRST_NONZEROMaskedLanes(Blackhole bh) {\n@@ -1208,1 +1167,0 @@\n-        byte[] r = fr.apply(SPECIES.length());\n@@ -1213,7 +1171,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n-            }\n-        }\n-\n@@ -1227,2 +1178,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte64Vector.java","additions":16,"deletions":66,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -70,0 +70,4 @@\n+    static byte firstNonZero(byte a, byte b) {\n+        return Byte.compare(a, (byte) 0) != 0 ? a : b;\n+    }\n+\n@@ -1082,1 +1086,1 @@\n-    public void MIN(Blackhole bh) {\n+    public void MINLanes(Blackhole bh) {\n@@ -1084,1 +1088,0 @@\n-        byte[] r = fr.apply(SPECIES.length());\n@@ -1087,7 +1090,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MIN);\n-            }\n-        }\n-\n@@ -1101,2 +1097,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1106,1 +1101,1 @@\n-    public void MINMasked(Blackhole bh) {\n+    public void MINMaskedLanes(Blackhole bh) {\n@@ -1108,1 +1103,0 @@\n-        byte[] r = fr.apply(SPECIES.length());\n@@ -1113,7 +1107,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MIN, vmask);\n-            }\n-        }\n-\n@@ -1127,2 +1114,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1132,1 +1118,1 @@\n-    public void MAX(Blackhole bh) {\n+    public void MAXLanes(Blackhole bh) {\n@@ -1134,1 +1120,0 @@\n-        byte[] r = fr.apply(SPECIES.length());\n@@ -1137,7 +1122,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MAX);\n-            }\n-        }\n-\n@@ -1151,2 +1129,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1156,1 +1133,1 @@\n-    public void MAXMasked(Blackhole bh) {\n+    public void MAXMaskedLanes(Blackhole bh) {\n@@ -1158,1 +1135,0 @@\n-        byte[] r = fr.apply(SPECIES.length());\n@@ -1163,7 +1139,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MAX, vmask);\n-            }\n-        }\n-\n@@ -1177,2 +1146,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1182,1 +1150,1 @@\n-    public void FIRST_NONZERO(Blackhole bh) {\n+    public void FIRST_NONZEROLanes(Blackhole bh) {\n@@ -1184,1 +1152,0 @@\n-        byte[] r = fr.apply(SPECIES.length());\n@@ -1187,7 +1154,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n-            }\n-        }\n-\n@@ -1201,2 +1161,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1206,1 +1165,1 @@\n-    public void FIRST_NONZEROMasked(Blackhole bh) {\n+    public void FIRST_NONZEROMaskedLanes(Blackhole bh) {\n@@ -1208,1 +1167,0 @@\n-        byte[] r = fr.apply(SPECIES.length());\n@@ -1213,7 +1171,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n-            }\n-        }\n-\n@@ -1227,2 +1178,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ByteMaxVector.java","additions":16,"deletions":66,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -55,0 +55,4 @@\n+    static double firstNonZero(double a, double b) {\n+        return Double.compare(a, (double) 0) != 0 ? a : b;\n+    }\n+\n@@ -439,1 +443,1 @@\n-    public void MIN(Blackhole bh) {\n+    public void MINLanes(Blackhole bh) {\n@@ -441,1 +445,0 @@\n-        double[] r = fr.apply(SPECIES.length());\n@@ -444,7 +447,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MIN);\n-            }\n-        }\n-\n@@ -458,2 +454,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -463,1 +458,1 @@\n-    public void MINMasked(Blackhole bh) {\n+    public void MINMaskedLanes(Blackhole bh) {\n@@ -465,1 +460,0 @@\n-        double[] r = fr.apply(SPECIES.length());\n@@ -470,7 +464,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MIN, vmask);\n-            }\n-        }\n-\n@@ -484,2 +471,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -489,1 +475,1 @@\n-    public void MAX(Blackhole bh) {\n+    public void MAXLanes(Blackhole bh) {\n@@ -491,1 +477,0 @@\n-        double[] r = fr.apply(SPECIES.length());\n@@ -494,7 +479,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MAX);\n-            }\n-        }\n-\n@@ -508,2 +486,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -513,1 +490,1 @@\n-    public void MAXMasked(Blackhole bh) {\n+    public void MAXMaskedLanes(Blackhole bh) {\n@@ -515,1 +492,0 @@\n-        double[] r = fr.apply(SPECIES.length());\n@@ -520,7 +496,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MAX, vmask);\n-            }\n-        }\n-\n@@ -534,2 +503,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -539,1 +507,1 @@\n-    public void FIRST_NONZERO(Blackhole bh) {\n+    public void FIRST_NONZEROLanes(Blackhole bh) {\n@@ -541,1 +509,0 @@\n-        double[] r = fr.apply(SPECIES.length());\n@@ -544,7 +511,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n-            }\n-        }\n-\n@@ -558,2 +518,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -563,1 +522,1 @@\n-    public void FIRST_NONZEROMasked(Blackhole bh) {\n+    public void FIRST_NONZEROMaskedLanes(Blackhole bh) {\n@@ -565,1 +524,0 @@\n-        double[] r = fr.apply(SPECIES.length());\n@@ -570,7 +528,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n-            }\n-        }\n-\n@@ -584,2 +535,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double128Vector.java","additions":16,"deletions":66,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -55,0 +55,4 @@\n+    static double firstNonZero(double a, double b) {\n+        return Double.compare(a, (double) 0) != 0 ? a : b;\n+    }\n+\n@@ -439,1 +443,1 @@\n-    public void MIN(Blackhole bh) {\n+    public void MINLanes(Blackhole bh) {\n@@ -441,1 +445,0 @@\n-        double[] r = fr.apply(SPECIES.length());\n@@ -444,7 +447,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MIN);\n-            }\n-        }\n-\n@@ -458,2 +454,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -463,1 +458,1 @@\n-    public void MINMasked(Blackhole bh) {\n+    public void MINMaskedLanes(Blackhole bh) {\n@@ -465,1 +460,0 @@\n-        double[] r = fr.apply(SPECIES.length());\n@@ -470,7 +464,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MIN, vmask);\n-            }\n-        }\n-\n@@ -484,2 +471,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -489,1 +475,1 @@\n-    public void MAX(Blackhole bh) {\n+    public void MAXLanes(Blackhole bh) {\n@@ -491,1 +477,0 @@\n-        double[] r = fr.apply(SPECIES.length());\n@@ -494,7 +479,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MAX);\n-            }\n-        }\n-\n@@ -508,2 +486,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -513,1 +490,1 @@\n-    public void MAXMasked(Blackhole bh) {\n+    public void MAXMaskedLanes(Blackhole bh) {\n@@ -515,1 +492,0 @@\n-        double[] r = fr.apply(SPECIES.length());\n@@ -520,7 +496,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MAX, vmask);\n-            }\n-        }\n-\n@@ -534,2 +503,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -539,1 +507,1 @@\n-    public void FIRST_NONZERO(Blackhole bh) {\n+    public void FIRST_NONZEROLanes(Blackhole bh) {\n@@ -541,1 +509,0 @@\n-        double[] r = fr.apply(SPECIES.length());\n@@ -544,7 +511,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n-            }\n-        }\n-\n@@ -558,2 +518,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -563,1 +522,1 @@\n-    public void FIRST_NONZEROMasked(Blackhole bh) {\n+    public void FIRST_NONZEROMaskedLanes(Blackhole bh) {\n@@ -565,1 +524,0 @@\n-        double[] r = fr.apply(SPECIES.length());\n@@ -570,7 +528,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n-            }\n-        }\n-\n@@ -584,2 +535,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double256Vector.java","additions":16,"deletions":66,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -55,0 +55,4 @@\n+    static double firstNonZero(double a, double b) {\n+        return Double.compare(a, (double) 0) != 0 ? a : b;\n+    }\n+\n@@ -439,1 +443,1 @@\n-    public void MIN(Blackhole bh) {\n+    public void MINLanes(Blackhole bh) {\n@@ -441,1 +445,0 @@\n-        double[] r = fr.apply(SPECIES.length());\n@@ -444,7 +447,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MIN);\n-            }\n-        }\n-\n@@ -458,2 +454,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -463,1 +458,1 @@\n-    public void MINMasked(Blackhole bh) {\n+    public void MINMaskedLanes(Blackhole bh) {\n@@ -465,1 +460,0 @@\n-        double[] r = fr.apply(SPECIES.length());\n@@ -470,7 +464,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MIN, vmask);\n-            }\n-        }\n-\n@@ -484,2 +471,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -489,1 +475,1 @@\n-    public void MAX(Blackhole bh) {\n+    public void MAXLanes(Blackhole bh) {\n@@ -491,1 +477,0 @@\n-        double[] r = fr.apply(SPECIES.length());\n@@ -494,7 +479,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MAX);\n-            }\n-        }\n-\n@@ -508,2 +486,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -513,1 +490,1 @@\n-    public void MAXMasked(Blackhole bh) {\n+    public void MAXMaskedLanes(Blackhole bh) {\n@@ -515,1 +492,0 @@\n-        double[] r = fr.apply(SPECIES.length());\n@@ -520,7 +496,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MAX, vmask);\n-            }\n-        }\n-\n@@ -534,2 +503,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -539,1 +507,1 @@\n-    public void FIRST_NONZERO(Blackhole bh) {\n+    public void FIRST_NONZEROLanes(Blackhole bh) {\n@@ -541,1 +509,0 @@\n-        double[] r = fr.apply(SPECIES.length());\n@@ -544,7 +511,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n-            }\n-        }\n-\n@@ -558,2 +518,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -563,1 +522,1 @@\n-    public void FIRST_NONZEROMasked(Blackhole bh) {\n+    public void FIRST_NONZEROMaskedLanes(Blackhole bh) {\n@@ -565,1 +524,0 @@\n-        double[] r = fr.apply(SPECIES.length());\n@@ -570,7 +528,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n-            }\n-        }\n-\n@@ -584,2 +535,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double512Vector.java","additions":16,"deletions":66,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -55,0 +55,4 @@\n+    static double firstNonZero(double a, double b) {\n+        return Double.compare(a, (double) 0) != 0 ? a : b;\n+    }\n+\n@@ -439,1 +443,1 @@\n-    public void MIN(Blackhole bh) {\n+    public void MINLanes(Blackhole bh) {\n@@ -441,1 +445,0 @@\n-        double[] r = fr.apply(SPECIES.length());\n@@ -444,7 +447,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MIN);\n-            }\n-        }\n-\n@@ -458,2 +454,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -463,1 +458,1 @@\n-    public void MINMasked(Blackhole bh) {\n+    public void MINMaskedLanes(Blackhole bh) {\n@@ -465,1 +460,0 @@\n-        double[] r = fr.apply(SPECIES.length());\n@@ -470,7 +464,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MIN, vmask);\n-            }\n-        }\n-\n@@ -484,2 +471,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -489,1 +475,1 @@\n-    public void MAX(Blackhole bh) {\n+    public void MAXLanes(Blackhole bh) {\n@@ -491,1 +477,0 @@\n-        double[] r = fr.apply(SPECIES.length());\n@@ -494,7 +479,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MAX);\n-            }\n-        }\n-\n@@ -508,2 +486,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -513,1 +490,1 @@\n-    public void MAXMasked(Blackhole bh) {\n+    public void MAXMaskedLanes(Blackhole bh) {\n@@ -515,1 +492,0 @@\n-        double[] r = fr.apply(SPECIES.length());\n@@ -520,7 +496,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MAX, vmask);\n-            }\n-        }\n-\n@@ -534,2 +503,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -539,1 +507,1 @@\n-    public void FIRST_NONZERO(Blackhole bh) {\n+    public void FIRST_NONZEROLanes(Blackhole bh) {\n@@ -541,1 +509,0 @@\n-        double[] r = fr.apply(SPECIES.length());\n@@ -544,7 +511,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n-            }\n-        }\n-\n@@ -558,2 +518,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -563,1 +522,1 @@\n-    public void FIRST_NONZEROMasked(Blackhole bh) {\n+    public void FIRST_NONZEROMaskedLanes(Blackhole bh) {\n@@ -565,1 +524,0 @@\n-        double[] r = fr.apply(SPECIES.length());\n@@ -570,7 +528,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n-            }\n-        }\n-\n@@ -584,2 +535,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double64Vector.java","additions":16,"deletions":66,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -55,0 +55,4 @@\n+    static double firstNonZero(double a, double b) {\n+        return Double.compare(a, (double) 0) != 0 ? a : b;\n+    }\n+\n@@ -439,1 +443,1 @@\n-    public void MIN(Blackhole bh) {\n+    public void MINLanes(Blackhole bh) {\n@@ -441,1 +445,0 @@\n-        double[] r = fr.apply(SPECIES.length());\n@@ -444,7 +447,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MIN);\n-            }\n-        }\n-\n@@ -458,2 +454,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -463,1 +458,1 @@\n-    public void MINMasked(Blackhole bh) {\n+    public void MINMaskedLanes(Blackhole bh) {\n@@ -465,1 +460,0 @@\n-        double[] r = fr.apply(SPECIES.length());\n@@ -470,7 +464,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MIN, vmask);\n-            }\n-        }\n-\n@@ -484,2 +471,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -489,1 +475,1 @@\n-    public void MAX(Blackhole bh) {\n+    public void MAXLanes(Blackhole bh) {\n@@ -491,1 +477,0 @@\n-        double[] r = fr.apply(SPECIES.length());\n@@ -494,7 +479,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MAX);\n-            }\n-        }\n-\n@@ -508,2 +486,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -513,1 +490,1 @@\n-    public void MAXMasked(Blackhole bh) {\n+    public void MAXMaskedLanes(Blackhole bh) {\n@@ -515,1 +492,0 @@\n-        double[] r = fr.apply(SPECIES.length());\n@@ -520,7 +496,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MAX, vmask);\n-            }\n-        }\n-\n@@ -534,2 +503,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -539,1 +507,1 @@\n-    public void FIRST_NONZERO(Blackhole bh) {\n+    public void FIRST_NONZEROLanes(Blackhole bh) {\n@@ -541,1 +509,0 @@\n-        double[] r = fr.apply(SPECIES.length());\n@@ -544,7 +511,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n-            }\n-        }\n-\n@@ -558,2 +518,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -563,1 +522,1 @@\n-    public void FIRST_NONZEROMasked(Blackhole bh) {\n+    public void FIRST_NONZEROMaskedLanes(Blackhole bh) {\n@@ -565,1 +524,0 @@\n-        double[] r = fr.apply(SPECIES.length());\n@@ -570,7 +528,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n-            }\n-        }\n-\n@@ -584,2 +535,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/DoubleMaxVector.java","additions":16,"deletions":66,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -55,0 +55,4 @@\n+    static float firstNonZero(float a, float b) {\n+        return Float.compare(a, (float) 0) != 0 ? a : b;\n+    }\n+\n@@ -439,1 +443,1 @@\n-    public void MIN(Blackhole bh) {\n+    public void MINLanes(Blackhole bh) {\n@@ -441,1 +445,0 @@\n-        float[] r = fr.apply(SPECIES.length());\n@@ -444,7 +447,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MIN);\n-            }\n-        }\n-\n@@ -458,2 +454,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -463,1 +458,1 @@\n-    public void MINMasked(Blackhole bh) {\n+    public void MINMaskedLanes(Blackhole bh) {\n@@ -465,1 +460,0 @@\n-        float[] r = fr.apply(SPECIES.length());\n@@ -470,7 +464,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MIN, vmask);\n-            }\n-        }\n-\n@@ -484,2 +471,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -489,1 +475,1 @@\n-    public void MAX(Blackhole bh) {\n+    public void MAXLanes(Blackhole bh) {\n@@ -491,1 +477,0 @@\n-        float[] r = fr.apply(SPECIES.length());\n@@ -494,7 +479,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MAX);\n-            }\n-        }\n-\n@@ -508,2 +486,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -513,1 +490,1 @@\n-    public void MAXMasked(Blackhole bh) {\n+    public void MAXMaskedLanes(Blackhole bh) {\n@@ -515,1 +492,0 @@\n-        float[] r = fr.apply(SPECIES.length());\n@@ -520,7 +496,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MAX, vmask);\n-            }\n-        }\n-\n@@ -534,2 +503,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -539,1 +507,1 @@\n-    public void FIRST_NONZERO(Blackhole bh) {\n+    public void FIRST_NONZEROLanes(Blackhole bh) {\n@@ -541,1 +509,0 @@\n-        float[] r = fr.apply(SPECIES.length());\n@@ -544,7 +511,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n-            }\n-        }\n-\n@@ -558,2 +518,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -563,1 +522,1 @@\n-    public void FIRST_NONZEROMasked(Blackhole bh) {\n+    public void FIRST_NONZEROMaskedLanes(Blackhole bh) {\n@@ -565,1 +524,0 @@\n-        float[] r = fr.apply(SPECIES.length());\n@@ -570,7 +528,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n-            }\n-        }\n-\n@@ -584,2 +535,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float128Vector.java","additions":16,"deletions":66,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -55,0 +55,4 @@\n+    static float firstNonZero(float a, float b) {\n+        return Float.compare(a, (float) 0) != 0 ? a : b;\n+    }\n+\n@@ -439,1 +443,1 @@\n-    public void MIN(Blackhole bh) {\n+    public void MINLanes(Blackhole bh) {\n@@ -441,1 +445,0 @@\n-        float[] r = fr.apply(SPECIES.length());\n@@ -444,7 +447,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MIN);\n-            }\n-        }\n-\n@@ -458,2 +454,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -463,1 +458,1 @@\n-    public void MINMasked(Blackhole bh) {\n+    public void MINMaskedLanes(Blackhole bh) {\n@@ -465,1 +460,0 @@\n-        float[] r = fr.apply(SPECIES.length());\n@@ -470,7 +464,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MIN, vmask);\n-            }\n-        }\n-\n@@ -484,2 +471,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -489,1 +475,1 @@\n-    public void MAX(Blackhole bh) {\n+    public void MAXLanes(Blackhole bh) {\n@@ -491,1 +477,0 @@\n-        float[] r = fr.apply(SPECIES.length());\n@@ -494,7 +479,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MAX);\n-            }\n-        }\n-\n@@ -508,2 +486,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -513,1 +490,1 @@\n-    public void MAXMasked(Blackhole bh) {\n+    public void MAXMaskedLanes(Blackhole bh) {\n@@ -515,1 +492,0 @@\n-        float[] r = fr.apply(SPECIES.length());\n@@ -520,7 +496,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MAX, vmask);\n-            }\n-        }\n-\n@@ -534,2 +503,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -539,1 +507,1 @@\n-    public void FIRST_NONZERO(Blackhole bh) {\n+    public void FIRST_NONZEROLanes(Blackhole bh) {\n@@ -541,1 +509,0 @@\n-        float[] r = fr.apply(SPECIES.length());\n@@ -544,7 +511,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n-            }\n-        }\n-\n@@ -558,2 +518,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -563,1 +522,1 @@\n-    public void FIRST_NONZEROMasked(Blackhole bh) {\n+    public void FIRST_NONZEROMaskedLanes(Blackhole bh) {\n@@ -565,1 +524,0 @@\n-        float[] r = fr.apply(SPECIES.length());\n@@ -570,7 +528,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n-            }\n-        }\n-\n@@ -584,2 +535,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float256Vector.java","additions":16,"deletions":66,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -55,0 +55,4 @@\n+    static float firstNonZero(float a, float b) {\n+        return Float.compare(a, (float) 0) != 0 ? a : b;\n+    }\n+\n@@ -439,1 +443,1 @@\n-    public void MIN(Blackhole bh) {\n+    public void MINLanes(Blackhole bh) {\n@@ -441,1 +445,0 @@\n-        float[] r = fr.apply(SPECIES.length());\n@@ -444,7 +447,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MIN);\n-            }\n-        }\n-\n@@ -458,2 +454,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -463,1 +458,1 @@\n-    public void MINMasked(Blackhole bh) {\n+    public void MINMaskedLanes(Blackhole bh) {\n@@ -465,1 +460,0 @@\n-        float[] r = fr.apply(SPECIES.length());\n@@ -470,7 +464,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MIN, vmask);\n-            }\n-        }\n-\n@@ -484,2 +471,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -489,1 +475,1 @@\n-    public void MAX(Blackhole bh) {\n+    public void MAXLanes(Blackhole bh) {\n@@ -491,1 +477,0 @@\n-        float[] r = fr.apply(SPECIES.length());\n@@ -494,7 +479,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MAX);\n-            }\n-        }\n-\n@@ -508,2 +486,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -513,1 +490,1 @@\n-    public void MAXMasked(Blackhole bh) {\n+    public void MAXMaskedLanes(Blackhole bh) {\n@@ -515,1 +492,0 @@\n-        float[] r = fr.apply(SPECIES.length());\n@@ -520,7 +496,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MAX, vmask);\n-            }\n-        }\n-\n@@ -534,2 +503,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -539,1 +507,1 @@\n-    public void FIRST_NONZERO(Blackhole bh) {\n+    public void FIRST_NONZEROLanes(Blackhole bh) {\n@@ -541,1 +509,0 @@\n-        float[] r = fr.apply(SPECIES.length());\n@@ -544,7 +511,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n-            }\n-        }\n-\n@@ -558,2 +518,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -563,1 +522,1 @@\n-    public void FIRST_NONZEROMasked(Blackhole bh) {\n+    public void FIRST_NONZEROMaskedLanes(Blackhole bh) {\n@@ -565,1 +524,0 @@\n-        float[] r = fr.apply(SPECIES.length());\n@@ -570,7 +528,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n-            }\n-        }\n-\n@@ -584,2 +535,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float512Vector.java","additions":16,"deletions":66,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -55,0 +55,4 @@\n+    static float firstNonZero(float a, float b) {\n+        return Float.compare(a, (float) 0) != 0 ? a : b;\n+    }\n+\n@@ -439,1 +443,1 @@\n-    public void MIN(Blackhole bh) {\n+    public void MINLanes(Blackhole bh) {\n@@ -441,1 +445,0 @@\n-        float[] r = fr.apply(SPECIES.length());\n@@ -444,7 +447,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MIN);\n-            }\n-        }\n-\n@@ -458,2 +454,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -463,1 +458,1 @@\n-    public void MINMasked(Blackhole bh) {\n+    public void MINMaskedLanes(Blackhole bh) {\n@@ -465,1 +460,0 @@\n-        float[] r = fr.apply(SPECIES.length());\n@@ -470,7 +464,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MIN, vmask);\n-            }\n-        }\n-\n@@ -484,2 +471,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -489,1 +475,1 @@\n-    public void MAX(Blackhole bh) {\n+    public void MAXLanes(Blackhole bh) {\n@@ -491,1 +477,0 @@\n-        float[] r = fr.apply(SPECIES.length());\n@@ -494,7 +479,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MAX);\n-            }\n-        }\n-\n@@ -508,2 +486,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -513,1 +490,1 @@\n-    public void MAXMasked(Blackhole bh) {\n+    public void MAXMaskedLanes(Blackhole bh) {\n@@ -515,1 +492,0 @@\n-        float[] r = fr.apply(SPECIES.length());\n@@ -520,7 +496,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MAX, vmask);\n-            }\n-        }\n-\n@@ -534,2 +503,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -539,1 +507,1 @@\n-    public void FIRST_NONZERO(Blackhole bh) {\n+    public void FIRST_NONZEROLanes(Blackhole bh) {\n@@ -541,1 +509,0 @@\n-        float[] r = fr.apply(SPECIES.length());\n@@ -544,7 +511,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n-            }\n-        }\n-\n@@ -558,2 +518,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -563,1 +522,1 @@\n-    public void FIRST_NONZEROMasked(Blackhole bh) {\n+    public void FIRST_NONZEROMaskedLanes(Blackhole bh) {\n@@ -565,1 +524,0 @@\n-        float[] r = fr.apply(SPECIES.length());\n@@ -570,7 +528,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n-            }\n-        }\n-\n@@ -584,2 +535,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float64Vector.java","additions":16,"deletions":66,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -55,0 +55,4 @@\n+    static float firstNonZero(float a, float b) {\n+        return Float.compare(a, (float) 0) != 0 ? a : b;\n+    }\n+\n@@ -439,1 +443,1 @@\n-    public void MIN(Blackhole bh) {\n+    public void MINLanes(Blackhole bh) {\n@@ -441,1 +445,0 @@\n-        float[] r = fr.apply(SPECIES.length());\n@@ -444,7 +447,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MIN);\n-            }\n-        }\n-\n@@ -458,2 +454,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -463,1 +458,1 @@\n-    public void MINMasked(Blackhole bh) {\n+    public void MINMaskedLanes(Blackhole bh) {\n@@ -465,1 +460,0 @@\n-        float[] r = fr.apply(SPECIES.length());\n@@ -470,7 +464,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MIN, vmask);\n-            }\n-        }\n-\n@@ -484,2 +471,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -489,1 +475,1 @@\n-    public void MAX(Blackhole bh) {\n+    public void MAXLanes(Blackhole bh) {\n@@ -491,1 +477,0 @@\n-        float[] r = fr.apply(SPECIES.length());\n@@ -494,7 +479,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MAX);\n-            }\n-        }\n-\n@@ -508,2 +486,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -513,1 +490,1 @@\n-    public void MAXMasked(Blackhole bh) {\n+    public void MAXMaskedLanes(Blackhole bh) {\n@@ -515,1 +492,0 @@\n-        float[] r = fr.apply(SPECIES.length());\n@@ -520,7 +496,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MAX, vmask);\n-            }\n-        }\n-\n@@ -534,2 +503,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -539,1 +507,1 @@\n-    public void FIRST_NONZERO(Blackhole bh) {\n+    public void FIRST_NONZEROLanes(Blackhole bh) {\n@@ -541,1 +509,0 @@\n-        float[] r = fr.apply(SPECIES.length());\n@@ -544,7 +511,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n-            }\n-        }\n-\n@@ -558,2 +518,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -563,1 +522,1 @@\n-    public void FIRST_NONZEROMasked(Blackhole bh) {\n+    public void FIRST_NONZEROMaskedLanes(Blackhole bh) {\n@@ -565,1 +524,0 @@\n-        float[] r = fr.apply(SPECIES.length());\n@@ -570,7 +528,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n-            }\n-        }\n-\n@@ -584,2 +535,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/FloatMaxVector.java","additions":16,"deletions":66,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -70,0 +70,4 @@\n+    static int firstNonZero(int a, int b) {\n+        return Integer.compare(a, (int) 0) != 0 ? a : b;\n+    }\n+\n@@ -1082,1 +1086,1 @@\n-    public void MIN(Blackhole bh) {\n+    public void MINLanes(Blackhole bh) {\n@@ -1084,1 +1088,0 @@\n-        int[] r = fr.apply(SPECIES.length());\n@@ -1087,7 +1090,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                IntVector av = IntVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MIN);\n-            }\n-        }\n-\n@@ -1101,2 +1097,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1106,1 +1101,1 @@\n-    public void MINMasked(Blackhole bh) {\n+    public void MINMaskedLanes(Blackhole bh) {\n@@ -1108,1 +1103,0 @@\n-        int[] r = fr.apply(SPECIES.length());\n@@ -1113,7 +1107,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                IntVector av = IntVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MIN, vmask);\n-            }\n-        }\n-\n@@ -1127,2 +1114,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1132,1 +1118,1 @@\n-    public void MAX(Blackhole bh) {\n+    public void MAXLanes(Blackhole bh) {\n@@ -1134,1 +1120,0 @@\n-        int[] r = fr.apply(SPECIES.length());\n@@ -1137,7 +1122,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                IntVector av = IntVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MAX);\n-            }\n-        }\n-\n@@ -1151,2 +1129,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1156,1 +1133,1 @@\n-    public void MAXMasked(Blackhole bh) {\n+    public void MAXMaskedLanes(Blackhole bh) {\n@@ -1158,1 +1135,0 @@\n-        int[] r = fr.apply(SPECIES.length());\n@@ -1163,7 +1139,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                IntVector av = IntVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MAX, vmask);\n-            }\n-        }\n-\n@@ -1177,2 +1146,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1182,1 +1150,1 @@\n-    public void FIRST_NONZERO(Blackhole bh) {\n+    public void FIRST_NONZEROLanes(Blackhole bh) {\n@@ -1184,1 +1152,0 @@\n-        int[] r = fr.apply(SPECIES.length());\n@@ -1187,7 +1154,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                IntVector av = IntVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n-            }\n-        }\n-\n@@ -1201,2 +1161,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1206,1 +1165,1 @@\n-    public void FIRST_NONZEROMasked(Blackhole bh) {\n+    public void FIRST_NONZEROMaskedLanes(Blackhole bh) {\n@@ -1208,1 +1167,0 @@\n-        int[] r = fr.apply(SPECIES.length());\n@@ -1213,7 +1171,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                IntVector av = IntVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n-            }\n-        }\n-\n@@ -1227,2 +1178,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int128Vector.java","additions":16,"deletions":66,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -70,0 +70,4 @@\n+    static int firstNonZero(int a, int b) {\n+        return Integer.compare(a, (int) 0) != 0 ? a : b;\n+    }\n+\n@@ -1082,1 +1086,1 @@\n-    public void MIN(Blackhole bh) {\n+    public void MINLanes(Blackhole bh) {\n@@ -1084,1 +1088,0 @@\n-        int[] r = fr.apply(SPECIES.length());\n@@ -1087,7 +1090,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                IntVector av = IntVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MIN);\n-            }\n-        }\n-\n@@ -1101,2 +1097,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1106,1 +1101,1 @@\n-    public void MINMasked(Blackhole bh) {\n+    public void MINMaskedLanes(Blackhole bh) {\n@@ -1108,1 +1103,0 @@\n-        int[] r = fr.apply(SPECIES.length());\n@@ -1113,7 +1107,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                IntVector av = IntVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MIN, vmask);\n-            }\n-        }\n-\n@@ -1127,2 +1114,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1132,1 +1118,1 @@\n-    public void MAX(Blackhole bh) {\n+    public void MAXLanes(Blackhole bh) {\n@@ -1134,1 +1120,0 @@\n-        int[] r = fr.apply(SPECIES.length());\n@@ -1137,7 +1122,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                IntVector av = IntVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MAX);\n-            }\n-        }\n-\n@@ -1151,2 +1129,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1156,1 +1133,1 @@\n-    public void MAXMasked(Blackhole bh) {\n+    public void MAXMaskedLanes(Blackhole bh) {\n@@ -1158,1 +1135,0 @@\n-        int[] r = fr.apply(SPECIES.length());\n@@ -1163,7 +1139,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                IntVector av = IntVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MAX, vmask);\n-            }\n-        }\n-\n@@ -1177,2 +1146,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1182,1 +1150,1 @@\n-    public void FIRST_NONZERO(Blackhole bh) {\n+    public void FIRST_NONZEROLanes(Blackhole bh) {\n@@ -1184,1 +1152,0 @@\n-        int[] r = fr.apply(SPECIES.length());\n@@ -1187,7 +1154,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                IntVector av = IntVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n-            }\n-        }\n-\n@@ -1201,2 +1161,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1206,1 +1165,1 @@\n-    public void FIRST_NONZEROMasked(Blackhole bh) {\n+    public void FIRST_NONZEROMaskedLanes(Blackhole bh) {\n@@ -1208,1 +1167,0 @@\n-        int[] r = fr.apply(SPECIES.length());\n@@ -1213,7 +1171,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                IntVector av = IntVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n-            }\n-        }\n-\n@@ -1227,2 +1178,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int256Vector.java","additions":16,"deletions":66,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -70,0 +70,4 @@\n+    static int firstNonZero(int a, int b) {\n+        return Integer.compare(a, (int) 0) != 0 ? a : b;\n+    }\n+\n@@ -1082,1 +1086,1 @@\n-    public void MIN(Blackhole bh) {\n+    public void MINLanes(Blackhole bh) {\n@@ -1084,1 +1088,0 @@\n-        int[] r = fr.apply(SPECIES.length());\n@@ -1087,7 +1090,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                IntVector av = IntVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MIN);\n-            }\n-        }\n-\n@@ -1101,2 +1097,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1106,1 +1101,1 @@\n-    public void MINMasked(Blackhole bh) {\n+    public void MINMaskedLanes(Blackhole bh) {\n@@ -1108,1 +1103,0 @@\n-        int[] r = fr.apply(SPECIES.length());\n@@ -1113,7 +1107,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                IntVector av = IntVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MIN, vmask);\n-            }\n-        }\n-\n@@ -1127,2 +1114,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1132,1 +1118,1 @@\n-    public void MAX(Blackhole bh) {\n+    public void MAXLanes(Blackhole bh) {\n@@ -1134,1 +1120,0 @@\n-        int[] r = fr.apply(SPECIES.length());\n@@ -1137,7 +1122,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                IntVector av = IntVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MAX);\n-            }\n-        }\n-\n@@ -1151,2 +1129,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1156,1 +1133,1 @@\n-    public void MAXMasked(Blackhole bh) {\n+    public void MAXMaskedLanes(Blackhole bh) {\n@@ -1158,1 +1135,0 @@\n-        int[] r = fr.apply(SPECIES.length());\n@@ -1163,7 +1139,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                IntVector av = IntVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MAX, vmask);\n-            }\n-        }\n-\n@@ -1177,2 +1146,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1182,1 +1150,1 @@\n-    public void FIRST_NONZERO(Blackhole bh) {\n+    public void FIRST_NONZEROLanes(Blackhole bh) {\n@@ -1184,1 +1152,0 @@\n-        int[] r = fr.apply(SPECIES.length());\n@@ -1187,7 +1154,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                IntVector av = IntVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n-            }\n-        }\n-\n@@ -1201,2 +1161,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1206,1 +1165,1 @@\n-    public void FIRST_NONZEROMasked(Blackhole bh) {\n+    public void FIRST_NONZEROMaskedLanes(Blackhole bh) {\n@@ -1208,1 +1167,0 @@\n-        int[] r = fr.apply(SPECIES.length());\n@@ -1213,7 +1171,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                IntVector av = IntVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n-            }\n-        }\n-\n@@ -1227,2 +1178,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int512Vector.java","additions":16,"deletions":66,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -70,0 +70,4 @@\n+    static int firstNonZero(int a, int b) {\n+        return Integer.compare(a, (int) 0) != 0 ? a : b;\n+    }\n+\n@@ -1082,1 +1086,1 @@\n-    public void MIN(Blackhole bh) {\n+    public void MINLanes(Blackhole bh) {\n@@ -1084,1 +1088,0 @@\n-        int[] r = fr.apply(SPECIES.length());\n@@ -1087,7 +1090,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                IntVector av = IntVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MIN);\n-            }\n-        }\n-\n@@ -1101,2 +1097,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1106,1 +1101,1 @@\n-    public void MINMasked(Blackhole bh) {\n+    public void MINMaskedLanes(Blackhole bh) {\n@@ -1108,1 +1103,0 @@\n-        int[] r = fr.apply(SPECIES.length());\n@@ -1113,7 +1107,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                IntVector av = IntVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MIN, vmask);\n-            }\n-        }\n-\n@@ -1127,2 +1114,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1132,1 +1118,1 @@\n-    public void MAX(Blackhole bh) {\n+    public void MAXLanes(Blackhole bh) {\n@@ -1134,1 +1120,0 @@\n-        int[] r = fr.apply(SPECIES.length());\n@@ -1137,7 +1122,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                IntVector av = IntVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MAX);\n-            }\n-        }\n-\n@@ -1151,2 +1129,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1156,1 +1133,1 @@\n-    public void MAXMasked(Blackhole bh) {\n+    public void MAXMaskedLanes(Blackhole bh) {\n@@ -1158,1 +1135,0 @@\n-        int[] r = fr.apply(SPECIES.length());\n@@ -1163,7 +1139,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                IntVector av = IntVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MAX, vmask);\n-            }\n-        }\n-\n@@ -1177,2 +1146,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1182,1 +1150,1 @@\n-    public void FIRST_NONZERO(Blackhole bh) {\n+    public void FIRST_NONZEROLanes(Blackhole bh) {\n@@ -1184,1 +1152,0 @@\n-        int[] r = fr.apply(SPECIES.length());\n@@ -1187,7 +1154,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                IntVector av = IntVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n-            }\n-        }\n-\n@@ -1201,2 +1161,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1206,1 +1165,1 @@\n-    public void FIRST_NONZEROMasked(Blackhole bh) {\n+    public void FIRST_NONZEROMaskedLanes(Blackhole bh) {\n@@ -1208,1 +1167,0 @@\n-        int[] r = fr.apply(SPECIES.length());\n@@ -1213,7 +1171,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                IntVector av = IntVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n-            }\n-        }\n-\n@@ -1227,2 +1178,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int64Vector.java","additions":16,"deletions":66,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -70,0 +70,4 @@\n+    static int firstNonZero(int a, int b) {\n+        return Integer.compare(a, (int) 0) != 0 ? a : b;\n+    }\n+\n@@ -1082,1 +1086,1 @@\n-    public void MIN(Blackhole bh) {\n+    public void MINLanes(Blackhole bh) {\n@@ -1084,1 +1088,0 @@\n-        int[] r = fr.apply(SPECIES.length());\n@@ -1087,7 +1090,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                IntVector av = IntVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MIN);\n-            }\n-        }\n-\n@@ -1101,2 +1097,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1106,1 +1101,1 @@\n-    public void MINMasked(Blackhole bh) {\n+    public void MINMaskedLanes(Blackhole bh) {\n@@ -1108,1 +1103,0 @@\n-        int[] r = fr.apply(SPECIES.length());\n@@ -1113,7 +1107,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                IntVector av = IntVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MIN, vmask);\n-            }\n-        }\n-\n@@ -1127,2 +1114,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1132,1 +1118,1 @@\n-    public void MAX(Blackhole bh) {\n+    public void MAXLanes(Blackhole bh) {\n@@ -1134,1 +1120,0 @@\n-        int[] r = fr.apply(SPECIES.length());\n@@ -1137,7 +1122,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                IntVector av = IntVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MAX);\n-            }\n-        }\n-\n@@ -1151,2 +1129,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1156,1 +1133,1 @@\n-    public void MAXMasked(Blackhole bh) {\n+    public void MAXMaskedLanes(Blackhole bh) {\n@@ -1158,1 +1135,0 @@\n-        int[] r = fr.apply(SPECIES.length());\n@@ -1163,7 +1139,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                IntVector av = IntVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MAX, vmask);\n-            }\n-        }\n-\n@@ -1177,2 +1146,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1182,1 +1150,1 @@\n-    public void FIRST_NONZERO(Blackhole bh) {\n+    public void FIRST_NONZEROLanes(Blackhole bh) {\n@@ -1184,1 +1152,0 @@\n-        int[] r = fr.apply(SPECIES.length());\n@@ -1187,7 +1154,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                IntVector av = IntVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n-            }\n-        }\n-\n@@ -1201,2 +1161,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1206,1 +1165,1 @@\n-    public void FIRST_NONZEROMasked(Blackhole bh) {\n+    public void FIRST_NONZEROMaskedLanes(Blackhole bh) {\n@@ -1208,1 +1167,0 @@\n-        int[] r = fr.apply(SPECIES.length());\n@@ -1213,7 +1171,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                IntVector av = IntVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n-            }\n-        }\n-\n@@ -1227,2 +1178,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/IntMaxVector.java","additions":16,"deletions":66,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -70,0 +70,4 @@\n+    static long firstNonZero(long a, long b) {\n+        return Long.compare(a, (long) 0) != 0 ? a : b;\n+    }\n+\n@@ -1082,1 +1086,1 @@\n-    public void MIN(Blackhole bh) {\n+    public void MINLanes(Blackhole bh) {\n@@ -1084,1 +1088,0 @@\n-        long[] r = fr.apply(SPECIES.length());\n@@ -1087,7 +1090,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                LongVector av = LongVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MIN);\n-            }\n-        }\n-\n@@ -1101,2 +1097,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1106,1 +1101,1 @@\n-    public void MINMasked(Blackhole bh) {\n+    public void MINMaskedLanes(Blackhole bh) {\n@@ -1108,1 +1103,0 @@\n-        long[] r = fr.apply(SPECIES.length());\n@@ -1113,7 +1107,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                LongVector av = LongVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MIN, vmask);\n-            }\n-        }\n-\n@@ -1127,2 +1114,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1132,1 +1118,1 @@\n-    public void MAX(Blackhole bh) {\n+    public void MAXLanes(Blackhole bh) {\n@@ -1134,1 +1120,0 @@\n-        long[] r = fr.apply(SPECIES.length());\n@@ -1137,7 +1122,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                LongVector av = LongVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MAX);\n-            }\n-        }\n-\n@@ -1151,2 +1129,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1156,1 +1133,1 @@\n-    public void MAXMasked(Blackhole bh) {\n+    public void MAXMaskedLanes(Blackhole bh) {\n@@ -1158,1 +1135,0 @@\n-        long[] r = fr.apply(SPECIES.length());\n@@ -1163,7 +1139,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                LongVector av = LongVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MAX, vmask);\n-            }\n-        }\n-\n@@ -1177,2 +1146,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1182,1 +1150,1 @@\n-    public void FIRST_NONZERO(Blackhole bh) {\n+    public void FIRST_NONZEROLanes(Blackhole bh) {\n@@ -1184,1 +1152,0 @@\n-        long[] r = fr.apply(SPECIES.length());\n@@ -1187,7 +1154,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                LongVector av = LongVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n-            }\n-        }\n-\n@@ -1201,2 +1161,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1206,1 +1165,1 @@\n-    public void FIRST_NONZEROMasked(Blackhole bh) {\n+    public void FIRST_NONZEROMaskedLanes(Blackhole bh) {\n@@ -1208,1 +1167,0 @@\n-        long[] r = fr.apply(SPECIES.length());\n@@ -1213,7 +1171,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                LongVector av = LongVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n-            }\n-        }\n-\n@@ -1227,2 +1178,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long128Vector.java","additions":16,"deletions":66,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -70,0 +70,4 @@\n+    static long firstNonZero(long a, long b) {\n+        return Long.compare(a, (long) 0) != 0 ? a : b;\n+    }\n+\n@@ -1082,1 +1086,1 @@\n-    public void MIN(Blackhole bh) {\n+    public void MINLanes(Blackhole bh) {\n@@ -1084,1 +1088,0 @@\n-        long[] r = fr.apply(SPECIES.length());\n@@ -1087,7 +1090,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                LongVector av = LongVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MIN);\n-            }\n-        }\n-\n@@ -1101,2 +1097,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1106,1 +1101,1 @@\n-    public void MINMasked(Blackhole bh) {\n+    public void MINMaskedLanes(Blackhole bh) {\n@@ -1108,1 +1103,0 @@\n-        long[] r = fr.apply(SPECIES.length());\n@@ -1113,7 +1107,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                LongVector av = LongVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MIN, vmask);\n-            }\n-        }\n-\n@@ -1127,2 +1114,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1132,1 +1118,1 @@\n-    public void MAX(Blackhole bh) {\n+    public void MAXLanes(Blackhole bh) {\n@@ -1134,1 +1120,0 @@\n-        long[] r = fr.apply(SPECIES.length());\n@@ -1137,7 +1122,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                LongVector av = LongVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MAX);\n-            }\n-        }\n-\n@@ -1151,2 +1129,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1156,1 +1133,1 @@\n-    public void MAXMasked(Blackhole bh) {\n+    public void MAXMaskedLanes(Blackhole bh) {\n@@ -1158,1 +1135,0 @@\n-        long[] r = fr.apply(SPECIES.length());\n@@ -1163,7 +1139,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                LongVector av = LongVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MAX, vmask);\n-            }\n-        }\n-\n@@ -1177,2 +1146,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1182,1 +1150,1 @@\n-    public void FIRST_NONZERO(Blackhole bh) {\n+    public void FIRST_NONZEROLanes(Blackhole bh) {\n@@ -1184,1 +1152,0 @@\n-        long[] r = fr.apply(SPECIES.length());\n@@ -1187,7 +1154,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                LongVector av = LongVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n-            }\n-        }\n-\n@@ -1201,2 +1161,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1206,1 +1165,1 @@\n-    public void FIRST_NONZEROMasked(Blackhole bh) {\n+    public void FIRST_NONZEROMaskedLanes(Blackhole bh) {\n@@ -1208,1 +1167,0 @@\n-        long[] r = fr.apply(SPECIES.length());\n@@ -1213,7 +1171,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                LongVector av = LongVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n-            }\n-        }\n-\n@@ -1227,2 +1178,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long256Vector.java","additions":16,"deletions":66,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -70,0 +70,4 @@\n+    static long firstNonZero(long a, long b) {\n+        return Long.compare(a, (long) 0) != 0 ? a : b;\n+    }\n+\n@@ -1082,1 +1086,1 @@\n-    public void MIN(Blackhole bh) {\n+    public void MINLanes(Blackhole bh) {\n@@ -1084,1 +1088,0 @@\n-        long[] r = fr.apply(SPECIES.length());\n@@ -1087,7 +1090,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                LongVector av = LongVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MIN);\n-            }\n-        }\n-\n@@ -1101,2 +1097,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1106,1 +1101,1 @@\n-    public void MINMasked(Blackhole bh) {\n+    public void MINMaskedLanes(Blackhole bh) {\n@@ -1108,1 +1103,0 @@\n-        long[] r = fr.apply(SPECIES.length());\n@@ -1113,7 +1107,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                LongVector av = LongVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MIN, vmask);\n-            }\n-        }\n-\n@@ -1127,2 +1114,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1132,1 +1118,1 @@\n-    public void MAX(Blackhole bh) {\n+    public void MAXLanes(Blackhole bh) {\n@@ -1134,1 +1120,0 @@\n-        long[] r = fr.apply(SPECIES.length());\n@@ -1137,7 +1122,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                LongVector av = LongVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MAX);\n-            }\n-        }\n-\n@@ -1151,2 +1129,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1156,1 +1133,1 @@\n-    public void MAXMasked(Blackhole bh) {\n+    public void MAXMaskedLanes(Blackhole bh) {\n@@ -1158,1 +1135,0 @@\n-        long[] r = fr.apply(SPECIES.length());\n@@ -1163,7 +1139,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                LongVector av = LongVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MAX, vmask);\n-            }\n-        }\n-\n@@ -1177,2 +1146,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1182,1 +1150,1 @@\n-    public void FIRST_NONZERO(Blackhole bh) {\n+    public void FIRST_NONZEROLanes(Blackhole bh) {\n@@ -1184,1 +1152,0 @@\n-        long[] r = fr.apply(SPECIES.length());\n@@ -1187,7 +1154,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                LongVector av = LongVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n-            }\n-        }\n-\n@@ -1201,2 +1161,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1206,1 +1165,1 @@\n-    public void FIRST_NONZEROMasked(Blackhole bh) {\n+    public void FIRST_NONZEROMaskedLanes(Blackhole bh) {\n@@ -1208,1 +1167,0 @@\n-        long[] r = fr.apply(SPECIES.length());\n@@ -1213,7 +1171,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                LongVector av = LongVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n-            }\n-        }\n-\n@@ -1227,2 +1178,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long512Vector.java","additions":16,"deletions":66,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -70,0 +70,4 @@\n+    static long firstNonZero(long a, long b) {\n+        return Long.compare(a, (long) 0) != 0 ? a : b;\n+    }\n+\n@@ -1082,1 +1086,1 @@\n-    public void MIN(Blackhole bh) {\n+    public void MINLanes(Blackhole bh) {\n@@ -1084,1 +1088,0 @@\n-        long[] r = fr.apply(SPECIES.length());\n@@ -1087,7 +1090,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                LongVector av = LongVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MIN);\n-            }\n-        }\n-\n@@ -1101,2 +1097,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1106,1 +1101,1 @@\n-    public void MINMasked(Blackhole bh) {\n+    public void MINMaskedLanes(Blackhole bh) {\n@@ -1108,1 +1103,0 @@\n-        long[] r = fr.apply(SPECIES.length());\n@@ -1113,7 +1107,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                LongVector av = LongVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MIN, vmask);\n-            }\n-        }\n-\n@@ -1127,2 +1114,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1132,1 +1118,1 @@\n-    public void MAX(Blackhole bh) {\n+    public void MAXLanes(Blackhole bh) {\n@@ -1134,1 +1120,0 @@\n-        long[] r = fr.apply(SPECIES.length());\n@@ -1137,7 +1122,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                LongVector av = LongVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MAX);\n-            }\n-        }\n-\n@@ -1151,2 +1129,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1156,1 +1133,1 @@\n-    public void MAXMasked(Blackhole bh) {\n+    public void MAXMaskedLanes(Blackhole bh) {\n@@ -1158,1 +1135,0 @@\n-        long[] r = fr.apply(SPECIES.length());\n@@ -1163,7 +1139,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                LongVector av = LongVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MAX, vmask);\n-            }\n-        }\n-\n@@ -1177,2 +1146,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1182,1 +1150,1 @@\n-    public void FIRST_NONZERO(Blackhole bh) {\n+    public void FIRST_NONZEROLanes(Blackhole bh) {\n@@ -1184,1 +1152,0 @@\n-        long[] r = fr.apply(SPECIES.length());\n@@ -1187,7 +1154,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                LongVector av = LongVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n-            }\n-        }\n-\n@@ -1201,2 +1161,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1206,1 +1165,1 @@\n-    public void FIRST_NONZEROMasked(Blackhole bh) {\n+    public void FIRST_NONZEROMaskedLanes(Blackhole bh) {\n@@ -1208,1 +1167,0 @@\n-        long[] r = fr.apply(SPECIES.length());\n@@ -1213,7 +1171,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                LongVector av = LongVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n-            }\n-        }\n-\n@@ -1227,2 +1178,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long64Vector.java","additions":16,"deletions":66,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -70,0 +70,4 @@\n+    static long firstNonZero(long a, long b) {\n+        return Long.compare(a, (long) 0) != 0 ? a : b;\n+    }\n+\n@@ -1082,1 +1086,1 @@\n-    public void MIN(Blackhole bh) {\n+    public void MINLanes(Blackhole bh) {\n@@ -1084,1 +1088,0 @@\n-        long[] r = fr.apply(SPECIES.length());\n@@ -1087,7 +1090,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                LongVector av = LongVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MIN);\n-            }\n-        }\n-\n@@ -1101,2 +1097,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1106,1 +1101,1 @@\n-    public void MINMasked(Blackhole bh) {\n+    public void MINMaskedLanes(Blackhole bh) {\n@@ -1108,1 +1103,0 @@\n-        long[] r = fr.apply(SPECIES.length());\n@@ -1113,7 +1107,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                LongVector av = LongVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MIN, vmask);\n-            }\n-        }\n-\n@@ -1127,2 +1114,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1132,1 +1118,1 @@\n-    public void MAX(Blackhole bh) {\n+    public void MAXLanes(Blackhole bh) {\n@@ -1134,1 +1120,0 @@\n-        long[] r = fr.apply(SPECIES.length());\n@@ -1137,7 +1122,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                LongVector av = LongVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MAX);\n-            }\n-        }\n-\n@@ -1151,2 +1129,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1156,1 +1133,1 @@\n-    public void MAXMasked(Blackhole bh) {\n+    public void MAXMaskedLanes(Blackhole bh) {\n@@ -1158,1 +1135,0 @@\n-        long[] r = fr.apply(SPECIES.length());\n@@ -1163,7 +1139,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                LongVector av = LongVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MAX, vmask);\n-            }\n-        }\n-\n@@ -1177,2 +1146,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1182,1 +1150,1 @@\n-    public void FIRST_NONZERO(Blackhole bh) {\n+    public void FIRST_NONZEROLanes(Blackhole bh) {\n@@ -1184,1 +1152,0 @@\n-        long[] r = fr.apply(SPECIES.length());\n@@ -1187,7 +1154,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                LongVector av = LongVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n-            }\n-        }\n-\n@@ -1201,2 +1161,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1206,1 +1165,1 @@\n-    public void FIRST_NONZEROMasked(Blackhole bh) {\n+    public void FIRST_NONZEROMaskedLanes(Blackhole bh) {\n@@ -1208,1 +1167,0 @@\n-        long[] r = fr.apply(SPECIES.length());\n@@ -1213,7 +1171,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                LongVector av = LongVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n-            }\n-        }\n-\n@@ -1227,2 +1178,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/LongMaxVector.java","additions":16,"deletions":66,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -70,0 +70,4 @@\n+    static short firstNonZero(short a, short b) {\n+        return Short.compare(a, (short) 0) != 0 ? a : b;\n+    }\n+\n@@ -1082,1 +1086,1 @@\n-    public void MIN(Blackhole bh) {\n+    public void MINLanes(Blackhole bh) {\n@@ -1084,1 +1088,0 @@\n-        short[] r = fr.apply(SPECIES.length());\n@@ -1087,7 +1090,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MIN);\n-            }\n-        }\n-\n@@ -1101,2 +1097,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1106,1 +1101,1 @@\n-    public void MINMasked(Blackhole bh) {\n+    public void MINMaskedLanes(Blackhole bh) {\n@@ -1108,1 +1103,0 @@\n-        short[] r = fr.apply(SPECIES.length());\n@@ -1113,7 +1107,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MIN, vmask);\n-            }\n-        }\n-\n@@ -1127,2 +1114,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1132,1 +1118,1 @@\n-    public void MAX(Blackhole bh) {\n+    public void MAXLanes(Blackhole bh) {\n@@ -1134,1 +1120,0 @@\n-        short[] r = fr.apply(SPECIES.length());\n@@ -1137,7 +1122,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MAX);\n-            }\n-        }\n-\n@@ -1151,2 +1129,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1156,1 +1133,1 @@\n-    public void MAXMasked(Blackhole bh) {\n+    public void MAXMaskedLanes(Blackhole bh) {\n@@ -1158,1 +1135,0 @@\n-        short[] r = fr.apply(SPECIES.length());\n@@ -1163,7 +1139,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MAX, vmask);\n-            }\n-        }\n-\n@@ -1177,2 +1146,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1182,1 +1150,1 @@\n-    public void FIRST_NONZERO(Blackhole bh) {\n+    public void FIRST_NONZEROLanes(Blackhole bh) {\n@@ -1184,1 +1152,0 @@\n-        short[] r = fr.apply(SPECIES.length());\n@@ -1187,7 +1154,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n-            }\n-        }\n-\n@@ -1201,2 +1161,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1206,1 +1165,1 @@\n-    public void FIRST_NONZEROMasked(Blackhole bh) {\n+    public void FIRST_NONZEROMaskedLanes(Blackhole bh) {\n@@ -1208,1 +1167,0 @@\n-        short[] r = fr.apply(SPECIES.length());\n@@ -1213,7 +1171,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n-            }\n-        }\n-\n@@ -1227,2 +1178,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short128Vector.java","additions":16,"deletions":66,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -70,0 +70,4 @@\n+    static short firstNonZero(short a, short b) {\n+        return Short.compare(a, (short) 0) != 0 ? a : b;\n+    }\n+\n@@ -1082,1 +1086,1 @@\n-    public void MIN(Blackhole bh) {\n+    public void MINLanes(Blackhole bh) {\n@@ -1084,1 +1088,0 @@\n-        short[] r = fr.apply(SPECIES.length());\n@@ -1087,7 +1090,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MIN);\n-            }\n-        }\n-\n@@ -1101,2 +1097,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1106,1 +1101,1 @@\n-    public void MINMasked(Blackhole bh) {\n+    public void MINMaskedLanes(Blackhole bh) {\n@@ -1108,1 +1103,0 @@\n-        short[] r = fr.apply(SPECIES.length());\n@@ -1113,7 +1107,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MIN, vmask);\n-            }\n-        }\n-\n@@ -1127,2 +1114,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1132,1 +1118,1 @@\n-    public void MAX(Blackhole bh) {\n+    public void MAXLanes(Blackhole bh) {\n@@ -1134,1 +1120,0 @@\n-        short[] r = fr.apply(SPECIES.length());\n@@ -1137,7 +1122,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MAX);\n-            }\n-        }\n-\n@@ -1151,2 +1129,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1156,1 +1133,1 @@\n-    public void MAXMasked(Blackhole bh) {\n+    public void MAXMaskedLanes(Blackhole bh) {\n@@ -1158,1 +1135,0 @@\n-        short[] r = fr.apply(SPECIES.length());\n@@ -1163,7 +1139,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MAX, vmask);\n-            }\n-        }\n-\n@@ -1177,2 +1146,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1182,1 +1150,1 @@\n-    public void FIRST_NONZERO(Blackhole bh) {\n+    public void FIRST_NONZEROLanes(Blackhole bh) {\n@@ -1184,1 +1152,0 @@\n-        short[] r = fr.apply(SPECIES.length());\n@@ -1187,7 +1154,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n-            }\n-        }\n-\n@@ -1201,2 +1161,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1206,1 +1165,1 @@\n-    public void FIRST_NONZEROMasked(Blackhole bh) {\n+    public void FIRST_NONZEROMaskedLanes(Blackhole bh) {\n@@ -1208,1 +1167,0 @@\n-        short[] r = fr.apply(SPECIES.length());\n@@ -1213,7 +1171,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n-            }\n-        }\n-\n@@ -1227,2 +1178,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short256Vector.java","additions":16,"deletions":66,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -70,0 +70,4 @@\n+    static short firstNonZero(short a, short b) {\n+        return Short.compare(a, (short) 0) != 0 ? a : b;\n+    }\n+\n@@ -1082,1 +1086,1 @@\n-    public void MIN(Blackhole bh) {\n+    public void MINLanes(Blackhole bh) {\n@@ -1084,1 +1088,0 @@\n-        short[] r = fr.apply(SPECIES.length());\n@@ -1087,7 +1090,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MIN);\n-            }\n-        }\n-\n@@ -1101,2 +1097,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1106,1 +1101,1 @@\n-    public void MINMasked(Blackhole bh) {\n+    public void MINMaskedLanes(Blackhole bh) {\n@@ -1108,1 +1103,0 @@\n-        short[] r = fr.apply(SPECIES.length());\n@@ -1113,7 +1107,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MIN, vmask);\n-            }\n-        }\n-\n@@ -1127,2 +1114,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1132,1 +1118,1 @@\n-    public void MAX(Blackhole bh) {\n+    public void MAXLanes(Blackhole bh) {\n@@ -1134,1 +1120,0 @@\n-        short[] r = fr.apply(SPECIES.length());\n@@ -1137,7 +1122,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MAX);\n-            }\n-        }\n-\n@@ -1151,2 +1129,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1156,1 +1133,1 @@\n-    public void MAXMasked(Blackhole bh) {\n+    public void MAXMaskedLanes(Blackhole bh) {\n@@ -1158,1 +1135,0 @@\n-        short[] r = fr.apply(SPECIES.length());\n@@ -1163,7 +1139,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MAX, vmask);\n-            }\n-        }\n-\n@@ -1177,2 +1146,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1182,1 +1150,1 @@\n-    public void FIRST_NONZERO(Blackhole bh) {\n+    public void FIRST_NONZEROLanes(Blackhole bh) {\n@@ -1184,1 +1152,0 @@\n-        short[] r = fr.apply(SPECIES.length());\n@@ -1187,7 +1154,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n-            }\n-        }\n-\n@@ -1201,2 +1161,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1206,1 +1165,1 @@\n-    public void FIRST_NONZEROMasked(Blackhole bh) {\n+    public void FIRST_NONZEROMaskedLanes(Blackhole bh) {\n@@ -1208,1 +1167,0 @@\n-        short[] r = fr.apply(SPECIES.length());\n@@ -1213,7 +1171,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n-            }\n-        }\n-\n@@ -1227,2 +1178,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short512Vector.java","additions":16,"deletions":66,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -70,0 +70,4 @@\n+    static short firstNonZero(short a, short b) {\n+        return Short.compare(a, (short) 0) != 0 ? a : b;\n+    }\n+\n@@ -1082,1 +1086,1 @@\n-    public void MIN(Blackhole bh) {\n+    public void MINLanes(Blackhole bh) {\n@@ -1084,1 +1088,0 @@\n-        short[] r = fr.apply(SPECIES.length());\n@@ -1087,7 +1090,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MIN);\n-            }\n-        }\n-\n@@ -1101,2 +1097,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1106,1 +1101,1 @@\n-    public void MINMasked(Blackhole bh) {\n+    public void MINMaskedLanes(Blackhole bh) {\n@@ -1108,1 +1103,0 @@\n-        short[] r = fr.apply(SPECIES.length());\n@@ -1113,7 +1107,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MIN, vmask);\n-            }\n-        }\n-\n@@ -1127,2 +1114,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1132,1 +1118,1 @@\n-    public void MAX(Blackhole bh) {\n+    public void MAXLanes(Blackhole bh) {\n@@ -1134,1 +1120,0 @@\n-        short[] r = fr.apply(SPECIES.length());\n@@ -1137,7 +1122,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MAX);\n-            }\n-        }\n-\n@@ -1151,2 +1129,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1156,1 +1133,1 @@\n-    public void MAXMasked(Blackhole bh) {\n+    public void MAXMaskedLanes(Blackhole bh) {\n@@ -1158,1 +1135,0 @@\n-        short[] r = fr.apply(SPECIES.length());\n@@ -1163,7 +1139,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MAX, vmask);\n-            }\n-        }\n-\n@@ -1177,2 +1146,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1182,1 +1150,1 @@\n-    public void FIRST_NONZERO(Blackhole bh) {\n+    public void FIRST_NONZEROLanes(Blackhole bh) {\n@@ -1184,1 +1152,0 @@\n-        short[] r = fr.apply(SPECIES.length());\n@@ -1187,7 +1154,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n-            }\n-        }\n-\n@@ -1201,2 +1161,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1206,1 +1165,1 @@\n-    public void FIRST_NONZEROMasked(Blackhole bh) {\n+    public void FIRST_NONZEROMaskedLanes(Blackhole bh) {\n@@ -1208,1 +1167,0 @@\n-        short[] r = fr.apply(SPECIES.length());\n@@ -1213,7 +1171,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n-            }\n-        }\n-\n@@ -1227,2 +1178,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short64Vector.java","additions":16,"deletions":66,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -70,0 +70,4 @@\n+    static short firstNonZero(short a, short b) {\n+        return Short.compare(a, (short) 0) != 0 ? a : b;\n+    }\n+\n@@ -1082,1 +1086,1 @@\n-    public void MIN(Blackhole bh) {\n+    public void MINLanes(Blackhole bh) {\n@@ -1084,1 +1088,0 @@\n-        short[] r = fr.apply(SPECIES.length());\n@@ -1087,7 +1090,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MIN);\n-            }\n-        }\n-\n@@ -1101,2 +1097,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1106,1 +1101,1 @@\n-    public void MINMasked(Blackhole bh) {\n+    public void MINMaskedLanes(Blackhole bh) {\n@@ -1108,1 +1103,0 @@\n-        short[] r = fr.apply(SPECIES.length());\n@@ -1113,7 +1107,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MIN, vmask);\n-            }\n-        }\n-\n@@ -1127,2 +1114,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1132,1 +1118,1 @@\n-    public void MAX(Blackhole bh) {\n+    public void MAXLanes(Blackhole bh) {\n@@ -1134,1 +1120,0 @@\n-        short[] r = fr.apply(SPECIES.length());\n@@ -1137,7 +1122,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MAX);\n-            }\n-        }\n-\n@@ -1151,2 +1129,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1156,1 +1133,1 @@\n-    public void MAXMasked(Blackhole bh) {\n+    public void MAXMaskedLanes(Blackhole bh) {\n@@ -1158,1 +1135,0 @@\n-        short[] r = fr.apply(SPECIES.length());\n@@ -1163,7 +1139,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.MAX, vmask);\n-            }\n-        }\n-\n@@ -1177,2 +1146,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1182,1 +1150,1 @@\n-    public void FIRST_NONZERO(Blackhole bh) {\n+    public void FIRST_NONZEROLanes(Blackhole bh) {\n@@ -1184,1 +1152,0 @@\n-        short[] r = fr.apply(SPECIES.length());\n@@ -1187,7 +1154,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n-            }\n-        }\n-\n@@ -1201,2 +1161,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n@@ -1206,1 +1165,1 @@\n-    public void FIRST_NONZEROMasked(Blackhole bh) {\n+    public void FIRST_NONZEROMaskedLanes(Blackhole bh) {\n@@ -1208,1 +1167,0 @@\n-        short[] r = fr.apply(SPECIES.length());\n@@ -1213,7 +1171,0 @@\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n-            }\n-        }\n-\n@@ -1227,2 +1178,1 @@\n-\n-        bh.consume(r);\n+        bh.consume(ra);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ShortMaxVector.java","additions":16,"deletions":66,"binary":false,"changes":82,"status":"modified"}]}