{"files":[{"patch":"@@ -3440,30 +3440,0 @@\n-instruct insertL(vReg dst, vReg src, iRegL val, immI idx, vReg tmp1, vReg tmp2, pRegGov pTmp, rFlagsReg cr)\n-%{\n-  predicate(UseSVE > 0 && n->as_Vector()->length() > 32 &&\n-            n->bottom_type()->is_vect()->element_basic_type() == T_LONG);\n-  match(Set dst (VectorInsert (Binary src val) idx));\n-  effect(TEMP tmp1, TEMP tmp2, TEMP pTmp, KILL cr);\n-  ins_cost(5 * SVE_COST);\n-  format %{ \"sve_index $tmp1, D, 0, 1\\n\\t\"\n-            \"sve_dup $tmp2, D, $idx\\n\\t\"\n-            \"sve_cmpeq $pTmp, $tmp1, $tmp2\\n\\t\"\n-            \"sve_orr $dst, $src, $src\\n\\t\"\n-            \"sve_cpy $dst, $pTmp, $val\\n\\t# insert into vector (L)\" %}\n-  ins_encode %{\n-    __ sve_index(as_FloatRegister($tmp1$$reg), __ D, 0, 1);\n-    __ sve_dup(as_FloatRegister($tmp2$$reg), __ D, (int)($idx$$constant));\n-    __ sve_cmpeq(as_PRegister($pTmp$$reg), __ D, ptrue,\n-                 as_FloatRegister($tmp1$$reg), as_FloatRegister($tmp2$$reg));\n-    \/\/ If src and dst are the same reg, this move is not needed.\n-    if (as_FloatRegister($dst$$reg) != as_FloatRegister($src$$reg)) {\n-      __ sve_orr(as_FloatRegister($dst$$reg),\n-             as_FloatRegister($src$$reg),\n-             as_FloatRegister($src$$reg));\n-    }\n-    __ sve_cpy(as_FloatRegister($dst$$reg), __ D,\n-               as_PRegister($pTmp$$reg), as_Register($val$$reg));\n-\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n@@ -3499,30 +3469,0 @@\n-\n-instruct insertD(vReg dst, vReg src, vRegD val, immI idx, vReg tmp1, vReg tmp2, pRegGov pTmp, rFlagsReg cr)\n-%{\n-  predicate(UseSVE > 0 && n->as_Vector()->length() > 32 &&\n-            n->bottom_type()->is_vect()->element_basic_type() == T_DOUBLE);\n-  match(Set dst (VectorInsert (Binary src val) idx));\n-  effect(TEMP tmp1, TEMP tmp2, TEMP pTmp, KILL cr);\n-  ins_cost(5 * SVE_COST);\n-  format %{ \"sve_index $tmp1, D, 0, 1\\n\\t\"\n-            \"sve_dup $tmp2, D, $idx\\n\\t\"\n-            \"sve_cmpeq $pTmp, $tmp1, $tmp2\\n\\t\"\n-            \"sve_orr $dst, $src, $src\\n\\t\"\n-            \"sve_cpy $dst, $pTmp, $val\\n\\t# insert into vector (D)\" %}\n-  ins_encode %{\n-    __ sve_index(as_FloatRegister($tmp1$$reg), __ D, 0, 1);\n-    __ sve_dup(as_FloatRegister($tmp2$$reg), __ D, (int)($idx$$constant));\n-    __ sve_cmpeq(as_PRegister($pTmp$$reg), __ D, ptrue,\n-                 as_FloatRegister($tmp1$$reg), as_FloatRegister($tmp2$$reg));\n-    \/\/ If src and dst are the same reg, this move is not needed.\n-    if (as_FloatRegister($dst$$reg) != as_FloatRegister($src$$reg)) {\n-      __ sve_orr(as_FloatRegister($dst$$reg),\n-             as_FloatRegister($src$$reg),\n-             as_FloatRegister($src$$reg));\n-    }\n-    __ sve_cpy(as_FloatRegister($dst$$reg), __ D,\n-               as_PRegister($pTmp$$reg), as_FloatRegister($val$$reg));\n-\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve.ad","additions":0,"deletions":60,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -1958,1 +1958,0 @@\n-VECTOR_INSERT(L, iRegL,      D, Register)\n@@ -1960,1 +1959,0 @@\n-VECTOR_INSERT(D, vRegD,      D, FloatRegister)\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve_ad.m4","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}