{"files":[{"patch":"@@ -3181,1 +3181,1 @@\n-instruct insertB(vReg dst, vReg src, iRegIorL2I val, immI idx, vReg tmp, vReg tmp2, pRegGov pTmp, rFlagsReg cr)\n+instruct insertB_fast(vReg dst, vReg src, iRegIorL2I val, immI idx, vReg tmp, pRegGov pTmp, rFlagsReg cr)\n@@ -3183,1 +3183,1 @@\n-  predicate(UseSVE > 0 &&\n+  predicate(UseSVE > 0 && n->as_Vector()->length() <= 32 &&\n@@ -3186,1 +3186,170 @@\n-  effect(TEMP tmp, TEMP tmp2, TEMP pTmp, KILL cr);\n+  effect(TEMP tmp, TEMP pTmp, KILL cr);\n+  ins_cost(4 * SVE_COST);\n+  format %{ \"sve_index $tmp, B, -16, 1\\n\\t\"\n+            \"sve_cmpeq $pTmp, $tmp, ($idx-#16) \/\/ shift from [0, 31] to [-16, 15]\\n\\t\"\n+            \"sve_orr $dst, $src, $src\\n\\t\"\n+            \"sve_cpy $dst, $pTmp, $val\\n\\t# insert into vector (B)\" %}\n+  ins_encode %{\n+    __ sve_index(as_FloatRegister($tmp$$reg), __ B, -16, 1);\n+    __ sve_cmpeq(as_PRegister($pTmp$$reg), __ B, ptrue,\n+                 as_FloatRegister($tmp$$reg), (int)($idx$$constant) - 16);\n+    \/\/ If src and dst are the same reg, this move is not needed.\n+    if (as_FloatRegister($dst$$reg) != as_FloatRegister($src$$reg)) {\n+      __ sve_orr(as_FloatRegister($dst$$reg),\n+             as_FloatRegister($src$$reg),\n+             as_FloatRegister($src$$reg));\n+    }\n+    __ sve_cpy(as_FloatRegister($dst$$reg), __ B,\n+               as_PRegister($pTmp$$reg), as_Register($val$$reg));\n+\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct insertS_fast(vReg dst, vReg src, iRegIorL2I val, immI idx, vReg tmp, pRegGov pTmp, rFlagsReg cr)\n+%{\n+  predicate(UseSVE > 0 && n->as_Vector()->length() <= 32 &&\n+            n->bottom_type()->is_vect()->element_basic_type() == T_SHORT);\n+  match(Set dst (VectorInsert (Binary src val) idx));\n+  effect(TEMP tmp, TEMP pTmp, KILL cr);\n+  ins_cost(4 * SVE_COST);\n+  format %{ \"sve_index $tmp, H, -16, 1\\n\\t\"\n+            \"sve_cmpeq $pTmp, $tmp, ($idx-#16) \/\/ shift from [0, 31] to [-16, 15]\\n\\t\"\n+            \"sve_orr $dst, $src, $src\\n\\t\"\n+            \"sve_cpy $dst, $pTmp, $val\\n\\t# insert into vector (S)\" %}\n+  ins_encode %{\n+    __ sve_index(as_FloatRegister($tmp$$reg), __ H, -16, 1);\n+    __ sve_cmpeq(as_PRegister($pTmp$$reg), __ H, ptrue,\n+                 as_FloatRegister($tmp$$reg), (int)($idx$$constant) - 16);\n+    \/\/ If src and dst are the same reg, this move is not needed.\n+    if (as_FloatRegister($dst$$reg) != as_FloatRegister($src$$reg)) {\n+      __ sve_orr(as_FloatRegister($dst$$reg),\n+             as_FloatRegister($src$$reg),\n+             as_FloatRegister($src$$reg));\n+    }\n+    __ sve_cpy(as_FloatRegister($dst$$reg), __ H,\n+               as_PRegister($pTmp$$reg), as_Register($val$$reg));\n+\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct insertI_fast(vReg dst, vReg src, iRegIorL2I val, immI idx, vReg tmp, pRegGov pTmp, rFlagsReg cr)\n+%{\n+  predicate(UseSVE > 0 && n->as_Vector()->length() <= 32 &&\n+            n->bottom_type()->is_vect()->element_basic_type() == T_INT);\n+  match(Set dst (VectorInsert (Binary src val) idx));\n+  effect(TEMP tmp, TEMP pTmp, KILL cr);\n+  ins_cost(4 * SVE_COST);\n+  format %{ \"sve_index $tmp, S, -16, 1\\n\\t\"\n+            \"sve_cmpeq $pTmp, $tmp, ($idx-#16) \/\/ shift from [0, 31] to [-16, 15]\\n\\t\"\n+            \"sve_orr $dst, $src, $src\\n\\t\"\n+            \"sve_cpy $dst, $pTmp, $val\\n\\t# insert into vector (I)\" %}\n+  ins_encode %{\n+    __ sve_index(as_FloatRegister($tmp$$reg), __ S, -16, 1);\n+    __ sve_cmpeq(as_PRegister($pTmp$$reg), __ S, ptrue,\n+                 as_FloatRegister($tmp$$reg), (int)($idx$$constant) - 16);\n+    \/\/ If src and dst are the same reg, this move is not needed.\n+    if (as_FloatRegister($dst$$reg) != as_FloatRegister($src$$reg)) {\n+      __ sve_orr(as_FloatRegister($dst$$reg),\n+             as_FloatRegister($src$$reg),\n+             as_FloatRegister($src$$reg));\n+    }\n+    __ sve_cpy(as_FloatRegister($dst$$reg), __ S,\n+               as_PRegister($pTmp$$reg), as_Register($val$$reg));\n+\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct insertL_fast(vReg dst, vReg src, iRegL val, immI idx, vReg tmp, pRegGov pTmp, rFlagsReg cr)\n+%{\n+  predicate(UseSVE > 0 && n->as_Vector()->length() <= 32 &&\n+            n->bottom_type()->is_vect()->element_basic_type() == T_LONG);\n+  match(Set dst (VectorInsert (Binary src val) idx));\n+  effect(TEMP tmp, TEMP pTmp, KILL cr);\n+  ins_cost(4 * SVE_COST);\n+  format %{ \"sve_index $tmp, D, -16, 1\\n\\t\"\n+            \"sve_cmpeq $pTmp, $tmp, ($idx-#16) \/\/ shift from [0, 31] to [-16, 15]\\n\\t\"\n+            \"sve_orr $dst, $src, $src\\n\\t\"\n+            \"sve_cpy $dst, $pTmp, $val\\n\\t# insert into vector (L)\" %}\n+  ins_encode %{\n+    __ sve_index(as_FloatRegister($tmp$$reg), __ D, -16, 1);\n+    __ sve_cmpeq(as_PRegister($pTmp$$reg), __ D, ptrue,\n+                 as_FloatRegister($tmp$$reg), (int)($idx$$constant) - 16);\n+    \/\/ If src and dst are the same reg, this move is not needed.\n+    if (as_FloatRegister($dst$$reg) != as_FloatRegister($src$$reg)) {\n+      __ sve_orr(as_FloatRegister($dst$$reg),\n+             as_FloatRegister($src$$reg),\n+             as_FloatRegister($src$$reg));\n+    }\n+    __ sve_cpy(as_FloatRegister($dst$$reg), __ D,\n+               as_PRegister($pTmp$$reg), as_Register($val$$reg));\n+\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct insertF_fast(vReg dst, vReg src, vRegF val, immI idx, vReg tmp, pRegGov pTmp, rFlagsReg cr)\n+%{\n+  predicate(UseSVE > 0 && n->as_Vector()->length() <= 32 &&\n+            n->bottom_type()->is_vect()->element_basic_type() == T_FLOAT);\n+  match(Set dst (VectorInsert (Binary src val) idx));\n+  effect(TEMP tmp, TEMP pTmp, KILL cr);\n+  ins_cost(4 * SVE_COST);\n+  format %{ \"sve_index $tmp, S, -16, 1\\n\\t\"\n+            \"sve_cmpeq $pTmp, $tmp, ($idx-#16) \/\/ shift from [0, 31] to [-16, 15]\\n\\t\"\n+            \"sve_orr $dst, $src, $src\\n\\t\"\n+            \"sve_cpy $dst, $pTmp, $val\\n\\t# insert into vector (F)\" %}\n+  ins_encode %{\n+    __ sve_index(as_FloatRegister($tmp$$reg), __ S, -16, 1);\n+    __ sve_cmpeq(as_PRegister($pTmp$$reg), __ S, ptrue,\n+                 as_FloatRegister($tmp$$reg), (int)($idx$$constant) - 16);\n+    \/\/ If src and dst are the same reg, this move is not needed.\n+    if (as_FloatRegister($dst$$reg) != as_FloatRegister($src$$reg)) {\n+      __ sve_orr(as_FloatRegister($dst$$reg),\n+             as_FloatRegister($src$$reg),\n+             as_FloatRegister($src$$reg));\n+    }\n+    __ sve_cpy(as_FloatRegister($dst$$reg), __ S,\n+               as_PRegister($pTmp$$reg), as_FloatRegister($val$$reg));\n+\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct insertD_fast(vReg dst, vReg src, vRegD val, immI idx, vReg tmp, pRegGov pTmp, rFlagsReg cr)\n+%{\n+  predicate(UseSVE > 0 && n->as_Vector()->length() <= 32 &&\n+            n->bottom_type()->is_vect()->element_basic_type() == T_DOUBLE);\n+  match(Set dst (VectorInsert (Binary src val) idx));\n+  effect(TEMP tmp, TEMP pTmp, KILL cr);\n+  ins_cost(4 * SVE_COST);\n+  format %{ \"sve_index $tmp, D, -16, 1\\n\\t\"\n+            \"sve_cmpeq $pTmp, $tmp, ($idx-#16) \/\/ shift from [0, 31] to [-16, 15]\\n\\t\"\n+            \"sve_orr $dst, $src, $src\\n\\t\"\n+            \"sve_cpy $dst, $pTmp, $val\\n\\t# insert into vector (D)\" %}\n+  ins_encode %{\n+    __ sve_index(as_FloatRegister($tmp$$reg), __ D, -16, 1);\n+    __ sve_cmpeq(as_PRegister($pTmp$$reg), __ D, ptrue,\n+                 as_FloatRegister($tmp$$reg), (int)($idx$$constant) - 16);\n+    \/\/ If src and dst are the same reg, this move is not needed.\n+    if (as_FloatRegister($dst$$reg) != as_FloatRegister($src$$reg)) {\n+      __ sve_orr(as_FloatRegister($dst$$reg),\n+             as_FloatRegister($src$$reg),\n+             as_FloatRegister($src$$reg));\n+    }\n+    __ sve_cpy(as_FloatRegister($dst$$reg), __ D,\n+               as_PRegister($pTmp$$reg), as_FloatRegister($val$$reg));\n+\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\n+instruct insertB(vReg dst, vReg src, iRegIorL2I val, immI idx, vReg tmp1, vReg tmp2, pRegGov pTmp, rFlagsReg cr)\n+%{\n+  predicate(UseSVE > 0 && n->as_Vector()->length() > 32 &&\n+            n->bottom_type()->is_vect()->element_basic_type() == T_BYTE);\n+  match(Set dst (VectorInsert (Binary src val) idx));\n+  effect(TEMP tmp1, TEMP tmp2, TEMP pTmp, KILL cr);\n@@ -3188,1 +3357,1 @@\n-  format %{ \"sve_index $tmp, B, 0, 1\\n\\t\"\n+  format %{ \"sve_index $tmp1, B, 0, 1\\n\\t\"\n@@ -3190,1 +3359,1 @@\n-            \"sve_cmpeq $pTmp, $tmp, $tmp2\\n\\t\"\n+            \"sve_cmpeq $pTmp, $tmp1, $tmp2\\n\\t\"\n@@ -3194,3 +3363,1 @@\n-    Assembler::SIMD_RegVariant size =\n-              elemType_to_regVariant(vector_element_basic_type(this));\n-    __ sve_index(as_FloatRegister($tmp$$reg), __ B, 0, 1);\n+    __ sve_index(as_FloatRegister($tmp1$$reg), __ B, 0, 1);\n@@ -3198,2 +3365,2 @@\n-    __ sve_cmpeq(as_PRegister($pTmp$$reg), size, ptrue,\n-                 as_FloatRegister($tmp$$reg), as_FloatRegister($tmp2$$reg));\n+    __ sve_cmpeq(as_PRegister($pTmp$$reg), __ B, ptrue,\n+                 as_FloatRegister($tmp1$$reg), as_FloatRegister($tmp2$$reg));\n@@ -3213,1 +3380,1 @@\n-instruct insertS(vReg dst, vReg src, iRegIorL2I val, immI idx, vReg tmp, vReg tmp2, pRegGov pTmp, rFlagsReg cr)\n+instruct insertS(vReg dst, vReg src, iRegIorL2I val, immI idx, vReg tmp1, vReg tmp2, pRegGov pTmp, rFlagsReg cr)\n@@ -3215,1 +3382,1 @@\n-  predicate(UseSVE > 0 &&\n+  predicate(UseSVE > 0 && n->as_Vector()->length() > 32 &&\n@@ -3218,1 +3385,1 @@\n-  effect(TEMP tmp, TEMP tmp2, TEMP pTmp, KILL cr);\n+  effect(TEMP tmp1, TEMP tmp2, TEMP pTmp, KILL cr);\n@@ -3220,1 +3387,1 @@\n-  format %{ \"sve_index $tmp, H, 0, 1\\n\\t\"\n+  format %{ \"sve_index $tmp1, H, 0, 1\\n\\t\"\n@@ -3222,1 +3389,1 @@\n-            \"sve_cmpeq $pTmp, $tmp, $tmp2\\n\\t\"\n+            \"sve_cmpeq $pTmp, $tmp1, $tmp2\\n\\t\"\n@@ -3226,3 +3393,1 @@\n-    Assembler::SIMD_RegVariant size =\n-              elemType_to_regVariant(vector_element_basic_type(this));\n-    __ sve_index(as_FloatRegister($tmp$$reg), __ H, 0, 1);\n+    __ sve_index(as_FloatRegister($tmp1$$reg), __ H, 0, 1);\n@@ -3230,2 +3395,2 @@\n-    __ sve_cmpeq(as_PRegister($pTmp$$reg), size, ptrue,\n-                 as_FloatRegister($tmp$$reg), as_FloatRegister($tmp2$$reg));\n+    __ sve_cmpeq(as_PRegister($pTmp$$reg), __ H, ptrue,\n+                 as_FloatRegister($tmp1$$reg), as_FloatRegister($tmp2$$reg));\n@@ -3245,1 +3410,1 @@\n-instruct insertI(vReg dst, vReg src, iRegIorL2I val, immI idx, vReg tmp, vReg tmp2, pRegGov pTmp, rFlagsReg cr)\n+instruct insertI(vReg dst, vReg src, iRegIorL2I val, immI idx, vReg tmp1, vReg tmp2, pRegGov pTmp, rFlagsReg cr)\n@@ -3247,1 +3412,1 @@\n-  predicate(UseSVE > 0 &&\n+  predicate(UseSVE > 0 && n->as_Vector()->length() > 32 &&\n@@ -3250,1 +3415,1 @@\n-  effect(TEMP tmp, TEMP tmp2, TEMP pTmp, KILL cr);\n+  effect(TEMP tmp1, TEMP tmp2, TEMP pTmp, KILL cr);\n@@ -3252,1 +3417,1 @@\n-  format %{ \"sve_index $tmp, S, 0, 1\\n\\t\"\n+  format %{ \"sve_index $tmp1, S, 0, 1\\n\\t\"\n@@ -3254,1 +3419,1 @@\n-            \"sve_cmpeq $pTmp, $tmp, $tmp2\\n\\t\"\n+            \"sve_cmpeq $pTmp, $tmp1, $tmp2\\n\\t\"\n@@ -3258,3 +3423,1 @@\n-    Assembler::SIMD_RegVariant size =\n-              elemType_to_regVariant(vector_element_basic_type(this));\n-    __ sve_index(as_FloatRegister($tmp$$reg), __ S, 0, 1);\n+    __ sve_index(as_FloatRegister($tmp1$$reg), __ S, 0, 1);\n@@ -3262,2 +3425,2 @@\n-    __ sve_cmpeq(as_PRegister($pTmp$$reg), size, ptrue,\n-                 as_FloatRegister($tmp$$reg), as_FloatRegister($tmp2$$reg));\n+    __ sve_cmpeq(as_PRegister($pTmp$$reg), __ S, ptrue,\n+                 as_FloatRegister($tmp1$$reg), as_FloatRegister($tmp2$$reg));\n@@ -3277,1 +3440,1 @@\n-instruct insertL(vReg dst, vReg src, iRegL val, immI idx, vReg tmp, vReg tmp2, pRegGov pTmp, rFlagsReg cr)\n+instruct insertL(vReg dst, vReg src, iRegL val, immI idx, vReg tmp1, vReg tmp2, pRegGov pTmp, rFlagsReg cr)\n@@ -3279,1 +3442,1 @@\n-  predicate(UseSVE > 0 &&\n+  predicate(UseSVE > 0 && n->as_Vector()->length() > 32 &&\n@@ -3282,1 +3445,1 @@\n-  effect(TEMP tmp, TEMP tmp2, TEMP pTmp, KILL cr);\n+  effect(TEMP tmp1, TEMP tmp2, TEMP pTmp, KILL cr);\n@@ -3284,1 +3447,1 @@\n-  format %{ \"sve_index $tmp, D, 0, 1\\n\\t\"\n+  format %{ \"sve_index $tmp1, D, 0, 1\\n\\t\"\n@@ -3286,1 +3449,1 @@\n-            \"sve_cmpeq $pTmp, $tmp, $tmp2\\n\\t\"\n+            \"sve_cmpeq $pTmp, $tmp1, $tmp2\\n\\t\"\n@@ -3290,3 +3453,1 @@\n-    Assembler::SIMD_RegVariant size =\n-              elemType_to_regVariant(vector_element_basic_type(this));\n-    __ sve_index(as_FloatRegister($tmp$$reg), __ D, 0, 1);\n+    __ sve_index(as_FloatRegister($tmp1$$reg), __ D, 0, 1);\n@@ -3294,2 +3455,2 @@\n-    __ sve_cmpeq(as_PRegister($pTmp$$reg), size, ptrue,\n-                 as_FloatRegister($tmp$$reg), as_FloatRegister($tmp2$$reg));\n+    __ sve_cmpeq(as_PRegister($pTmp$$reg), __ D, ptrue,\n+                 as_FloatRegister($tmp1$$reg), as_FloatRegister($tmp2$$reg));\n@@ -3309,1 +3470,1 @@\n-instruct insertF(vReg dst, vReg src, vRegF val, immI idx, vReg tmp, vReg tmp2, pRegGov pTmp, rFlagsReg cr)\n+instruct insertF(vReg dst, vReg src, vRegF val, immI idx, vReg tmp1, vReg tmp2, pRegGov pTmp, rFlagsReg cr)\n@@ -3311,1 +3472,1 @@\n-  predicate(UseSVE > 0 &&\n+  predicate(UseSVE > 0 && n->as_Vector()->length() > 32 &&\n@@ -3314,1 +3475,1 @@\n-  effect(TEMP tmp, TEMP tmp2, TEMP pTmp, KILL cr);\n+  effect(TEMP tmp1, TEMP tmp2, TEMP pTmp, KILL cr);\n@@ -3316,1 +3477,1 @@\n-  format %{ \"sve_index $tmp, S, 0, 1\\n\\t\"\n+  format %{ \"sve_index $tmp1, S, 0, 1\\n\\t\"\n@@ -3318,1 +3479,1 @@\n-            \"sve_cmpeq $pTmp, $tmp, $tmp2\\n\\t\"\n+            \"sve_cmpeq $pTmp, $tmp1, $tmp2\\n\\t\"\n@@ -3322,3 +3483,1 @@\n-    Assembler::SIMD_RegVariant size =\n-              elemType_to_regVariant(vector_element_basic_type(this));\n-    __ sve_index(as_FloatRegister($tmp$$reg), __ S, 0, 1);\n+    __ sve_index(as_FloatRegister($tmp1$$reg), __ S, 0, 1);\n@@ -3326,2 +3485,2 @@\n-    __ sve_cmpeq(as_PRegister($pTmp$$reg), size, ptrue,\n-                 as_FloatRegister($tmp$$reg), as_FloatRegister($tmp2$$reg));\n+    __ sve_cmpeq(as_PRegister($pTmp$$reg), __ S, ptrue,\n+                 as_FloatRegister($tmp1$$reg), as_FloatRegister($tmp2$$reg));\n@@ -3341,1 +3500,1 @@\n-instruct insertD(vReg dst, vReg src, vRegD val, immI idx, vReg tmp, vReg tmp2, pRegGov pTmp, rFlagsReg cr)\n+instruct insertD(vReg dst, vReg src, vRegD val, immI idx, vReg tmp1, vReg tmp2, pRegGov pTmp, rFlagsReg cr)\n@@ -3343,1 +3502,1 @@\n-  predicate(UseSVE > 0 &&\n+  predicate(UseSVE > 0 && n->as_Vector()->length() > 32 &&\n@@ -3346,1 +3505,1 @@\n-  effect(TEMP tmp, TEMP tmp2, TEMP pTmp, KILL cr);\n+  effect(TEMP tmp1, TEMP tmp2, TEMP pTmp, KILL cr);\n@@ -3348,1 +3507,1 @@\n-  format %{ \"sve_index $tmp, D, 0, 1\\n\\t\"\n+  format %{ \"sve_index $tmp1, D, 0, 1\\n\\t\"\n@@ -3350,1 +3509,1 @@\n-            \"sve_cmpeq $pTmp, $tmp, $tmp2\\n\\t\"\n+            \"sve_cmpeq $pTmp, $tmp1, $tmp2\\n\\t\"\n@@ -3354,3 +3513,1 @@\n-    Assembler::SIMD_RegVariant size =\n-              elemType_to_regVariant(vector_element_basic_type(this));\n-    __ sve_index(as_FloatRegister($tmp$$reg), __ D, 0, 1);\n+    __ sve_index(as_FloatRegister($tmp1$$reg), __ D, 0, 1);\n@@ -3358,2 +3515,2 @@\n-    __ sve_cmpeq(as_PRegister($pTmp$$reg), size, ptrue,\n-                 as_FloatRegister($tmp$$reg), as_FloatRegister($tmp2$$reg));\n+    __ sve_cmpeq(as_PRegister($pTmp$$reg), __ D, ptrue,\n+                 as_FloatRegister($tmp1$$reg), as_FloatRegister($tmp2$$reg));\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve.ad","additions":217,"deletions":60,"binary":false,"changes":277,"status":"modified"},{"patch":"@@ -1888,0 +1888,36 @@\n+define(`VECTOR_INSERT_FAST', `\n+instruct insert$1_fast`'(vReg dst, vReg src, $2 val, immI idx, vReg tmp, pRegGov pTmp, rFlagsReg cr)\n+%{\n+  predicate(UseSVE > 0 && n->as_Vector()->length() <= 32 &&\n+            n->bottom_type()->is_vect()->element_basic_type() == T_`'TYPE2DATATYPE($1));\n+  match(Set dst (VectorInsert (Binary src val) idx));\n+  effect(TEMP tmp, TEMP pTmp, KILL cr);\n+  ins_cost(4 * SVE_COST);\n+  format %{ \"sve_index $tmp, $3, -16, 1\\n\\t\"\n+            \"sve_cmpeq $pTmp, $tmp, ($idx-#16) \/\/ shift from [0, 31] to [-16, 15]\\n\\t\"\n+            \"sve_orr $dst, $src, $src\\n\\t\"\n+            \"sve_cpy $dst, $pTmp, $val\\n\\t# insert into vector ($1)\" %}\n+  ins_encode %{\n+    __ sve_index(as_FloatRegister($tmp$$reg), __ $3, -16, 1);\n+    __ sve_cmpeq(as_PRegister($pTmp$$reg), __ $3, ptrue,\n+                 as_FloatRegister($tmp$$reg), (int)($idx$$constant) - 16);\n+    \/\/ If src and dst are the same reg, this move is not needed.\n+    if (as_FloatRegister($dst$$reg) != as_FloatRegister($src$$reg)) {\n+      __ sve_orr(as_FloatRegister($dst$$reg),\n+             as_FloatRegister($src$$reg),\n+             as_FloatRegister($src$$reg));\n+    }\n+    __ sve_cpy(as_FloatRegister($dst$$reg), __ $3,\n+               as_PRegister($pTmp$$reg), as_$4($val$$reg));\n+\n+  %}\n+  ins_pipe(pipe_slow);\n+%}')dnl\n+dnl                $1 $2          $3 $4\n+VECTOR_INSERT_FAST(B, iRegIorL2I, B, Register)\n+VECTOR_INSERT_FAST(S, iRegIorL2I, H, Register)\n+VECTOR_INSERT_FAST(I, iRegIorL2I, S, Register)\n+VECTOR_INSERT_FAST(L, iRegL,      D, Register)\n+VECTOR_INSERT_FAST(F, vRegF,      S, FloatRegister)\n+VECTOR_INSERT_FAST(D, vRegD,      D, FloatRegister)\n+\n@@ -1889,1 +1925,1 @@\n-instruct insert$1`'(vReg dst, vReg src, $2 val, immI idx, vReg tmp, vReg tmp2, pRegGov pTmp, rFlagsReg cr)\n+instruct insert$1`'(vReg dst, vReg src, $2 val, immI idx, vReg tmp1, vReg tmp2, pRegGov pTmp, rFlagsReg cr)\n@@ -1891,1 +1927,1 @@\n-  predicate(UseSVE > 0 &&\n+  predicate(UseSVE > 0 && n->as_Vector()->length() > 32 &&\n@@ -1894,1 +1930,1 @@\n-  effect(TEMP tmp, TEMP tmp2, TEMP pTmp, KILL cr);\n+  effect(TEMP tmp1, TEMP tmp2, TEMP pTmp, KILL cr);\n@@ -1896,1 +1932,1 @@\n-  format %{ \"sve_index $tmp, $3, 0, 1\\n\\t\"\n+  format %{ \"sve_index $tmp1, $3, 0, 1\\n\\t\"\n@@ -1898,1 +1934,1 @@\n-            \"sve_cmpeq $pTmp, $tmp, $tmp2\\n\\t\"\n+            \"sve_cmpeq $pTmp, $tmp1, $tmp2\\n\\t\"\n@@ -1902,3 +1938,1 @@\n-    Assembler::SIMD_RegVariant size =\n-              elemType_to_regVariant(vector_element_basic_type(this));\n-    __ sve_index(as_FloatRegister($tmp$$reg), __ $3, 0, 1);\n+    __ sve_index(as_FloatRegister($tmp1$$reg), __ $3, 0, 1);\n@@ -1906,2 +1940,2 @@\n-    __ sve_cmpeq(as_PRegister($pTmp$$reg), size, ptrue,\n-                 as_FloatRegister($tmp$$reg), as_FloatRegister($tmp2$$reg));\n+    __ sve_cmpeq(as_PRegister($pTmp$$reg), __ $3, ptrue,\n+                 as_FloatRegister($tmp1$$reg), as_FloatRegister($tmp2$$reg));\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve_ad.m4","additions":44,"deletions":10,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -3543,2 +3543,2 @@\n-    f(imm2, 20, 16), f(0b010000, 15, 10);\n-    f(imm1, 9, 5), rf(Zd, 0);\n+    sf(imm2, 20, 16), f(0b010000, 15, 10);\n+    sf(imm1, 9, 5), rf(Zd, 0);\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}