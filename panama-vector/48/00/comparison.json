{"files":[{"patch":"@@ -224,2 +224,0 @@\n-      case Op_Extract:\n-      case Op_ExtractB:\n@@ -229,3 +227,0 @@\n-      case Op_ExtractI:\n-      case Op_ExtractL:\n-      case Op_ExtractS:\n@@ -2994,0 +2989,75 @@\n+\n+\/\/ ------------------------------ Vector extract ---------------------------------\n+\n+instruct extractB(iRegINoSp dst, vReg src, immI idx, iRegINoSp tmp,  pRegGov pTmp, rFlagsReg cr)\n+%{\n+  predicate(UseSVE > 0 && n->in(1)->bottom_type()->is_vect()->length_in_bytes() >= 16);\n+  match(Set dst (ExtractB src idx));\n+  effect(TEMP tmp, TEMP pTmp, KILL cr);\n+  ins_cost(2 * SVE_COST);\n+  format %{ \"movzw $tmp, $idx\\n\\t\"\n+            \"sve_whilele $pTmp, B, zr, $tmp\\n\\t\"\n+            \"sve_lastb $dst, B, $pTmp, $src\\n\\t\"\n+            \"sbfmw $dst, $dst, 0U, 7U\\t# extract from vector(B)\" %}\n+  ins_encode %{\n+    __ movzw(as_Register($tmp$$reg), (int)($idx$$constant));\n+    __ sve_whilele(as_PRegister($pTmp$$reg), __ B, zr, as_Register($tmp$$reg));\n+    __ sve_lastb(as_Register($dst$$reg), __ B, as_PRegister($pTmp$$reg), as_FloatRegister($src$$reg));\n+    __ sbfmw(as_Register($dst$$reg), as_Register($dst$$reg), 0U, 7U);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct extractS(iRegINoSp dst, vReg src, immI idx, iRegINoSp tmp,  pRegGov pTmp, rFlagsReg cr)\n+%{\n+  predicate(UseSVE > 0 && n->in(1)->bottom_type()->is_vect()->length_in_bytes() >= 16);\n+  match(Set dst (ExtractS src idx));\n+  effect(TEMP tmp, TEMP pTmp, KILL cr);\n+  ins_cost(2 * SVE_COST);\n+  format %{ \"movzw $tmp, $idx\\n\\t\"\n+            \"sve_whilele $pTmp, H, zr, $tmp\\n\\t\"\n+            \"sve_lastb $dst, H, $pTmp, $src\\n\\t\"\n+            \"sbfmw $dst, $dst, 0U, 15U\\t# extract from vector(S)\" %}\n+  ins_encode %{\n+    __ movzw(as_Register($tmp$$reg), (int)($idx$$constant));\n+    __ sve_whilele(as_PRegister($pTmp$$reg), __ H, zr, as_Register($tmp$$reg));\n+    __ sve_lastb(as_Register($dst$$reg), __ H, as_PRegister($pTmp$$reg), as_FloatRegister($src$$reg));\n+    __ sbfmw(as_Register($dst$$reg), as_Register($dst$$reg), 0U, 15U);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\n+instruct extractI(iRegINoSp dst, vReg src, immI idx, iRegINoSp tmp,  pRegGov pTmp, rFlagsReg cr)\n+%{\n+  predicate(UseSVE > 0 && n->in(1)->bottom_type()->is_vect()->length_in_bytes() >= 16);\n+  match(Set dst (ExtractI src idx));\n+  effect(TEMP tmp, TEMP pTmp, KILL cr);\n+  ins_cost(2 * SVE_COST);\n+  format %{ \"movzw $tmp, $idx\\n\\t\"\n+            \"sve_whilele $pTmp, S, zr, $tmp\\n\\t\"\n+            \"sve_lastb $dst, S, $pTmp, $src\\n\\t\" %}\n+  ins_encode %{\n+    __ movzw(as_Register($tmp$$reg), (int)($idx$$constant));\n+    __ sve_whilele(as_PRegister($pTmp$$reg), __ S, zr, as_Register($tmp$$reg));\n+    __ sve_lastb(as_Register($dst$$reg), __ S, as_PRegister($pTmp$$reg), as_FloatRegister($src$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct extractL(iRegLNoSp dst, vReg src, immI idx, iRegINoSp tmp,  pRegGov pTmp, rFlagsReg cr)\n+%{\n+  predicate(UseSVE > 0 && n->in(1)->bottom_type()->is_vect()->length_in_bytes() >= 16);\n+  match(Set dst (ExtractL src idx));\n+  effect(TEMP tmp, TEMP pTmp, KILL cr);\n+  ins_cost(2 * SVE_COST);\n+  format %{ \"movzw $tmp, $idx\\n\\t\"\n+            \"sve_whilele $pTmp, D, zr, $tmp\\n\\t\"\n+            \"sve_lastb $dst, D, $pTmp, $src\\n\\t\" %}\n+  ins_encode %{\n+    __ movzw(as_Register($tmp$$reg), (int)($idx$$constant));\n+    __ sve_whilele(as_PRegister($pTmp$$reg), __ D, zr, as_Register($tmp$$reg));\n+    __ sve_lastb(as_Register($dst$$reg), __ D, as_PRegister($pTmp$$reg), as_FloatRegister($src$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve.ad","additions":75,"deletions":5,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -220,2 +220,0 @@\n-      case Op_Extract:\n-      case Op_ExtractB:\n@@ -225,3 +223,0 @@\n-      case Op_ExtractI:\n-      case Op_ExtractL:\n-      case Op_ExtractS:\n@@ -1791,0 +1786,46 @@\n+\n+\/\/ ------------------------------ Vector extract ---------------------------------\n+define(`VECTOR_EXTRACT_SXT', `\n+instruct extract$1`'($2 dst, vReg src, immI idx, iRegINoSp tmp,  pRegGov pTmp, rFlagsReg cr)\n+%{\n+  predicate(UseSVE > 0 && n->in(1)->bottom_type()->is_vect()->length_in_bytes() >= 16);\n+  match(Set dst (Extract$1 src idx));\n+  effect(TEMP tmp, TEMP pTmp, KILL cr);\n+  ins_cost(2 * SVE_COST);\n+  format %{ \"movzw $tmp, $idx\\n\\t\"\n+            \"sve_whilele $pTmp, $3, zr, $tmp\\n\\t\"\n+            \"sve_lastb $dst, $3, $pTmp, $src\\n\\t\"\n+            \"sbfmw $dst, $dst, 0U, $5\\t# extract from vector($1)\" %}\n+  ins_encode %{\n+    __ movzw(as_Register($tmp$$reg), (int)($idx$$constant));\n+    __ sve_whilele(as_PRegister($pTmp$$reg), __ $3, zr, as_Register($tmp$$reg));\n+    __ sve_lastb(as_$4($dst$$reg), __ $3, as_PRegister($pTmp$$reg), as_FloatRegister($src$$reg));\n+    __ sbfmw(as_$4($dst$$reg), as_$4($dst$$reg), 0U, $5);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}')dnl\n+dnl                $1 $2         $3 $4        $5\n+VECTOR_EXTRACT_SXT(B, iRegINoSp, B, Register, 7U)\n+VECTOR_EXTRACT_SXT(S, iRegINoSp, H, Register, 15U)\n+\n+dnl\n+define(`VECTOR_EXTRACT', `\n+instruct extract$1`'($2 dst, vReg src, immI idx, iRegINoSp tmp,  pRegGov pTmp, rFlagsReg cr)\n+%{\n+  predicate(UseSVE > 0 && n->in(1)->bottom_type()->is_vect()->length_in_bytes() >= 16);\n+  match(Set dst (Extract$1 src idx));\n+  effect(TEMP tmp, TEMP pTmp, KILL cr);\n+  ins_cost(2 * SVE_COST);\n+  format %{ \"movzw $tmp, $idx\\n\\t\"\n+            \"sve_whilele $pTmp, $3, zr, $tmp\\n\\t\"\n+            \"sve_lastb $dst, $3, $pTmp, $src\\n\\t\" %}\n+  ins_encode %{\n+    __ movzw(as_Register($tmp$$reg), (int)($idx$$constant));\n+    __ sve_whilele(as_PRegister($pTmp$$reg), __ $3, zr, as_Register($tmp$$reg));\n+    __ sve_lastb(as_$4($dst$$reg), __ $3, as_PRegister($pTmp$$reg), as_FloatRegister($src$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}')dnl\n+dnl            $1 $2         $3 $4\n+VECTOR_EXTRACT(I, iRegINoSp, S, Register)\n+VECTOR_EXTRACT(L, iRegLNoSp, D, Register)\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve_ad.m4","additions":46,"deletions":5,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -3505,0 +3505,13 @@\n+\/\/ SVE conditionally extract element to general-purpose register\n+#define INSN(NAME, before)                                                      \\\n+  void NAME(Register Rd, SIMD_RegVariant T, PRegister Pg,  FloatRegister Zn) {  \\\n+    starti;                                                                     \\\n+    f(0b00000101, 31, 24), f(T, 23, 22), f(0b10000, 21, 17);                    \\\n+    f(before, 16), f(0b101, 15, 13);                                            \\\n+    pgrf(Pg, 10), rf(Zn, 5), rf(Rd, 0);                                         \\\n+  }\n+\n+  INSN(sve_lasta, 0b0);\n+  INSN(sve_lastb, 0b1);\n+#undef INSN\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -1595,0 +1595,2 @@\n+                        [\"lasta\",   \"__ sve_lasta(r0, __ B, p0, z15);\",                   \"lasta\\tw0, p0, z15.b\"],\n+                        [\"lastb\",   \"__ sve_lastb(r1, __ B, p1, z16);\",                   \"lastb\\tw1, p1, z16.b\"],\n","filename":"test\/hotspot\/gtest\/aarch64\/aarch64-asmtest.py","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -780,0 +780,2 @@\n+    __ sve_lasta(r0, __ B, p0, z15);                   \/\/       lasta   w0, p0, z15.b\n+    __ sve_lastb(r1, __ B, p1, z16);                   \/\/       lastb   w1, p1, z16.b\n@@ -985,7 +987,7 @@\n-    0x14000000,     0x17ffffd7,     0x14000310,     0x94000000,\n-    0x97ffffd4,     0x9400030d,     0x3400000a,     0x34fffa2a,\n-    0x3400614a,     0x35000008,     0x35fff9c8,     0x350060e8,\n-    0xb400000b,     0xb4fff96b,     0xb400608b,     0xb500001d,\n-    0xb5fff91d,     0xb500603d,     0x10000013,     0x10fff8b3,\n-    0x10005fd3,     0x90000013,     0x36300016,     0x3637f836,\n-    0x36305f56,     0x3758000c,     0x375ff7cc,     0x37585eec,\n+    0x14000000,     0x17ffffd7,     0x14000312,     0x94000000,\n+    0x97ffffd4,     0x9400030f,     0x3400000a,     0x34fffa2a,\n+    0x3400618a,     0x35000008,     0x35fff9c8,     0x35006128,\n+    0xb400000b,     0xb4fff96b,     0xb40060cb,     0xb500001d,\n+    0xb5fff91d,     0xb500607d,     0x10000013,     0x10fff8b3,\n+    0x10006013,     0x90000013,     0x36300016,     0x3637f836,\n+    0x36305f96,     0x3758000c,     0x375ff7cc,     0x37585f2c,\n@@ -996,13 +998,13 @@\n-    0x54005cc0,     0x54000001,     0x54fff541,     0x54005c61,\n-    0x54000002,     0x54fff4e2,     0x54005c02,     0x54000002,\n-    0x54fff482,     0x54005ba2,     0x54000003,     0x54fff423,\n-    0x54005b43,     0x54000003,     0x54fff3c3,     0x54005ae3,\n-    0x54000004,     0x54fff364,     0x54005a84,     0x54000005,\n-    0x54fff305,     0x54005a25,     0x54000006,     0x54fff2a6,\n-    0x540059c6,     0x54000007,     0x54fff247,     0x54005967,\n-    0x54000008,     0x54fff1e8,     0x54005908,     0x54000009,\n-    0x54fff189,     0x540058a9,     0x5400000a,     0x54fff12a,\n-    0x5400584a,     0x5400000b,     0x54fff0cb,     0x540057eb,\n-    0x5400000c,     0x54fff06c,     0x5400578c,     0x5400000d,\n-    0x54fff00d,     0x5400572d,     0x5400000e,     0x54ffefae,\n-    0x540056ce,     0x5400000f,     0x54ffef4f,     0x5400566f,\n+    0x54005d00,     0x54000001,     0x54fff541,     0x54005ca1,\n+    0x54000002,     0x54fff4e2,     0x54005c42,     0x54000002,\n+    0x54fff482,     0x54005be2,     0x54000003,     0x54fff423,\n+    0x54005b83,     0x54000003,     0x54fff3c3,     0x54005b23,\n+    0x54000004,     0x54fff364,     0x54005ac4,     0x54000005,\n+    0x54fff305,     0x54005a65,     0x54000006,     0x54fff2a6,\n+    0x54005a06,     0x54000007,     0x54fff247,     0x540059a7,\n+    0x54000008,     0x54fff1e8,     0x54005948,     0x54000009,\n+    0x54fff189,     0x540058e9,     0x5400000a,     0x54fff12a,\n+    0x5400588a,     0x5400000b,     0x54fff0cb,     0x5400582b,\n+    0x5400000c,     0x54fff06c,     0x540057cc,     0x5400000d,\n+    0x54fff00d,     0x5400576d,     0x5400000e,     0x54ffefae,\n+    0x5400570e,     0x5400000f,     0x54ffef4f,     0x540056af,\n@@ -1040,1 +1042,1 @@\n-    0xbd1b1869,     0x580046bb,     0x1800000b,     0xf8945060,\n+    0xbd1b1869,     0x580046fb,     0x1800000b,     0xf8945060,\n@@ -1141,41 +1143,42 @@\n-    0x65dfaa53,     0x1e601000,     0x1e603000,     0x1e621000,\n-    0x1e623000,     0x1e641000,     0x1e643000,     0x1e661000,\n-    0x1e663000,     0x1e681000,     0x1e683000,     0x1e6a1000,\n-    0x1e6a3000,     0x1e6c1000,     0x1e6c3000,     0x1e6e1000,\n-    0x1e6e3000,     0x1e701000,     0x1e703000,     0x1e721000,\n-    0x1e723000,     0x1e741000,     0x1e743000,     0x1e761000,\n-    0x1e763000,     0x1e781000,     0x1e783000,     0x1e7a1000,\n-    0x1e7a3000,     0x1e7c1000,     0x1e7c3000,     0x1e7e1000,\n-    0x1e7e3000,     0xf8238358,     0xf83702af,     0xf8231118,\n-    0xf8392214,     0xf8313022,     0xf8205098,     0xf82343ec,\n-    0xf83c734a,     0xf82261ec,     0xf8bf81a1,     0xf8bd0260,\n-    0xf8ac12d1,     0xf8ad23dc,     0xf8bf3341,     0xf8bc53c4,\n-    0xf8a443c6,     0xf8ba7130,     0xf8a8600c,     0xf8f48301,\n-    0xf8e20120,     0xf8f8121a,     0xf8fe2143,     0xf8f7308a,\n-    0xf8f05162,     0xf8e841ea,     0xf8f17142,     0xf8ec61ec,\n-    0xf86d80e2,     0xf874021a,     0xf8641082,     0xf86c22b0,\n-    0xf8703170,     0xf8755197,     0xf87a4397,     0xf86e730b,\n-    0xf86163ec,     0xb82a80f0,     0xb82201a3,     0xb8331211,\n-    0xb8232161,     0xb83e3105,     0xb82f53dd,     0xb82040f4,\n-    0xb8347397,     0xb835633b,     0xb8a582e1,     0xb8b000bf,\n-    0xb8ac1389,     0xb8af22dd,     0xb8bf33f3,     0xb8a551ee,\n-    0xb8bf4370,     0xb8b47190,     0xb8ab60c9,     0xb8fe8371,\n-    0xb8fc00fe,     0xb8ea1154,     0xb8e42238,     0xb8f13076,\n-    0xb8fd52cf,     0xb8f342d3,     0xb8e270cf,     0xb8ec6170,\n-    0xb86d8037,     0xb87e00b3,     0xb8711202,     0xb876214d,\n-    0xb875337d,     0xb86c507b,     0xb861431f,     0xb8737131,\n-    0xb87c61fb,     0xce367a86,     0xce1e6858,     0xce768d51,\n-    0xce910451,     0xce768338,     0xce6c8622,     0xcec08363,\n-    0xce708b9d,     0x04e900da,     0x042404f1,     0x6596012f,\n-    0x65d40b62,     0x65c00745,     0x0456a72e,     0x04c0175b,\n-    0x04109418,     0x041ab006,     0x0413812f,     0x04118b65,\n-    0x04101694,     0x04d7aa0a,     0x045eb046,     0x04c81c5d,\n-    0x044a1dd6,     0x040112fb,     0x04dcad42,     0x65809aca,\n-    0x658d9603,     0x65c69201,     0x65878d8c,     0x65c28290,\n-    0x04dda4e5,     0x65c2be0c,     0x6580a386,     0x65c1a624,\n-    0x658dae6d,     0x65819638,     0x65f318ca,     0x65a030cd,\n-    0x65a8532e,     0x65bb76d6,     0x04144e23,     0x04407ce4,\n-    0x04363270,     0x04b6312f,     0x047e30b9,     0x052b6acd,\n-    0x05b46d0d,     0x041a2c99,     0x04d828d1,     0x04d93e04,\n-    0x040829da,     0x040a3c6b,     0x65c73aa1,     0x65c62a2e,\n-    0x65d82678,     0x04c13611,\n+    0x65dfaa53,     0x0520a1e0,     0x0521a601,     0x1e601000,\n+    0x1e603000,     0x1e621000,     0x1e623000,     0x1e641000,\n+    0x1e643000,     0x1e661000,     0x1e663000,     0x1e681000,\n+    0x1e683000,     0x1e6a1000,     0x1e6a3000,     0x1e6c1000,\n+    0x1e6c3000,     0x1e6e1000,     0x1e6e3000,     0x1e701000,\n+    0x1e703000,     0x1e721000,     0x1e723000,     0x1e741000,\n+    0x1e743000,     0x1e761000,     0x1e763000,     0x1e781000,\n+    0x1e783000,     0x1e7a1000,     0x1e7a3000,     0x1e7c1000,\n+    0x1e7c3000,     0x1e7e1000,     0x1e7e3000,     0xf8238358,\n+    0xf83702af,     0xf8231118,     0xf8392214,     0xf8313022,\n+    0xf8205098,     0xf82343ec,     0xf83c734a,     0xf82261ec,\n+    0xf8bf81a1,     0xf8bd0260,     0xf8ac12d1,     0xf8ad23dc,\n+    0xf8bf3341,     0xf8bc53c4,     0xf8a443c6,     0xf8ba7130,\n+    0xf8a8600c,     0xf8f48301,     0xf8e20120,     0xf8f8121a,\n+    0xf8fe2143,     0xf8f7308a,     0xf8f05162,     0xf8e841ea,\n+    0xf8f17142,     0xf8ec61ec,     0xf86d80e2,     0xf874021a,\n+    0xf8641082,     0xf86c22b0,     0xf8703170,     0xf8755197,\n+    0xf87a4397,     0xf86e730b,     0xf86163ec,     0xb82a80f0,\n+    0xb82201a3,     0xb8331211,     0xb8232161,     0xb83e3105,\n+    0xb82f53dd,     0xb82040f4,     0xb8347397,     0xb835633b,\n+    0xb8a582e1,     0xb8b000bf,     0xb8ac1389,     0xb8af22dd,\n+    0xb8bf33f3,     0xb8a551ee,     0xb8bf4370,     0xb8b47190,\n+    0xb8ab60c9,     0xb8fe8371,     0xb8fc00fe,     0xb8ea1154,\n+    0xb8e42238,     0xb8f13076,     0xb8fd52cf,     0xb8f342d3,\n+    0xb8e270cf,     0xb8ec6170,     0xb86d8037,     0xb87e00b3,\n+    0xb8711202,     0xb876214d,     0xb875337d,     0xb86c507b,\n+    0xb861431f,     0xb8737131,     0xb87c61fb,     0xce367a86,\n+    0xce1e6858,     0xce768d51,     0xce910451,     0xce768338,\n+    0xce6c8622,     0xcec08363,     0xce708b9d,     0x04e900da,\n+    0x042404f1,     0x6596012f,     0x65d40b62,     0x65c00745,\n+    0x0456a72e,     0x04c0175b,     0x04109418,     0x041ab006,\n+    0x0413812f,     0x04118b65,     0x04101694,     0x04d7aa0a,\n+    0x045eb046,     0x04c81c5d,     0x044a1dd6,     0x040112fb,\n+    0x04dcad42,     0x65809aca,     0x658d9603,     0x65c69201,\n+    0x65878d8c,     0x65c28290,     0x04dda4e5,     0x65c2be0c,\n+    0x6580a386,     0x65c1a624,     0x658dae6d,     0x65819638,\n+    0x65f318ca,     0x65a030cd,     0x65a8532e,     0x65bb76d6,\n+    0x04144e23,     0x04407ce4,     0x04363270,     0x04b6312f,\n+    0x047e30b9,     0x052b6acd,     0x05b46d0d,     0x041a2c99,\n+    0x04d828d1,     0x04d93e04,     0x040829da,     0x040a3c6b,\n+    0x65c73aa1,     0x65c62a2e,     0x65d82678,     0x04c13611,\n+\n","filename":"test\/hotspot\/gtest\/aarch64\/asmtest.out.h","additions":65,"deletions":62,"binary":false,"changes":127,"status":"modified"}]}