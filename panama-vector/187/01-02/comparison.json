{"files":[{"patch":"@@ -969,25 +969,21 @@\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            VectorMask<Byte> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n-                    .laneIsValid();\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, m);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo)\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true))\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false))\n+        );\n+\n+        VectorMask<Byte> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n+                .laneIsValid();\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, m)\n+        );\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte128VectorLoadStoreTests.java","additions":21,"deletions":25,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -969,25 +969,21 @@\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            VectorMask<Byte> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n-                    .laneIsValid();\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, m);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo)\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true))\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false))\n+        );\n+\n+        VectorMask<Byte> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n+                .laneIsValid();\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, m)\n+        );\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte256VectorLoadStoreTests.java","additions":21,"deletions":25,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -969,25 +969,21 @@\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            VectorMask<Byte> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n-                    .laneIsValid();\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, m);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo)\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true))\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false))\n+        );\n+\n+        VectorMask<Byte> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n+                .laneIsValid();\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, m)\n+        );\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte512VectorLoadStoreTests.java","additions":21,"deletions":25,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -969,25 +969,21 @@\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            VectorMask<Byte> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n-                    .laneIsValid();\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, m);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo)\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true))\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false))\n+        );\n+\n+        VectorMask<Byte> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n+                .laneIsValid();\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, m)\n+        );\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte64VectorLoadStoreTests.java","additions":21,"deletions":25,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -978,25 +978,21 @@\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            VectorMask<Byte> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n-                    .laneIsValid();\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, m);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo)\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true))\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false))\n+        );\n+\n+        VectorMask<Byte> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n+                .laneIsValid();\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, m)\n+        );\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ByteMaxVectorLoadStoreTests.java","additions":21,"deletions":25,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -980,25 +980,21 @@\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            VectorMask<Double> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n-                    .laneIsValid();\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, m);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo)\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true))\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false))\n+        );\n+\n+        VectorMask<Double> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n+                .laneIsValid();\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, m)\n+        );\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double128VectorLoadStoreTests.java","additions":21,"deletions":25,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -980,25 +980,21 @@\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            VectorMask<Double> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n-                    .laneIsValid();\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, m);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo)\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true))\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false))\n+        );\n+\n+        VectorMask<Double> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n+                .laneIsValid();\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, m)\n+        );\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double256VectorLoadStoreTests.java","additions":21,"deletions":25,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -980,25 +980,21 @@\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            VectorMask<Double> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n-                    .laneIsValid();\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, m);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo)\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true))\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false))\n+        );\n+\n+        VectorMask<Double> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n+                .laneIsValid();\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, m)\n+        );\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double512VectorLoadStoreTests.java","additions":21,"deletions":25,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -980,25 +980,21 @@\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            VectorMask<Double> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n-                    .laneIsValid();\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, m);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo)\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true))\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false))\n+        );\n+\n+        VectorMask<Double> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n+                .laneIsValid();\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, m)\n+        );\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double64VectorLoadStoreTests.java","additions":21,"deletions":25,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -989,25 +989,21 @@\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            VectorMask<Double> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n-                    .laneIsValid();\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, m);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo)\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true))\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false))\n+        );\n+\n+        VectorMask<Double> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n+                .laneIsValid();\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, m)\n+        );\n","filename":"test\/jdk\/jdk\/incubator\/vector\/DoubleMaxVectorLoadStoreTests.java","additions":21,"deletions":25,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -980,25 +980,21 @@\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            VectorMask<Float> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n-                    .laneIsValid();\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, m);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo)\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true))\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false))\n+        );\n+\n+        VectorMask<Float> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n+                .laneIsValid();\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, m)\n+        );\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float128VectorLoadStoreTests.java","additions":21,"deletions":25,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -980,25 +980,21 @@\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            VectorMask<Float> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n-                    .laneIsValid();\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, m);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo)\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true))\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false))\n+        );\n+\n+        VectorMask<Float> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n+                .laneIsValid();\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, m)\n+        );\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float256VectorLoadStoreTests.java","additions":21,"deletions":25,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -980,25 +980,21 @@\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            VectorMask<Float> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n-                    .laneIsValid();\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, m);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo)\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true))\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false))\n+        );\n+\n+        VectorMask<Float> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n+                .laneIsValid();\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, m)\n+        );\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float512VectorLoadStoreTests.java","additions":21,"deletions":25,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -980,25 +980,21 @@\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            VectorMask<Float> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n-                    .laneIsValid();\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, m);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo)\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true))\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false))\n+        );\n+\n+        VectorMask<Float> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n+                .laneIsValid();\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, m)\n+        );\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float64VectorLoadStoreTests.java","additions":21,"deletions":25,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -989,25 +989,21 @@\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            VectorMask<Float> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n-                    .laneIsValid();\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, m);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo)\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true))\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false))\n+        );\n+\n+        VectorMask<Float> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n+                .laneIsValid();\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, m)\n+        );\n","filename":"test\/jdk\/jdk\/incubator\/vector\/FloatMaxVectorLoadStoreTests.java","additions":21,"deletions":25,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -980,25 +980,21 @@\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            VectorMask<Integer> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n-                    .laneIsValid();\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, m);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo)\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true))\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false))\n+        );\n+\n+        VectorMask<Integer> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n+                .laneIsValid();\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, m)\n+        );\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int128VectorLoadStoreTests.java","additions":21,"deletions":25,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -980,25 +980,21 @@\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            VectorMask<Integer> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n-                    .laneIsValid();\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, m);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo)\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true))\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false))\n+        );\n+\n+        VectorMask<Integer> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n+                .laneIsValid();\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, m)\n+        );\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int256VectorLoadStoreTests.java","additions":21,"deletions":25,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -980,25 +980,21 @@\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            VectorMask<Integer> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n-                    .laneIsValid();\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, m);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo)\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true))\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false))\n+        );\n+\n+        VectorMask<Integer> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n+                .laneIsValid();\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, m)\n+        );\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int512VectorLoadStoreTests.java","additions":21,"deletions":25,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -980,25 +980,21 @@\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            VectorMask<Integer> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n-                    .laneIsValid();\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, m);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo)\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true))\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false))\n+        );\n+\n+        VectorMask<Integer> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n+                .laneIsValid();\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, m)\n+        );\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int64VectorLoadStoreTests.java","additions":21,"deletions":25,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -989,25 +989,21 @@\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            VectorMask<Integer> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n-                    .laneIsValid();\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, m);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo)\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true))\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false))\n+        );\n+\n+        VectorMask<Integer> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n+                .laneIsValid();\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, m)\n+        );\n","filename":"test\/jdk\/jdk\/incubator\/vector\/IntMaxVectorLoadStoreTests.java","additions":21,"deletions":25,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -980,25 +980,21 @@\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            VectorMask<Long> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n-                    .laneIsValid();\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, m);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo)\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true))\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false))\n+        );\n+\n+        VectorMask<Long> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n+                .laneIsValid();\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, m)\n+        );\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long128VectorLoadStoreTests.java","additions":21,"deletions":25,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -980,25 +980,21 @@\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            VectorMask<Long> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n-                    .laneIsValid();\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, m);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo)\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true))\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false))\n+        );\n+\n+        VectorMask<Long> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n+                .laneIsValid();\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, m)\n+        );\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long256VectorLoadStoreTests.java","additions":21,"deletions":25,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -980,25 +980,21 @@\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            VectorMask<Long> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n-                    .laneIsValid();\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, m);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo)\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true))\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false))\n+        );\n+\n+        VectorMask<Long> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n+                .laneIsValid();\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, m)\n+        );\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long512VectorLoadStoreTests.java","additions":21,"deletions":25,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -980,25 +980,21 @@\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            VectorMask<Long> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n-                    .laneIsValid();\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, m);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo)\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true))\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false))\n+        );\n+\n+        VectorMask<Long> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n+                .laneIsValid();\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, m)\n+        );\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long64VectorLoadStoreTests.java","additions":21,"deletions":25,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -989,25 +989,21 @@\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            VectorMask<Long> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n-                    .laneIsValid();\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, m);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo)\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true))\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false))\n+        );\n+\n+        VectorMask<Long> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n+                .laneIsValid();\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, m)\n+        );\n","filename":"test\/jdk\/jdk\/incubator\/vector\/LongMaxVectorLoadStoreTests.java","additions":21,"deletions":25,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -980,25 +980,21 @@\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            VectorMask<Short> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n-                    .laneIsValid();\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, m);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo)\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true))\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false))\n+        );\n+\n+        VectorMask<Short> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n+                .laneIsValid();\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, m)\n+        );\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short128VectorLoadStoreTests.java","additions":21,"deletions":25,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -980,25 +980,21 @@\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            VectorMask<Short> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n-                    .laneIsValid();\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, m);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo)\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true))\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false))\n+        );\n+\n+        VectorMask<Short> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n+                .laneIsValid();\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, m)\n+        );\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short256VectorLoadStoreTests.java","additions":21,"deletions":25,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -980,25 +980,21 @@\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            VectorMask<Short> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n-                    .laneIsValid();\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, m);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo)\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true))\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false))\n+        );\n+\n+        VectorMask<Short> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n+                .laneIsValid();\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, m)\n+        );\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short512VectorLoadStoreTests.java","additions":21,"deletions":25,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -980,25 +980,21 @@\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            VectorMask<Short> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n-                    .laneIsValid();\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, m);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo)\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true))\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false))\n+        );\n+\n+        VectorMask<Short> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n+                .laneIsValid();\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, m)\n+        );\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short64VectorLoadStoreTests.java","additions":21,"deletions":25,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -989,25 +989,21 @@\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            VectorMask<Short> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n-                    .laneIsValid();\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, m);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo)\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true))\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false))\n+        );\n+\n+        VectorMask<Short> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n+                .laneIsValid();\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, m)\n+        );\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ShortMaxVectorLoadStoreTests.java","additions":21,"deletions":25,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -1012,25 +1012,21 @@\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false));\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n-\n-        try {\n-            VectorMask<$Boxtype$> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n-                    .laneIsValid();\n-            SPECIES.zero().intoMemorySegment(a, 0, bo, m);\n-            Assert.fail(\"UnsupportedOperationException expected\");\n-        } catch (UnsupportedOperationException e) {\n-        }\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo)\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(true))\n+        );\n+\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, SPECIES.maskAll(false))\n+        );\n+\n+        VectorMask<$Boxtype$> m = SPECIES.shuffleFromOp(i -> i % 2 == 0 ? 1 : -1)\n+                .laneIsValid();\n+        Assert.assertThrows(\n+                UnsupportedOperationException.class,\n+                () -> SPECIES.zero().intoMemorySegment(a, 0, bo, m)\n+        );\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/X-LoadStoreTest.java.template","additions":21,"deletions":25,"binary":false,"changes":46,"status":"modified"}]}