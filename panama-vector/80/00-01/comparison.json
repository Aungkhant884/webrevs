{"files":[{"patch":"@@ -812,4 +812,4 @@\n-  do_intrinsic(_VectorUnaryMaskedOp, jdk_internal_vm_vector_VectorSupport, vector_unary_masked_op_name, vector_unary_masked_op_sig, F_S)       \\\n-   do_signature(vector_unary_masked_op_sig, \"(ILjava\/lang\/Class;Ljava\/lang\/Class;Ljava\/lang\/Class;ILjava\/lang\/Object;Ljava\/lang\/Object;\"       \\\n-                                             \"Ljdk\/internal\/vm\/vector\/VectorSupport$UnaryMaskedOperation;)Ljava\/lang\/Object;\")                 \\\n-   do_name(vector_unary_masked_op_name,     \"unaryMaskedOp\")                                                                                   \\\n+  do_intrinsic(_VectorUnaryOp, jdk_internal_vm_vector_VectorSupport, vector_unary_op_name, vector_unary_op_sig, F_S)                           \\\n+   do_signature(vector_unary_op_sig, \"(ILjava\/lang\/Class;Ljava\/lang\/Class;Ljava\/lang\/Class;ILjava\/lang\/Object;Ljava\/lang\/Object;\"              \\\n+                                      \"Ljdk\/internal\/vm\/vector\/VectorSupport$UnaryOperation;)Ljava\/lang\/Object;\")                              \\\n+   do_name(vector_unary_op_name,     \"unaryOp\")                                                                                                \\\n@@ -817,4 +817,4 @@\n-  do_intrinsic(_VectorBinaryMaskedOp, jdk_internal_vm_vector_VectorSupport, vector_binary_masked_op_name, vector_binary_masked_op_sig, F_S)    \\\n-   do_signature(vector_binary_masked_op_sig, \"(ILjava\/lang\/Class;Ljava\/lang\/Class;Ljava\/lang\/Class;ILjava\/lang\/Object;Ljava\/lang\/Object;\"      \\\n-                                              \"Ljava\/lang\/Object;Ljdk\/internal\/vm\/vector\/VectorSupport$BinaryMaskedOperation;)Ljava\/lang\/Object;\") \\\n-   do_name(vector_binary_masked_op_name,     \"binaryMaskedOp\")                                                                                 \\\n+  do_intrinsic(_VectorBinaryOp, jdk_internal_vm_vector_VectorSupport, vector_binary_op_name, vector_binary_op_sig, F_S)                        \\\n+   do_signature(vector_binary_op_sig, \"(ILjava\/lang\/Class;Ljava\/lang\/Class;Ljava\/lang\/Class;ILjava\/lang\/Object;Ljava\/lang\/Object;\"             \\\n+                                       \"Ljava\/lang\/Object;Ljdk\/internal\/vm\/vector\/VectorSupport$BinaryOperation;)Ljava\/lang\/Object;\")          \\\n+   do_name(vector_binary_op_name,     \"binaryOp\")                                                                                              \\\n@@ -822,4 +822,4 @@\n-  do_intrinsic(_VectorTernaryMaskedOp, jdk_internal_vm_vector_VectorSupport, vector_ternary_masked_op_name, vector_ternary_masked_op_sig, F_S) \\\n-   do_signature(vector_ternary_masked_op_sig, \"(ILjava\/lang\/Class;Ljava\/lang\/Class;Ljava\/lang\/Class;ILjava\/lang\/Object;Ljava\/lang\/Object;Ljava\/lang\/Object;\" \\\n-                                               \"Ljava\/lang\/Object;Ljdk\/internal\/vm\/vector\/VectorSupport$TernaryMaskedOperation;)Ljava\/lang\/Object;\") \\\n-   do_name(vector_ternary_masked_op_name,     \"ternaryMaskedOp\")                                                                               \\\n+  do_intrinsic(_VectorTernaryOp, jdk_internal_vm_vector_VectorSupport, vector_ternary_op_name, vector_ternary_op_sig, F_S)                     \\\n+   do_signature(vector_ternary_op_sig, \"(ILjava\/lang\/Class;Ljava\/lang\/Class;Ljava\/lang\/Class;ILjava\/lang\/Object;Ljava\/lang\/Object;Ljava\/lang\/Object;\" \\\n+                                        \"Ljava\/lang\/Object;Ljdk\/internal\/vm\/vector\/VectorSupport$TernaryOperation;)Ljava\/lang\/Object;\")        \\\n+   do_name(vector_ternary_op_name,     \"ternaryOp\")                                                                                            \\\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -660,3 +660,3 @@\n-  case vmIntrinsics::_VectorUnaryMaskedOp:\n-  case vmIntrinsics::_VectorBinaryMaskedOp:\n-  case vmIntrinsics::_VectorTernaryMaskedOp:\n+  case vmIntrinsics::_VectorUnaryOp:\n+  case vmIntrinsics::_VectorBinaryOp:\n+  case vmIntrinsics::_VectorTernaryOp:\n","filename":"src\/hotspot\/share\/opto\/c2compiler.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -630,6 +630,6 @@\n-  case vmIntrinsics::_VectorUnaryMaskedOp:\n-    return inline_vector_nary_masked_operation(1);\n-  case vmIntrinsics::_VectorBinaryMaskedOp:\n-    return inline_vector_nary_masked_operation(2);\n-  case vmIntrinsics::_VectorTernaryMaskedOp:\n-    return inline_vector_nary_masked_operation(3);\n+  case vmIntrinsics::_VectorUnaryOp:\n+    return inline_vector_nary_operation(1);\n+  case vmIntrinsics::_VectorBinaryOp:\n+    return inline_vector_nary_operation(2);\n+  case vmIntrinsics::_VectorTernaryOp:\n+    return inline_vector_nary_operation(3);\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -312,1 +312,1 @@\n-  bool inline_vector_nary_masked_operation(int n);\n+  bool inline_vector_nary_operation(int n);\n","filename":"src\/hotspot\/share\/opto\/library_call.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -208,3 +208,3 @@\n-\/\/ V unaryMaskedOp(int oprId, Class<? extends V> vmClass, Class<? extends M> maskClass, Class<?> elementType,\n-\/\/                 int length, V v, M m,\n-\/\/                 UnaryMaskedOperation<V, M> defaultImpl) {\n+\/\/ V unaryOp(int oprId, Class<? extends V> vmClass, Class<? extends M> maskClass, Class<?> elementType,\n+\/\/           int length, V v, M m,\n+\/\/           UnaryOperation<V, M> defaultImpl) {\n@@ -214,3 +214,3 @@\n-\/\/ V binaryMaskedOp(int oprId, Class<? extends V> vmClass, Class<? extends M> maskClass, Class<?> elementType,\n-\/\/                  int length, V v1, V v2, M m,\n-\/\/                  BinaryMaskedOperation<V, M> defaultImpl) {\n+\/\/ V binaryOp(int oprId, Class<? extends V> vmClass, Class<? extends M> maskClass, Class<?> elementType,\n+\/\/            int length, V v1, V v2, M m,\n+\/\/            BinaryOperation<V, M> defaultImpl) {\n@@ -220,3 +220,3 @@\n-\/\/ V ternaryMaskedOp(int oprId, Class<? extends V> vmClass, Class<? extends M> maskClass, Class<?> elementType,\n-\/\/                   int length, V v1, V v2, V v3, M m,\n-\/\/                   TernaryMaskedOperation<V, M> defaultImpl) {\n+\/\/ V ternaryOp(int oprId, Class<? extends V> vmClass, Class<? extends M> maskClass, Class<?> elementType,\n+\/\/             int length, V v1, V v2, V v3, M m,\n+\/\/             TernaryOperation<V, M> defaultImpl) {\n@@ -224,1 +224,1 @@\n-bool LibraryCallKit::inline_vector_nary_masked_operation(int n) {\n+bool LibraryCallKit::inline_vector_nary_operation(int n) {\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -250,3 +250,3 @@\n-    V unaryMaskedOp(int oprId, Class<? extends V> vmClass, Class<? extends M> maskClass,\n-                    Class<?> elementType, int length, V v, M m,\n-                    UnaryMaskedOperation<V, M> defaultImpl) {\n+    V unaryOp(int oprId, Class<? extends V> vmClass, Class<? extends M> maskClass,\n+              Class<?> elementType, int length, V v, M m,\n+              UnaryOperation<V, M> defaultImpl) {\n@@ -257,1 +257,1 @@\n-    public interface UnaryMaskedOperation<V, M> {\n+    public interface UnaryOperation<V, M> {\n@@ -266,3 +266,3 @@\n-    V binaryMaskedOp(int oprId, Class<? extends V> vmClass, Class<? extends M> maskClass,\n-                     Class<?> elementType, int length, V v1, V v2, M m,\n-                     BinaryMaskedOperation<V, M> defaultImpl) {\n+    V binaryOp(int oprId, Class<? extends V> vmClass, Class<? extends M> maskClass,\n+               Class<?> elementType, int length, V v1, V v2, M m,\n+               BinaryOperation<V, M> defaultImpl) {\n@@ -273,1 +273,1 @@\n-    public interface BinaryMaskedOperation<V, M> {\n+    public interface BinaryOperation<V, M> {\n@@ -282,3 +282,3 @@\n-    V ternaryMaskedOp(int oprId, Class<? extends V> vmClass, Class<? extends M> maskClass,\n-                      Class<?> elementType, int length, V v1, V v2, V v3, M m,\n-                      TernaryMaskedOperation<V, M> defaultImpl) {\n+    V ternaryOp(int oprId, Class<? extends V> vmClass, Class<? extends M> maskClass,\n+                Class<?> elementType, int length, V v1, V v2, V v3, M m,\n+                TernaryOperation<V, M> defaultImpl) {\n@@ -289,1 +289,1 @@\n-    public interface TernaryMaskedOperation<V, M> {\n+    public interface TernaryOperation<V, M> {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/vector\/VectorSupport.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -678,3 +678,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_AND, Byte128Mask.class, null, byte.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Byte128Mask.class, null, byte.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n@@ -688,3 +688,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_OR, Byte128Mask.class, null, byte.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Byte128Mask.class, null, byte.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n@@ -698,3 +698,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_XOR, Byte128Mask.class, null, byte.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Byte128Mask.class, null, byte.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte128Vector.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -710,3 +710,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_AND, Byte256Mask.class, null, byte.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Byte256Mask.class, null, byte.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n@@ -720,3 +720,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_OR, Byte256Mask.class, null, byte.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Byte256Mask.class, null, byte.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n@@ -730,3 +730,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_XOR, Byte256Mask.class, null, byte.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Byte256Mask.class, null, byte.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte256Vector.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -774,3 +774,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_AND, Byte512Mask.class, null, byte.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Byte512Mask.class, null, byte.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n@@ -784,3 +784,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_OR, Byte512Mask.class, null, byte.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Byte512Mask.class, null, byte.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n@@ -794,3 +794,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_XOR, Byte512Mask.class, null, byte.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Byte512Mask.class, null, byte.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte512Vector.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -662,3 +662,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_AND, Byte64Mask.class, null, byte.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Byte64Mask.class, null, byte.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n@@ -672,3 +672,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_OR, Byte64Mask.class, null, byte.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Byte64Mask.class, null, byte.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n@@ -682,3 +682,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_XOR, Byte64Mask.class, null, byte.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Byte64Mask.class, null, byte.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte64Vector.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -648,3 +648,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_AND, ByteMaxMask.class, null, byte.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, ByteMaxMask.class, null, byte.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n@@ -658,3 +658,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_OR, ByteMaxMask.class, null, byte.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, ByteMaxMask.class, null, byte.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n@@ -668,3 +668,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_XOR, ByteMaxMask.class, null, byte.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, ByteMaxMask.class, null, byte.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteMaxVector.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -568,1 +568,1 @@\n-        return VectorSupport.unaryMaskedOp(\n+        return VectorSupport.unaryOp(\n@@ -571,1 +571,1 @@\n-            UN_MASKED_IMPL.find(op, opc, ByteVector::unaryOperations));\n+            UN_IMPL.find(op, opc, ByteVector::unaryOperations));\n@@ -596,1 +596,1 @@\n-        return VectorSupport.unaryMaskedOp(\n+        return VectorSupport.unaryOp(\n@@ -599,1 +599,1 @@\n-            UN_MASKED_IMPL.find(op, opc, ByteVector::unaryOperations));\n+            UN_IMPL.find(op, opc, ByteVector::unaryOperations));\n@@ -603,2 +603,2 @@\n-    ImplCache<Unary, UnaryMaskedOperation<ByteVector, VectorMask<Byte>>>\n-        UN_MASKED_IMPL = new ImplCache<>(Unary.class, ByteVector.class);\n+    ImplCache<Unary, UnaryOperation<ByteVector, VectorMask<Byte>>>\n+        UN_IMPL = new ImplCache<>(Unary.class, ByteVector.class);\n@@ -606,1 +606,1 @@\n-    private static UnaryMaskedOperation<ByteVector, VectorMask<Byte>> unaryOperations(int opc_) {\n+    private static UnaryOperation<ByteVector, VectorMask<Byte>> unaryOperations(int opc_) {\n@@ -665,1 +665,1 @@\n-        return VectorSupport.binaryMaskedOp(\n+        return VectorSupport.binaryOp(\n@@ -668,1 +668,1 @@\n-            BIN_MASKED_IMPL.find(op, opc, ByteVector::binaryOperations));\n+            BIN_IMPL.find(op, opc, ByteVector::binaryOperations));\n@@ -719,1 +719,1 @@\n-        return VectorSupport.binaryMaskedOp(\n+        return VectorSupport.binaryOp(\n@@ -722,1 +722,1 @@\n-            BIN_MASKED_IMPL.find(op, opc, ByteVector::binaryOperations));\n+            BIN_IMPL.find(op, opc, ByteVector::binaryOperations));\n@@ -726,2 +726,2 @@\n-    ImplCache<Binary, BinaryMaskedOperation<ByteVector, VectorMask<Byte>>>\n-        BIN_MASKED_IMPL = new ImplCache<>(Binary.class, ByteVector.class);\n+    ImplCache<Binary, BinaryOperation<ByteVector, VectorMask<Byte>>>\n+        BIN_IMPL = new ImplCache<>(Binary.class, ByteVector.class);\n@@ -729,1 +729,1 @@\n-    private static BinaryMaskedOperation<ByteVector, VectorMask<Byte>> binaryOperations(int opc_) {\n+    private static BinaryOperation<ByteVector, VectorMask<Byte>> binaryOperations(int opc_) {\n@@ -964,1 +964,1 @@\n-        return VectorSupport.ternaryMaskedOp(\n+        return VectorSupport.ternaryOp(\n@@ -967,1 +967,1 @@\n-            TERN_MASKED_IMPL.find(op, opc, ByteVector::ternaryOperations));\n+            TERN_IMPL.find(op, opc, ByteVector::ternaryOperations));\n@@ -1004,1 +1004,1 @@\n-        return VectorSupport.ternaryMaskedOp(\n+        return VectorSupport.ternaryOp(\n@@ -1007,1 +1007,1 @@\n-            TERN_MASKED_IMPL.find(op, opc, ByteVector::ternaryOperations));\n+            TERN_IMPL.find(op, opc, ByteVector::ternaryOperations));\n@@ -1011,2 +1011,2 @@\n-    ImplCache<Ternary, TernaryMaskedOperation<ByteVector, VectorMask<Byte>>>\n-        TERN_MASKED_IMPL = new ImplCache<>(Ternary.class, ByteVector.class);\n+    ImplCache<Ternary, TernaryOperation<ByteVector, VectorMask<Byte>>>\n+        TERN_IMPL = new ImplCache<>(Ternary.class, ByteVector.class);\n@@ -1014,1 +1014,1 @@\n-    private static TernaryMaskedOperation<ByteVector, VectorMask<Byte>> ternaryOperations(int opc_) {\n+    private static TernaryOperation<ByteVector, VectorMask<Byte>> ternaryOperations(int opc_) {\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteVector.java","additions":21,"deletions":21,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -646,3 +646,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_AND, Double128Mask.class, null, long.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Double128Mask.class, null, long.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n@@ -656,3 +656,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_OR, Double128Mask.class, null, long.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Double128Mask.class, null, long.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n@@ -666,3 +666,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_XOR, Double128Mask.class, null, long.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Double128Mask.class, null, long.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double128Vector.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -650,3 +650,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_AND, Double256Mask.class, null, long.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Double256Mask.class, null, long.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n@@ -660,3 +660,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_OR, Double256Mask.class, null, long.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Double256Mask.class, null, long.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n@@ -670,3 +670,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_XOR, Double256Mask.class, null, long.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Double256Mask.class, null, long.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double256Vector.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -658,3 +658,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_AND, Double512Mask.class, null, long.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Double512Mask.class, null, long.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n@@ -668,3 +668,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_OR, Double512Mask.class, null, long.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Double512Mask.class, null, long.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n@@ -678,3 +678,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_XOR, Double512Mask.class, null, long.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Double512Mask.class, null, long.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double512Vector.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -644,3 +644,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_AND, Double64Mask.class, null, long.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Double64Mask.class, null, long.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n@@ -654,3 +654,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_OR, Double64Mask.class, null, long.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Double64Mask.class, null, long.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n@@ -664,3 +664,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_XOR, Double64Mask.class, null, long.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Double64Mask.class, null, long.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double64Vector.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -643,3 +643,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_AND, DoubleMaxMask.class, null, long.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, DoubleMaxMask.class, null, long.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n@@ -653,3 +653,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_OR, DoubleMaxMask.class, null, long.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, DoubleMaxMask.class, null, long.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n@@ -663,3 +663,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_XOR, DoubleMaxMask.class, null, long.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, DoubleMaxMask.class, null, long.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleMaxVector.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -562,1 +562,1 @@\n-        return VectorSupport.unaryMaskedOp(\n+        return VectorSupport.unaryOp(\n@@ -565,1 +565,1 @@\n-            UN_MASKED_IMPL.find(op, opc, DoubleVector::unaryOperations));\n+            UN_IMPL.find(op, opc, DoubleVector::unaryOperations));\n@@ -587,1 +587,1 @@\n-        return VectorSupport.unaryMaskedOp(\n+        return VectorSupport.unaryOp(\n@@ -590,1 +590,1 @@\n-            UN_MASKED_IMPL.find(op, opc, DoubleVector::unaryOperations));\n+            UN_IMPL.find(op, opc, DoubleVector::unaryOperations));\n@@ -594,2 +594,2 @@\n-    ImplCache<Unary, UnaryMaskedOperation<DoubleVector, VectorMask<Double>>>\n-        UN_MASKED_IMPL = new ImplCache<>(Unary.class, DoubleVector.class);\n+    ImplCache<Unary, UnaryOperation<DoubleVector, VectorMask<Double>>>\n+        UN_IMPL = new ImplCache<>(Unary.class, DoubleVector.class);\n@@ -597,1 +597,1 @@\n-    private static UnaryMaskedOperation<DoubleVector, VectorMask<Double>> unaryOperations(int opc_) {\n+    private static UnaryOperation<DoubleVector, VectorMask<Double>> unaryOperations(int opc_) {\n@@ -672,1 +672,1 @@\n-        return VectorSupport.binaryMaskedOp(\n+        return VectorSupport.binaryOp(\n@@ -675,1 +675,1 @@\n-            BIN_MASKED_IMPL.find(op, opc, DoubleVector::binaryOperations));\n+            BIN_IMPL.find(op, opc, DoubleVector::binaryOperations));\n@@ -703,1 +703,1 @@\n-        return VectorSupport.binaryMaskedOp(\n+        return VectorSupport.binaryOp(\n@@ -706,1 +706,1 @@\n-            BIN_MASKED_IMPL.find(op, opc, DoubleVector::binaryOperations));\n+            BIN_IMPL.find(op, opc, DoubleVector::binaryOperations));\n@@ -710,2 +710,2 @@\n-    ImplCache<Binary, BinaryMaskedOperation<DoubleVector, VectorMask<Double>>>\n-        BIN_MASKED_IMPL = new ImplCache<>(Binary.class, DoubleVector.class);\n+    ImplCache<Binary, BinaryOperation<DoubleVector, VectorMask<Double>>>\n+        BIN_IMPL = new ImplCache<>(Binary.class, DoubleVector.class);\n@@ -713,1 +713,1 @@\n-    private static BinaryMaskedOperation<DoubleVector, VectorMask<Double>> binaryOperations(int opc_) {\n+    private static BinaryOperation<DoubleVector, VectorMask<Double>> binaryOperations(int opc_) {\n@@ -878,1 +878,1 @@\n-        return VectorSupport.ternaryMaskedOp(\n+        return VectorSupport.ternaryOp(\n@@ -881,1 +881,1 @@\n-            TERN_MASKED_IMPL.find(op, opc, DoubleVector::ternaryOperations));\n+            TERN_IMPL.find(op, opc, DoubleVector::ternaryOperations));\n@@ -913,1 +913,1 @@\n-        return VectorSupport.ternaryMaskedOp(\n+        return VectorSupport.ternaryOp(\n@@ -916,1 +916,1 @@\n-            TERN_MASKED_IMPL.find(op, opc, DoubleVector::ternaryOperations));\n+            TERN_IMPL.find(op, opc, DoubleVector::ternaryOperations));\n@@ -920,2 +920,2 @@\n-    ImplCache<Ternary, TernaryMaskedOperation<DoubleVector, VectorMask<Double>>>\n-        TERN_MASKED_IMPL = new ImplCache<>(Ternary.class, DoubleVector.class);\n+    ImplCache<Ternary, TernaryOperation<DoubleVector, VectorMask<Double>>>\n+        TERN_IMPL = new ImplCache<>(Ternary.class, DoubleVector.class);\n@@ -923,1 +923,1 @@\n-    private static TernaryMaskedOperation<DoubleVector, VectorMask<Double>> ternaryOperations(int opc_) {\n+    private static TernaryOperation<DoubleVector, VectorMask<Double>> ternaryOperations(int opc_) {\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleVector.java","additions":21,"deletions":21,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -650,3 +650,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_AND, Float128Mask.class, null, int.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Float128Mask.class, null, int.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n@@ -660,3 +660,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_OR, Float128Mask.class, null, int.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Float128Mask.class, null, int.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n@@ -670,3 +670,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_XOR, Float128Mask.class, null, int.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Float128Mask.class, null, int.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float128Vector.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -658,3 +658,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_AND, Float256Mask.class, null, int.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Float256Mask.class, null, int.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n@@ -668,3 +668,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_OR, Float256Mask.class, null, int.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Float256Mask.class, null, int.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n@@ -678,3 +678,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_XOR, Float256Mask.class, null, int.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Float256Mask.class, null, int.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float256Vector.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -674,3 +674,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_AND, Float512Mask.class, null, int.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Float512Mask.class, null, int.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n@@ -684,3 +684,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_OR, Float512Mask.class, null, int.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Float512Mask.class, null, int.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n@@ -694,3 +694,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_XOR, Float512Mask.class, null, int.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Float512Mask.class, null, int.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float512Vector.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -646,3 +646,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_AND, Float64Mask.class, null, int.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Float64Mask.class, null, int.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n@@ -656,3 +656,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_OR, Float64Mask.class, null, int.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Float64Mask.class, null, int.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n@@ -666,3 +666,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_XOR, Float64Mask.class, null, int.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Float64Mask.class, null, int.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float64Vector.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -643,3 +643,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_AND, FloatMaxMask.class, null, int.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, FloatMaxMask.class, null, int.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n@@ -653,3 +653,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_OR, FloatMaxMask.class, null, int.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, FloatMaxMask.class, null, int.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n@@ -663,3 +663,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_XOR, FloatMaxMask.class, null, int.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, FloatMaxMask.class, null, int.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatMaxVector.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -562,1 +562,1 @@\n-        return VectorSupport.unaryMaskedOp(\n+        return VectorSupport.unaryOp(\n@@ -565,1 +565,1 @@\n-            UN_MASKED_IMPL.find(op, opc, FloatVector::unaryOperations));\n+            UN_IMPL.find(op, opc, FloatVector::unaryOperations));\n@@ -587,1 +587,1 @@\n-        return VectorSupport.unaryMaskedOp(\n+        return VectorSupport.unaryOp(\n@@ -590,1 +590,1 @@\n-            UN_MASKED_IMPL.find(op, opc, FloatVector::unaryOperations));\n+            UN_IMPL.find(op, opc, FloatVector::unaryOperations));\n@@ -594,2 +594,2 @@\n-    ImplCache<Unary, UnaryMaskedOperation<FloatVector, VectorMask<Float>>>\n-        UN_MASKED_IMPL = new ImplCache<>(Unary.class, FloatVector.class);\n+    ImplCache<Unary, UnaryOperation<FloatVector, VectorMask<Float>>>\n+        UN_IMPL = new ImplCache<>(Unary.class, FloatVector.class);\n@@ -597,1 +597,1 @@\n-    private static UnaryMaskedOperation<FloatVector, VectorMask<Float>> unaryOperations(int opc_) {\n+    private static UnaryOperation<FloatVector, VectorMask<Float>> unaryOperations(int opc_) {\n@@ -672,1 +672,1 @@\n-        return VectorSupport.binaryMaskedOp(\n+        return VectorSupport.binaryOp(\n@@ -675,1 +675,1 @@\n-            BIN_MASKED_IMPL.find(op, opc, FloatVector::binaryOperations));\n+            BIN_IMPL.find(op, opc, FloatVector::binaryOperations));\n@@ -703,1 +703,1 @@\n-        return VectorSupport.binaryMaskedOp(\n+        return VectorSupport.binaryOp(\n@@ -706,1 +706,1 @@\n-            BIN_MASKED_IMPL.find(op, opc, FloatVector::binaryOperations));\n+            BIN_IMPL.find(op, opc, FloatVector::binaryOperations));\n@@ -710,2 +710,2 @@\n-    ImplCache<Binary, BinaryMaskedOperation<FloatVector, VectorMask<Float>>>\n-        BIN_MASKED_IMPL = new ImplCache<>(Binary.class, FloatVector.class);\n+    ImplCache<Binary, BinaryOperation<FloatVector, VectorMask<Float>>>\n+        BIN_IMPL = new ImplCache<>(Binary.class, FloatVector.class);\n@@ -713,1 +713,1 @@\n-    private static BinaryMaskedOperation<FloatVector, VectorMask<Float>> binaryOperations(int opc_) {\n+    private static BinaryOperation<FloatVector, VectorMask<Float>> binaryOperations(int opc_) {\n@@ -878,1 +878,1 @@\n-        return VectorSupport.ternaryMaskedOp(\n+        return VectorSupport.ternaryOp(\n@@ -881,1 +881,1 @@\n-            TERN_MASKED_IMPL.find(op, opc, FloatVector::ternaryOperations));\n+            TERN_IMPL.find(op, opc, FloatVector::ternaryOperations));\n@@ -913,1 +913,1 @@\n-        return VectorSupport.ternaryMaskedOp(\n+        return VectorSupport.ternaryOp(\n@@ -916,1 +916,1 @@\n-            TERN_MASKED_IMPL.find(op, opc, FloatVector::ternaryOperations));\n+            TERN_IMPL.find(op, opc, FloatVector::ternaryOperations));\n@@ -920,2 +920,2 @@\n-    ImplCache<Ternary, TernaryMaskedOperation<FloatVector, VectorMask<Float>>>\n-        TERN_MASKED_IMPL = new ImplCache<>(Ternary.class, FloatVector.class);\n+    ImplCache<Ternary, TernaryOperation<FloatVector, VectorMask<Float>>>\n+        TERN_IMPL = new ImplCache<>(Ternary.class, FloatVector.class);\n@@ -923,1 +923,1 @@\n-    private static TernaryMaskedOperation<FloatVector, VectorMask<Float>> ternaryOperations(int opc_) {\n+    private static TernaryOperation<FloatVector, VectorMask<Float>> ternaryOperations(int opc_) {\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatVector.java","additions":21,"deletions":21,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -654,3 +654,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_AND, Int128Mask.class, null, int.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Int128Mask.class, null, int.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n@@ -664,3 +664,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_OR, Int128Mask.class, null, int.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Int128Mask.class, null, int.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n@@ -674,3 +674,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_XOR, Int128Mask.class, null, int.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Int128Mask.class, null, int.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int128Vector.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -662,3 +662,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_AND, Int256Mask.class, null, int.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Int256Mask.class, null, int.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n@@ -672,3 +672,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_OR, Int256Mask.class, null, int.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Int256Mask.class, null, int.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n@@ -682,3 +682,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_XOR, Int256Mask.class, null, int.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Int256Mask.class, null, int.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int256Vector.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -678,3 +678,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_AND, Int512Mask.class, null, int.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Int512Mask.class, null, int.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n@@ -688,3 +688,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_OR, Int512Mask.class, null, int.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Int512Mask.class, null, int.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n@@ -698,3 +698,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_XOR, Int512Mask.class, null, int.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Int512Mask.class, null, int.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int512Vector.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -650,3 +650,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_AND, Int64Mask.class, null, int.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Int64Mask.class, null, int.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n@@ -660,3 +660,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_OR, Int64Mask.class, null, int.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Int64Mask.class, null, int.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n@@ -670,3 +670,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_XOR, Int64Mask.class, null, int.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Int64Mask.class, null, int.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int64Vector.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -648,3 +648,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_AND, IntMaxMask.class, null, int.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, IntMaxMask.class, null, int.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n@@ -658,3 +658,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_OR, IntMaxMask.class, null, int.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, IntMaxMask.class, null, int.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n@@ -668,3 +668,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_XOR, IntMaxMask.class, null, int.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, IntMaxMask.class, null, int.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntMaxVector.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -568,1 +568,1 @@\n-        return VectorSupport.unaryMaskedOp(\n+        return VectorSupport.unaryOp(\n@@ -571,1 +571,1 @@\n-            UN_MASKED_IMPL.find(op, opc, IntVector::unaryOperations));\n+            UN_IMPL.find(op, opc, IntVector::unaryOperations));\n@@ -596,1 +596,1 @@\n-        return VectorSupport.unaryMaskedOp(\n+        return VectorSupport.unaryOp(\n@@ -599,1 +599,1 @@\n-            UN_MASKED_IMPL.find(op, opc, IntVector::unaryOperations));\n+            UN_IMPL.find(op, opc, IntVector::unaryOperations));\n@@ -603,2 +603,2 @@\n-    ImplCache<Unary, UnaryMaskedOperation<IntVector, VectorMask<Integer>>>\n-        UN_MASKED_IMPL = new ImplCache<>(Unary.class, IntVector.class);\n+    ImplCache<Unary, UnaryOperation<IntVector, VectorMask<Integer>>>\n+        UN_IMPL = new ImplCache<>(Unary.class, IntVector.class);\n@@ -606,1 +606,1 @@\n-    private static UnaryMaskedOperation<IntVector, VectorMask<Integer>> unaryOperations(int opc_) {\n+    private static UnaryOperation<IntVector, VectorMask<Integer>> unaryOperations(int opc_) {\n@@ -665,1 +665,1 @@\n-        return VectorSupport.binaryMaskedOp(\n+        return VectorSupport.binaryOp(\n@@ -668,1 +668,1 @@\n-            BIN_MASKED_IMPL.find(op, opc, IntVector::binaryOperations));\n+            BIN_IMPL.find(op, opc, IntVector::binaryOperations));\n@@ -719,1 +719,1 @@\n-        return VectorSupport.binaryMaskedOp(\n+        return VectorSupport.binaryOp(\n@@ -722,1 +722,1 @@\n-            BIN_MASKED_IMPL.find(op, opc, IntVector::binaryOperations));\n+            BIN_IMPL.find(op, opc, IntVector::binaryOperations));\n@@ -726,2 +726,2 @@\n-    ImplCache<Binary, BinaryMaskedOperation<IntVector, VectorMask<Integer>>>\n-        BIN_MASKED_IMPL = new ImplCache<>(Binary.class, IntVector.class);\n+    ImplCache<Binary, BinaryOperation<IntVector, VectorMask<Integer>>>\n+        BIN_IMPL = new ImplCache<>(Binary.class, IntVector.class);\n@@ -729,1 +729,1 @@\n-    private static BinaryMaskedOperation<IntVector, VectorMask<Integer>> binaryOperations(int opc_) {\n+    private static BinaryOperation<IntVector, VectorMask<Integer>> binaryOperations(int opc_) {\n@@ -963,1 +963,1 @@\n-        return VectorSupport.ternaryMaskedOp(\n+        return VectorSupport.ternaryOp(\n@@ -966,1 +966,1 @@\n-            TERN_MASKED_IMPL.find(op, opc, IntVector::ternaryOperations));\n+            TERN_IMPL.find(op, opc, IntVector::ternaryOperations));\n@@ -1003,1 +1003,1 @@\n-        return VectorSupport.ternaryMaskedOp(\n+        return VectorSupport.ternaryOp(\n@@ -1006,1 +1006,1 @@\n-            TERN_MASKED_IMPL.find(op, opc, IntVector::ternaryOperations));\n+            TERN_IMPL.find(op, opc, IntVector::ternaryOperations));\n@@ -1010,2 +1010,2 @@\n-    ImplCache<Ternary, TernaryMaskedOperation<IntVector, VectorMask<Integer>>>\n-        TERN_MASKED_IMPL = new ImplCache<>(Ternary.class, IntVector.class);\n+    ImplCache<Ternary, TernaryOperation<IntVector, VectorMask<Integer>>>\n+        TERN_IMPL = new ImplCache<>(Ternary.class, IntVector.class);\n@@ -1013,1 +1013,1 @@\n-    private static TernaryMaskedOperation<IntVector, VectorMask<Integer>> ternaryOperations(int opc_) {\n+    private static TernaryOperation<IntVector, VectorMask<Integer>> ternaryOperations(int opc_) {\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntVector.java","additions":21,"deletions":21,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -640,3 +640,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_AND, Long128Mask.class, null, long.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Long128Mask.class, null, long.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n@@ -650,3 +650,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_OR, Long128Mask.class, null, long.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Long128Mask.class, null, long.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n@@ -660,3 +660,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_XOR, Long128Mask.class, null, long.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Long128Mask.class, null, long.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long128Vector.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -644,3 +644,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_AND, Long256Mask.class, null, long.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Long256Mask.class, null, long.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n@@ -654,3 +654,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_OR, Long256Mask.class, null, long.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Long256Mask.class, null, long.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n@@ -664,3 +664,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_XOR, Long256Mask.class, null, long.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Long256Mask.class, null, long.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long256Vector.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -652,3 +652,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_AND, Long512Mask.class, null, long.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Long512Mask.class, null, long.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n@@ -662,3 +662,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_OR, Long512Mask.class, null, long.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Long512Mask.class, null, long.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n@@ -672,3 +672,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_XOR, Long512Mask.class, null, long.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Long512Mask.class, null, long.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long512Vector.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -638,3 +638,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_AND, Long64Mask.class, null, long.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Long64Mask.class, null, long.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n@@ -648,3 +648,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_OR, Long64Mask.class, null, long.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Long64Mask.class, null, long.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n@@ -658,3 +658,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_XOR, Long64Mask.class, null, long.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Long64Mask.class, null, long.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long64Vector.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -638,3 +638,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_AND, LongMaxMask.class, null, long.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, LongMaxMask.class, null, long.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n@@ -648,3 +648,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_OR, LongMaxMask.class, null, long.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, LongMaxMask.class, null, long.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n@@ -658,3 +658,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_XOR, LongMaxMask.class, null, long.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, LongMaxMask.class, null, long.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongMaxVector.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -526,1 +526,1 @@\n-        return VectorSupport.unaryMaskedOp(\n+        return VectorSupport.unaryOp(\n@@ -529,1 +529,1 @@\n-            UN_MASKED_IMPL.find(op, opc, LongVector::unaryOperations));\n+            UN_IMPL.find(op, opc, LongVector::unaryOperations));\n@@ -554,1 +554,1 @@\n-        return VectorSupport.unaryMaskedOp(\n+        return VectorSupport.unaryOp(\n@@ -557,1 +557,1 @@\n-            UN_MASKED_IMPL.find(op, opc, LongVector::unaryOperations));\n+            UN_IMPL.find(op, opc, LongVector::unaryOperations));\n@@ -561,2 +561,2 @@\n-    ImplCache<Unary, UnaryMaskedOperation<LongVector, VectorMask<Long>>>\n-        UN_MASKED_IMPL = new ImplCache<>(Unary.class, LongVector.class);\n+    ImplCache<Unary, UnaryOperation<LongVector, VectorMask<Long>>>\n+        UN_IMPL = new ImplCache<>(Unary.class, LongVector.class);\n@@ -564,1 +564,1 @@\n-    private static UnaryMaskedOperation<LongVector, VectorMask<Long>> unaryOperations(int opc_) {\n+    private static UnaryOperation<LongVector, VectorMask<Long>> unaryOperations(int opc_) {\n@@ -623,1 +623,1 @@\n-        return VectorSupport.binaryMaskedOp(\n+        return VectorSupport.binaryOp(\n@@ -626,1 +626,1 @@\n-            BIN_MASKED_IMPL.find(op, opc, LongVector::binaryOperations));\n+            BIN_IMPL.find(op, opc, LongVector::binaryOperations));\n@@ -677,1 +677,1 @@\n-        return VectorSupport.binaryMaskedOp(\n+        return VectorSupport.binaryOp(\n@@ -680,1 +680,1 @@\n-            BIN_MASKED_IMPL.find(op, opc, LongVector::binaryOperations));\n+            BIN_IMPL.find(op, opc, LongVector::binaryOperations));\n@@ -684,2 +684,2 @@\n-    ImplCache<Binary, BinaryMaskedOperation<LongVector, VectorMask<Long>>>\n-        BIN_MASKED_IMPL = new ImplCache<>(Binary.class, LongVector.class);\n+    ImplCache<Binary, BinaryOperation<LongVector, VectorMask<Long>>>\n+        BIN_IMPL = new ImplCache<>(Binary.class, LongVector.class);\n@@ -687,1 +687,1 @@\n-    private static BinaryMaskedOperation<LongVector, VectorMask<Long>> binaryOperations(int opc_) {\n+    private static BinaryOperation<LongVector, VectorMask<Long>> binaryOperations(int opc_) {\n@@ -876,1 +876,1 @@\n-        return VectorSupport.ternaryMaskedOp(\n+        return VectorSupport.ternaryOp(\n@@ -879,1 +879,1 @@\n-            TERN_MASKED_IMPL.find(op, opc, LongVector::ternaryOperations));\n+            TERN_IMPL.find(op, opc, LongVector::ternaryOperations));\n@@ -916,1 +916,1 @@\n-        return VectorSupport.ternaryMaskedOp(\n+        return VectorSupport.ternaryOp(\n@@ -919,1 +919,1 @@\n-            TERN_MASKED_IMPL.find(op, opc, LongVector::ternaryOperations));\n+            TERN_IMPL.find(op, opc, LongVector::ternaryOperations));\n@@ -923,2 +923,2 @@\n-    ImplCache<Ternary, TernaryMaskedOperation<LongVector, VectorMask<Long>>>\n-        TERN_MASKED_IMPL = new ImplCache<>(Ternary.class, LongVector.class);\n+    ImplCache<Ternary, TernaryOperation<LongVector, VectorMask<Long>>>\n+        TERN_IMPL = new ImplCache<>(Ternary.class, LongVector.class);\n@@ -926,1 +926,1 @@\n-    private static TernaryMaskedOperation<LongVector, VectorMask<Long>> ternaryOperations(int opc_) {\n+    private static TernaryOperation<LongVector, VectorMask<Long>> ternaryOperations(int opc_) {\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongVector.java","additions":21,"deletions":21,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -662,3 +662,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_AND, Short128Mask.class, null, short.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Short128Mask.class, null, short.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n@@ -672,3 +672,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_OR, Short128Mask.class, null, short.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Short128Mask.class, null, short.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n@@ -682,3 +682,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_XOR, Short128Mask.class, null, short.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Short128Mask.class, null, short.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short128Vector.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -678,3 +678,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_AND, Short256Mask.class, null, short.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Short256Mask.class, null, short.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n@@ -688,3 +688,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_OR, Short256Mask.class, null, short.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Short256Mask.class, null, short.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n@@ -698,3 +698,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_XOR, Short256Mask.class, null, short.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Short256Mask.class, null, short.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short256Vector.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -710,3 +710,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_AND, Short512Mask.class, null, short.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Short512Mask.class, null, short.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n@@ -720,3 +720,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_OR, Short512Mask.class, null, short.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Short512Mask.class, null, short.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n@@ -730,3 +730,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_XOR, Short512Mask.class, null, short.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Short512Mask.class, null, short.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short512Vector.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -654,3 +654,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_AND, Short64Mask.class, null, short.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Short64Mask.class, null, short.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n@@ -664,3 +664,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_OR, Short64Mask.class, null, short.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Short64Mask.class, null, short.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n@@ -674,3 +674,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_XOR, Short64Mask.class, null, short.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Short64Mask.class, null, short.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short64Vector.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -648,3 +648,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_AND, ShortMaxMask.class, null, short.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, ShortMaxMask.class, null, short.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n@@ -658,3 +658,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_OR, ShortMaxMask.class, null, short.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, ShortMaxMask.class, null, short.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n@@ -668,3 +668,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_XOR, ShortMaxMask.class, null, short.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, ShortMaxMask.class, null, short.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortMaxVector.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -568,1 +568,1 @@\n-        return VectorSupport.unaryMaskedOp(\n+        return VectorSupport.unaryOp(\n@@ -571,1 +571,1 @@\n-            UN_MASKED_IMPL.find(op, opc, ShortVector::unaryOperations));\n+            UN_IMPL.find(op, opc, ShortVector::unaryOperations));\n@@ -596,1 +596,1 @@\n-        return VectorSupport.unaryMaskedOp(\n+        return VectorSupport.unaryOp(\n@@ -599,1 +599,1 @@\n-            UN_MASKED_IMPL.find(op, opc, ShortVector::unaryOperations));\n+            UN_IMPL.find(op, opc, ShortVector::unaryOperations));\n@@ -603,2 +603,2 @@\n-    ImplCache<Unary, UnaryMaskedOperation<ShortVector, VectorMask<Short>>>\n-        UN_MASKED_IMPL = new ImplCache<>(Unary.class, ShortVector.class);\n+    ImplCache<Unary, UnaryOperation<ShortVector, VectorMask<Short>>>\n+        UN_IMPL = new ImplCache<>(Unary.class, ShortVector.class);\n@@ -606,1 +606,1 @@\n-    private static UnaryMaskedOperation<ShortVector, VectorMask<Short>> unaryOperations(int opc_) {\n+    private static UnaryOperation<ShortVector, VectorMask<Short>> unaryOperations(int opc_) {\n@@ -665,1 +665,1 @@\n-        return VectorSupport.binaryMaskedOp(\n+        return VectorSupport.binaryOp(\n@@ -668,1 +668,1 @@\n-            BIN_MASKED_IMPL.find(op, opc, ShortVector::binaryOperations));\n+            BIN_IMPL.find(op, opc, ShortVector::binaryOperations));\n@@ -719,1 +719,1 @@\n-        return VectorSupport.binaryMaskedOp(\n+        return VectorSupport.binaryOp(\n@@ -722,1 +722,1 @@\n-            BIN_MASKED_IMPL.find(op, opc, ShortVector::binaryOperations));\n+            BIN_IMPL.find(op, opc, ShortVector::binaryOperations));\n@@ -726,2 +726,2 @@\n-    ImplCache<Binary, BinaryMaskedOperation<ShortVector, VectorMask<Short>>>\n-        BIN_MASKED_IMPL = new ImplCache<>(Binary.class, ShortVector.class);\n+    ImplCache<Binary, BinaryOperation<ShortVector, VectorMask<Short>>>\n+        BIN_IMPL = new ImplCache<>(Binary.class, ShortVector.class);\n@@ -729,1 +729,1 @@\n-    private static BinaryMaskedOperation<ShortVector, VectorMask<Short>> binaryOperations(int opc_) {\n+    private static BinaryOperation<ShortVector, VectorMask<Short>> binaryOperations(int opc_) {\n@@ -964,1 +964,1 @@\n-        return VectorSupport.ternaryMaskedOp(\n+        return VectorSupport.ternaryOp(\n@@ -967,1 +967,1 @@\n-            TERN_MASKED_IMPL.find(op, opc, ShortVector::ternaryOperations));\n+            TERN_IMPL.find(op, opc, ShortVector::ternaryOperations));\n@@ -1004,1 +1004,1 @@\n-        return VectorSupport.ternaryMaskedOp(\n+        return VectorSupport.ternaryOp(\n@@ -1007,1 +1007,1 @@\n-            TERN_MASKED_IMPL.find(op, opc, ShortVector::ternaryOperations));\n+            TERN_IMPL.find(op, opc, ShortVector::ternaryOperations));\n@@ -1011,2 +1011,2 @@\n-    ImplCache<Ternary, TernaryMaskedOperation<ShortVector, VectorMask<Short>>>\n-        TERN_MASKED_IMPL = new ImplCache<>(Ternary.class, ShortVector.class);\n+    ImplCache<Ternary, TernaryOperation<ShortVector, VectorMask<Short>>>\n+        TERN_IMPL = new ImplCache<>(Ternary.class, ShortVector.class);\n@@ -1014,1 +1014,1 @@\n-    private static TernaryMaskedOperation<ShortVector, VectorMask<Short>> ternaryOperations(int opc_) {\n+    private static TernaryOperation<ShortVector, VectorMask<Short>> ternaryOperations(int opc_) {\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortVector.java","additions":21,"deletions":21,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -582,1 +582,1 @@\n-        return VectorSupport.unaryMaskedOp(\n+        return VectorSupport.unaryOp(\n@@ -585,1 +585,1 @@\n-            UN_MASKED_IMPL.find(op, opc, $abstractvectortype$::unaryOperations));\n+            UN_IMPL.find(op, opc, $abstractvectortype$::unaryOperations));\n@@ -612,1 +612,1 @@\n-        return VectorSupport.unaryMaskedOp(\n+        return VectorSupport.unaryOp(\n@@ -615,1 +615,1 @@\n-            UN_MASKED_IMPL.find(op, opc, $abstractvectortype$::unaryOperations));\n+            UN_IMPL.find(op, opc, $abstractvectortype$::unaryOperations));\n@@ -619,2 +619,2 @@\n-    ImplCache<Unary, UnaryMaskedOperation<$abstractvectortype$, VectorMask<$Boxtype$>>>\n-        UN_MASKED_IMPL = new ImplCache<>(Unary.class, $Type$Vector.class);\n+    ImplCache<Unary, UnaryOperation<$abstractvectortype$, VectorMask<$Boxtype$>>>\n+        UN_IMPL = new ImplCache<>(Unary.class, $Type$Vector.class);\n@@ -622,1 +622,1 @@\n-    private static UnaryMaskedOperation<$abstractvectortype$, VectorMask<$Boxtype$>> unaryOperations(int opc_) {\n+    private static UnaryOperation<$abstractvectortype$, VectorMask<$Boxtype$>> unaryOperations(int opc_) {\n@@ -725,1 +725,1 @@\n-        return VectorSupport.binaryMaskedOp(\n+        return VectorSupport.binaryOp(\n@@ -728,1 +728,1 @@\n-            BIN_MASKED_IMPL.find(op, opc, $abstractvectortype$::binaryOperations));\n+            BIN_IMPL.find(op, opc, $abstractvectortype$::binaryOperations));\n@@ -787,1 +787,1 @@\n-        return VectorSupport.binaryMaskedOp(\n+        return VectorSupport.binaryOp(\n@@ -790,1 +790,1 @@\n-            BIN_MASKED_IMPL.find(op, opc, $abstractvectortype$::binaryOperations));\n+            BIN_IMPL.find(op, opc, $abstractvectortype$::binaryOperations));\n@@ -794,2 +794,2 @@\n-    ImplCache<Binary, BinaryMaskedOperation<$abstractvectortype$, VectorMask<$Boxtype$>>>\n-        BIN_MASKED_IMPL = new ImplCache<>(Binary.class, $Type$Vector.class);\n+    ImplCache<Binary, BinaryOperation<$abstractvectortype$, VectorMask<$Boxtype$>>>\n+        BIN_IMPL = new ImplCache<>(Binary.class, $Type$Vector.class);\n@@ -797,1 +797,1 @@\n-    private static BinaryMaskedOperation<$abstractvectortype$, VectorMask<$Boxtype$>> binaryOperations(int opc_) {\n+    private static BinaryOperation<$abstractvectortype$, VectorMask<$Boxtype$>> binaryOperations(int opc_) {\n@@ -1066,1 +1066,1 @@\n-        return VectorSupport.ternaryMaskedOp(\n+        return VectorSupport.ternaryOp(\n@@ -1069,1 +1069,1 @@\n-            TERN_MASKED_IMPL.find(op, opc, $abstractvectortype$::ternaryOperations));\n+            TERN_IMPL.find(op, opc, $abstractvectortype$::ternaryOperations));\n@@ -1108,1 +1108,1 @@\n-        return VectorSupport.ternaryMaskedOp(\n+        return VectorSupport.ternaryOp(\n@@ -1111,1 +1111,1 @@\n-            TERN_MASKED_IMPL.find(op, opc, $abstractvectortype$::ternaryOperations));\n+            TERN_IMPL.find(op, opc, $abstractvectortype$::ternaryOperations));\n@@ -1115,2 +1115,2 @@\n-    ImplCache<Ternary, TernaryMaskedOperation<$abstractvectortype$, VectorMask<$Boxtype$>>>\n-        TERN_MASKED_IMPL = new ImplCache<>(Ternary.class, $Type$Vector.class);\n+    ImplCache<Ternary, TernaryOperation<$abstractvectortype$, VectorMask<$Boxtype$>>>\n+        TERN_IMPL = new ImplCache<>(Ternary.class, $Type$Vector.class);\n@@ -1118,1 +1118,1 @@\n-    private static TernaryMaskedOperation<$abstractvectortype$, VectorMask<$Boxtype$>> ternaryOperations(int opc_) {\n+    private static TernaryOperation<$abstractvectortype$, VectorMask<$Boxtype$>> ternaryOperations(int opc_) {\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template","additions":21,"deletions":21,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -921,3 +921,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_AND, $masktype$.class, null, $bitstype$.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, $masktype$.class, null, $bitstype$.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a & b));\n@@ -931,3 +931,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_OR, $masktype$.class, null, $bitstype$.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, $masktype$.class, null, $bitstype$.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a | b));\n@@ -941,3 +941,3 @@\n-            return VectorSupport.binaryMaskedOp(VECTOR_OP_XOR, $masktype$.class, null, $bitstype$.class, VLENGTH,\n-                                                this, m, null,\n-                                                (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, $masktype$.class, null, $bitstype$.class, VLENGTH,\n+                                          this, m, null,\n+                                          (m1, m2, vm) -> m1.bOp(m2, (i, a, b) -> a ^ b));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-VectorBits.java.template","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -525,0 +525,1 @@\n+                                \"jdk\/internal\/vm\/vector\/VectorSupport.binaryOp(ILjava\/lang\/Class;Ljava\/lang\/Class;Ljava\/lang\/Class;ILjava\/lang\/Object;Ljava\/lang\/Object;Ljava\/lang\/Object;Ljdk\/internal\/vm\/vector\/VectorSupport$BinaryOperation;)Ljava\/lang\/Object;\",\n@@ -541,1 +542,3 @@\n-                                \"jdk\/internal\/vm\/vector\/VectorSupport.test(ILjava\/lang\/Class;Ljava\/lang\/Class;ILjava\/lang\/Object;Ljava\/lang\/Object;Ljava\/util\/function\/BiFunction;)Z\");\n+                                \"jdk\/internal\/vm\/vector\/VectorSupport.ternaryOp(ILjava\/lang\/Class;Ljava\/lang\/Class;Ljava\/lang\/Class;ILjava\/lang\/Object;Ljava\/lang\/Object;Ljava\/lang\/Object;Ljava\/lang\/Object;Ljdk\/internal\/vm\/vector\/VectorSupport$TernaryOperation;)Ljava\/lang\/Object;\",\n+                                \"jdk\/internal\/vm\/vector\/VectorSupport.test(ILjava\/lang\/Class;Ljava\/lang\/Class;ILjava\/lang\/Object;Ljava\/lang\/Object;Ljava\/util\/function\/BiFunction;)Z\",\n+                                \"jdk\/internal\/vm\/vector\/VectorSupport.unaryOp(ILjava\/lang\/Class;Ljava\/lang\/Class;Ljava\/lang\/Class;ILjava\/lang\/Object;Ljava\/lang\/Object;Ljdk\/internal\/vm\/vector\/VectorSupport$UnaryOperation;)Ljava\/lang\/Object;\");\n","filename":"src\/jdk.internal.vm.compiler\/share\/classes\/org.graalvm.compiler.hotspot.test\/src\/org\/graalvm\/compiler\/hotspot\/test\/CheckGraalIntrinsics.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}