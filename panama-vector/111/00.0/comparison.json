{"files":[{"patch":"@@ -1298,24 +1298,0 @@\n-  static inline BasicType vector_element_basic_type(const MachNode* n) {\n-    const TypeVect* vt = n->bottom_type()->is_vect();\n-    return vt->element_basic_type();\n-  }\n-\n-  static inline BasicType vector_element_basic_type(const MachNode* use, const MachOper* opnd) {\n-    int def_idx = use->operand_index(opnd);\n-    Node* def = use->in(def_idx);\n-    const TypeVect* vt = def->bottom_type()->is_vect();\n-    return vt->element_basic_type();\n-  }\n-\n-  static inline uint vector_length(const MachNode* n) {\n-    const TypeVect* vt = n->bottom_type()->is_vect();\n-    return vt->length();\n-  }\n-\n-  static inline uint vector_length(const MachNode* use, const MachOper* opnd) {\n-    int def_idx = use->operand_index(opnd);\n-    Node* def = use->in(def_idx);\n-    const TypeVect* vt = def->bottom_type()->is_vect();\n-    return vt->length();\n-  }\n-\n@@ -2188,1 +2164,1 @@\n-          if (cbuf) {\n+        if (is64) {\n@@ -15019,1 +14995,1 @@\n-instruct clearArray_imm_reg(immL cnt, iRegP_R10 base, Universe dummy, rFlagsReg cr)\n+instruct clearArray_imm_reg(immL cnt, iRegP_R10 base, iRegL_R11 temp, Universe dummy, rFlagsReg cr)\n@@ -15024,1 +15000,1 @@\n-  effect(USE_KILL base);\n+  effect(TEMP temp, USE_KILL base, KILL cr);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":3,"deletions":27,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -1853,1 +1853,1 @@\n-    BasicType bt = vector_element_basic_type(this);\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n@@ -1868,1 +1868,1 @@\n-    BasicType bt = vector_element_basic_type(this);\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n@@ -5355,1 +5355,1 @@\n-    __ movw(rscratch1, vector_length(this, $src));\n+    __ movw(rscratch1, Matcher::vector_length(this, $src));\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_neon.ad","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -875,1 +875,1 @@\n-    BasicType bt = vector_element_basic_type(this);\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n@@ -890,1 +890,1 @@\n-    BasicType bt = vector_element_basic_type(this);\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n@@ -2297,1 +2297,1 @@\n-    __ movw(rscratch1, vector_length(this, $src));\n+    __ movw(rscratch1, Matcher::vector_length(this, $src));\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_neon_ad.m4","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -193,0 +193,1 @@\n+<<<<<<< HEAD\n@@ -197,0 +198,5 @@\n+=======\n+    loadStoreA_predicate(C2_MacroAssembler(&cbuf), false, dst_reg, ptrue,\n+                         Matcher::vector_element_basic_type(this), $mem->opcode(),\n+                         as_Register($mem$$base), $mem$$index, $mem$$scale, $mem$$disp);\n+>>>>>>> 82688258f676e6be8a603f6ab744d52728e3478b\n@@ -340,0 +346,1 @@\n+<<<<<<< HEAD\n@@ -379,0 +386,5 @@\n+=======\n+    loadStoreA_predicate(C2_MacroAssembler(&cbuf), true, src_reg, ptrue,\n+                         Matcher::vector_element_basic_type(this, $src), $mem->opcode(),\n+                         as_Register($mem$$base), $mem$$index, $mem$$scale, $mem$$disp);\n+>>>>>>> 82688258f676e6be8a603f6ab744d52728e3478b\n@@ -682,0 +694,1 @@\n+<<<<<<< HEAD\n@@ -684,0 +697,4 @@\n+=======\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    Assembler::SIMD_RegVariant size = elemType_to_regVariant(bt);\n+>>>>>>> 82688258f676e6be8a603f6ab744d52728e3478b\n@@ -702,0 +719,1 @@\n+<<<<<<< HEAD\n@@ -704,0 +722,4 @@\n+=======\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    Assembler::SIMD_RegVariant size = elemType_to_regVariant(bt);\n+>>>>>>> 82688258f676e6be8a603f6ab744d52728e3478b\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve.ad","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -196,0 +196,1 @@\n+<<<<<<< HEAD\n@@ -200,0 +201,5 @@\n+=======\n+    loadStoreA_predicate(C2_MacroAssembler(&cbuf), false, dst_reg, ptrue,\n+                         Matcher::vector_element_basic_type(this), $mem->opcode(),\n+                         as_Register($mem$$base), $mem$$index, $mem$$scale, $mem$$disp);\n+>>>>>>> 82688258f676e6be8a603f6ab744d52728e3478b\n@@ -277,0 +283,1 @@\n+<<<<<<< HEAD\n@@ -280,0 +287,5 @@\n+=======\n+    loadStoreA_predicate(C2_MacroAssembler(&cbuf), true, src_reg, ptrue,\n+                         Matcher::vector_element_basic_type(this, $src), $mem->opcode(),\n+                         as_Register($mem$$base), $mem$$index, $mem$$scale, $mem$$disp);\n+>>>>>>> 82688258f676e6be8a603f6ab744d52728e3478b\n@@ -473,0 +485,1 @@\n+<<<<<<< HEAD\n@@ -475,0 +488,4 @@\n+=======\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    Assembler::SIMD_RegVariant size = elemType_to_regVariant(bt);\n+>>>>>>> 82688258f676e6be8a603f6ab744d52728e3478b\n@@ -493,0 +510,1 @@\n+<<<<<<< HEAD\n@@ -495,0 +513,4 @@\n+=======\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    Assembler::SIMD_RegVariant size = elemType_to_regVariant(bt);\n+>>>>>>> 82688258f676e6be8a603f6ab744d52728e3478b\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve_ad.m4","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+#include \"compiler\/compileTask.hpp\"\n@@ -4093,62 +4094,0 @@\n-\/\/ Zero words; len is in bytes\n-\/\/ Destroys all registers except addr\n-\/\/ len must be a nonzero multiple of wordSize\n-void MacroAssembler::zero_memory(Register addr, Register len, Register t1) {\n-  assert_different_registers(addr, len, t1, rscratch1, rscratch2);\n-\n-#ifdef ASSERT\n-  { Label L;\n-    tst(len, BytesPerWord - 1);\n-    br(Assembler::EQ, L);\n-    stop(\"len is not a multiple of BytesPerWord\");\n-    bind(L);\n-  }\n-#endif\n-\n-#ifndef PRODUCT\n-  block_comment(\"zero memory\");\n-#endif\n-\n-  Label loop;\n-  Label entry;\n-\n-\/\/  Algorithm:\n-\/\/\n-\/\/    scratch1 = cnt & 7;\n-\/\/    cnt -= scratch1;\n-\/\/    p += scratch1;\n-\/\/    switch (scratch1) {\n-\/\/      do {\n-\/\/        cnt -= 8;\n-\/\/          p[-8] = 0;\n-\/\/        case 7:\n-\/\/          p[-7] = 0;\n-\/\/        case 6:\n-\/\/          p[-6] = 0;\n-\/\/          \/\/ ...\n-\/\/        case 1:\n-\/\/          p[-1] = 0;\n-\/\/        case 0:\n-\/\/          p += 8;\n-\/\/      } while (cnt);\n-\/\/    }\n-\n-  const int unroll = 8; \/\/ Number of str(zr) instructions we'll unroll\n-\n-  lsr(len, len, LogBytesPerWord);\n-  andr(rscratch1, len, unroll - 1);  \/\/ tmp1 = cnt % unroll\n-  sub(len, len, rscratch1);      \/\/ cnt -= unroll\n-  \/\/ t1 always points to the end of the region we're about to zero\n-  add(t1, addr, rscratch1, Assembler::LSL, LogBytesPerWord);\n-  adr(rscratch2, entry);\n-  sub(rscratch2, rscratch2, rscratch1, Assembler::LSL, 2);\n-  br(rscratch2);\n-  bind(loop);\n-  sub(len, len, unroll);\n-  for (int i = -unroll; i < 0; i++)\n-    Assembler::str(zr, Address(t1, i * wordSize));\n-  bind(entry);\n-  add(t1, t1, unroll * wordSize);\n-  cbnz(len, loop);\n-}\n-\n@@ -4673,4 +4612,5 @@\n-\/\/ zero_words() is used by C2 ClearArray patterns.  It is as small as\n-\/\/ possible, handling small word counts locally and delegating\n-\/\/ anything larger to the zero_blocks stub.  It is expanded many times\n-\/\/ in compiled code, so it is important to keep it short.\n+\/\/ zero_words() is used by C2 ClearArray patterns and by\n+\/\/ C1_MacroAssembler.  It is as small as possible, handling small word\n+\/\/ counts locally and delegating anything larger to the zero_blocks\n+\/\/ stub.  It is expanded many times in compiled code, so it is\n+\/\/ important to keep it short.\n@@ -4685,1 +4625,0 @@\n-  assert(ptr == r10 && cnt == r11, \"mismatch in register usage\");\n@@ -4688,1 +4627,5 @@\n-  cmp(cnt, (u1)zero_words_block_size);\n+  assert(ptr == r10 && cnt == r11, \"mismatch in register usage\");\n+  RuntimeAddress zero_blocks = RuntimeAddress(StubRoutines::aarch64::zero_blocks());\n+  assert(zero_blocks.target() != NULL, \"zero_blocks stub has not been generated\");\n+\n+  subs(rscratch1, cnt, zero_words_block_size);\n@@ -4694,1 +4637,9 @@\n-    if (StubRoutines::aarch64::complete()) {\n+    \/\/ Make sure this is a C2 compilation. C1 allocates space only for\n+    \/\/ trampoline stubs generated by Call LIR ops, and in any case it\n+    \/\/ makes sense for a C1 compilation task to proceed as quickly as\n+    \/\/ possible.\n+    CompileTask* task;\n+    if (StubRoutines::aarch64::complete()\n+        && Thread::current()->is_Compiler_thread()\n+        && (task = ciEnv::current()->task())\n+        && is_c2_compile(task->comp_level())) {\n@@ -4698,1 +4649,1 @@\n-        postcond(pc() == badAddress);\n+        assert(false, \"failed to allocate space for trampoline\");\n@@ -4702,1 +4653,1 @@\n-      bl(zero_blocks);\n+      far_call(zero_blocks);\n@@ -4706,0 +4657,3 @@\n+\n+  \/\/ We have a few words left to do. zero_blocks has adjusted r10 and r11\n+  \/\/ for us.\n@@ -4710,1 +4664,1 @@\n-      stp(zr, zr, post(ptr, 16));\n+      stp(zr, zr, post(ptr, 2 * BytesPerWord));\n@@ -4720,0 +4674,1 @@\n+\n@@ -4721,1 +4676,0 @@\n-  postcond(pc() != badAddress);\n@@ -4727,1 +4681,2 @@\n-#define SmallArraySize (18 * BytesPerLong)\n+\/\/\n+\/\/ r10, r11, rscratch1, and rscratch2 are clobbered.\n@@ -4730,5 +4685,31 @@\n-  BLOCK_COMMENT(\"zero_words {\");\n-  int i = cnt & 1;  \/\/ store any odd word to start\n-  if (i) str(zr, Address(base));\n-\n-  if (cnt <= SmallArraySize \/ BytesPerLong) {\n+  guarantee(zero_words_block_size < BlockZeroingLowLimit,\n+            \"increase BlockZeroingLowLimit\");\n+  if (cnt <= (uint64_t)BlockZeroingLowLimit \/ BytesPerWord) {\n+#ifndef PRODUCT\n+    {\n+      char buf[64];\n+      snprintf(buf, sizeof buf, \"zero_words (count = %\" PRIu64 \") {\", cnt);\n+      BLOCK_COMMENT(buf);\n+    }\n+#endif\n+    if (cnt >= 16) {\n+      uint64_t loops = cnt\/16;\n+      if (loops > 1) {\n+        mov(rscratch2, loops - 1);\n+      }\n+      {\n+        Label loop;\n+        bind(loop);\n+        for (int i = 0; i < 16; i += 2) {\n+          stp(zr, zr, Address(base, i * BytesPerWord));\n+        }\n+        add(base, base, 16 * BytesPerWord);\n+        if (loops > 1) {\n+          subs(rscratch2, rscratch2, 1);\n+          br(GE, loop);\n+        }\n+      }\n+    }\n+    cnt %= 16;\n+    int i = cnt & 1;  \/\/ store any odd word to start\n+    if (i) str(zr, Address(base));\n@@ -4738,0 +4719,1 @@\n+    BLOCK_COMMENT(\"} zero_words\");\n@@ -4739,19 +4721,2 @@\n-    const int unroll = 4; \/\/ Number of stp(zr, zr) instructions we'll unroll\n-    int remainder = cnt % (2 * unroll);\n-    for (; i < remainder; i += 2) {\n-      stp(zr, zr, Address(base, i * wordSize));\n-    }\n-    Label loop;\n-    Register cnt_reg = rscratch1;\n-    Register loop_base = rscratch2;\n-    cnt = cnt - remainder;\n-    mov(cnt_reg, cnt);\n-    \/\/ adjust base and prebias by -2 * wordSize so we can pre-increment\n-    add(loop_base, base, (remainder - 2) * wordSize);\n-    bind(loop);\n-    sub(cnt_reg, cnt_reg, 2 * unroll);\n-    for (i = 1; i < unroll; i++) {\n-      stp(zr, zr, Address(loop_base, 2 * i * wordSize));\n-    }\n-    stp(zr, zr, Address(pre(loop_base, 2 * unroll * wordSize)));\n-    cbnz(cnt_reg, loop);\n+    mov(r10, base); mov(r11, cnt);\n+    zero_words(r10, r11);\n@@ -4759,1 +4724,0 @@\n-  BLOCK_COMMENT(\"} zero_words\");\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":63,"deletions":99,"binary":false,"changes":162,"status":"modified"},{"patch":"@@ -1219,33 +1219,0 @@\n-\n-inline uint vector_length(const Node* n) {\n-  const TypeVect* vt = n->bottom_type()->is_vect();\n-  return vt->length();\n-}\n-\n-inline uint vector_length(const MachNode* use, MachOper* opnd) {\n-  uint def_idx = use->operand_index(opnd);\n-  Node* def = use->in(def_idx);\n-  return def->bottom_type()->is_vect()->length();\n-}\n-\n-inline uint vector_length_in_bytes(const Node* n) {\n-  const TypeVect* vt = n->bottom_type()->is_vect();\n-  return vt->length_in_bytes();\n-}\n-\n-inline uint vector_length_in_bytes(const MachNode* use, MachOper* opnd) {\n-  uint def_idx = use->operand_index(opnd);\n-  Node* def = use->in(def_idx);\n-  return def->bottom_type()->is_vect()->length_in_bytes();\n-}\n-\n-inline BasicType vector_element_basic_type(const Node *n) {\n-  return n->bottom_type()->is_vect()->element_basic_type();\n-}\n-\n-inline BasicType vector_element_basic_type(const MachNode *use, MachOper* opnd) {\n-  uint def_idx = use->operand_index(opnd);\n-  Node* def = use->in(def_idx);\n-  return def->bottom_type()->is_vect()->element_basic_type();\n-}\n-\n@@ -1268,1 +1235,1 @@\n-  return vector_length_encoding(vector_length_in_bytes(n));\n+  return vector_length_encoding(Matcher::vector_length_in_bytes(n));\n@@ -1596,0 +1563,9 @@\n+    case Op_CopySignD:\n+    case Op_CopySignF:\n+      if (UseAVX < 3 || !is_LP64)  {\n+        return false;\n+      }\n+      if (!VM_Version::supports_avx512vl()) {\n+        return false;\n+      }\n+      break;\n@@ -1674,0 +1650,3 @@\n+      if (bt != T_INT && bt != T_LONG) {\n+        return false;\n+      } \/\/ fallthrough\n@@ -3337,1 +3316,1 @@\n-  predicate(vector_length_in_bytes(n) == vector_length_in_bytes(n->in(1))); \/\/ dst == src\n+  predicate(Matcher::vector_length_in_bytes(n) == Matcher::vector_length_in_bytes(n->in(1))); \/\/ dst == src\n@@ -3349,1 +3328,1 @@\n-            (vector_length_in_bytes(n->in(1)) < vector_length_in_bytes(n))); \/\/ src < dst\n+            (Matcher::vector_length_in_bytes(n->in(1)) < Matcher::vector_length_in_bytes(n))); \/\/ src < dst\n@@ -3355,2 +3334,2 @@\n-    assert(vector_length_in_bytes(this)       <= 16, \"required\");\n-    assert(vector_length_in_bytes(this, $src) <=  8, \"required\");\n+    assert(Matcher::vector_length_in_bytes(this)       <= 16, \"required\");\n+    assert(Matcher::vector_length_in_bytes(this, $src) <=  8, \"required\");\n@@ -3358,1 +3337,1 @@\n-    int src_vlen_in_bytes = vector_length_in_bytes(this, $src);\n+    int src_vlen_in_bytes = Matcher::vector_length_in_bytes(this, $src);\n@@ -3372,2 +3351,2 @@\n-            (vector_length_in_bytes(n->in(1)) == 4) && \/\/ src\n-            (vector_length_in_bytes(n->in(1)) < vector_length_in_bytes(n))); \/\/ src < dst\n+            (Matcher::vector_length_in_bytes(n->in(1)) == 4) && \/\/ src\n+            (Matcher::vector_length_in_bytes(n->in(1)) < Matcher::vector_length_in_bytes(n))); \/\/ src < dst\n@@ -3387,2 +3366,2 @@\n-            (vector_length_in_bytes(n->in(1)) > 4) && \/\/ src\n-            (vector_length_in_bytes(n->in(1)) < vector_length_in_bytes(n))); \/\/ src < dst\n+            (Matcher::vector_length_in_bytes(n->in(1)) > 4) && \/\/ src\n+            (Matcher::vector_length_in_bytes(n->in(1)) < Matcher::vector_length_in_bytes(n))); \/\/ src < dst\n@@ -3393,1 +3372,1 @@\n-    switch (vector_length_in_bytes(this, $src)) {\n+    switch (Matcher::vector_length_in_bytes(this, $src)) {\n@@ -3404,1 +3383,1 @@\n-  predicate(vector_length_in_bytes(n->in(1)) > vector_length_in_bytes(n)); \/\/ src > dst\n+  predicate(Matcher::vector_length_in_bytes(n->in(1)) > Matcher::vector_length_in_bytes(n)); \/\/ src > dst\n@@ -3409,1 +3388,1 @@\n-    switch (vector_length_in_bytes(this)) {\n+    switch (Matcher::vector_length_in_bytes(this)) {\n@@ -3458,1 +3437,1 @@\n-  predicate(vector_length(n) < 8);\n+  predicate(Matcher::vector_length(n) < 8);\n@@ -3470,1 +3449,1 @@\n-  predicate(vector_length(n) == 8);\n+  predicate(Matcher::vector_length(n) == 8);\n@@ -3481,1 +3460,1 @@\n-  predicate(vector_length(n) < 8);\n+  predicate(Matcher::vector_length(n) < 8);\n@@ -3493,1 +3472,1 @@\n-  predicate(vector_length(n) == 8);\n+  predicate(Matcher::vector_length(n) == 8);\n@@ -3571,1 +3550,1 @@\n-    switch (vector_length_in_bytes(this)) {\n+    switch (Matcher::vector_length_in_bytes(this)) {\n@@ -3589,1 +3568,1 @@\n-    switch (vector_length_in_bytes(this, $src)) {\n+    switch (Matcher::vector_length_in_bytes(this, $src)) {\n@@ -3606,1 +3585,1 @@\n-  predicate(vector_length_in_bytes(n) <= 32);\n+  predicate(Matcher::vector_length_in_bytes(n) <= 32);\n@@ -3614,1 +3593,1 @@\n-    BasicType elem_bt = vector_element_basic_type(this);\n+    BasicType elem_bt = Matcher::vector_element_basic_type(this);\n@@ -3616,1 +3595,1 @@\n-    assert(vector_length_in_bytes(this) >= 16, \"sanity\");\n+    assert(Matcher::vector_length_in_bytes(this) >= 16, \"sanity\");\n@@ -3631,1 +3610,1 @@\n-  predicate(vector_length_in_bytes(n) == 64);\n+  predicate(Matcher::vector_length_in_bytes(n) == 64);\n@@ -3639,1 +3618,1 @@\n-    BasicType elem_bt = vector_element_basic_type(this);\n+    BasicType elem_bt = Matcher::vector_element_basic_type(this);\n@@ -3661,1 +3640,1 @@\n-    BasicType elem_bt = vector_element_basic_type(this, $src);\n+    BasicType elem_bt = Matcher::vector_element_basic_type(this, $src);\n@@ -3663,1 +3642,1 @@\n-    assert(vector_length_in_bytes(this, $src) >= 16, \"sanity\");\n+    assert(Matcher::vector_length_in_bytes(this, $src) >= 16, \"sanity\");\n@@ -3680,1 +3659,1 @@\n-    uint vlen = vector_length(this);\n+    uint vlen = Matcher::vector_length(this);\n@@ -3720,1 +3699,1 @@\n-    uint vlen = vector_length(this);\n+    uint vlen = Matcher::vector_length(this);\n@@ -3745,1 +3724,1 @@\n-    uint vlen = vector_length(this);\n+    uint vlen = Matcher::vector_length(this);\n@@ -3763,1 +3742,1 @@\n-    uint vlen = vector_length(this);\n+    uint vlen = Matcher::vector_length(this);\n@@ -3802,1 +3781,1 @@\n-    uint vlen = vector_length(this);\n+    uint vlen = Matcher::vector_length(this);\n@@ -3826,1 +3805,1 @@\n-    uint vlen = vector_length(this);\n+    uint vlen = Matcher::vector_length(this);\n@@ -3843,1 +3822,1 @@\n-    uint vlen = vector_length(this);\n+    uint vlen = Matcher::vector_length(this);\n@@ -3867,1 +3846,1 @@\n-    uint vlen = vector_length(this);\n+    uint vlen = Matcher::vector_length(this);\n@@ -3884,1 +3863,1 @@\n-    uint vlen = vector_length(this);\n+    uint vlen = Matcher::vector_length(this);\n@@ -3906,1 +3885,1 @@\n-    uint vlen = vector_length(this);\n+    uint vlen = Matcher::vector_length(this);\n@@ -3939,1 +3918,1 @@\n-    uint vlen = vector_length(this);\n+    uint vlen = Matcher::vector_length(this);\n@@ -3963,1 +3942,1 @@\n-  predicate(vector_length(n) <= 4);\n+  predicate(Matcher::vector_length(n) <= 4);\n@@ -3968,1 +3947,1 @@\n-    uint vlen = vector_length(this);\n+    uint vlen = Matcher::vector_length(this);\n@@ -3992,1 +3971,1 @@\n-  predicate(vector_length(n) == 8);\n+  predicate(Matcher::vector_length(n) == 8);\n@@ -4020,1 +3999,1 @@\n-    uint vlen = vector_length(this);\n+    uint vlen = Matcher::vector_length(this);\n@@ -4038,1 +4017,1 @@\n-    uint vlen = vector_length(this);\n+    uint vlen = Matcher::vector_length(this);\n@@ -4057,1 +4036,1 @@\n-    int vlen = vector_length(this);\n+    int vlen = Matcher::vector_length(this);\n@@ -4086,1 +4065,1 @@\n-    uint vlen = vector_length(this);\n+    uint vlen = Matcher::vector_length(this);\n@@ -4105,1 +4084,1 @@\n-    uint vlen = vector_length(this);\n+    uint vlen = Matcher::vector_length(this);\n@@ -4122,1 +4101,1 @@\n-    uint vlen = vector_length(this);\n+    uint vlen = Matcher::vector_length(this);\n@@ -4140,1 +4119,1 @@\n-    uint vlen = vector_length(this);\n+    uint vlen = Matcher::vector_length(this);\n@@ -4159,1 +4138,1 @@\n-    uint vlen = vector_length(this);\n+    uint vlen = Matcher::vector_length(this);\n@@ -4176,1 +4155,1 @@\n-    uint vlen = vector_length(this);\n+    uint vlen = Matcher::vector_length(this);\n@@ -4190,1 +4169,1 @@\n-  predicate(vector_length_in_bytes(n) < 32);\n+  predicate(Matcher::vector_length_in_bytes(n) < 32);\n@@ -4195,1 +4174,1 @@\n-    assert(vector_length_in_bytes(this) >= 8, \"required\");\n+    assert(Matcher::vector_length_in_bytes(this) >= 8, \"required\");\n@@ -4197,1 +4176,1 @@\n-    BasicType elem_bt = vector_element_basic_type(this);\n+    BasicType elem_bt = Matcher::vector_element_basic_type(this);\n@@ -4200,1 +4179,1 @@\n-    assert($idx$$constant < (int)vector_length(this), \"out of bounds\");\n+    assert($idx$$constant < (int)Matcher::vector_length(this), \"out of bounds\");\n@@ -4208,1 +4187,1 @@\n-  predicate(vector_length_in_bytes(n) == 32);\n+  predicate(Matcher::vector_length_in_bytes(n) == 32);\n@@ -4214,1 +4193,1 @@\n-    BasicType elem_bt = vector_element_basic_type(this);\n+    BasicType elem_bt = Matcher::vector_element_basic_type(this);\n@@ -4219,1 +4198,1 @@\n-    assert($idx$$constant < (int)vector_length(this), \"out of bounds\");\n+    assert($idx$$constant < (int)Matcher::vector_length(this), \"out of bounds\");\n@@ -4231,1 +4210,1 @@\n-  predicate(vector_length_in_bytes(n) == 64);\n+  predicate(Matcher::vector_length_in_bytes(n) == 64);\n@@ -4238,1 +4217,1 @@\n-    BasicType elem_bt = vector_element_basic_type(this);\n+    BasicType elem_bt = Matcher::vector_element_basic_type(this);\n@@ -4243,1 +4222,1 @@\n-    assert($idx$$constant < (int)vector_length(this), \"out of bounds\");\n+    assert($idx$$constant < (int)Matcher::vector_length(this), \"out of bounds\");\n@@ -4256,1 +4235,1 @@\n-  predicate(vector_length(n) == 2);\n+  predicate(Matcher::vector_length(n) == 2);\n@@ -4261,2 +4240,2 @@\n-    assert(vector_element_basic_type(this) == T_LONG, \"\");\n-    assert($idx$$constant < (int)vector_length(this), \"out of bounds\");\n+    assert(Matcher::vector_element_basic_type(this) == T_LONG, \"\");\n+    assert($idx$$constant < (int)Matcher::vector_length(this), \"out of bounds\");\n@@ -4270,1 +4249,1 @@\n-  predicate(vector_length(n) == 4);\n+  predicate(Matcher::vector_length(n) == 4);\n@@ -4275,2 +4254,2 @@\n-    assert(vector_element_basic_type(this) == T_LONG, \"\");\n-    assert($idx$$constant < (int)vector_length(this), \"out of bounds\");\n+    assert(Matcher::vector_element_basic_type(this) == T_LONG, \"\");\n+    assert($idx$$constant < (int)Matcher::vector_length(this), \"out of bounds\");\n@@ -4289,1 +4268,1 @@\n-  predicate(vector_length(n) == 8);\n+  predicate(Matcher::vector_length(n) == 8);\n@@ -4294,2 +4273,2 @@\n-    assert(vector_element_basic_type(this) == T_LONG, \"sanity\");\n-    assert($idx$$constant < (int)vector_length(this), \"out of bounds\");\n+    assert(Matcher::vector_element_basic_type(this) == T_LONG, \"sanity\");\n+    assert($idx$$constant < (int)Matcher::vector_length(this), \"out of bounds\");\n@@ -4308,1 +4287,1 @@\n-  predicate(vector_length(n) < 8);\n+  predicate(Matcher::vector_length(n) < 8);\n@@ -4314,2 +4293,2 @@\n-    assert(vector_element_basic_type(this) == T_FLOAT, \"sanity\");\n-    assert($idx$$constant < (int)vector_length(this), \"out of bounds\");\n+    assert(Matcher::vector_element_basic_type(this) == T_FLOAT, \"sanity\");\n+    assert($idx$$constant < (int)Matcher::vector_length(this), \"out of bounds\");\n@@ -4323,1 +4302,1 @@\n-  predicate(vector_length(n) >= 8);\n+  predicate(Matcher::vector_length(n) >= 8);\n@@ -4328,2 +4307,2 @@\n-    assert(vector_element_basic_type(this) == T_FLOAT, \"sanity\");\n-    assert($idx$$constant < (int)vector_length(this), \"out of bounds\");\n+    assert(Matcher::vector_element_basic_type(this) == T_FLOAT, \"sanity\");\n+    assert($idx$$constant < (int)Matcher::vector_length(this), \"out of bounds\");\n@@ -4331,1 +4310,1 @@\n-    int vlen = vector_length(this);\n+    int vlen = Matcher::vector_length(this);\n@@ -4352,1 +4331,1 @@\n-  predicate(vector_length(n) == 2);\n+  predicate(Matcher::vector_length(n) == 2);\n@@ -4358,2 +4337,2 @@\n-    assert(vector_element_basic_type(this) == T_DOUBLE, \"sanity\");\n-    assert($idx$$constant < (int)vector_length(this), \"out of bounds\");\n+    assert(Matcher::vector_element_basic_type(this) == T_DOUBLE, \"sanity\");\n+    assert($idx$$constant < (int)Matcher::vector_length(this), \"out of bounds\");\n@@ -4368,1 +4347,1 @@\n-  predicate(vector_length(n) == 4);\n+  predicate(Matcher::vector_length(n) == 4);\n@@ -4373,2 +4352,2 @@\n-    assert(vector_element_basic_type(this) == T_DOUBLE, \"sanity\");\n-    assert($idx$$constant < (int)vector_length(this), \"out of bounds\");\n+    assert(Matcher::vector_element_basic_type(this) == T_DOUBLE, \"sanity\");\n+    assert($idx$$constant < (int)Matcher::vector_length(this), \"out of bounds\");\n@@ -4388,1 +4367,1 @@\n-  predicate(vector_length(n) == 8);\n+  predicate(Matcher::vector_length(n) == 8);\n@@ -4393,2 +4372,2 @@\n-    assert(vector_element_basic_type(this) == T_DOUBLE, \"sanity\");\n-    assert($idx$$constant < (int)vector_length(this), \"out of bounds\");\n+    assert(Matcher::vector_element_basic_type(this) == T_DOUBLE, \"sanity\");\n+    assert($idx$$constant < (int)Matcher::vector_length(this), \"out of bounds\");\n@@ -4412,1 +4391,1 @@\n-  predicate(vector_element_basic_type(n->in(2)) == T_INT); \/\/ src2\n+  predicate(Matcher::vector_element_basic_type(n->in(2)) == T_INT); \/\/ src2\n@@ -4424,1 +4403,1 @@\n-    int vlen = vector_length(this, $src2);\n+    int vlen = Matcher::vector_length(this, $src2);\n@@ -4434,1 +4413,1 @@\n-  predicate(vector_element_basic_type(n->in(2)) == T_LONG && !VM_Version::supports_avx512dq());\n+  predicate(Matcher::vector_element_basic_type(n->in(2)) == T_LONG && !VM_Version::supports_avx512dq());\n@@ -4446,1 +4425,1 @@\n-    int vlen = vector_length(this, $src2);\n+    int vlen = Matcher::vector_length(this, $src2);\n@@ -4453,1 +4432,1 @@\n-  predicate(vector_element_basic_type(n->in(2)) == T_LONG && VM_Version::supports_avx512dq());\n+  predicate(Matcher::vector_element_basic_type(n->in(2)) == T_LONG && VM_Version::supports_avx512dq());\n@@ -4465,1 +4444,1 @@\n-    int vlen = vector_length(this, $src2);\n+    int vlen = Matcher::vector_length(this, $src2);\n@@ -4475,1 +4454,1 @@\n-  predicate(vector_length(n->in(2)) <= 4); \/\/ src\n+  predicate(Matcher::vector_length(n->in(2)) <= 4); \/\/ src\n@@ -4482,1 +4461,1 @@\n-    int vlen = vector_length(this, $src);\n+    int vlen = Matcher::vector_length(this, $src);\n@@ -4489,1 +4468,1 @@\n-  predicate(vector_length(n->in(2)) == 8); \/\/ src\n+  predicate(Matcher::vector_length(n->in(2)) == 8); \/\/ src\n@@ -4496,1 +4475,1 @@\n-    int vlen = vector_length(this, $src);\n+    int vlen = Matcher::vector_length(this, $src);\n@@ -4503,1 +4482,1 @@\n-  predicate(vector_length(n->in(2)) == 16); \/\/ src\n+  predicate(Matcher::vector_length(n->in(2)) == 16); \/\/ src\n@@ -4510,1 +4489,1 @@\n-    int vlen = vector_length(this, $src);\n+    int vlen = Matcher::vector_length(this, $src);\n@@ -4519,1 +4498,1 @@\n-  predicate(vector_length(n->in(2)) == 2); \/\/ src\n+  predicate(Matcher::vector_length(n->in(2)) == 2); \/\/ src\n@@ -4526,1 +4505,1 @@\n-    int vlen = vector_length(this, $src);\n+    int vlen = Matcher::vector_length(this, $src);\n@@ -4533,1 +4512,1 @@\n-  predicate(vector_length(n->in(2)) == 4); \/\/ src\n+  predicate(Matcher::vector_length(n->in(2)) == 4); \/\/ src\n@@ -4540,1 +4519,1 @@\n-    int vlen = vector_length(this, $src);\n+    int vlen = Matcher::vector_length(this, $src);\n@@ -4547,1 +4526,1 @@\n-  predicate(vector_length(n->in(2)) == 8); \/\/ src\n+  predicate(Matcher::vector_length(n->in(2)) == 8); \/\/ src\n@@ -4554,1 +4533,1 @@\n-    int vlen = vector_length(this, $src);\n+    int vlen = Matcher::vector_length(this, $src);\n@@ -4564,1 +4543,1 @@\n-  predicate(vector_element_basic_type(n->in(2)) == T_BYTE && !VM_Version::supports_avx512bw());\n+  predicate(Matcher::vector_element_basic_type(n->in(2)) == T_BYTE && !VM_Version::supports_avx512bw());\n@@ -4575,1 +4554,1 @@\n-    int vlen = vector_length(this, $src2);\n+    int vlen = Matcher::vector_length(this, $src2);\n@@ -4582,1 +4561,1 @@\n-  predicate(vector_element_basic_type(n->in(2)) == T_BYTE && VM_Version::supports_avx512bw());\n+  predicate(Matcher::vector_element_basic_type(n->in(2)) == T_BYTE && VM_Version::supports_avx512bw());\n@@ -4593,1 +4572,1 @@\n-    int vlen = vector_length(this, $src2);\n+    int vlen = Matcher::vector_length(this, $src2);\n@@ -4603,1 +4582,1 @@\n-  predicate(vector_element_basic_type(n->in(2)) == T_SHORT); \/\/ src2\n+  predicate(Matcher::vector_element_basic_type(n->in(2)) == T_SHORT); \/\/ src2\n@@ -4615,1 +4594,1 @@\n-    int vlen = vector_length(this, $src2);\n+    int vlen = Matcher::vector_length(this, $src2);\n@@ -4624,2 +4603,2 @@\n-  predicate(vector_element_basic_type(n->in(2)) == T_BYTE &&\n-            vector_length(n->in(2)) <= 32); \/\/ src2\n+  predicate(Matcher::vector_element_basic_type(n->in(2)) == T_BYTE &&\n+            Matcher::vector_length(n->in(2)) <= 32); \/\/ src2\n@@ -4631,1 +4610,1 @@\n-    int vlen = vector_length(this, $src2);\n+    int vlen = Matcher::vector_length(this, $src2);\n@@ -4638,2 +4617,2 @@\n-  predicate(vector_element_basic_type(n->in(2)) == T_BYTE &&\n-            vector_length(n->in(2)) == 64); \/\/ src2\n+  predicate(Matcher::vector_element_basic_type(n->in(2)) == T_BYTE &&\n+            Matcher::vector_length(n->in(2)) == 64); \/\/ src2\n@@ -4645,1 +4624,1 @@\n-    int vlen = vector_length(this, $src2);\n+    int vlen = Matcher::vector_length(this, $src2);\n@@ -4655,1 +4634,1 @@\n-  predicate(vector_element_basic_type(n->in(2)) == T_FLOAT &&\n+  predicate(Matcher::vector_element_basic_type(n->in(2)) == T_FLOAT &&\n@@ -4658,1 +4637,1 @@\n-            vector_length(n->in(2)) == 2);\n+            Matcher::vector_length(n->in(2)) == 2);\n@@ -4667,1 +4646,1 @@\n-    int vlen = vector_length(this, $src2);\n+    int vlen = Matcher::vector_length(this, $src2);\n@@ -4676,1 +4655,1 @@\n-  predicate(vector_element_basic_type(n->in(2)) == T_FLOAT &&\n+  predicate(Matcher::vector_element_basic_type(n->in(2)) == T_FLOAT &&\n@@ -4679,1 +4658,1 @@\n-            vector_length(n->in(2)) >= 4);\n+            Matcher::vector_length(n->in(2)) >= 4);\n@@ -4688,1 +4667,1 @@\n-    int vlen = vector_length(this, $src2);\n+    int vlen = Matcher::vector_length(this, $src2);\n@@ -4697,2 +4676,2 @@\n-  predicate(vector_element_basic_type(n->in(2)) == T_FLOAT &&\n-            vector_length(n->in(2)) == 2);\n+  predicate(Matcher::vector_element_basic_type(n->in(2)) == T_FLOAT &&\n+            Matcher::vector_length(n->in(2)) == 2);\n@@ -4707,1 +4686,1 @@\n-    int vlen = vector_length(this, $src);\n+    int vlen = Matcher::vector_length(this, $src);\n@@ -4717,2 +4696,2 @@\n-  predicate(vector_element_basic_type(n->in(2)) == T_FLOAT &&\n-            vector_length(n->in(2)) >= 4);\n+  predicate(Matcher::vector_element_basic_type(n->in(2)) == T_FLOAT &&\n+            Matcher::vector_length(n->in(2)) >= 4);\n@@ -4727,1 +4706,1 @@\n-    int vlen = vector_length(this, $src);\n+    int vlen = Matcher::vector_length(this, $src);\n@@ -4739,1 +4718,1 @@\n-  predicate(vector_element_basic_type(n->in(2)) == T_DOUBLE &&\n+  predicate(Matcher::vector_element_basic_type(n->in(2)) == T_DOUBLE &&\n@@ -4742,1 +4721,1 @@\n-            vector_length(n->in(2)) == 2);\n+            Matcher::vector_length(n->in(2)) == 2);\n@@ -4751,1 +4730,1 @@\n-    int vlen = vector_length(this, $src2);\n+    int vlen = Matcher::vector_length(this, $src2);\n@@ -4761,1 +4740,1 @@\n-  predicate(vector_element_basic_type(n->in(2)) == T_DOUBLE &&\n+  predicate(Matcher::vector_element_basic_type(n->in(2)) == T_DOUBLE &&\n@@ -4764,1 +4743,1 @@\n-            vector_length(n->in(2)) >= 4);\n+            Matcher::vector_length(n->in(2)) >= 4);\n@@ -4773,1 +4752,1 @@\n-    int vlen = vector_length(this, $src2);\n+    int vlen = Matcher::vector_length(this, $src2);\n@@ -4784,2 +4763,2 @@\n-  predicate(vector_element_basic_type(n->in(2)) == T_DOUBLE &&\n-            vector_length(n->in(2)) == 2);\n+  predicate(Matcher::vector_element_basic_type(n->in(2)) == T_DOUBLE &&\n+            Matcher::vector_length(n->in(2)) == 2);\n@@ -4794,1 +4773,1 @@\n-    int vlen = vector_length(this, $src);\n+    int vlen = Matcher::vector_length(this, $src);\n@@ -4804,2 +4783,2 @@\n-  predicate(vector_element_basic_type(n->in(2)) == T_DOUBLE &&\n-            vector_length(n->in(2)) >= 4);\n+  predicate(Matcher::vector_element_basic_type(n->in(2)) == T_DOUBLE &&\n+            Matcher::vector_length(n->in(2)) >= 4);\n@@ -4814,1 +4793,1 @@\n-    int vlen = vector_length(this, $src);\n+    int vlen = Matcher::vector_length(this, $src);\n@@ -4849,1 +4828,1 @@\n-            (vector_length_in_bytes(n->in(1)) > 8));\n+            (Matcher::vector_length_in_bytes(n->in(1)) > 8));\n@@ -4883,1 +4862,1 @@\n-            (vector_length_in_bytes(n->in(1)) > 8));\n+            (Matcher::vector_length_in_bytes(n->in(1)) > 8));\n@@ -4918,1 +4897,1 @@\n-            (vector_length_in_bytes(n->in(1)) > 8));\n+            (Matcher::vector_length_in_bytes(n->in(1)) > 8));\n@@ -4952,1 +4931,1 @@\n-            (vector_length_in_bytes(n->in(1)) > 8));\n+            (Matcher::vector_length_in_bytes(n->in(1)) > 8));\n@@ -4986,1 +4965,1 @@\n-            (vector_length_in_bytes(n->in(1)) > 8));\n+            (Matcher::vector_length_in_bytes(n->in(1)) > 8));\n@@ -5020,1 +4999,1 @@\n-            (vector_length_in_bytes(n->in(1)) > 8));\n+            (Matcher::vector_length_in_bytes(n->in(1)) > 8));\n@@ -5056,1 +5035,1 @@\n-            (vector_length_in_bytes(n->in(1)) > 8));\n+            (Matcher::vector_length_in_bytes(n->in(1)) > 8));\n@@ -5091,1 +5070,1 @@\n-            (vector_length_in_bytes(n->in(1)) > 8));\n+            (Matcher::vector_length_in_bytes(n->in(1)) > 8));\n@@ -5125,1 +5104,1 @@\n-            (vector_length_in_bytes(n->in(1)) > 8));\n+            (Matcher::vector_length_in_bytes(n->in(1)) > 8));\n@@ -5160,1 +5139,1 @@\n-            (vector_length_in_bytes(n->in(1)) > 8));\n+            (Matcher::vector_length_in_bytes(n->in(1)) > 8));\n@@ -5194,1 +5173,1 @@\n-            (vector_length_in_bytes(n->in(1)) > 8));\n+            (Matcher::vector_length_in_bytes(n->in(1)) > 8));\n@@ -5228,1 +5207,1 @@\n-            (vector_length_in_bytes(n->in(1)) > 8));\n+            (Matcher::vector_length_in_bytes(n->in(1)) > 8));\n@@ -5242,2 +5221,2 @@\n-  predicate(vector_length(n) == 4 ||\n-            vector_length(n) == 8);\n+  predicate(Matcher::vector_length(n) == 4 ||\n+            Matcher::vector_length(n) == 8);\n@@ -5260,1 +5239,1 @@\n-  predicate(vector_length(n) == 16 && UseAVX <= 1);\n+  predicate(Matcher::vector_length(n) == 16 && UseAVX <= 1);\n@@ -5283,1 +5262,1 @@\n-  predicate(vector_length(n) == 16 && UseAVX > 1);\n+  predicate(Matcher::vector_length(n) == 16 && UseAVX > 1);\n@@ -5301,1 +5280,1 @@\n-  predicate(vector_length(n) == 32);\n+  predicate(Matcher::vector_length(n) == 32);\n@@ -5327,1 +5306,1 @@\n-  predicate(vector_length(n) == 64);\n+  predicate(Matcher::vector_length(n) == 64);\n@@ -5377,1 +5356,1 @@\n-            (vector_length_in_bytes(n->in(1)) > 8));\n+            (Matcher::vector_length_in_bytes(n->in(1)) > 8));\n@@ -5412,1 +5391,1 @@\n-            (vector_length_in_bytes(n->in(1)) > 8));\n+            (Matcher::vector_length_in_bytes(n->in(1)) > 8));\n@@ -5437,1 +5416,1 @@\n-              (vector_length_in_bytes(n->in(1)) > 8));\n+              (Matcher::vector_length_in_bytes(n->in(1)) > 8));\n@@ -5449,1 +5428,1 @@\n-  predicate(vector_length(n) == 2 && !VM_Version::supports_avx512dq());\n+  predicate(Matcher::vector_length(n) == 2 && !VM_Version::supports_avx512dq());\n@@ -5475,1 +5454,1 @@\n-  predicate(vector_length(n) == 4 && !VM_Version::supports_avx512dq());\n+  predicate(Matcher::vector_length(n) == 4 && !VM_Version::supports_avx512dq());\n@@ -5523,1 +5502,1 @@\n-            (vector_length_in_bytes(n->in(1)) > 8));\n+            (Matcher::vector_length_in_bytes(n->in(1)) > 8));\n@@ -5557,1 +5536,1 @@\n-            (vector_length_in_bytes(n->in(1)) > 8));\n+            (Matcher::vector_length_in_bytes(n->in(1)) > 8));\n@@ -5568,1 +5547,1 @@\n-  predicate(vector_length(n) == 8);\n+  predicate(Matcher::vector_length(n) == 8);\n@@ -5586,1 +5565,1 @@\n-  predicate(vector_length(n) == 4);\n+  predicate(Matcher::vector_length(n) == 4);\n@@ -5629,1 +5608,1 @@\n-            (vector_length_in_bytes(n->in(1)) > 8));\n+            (Matcher::vector_length_in_bytes(n->in(1)) > 8));\n@@ -5663,1 +5642,1 @@\n-            (vector_length_in_bytes(n->in(1)) > 8));\n+            (Matcher::vector_length_in_bytes(n->in(1)) > 8));\n@@ -5677,1 +5656,1 @@\n-  predicate(is_integral_type(vector_element_basic_type(n)) && vector_element_basic_type(n) != T_LONG && \/\/ T_BYTE, T_SHORT, T_INT\n+  predicate(is_integral_type(Matcher::vector_element_basic_type(n)) && Matcher::vector_element_basic_type(n) != T_LONG && \/\/ T_BYTE, T_SHORT, T_INT\n@@ -5686,1 +5665,1 @@\n-    BasicType elem_bt = vector_element_basic_type(this);\n+    BasicType elem_bt = Matcher::vector_element_basic_type(this);\n@@ -5693,1 +5672,1 @@\n-  predicate(is_integral_type(vector_element_basic_type(n)) && vector_element_basic_type(n) != T_LONG && \/\/ T_BYTE, T_SHORT, T_INT\n+  predicate(is_integral_type(Matcher::vector_element_basic_type(n)) && Matcher::vector_element_basic_type(n) != T_LONG && \/\/ T_BYTE, T_SHORT, T_INT\n@@ -5701,1 +5680,1 @@\n-    BasicType elem_bt = vector_element_basic_type(this);\n+    BasicType elem_bt = Matcher::vector_element_basic_type(this);\n@@ -5710,1 +5689,1 @@\n-  predicate(vector_length_in_bytes(n) == 16 && vector_element_basic_type(n) == T_LONG &&\n+  predicate(Matcher::vector_length_in_bytes(n) == 16 && Matcher::vector_element_basic_type(n) == T_LONG &&\n@@ -5720,1 +5699,1 @@\n-    BasicType elem_bt = vector_element_basic_type(this);\n+    BasicType elem_bt = Matcher::vector_element_basic_type(this);\n@@ -5729,1 +5708,1 @@\n-  predicate(vector_length_in_bytes(n) <= 32 && vector_element_basic_type(n) == T_LONG &&\n+  predicate(Matcher::vector_length_in_bytes(n) <= 32 && Matcher::vector_element_basic_type(n) == T_LONG &&\n@@ -5738,1 +5717,1 @@\n-    BasicType elem_bt = vector_element_basic_type(this);\n+    BasicType elem_bt = Matcher::vector_element_basic_type(this);\n@@ -5747,2 +5726,2 @@\n-  predicate((vector_length_in_bytes(n) == 64 || VM_Version::supports_avx512vl()) &&\n-            vector_element_basic_type(n) == T_LONG);\n+  predicate((Matcher::vector_length_in_bytes(n) == 64 || VM_Version::supports_avx512vl()) &&\n+            Matcher::vector_element_basic_type(n) == T_LONG);\n@@ -5757,1 +5736,1 @@\n-    BasicType elem_bt = vector_element_basic_type(this);\n+    BasicType elem_bt = Matcher::vector_element_basic_type(this);\n@@ -5767,2 +5746,2 @@\n-  predicate(vector_length_in_bytes(n) <= 32 &&\n-            is_floating_point_type(vector_element_basic_type(n)) && \/\/ T_FLOAT, T_DOUBLE\n+  predicate(Matcher::vector_length_in_bytes(n) <= 32 &&\n+            is_floating_point_type(Matcher::vector_element_basic_type(n)) && \/\/ T_FLOAT, T_DOUBLE\n@@ -5779,1 +5758,1 @@\n-    BasicType elem_bt = vector_element_basic_type(this);\n+    BasicType elem_bt = Matcher::vector_element_basic_type(this);\n@@ -5789,2 +5768,2 @@\n-  predicate(vector_length_in_bytes(n) == 64 &&\n-            is_floating_point_type(vector_element_basic_type(n))); \/\/ T_FLOAT, T_DOUBLE\n+  predicate(Matcher::vector_length_in_bytes(n) == 64 &&\n+            is_floating_point_type(Matcher::vector_element_basic_type(n))); \/\/ T_FLOAT, T_DOUBLE\n@@ -5800,1 +5779,1 @@\n-    BasicType elem_bt = vector_element_basic_type(this);\n+    BasicType elem_bt = Matcher::vector_element_basic_type(this);\n@@ -5809,1 +5788,1 @@\n-\/\/ --------------------------------- Signum ---------------------------\n+\/\/ --------------------------------- Signum\/CopySign ---------------------------\n@@ -5833,0 +5812,47 @@\n+\/\/ ---------------------------------------\n+\/\/ For copySign use 0xE4 as writemask for vpternlog\n+\/\/ Desired Truth Table: A -> xmm0 bit, B -> xmm1 bit, C -> xmm2 bit\n+\/\/ C (xmm2) is set to 0x7FFFFFFF\n+\/\/ Wherever xmm2 is 0, we want to pick from B (sign)\n+\/\/ Wherever xmm2 is 1, we want to pick from A (src)\n+\/\/\n+\/\/ A B C Result\n+\/\/ 0 0 0 0\n+\/\/ 0 0 1 0\n+\/\/ 0 1 0 1\n+\/\/ 0 1 1 0\n+\/\/ 1 0 0 0\n+\/\/ 1 0 1 1\n+\/\/ 1 1 0 1\n+\/\/ 1 1 1 1\n+\/\/\n+\/\/ Result going from high bit to low bit is 0x11100100 = 0xe4\n+\/\/ ---------------------------------------\n+\n+#ifdef _LP64\n+instruct copySignF_reg(regF dst, regF src, regF tmp1, rRegI tmp2) %{\n+  match(Set dst (CopySignF dst src));\n+  effect(TEMP tmp1, TEMP tmp2);\n+  format %{ \"CopySignF $dst, $src\\t! using $tmp1 and $tmp2 as TEMP\" %}\n+  ins_encode %{\n+    __ movl($tmp2$$Register, 0x7FFFFFFF);\n+    __ movdl($tmp1$$XMMRegister, $tmp2$$Register);\n+    __ vpternlogd($dst$$XMMRegister, 0xE4, $src$$XMMRegister, $tmp1$$XMMRegister, Assembler::AVX_128bit);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n+instruct copySignD_imm(regD dst, regD src, regD tmp1, rRegL tmp2, immD zero) %{\n+  match(Set dst (CopySignD dst (Binary src zero)));\n+  ins_cost(100);\n+  effect(TEMP tmp1, TEMP tmp2);\n+  format %{ \"CopySignD  $dst, $src\\t! using $tmp1 and $tmp2 as TEMP\" %}\n+  ins_encode %{\n+    __ mov64($tmp2$$Register, 0x7FFFFFFFFFFFFFFF);\n+    __ movq($tmp1$$XMMRegister, $tmp2$$Register);\n+    __ vpternlogq($dst$$XMMRegister, 0xE4, $src$$XMMRegister, $tmp1$$XMMRegister, Assembler::AVX_128bit);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+#endif \/\/ _LP64\n+\n@@ -5847,1 +5873,1 @@\n-  predicate(vector_length_in_bytes(n->in(1)) > 8);\n+  predicate(Matcher::vector_length_in_bytes(n->in(1)) > 8);\n@@ -5871,1 +5897,1 @@\n-  predicate(vector_length_in_bytes(n->in(1)) > 8);\n+  predicate(Matcher::vector_length_in_bytes(n->in(1)) > 8);\n@@ -5898,1 +5924,1 @@\n-  predicate(vector_length(n) <= 8 && VectorNode::is_vshift_cnt(n->in(2)));\n+  predicate(Matcher::vector_length(n) <= 8 && VectorNode::is_vshift_cnt(n->in(2)));\n@@ -5918,1 +5944,1 @@\n-  predicate(vector_length(n) == 16 && VectorNode::is_vshift_cnt(n->in(2)) &&\n+  predicate(Matcher::vector_length(n) == 16 && VectorNode::is_vshift_cnt(n->in(2)) &&\n@@ -5943,1 +5969,1 @@\n-  predicate(vector_length(n) == 16 && VectorNode::is_vshift_cnt(n->in(2)) &&\n+  predicate(Matcher::vector_length(n) == 16 && VectorNode::is_vshift_cnt(n->in(2)) &&\n@@ -5964,1 +5990,1 @@\n-  predicate(vector_length(n) == 32 && VectorNode::is_vshift_cnt(n->in(2)));\n+  predicate(Matcher::vector_length(n) == 32 && VectorNode::is_vshift_cnt(n->in(2)));\n@@ -5989,1 +6015,1 @@\n-  predicate(vector_length(n) == 64 && VectorNode::is_vshift_cnt(n->in(2)));\n+  predicate(Matcher::vector_length(n) == 64 && VectorNode::is_vshift_cnt(n->in(2)));\n@@ -6034,1 +6060,1 @@\n-      int vlen = vector_length(this);\n+      int vlen = Matcher::vector_length(this);\n@@ -6065,1 +6091,1 @@\n-      int vlen = vector_length(this);\n+      int vlen = Matcher::vector_length(this);\n@@ -6091,1 +6117,1 @@\n-      int vlen = vector_length(this);\n+      int vlen = Matcher::vector_length(this);\n@@ -6118,1 +6144,1 @@\n-      assert(vector_length(this) == 2, \"\");\n+      assert(Matcher::vector_length(this) == 2, \"\");\n@@ -6137,1 +6163,1 @@\n-      assert(vector_length(this) == 2, \"\");\n+      assert(Matcher::vector_length(this) == 2, \"\");\n@@ -6153,1 +6179,1 @@\n-    uint vlen = vector_length(this);\n+    uint vlen = Matcher::vector_length(this);\n@@ -6190,1 +6216,1 @@\n-  predicate(vector_length(n) <= 8 &&\n+  predicate(Matcher::vector_length(n) <= 8 &&\n@@ -6210,1 +6236,1 @@\n-  predicate(vector_length(n) == 16 &&\n+  predicate(Matcher::vector_length(n) == 16 &&\n@@ -6238,1 +6264,1 @@\n-  predicate(vector_length(n) == 32 &&\n+  predicate(Matcher::vector_length(n) == 32 &&\n@@ -6274,1 +6300,1 @@\n-  predicate(vector_length(n) <= 32 &&\n+  predicate(Matcher::vector_length(n) <= 32 &&\n@@ -6293,1 +6319,1 @@\n-  predicate(vector_length(n) == 64 &&\n+  predicate(Matcher::vector_length(n) == 64 &&\n@@ -6317,1 +6343,1 @@\n-  predicate(vector_length(n) <= 8 &&\n+  predicate(Matcher::vector_length(n) <= 8 &&\n@@ -6342,1 +6368,1 @@\n-  predicate(vector_length(n) == 16 &&\n+  predicate(Matcher::vector_length(n) == 16 &&\n@@ -6432,1 +6458,1 @@\n-  predicate(vector_length(n) <= 4 &&\n+  predicate(Matcher::vector_length(n) <= 4 &&\n@@ -6485,1 +6511,1 @@\n-            (vector_length_in_bytes(n->in(1)) > 8));\n+            (Matcher::vector_length_in_bytes(n->in(1)) > 8));\n@@ -6520,1 +6546,1 @@\n-            (vector_length_in_bytes(n->in(1)) > 8));\n+            (Matcher::vector_length_in_bytes(n->in(1)) > 8));\n@@ -6555,1 +6581,1 @@\n-            (vector_length_in_bytes(n->in(1)) > 8));\n+            (Matcher::vector_length_in_bytes(n->in(1)) > 8));\n@@ -6573,1 +6599,1 @@\n-    BasicType to_elem_bt = vector_element_basic_type(this);\n+    BasicType to_elem_bt = Matcher::vector_element_basic_type(this);\n@@ -6602,2 +6628,2 @@\n-            vector_length(n->in(1)) <= 8 && \/\/ src\n-            vector_element_basic_type(n) == T_BYTE);\n+            Matcher::vector_length(n->in(1)) <= 8 && \/\/ src\n+            Matcher::vector_element_basic_type(n) == T_BYTE);\n@@ -6618,2 +6644,2 @@\n-            vector_length(n->in(1)) == 16 && \/\/ src\n-            vector_element_basic_type(n) == T_BYTE);\n+            Matcher::vector_length(n->in(1)) == 16 && \/\/ src\n+            Matcher::vector_element_basic_type(n) == T_BYTE);\n@@ -6626,1 +6652,1 @@\n-    int vlen_enc = vector_length_encoding(vector_length_in_bytes(this, $src));\n+    int vlen_enc = vector_length_encoding(Matcher::vector_length_in_bytes(this, $src));\n@@ -6636,1 +6662,1 @@\n-            (vector_length_in_bytes(n) >= vector_length_in_bytes(n->in(1)))); \/\/ dst >= src\n+            (Matcher::vector_length_in_bytes(n) >= Matcher::vector_length_in_bytes(n->in(1)))); \/\/ dst >= src\n@@ -6640,1 +6666,1 @@\n-    BasicType to_elem_bt = vector_element_basic_type(this);\n+    BasicType to_elem_bt = Matcher::vector_element_basic_type(this);\n@@ -6673,2 +6699,2 @@\n-            (vector_length_in_bytes(n->in(1)) <= 16) &&\n-            (vector_length_in_bytes(n) < vector_length_in_bytes(n->in(1)))); \/\/ dst < src\n+            (Matcher::vector_length_in_bytes(n->in(1)) <= 16) &&\n+            (Matcher::vector_length_in_bytes(n) < Matcher::vector_length_in_bytes(n->in(1)))); \/\/ dst < src\n@@ -6681,1 +6707,1 @@\n-    BasicType to_elem_bt = vector_element_basic_type(this);\n+    BasicType to_elem_bt = Matcher::vector_element_basic_type(this);\n@@ -6699,2 +6725,2 @@\n-            (vector_length_in_bytes(n->in(1)) == 32) &&\n-            (vector_length_in_bytes(n) < vector_length_in_bytes(n->in(1)))); \/\/ dst < src\n+            (Matcher::vector_length_in_bytes(n->in(1)) == 32) &&\n+            (Matcher::vector_length_in_bytes(n) < Matcher::vector_length_in_bytes(n->in(1)))); \/\/ dst < src\n@@ -6707,1 +6733,1 @@\n-    BasicType to_elem_bt = vector_element_basic_type(this);\n+    BasicType to_elem_bt = Matcher::vector_element_basic_type(this);\n@@ -6727,1 +6753,1 @@\n-            (vector_length_in_bytes(n) >= vector_length_in_bytes(n->in(1)))); \/\/ dst >= src\n+            (Matcher::vector_length_in_bytes(n) >= Matcher::vector_length_in_bytes(n->in(1)))); \/\/ dst >= src\n@@ -6733,1 +6759,1 @@\n-    BasicType dst_elem_bt = vector_element_basic_type(this);\n+    BasicType dst_elem_bt = Matcher::vector_element_basic_type(this);\n@@ -6766,1 +6792,1 @@\n-  predicate((vector_element_basic_type(n) == T_BYTE || vector_element_basic_type(n) == T_SHORT) &&\n+  predicate((Matcher::vector_element_basic_type(n) == T_BYTE || Matcher::vector_element_basic_type(n) == T_SHORT) &&\n@@ -6774,2 +6800,2 @@\n-    int vlen = vector_length_in_bytes(this, $src);\n-    BasicType to_elem_bt  = vector_element_basic_type(this);\n+    int vlen = Matcher::vector_length_in_bytes(this, $src);\n+    BasicType to_elem_bt  = Matcher::vector_element_basic_type(this);\n@@ -6798,3 +6824,3 @@\n-            (vector_element_basic_type(n) == T_INT ||\n-             vector_element_basic_type(n) == T_FLOAT ||\n-             vector_element_basic_type(n) == T_DOUBLE));\n+            (Matcher::vector_element_basic_type(n) == T_INT ||\n+             Matcher::vector_element_basic_type(n) == T_FLOAT ||\n+             Matcher::vector_element_basic_type(n) == T_DOUBLE));\n@@ -6804,2 +6830,2 @@\n-    BasicType to_elem_bt = vector_element_basic_type(this);\n-    int vlen = vector_length_in_bytes(this, $src);\n+    BasicType to_elem_bt = Matcher::vector_element_basic_type(this);\n+    int vlen = Matcher::vector_length_in_bytes(this, $src);\n@@ -6857,1 +6883,1 @@\n-  predicate(vector_element_basic_type(n) == T_DOUBLE);\n+  predicate(Matcher::vector_element_basic_type(n) == T_DOUBLE);\n@@ -6868,1 +6894,1 @@\n-  predicate(vector_element_basic_type(n) == T_FLOAT);\n+  predicate(Matcher::vector_element_basic_type(n) == T_FLOAT);\n@@ -6881,3 +6907,3 @@\n-  predicate(vector_length_in_bytes(n->in(1)->in(1)) >=  8 && \/\/ src1\n-            vector_length_in_bytes(n->in(1)->in(1)) <= 32 && \/\/ src1\n-            is_floating_point_type(vector_element_basic_type(n->in(1)->in(1)))); \/\/ src1 T_FLOAT, T_DOUBLE\n+  predicate(Matcher::vector_length_in_bytes(n->in(1)->in(1)) >=  8 && \/\/ src1\n+            Matcher::vector_length_in_bytes(n->in(1)->in(1)) <= 32 && \/\/ src1\n+            is_floating_point_type(Matcher::vector_element_basic_type(n->in(1)->in(1)))); \/\/ src1 T_FLOAT, T_DOUBLE\n@@ -6889,1 +6915,1 @@\n-    if (vector_element_basic_type(this, $src1) == T_FLOAT) {\n+    if (Matcher::vector_element_basic_type(this, $src1) == T_FLOAT) {\n@@ -6899,2 +6925,2 @@\n-  predicate(vector_length_in_bytes(n->in(1)->in(1)) == 64 && \/\/ src1\n-            is_floating_point_type(vector_element_basic_type(n->in(1)->in(1)))); \/\/ src1 T_FLOAT, T_DOUBLE\n+  predicate(Matcher::vector_length_in_bytes(n->in(1)->in(1)) == 64 && \/\/ src1\n+            is_floating_point_type(Matcher::vector_element_basic_type(n->in(1)->in(1)))); \/\/ src1 T_FLOAT, T_DOUBLE\n@@ -6908,1 +6934,1 @@\n-    if (vector_element_basic_type(this, $src1) == T_FLOAT) {\n+    if (Matcher::vector_element_basic_type(this, $src1) == T_FLOAT) {\n@@ -6922,3 +6948,3 @@\n-            vector_length_in_bytes(n->in(1)->in(1)) >=  4 && \/\/ src1\n-            vector_length_in_bytes(n->in(1)->in(1)) <= 32 && \/\/ src1\n-            is_integral_type(vector_element_basic_type(n->in(1)->in(1)))); \/\/ src1\n+            Matcher::vector_length_in_bytes(n->in(1)->in(1)) >=  4 && \/\/ src1\n+            Matcher::vector_length_in_bytes(n->in(1)->in(1)) <= 32 && \/\/ src1\n+            is_integral_type(Matcher::vector_element_basic_type(n->in(1)->in(1)))); \/\/ src1\n@@ -6931,1 +6957,1 @@\n-    Assembler::Width ww = widthForType(vector_element_basic_type(this, $src1));\n+    Assembler::Width ww = widthForType(Matcher::vector_element_basic_type(this, $src1));\n@@ -6940,3 +6966,3 @@\n-            vector_length_in_bytes(n->in(1)->in(1)) >=  8 && \/\/ src1\n-            vector_length_in_bytes(n->in(1)->in(1)) <= 16 && \/\/ src1\n-            is_integral_type(vector_element_basic_type(n->in(1)->in(1)))); \/\/ src1\n+            Matcher::vector_length_in_bytes(n->in(1)->in(1)) >=  8 && \/\/ src1\n+            Matcher::vector_length_in_bytes(n->in(1)->in(1)) <= 16 && \/\/ src1\n+            is_integral_type(Matcher::vector_element_basic_type(n->in(1)->in(1)))); \/\/ src1\n@@ -6947,1 +6973,1 @@\n-    int vlen = vector_length_in_bytes(this, $src1);\n+    int vlen = Matcher::vector_length_in_bytes(this, $src1);\n@@ -6949,1 +6975,1 @@\n-    BasicType bt = vector_element_basic_type(this, $src1);\n+    BasicType bt = Matcher::vector_element_basic_type(this, $src1);\n@@ -6959,2 +6985,2 @@\n-            vector_length_in_bytes(n->in(1)->in(1)) == 32 && \/\/ src1\n-            is_integral_type(vector_element_basic_type(n->in(1)->in(1)))); \/\/ src1\n+            Matcher::vector_length_in_bytes(n->in(1)->in(1)) == 32 && \/\/ src1\n+            is_integral_type(Matcher::vector_element_basic_type(n->in(1)->in(1)))); \/\/ src1\n@@ -6965,1 +6991,1 @@\n-    int vlen = vector_length_in_bytes(this, $src1);\n+    int vlen = Matcher::vector_length_in_bytes(this, $src1);\n@@ -6967,1 +6993,1 @@\n-    BasicType bt = vector_element_basic_type(this, $src1);\n+    BasicType bt = Matcher::vector_element_basic_type(this, $src1);\n@@ -6977,2 +7003,2 @@\n-             vector_length_in_bytes(n->in(1)->in(1)) == 64) && \/\/ src1\n-             is_integral_type(vector_element_basic_type(n->in(1)->in(1)))); \/\/ src1\n+             Matcher::vector_length_in_bytes(n->in(1)->in(1)) == 64) && \/\/ src1\n+             is_integral_type(Matcher::vector_element_basic_type(n->in(1)->in(1)))); \/\/ src1\n@@ -6990,1 +7016,1 @@\n-    BasicType src1_elem_bt = vector_element_basic_type(this, $src1);\n+    BasicType src1_elem_bt = Matcher::vector_element_basic_type(this, $src1);\n@@ -7023,1 +7049,1 @@\n-  predicate(vector_length_in_bytes(n->in(1)) <= 16); \/\/ src\n+  predicate(Matcher::vector_length_in_bytes(n->in(1)) <= 16); \/\/ src\n@@ -7031,1 +7057,1 @@\n-    assert($idx$$constant < (int)vector_length(this, $src), \"out of bounds\");\n+    assert($idx$$constant < (int)Matcher::vector_length(this, $src), \"out of bounds\");\n@@ -7033,1 +7059,1 @@\n-    BasicType elem_bt = vector_element_basic_type(this, $src);\n+    BasicType elem_bt = Matcher::vector_element_basic_type(this, $src);\n@@ -7040,2 +7066,2 @@\n-  predicate(vector_length_in_bytes(n->in(1)) == 32 || \/\/ src\n-            vector_length_in_bytes(n->in(1)) == 64);  \/\/ src\n+  predicate(Matcher::vector_length_in_bytes(n->in(1)) == 32 || \/\/ src\n+            Matcher::vector_length_in_bytes(n->in(1)) == 64);  \/\/ src\n@@ -7050,1 +7076,1 @@\n-    assert($idx$$constant < (int)vector_length(this, $src), \"out of bounds\");\n+    assert($idx$$constant < (int)Matcher::vector_length(this, $src), \"out of bounds\");\n@@ -7052,1 +7078,1 @@\n-    BasicType elem_bt = vector_element_basic_type(this, $src);\n+    BasicType elem_bt = Matcher::vector_element_basic_type(this, $src);\n@@ -7061,1 +7087,1 @@\n-  predicate(vector_length(n->in(1)) <= 2); \/\/ src\n+  predicate(Matcher::vector_length(n->in(1)) <= 2); \/\/ src\n@@ -7066,1 +7092,1 @@\n-    assert($idx$$constant < (int)vector_length(this, $src), \"out of bounds\");\n+    assert($idx$$constant < (int)Matcher::vector_length(this, $src), \"out of bounds\");\n@@ -7074,2 +7100,2 @@\n-  predicate(vector_length(n->in(1)) == 4 || \/\/ src\n-            vector_length(n->in(1)) == 8);  \/\/ src\n+  predicate(Matcher::vector_length(n->in(1)) == 4 || \/\/ src\n+            Matcher::vector_length(n->in(1)) == 8);  \/\/ src\n@@ -7080,1 +7106,1 @@\n-    assert($idx$$constant < (int)vector_length(this, $src), \"out of bounds\");\n+    assert($idx$$constant < (int)Matcher::vector_length(this, $src), \"out of bounds\");\n@@ -7090,1 +7116,1 @@\n-  predicate(vector_length(n->in(1)) <= 4);\n+  predicate(Matcher::vector_length(n->in(1)) <= 4);\n@@ -7095,1 +7121,1 @@\n-    assert($idx$$constant < (int)vector_length(this, $src), \"out of bounds\");\n+    assert($idx$$constant < (int)Matcher::vector_length(this, $src), \"out of bounds\");\n@@ -7103,2 +7129,2 @@\n-  predicate(vector_length(n->in(1)\/*src*\/) == 8 ||\n-            vector_length(n->in(1)\/*src*\/) == 16);\n+  predicate(Matcher::vector_length(n->in(1)\/*src*\/) == 8 ||\n+            Matcher::vector_length(n->in(1)\/*src*\/) == 16);\n@@ -7109,1 +7135,1 @@\n-    assert($idx$$constant < (int)vector_length(this, $src), \"out of bounds\");\n+    assert($idx$$constant < (int)Matcher::vector_length(this, $src), \"out of bounds\");\n@@ -7118,1 +7144,1 @@\n-  predicate(vector_length(n->in(1)) == 2); \/\/ src\n+  predicate(Matcher::vector_length(n->in(1)) == 2); \/\/ src\n@@ -7122,1 +7148,1 @@\n-    assert($idx$$constant < (int)vector_length(this, $src), \"out of bounds\");\n+    assert($idx$$constant < (int)Matcher::vector_length(this, $src), \"out of bounds\");\n@@ -7130,2 +7156,2 @@\n-  predicate(vector_length(n->in(1)) == 4 || \/\/ src\n-            vector_length(n->in(1)) == 8);  \/\/ src\n+  predicate(Matcher::vector_length(n->in(1)) == 4 || \/\/ src\n+            Matcher::vector_length(n->in(1)) == 8);  \/\/ src\n@@ -7136,1 +7162,1 @@\n-    assert($idx$$constant < (int)vector_length(this, $src), \"out of bounds\");\n+    assert($idx$$constant < (int)Matcher::vector_length(this, $src), \"out of bounds\");\n@@ -7164,2 +7190,2 @@\n-            vector_length_in_bytes(n) <= 32 &&\n-            is_integral_type(vector_element_basic_type(n)));\n+            Matcher::vector_length_in_bytes(n) <= 32 &&\n+            is_integral_type(Matcher::vector_element_basic_type(n)));\n@@ -7177,2 +7203,2 @@\n-            vector_length_in_bytes(n) <= 32 &&\n-            !is_integral_type(vector_element_basic_type(n)));\n+            Matcher::vector_length_in_bytes(n) <= 32 &&\n+            !is_integral_type(Matcher::vector_element_basic_type(n)));\n@@ -7189,1 +7215,1 @@\n-  predicate(vector_length_in_bytes(n) == 64);\n+  predicate(Matcher::vector_length_in_bytes(n) == 64);\n@@ -7195,1 +7221,1 @@\n-     BasicType elem_bt = vector_element_basic_type(this);\n+     BasicType elem_bt = Matcher::vector_element_basic_type(this);\n@@ -7208,1 +7234,1 @@\n-    uint vlen = vector_length(this);\n+    uint vlen = Matcher::vector_length(this);\n@@ -7223,1 +7249,1 @@\n-    uint vlen = vector_length(this);\n+    uint vlen = Matcher::vector_length(this);\n@@ -7238,1 +7264,1 @@\n-    uint vlen = vector_length(this);\n+    uint vlen = Matcher::vector_length(this);\n@@ -7266,1 +7292,1 @@\n-  predicate(vector_length(n) != 4); \/\/ handled by 1-operand instruction vabsneg4F\n+  predicate(Matcher::vector_length(n) != 4); \/\/ handled by 1-operand instruction vabsneg4F\n@@ -7274,1 +7300,1 @@\n-    int vlen = vector_length(this);\n+    int vlen = Matcher::vector_length(this);\n@@ -7287,1 +7313,1 @@\n-  predicate(vector_length(n) == 4);\n+  predicate(Matcher::vector_length(n) == 4);\n@@ -7307,1 +7333,1 @@\n-    uint vlen = vector_length(this);\n+    uint vlen = Matcher::vector_length(this);\n@@ -7323,2 +7349,2 @@\n-  predicate(vector_length_in_bytes(n->in(1)) >= 4 &&\n-            vector_length_in_bytes(n->in(1)) < 16 &&\n+  predicate(Matcher::vector_length_in_bytes(n->in(1)) >= 4 &&\n+            Matcher::vector_length_in_bytes(n->in(1)) < 16 &&\n@@ -7330,1 +7356,1 @@\n-    int vlen = vector_length_in_bytes(this, $src1);\n+    int vlen = Matcher::vector_length_in_bytes(this, $src1);\n@@ -7339,2 +7365,2 @@\n-  predicate(vector_length_in_bytes(n->in(1)) >= 16 &&\n-            vector_length_in_bytes(n->in(1)) <  64 &&\n+  predicate(Matcher::vector_length_in_bytes(n->in(1)) >= 16 &&\n+            Matcher::vector_length_in_bytes(n->in(1)) <  64 &&\n@@ -7346,1 +7372,1 @@\n-    int vlen = vector_length_in_bytes(this, $src1);\n+    int vlen = Matcher::vector_length_in_bytes(this, $src1);\n@@ -7355,1 +7381,1 @@\n-  predicate(vector_length_in_bytes(n->in(1)) == 64 &&\n+  predicate(Matcher::vector_length_in_bytes(n->in(1)) == 64 &&\n@@ -7361,1 +7387,1 @@\n-    int vlen = vector_length_in_bytes(this, $src1);\n+    int vlen = Matcher::vector_length_in_bytes(this, $src1);\n@@ -7370,2 +7396,2 @@\n-  predicate(vector_length_in_bytes(n->in(1)) >= 4 &&\n-            vector_length_in_bytes(n->in(1)) < 16 &&\n+  predicate(Matcher::vector_length_in_bytes(n->in(1)) >= 4 &&\n+            Matcher::vector_length_in_bytes(n->in(1)) < 16 &&\n@@ -7377,1 +7403,1 @@\n-    int vlen = vector_length_in_bytes(this, $src1);\n+    int vlen = Matcher::vector_length_in_bytes(this, $src1);\n@@ -7386,2 +7412,2 @@\n-  predicate(vector_length_in_bytes(n->in(1)) >= 16 &&\n-            vector_length_in_bytes(n->in(1)) < 64  &&\n+  predicate(Matcher::vector_length_in_bytes(n->in(1)) >= 16 &&\n+            Matcher::vector_length_in_bytes(n->in(1)) < 64  &&\n@@ -7393,1 +7419,1 @@\n-    int vlen = vector_length_in_bytes(this, $src1);\n+    int vlen = Matcher::vector_length_in_bytes(this, $src1);\n@@ -7402,1 +7428,1 @@\n-  predicate(vector_length_in_bytes(n->in(1)) == 64 &&\n+  predicate(Matcher::vector_length_in_bytes(n->in(1)) == 64 &&\n@@ -7408,1 +7434,1 @@\n-    int vlen = vector_length_in_bytes(this, $src1);\n+    int vlen = Matcher::vector_length_in_bytes(this, $src1);\n@@ -7417,2 +7443,2 @@\n-  predicate(vector_length_in_bytes(n->in(1)->in(1)) >= 4 &&\n-            vector_length_in_bytes(n->in(1)->in(1)) < 16 &&\n+  predicate(Matcher::vector_length_in_bytes(n->in(1)->in(1)) >= 4 &&\n+            Matcher::vector_length_in_bytes(n->in(1)->in(1)) < 16 &&\n@@ -7424,1 +7450,1 @@\n-    int vlen = vector_length_in_bytes(this, $src1);\n+    int vlen = Matcher::vector_length_in_bytes(this, $src1);\n@@ -7431,2 +7457,2 @@\n-  predicate(vector_length_in_bytes(n->in(1)->in(1)) >= 16 &&\n-            vector_length_in_bytes(n->in(1)->in(1)) <  64 &&\n+  predicate(Matcher::vector_length_in_bytes(n->in(1)->in(1)) >= 16 &&\n+            Matcher::vector_length_in_bytes(n->in(1)->in(1)) <  64 &&\n@@ -7437,1 +7463,1 @@\n-    int vlen = vector_length_in_bytes(this, $src1);\n+    int vlen = Matcher::vector_length_in_bytes(this, $src1);\n@@ -7444,1 +7470,1 @@\n-  predicate(vector_length_in_bytes(n->in(1)->in(1)) == 64 &&\n+  predicate(Matcher::vector_length_in_bytes(n->in(1)->in(1)) == 64 &&\n@@ -7450,1 +7476,1 @@\n-    int vlen = vector_length_in_bytes(this, $src1);\n+    int vlen = Matcher::vector_length_in_bytes(this, $src1);\n@@ -7465,2 +7491,2 @@\n-    int vlen_in_bytes = vector_length_in_bytes(this);\n-    BasicType elem_bt = vector_element_basic_type(this);\n+    int vlen_in_bytes = Matcher::vector_length_in_bytes(this);\n+    BasicType elem_bt = Matcher::vector_element_basic_type(this);\n@@ -7479,2 +7505,2 @@\n-    int vlen_in_bytes = vector_length_in_bytes(this);\n-    BasicType elem_bt = vector_element_basic_type(this);\n+    int vlen_in_bytes = Matcher::vector_length_in_bytes(this);\n+    BasicType elem_bt = Matcher::vector_element_basic_type(this);\n@@ -7490,1 +7516,1 @@\n-  predicate(vector_length(n) < 64 || VM_Version::supports_avx512vlbw());\n+  predicate(Matcher::vector_length(n) < 64 || VM_Version::supports_avx512vlbw());\n@@ -7495,1 +7521,1 @@\n-    if (vector_length_in_bytes(this) <= 16) {\n+    if (Matcher::vector_length_in_bytes(this) <= 16) {\n@@ -7507,1 +7533,1 @@\n-  predicate(vector_length(n) <= 8);\n+  predicate(Matcher::vector_length(n) <= 8);\n@@ -7519,1 +7545,1 @@\n-  predicate(vector_length(n) == 16 && !VM_Version::supports_avx512bw());\n+  predicate(Matcher::vector_length(n) == 16 && !VM_Version::supports_avx512bw());\n@@ -7546,1 +7572,1 @@\n-  predicate (vector_length(n) <= 4 && UseAVX <= 2);\n+  predicate(Matcher::vector_length(n) <= 4 && UseAVX <= 2);\n@@ -7559,1 +7585,1 @@\n-  predicate(vector_length(n) == 8 && UseAVX <= 2);\n+  predicate(Matcher::vector_length(n) == 8 && UseAVX <= 2);\n@@ -7590,1 +7616,1 @@\n-  predicate(vector_length(n) == 2 && UseAVX <= 2);\n+  predicate(Matcher::vector_length(n) == 2 && UseAVX <= 2);\n@@ -7604,1 +7630,1 @@\n-  predicate(vector_length(n) == 4 && UseAVX <= 2);\n+  predicate(Matcher::vector_length(n) == 4 && UseAVX <= 2);\n@@ -7637,2 +7663,2 @@\n-  predicate((vector_length(n) == vector_length(n->in(1))) &&\n-            (vector_length_in_bytes(n) == vector_length_in_bytes(n->in(1))));\n+  predicate((Matcher::vector_length(n) == Matcher::vector_length(n->in(1))) &&\n+            (Matcher::vector_length_in_bytes(n) == Matcher::vector_length_in_bytes(n->in(1))));\n@@ -7651,1 +7677,1 @@\n-  predicate(vector_element_basic_type(n) == T_BYTE);\n+  predicate(Matcher::vector_element_basic_type(n) == T_BYTE);\n@@ -7656,1 +7682,1 @@\n-     int vlen_in_bytes = vector_length_in_bytes(this);\n+     int vlen_in_bytes = Matcher::vector_length_in_bytes(this);\n@@ -7667,1 +7693,1 @@\n-  predicate(vector_element_basic_type(n) == T_BYTE);\n+  predicate(Matcher::vector_element_basic_type(n) == T_BYTE);\n@@ -7677,2 +7703,2 @@\n-  predicate(vector_element_basic_type(n) == T_BYTE &&\n-            vector_length(n) < 32);\n+  predicate(Matcher::vector_element_basic_type(n) == T_BYTE &&\n+            Matcher::vector_length(n) < 32);\n@@ -7689,2 +7715,2 @@\n-  predicate(vector_element_basic_type(n) == T_BYTE &&\n-            vector_length(n) == 32 && !VM_Version::supports_avx512_vbmi());\n+  predicate(Matcher::vector_element_basic_type(n) == T_BYTE &&\n+            Matcher::vector_length(n) == 32 && !VM_Version::supports_avx512_vbmi());\n@@ -7711,2 +7737,2 @@\n-  predicate(vector_element_basic_type(n) == T_BYTE &&\n-            vector_length(n) >= 32 && VM_Version::supports_avx512_vbmi());\n+  predicate(Matcher::vector_element_basic_type(n) == T_BYTE &&\n+            Matcher::vector_length(n) >= 32 && VM_Version::supports_avx512_vbmi());\n@@ -7725,2 +7751,2 @@\n-  predicate(vector_element_basic_type(n) == T_SHORT &&\n-            vector_length(n) <= 16 && !VM_Version::supports_avx512bw()); \/\/ NB! aligned with rearrangeS\n+  predicate(Matcher::vector_element_basic_type(n) == T_SHORT &&\n+            Matcher::vector_length(n) <= 16 && !VM_Version::supports_avx512bw()); \/\/ NB! aligned with rearrangeS\n@@ -7733,1 +7759,1 @@\n-    int vlen_in_bytes = vector_length_in_bytes(this);\n+    int vlen_in_bytes = Matcher::vector_length_in_bytes(this);\n@@ -7767,2 +7793,2 @@\n-  predicate(vector_element_basic_type(n) == T_SHORT &&\n-            vector_length(n) <= 8 && !VM_Version::supports_avx512bw());\n+  predicate(Matcher::vector_element_basic_type(n) == T_SHORT &&\n+            Matcher::vector_length(n) <= 8 && !VM_Version::supports_avx512bw());\n@@ -7779,2 +7805,2 @@\n-  predicate(vector_element_basic_type(n) == T_SHORT &&\n-            vector_length(n) == 16 && !VM_Version::supports_avx512bw());\n+  predicate(Matcher::vector_element_basic_type(n) == T_SHORT &&\n+            Matcher::vector_length(n) == 16 && !VM_Version::supports_avx512bw());\n@@ -7801,1 +7827,1 @@\n-  predicate(vector_element_basic_type(n) == T_SHORT &&\n+  predicate(Matcher::vector_element_basic_type(n) == T_SHORT &&\n@@ -7816,1 +7842,1 @@\n-  predicate(vector_element_basic_type(n) == T_SHORT &&\n+  predicate(Matcher::vector_element_basic_type(n) == T_SHORT &&\n@@ -7833,2 +7859,2 @@\n-  predicate((vector_element_basic_type(n) == T_INT || vector_element_basic_type(n) == T_FLOAT) &&\n-            vector_length(n) == 4 && UseAVX < 2);\n+  predicate((Matcher::vector_element_basic_type(n) == T_INT || Matcher::vector_element_basic_type(n) == T_FLOAT) &&\n+            Matcher::vector_length(n) == 4 && UseAVX < 2);\n@@ -7863,2 +7889,2 @@\n- predicate((vector_element_basic_type(n) == T_INT || vector_element_basic_type(n) == T_FLOAT) &&\n-           vector_length(n) == 4 && UseAVX < 2);\n+ predicate((Matcher::vector_element_basic_type(n) == T_INT || Matcher::vector_element_basic_type(n) == T_FLOAT) &&\n+           Matcher::vector_length(n) == 4 && UseAVX < 2);\n@@ -7875,1 +7901,1 @@\n-  predicate((vector_element_basic_type(n) == T_INT || vector_element_basic_type(n) == T_FLOAT) &&\n+  predicate((Matcher::vector_element_basic_type(n) == T_INT || Matcher::vector_element_basic_type(n) == T_FLOAT) &&\n@@ -7887,1 +7913,1 @@\n-  predicate((vector_element_basic_type(n) == T_INT || vector_element_basic_type(n) == T_FLOAT) &&\n+  predicate((Matcher::vector_element_basic_type(n) == T_INT || Matcher::vector_element_basic_type(n) == T_FLOAT) &&\n@@ -7904,2 +7930,2 @@\n-  predicate(is_double_word_type(vector_element_basic_type(n)) && \/\/ T_LONG, T_DOUBLE\n-            vector_length(n) < 8 && !VM_Version::supports_avx512vl());\n+  predicate(is_double_word_type(Matcher::vector_element_basic_type(n)) && \/\/ T_LONG, T_DOUBLE\n+            Matcher::vector_length(n) < 8 && !VM_Version::supports_avx512vl());\n@@ -7931,2 +7957,2 @@\n-  predicate(is_double_word_type(vector_element_basic_type(n)) && \/\/ T_LONG, T_DOUBLE\n-            vector_length(n) < 8 && !VM_Version::supports_avx512vl());\n+  predicate(is_double_word_type(Matcher::vector_element_basic_type(n)) && \/\/ T_LONG, T_DOUBLE\n+            Matcher::vector_length(n) < 8 && !VM_Version::supports_avx512vl());\n@@ -7945,2 +7971,2 @@\n-  predicate(is_double_word_type(vector_element_basic_type(n)) && \/\/ T_LONG, T_DOUBLE\n-            (vector_length(n) == 8 || VM_Version::supports_avx512vl()));\n+  predicate(is_double_word_type(Matcher::vector_element_basic_type(n)) && \/\/ T_LONG, T_DOUBLE\n+            (Matcher::vector_length(n) == 8 || VM_Version::supports_avx512vl()));\n@@ -7959,2 +7985,2 @@\n-  predicate(is_double_word_type(vector_element_basic_type(n)) && \/\/ T_LONG, T_DOUBLE\n-            (vector_length(n) == 8 || VM_Version::supports_avx512vl()));\n+  predicate(is_double_word_type(Matcher::vector_element_basic_type(n)) && \/\/ T_LONG, T_DOUBLE\n+            (Matcher::vector_length(n) == 8 || VM_Version::supports_avx512vl()));\n@@ -7991,1 +8017,1 @@\n-  predicate(vector_length_in_bytes(n->in(1)) > 8);\n+  predicate(Matcher::vector_length_in_bytes(n->in(1)) > 8);\n@@ -8016,1 +8042,1 @@\n-  predicate(vector_length_in_bytes(n->in(1)) > 8);\n+  predicate(Matcher::vector_length_in_bytes(n->in(1)) > 8);\n@@ -8094,1 +8120,1 @@\n-  predicate(vector_length_in_bytes(n->in(1)->in(1)) > 8);\n+  predicate(Matcher::vector_length_in_bytes(n->in(1)->in(1)) > 8);\n@@ -8141,1 +8167,1 @@\n-    assert(vector_element_basic_type(this, $src1) == vector_element_basic_type(this, $src2), \"mismatch\");\n+    assert(Matcher::vector_element_basic_type(this, $src1) == Matcher::vector_element_basic_type(this, $src2), \"mismatch\");\n@@ -8145,1 +8171,1 @@\n-    BasicType elem_bt = vector_element_basic_type(this, $src1);\n+    BasicType elem_bt = Matcher::vector_element_basic_type(this, $src1);\n@@ -8213,1 +8239,1 @@\n-    int mask_len = vector_length(this, $mask);\n+    int mask_len = Matcher::vector_length(this, $mask);\n@@ -8229,1 +8255,1 @@\n-    int mask_len = vector_length(this, $mask);\n+    int mask_len = Matcher::vector_length(this, $mask);\n@@ -8244,1 +8270,1 @@\n-    int mask_len = vector_length(this, $mask);\n+    int mask_len = Matcher::vector_length(this, $mask);\n@@ -8260,1 +8286,1 @@\n-    int mask_len = vector_length(this, $mask);\n+    int mask_len = Matcher::vector_length(this, $mask);\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":431,"deletions":405,"binary":false,"changes":836,"status":"modified"},{"patch":"@@ -478,0 +478,3 @@\n+  \/\/ simulate crash during compilation\n+  assert(CICrashAt < 0 || _compile->compile_id() != CICrashAt, \"just as planned\");\n+\n@@ -2111,4 +2114,0 @@\n-  \/\/ Now that all inlining is over, cut edge from root to loop\n-  \/\/ safepoints\n-  remove_root_to_sfpts_edges(igvn);\n-\n@@ -2152,0 +2151,4 @@\n+  \/\/ Now that all inlining is over and no PhaseRemoveUseless will run, cut edge from root to loop\n+  \/\/ safepoints\n+  remove_root_to_sfpts_edges(igvn);\n+\n@@ -2225,1 +2228,1 @@\n-  print_method(PHASE_CPP1, 2);\n+  print_method(PHASE_CCP1, 2);\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -62,0 +62,42 @@\n+bool LibraryCallKit::arch_supports_vector_rotate(int opc, int num_elem, BasicType elem_bt, bool has_scalar_args) {\n+    bool is_supported = true;\n+    \/\/ has_scalar_args flag is true only for non-constant scalar shift count,\n+    \/\/ since in this case shift needs to be broadcasted.\n+    if (!Matcher::match_rule_supported_vector(opc, num_elem, elem_bt) ||\n+         (has_scalar_args &&\n+           !arch_supports_vector(VectorNode::replicate_opcode(elem_bt), num_elem, elem_bt, VecMaskNotUsed))) {\n+      is_supported = false;\n+    }\n+\n+    int lshiftopc, rshiftopc;\n+    switch(elem_bt) {\n+      case T_BYTE:\n+        lshiftopc = Op_LShiftI;\n+        rshiftopc = Op_URShiftB;\n+        break;\n+      case T_SHORT:\n+        lshiftopc = Op_LShiftI;\n+        rshiftopc = Op_URShiftS;\n+        break;\n+      case T_INT:\n+        lshiftopc = Op_LShiftI;\n+        rshiftopc = Op_URShiftI;\n+        break;\n+      case T_LONG:\n+        lshiftopc = Op_LShiftL;\n+        rshiftopc = Op_URShiftL;\n+        break;\n+      default:\n+        assert(false, \"Unexpected type\");\n+    }\n+    int lshiftvopc = VectorNode::opcode(lshiftopc, elem_bt);\n+    int rshiftvopc = VectorNode::opcode(rshiftopc, elem_bt);\n+    if (!is_supported &&\n+        arch_supports_vector(lshiftvopc, num_elem, elem_bt, VecMaskNotUsed, has_scalar_args) &&\n+        arch_supports_vector(rshiftvopc, num_elem, elem_bt, VecMaskNotUsed, has_scalar_args) &&\n+        arch_supports_vector(Op_OrV, num_elem, elem_bt, VecMaskNotUsed)) {\n+      is_supported = true;\n+    }\n+    return is_supported;\n+}\n+\n@@ -115,2 +157,2 @@\n-  \/\/ Check that architecture supports this op-size-type combination.\n-  if (!Matcher::match_rule_supported_vector(sopc, num_elem, type)) {\n+  if (VectorNode::is_vector_rotate(sopc)) {\n+    if(!arch_supports_vector_rotate(sopc, num_elem, type, has_scalar_args)) {\n@@ -118,4 +160,4 @@\n-    if (C->print_intrinsics()) {\n-      tty->print_cr(\"  ** Rejected vector op (%s,%s,%d) because architecture does not support it\",\n-                    NodeClassNames[sopc], type2name(type), num_elem);\n-    }\n+      if (C->print_intrinsics()) {\n+        tty->print_cr(\"  ** Rejected vector op (%s,%s,%d) because architecture does not support variable vector shifts\",\n+                      NodeClassNames[sopc], type2name(type), num_elem);\n+      }\n@@ -123,1 +165,2 @@\n-    return false;\n+      return false;\n+    }\n@@ -125,1 +168,12 @@\n-    assert(Matcher::match_rule_supported(sopc), \"must be supported\");\n+    \/\/ Check that architecture supports this op-size-type combination.\n+    if (!Matcher::match_rule_supported_vector(sopc, num_elem, type)) {\n+#ifndef PRODUCT\n+      if (C->print_intrinsics()) {\n+        tty->print_cr(\"  ** Rejected vector op (%s,%s,%d) because architecture does not support it\",\n+                      NodeClassNames[sopc], type2name(type), num_elem);\n+      }\n+#endif\n+      return false;\n+    } else {\n+      assert(Matcher::match_rule_supported(sopc), \"must be supported\");\n+    }\n@@ -1514,1 +1568,3 @@\n-  if (opc == 0 || !VectorNode::is_shift_opcode(opc)) {\n+  bool is_shift  = VectorNode::is_shift_opcode(opc);\n+  bool is_rotate = VectorNode::is_rotate_opcode(opc);\n+  if (opc == 0 || (!is_shift && !is_rotate)) {\n@@ -1527,0 +1583,1 @@\n+  Node* cnt  = argument(5);\n@@ -1529,0 +1586,1 @@\n+  const TypeInt* cnt_type = cnt->bottom_type()->isa_int();\n@@ -1530,1 +1588,5 @@\n-  if (!arch_supports_vector(sopc, num_elem, elem_bt, VecMaskNotUsed, true \/*has_scalar_args*\/)) {\n+  \/\/ If CPU supports vector constant rotate instructions pass it directly\n+  bool is_const_rotate = is_rotate && cnt_type && cnt_type->is_con() &&\n+                         Matcher::supports_vector_constant_rotates(cnt_type->get_con());\n+  bool has_scalar_args = is_rotate ? !is_const_rotate : true;\n+  if (!arch_supports_vector(sopc, num_elem, elem_bt, VecMaskNotUsed, has_scalar_args)) {\n@@ -1538,1 +1600,14 @@\n-  Node* opd2 = vector_shift_count(argument(5), opc, elem_bt, num_elem);\n+  Node* opd2 = NULL;\n+  if (is_shift) {\n+    opd2 = vector_shift_count(cnt, opc, elem_bt, num_elem);\n+  } else {\n+    assert(is_rotate, \"unexpected operation\");\n+    if (!is_const_rotate) {\n+      const Type * type_bt = Type::get_const_basic_type(elem_bt);\n+      cnt = elem_bt == T_LONG ? gvn().transform(new ConvI2LNode(cnt)) : cnt;\n+      opd2 = gvn().transform(VectorNode::scalar2vector(cnt, num_elem, type_bt));\n+    } else {\n+      \/\/ Constant shift value.\n+      opd2 = cnt;\n+    }\n+  }\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":86,"deletions":11,"binary":false,"changes":97,"status":"modified"},{"patch":"@@ -79,0 +79,1 @@\n+  static bool is_rotate_opcode(int opc);\n@@ -90,1 +91,1 @@\n-  static bool is_vector_rotate_supported(int vopc, uint vlen, BasicType bt);\n+  static bool is_vector_rotate_supported(int opc, uint vlen, BasicType bt);\n@@ -102,0 +103,1 @@\n+  static bool is_vector_rotate(int opc);\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -383,0 +383,12 @@\n+    \/*package-private*\/\n+    @ForceInline\n+    static byte rotateLeft(byte a, int n) {\n+        return (byte)(((((byte)a) & Byte.toUnsignedInt((byte)-1)) << (n & Byte.SIZE-1)) | ((((byte)a) & Byte.toUnsignedInt((byte)-1)) >>> (Byte.SIZE - (n & Byte.SIZE-1))));\n+    }\n+\n+    \/*package-private*\/\n+    @ForceInline\n+    static byte rotateRight(byte a, int n) {\n+        return (byte)(((((byte)a) & Byte.toUnsignedInt((byte)-1)) >>> (n & Byte.SIZE-1)) | ((((byte)a) & Byte.toUnsignedInt((byte)-1)) << (Byte.SIZE - (n & Byte.SIZE-1))));\n+    }\n+\n@@ -603,6 +615,1 @@\n-            if (op == ROR || op == ROL) {  \/\/ FIXME: JIT should do this\n-                ByteVector neg = that.lanewise(NEG);\n-                ByteVector hi = this.lanewise(LSHL, (op == ROR) ? neg : that);\n-                ByteVector lo = this.lanewise(LSHR, (op == ROR) ? that : neg);\n-                return hi.lanewise(OR, lo);\n-            } else if (op == AND_NOT) {\n+            if (op == AND_NOT) {\n@@ -649,0 +656,4 @@\n+                case VECTOR_OP_LROTATE: return (v0, v1) ->\n+                        v0.bOp(v1, (i, a, n) -> rotateLeft(a, (int)n));\n+                case VECTOR_OP_RROTATE: return (v0, v1) ->\n+                        v0.bOp(v1, (i, a, n) -> rotateRight(a, (int)n));\n@@ -795,5 +806,0 @@\n-        if (op == ROR || op == ROL) {  \/\/ FIXME: JIT should do this\n-            ByteVector hi = this.lanewise(LSHL, (op == ROR) ? -e : e);\n-            ByteVector lo = this.lanewise(LSHR, (op == ROR) ? e : -e);\n-            return hi.lanewise(OR, lo);\n-        }\n@@ -812,0 +818,4 @@\n+                case VECTOR_OP_LROTATE: return (v, n) ->\n+                        v.uOp((i, a) -> rotateLeft(a, (int)n));\n+                case VECTOR_OP_RROTATE: return (v, n) ->\n+                        v.uOp((i, a) -> rotateRight(a, (int)n));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteVector.java","additions":21,"deletions":11,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -383,0 +383,1 @@\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleVector.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -383,0 +383,1 @@\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatVector.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -383,0 +383,12 @@\n+    \/*package-private*\/\n+    @ForceInline\n+    static int rotateLeft(int a, int n) {\n+        return Integer.rotateLeft(a, n);\n+    }\n+\n+    \/*package-private*\/\n+    @ForceInline\n+    static int rotateRight(int a, int n) {\n+        return Integer.rotateRight(a, n);\n+    }\n+\n@@ -603,6 +615,1 @@\n-            if (op == ROR || op == ROL) {  \/\/ FIXME: JIT should do this\n-                IntVector neg = that.lanewise(NEG);\n-                IntVector hi = this.lanewise(LSHL, (op == ROR) ? neg : that);\n-                IntVector lo = this.lanewise(LSHR, (op == ROR) ? that : neg);\n-                return hi.lanewise(OR, lo);\n-            } else if (op == AND_NOT) {\n+            if (op == AND_NOT) {\n@@ -649,0 +656,4 @@\n+                case VECTOR_OP_LROTATE: return (v0, v1) ->\n+                        v0.bOp(v1, (i, a, n) -> rotateLeft(a, (int)n));\n+                case VECTOR_OP_RROTATE: return (v0, v1) ->\n+                        v0.bOp(v1, (i, a, n) -> rotateRight(a, (int)n));\n@@ -795,5 +806,0 @@\n-        if (op == ROR || op == ROL) {  \/\/ FIXME: JIT should do this\n-            IntVector hi = this.lanewise(LSHL, (op == ROR) ? -e : e);\n-            IntVector lo = this.lanewise(LSHR, (op == ROR) ? e : -e);\n-            return hi.lanewise(OR, lo);\n-        }\n@@ -812,0 +818,4 @@\n+                case VECTOR_OP_LROTATE: return (v, n) ->\n+                        v.uOp((i, a) -> rotateLeft(a, (int)n));\n+                case VECTOR_OP_RROTATE: return (v, n) ->\n+                        v.uOp((i, a) -> rotateRight(a, (int)n));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntVector.java","additions":21,"deletions":11,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -383,0 +383,12 @@\n+    \/*package-private*\/\n+    @ForceInline\n+    static long rotateLeft(long a, int n) {\n+        return Long.rotateLeft(a, n);\n+    }\n+\n+    \/*package-private*\/\n+    @ForceInline\n+    static long rotateRight(long a, int n) {\n+        return Long.rotateRight(a, n);\n+    }\n+\n@@ -561,6 +573,1 @@\n-            if (op == ROR || op == ROL) {  \/\/ FIXME: JIT should do this\n-                LongVector neg = that.lanewise(NEG);\n-                LongVector hi = this.lanewise(LSHL, (op == ROR) ? neg : that);\n-                LongVector lo = this.lanewise(LSHR, (op == ROR) ? that : neg);\n-                return hi.lanewise(OR, lo);\n-            } else if (op == AND_NOT) {\n+            if (op == AND_NOT) {\n@@ -607,0 +614,4 @@\n+                case VECTOR_OP_LROTATE: return (v0, v1) ->\n+                        v0.bOp(v1, (i, a, n) -> rotateLeft(a, (int)n));\n+                case VECTOR_OP_RROTATE: return (v0, v1) ->\n+                        v0.bOp(v1, (i, a, n) -> rotateRight(a, (int)n));\n@@ -713,5 +724,0 @@\n-        if (op == ROR || op == ROL) {  \/\/ FIXME: JIT should do this\n-            LongVector hi = this.lanewise(LSHL, (op == ROR) ? -e : e);\n-            LongVector lo = this.lanewise(LSHR, (op == ROR) ? e : -e);\n-            return hi.lanewise(OR, lo);\n-        }\n@@ -730,0 +736,4 @@\n+                case VECTOR_OP_LROTATE: return (v, n) ->\n+                        v.uOp((i, a) -> rotateLeft(a, (int)n));\n+                case VECTOR_OP_RROTATE: return (v, n) ->\n+                        v.uOp((i, a) -> rotateRight(a, (int)n));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongVector.java","additions":21,"deletions":11,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -383,0 +383,12 @@\n+    \/*package-private*\/\n+    @ForceInline\n+    static short rotateLeft(short a, int n) {\n+        return (short)(((((short)a) & Short.toUnsignedInt((short)-1)) << (n & Short.SIZE-1)) | ((((short)a) & Short.toUnsignedInt((short)-1)) >>> (Short.SIZE - (n & Short.SIZE-1))));\n+    }\n+\n+    \/*package-private*\/\n+    @ForceInline\n+    static short rotateRight(short a, int n) {\n+        return (short)(((((short)a) & Short.toUnsignedInt((short)-1)) >>> (n & Short.SIZE-1)) | ((((short)a) & Short.toUnsignedInt((short)-1)) << (Short.SIZE - (n & Short.SIZE-1))));\n+    }\n+\n@@ -603,6 +615,1 @@\n-            if (op == ROR || op == ROL) {  \/\/ FIXME: JIT should do this\n-                ShortVector neg = that.lanewise(NEG);\n-                ShortVector hi = this.lanewise(LSHL, (op == ROR) ? neg : that);\n-                ShortVector lo = this.lanewise(LSHR, (op == ROR) ? that : neg);\n-                return hi.lanewise(OR, lo);\n-            } else if (op == AND_NOT) {\n+            if (op == AND_NOT) {\n@@ -649,0 +656,4 @@\n+                case VECTOR_OP_LROTATE: return (v0, v1) ->\n+                        v0.bOp(v1, (i, a, n) -> rotateLeft(a, (int)n));\n+                case VECTOR_OP_RROTATE: return (v0, v1) ->\n+                        v0.bOp(v1, (i, a, n) -> rotateRight(a, (int)n));\n@@ -795,5 +806,0 @@\n-        if (op == ROR || op == ROL) {  \/\/ FIXME: JIT should do this\n-            ShortVector hi = this.lanewise(LSHL, (op == ROR) ? -e : e);\n-            ShortVector lo = this.lanewise(LSHR, (op == ROR) ? e : -e);\n-            return hi.lanewise(OR, lo);\n-        }\n@@ -812,0 +818,4 @@\n+                case VECTOR_OP_LROTATE: return (v, n) ->\n+                        v.uOp((i, a) -> rotateLeft(a, (int)n));\n+                case VECTOR_OP_RROTATE: return (v, n) ->\n+                        v.uOp((i, a) -> rotateRight(a, (int)n));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortVector.java","additions":21,"deletions":11,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -387,0 +387,22 @@\n+#if[BITWISE]\n+    \/*package-private*\/\n+    @ForceInline\n+    static $type$ rotateLeft($type$ a, int n) {\n+#if[intOrLong]\n+        return $Boxtype$.rotateLeft(a, n);\n+#else[intOrLong]\n+        return ($type$)((((($type$)a) & $Boxtype$.toUnsignedInt(($type$)-1)) << (n & $Boxtype$.SIZE-1)) | (((($type$)a) & $Boxtype$.toUnsignedInt(($type$)-1)) >>> ($Boxtype$.SIZE - (n & $Boxtype$.SIZE-1))));\n+#end[intOrLong]\n+    }\n+\n+    \/*package-private*\/\n+    @ForceInline\n+    static $type$ rotateRight($type$ a, int n) {\n+#if[intOrLong]\n+        return $Boxtype$.rotateRight(a, n);\n+#else[intOrLong]\n+        return ($type$)((((($type$)a) & $Boxtype$.toUnsignedInt(($type$)-1)) >>> (n & $Boxtype$.SIZE-1)) | (((($type$)a) & $Boxtype$.toUnsignedInt(($type$)-1)) << ($Boxtype$.SIZE - (n & $Boxtype$.SIZE-1))));\n+#end[intOrLong]\n+    }\n+#end[BITWISE]\n+\n@@ -660,6 +682,1 @@\n-            if (op == ROR || op == ROL) {  \/\/ FIXME: JIT should do this\n-                $abstractvectortype$ neg = that.lanewise(NEG);\n-                $abstractvectortype$ hi = this.lanewise(LSHL, (op == ROR) ? neg : that);\n-                $abstractvectortype$ lo = this.lanewise(LSHR, (op == ROR) ? that : neg);\n-                return hi.lanewise(OR, lo);\n-            } else if (op == AND_NOT) {\n+            if (op == AND_NOT) {\n@@ -708,0 +725,4 @@\n+                case VECTOR_OP_LROTATE: return (v0, v1) ->\n+                        v0.bOp(v1, (i, a, n) -> rotateLeft(a, (int)n));\n+                case VECTOR_OP_RROTATE: return (v0, v1) ->\n+                        v0.bOp(v1, (i, a, n) -> rotateRight(a, (int)n));\n@@ -872,5 +893,0 @@\n-        if (op == ROR || op == ROL) {  \/\/ FIXME: JIT should do this\n-            $abstractvectortype$ hi = this.lanewise(LSHL, (op == ROR) ? -e : e);\n-            $abstractvectortype$ lo = this.lanewise(LSHR, (op == ROR) ? e : -e);\n-            return hi.lanewise(OR, lo);\n-        }\n@@ -889,0 +905,4 @@\n+                case VECTOR_OP_LROTATE: return (v, n) ->\n+                        v.uOp((i, a) -> rotateLeft(a, (int)n));\n+                case VECTOR_OP_RROTATE: return (v, n) ->\n+                        v.uOp((i, a) -> rotateRight(a, (int)n));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template","additions":31,"deletions":11,"binary":false,"changes":42,"status":"modified"}]}