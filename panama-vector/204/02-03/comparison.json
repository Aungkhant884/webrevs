{"files":[{"patch":"@@ -2137,1 +2137,1 @@\n-void Assembler::evcvtph2pd(XMMRegister dst, XMMRegister src, int vector_len) {\n+void Assembler::evcvtph2pd(XMMRegister dst, KRegister mask, XMMRegister src, int vector_len) {\n@@ -2139,1 +2139,1 @@\n-  InstructionAttr attributes(vector_len, \/* rex_w *\/ false, \/* legacy mode *\/ false, \/* no_mask_reg *\/ true, \/*uses_vl *\/ true);\n+  InstructionAttr attributes(vector_len, \/* rex_w *\/ false, \/* legacy mode *\/ false, \/* no_mask_reg *\/ false, \/*uses_vl *\/ true);\n@@ -2141,0 +2141,2 @@\n+  attributes.reset_is_clear_context();\n+  attributes.set_embedded_opmask_register_specifier(mask);\n@@ -2142,2 +2144,1 @@\n-  emit_int8((unsigned char)0x5A);\n-  emit_int8((unsigned char)(0xC0 | encode));\n+  emit_int16((unsigned char)0x5A, (0xC0 | encode));\n@@ -2146,1 +2147,5 @@\n-void Assembler::evcvtpd2ph(XMMRegister dst, XMMRegister src, int vector_len) {\n+void Assembler::evcvtph2pd(XMMRegister dst, XMMRegister src, int vector_len) {\n+  evcvtph2pd(dst, k0, src, vector_len);\n+}\n+\n+void Assembler::evcvtpd2ph(XMMRegister dst, KRegister mask, XMMRegister src, int vector_len) {\n@@ -2148,1 +2153,1 @@\n-  InstructionAttr attributes(vector_len, \/* rex_w *\/ true, \/* legacy mode *\/ false, \/* no_mask_reg *\/ true, \/*uses_vl *\/ true);\n+  InstructionAttr attributes(vector_len, \/* rex_w *\/ true, \/* legacy mode *\/ false, \/* no_mask_reg *\/ false, \/*uses_vl *\/ true);\n@@ -2150,0 +2155,2 @@\n+  attributes.reset_is_clear_context();\n+  attributes.set_embedded_opmask_register_specifier(mask);\n@@ -2151,2 +2158,1 @@\n-  emit_int8((unsigned char)0x5A);\n-  emit_int8((unsigned char)(0xC0 | encode));\n+  emit_int16((unsigned char)0x5A, (0xC0 | encode));\n@@ -2155,1 +2161,5 @@\n-void Assembler::evcvtps2ph(XMMRegister dst, XMMRegister src, int imm8, int vector_len) {\n+void Assembler::evcvtpd2ph(XMMRegister dst, XMMRegister src, int vector_len) {\n+  evcvtpd2ph(dst, k0, src, vector_len);\n+}\n+\n+void Assembler::evcvtps2ph(XMMRegister dst, KRegister mask, XMMRegister src, int imm8, int vector_len) {\n@@ -2157,1 +2167,1 @@\n-  InstructionAttr attributes(vector_len, \/* rex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/*uses_vl *\/ true);\n+  InstructionAttr attributes(vector_len, \/* rex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ false, \/*uses_vl *\/ true);\n@@ -2159,0 +2169,2 @@\n+  attributes.set_embedded_opmask_register_specifier(mask);\n+  attributes.reset_is_clear_context();\n@@ -2160,3 +2172,1 @@\n-  emit_int8((unsigned char)0x1D);\n-  emit_int8((unsigned char)(0xC0 | encode));\n-  emit_int8(imm8);\n+  emit_int24(0x1D, (0xC0 | encode), imm8);\n@@ -2165,1 +2175,5 @@\n-void Assembler::evcvtph2ps(XMMRegister dst, XMMRegister src, int vector_len) {\n+void Assembler::evcvtps2ph(XMMRegister dst, XMMRegister src, int imm8, int vector_len) {\n+  evcvtps2ph(dst, k0, src, imm8, vector_len);\n+}\n+\n+void Assembler::evcvtph2ps(XMMRegister dst, KRegister mask, XMMRegister src, int vector_len) {\n@@ -2167,1 +2181,1 @@\n-  InstructionAttr attributes(vector_len, \/* rex_w *\/ false, \/* legacy_mode *\/false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ true);\n+  InstructionAttr attributes(vector_len, \/* rex_w *\/ false, \/* legacy_mode *\/false, \/* no_mask_reg *\/ false, \/* uses_vl *\/ true);\n@@ -2169,0 +2183,2 @@\n+  attributes.set_embedded_opmask_register_specifier(mask);\n+  attributes.reset_is_clear_context();\n@@ -2170,2 +2186,1 @@\n-  emit_int8((unsigned char)0x13);\n-  emit_int8((unsigned char)(0xC0 | encode));\n+  emit_int16(0x13, (0xC0 | encode));\n@@ -2174,0 +2189,3 @@\n+void Assembler::evcvtph2ps(XMMRegister dst, XMMRegister src, int vector_len) {\n+  evcvtph2ps(dst, k0, src, vector_len);\n+}\n@@ -6371,1 +6389,1 @@\n-void Assembler::evaddph(XMMRegister dst, XMMRegister nds, XMMRegister src, int vector_len) {\n+void Assembler::evaddph(XMMRegister dst, KRegister mask, XMMRegister nds, XMMRegister src, int vector_len) {\n@@ -6373,1 +6391,1 @@\n-  InstructionAttr attributes(vector_len, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ true);\n+  InstructionAttr attributes(vector_len, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ false, \/* uses_vl *\/ true);\n@@ -6375,0 +6393,2 @@\n+  attributes.set_embedded_opmask_register_specifier(mask);\n+  attributes.reset_is_clear_context();\n@@ -6376,2 +6396,5 @@\n-  emit_int8(0x58);\n-  emit_int8((unsigned char)(0xC0 | encode));\n+  emit_int16(0x58, (0xC0 | encode));\n+}\n+\n+void Assembler::evaddph(XMMRegister dst, XMMRegister nds, XMMRegister src, int vector_len) {\n+  evaddph(dst, k0, nds, src, vector_len);\n@@ -6431,1 +6454,1 @@\n-void Assembler::evsubph(XMMRegister dst, XMMRegister nds, XMMRegister src, int vector_len) {\n+void Assembler::evsubph(XMMRegister dst, KRegister mask, XMMRegister nds, XMMRegister src, int vector_len) {\n@@ -6433,1 +6456,1 @@\n-  InstructionAttr attributes(vector_len, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ true);\n+  InstructionAttr attributes(vector_len, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ false, \/* uses_vl *\/ true);\n@@ -6435,0 +6458,2 @@\n+  attributes.set_embedded_opmask_register_specifier(mask);\n+  attributes.reset_is_clear_context();\n@@ -6436,2 +6461,5 @@\n-  emit_int8((unsigned char)0x5C);\n-  emit_int8((unsigned char)(0xC0 | encode));\n+  emit_int16(0x5C, (0xC0 | encode));\n+}\n+\n+void Assembler::evsubph(XMMRegister dst, XMMRegister nds, XMMRegister src, int vector_len) {\n+  evsubph(dst, k0, nds, src, vector_len);\n@@ -6502,1 +6530,1 @@\n-void Assembler::evmulph(XMMRegister dst, XMMRegister nds, XMMRegister src, int vector_len) {\n+void Assembler::evmulph(XMMRegister dst, KRegister mask, XMMRegister nds, XMMRegister src, int vector_len) {\n@@ -6504,1 +6532,1 @@\n-  InstructionAttr attributes(vector_len, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ true);\n+  InstructionAttr attributes(vector_len, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ false, \/* uses_vl *\/ true);\n@@ -6506,0 +6534,2 @@\n+  attributes.set_embedded_opmask_register_specifier(mask);\n+  attributes.reset_is_clear_context();\n@@ -6507,2 +6537,1 @@\n-  emit_int8(0x59);\n-  emit_int8((unsigned char)(0xC0 | encode));\n+  emit_int16(0x59, (0xC0 | encode));\n@@ -6511,1 +6540,5 @@\n-void Assembler::evfmadd231ph(XMMRegister dst, XMMRegister src1, XMMRegister src2, int vector_len) {\n+void Assembler::evmulph(XMMRegister dst, XMMRegister nds, XMMRegister src, int vector_len) {\n+  evmulph(dst, k0, nds, src, vector_len);\n+}\n+\n+void Assembler::evfmadd231ph(XMMRegister dst, KRegister mask, XMMRegister src1, XMMRegister src2, int vector_len) {\n@@ -6515,1 +6548,1 @@\n-  InstructionAttr attributes(vector_len, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ true);\n+  InstructionAttr attributes(vector_len, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ false, \/* uses_vl *\/ true);\n@@ -6517,0 +6550,2 @@\n+  attributes.set_embedded_opmask_register_specifier(mask);\n+  attributes.reset_is_clear_context();\n@@ -6518,2 +6553,1 @@\n-  emit_int8((unsigned char)0xB8);\n-  emit_int8((unsigned char)(0xC0 | encode));\n+  emit_int16((unsigned char)0xB8, (0xC0 | encode));\n@@ -6522,1 +6556,5 @@\n-void Assembler::evfmadd231ph(XMMRegister dst, XMMRegister src1, Address src2, int vector_len) {\n+void Assembler::evfmadd231ph(XMMRegister dst, XMMRegister src1, XMMRegister src2, int vector_len) {\n+  evfmadd231ph(dst, k0, src1, src2, vector_len);\n+}\n+\n+void Assembler::evfmadd231ph(XMMRegister dst, KRegister mask, XMMRegister src1, Address src2, int vector_len) {\n@@ -6527,1 +6565,1 @@\n-  InstructionAttr attributes(vector_len, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ true);\n+  InstructionAttr attributes(vector_len, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ false, \/* uses_vl *\/ true);\n@@ -6529,0 +6567,3 @@\n+  attributes.set_is_evex_instruction();\n+  attributes.set_embedded_opmask_register_specifier(mask);\n+  attributes.reset_is_clear_context();\n@@ -6534,0 +6575,4 @@\n+void Assembler::evfmadd231ph(XMMRegister dst, XMMRegister src1, Address src2, int vector_len) {\n+  evfmadd231ph(dst, k0, src1, src2, vector_len);\n+}\n+\n@@ -6619,1 +6664,1 @@\n-void Assembler::evdivph(XMMRegister dst, XMMRegister nds, XMMRegister src, int vector_len) {\n+void Assembler::evdivph(XMMRegister dst, KRegister mask, XMMRegister nds, XMMRegister src, int vector_len) {\n@@ -6621,1 +6666,1 @@\n-  InstructionAttr attributes(vector_len, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ true);\n+  InstructionAttr attributes(vector_len, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ false, \/* uses_vl *\/ true);\n@@ -6623,0 +6668,2 @@\n+  attributes.set_embedded_opmask_register_specifier(mask);\n+  attributes.reset_is_clear_context();\n@@ -6624,2 +6671,5 @@\n-  emit_int8((unsigned char)0x5E);\n-  emit_int8((unsigned char)(0xC0 | encode));\n+  emit_int16(0x5E, (0xC0 | encode));\n+}\n+\n+void Assembler::evdivph(XMMRegister dst, XMMRegister nds, XMMRegister src, int vector_len) {\n+  evdivph(dst, k0, nds, src, vector_len);\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":89,"deletions":39,"binary":false,"changes":128,"status":"modified"},{"patch":"@@ -1186,0 +1186,1 @@\n+  void evcvtph2pd(XMMRegister dst, KRegister mask, XMMRegister src, int vector_len);\n@@ -1187,0 +1188,1 @@\n+  void evcvtps2ph(XMMRegister dst, KRegister mask, XMMRegister src, int imm8, int vector_len);\n@@ -1188,0 +1190,1 @@\n+  void evcvtph2ps(XMMRegister dst, KRegister mask, XMMRegister src, int vector_len);\n@@ -1189,0 +1192,1 @@\n+  void evcvtpd2ph(XMMRegister dst, KRegister mask, XMMRegister src, int vector_len);\n@@ -2231,0 +2235,1 @@\n+  void evaddph(XMMRegister dst, KRegister mask, XMMRegister nds, XMMRegister src, int vector_len);\n@@ -2240,0 +2245,1 @@\n+  void evsubph(XMMRegister dst, KRegister mask, XMMRegister nds, XMMRegister src, int vector_len);\n@@ -2250,0 +2256,1 @@\n+  void evmulph(XMMRegister dst, KRegister mask, XMMRegister nds, XMMRegister src, int vector_len);\n@@ -2256,0 +2263,1 @@\n+  void evfmadd231ph(XMMRegister dst, KRegister mask, XMMRegister nds, XMMRegister src, int vector_len);\n@@ -2257,0 +2265,1 @@\n+  void evfmadd231ph(XMMRegister dst, KRegister mask, XMMRegister nds, Address src, int vector_len);\n@@ -2266,0 +2275,1 @@\n+  void evdivph(XMMRegister dst, KRegister mask, XMMRegister nds, XMMRegister src, int vector_len);\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -186,0 +186,2 @@\n+  static address _vector_halffloat_sign_flip;\n+  static address _vector_halffloat_sign_mask;\n@@ -210,2 +212,0 @@\n-  static address _vector_halffloat_sign_flip;\n-  static address _vector_halffloat_sign_mask;\n","filename":"src\/hotspot\/cpu\/x86\/stubRoutines_x86.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}