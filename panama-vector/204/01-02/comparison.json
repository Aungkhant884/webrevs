{"files":[{"patch":"@@ -11105,3 +11105,2 @@\n-  \/\/ confine opc opcode extensions in mm bits to lower two bits\n-  \/\/ of form {0F, 0F_38, 0F_3A}\n-  \/\/ For MAP5 and MAP6, we use 3 bits in mmm bits\n+  \/\/ confine opc opcode extensions in mmm bits to lower three bits\n+  \/\/ of form {0F, 0F_38, 0F_3A, MAP5, MAP6}\n@@ -11109,1 +11108,0 @@\n-  emit_int8(byte2);\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1968,0 +1968,20 @@\n+void C2_MacroAssembler::reduce8HF(Register dst, XMMRegister src, XMMRegister vtmp, XMMRegister vtmp1, XMMRegister vtmp2) {\n+  movdl(vtmp1, dst);\n+  evaddsh(vtmp1, vtmp1, src);\n+  pshuflw(vtmp, src, 0x01);\n+  evaddsh(vtmp1, vtmp1, vtmp);\n+  pshuflw(vtmp, src, 0x02);\n+  evaddsh(vtmp1, vtmp1, vtmp);\n+  pshuflw(vtmp, src, 0x03);\n+  evaddsh(vtmp1, vtmp1, vtmp);\n+  pshufd(vtmp2, src, 0x0E);\n+  evaddsh(vtmp1, vtmp1, vtmp2);\n+  pshuflw(vtmp, vtmp2, 0x01);\n+  evaddsh(vtmp1, vtmp1, vtmp);\n+  pshuflw(vtmp, vtmp2, 0x02);\n+  evaddsh(vtmp1, vtmp1, vtmp);\n+  pshuflw(vtmp, vtmp2, 0x03);\n+  evaddsh(vtmp1, vtmp1, vtmp);\n+  movdl(dst, vtmp1);\n+}\n+\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -174,0 +174,1 @@\n+  void reduce8HF(Register dst, XMMRegister src, XMMRegister vtmp, XMMRegister vtmp1, XMMRegister vtmp2);\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -4110,0 +4110,3 @@\n+    StubRoutines::x86::_vector_halffloat_sign_mask = generate_vector_fp_mask(\"vector_halffloat_sign_mask\", 0x7FFF7FFF);\n+    StubRoutines::x86::_vector_halffloat_sign_flip = generate_vector_fp_mask(\"vector_halffloat_sign_flip\", 0x80008000);\n+\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_32.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1954,0 +1954,10 @@\n+    case Op_AddVHF:\n+    case Op_SubVHF:\n+    case Op_MulVHF:\n+    case Op_DivVHF:\n+    case Op_AbsVHF:\n+    case Op_NegVHF:\n+      if (bt != T_SHORT && !VM_Version::supports_avx512_fp16()) {\n+        return false;\n+      }\n+      break;\n@@ -2112,10 +2122,0 @@\n-    case Op_AddVHF:\n-    case Op_SubVHF:\n-    case Op_MulVHF:\n-    case Op_DivVHF:\n-    case Op_AbsVHF:\n-    case Op_NegVHF:\n-      if(bt != T_SHORT && !VM_Version::supports_avx512_fp16()) {\n-        return false;\n-      }\n-      return true;\n@@ -4851,2 +4851,1 @@\n-instruct reduction8HF(rRegI dst, vec src2, vec tmp, vec tmp1, vec tmp2) %{\n-  predicate(UseAVX > 2);\n+instruct reduction8HF(rRegI dst, vec src2, vec vtmp, vec vtmp1, vec vtmp2) %{\n@@ -4854,36 +4853,4 @@\n-  effect(TEMP tmp, TEMP tmp1, TEMP tmp2);\n-   format %{\"movdl    $tmp1, $dst\\n\\t\"\n-            \"evaddsh  $tmp1,$tmp1,$src2\\n\\t\"\n-            \"pshuflw  $tmp,$src2,0x01\\n\\t\"\n-            \"evaddsh  $tmp1,$tmp1,$tmp\\n\\t\"\n-            \"pshuflw  $tmp,$src2,0x02\\n\\t\"\n-            \"evaddsh  $tmp1,$tmp1,$tmp\\n\\t\"\n-            \"pshuflw  $tmp,$src2,0x03\\n\\t\"\n-            \"evaddsh  $tmp1,$tmp1,$tmp\\n\\t\"\n-            \"pshufd   $tmp2,$src2, 0x0E\\n\\t\"\n-            \"evaddsh  $tmp1,$tmp1,$tmp2\\n\\t\"\n-            \"pshuflw  $tmp,$tmp2,0x01\\n\\t\"\n-            \"evaddsh  $tmp1,$tmp1,$tmp\\n\\t\"\n-            \"pshuflw  $tmp,$tmp2,0x02\\n\\t\"\n-            \"evaddsh  $tmp1,$tmp1,$tmp\\n\\t\"\n-            \"pshuflw  $tmp,$tmp2,0x03\\n\\t\"\n-            \"evaddsh  $tmp1,$tmp1,$tmp\\t\"\n-            \"movdl    $dst, $tmp1\\t! add reductionHF\" %}\n-  ins_encode %{\n-    __ movdl($tmp1$$XMMRegister, $dst$$Register);\n-    __ evaddsh($tmp1$$XMMRegister, $tmp1$$XMMRegister, $src2$$XMMRegister);\n-    __ pshuflw($tmp$$XMMRegister, $src2$$XMMRegister, 0x01);\n-    __ evaddsh($tmp1$$XMMRegister, $tmp1$$XMMRegister, $tmp$$XMMRegister);\n-    __ pshuflw($tmp$$XMMRegister, $src2$$XMMRegister, 0x02);\n-    __ evaddsh($tmp1$$XMMRegister, $tmp1$$XMMRegister, $tmp$$XMMRegister);\n-    __ pshuflw($tmp$$XMMRegister, $src2$$XMMRegister, 0x03);\n-    __ evaddsh($tmp1$$XMMRegister, $tmp1$$XMMRegister, $tmp$$XMMRegister);\n-    __ pshufd($tmp2$$XMMRegister, $src2$$XMMRegister, 0x0E);\n-    __ evaddsh($tmp1$$XMMRegister, $tmp1$$XMMRegister, $tmp2$$XMMRegister);\n-    __ pshuflw($tmp$$XMMRegister, $tmp2$$XMMRegister, 0x01);\n-    __ evaddsh($tmp1$$XMMRegister, $tmp1$$XMMRegister, $tmp$$XMMRegister);\n-    __ pshuflw($tmp$$XMMRegister, $tmp2$$XMMRegister, 0x02);\n-    __ evaddsh($tmp1$$XMMRegister, $tmp1$$XMMRegister, $tmp$$XMMRegister);\n-    __ pshuflw($tmp$$XMMRegister, $tmp2$$XMMRegister, 0x03);\n-    __ evaddsh($tmp1$$XMMRegister, $tmp1$$XMMRegister, $tmp$$XMMRegister);\n-    __ movdl($dst$$Register, $tmp1$$XMMRegister);\n+  effect(TEMP vtmp, TEMP vtmp1, TEMP vtmp2);\n+  format %{ \"reduction_halffloat  $dst, $src2\\t using $vtmp, $vtmp1, $vtmp2 as TEMP\" %}\n+  ins_encode %{\n+    __ reduce8HF($dst$$Register, $src2$$XMMRegister, $vtmp$$XMMRegister, $vtmp1$$XMMRegister, $vtmp2$$XMMRegister);\n@@ -4894,1 +4861,0 @@\n-\n@@ -5411,1 +5377,0 @@\n-  predicate(UseAVX > 2);\n@@ -5631,1 +5596,0 @@\n-  predicate(UseAVX > 2);\n@@ -5972,1 +5936,0 @@\n-  predicate(UseAVX > 2);\n@@ -5974,1 +5937,1 @@\n-  format %{ \"vmulph  $dst,$src1,$src2\\t! mul packedHF\" %}\n+  format %{ \"evmulph  $dst,$src1,$src2\\t! mul packedHF\" %}\n@@ -6090,1 +6053,0 @@\n-  predicate(UseAVX > 2);\n@@ -7990,1 +7952,0 @@\n-  predicate(UseAVX > 2);\n@@ -8002,1 +7963,0 @@\n-  predicate(UseAVX > 2);\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":16,"deletions":56,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -226,0 +226,1 @@\n+        AVX512_FP16,\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.amd64\/src\/jdk\/vm\/ci\/amd64\/AMD64.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}