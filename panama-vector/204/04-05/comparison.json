{"files":[{"patch":"@@ -1964,0 +1964,8 @@\n+    case Op_VectorCastF2HF:\n+    case Op_VectorCastHF2F:\n+    case Op_VectorCastD2HF:\n+    case Op_VectorCastHF2D:\n+      if (!VM_Version::supports_avx512_fp16()) {\n+        return false;\n+      }\n+      break;\n@@ -7387,1 +7395,1 @@\n-  match(Set dst (VectorCastS2X src));\n+  match(Set dst (VectorCastHF2D src));\n@@ -7398,1 +7406,1 @@\n-  match(Set dst (VectorCastS2X src));\n+  match(Set dst (VectorCastHF2F src));\n@@ -7410,1 +7418,1 @@\n-  match(Set dst (VectorCastF2X src));\n+  match(Set dst (VectorCastF2HF src));\n@@ -7422,1 +7430,1 @@\n-  match(Set dst (VectorCastD2X src));\n+  match(Set dst (VectorCastD2HF src));\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -4240,0 +4240,1 @@\n+    \"VectorCastHF2F\", \"VectorCastF2HF\", \"VectorCastD2HF\", \"VectorCastHF2D\",\n","filename":"src\/hotspot\/share\/adlc\/formssel.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -151,0 +151,4 @@\n+macro(ConvHF2F)\n+macro(ConvF2HF)\n+macro(ConvHF2D)\n+macro(ConvD2HF)\n@@ -520,0 +524,4 @@\n+macro(VectorCastF2HF)\n+macro(VectorCastHF2F)\n+macro(VectorCastD2HF)\n+macro(VectorCastHF2D)\n","filename":"src\/hotspot\/share\/opto\/classes.hpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -58,0 +58,10 @@\n+\/\/------------------------------ConvD2HFNode------------------------------------\n+\/\/ Convert Double to Halffloat\n+class ConvD2HFNode : public Node {\n+  public:\n+  ConvD2HFNode( Node *in1 ) : Node(0,in1) {}\n+  virtual int Opcode() const;\n+  virtual const Type *bottom_type() const { return TypeInt::SHORT; }\n+  virtual uint  ideal_reg() const { return Op_RegI; }\n+};\n+\n@@ -103,0 +113,10 @@\n+\/\/------------------------------ConvF2HFNode------------------------------------\n+\/\/ Convert Float to Halffloat\n+class ConvF2HFNode : public Node {\n+  public:\n+  ConvF2HFNode( Node *in1 ) : Node(0,in1) {}\n+  virtual int Opcode() const;\n+  virtual const Type *bottom_type() const { return TypeInt::SHORT; }\n+  virtual uint  ideal_reg() const { return Op_RegI; }\n+};\n+\n@@ -130,0 +150,20 @@\n+\/\/------------------------------ConvHF2DNode------------------------------------\n+\/\/ Convert Halffloat to Double\n+class ConvHF2DNode : public Node {\n+  public:\n+  ConvHF2DNode( Node *in1 ) : Node(0,in1) {}\n+  virtual int Opcode() const;\n+  virtual const Type *bottom_type() const { return Type::DOUBLE; }\n+  virtual uint  ideal_reg() const { return Op_RegD; }\n+};\n+\n+\/\/------------------------------ConvHF2FNode------------------------------------\n+\/\/ Convert Halffloat to Float\n+class ConvHF2FNode : public Node {\n+  public:\n+  ConvHF2FNode( Node *in1 ) : Node(0,in1) {}\n+  virtual int Opcode() const;\n+  virtual const Type *bottom_type() const { return Type::FLOAT; }\n+  virtual uint  ideal_reg() const { return Op_RegF; }\n+};\n+\n","filename":"src\/hotspot\/share\/opto\/convertnode.hpp","additions":40,"deletions":0,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -784,1 +784,1 @@\n-  int cast_vopc = VectorCastNode::opcode(T_BYTE); \/\/ from shuffle of type T_BYTE\n+  int cast_vopc = VectorCastNode::opcode(-1, T_BYTE); \/\/ from shuffle of type T_BYTE\n@@ -2480,1 +2480,1 @@\n-    int cast_vopc = VectorCastNode::opcode(new_elem_bt_from, !is_ucast);\n+    int cast_vopc = VectorCastNode::opcode(-1, new_elem_bt_from, !is_ucast);\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -316,1 +316,1 @@\n-\/\/ Make a vectornode for half float binary operation\n+\/\/ Make a vectornode for half float unary\/binary operations\n@@ -1267,0 +1267,4 @@\n+    case Op_VectorCastHF2F: return new VectorCastHF2FNode(n1, vt);\n+    case Op_VectorCastF2HF: return new VectorCastF2HFNode(n1, vt);\n+    case Op_VectorCastD2HF: return new VectorCastD2HFNode(n1, vt);\n+    case Op_VectorCastHF2D: return new VectorCastHF2DNode(n1, vt);\n@@ -1273,1 +1277,1 @@\n-int VectorCastNode::opcode(BasicType bt, bool is_signed) {\n+int VectorCastNode::opcode(int sopc, BasicType bt, bool is_signed) {\n@@ -1275,0 +1279,21 @@\n+\n+  \/\/handle special case for\/to Half float conversions\n+  switch (sopc) {\n+    case Op_ConvHF2F:\n+      assert(bt == T_SHORT, \"\");\n+      return Op_VectorCastHF2F;\n+    case Op_ConvF2HF:\n+      assert(bt == T_FLOAT, \"\");\n+      return Op_VectorCastF2HF;\n+    case Op_ConvD2HF:\n+      assert(bt == T_DOUBLE, \"\");\n+      return Op_VectorCastD2HF;\n+    case Op_ConvHF2D:\n+      assert(bt == T_SHORT, \"\");\n+      return Op_VectorCastHF2D;\n+    default:\n+      \/\/ handled below\n+      break;\n+  }\n+\n+  \/\/ handle normal conversions\n@@ -1670,1 +1695,1 @@\n-    op = phase->transform(VectorCastNode::make(VectorCastNode::opcode(new_elem_bt_from), op, new_elem_bt_to, num_elem));\n+    op = phase->transform(VectorCastNode::make(VectorCastNode::opcode(-1, new_elem_bt_from), op, new_elem_bt_to, num_elem));\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":28,"deletions":3,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -1585,1 +1585,1 @@\n-  static int  opcode(BasicType bt, bool is_signed = true);\n+  static int  opcode(int sopc, BasicType bt, bool is_signed = true);\n@@ -1635,0 +1635,32 @@\n+  }\n+  virtual int Opcode() const;\n+};\n+\n+class VectorCastHF2FNode : public VectorCastNode {\n+ public:\n+  VectorCastHF2FNode(Node* in, const TypeVect* vt) : VectorCastNode(in, vt) {\n+    assert(in->bottom_type()->is_vect()->element_basic_type() == T_SHORT, \"must be short\");\n+  }\n+  virtual int Opcode() const;\n+};\n+\n+class VectorCastF2HFNode : public VectorCastNode {\n+ public:\n+  VectorCastF2HFNode(Node* in, const TypeVect* vt) : VectorCastNode(in, vt) {\n+    assert(in->bottom_type()->is_vect()->element_basic_type() == T_FLOAT, \"must be float\");\n+  }\n+  virtual int Opcode() const;\n+};\n+\n+class VectorCastHF2DNode : public VectorCastNode {\n+ public:\n+  VectorCastHF2DNode(Node* in, const TypeVect* vt) : VectorCastNode(in, vt) {\n+    assert(in->bottom_type()->is_vect()->element_basic_type() == T_SHORT, \"must be short\");\n+  }\n+  virtual int Opcode() const;\n+};\n+\n+class VectorCastD2HFNode : public VectorCastNode {\n+ public:\n+  VectorCastD2HFNode(Node* in, const TypeVect* vt) : VectorCastNode(in, vt) {\n+    assert(in->bottom_type()->is_vect()->element_basic_type() == T_DOUBLE, \"must be double\");\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":33,"deletions":1,"binary":false,"changes":34,"status":"modified"}]}