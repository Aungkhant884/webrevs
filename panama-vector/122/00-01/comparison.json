{"files":[{"patch":"@@ -8299,0 +8299,1 @@\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -8312,0 +8313,1 @@\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -8326,0 +8328,1 @@\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -8339,0 +8342,1 @@\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -8353,0 +8357,1 @@\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -8366,0 +8371,1 @@\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -8380,0 +8386,1 @@\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -8393,0 +8400,1 @@\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -8461,0 +8469,1 @@\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -8474,0 +8483,1 @@\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -8488,0 +8498,1 @@\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -8501,0 +8512,1 @@\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -8515,0 +8527,1 @@\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -8528,0 +8541,1 @@\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -8542,0 +8556,1 @@\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -8555,0 +8570,1 @@\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -8596,0 +8612,1 @@\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -8609,0 +8626,1 @@\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -8650,0 +8668,1 @@\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -8663,0 +8682,1 @@\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -8677,0 +8697,1 @@\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -8690,0 +8711,1 @@\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -8704,0 +8726,1 @@\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -8717,0 +8740,1 @@\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -8731,0 +8755,1 @@\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -8744,0 +8769,1 @@\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -8759,0 +8785,1 @@\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -8772,0 +8799,1 @@\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -8786,0 +8814,1 @@\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -8799,0 +8828,1 @@\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -8871,0 +8901,1 @@\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -8886,0 +8917,1 @@\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -8900,0 +8932,1 @@\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -8915,0 +8948,1 @@\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -8929,0 +8963,1 @@\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -8942,0 +8977,1 @@\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -8956,0 +8992,1 @@\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -8969,0 +9006,1 @@\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -9086,1 +9124,1 @@\n-void Assembler::evpsllw(XMMRegister dst, KRegister mask, int shift, XMMRegister src, bool merge, int vector_len) {\n+void Assembler::evpsllw(XMMRegister dst, KRegister mask, XMMRegister src, int shift, bool merge, int vector_len) {\n@@ -9098,1 +9136,2 @@\n-void Assembler::evpslld(XMMRegister dst, KRegister mask, int shift, XMMRegister src, bool merge, int vector_len) {\n+void Assembler::evpslld(XMMRegister dst, KRegister mask, XMMRegister src, int shift, bool merge, int vector_len) {\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -9110,1 +9149,2 @@\n-void Assembler::evpsllq(XMMRegister dst, KRegister mask, int shift, XMMRegister src, bool merge, int vector_len) {\n+void Assembler::evpsllq(XMMRegister dst, KRegister mask, XMMRegister src, int shift, bool merge, int vector_len) {\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -9112,1 +9152,1 @@\n-  InstructionAttr attributes(vector_len, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ false, \/* uses_vl *\/ true);\n+  InstructionAttr attributes(vector_len, \/* vex_w *\/ true, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ false, \/* uses_vl *\/ true);\n@@ -9122,1 +9162,1 @@\n-void Assembler::evpsrlw(XMMRegister dst, KRegister mask, int shift, XMMRegister src, bool merge, int vector_len) {\n+void Assembler::evpsrlw(XMMRegister dst, KRegister mask, XMMRegister src, int shift, bool merge, int vector_len) {\n@@ -9134,1 +9174,2 @@\n-void Assembler::evpsrld(XMMRegister dst, KRegister mask, int shift, XMMRegister src, bool merge, int vector_len) {\n+void Assembler::evpsrld(XMMRegister dst, KRegister mask, XMMRegister src, int shift, bool merge, int vector_len) {\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -9146,1 +9187,2 @@\n-void Assembler::evpsrlq(XMMRegister dst, KRegister mask, int shift, XMMRegister src, bool merge, int vector_len) {\n+void Assembler::evpsrlq(XMMRegister dst, KRegister mask, XMMRegister src, int shift, bool merge, int vector_len) {\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -9148,1 +9190,1 @@\n-  InstructionAttr attributes(vector_len, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ false, \/* uses_vl *\/ true);\n+  InstructionAttr attributes(vector_len, \/* vex_w *\/ true, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ false, \/* uses_vl *\/ true);\n@@ -9158,1 +9200,1 @@\n-void Assembler::evpsraw(XMMRegister dst, KRegister mask, int shift, XMMRegister src, bool merge, int vector_len) {\n+void Assembler::evpsraw(XMMRegister dst, KRegister mask, XMMRegister src, int shift, bool merge, int vector_len) {\n@@ -9170,1 +9212,2 @@\n-void Assembler::evpsrad(XMMRegister dst, KRegister mask, int shift, XMMRegister src, bool merge, int vector_len) {\n+void Assembler::evpsrad(XMMRegister dst, KRegister mask, XMMRegister src, int shift, bool merge, int vector_len) {\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -9182,1 +9225,2 @@\n-void Assembler::evpsraq(XMMRegister dst, KRegister mask, int shift, XMMRegister src, bool merge, int vector_len) {\n+void Assembler::evpsraq(XMMRegister dst, KRegister mask, XMMRegister src, int shift, bool merge, int vector_len) {\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -9184,1 +9228,1 @@\n-  InstructionAttr attributes(vector_len, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ false, \/* uses_vl *\/ true);\n+  InstructionAttr attributes(vector_len, \/* vex_w *\/ true, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ false, \/* uses_vl *\/ true);\n@@ -9207,0 +9251,1 @@\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -9219,0 +9264,1 @@\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -9243,0 +9289,1 @@\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -9255,0 +9302,1 @@\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -9279,0 +9327,1 @@\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -9291,0 +9340,1 @@\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -9315,0 +9365,1 @@\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -9327,0 +9378,1 @@\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -9351,0 +9403,1 @@\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -9363,0 +9416,1 @@\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -9387,0 +9441,1 @@\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -9399,0 +9454,1 @@\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -9463,0 +9519,1 @@\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -9475,0 +9532,1 @@\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -9489,0 +9547,1 @@\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -9501,0 +9560,1 @@\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -9568,0 +9628,1 @@\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -9580,0 +9641,1 @@\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -9594,0 +9656,1 @@\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -9606,0 +9669,1 @@\n+  assert(VM_Version::supports_evex(), \"\");\n@@ -11011,1 +11075,1 @@\n-void Assembler::evprord(XMMRegister dst, KRegister mask, int shift, XMMRegister src, bool merge, int vector_len) {\n+void Assembler::evprord(XMMRegister dst, KRegister mask, XMMRegister src, int shift, bool merge, int vector_len) {\n@@ -11023,1 +11087,1 @@\n-void Assembler::evprorq(XMMRegister dst, KRegister mask, int shift, XMMRegister src, bool merge, int vector_len) {\n+void Assembler::evprorq(XMMRegister dst, KRegister mask, XMMRegister src, int shift, bool merge, int vector_len) {\n@@ -11059,1 +11123,1 @@\n-void Assembler::evprold(XMMRegister dst, KRegister mask, int shift, XMMRegister src, bool merge, int vector_len) {\n+void Assembler::evprold(XMMRegister dst, KRegister mask, XMMRegister src, int shift, bool merge, int vector_len) {\n@@ -11071,1 +11135,1 @@\n-void Assembler::evprolq(XMMRegister dst, KRegister mask, int shift, XMMRegister src, bool merge, int vector_len) {\n+void Assembler::evprolq(XMMRegister dst, KRegister mask, XMMRegister src, int shift, bool merge, int vector_len) {\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":80,"deletions":16,"binary":false,"changes":96,"status":"modified"},{"patch":"@@ -2345,9 +2345,9 @@\n-  void evpsllw(XMMRegister dst, KRegister mask, int shift, XMMRegister src, bool merge, int vector_len);\n-  void evpslld(XMMRegister dst, KRegister mask, int shift, XMMRegister src, bool merge, int vector_len);\n-  void evpsllq(XMMRegister dst, KRegister mask, int shift, XMMRegister src, bool merge, int vector_len);\n-  void evpsrlw(XMMRegister dst, KRegister mask, int shift, XMMRegister src, bool merge, int vector_len);\n-  void evpsrld(XMMRegister dst, KRegister mask, int shift, XMMRegister src, bool merge, int vector_len);\n-  void evpsrlq(XMMRegister dst, KRegister mask, int shift, XMMRegister src, bool merge, int vector_len);\n-  void evpsraw(XMMRegister dst, KRegister mask, int shift, XMMRegister src, bool merge, int vector_len);\n-  void evpsrad(XMMRegister dst, KRegister mask, int shift, XMMRegister src, bool merge, int vector_len);\n-  void evpsraq(XMMRegister dst, KRegister mask, int shift, XMMRegister src, bool merge, int vector_len);\n+  void evpsllw(XMMRegister dst, KRegister mask, XMMRegister src, int shift, bool merge, int vector_len);\n+  void evpslld(XMMRegister dst, KRegister mask, XMMRegister src, int shift, bool merge, int vector_len);\n+  void evpsllq(XMMRegister dst, KRegister mask, XMMRegister src, int shift, bool merge, int vector_len);\n+  void evpsrlw(XMMRegister dst, KRegister mask, XMMRegister src, int shift, bool merge, int vector_len);\n+  void evpsrld(XMMRegister dst, KRegister mask, XMMRegister src, int shift, bool merge, int vector_len);\n+  void evpsrlq(XMMRegister dst, KRegister mask, XMMRegister src, int shift, bool merge, int vector_len);\n+  void evpsraw(XMMRegister dst, KRegister mask, XMMRegister src, int shift, bool merge, int vector_len);\n+  void evpsrad(XMMRegister dst, KRegister mask, XMMRegister src, int shift, bool merge, int vector_len);\n+  void evpsraq(XMMRegister dst, KRegister mask, XMMRegister src, int shift, bool merge, int vector_len);\n@@ -2393,2 +2393,2 @@\n-  void evprold(XMMRegister dst, KRegister mask, int shift, XMMRegister src, bool merge, int vector_len);\n-  void evprolq(XMMRegister dst, KRegister mask, int shift, XMMRegister src, bool merge, int vector_len);\n+  void evprold(XMMRegister dst, KRegister mask, XMMRegister src, int shift, bool merge, int vector_len);\n+  void evprolq(XMMRegister dst, KRegister mask, XMMRegister src, int shift, bool merge, int vector_len);\n@@ -2397,2 +2397,2 @@\n-  void evprord(XMMRegister dst, KRegister mask, int shift, XMMRegister src, bool merge, int vector_len);\n-  void evprorq(XMMRegister dst, KRegister mask, int shift, XMMRegister src, bool merge, int vector_len);\n+  void evprord(XMMRegister dst, KRegister mask, XMMRegister src, int shift, bool merge, int vector_len);\n+  void evprorq(XMMRegister dst, KRegister mask, XMMRegister src, int shift, bool merge, int vector_len);\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -3840,1 +3840,1 @@\n-      Assembler::evpsllw(dst, mask, imm8, src1, merge, vlen_enc); break;\n+      Assembler::evpsllw(dst, mask, src1, imm8, merge, vlen_enc); break;\n@@ -3842,1 +3842,1 @@\n-      Assembler::evpslld(dst, mask, imm8, src1, merge, vlen_enc); break;\n+      Assembler::evpslld(dst, mask, src1, imm8, merge, vlen_enc); break;\n@@ -3844,1 +3844,1 @@\n-      Assembler::evpsllq(dst, mask, imm8, src1, merge, vlen_enc); break;\n+      Assembler::evpsllq(dst, mask, src1, imm8, merge, vlen_enc); break;\n@@ -3846,1 +3846,1 @@\n-      Assembler::evpsrlw(dst, mask, imm8, src1, merge, vlen_enc); break;\n+      Assembler::evpsraw(dst, mask, src1, imm8, merge, vlen_enc); break;\n@@ -3848,1 +3848,1 @@\n-      Assembler::evpsrld(dst, mask, imm8, src1, merge, vlen_enc); break;\n+      Assembler::evpsrad(dst, mask, src1, imm8, merge, vlen_enc); break;\n@@ -3850,1 +3850,1 @@\n-      Assembler::evpsrlq(dst, mask, imm8, src1, merge, vlen_enc); break;\n+      Assembler::evpsraq(dst, mask, src1, imm8, merge, vlen_enc); break;\n@@ -3852,1 +3852,1 @@\n-      Assembler::evpsraw(dst, mask, imm8, src1, merge, vlen_enc); break;\n+      Assembler::evpsrlw(dst, mask, src1, imm8, merge, vlen_enc); break;\n@@ -3854,1 +3854,1 @@\n-      Assembler::evpsrad(dst, mask, imm8, src1, merge, vlen_enc); break;\n+      Assembler::evpsrld(dst, mask, src1, imm8, merge, vlen_enc); break;\n@@ -3856,1 +3856,1 @@\n-      Assembler::evpsraq(dst, mask, imm8, src1, merge, vlen_enc); break;\n+      Assembler::evpsrlq(dst, mask, src1, imm8, merge, vlen_enc); break;\n@@ -3858,1 +3858,1 @@\n-      evrord(eType, dst, mask, imm8, src1, merge, vlen_enc); break;\n+      evrord(eType, dst, mask, src1, imm8, merge, vlen_enc); break;\n@@ -3860,1 +3860,1 @@\n-      evrold(eType, dst, mask, imm8, src1, merge, vlen_enc); break;\n+      evrold(eType, dst, mask, src1, imm8, merge, vlen_enc); break;\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -8537,1 +8537,1 @@\n-void MacroAssembler::evrold(BasicType type, XMMRegister dst, KRegister mask, int shift, XMMRegister src, bool merge, int vlen_enc) {\n+void MacroAssembler::evrold(BasicType type, XMMRegister dst, KRegister mask, XMMRegister src, int shift, bool merge, int vlen_enc) {\n@@ -8540,1 +8540,1 @@\n-      evprold(dst, mask, shift, src, merge, vlen_enc); break;\n+      evprold(dst, mask, src, shift, merge, vlen_enc); break;\n@@ -8542,1 +8542,1 @@\n-      evprolq(dst, mask, shift, src, merge, vlen_enc); break;\n+      evprolq(dst, mask, src, shift, merge, vlen_enc); break;\n@@ -8549,1 +8549,1 @@\n-void MacroAssembler::evrord(BasicType type, XMMRegister dst, KRegister mask, int shift, XMMRegister src, bool merge, int vlen_enc) {\n+void MacroAssembler::evrord(BasicType type, XMMRegister dst, KRegister mask, XMMRegister src, int shift, bool merge, int vlen_enc) {\n@@ -8552,1 +8552,1 @@\n-      evprord(dst, mask, shift, src, merge, vlen_enc); break;\n+      evprord(dst, mask, src, shift, merge, vlen_enc); break;\n@@ -8554,1 +8554,1 @@\n-      evprorq(dst, mask, shift, src, merge, vlen_enc); break;\n+      evprorq(dst, mask, src, shift, merge, vlen_enc); break;\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1709,1 +1709,1 @@\n-  void evrold(BasicType type, XMMRegister dst, KRegister mask, int shift, XMMRegister src, bool merge, int vlen_enc);\n+  void evrold(BasicType type, XMMRegister dst, KRegister mask, XMMRegister src, int shift, bool merge, int vlen_enc);\n@@ -1711,1 +1711,1 @@\n-  void evrord(BasicType type, XMMRegister dst, KRegister mask, int shift, XMMRegister src, bool merge, int vlen_enc);\n+  void evrord(BasicType type, XMMRegister dst, KRegister mask, XMMRegister src, int shift, bool merge, int vlen_enc);\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1933,0 +1933,2 @@\n+    case Op_RotateRightV:\n+    case Op_RotateLeftV:\n@@ -7182,1 +7184,1 @@\n-  predicate(!VM_Version::supports_avx512vl() &&\n+  predicate(n->bottom_type()->isa_vectmask() == NULL &&\n@@ -7201,2 +7203,1 @@\n-  predicate(!VM_Version::supports_avx512vl() &&\n-            Matcher::vector_length_in_bytes(n->in(1)->in(1)) == 64 && \/\/ src1\n+  predicate(Matcher::vector_length_in_bytes(n->in(1)->in(1)) == 64 && \/\/ src1\n@@ -7243,1 +7244,1 @@\n-  predicate(!VM_Version::supports_avx512vl() &&\n+  predicate(n->bottom_type()->isa_vectmask() == NULL &&\n@@ -7261,1 +7262,1 @@\n-  predicate((UseAVX == 2 || !VM_Version::supports_avx512vl()) &&\n+  predicate(n->bottom_type()->isa_vectmask() == NULL &&\n@@ -7280,1 +7281,1 @@\n-  predicate((UseAVX == 2 || !VM_Version::supports_avx512vl()) &&\n+  predicate(n->bottom_type()->isa_vectmask() == NULL &&\n@@ -7298,3 +7299,1 @@\n-  predicate(UseAVX > 2 &&\n-            (!VM_Version::supports_avx512vl() &&\n-             n->bottom_type()->isa_vectmask() == NULL &&\n+  predicate((n->bottom_type()->isa_vectmask() == NULL &&\n@@ -7335,2 +7334,1 @@\n-  predicate(UseAVX > 2 &&\n-            n->bottom_type()->isa_vectmask() && \/\/ src1\n+  predicate(n->bottom_type()->isa_vectmask() &&\n@@ -8738,1 +8736,1 @@\n-  format %{ \"vpadd_masked $dst, $dst, $src2\\t! add masked operation\" %}\n+  format %{ \"vpadd_masked $dst, $dst, $src2, $mask\\t! add masked operation\" %}\n@@ -8756,1 +8754,1 @@\n-  format %{ \"vpadd_masked $dst, $dst, $src2\\t! add masked operation\" %}\n+  format %{ \"vpadd_masked $dst, $dst, $src2, $mask\\t! add masked operation\" %}\n@@ -8769,1 +8767,1 @@\n-  format %{ \"vxor_masked $dst, $dst, $src2\\t! xor masked operation\" %}\n+  format %{ \"vxor_masked $dst, $dst, $src2, $mask\\t! xor masked operation\" %}\n@@ -8782,1 +8780,1 @@\n-  format %{ \"vxor_masked $dst, $dst, $src2\\t! xor masked operation\" %}\n+  format %{ \"vxor_masked $dst, $dst, $src2, $mask\\t! xor masked operation\" %}\n@@ -8795,1 +8793,1 @@\n-  format %{ \"vor_masked $dst, $dst, $src2\\t! or masked operation\" %}\n+  format %{ \"vor_masked $dst, $dst, $src2, $mask\\t! or masked operation\" %}\n@@ -8808,1 +8806,1 @@\n-  format %{ \"vor_masked $dst, $dst, $src2\\t! or masked operation\" %}\n+  format %{ \"vor_masked $dst, $dst, $src2, $mask\\t! or masked operation\" %}\n@@ -8821,1 +8819,1 @@\n-  format %{ \"vand_masked $dst, $dst, $src2\\t! and masked operation\" %}\n+  format %{ \"vand_masked $dst, $dst, $src2, $mask\\t! and masked operation\" %}\n@@ -8834,1 +8832,1 @@\n-  format %{ \"vand_masked $dst, $dst, $src2\\t! and masked operation\" %}\n+  format %{ \"vand_masked $dst, $dst, $src2, $mask\\t! and masked operation\" %}\n@@ -8852,1 +8850,1 @@\n-  format %{ \"vpsub_masked $dst, $dst, $src2\\t! sub masked operation\" %}\n+  format %{ \"vpsub_masked $dst, $dst, $src2, $mask\\t! sub masked operation\" %}\n@@ -8870,1 +8868,1 @@\n-  format %{ \"vpsub_masked $dst, $dst, $src2\\t! sub masked operation\" %}\n+  format %{ \"vpsub_masked $dst, $dst, $src2, $mask\\t! sub masked operation\" %}\n@@ -8887,1 +8885,1 @@\n-  format %{ \"vpmul_masked $dst, $dst, $src2\\t! mul masked operation\" %}\n+  format %{ \"vpmul_masked $dst, $dst, $src2, $mask\\t! mul masked operation\" %}\n@@ -8904,1 +8902,1 @@\n-  format %{ \"vpmul_masked $dst, $dst, $src2\\t! mul masked operation\" %}\n+  format %{ \"vpmul_masked $dst, $dst, $src2, $mask\\t! mul masked operation\" %}\n@@ -8949,1 +8947,1 @@\n-  format %{ \"vpdiv_masked $dst, $dst, $src2\\t! div masked operation\" %}\n+  format %{ \"vpdiv_masked $dst, $dst, $src2, $mask\\t! div masked operation\" %}\n@@ -8963,1 +8961,1 @@\n-  format %{ \"vpdiv_masked $dst, $dst, $src2\\t! div masked operation\" %}\n+  format %{ \"vpdiv_masked $dst, $dst, $src2, $mask\\t! div masked operation\" %}\n@@ -8977,1 +8975,1 @@\n-  format %{ \"vprotate_imm_masked $dst, $dst, $shift\\t! rotate masked operation\" %}\n+  format %{ \"vprotate_imm_masked $dst, $dst, $shift, $mask\\t! rotate masked operation\" %}\n@@ -8991,1 +8989,1 @@\n-  format %{ \"vrotate_masked $dst, $dst, $src2\\t! rotate masked operation\" %}\n+  format %{ \"vrotate_masked $dst, $dst, $src2, $mask\\t! rotate masked operation\" %}\n@@ -8996,1 +8994,0 @@\n-    bool is_varshift = !VectorNode::is_vshift_cnt_opcode(in(2)->isa_Mach()->ideal_Opcode());\n@@ -8998,1 +8995,1 @@\n-                   $dst$$XMMRegister, $src2$$XMMRegister, true, vlen_enc, is_varshift);\n+                   $dst$$XMMRegister, $src2$$XMMRegister, true, vlen_enc);\n@@ -9007,1 +9004,1 @@\n-  format %{ \"vplshift_imm_masked $dst, $dst, $shift\\t! lshift masked operation\" %}\n+  format %{ \"vplshift_imm_masked $dst, $dst, $shift, $mask\\t! lshift masked operation\" %}\n@@ -9022,1 +9019,1 @@\n-  format %{ \"vplshift_masked $dst, $dst, $src2\\t! lshift masked operation\" %}\n+  format %{ \"vplshift_masked $dst, $dst, $src2, $mask\\t! lshift masked operation\" %}\n@@ -9038,1 +9035,1 @@\n-  format %{ \"vplshift_masked $dst, $dst, $src2\\t! lshift masked operation\" %}\n+  format %{ \"vplshift_masked $dst, $dst, $src2, $mask\\t! lshift masked operation\" %}\n@@ -9053,1 +9050,1 @@\n-  format %{ \"vprshift_imm_masked $dst, $dst, $shift\\t! rshift masked operation\" %}\n+  format %{ \"vprshift_imm_masked $dst, $dst, $shift, $mask\\t! rshift masked operation\" %}\n@@ -9068,1 +9065,1 @@\n-  format %{ \"vprshift_masked $dst, $dst, $src2\\t! rshift masked operation\" %}\n+  format %{ \"vprshift_masked $dst, $dst, $src2, $mask\\t! rshift masked operation\" %}\n@@ -9084,1 +9081,1 @@\n-  format %{ \"vprshift_masked $dst, $dst, $src2\\t! rshift masked operation\" %}\n+  format %{ \"vprshift_masked $dst, $dst, $src2, $mask\\t! rshift masked operation\" %}\n@@ -9099,1 +9096,1 @@\n-  format %{ \"vpurshift_imm_masked $dst, $dst, $shift\\t! urshift masked operation\" %}\n+  format %{ \"vpurshift_imm_masked $dst, $dst, $shift, $mask\\t! urshift masked operation\" %}\n@@ -9114,1 +9111,1 @@\n-  format %{ \"vpurshift_masked $dst, $dst, $src2\\t! urshift masked operation\" %}\n+  format %{ \"vpurshift_masked $dst, $dst, $src2, $mask\\t! urshift masked operation\" %}\n@@ -9130,1 +9127,1 @@\n-  format %{ \"vpurshift_masked $dst, $dst, $src2\\t! urshift masked operation\" %}\n+  format %{ \"vpurshift_masked $dst, $dst, $src2, $mask\\t! urshift masked operation\" %}\n@@ -9143,1 +9140,1 @@\n-  format %{ \"vpmax_masked $dst, $dst, $src2\\t! max masked operation\" %}\n+  format %{ \"vpmax_masked $dst, $dst, $src2, $mask\\t! max masked operation\" %}\n@@ -9156,1 +9153,1 @@\n-  format %{ \"vpmax_masked $dst, $dst, $src2\\t! max masked operation\" %}\n+  format %{ \"vpmax_masked $dst, $dst, $src2, $mask\\t! max masked operation\" %}\n@@ -9169,1 +9166,1 @@\n-  format %{ \"vpmin_masked $dst, $dst, $src2\\t! min masked operation\" %}\n+  format %{ \"vpmin_masked $dst, $dst, $src2, $mask\\t! min masked operation\" %}\n@@ -9182,1 +9179,1 @@\n-  format %{ \"vpmin_masked $dst, $dst, $src2\\t! min masked operation\" %}\n+  format %{ \"vpmin_masked $dst, $dst, $src2, $mask\\t! min masked operation\" %}\n@@ -9195,1 +9192,1 @@\n-  format %{ \"vprearrange_masked $dst, $dst, $src2\\t! rearrange masked operation\" %}\n+  format %{ \"vprearrange_masked $dst, $dst, $src2, $mask\\t! rearrange masked operation\" %}\n@@ -9254,1 +9251,1 @@\n-  format %{ \"vcmp_masked $dst,$src1,$src2,$cond\\t! using $scratch as TEMP\" %}\n+  format %{ \"vcmp_masked $dst, $src1, $src2, $cond, $mask\\t! using $scratch as TEMP\" %}\n@@ -9305,2 +9302,2 @@\n-  effect(TEMP_DEF dst, TEMP tmp);\n-  format %{ \"mask_all_evexI $dst, $cnt \\t! mask all operation\" %}\n+  effect(TEMP tmp);\n+  format %{ \"mask_all_evexI $dst, $cnt \\t! using $tmp as TEMP\" %}\n@@ -9325,2 +9322,2 @@\n-  effect(TEMP_DEF dst, TEMP tmp);\n-  format %{ \"mask_all_evexI $dst, $src \\t! mask all operation\" %}\n+  effect(TEMP tmp);\n+  format %{ \"mask_all_evexI $dst, $src \\t! using $tmp as TEMP\" %}\n@@ -9364,1 +9361,1 @@\n-  format %{ \"mask_not_LT8 $dst, $src, $cnt \\t! mask not operation\" %}\n+  format %{ \"mask_not_LT8 $dst, $src, $cnt \\t!using $ktmp and $rtmp as TEMP\" %}\n@@ -9391,1 +9388,1 @@\n-  format %{ \"mask_opers_evex $dst, $src1, $src2\\t!\" %}\n+  format %{ \"mask_opers_evex $dst, $src1, $src2\\t! using $kscratch as TEMP\" %}\n@@ -9397,1 +9394,1 @@\n-    masklen = masklen < 16 && !VM_Version::supports_avx512dq() ? 16 : masklen;\n+    masklen = (masklen < 16 && !VM_Version::supports_avx512dq()) ? 16 : masklen;\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":48,"deletions":51,"binary":false,"changes":99,"status":"modified"}]}