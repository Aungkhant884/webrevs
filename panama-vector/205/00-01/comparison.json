{"files":[{"patch":"@@ -648,2 +648,2 @@\n-        \/\/ Let the assert condition true for Halffloat\n-        assert(s.laneType == laneType) || laneType.switchKey == LaneType.SK_HALFFLOAT  : s + \"!=\" + laneType;\n+        \/\/ FIXME: Let the assert condition true for Halffloat as laneType is short for Halffloat.\n+        assert(s.laneType == laneType) || laneType.switchKey == LaneType.SK_HALFFLOAT : s + \"!=\" + laneType;\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/AbstractSpecies.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1306,4 +1306,4 @@\n-   static boolean eq(short a, short b) {\n-       Halffloat at = Halffloat.valueOf(a);\n-       Halffloat bt = Halffloat.valueOf(b);\n-       return at.floatValue() == bt.floatValue();\n+    static boolean eq(short a, short b) {\n+        Halffloat at = Halffloat.valueOf(a);\n+        Halffloat bt = Halffloat.valueOf(b);\n+        return at.floatValue() == bt.floatValue();\n@@ -1313,3 +1313,3 @@\n-       Halffloat at = Halffloat.valueOf(a);\n-       Halffloat bt = Halffloat.valueOf(b);\n-       return at.floatValue() != bt.floatValue();\n+        Halffloat at = Halffloat.valueOf(a);\n+        Halffloat bt = Halffloat.valueOf(b);\n+        return at.floatValue() != bt.floatValue();\n@@ -1319,3 +1319,3 @@\n-       Halffloat at = Halffloat.valueOf(a);\n-       Halffloat bt = Halffloat.valueOf(b);\n-       return at.floatValue() < bt.floatValue();\n+        Halffloat at = Halffloat.valueOf(a);\n+        Halffloat bt = Halffloat.valueOf(b);\n+        return at.floatValue() < bt.floatValue();\n@@ -1325,3 +1325,3 @@\n-       Halffloat at = Halffloat.valueOf(a);\n-       Halffloat bt = Halffloat.valueOf(b);\n-       return at.floatValue() <= bt.floatValue();\n+        Halffloat at = Halffloat.valueOf(a);\n+        Halffloat bt = Halffloat.valueOf(b);\n+        return at.floatValue() <= bt.floatValue();\n@@ -1331,3 +1331,3 @@\n-       Halffloat at = Halffloat.valueOf(a);\n-       Halffloat bt = Halffloat.valueOf(b);\n-       return at.floatValue() > bt.floatValue();\n+        Halffloat at = Halffloat.valueOf(a);\n+        Halffloat bt = Halffloat.valueOf(b);\n+        return at.floatValue() > bt.floatValue();\n@@ -1337,3 +1337,3 @@\n-       Halffloat at = Halffloat.valueOf(a);\n-       Halffloat bt = Halffloat.valueOf(b);\n-       return at.floatValue() >= bt.floatValue();\n+        Halffloat at = Halffloat.valueOf(a);\n+        Halffloat bt = Halffloat.valueOf(b);\n+        return at.floatValue() >= bt.floatValue();\n@@ -1553,0 +1553,178 @@\n+    static short ABS(short a) {\n+        return (short)(Math.abs(a));\n+    }\n+\n+    static short abs(short a) {\n+        return (short)(Math.abs(a));\n+    }\n+\n+    @Test(dataProvider = \"shortUnaryOpProvider\")\n+    static void ABSHalffloat128VectorTests(IntFunction<short[]> fa) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                HalffloatVector av = HalffloatVector.fromArray(SPECIES, a, i);\n+                av.lanewise(VectorOperators.ABS).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, Halffloat128VectorTests::ABS);\n+    }\n+\n+    @Test(dataProvider = \"shortUnaryOpProvider\")\n+    static void absHalffloat128VectorTests(IntFunction<short[]> fa) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                HalffloatVector av = HalffloatVector.fromArray(SPECIES, a, i);\n+                av.abs().intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, Halffloat128VectorTests::abs);\n+    }\n+\n+    @Test(dataProvider = \"shortUnaryOpMaskProvider\")\n+    static void ABSMaskedHalffloat128VectorTests(IntFunction<short[]> fa,\n+                                                IntFunction<boolean[]> fm) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Halffloat> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                HalffloatVector av = HalffloatVector.fromArray(SPECIES, a, i);\n+                av.lanewise(VectorOperators.ABS, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, mask, Halffloat128VectorTests::ABS);\n+    }\n+\n+    static short NEG(short a) {\n+        return (short)(-a);\n+    }\n+\n+    static short neg(short a) {\n+        return (short)(-a);\n+    }\n+\n+    @Test(dataProvider = \"shortUnaryOpProvider\")\n+    static void NEGHalffloat128VectorTests(IntFunction<short[]> fa) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                HalffloatVector av = HalffloatVector.fromArray(SPECIES, a, i);\n+                av.lanewise(VectorOperators.NEG).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, Halffloat128VectorTests::NEG);\n+    }\n+\n+    @Test(dataProvider = \"shortUnaryOpProvider\")\n+    static void negHalffloat128VectorTests(IntFunction<short[]> fa) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                HalffloatVector av = HalffloatVector.fromArray(SPECIES, a, i);\n+                av.neg().intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, Halffloat128VectorTests::neg);\n+    }\n+\n+    @Test(dataProvider = \"shortUnaryOpMaskProvider\")\n+    static void NEGMaskedHalffloat128VectorTests(IntFunction<short[]> fa,\n+                                                IntFunction<boolean[]> fm) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Halffloat> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                HalffloatVector av = HalffloatVector.fromArray(SPECIES, a, i);\n+                av.lanewise(VectorOperators.NEG, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, mask, Halffloat128VectorTests::NEG);\n+    }\n+\n+    static short FMA(short a, short b, short c) {\n+        return (short)(Halffloat.valueOf(Math.fma(Halffloat.valueOf(a).floatValue(), Halffloat.valueOf(b).floatValue(), Halffloat.valueOf(c).floatValue())));\n+    }\n+\n+    static short fma(short a, short b, short c) {\n+        return (short)(Halffloat.valueOf(Math.fma(Halffloat.valueOf(a).floatValue(), Halffloat.valueOf(b).floatValue(), Halffloat.valueOf(c).floatValue())));\n+    }\n+\n+    @Test(dataProvider = \"shortTernaryOpProvider\")\n+    static void FMAHalffloat128VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb, IntFunction<short[]> fc) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] b = fb.apply(SPECIES.length());\n+        short[] c = fc.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                HalffloatVector av = HalffloatVector.fromArray(SPECIES, a, i);\n+                HalffloatVector bv = HalffloatVector.fromArray(SPECIES, b, i);\n+                HalffloatVector cv = HalffloatVector.fromArray(SPECIES, c, i);\n+                av.lanewise(VectorOperators.FMA, bv, cv).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, c, Halffloat128VectorTests::FMA);\n+    }\n+\n+    @Test(dataProvider = \"shortTernaryOpProvider\")\n+    static void fmaHalffloat128VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb, IntFunction<short[]> fc) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] b = fb.apply(SPECIES.length());\n+        short[] c = fc.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            HalffloatVector av = HalffloatVector.fromArray(SPECIES, a, i);\n+            HalffloatVector bv = HalffloatVector.fromArray(SPECIES, b, i);\n+            HalffloatVector cv = HalffloatVector.fromArray(SPECIES, c, i);\n+            av.fma(bv, cv).intoArray(r, i);\n+        }\n+\n+        assertArraysEquals(r, a, b, c, Halffloat128VectorTests::fma);\n+    }\n+\n+    @Test(dataProvider = \"shortTernaryOpMaskProvider\")\n+    static void FMAHalffloat128VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+                                          IntFunction<short[]> fc, IntFunction<boolean[]> fm) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] b = fb.apply(SPECIES.length());\n+        short[] c = fc.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Halffloat> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                HalffloatVector av = HalffloatVector.fromArray(SPECIES, a, i);\n+                HalffloatVector bv = HalffloatVector.fromArray(SPECIES, b, i);\n+                HalffloatVector cv = HalffloatVector.fromArray(SPECIES, c, i);\n+                av.lanewise(VectorOperators.FMA, bv, cv, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, c, mask, Halffloat128VectorTests::FMA);\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Halffloat128VectorTests.java","additions":197,"deletions":19,"binary":false,"changes":216,"status":"modified"},{"patch":"@@ -1306,4 +1306,4 @@\n-   static boolean eq(short a, short b) {\n-       Halffloat at = Halffloat.valueOf(a);\n-       Halffloat bt = Halffloat.valueOf(b);\n-       return at.floatValue() == bt.floatValue();\n+    static boolean eq(short a, short b) {\n+        Halffloat at = Halffloat.valueOf(a);\n+        Halffloat bt = Halffloat.valueOf(b);\n+        return at.floatValue() == bt.floatValue();\n@@ -1313,3 +1313,3 @@\n-       Halffloat at = Halffloat.valueOf(a);\n-       Halffloat bt = Halffloat.valueOf(b);\n-       return at.floatValue() != bt.floatValue();\n+        Halffloat at = Halffloat.valueOf(a);\n+        Halffloat bt = Halffloat.valueOf(b);\n+        return at.floatValue() != bt.floatValue();\n@@ -1319,3 +1319,3 @@\n-       Halffloat at = Halffloat.valueOf(a);\n-       Halffloat bt = Halffloat.valueOf(b);\n-       return at.floatValue() < bt.floatValue();\n+        Halffloat at = Halffloat.valueOf(a);\n+        Halffloat bt = Halffloat.valueOf(b);\n+        return at.floatValue() < bt.floatValue();\n@@ -1325,3 +1325,3 @@\n-       Halffloat at = Halffloat.valueOf(a);\n-       Halffloat bt = Halffloat.valueOf(b);\n-       return at.floatValue() <= bt.floatValue();\n+        Halffloat at = Halffloat.valueOf(a);\n+        Halffloat bt = Halffloat.valueOf(b);\n+        return at.floatValue() <= bt.floatValue();\n@@ -1331,3 +1331,3 @@\n-       Halffloat at = Halffloat.valueOf(a);\n-       Halffloat bt = Halffloat.valueOf(b);\n-       return at.floatValue() > bt.floatValue();\n+        Halffloat at = Halffloat.valueOf(a);\n+        Halffloat bt = Halffloat.valueOf(b);\n+        return at.floatValue() > bt.floatValue();\n@@ -1337,3 +1337,3 @@\n-       Halffloat at = Halffloat.valueOf(a);\n-       Halffloat bt = Halffloat.valueOf(b);\n-       return at.floatValue() >= bt.floatValue();\n+        Halffloat at = Halffloat.valueOf(a);\n+        Halffloat bt = Halffloat.valueOf(b);\n+        return at.floatValue() >= bt.floatValue();\n@@ -1553,0 +1553,178 @@\n+    static short ABS(short a) {\n+        return (short)(Math.abs(a));\n+    }\n+\n+    static short abs(short a) {\n+        return (short)(Math.abs(a));\n+    }\n+\n+    @Test(dataProvider = \"shortUnaryOpProvider\")\n+    static void ABSHalffloat256VectorTests(IntFunction<short[]> fa) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                HalffloatVector av = HalffloatVector.fromArray(SPECIES, a, i);\n+                av.lanewise(VectorOperators.ABS).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, Halffloat256VectorTests::ABS);\n+    }\n+\n+    @Test(dataProvider = \"shortUnaryOpProvider\")\n+    static void absHalffloat256VectorTests(IntFunction<short[]> fa) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                HalffloatVector av = HalffloatVector.fromArray(SPECIES, a, i);\n+                av.abs().intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, Halffloat256VectorTests::abs);\n+    }\n+\n+    @Test(dataProvider = \"shortUnaryOpMaskProvider\")\n+    static void ABSMaskedHalffloat256VectorTests(IntFunction<short[]> fa,\n+                                                IntFunction<boolean[]> fm) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Halffloat> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                HalffloatVector av = HalffloatVector.fromArray(SPECIES, a, i);\n+                av.lanewise(VectorOperators.ABS, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, mask, Halffloat256VectorTests::ABS);\n+    }\n+\n+    static short NEG(short a) {\n+        return (short)(-a);\n+    }\n+\n+    static short neg(short a) {\n+        return (short)(-a);\n+    }\n+\n+    @Test(dataProvider = \"shortUnaryOpProvider\")\n+    static void NEGHalffloat256VectorTests(IntFunction<short[]> fa) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                HalffloatVector av = HalffloatVector.fromArray(SPECIES, a, i);\n+                av.lanewise(VectorOperators.NEG).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, Halffloat256VectorTests::NEG);\n+    }\n+\n+    @Test(dataProvider = \"shortUnaryOpProvider\")\n+    static void negHalffloat256VectorTests(IntFunction<short[]> fa) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                HalffloatVector av = HalffloatVector.fromArray(SPECIES, a, i);\n+                av.neg().intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, Halffloat256VectorTests::neg);\n+    }\n+\n+    @Test(dataProvider = \"shortUnaryOpMaskProvider\")\n+    static void NEGMaskedHalffloat256VectorTests(IntFunction<short[]> fa,\n+                                                IntFunction<boolean[]> fm) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Halffloat> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                HalffloatVector av = HalffloatVector.fromArray(SPECIES, a, i);\n+                av.lanewise(VectorOperators.NEG, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, mask, Halffloat256VectorTests::NEG);\n+    }\n+\n+    static short FMA(short a, short b, short c) {\n+        return (short)(Halffloat.valueOf(Math.fma(Halffloat.valueOf(a).floatValue(), Halffloat.valueOf(b).floatValue(), Halffloat.valueOf(c).floatValue())));\n+    }\n+\n+    static short fma(short a, short b, short c) {\n+        return (short)(Halffloat.valueOf(Math.fma(Halffloat.valueOf(a).floatValue(), Halffloat.valueOf(b).floatValue(), Halffloat.valueOf(c).floatValue())));\n+    }\n+\n+    @Test(dataProvider = \"shortTernaryOpProvider\")\n+    static void FMAHalffloat256VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb, IntFunction<short[]> fc) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] b = fb.apply(SPECIES.length());\n+        short[] c = fc.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                HalffloatVector av = HalffloatVector.fromArray(SPECIES, a, i);\n+                HalffloatVector bv = HalffloatVector.fromArray(SPECIES, b, i);\n+                HalffloatVector cv = HalffloatVector.fromArray(SPECIES, c, i);\n+                av.lanewise(VectorOperators.FMA, bv, cv).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, c, Halffloat256VectorTests::FMA);\n+    }\n+\n+    @Test(dataProvider = \"shortTernaryOpProvider\")\n+    static void fmaHalffloat256VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb, IntFunction<short[]> fc) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] b = fb.apply(SPECIES.length());\n+        short[] c = fc.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            HalffloatVector av = HalffloatVector.fromArray(SPECIES, a, i);\n+            HalffloatVector bv = HalffloatVector.fromArray(SPECIES, b, i);\n+            HalffloatVector cv = HalffloatVector.fromArray(SPECIES, c, i);\n+            av.fma(bv, cv).intoArray(r, i);\n+        }\n+\n+        assertArraysEquals(r, a, b, c, Halffloat256VectorTests::fma);\n+    }\n+\n+    @Test(dataProvider = \"shortTernaryOpMaskProvider\")\n+    static void FMAHalffloat256VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+                                          IntFunction<short[]> fc, IntFunction<boolean[]> fm) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] b = fb.apply(SPECIES.length());\n+        short[] c = fc.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Halffloat> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                HalffloatVector av = HalffloatVector.fromArray(SPECIES, a, i);\n+                HalffloatVector bv = HalffloatVector.fromArray(SPECIES, b, i);\n+                HalffloatVector cv = HalffloatVector.fromArray(SPECIES, c, i);\n+                av.lanewise(VectorOperators.FMA, bv, cv, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, c, mask, Halffloat256VectorTests::FMA);\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Halffloat256VectorTests.java","additions":197,"deletions":19,"binary":false,"changes":216,"status":"modified"},{"patch":"@@ -1306,4 +1306,4 @@\n-   static boolean eq(short a, short b) {\n-       Halffloat at = Halffloat.valueOf(a);\n-       Halffloat bt = Halffloat.valueOf(b);\n-       return at.floatValue() == bt.floatValue();\n+    static boolean eq(short a, short b) {\n+        Halffloat at = Halffloat.valueOf(a);\n+        Halffloat bt = Halffloat.valueOf(b);\n+        return at.floatValue() == bt.floatValue();\n@@ -1313,3 +1313,3 @@\n-       Halffloat at = Halffloat.valueOf(a);\n-       Halffloat bt = Halffloat.valueOf(b);\n-       return at.floatValue() != bt.floatValue();\n+        Halffloat at = Halffloat.valueOf(a);\n+        Halffloat bt = Halffloat.valueOf(b);\n+        return at.floatValue() != bt.floatValue();\n@@ -1319,3 +1319,3 @@\n-       Halffloat at = Halffloat.valueOf(a);\n-       Halffloat bt = Halffloat.valueOf(b);\n-       return at.floatValue() < bt.floatValue();\n+        Halffloat at = Halffloat.valueOf(a);\n+        Halffloat bt = Halffloat.valueOf(b);\n+        return at.floatValue() < bt.floatValue();\n@@ -1325,3 +1325,3 @@\n-       Halffloat at = Halffloat.valueOf(a);\n-       Halffloat bt = Halffloat.valueOf(b);\n-       return at.floatValue() <= bt.floatValue();\n+        Halffloat at = Halffloat.valueOf(a);\n+        Halffloat bt = Halffloat.valueOf(b);\n+        return at.floatValue() <= bt.floatValue();\n@@ -1331,3 +1331,3 @@\n-       Halffloat at = Halffloat.valueOf(a);\n-       Halffloat bt = Halffloat.valueOf(b);\n-       return at.floatValue() > bt.floatValue();\n+        Halffloat at = Halffloat.valueOf(a);\n+        Halffloat bt = Halffloat.valueOf(b);\n+        return at.floatValue() > bt.floatValue();\n@@ -1337,3 +1337,3 @@\n-       Halffloat at = Halffloat.valueOf(a);\n-       Halffloat bt = Halffloat.valueOf(b);\n-       return at.floatValue() >= bt.floatValue();\n+        Halffloat at = Halffloat.valueOf(a);\n+        Halffloat bt = Halffloat.valueOf(b);\n+        return at.floatValue() >= bt.floatValue();\n@@ -1553,0 +1553,178 @@\n+    static short ABS(short a) {\n+        return (short)(Math.abs(a));\n+    }\n+\n+    static short abs(short a) {\n+        return (short)(Math.abs(a));\n+    }\n+\n+    @Test(dataProvider = \"shortUnaryOpProvider\")\n+    static void ABSHalffloat512VectorTests(IntFunction<short[]> fa) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                HalffloatVector av = HalffloatVector.fromArray(SPECIES, a, i);\n+                av.lanewise(VectorOperators.ABS).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, Halffloat512VectorTests::ABS);\n+    }\n+\n+    @Test(dataProvider = \"shortUnaryOpProvider\")\n+    static void absHalffloat512VectorTests(IntFunction<short[]> fa) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                HalffloatVector av = HalffloatVector.fromArray(SPECIES, a, i);\n+                av.abs().intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, Halffloat512VectorTests::abs);\n+    }\n+\n+    @Test(dataProvider = \"shortUnaryOpMaskProvider\")\n+    static void ABSMaskedHalffloat512VectorTests(IntFunction<short[]> fa,\n+                                                IntFunction<boolean[]> fm) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Halffloat> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                HalffloatVector av = HalffloatVector.fromArray(SPECIES, a, i);\n+                av.lanewise(VectorOperators.ABS, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, mask, Halffloat512VectorTests::ABS);\n+    }\n+\n+    static short NEG(short a) {\n+        return (short)(-a);\n+    }\n+\n+    static short neg(short a) {\n+        return (short)(-a);\n+    }\n+\n+    @Test(dataProvider = \"shortUnaryOpProvider\")\n+    static void NEGHalffloat512VectorTests(IntFunction<short[]> fa) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                HalffloatVector av = HalffloatVector.fromArray(SPECIES, a, i);\n+                av.lanewise(VectorOperators.NEG).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, Halffloat512VectorTests::NEG);\n+    }\n+\n+    @Test(dataProvider = \"shortUnaryOpProvider\")\n+    static void negHalffloat512VectorTests(IntFunction<short[]> fa) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                HalffloatVector av = HalffloatVector.fromArray(SPECIES, a, i);\n+                av.neg().intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, Halffloat512VectorTests::neg);\n+    }\n+\n+    @Test(dataProvider = \"shortUnaryOpMaskProvider\")\n+    static void NEGMaskedHalffloat512VectorTests(IntFunction<short[]> fa,\n+                                                IntFunction<boolean[]> fm) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Halffloat> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                HalffloatVector av = HalffloatVector.fromArray(SPECIES, a, i);\n+                av.lanewise(VectorOperators.NEG, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, mask, Halffloat512VectorTests::NEG);\n+    }\n+\n+    static short FMA(short a, short b, short c) {\n+        return (short)(Halffloat.valueOf(Math.fma(Halffloat.valueOf(a).floatValue(), Halffloat.valueOf(b).floatValue(), Halffloat.valueOf(c).floatValue())));\n+    }\n+\n+    static short fma(short a, short b, short c) {\n+        return (short)(Halffloat.valueOf(Math.fma(Halffloat.valueOf(a).floatValue(), Halffloat.valueOf(b).floatValue(), Halffloat.valueOf(c).floatValue())));\n+    }\n+\n+    @Test(dataProvider = \"shortTernaryOpProvider\")\n+    static void FMAHalffloat512VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb, IntFunction<short[]> fc) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] b = fb.apply(SPECIES.length());\n+        short[] c = fc.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                HalffloatVector av = HalffloatVector.fromArray(SPECIES, a, i);\n+                HalffloatVector bv = HalffloatVector.fromArray(SPECIES, b, i);\n+                HalffloatVector cv = HalffloatVector.fromArray(SPECIES, c, i);\n+                av.lanewise(VectorOperators.FMA, bv, cv).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, c, Halffloat512VectorTests::FMA);\n+    }\n+\n+    @Test(dataProvider = \"shortTernaryOpProvider\")\n+    static void fmaHalffloat512VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb, IntFunction<short[]> fc) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] b = fb.apply(SPECIES.length());\n+        short[] c = fc.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            HalffloatVector av = HalffloatVector.fromArray(SPECIES, a, i);\n+            HalffloatVector bv = HalffloatVector.fromArray(SPECIES, b, i);\n+            HalffloatVector cv = HalffloatVector.fromArray(SPECIES, c, i);\n+            av.fma(bv, cv).intoArray(r, i);\n+        }\n+\n+        assertArraysEquals(r, a, b, c, Halffloat512VectorTests::fma);\n+    }\n+\n+    @Test(dataProvider = \"shortTernaryOpMaskProvider\")\n+    static void FMAHalffloat512VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+                                          IntFunction<short[]> fc, IntFunction<boolean[]> fm) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] b = fb.apply(SPECIES.length());\n+        short[] c = fc.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Halffloat> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                HalffloatVector av = HalffloatVector.fromArray(SPECIES, a, i);\n+                HalffloatVector bv = HalffloatVector.fromArray(SPECIES, b, i);\n+                HalffloatVector cv = HalffloatVector.fromArray(SPECIES, c, i);\n+                av.lanewise(VectorOperators.FMA, bv, cv, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, c, mask, Halffloat512VectorTests::FMA);\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Halffloat512VectorTests.java","additions":197,"deletions":19,"binary":false,"changes":216,"status":"modified"},{"patch":"@@ -1306,4 +1306,4 @@\n-   static boolean eq(short a, short b) {\n-       Halffloat at = Halffloat.valueOf(a);\n-       Halffloat bt = Halffloat.valueOf(b);\n-       return at.floatValue() == bt.floatValue();\n+    static boolean eq(short a, short b) {\n+        Halffloat at = Halffloat.valueOf(a);\n+        Halffloat bt = Halffloat.valueOf(b);\n+        return at.floatValue() == bt.floatValue();\n@@ -1313,3 +1313,3 @@\n-       Halffloat at = Halffloat.valueOf(a);\n-       Halffloat bt = Halffloat.valueOf(b);\n-       return at.floatValue() != bt.floatValue();\n+        Halffloat at = Halffloat.valueOf(a);\n+        Halffloat bt = Halffloat.valueOf(b);\n+        return at.floatValue() != bt.floatValue();\n@@ -1319,3 +1319,3 @@\n-       Halffloat at = Halffloat.valueOf(a);\n-       Halffloat bt = Halffloat.valueOf(b);\n-       return at.floatValue() < bt.floatValue();\n+        Halffloat at = Halffloat.valueOf(a);\n+        Halffloat bt = Halffloat.valueOf(b);\n+        return at.floatValue() < bt.floatValue();\n@@ -1325,3 +1325,3 @@\n-       Halffloat at = Halffloat.valueOf(a);\n-       Halffloat bt = Halffloat.valueOf(b);\n-       return at.floatValue() <= bt.floatValue();\n+        Halffloat at = Halffloat.valueOf(a);\n+        Halffloat bt = Halffloat.valueOf(b);\n+        return at.floatValue() <= bt.floatValue();\n@@ -1331,3 +1331,3 @@\n-       Halffloat at = Halffloat.valueOf(a);\n-       Halffloat bt = Halffloat.valueOf(b);\n-       return at.floatValue() > bt.floatValue();\n+        Halffloat at = Halffloat.valueOf(a);\n+        Halffloat bt = Halffloat.valueOf(b);\n+        return at.floatValue() > bt.floatValue();\n@@ -1337,3 +1337,3 @@\n-       Halffloat at = Halffloat.valueOf(a);\n-       Halffloat bt = Halffloat.valueOf(b);\n-       return at.floatValue() >= bt.floatValue();\n+        Halffloat at = Halffloat.valueOf(a);\n+        Halffloat bt = Halffloat.valueOf(b);\n+        return at.floatValue() >= bt.floatValue();\n@@ -1553,0 +1553,178 @@\n+    static short ABS(short a) {\n+        return (short)(Math.abs(a));\n+    }\n+\n+    static short abs(short a) {\n+        return (short)(Math.abs(a));\n+    }\n+\n+    @Test(dataProvider = \"shortUnaryOpProvider\")\n+    static void ABSHalffloat64VectorTests(IntFunction<short[]> fa) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                HalffloatVector av = HalffloatVector.fromArray(SPECIES, a, i);\n+                av.lanewise(VectorOperators.ABS).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, Halffloat64VectorTests::ABS);\n+    }\n+\n+    @Test(dataProvider = \"shortUnaryOpProvider\")\n+    static void absHalffloat64VectorTests(IntFunction<short[]> fa) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                HalffloatVector av = HalffloatVector.fromArray(SPECIES, a, i);\n+                av.abs().intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, Halffloat64VectorTests::abs);\n+    }\n+\n+    @Test(dataProvider = \"shortUnaryOpMaskProvider\")\n+    static void ABSMaskedHalffloat64VectorTests(IntFunction<short[]> fa,\n+                                                IntFunction<boolean[]> fm) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Halffloat> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                HalffloatVector av = HalffloatVector.fromArray(SPECIES, a, i);\n+                av.lanewise(VectorOperators.ABS, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, mask, Halffloat64VectorTests::ABS);\n+    }\n+\n+    static short NEG(short a) {\n+        return (short)(-a);\n+    }\n+\n+    static short neg(short a) {\n+        return (short)(-a);\n+    }\n+\n+    @Test(dataProvider = \"shortUnaryOpProvider\")\n+    static void NEGHalffloat64VectorTests(IntFunction<short[]> fa) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                HalffloatVector av = HalffloatVector.fromArray(SPECIES, a, i);\n+                av.lanewise(VectorOperators.NEG).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, Halffloat64VectorTests::NEG);\n+    }\n+\n+    @Test(dataProvider = \"shortUnaryOpProvider\")\n+    static void negHalffloat64VectorTests(IntFunction<short[]> fa) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                HalffloatVector av = HalffloatVector.fromArray(SPECIES, a, i);\n+                av.neg().intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, Halffloat64VectorTests::neg);\n+    }\n+\n+    @Test(dataProvider = \"shortUnaryOpMaskProvider\")\n+    static void NEGMaskedHalffloat64VectorTests(IntFunction<short[]> fa,\n+                                                IntFunction<boolean[]> fm) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Halffloat> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                HalffloatVector av = HalffloatVector.fromArray(SPECIES, a, i);\n+                av.lanewise(VectorOperators.NEG, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, mask, Halffloat64VectorTests::NEG);\n+    }\n+\n+    static short FMA(short a, short b, short c) {\n+        return (short)(Halffloat.valueOf(Math.fma(Halffloat.valueOf(a).floatValue(), Halffloat.valueOf(b).floatValue(), Halffloat.valueOf(c).floatValue())));\n+    }\n+\n+    static short fma(short a, short b, short c) {\n+        return (short)(Halffloat.valueOf(Math.fma(Halffloat.valueOf(a).floatValue(), Halffloat.valueOf(b).floatValue(), Halffloat.valueOf(c).floatValue())));\n+    }\n+\n+    @Test(dataProvider = \"shortTernaryOpProvider\")\n+    static void FMAHalffloat64VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb, IntFunction<short[]> fc) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] b = fb.apply(SPECIES.length());\n+        short[] c = fc.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                HalffloatVector av = HalffloatVector.fromArray(SPECIES, a, i);\n+                HalffloatVector bv = HalffloatVector.fromArray(SPECIES, b, i);\n+                HalffloatVector cv = HalffloatVector.fromArray(SPECIES, c, i);\n+                av.lanewise(VectorOperators.FMA, bv, cv).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, c, Halffloat64VectorTests::FMA);\n+    }\n+\n+    @Test(dataProvider = \"shortTernaryOpProvider\")\n+    static void fmaHalffloat64VectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb, IntFunction<short[]> fc) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] b = fb.apply(SPECIES.length());\n+        short[] c = fc.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            HalffloatVector av = HalffloatVector.fromArray(SPECIES, a, i);\n+            HalffloatVector bv = HalffloatVector.fromArray(SPECIES, b, i);\n+            HalffloatVector cv = HalffloatVector.fromArray(SPECIES, c, i);\n+            av.fma(bv, cv).intoArray(r, i);\n+        }\n+\n+        assertArraysEquals(r, a, b, c, Halffloat64VectorTests::fma);\n+    }\n+\n+    @Test(dataProvider = \"shortTernaryOpMaskProvider\")\n+    static void FMAHalffloat64VectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+                                          IntFunction<short[]> fc, IntFunction<boolean[]> fm) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] b = fb.apply(SPECIES.length());\n+        short[] c = fc.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Halffloat> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                HalffloatVector av = HalffloatVector.fromArray(SPECIES, a, i);\n+                HalffloatVector bv = HalffloatVector.fromArray(SPECIES, b, i);\n+                HalffloatVector cv = HalffloatVector.fromArray(SPECIES, c, i);\n+                av.lanewise(VectorOperators.FMA, bv, cv, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, c, mask, Halffloat64VectorTests::FMA);\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Halffloat64VectorTests.java","additions":197,"deletions":19,"binary":false,"changes":216,"status":"modified"},{"patch":"@@ -1311,4 +1311,4 @@\n-   static boolean eq(short a, short b) {\n-       Halffloat at = Halffloat.valueOf(a);\n-       Halffloat bt = Halffloat.valueOf(b);\n-       return at.floatValue() == bt.floatValue();\n+    static boolean eq(short a, short b) {\n+        Halffloat at = Halffloat.valueOf(a);\n+        Halffloat bt = Halffloat.valueOf(b);\n+        return at.floatValue() == bt.floatValue();\n@@ -1318,3 +1318,3 @@\n-       Halffloat at = Halffloat.valueOf(a);\n-       Halffloat bt = Halffloat.valueOf(b);\n-       return at.floatValue() != bt.floatValue();\n+        Halffloat at = Halffloat.valueOf(a);\n+        Halffloat bt = Halffloat.valueOf(b);\n+        return at.floatValue() != bt.floatValue();\n@@ -1324,3 +1324,3 @@\n-       Halffloat at = Halffloat.valueOf(a);\n-       Halffloat bt = Halffloat.valueOf(b);\n-       return at.floatValue() < bt.floatValue();\n+        Halffloat at = Halffloat.valueOf(a);\n+        Halffloat bt = Halffloat.valueOf(b);\n+        return at.floatValue() < bt.floatValue();\n@@ -1330,3 +1330,3 @@\n-       Halffloat at = Halffloat.valueOf(a);\n-       Halffloat bt = Halffloat.valueOf(b);\n-       return at.floatValue() <= bt.floatValue();\n+        Halffloat at = Halffloat.valueOf(a);\n+        Halffloat bt = Halffloat.valueOf(b);\n+        return at.floatValue() <= bt.floatValue();\n@@ -1336,3 +1336,3 @@\n-       Halffloat at = Halffloat.valueOf(a);\n-       Halffloat bt = Halffloat.valueOf(b);\n-       return at.floatValue() > bt.floatValue();\n+        Halffloat at = Halffloat.valueOf(a);\n+        Halffloat bt = Halffloat.valueOf(b);\n+        return at.floatValue() > bt.floatValue();\n@@ -1342,3 +1342,3 @@\n-       Halffloat at = Halffloat.valueOf(a);\n-       Halffloat bt = Halffloat.valueOf(b);\n-       return at.floatValue() >= bt.floatValue();\n+        Halffloat at = Halffloat.valueOf(a);\n+        Halffloat bt = Halffloat.valueOf(b);\n+        return at.floatValue() >= bt.floatValue();\n@@ -1558,0 +1558,178 @@\n+    static short ABS(short a) {\n+        return (short)(Math.abs(a));\n+    }\n+\n+    static short abs(short a) {\n+        return (short)(Math.abs(a));\n+    }\n+\n+    @Test(dataProvider = \"shortUnaryOpProvider\")\n+    static void ABSHalffloatMaxVectorTests(IntFunction<short[]> fa) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                HalffloatVector av = HalffloatVector.fromArray(SPECIES, a, i);\n+                av.lanewise(VectorOperators.ABS).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, HalffloatMaxVectorTests::ABS);\n+    }\n+\n+    @Test(dataProvider = \"shortUnaryOpProvider\")\n+    static void absHalffloatMaxVectorTests(IntFunction<short[]> fa) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                HalffloatVector av = HalffloatVector.fromArray(SPECIES, a, i);\n+                av.abs().intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, HalffloatMaxVectorTests::abs);\n+    }\n+\n+    @Test(dataProvider = \"shortUnaryOpMaskProvider\")\n+    static void ABSMaskedHalffloatMaxVectorTests(IntFunction<short[]> fa,\n+                                                IntFunction<boolean[]> fm) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Halffloat> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                HalffloatVector av = HalffloatVector.fromArray(SPECIES, a, i);\n+                av.lanewise(VectorOperators.ABS, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, mask, HalffloatMaxVectorTests::ABS);\n+    }\n+\n+    static short NEG(short a) {\n+        return (short)(-a);\n+    }\n+\n+    static short neg(short a) {\n+        return (short)(-a);\n+    }\n+\n+    @Test(dataProvider = \"shortUnaryOpProvider\")\n+    static void NEGHalffloatMaxVectorTests(IntFunction<short[]> fa) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                HalffloatVector av = HalffloatVector.fromArray(SPECIES, a, i);\n+                av.lanewise(VectorOperators.NEG).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, HalffloatMaxVectorTests::NEG);\n+    }\n+\n+    @Test(dataProvider = \"shortUnaryOpProvider\")\n+    static void negHalffloatMaxVectorTests(IntFunction<short[]> fa) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                HalffloatVector av = HalffloatVector.fromArray(SPECIES, a, i);\n+                av.neg().intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, HalffloatMaxVectorTests::neg);\n+    }\n+\n+    @Test(dataProvider = \"shortUnaryOpMaskProvider\")\n+    static void NEGMaskedHalffloatMaxVectorTests(IntFunction<short[]> fa,\n+                                                IntFunction<boolean[]> fm) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Halffloat> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                HalffloatVector av = HalffloatVector.fromArray(SPECIES, a, i);\n+                av.lanewise(VectorOperators.NEG, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, mask, HalffloatMaxVectorTests::NEG);\n+    }\n+\n+    static short FMA(short a, short b, short c) {\n+        return (short)(Halffloat.valueOf(Math.fma(Halffloat.valueOf(a).floatValue(), Halffloat.valueOf(b).floatValue(), Halffloat.valueOf(c).floatValue())));\n+    }\n+\n+    static short fma(short a, short b, short c) {\n+        return (short)(Halffloat.valueOf(Math.fma(Halffloat.valueOf(a).floatValue(), Halffloat.valueOf(b).floatValue(), Halffloat.valueOf(c).floatValue())));\n+    }\n+\n+    @Test(dataProvider = \"shortTernaryOpProvider\")\n+    static void FMAHalffloatMaxVectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb, IntFunction<short[]> fc) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] b = fb.apply(SPECIES.length());\n+        short[] c = fc.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                HalffloatVector av = HalffloatVector.fromArray(SPECIES, a, i);\n+                HalffloatVector bv = HalffloatVector.fromArray(SPECIES, b, i);\n+                HalffloatVector cv = HalffloatVector.fromArray(SPECIES, c, i);\n+                av.lanewise(VectorOperators.FMA, bv, cv).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, c, HalffloatMaxVectorTests::FMA);\n+    }\n+\n+    @Test(dataProvider = \"shortTernaryOpProvider\")\n+    static void fmaHalffloatMaxVectorTests(IntFunction<short[]> fa, IntFunction<short[]> fb, IntFunction<short[]> fc) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] b = fb.apply(SPECIES.length());\n+        short[] c = fc.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            HalffloatVector av = HalffloatVector.fromArray(SPECIES, a, i);\n+            HalffloatVector bv = HalffloatVector.fromArray(SPECIES, b, i);\n+            HalffloatVector cv = HalffloatVector.fromArray(SPECIES, c, i);\n+            av.fma(bv, cv).intoArray(r, i);\n+        }\n+\n+        assertArraysEquals(r, a, b, c, HalffloatMaxVectorTests::fma);\n+    }\n+\n+    @Test(dataProvider = \"shortTernaryOpMaskProvider\")\n+    static void FMAHalffloatMaxVectorTestsMasked(IntFunction<short[]> fa, IntFunction<short[]> fb,\n+                                          IntFunction<short[]> fc, IntFunction<boolean[]> fm) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] b = fb.apply(SPECIES.length());\n+        short[] c = fc.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Halffloat> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                HalffloatVector av = HalffloatVector.fromArray(SPECIES, a, i);\n+                HalffloatVector bv = HalffloatVector.fromArray(SPECIES, b, i);\n+                HalffloatVector cv = HalffloatVector.fromArray(SPECIES, c, i);\n+                av.lanewise(VectorOperators.FMA, bv, cv, vmask).intoArray(r, i);\n+            }\n+        }\n+\n+        assertArraysEquals(r, a, b, c, mask, HalffloatMaxVectorTests::FMA);\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/HalffloatMaxVectorTests.java","additions":197,"deletions":19,"binary":false,"changes":216,"status":"modified"},{"patch":"@@ -588,0 +588,3 @@\n+  gen_unary_alu_op \"ABS+abs\" \"Math.abs(a)\" \"Halffloat\"\n+  gen_unary_alu_op \"NEG+neg\" \"-a\" \"Halffloat\"\n+  gen_ternary_alu_op \"FMA+fma\" \"Halffloat.valueOf(Math.fma(Halffloat.valueOf(a).floatValue(), Halffloat.valueOf(b).floatValue(), Halffloat.valueOf(c).floatValue()))\" \"Halffloat\"\n","filename":"test\/jdk\/jdk\/incubator\/vector\/gen-template.sh","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"","filename":"test\/jdk\/jdk\/incubator\/vector\/gen-tests.sh","additions":0,"deletions":0,"binary":false,"changes":0,"status":"modified"},{"patch":"@@ -1563,4 +1563,4 @@\n-   static boolean eq(short a, short b) {\n-       Halffloat at = Halffloat.valueOf(a);\n-       Halffloat bt = Halffloat.valueOf(b);\n-       return at.floatValue() == bt.floatValue();\n+    static boolean eq(short a, short b) {\n+        Halffloat at = Halffloat.valueOf(a);\n+        Halffloat bt = Halffloat.valueOf(b);\n+        return at.floatValue() == bt.floatValue();\n@@ -1570,3 +1570,3 @@\n-       Halffloat at = Halffloat.valueOf(a);\n-       Halffloat bt = Halffloat.valueOf(b);\n-       return at.floatValue() != bt.floatValue();\n+        Halffloat at = Halffloat.valueOf(a);\n+        Halffloat bt = Halffloat.valueOf(b);\n+        return at.floatValue() != bt.floatValue();\n@@ -1576,3 +1576,3 @@\n-       Halffloat at = Halffloat.valueOf(a);\n-       Halffloat bt = Halffloat.valueOf(b);\n-       return at.floatValue() < bt.floatValue();\n+        Halffloat at = Halffloat.valueOf(a);\n+        Halffloat bt = Halffloat.valueOf(b);\n+        return at.floatValue() < bt.floatValue();\n@@ -1582,3 +1582,3 @@\n-       Halffloat at = Halffloat.valueOf(a);\n-       Halffloat bt = Halffloat.valueOf(b);\n-       return at.floatValue() <= bt.floatValue();\n+        Halffloat at = Halffloat.valueOf(a);\n+        Halffloat bt = Halffloat.valueOf(b);\n+        return at.floatValue() <= bt.floatValue();\n@@ -1588,3 +1588,3 @@\n-       Halffloat at = Halffloat.valueOf(a);\n-       Halffloat bt = Halffloat.valueOf(b);\n-       return at.floatValue() > bt.floatValue();\n+        Halffloat at = Halffloat.valueOf(a);\n+        Halffloat bt = Halffloat.valueOf(b);\n+        return at.floatValue() > bt.floatValue();\n@@ -1594,3 +1594,3 @@\n-       Halffloat at = Halffloat.valueOf(a);\n-       Halffloat bt = Halffloat.valueOf(b);\n-       return at.floatValue() >= bt.floatValue();\n+        Halffloat at = Halffloat.valueOf(a);\n+        Halffloat bt = Halffloat.valueOf(b);\n+        return at.floatValue() >= bt.floatValue();\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-header.template","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"}]}