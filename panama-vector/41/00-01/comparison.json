{"files":[{"patch":"@@ -1634,1 +1634,1 @@\n-define(`VECTOR_CAST_I2F_NARROW1', `\n+define(`VECTOR_CAST_X2F_NARROW1', `\n@@ -1653,2 +1653,2 @@\n-VECTOR_CAST_I2F_NARROW1(L, F, scvtf, S, D, dup, S, uzp1)\n-VECTOR_CAST_I2F_NARROW1(D, F, fcvt,  S, D, dup, S, uzp1)\n+VECTOR_CAST_X2F_NARROW1(L, F, scvtf, S, D, dup, S, uzp1)\n+VECTOR_CAST_X2F_NARROW1(D, F, fcvt,  S, D, dup, S, uzp1)\n@@ -1675,1 +1675,1 @@\n-define(`VECTOR_CAST_I2F_EXTEND1', `\n+define(`VECTOR_CAST_X2F_EXTEND1', `\n@@ -1691,3 +1691,3 @@\n-VECTOR_CAST_I2F_EXTEND1(I, D, sunpklo, D, scvtf, D)\n-VECTOR_CAST_I2F_EXTEND1(S, F, sunpklo, S, scvtf, S)\n-VECTOR_CAST_I2F_EXTEND1(F, D, sunpklo, D, fcvt,  S)\n+VECTOR_CAST_X2F_EXTEND1(I, D, sunpklo, D, scvtf, D)\n+VECTOR_CAST_X2F_EXTEND1(S, F, sunpklo, S, scvtf, S)\n+VECTOR_CAST_X2F_EXTEND1(F, D, sunpklo, D, fcvt,  S)\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve_ad.m4","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -3359,1 +3359,1 @@\n-                     int& opc, int& opc2) {\n+                     unsigned& opc, unsigned& opc2) {\n@@ -3395,1 +3395,1 @@\n-    int opc, opc2;                                                      \\\n+    unsigned opc, opc2;                                                 \\\n@@ -3406,0 +3406,2 @@\n+private:\n+\n@@ -3437,0 +3439,1 @@\n+public:\n@@ -3438,10 +3441,9 @@\n-\/\/ SVE floating-point convert precision(predicated)\n-#define INSN(NAME)                                                      \\\n-  void NAME(FloatRegister Zd, SIMD_RegVariant T_dst, PRegister Pg,      \\\n-            FloatRegister Zn, SIMD_RegVariant T_src) {                  \\\n-    starti;                                                             \\\n-    unsigned opc, opc2;                                                 \\\n-    encode_fcvt_T(T_src, T_dst, opc, opc2);                             \\\n-    f(0b01100101, 31, 24), f(opc, 23, 22), f(0b0010, 21, 18);           \\\n-    f(opc2, 17, 16), f(0b101, 15, 13);                                  \\\n-    pgrf(Pg, 10), rf(Zn, 5), rf(Zd, 0);                                 \\\n+\/\/ SVE floating-point convert precision (predicated)\n+  void sve_fcvt(FloatRegister Zd, SIMD_RegVariant T_dst, PRegister Pg,\n+            FloatRegister Zn, SIMD_RegVariant T_src) {\n+    starti;\n+    unsigned opc, opc2;\n+    encode_fcvt_T(T_src, T_dst, opc, opc2);\n+    f(0b01100101, 31, 24), f(opc, 23, 22), f(0b0010, 21, 18);\n+    f(opc2, 17, 16), f(0b101, 15, 13);\n+    pgrf(Pg, 10), rf(Zn, 5), rf(Zd, 0);\n@@ -3450,3 +3452,0 @@\n-  INSN(sve_fcvt);\n-#undef INSN\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":14,"deletions":15,"binary":false,"changes":29,"status":"modified"}]}