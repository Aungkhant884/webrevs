{"files":[{"patch":"@@ -1812,7 +1812,1 @@\n-      }\n-      \/\/ fallthrough\n-    case Op_CompressV:\n-      if (is_subword_type(bt) && !VM_Version::supports_avx512_vbmi2()) {\n-        return false;\n-      }\n-      if (size_in_bits < 512 && !VM_Version::supports_avx512vl()) {\n+      } else if (size_in_bits < 512 && !VM_Version::supports_avx512vl()) {\n@@ -1843,0 +1837,12 @@\n+    case Op_CompressV:\n+    case Op_ExpandV:\n+      if (is_subword_type(bt) && !VM_Version::supports_avx512_vbmi2()) {\n+        return false;\n+      }\n+      if (size_in_bits < 128 ) {\n+        return false;\n+      }\n+      if (size_in_bits < 512 && !VM_Version::supports_avx512vl()) {\n+        return false;\n+      }\n+      break;\n@@ -1940,0 +1946,1 @@\n+    case Op_ExpandV:\n@@ -9243,0 +9250,14 @@\n+instruct evcompress_reg(vec dst, vec src, kReg mask) %{\n+  predicate(UseAVX > 2);\n+  match(Set dst (CompressV src mask));\n+  format %{ \"vcompress $dst, $src, $mask\" %}\n+  ins_encode %{\n+    assert(Matcher::vector_length_in_bytes(this) >= 16, \"sanity\");\n+    int vector_len = vector_length_encoding(this);\n+    BasicType etype = Matcher::vector_element_basic_type(this);\n+    \/\/ Zeroing-masking\n+    __ evcompress(etype, $dst$$XMMRegister, $mask$$KRegister, $src$$XMMRegister, false \/*merge*\/, vector_len);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":28,"deletions":7,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -4218,1 +4218,1 @@\n-    \"CompressV\", \/* \"ExpandV\" *\/\n+    \"CompressV\", \"ExpandV\",\n","filename":"src\/hotspot\/share\/adlc\/formssel.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -415,0 +415,1 @@\n+macro(ExpandV)\n","filename":"src\/hotspot\/share\/opto\/classes.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -725,0 +725,12 @@\n+  Node* vec_mask() const { return in(2); }\n+};\n+\n+\/\/------------------------------ExpandVNode--------------------------------------\n+\/\/ Vector expand\n+class ExpandVNode : public VectorNode {\n+public:\n+  ExpandVNode(Node* vec1, Node* mask)\n+    : VectorNode(vec1, mask, vec1->bottom_type()->is_vect()) {}\n+\n+  virtual int Opcode() const;\n+  Node* vec1() const { return in(1); }\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1763,0 +1763,1 @@\n+  declare_c2_type(ExpandVNode, VectorNode)                                \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}