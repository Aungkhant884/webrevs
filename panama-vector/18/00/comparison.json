{"files":[{"patch":"@@ -174,1 +174,0 @@\n-      case Op_VectorMaskWrapper:\n@@ -183,1 +182,0 @@\n-      case Op_VectorUnbox:\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve.ad","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -161,1 +161,0 @@\n-      case Op_VectorMaskWrapper:\n@@ -170,1 +169,0 @@\n-      case Op_VectorUnbox:\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve_ad.m4","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -674,5 +674,1 @@\n-      if (arch_supports_vector(Op_VectorReinterpret, num_elem, T_BYTE, VecMaskNotUsed)) {\n-        val = gvn().transform(new VectorReinterpretNode(val, val->bottom_type()->is_vect(), to_vect_type));\n-      } else {\n-        return false;\n-      }\n+      val = gvn().transform(new VectorReinterpretNode(val, val->bottom_type()->is_vect(), to_vect_type));\n@@ -690,5 +686,1 @@\n-      if (arch_supports_vector(Op_VectorReinterpret, num_elem, T_BYTE, VecMaskNotUsed)) {\n-        vload = gvn().transform(new VectorReinterpretNode(vload, vload->bottom_type()->is_vect(), to_vect_type));\n-      } else {\n-        return false;\n-      }\n+      vload = gvn().transform(new VectorReinterpretNode(vload, vload->bottom_type()->is_vect(), to_vect_type));\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"}]}