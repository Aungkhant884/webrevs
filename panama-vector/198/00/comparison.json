{"files":[{"patch":"@@ -2487,0 +2487,1 @@\n+    case Op_ExpandV:\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -152,0 +152,2 @@\n+      case Op_ExpandV:\n+        if (UseSVE < 2 || is_subword_type(bt)) return false;\n@@ -5532,1 +5534,1 @@\n-instruct mcompress(pReg dst, pReg mask, rFlagsReg cr) %{\n+instruct mcompress(pReg dst, pReg pg, rFlagsReg cr) %{\n@@ -5534,1 +5536,1 @@\n-  match(Set dst (CompressM mask));\n+  match(Set dst (CompressM pg));\n@@ -5537,1 +5539,1 @@\n-  format %{ \"sve_cntp rscratch1, $mask\\n\\t\"\n+  format %{ \"sve_cntp rscratch1, $pg\\n\\t\"\n@@ -5542,1 +5544,1 @@\n-    __ sve_cntp(rscratch1, size, ptrue, as_PRegister($mask$$reg));\n+    __ sve_cntp(rscratch1, size, ptrue, as_PRegister($pg$$reg));\n@@ -5565,1 +5567,1 @@\n-instruct vcompressB(vReg dst, vReg src, pReg mask, vReg vtmp1, vReg vtmp2, vReg vtmp3, vReg vtmp4,\n+instruct vcompressB(vReg dst, vReg src, pReg pg, vReg vtmp1, vReg vtmp2, vReg vtmp3, vReg vtmp4,\n@@ -5569,1 +5571,1 @@\n-  match(Set dst (CompressV src mask));\n+  match(Set dst (CompressV src pg));\n@@ -5571,1 +5573,1 @@\n-  format %{ \"sve_compact $dst, $src, $mask\\t# vector compress (B)\" %}\n+  format %{ \"sve_compact $dst, $src, $pg\\t# vector compress (B)\" %}\n@@ -5573,1 +5575,1 @@\n-    __ sve_compress_byte(as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg), as_PRegister($mask$$reg),\n+    __ sve_compress_byte(as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg), as_PRegister($pg$$reg),\n@@ -5581,1 +5583,1 @@\n-instruct vcompressS(vReg dst, vReg src, pReg mask, vReg vtmp1, vReg vtmp2, pRegGov pgtmp) %{\n+instruct vcompressS(vReg dst, vReg src, pReg pg, vReg vtmp1, vReg vtmp2, pRegGov pgtmp) %{\n@@ -5584,1 +5586,1 @@\n-  match(Set dst (CompressV src mask));\n+  match(Set dst (CompressV src pg));\n@@ -5586,1 +5588,1 @@\n-  format %{ \"sve_compact $dst, $src, $mask\\t# vector compress (H)\" %}\n+  format %{ \"sve_compact $dst, $src, $pg\\t# vector compress (H)\" %}\n@@ -5588,1 +5590,1 @@\n-    __ sve_compress_short(as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg), as_PRegister($mask$$reg),\n+    __ sve_compress_short(as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg), as_PRegister($pg$$reg),\n@@ -5594,0 +5596,34 @@\n+instruct vexpand(vReg dst, vReg src, pRegGov pg) %{\n+  match(Set dst (ExpandV src pg));\n+  effect(TEMP_DEF dst);\n+  ins_cost(4 * SVE_COST);\n+  format %{ \"sve_dup $dst, S\/D, 0\\n\\t\"\n+            \"sve_histcnt $dst, S\/D, $pg, $dst, $dst\\n\\t\"\n+            \"sve_sub $dst, S\/D, 1\\n\\t\"\n+            \"sve_tbl $dst, S\/D, $src, $dst\\t# vector expand (S\/D)\" %}\n+  ins_encode %{\n+    \/\/ Example input:   src   = 1 2 3 4 5 6 7 8\n+    \/\/                  pg    = 1 0 0 1 1 0 1 1\n+    \/\/ Expected result: dst   = 4 0 0 5 6 0 7 8\n+\n+    \/\/ The basic idea is to use TBL which can shuffle the elements in the given\n+    \/\/ vector flexibly. HISTCNT + SUB is used to generate the second source input\n+    \/\/ for TBL whose value is used to select the indexed element from src vector.\n+\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    assert(UseSVE == 2 && !is_subword_type(bt), \"unsupported\");\n+    Assembler::SIMD_RegVariant size = __ elemType_to_regVariant(bt);\n+    \/\/ dst = 0 0 0 0 0 0 0 0\n+    __ sve_dup(as_FloatRegister($dst$$reg), size, 0);\n+    \/\/ dst = 5 0 0 4 3 0 2 1\n+    __ sve_histcnt(as_FloatRegister($dst$$reg), size, as_PRegister($pg$$reg),\n+                   as_FloatRegister($dst$$reg), as_FloatRegister($dst$$reg));\n+    \/\/ dst = 4 -1 -1 3 2 -1 1 0\n+    __ sve_sub(as_FloatRegister($dst$$reg), size, 1);\n+    \/\/ dst = 4 0 0 5 6 0 7 8\n+    __ sve_tbl(as_FloatRegister($dst$$reg), size, as_FloatRegister($src$$reg),\n+               as_FloatRegister($dst$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve.ad","additions":48,"deletions":12,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -147,0 +147,2 @@\n+      case Op_ExpandV:\n+        if (UseSVE < 2 || is_subword_type(bt)) return false;\n@@ -3071,1 +3073,1 @@\n-instruct mcompress(pReg dst, pReg mask, rFlagsReg cr) %{\n+instruct mcompress(pReg dst, pReg pg, rFlagsReg cr) %{\n@@ -3073,1 +3075,1 @@\n-  match(Set dst (CompressM mask));\n+  match(Set dst (CompressM pg));\n@@ -3076,1 +3078,1 @@\n-  format %{ \"sve_cntp rscratch1, $mask\\n\\t\"\n+  format %{ \"sve_cntp rscratch1, $pg\\n\\t\"\n@@ -3081,1 +3083,1 @@\n-    __ sve_cntp(rscratch1, size, ptrue, as_PRegister($mask$$reg));\n+    __ sve_cntp(rscratch1, size, ptrue, as_PRegister($pg$$reg));\n@@ -3104,1 +3106,1 @@\n-instruct vcompressB(vReg dst, vReg src, pReg mask, vReg vtmp1, vReg vtmp2, vReg vtmp3, vReg vtmp4,\n+instruct vcompressB(vReg dst, vReg src, pReg pg, vReg vtmp1, vReg vtmp2, vReg vtmp3, vReg vtmp4,\n@@ -3108,1 +3110,1 @@\n-  match(Set dst (CompressV src mask));\n+  match(Set dst (CompressV src pg));\n@@ -3110,1 +3112,1 @@\n-  format %{ \"sve_compact $dst, $src, $mask\\t# vector compress (B)\" %}\n+  format %{ \"sve_compact $dst, $src, $pg\\t# vector compress (B)\" %}\n@@ -3112,1 +3114,1 @@\n-    __ sve_compress_byte(as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg), as_PRegister($mask$$reg),\n+    __ sve_compress_byte(as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg), as_PRegister($pg$$reg),\n@@ -3120,1 +3122,1 @@\n-instruct vcompressS(vReg dst, vReg src, pReg mask, vReg vtmp1, vReg vtmp2, pRegGov pgtmp) %{\n+instruct vcompressS(vReg dst, vReg src, pReg pg, vReg vtmp1, vReg vtmp2, pRegGov pgtmp) %{\n@@ -3123,1 +3125,1 @@\n-  match(Set dst (CompressV src mask));\n+  match(Set dst (CompressV src pg));\n@@ -3125,1 +3127,1 @@\n-  format %{ \"sve_compact $dst, $src, $mask\\t# vector compress (H)\" %}\n+  format %{ \"sve_compact $dst, $src, $pg\\t# vector compress (H)\" %}\n@@ -3127,1 +3129,1 @@\n-    __ sve_compress_short(as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg), as_PRegister($mask$$reg),\n+    __ sve_compress_short(as_FloatRegister($dst$$reg), as_FloatRegister($src$$reg), as_PRegister($pg$$reg),\n@@ -3133,0 +3135,34 @@\n+instruct vexpand(vReg dst, vReg src, pRegGov pg) %{\n+  match(Set dst (ExpandV src pg));\n+  effect(TEMP_DEF dst);\n+  ins_cost(4 * SVE_COST);\n+  format %{ \"sve_dup $dst, S\/D, 0\\n\\t\"\n+            \"sve_histcnt $dst, S\/D, $pg, $dst, $dst\\n\\t\"\n+            \"sve_sub $dst, S\/D, 1\\n\\t\"\n+            \"sve_tbl $dst, S\/D, $src, $dst\\t# vector expand (S\/D)\" %}\n+  ins_encode %{\n+    \/\/ Example input:   src   = 1 2 3 4 5 6 7 8\n+    \/\/                  pg    = 1 0 0 1 1 0 1 1\n+    \/\/ Expected result: dst   = 4 0 0 5 6 0 7 8\n+\n+    \/\/ The basic idea is to use TBL which can shuffle the elements in the given\n+    \/\/ vector flexibly. HISTCNT + SUB is used to generate the second source input\n+    \/\/ for TBL whose value is used to select the indexed element from src vector.\n+\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    assert(UseSVE == 2 && !is_subword_type(bt), \"unsupported\");\n+    Assembler::SIMD_RegVariant size = __ elemType_to_regVariant(bt);\n+    \/\/ dst = 0 0 0 0 0 0 0 0\n+    __ sve_dup(as_FloatRegister($dst$$reg), size, 0);\n+    \/\/ dst = 5 0 0 4 3 0 2 1\n+    __ sve_histcnt(as_FloatRegister($dst$$reg), size, as_PRegister($pg$$reg),\n+                   as_FloatRegister($dst$$reg), as_FloatRegister($dst$$reg));\n+    \/\/ dst = 4 -1 -1 3 2 -1 1 0\n+    __ sve_sub(as_FloatRegister($dst$$reg), size, 1);\n+    \/\/ dst = 4 0 0 5 6 0 7 8\n+    __ sve_tbl(as_FloatRegister($dst$$reg), size, as_FloatRegister($src$$reg),\n+               as_FloatRegister($dst$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve_ad.m4","additions":48,"deletions":12,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -3786,0 +3786,9 @@\n+  \/\/ SVE2 Count matching elements in vector\n+  void sve_histcnt(FloatRegister Zd, SIMD_RegVariant T, PRegister Pg,\n+                   FloatRegister Zn, FloatRegister Zm) {\n+    starti;\n+    assert(T == S || T == D, \"invalid size\");\n+    f(0b01000101, 31, 24), f(T, 23, 22), f(0b1, 21), rf(Zm, 16);\n+    f(0b110, 15, 13), pgrf(Pg, 10), rf(Zn, 5), rf(Zd, 0);\n+  }\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1789,0 +1789,3 @@\n+                        # SVE2 instructions\n+                        [\"histcnt\", \"__ sve_histcnt(z16, __ S, p0, z16, z16);\",           \"histcnt\\tz16.s, p0\/z, z16.s, z16.s\"],\n+                        [\"histcnt\", \"__ sve_histcnt(z17, __ D, p0, z17, z17);\",           \"histcnt\\tz17.d, p0\/z, z17.d, z17.d\"],\n@@ -1874,0 +1877,2 @@\n+                       # SVE2 instructions\n+                       [\"histcnt\", \"ZPZZ\", \"z\"],\n@@ -1884,2 +1889,3 @@\n-# compile for sve with 8.3 and sha3 because of SHA3 crypto extension.\n-subprocess.check_call([AARCH64_AS, \"-march=armv8.3-a+sha3+sve\", \"aarch64ops.s\", \"-o\", \"aarch64ops.o\"])\n+# compile for sve with armv9-a+sha3 because of SHA3 crypto extension and SVE2 instructions.\n+# armv9-a enables sve and sve2 by default.\n+subprocess.check_call([AARCH64_AS, \"-march=armv9-a+sha3\", \"aarch64ops.s\", \"-o\", \"aarch64ops.o\"])\n","filename":"test\/hotspot\/gtest\/aarch64\/aarch64-asmtest.py","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -948,0 +948,2 @@\n+    __ sve_histcnt(z16, __ S, p0, z16, z16);           \/\/       histcnt z16.s, p0\/z, z16.s, z16.s\n+    __ sve_histcnt(z17, __ D, p0, z17, z17);           \/\/       histcnt z17.d, p0\/z, z17.d, z17.d\n@@ -1178,0 +1180,1 @@\n+    __ sve_histcnt(z0, __ S, p4, z2, z30);             \/\/       histcnt z0.s, p4\/z, z2.s, z30.s\n@@ -1180,9 +1183,9 @@\n-    __ sve_andv(v0, __ D, p4, z2);                     \/\/       andv d0, p4, z2.d\n-    __ sve_orv(v20, __ D, p5, z21);                    \/\/       orv d20, p5, z21.d\n-    __ sve_eorv(v12, __ B, p2, z2);                    \/\/       eorv b12, p2, z2.b\n-    __ sve_smaxv(v14, __ B, p5, z22);                  \/\/       smaxv b14, p5, z22.b\n-    __ sve_sminv(v19, __ D, p6, z26);                  \/\/       sminv d19, p6, z26.d\n-    __ sve_fminv(v12, __ S, p5, z21);                  \/\/       fminv s12, p5, z21.s\n-    __ sve_fmaxv(v1, __ S, p2, z19);                   \/\/       fmaxv s1, p2, z19.s\n-    __ sve_fadda(v19, __ S, p6, z23);                  \/\/       fadda s19, p6, s19, z23.s\n-    __ sve_uaddv(v30, __ S, p4, z19);                  \/\/       uaddv d30, p4, z19.s\n+    __ sve_andv(v22, __ H, p5, z29);                   \/\/       andv h22, p5, z29.h\n+    __ sve_orv(v8, __ H, p0, z0);                      \/\/       orv h8, p0, z0.h\n+    __ sve_eorv(v23, __ S, p5, z0);                    \/\/       eorv s23, p5, z0.s\n+    __ sve_smaxv(v25, __ H, p6, z23);                  \/\/       smaxv h25, p6, z23.h\n+    __ sve_sminv(v21, __ B, p5, z1);                   \/\/       sminv b21, p5, z1.b\n+    __ sve_fminv(v10, __ D, p5, z11);                  \/\/       fminv d10, p5, z11.d\n+    __ sve_fmaxv(v23, __ D, p6, z8);                   \/\/       fmaxv d23, p6, z8.d\n+    __ sve_fadda(v17, __ D, p5, z19);                  \/\/       fadda d17, p5, d17, z19.d\n+    __ sve_uaddv(v4, __ D, p5, z13);                   \/\/       uaddv d4, p5, z13.d\n@@ -1207,7 +1210,7 @@\n-    0x14000000,     0x17ffffd7,     0x140003de,     0x94000000,\n-    0x97ffffd4,     0x940003db,     0x3400000a,     0x34fffa2a,\n-    0x34007b0a,     0x35000008,     0x35fff9c8,     0x35007aa8,\n-    0xb400000b,     0xb4fff96b,     0xb4007a4b,     0xb500001d,\n-    0xb5fff91d,     0xb50079fd,     0x10000013,     0x10fff8b3,\n-    0x10007993,     0x90000013,     0x36300016,     0x3637f836,\n-    0x36307916,     0x3758000c,     0x375ff7cc,     0x375878ac,\n+    0x14000000,     0x17ffffd7,     0x140003e1,     0x94000000,\n+    0x97ffffd4,     0x940003de,     0x3400000a,     0x34fffa2a,\n+    0x34007b6a,     0x35000008,     0x35fff9c8,     0x35007b08,\n+    0xb400000b,     0xb4fff96b,     0xb4007aab,     0xb500001d,\n+    0xb5fff91d,     0xb5007a5d,     0x10000013,     0x10fff8b3,\n+    0x100079f3,     0x90000013,     0x36300016,     0x3637f836,\n+    0x36307976,     0x3758000c,     0x375ff7cc,     0x3758790c,\n@@ -1218,13 +1221,13 @@\n-    0x54007680,     0x54000001,     0x54fff541,     0x54007621,\n-    0x54000002,     0x54fff4e2,     0x540075c2,     0x54000002,\n-    0x54fff482,     0x54007562,     0x54000003,     0x54fff423,\n-    0x54007503,     0x54000003,     0x54fff3c3,     0x540074a3,\n-    0x54000004,     0x54fff364,     0x54007444,     0x54000005,\n-    0x54fff305,     0x540073e5,     0x54000006,     0x54fff2a6,\n-    0x54007386,     0x54000007,     0x54fff247,     0x54007327,\n-    0x54000008,     0x54fff1e8,     0x540072c8,     0x54000009,\n-    0x54fff189,     0x54007269,     0x5400000a,     0x54fff12a,\n-    0x5400720a,     0x5400000b,     0x54fff0cb,     0x540071ab,\n-    0x5400000c,     0x54fff06c,     0x5400714c,     0x5400000d,\n-    0x54fff00d,     0x540070ed,     0x5400000e,     0x54ffefae,\n-    0x5400708e,     0x5400000f,     0x54ffef4f,     0x5400702f,\n+    0x540076e0,     0x54000001,     0x54fff541,     0x54007681,\n+    0x54000002,     0x54fff4e2,     0x54007622,     0x54000002,\n+    0x54fff482,     0x540075c2,     0x54000003,     0x54fff423,\n+    0x54007563,     0x54000003,     0x54fff3c3,     0x54007503,\n+    0x54000004,     0x54fff364,     0x540074a4,     0x54000005,\n+    0x54fff305,     0x54007445,     0x54000006,     0x54fff2a6,\n+    0x540073e6,     0x54000007,     0x54fff247,     0x54007387,\n+    0x54000008,     0x54fff1e8,     0x54007328,     0x54000009,\n+    0x54fff189,     0x540072c9,     0x5400000a,     0x54fff12a,\n+    0x5400726a,     0x5400000b,     0x54fff0cb,     0x5400720b,\n+    0x5400000c,     0x54fff06c,     0x540071ac,     0x5400000d,\n+    0x54fff00d,     0x5400714d,     0x5400000e,     0x54ffefae,\n+    0x540070ee,     0x5400000f,     0x54ffef4f,     0x5400708f,\n@@ -1404,52 +1407,52 @@\n-    0x05e18610,     0x1e601000,     0x1e603000,     0x1e621000,\n-    0x1e623000,     0x1e641000,     0x1e643000,     0x1e661000,\n-    0x1e663000,     0x1e681000,     0x1e683000,     0x1e6a1000,\n-    0x1e6a3000,     0x1e6c1000,     0x1e6c3000,     0x1e6e1000,\n-    0x1e6e3000,     0x1e701000,     0x1e703000,     0x1e721000,\n-    0x1e723000,     0x1e741000,     0x1e743000,     0x1e761000,\n-    0x1e763000,     0x1e781000,     0x1e783000,     0x1e7a1000,\n-    0x1e7a3000,     0x1e7c1000,     0x1e7c3000,     0x1e7e1000,\n-    0x1e7e3000,     0xf82a822f,     0xf822018a,     0xf82c11af,\n-    0xf8222287,     0xf83a3090,     0xf8225184,     0xf8304215,\n-    0xf83072ab,     0xf837634c,     0xf8b781dc,     0xf8ab0038,\n-    0xf8ac115f,     0xf8b02047,     0xf8a3326d,     0xf8b15070,\n-    0xf8a143cb,     0xf8a571e8,     0xf8bd601e,     0xf8f48287,\n-    0xf8f702bc,     0xf8fb10b9,     0xf8e12217,     0xf8ff3185,\n-    0xf8e951fc,     0xf8fd43f6,     0xf8f370bf,     0xf8ee63f0,\n-    0xf870829b,     0xf870016c,     0xf86913c6,     0xf871239b,\n-    0xf87e3147,     0xf874508a,     0xf8784231,     0xf87673a3,\n-    0xf86f6276,     0xb8338056,     0xb82f0186,     0xb83011ab,\n-    0xb83723c1,     0xb8333225,     0xb82252d0,     0xb82d42aa,\n-    0xb83d719b,     0xb83b6023,     0xb8bf8278,     0xb8b10389,\n-    0xb8bb10ef,     0xb8b523f7,     0xb8b933e2,     0xb8bb5150,\n-    0xb8b74073,     0xb8b07320,     0xb8ba6057,     0xb8f0808c,\n-    0xb8fc03be,     0xb8f010db,     0xb8e921fd,     0xb8e730e4,\n-    0xb8ef52e9,     0xb8e84382,     0xb8f570bf,     0xb8fb6220,\n-    0xb86f8344,     0xb86802dc,     0xb87b133b,     0xb8772080,\n-    0xb8663010,     0xb864502f,     0xb86a40a7,     0xb86a70fc,\n-    0xb87462b7,     0xce284145,     0xce1108de,     0xce7c8fab,\n-    0xce96eb42,     0xce7b81ae,     0xce6586f0,     0xcec081a2,\n-    0xce6a89ea,     0x25a0cc5a,     0x25a1d143,     0x05800e44,\n-    0x05406531,     0x05002d42,     0x2520c677,     0x25a1cd07,\n-    0x0580687b,     0x0543bb42,     0x050044a6,     0x25a0c86c,\n-    0x25a1d358,     0x05800500,     0x05400ad3,     0x05000e06,\n-    0x25e0c951,     0x25a1d54a,     0x05839276,     0x0540ea6f,\n-    0x0503c8a4,     0x25a0d448,     0x2521d056,     0x058059c9,\n-    0x05406d05,     0x05003cb6,     0x25a0d0c8,     0x2561c4f9,\n-    0x05809904,     0x05400e5d,     0x0500cadd,     0x043c0162,\n-    0x04ba0427,     0x65c801d1,     0x65c50b15,     0x65d60635,\n-    0x0416b67d,     0x040012e4,     0x04da06f3,     0x04508113,\n-    0x04db1a2e,     0x0419a7d5,     0x041ab58a,     0x04990709,\n-    0x045398c4,     0x049199bb,     0x049016de,     0x0457bd3e,\n-    0x04dea693,     0x045809a9,     0x05678313,     0x05a48e33,\n-    0x04080410,     0x044a09eb,     0x04c105ef,     0x04dca145,\n-    0x6580801a,     0x65cd9d53,     0x65c694e3,     0x65878ebc,\n-    0x65c28e3a,     0x04ddac51,     0x6582b690,     0x65c0a033,\n-    0x65c1aa11,     0x658da095,     0x65818cd7,     0x65bd8e14,\n-    0x65a902c3,     0x65f33c78,     0x65adbaa7,     0x65f5d8a7,\n-    0x65e9e071,     0x65ee496b,     0x65f869b1,     0x044f511e,\n-    0x0456777a,     0x043b30a8,     0x04ae300a,     0x04603295,\n-    0x04e53336,     0x05316a3d,     0x057d6dcc,     0x04da3040,\n-    0x04d836b4,     0x0419284c,     0x040836ce,     0x04ca3b53,\n-    0x658736ac,     0x65862a61,     0x65983af3,     0x0481327e,\n-\n+    0x05e18610,     0x45b0c210,     0x45f1c231,     0x1e601000,\n+    0x1e603000,     0x1e621000,     0x1e623000,     0x1e641000,\n+    0x1e643000,     0x1e661000,     0x1e663000,     0x1e681000,\n+    0x1e683000,     0x1e6a1000,     0x1e6a3000,     0x1e6c1000,\n+    0x1e6c3000,     0x1e6e1000,     0x1e6e3000,     0x1e701000,\n+    0x1e703000,     0x1e721000,     0x1e723000,     0x1e741000,\n+    0x1e743000,     0x1e761000,     0x1e763000,     0x1e781000,\n+    0x1e783000,     0x1e7a1000,     0x1e7a3000,     0x1e7c1000,\n+    0x1e7c3000,     0x1e7e1000,     0x1e7e3000,     0xf82a822f,\n+    0xf822018a,     0xf82c11af,     0xf8222287,     0xf83a3090,\n+    0xf8225184,     0xf8304215,     0xf83072ab,     0xf837634c,\n+    0xf8b781dc,     0xf8ab0038,     0xf8ac115f,     0xf8b02047,\n+    0xf8a3326d,     0xf8b15070,     0xf8a143cb,     0xf8a571e8,\n+    0xf8bd601e,     0xf8f48287,     0xf8f702bc,     0xf8fb10b9,\n+    0xf8e12217,     0xf8ff3185,     0xf8e951fc,     0xf8fd43f6,\n+    0xf8f370bf,     0xf8ee63f0,     0xf870829b,     0xf870016c,\n+    0xf86913c6,     0xf871239b,     0xf87e3147,     0xf874508a,\n+    0xf8784231,     0xf87673a3,     0xf86f6276,     0xb8338056,\n+    0xb82f0186,     0xb83011ab,     0xb83723c1,     0xb8333225,\n+    0xb82252d0,     0xb82d42aa,     0xb83d719b,     0xb83b6023,\n+    0xb8bf8278,     0xb8b10389,     0xb8bb10ef,     0xb8b523f7,\n+    0xb8b933e2,     0xb8bb5150,     0xb8b74073,     0xb8b07320,\n+    0xb8ba6057,     0xb8f0808c,     0xb8fc03be,     0xb8f010db,\n+    0xb8e921fd,     0xb8e730e4,     0xb8ef52e9,     0xb8e84382,\n+    0xb8f570bf,     0xb8fb6220,     0xb86f8344,     0xb86802dc,\n+    0xb87b133b,     0xb8772080,     0xb8663010,     0xb864502f,\n+    0xb86a40a7,     0xb86a70fc,     0xb87462b7,     0xce284145,\n+    0xce1108de,     0xce7c8fab,     0xce96eb42,     0xce7b81ae,\n+    0xce6586f0,     0xcec081a2,     0xce6a89ea,     0x25a0cc5a,\n+    0x25a1d143,     0x05800e44,     0x05406531,     0x05002d42,\n+    0x2520c677,     0x25a1cd07,     0x0580687b,     0x0543bb42,\n+    0x050044a6,     0x25a0c86c,     0x25a1d358,     0x05800500,\n+    0x05400ad3,     0x05000e06,     0x25e0c951,     0x25a1d54a,\n+    0x05839276,     0x0540ea6f,     0x0503c8a4,     0x25a0d448,\n+    0x2521d056,     0x058059c9,     0x05406d05,     0x05003cb6,\n+    0x25a0d0c8,     0x2561c4f9,     0x05809904,     0x05400e5d,\n+    0x0500cadd,     0x043c0162,     0x04ba0427,     0x65c801d1,\n+    0x65c50b15,     0x65d60635,     0x0416b67d,     0x040012e4,\n+    0x04da06f3,     0x04508113,     0x04db1a2e,     0x0419a7d5,\n+    0x041ab58a,     0x04990709,     0x045398c4,     0x049199bb,\n+    0x049016de,     0x0457bd3e,     0x04dea693,     0x045809a9,\n+    0x05678313,     0x05a48e33,     0x04080410,     0x044a09eb,\n+    0x04c105ef,     0x04dca145,     0x6580801a,     0x65cd9d53,\n+    0x65c694e3,     0x65878ebc,     0x65c28e3a,     0x04ddac51,\n+    0x6582b690,     0x65c0a033,     0x65c1aa11,     0x658da095,\n+    0x65818cd7,     0x65bd8e14,     0x65a902c3,     0x65f33c78,\n+    0x65adbaa7,     0x65f5d8a7,     0x65e9e071,     0x65ee496b,\n+    0x65f869b1,     0x044f511e,     0x0456777a,     0x043b30a8,\n+    0x04ae300a,     0x04603295,     0x04e53336,     0x05316a3d,\n+    0x057d6dcc,     0x45bed040,     0x045a37b6,     0x04582008,\n+    0x04993417,     0x04483af9,     0x040a3435,     0x65c7356a,\n+    0x65c63917,     0x65d83671,     0x04c135a4,\n","filename":"test\/hotspot\/gtest\/aarch64\/asmtest.out.h","additions":84,"deletions":81,"binary":false,"changes":165,"status":"modified"}]}