{"files":[{"patch":"@@ -1476,0 +1476,51 @@\n+    @Benchmark\n+    public Object compress() {\n+        byte[] a = fa.apply(size);\n+        byte[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Byte> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                av.compress(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object expand() {\n+        byte[] a = fa.apply(size);\n+        byte[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Byte> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                av.expand(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object maskCompress() {\n+        boolean[] ms = fmt.apply(size);\n+        boolean[] rs = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < ms.length; i += SPECIES.length()) {\n+                VectorMask<Byte> m = VectorMask.fromArray(SPECIES, ms, i);\n+                m.compress().intoArray(rs, j);\n+                j += m.trueCount();\n+            }\n+        }\n+\n+        return rs;\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte128Vector.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -1476,0 +1476,51 @@\n+    @Benchmark\n+    public Object compress() {\n+        byte[] a = fa.apply(size);\n+        byte[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Byte> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                av.compress(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object expand() {\n+        byte[] a = fa.apply(size);\n+        byte[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Byte> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                av.expand(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object maskCompress() {\n+        boolean[] ms = fmt.apply(size);\n+        boolean[] rs = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < ms.length; i += SPECIES.length()) {\n+                VectorMask<Byte> m = VectorMask.fromArray(SPECIES, ms, i);\n+                m.compress().intoArray(rs, j);\n+                j += m.trueCount();\n+            }\n+        }\n+\n+        return rs;\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte256Vector.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -1476,0 +1476,51 @@\n+    @Benchmark\n+    public Object compress() {\n+        byte[] a = fa.apply(size);\n+        byte[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Byte> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                av.compress(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object expand() {\n+        byte[] a = fa.apply(size);\n+        byte[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Byte> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                av.expand(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object maskCompress() {\n+        boolean[] ms = fmt.apply(size);\n+        boolean[] rs = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < ms.length; i += SPECIES.length()) {\n+                VectorMask<Byte> m = VectorMask.fromArray(SPECIES, ms, i);\n+                m.compress().intoArray(rs, j);\n+                j += m.trueCount();\n+            }\n+        }\n+\n+        return rs;\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte512Vector.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -1476,0 +1476,51 @@\n+    @Benchmark\n+    public Object compress() {\n+        byte[] a = fa.apply(size);\n+        byte[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Byte> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                av.compress(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object expand() {\n+        byte[] a = fa.apply(size);\n+        byte[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Byte> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                av.expand(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object maskCompress() {\n+        boolean[] ms = fmt.apply(size);\n+        boolean[] rs = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < ms.length; i += SPECIES.length()) {\n+                VectorMask<Byte> m = VectorMask.fromArray(SPECIES, ms, i);\n+                m.compress().intoArray(rs, j);\n+                j += m.trueCount();\n+            }\n+        }\n+\n+        return rs;\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte64Vector.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -1476,0 +1476,51 @@\n+    @Benchmark\n+    public Object compress() {\n+        byte[] a = fa.apply(size);\n+        byte[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Byte> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                av.compress(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object expand() {\n+        byte[] a = fa.apply(size);\n+        byte[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Byte> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                av.expand(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object maskCompress() {\n+        boolean[] ms = fmt.apply(size);\n+        boolean[] rs = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < ms.length; i += SPECIES.length()) {\n+                VectorMask<Byte> m = VectorMask.fromArray(SPECIES, ms, i);\n+                m.compress().intoArray(rs, j);\n+                j += m.trueCount();\n+            }\n+        }\n+\n+        return rs;\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ByteMaxVector.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -1410,0 +1410,50 @@\n+\n+    @Benchmark\n+    public void compressScalar(Blackhole bh) {\n+        byte[] as = fa.apply(size);\n+        byte[] rs = new byte[size];\n+        boolean[] im = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < as.length; i++) {\n+                if (im[i]) {\n+                    rs[j++] = as[i];\n+                }\n+            }\n+        }\n+\n+        bh.consume(rs);\n+    }\n+\n+    @Benchmark\n+    public void expandScalar(Blackhole bh) {\n+        byte[] as = fa.apply(size);\n+        byte[] rs = new byte[size];\n+        boolean[] im = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < as.length; i++) {\n+                if (im[i]) {\n+                    rs[i++] = as[j++];\n+                }\n+            }\n+        }\n+\n+        bh.consume(rs);\n+    }\n+\n+    @Benchmark\n+    public void maskCompressScalar(Blackhole bh) {\n+        boolean[] im = fmt.apply(size);\n+        boolean[] rm = new boolean[size];\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < im.length; i++) {\n+                if (im[i]) {\n+                    rm[j++] = im[i];\n+                }\n+            }\n+        }\n+\n+        bh.consume(rm);\n+    }\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ByteScalar.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -774,0 +774,51 @@\n+    @Benchmark\n+    public Object compress() {\n+        double[] a = fa.apply(size);\n+        double[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Double> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                av.compress(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object expand() {\n+        double[] a = fa.apply(size);\n+        double[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Double> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                av.expand(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object maskCompress() {\n+        boolean[] ms = fmt.apply(size);\n+        boolean[] rs = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < ms.length; i += SPECIES.length()) {\n+                VectorMask<Double> m = VectorMask.fromArray(SPECIES, ms, i);\n+                m.compress().intoArray(rs, j);\n+                j += m.trueCount();\n+            }\n+        }\n+\n+        return rs;\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double128Vector.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -774,0 +774,51 @@\n+    @Benchmark\n+    public Object compress() {\n+        double[] a = fa.apply(size);\n+        double[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Double> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                av.compress(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object expand() {\n+        double[] a = fa.apply(size);\n+        double[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Double> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                av.expand(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object maskCompress() {\n+        boolean[] ms = fmt.apply(size);\n+        boolean[] rs = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < ms.length; i += SPECIES.length()) {\n+                VectorMask<Double> m = VectorMask.fromArray(SPECIES, ms, i);\n+                m.compress().intoArray(rs, j);\n+                j += m.trueCount();\n+            }\n+        }\n+\n+        return rs;\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double256Vector.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -774,0 +774,51 @@\n+    @Benchmark\n+    public Object compress() {\n+        double[] a = fa.apply(size);\n+        double[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Double> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                av.compress(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object expand() {\n+        double[] a = fa.apply(size);\n+        double[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Double> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                av.expand(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object maskCompress() {\n+        boolean[] ms = fmt.apply(size);\n+        boolean[] rs = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < ms.length; i += SPECIES.length()) {\n+                VectorMask<Double> m = VectorMask.fromArray(SPECIES, ms, i);\n+                m.compress().intoArray(rs, j);\n+                j += m.trueCount();\n+            }\n+        }\n+\n+        return rs;\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double512Vector.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -774,0 +774,51 @@\n+    @Benchmark\n+    public Object compress() {\n+        double[] a = fa.apply(size);\n+        double[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Double> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                av.compress(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object expand() {\n+        double[] a = fa.apply(size);\n+        double[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Double> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                av.expand(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object maskCompress() {\n+        boolean[] ms = fmt.apply(size);\n+        boolean[] rs = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < ms.length; i += SPECIES.length()) {\n+                VectorMask<Double> m = VectorMask.fromArray(SPECIES, ms, i);\n+                m.compress().intoArray(rs, j);\n+                j += m.trueCount();\n+            }\n+        }\n+\n+        return rs;\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double64Vector.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -774,0 +774,51 @@\n+    @Benchmark\n+    public Object compress() {\n+        double[] a = fa.apply(size);\n+        double[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Double> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                av.compress(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object expand() {\n+        double[] a = fa.apply(size);\n+        double[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Double> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                av.expand(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object maskCompress() {\n+        boolean[] ms = fmt.apply(size);\n+        boolean[] rs = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < ms.length; i += SPECIES.length()) {\n+                VectorMask<Double> m = VectorMask.fromArray(SPECIES, ms, i);\n+                m.compress().intoArray(rs, j);\n+                j += m.trueCount();\n+            }\n+        }\n+\n+        return rs;\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/DoubleMaxVector.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -744,0 +744,50 @@\n+\n+    @Benchmark\n+    public void compressScalar(Blackhole bh) {\n+        double[] as = fa.apply(size);\n+        double[] rs = new double[size];\n+        boolean[] im = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < as.length; i++) {\n+                if (im[i]) {\n+                    rs[j++] = as[i];\n+                }\n+            }\n+        }\n+\n+        bh.consume(rs);\n+    }\n+\n+    @Benchmark\n+    public void expandScalar(Blackhole bh) {\n+        double[] as = fa.apply(size);\n+        double[] rs = new double[size];\n+        boolean[] im = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < as.length; i++) {\n+                if (im[i]) {\n+                    rs[i++] = as[j++];\n+                }\n+            }\n+        }\n+\n+        bh.consume(rs);\n+    }\n+\n+    @Benchmark\n+    public void maskCompressScalar(Blackhole bh) {\n+        boolean[] im = fmt.apply(size);\n+        boolean[] rm = new boolean[size];\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < im.length; i++) {\n+                if (im[i]) {\n+                    rm[j++] = im[i];\n+                }\n+            }\n+        }\n+\n+        bh.consume(rm);\n+    }\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/DoubleScalar.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -774,0 +774,51 @@\n+    @Benchmark\n+    public Object compress() {\n+        float[] a = fa.apply(size);\n+        float[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Float> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                av.compress(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object expand() {\n+        float[] a = fa.apply(size);\n+        float[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Float> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                av.expand(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object maskCompress() {\n+        boolean[] ms = fmt.apply(size);\n+        boolean[] rs = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < ms.length; i += SPECIES.length()) {\n+                VectorMask<Float> m = VectorMask.fromArray(SPECIES, ms, i);\n+                m.compress().intoArray(rs, j);\n+                j += m.trueCount();\n+            }\n+        }\n+\n+        return rs;\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float128Vector.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -774,0 +774,51 @@\n+    @Benchmark\n+    public Object compress() {\n+        float[] a = fa.apply(size);\n+        float[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Float> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                av.compress(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object expand() {\n+        float[] a = fa.apply(size);\n+        float[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Float> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                av.expand(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object maskCompress() {\n+        boolean[] ms = fmt.apply(size);\n+        boolean[] rs = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < ms.length; i += SPECIES.length()) {\n+                VectorMask<Float> m = VectorMask.fromArray(SPECIES, ms, i);\n+                m.compress().intoArray(rs, j);\n+                j += m.trueCount();\n+            }\n+        }\n+\n+        return rs;\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float256Vector.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -774,0 +774,51 @@\n+    @Benchmark\n+    public Object compress() {\n+        float[] a = fa.apply(size);\n+        float[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Float> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                av.compress(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object expand() {\n+        float[] a = fa.apply(size);\n+        float[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Float> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                av.expand(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object maskCompress() {\n+        boolean[] ms = fmt.apply(size);\n+        boolean[] rs = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < ms.length; i += SPECIES.length()) {\n+                VectorMask<Float> m = VectorMask.fromArray(SPECIES, ms, i);\n+                m.compress().intoArray(rs, j);\n+                j += m.trueCount();\n+            }\n+        }\n+\n+        return rs;\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float512Vector.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -774,0 +774,51 @@\n+    @Benchmark\n+    public Object compress() {\n+        float[] a = fa.apply(size);\n+        float[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Float> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                av.compress(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object expand() {\n+        float[] a = fa.apply(size);\n+        float[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Float> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                av.expand(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object maskCompress() {\n+        boolean[] ms = fmt.apply(size);\n+        boolean[] rs = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < ms.length; i += SPECIES.length()) {\n+                VectorMask<Float> m = VectorMask.fromArray(SPECIES, ms, i);\n+                m.compress().intoArray(rs, j);\n+                j += m.trueCount();\n+            }\n+        }\n+\n+        return rs;\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float64Vector.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -774,0 +774,51 @@\n+    @Benchmark\n+    public Object compress() {\n+        float[] a = fa.apply(size);\n+        float[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Float> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                av.compress(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object expand() {\n+        float[] a = fa.apply(size);\n+        float[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Float> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                av.expand(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object maskCompress() {\n+        boolean[] ms = fmt.apply(size);\n+        boolean[] rs = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < ms.length; i += SPECIES.length()) {\n+                VectorMask<Float> m = VectorMask.fromArray(SPECIES, ms, i);\n+                m.compress().intoArray(rs, j);\n+                j += m.trueCount();\n+            }\n+        }\n+\n+        return rs;\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/FloatMaxVector.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -744,0 +744,50 @@\n+\n+    @Benchmark\n+    public void compressScalar(Blackhole bh) {\n+        float[] as = fa.apply(size);\n+        float[] rs = new float[size];\n+        boolean[] im = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < as.length; i++) {\n+                if (im[i]) {\n+                    rs[j++] = as[i];\n+                }\n+            }\n+        }\n+\n+        bh.consume(rs);\n+    }\n+\n+    @Benchmark\n+    public void expandScalar(Blackhole bh) {\n+        float[] as = fa.apply(size);\n+        float[] rs = new float[size];\n+        boolean[] im = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < as.length; i++) {\n+                if (im[i]) {\n+                    rs[i++] = as[j++];\n+                }\n+            }\n+        }\n+\n+        bh.consume(rs);\n+    }\n+\n+    @Benchmark\n+    public void maskCompressScalar(Blackhole bh) {\n+        boolean[] im = fmt.apply(size);\n+        boolean[] rm = new boolean[size];\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < im.length; i++) {\n+                if (im[i]) {\n+                    rm[j++] = im[i];\n+                }\n+            }\n+        }\n+\n+        bh.consume(rm);\n+    }\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/FloatScalar.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -1476,0 +1476,51 @@\n+    @Benchmark\n+    public Object compress() {\n+        int[] a = fa.apply(size);\n+        int[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Integer> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                av.compress(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object expand() {\n+        int[] a = fa.apply(size);\n+        int[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Integer> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                av.expand(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object maskCompress() {\n+        boolean[] ms = fmt.apply(size);\n+        boolean[] rs = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < ms.length; i += SPECIES.length()) {\n+                VectorMask<Integer> m = VectorMask.fromArray(SPECIES, ms, i);\n+                m.compress().intoArray(rs, j);\n+                j += m.trueCount();\n+            }\n+        }\n+\n+        return rs;\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int128Vector.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -1476,0 +1476,51 @@\n+    @Benchmark\n+    public Object compress() {\n+        int[] a = fa.apply(size);\n+        int[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Integer> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                av.compress(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object expand() {\n+        int[] a = fa.apply(size);\n+        int[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Integer> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                av.expand(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object maskCompress() {\n+        boolean[] ms = fmt.apply(size);\n+        boolean[] rs = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < ms.length; i += SPECIES.length()) {\n+                VectorMask<Integer> m = VectorMask.fromArray(SPECIES, ms, i);\n+                m.compress().intoArray(rs, j);\n+                j += m.trueCount();\n+            }\n+        }\n+\n+        return rs;\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int256Vector.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -1476,0 +1476,51 @@\n+    @Benchmark\n+    public Object compress() {\n+        int[] a = fa.apply(size);\n+        int[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Integer> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                av.compress(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object expand() {\n+        int[] a = fa.apply(size);\n+        int[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Integer> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                av.expand(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object maskCompress() {\n+        boolean[] ms = fmt.apply(size);\n+        boolean[] rs = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < ms.length; i += SPECIES.length()) {\n+                VectorMask<Integer> m = VectorMask.fromArray(SPECIES, ms, i);\n+                m.compress().intoArray(rs, j);\n+                j += m.trueCount();\n+            }\n+        }\n+\n+        return rs;\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int512Vector.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -1476,0 +1476,51 @@\n+    @Benchmark\n+    public Object compress() {\n+        int[] a = fa.apply(size);\n+        int[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Integer> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                av.compress(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object expand() {\n+        int[] a = fa.apply(size);\n+        int[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Integer> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                av.expand(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object maskCompress() {\n+        boolean[] ms = fmt.apply(size);\n+        boolean[] rs = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < ms.length; i += SPECIES.length()) {\n+                VectorMask<Integer> m = VectorMask.fromArray(SPECIES, ms, i);\n+                m.compress().intoArray(rs, j);\n+                j += m.trueCount();\n+            }\n+        }\n+\n+        return rs;\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int64Vector.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -1476,0 +1476,51 @@\n+    @Benchmark\n+    public Object compress() {\n+        int[] a = fa.apply(size);\n+        int[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Integer> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                av.compress(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object expand() {\n+        int[] a = fa.apply(size);\n+        int[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Integer> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                av.expand(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object maskCompress() {\n+        boolean[] ms = fmt.apply(size);\n+        boolean[] rs = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < ms.length; i += SPECIES.length()) {\n+                VectorMask<Integer> m = VectorMask.fromArray(SPECIES, ms, i);\n+                m.compress().intoArray(rs, j);\n+                j += m.trueCount();\n+            }\n+        }\n+\n+        return rs;\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/IntMaxVector.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -1410,0 +1410,50 @@\n+\n+    @Benchmark\n+    public void compressScalar(Blackhole bh) {\n+        int[] as = fa.apply(size);\n+        int[] rs = new int[size];\n+        boolean[] im = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < as.length; i++) {\n+                if (im[i]) {\n+                    rs[j++] = as[i];\n+                }\n+            }\n+        }\n+\n+        bh.consume(rs);\n+    }\n+\n+    @Benchmark\n+    public void expandScalar(Blackhole bh) {\n+        int[] as = fa.apply(size);\n+        int[] rs = new int[size];\n+        boolean[] im = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < as.length; i++) {\n+                if (im[i]) {\n+                    rs[i++] = as[j++];\n+                }\n+            }\n+        }\n+\n+        bh.consume(rs);\n+    }\n+\n+    @Benchmark\n+    public void maskCompressScalar(Blackhole bh) {\n+        boolean[] im = fmt.apply(size);\n+        boolean[] rm = new boolean[size];\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < im.length; i++) {\n+                if (im[i]) {\n+                    rm[j++] = im[i];\n+                }\n+            }\n+        }\n+\n+        bh.consume(rm);\n+    }\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/IntScalar.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -1476,0 +1476,51 @@\n+    @Benchmark\n+    public Object compress() {\n+        long[] a = fa.apply(size);\n+        long[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Long> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                av.compress(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object expand() {\n+        long[] a = fa.apply(size);\n+        long[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Long> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                av.expand(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object maskCompress() {\n+        boolean[] ms = fmt.apply(size);\n+        boolean[] rs = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < ms.length; i += SPECIES.length()) {\n+                VectorMask<Long> m = VectorMask.fromArray(SPECIES, ms, i);\n+                m.compress().intoArray(rs, j);\n+                j += m.trueCount();\n+            }\n+        }\n+\n+        return rs;\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long128Vector.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -1476,0 +1476,51 @@\n+    @Benchmark\n+    public Object compress() {\n+        long[] a = fa.apply(size);\n+        long[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Long> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                av.compress(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object expand() {\n+        long[] a = fa.apply(size);\n+        long[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Long> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                av.expand(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object maskCompress() {\n+        boolean[] ms = fmt.apply(size);\n+        boolean[] rs = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < ms.length; i += SPECIES.length()) {\n+                VectorMask<Long> m = VectorMask.fromArray(SPECIES, ms, i);\n+                m.compress().intoArray(rs, j);\n+                j += m.trueCount();\n+            }\n+        }\n+\n+        return rs;\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long256Vector.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -1476,0 +1476,51 @@\n+    @Benchmark\n+    public Object compress() {\n+        long[] a = fa.apply(size);\n+        long[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Long> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                av.compress(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object expand() {\n+        long[] a = fa.apply(size);\n+        long[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Long> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                av.expand(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object maskCompress() {\n+        boolean[] ms = fmt.apply(size);\n+        boolean[] rs = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < ms.length; i += SPECIES.length()) {\n+                VectorMask<Long> m = VectorMask.fromArray(SPECIES, ms, i);\n+                m.compress().intoArray(rs, j);\n+                j += m.trueCount();\n+            }\n+        }\n+\n+        return rs;\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long512Vector.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -1476,0 +1476,51 @@\n+    @Benchmark\n+    public Object compress() {\n+        long[] a = fa.apply(size);\n+        long[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Long> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                av.compress(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object expand() {\n+        long[] a = fa.apply(size);\n+        long[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Long> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                av.expand(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object maskCompress() {\n+        boolean[] ms = fmt.apply(size);\n+        boolean[] rs = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < ms.length; i += SPECIES.length()) {\n+                VectorMask<Long> m = VectorMask.fromArray(SPECIES, ms, i);\n+                m.compress().intoArray(rs, j);\n+                j += m.trueCount();\n+            }\n+        }\n+\n+        return rs;\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long64Vector.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -1476,0 +1476,51 @@\n+    @Benchmark\n+    public Object compress() {\n+        long[] a = fa.apply(size);\n+        long[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Long> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                av.compress(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object expand() {\n+        long[] a = fa.apply(size);\n+        long[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Long> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                av.expand(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object maskCompress() {\n+        boolean[] ms = fmt.apply(size);\n+        boolean[] rs = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < ms.length; i += SPECIES.length()) {\n+                VectorMask<Long> m = VectorMask.fromArray(SPECIES, ms, i);\n+                m.compress().intoArray(rs, j);\n+                j += m.trueCount();\n+            }\n+        }\n+\n+        return rs;\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/LongMaxVector.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -1410,0 +1410,50 @@\n+\n+    @Benchmark\n+    public void compressScalar(Blackhole bh) {\n+        long[] as = fa.apply(size);\n+        long[] rs = new long[size];\n+        boolean[] im = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < as.length; i++) {\n+                if (im[i]) {\n+                    rs[j++] = as[i];\n+                }\n+            }\n+        }\n+\n+        bh.consume(rs);\n+    }\n+\n+    @Benchmark\n+    public void expandScalar(Blackhole bh) {\n+        long[] as = fa.apply(size);\n+        long[] rs = new long[size];\n+        boolean[] im = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < as.length; i++) {\n+                if (im[i]) {\n+                    rs[i++] = as[j++];\n+                }\n+            }\n+        }\n+\n+        bh.consume(rs);\n+    }\n+\n+    @Benchmark\n+    public void maskCompressScalar(Blackhole bh) {\n+        boolean[] im = fmt.apply(size);\n+        boolean[] rm = new boolean[size];\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < im.length; i++) {\n+                if (im[i]) {\n+                    rm[j++] = im[i];\n+                }\n+            }\n+        }\n+\n+        bh.consume(rm);\n+    }\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/LongScalar.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -1476,0 +1476,51 @@\n+    @Benchmark\n+    public Object compress() {\n+        short[] a = fa.apply(size);\n+        short[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Short> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                av.compress(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object expand() {\n+        short[] a = fa.apply(size);\n+        short[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Short> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                av.expand(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object maskCompress() {\n+        boolean[] ms = fmt.apply(size);\n+        boolean[] rs = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < ms.length; i += SPECIES.length()) {\n+                VectorMask<Short> m = VectorMask.fromArray(SPECIES, ms, i);\n+                m.compress().intoArray(rs, j);\n+                j += m.trueCount();\n+            }\n+        }\n+\n+        return rs;\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short128Vector.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -1476,0 +1476,51 @@\n+    @Benchmark\n+    public Object compress() {\n+        short[] a = fa.apply(size);\n+        short[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Short> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                av.compress(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object expand() {\n+        short[] a = fa.apply(size);\n+        short[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Short> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                av.expand(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object maskCompress() {\n+        boolean[] ms = fmt.apply(size);\n+        boolean[] rs = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < ms.length; i += SPECIES.length()) {\n+                VectorMask<Short> m = VectorMask.fromArray(SPECIES, ms, i);\n+                m.compress().intoArray(rs, j);\n+                j += m.trueCount();\n+            }\n+        }\n+\n+        return rs;\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short256Vector.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -1476,0 +1476,51 @@\n+    @Benchmark\n+    public Object compress() {\n+        short[] a = fa.apply(size);\n+        short[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Short> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                av.compress(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object expand() {\n+        short[] a = fa.apply(size);\n+        short[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Short> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                av.expand(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object maskCompress() {\n+        boolean[] ms = fmt.apply(size);\n+        boolean[] rs = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < ms.length; i += SPECIES.length()) {\n+                VectorMask<Short> m = VectorMask.fromArray(SPECIES, ms, i);\n+                m.compress().intoArray(rs, j);\n+                j += m.trueCount();\n+            }\n+        }\n+\n+        return rs;\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short512Vector.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -1476,0 +1476,51 @@\n+    @Benchmark\n+    public Object compress() {\n+        short[] a = fa.apply(size);\n+        short[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Short> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                av.compress(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object expand() {\n+        short[] a = fa.apply(size);\n+        short[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Short> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                av.expand(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object maskCompress() {\n+        boolean[] ms = fmt.apply(size);\n+        boolean[] rs = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < ms.length; i += SPECIES.length()) {\n+                VectorMask<Short> m = VectorMask.fromArray(SPECIES, ms, i);\n+                m.compress().intoArray(rs, j);\n+                j += m.trueCount();\n+            }\n+        }\n+\n+        return rs;\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short64Vector.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -1476,0 +1476,51 @@\n+    @Benchmark\n+    public Object compress() {\n+        short[] a = fa.apply(size);\n+        short[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Short> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                av.compress(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object expand() {\n+        short[] a = fa.apply(size);\n+        short[] r = fb.apply(size);\n+        boolean[] ms = fmt.apply(size);\n+        VectorMask<Short> m = VectorMask.fromArray(SPECIES, ms, 0);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                av.expand(m).intoArray(r, i);\n+            }\n+        }\n+\n+        return r;\n+    }\n+\n+    @Benchmark\n+    public Object maskCompress() {\n+        boolean[] ms = fmt.apply(size);\n+        boolean[] rs = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < ms.length; i += SPECIES.length()) {\n+                VectorMask<Short> m = VectorMask.fromArray(SPECIES, ms, i);\n+                m.compress().intoArray(rs, j);\n+                j += m.trueCount();\n+            }\n+        }\n+\n+        return rs;\n+    }\n+\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ShortMaxVector.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -1410,0 +1410,50 @@\n+\n+    @Benchmark\n+    public void compressScalar(Blackhole bh) {\n+        short[] as = fa.apply(size);\n+        short[] rs = new short[size];\n+        boolean[] im = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < as.length; i++) {\n+                if (im[i]) {\n+                    rs[j++] = as[i];\n+                }\n+            }\n+        }\n+\n+        bh.consume(rs);\n+    }\n+\n+    @Benchmark\n+    public void expandScalar(Blackhole bh) {\n+        short[] as = fa.apply(size);\n+        short[] rs = new short[size];\n+        boolean[] im = fmt.apply(size);\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < as.length; i++) {\n+                if (im[i]) {\n+                    rs[i++] = as[j++];\n+                }\n+            }\n+        }\n+\n+        bh.consume(rs);\n+    }\n+\n+    @Benchmark\n+    public void maskCompressScalar(Blackhole bh) {\n+        boolean[] im = fmt.apply(size);\n+        boolean[] rm = new boolean[size];\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0, j = 0; i < im.length; i++) {\n+                if (im[i]) {\n+                    rm[j++] = im[i];\n+                }\n+            }\n+        }\n+\n+        bh.consume(rm);\n+    }\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ShortScalar.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"modified"}]}