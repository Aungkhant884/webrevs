{"files":[{"patch":"@@ -1703,1 +1703,7 @@\n-\n+  if (is_masked_op && mask == NULL) {\n+    if (C->print_intrinsics()) {\n+      tty->print_cr(\"  ** not supported: mask = null arity=2 op=comp\/%d vlen=%d etype=%s ismask=usestore is_masked_op=1\",\n+                    cond->get_con(), num_elem, type2name(elem_bt));\n+    }\n+    return false;\n+  }\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1327,1 +1327,0 @@\n-\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -378,1 +378,1 @@\n-        return super.compareTemplate(Byte128Mask.class, op, v, null);  \/\/ specialize\n+        return super.compareTemplate(Byte128Mask.class, op, v);  \/\/ specialize\n@@ -384,1 +384,1 @@\n-        return super.compareTemplate(Byte128Mask.class, op, broadcast(s), null);  \/\/ specialize\n+        return super.compareTemplate(Byte128Mask.class, op, s);  \/\/ specialize\n@@ -390,1 +390,1 @@\n-        return super.compareTemplate(Byte128Mask.class, op, broadcast(s), null);  \/\/ specialize\n+        return super.compareTemplate(Byte128Mask.class, op, s);  \/\/ specialize\n@@ -396,1 +396,1 @@\n-        return compareTemplate(Byte128Mask.class, op, v, ((Byte128Mask)m));\n+        return super.compareTemplate(Byte128Mask.class, op, v, (Byte128Mask) m);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte128Vector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -378,1 +378,1 @@\n-        return super.compareTemplate(Byte256Mask.class, op, v, null);  \/\/ specialize\n+        return super.compareTemplate(Byte256Mask.class, op, v);  \/\/ specialize\n@@ -384,1 +384,1 @@\n-        return super.compareTemplate(Byte256Mask.class, op, broadcast(s), null);  \/\/ specialize\n+        return super.compareTemplate(Byte256Mask.class, op, s);  \/\/ specialize\n@@ -390,1 +390,1 @@\n-        return super.compareTemplate(Byte256Mask.class, op, broadcast(s), null);  \/\/ specialize\n+        return super.compareTemplate(Byte256Mask.class, op, s);  \/\/ specialize\n@@ -396,1 +396,1 @@\n-        return compareTemplate(Byte256Mask.class, op, v, ((Byte256Mask)m));\n+        return super.compareTemplate(Byte256Mask.class, op, v, (Byte256Mask) m);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte256Vector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -378,1 +378,1 @@\n-        return super.compareTemplate(Byte512Mask.class, op, v, null);  \/\/ specialize\n+        return super.compareTemplate(Byte512Mask.class, op, v);  \/\/ specialize\n@@ -384,1 +384,1 @@\n-        return super.compareTemplate(Byte512Mask.class, op, broadcast(s), null);  \/\/ specialize\n+        return super.compareTemplate(Byte512Mask.class, op, s);  \/\/ specialize\n@@ -390,1 +390,1 @@\n-        return super.compareTemplate(Byte512Mask.class, op, broadcast(s), null);  \/\/ specialize\n+        return super.compareTemplate(Byte512Mask.class, op, s);  \/\/ specialize\n@@ -396,1 +396,1 @@\n-        return compareTemplate(Byte512Mask.class, op, v, ((Byte512Mask)m));\n+        return super.compareTemplate(Byte512Mask.class, op, v, (Byte512Mask) m);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte512Vector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -378,1 +378,1 @@\n-        return super.compareTemplate(Byte64Mask.class, op, v, null);  \/\/ specialize\n+        return super.compareTemplate(Byte64Mask.class, op, v);  \/\/ specialize\n@@ -384,1 +384,1 @@\n-        return super.compareTemplate(Byte64Mask.class, op, broadcast(s), null);  \/\/ specialize\n+        return super.compareTemplate(Byte64Mask.class, op, s);  \/\/ specialize\n@@ -390,1 +390,1 @@\n-        return super.compareTemplate(Byte64Mask.class, op, broadcast(s), null);  \/\/ specialize\n+        return super.compareTemplate(Byte64Mask.class, op, s);  \/\/ specialize\n@@ -396,1 +396,1 @@\n-        return compareTemplate(Byte64Mask.class, op, v, ((Byte64Mask)m));\n+        return super.compareTemplate(Byte64Mask.class, op, v, (Byte64Mask) m);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte64Vector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -378,1 +378,1 @@\n-        return super.compareTemplate(ByteMaxMask.class, op, v, null);  \/\/ specialize\n+        return super.compareTemplate(ByteMaxMask.class, op, v);  \/\/ specialize\n@@ -384,1 +384,1 @@\n-        return super.compareTemplate(ByteMaxMask.class, op, broadcast(s), null);  \/\/ specialize\n+        return super.compareTemplate(ByteMaxMask.class, op, s);  \/\/ specialize\n@@ -390,1 +390,1 @@\n-        return super.compareTemplate(ByteMaxMask.class, op, broadcast(s), null);  \/\/ specialize\n+        return super.compareTemplate(ByteMaxMask.class, op, s);  \/\/ specialize\n@@ -396,1 +396,1 @@\n-        return compareTemplate(ByteMaxMask.class, op, v, ((ByteMaxMask)m));\n+        return super.compareTemplate(ByteMaxMask.class, op, v, (ByteMaxMask) m);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteMaxVector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1884,0 +1884,23 @@\n+    \/*package-private*\/\n+    @ForceInline\n+    final\n+    <M extends VectorMask<Byte>>\n+    M compareTemplate(Class<M> maskType, Comparison op, Vector<Byte> v) {\n+        Objects.requireNonNull(v);\n+        ByteSpecies vsp = vspecies();\n+        ByteVector that = (ByteVector) v;\n+        that.check(this);\n+        int opc = opCode(op);\n+        return VectorSupport.compare(\n+            opc, getClass(), maskType, byte.class, length(),\n+            this, that, null,\n+            (cond, v0, v1, m1) -> {\n+                AbstractMask<Byte> m\n+                    = v0.bTest(cond, v1, (cond_, i, a, b)\n+                               -> compareWithOp(cond, a, b));\n+                @SuppressWarnings(\"unchecked\")\n+                M m2 = (M) m;\n+                return m2;\n+            });\n+    }\n+\n@@ -1890,0 +1913,1 @@\n+        Objects.requireNonNull(m);\n@@ -1902,1 +1926,1 @@\n-                M m2 = (M)((m1 != null) ? cmpM.and(m1) : cmpM);\n+                M m2 = (M) cmpM.and(m1);\n@@ -1950,0 +1974,8 @@\n+    \/*package-private*\/\n+    @ForceInline\n+    final\n+    <M extends VectorMask<Byte>>\n+    M compareTemplate(Class<M> maskType, Comparison op, byte e) {\n+        return compareTemplate(maskType, op, broadcast(e));\n+    }\n+\n@@ -1984,0 +2016,8 @@\n+    \/*package-private*\/\n+    @ForceInline\n+    final\n+    <M extends VectorMask<Byte>>\n+    M compareTemplate(Class<M> maskType, Comparison op, long e) {\n+        return compareTemplate(maskType, op, broadcast(e));\n+    }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteVector.java","additions":41,"deletions":1,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -365,1 +365,1 @@\n-        return super.compareTemplate(Double128Mask.class, op, v, null);  \/\/ specialize\n+        return super.compareTemplate(Double128Mask.class, op, v);  \/\/ specialize\n@@ -371,1 +371,1 @@\n-        return super.compareTemplate(Double128Mask.class, op, broadcast(s), null);  \/\/ specialize\n+        return super.compareTemplate(Double128Mask.class, op, s);  \/\/ specialize\n@@ -377,1 +377,1 @@\n-        return super.compareTemplate(Double128Mask.class, op, broadcast(s), null);  \/\/ specialize\n+        return super.compareTemplate(Double128Mask.class, op, s);  \/\/ specialize\n@@ -383,1 +383,1 @@\n-        return compareTemplate(Double128Mask.class, op, v, ((Double128Mask)m));\n+        return super.compareTemplate(Double128Mask.class, op, v, (Double128Mask) m);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double128Vector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -365,1 +365,1 @@\n-        return super.compareTemplate(Double256Mask.class, op, v, null);  \/\/ specialize\n+        return super.compareTemplate(Double256Mask.class, op, v);  \/\/ specialize\n@@ -371,1 +371,1 @@\n-        return super.compareTemplate(Double256Mask.class, op, broadcast(s), null);  \/\/ specialize\n+        return super.compareTemplate(Double256Mask.class, op, s);  \/\/ specialize\n@@ -377,1 +377,1 @@\n-        return super.compareTemplate(Double256Mask.class, op, broadcast(s), null);  \/\/ specialize\n+        return super.compareTemplate(Double256Mask.class, op, s);  \/\/ specialize\n@@ -383,1 +383,1 @@\n-        return compareTemplate(Double256Mask.class, op, v, ((Double256Mask)m));\n+        return super.compareTemplate(Double256Mask.class, op, v, (Double256Mask) m);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double256Vector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -365,1 +365,1 @@\n-        return super.compareTemplate(Double512Mask.class, op, v, null);  \/\/ specialize\n+        return super.compareTemplate(Double512Mask.class, op, v);  \/\/ specialize\n@@ -371,1 +371,1 @@\n-        return super.compareTemplate(Double512Mask.class, op, broadcast(s), null);  \/\/ specialize\n+        return super.compareTemplate(Double512Mask.class, op, s);  \/\/ specialize\n@@ -377,1 +377,1 @@\n-        return super.compareTemplate(Double512Mask.class, op, broadcast(s), null);  \/\/ specialize\n+        return super.compareTemplate(Double512Mask.class, op, s);  \/\/ specialize\n@@ -383,1 +383,1 @@\n-        return compareTemplate(Double512Mask.class, op, v, ((Double512Mask)m));\n+        return super.compareTemplate(Double512Mask.class, op, v, (Double512Mask) m);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double512Vector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -365,1 +365,1 @@\n-        return super.compareTemplate(Double64Mask.class, op, v, null);  \/\/ specialize\n+        return super.compareTemplate(Double64Mask.class, op, v);  \/\/ specialize\n@@ -371,1 +371,1 @@\n-        return super.compareTemplate(Double64Mask.class, op, broadcast(s), null);  \/\/ specialize\n+        return super.compareTemplate(Double64Mask.class, op, s);  \/\/ specialize\n@@ -377,1 +377,1 @@\n-        return super.compareTemplate(Double64Mask.class, op, broadcast(s), null);  \/\/ specialize\n+        return super.compareTemplate(Double64Mask.class, op, s);  \/\/ specialize\n@@ -383,1 +383,1 @@\n-        return compareTemplate(Double64Mask.class, op, v, ((Double64Mask)m));\n+        return super.compareTemplate(Double64Mask.class, op, v, (Double64Mask) m);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double64Vector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -365,1 +365,1 @@\n-        return super.compareTemplate(DoubleMaxMask.class, op, v, null);  \/\/ specialize\n+        return super.compareTemplate(DoubleMaxMask.class, op, v);  \/\/ specialize\n@@ -371,1 +371,1 @@\n-        return super.compareTemplate(DoubleMaxMask.class, op, broadcast(s), null);  \/\/ specialize\n+        return super.compareTemplate(DoubleMaxMask.class, op, s);  \/\/ specialize\n@@ -377,1 +377,1 @@\n-        return super.compareTemplate(DoubleMaxMask.class, op, broadcast(s), null);  \/\/ specialize\n+        return super.compareTemplate(DoubleMaxMask.class, op, s);  \/\/ specialize\n@@ -383,1 +383,1 @@\n-        return compareTemplate(DoubleMaxMask.class, op, v, ((DoubleMaxMask)m));\n+        return super.compareTemplate(DoubleMaxMask.class, op, v, (DoubleMaxMask) m);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleMaxVector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1740,0 +1740,23 @@\n+    \/*package-private*\/\n+    @ForceInline\n+    final\n+    <M extends VectorMask<Double>>\n+    M compareTemplate(Class<M> maskType, Comparison op, Vector<Double> v) {\n+        Objects.requireNonNull(v);\n+        DoubleSpecies vsp = vspecies();\n+        DoubleVector that = (DoubleVector) v;\n+        that.check(this);\n+        int opc = opCode(op);\n+        return VectorSupport.compare(\n+            opc, getClass(), maskType, double.class, length(),\n+            this, that, null,\n+            (cond, v0, v1, m1) -> {\n+                AbstractMask<Double> m\n+                    = v0.bTest(cond, v1, (cond_, i, a, b)\n+                               -> compareWithOp(cond, a, b));\n+                @SuppressWarnings(\"unchecked\")\n+                M m2 = (M) m;\n+                return m2;\n+            });\n+    }\n+\n@@ -1746,0 +1769,1 @@\n+        Objects.requireNonNull(m);\n@@ -1758,1 +1782,1 @@\n-                M m2 = (M)((m1 != null) ? cmpM.and(m1) : cmpM);\n+                M m2 = (M) cmpM.and(m1);\n@@ -1802,0 +1826,8 @@\n+    \/*package-private*\/\n+    @ForceInline\n+    final\n+    <M extends VectorMask<Double>>\n+    M compareTemplate(Class<M> maskType, Comparison op, double e) {\n+        return compareTemplate(maskType, op, broadcast(e));\n+    }\n+\n@@ -1836,0 +1868,8 @@\n+    \/*package-private*\/\n+    @ForceInline\n+    final\n+    <M extends VectorMask<Double>>\n+    M compareTemplate(Class<M> maskType, Comparison op, long e) {\n+        return compareTemplate(maskType, op, broadcast(e));\n+    }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleVector.java","additions":41,"deletions":1,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -365,1 +365,1 @@\n-        return super.compareTemplate(Float128Mask.class, op, v, null);  \/\/ specialize\n+        return super.compareTemplate(Float128Mask.class, op, v);  \/\/ specialize\n@@ -371,1 +371,1 @@\n-        return super.compareTemplate(Float128Mask.class, op, broadcast(s), null);  \/\/ specialize\n+        return super.compareTemplate(Float128Mask.class, op, s);  \/\/ specialize\n@@ -377,1 +377,1 @@\n-        return super.compareTemplate(Float128Mask.class, op, broadcast(s), null);  \/\/ specialize\n+        return super.compareTemplate(Float128Mask.class, op, s);  \/\/ specialize\n@@ -383,1 +383,1 @@\n-        return compareTemplate(Float128Mask.class, op, v, ((Float128Mask)m));\n+        return super.compareTemplate(Float128Mask.class, op, v, (Float128Mask) m);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float128Vector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -365,1 +365,1 @@\n-        return super.compareTemplate(Float256Mask.class, op, v, null);  \/\/ specialize\n+        return super.compareTemplate(Float256Mask.class, op, v);  \/\/ specialize\n@@ -371,1 +371,1 @@\n-        return super.compareTemplate(Float256Mask.class, op, broadcast(s), null);  \/\/ specialize\n+        return super.compareTemplate(Float256Mask.class, op, s);  \/\/ specialize\n@@ -377,1 +377,1 @@\n-        return super.compareTemplate(Float256Mask.class, op, broadcast(s), null);  \/\/ specialize\n+        return super.compareTemplate(Float256Mask.class, op, s);  \/\/ specialize\n@@ -383,1 +383,1 @@\n-        return compareTemplate(Float256Mask.class, op, v, ((Float256Mask)m));\n+        return super.compareTemplate(Float256Mask.class, op, v, (Float256Mask) m);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float256Vector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -365,1 +365,1 @@\n-        return super.compareTemplate(Float512Mask.class, op, v, null);  \/\/ specialize\n+        return super.compareTemplate(Float512Mask.class, op, v);  \/\/ specialize\n@@ -371,1 +371,1 @@\n-        return super.compareTemplate(Float512Mask.class, op, broadcast(s), null);  \/\/ specialize\n+        return super.compareTemplate(Float512Mask.class, op, s);  \/\/ specialize\n@@ -377,1 +377,1 @@\n-        return super.compareTemplate(Float512Mask.class, op, broadcast(s), null);  \/\/ specialize\n+        return super.compareTemplate(Float512Mask.class, op, s);  \/\/ specialize\n@@ -383,1 +383,1 @@\n-        return compareTemplate(Float512Mask.class, op, v, ((Float512Mask)m));\n+        return super.compareTemplate(Float512Mask.class, op, v, (Float512Mask) m);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float512Vector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -365,1 +365,1 @@\n-        return super.compareTemplate(Float64Mask.class, op, v, null);  \/\/ specialize\n+        return super.compareTemplate(Float64Mask.class, op, v);  \/\/ specialize\n@@ -371,1 +371,1 @@\n-        return super.compareTemplate(Float64Mask.class, op, broadcast(s), null);  \/\/ specialize\n+        return super.compareTemplate(Float64Mask.class, op, s);  \/\/ specialize\n@@ -377,1 +377,1 @@\n-        return super.compareTemplate(Float64Mask.class, op, broadcast(s), null);  \/\/ specialize\n+        return super.compareTemplate(Float64Mask.class, op, s);  \/\/ specialize\n@@ -383,1 +383,1 @@\n-        return compareTemplate(Float64Mask.class, op, v, ((Float64Mask)m));\n+        return super.compareTemplate(Float64Mask.class, op, v, (Float64Mask) m);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float64Vector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -365,1 +365,1 @@\n-        return super.compareTemplate(FloatMaxMask.class, op, v, null);  \/\/ specialize\n+        return super.compareTemplate(FloatMaxMask.class, op, v);  \/\/ specialize\n@@ -371,1 +371,1 @@\n-        return super.compareTemplate(FloatMaxMask.class, op, broadcast(s), null);  \/\/ specialize\n+        return super.compareTemplate(FloatMaxMask.class, op, s);  \/\/ specialize\n@@ -377,1 +377,1 @@\n-        return super.compareTemplate(FloatMaxMask.class, op, broadcast(s), null);  \/\/ specialize\n+        return super.compareTemplate(FloatMaxMask.class, op, s);  \/\/ specialize\n@@ -383,1 +383,1 @@\n-        return compareTemplate(FloatMaxMask.class, op, v, ((FloatMaxMask)m));\n+        return super.compareTemplate(FloatMaxMask.class, op, v, (FloatMaxMask) m);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatMaxVector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1752,0 +1752,23 @@\n+    \/*package-private*\/\n+    @ForceInline\n+    final\n+    <M extends VectorMask<Float>>\n+    M compareTemplate(Class<M> maskType, Comparison op, Vector<Float> v) {\n+        Objects.requireNonNull(v);\n+        FloatSpecies vsp = vspecies();\n+        FloatVector that = (FloatVector) v;\n+        that.check(this);\n+        int opc = opCode(op);\n+        return VectorSupport.compare(\n+            opc, getClass(), maskType, float.class, length(),\n+            this, that, null,\n+            (cond, v0, v1, m1) -> {\n+                AbstractMask<Float> m\n+                    = v0.bTest(cond, v1, (cond_, i, a, b)\n+                               -> compareWithOp(cond, a, b));\n+                @SuppressWarnings(\"unchecked\")\n+                M m2 = (M) m;\n+                return m2;\n+            });\n+    }\n+\n@@ -1758,0 +1781,1 @@\n+        Objects.requireNonNull(m);\n@@ -1770,1 +1794,1 @@\n-                M m2 = (M)((m1 != null) ? cmpM.and(m1) : cmpM);\n+                M m2 = (M) cmpM.and(m1);\n@@ -1814,0 +1838,8 @@\n+    \/*package-private*\/\n+    @ForceInline\n+    final\n+    <M extends VectorMask<Float>>\n+    M compareTemplate(Class<M> maskType, Comparison op, float e) {\n+        return compareTemplate(maskType, op, broadcast(e));\n+    }\n+\n@@ -1848,0 +1880,8 @@\n+    \/*package-private*\/\n+    @ForceInline\n+    final\n+    <M extends VectorMask<Float>>\n+    M compareTemplate(Class<M> maskType, Comparison op, long e) {\n+        return compareTemplate(maskType, op, broadcast(e));\n+    }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatVector.java","additions":41,"deletions":1,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -378,1 +378,1 @@\n-        return super.compareTemplate(Int128Mask.class, op, v, null);  \/\/ specialize\n+        return super.compareTemplate(Int128Mask.class, op, v);  \/\/ specialize\n@@ -384,1 +384,1 @@\n-        return super.compareTemplate(Int128Mask.class, op, broadcast(s), null);  \/\/ specialize\n+        return super.compareTemplate(Int128Mask.class, op, s);  \/\/ specialize\n@@ -390,1 +390,1 @@\n-        return super.compareTemplate(Int128Mask.class, op, broadcast(s), null);  \/\/ specialize\n+        return super.compareTemplate(Int128Mask.class, op, s);  \/\/ specialize\n@@ -396,1 +396,1 @@\n-        return compareTemplate(Int128Mask.class, op, v, ((Int128Mask)m));\n+        return super.compareTemplate(Int128Mask.class, op, v, (Int128Mask) m);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int128Vector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -378,1 +378,1 @@\n-        return super.compareTemplate(Int256Mask.class, op, v, null);  \/\/ specialize\n+        return super.compareTemplate(Int256Mask.class, op, v);  \/\/ specialize\n@@ -384,1 +384,1 @@\n-        return super.compareTemplate(Int256Mask.class, op, broadcast(s), null);  \/\/ specialize\n+        return super.compareTemplate(Int256Mask.class, op, s);  \/\/ specialize\n@@ -390,1 +390,1 @@\n-        return super.compareTemplate(Int256Mask.class, op, broadcast(s), null);  \/\/ specialize\n+        return super.compareTemplate(Int256Mask.class, op, s);  \/\/ specialize\n@@ -396,1 +396,1 @@\n-        return compareTemplate(Int256Mask.class, op, v, ((Int256Mask)m));\n+        return super.compareTemplate(Int256Mask.class, op, v, (Int256Mask) m);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int256Vector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -378,1 +378,1 @@\n-        return super.compareTemplate(Int512Mask.class, op, v, null);  \/\/ specialize\n+        return super.compareTemplate(Int512Mask.class, op, v);  \/\/ specialize\n@@ -384,1 +384,1 @@\n-        return super.compareTemplate(Int512Mask.class, op, broadcast(s), null);  \/\/ specialize\n+        return super.compareTemplate(Int512Mask.class, op, s);  \/\/ specialize\n@@ -390,1 +390,1 @@\n-        return super.compareTemplate(Int512Mask.class, op, broadcast(s), null);  \/\/ specialize\n+        return super.compareTemplate(Int512Mask.class, op, s);  \/\/ specialize\n@@ -396,1 +396,1 @@\n-        return compareTemplate(Int512Mask.class, op, v, ((Int512Mask)m));\n+        return super.compareTemplate(Int512Mask.class, op, v, (Int512Mask) m);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int512Vector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -378,1 +378,1 @@\n-        return super.compareTemplate(Int64Mask.class, op, v, null);  \/\/ specialize\n+        return super.compareTemplate(Int64Mask.class, op, v);  \/\/ specialize\n@@ -384,1 +384,1 @@\n-        return super.compareTemplate(Int64Mask.class, op, broadcast(s), null);  \/\/ specialize\n+        return super.compareTemplate(Int64Mask.class, op, s);  \/\/ specialize\n@@ -390,1 +390,1 @@\n-        return super.compareTemplate(Int64Mask.class, op, broadcast(s), null);  \/\/ specialize\n+        return super.compareTemplate(Int64Mask.class, op, s);  \/\/ specialize\n@@ -396,1 +396,1 @@\n-        return compareTemplate(Int64Mask.class, op, v, ((Int64Mask)m));\n+        return super.compareTemplate(Int64Mask.class, op, v, (Int64Mask) m);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int64Vector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -378,1 +378,1 @@\n-        return super.compareTemplate(IntMaxMask.class, op, v, null);  \/\/ specialize\n+        return super.compareTemplate(IntMaxMask.class, op, v);  \/\/ specialize\n@@ -384,1 +384,1 @@\n-        return super.compareTemplate(IntMaxMask.class, op, broadcast(s), null);  \/\/ specialize\n+        return super.compareTemplate(IntMaxMask.class, op, s);  \/\/ specialize\n@@ -390,1 +390,1 @@\n-        return super.compareTemplate(IntMaxMask.class, op, broadcast(s), null);  \/\/ specialize\n+        return super.compareTemplate(IntMaxMask.class, op, s);  \/\/ specialize\n@@ -396,1 +396,1 @@\n-        return compareTemplate(IntMaxMask.class, op, v, ((IntMaxMask)m));\n+        return super.compareTemplate(IntMaxMask.class, op, v, (IntMaxMask) m);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntMaxVector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1883,0 +1883,23 @@\n+    \/*package-private*\/\n+    @ForceInline\n+    final\n+    <M extends VectorMask<Integer>>\n+    M compareTemplate(Class<M> maskType, Comparison op, Vector<Integer> v) {\n+        Objects.requireNonNull(v);\n+        IntSpecies vsp = vspecies();\n+        IntVector that = (IntVector) v;\n+        that.check(this);\n+        int opc = opCode(op);\n+        return VectorSupport.compare(\n+            opc, getClass(), maskType, int.class, length(),\n+            this, that, null,\n+            (cond, v0, v1, m1) -> {\n+                AbstractMask<Integer> m\n+                    = v0.bTest(cond, v1, (cond_, i, a, b)\n+                               -> compareWithOp(cond, a, b));\n+                @SuppressWarnings(\"unchecked\")\n+                M m2 = (M) m;\n+                return m2;\n+            });\n+    }\n+\n@@ -1889,0 +1912,1 @@\n+        Objects.requireNonNull(m);\n@@ -1901,1 +1925,1 @@\n-                M m2 = (M)((m1 != null) ? cmpM.and(m1) : cmpM);\n+                M m2 = (M) cmpM.and(m1);\n@@ -1949,0 +1973,8 @@\n+    \/*package-private*\/\n+    @ForceInline\n+    final\n+    <M extends VectorMask<Integer>>\n+    M compareTemplate(Class<M> maskType, Comparison op, int e) {\n+        return compareTemplate(maskType, op, broadcast(e));\n+    }\n+\n@@ -1983,0 +2015,8 @@\n+    \/*package-private*\/\n+    @ForceInline\n+    final\n+    <M extends VectorMask<Integer>>\n+    M compareTemplate(Class<M> maskType, Comparison op, long e) {\n+        return compareTemplate(maskType, op, broadcast(e));\n+    }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntVector.java","additions":41,"deletions":1,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -373,1 +373,1 @@\n-        return super.compareTemplate(Long128Mask.class, op, v, null);  \/\/ specialize\n+        return super.compareTemplate(Long128Mask.class, op, v);  \/\/ specialize\n@@ -379,1 +379,1 @@\n-        return super.compareTemplate(Long128Mask.class, op, broadcast(s), null);  \/\/ specialize\n+        return super.compareTemplate(Long128Mask.class, op, s);  \/\/ specialize\n@@ -386,1 +386,1 @@\n-        return compareTemplate(Long128Mask.class, op, v, ((Long128Mask)m));\n+        return super.compareTemplate(Long128Mask.class, op, v, (Long128Mask) m);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long128Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -373,1 +373,1 @@\n-        return super.compareTemplate(Long256Mask.class, op, v, null);  \/\/ specialize\n+        return super.compareTemplate(Long256Mask.class, op, v);  \/\/ specialize\n@@ -379,1 +379,1 @@\n-        return super.compareTemplate(Long256Mask.class, op, broadcast(s), null);  \/\/ specialize\n+        return super.compareTemplate(Long256Mask.class, op, s);  \/\/ specialize\n@@ -386,1 +386,1 @@\n-        return compareTemplate(Long256Mask.class, op, v, ((Long256Mask)m));\n+        return super.compareTemplate(Long256Mask.class, op, v, (Long256Mask) m);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long256Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -373,1 +373,1 @@\n-        return super.compareTemplate(Long512Mask.class, op, v, null);  \/\/ specialize\n+        return super.compareTemplate(Long512Mask.class, op, v);  \/\/ specialize\n@@ -379,1 +379,1 @@\n-        return super.compareTemplate(Long512Mask.class, op, broadcast(s), null);  \/\/ specialize\n+        return super.compareTemplate(Long512Mask.class, op, s);  \/\/ specialize\n@@ -386,1 +386,1 @@\n-        return compareTemplate(Long512Mask.class, op, v, ((Long512Mask)m));\n+        return super.compareTemplate(Long512Mask.class, op, v, (Long512Mask) m);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long512Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -373,1 +373,1 @@\n-        return super.compareTemplate(Long64Mask.class, op, v, null);  \/\/ specialize\n+        return super.compareTemplate(Long64Mask.class, op, v);  \/\/ specialize\n@@ -379,1 +379,1 @@\n-        return super.compareTemplate(Long64Mask.class, op, broadcast(s), null);  \/\/ specialize\n+        return super.compareTemplate(Long64Mask.class, op, s);  \/\/ specialize\n@@ -386,1 +386,1 @@\n-        return compareTemplate(Long64Mask.class, op, v, ((Long64Mask)m));\n+        return super.compareTemplate(Long64Mask.class, op, v, (Long64Mask) m);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long64Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -373,1 +373,1 @@\n-        return super.compareTemplate(LongMaxMask.class, op, v, null);  \/\/ specialize\n+        return super.compareTemplate(LongMaxMask.class, op, v);  \/\/ specialize\n@@ -379,1 +379,1 @@\n-        return super.compareTemplate(LongMaxMask.class, op, broadcast(s), null);  \/\/ specialize\n+        return super.compareTemplate(LongMaxMask.class, op, s);  \/\/ specialize\n@@ -386,1 +386,1 @@\n-        return compareTemplate(LongMaxMask.class, op, v, ((LongMaxMask)m));\n+        return super.compareTemplate(LongMaxMask.class, op, v, (LongMaxMask) m);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongMaxVector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1796,0 +1796,23 @@\n+    \/*package-private*\/\n+    @ForceInline\n+    final\n+    <M extends VectorMask<Long>>\n+    M compareTemplate(Class<M> maskType, Comparison op, Vector<Long> v) {\n+        Objects.requireNonNull(v);\n+        LongSpecies vsp = vspecies();\n+        LongVector that = (LongVector) v;\n+        that.check(this);\n+        int opc = opCode(op);\n+        return VectorSupport.compare(\n+            opc, getClass(), maskType, long.class, length(),\n+            this, that, null,\n+            (cond, v0, v1, m1) -> {\n+                AbstractMask<Long> m\n+                    = v0.bTest(cond, v1, (cond_, i, a, b)\n+                               -> compareWithOp(cond, a, b));\n+                @SuppressWarnings(\"unchecked\")\n+                M m2 = (M) m;\n+                return m2;\n+            });\n+    }\n+\n@@ -1802,0 +1825,1 @@\n+        Objects.requireNonNull(m);\n@@ -1814,1 +1838,1 @@\n-                M m2 = (M)((m1 != null) ? cmpM.and(m1) : cmpM);\n+                M m2 = (M) cmpM.and(m1);\n@@ -1862,0 +1886,8 @@\n+    \/*package-private*\/\n+    @ForceInline\n+    final\n+    <M extends VectorMask<Long>>\n+    M compareTemplate(Class<M> maskType, Comparison op, long e) {\n+        return compareTemplate(maskType, op, broadcast(e));\n+    }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongVector.java","additions":33,"deletions":1,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -378,1 +378,1 @@\n-        return super.compareTemplate(Short128Mask.class, op, v, null);  \/\/ specialize\n+        return super.compareTemplate(Short128Mask.class, op, v);  \/\/ specialize\n@@ -384,1 +384,1 @@\n-        return super.compareTemplate(Short128Mask.class, op, broadcast(s), null);  \/\/ specialize\n+        return super.compareTemplate(Short128Mask.class, op, s);  \/\/ specialize\n@@ -390,1 +390,1 @@\n-        return super.compareTemplate(Short128Mask.class, op, broadcast(s), null);  \/\/ specialize\n+        return super.compareTemplate(Short128Mask.class, op, s);  \/\/ specialize\n@@ -396,1 +396,1 @@\n-        return compareTemplate(Short128Mask.class, op, v, ((Short128Mask)m));\n+        return super.compareTemplate(Short128Mask.class, op, v, (Short128Mask) m);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short128Vector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -378,1 +378,1 @@\n-        return super.compareTemplate(Short256Mask.class, op, v, null);  \/\/ specialize\n+        return super.compareTemplate(Short256Mask.class, op, v);  \/\/ specialize\n@@ -384,1 +384,1 @@\n-        return super.compareTemplate(Short256Mask.class, op, broadcast(s), null);  \/\/ specialize\n+        return super.compareTemplate(Short256Mask.class, op, s);  \/\/ specialize\n@@ -390,1 +390,1 @@\n-        return super.compareTemplate(Short256Mask.class, op, broadcast(s), null);  \/\/ specialize\n+        return super.compareTemplate(Short256Mask.class, op, s);  \/\/ specialize\n@@ -396,1 +396,1 @@\n-        return compareTemplate(Short256Mask.class, op, v, ((Short256Mask)m));\n+        return super.compareTemplate(Short256Mask.class, op, v, (Short256Mask) m);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short256Vector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -378,1 +378,1 @@\n-        return super.compareTemplate(Short512Mask.class, op, v, null);  \/\/ specialize\n+        return super.compareTemplate(Short512Mask.class, op, v);  \/\/ specialize\n@@ -384,1 +384,1 @@\n-        return super.compareTemplate(Short512Mask.class, op, broadcast(s), null);  \/\/ specialize\n+        return super.compareTemplate(Short512Mask.class, op, s);  \/\/ specialize\n@@ -390,1 +390,1 @@\n-        return super.compareTemplate(Short512Mask.class, op, broadcast(s), null);  \/\/ specialize\n+        return super.compareTemplate(Short512Mask.class, op, s);  \/\/ specialize\n@@ -396,1 +396,1 @@\n-        return compareTemplate(Short512Mask.class, op, v, ((Short512Mask)m));\n+        return super.compareTemplate(Short512Mask.class, op, v, (Short512Mask) m);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short512Vector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -378,1 +378,1 @@\n-        return super.compareTemplate(Short64Mask.class, op, v, null);  \/\/ specialize\n+        return super.compareTemplate(Short64Mask.class, op, v);  \/\/ specialize\n@@ -384,1 +384,1 @@\n-        return super.compareTemplate(Short64Mask.class, op, broadcast(s), null);  \/\/ specialize\n+        return super.compareTemplate(Short64Mask.class, op, s);  \/\/ specialize\n@@ -390,1 +390,1 @@\n-        return super.compareTemplate(Short64Mask.class, op, broadcast(s), null);  \/\/ specialize\n+        return super.compareTemplate(Short64Mask.class, op, s);  \/\/ specialize\n@@ -396,1 +396,1 @@\n-        return compareTemplate(Short64Mask.class, op, v, ((Short64Mask)m));\n+        return super.compareTemplate(Short64Mask.class, op, v, (Short64Mask) m);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short64Vector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -378,1 +378,1 @@\n-        return super.compareTemplate(ShortMaxMask.class, op, v, null);  \/\/ specialize\n+        return super.compareTemplate(ShortMaxMask.class, op, v);  \/\/ specialize\n@@ -384,1 +384,1 @@\n-        return super.compareTemplate(ShortMaxMask.class, op, broadcast(s), null);  \/\/ specialize\n+        return super.compareTemplate(ShortMaxMask.class, op, s);  \/\/ specialize\n@@ -390,1 +390,1 @@\n-        return super.compareTemplate(ShortMaxMask.class, op, broadcast(s), null);  \/\/ specialize\n+        return super.compareTemplate(ShortMaxMask.class, op, s);  \/\/ specialize\n@@ -396,1 +396,1 @@\n-        return compareTemplate(ShortMaxMask.class, op, v, ((ShortMaxMask)m));\n+        return super.compareTemplate(ShortMaxMask.class, op, v, (ShortMaxMask) m);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortMaxVector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1884,0 +1884,23 @@\n+    \/*package-private*\/\n+    @ForceInline\n+    final\n+    <M extends VectorMask<Short>>\n+    M compareTemplate(Class<M> maskType, Comparison op, Vector<Short> v) {\n+        Objects.requireNonNull(v);\n+        ShortSpecies vsp = vspecies();\n+        ShortVector that = (ShortVector) v;\n+        that.check(this);\n+        int opc = opCode(op);\n+        return VectorSupport.compare(\n+            opc, getClass(), maskType, short.class, length(),\n+            this, that, null,\n+            (cond, v0, v1, m1) -> {\n+                AbstractMask<Short> m\n+                    = v0.bTest(cond, v1, (cond_, i, a, b)\n+                               -> compareWithOp(cond, a, b));\n+                @SuppressWarnings(\"unchecked\")\n+                M m2 = (M) m;\n+                return m2;\n+            });\n+    }\n+\n@@ -1890,0 +1913,1 @@\n+        Objects.requireNonNull(m);\n@@ -1902,1 +1926,1 @@\n-                M m2 = (M)((m1 != null) ? cmpM.and(m1) : cmpM);\n+                M m2 = (M) cmpM.and(m1);\n@@ -1950,0 +1974,8 @@\n+    \/*package-private*\/\n+    @ForceInline\n+    final\n+    <M extends VectorMask<Short>>\n+    M compareTemplate(Class<M> maskType, Comparison op, short e) {\n+        return compareTemplate(maskType, op, broadcast(e));\n+    }\n+\n@@ -1984,0 +2016,8 @@\n+    \/*package-private*\/\n+    @ForceInline\n+    final\n+    <M extends VectorMask<Short>>\n+    M compareTemplate(Class<M> maskType, Comparison op, long e) {\n+        return compareTemplate(maskType, op, broadcast(e));\n+    }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortVector.java","additions":41,"deletions":1,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -2165,0 +2165,23 @@\n+    \/*package-private*\/\n+    @ForceInline\n+    final\n+    <M extends VectorMask<$Boxtype$>>\n+    M compareTemplate(Class<M> maskType, Comparison op, Vector<$Boxtype$> v) {\n+        Objects.requireNonNull(v);\n+        $Type$Species vsp = vspecies();\n+        $abstractvectortype$ that = ($abstractvectortype$) v;\n+        that.check(this);\n+        int opc = opCode(op);\n+        return VectorSupport.compare(\n+            opc, getClass(), maskType, $type$.class, length(),\n+            this, that, null,\n+            (cond, v0, v1, m1) -> {\n+                AbstractMask<$Boxtype$> m\n+                    = v0.bTest(cond, v1, (cond_, i, a, b)\n+                               -> compareWithOp(cond, a, b));\n+                @SuppressWarnings(\"unchecked\")\n+                M m2 = (M) m;\n+                return m2;\n+            });\n+    }\n+\n@@ -2171,0 +2194,1 @@\n+        Objects.requireNonNull(m);\n@@ -2183,1 +2207,1 @@\n-                M m2 = (M)((m1 != null) ? cmpM.and(m1) : cmpM);\n+                M m2 = (M) cmpM.and(m1);\n@@ -2233,0 +2257,8 @@\n+    \/*package-private*\/\n+    @ForceInline\n+    final\n+    <M extends VectorMask<$Boxtype$>>\n+    M compareTemplate(Class<M> maskType, Comparison op, $type$ e) {\n+        return compareTemplate(maskType, op, broadcast(e));\n+    }\n+\n@@ -2268,0 +2300,8 @@\n+    \/*package-private*\/\n+    @ForceInline\n+    final\n+    <M extends VectorMask<$Boxtype$>>\n+    M compareTemplate(Class<M> maskType, Comparison op, long e) {\n+        return compareTemplate(maskType, op, broadcast(e));\n+    }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template","additions":41,"deletions":1,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -382,1 +382,1 @@\n-        return super.compareTemplate($masktype$.class, op, v, null);  \/\/ specialize\n+        return super.compareTemplate($masktype$.class, op, v);  \/\/ specialize\n@@ -388,1 +388,1 @@\n-        return super.compareTemplate($masktype$.class, op, broadcast(s), null);  \/\/ specialize\n+        return super.compareTemplate($masktype$.class, op, s);  \/\/ specialize\n@@ -395,1 +395,1 @@\n-        return super.compareTemplate($masktype$.class, op, broadcast(s), null);  \/\/ specialize\n+        return super.compareTemplate($masktype$.class, op, s);  \/\/ specialize\n@@ -402,1 +402,1 @@\n-        return compareTemplate($masktype$.class, op, v, (($masktype$)m));\n+        return super.compareTemplate($masktype$.class, op, v, ($masktype$) m);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-VectorBits.java.template","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}