{"files":[{"patch":"@@ -885,0 +885,1 @@\n+                                     \"Ljdk\/internal\/vm\/vector\/VectorSupport$VectorMask;\"                                                       \\\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1630,1 +1630,1 @@\n-\/\/            V v1, V v2,\n+\/\/            V v1, V v2, M m,\n@@ -1700,0 +1700,12 @@\n+  bool is_masked_op = argument(7)->bottom_type() != TypePtr::NULL_PTR;\n+  Node* mask = is_masked_op ? unbox_vector(argument(7), mbox_type, elem_bt, num_elem) : NULL;\n+  bool use_predicate = is_masked_op && arch_supports_vector(Op_VectorMaskCmp, num_elem, elem_bt, VecMaskUsePred);\n+\n+  if (is_masked_op && !use_predicate && !arch_supports_vector(Op_AndV, num_elem, elem_bt, VecMaskUseLoad)) {\n+    if (C->print_intrinsics()) {\n+      tty->print_cr(\"  ** not supported: arity=2 op=comp\/%d vlen=%d etype=%s ismask=usestore is_masked_op=1\",\n+                    cond->get_con(), num_elem, type2name(elem_bt));\n+    }\n+    return false;\n+  }\n+\n@@ -1707,1 +1719,13 @@\n-  Node* operation = gvn().transform(new VectorMaskCmpNode(pred, v1, v2, pred_node, vmask_type));\n+  Node* operation = new VectorMaskCmpNode(pred, v1, v2, pred_node, vmask_type);\n+\n+  if (is_masked_op) {\n+    if (use_predicate) {\n+      operation->add_req(mask);\n+      operation->add_flag(Node::Flag_is_predicated_vector);\n+    } else {\n+      operation = gvn().transform(operation);\n+      operation = VectorNode::make(Op_AndV, operation, mask, vmask_type);\n+    }\n+  }\n+\n+  operation = gvn().transform(operation);\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":26,"deletions":2,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -1327,0 +1327,1 @@\n+\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -434,1 +434,1 @@\n-        M apply(int cond, V v1, V v2);\n+        M apply(int cond, V v1, V v2, M m);\n@@ -442,1 +442,1 @@\n-              V v1, V v2,\n+              V v1, V v2, M m,\n@@ -445,1 +445,1 @@\n-        return defaultImpl.apply(cond, v1, v2);\n+        return defaultImpl.apply(cond, v1, v2, m);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/vector\/VectorSupport.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -378,1 +378,1 @@\n-        return super.compareTemplate(Byte128Mask.class, op, v);  \/\/ specialize\n+        return super.compareTemplate(Byte128Mask.class, op, v, null);  \/\/ specialize\n@@ -384,1 +384,1 @@\n-        return super.compareTemplate(Byte128Mask.class, op, s);  \/\/ specialize\n+        return super.compareTemplate(Byte128Mask.class, op, broadcast(s), null);  \/\/ specialize\n@@ -390,1 +390,1 @@\n-        return super.compareTemplate(Byte128Mask.class, op, s);  \/\/ specialize\n+        return super.compareTemplate(Byte128Mask.class, op, broadcast(s), null);  \/\/ specialize\n@@ -393,0 +393,7 @@\n+    @Override\n+    @ForceInline\n+    public final Byte128Mask compare(Comparison op, Vector<Byte> v, VectorMask<Byte> m) {\n+        return compareTemplate(Byte128Mask.class, op, v, ((Byte128Mask)m));\n+    }\n+\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte128Vector.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -378,1 +378,1 @@\n-        return super.compareTemplate(Byte256Mask.class, op, v);  \/\/ specialize\n+        return super.compareTemplate(Byte256Mask.class, op, v, null);  \/\/ specialize\n@@ -384,1 +384,1 @@\n-        return super.compareTemplate(Byte256Mask.class, op, s);  \/\/ specialize\n+        return super.compareTemplate(Byte256Mask.class, op, broadcast(s), null);  \/\/ specialize\n@@ -390,1 +390,1 @@\n-        return super.compareTemplate(Byte256Mask.class, op, s);  \/\/ specialize\n+        return super.compareTemplate(Byte256Mask.class, op, broadcast(s), null);  \/\/ specialize\n@@ -393,0 +393,7 @@\n+    @Override\n+    @ForceInline\n+    public final Byte256Mask compare(Comparison op, Vector<Byte> v, VectorMask<Byte> m) {\n+        return compareTemplate(Byte256Mask.class, op, v, ((Byte256Mask)m));\n+    }\n+\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte256Vector.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -378,1 +378,1 @@\n-        return super.compareTemplate(Byte512Mask.class, op, v);  \/\/ specialize\n+        return super.compareTemplate(Byte512Mask.class, op, v, null);  \/\/ specialize\n@@ -384,1 +384,1 @@\n-        return super.compareTemplate(Byte512Mask.class, op, s);  \/\/ specialize\n+        return super.compareTemplate(Byte512Mask.class, op, broadcast(s), null);  \/\/ specialize\n@@ -390,1 +390,1 @@\n-        return super.compareTemplate(Byte512Mask.class, op, s);  \/\/ specialize\n+        return super.compareTemplate(Byte512Mask.class, op, broadcast(s), null);  \/\/ specialize\n@@ -393,0 +393,7 @@\n+    @Override\n+    @ForceInline\n+    public final Byte512Mask compare(Comparison op, Vector<Byte> v, VectorMask<Byte> m) {\n+        return compareTemplate(Byte512Mask.class, op, v, ((Byte512Mask)m));\n+    }\n+\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte512Vector.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -378,1 +378,1 @@\n-        return super.compareTemplate(Byte64Mask.class, op, v);  \/\/ specialize\n+        return super.compareTemplate(Byte64Mask.class, op, v, null);  \/\/ specialize\n@@ -384,1 +384,1 @@\n-        return super.compareTemplate(Byte64Mask.class, op, s);  \/\/ specialize\n+        return super.compareTemplate(Byte64Mask.class, op, broadcast(s), null);  \/\/ specialize\n@@ -390,1 +390,1 @@\n-        return super.compareTemplate(Byte64Mask.class, op, s);  \/\/ specialize\n+        return super.compareTemplate(Byte64Mask.class, op, broadcast(s), null);  \/\/ specialize\n@@ -393,0 +393,7 @@\n+    @Override\n+    @ForceInline\n+    public final Byte64Mask compare(Comparison op, Vector<Byte> v, VectorMask<Byte> m) {\n+        return compareTemplate(Byte64Mask.class, op, v, ((Byte64Mask)m));\n+    }\n+\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte64Vector.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -378,1 +378,1 @@\n-        return super.compareTemplate(ByteMaxMask.class, op, v);  \/\/ specialize\n+        return super.compareTemplate(ByteMaxMask.class, op, v, null);  \/\/ specialize\n@@ -384,1 +384,1 @@\n-        return super.compareTemplate(ByteMaxMask.class, op, s);  \/\/ specialize\n+        return super.compareTemplate(ByteMaxMask.class, op, broadcast(s), null);  \/\/ specialize\n@@ -390,1 +390,1 @@\n-        return super.compareTemplate(ByteMaxMask.class, op, s);  \/\/ specialize\n+        return super.compareTemplate(ByteMaxMask.class, op, broadcast(s), null);  \/\/ specialize\n@@ -393,0 +393,7 @@\n+    @Override\n+    @ForceInline\n+    public final ByteMaxMask compare(Comparison op, Vector<Byte> v, VectorMask<Byte> m) {\n+        return compareTemplate(ByteMaxMask.class, op, v, ((ByteMaxMask)m));\n+    }\n+\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteMaxVector.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -1888,1 +1888,1 @@\n-    M compareTemplate(Class<M> maskType, Comparison op, Vector<Byte> v) {\n+    M compareTemplate(Class<M> maskType, Comparison op, Vector<Byte> v, M m) {\n@@ -1896,3 +1896,3 @@\n-            this, that,\n-            (cond, v0, v1) -> {\n-                AbstractMask<Byte> m\n+            this, that, m,\n+            (cond, v0, v1, m1) -> {\n+                AbstractMask<Byte> cmpM\n@@ -1902,1 +1902,1 @@\n-                M m2 = (M) m;\n+                M m2 = (M)((m1 != null) ? cmpM.and(m1) : cmpM);\n@@ -1924,12 +1924,0 @@\n-    \/**\n-     * {@inheritDoc} <!--workaround-->\n-     *\/\n-    @Override\n-    @ForceInline\n-    public final\n-    VectorMask<Byte> compare(VectorOperators.Comparison op,\n-                                  Vector<Byte> v,\n-                                  VectorMask<Byte> m) {\n-        return compare(op, v).and(m);\n-    }\n-\n@@ -1962,8 +1950,0 @@\n-    \/*package-private*\/\n-    @ForceInline\n-    final\n-    <M extends VectorMask<Byte>>\n-    M compareTemplate(Class<M> maskType, Comparison op, byte e) {\n-        return compareTemplate(maskType, op, broadcast(e));\n-    }\n-\n@@ -2004,8 +1984,0 @@\n-    \/*package-private*\/\n-    @ForceInline\n-    final\n-    <M extends VectorMask<Byte>>\n-    M compareTemplate(Class<M> maskType, Comparison op, long e) {\n-        return compareTemplate(maskType, op, broadcast(e));\n-    }\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteVector.java","additions":5,"deletions":33,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -365,1 +365,1 @@\n-        return super.compareTemplate(Double128Mask.class, op, v);  \/\/ specialize\n+        return super.compareTemplate(Double128Mask.class, op, v, null);  \/\/ specialize\n@@ -371,1 +371,1 @@\n-        return super.compareTemplate(Double128Mask.class, op, s);  \/\/ specialize\n+        return super.compareTemplate(Double128Mask.class, op, broadcast(s), null);  \/\/ specialize\n@@ -377,1 +377,1 @@\n-        return super.compareTemplate(Double128Mask.class, op, s);  \/\/ specialize\n+        return super.compareTemplate(Double128Mask.class, op, broadcast(s), null);  \/\/ specialize\n@@ -380,0 +380,7 @@\n+    @Override\n+    @ForceInline\n+    public final Double128Mask compare(Comparison op, Vector<Double> v, VectorMask<Double> m) {\n+        return compareTemplate(Double128Mask.class, op, v, ((Double128Mask)m));\n+    }\n+\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double128Vector.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -365,1 +365,1 @@\n-        return super.compareTemplate(Double256Mask.class, op, v);  \/\/ specialize\n+        return super.compareTemplate(Double256Mask.class, op, v, null);  \/\/ specialize\n@@ -371,1 +371,1 @@\n-        return super.compareTemplate(Double256Mask.class, op, s);  \/\/ specialize\n+        return super.compareTemplate(Double256Mask.class, op, broadcast(s), null);  \/\/ specialize\n@@ -377,1 +377,1 @@\n-        return super.compareTemplate(Double256Mask.class, op, s);  \/\/ specialize\n+        return super.compareTemplate(Double256Mask.class, op, broadcast(s), null);  \/\/ specialize\n@@ -380,0 +380,7 @@\n+    @Override\n+    @ForceInline\n+    public final Double256Mask compare(Comparison op, Vector<Double> v, VectorMask<Double> m) {\n+        return compareTemplate(Double256Mask.class, op, v, ((Double256Mask)m));\n+    }\n+\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double256Vector.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -365,1 +365,1 @@\n-        return super.compareTemplate(Double512Mask.class, op, v);  \/\/ specialize\n+        return super.compareTemplate(Double512Mask.class, op, v, null);  \/\/ specialize\n@@ -371,1 +371,1 @@\n-        return super.compareTemplate(Double512Mask.class, op, s);  \/\/ specialize\n+        return super.compareTemplate(Double512Mask.class, op, broadcast(s), null);  \/\/ specialize\n@@ -377,1 +377,1 @@\n-        return super.compareTemplate(Double512Mask.class, op, s);  \/\/ specialize\n+        return super.compareTemplate(Double512Mask.class, op, broadcast(s), null);  \/\/ specialize\n@@ -380,0 +380,7 @@\n+    @Override\n+    @ForceInline\n+    public final Double512Mask compare(Comparison op, Vector<Double> v, VectorMask<Double> m) {\n+        return compareTemplate(Double512Mask.class, op, v, ((Double512Mask)m));\n+    }\n+\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double512Vector.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -365,1 +365,1 @@\n-        return super.compareTemplate(Double64Mask.class, op, v);  \/\/ specialize\n+        return super.compareTemplate(Double64Mask.class, op, v, null);  \/\/ specialize\n@@ -371,1 +371,1 @@\n-        return super.compareTemplate(Double64Mask.class, op, s);  \/\/ specialize\n+        return super.compareTemplate(Double64Mask.class, op, broadcast(s), null);  \/\/ specialize\n@@ -377,1 +377,1 @@\n-        return super.compareTemplate(Double64Mask.class, op, s);  \/\/ specialize\n+        return super.compareTemplate(Double64Mask.class, op, broadcast(s), null);  \/\/ specialize\n@@ -380,0 +380,7 @@\n+    @Override\n+    @ForceInline\n+    public final Double64Mask compare(Comparison op, Vector<Double> v, VectorMask<Double> m) {\n+        return compareTemplate(Double64Mask.class, op, v, ((Double64Mask)m));\n+    }\n+\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double64Vector.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -365,1 +365,1 @@\n-        return super.compareTemplate(DoubleMaxMask.class, op, v);  \/\/ specialize\n+        return super.compareTemplate(DoubleMaxMask.class, op, v, null);  \/\/ specialize\n@@ -371,1 +371,1 @@\n-        return super.compareTemplate(DoubleMaxMask.class, op, s);  \/\/ specialize\n+        return super.compareTemplate(DoubleMaxMask.class, op, broadcast(s), null);  \/\/ specialize\n@@ -377,1 +377,1 @@\n-        return super.compareTemplate(DoubleMaxMask.class, op, s);  \/\/ specialize\n+        return super.compareTemplate(DoubleMaxMask.class, op, broadcast(s), null);  \/\/ specialize\n@@ -380,0 +380,7 @@\n+    @Override\n+    @ForceInline\n+    public final DoubleMaxMask compare(Comparison op, Vector<Double> v, VectorMask<Double> m) {\n+        return compareTemplate(DoubleMaxMask.class, op, v, ((DoubleMaxMask)m));\n+    }\n+\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleMaxVector.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -1744,1 +1744,1 @@\n-    M compareTemplate(Class<M> maskType, Comparison op, Vector<Double> v) {\n+    M compareTemplate(Class<M> maskType, Comparison op, Vector<Double> v, M m) {\n@@ -1752,3 +1752,3 @@\n-            this, that,\n-            (cond, v0, v1) -> {\n-                AbstractMask<Double> m\n+            this, that, m,\n+            (cond, v0, v1, m1) -> {\n+                AbstractMask<Double> cmpM\n@@ -1758,1 +1758,1 @@\n-                M m2 = (M) m;\n+                M m2 = (M)((m1 != null) ? cmpM.and(m1) : cmpM);\n@@ -1776,12 +1776,0 @@\n-    \/**\n-     * {@inheritDoc} <!--workaround-->\n-     *\/\n-    @Override\n-    @ForceInline\n-    public final\n-    VectorMask<Double> compare(VectorOperators.Comparison op,\n-                                  Vector<Double> v,\n-                                  VectorMask<Double> m) {\n-        return compare(op, v).and(m);\n-    }\n-\n@@ -1814,8 +1802,0 @@\n-    \/*package-private*\/\n-    @ForceInline\n-    final\n-    <M extends VectorMask<Double>>\n-    M compareTemplate(Class<M> maskType, Comparison op, double e) {\n-        return compareTemplate(maskType, op, broadcast(e));\n-    }\n-\n@@ -1856,8 +1836,0 @@\n-    \/*package-private*\/\n-    @ForceInline\n-    final\n-    <M extends VectorMask<Double>>\n-    M compareTemplate(Class<M> maskType, Comparison op, long e) {\n-        return compareTemplate(maskType, op, broadcast(e));\n-    }\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleVector.java","additions":5,"deletions":33,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -365,1 +365,1 @@\n-        return super.compareTemplate(Float128Mask.class, op, v);  \/\/ specialize\n+        return super.compareTemplate(Float128Mask.class, op, v, null);  \/\/ specialize\n@@ -371,1 +371,1 @@\n-        return super.compareTemplate(Float128Mask.class, op, s);  \/\/ specialize\n+        return super.compareTemplate(Float128Mask.class, op, broadcast(s), null);  \/\/ specialize\n@@ -377,1 +377,1 @@\n-        return super.compareTemplate(Float128Mask.class, op, s);  \/\/ specialize\n+        return super.compareTemplate(Float128Mask.class, op, broadcast(s), null);  \/\/ specialize\n@@ -380,0 +380,7 @@\n+    @Override\n+    @ForceInline\n+    public final Float128Mask compare(Comparison op, Vector<Float> v, VectorMask<Float> m) {\n+        return compareTemplate(Float128Mask.class, op, v, ((Float128Mask)m));\n+    }\n+\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float128Vector.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -365,1 +365,1 @@\n-        return super.compareTemplate(Float256Mask.class, op, v);  \/\/ specialize\n+        return super.compareTemplate(Float256Mask.class, op, v, null);  \/\/ specialize\n@@ -371,1 +371,1 @@\n-        return super.compareTemplate(Float256Mask.class, op, s);  \/\/ specialize\n+        return super.compareTemplate(Float256Mask.class, op, broadcast(s), null);  \/\/ specialize\n@@ -377,1 +377,1 @@\n-        return super.compareTemplate(Float256Mask.class, op, s);  \/\/ specialize\n+        return super.compareTemplate(Float256Mask.class, op, broadcast(s), null);  \/\/ specialize\n@@ -380,0 +380,7 @@\n+    @Override\n+    @ForceInline\n+    public final Float256Mask compare(Comparison op, Vector<Float> v, VectorMask<Float> m) {\n+        return compareTemplate(Float256Mask.class, op, v, ((Float256Mask)m));\n+    }\n+\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float256Vector.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -365,1 +365,1 @@\n-        return super.compareTemplate(Float512Mask.class, op, v);  \/\/ specialize\n+        return super.compareTemplate(Float512Mask.class, op, v, null);  \/\/ specialize\n@@ -371,1 +371,1 @@\n-        return super.compareTemplate(Float512Mask.class, op, s);  \/\/ specialize\n+        return super.compareTemplate(Float512Mask.class, op, broadcast(s), null);  \/\/ specialize\n@@ -377,1 +377,1 @@\n-        return super.compareTemplate(Float512Mask.class, op, s);  \/\/ specialize\n+        return super.compareTemplate(Float512Mask.class, op, broadcast(s), null);  \/\/ specialize\n@@ -380,0 +380,7 @@\n+    @Override\n+    @ForceInline\n+    public final Float512Mask compare(Comparison op, Vector<Float> v, VectorMask<Float> m) {\n+        return compareTemplate(Float512Mask.class, op, v, ((Float512Mask)m));\n+    }\n+\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float512Vector.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -365,1 +365,1 @@\n-        return super.compareTemplate(Float64Mask.class, op, v);  \/\/ specialize\n+        return super.compareTemplate(Float64Mask.class, op, v, null);  \/\/ specialize\n@@ -371,1 +371,1 @@\n-        return super.compareTemplate(Float64Mask.class, op, s);  \/\/ specialize\n+        return super.compareTemplate(Float64Mask.class, op, broadcast(s), null);  \/\/ specialize\n@@ -377,1 +377,1 @@\n-        return super.compareTemplate(Float64Mask.class, op, s);  \/\/ specialize\n+        return super.compareTemplate(Float64Mask.class, op, broadcast(s), null);  \/\/ specialize\n@@ -380,0 +380,7 @@\n+    @Override\n+    @ForceInline\n+    public final Float64Mask compare(Comparison op, Vector<Float> v, VectorMask<Float> m) {\n+        return compareTemplate(Float64Mask.class, op, v, ((Float64Mask)m));\n+    }\n+\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float64Vector.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -365,1 +365,1 @@\n-        return super.compareTemplate(FloatMaxMask.class, op, v);  \/\/ specialize\n+        return super.compareTemplate(FloatMaxMask.class, op, v, null);  \/\/ specialize\n@@ -371,1 +371,1 @@\n-        return super.compareTemplate(FloatMaxMask.class, op, s);  \/\/ specialize\n+        return super.compareTemplate(FloatMaxMask.class, op, broadcast(s), null);  \/\/ specialize\n@@ -377,1 +377,1 @@\n-        return super.compareTemplate(FloatMaxMask.class, op, s);  \/\/ specialize\n+        return super.compareTemplate(FloatMaxMask.class, op, broadcast(s), null);  \/\/ specialize\n@@ -380,0 +380,7 @@\n+    @Override\n+    @ForceInline\n+    public final FloatMaxMask compare(Comparison op, Vector<Float> v, VectorMask<Float> m) {\n+        return compareTemplate(FloatMaxMask.class, op, v, ((FloatMaxMask)m));\n+    }\n+\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatMaxVector.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -1756,1 +1756,1 @@\n-    M compareTemplate(Class<M> maskType, Comparison op, Vector<Float> v) {\n+    M compareTemplate(Class<M> maskType, Comparison op, Vector<Float> v, M m) {\n@@ -1764,3 +1764,3 @@\n-            this, that,\n-            (cond, v0, v1) -> {\n-                AbstractMask<Float> m\n+            this, that, m,\n+            (cond, v0, v1, m1) -> {\n+                AbstractMask<Float> cmpM\n@@ -1770,1 +1770,1 @@\n-                M m2 = (M) m;\n+                M m2 = (M)((m1 != null) ? cmpM.and(m1) : cmpM);\n@@ -1788,12 +1788,0 @@\n-    \/**\n-     * {@inheritDoc} <!--workaround-->\n-     *\/\n-    @Override\n-    @ForceInline\n-    public final\n-    VectorMask<Float> compare(VectorOperators.Comparison op,\n-                                  Vector<Float> v,\n-                                  VectorMask<Float> m) {\n-        return compare(op, v).and(m);\n-    }\n-\n@@ -1826,8 +1814,0 @@\n-    \/*package-private*\/\n-    @ForceInline\n-    final\n-    <M extends VectorMask<Float>>\n-    M compareTemplate(Class<M> maskType, Comparison op, float e) {\n-        return compareTemplate(maskType, op, broadcast(e));\n-    }\n-\n@@ -1868,8 +1848,0 @@\n-    \/*package-private*\/\n-    @ForceInline\n-    final\n-    <M extends VectorMask<Float>>\n-    M compareTemplate(Class<M> maskType, Comparison op, long e) {\n-        return compareTemplate(maskType, op, broadcast(e));\n-    }\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatVector.java","additions":5,"deletions":33,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -378,1 +378,1 @@\n-        return super.compareTemplate(Int128Mask.class, op, v);  \/\/ specialize\n+        return super.compareTemplate(Int128Mask.class, op, v, null);  \/\/ specialize\n@@ -384,1 +384,1 @@\n-        return super.compareTemplate(Int128Mask.class, op, s);  \/\/ specialize\n+        return super.compareTemplate(Int128Mask.class, op, broadcast(s), null);  \/\/ specialize\n@@ -390,1 +390,1 @@\n-        return super.compareTemplate(Int128Mask.class, op, s);  \/\/ specialize\n+        return super.compareTemplate(Int128Mask.class, op, broadcast(s), null);  \/\/ specialize\n@@ -393,0 +393,7 @@\n+    @Override\n+    @ForceInline\n+    public final Int128Mask compare(Comparison op, Vector<Integer> v, VectorMask<Integer> m) {\n+        return compareTemplate(Int128Mask.class, op, v, ((Int128Mask)m));\n+    }\n+\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int128Vector.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -378,1 +378,1 @@\n-        return super.compareTemplate(Int256Mask.class, op, v);  \/\/ specialize\n+        return super.compareTemplate(Int256Mask.class, op, v, null);  \/\/ specialize\n@@ -384,1 +384,1 @@\n-        return super.compareTemplate(Int256Mask.class, op, s);  \/\/ specialize\n+        return super.compareTemplate(Int256Mask.class, op, broadcast(s), null);  \/\/ specialize\n@@ -390,1 +390,1 @@\n-        return super.compareTemplate(Int256Mask.class, op, s);  \/\/ specialize\n+        return super.compareTemplate(Int256Mask.class, op, broadcast(s), null);  \/\/ specialize\n@@ -393,0 +393,7 @@\n+    @Override\n+    @ForceInline\n+    public final Int256Mask compare(Comparison op, Vector<Integer> v, VectorMask<Integer> m) {\n+        return compareTemplate(Int256Mask.class, op, v, ((Int256Mask)m));\n+    }\n+\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int256Vector.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -378,1 +378,1 @@\n-        return super.compareTemplate(Int512Mask.class, op, v);  \/\/ specialize\n+        return super.compareTemplate(Int512Mask.class, op, v, null);  \/\/ specialize\n@@ -384,1 +384,1 @@\n-        return super.compareTemplate(Int512Mask.class, op, s);  \/\/ specialize\n+        return super.compareTemplate(Int512Mask.class, op, broadcast(s), null);  \/\/ specialize\n@@ -390,1 +390,1 @@\n-        return super.compareTemplate(Int512Mask.class, op, s);  \/\/ specialize\n+        return super.compareTemplate(Int512Mask.class, op, broadcast(s), null);  \/\/ specialize\n@@ -393,0 +393,7 @@\n+    @Override\n+    @ForceInline\n+    public final Int512Mask compare(Comparison op, Vector<Integer> v, VectorMask<Integer> m) {\n+        return compareTemplate(Int512Mask.class, op, v, ((Int512Mask)m));\n+    }\n+\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int512Vector.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -378,1 +378,1 @@\n-        return super.compareTemplate(Int64Mask.class, op, v);  \/\/ specialize\n+        return super.compareTemplate(Int64Mask.class, op, v, null);  \/\/ specialize\n@@ -384,1 +384,1 @@\n-        return super.compareTemplate(Int64Mask.class, op, s);  \/\/ specialize\n+        return super.compareTemplate(Int64Mask.class, op, broadcast(s), null);  \/\/ specialize\n@@ -390,1 +390,1 @@\n-        return super.compareTemplate(Int64Mask.class, op, s);  \/\/ specialize\n+        return super.compareTemplate(Int64Mask.class, op, broadcast(s), null);  \/\/ specialize\n@@ -393,0 +393,7 @@\n+    @Override\n+    @ForceInline\n+    public final Int64Mask compare(Comparison op, Vector<Integer> v, VectorMask<Integer> m) {\n+        return compareTemplate(Int64Mask.class, op, v, ((Int64Mask)m));\n+    }\n+\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int64Vector.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -378,1 +378,1 @@\n-        return super.compareTemplate(IntMaxMask.class, op, v);  \/\/ specialize\n+        return super.compareTemplate(IntMaxMask.class, op, v, null);  \/\/ specialize\n@@ -384,1 +384,1 @@\n-        return super.compareTemplate(IntMaxMask.class, op, s);  \/\/ specialize\n+        return super.compareTemplate(IntMaxMask.class, op, broadcast(s), null);  \/\/ specialize\n@@ -390,1 +390,1 @@\n-        return super.compareTemplate(IntMaxMask.class, op, s);  \/\/ specialize\n+        return super.compareTemplate(IntMaxMask.class, op, broadcast(s), null);  \/\/ specialize\n@@ -393,0 +393,7 @@\n+    @Override\n+    @ForceInline\n+    public final IntMaxMask compare(Comparison op, Vector<Integer> v, VectorMask<Integer> m) {\n+        return compareTemplate(IntMaxMask.class, op, v, ((IntMaxMask)m));\n+    }\n+\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntMaxVector.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -1887,1 +1887,1 @@\n-    M compareTemplate(Class<M> maskType, Comparison op, Vector<Integer> v) {\n+    M compareTemplate(Class<M> maskType, Comparison op, Vector<Integer> v, M m) {\n@@ -1895,3 +1895,3 @@\n-            this, that,\n-            (cond, v0, v1) -> {\n-                AbstractMask<Integer> m\n+            this, that, m,\n+            (cond, v0, v1, m1) -> {\n+                AbstractMask<Integer> cmpM\n@@ -1901,1 +1901,1 @@\n-                M m2 = (M) m;\n+                M m2 = (M)((m1 != null) ? cmpM.and(m1) : cmpM);\n@@ -1923,12 +1923,0 @@\n-    \/**\n-     * {@inheritDoc} <!--workaround-->\n-     *\/\n-    @Override\n-    @ForceInline\n-    public final\n-    VectorMask<Integer> compare(VectorOperators.Comparison op,\n-                                  Vector<Integer> v,\n-                                  VectorMask<Integer> m) {\n-        return compare(op, v).and(m);\n-    }\n-\n@@ -1961,8 +1949,0 @@\n-    \/*package-private*\/\n-    @ForceInline\n-    final\n-    <M extends VectorMask<Integer>>\n-    M compareTemplate(Class<M> maskType, Comparison op, int e) {\n-        return compareTemplate(maskType, op, broadcast(e));\n-    }\n-\n@@ -2003,8 +1983,0 @@\n-    \/*package-private*\/\n-    @ForceInline\n-    final\n-    <M extends VectorMask<Integer>>\n-    M compareTemplate(Class<M> maskType, Comparison op, long e) {\n-        return compareTemplate(maskType, op, broadcast(e));\n-    }\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntVector.java","additions":5,"deletions":33,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -373,1 +373,1 @@\n-        return super.compareTemplate(Long128Mask.class, op, v);  \/\/ specialize\n+        return super.compareTemplate(Long128Mask.class, op, v, null);  \/\/ specialize\n@@ -379,1 +379,8 @@\n-        return super.compareTemplate(Long128Mask.class, op, s);  \/\/ specialize\n+        return super.compareTemplate(Long128Mask.class, op, broadcast(s), null);  \/\/ specialize\n+    }\n+\n+\n+    @Override\n+    @ForceInline\n+    public final Long128Mask compare(Comparison op, Vector<Long> v, VectorMask<Long> m) {\n+        return compareTemplate(Long128Mask.class, op, v, ((Long128Mask)m));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long128Vector.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -373,1 +373,1 @@\n-        return super.compareTemplate(Long256Mask.class, op, v);  \/\/ specialize\n+        return super.compareTemplate(Long256Mask.class, op, v, null);  \/\/ specialize\n@@ -379,1 +379,8 @@\n-        return super.compareTemplate(Long256Mask.class, op, s);  \/\/ specialize\n+        return super.compareTemplate(Long256Mask.class, op, broadcast(s), null);  \/\/ specialize\n+    }\n+\n+\n+    @Override\n+    @ForceInline\n+    public final Long256Mask compare(Comparison op, Vector<Long> v, VectorMask<Long> m) {\n+        return compareTemplate(Long256Mask.class, op, v, ((Long256Mask)m));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long256Vector.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -373,1 +373,1 @@\n-        return super.compareTemplate(Long512Mask.class, op, v);  \/\/ specialize\n+        return super.compareTemplate(Long512Mask.class, op, v, null);  \/\/ specialize\n@@ -379,1 +379,8 @@\n-        return super.compareTemplate(Long512Mask.class, op, s);  \/\/ specialize\n+        return super.compareTemplate(Long512Mask.class, op, broadcast(s), null);  \/\/ specialize\n+    }\n+\n+\n+    @Override\n+    @ForceInline\n+    public final Long512Mask compare(Comparison op, Vector<Long> v, VectorMask<Long> m) {\n+        return compareTemplate(Long512Mask.class, op, v, ((Long512Mask)m));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long512Vector.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -373,1 +373,1 @@\n-        return super.compareTemplate(Long64Mask.class, op, v);  \/\/ specialize\n+        return super.compareTemplate(Long64Mask.class, op, v, null);  \/\/ specialize\n@@ -379,1 +379,8 @@\n-        return super.compareTemplate(Long64Mask.class, op, s);  \/\/ specialize\n+        return super.compareTemplate(Long64Mask.class, op, broadcast(s), null);  \/\/ specialize\n+    }\n+\n+\n+    @Override\n+    @ForceInline\n+    public final Long64Mask compare(Comparison op, Vector<Long> v, VectorMask<Long> m) {\n+        return compareTemplate(Long64Mask.class, op, v, ((Long64Mask)m));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long64Vector.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -373,1 +373,1 @@\n-        return super.compareTemplate(LongMaxMask.class, op, v);  \/\/ specialize\n+        return super.compareTemplate(LongMaxMask.class, op, v, null);  \/\/ specialize\n@@ -379,1 +379,8 @@\n-        return super.compareTemplate(LongMaxMask.class, op, s);  \/\/ specialize\n+        return super.compareTemplate(LongMaxMask.class, op, broadcast(s), null);  \/\/ specialize\n+    }\n+\n+\n+    @Override\n+    @ForceInline\n+    public final LongMaxMask compare(Comparison op, Vector<Long> v, VectorMask<Long> m) {\n+        return compareTemplate(LongMaxMask.class, op, v, ((LongMaxMask)m));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongMaxVector.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1800,1 +1800,1 @@\n-    M compareTemplate(Class<M> maskType, Comparison op, Vector<Long> v) {\n+    M compareTemplate(Class<M> maskType, Comparison op, Vector<Long> v, M m) {\n@@ -1808,3 +1808,3 @@\n-            this, that,\n-            (cond, v0, v1) -> {\n-                AbstractMask<Long> m\n+            this, that, m,\n+            (cond, v0, v1, m1) -> {\n+                AbstractMask<Long> cmpM\n@@ -1814,1 +1814,1 @@\n-                M m2 = (M) m;\n+                M m2 = (M)((m1 != null) ? cmpM.and(m1) : cmpM);\n@@ -1836,12 +1836,0 @@\n-    \/**\n-     * {@inheritDoc} <!--workaround-->\n-     *\/\n-    @Override\n-    @ForceInline\n-    public final\n-    VectorMask<Long> compare(VectorOperators.Comparison op,\n-                                  Vector<Long> v,\n-                                  VectorMask<Long> m) {\n-        return compare(op, v).and(m);\n-    }\n-\n@@ -1874,8 +1862,0 @@\n-    \/*package-private*\/\n-    @ForceInline\n-    final\n-    <M extends VectorMask<Long>>\n-    M compareTemplate(Class<M> maskType, Comparison op, long e) {\n-        return compareTemplate(maskType, op, broadcast(e));\n-    }\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongVector.java","additions":5,"deletions":25,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -378,1 +378,1 @@\n-        return super.compareTemplate(Short128Mask.class, op, v);  \/\/ specialize\n+        return super.compareTemplate(Short128Mask.class, op, v, null);  \/\/ specialize\n@@ -384,1 +384,1 @@\n-        return super.compareTemplate(Short128Mask.class, op, s);  \/\/ specialize\n+        return super.compareTemplate(Short128Mask.class, op, broadcast(s), null);  \/\/ specialize\n@@ -390,1 +390,1 @@\n-        return super.compareTemplate(Short128Mask.class, op, s);  \/\/ specialize\n+        return super.compareTemplate(Short128Mask.class, op, broadcast(s), null);  \/\/ specialize\n@@ -393,0 +393,7 @@\n+    @Override\n+    @ForceInline\n+    public final Short128Mask compare(Comparison op, Vector<Short> v, VectorMask<Short> m) {\n+        return compareTemplate(Short128Mask.class, op, v, ((Short128Mask)m));\n+    }\n+\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short128Vector.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -378,1 +378,1 @@\n-        return super.compareTemplate(Short256Mask.class, op, v);  \/\/ specialize\n+        return super.compareTemplate(Short256Mask.class, op, v, null);  \/\/ specialize\n@@ -384,1 +384,1 @@\n-        return super.compareTemplate(Short256Mask.class, op, s);  \/\/ specialize\n+        return super.compareTemplate(Short256Mask.class, op, broadcast(s), null);  \/\/ specialize\n@@ -390,1 +390,1 @@\n-        return super.compareTemplate(Short256Mask.class, op, s);  \/\/ specialize\n+        return super.compareTemplate(Short256Mask.class, op, broadcast(s), null);  \/\/ specialize\n@@ -393,0 +393,7 @@\n+    @Override\n+    @ForceInline\n+    public final Short256Mask compare(Comparison op, Vector<Short> v, VectorMask<Short> m) {\n+        return compareTemplate(Short256Mask.class, op, v, ((Short256Mask)m));\n+    }\n+\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short256Vector.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -378,1 +378,1 @@\n-        return super.compareTemplate(Short512Mask.class, op, v);  \/\/ specialize\n+        return super.compareTemplate(Short512Mask.class, op, v, null);  \/\/ specialize\n@@ -384,1 +384,1 @@\n-        return super.compareTemplate(Short512Mask.class, op, s);  \/\/ specialize\n+        return super.compareTemplate(Short512Mask.class, op, broadcast(s), null);  \/\/ specialize\n@@ -390,1 +390,1 @@\n-        return super.compareTemplate(Short512Mask.class, op, s);  \/\/ specialize\n+        return super.compareTemplate(Short512Mask.class, op, broadcast(s), null);  \/\/ specialize\n@@ -393,0 +393,7 @@\n+    @Override\n+    @ForceInline\n+    public final Short512Mask compare(Comparison op, Vector<Short> v, VectorMask<Short> m) {\n+        return compareTemplate(Short512Mask.class, op, v, ((Short512Mask)m));\n+    }\n+\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short512Vector.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -378,1 +378,1 @@\n-        return super.compareTemplate(Short64Mask.class, op, v);  \/\/ specialize\n+        return super.compareTemplate(Short64Mask.class, op, v, null);  \/\/ specialize\n@@ -384,1 +384,1 @@\n-        return super.compareTemplate(Short64Mask.class, op, s);  \/\/ specialize\n+        return super.compareTemplate(Short64Mask.class, op, broadcast(s), null);  \/\/ specialize\n@@ -390,1 +390,1 @@\n-        return super.compareTemplate(Short64Mask.class, op, s);  \/\/ specialize\n+        return super.compareTemplate(Short64Mask.class, op, broadcast(s), null);  \/\/ specialize\n@@ -393,0 +393,7 @@\n+    @Override\n+    @ForceInline\n+    public final Short64Mask compare(Comparison op, Vector<Short> v, VectorMask<Short> m) {\n+        return compareTemplate(Short64Mask.class, op, v, ((Short64Mask)m));\n+    }\n+\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short64Vector.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -378,1 +378,1 @@\n-        return super.compareTemplate(ShortMaxMask.class, op, v);  \/\/ specialize\n+        return super.compareTemplate(ShortMaxMask.class, op, v, null);  \/\/ specialize\n@@ -384,1 +384,1 @@\n-        return super.compareTemplate(ShortMaxMask.class, op, s);  \/\/ specialize\n+        return super.compareTemplate(ShortMaxMask.class, op, broadcast(s), null);  \/\/ specialize\n@@ -390,1 +390,1 @@\n-        return super.compareTemplate(ShortMaxMask.class, op, s);  \/\/ specialize\n+        return super.compareTemplate(ShortMaxMask.class, op, broadcast(s), null);  \/\/ specialize\n@@ -393,0 +393,7 @@\n+    @Override\n+    @ForceInline\n+    public final ShortMaxMask compare(Comparison op, Vector<Short> v, VectorMask<Short> m) {\n+        return compareTemplate(ShortMaxMask.class, op, v, ((ShortMaxMask)m));\n+    }\n+\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortMaxVector.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -1888,1 +1888,1 @@\n-    M compareTemplate(Class<M> maskType, Comparison op, Vector<Short> v) {\n+    M compareTemplate(Class<M> maskType, Comparison op, Vector<Short> v, M m) {\n@@ -1896,3 +1896,3 @@\n-            this, that,\n-            (cond, v0, v1) -> {\n-                AbstractMask<Short> m\n+            this, that, m,\n+            (cond, v0, v1, m1) -> {\n+                AbstractMask<Short> cmpM\n@@ -1902,1 +1902,1 @@\n-                M m2 = (M) m;\n+                M m2 = (M)((m1 != null) ? cmpM.and(m1) : cmpM);\n@@ -1924,12 +1924,0 @@\n-    \/**\n-     * {@inheritDoc} <!--workaround-->\n-     *\/\n-    @Override\n-    @ForceInline\n-    public final\n-    VectorMask<Short> compare(VectorOperators.Comparison op,\n-                                  Vector<Short> v,\n-                                  VectorMask<Short> m) {\n-        return compare(op, v).and(m);\n-    }\n-\n@@ -1962,8 +1950,0 @@\n-    \/*package-private*\/\n-    @ForceInline\n-    final\n-    <M extends VectorMask<Short>>\n-    M compareTemplate(Class<M> maskType, Comparison op, short e) {\n-        return compareTemplate(maskType, op, broadcast(e));\n-    }\n-\n@@ -2004,8 +1984,0 @@\n-    \/*package-private*\/\n-    @ForceInline\n-    final\n-    <M extends VectorMask<Short>>\n-    M compareTemplate(Class<M> maskType, Comparison op, long e) {\n-        return compareTemplate(maskType, op, broadcast(e));\n-    }\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortVector.java","additions":5,"deletions":33,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2169,1 +2169,1 @@\n-    M compareTemplate(Class<M> maskType, Comparison op, Vector<$Boxtype$> v) {\n+    M compareTemplate(Class<M> maskType, Comparison op, Vector<$Boxtype$> v, M m) {\n@@ -2177,3 +2177,3 @@\n-            this, that,\n-            (cond, v0, v1) -> {\n-                AbstractMask<$Boxtype$> m\n+            this, that, m,\n+            (cond, v0, v1, m1) -> {\n+                AbstractMask<$Boxtype$> cmpM\n@@ -2183,1 +2183,1 @@\n-                M m2 = (M) m;\n+                M m2 = (M)((m1 != null) ? cmpM.and(m1) : cmpM);\n@@ -2207,12 +2207,0 @@\n-    \/**\n-     * {@inheritDoc} <!--workaround-->\n-     *\/\n-    @Override\n-    @ForceInline\n-    public final\n-    VectorMask<$Boxtype$> compare(VectorOperators.Comparison op,\n-                                  Vector<$Boxtype$> v,\n-                                  VectorMask<$Boxtype$> m) {\n-        return compare(op, v).and(m);\n-    }\n-\n@@ -2245,8 +2233,0 @@\n-    \/*package-private*\/\n-    @ForceInline\n-    final\n-    <M extends VectorMask<$Boxtype$>>\n-    M compareTemplate(Class<M> maskType, Comparison op, $type$ e) {\n-        return compareTemplate(maskType, op, broadcast(e));\n-    }\n-\n@@ -2288,8 +2268,0 @@\n-    \/*package-private*\/\n-    @ForceInline\n-    final\n-    <M extends VectorMask<$Boxtype$>>\n-    M compareTemplate(Class<M> maskType, Comparison op, long e) {\n-        return compareTemplate(maskType, op, broadcast(e));\n-    }\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template","additions":5,"deletions":33,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -382,1 +382,1 @@\n-        return super.compareTemplate($masktype$.class, op, v);  \/\/ specialize\n+        return super.compareTemplate($masktype$.class, op, v, null);  \/\/ specialize\n@@ -388,1 +388,1 @@\n-        return super.compareTemplate($masktype$.class, op, s);  \/\/ specialize\n+        return super.compareTemplate($masktype$.class, op, broadcast(s), null);  \/\/ specialize\n@@ -395,1 +395,1 @@\n-        return super.compareTemplate($masktype$.class, op, s);  \/\/ specialize\n+        return super.compareTemplate($masktype$.class, op, broadcast(s), null);  \/\/ specialize\n@@ -399,0 +399,7 @@\n+    @Override\n+    @ForceInline\n+    public final $masktype$ compare(Comparison op, Vector<$Boxtype$> v, VectorMask<$Boxtype$> m) {\n+        return compareTemplate($masktype$.class, op, v, (($masktype$)m));\n+    }\n+\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-VectorBits.java.template","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"}]}