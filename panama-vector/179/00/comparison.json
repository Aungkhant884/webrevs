{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -117,1 +117,1 @@\n-        return (byte[])getPayload();\n+        return (byte[]) getPayload();\n@@ -147,2 +147,2 @@\n-        return (Byte128Shuffle)VectorSupport.shuffleIota(ETYPE, Byte128Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n+        return (Byte128Shuffle) VectorSupport.shuffleIota(ETYPE, Byte128Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i * lstep + lstart, l))));\n@@ -150,2 +150,2 @@\n-        return (Byte128Shuffle)VectorSupport.shuffleIota(ETYPE, Byte128Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n+        return (Byte128Shuffle) VectorSupport.shuffleIota(ETYPE, Byte128Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i * lstep + lstart)));\n@@ -198,1 +198,1 @@\n-            super.uOpTemplate((Byte128Mask)m, f);  \/\/ specialize\n+            super.uOpTemplate((Byte128Mask) m, f);  \/\/ specialize\n@@ -206,1 +206,1 @@\n-        return (Byte128Vector) super.bOpTemplate((Byte128Vector)v, f);  \/\/ specialize\n+        return (Byte128Vector) super.bOpTemplate((Byte128Vector) v, f);  \/\/ specialize\n@@ -214,1 +214,1 @@\n-            super.bOpTemplate((Byte128Vector)v, (Byte128Mask)m,\n+            super.bOpTemplate((Byte128Vector) v, (Byte128Mask) m,\n@@ -224,1 +224,1 @@\n-            super.tOpTemplate((Byte128Vector)v1, (Byte128Vector)v2,\n+            super.tOpTemplate((Byte128Vector) v1, (Byte128Vector) v2,\n@@ -233,2 +233,2 @@\n-            super.tOpTemplate((Byte128Vector)v1, (Byte128Vector)v2,\n-                              (Byte128Mask)m, f);  \/\/ specialize\n+            super.tOpTemplate((Byte128Vector) v1, (Byte128Vector) v2,\n+                              (Byte128Mask) m, f);  \/\/ specialize\n@@ -534,1 +534,1 @@\n-                                    return (long)vecarr[ix];\n+                                    return (long) vecarr[ix];\n@@ -565,1 +565,1 @@\n-                                this, i, (long)e,\n+                                this, i, (long) e,\n@@ -568,1 +568,1 @@\n-                                    res[ix] = (byte)bits;\n+                                    res[ix] = (byte) bits;\n@@ -616,1 +616,1 @@\n-            return (boolean[])getPayload();\n+            return (boolean[]) getPayload();\n@@ -633,1 +633,1 @@\n-            boolean[] mbits = ((Byte128Mask)m).getBits();\n+            boolean[] mbits = ((Byte128Mask) m).getBits();\n@@ -657,1 +657,1 @@\n-            return  dsp.maskFactory(maskArray).check(dsp);\n+            return dsp.maskFactory(maskArray).check(dsp);\n@@ -678,1 +678,1 @@\n-            Byte128Mask m = (Byte128Mask)mask;\n+            Byte128Mask m = (Byte128Mask) mask;\n@@ -693,1 +693,1 @@\n-            return (Byte128Mask)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return (Byte128Mask) VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -705,1 +705,1 @@\n-            Byte128Mask m = (Byte128Mask)mask;\n+            Byte128Mask m = (Byte128Mask) mask;\n@@ -715,1 +715,1 @@\n-            Byte128Mask m = (Byte128Mask)mask;\n+            Byte128Mask m = (Byte128Mask) mask;\n@@ -725,1 +725,1 @@\n-            Byte128Mask m = (Byte128Mask)mask;\n+            Byte128Mask m = (Byte128Mask) mask;\n@@ -771,1 +771,1 @@\n-                                         (m, __) -> anyTrueHelper(((Byte128Mask)m).getBits()));\n+                                         (m, __) -> anyTrueHelper(((Byte128Mask) m).getBits()));\n@@ -779,1 +779,1 @@\n-                                         (m, __) -> allTrueHelper(((Byte128Mask)m).getBits()));\n+                                         (m, __) -> allTrueHelper(((Byte128Mask) m).getBits()));\n@@ -833,1 +833,1 @@\n-                                                    (s) -> ((Byte128Vector)(((AbstractShuffle<Byte>)(s)).toVectorTemplate())));\n+                                                    (s) -> ((Byte128Vector) (((AbstractShuffle<Byte>) (s)).toVectorTemplate())));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte128Vector.java","additions":26,"deletions":26,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -117,1 +117,1 @@\n-        return (byte[])getPayload();\n+        return (byte[]) getPayload();\n@@ -147,2 +147,2 @@\n-        return (Byte256Shuffle)VectorSupport.shuffleIota(ETYPE, Byte256Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n+        return (Byte256Shuffle) VectorSupport.shuffleIota(ETYPE, Byte256Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i * lstep + lstart, l))));\n@@ -150,2 +150,2 @@\n-        return (Byte256Shuffle)VectorSupport.shuffleIota(ETYPE, Byte256Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n+        return (Byte256Shuffle) VectorSupport.shuffleIota(ETYPE, Byte256Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i * lstep + lstart)));\n@@ -198,1 +198,1 @@\n-            super.uOpTemplate((Byte256Mask)m, f);  \/\/ specialize\n+            super.uOpTemplate((Byte256Mask) m, f);  \/\/ specialize\n@@ -206,1 +206,1 @@\n-        return (Byte256Vector) super.bOpTemplate((Byte256Vector)v, f);  \/\/ specialize\n+        return (Byte256Vector) super.bOpTemplate((Byte256Vector) v, f);  \/\/ specialize\n@@ -214,1 +214,1 @@\n-            super.bOpTemplate((Byte256Vector)v, (Byte256Mask)m,\n+            super.bOpTemplate((Byte256Vector) v, (Byte256Mask) m,\n@@ -224,1 +224,1 @@\n-            super.tOpTemplate((Byte256Vector)v1, (Byte256Vector)v2,\n+            super.tOpTemplate((Byte256Vector) v1, (Byte256Vector) v2,\n@@ -233,2 +233,2 @@\n-            super.tOpTemplate((Byte256Vector)v1, (Byte256Vector)v2,\n-                              (Byte256Mask)m, f);  \/\/ specialize\n+            super.tOpTemplate((Byte256Vector) v1, (Byte256Vector) v2,\n+                              (Byte256Mask) m, f);  \/\/ specialize\n@@ -550,1 +550,1 @@\n-                                    return (long)vecarr[ix];\n+                                    return (long) vecarr[ix];\n@@ -597,1 +597,1 @@\n-                                this, i, (long)e,\n+                                this, i, (long) e,\n@@ -600,1 +600,1 @@\n-                                    res[ix] = (byte)bits;\n+                                    res[ix] = (byte) bits;\n@@ -648,1 +648,1 @@\n-            return (boolean[])getPayload();\n+            return (boolean[]) getPayload();\n@@ -665,1 +665,1 @@\n-            boolean[] mbits = ((Byte256Mask)m).getBits();\n+            boolean[] mbits = ((Byte256Mask) m).getBits();\n@@ -689,1 +689,1 @@\n-            return  dsp.maskFactory(maskArray).check(dsp);\n+            return dsp.maskFactory(maskArray).check(dsp);\n@@ -710,1 +710,1 @@\n-            Byte256Mask m = (Byte256Mask)mask;\n+            Byte256Mask m = (Byte256Mask) mask;\n@@ -725,1 +725,1 @@\n-            return (Byte256Mask)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return (Byte256Mask) VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -737,1 +737,1 @@\n-            Byte256Mask m = (Byte256Mask)mask;\n+            Byte256Mask m = (Byte256Mask) mask;\n@@ -747,1 +747,1 @@\n-            Byte256Mask m = (Byte256Mask)mask;\n+            Byte256Mask m = (Byte256Mask) mask;\n@@ -757,1 +757,1 @@\n-            Byte256Mask m = (Byte256Mask)mask;\n+            Byte256Mask m = (Byte256Mask) mask;\n@@ -803,1 +803,1 @@\n-                                         (m, __) -> anyTrueHelper(((Byte256Mask)m).getBits()));\n+                                         (m, __) -> anyTrueHelper(((Byte256Mask) m).getBits()));\n@@ -811,1 +811,1 @@\n-                                         (m, __) -> allTrueHelper(((Byte256Mask)m).getBits()));\n+                                         (m, __) -> allTrueHelper(((Byte256Mask) m).getBits()));\n@@ -865,1 +865,1 @@\n-                                                    (s) -> ((Byte256Vector)(((AbstractShuffle<Byte>)(s)).toVectorTemplate())));\n+                                                    (s) -> ((Byte256Vector) (((AbstractShuffle<Byte>) (s)).toVectorTemplate())));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte256Vector.java","additions":26,"deletions":26,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -117,1 +117,1 @@\n-        return (byte[])getPayload();\n+        return (byte[]) getPayload();\n@@ -147,2 +147,2 @@\n-        return (Byte512Shuffle)VectorSupport.shuffleIota(ETYPE, Byte512Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n+        return (Byte512Shuffle) VectorSupport.shuffleIota(ETYPE, Byte512Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i * lstep + lstart, l))));\n@@ -150,2 +150,2 @@\n-        return (Byte512Shuffle)VectorSupport.shuffleIota(ETYPE, Byte512Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n+        return (Byte512Shuffle) VectorSupport.shuffleIota(ETYPE, Byte512Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i * lstep + lstart)));\n@@ -198,1 +198,1 @@\n-            super.uOpTemplate((Byte512Mask)m, f);  \/\/ specialize\n+            super.uOpTemplate((Byte512Mask) m, f);  \/\/ specialize\n@@ -206,1 +206,1 @@\n-        return (Byte512Vector) super.bOpTemplate((Byte512Vector)v, f);  \/\/ specialize\n+        return (Byte512Vector) super.bOpTemplate((Byte512Vector) v, f);  \/\/ specialize\n@@ -214,1 +214,1 @@\n-            super.bOpTemplate((Byte512Vector)v, (Byte512Mask)m,\n+            super.bOpTemplate((Byte512Vector) v, (Byte512Mask) m,\n@@ -224,1 +224,1 @@\n-            super.tOpTemplate((Byte512Vector)v1, (Byte512Vector)v2,\n+            super.tOpTemplate((Byte512Vector) v1, (Byte512Vector) v2,\n@@ -233,2 +233,2 @@\n-            super.tOpTemplate((Byte512Vector)v1, (Byte512Vector)v2,\n-                              (Byte512Mask)m, f);  \/\/ specialize\n+            super.tOpTemplate((Byte512Vector) v1, (Byte512Vector) v2,\n+                              (Byte512Mask) m, f);  \/\/ specialize\n@@ -582,1 +582,1 @@\n-                                    return (long)vecarr[ix];\n+                                    return (long) vecarr[ix];\n@@ -661,1 +661,1 @@\n-                                this, i, (long)e,\n+                                this, i, (long) e,\n@@ -664,1 +664,1 @@\n-                                    res[ix] = (byte)bits;\n+                                    res[ix] = (byte) bits;\n@@ -712,1 +712,1 @@\n-            return (boolean[])getPayload();\n+            return (boolean[]) getPayload();\n@@ -729,1 +729,1 @@\n-            boolean[] mbits = ((Byte512Mask)m).getBits();\n+            boolean[] mbits = ((Byte512Mask) m).getBits();\n@@ -753,1 +753,1 @@\n-            return  dsp.maskFactory(maskArray).check(dsp);\n+            return dsp.maskFactory(maskArray).check(dsp);\n@@ -774,1 +774,1 @@\n-            Byte512Mask m = (Byte512Mask)mask;\n+            Byte512Mask m = (Byte512Mask) mask;\n@@ -789,1 +789,1 @@\n-            return (Byte512Mask)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return (Byte512Mask) VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -801,1 +801,1 @@\n-            Byte512Mask m = (Byte512Mask)mask;\n+            Byte512Mask m = (Byte512Mask) mask;\n@@ -811,1 +811,1 @@\n-            Byte512Mask m = (Byte512Mask)mask;\n+            Byte512Mask m = (Byte512Mask) mask;\n@@ -821,1 +821,1 @@\n-            Byte512Mask m = (Byte512Mask)mask;\n+            Byte512Mask m = (Byte512Mask) mask;\n@@ -867,1 +867,1 @@\n-                                         (m, __) -> anyTrueHelper(((Byte512Mask)m).getBits()));\n+                                         (m, __) -> anyTrueHelper(((Byte512Mask) m).getBits()));\n@@ -875,1 +875,1 @@\n-                                         (m, __) -> allTrueHelper(((Byte512Mask)m).getBits()));\n+                                         (m, __) -> allTrueHelper(((Byte512Mask) m).getBits()));\n@@ -929,1 +929,1 @@\n-                                                    (s) -> ((Byte512Vector)(((AbstractShuffle<Byte>)(s)).toVectorTemplate())));\n+                                                    (s) -> ((Byte512Vector) (((AbstractShuffle<Byte>) (s)).toVectorTemplate())));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte512Vector.java","additions":26,"deletions":26,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -117,1 +117,1 @@\n-        return (byte[])getPayload();\n+        return (byte[]) getPayload();\n@@ -147,2 +147,2 @@\n-        return (Byte64Shuffle)VectorSupport.shuffleIota(ETYPE, Byte64Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n+        return (Byte64Shuffle) VectorSupport.shuffleIota(ETYPE, Byte64Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i * lstep + lstart, l))));\n@@ -150,2 +150,2 @@\n-        return (Byte64Shuffle)VectorSupport.shuffleIota(ETYPE, Byte64Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n+        return (Byte64Shuffle) VectorSupport.shuffleIota(ETYPE, Byte64Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i * lstep + lstart)));\n@@ -198,1 +198,1 @@\n-            super.uOpTemplate((Byte64Mask)m, f);  \/\/ specialize\n+            super.uOpTemplate((Byte64Mask) m, f);  \/\/ specialize\n@@ -206,1 +206,1 @@\n-        return (Byte64Vector) super.bOpTemplate((Byte64Vector)v, f);  \/\/ specialize\n+        return (Byte64Vector) super.bOpTemplate((Byte64Vector) v, f);  \/\/ specialize\n@@ -214,1 +214,1 @@\n-            super.bOpTemplate((Byte64Vector)v, (Byte64Mask)m,\n+            super.bOpTemplate((Byte64Vector) v, (Byte64Mask) m,\n@@ -224,1 +224,1 @@\n-            super.tOpTemplate((Byte64Vector)v1, (Byte64Vector)v2,\n+            super.tOpTemplate((Byte64Vector) v1, (Byte64Vector) v2,\n@@ -233,2 +233,2 @@\n-            super.tOpTemplate((Byte64Vector)v1, (Byte64Vector)v2,\n-                              (Byte64Mask)m, f);  \/\/ specialize\n+            super.tOpTemplate((Byte64Vector) v1, (Byte64Vector) v2,\n+                              (Byte64Mask) m, f);  \/\/ specialize\n@@ -526,1 +526,1 @@\n-                                    return (long)vecarr[ix];\n+                                    return (long) vecarr[ix];\n@@ -549,1 +549,1 @@\n-                                this, i, (long)e,\n+                                this, i, (long) e,\n@@ -552,1 +552,1 @@\n-                                    res[ix] = (byte)bits;\n+                                    res[ix] = (byte) bits;\n@@ -600,1 +600,1 @@\n-            return (boolean[])getPayload();\n+            return (boolean[]) getPayload();\n@@ -617,1 +617,1 @@\n-            boolean[] mbits = ((Byte64Mask)m).getBits();\n+            boolean[] mbits = ((Byte64Mask) m).getBits();\n@@ -641,1 +641,1 @@\n-            return  dsp.maskFactory(maskArray).check(dsp);\n+            return dsp.maskFactory(maskArray).check(dsp);\n@@ -662,1 +662,1 @@\n-            Byte64Mask m = (Byte64Mask)mask;\n+            Byte64Mask m = (Byte64Mask) mask;\n@@ -677,1 +677,1 @@\n-            return (Byte64Mask)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return (Byte64Mask) VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -689,1 +689,1 @@\n-            Byte64Mask m = (Byte64Mask)mask;\n+            Byte64Mask m = (Byte64Mask) mask;\n@@ -699,1 +699,1 @@\n-            Byte64Mask m = (Byte64Mask)mask;\n+            Byte64Mask m = (Byte64Mask) mask;\n@@ -709,1 +709,1 @@\n-            Byte64Mask m = (Byte64Mask)mask;\n+            Byte64Mask m = (Byte64Mask) mask;\n@@ -755,1 +755,1 @@\n-                                         (m, __) -> anyTrueHelper(((Byte64Mask)m).getBits()));\n+                                         (m, __) -> anyTrueHelper(((Byte64Mask) m).getBits()));\n@@ -763,1 +763,1 @@\n-                                         (m, __) -> allTrueHelper(((Byte64Mask)m).getBits()));\n+                                         (m, __) -> allTrueHelper(((Byte64Mask) m).getBits()));\n@@ -817,1 +817,1 @@\n-                                                    (s) -> ((Byte64Vector)(((AbstractShuffle<Byte>)(s)).toVectorTemplate())));\n+                                                    (s) -> ((Byte64Vector) (((AbstractShuffle<Byte>) (s)).toVectorTemplate())));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte64Vector.java","additions":26,"deletions":26,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -117,1 +117,1 @@\n-        return (byte[])getPayload();\n+        return (byte[]) getPayload();\n@@ -147,2 +147,2 @@\n-        return (ByteMaxShuffle)VectorSupport.shuffleIota(ETYPE, ByteMaxShuffle.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n+        return (ByteMaxShuffle) VectorSupport.shuffleIota(ETYPE, ByteMaxShuffle.class, VSPECIES, VLENGTH, start, step, 1,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i * lstep + lstart, l))));\n@@ -150,2 +150,2 @@\n-        return (ByteMaxShuffle)VectorSupport.shuffleIota(ETYPE, ByteMaxShuffle.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n+        return (ByteMaxShuffle) VectorSupport.shuffleIota(ETYPE, ByteMaxShuffle.class, VSPECIES, VLENGTH, start, step, 0,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i * lstep + lstart)));\n@@ -198,1 +198,1 @@\n-            super.uOpTemplate((ByteMaxMask)m, f);  \/\/ specialize\n+            super.uOpTemplate((ByteMaxMask) m, f);  \/\/ specialize\n@@ -206,1 +206,1 @@\n-        return (ByteMaxVector) super.bOpTemplate((ByteMaxVector)v, f);  \/\/ specialize\n+        return (ByteMaxVector) super.bOpTemplate((ByteMaxVector) v, f);  \/\/ specialize\n@@ -214,1 +214,1 @@\n-            super.bOpTemplate((ByteMaxVector)v, (ByteMaxMask)m,\n+            super.bOpTemplate((ByteMaxVector) v, (ByteMaxMask) m,\n@@ -224,1 +224,1 @@\n-            super.tOpTemplate((ByteMaxVector)v1, (ByteMaxVector)v2,\n+            super.tOpTemplate((ByteMaxVector) v1, (ByteMaxVector) v2,\n@@ -233,2 +233,2 @@\n-            super.tOpTemplate((ByteMaxVector)v1, (ByteMaxVector)v2,\n-                              (ByteMaxMask)m, f);  \/\/ specialize\n+            super.tOpTemplate((ByteMaxVector) v1, (ByteMaxVector) v2,\n+                              (ByteMaxMask) m, f);  \/\/ specialize\n@@ -519,1 +519,1 @@\n-                                    return (long)vecarr[ix];\n+                                    return (long) vecarr[ix];\n@@ -535,1 +535,1 @@\n-                                this, i, (long)e,\n+                                this, i, (long) e,\n@@ -538,1 +538,1 @@\n-                                    res[ix] = (byte)bits;\n+                                    res[ix] = (byte) bits;\n@@ -586,1 +586,1 @@\n-            return (boolean[])getPayload();\n+            return (boolean[]) getPayload();\n@@ -603,1 +603,1 @@\n-            boolean[] mbits = ((ByteMaxMask)m).getBits();\n+            boolean[] mbits = ((ByteMaxMask) m).getBits();\n@@ -627,1 +627,1 @@\n-            return  dsp.maskFactory(maskArray).check(dsp);\n+            return dsp.maskFactory(maskArray).check(dsp);\n@@ -648,1 +648,1 @@\n-            ByteMaxMask m = (ByteMaxMask)mask;\n+            ByteMaxMask m = (ByteMaxMask) mask;\n@@ -663,1 +663,1 @@\n-            return (ByteMaxMask)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return (ByteMaxMask) VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -675,1 +675,1 @@\n-            ByteMaxMask m = (ByteMaxMask)mask;\n+            ByteMaxMask m = (ByteMaxMask) mask;\n@@ -685,1 +685,1 @@\n-            ByteMaxMask m = (ByteMaxMask)mask;\n+            ByteMaxMask m = (ByteMaxMask) mask;\n@@ -695,1 +695,1 @@\n-            ByteMaxMask m = (ByteMaxMask)mask;\n+            ByteMaxMask m = (ByteMaxMask) mask;\n@@ -741,1 +741,1 @@\n-                                         (m, __) -> anyTrueHelper(((ByteMaxMask)m).getBits()));\n+                                         (m, __) -> anyTrueHelper(((ByteMaxMask) m).getBits()));\n@@ -749,1 +749,1 @@\n-                                         (m, __) -> allTrueHelper(((ByteMaxMask)m).getBits()));\n+                                         (m, __) -> allTrueHelper(((ByteMaxMask) m).getBits()));\n@@ -803,1 +803,1 @@\n-                                                    (s) -> ((ByteMaxVector)(((AbstractShuffle<Byte>)(s)).toVectorTemplate())));\n+                                                    (s) -> ((ByteMaxVector) (((AbstractShuffle<Byte>) (s)).toVectorTemplate())));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteMaxVector.java","additions":26,"deletions":26,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -361,2 +361,2 @@\n-        for(int i = 0,j = 0; i < vsp.length(); i++) {\n-            if(m.laneIsSet(i)) {\n+        for (int i = 0, j = 0; i < vsp.length(); i++) {\n+            if (m.laneIsSet(i)) {\n@@ -376,1 +376,1 @@\n-        for(int i = 0, j = 0; i < vsp.length(); i++) {\n+        for (int i = 0, j = 0; i < vsp.length(); i++) {\n@@ -430,1 +430,1 @@\n-        for (int i = 0; i < length(); i++){\n+        for (int i = 0; i < length(); i++) {\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteVector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -117,1 +117,1 @@\n-        return (double[])getPayload();\n+        return (double[]) getPayload();\n@@ -147,2 +147,2 @@\n-        return (Double128Shuffle)VectorSupport.shuffleIota(ETYPE, Double128Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n+        return (Double128Shuffle) VectorSupport.shuffleIota(ETYPE, Double128Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i * lstep + lstart, l))));\n@@ -150,2 +150,2 @@\n-        return (Double128Shuffle)VectorSupport.shuffleIota(ETYPE, Double128Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n+        return (Double128Shuffle) VectorSupport.shuffleIota(ETYPE, Double128Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i * lstep + lstart)));\n@@ -198,1 +198,1 @@\n-            super.uOpTemplate((Double128Mask)m, f);  \/\/ specialize\n+            super.uOpTemplate((Double128Mask) m, f);  \/\/ specialize\n@@ -206,1 +206,1 @@\n-        return (Double128Vector) super.bOpTemplate((Double128Vector)v, f);  \/\/ specialize\n+        return (Double128Vector) super.bOpTemplate((Double128Vector) v, f);  \/\/ specialize\n@@ -214,1 +214,1 @@\n-            super.bOpTemplate((Double128Vector)v, (Double128Mask)m,\n+            super.bOpTemplate((Double128Vector) v, (Double128Mask) m,\n@@ -224,1 +224,1 @@\n-            super.tOpTemplate((Double128Vector)v1, (Double128Vector)v2,\n+            super.tOpTemplate((Double128Vector) v1, (Double128Vector) v2,\n@@ -233,2 +233,2 @@\n-            super.tOpTemplate((Double128Vector)v1, (Double128Vector)v2,\n-                              (Double128Mask)m, f);  \/\/ specialize\n+            super.tOpTemplate((Double128Vector) v1, (Double128Vector) v2,\n+                              (Double128Mask) m, f);  \/\/ specialize\n@@ -509,1 +509,1 @@\n-                     return (long)Double.doubleToLongBits(vecarr[ix]);\n+                     return (long) Double.doubleToLongBits(vecarr[ix]);\n@@ -526,1 +526,1 @@\n-                                this, i, (long)Double.doubleToLongBits(e),\n+                                this, i, (long) Double.doubleToLongBits(e),\n@@ -529,1 +529,1 @@\n-                                    res[ix] = Double.longBitsToDouble((long)bits);\n+                                    res[ix] = Double.longBitsToDouble((long) bits);\n@@ -577,1 +577,1 @@\n-            return (boolean[])getPayload();\n+            return (boolean[]) getPayload();\n@@ -594,1 +594,1 @@\n-            boolean[] mbits = ((Double128Mask)m).getBits();\n+            boolean[] mbits = ((Double128Mask) m).getBits();\n@@ -618,1 +618,1 @@\n-            return  dsp.maskFactory(maskArray).check(dsp);\n+            return dsp.maskFactory(maskArray).check(dsp);\n@@ -639,1 +639,1 @@\n-            Double128Mask m = (Double128Mask)mask;\n+            Double128Mask m = (Double128Mask) mask;\n@@ -654,1 +654,1 @@\n-            return (Double128Mask)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return (Double128Mask) VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -666,1 +666,1 @@\n-            Double128Mask m = (Double128Mask)mask;\n+            Double128Mask m = (Double128Mask) mask;\n@@ -676,1 +676,1 @@\n-            Double128Mask m = (Double128Mask)mask;\n+            Double128Mask m = (Double128Mask) mask;\n@@ -686,1 +686,1 @@\n-            Double128Mask m = (Double128Mask)mask;\n+            Double128Mask m = (Double128Mask) mask;\n@@ -732,1 +732,1 @@\n-                                         (m, __) -> anyTrueHelper(((Double128Mask)m).getBits()));\n+                                         (m, __) -> anyTrueHelper(((Double128Mask) m).getBits()));\n@@ -740,1 +740,1 @@\n-                                         (m, __) -> allTrueHelper(((Double128Mask)m).getBits()));\n+                                         (m, __) -> allTrueHelper(((Double128Mask) m).getBits()));\n@@ -794,1 +794,1 @@\n-                                                    (s) -> ((Double128Vector)(((AbstractShuffle<Double>)(s)).toVectorTemplate())));\n+                                                    (s) -> ((Double128Vector) (((AbstractShuffle<Double>) (s)).toVectorTemplate())));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double128Vector.java","additions":26,"deletions":26,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -117,1 +117,1 @@\n-        return (double[])getPayload();\n+        return (double[]) getPayload();\n@@ -147,2 +147,2 @@\n-        return (Double256Shuffle)VectorSupport.shuffleIota(ETYPE, Double256Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n+        return (Double256Shuffle) VectorSupport.shuffleIota(ETYPE, Double256Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i * lstep + lstart, l))));\n@@ -150,2 +150,2 @@\n-        return (Double256Shuffle)VectorSupport.shuffleIota(ETYPE, Double256Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n+        return (Double256Shuffle) VectorSupport.shuffleIota(ETYPE, Double256Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i * lstep + lstart)));\n@@ -198,1 +198,1 @@\n-            super.uOpTemplate((Double256Mask)m, f);  \/\/ specialize\n+            super.uOpTemplate((Double256Mask) m, f);  \/\/ specialize\n@@ -206,1 +206,1 @@\n-        return (Double256Vector) super.bOpTemplate((Double256Vector)v, f);  \/\/ specialize\n+        return (Double256Vector) super.bOpTemplate((Double256Vector) v, f);  \/\/ specialize\n@@ -214,1 +214,1 @@\n-            super.bOpTemplate((Double256Vector)v, (Double256Mask)m,\n+            super.bOpTemplate((Double256Vector) v, (Double256Mask) m,\n@@ -224,1 +224,1 @@\n-            super.tOpTemplate((Double256Vector)v1, (Double256Vector)v2,\n+            super.tOpTemplate((Double256Vector) v1, (Double256Vector) v2,\n@@ -233,2 +233,2 @@\n-            super.tOpTemplate((Double256Vector)v1, (Double256Vector)v2,\n-                              (Double256Mask)m, f);  \/\/ specialize\n+            super.tOpTemplate((Double256Vector) v1, (Double256Vector) v2,\n+                              (Double256Mask) m, f);  \/\/ specialize\n@@ -511,1 +511,1 @@\n-                     return (long)Double.doubleToLongBits(vecarr[ix]);\n+                     return (long) Double.doubleToLongBits(vecarr[ix]);\n@@ -530,1 +530,1 @@\n-                                this, i, (long)Double.doubleToLongBits(e),\n+                                this, i, (long) Double.doubleToLongBits(e),\n@@ -533,1 +533,1 @@\n-                                    res[ix] = Double.longBitsToDouble((long)bits);\n+                                    res[ix] = Double.longBitsToDouble((long) bits);\n@@ -581,1 +581,1 @@\n-            return (boolean[])getPayload();\n+            return (boolean[]) getPayload();\n@@ -598,1 +598,1 @@\n-            boolean[] mbits = ((Double256Mask)m).getBits();\n+            boolean[] mbits = ((Double256Mask) m).getBits();\n@@ -622,1 +622,1 @@\n-            return  dsp.maskFactory(maskArray).check(dsp);\n+            return dsp.maskFactory(maskArray).check(dsp);\n@@ -643,1 +643,1 @@\n-            Double256Mask m = (Double256Mask)mask;\n+            Double256Mask m = (Double256Mask) mask;\n@@ -658,1 +658,1 @@\n-            return (Double256Mask)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return (Double256Mask) VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -670,1 +670,1 @@\n-            Double256Mask m = (Double256Mask)mask;\n+            Double256Mask m = (Double256Mask) mask;\n@@ -680,1 +680,1 @@\n-            Double256Mask m = (Double256Mask)mask;\n+            Double256Mask m = (Double256Mask) mask;\n@@ -690,1 +690,1 @@\n-            Double256Mask m = (Double256Mask)mask;\n+            Double256Mask m = (Double256Mask) mask;\n@@ -736,1 +736,1 @@\n-                                         (m, __) -> anyTrueHelper(((Double256Mask)m).getBits()));\n+                                         (m, __) -> anyTrueHelper(((Double256Mask) m).getBits()));\n@@ -744,1 +744,1 @@\n-                                         (m, __) -> allTrueHelper(((Double256Mask)m).getBits()));\n+                                         (m, __) -> allTrueHelper(((Double256Mask) m).getBits()));\n@@ -798,1 +798,1 @@\n-                                                    (s) -> ((Double256Vector)(((AbstractShuffle<Double>)(s)).toVectorTemplate())));\n+                                                    (s) -> ((Double256Vector) (((AbstractShuffle<Double>) (s)).toVectorTemplate())));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double256Vector.java","additions":26,"deletions":26,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -117,1 +117,1 @@\n-        return (double[])getPayload();\n+        return (double[]) getPayload();\n@@ -147,2 +147,2 @@\n-        return (Double512Shuffle)VectorSupport.shuffleIota(ETYPE, Double512Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n+        return (Double512Shuffle) VectorSupport.shuffleIota(ETYPE, Double512Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i * lstep + lstart, l))));\n@@ -150,2 +150,2 @@\n-        return (Double512Shuffle)VectorSupport.shuffleIota(ETYPE, Double512Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n+        return (Double512Shuffle) VectorSupport.shuffleIota(ETYPE, Double512Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i * lstep + lstart)));\n@@ -198,1 +198,1 @@\n-            super.uOpTemplate((Double512Mask)m, f);  \/\/ specialize\n+            super.uOpTemplate((Double512Mask) m, f);  \/\/ specialize\n@@ -206,1 +206,1 @@\n-        return (Double512Vector) super.bOpTemplate((Double512Vector)v, f);  \/\/ specialize\n+        return (Double512Vector) super.bOpTemplate((Double512Vector) v, f);  \/\/ specialize\n@@ -214,1 +214,1 @@\n-            super.bOpTemplate((Double512Vector)v, (Double512Mask)m,\n+            super.bOpTemplate((Double512Vector) v, (Double512Mask) m,\n@@ -224,1 +224,1 @@\n-            super.tOpTemplate((Double512Vector)v1, (Double512Vector)v2,\n+            super.tOpTemplate((Double512Vector) v1, (Double512Vector) v2,\n@@ -233,2 +233,2 @@\n-            super.tOpTemplate((Double512Vector)v1, (Double512Vector)v2,\n-                              (Double512Mask)m, f);  \/\/ specialize\n+            super.tOpTemplate((Double512Vector) v1, (Double512Vector) v2,\n+                              (Double512Mask) m, f);  \/\/ specialize\n@@ -515,1 +515,1 @@\n-                     return (long)Double.doubleToLongBits(vecarr[ix]);\n+                     return (long) Double.doubleToLongBits(vecarr[ix]);\n@@ -538,1 +538,1 @@\n-                                this, i, (long)Double.doubleToLongBits(e),\n+                                this, i, (long) Double.doubleToLongBits(e),\n@@ -541,1 +541,1 @@\n-                                    res[ix] = Double.longBitsToDouble((long)bits);\n+                                    res[ix] = Double.longBitsToDouble((long) bits);\n@@ -589,1 +589,1 @@\n-            return (boolean[])getPayload();\n+            return (boolean[]) getPayload();\n@@ -606,1 +606,1 @@\n-            boolean[] mbits = ((Double512Mask)m).getBits();\n+            boolean[] mbits = ((Double512Mask) m).getBits();\n@@ -630,1 +630,1 @@\n-            return  dsp.maskFactory(maskArray).check(dsp);\n+            return dsp.maskFactory(maskArray).check(dsp);\n@@ -651,1 +651,1 @@\n-            Double512Mask m = (Double512Mask)mask;\n+            Double512Mask m = (Double512Mask) mask;\n@@ -666,1 +666,1 @@\n-            return (Double512Mask)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return (Double512Mask) VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -678,1 +678,1 @@\n-            Double512Mask m = (Double512Mask)mask;\n+            Double512Mask m = (Double512Mask) mask;\n@@ -688,1 +688,1 @@\n-            Double512Mask m = (Double512Mask)mask;\n+            Double512Mask m = (Double512Mask) mask;\n@@ -698,1 +698,1 @@\n-            Double512Mask m = (Double512Mask)mask;\n+            Double512Mask m = (Double512Mask) mask;\n@@ -744,1 +744,1 @@\n-                                         (m, __) -> anyTrueHelper(((Double512Mask)m).getBits()));\n+                                         (m, __) -> anyTrueHelper(((Double512Mask) m).getBits()));\n@@ -752,1 +752,1 @@\n-                                         (m, __) -> allTrueHelper(((Double512Mask)m).getBits()));\n+                                         (m, __) -> allTrueHelper(((Double512Mask) m).getBits()));\n@@ -806,1 +806,1 @@\n-                                                    (s) -> ((Double512Vector)(((AbstractShuffle<Double>)(s)).toVectorTemplate())));\n+                                                    (s) -> ((Double512Vector) (((AbstractShuffle<Double>) (s)).toVectorTemplate())));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double512Vector.java","additions":26,"deletions":26,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -117,1 +117,1 @@\n-        return (double[])getPayload();\n+        return (double[]) getPayload();\n@@ -147,2 +147,2 @@\n-        return (Double64Shuffle)VectorSupport.shuffleIota(ETYPE, Double64Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n+        return (Double64Shuffle) VectorSupport.shuffleIota(ETYPE, Double64Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i * lstep + lstart, l))));\n@@ -150,2 +150,2 @@\n-        return (Double64Shuffle)VectorSupport.shuffleIota(ETYPE, Double64Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n+        return (Double64Shuffle) VectorSupport.shuffleIota(ETYPE, Double64Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i * lstep + lstart)));\n@@ -198,1 +198,1 @@\n-            super.uOpTemplate((Double64Mask)m, f);  \/\/ specialize\n+            super.uOpTemplate((Double64Mask) m, f);  \/\/ specialize\n@@ -206,1 +206,1 @@\n-        return (Double64Vector) super.bOpTemplate((Double64Vector)v, f);  \/\/ specialize\n+        return (Double64Vector) super.bOpTemplate((Double64Vector) v, f);  \/\/ specialize\n@@ -214,1 +214,1 @@\n-            super.bOpTemplate((Double64Vector)v, (Double64Mask)m,\n+            super.bOpTemplate((Double64Vector) v, (Double64Mask) m,\n@@ -224,1 +224,1 @@\n-            super.tOpTemplate((Double64Vector)v1, (Double64Vector)v2,\n+            super.tOpTemplate((Double64Vector) v1, (Double64Vector) v2,\n@@ -233,2 +233,2 @@\n-            super.tOpTemplate((Double64Vector)v1, (Double64Vector)v2,\n-                              (Double64Mask)m, f);  \/\/ specialize\n+            super.tOpTemplate((Double64Vector) v1, (Double64Vector) v2,\n+                              (Double64Mask) m, f);  \/\/ specialize\n@@ -508,1 +508,1 @@\n-                     return (long)Double.doubleToLongBits(vecarr[ix]);\n+                     return (long) Double.doubleToLongBits(vecarr[ix]);\n@@ -524,1 +524,1 @@\n-                                this, i, (long)Double.doubleToLongBits(e),\n+                                this, i, (long) Double.doubleToLongBits(e),\n@@ -527,1 +527,1 @@\n-                                    res[ix] = Double.longBitsToDouble((long)bits);\n+                                    res[ix] = Double.longBitsToDouble((long) bits);\n@@ -575,1 +575,1 @@\n-            return (boolean[])getPayload();\n+            return (boolean[]) getPayload();\n@@ -592,1 +592,1 @@\n-            boolean[] mbits = ((Double64Mask)m).getBits();\n+            boolean[] mbits = ((Double64Mask) m).getBits();\n@@ -616,1 +616,1 @@\n-            return  dsp.maskFactory(maskArray).check(dsp);\n+            return dsp.maskFactory(maskArray).check(dsp);\n@@ -637,1 +637,1 @@\n-            Double64Mask m = (Double64Mask)mask;\n+            Double64Mask m = (Double64Mask) mask;\n@@ -652,1 +652,1 @@\n-            return (Double64Mask)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return (Double64Mask) VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -664,1 +664,1 @@\n-            Double64Mask m = (Double64Mask)mask;\n+            Double64Mask m = (Double64Mask) mask;\n@@ -674,1 +674,1 @@\n-            Double64Mask m = (Double64Mask)mask;\n+            Double64Mask m = (Double64Mask) mask;\n@@ -684,1 +684,1 @@\n-            Double64Mask m = (Double64Mask)mask;\n+            Double64Mask m = (Double64Mask) mask;\n@@ -730,1 +730,1 @@\n-                                         (m, __) -> anyTrueHelper(((Double64Mask)m).getBits()));\n+                                         (m, __) -> anyTrueHelper(((Double64Mask) m).getBits()));\n@@ -738,1 +738,1 @@\n-                                         (m, __) -> allTrueHelper(((Double64Mask)m).getBits()));\n+                                         (m, __) -> allTrueHelper(((Double64Mask) m).getBits()));\n@@ -792,1 +792,1 @@\n-                                                    (s) -> ((Double64Vector)(((AbstractShuffle<Double>)(s)).toVectorTemplate())));\n+                                                    (s) -> ((Double64Vector) (((AbstractShuffle<Double>) (s)).toVectorTemplate())));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double64Vector.java","additions":26,"deletions":26,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -117,1 +117,1 @@\n-        return (double[])getPayload();\n+        return (double[]) getPayload();\n@@ -147,2 +147,2 @@\n-        return (DoubleMaxShuffle)VectorSupport.shuffleIota(ETYPE, DoubleMaxShuffle.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n+        return (DoubleMaxShuffle) VectorSupport.shuffleIota(ETYPE, DoubleMaxShuffle.class, VSPECIES, VLENGTH, start, step, 1,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i * lstep + lstart, l))));\n@@ -150,2 +150,2 @@\n-        return (DoubleMaxShuffle)VectorSupport.shuffleIota(ETYPE, DoubleMaxShuffle.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n+        return (DoubleMaxShuffle) VectorSupport.shuffleIota(ETYPE, DoubleMaxShuffle.class, VSPECIES, VLENGTH, start, step, 0,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i * lstep + lstart)));\n@@ -198,1 +198,1 @@\n-            super.uOpTemplate((DoubleMaxMask)m, f);  \/\/ specialize\n+            super.uOpTemplate((DoubleMaxMask) m, f);  \/\/ specialize\n@@ -206,1 +206,1 @@\n-        return (DoubleMaxVector) super.bOpTemplate((DoubleMaxVector)v, f);  \/\/ specialize\n+        return (DoubleMaxVector) super.bOpTemplate((DoubleMaxVector) v, f);  \/\/ specialize\n@@ -214,1 +214,1 @@\n-            super.bOpTemplate((DoubleMaxVector)v, (DoubleMaxMask)m,\n+            super.bOpTemplate((DoubleMaxVector) v, (DoubleMaxMask) m,\n@@ -224,1 +224,1 @@\n-            super.tOpTemplate((DoubleMaxVector)v1, (DoubleMaxVector)v2,\n+            super.tOpTemplate((DoubleMaxVector) v1, (DoubleMaxVector) v2,\n@@ -233,2 +233,2 @@\n-            super.tOpTemplate((DoubleMaxVector)v1, (DoubleMaxVector)v2,\n-                              (DoubleMaxMask)m, f);  \/\/ specialize\n+            super.tOpTemplate((DoubleMaxVector) v1, (DoubleMaxVector) v2,\n+                              (DoubleMaxMask) m, f);  \/\/ specialize\n@@ -507,1 +507,1 @@\n-                     return (long)Double.doubleToLongBits(vecarr[ix]);\n+                     return (long) Double.doubleToLongBits(vecarr[ix]);\n@@ -523,1 +523,1 @@\n-                                this, i, (long)Double.doubleToLongBits(e),\n+                                this, i, (long) Double.doubleToLongBits(e),\n@@ -526,1 +526,1 @@\n-                                    res[ix] = Double.longBitsToDouble((long)bits);\n+                                    res[ix] = Double.longBitsToDouble((long) bits);\n@@ -574,1 +574,1 @@\n-            return (boolean[])getPayload();\n+            return (boolean[]) getPayload();\n@@ -591,1 +591,1 @@\n-            boolean[] mbits = ((DoubleMaxMask)m).getBits();\n+            boolean[] mbits = ((DoubleMaxMask) m).getBits();\n@@ -615,1 +615,1 @@\n-            return  dsp.maskFactory(maskArray).check(dsp);\n+            return dsp.maskFactory(maskArray).check(dsp);\n@@ -636,1 +636,1 @@\n-            DoubleMaxMask m = (DoubleMaxMask)mask;\n+            DoubleMaxMask m = (DoubleMaxMask) mask;\n@@ -651,1 +651,1 @@\n-            return (DoubleMaxMask)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return (DoubleMaxMask) VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -663,1 +663,1 @@\n-            DoubleMaxMask m = (DoubleMaxMask)mask;\n+            DoubleMaxMask m = (DoubleMaxMask) mask;\n@@ -673,1 +673,1 @@\n-            DoubleMaxMask m = (DoubleMaxMask)mask;\n+            DoubleMaxMask m = (DoubleMaxMask) mask;\n@@ -683,1 +683,1 @@\n-            DoubleMaxMask m = (DoubleMaxMask)mask;\n+            DoubleMaxMask m = (DoubleMaxMask) mask;\n@@ -729,1 +729,1 @@\n-                                         (m, __) -> anyTrueHelper(((DoubleMaxMask)m).getBits()));\n+                                         (m, __) -> anyTrueHelper(((DoubleMaxMask) m).getBits()));\n@@ -737,1 +737,1 @@\n-                                         (m, __) -> allTrueHelper(((DoubleMaxMask)m).getBits()));\n+                                         (m, __) -> allTrueHelper(((DoubleMaxMask) m).getBits()));\n@@ -791,1 +791,1 @@\n-                                                    (s) -> ((DoubleMaxVector)(((AbstractShuffle<Double>)(s)).toVectorTemplate())));\n+                                                    (s) -> ((DoubleMaxVector) (((AbstractShuffle<Double>) (s)).toVectorTemplate())));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleMaxVector.java","additions":26,"deletions":26,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -361,2 +361,2 @@\n-        for(int i = 0,j = 0; i < vsp.length(); i++) {\n-            if(m.laneIsSet(i)) {\n+        for (int i = 0, j = 0; i < vsp.length(); i++) {\n+            if (m.laneIsSet(i)) {\n@@ -376,1 +376,1 @@\n-        for(int i = 0, j = 0; i < vsp.length(); i++) {\n+        for (int i = 0, j = 0; i < vsp.length(); i++) {\n@@ -430,1 +430,1 @@\n-        for (int i = 0; i < length(); i++){\n+        for (int i = 0; i < length(); i++) {\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleVector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -117,1 +117,1 @@\n-        return (float[])getPayload();\n+        return (float[]) getPayload();\n@@ -147,2 +147,2 @@\n-        return (Float128Shuffle)VectorSupport.shuffleIota(ETYPE, Float128Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n+        return (Float128Shuffle) VectorSupport.shuffleIota(ETYPE, Float128Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i * lstep + lstart, l))));\n@@ -150,2 +150,2 @@\n-        return (Float128Shuffle)VectorSupport.shuffleIota(ETYPE, Float128Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n+        return (Float128Shuffle) VectorSupport.shuffleIota(ETYPE, Float128Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i * lstep + lstart)));\n@@ -198,1 +198,1 @@\n-            super.uOpTemplate((Float128Mask)m, f);  \/\/ specialize\n+            super.uOpTemplate((Float128Mask) m, f);  \/\/ specialize\n@@ -206,1 +206,1 @@\n-        return (Float128Vector) super.bOpTemplate((Float128Vector)v, f);  \/\/ specialize\n+        return (Float128Vector) super.bOpTemplate((Float128Vector) v, f);  \/\/ specialize\n@@ -214,1 +214,1 @@\n-            super.bOpTemplate((Float128Vector)v, (Float128Mask)m,\n+            super.bOpTemplate((Float128Vector) v, (Float128Mask) m,\n@@ -224,1 +224,1 @@\n-            super.tOpTemplate((Float128Vector)v1, (Float128Vector)v2,\n+            super.tOpTemplate((Float128Vector) v1, (Float128Vector) v2,\n@@ -233,2 +233,2 @@\n-            super.tOpTemplate((Float128Vector)v1, (Float128Vector)v2,\n-                              (Float128Mask)m, f);  \/\/ specialize\n+            super.tOpTemplate((Float128Vector) v1, (Float128Vector) v2,\n+                              (Float128Mask) m, f);  \/\/ specialize\n@@ -511,1 +511,1 @@\n-                     return (long)Float.floatToIntBits(vecarr[ix]);\n+                     return (long) Float.floatToIntBits(vecarr[ix]);\n@@ -530,1 +530,1 @@\n-                                this, i, (long)Float.floatToIntBits(e),\n+                                this, i, (long) Float.floatToIntBits(e),\n@@ -533,1 +533,1 @@\n-                                    res[ix] = Float.intBitsToFloat((int)bits);\n+                                    res[ix] = Float.intBitsToFloat((int) bits);\n@@ -581,1 +581,1 @@\n-            return (boolean[])getPayload();\n+            return (boolean[]) getPayload();\n@@ -598,1 +598,1 @@\n-            boolean[] mbits = ((Float128Mask)m).getBits();\n+            boolean[] mbits = ((Float128Mask) m).getBits();\n@@ -622,1 +622,1 @@\n-            return  dsp.maskFactory(maskArray).check(dsp);\n+            return dsp.maskFactory(maskArray).check(dsp);\n@@ -643,1 +643,1 @@\n-            Float128Mask m = (Float128Mask)mask;\n+            Float128Mask m = (Float128Mask) mask;\n@@ -658,1 +658,1 @@\n-            return (Float128Mask)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return (Float128Mask) VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -670,1 +670,1 @@\n-            Float128Mask m = (Float128Mask)mask;\n+            Float128Mask m = (Float128Mask) mask;\n@@ -680,1 +680,1 @@\n-            Float128Mask m = (Float128Mask)mask;\n+            Float128Mask m = (Float128Mask) mask;\n@@ -690,1 +690,1 @@\n-            Float128Mask m = (Float128Mask)mask;\n+            Float128Mask m = (Float128Mask) mask;\n@@ -736,1 +736,1 @@\n-                                         (m, __) -> anyTrueHelper(((Float128Mask)m).getBits()));\n+                                         (m, __) -> anyTrueHelper(((Float128Mask) m).getBits()));\n@@ -744,1 +744,1 @@\n-                                         (m, __) -> allTrueHelper(((Float128Mask)m).getBits()));\n+                                         (m, __) -> allTrueHelper(((Float128Mask) m).getBits()));\n@@ -798,1 +798,1 @@\n-                                                    (s) -> ((Float128Vector)(((AbstractShuffle<Float>)(s)).toVectorTemplate())));\n+                                                    (s) -> ((Float128Vector) (((AbstractShuffle<Float>) (s)).toVectorTemplate())));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float128Vector.java","additions":26,"deletions":26,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -117,1 +117,1 @@\n-        return (float[])getPayload();\n+        return (float[]) getPayload();\n@@ -147,2 +147,2 @@\n-        return (Float256Shuffle)VectorSupport.shuffleIota(ETYPE, Float256Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n+        return (Float256Shuffle) VectorSupport.shuffleIota(ETYPE, Float256Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i * lstep + lstart, l))));\n@@ -150,2 +150,2 @@\n-        return (Float256Shuffle)VectorSupport.shuffleIota(ETYPE, Float256Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n+        return (Float256Shuffle) VectorSupport.shuffleIota(ETYPE, Float256Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i * lstep + lstart)));\n@@ -198,1 +198,1 @@\n-            super.uOpTemplate((Float256Mask)m, f);  \/\/ specialize\n+            super.uOpTemplate((Float256Mask) m, f);  \/\/ specialize\n@@ -206,1 +206,1 @@\n-        return (Float256Vector) super.bOpTemplate((Float256Vector)v, f);  \/\/ specialize\n+        return (Float256Vector) super.bOpTemplate((Float256Vector) v, f);  \/\/ specialize\n@@ -214,1 +214,1 @@\n-            super.bOpTemplate((Float256Vector)v, (Float256Mask)m,\n+            super.bOpTemplate((Float256Vector) v, (Float256Mask) m,\n@@ -224,1 +224,1 @@\n-            super.tOpTemplate((Float256Vector)v1, (Float256Vector)v2,\n+            super.tOpTemplate((Float256Vector) v1, (Float256Vector) v2,\n@@ -233,2 +233,2 @@\n-            super.tOpTemplate((Float256Vector)v1, (Float256Vector)v2,\n-                              (Float256Mask)m, f);  \/\/ specialize\n+            super.tOpTemplate((Float256Vector) v1, (Float256Vector) v2,\n+                              (Float256Mask) m, f);  \/\/ specialize\n@@ -515,1 +515,1 @@\n-                     return (long)Float.floatToIntBits(vecarr[ix]);\n+                     return (long) Float.floatToIntBits(vecarr[ix]);\n@@ -538,1 +538,1 @@\n-                                this, i, (long)Float.floatToIntBits(e),\n+                                this, i, (long) Float.floatToIntBits(e),\n@@ -541,1 +541,1 @@\n-                                    res[ix] = Float.intBitsToFloat((int)bits);\n+                                    res[ix] = Float.intBitsToFloat((int) bits);\n@@ -589,1 +589,1 @@\n-            return (boolean[])getPayload();\n+            return (boolean[]) getPayload();\n@@ -606,1 +606,1 @@\n-            boolean[] mbits = ((Float256Mask)m).getBits();\n+            boolean[] mbits = ((Float256Mask) m).getBits();\n@@ -630,1 +630,1 @@\n-            return  dsp.maskFactory(maskArray).check(dsp);\n+            return dsp.maskFactory(maskArray).check(dsp);\n@@ -651,1 +651,1 @@\n-            Float256Mask m = (Float256Mask)mask;\n+            Float256Mask m = (Float256Mask) mask;\n@@ -666,1 +666,1 @@\n-            return (Float256Mask)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return (Float256Mask) VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -678,1 +678,1 @@\n-            Float256Mask m = (Float256Mask)mask;\n+            Float256Mask m = (Float256Mask) mask;\n@@ -688,1 +688,1 @@\n-            Float256Mask m = (Float256Mask)mask;\n+            Float256Mask m = (Float256Mask) mask;\n@@ -698,1 +698,1 @@\n-            Float256Mask m = (Float256Mask)mask;\n+            Float256Mask m = (Float256Mask) mask;\n@@ -744,1 +744,1 @@\n-                                         (m, __) -> anyTrueHelper(((Float256Mask)m).getBits()));\n+                                         (m, __) -> anyTrueHelper(((Float256Mask) m).getBits()));\n@@ -752,1 +752,1 @@\n-                                         (m, __) -> allTrueHelper(((Float256Mask)m).getBits()));\n+                                         (m, __) -> allTrueHelper(((Float256Mask) m).getBits()));\n@@ -806,1 +806,1 @@\n-                                                    (s) -> ((Float256Vector)(((AbstractShuffle<Float>)(s)).toVectorTemplate())));\n+                                                    (s) -> ((Float256Vector) (((AbstractShuffle<Float>) (s)).toVectorTemplate())));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float256Vector.java","additions":26,"deletions":26,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -117,1 +117,1 @@\n-        return (float[])getPayload();\n+        return (float[]) getPayload();\n@@ -147,2 +147,2 @@\n-        return (Float512Shuffle)VectorSupport.shuffleIota(ETYPE, Float512Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n+        return (Float512Shuffle) VectorSupport.shuffleIota(ETYPE, Float512Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i * lstep + lstart, l))));\n@@ -150,2 +150,2 @@\n-        return (Float512Shuffle)VectorSupport.shuffleIota(ETYPE, Float512Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n+        return (Float512Shuffle) VectorSupport.shuffleIota(ETYPE, Float512Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i * lstep + lstart)));\n@@ -198,1 +198,1 @@\n-            super.uOpTemplate((Float512Mask)m, f);  \/\/ specialize\n+            super.uOpTemplate((Float512Mask) m, f);  \/\/ specialize\n@@ -206,1 +206,1 @@\n-        return (Float512Vector) super.bOpTemplate((Float512Vector)v, f);  \/\/ specialize\n+        return (Float512Vector) super.bOpTemplate((Float512Vector) v, f);  \/\/ specialize\n@@ -214,1 +214,1 @@\n-            super.bOpTemplate((Float512Vector)v, (Float512Mask)m,\n+            super.bOpTemplate((Float512Vector) v, (Float512Mask) m,\n@@ -224,1 +224,1 @@\n-            super.tOpTemplate((Float512Vector)v1, (Float512Vector)v2,\n+            super.tOpTemplate((Float512Vector) v1, (Float512Vector) v2,\n@@ -233,2 +233,2 @@\n-            super.tOpTemplate((Float512Vector)v1, (Float512Vector)v2,\n-                              (Float512Mask)m, f);  \/\/ specialize\n+            super.tOpTemplate((Float512Vector) v1, (Float512Vector) v2,\n+                              (Float512Mask) m, f);  \/\/ specialize\n@@ -523,1 +523,1 @@\n-                     return (long)Float.floatToIntBits(vecarr[ix]);\n+                     return (long) Float.floatToIntBits(vecarr[ix]);\n@@ -554,1 +554,1 @@\n-                                this, i, (long)Float.floatToIntBits(e),\n+                                this, i, (long) Float.floatToIntBits(e),\n@@ -557,1 +557,1 @@\n-                                    res[ix] = Float.intBitsToFloat((int)bits);\n+                                    res[ix] = Float.intBitsToFloat((int) bits);\n@@ -605,1 +605,1 @@\n-            return (boolean[])getPayload();\n+            return (boolean[]) getPayload();\n@@ -622,1 +622,1 @@\n-            boolean[] mbits = ((Float512Mask)m).getBits();\n+            boolean[] mbits = ((Float512Mask) m).getBits();\n@@ -646,1 +646,1 @@\n-            return  dsp.maskFactory(maskArray).check(dsp);\n+            return dsp.maskFactory(maskArray).check(dsp);\n@@ -667,1 +667,1 @@\n-            Float512Mask m = (Float512Mask)mask;\n+            Float512Mask m = (Float512Mask) mask;\n@@ -682,1 +682,1 @@\n-            return (Float512Mask)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return (Float512Mask) VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -694,1 +694,1 @@\n-            Float512Mask m = (Float512Mask)mask;\n+            Float512Mask m = (Float512Mask) mask;\n@@ -704,1 +704,1 @@\n-            Float512Mask m = (Float512Mask)mask;\n+            Float512Mask m = (Float512Mask) mask;\n@@ -714,1 +714,1 @@\n-            Float512Mask m = (Float512Mask)mask;\n+            Float512Mask m = (Float512Mask) mask;\n@@ -760,1 +760,1 @@\n-                                         (m, __) -> anyTrueHelper(((Float512Mask)m).getBits()));\n+                                         (m, __) -> anyTrueHelper(((Float512Mask) m).getBits()));\n@@ -768,1 +768,1 @@\n-                                         (m, __) -> allTrueHelper(((Float512Mask)m).getBits()));\n+                                         (m, __) -> allTrueHelper(((Float512Mask) m).getBits()));\n@@ -822,1 +822,1 @@\n-                                                    (s) -> ((Float512Vector)(((AbstractShuffle<Float>)(s)).toVectorTemplate())));\n+                                                    (s) -> ((Float512Vector) (((AbstractShuffle<Float>) (s)).toVectorTemplate())));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float512Vector.java","additions":26,"deletions":26,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -117,1 +117,1 @@\n-        return (float[])getPayload();\n+        return (float[]) getPayload();\n@@ -147,2 +147,2 @@\n-        return (Float64Shuffle)VectorSupport.shuffleIota(ETYPE, Float64Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n+        return (Float64Shuffle) VectorSupport.shuffleIota(ETYPE, Float64Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i * lstep + lstart, l))));\n@@ -150,2 +150,2 @@\n-        return (Float64Shuffle)VectorSupport.shuffleIota(ETYPE, Float64Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n+        return (Float64Shuffle) VectorSupport.shuffleIota(ETYPE, Float64Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i * lstep + lstart)));\n@@ -198,1 +198,1 @@\n-            super.uOpTemplate((Float64Mask)m, f);  \/\/ specialize\n+            super.uOpTemplate((Float64Mask) m, f);  \/\/ specialize\n@@ -206,1 +206,1 @@\n-        return (Float64Vector) super.bOpTemplate((Float64Vector)v, f);  \/\/ specialize\n+        return (Float64Vector) super.bOpTemplate((Float64Vector) v, f);  \/\/ specialize\n@@ -214,1 +214,1 @@\n-            super.bOpTemplate((Float64Vector)v, (Float64Mask)m,\n+            super.bOpTemplate((Float64Vector) v, (Float64Mask) m,\n@@ -224,1 +224,1 @@\n-            super.tOpTemplate((Float64Vector)v1, (Float64Vector)v2,\n+            super.tOpTemplate((Float64Vector) v1, (Float64Vector) v2,\n@@ -233,2 +233,2 @@\n-            super.tOpTemplate((Float64Vector)v1, (Float64Vector)v2,\n-                              (Float64Mask)m, f);  \/\/ specialize\n+            super.tOpTemplate((Float64Vector) v1, (Float64Vector) v2,\n+                              (Float64Mask) m, f);  \/\/ specialize\n@@ -509,1 +509,1 @@\n-                     return (long)Float.floatToIntBits(vecarr[ix]);\n+                     return (long) Float.floatToIntBits(vecarr[ix]);\n@@ -526,1 +526,1 @@\n-                                this, i, (long)Float.floatToIntBits(e),\n+                                this, i, (long) Float.floatToIntBits(e),\n@@ -529,1 +529,1 @@\n-                                    res[ix] = Float.intBitsToFloat((int)bits);\n+                                    res[ix] = Float.intBitsToFloat((int) bits);\n@@ -577,1 +577,1 @@\n-            return (boolean[])getPayload();\n+            return (boolean[]) getPayload();\n@@ -594,1 +594,1 @@\n-            boolean[] mbits = ((Float64Mask)m).getBits();\n+            boolean[] mbits = ((Float64Mask) m).getBits();\n@@ -618,1 +618,1 @@\n-            return  dsp.maskFactory(maskArray).check(dsp);\n+            return dsp.maskFactory(maskArray).check(dsp);\n@@ -639,1 +639,1 @@\n-            Float64Mask m = (Float64Mask)mask;\n+            Float64Mask m = (Float64Mask) mask;\n@@ -654,1 +654,1 @@\n-            return (Float64Mask)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return (Float64Mask) VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -666,1 +666,1 @@\n-            Float64Mask m = (Float64Mask)mask;\n+            Float64Mask m = (Float64Mask) mask;\n@@ -676,1 +676,1 @@\n-            Float64Mask m = (Float64Mask)mask;\n+            Float64Mask m = (Float64Mask) mask;\n@@ -686,1 +686,1 @@\n-            Float64Mask m = (Float64Mask)mask;\n+            Float64Mask m = (Float64Mask) mask;\n@@ -732,1 +732,1 @@\n-                                         (m, __) -> anyTrueHelper(((Float64Mask)m).getBits()));\n+                                         (m, __) -> anyTrueHelper(((Float64Mask) m).getBits()));\n@@ -740,1 +740,1 @@\n-                                         (m, __) -> allTrueHelper(((Float64Mask)m).getBits()));\n+                                         (m, __) -> allTrueHelper(((Float64Mask) m).getBits()));\n@@ -794,1 +794,1 @@\n-                                                    (s) -> ((Float64Vector)(((AbstractShuffle<Float>)(s)).toVectorTemplate())));\n+                                                    (s) -> ((Float64Vector) (((AbstractShuffle<Float>) (s)).toVectorTemplate())));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float64Vector.java","additions":26,"deletions":26,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -117,1 +117,1 @@\n-        return (float[])getPayload();\n+        return (float[]) getPayload();\n@@ -147,2 +147,2 @@\n-        return (FloatMaxShuffle)VectorSupport.shuffleIota(ETYPE, FloatMaxShuffle.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n+        return (FloatMaxShuffle) VectorSupport.shuffleIota(ETYPE, FloatMaxShuffle.class, VSPECIES, VLENGTH, start, step, 1,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i * lstep + lstart, l))));\n@@ -150,2 +150,2 @@\n-        return (FloatMaxShuffle)VectorSupport.shuffleIota(ETYPE, FloatMaxShuffle.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n+        return (FloatMaxShuffle) VectorSupport.shuffleIota(ETYPE, FloatMaxShuffle.class, VSPECIES, VLENGTH, start, step, 0,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i * lstep + lstart)));\n@@ -198,1 +198,1 @@\n-            super.uOpTemplate((FloatMaxMask)m, f);  \/\/ specialize\n+            super.uOpTemplate((FloatMaxMask) m, f);  \/\/ specialize\n@@ -206,1 +206,1 @@\n-        return (FloatMaxVector) super.bOpTemplate((FloatMaxVector)v, f);  \/\/ specialize\n+        return (FloatMaxVector) super.bOpTemplate((FloatMaxVector) v, f);  \/\/ specialize\n@@ -214,1 +214,1 @@\n-            super.bOpTemplate((FloatMaxVector)v, (FloatMaxMask)m,\n+            super.bOpTemplate((FloatMaxVector) v, (FloatMaxMask) m,\n@@ -224,1 +224,1 @@\n-            super.tOpTemplate((FloatMaxVector)v1, (FloatMaxVector)v2,\n+            super.tOpTemplate((FloatMaxVector) v1, (FloatMaxVector) v2,\n@@ -233,2 +233,2 @@\n-            super.tOpTemplate((FloatMaxVector)v1, (FloatMaxVector)v2,\n-                              (FloatMaxMask)m, f);  \/\/ specialize\n+            super.tOpTemplate((FloatMaxVector) v1, (FloatMaxVector) v2,\n+                              (FloatMaxMask) m, f);  \/\/ specialize\n@@ -507,1 +507,1 @@\n-                     return (long)Float.floatToIntBits(vecarr[ix]);\n+                     return (long) Float.floatToIntBits(vecarr[ix]);\n@@ -523,1 +523,1 @@\n-                                this, i, (long)Float.floatToIntBits(e),\n+                                this, i, (long) Float.floatToIntBits(e),\n@@ -526,1 +526,1 @@\n-                                    res[ix] = Float.intBitsToFloat((int)bits);\n+                                    res[ix] = Float.intBitsToFloat((int) bits);\n@@ -574,1 +574,1 @@\n-            return (boolean[])getPayload();\n+            return (boolean[]) getPayload();\n@@ -591,1 +591,1 @@\n-            boolean[] mbits = ((FloatMaxMask)m).getBits();\n+            boolean[] mbits = ((FloatMaxMask) m).getBits();\n@@ -615,1 +615,1 @@\n-            return  dsp.maskFactory(maskArray).check(dsp);\n+            return dsp.maskFactory(maskArray).check(dsp);\n@@ -636,1 +636,1 @@\n-            FloatMaxMask m = (FloatMaxMask)mask;\n+            FloatMaxMask m = (FloatMaxMask) mask;\n@@ -651,1 +651,1 @@\n-            return (FloatMaxMask)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return (FloatMaxMask) VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -663,1 +663,1 @@\n-            FloatMaxMask m = (FloatMaxMask)mask;\n+            FloatMaxMask m = (FloatMaxMask) mask;\n@@ -673,1 +673,1 @@\n-            FloatMaxMask m = (FloatMaxMask)mask;\n+            FloatMaxMask m = (FloatMaxMask) mask;\n@@ -683,1 +683,1 @@\n-            FloatMaxMask m = (FloatMaxMask)mask;\n+            FloatMaxMask m = (FloatMaxMask) mask;\n@@ -729,1 +729,1 @@\n-                                         (m, __) -> anyTrueHelper(((FloatMaxMask)m).getBits()));\n+                                         (m, __) -> anyTrueHelper(((FloatMaxMask) m).getBits()));\n@@ -737,1 +737,1 @@\n-                                         (m, __) -> allTrueHelper(((FloatMaxMask)m).getBits()));\n+                                         (m, __) -> allTrueHelper(((FloatMaxMask) m).getBits()));\n@@ -791,1 +791,1 @@\n-                                                    (s) -> ((FloatMaxVector)(((AbstractShuffle<Float>)(s)).toVectorTemplate())));\n+                                                    (s) -> ((FloatMaxVector) (((AbstractShuffle<Float>) (s)).toVectorTemplate())));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatMaxVector.java","additions":26,"deletions":26,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -361,2 +361,2 @@\n-        for(int i = 0,j = 0; i < vsp.length(); i++) {\n-            if(m.laneIsSet(i)) {\n+        for (int i = 0, j = 0; i < vsp.length(); i++) {\n+            if (m.laneIsSet(i)) {\n@@ -376,1 +376,1 @@\n-        for(int i = 0, j = 0; i < vsp.length(); i++) {\n+        for (int i = 0, j = 0; i < vsp.length(); i++) {\n@@ -430,1 +430,1 @@\n-        for (int i = 0; i < length(); i++){\n+        for (int i = 0; i < length(); i++) {\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatVector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -117,1 +117,1 @@\n-        return (int[])getPayload();\n+        return (int[]) getPayload();\n@@ -147,2 +147,2 @@\n-        return (Int128Shuffle)VectorSupport.shuffleIota(ETYPE, Int128Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n+        return (Int128Shuffle) VectorSupport.shuffleIota(ETYPE, Int128Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i * lstep + lstart, l))));\n@@ -150,2 +150,2 @@\n-        return (Int128Shuffle)VectorSupport.shuffleIota(ETYPE, Int128Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n+        return (Int128Shuffle) VectorSupport.shuffleIota(ETYPE, Int128Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i * lstep + lstart)));\n@@ -198,1 +198,1 @@\n-            super.uOpTemplate((Int128Mask)m, f);  \/\/ specialize\n+            super.uOpTemplate((Int128Mask) m, f);  \/\/ specialize\n@@ -206,1 +206,1 @@\n-        return (Int128Vector) super.bOpTemplate((Int128Vector)v, f);  \/\/ specialize\n+        return (Int128Vector) super.bOpTemplate((Int128Vector) v, f);  \/\/ specialize\n@@ -214,1 +214,1 @@\n-            super.bOpTemplate((Int128Vector)v, (Int128Mask)m,\n+            super.bOpTemplate((Int128Vector) v, (Int128Mask) m,\n@@ -224,1 +224,1 @@\n-            super.tOpTemplate((Int128Vector)v1, (Int128Vector)v2,\n+            super.tOpTemplate((Int128Vector) v1, (Int128Vector) v2,\n@@ -233,2 +233,2 @@\n-            super.tOpTemplate((Int128Vector)v1, (Int128Vector)v2,\n-                              (Int128Mask)m, f);  \/\/ specialize\n+            super.tOpTemplate((Int128Vector) v1, (Int128Vector) v2,\n+                              (Int128Mask) m, f);  \/\/ specialize\n@@ -522,1 +522,1 @@\n-                                    return (long)vecarr[ix];\n+                                    return (long) vecarr[ix];\n@@ -541,1 +541,1 @@\n-                                this, i, (long)e,\n+                                this, i, (long) e,\n@@ -544,1 +544,1 @@\n-                                    res[ix] = (int)bits;\n+                                    res[ix] = (int) bits;\n@@ -592,1 +592,1 @@\n-            return (boolean[])getPayload();\n+            return (boolean[]) getPayload();\n@@ -609,1 +609,1 @@\n-            boolean[] mbits = ((Int128Mask)m).getBits();\n+            boolean[] mbits = ((Int128Mask) m).getBits();\n@@ -633,1 +633,1 @@\n-            return  dsp.maskFactory(maskArray).check(dsp);\n+            return dsp.maskFactory(maskArray).check(dsp);\n@@ -654,1 +654,1 @@\n-            Int128Mask m = (Int128Mask)mask;\n+            Int128Mask m = (Int128Mask) mask;\n@@ -669,1 +669,1 @@\n-            return (Int128Mask)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return (Int128Mask) VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -681,1 +681,1 @@\n-            Int128Mask m = (Int128Mask)mask;\n+            Int128Mask m = (Int128Mask) mask;\n@@ -691,1 +691,1 @@\n-            Int128Mask m = (Int128Mask)mask;\n+            Int128Mask m = (Int128Mask) mask;\n@@ -701,1 +701,1 @@\n-            Int128Mask m = (Int128Mask)mask;\n+            Int128Mask m = (Int128Mask) mask;\n@@ -747,1 +747,1 @@\n-                                         (m, __) -> anyTrueHelper(((Int128Mask)m).getBits()));\n+                                         (m, __) -> anyTrueHelper(((Int128Mask) m).getBits()));\n@@ -755,1 +755,1 @@\n-                                         (m, __) -> allTrueHelper(((Int128Mask)m).getBits()));\n+                                         (m, __) -> allTrueHelper(((Int128Mask) m).getBits()));\n@@ -809,1 +809,1 @@\n-                                                    (s) -> ((Int128Vector)(((AbstractShuffle<Integer>)(s)).toVectorTemplate())));\n+                                                    (s) -> ((Int128Vector) (((AbstractShuffle<Integer>) (s)).toVectorTemplate())));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int128Vector.java","additions":26,"deletions":26,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -117,1 +117,1 @@\n-        return (int[])getPayload();\n+        return (int[]) getPayload();\n@@ -147,2 +147,2 @@\n-        return (Int256Shuffle)VectorSupport.shuffleIota(ETYPE, Int256Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n+        return (Int256Shuffle) VectorSupport.shuffleIota(ETYPE, Int256Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i * lstep + lstart, l))));\n@@ -150,2 +150,2 @@\n-        return (Int256Shuffle)VectorSupport.shuffleIota(ETYPE, Int256Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n+        return (Int256Shuffle) VectorSupport.shuffleIota(ETYPE, Int256Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i * lstep + lstart)));\n@@ -198,1 +198,1 @@\n-            super.uOpTemplate((Int256Mask)m, f);  \/\/ specialize\n+            super.uOpTemplate((Int256Mask) m, f);  \/\/ specialize\n@@ -206,1 +206,1 @@\n-        return (Int256Vector) super.bOpTemplate((Int256Vector)v, f);  \/\/ specialize\n+        return (Int256Vector) super.bOpTemplate((Int256Vector) v, f);  \/\/ specialize\n@@ -214,1 +214,1 @@\n-            super.bOpTemplate((Int256Vector)v, (Int256Mask)m,\n+            super.bOpTemplate((Int256Vector) v, (Int256Mask) m,\n@@ -224,1 +224,1 @@\n-            super.tOpTemplate((Int256Vector)v1, (Int256Vector)v2,\n+            super.tOpTemplate((Int256Vector) v1, (Int256Vector) v2,\n@@ -233,2 +233,2 @@\n-            super.tOpTemplate((Int256Vector)v1, (Int256Vector)v2,\n-                              (Int256Mask)m, f);  \/\/ specialize\n+            super.tOpTemplate((Int256Vector) v1, (Int256Vector) v2,\n+                              (Int256Mask) m, f);  \/\/ specialize\n@@ -526,1 +526,1 @@\n-                                    return (long)vecarr[ix];\n+                                    return (long) vecarr[ix];\n@@ -549,1 +549,1 @@\n-                                this, i, (long)e,\n+                                this, i, (long) e,\n@@ -552,1 +552,1 @@\n-                                    res[ix] = (int)bits;\n+                                    res[ix] = (int) bits;\n@@ -600,1 +600,1 @@\n-            return (boolean[])getPayload();\n+            return (boolean[]) getPayload();\n@@ -617,1 +617,1 @@\n-            boolean[] mbits = ((Int256Mask)m).getBits();\n+            boolean[] mbits = ((Int256Mask) m).getBits();\n@@ -641,1 +641,1 @@\n-            return  dsp.maskFactory(maskArray).check(dsp);\n+            return dsp.maskFactory(maskArray).check(dsp);\n@@ -662,1 +662,1 @@\n-            Int256Mask m = (Int256Mask)mask;\n+            Int256Mask m = (Int256Mask) mask;\n@@ -677,1 +677,1 @@\n-            return (Int256Mask)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return (Int256Mask) VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -689,1 +689,1 @@\n-            Int256Mask m = (Int256Mask)mask;\n+            Int256Mask m = (Int256Mask) mask;\n@@ -699,1 +699,1 @@\n-            Int256Mask m = (Int256Mask)mask;\n+            Int256Mask m = (Int256Mask) mask;\n@@ -709,1 +709,1 @@\n-            Int256Mask m = (Int256Mask)mask;\n+            Int256Mask m = (Int256Mask) mask;\n@@ -755,1 +755,1 @@\n-                                         (m, __) -> anyTrueHelper(((Int256Mask)m).getBits()));\n+                                         (m, __) -> anyTrueHelper(((Int256Mask) m).getBits()));\n@@ -763,1 +763,1 @@\n-                                         (m, __) -> allTrueHelper(((Int256Mask)m).getBits()));\n+                                         (m, __) -> allTrueHelper(((Int256Mask) m).getBits()));\n@@ -817,1 +817,1 @@\n-                                                    (s) -> ((Int256Vector)(((AbstractShuffle<Integer>)(s)).toVectorTemplate())));\n+                                                    (s) -> ((Int256Vector) (((AbstractShuffle<Integer>) (s)).toVectorTemplate())));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int256Vector.java","additions":26,"deletions":26,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -117,1 +117,1 @@\n-        return (int[])getPayload();\n+        return (int[]) getPayload();\n@@ -147,2 +147,2 @@\n-        return (Int512Shuffle)VectorSupport.shuffleIota(ETYPE, Int512Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n+        return (Int512Shuffle) VectorSupport.shuffleIota(ETYPE, Int512Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i * lstep + lstart, l))));\n@@ -150,2 +150,2 @@\n-        return (Int512Shuffle)VectorSupport.shuffleIota(ETYPE, Int512Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n+        return (Int512Shuffle) VectorSupport.shuffleIota(ETYPE, Int512Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i * lstep + lstart)));\n@@ -198,1 +198,1 @@\n-            super.uOpTemplate((Int512Mask)m, f);  \/\/ specialize\n+            super.uOpTemplate((Int512Mask) m, f);  \/\/ specialize\n@@ -206,1 +206,1 @@\n-        return (Int512Vector) super.bOpTemplate((Int512Vector)v, f);  \/\/ specialize\n+        return (Int512Vector) super.bOpTemplate((Int512Vector) v, f);  \/\/ specialize\n@@ -214,1 +214,1 @@\n-            super.bOpTemplate((Int512Vector)v, (Int512Mask)m,\n+            super.bOpTemplate((Int512Vector) v, (Int512Mask) m,\n@@ -224,1 +224,1 @@\n-            super.tOpTemplate((Int512Vector)v1, (Int512Vector)v2,\n+            super.tOpTemplate((Int512Vector) v1, (Int512Vector) v2,\n@@ -233,2 +233,2 @@\n-            super.tOpTemplate((Int512Vector)v1, (Int512Vector)v2,\n-                              (Int512Mask)m, f);  \/\/ specialize\n+            super.tOpTemplate((Int512Vector) v1, (Int512Vector) v2,\n+                              (Int512Mask) m, f);  \/\/ specialize\n@@ -534,1 +534,1 @@\n-                                    return (long)vecarr[ix];\n+                                    return (long) vecarr[ix];\n@@ -565,1 +565,1 @@\n-                                this, i, (long)e,\n+                                this, i, (long) e,\n@@ -568,1 +568,1 @@\n-                                    res[ix] = (int)bits;\n+                                    res[ix] = (int) bits;\n@@ -616,1 +616,1 @@\n-            return (boolean[])getPayload();\n+            return (boolean[]) getPayload();\n@@ -633,1 +633,1 @@\n-            boolean[] mbits = ((Int512Mask)m).getBits();\n+            boolean[] mbits = ((Int512Mask) m).getBits();\n@@ -657,1 +657,1 @@\n-            return  dsp.maskFactory(maskArray).check(dsp);\n+            return dsp.maskFactory(maskArray).check(dsp);\n@@ -678,1 +678,1 @@\n-            Int512Mask m = (Int512Mask)mask;\n+            Int512Mask m = (Int512Mask) mask;\n@@ -693,1 +693,1 @@\n-            return (Int512Mask)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return (Int512Mask) VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -705,1 +705,1 @@\n-            Int512Mask m = (Int512Mask)mask;\n+            Int512Mask m = (Int512Mask) mask;\n@@ -715,1 +715,1 @@\n-            Int512Mask m = (Int512Mask)mask;\n+            Int512Mask m = (Int512Mask) mask;\n@@ -725,1 +725,1 @@\n-            Int512Mask m = (Int512Mask)mask;\n+            Int512Mask m = (Int512Mask) mask;\n@@ -771,1 +771,1 @@\n-                                         (m, __) -> anyTrueHelper(((Int512Mask)m).getBits()));\n+                                         (m, __) -> anyTrueHelper(((Int512Mask) m).getBits()));\n@@ -779,1 +779,1 @@\n-                                         (m, __) -> allTrueHelper(((Int512Mask)m).getBits()));\n+                                         (m, __) -> allTrueHelper(((Int512Mask) m).getBits()));\n@@ -833,1 +833,1 @@\n-                                                    (s) -> ((Int512Vector)(((AbstractShuffle<Integer>)(s)).toVectorTemplate())));\n+                                                    (s) -> ((Int512Vector) (((AbstractShuffle<Integer>) (s)).toVectorTemplate())));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int512Vector.java","additions":26,"deletions":26,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -117,1 +117,1 @@\n-        return (int[])getPayload();\n+        return (int[]) getPayload();\n@@ -147,2 +147,2 @@\n-        return (Int64Shuffle)VectorSupport.shuffleIota(ETYPE, Int64Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n+        return (Int64Shuffle) VectorSupport.shuffleIota(ETYPE, Int64Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i * lstep + lstart, l))));\n@@ -150,2 +150,2 @@\n-        return (Int64Shuffle)VectorSupport.shuffleIota(ETYPE, Int64Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n+        return (Int64Shuffle) VectorSupport.shuffleIota(ETYPE, Int64Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i * lstep + lstart)));\n@@ -198,1 +198,1 @@\n-            super.uOpTemplate((Int64Mask)m, f);  \/\/ specialize\n+            super.uOpTemplate((Int64Mask) m, f);  \/\/ specialize\n@@ -206,1 +206,1 @@\n-        return (Int64Vector) super.bOpTemplate((Int64Vector)v, f);  \/\/ specialize\n+        return (Int64Vector) super.bOpTemplate((Int64Vector) v, f);  \/\/ specialize\n@@ -214,1 +214,1 @@\n-            super.bOpTemplate((Int64Vector)v, (Int64Mask)m,\n+            super.bOpTemplate((Int64Vector) v, (Int64Mask) m,\n@@ -224,1 +224,1 @@\n-            super.tOpTemplate((Int64Vector)v1, (Int64Vector)v2,\n+            super.tOpTemplate((Int64Vector) v1, (Int64Vector) v2,\n@@ -233,2 +233,2 @@\n-            super.tOpTemplate((Int64Vector)v1, (Int64Vector)v2,\n-                              (Int64Mask)m, f);  \/\/ specialize\n+            super.tOpTemplate((Int64Vector) v1, (Int64Vector) v2,\n+                              (Int64Mask) m, f);  \/\/ specialize\n@@ -520,1 +520,1 @@\n-                                    return (long)vecarr[ix];\n+                                    return (long) vecarr[ix];\n@@ -537,1 +537,1 @@\n-                                this, i, (long)e,\n+                                this, i, (long) e,\n@@ -540,1 +540,1 @@\n-                                    res[ix] = (int)bits;\n+                                    res[ix] = (int) bits;\n@@ -588,1 +588,1 @@\n-            return (boolean[])getPayload();\n+            return (boolean[]) getPayload();\n@@ -605,1 +605,1 @@\n-            boolean[] mbits = ((Int64Mask)m).getBits();\n+            boolean[] mbits = ((Int64Mask) m).getBits();\n@@ -629,1 +629,1 @@\n-            return  dsp.maskFactory(maskArray).check(dsp);\n+            return dsp.maskFactory(maskArray).check(dsp);\n@@ -650,1 +650,1 @@\n-            Int64Mask m = (Int64Mask)mask;\n+            Int64Mask m = (Int64Mask) mask;\n@@ -665,1 +665,1 @@\n-            return (Int64Mask)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return (Int64Mask) VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -677,1 +677,1 @@\n-            Int64Mask m = (Int64Mask)mask;\n+            Int64Mask m = (Int64Mask) mask;\n@@ -687,1 +687,1 @@\n-            Int64Mask m = (Int64Mask)mask;\n+            Int64Mask m = (Int64Mask) mask;\n@@ -697,1 +697,1 @@\n-            Int64Mask m = (Int64Mask)mask;\n+            Int64Mask m = (Int64Mask) mask;\n@@ -743,1 +743,1 @@\n-                                         (m, __) -> anyTrueHelper(((Int64Mask)m).getBits()));\n+                                         (m, __) -> anyTrueHelper(((Int64Mask) m).getBits()));\n@@ -751,1 +751,1 @@\n-                                         (m, __) -> allTrueHelper(((Int64Mask)m).getBits()));\n+                                         (m, __) -> allTrueHelper(((Int64Mask) m).getBits()));\n@@ -805,1 +805,1 @@\n-                                                    (s) -> ((Int64Vector)(((AbstractShuffle<Integer>)(s)).toVectorTemplate())));\n+                                                    (s) -> ((Int64Vector) (((AbstractShuffle<Integer>) (s)).toVectorTemplate())));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int64Vector.java","additions":26,"deletions":26,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -117,1 +117,1 @@\n-        return (int[])getPayload();\n+        return (int[]) getPayload();\n@@ -147,2 +147,2 @@\n-        return (IntMaxShuffle)VectorSupport.shuffleIota(ETYPE, IntMaxShuffle.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n+        return (IntMaxShuffle) VectorSupport.shuffleIota(ETYPE, IntMaxShuffle.class, VSPECIES, VLENGTH, start, step, 1,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i * lstep + lstart, l))));\n@@ -150,2 +150,2 @@\n-        return (IntMaxShuffle)VectorSupport.shuffleIota(ETYPE, IntMaxShuffle.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n+        return (IntMaxShuffle) VectorSupport.shuffleIota(ETYPE, IntMaxShuffle.class, VSPECIES, VLENGTH, start, step, 0,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i * lstep + lstart)));\n@@ -198,1 +198,1 @@\n-            super.uOpTemplate((IntMaxMask)m, f);  \/\/ specialize\n+            super.uOpTemplate((IntMaxMask) m, f);  \/\/ specialize\n@@ -206,1 +206,1 @@\n-        return (IntMaxVector) super.bOpTemplate((IntMaxVector)v, f);  \/\/ specialize\n+        return (IntMaxVector) super.bOpTemplate((IntMaxVector) v, f);  \/\/ specialize\n@@ -214,1 +214,1 @@\n-            super.bOpTemplate((IntMaxVector)v, (IntMaxMask)m,\n+            super.bOpTemplate((IntMaxVector) v, (IntMaxMask) m,\n@@ -224,1 +224,1 @@\n-            super.tOpTemplate((IntMaxVector)v1, (IntMaxVector)v2,\n+            super.tOpTemplate((IntMaxVector) v1, (IntMaxVector) v2,\n@@ -233,2 +233,2 @@\n-            super.tOpTemplate((IntMaxVector)v1, (IntMaxVector)v2,\n-                              (IntMaxMask)m, f);  \/\/ specialize\n+            super.tOpTemplate((IntMaxVector) v1, (IntMaxVector) v2,\n+                              (IntMaxMask) m, f);  \/\/ specialize\n@@ -519,1 +519,1 @@\n-                                    return (long)vecarr[ix];\n+                                    return (long) vecarr[ix];\n@@ -535,1 +535,1 @@\n-                                this, i, (long)e,\n+                                this, i, (long) e,\n@@ -538,1 +538,1 @@\n-                                    res[ix] = (int)bits;\n+                                    res[ix] = (int) bits;\n@@ -586,1 +586,1 @@\n-            return (boolean[])getPayload();\n+            return (boolean[]) getPayload();\n@@ -603,1 +603,1 @@\n-            boolean[] mbits = ((IntMaxMask)m).getBits();\n+            boolean[] mbits = ((IntMaxMask) m).getBits();\n@@ -627,1 +627,1 @@\n-            return  dsp.maskFactory(maskArray).check(dsp);\n+            return dsp.maskFactory(maskArray).check(dsp);\n@@ -648,1 +648,1 @@\n-            IntMaxMask m = (IntMaxMask)mask;\n+            IntMaxMask m = (IntMaxMask) mask;\n@@ -663,1 +663,1 @@\n-            return (IntMaxMask)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return (IntMaxMask) VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -675,1 +675,1 @@\n-            IntMaxMask m = (IntMaxMask)mask;\n+            IntMaxMask m = (IntMaxMask) mask;\n@@ -685,1 +685,1 @@\n-            IntMaxMask m = (IntMaxMask)mask;\n+            IntMaxMask m = (IntMaxMask) mask;\n@@ -695,1 +695,1 @@\n-            IntMaxMask m = (IntMaxMask)mask;\n+            IntMaxMask m = (IntMaxMask) mask;\n@@ -741,1 +741,1 @@\n-                                         (m, __) -> anyTrueHelper(((IntMaxMask)m).getBits()));\n+                                         (m, __) -> anyTrueHelper(((IntMaxMask) m).getBits()));\n@@ -749,1 +749,1 @@\n-                                         (m, __) -> allTrueHelper(((IntMaxMask)m).getBits()));\n+                                         (m, __) -> allTrueHelper(((IntMaxMask) m).getBits()));\n@@ -814,1 +814,1 @@\n-                                                    (s) -> ((IntMaxVector)(((AbstractShuffle<Integer>)(s)).toVectorTemplate())));\n+                                                    (s) -> ((IntMaxVector) (((AbstractShuffle<Integer>) (s)).toVectorTemplate())));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntMaxVector.java","additions":26,"deletions":26,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -361,2 +361,2 @@\n-        for(int i = 0,j = 0; i < vsp.length(); i++) {\n-            if(m.laneIsSet(i)) {\n+        for (int i = 0, j = 0; i < vsp.length(); i++) {\n+            if (m.laneIsSet(i)) {\n@@ -376,1 +376,1 @@\n-        for(int i = 0, j = 0; i < vsp.length(); i++) {\n+        for (int i = 0, j = 0; i < vsp.length(); i++) {\n@@ -430,1 +430,1 @@\n-        for (int i = 0; i < length(); i++){\n+        for (int i = 0; i < length(); i++) {\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntVector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -117,1 +117,1 @@\n-        return (long[])getPayload();\n+        return (long[]) getPayload();\n@@ -142,2 +142,2 @@\n-        return (Long128Shuffle)VectorSupport.shuffleIota(ETYPE, Long128Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n+        return (Long128Shuffle) VectorSupport.shuffleIota(ETYPE, Long128Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i * lstep + lstart, l))));\n@@ -145,2 +145,2 @@\n-        return (Long128Shuffle)VectorSupport.shuffleIota(ETYPE, Long128Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n+        return (Long128Shuffle) VectorSupport.shuffleIota(ETYPE, Long128Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i * lstep + lstart)));\n@@ -193,1 +193,1 @@\n-            super.uOpTemplate((Long128Mask)m, f);  \/\/ specialize\n+            super.uOpTemplate((Long128Mask) m, f);  \/\/ specialize\n@@ -201,1 +201,1 @@\n-        return (Long128Vector) super.bOpTemplate((Long128Vector)v, f);  \/\/ specialize\n+        return (Long128Vector) super.bOpTemplate((Long128Vector) v, f);  \/\/ specialize\n@@ -209,1 +209,1 @@\n-            super.bOpTemplate((Long128Vector)v, (Long128Mask)m,\n+            super.bOpTemplate((Long128Vector) v, (Long128Mask) m,\n@@ -219,1 +219,1 @@\n-            super.tOpTemplate((Long128Vector)v1, (Long128Vector)v2,\n+            super.tOpTemplate((Long128Vector) v1, (Long128Vector) v2,\n@@ -228,2 +228,2 @@\n-            super.tOpTemplate((Long128Vector)v1, (Long128Vector)v2,\n-                              (Long128Mask)m, f);  \/\/ specialize\n+            super.tOpTemplate((Long128Vector) v1, (Long128Vector) v2,\n+                              (Long128Mask) m, f);  \/\/ specialize\n@@ -510,1 +510,1 @@\n-                                    return (long)vecarr[ix];\n+                                    return (long) vecarr[ix];\n@@ -527,1 +527,1 @@\n-                                this, i, (long)e,\n+                                this, i, (long) e,\n@@ -530,1 +530,1 @@\n-                                    res[ix] = (long)bits;\n+                                    res[ix] = (long) bits;\n@@ -578,1 +578,1 @@\n-            return (boolean[])getPayload();\n+            return (boolean[]) getPayload();\n@@ -595,1 +595,1 @@\n-            boolean[] mbits = ((Long128Mask)m).getBits();\n+            boolean[] mbits = ((Long128Mask) m).getBits();\n@@ -619,1 +619,1 @@\n-            return  dsp.maskFactory(maskArray).check(dsp);\n+            return dsp.maskFactory(maskArray).check(dsp);\n@@ -640,1 +640,1 @@\n-            Long128Mask m = (Long128Mask)mask;\n+            Long128Mask m = (Long128Mask) mask;\n@@ -655,1 +655,1 @@\n-            return (Long128Mask)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return (Long128Mask) VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -667,1 +667,1 @@\n-            Long128Mask m = (Long128Mask)mask;\n+            Long128Mask m = (Long128Mask) mask;\n@@ -677,1 +677,1 @@\n-            Long128Mask m = (Long128Mask)mask;\n+            Long128Mask m = (Long128Mask) mask;\n@@ -687,1 +687,1 @@\n-            Long128Mask m = (Long128Mask)mask;\n+            Long128Mask m = (Long128Mask) mask;\n@@ -733,1 +733,1 @@\n-                                         (m, __) -> anyTrueHelper(((Long128Mask)m).getBits()));\n+                                         (m, __) -> anyTrueHelper(((Long128Mask) m).getBits()));\n@@ -741,1 +741,1 @@\n-                                         (m, __) -> allTrueHelper(((Long128Mask)m).getBits()));\n+                                         (m, __) -> allTrueHelper(((Long128Mask) m).getBits()));\n@@ -795,1 +795,1 @@\n-                                                    (s) -> ((Long128Vector)(((AbstractShuffle<Long>)(s)).toVectorTemplate())));\n+                                                    (s) -> ((Long128Vector) (((AbstractShuffle<Long>) (s)).toVectorTemplate())));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long128Vector.java","additions":26,"deletions":26,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -117,1 +117,1 @@\n-        return (long[])getPayload();\n+        return (long[]) getPayload();\n@@ -142,2 +142,2 @@\n-        return (Long256Shuffle)VectorSupport.shuffleIota(ETYPE, Long256Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n+        return (Long256Shuffle) VectorSupport.shuffleIota(ETYPE, Long256Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i * lstep + lstart, l))));\n@@ -145,2 +145,2 @@\n-        return (Long256Shuffle)VectorSupport.shuffleIota(ETYPE, Long256Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n+        return (Long256Shuffle) VectorSupport.shuffleIota(ETYPE, Long256Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i * lstep + lstart)));\n@@ -193,1 +193,1 @@\n-            super.uOpTemplate((Long256Mask)m, f);  \/\/ specialize\n+            super.uOpTemplate((Long256Mask) m, f);  \/\/ specialize\n@@ -201,1 +201,1 @@\n-        return (Long256Vector) super.bOpTemplate((Long256Vector)v, f);  \/\/ specialize\n+        return (Long256Vector) super.bOpTemplate((Long256Vector) v, f);  \/\/ specialize\n@@ -209,1 +209,1 @@\n-            super.bOpTemplate((Long256Vector)v, (Long256Mask)m,\n+            super.bOpTemplate((Long256Vector) v, (Long256Mask) m,\n@@ -219,1 +219,1 @@\n-            super.tOpTemplate((Long256Vector)v1, (Long256Vector)v2,\n+            super.tOpTemplate((Long256Vector) v1, (Long256Vector) v2,\n@@ -228,2 +228,2 @@\n-            super.tOpTemplate((Long256Vector)v1, (Long256Vector)v2,\n-                              (Long256Mask)m, f);  \/\/ specialize\n+            super.tOpTemplate((Long256Vector) v1, (Long256Vector) v2,\n+                              (Long256Mask) m, f);  \/\/ specialize\n@@ -512,1 +512,1 @@\n-                                    return (long)vecarr[ix];\n+                                    return (long) vecarr[ix];\n@@ -531,1 +531,1 @@\n-                                this, i, (long)e,\n+                                this, i, (long) e,\n@@ -534,1 +534,1 @@\n-                                    res[ix] = (long)bits;\n+                                    res[ix] = (long) bits;\n@@ -582,1 +582,1 @@\n-            return (boolean[])getPayload();\n+            return (boolean[]) getPayload();\n@@ -599,1 +599,1 @@\n-            boolean[] mbits = ((Long256Mask)m).getBits();\n+            boolean[] mbits = ((Long256Mask) m).getBits();\n@@ -623,1 +623,1 @@\n-            return  dsp.maskFactory(maskArray).check(dsp);\n+            return dsp.maskFactory(maskArray).check(dsp);\n@@ -644,1 +644,1 @@\n-            Long256Mask m = (Long256Mask)mask;\n+            Long256Mask m = (Long256Mask) mask;\n@@ -659,1 +659,1 @@\n-            return (Long256Mask)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return (Long256Mask) VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -671,1 +671,1 @@\n-            Long256Mask m = (Long256Mask)mask;\n+            Long256Mask m = (Long256Mask) mask;\n@@ -681,1 +681,1 @@\n-            Long256Mask m = (Long256Mask)mask;\n+            Long256Mask m = (Long256Mask) mask;\n@@ -691,1 +691,1 @@\n-            Long256Mask m = (Long256Mask)mask;\n+            Long256Mask m = (Long256Mask) mask;\n@@ -737,1 +737,1 @@\n-                                         (m, __) -> anyTrueHelper(((Long256Mask)m).getBits()));\n+                                         (m, __) -> anyTrueHelper(((Long256Mask) m).getBits()));\n@@ -745,1 +745,1 @@\n-                                         (m, __) -> allTrueHelper(((Long256Mask)m).getBits()));\n+                                         (m, __) -> allTrueHelper(((Long256Mask) m).getBits()));\n@@ -799,1 +799,1 @@\n-                                                    (s) -> ((Long256Vector)(((AbstractShuffle<Long>)(s)).toVectorTemplate())));\n+                                                    (s) -> ((Long256Vector) (((AbstractShuffle<Long>) (s)).toVectorTemplate())));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long256Vector.java","additions":26,"deletions":26,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -117,1 +117,1 @@\n-        return (long[])getPayload();\n+        return (long[]) getPayload();\n@@ -142,2 +142,2 @@\n-        return (Long512Shuffle)VectorSupport.shuffleIota(ETYPE, Long512Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n+        return (Long512Shuffle) VectorSupport.shuffleIota(ETYPE, Long512Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i * lstep + lstart, l))));\n@@ -145,2 +145,2 @@\n-        return (Long512Shuffle)VectorSupport.shuffleIota(ETYPE, Long512Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n+        return (Long512Shuffle) VectorSupport.shuffleIota(ETYPE, Long512Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i * lstep + lstart)));\n@@ -193,1 +193,1 @@\n-            super.uOpTemplate((Long512Mask)m, f);  \/\/ specialize\n+            super.uOpTemplate((Long512Mask) m, f);  \/\/ specialize\n@@ -201,1 +201,1 @@\n-        return (Long512Vector) super.bOpTemplate((Long512Vector)v, f);  \/\/ specialize\n+        return (Long512Vector) super.bOpTemplate((Long512Vector) v, f);  \/\/ specialize\n@@ -209,1 +209,1 @@\n-            super.bOpTemplate((Long512Vector)v, (Long512Mask)m,\n+            super.bOpTemplate((Long512Vector) v, (Long512Mask) m,\n@@ -219,1 +219,1 @@\n-            super.tOpTemplate((Long512Vector)v1, (Long512Vector)v2,\n+            super.tOpTemplate((Long512Vector) v1, (Long512Vector) v2,\n@@ -228,2 +228,2 @@\n-            super.tOpTemplate((Long512Vector)v1, (Long512Vector)v2,\n-                              (Long512Mask)m, f);  \/\/ specialize\n+            super.tOpTemplate((Long512Vector) v1, (Long512Vector) v2,\n+                              (Long512Mask) m, f);  \/\/ specialize\n@@ -516,1 +516,1 @@\n-                                    return (long)vecarr[ix];\n+                                    return (long) vecarr[ix];\n@@ -539,1 +539,1 @@\n-                                this, i, (long)e,\n+                                this, i, (long) e,\n@@ -542,1 +542,1 @@\n-                                    res[ix] = (long)bits;\n+                                    res[ix] = (long) bits;\n@@ -590,1 +590,1 @@\n-            return (boolean[])getPayload();\n+            return (boolean[]) getPayload();\n@@ -607,1 +607,1 @@\n-            boolean[] mbits = ((Long512Mask)m).getBits();\n+            boolean[] mbits = ((Long512Mask) m).getBits();\n@@ -631,1 +631,1 @@\n-            return  dsp.maskFactory(maskArray).check(dsp);\n+            return dsp.maskFactory(maskArray).check(dsp);\n@@ -652,1 +652,1 @@\n-            Long512Mask m = (Long512Mask)mask;\n+            Long512Mask m = (Long512Mask) mask;\n@@ -667,1 +667,1 @@\n-            return (Long512Mask)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return (Long512Mask) VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -679,1 +679,1 @@\n-            Long512Mask m = (Long512Mask)mask;\n+            Long512Mask m = (Long512Mask) mask;\n@@ -689,1 +689,1 @@\n-            Long512Mask m = (Long512Mask)mask;\n+            Long512Mask m = (Long512Mask) mask;\n@@ -699,1 +699,1 @@\n-            Long512Mask m = (Long512Mask)mask;\n+            Long512Mask m = (Long512Mask) mask;\n@@ -745,1 +745,1 @@\n-                                         (m, __) -> anyTrueHelper(((Long512Mask)m).getBits()));\n+                                         (m, __) -> anyTrueHelper(((Long512Mask) m).getBits()));\n@@ -753,1 +753,1 @@\n-                                         (m, __) -> allTrueHelper(((Long512Mask)m).getBits()));\n+                                         (m, __) -> allTrueHelper(((Long512Mask) m).getBits()));\n@@ -807,1 +807,1 @@\n-                                                    (s) -> ((Long512Vector)(((AbstractShuffle<Long>)(s)).toVectorTemplate())));\n+                                                    (s) -> ((Long512Vector) (((AbstractShuffle<Long>) (s)).toVectorTemplate())));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long512Vector.java","additions":26,"deletions":26,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -117,1 +117,1 @@\n-        return (long[])getPayload();\n+        return (long[]) getPayload();\n@@ -142,2 +142,2 @@\n-        return (Long64Shuffle)VectorSupport.shuffleIota(ETYPE, Long64Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n+        return (Long64Shuffle) VectorSupport.shuffleIota(ETYPE, Long64Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i * lstep + lstart, l))));\n@@ -145,2 +145,2 @@\n-        return (Long64Shuffle)VectorSupport.shuffleIota(ETYPE, Long64Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n+        return (Long64Shuffle) VectorSupport.shuffleIota(ETYPE, Long64Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i * lstep + lstart)));\n@@ -193,1 +193,1 @@\n-            super.uOpTemplate((Long64Mask)m, f);  \/\/ specialize\n+            super.uOpTemplate((Long64Mask) m, f);  \/\/ specialize\n@@ -201,1 +201,1 @@\n-        return (Long64Vector) super.bOpTemplate((Long64Vector)v, f);  \/\/ specialize\n+        return (Long64Vector) super.bOpTemplate((Long64Vector) v, f);  \/\/ specialize\n@@ -209,1 +209,1 @@\n-            super.bOpTemplate((Long64Vector)v, (Long64Mask)m,\n+            super.bOpTemplate((Long64Vector) v, (Long64Mask) m,\n@@ -219,1 +219,1 @@\n-            super.tOpTemplate((Long64Vector)v1, (Long64Vector)v2,\n+            super.tOpTemplate((Long64Vector) v1, (Long64Vector) v2,\n@@ -228,2 +228,2 @@\n-            super.tOpTemplate((Long64Vector)v1, (Long64Vector)v2,\n-                              (Long64Mask)m, f);  \/\/ specialize\n+            super.tOpTemplate((Long64Vector) v1, (Long64Vector) v2,\n+                              (Long64Mask) m, f);  \/\/ specialize\n@@ -509,1 +509,1 @@\n-                                    return (long)vecarr[ix];\n+                                    return (long) vecarr[ix];\n@@ -525,1 +525,1 @@\n-                                this, i, (long)e,\n+                                this, i, (long) e,\n@@ -528,1 +528,1 @@\n-                                    res[ix] = (long)bits;\n+                                    res[ix] = (long) bits;\n@@ -576,1 +576,1 @@\n-            return (boolean[])getPayload();\n+            return (boolean[]) getPayload();\n@@ -593,1 +593,1 @@\n-            boolean[] mbits = ((Long64Mask)m).getBits();\n+            boolean[] mbits = ((Long64Mask) m).getBits();\n@@ -617,1 +617,1 @@\n-            return  dsp.maskFactory(maskArray).check(dsp);\n+            return dsp.maskFactory(maskArray).check(dsp);\n@@ -638,1 +638,1 @@\n-            Long64Mask m = (Long64Mask)mask;\n+            Long64Mask m = (Long64Mask) mask;\n@@ -653,1 +653,1 @@\n-            return (Long64Mask)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return (Long64Mask) VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -665,1 +665,1 @@\n-            Long64Mask m = (Long64Mask)mask;\n+            Long64Mask m = (Long64Mask) mask;\n@@ -675,1 +675,1 @@\n-            Long64Mask m = (Long64Mask)mask;\n+            Long64Mask m = (Long64Mask) mask;\n@@ -685,1 +685,1 @@\n-            Long64Mask m = (Long64Mask)mask;\n+            Long64Mask m = (Long64Mask) mask;\n@@ -731,1 +731,1 @@\n-                                         (m, __) -> anyTrueHelper(((Long64Mask)m).getBits()));\n+                                         (m, __) -> anyTrueHelper(((Long64Mask) m).getBits()));\n@@ -739,1 +739,1 @@\n-                                         (m, __) -> allTrueHelper(((Long64Mask)m).getBits()));\n+                                         (m, __) -> allTrueHelper(((Long64Mask) m).getBits()));\n@@ -793,1 +793,1 @@\n-                                                    (s) -> ((Long64Vector)(((AbstractShuffle<Long>)(s)).toVectorTemplate())));\n+                                                    (s) -> ((Long64Vector) (((AbstractShuffle<Long>) (s)).toVectorTemplate())));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long64Vector.java","additions":26,"deletions":26,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -117,1 +117,1 @@\n-        return (long[])getPayload();\n+        return (long[]) getPayload();\n@@ -142,2 +142,2 @@\n-        return (LongMaxShuffle)VectorSupport.shuffleIota(ETYPE, LongMaxShuffle.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n+        return (LongMaxShuffle) VectorSupport.shuffleIota(ETYPE, LongMaxShuffle.class, VSPECIES, VLENGTH, start, step, 1,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i * lstep + lstart, l))));\n@@ -145,2 +145,2 @@\n-        return (LongMaxShuffle)VectorSupport.shuffleIota(ETYPE, LongMaxShuffle.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n+        return (LongMaxShuffle) VectorSupport.shuffleIota(ETYPE, LongMaxShuffle.class, VSPECIES, VLENGTH, start, step, 0,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i * lstep + lstart)));\n@@ -193,1 +193,1 @@\n-            super.uOpTemplate((LongMaxMask)m, f);  \/\/ specialize\n+            super.uOpTemplate((LongMaxMask) m, f);  \/\/ specialize\n@@ -201,1 +201,1 @@\n-        return (LongMaxVector) super.bOpTemplate((LongMaxVector)v, f);  \/\/ specialize\n+        return (LongMaxVector) super.bOpTemplate((LongMaxVector) v, f);  \/\/ specialize\n@@ -209,1 +209,1 @@\n-            super.bOpTemplate((LongMaxVector)v, (LongMaxMask)m,\n+            super.bOpTemplate((LongMaxVector) v, (LongMaxMask) m,\n@@ -219,1 +219,1 @@\n-            super.tOpTemplate((LongMaxVector)v1, (LongMaxVector)v2,\n+            super.tOpTemplate((LongMaxVector) v1, (LongMaxVector) v2,\n@@ -228,2 +228,2 @@\n-            super.tOpTemplate((LongMaxVector)v1, (LongMaxVector)v2,\n-                              (LongMaxMask)m, f);  \/\/ specialize\n+            super.tOpTemplate((LongMaxVector) v1, (LongMaxVector) v2,\n+                              (LongMaxMask) m, f);  \/\/ specialize\n@@ -509,1 +509,1 @@\n-                                    return (long)vecarr[ix];\n+                                    return (long) vecarr[ix];\n@@ -525,1 +525,1 @@\n-                                this, i, (long)e,\n+                                this, i, (long) e,\n@@ -528,1 +528,1 @@\n-                                    res[ix] = (long)bits;\n+                                    res[ix] = (long) bits;\n@@ -576,1 +576,1 @@\n-            return (boolean[])getPayload();\n+            return (boolean[]) getPayload();\n@@ -593,1 +593,1 @@\n-            boolean[] mbits = ((LongMaxMask)m).getBits();\n+            boolean[] mbits = ((LongMaxMask) m).getBits();\n@@ -617,1 +617,1 @@\n-            return  dsp.maskFactory(maskArray).check(dsp);\n+            return dsp.maskFactory(maskArray).check(dsp);\n@@ -638,1 +638,1 @@\n-            LongMaxMask m = (LongMaxMask)mask;\n+            LongMaxMask m = (LongMaxMask) mask;\n@@ -653,1 +653,1 @@\n-            return (LongMaxMask)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return (LongMaxMask) VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -665,1 +665,1 @@\n-            LongMaxMask m = (LongMaxMask)mask;\n+            LongMaxMask m = (LongMaxMask) mask;\n@@ -675,1 +675,1 @@\n-            LongMaxMask m = (LongMaxMask)mask;\n+            LongMaxMask m = (LongMaxMask) mask;\n@@ -685,1 +685,1 @@\n-            LongMaxMask m = (LongMaxMask)mask;\n+            LongMaxMask m = (LongMaxMask) mask;\n@@ -731,1 +731,1 @@\n-                                         (m, __) -> anyTrueHelper(((LongMaxMask)m).getBits()));\n+                                         (m, __) -> anyTrueHelper(((LongMaxMask) m).getBits()));\n@@ -739,1 +739,1 @@\n-                                         (m, __) -> allTrueHelper(((LongMaxMask)m).getBits()));\n+                                         (m, __) -> allTrueHelper(((LongMaxMask) m).getBits()));\n@@ -793,1 +793,1 @@\n-                                                    (s) -> ((LongMaxVector)(((AbstractShuffle<Long>)(s)).toVectorTemplate())));\n+                                                    (s) -> ((LongMaxVector) (((AbstractShuffle<Long>) (s)).toVectorTemplate())));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongMaxVector.java","additions":26,"deletions":26,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -361,2 +361,2 @@\n-        for(int i = 0,j = 0; i < vsp.length(); i++) {\n-            if(m.laneIsSet(i)) {\n+        for (int i = 0, j = 0; i < vsp.length(); i++) {\n+            if (m.laneIsSet(i)) {\n@@ -376,1 +376,1 @@\n-        for(int i = 0, j = 0; i < vsp.length(); i++) {\n+        for (int i = 0, j = 0; i < vsp.length(); i++) {\n@@ -430,1 +430,1 @@\n-        for (int i = 0; i < length(); i++){\n+        for (int i = 0; i < length(); i++) {\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongVector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -117,1 +117,1 @@\n-        return (short[])getPayload();\n+        return (short[]) getPayload();\n@@ -147,2 +147,2 @@\n-        return (Short128Shuffle)VectorSupport.shuffleIota(ETYPE, Short128Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n+        return (Short128Shuffle) VectorSupport.shuffleIota(ETYPE, Short128Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i * lstep + lstart, l))));\n@@ -150,2 +150,2 @@\n-        return (Short128Shuffle)VectorSupport.shuffleIota(ETYPE, Short128Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n+        return (Short128Shuffle) VectorSupport.shuffleIota(ETYPE, Short128Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i * lstep + lstart)));\n@@ -198,1 +198,1 @@\n-            super.uOpTemplate((Short128Mask)m, f);  \/\/ specialize\n+            super.uOpTemplate((Short128Mask) m, f);  \/\/ specialize\n@@ -206,1 +206,1 @@\n-        return (Short128Vector) super.bOpTemplate((Short128Vector)v, f);  \/\/ specialize\n+        return (Short128Vector) super.bOpTemplate((Short128Vector) v, f);  \/\/ specialize\n@@ -214,1 +214,1 @@\n-            super.bOpTemplate((Short128Vector)v, (Short128Mask)m,\n+            super.bOpTemplate((Short128Vector) v, (Short128Mask) m,\n@@ -224,1 +224,1 @@\n-            super.tOpTemplate((Short128Vector)v1, (Short128Vector)v2,\n+            super.tOpTemplate((Short128Vector) v1, (Short128Vector) v2,\n@@ -233,2 +233,2 @@\n-            super.tOpTemplate((Short128Vector)v1, (Short128Vector)v2,\n-                              (Short128Mask)m, f);  \/\/ specialize\n+            super.tOpTemplate((Short128Vector) v1, (Short128Vector) v2,\n+                              (Short128Mask) m, f);  \/\/ specialize\n@@ -526,1 +526,1 @@\n-                                    return (long)vecarr[ix];\n+                                    return (long) vecarr[ix];\n@@ -549,1 +549,1 @@\n-                                this, i, (long)e,\n+                                this, i, (long) e,\n@@ -552,1 +552,1 @@\n-                                    res[ix] = (short)bits;\n+                                    res[ix] = (short) bits;\n@@ -600,1 +600,1 @@\n-            return (boolean[])getPayload();\n+            return (boolean[]) getPayload();\n@@ -617,1 +617,1 @@\n-            boolean[] mbits = ((Short128Mask)m).getBits();\n+            boolean[] mbits = ((Short128Mask) m).getBits();\n@@ -641,1 +641,1 @@\n-            return  dsp.maskFactory(maskArray).check(dsp);\n+            return dsp.maskFactory(maskArray).check(dsp);\n@@ -662,1 +662,1 @@\n-            Short128Mask m = (Short128Mask)mask;\n+            Short128Mask m = (Short128Mask) mask;\n@@ -677,1 +677,1 @@\n-            return (Short128Mask)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return (Short128Mask) VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -689,1 +689,1 @@\n-            Short128Mask m = (Short128Mask)mask;\n+            Short128Mask m = (Short128Mask) mask;\n@@ -699,1 +699,1 @@\n-            Short128Mask m = (Short128Mask)mask;\n+            Short128Mask m = (Short128Mask) mask;\n@@ -709,1 +709,1 @@\n-            Short128Mask m = (Short128Mask)mask;\n+            Short128Mask m = (Short128Mask) mask;\n@@ -755,1 +755,1 @@\n-                                         (m, __) -> anyTrueHelper(((Short128Mask)m).getBits()));\n+                                         (m, __) -> anyTrueHelper(((Short128Mask) m).getBits()));\n@@ -763,1 +763,1 @@\n-                                         (m, __) -> allTrueHelper(((Short128Mask)m).getBits()));\n+                                         (m, __) -> allTrueHelper(((Short128Mask) m).getBits()));\n@@ -817,1 +817,1 @@\n-                                                    (s) -> ((Short128Vector)(((AbstractShuffle<Short>)(s)).toVectorTemplate())));\n+                                                    (s) -> ((Short128Vector) (((AbstractShuffle<Short>) (s)).toVectorTemplate())));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short128Vector.java","additions":26,"deletions":26,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -117,1 +117,1 @@\n-        return (short[])getPayload();\n+        return (short[]) getPayload();\n@@ -147,2 +147,2 @@\n-        return (Short256Shuffle)VectorSupport.shuffleIota(ETYPE, Short256Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n+        return (Short256Shuffle) VectorSupport.shuffleIota(ETYPE, Short256Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i * lstep + lstart, l))));\n@@ -150,2 +150,2 @@\n-        return (Short256Shuffle)VectorSupport.shuffleIota(ETYPE, Short256Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n+        return (Short256Shuffle) VectorSupport.shuffleIota(ETYPE, Short256Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i * lstep + lstart)));\n@@ -198,1 +198,1 @@\n-            super.uOpTemplate((Short256Mask)m, f);  \/\/ specialize\n+            super.uOpTemplate((Short256Mask) m, f);  \/\/ specialize\n@@ -206,1 +206,1 @@\n-        return (Short256Vector) super.bOpTemplate((Short256Vector)v, f);  \/\/ specialize\n+        return (Short256Vector) super.bOpTemplate((Short256Vector) v, f);  \/\/ specialize\n@@ -214,1 +214,1 @@\n-            super.bOpTemplate((Short256Vector)v, (Short256Mask)m,\n+            super.bOpTemplate((Short256Vector) v, (Short256Mask) m,\n@@ -224,1 +224,1 @@\n-            super.tOpTemplate((Short256Vector)v1, (Short256Vector)v2,\n+            super.tOpTemplate((Short256Vector) v1, (Short256Vector) v2,\n@@ -233,2 +233,2 @@\n-            super.tOpTemplate((Short256Vector)v1, (Short256Vector)v2,\n-                              (Short256Mask)m, f);  \/\/ specialize\n+            super.tOpTemplate((Short256Vector) v1, (Short256Vector) v2,\n+                              (Short256Mask) m, f);  \/\/ specialize\n@@ -534,1 +534,1 @@\n-                                    return (long)vecarr[ix];\n+                                    return (long) vecarr[ix];\n@@ -565,1 +565,1 @@\n-                                this, i, (long)e,\n+                                this, i, (long) e,\n@@ -568,1 +568,1 @@\n-                                    res[ix] = (short)bits;\n+                                    res[ix] = (short) bits;\n@@ -616,1 +616,1 @@\n-            return (boolean[])getPayload();\n+            return (boolean[]) getPayload();\n@@ -633,1 +633,1 @@\n-            boolean[] mbits = ((Short256Mask)m).getBits();\n+            boolean[] mbits = ((Short256Mask) m).getBits();\n@@ -657,1 +657,1 @@\n-            return  dsp.maskFactory(maskArray).check(dsp);\n+            return dsp.maskFactory(maskArray).check(dsp);\n@@ -678,1 +678,1 @@\n-            Short256Mask m = (Short256Mask)mask;\n+            Short256Mask m = (Short256Mask) mask;\n@@ -693,1 +693,1 @@\n-            return (Short256Mask)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return (Short256Mask) VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -705,1 +705,1 @@\n-            Short256Mask m = (Short256Mask)mask;\n+            Short256Mask m = (Short256Mask) mask;\n@@ -715,1 +715,1 @@\n-            Short256Mask m = (Short256Mask)mask;\n+            Short256Mask m = (Short256Mask) mask;\n@@ -725,1 +725,1 @@\n-            Short256Mask m = (Short256Mask)mask;\n+            Short256Mask m = (Short256Mask) mask;\n@@ -771,1 +771,1 @@\n-                                         (m, __) -> anyTrueHelper(((Short256Mask)m).getBits()));\n+                                         (m, __) -> anyTrueHelper(((Short256Mask) m).getBits()));\n@@ -779,1 +779,1 @@\n-                                         (m, __) -> allTrueHelper(((Short256Mask)m).getBits()));\n+                                         (m, __) -> allTrueHelper(((Short256Mask) m).getBits()));\n@@ -833,1 +833,1 @@\n-                                                    (s) -> ((Short256Vector)(((AbstractShuffle<Short>)(s)).toVectorTemplate())));\n+                                                    (s) -> ((Short256Vector) (((AbstractShuffle<Short>) (s)).toVectorTemplate())));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short256Vector.java","additions":26,"deletions":26,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -117,1 +117,1 @@\n-        return (short[])getPayload();\n+        return (short[]) getPayload();\n@@ -147,2 +147,2 @@\n-        return (Short512Shuffle)VectorSupport.shuffleIota(ETYPE, Short512Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n+        return (Short512Shuffle) VectorSupport.shuffleIota(ETYPE, Short512Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i * lstep + lstart, l))));\n@@ -150,2 +150,2 @@\n-        return (Short512Shuffle)VectorSupport.shuffleIota(ETYPE, Short512Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n+        return (Short512Shuffle) VectorSupport.shuffleIota(ETYPE, Short512Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i * lstep + lstart)));\n@@ -198,1 +198,1 @@\n-            super.uOpTemplate((Short512Mask)m, f);  \/\/ specialize\n+            super.uOpTemplate((Short512Mask) m, f);  \/\/ specialize\n@@ -206,1 +206,1 @@\n-        return (Short512Vector) super.bOpTemplate((Short512Vector)v, f);  \/\/ specialize\n+        return (Short512Vector) super.bOpTemplate((Short512Vector) v, f);  \/\/ specialize\n@@ -214,1 +214,1 @@\n-            super.bOpTemplate((Short512Vector)v, (Short512Mask)m,\n+            super.bOpTemplate((Short512Vector) v, (Short512Mask) m,\n@@ -224,1 +224,1 @@\n-            super.tOpTemplate((Short512Vector)v1, (Short512Vector)v2,\n+            super.tOpTemplate((Short512Vector) v1, (Short512Vector) v2,\n@@ -233,2 +233,2 @@\n-            super.tOpTemplate((Short512Vector)v1, (Short512Vector)v2,\n-                              (Short512Mask)m, f);  \/\/ specialize\n+            super.tOpTemplate((Short512Vector) v1, (Short512Vector) v2,\n+                              (Short512Mask) m, f);  \/\/ specialize\n@@ -550,1 +550,1 @@\n-                                    return (long)vecarr[ix];\n+                                    return (long) vecarr[ix];\n@@ -597,1 +597,1 @@\n-                                this, i, (long)e,\n+                                this, i, (long) e,\n@@ -600,1 +600,1 @@\n-                                    res[ix] = (short)bits;\n+                                    res[ix] = (short) bits;\n@@ -648,1 +648,1 @@\n-            return (boolean[])getPayload();\n+            return (boolean[]) getPayload();\n@@ -665,1 +665,1 @@\n-            boolean[] mbits = ((Short512Mask)m).getBits();\n+            boolean[] mbits = ((Short512Mask) m).getBits();\n@@ -689,1 +689,1 @@\n-            return  dsp.maskFactory(maskArray).check(dsp);\n+            return dsp.maskFactory(maskArray).check(dsp);\n@@ -710,1 +710,1 @@\n-            Short512Mask m = (Short512Mask)mask;\n+            Short512Mask m = (Short512Mask) mask;\n@@ -725,1 +725,1 @@\n-            return (Short512Mask)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return (Short512Mask) VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -737,1 +737,1 @@\n-            Short512Mask m = (Short512Mask)mask;\n+            Short512Mask m = (Short512Mask) mask;\n@@ -747,1 +747,1 @@\n-            Short512Mask m = (Short512Mask)mask;\n+            Short512Mask m = (Short512Mask) mask;\n@@ -757,1 +757,1 @@\n-            Short512Mask m = (Short512Mask)mask;\n+            Short512Mask m = (Short512Mask) mask;\n@@ -803,1 +803,1 @@\n-                                         (m, __) -> anyTrueHelper(((Short512Mask)m).getBits()));\n+                                         (m, __) -> anyTrueHelper(((Short512Mask) m).getBits()));\n@@ -811,1 +811,1 @@\n-                                         (m, __) -> allTrueHelper(((Short512Mask)m).getBits()));\n+                                         (m, __) -> allTrueHelper(((Short512Mask) m).getBits()));\n@@ -865,1 +865,1 @@\n-                                                    (s) -> ((Short512Vector)(((AbstractShuffle<Short>)(s)).toVectorTemplate())));\n+                                                    (s) -> ((Short512Vector) (((AbstractShuffle<Short>) (s)).toVectorTemplate())));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short512Vector.java","additions":26,"deletions":26,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -117,1 +117,1 @@\n-        return (short[])getPayload();\n+        return (short[]) getPayload();\n@@ -147,2 +147,2 @@\n-        return (Short64Shuffle)VectorSupport.shuffleIota(ETYPE, Short64Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n+        return (Short64Shuffle) VectorSupport.shuffleIota(ETYPE, Short64Shuffle.class, VSPECIES, VLENGTH, start, step, 1,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i * lstep + lstart, l))));\n@@ -150,2 +150,2 @@\n-        return (Short64Shuffle)VectorSupport.shuffleIota(ETYPE, Short64Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n+        return (Short64Shuffle) VectorSupport.shuffleIota(ETYPE, Short64Shuffle.class, VSPECIES, VLENGTH, start, step, 0,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i * lstep + lstart)));\n@@ -198,1 +198,1 @@\n-            super.uOpTemplate((Short64Mask)m, f);  \/\/ specialize\n+            super.uOpTemplate((Short64Mask) m, f);  \/\/ specialize\n@@ -206,1 +206,1 @@\n-        return (Short64Vector) super.bOpTemplate((Short64Vector)v, f);  \/\/ specialize\n+        return (Short64Vector) super.bOpTemplate((Short64Vector) v, f);  \/\/ specialize\n@@ -214,1 +214,1 @@\n-            super.bOpTemplate((Short64Vector)v, (Short64Mask)m,\n+            super.bOpTemplate((Short64Vector) v, (Short64Mask) m,\n@@ -224,1 +224,1 @@\n-            super.tOpTemplate((Short64Vector)v1, (Short64Vector)v2,\n+            super.tOpTemplate((Short64Vector) v1, (Short64Vector) v2,\n@@ -233,2 +233,2 @@\n-            super.tOpTemplate((Short64Vector)v1, (Short64Vector)v2,\n-                              (Short64Mask)m, f);  \/\/ specialize\n+            super.tOpTemplate((Short64Vector) v1, (Short64Vector) v2,\n+                              (Short64Mask) m, f);  \/\/ specialize\n@@ -522,1 +522,1 @@\n-                                    return (long)vecarr[ix];\n+                                    return (long) vecarr[ix];\n@@ -541,1 +541,1 @@\n-                                this, i, (long)e,\n+                                this, i, (long) e,\n@@ -544,1 +544,1 @@\n-                                    res[ix] = (short)bits;\n+                                    res[ix] = (short) bits;\n@@ -592,1 +592,1 @@\n-            return (boolean[])getPayload();\n+            return (boolean[]) getPayload();\n@@ -609,1 +609,1 @@\n-            boolean[] mbits = ((Short64Mask)m).getBits();\n+            boolean[] mbits = ((Short64Mask) m).getBits();\n@@ -633,1 +633,1 @@\n-            return  dsp.maskFactory(maskArray).check(dsp);\n+            return dsp.maskFactory(maskArray).check(dsp);\n@@ -654,1 +654,1 @@\n-            Short64Mask m = (Short64Mask)mask;\n+            Short64Mask m = (Short64Mask) mask;\n@@ -669,1 +669,1 @@\n-            return (Short64Mask)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return (Short64Mask) VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -681,1 +681,1 @@\n-            Short64Mask m = (Short64Mask)mask;\n+            Short64Mask m = (Short64Mask) mask;\n@@ -691,1 +691,1 @@\n-            Short64Mask m = (Short64Mask)mask;\n+            Short64Mask m = (Short64Mask) mask;\n@@ -701,1 +701,1 @@\n-            Short64Mask m = (Short64Mask)mask;\n+            Short64Mask m = (Short64Mask) mask;\n@@ -747,1 +747,1 @@\n-                                         (m, __) -> anyTrueHelper(((Short64Mask)m).getBits()));\n+                                         (m, __) -> anyTrueHelper(((Short64Mask) m).getBits()));\n@@ -755,1 +755,1 @@\n-                                         (m, __) -> allTrueHelper(((Short64Mask)m).getBits()));\n+                                         (m, __) -> allTrueHelper(((Short64Mask) m).getBits()));\n@@ -809,1 +809,1 @@\n-                                                    (s) -> ((Short64Vector)(((AbstractShuffle<Short>)(s)).toVectorTemplate())));\n+                                                    (s) -> ((Short64Vector) (((AbstractShuffle<Short>) (s)).toVectorTemplate())));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short64Vector.java","additions":26,"deletions":26,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -117,1 +117,1 @@\n-        return (short[])getPayload();\n+        return (short[]) getPayload();\n@@ -147,2 +147,2 @@\n-        return (ShortMaxShuffle)VectorSupport.shuffleIota(ETYPE, ShortMaxShuffle.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n+        return (ShortMaxShuffle) VectorSupport.shuffleIota(ETYPE, ShortMaxShuffle.class, VSPECIES, VLENGTH, start, step, 1,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i * lstep + lstart, l))));\n@@ -150,2 +150,2 @@\n-        return (ShortMaxShuffle)VectorSupport.shuffleIota(ETYPE, ShortMaxShuffle.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n+        return (ShortMaxShuffle) VectorSupport.shuffleIota(ETYPE, ShortMaxShuffle.class, VSPECIES, VLENGTH, start, step, 0,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i * lstep + lstart)));\n@@ -198,1 +198,1 @@\n-            super.uOpTemplate((ShortMaxMask)m, f);  \/\/ specialize\n+            super.uOpTemplate((ShortMaxMask) m, f);  \/\/ specialize\n@@ -206,1 +206,1 @@\n-        return (ShortMaxVector) super.bOpTemplate((ShortMaxVector)v, f);  \/\/ specialize\n+        return (ShortMaxVector) super.bOpTemplate((ShortMaxVector) v, f);  \/\/ specialize\n@@ -214,1 +214,1 @@\n-            super.bOpTemplate((ShortMaxVector)v, (ShortMaxMask)m,\n+            super.bOpTemplate((ShortMaxVector) v, (ShortMaxMask) m,\n@@ -224,1 +224,1 @@\n-            super.tOpTemplate((ShortMaxVector)v1, (ShortMaxVector)v2,\n+            super.tOpTemplate((ShortMaxVector) v1, (ShortMaxVector) v2,\n@@ -233,2 +233,2 @@\n-            super.tOpTemplate((ShortMaxVector)v1, (ShortMaxVector)v2,\n-                              (ShortMaxMask)m, f);  \/\/ specialize\n+            super.tOpTemplate((ShortMaxVector) v1, (ShortMaxVector) v2,\n+                              (ShortMaxMask) m, f);  \/\/ specialize\n@@ -519,1 +519,1 @@\n-                                    return (long)vecarr[ix];\n+                                    return (long) vecarr[ix];\n@@ -535,1 +535,1 @@\n-                                this, i, (long)e,\n+                                this, i, (long) e,\n@@ -538,1 +538,1 @@\n-                                    res[ix] = (short)bits;\n+                                    res[ix] = (short) bits;\n@@ -586,1 +586,1 @@\n-            return (boolean[])getPayload();\n+            return (boolean[]) getPayload();\n@@ -603,1 +603,1 @@\n-            boolean[] mbits = ((ShortMaxMask)m).getBits();\n+            boolean[] mbits = ((ShortMaxMask) m).getBits();\n@@ -627,1 +627,1 @@\n-            return  dsp.maskFactory(maskArray).check(dsp);\n+            return dsp.maskFactory(maskArray).check(dsp);\n@@ -648,1 +648,1 @@\n-            ShortMaxMask m = (ShortMaxMask)mask;\n+            ShortMaxMask m = (ShortMaxMask) mask;\n@@ -663,1 +663,1 @@\n-            return (ShortMaxMask)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return (ShortMaxMask) VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -675,1 +675,1 @@\n-            ShortMaxMask m = (ShortMaxMask)mask;\n+            ShortMaxMask m = (ShortMaxMask) mask;\n@@ -685,1 +685,1 @@\n-            ShortMaxMask m = (ShortMaxMask)mask;\n+            ShortMaxMask m = (ShortMaxMask) mask;\n@@ -695,1 +695,1 @@\n-            ShortMaxMask m = (ShortMaxMask)mask;\n+            ShortMaxMask m = (ShortMaxMask) mask;\n@@ -741,1 +741,1 @@\n-                                         (m, __) -> anyTrueHelper(((ShortMaxMask)m).getBits()));\n+                                         (m, __) -> anyTrueHelper(((ShortMaxMask) m).getBits()));\n@@ -749,1 +749,1 @@\n-                                         (m, __) -> allTrueHelper(((ShortMaxMask)m).getBits()));\n+                                         (m, __) -> allTrueHelper(((ShortMaxMask) m).getBits()));\n@@ -803,1 +803,1 @@\n-                                                    (s) -> ((ShortMaxVector)(((AbstractShuffle<Short>)(s)).toVectorTemplate())));\n+                                                    (s) -> ((ShortMaxVector) (((AbstractShuffle<Short>) (s)).toVectorTemplate())));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortMaxVector.java","additions":26,"deletions":26,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -361,2 +361,2 @@\n-        for(int i = 0,j = 0; i < vsp.length(); i++) {\n-            if(m.laneIsSet(i)) {\n+        for (int i = 0, j = 0; i < vsp.length(); i++) {\n+            if (m.laneIsSet(i)) {\n@@ -376,1 +376,1 @@\n-        for(int i = 0, j = 0; i < vsp.length(); i++) {\n+        for (int i = 0, j = 0; i < vsp.length(); i++) {\n@@ -430,1 +430,1 @@\n-        for (int i = 0; i < length(); i++){\n+        for (int i = 0; i < length(); i++) {\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortVector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -365,2 +365,2 @@\n-        for(int i = 0,j = 0; i < vsp.length(); i++) {\n-            if(m.laneIsSet(i)) {\n+        for (int i = 0, j = 0; i < vsp.length(); i++) {\n+            if (m.laneIsSet(i)) {\n@@ -380,1 +380,1 @@\n-        for(int i = 0, j = 0; i < vsp.length(); i++) {\n+        for (int i = 0, j = 0; i < vsp.length(); i++) {\n@@ -434,1 +434,1 @@\n-        for (int i = 0; i < length(); i++){\n+        for (int i = 0; i < length(); i++) {\n@@ -2083,3 +2083,3 @@\n-        b = ($type$)(((b & 0x5555) << 1) | ((b & 0xAAAA) >>> 1));\n-        b = ($type$)(((b & 0x3333) << 2) | ((b & 0xCCCC) >>> 2));\n-        b = ($type$)(((b & 0x0F0F) << 4) | ((b & 0xF0F0) >>> 4));\n+        b = ($type$) (((b & 0x5555) << 1) | ((b & 0xAAAA) >>> 1));\n+        b = ($type$) (((b & 0x3333) << 2) | ((b & 0xCCCC) >>> 2));\n+        b = ($type$) (((b & 0x0F0F) << 4) | ((b & 0xF0F0) >>> 4));\n@@ -2088,2 +2088,2 @@\n-        b = ($type$)(((b & 0x55) << 1) | ((b & 0xAA) >>> 1));\n-        b = ($type$)(((b & 0x33) << 2) | ((b & 0xCC) >>> 2));\n+        b = ($type$) (((b & 0x55) << 1) | ((b & 0xAA) >>> 1));\n+        b = ($type$) (((b & 0x33) << 2) | ((b & 0xCC) >>> 2));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -117,1 +117,1 @@\n-        return ($type$[])getPayload();\n+        return ($type$[]) getPayload();\n@@ -149,2 +149,2 @@\n-        return ($shuffletype$)VectorSupport.shuffleIota(ETYPE, $shuffletype$.class, VSPECIES, VLENGTH, start, step, 1,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));\n+        return ($shuffletype$) VectorSupport.shuffleIota(ETYPE, $shuffletype$.class, VSPECIES, VLENGTH, start, step, 1,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i * lstep + lstart, l))));\n@@ -152,2 +152,2 @@\n-        return ($shuffletype$)VectorSupport.shuffleIota(ETYPE, $shuffletype$.class, VSPECIES, VLENGTH, start, step, 0,\n-                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));\n+        return ($shuffletype$) VectorSupport.shuffleIota(ETYPE, $shuffletype$.class, VSPECIES, VLENGTH, start, step, 0,\n+                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i * lstep + lstart)));\n@@ -200,1 +200,1 @@\n-            super.uOpTemplate(($masktype$)m, f);  \/\/ specialize\n+            super.uOpTemplate(($masktype$) m, f);  \/\/ specialize\n@@ -208,1 +208,1 @@\n-        return ($vectortype$) super.bOpTemplate(($vectortype$)v, f);  \/\/ specialize\n+        return ($vectortype$) super.bOpTemplate(($vectortype$) v, f);  \/\/ specialize\n@@ -216,1 +216,1 @@\n-            super.bOpTemplate(($vectortype$)v, ($masktype$)m,\n+            super.bOpTemplate(($vectortype$) v, ($masktype$) m,\n@@ -226,1 +226,1 @@\n-            super.tOpTemplate(($vectortype$)v1, ($vectortype$)v2,\n+            super.tOpTemplate(($vectortype$) v1, ($vectortype$) v2,\n@@ -235,2 +235,2 @@\n-            super.tOpTemplate(($vectortype$)v1, ($vectortype$)v2,\n-                              ($masktype$)m, f);  \/\/ specialize\n+            super.tOpTemplate(($vectortype$) v1, ($vectortype$) v2,\n+                              ($masktype$) m, f);  \/\/ specialize\n@@ -558,1 +558,1 @@\n-                     return (long)$Type$.$type$To$Bitstype$Bits(vecarr[ix]);\n+                     return (long) $Type$.$type$To$Bitstype$Bits(vecarr[ix]);\n@@ -604,1 +604,1 @@\n-                                this, i, (long)$Type$.$type$To$Bitstype$Bits(e),\n+                                this, i, (long) $Type$.$type$To$Bitstype$Bits(e),\n@@ -607,1 +607,1 @@\n-                                    res[ix] = $Type$.$bitstype$BitsTo$Type$(($bitstype$)bits);\n+                                    res[ix] = $Type$.$bitstype$BitsTo$Type$(($bitstype$) bits);\n@@ -709,1 +709,1 @@\n-                                    return (long)vecarr[ix];\n+                                    return (long) vecarr[ix];\n@@ -807,1 +807,1 @@\n-                                this, i, (long)e,\n+                                this, i, (long) e,\n@@ -810,1 +810,1 @@\n-                                    res[ix] = ($type$)bits;\n+                                    res[ix] = ($type$) bits;\n@@ -859,1 +859,1 @@\n-            return (boolean[])getPayload();\n+            return (boolean[]) getPayload();\n@@ -876,1 +876,1 @@\n-            boolean[] mbits = (($masktype$)m).getBits();\n+            boolean[] mbits = (($masktype$) m).getBits();\n@@ -900,1 +900,1 @@\n-            return  dsp.maskFactory(maskArray).check(dsp);\n+            return dsp.maskFactory(maskArray).check(dsp);\n@@ -921,1 +921,1 @@\n-            $masktype$ m = ($masktype$)mask;\n+            $masktype$ m = ($masktype$) mask;\n@@ -936,1 +936,1 @@\n-            return ($masktype$)VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n+            return ($masktype$) VectorSupport.comExpOp(VectorSupport.VECTOR_OP_MASK_COMPRESS,\n@@ -948,1 +948,1 @@\n-            $masktype$ m = ($masktype$)mask;\n+            $masktype$ m = ($masktype$) mask;\n@@ -958,1 +958,1 @@\n-            $masktype$ m = ($masktype$)mask;\n+            $masktype$ m = ($masktype$) mask;\n@@ -968,1 +968,1 @@\n-            $masktype$ m = ($masktype$)mask;\n+            $masktype$ m = ($masktype$) mask;\n@@ -1014,1 +1014,1 @@\n-                                         (m, __) -> anyTrueHelper((($masktype$)m).getBits()));\n+                                         (m, __) -> anyTrueHelper((($masktype$) m).getBits()));\n@@ -1022,1 +1022,1 @@\n-                                         (m, __) -> allTrueHelper((($masktype$)m).getBits()));\n+                                         (m, __) -> allTrueHelper((($masktype$) m).getBits()));\n@@ -1091,1 +1091,1 @@\n-                                                    (s) -> (($vectortype$)(((AbstractShuffle<$Boxtype$>)(s)).toVectorTemplate())));\n+                                                    (s) -> (($vectortype$) (((AbstractShuffle<$Boxtype$>) (s)).toVectorTemplate())));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-VectorBits.java.template","additions":29,"deletions":29,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -73,1 +73,1 @@\n-                            i -> (byte)(i * 5));\n+                            i -> (byte) (i * 5));\n@@ -77,1 +77,1 @@\n-                            i -> (((byte)(i + 1) == 0) ? 1 : (byte)(i + 1)));\n+                            i -> (((byte) (i + 1) == 0) ? 1 : (byte) (i + 1)));\n@@ -184,1 +184,1 @@\n-                            return new Object[]{fa, fb, bo};\n+                            return new Object[] {fa, fb, bo};\n@@ -195,1 +195,1 @@\n-                            return new Object[]{fa, fb, fm, bo};\n+                            return new Object[] {fa, fb, fm, bo};\n@@ -204,1 +204,1 @@\n-                    return new Object[]{fa, bo};\n+                    return new Object[] {fa, bo};\n@@ -214,1 +214,1 @@\n-                        return new Object[]{fa, fm, bo};\n+                        return new Object[] {fa, fm, bo};\n@@ -932,1 +932,0 @@\n-\n@@ -1021,1 +1020,0 @@\n-\n@@ -1296,1 +1294,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte128VectorLoadStoreTests.java","additions":7,"deletions":10,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -93,1 +93,1 @@\n-            byte[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            byte[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -253,1 +253,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i+order[i + j]]);\n@@ -258,1 +258,1 @@\n-            Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i+order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]]);\n@@ -274,1 +274,1 @@\n-                    Assert.assertEquals(r[i + k], (byte)0);\n+                    Assert.assertEquals(r[i + k], (byte) 0);\n@@ -282,1 +282,1 @@\n-                Assert.assertEquals(r[idx], (byte)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], (byte) 0, \"at index #\" + idx);\n@@ -297,1 +297,1 @@\n-                        Assert.assertEquals(r[i + j], (byte)0);\n+                        Assert.assertEquals(r[i + j], (byte) 0);\n@@ -306,1 +306,1 @@\n-                Assert.assertEquals(r[idx], (byte)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], (byte) 0, \"at index #\" + idx);\n@@ -316,1 +316,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -321,1 +321,1 @@\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]]);\n@@ -331,1 +331,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + order[i + j]]);\n@@ -333,1 +333,1 @@\n-                         Assert.assertEquals(r[i+j], (byte)0);\n+                         Assert.assertEquals(r[i + j], (byte) 0);\n@@ -339,1 +339,1 @@\n-                Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -341,1 +341,1 @@\n-                Assert.assertEquals(r[i+j], (byte)0, \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], (byte) 0, \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -351,1 +351,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -353,1 +353,1 @@\n-                         Assert.assertEquals(r[i+j], (byte)0);\n+                         Assert.assertEquals(r[i + j], (byte) 0);\n@@ -359,1 +359,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -361,1 +361,1 @@\n-                Assert.assertEquals(r[i+j], (byte)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], (byte) 0, \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -370,1 +370,1 @@\n-                a[j]=a[idx];\n+                a[j] = a[idx];\n@@ -421,1 +421,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], (byte)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])));\n+                Assert.assertEquals(r[i], f.apply(a[i], (byte) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])));\n@@ -424,1 +424,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], (byte)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])),\n+            Assert.assertEquals(r[i], f.apply(a[i], (byte) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])),\n@@ -470,1 +470,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], (byte)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n+                Assert.assertEquals(r[i], f.apply(a[i], (byte) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n@@ -473,1 +473,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], (byte)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]),\n+            Assert.assertEquals(r[i], f.apply(a[i], (byte) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]),\n@@ -486,1 +486,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]));\n@@ -490,1 +490,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]), \"at index #\" + i + \", \" + j);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]), \"at index #\" + i + \", \" + j);\n@@ -504,1 +504,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]));\n@@ -508,1 +508,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i+j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i + j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n@@ -657,1 +657,0 @@\n-\n@@ -681,1 +680,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -686,1 +685,1 @@\n-            byte[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            byte[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -689,1 +688,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -691,1 +690,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -708,1 +707,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -713,1 +712,1 @@\n-            byte[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            byte[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -716,1 +715,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -718,1 +717,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -729,1 +728,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -734,1 +733,1 @@\n-            byte[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            byte[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -737,1 +736,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -739,1 +738,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -741,1 +740,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(r, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(r, i, i + SPECIES.length()))\n@@ -756,1 +755,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -761,1 +760,1 @@\n-            byte[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            byte[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -776,1 +775,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -781,1 +780,1 @@\n-            byte[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            byte[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -797,1 +796,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -802,1 +801,1 @@\n-            byte[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            byte[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -818,1 +817,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -823,1 +822,1 @@\n-            byte[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            byte[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -840,1 +839,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -845,1 +844,1 @@\n-            byte[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            byte[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -859,1 +858,1 @@\n-                Assert.assertEquals(r[i], (int)(a[i+offs]));\n+                Assert.assertEquals(r[i], (int) (a[i + offs]));\n@@ -862,1 +861,1 @@\n-            Assert.assertEquals(r[i], (int)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (int) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -871,1 +870,1 @@\n-                Assert.assertEquals(r[i], (long)(a[i+offs]));\n+                Assert.assertEquals(r[i], (long) (a[i + offs]));\n@@ -874,1 +873,1 @@\n-            Assert.assertEquals(r[i], (long)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (long) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -882,1 +881,1 @@\n-                Assert.assertEquals(r[i], (long)(a[i+offs]));\n+                Assert.assertEquals(r[i], (long) (a[i + offs]));\n@@ -885,1 +884,1 @@\n-            Assert.assertEquals(r[i], (long)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (long) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -893,1 +892,1 @@\n-                Assert.assertEquals(r[i], (double)(a[i+offs]));\n+                Assert.assertEquals(r[i], (double) (a[i + offs]));\n@@ -896,1 +895,1 @@\n-            Assert.assertEquals(r[i], (double)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (double) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -900,1 +899,0 @@\n-\n@@ -908,1 +906,1 @@\n-                            i -> (byte)(-i * 5));\n+                            i -> (byte) (-i * 5));\n@@ -912,1 +910,1 @@\n-                            i -> (byte)(i * 5));\n+                            i -> (byte) (i * 5));\n@@ -916,1 +914,1 @@\n-                            i -> (((byte)(i + 1) == 0) ? 1 : (byte)(i + 1)));\n+                            i -> (((byte) (i + 1) == 0) ? 1 : (byte) (i + 1)));\n@@ -1047,1 +1045,1 @@\n-                    a[i] = (byte)RAND.nextInt(upper);\n+                    a[i] = (byte) RAND.nextInt(upper);\n@@ -1072,1 +1070,0 @@\n-\n@@ -1076,1 +1073,1 @@\n-                            i -> (byte)i);\n+                            i -> (byte) i);\n@@ -1080,1 +1077,1 @@\n-                            i -> (byte)(i - (s * BUFFER_REPS \/ 2)));\n+                            i -> (byte) (i - (s * BUFFER_REPS \/ 2)));\n@@ -1084,1 +1081,1 @@\n-                            i -> (byte)(i + 1));\n+                            i -> (byte) (i + 1));\n@@ -1088,1 +1085,1 @@\n-                            i -> (byte)(i - 2));\n+                            i -> (byte) (i - 2));\n@@ -1092,1 +1089,1 @@\n-                            i -> i%3 == 0 ? (byte)i : (i%3 == 1 ? (byte)(i + 1) : (byte)(i - 2)));\n+                            i -> i % 3 == 0 ? (byte) i : (i % 3 == 1 ? (byte) (i + 1) : (byte) (i - 2)));\n@@ -1166,1 +1163,1 @@\n-                return (byte)0;\n+                return (byte) 0;\n@@ -1206,1 +1203,1 @@\n-        return (byte)(((((byte)a) & 0xFF) << (b & 7)) | ((((byte)a) & 0xFF) >>> (8 - (b & 7))));\n+        return (byte) (((((byte) a) & 0xFF) << (b & 7)) | ((((byte) a) & 0xFF) >>> (8 - (b & 7))));\n@@ -1210,1 +1207,1 @@\n-        return (byte)(((((byte)a) & 0xFF) >>> (b & 7)) | ((((byte)a) & 0xFF) << (8 - (b & 7))));\n+        return (byte) (((((byte) a) & 0xFF) >>> (b & 7)) | ((((byte) a) & 0xFF) << (8 - (b & 7))));\n@@ -1223,2 +1220,2 @@\n-        b = (byte)(((b & 0x55) << 1) | ((b & 0xAA) >>> 1));\n-        b = (byte)(((b & 0x33) << 2) | ((b & 0xCC) >>> 2));\n+        b = (byte) (((b & 0x55) << 1) | ((b & 0xAA) >>> 1));\n+        b = (byte) (((b & 0x33) << 2) | ((b & 0xCC) >>> 2));\n@@ -1228,1 +1225,0 @@\n-\n@@ -1275,1 +1271,1 @@\n-        ByteVector three = ByteVector.broadcast(SPECIES, (byte)-3);\n+        ByteVector three = ByteVector.broadcast(SPECIES, (byte) -3);\n@@ -1289,1 +1285,1 @@\n-        m = higher.min((byte)-1).test(VectorOperators.IS_NEGATIVE);\n+        m = higher.min((byte) -1).test(VectorOperators.IS_NEGATIVE);\n@@ -1292,1 +1288,1 @@\n-        assert(max == -3 + scale * (SPECIES.length()-1));\n+        assert(max == -3 + scale * (SPECIES.length() - 1));\n@@ -1307,1 +1303,1 @@\n-        ByteVector io2 = (ByteVector) VectorShuffle.iota(SPECIES,0,1,false).toVector();\n+        ByteVector io2 = (ByteVector) VectorShuffle.iota(SPECIES, 0, 1, false).toVector();\n@@ -1309,1 +1305,1 @@\n-        ByteVector a = io.add((byte)1); \/\/[1,2]\n+        ByteVector a = io.add((byte) 1); \/\/[1,2]\n@@ -1314,2 +1310,2 @@\n-        ByteVector zab0 = a.rearrange(zip0,b); \/\/[1,-1]\n-        ByteVector zab1 = a.rearrange(zip1,b); \/\/[2,-2]\n+        ByteVector zab0 = a.rearrange(zip0, b); \/\/[1,-1]\n+        ByteVector zab1 = a.rearrange(zip1, b); \/\/[2,-2]\n@@ -1320,2 +1316,2 @@\n-            manual[i+0] = abValues[i\/2];\n-            manual[i+1] = abValues[a.length() + i\/2];\n+            manual[i + 0] = abValues[i \/ 2];\n+            manual[i + 1] = abValues[a.length() + i \/ 2];\n@@ -1326,2 +1322,2 @@\n-        ByteVector uab0 = zab0.rearrange(unz0,zab1);\n-        ByteVector uab1 = zab0.rearrange(unz1,zab1);\n+        ByteVector uab0 = zab0.rearrange(unz0, zab1);\n+        ByteVector uab1 = zab0.rearrange(unz1, zab1);\n@@ -1379,1 +1375,1 @@\n-        return (byte)(a + b);\n+        return (byte) (a + b);\n@@ -1399,1 +1395,1 @@\n-        return (byte)(a + b);\n+        return (byte) (a + b);\n@@ -1455,1 +1451,1 @@\n-        return (byte)(a - b);\n+        return (byte) (a - b);\n@@ -1475,1 +1471,1 @@\n-        return (byte)(a - b);\n+        return (byte) (a - b);\n@@ -1531,1 +1527,1 @@\n-        return (byte)(a * b);\n+        return (byte) (a * b);\n@@ -1551,1 +1547,1 @@\n-        return (byte)(a * b);\n+        return (byte) (a * b);\n@@ -1610,1 +1606,1 @@\n-        return (byte)(a \/ b);\n+        return (byte) (a \/ b);\n@@ -1632,1 +1628,1 @@\n-        return (byte)(a \/ b);\n+        return (byte) (a \/ b);\n@@ -1701,1 +1697,1 @@\n-        return (byte)((a)!=0?a:b);\n+        return (byte) ((a) != 0 ? a : b);\n@@ -1742,1 +1738,1 @@\n-        return (byte)(a & b);\n+        return (byte) (a & b);\n@@ -1762,1 +1758,1 @@\n-        return (byte)(a & b);\n+        return (byte) (a & b);\n@@ -1804,1 +1800,1 @@\n-        return (byte)(a & ~b);\n+        return (byte) (a & ~b);\n@@ -1848,1 +1844,1 @@\n-        return (byte)(a | b);\n+        return (byte) (a | b);\n@@ -1868,1 +1864,1 @@\n-        return (byte)(a | b);\n+        return (byte) (a | b);\n@@ -1910,1 +1906,1 @@\n-        return (byte)(a ^ b);\n+        return (byte) (a ^ b);\n@@ -2194,1 +2190,1 @@\n-            av.lanewise(VectorOperators.OR, (long)b[i]).intoArray(r, i);\n+            av.lanewise(VectorOperators.OR, (long) b[i]).intoArray(r, i);\n@@ -2213,1 +2209,1 @@\n-            av.lanewise(VectorOperators.OR, (long)b[i], vmask).intoArray(r, i);\n+            av.lanewise(VectorOperators.OR, (long) b[i], vmask).intoArray(r, i);\n@@ -2228,1 +2224,1 @@\n-            av.lanewise(VectorOperators.ADD, (long)b[i]).intoArray(r, i);\n+            av.lanewise(VectorOperators.ADD, (long) b[i]).intoArray(r, i);\n@@ -2245,1 +2241,1 @@\n-            av.lanewise(VectorOperators.ADD, (long)b[i], vmask).intoArray(r, i);\n+            av.lanewise(VectorOperators.ADD, (long) b[i], vmask).intoArray(r, i);\n@@ -2254,1 +2250,1 @@\n-        return (byte)((a << (b & 0x7)));\n+        return (byte) ((a << (b & 0x7)));\n@@ -2302,1 +2298,1 @@\n-        return (byte)((a >> (b & 0x7)));\n+        return (byte) ((a >> (b & 0x7)));\n@@ -2350,1 +2346,1 @@\n-        return (byte)(((a & 0xFF) >>> (b & 0x7)));\n+        return (byte) (((a & 0xFF) >>> (b & 0x7)));\n@@ -2398,1 +2394,1 @@\n-        return (byte)((a << (b & 7)));\n+        return (byte) ((a << (b & 7)));\n@@ -2410,1 +2406,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i]).intoArray(r, i);\n@@ -2431,1 +2427,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i], vmask).intoArray(r, i);\n@@ -2444,1 +2440,1 @@\n-        return (byte)(((a & 0xFF) >>> (b & 7)));\n+        return (byte) (((a & 0xFF) >>> (b & 7)));\n@@ -2456,1 +2452,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i]).intoArray(r, i);\n@@ -2477,1 +2473,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i], vmask).intoArray(r, i);\n@@ -2490,1 +2486,1 @@\n-        return (byte)((a >> (b & 7)));\n+        return (byte) ((a >> (b & 7)));\n@@ -2502,1 +2498,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i]).intoArray(r, i);\n@@ -2523,1 +2519,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i], vmask).intoArray(r, i);\n@@ -2534,1 +2530,1 @@\n-        return (byte)(ROR_scalar(a,b));\n+        return (byte) (ROR_scalar(a, b));\n@@ -2578,1 +2574,1 @@\n-        return (byte)(ROL_scalar(a,b));\n+        return (byte) (ROL_scalar(a, b));\n@@ -2622,1 +2618,1 @@\n-        return (byte)(ROR_scalar(a,b));\n+        return (byte) (ROR_scalar(a, b));\n@@ -2634,1 +2630,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i]).intoArray(r, i);\n@@ -2655,1 +2651,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i], vmask).intoArray(r, i);\n@@ -2664,1 +2660,1 @@\n-        return (byte)(ROL_scalar(a,b));\n+        return (byte) (ROL_scalar(a, b));\n@@ -2676,1 +2672,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i]).intoArray(r, i);\n@@ -2697,1 +2693,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i], vmask).intoArray(r, i);\n@@ -2705,1 +2701,1 @@\n-        return (byte)(Math.min(a, b));\n+        return (byte) (Math.min(a, b));\n@@ -2725,1 +2721,1 @@\n-        return (byte)(Math.min(a, b));\n+        return (byte) (Math.min(a, b));\n@@ -2743,1 +2739,1 @@\n-        return (byte)(Math.max(a, b));\n+        return (byte) (Math.max(a, b));\n@@ -2763,1 +2759,1 @@\n-        return (byte)(Math.max(a, b));\n+        return (byte) (Math.max(a, b));\n@@ -3601,1 +3597,1 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (byte)(65535+i)).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length() - 1)), (byte) (65535 + i)).intoArray(r, i);\n@@ -3607,1 +3603,1 @@\n-            assertInsertArraysEquals(r, a, (byte)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+            assertInsertArraysEquals(r, a, (byte) (65535 + i), (j++ & (SPECIES.length() - 1)), i , i + SPECIES.length());\n@@ -3611,1 +3607,1 @@\n-        return bits(a)==0;\n+        return bits(a) == 0;\n@@ -3644,1 +3640,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_DEFAULT(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_DEFAULT(a[i + j]));\n@@ -3649,1 +3645,1 @@\n-        return bits(a)<0;\n+        return bits(a) < 0;\n@@ -3682,1 +3678,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_NEGATIVE(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_NEGATIVE(a[i + j]));\n@@ -4192,1 +4188,0 @@\n-\n@@ -4220,1 +4215,1 @@\n-            VectorMask<Byte> mv = av.compare(VectorOperators.LT, (long)b[i]);\n+            VectorMask<Byte> mv = av.compare(VectorOperators.LT, (long) b[i]);\n@@ -4224,1 +4219,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), a[i + j] < (byte)((long)b[i]));\n+                Assert.assertEquals(mv.laneIsSet(j), a[i + j] < (byte) ((long) b[i]));\n@@ -4229,1 +4224,0 @@\n-\n@@ -4241,1 +4235,1 @@\n-            VectorMask<Byte> mv = av.compare(VectorOperators.LT, (long)b[i], vmask);\n+            VectorMask<Byte> mv = av.compare(VectorOperators.LT, (long) b[i], vmask);\n@@ -4245,1 +4239,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] < (byte)((long)b[i])));\n+                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] < (byte) ((long) b[i])));\n@@ -4266,1 +4260,0 @@\n-\n@@ -4294,1 +4287,1 @@\n-            VectorMask<Byte> mv = av.compare(VectorOperators.EQ, (long)b[i]);\n+            VectorMask<Byte> mv = av.compare(VectorOperators.EQ, (long) b[i]);\n@@ -4298,1 +4291,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), a[i + j] == (byte)((long)b[i]));\n+                Assert.assertEquals(mv.laneIsSet(j), a[i + j] == (byte) ((long) b[i]));\n@@ -4303,1 +4296,0 @@\n-\n@@ -4315,1 +4307,1 @@\n-            VectorMask<Byte> mv = av.compare(VectorOperators.EQ, (long)b[i], vmask);\n+            VectorMask<Byte> mv = av.compare(VectorOperators.EQ, (long) b[i], vmask);\n@@ -4319,1 +4311,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] == (byte)((long)b[i])));\n+                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] == (byte) ((long) b[i])));\n@@ -4430,1 +4422,1 @@\n-                    r[i]=av.lane(0);\n+                    r[i] = av.lane(0);\n@@ -4432,2 +4424,2 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n@@ -4435,4 +4427,4 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n@@ -4440,8 +4432,8 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n@@ -4449,16 +4441,16 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n@@ -4466,32 +4458,32 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n@@ -4499,64 +4491,64 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n-                    r[i+32]=av.lane(32);\n-                    r[i+33]=av.lane(33);\n-                    r[i+34]=av.lane(34);\n-                    r[i+35]=av.lane(35);\n-                    r[i+36]=av.lane(36);\n-                    r[i+37]=av.lane(37);\n-                    r[i+38]=av.lane(38);\n-                    r[i+39]=av.lane(39);\n-                    r[i+40]=av.lane(40);\n-                    r[i+41]=av.lane(41);\n-                    r[i+42]=av.lane(42);\n-                    r[i+43]=av.lane(43);\n-                    r[i+44]=av.lane(44);\n-                    r[i+45]=av.lane(45);\n-                    r[i+46]=av.lane(46);\n-                    r[i+47]=av.lane(47);\n-                    r[i+48]=av.lane(48);\n-                    r[i+49]=av.lane(49);\n-                    r[i+50]=av.lane(50);\n-                    r[i+51]=av.lane(51);\n-                    r[i+52]=av.lane(52);\n-                    r[i+53]=av.lane(53);\n-                    r[i+54]=av.lane(54);\n-                    r[i+55]=av.lane(55);\n-                    r[i+56]=av.lane(56);\n-                    r[i+57]=av.lane(57);\n-                    r[i+58]=av.lane(58);\n-                    r[i+59]=av.lane(59);\n-                    r[i+60]=av.lane(60);\n-                    r[i+61]=av.lane(61);\n-                    r[i+62]=av.lane(62);\n-                    r[i+63]=av.lane(63);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n+                    r[i + 32] = av.lane(32);\n+                    r[i + 33] = av.lane(33);\n+                    r[i + 34] = av.lane(34);\n+                    r[i + 35] = av.lane(35);\n+                    r[i + 36] = av.lane(36);\n+                    r[i + 37] = av.lane(37);\n+                    r[i + 38] = av.lane(38);\n+                    r[i + 39] = av.lane(39);\n+                    r[i + 40] = av.lane(40);\n+                    r[i + 41] = av.lane(41);\n+                    r[i + 42] = av.lane(42);\n+                    r[i + 43] = av.lane(43);\n+                    r[i + 44] = av.lane(44);\n+                    r[i + 45] = av.lane(45);\n+                    r[i + 46] = av.lane(46);\n+                    r[i + 47] = av.lane(47);\n+                    r[i + 48] = av.lane(48);\n+                    r[i + 49] = av.lane(49);\n+                    r[i + 50] = av.lane(50);\n+                    r[i + 51] = av.lane(51);\n+                    r[i + 52] = av.lane(52);\n+                    r[i + 53] = av.lane(53);\n+                    r[i + 54] = av.lane(54);\n+                    r[i + 55] = av.lane(55);\n+                    r[i + 56] = av.lane(56);\n+                    r[i + 57] = av.lane(57);\n+                    r[i + 58] = av.lane(58);\n+                    r[i + 59] = av.lane(59);\n+                    r[i + 60] = av.lane(60);\n+                    r[i + 61] = av.lane(61);\n+                    r[i + 62] = av.lane(62);\n+                    r[i + 63] = av.lane(63);\n@@ -4565,1 +4557,1 @@\n-                        r[i+j]=av.lane(j);\n+                        r[i + j] = av.lane(j);\n@@ -4606,3 +4598,0 @@\n-\n-\n-\n@@ -4612,2 +4601,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = a[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = a[idx + i + origin];\n@@ -4615,1 +4604,1 @@\n-                res[i] = (byte)0;\n+                res[i] = (byte) 0;\n@@ -4638,1 +4627,1 @@\n-                res[i] = a[idx+i+origin];\n+                res[i] = a[idx + i + origin];\n@@ -4640,1 +4629,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n@@ -4666,2 +4655,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = mask[i] ? a[idx+i+origin] : (byte)0;\n+            if(i + origin < SPECIES.length())\n+                res[i] = mask[i] ? a[idx + i + origin] : (byte) 0;\n@@ -4669,1 +4658,1 @@\n-                res[i] = mask[i] ? b[idx+j] : (byte)0;\n+                res[i] = mask[i] ? b[idx + j] : (byte) 0;\n@@ -4700,1 +4689,1 @@\n-                res[i] = (byte)0;\n+                res[i] = (byte) 0;\n@@ -4702,1 +4691,1 @@\n-                res[i] = a[idx+j];\n+                res[i] = a[idx + j];\n@@ -4728,1 +4717,1 @@\n-                    res[i] = b[idx+i];\n+                    res[i] = b[idx + i];\n@@ -4730,1 +4719,1 @@\n-                    res[i] = a[idx+j];\n+                    res[i] = a[idx + j];\n@@ -4735,1 +4724,1 @@\n-                    res[i] = a[idx+SPECIES.length()-origin+i];\n+                    res[i] = a[idx + SPECIES.length() - origin + i];\n@@ -4737,1 +4726,1 @@\n-                    res[i] = b[idx+origin+j];\n+                    res[i] = b[idx + origin + j];\n@@ -4765,2 +4754,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = b[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = b[idx + i + origin];\n@@ -4768,1 +4757,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n@@ -4773,1 +4762,1 @@\n-            res[i] = mask[i] ? a[idx+i] : res[i];\n+            res[i] = mask[i] ? a[idx + i] : res[i];\n@@ -4779,1 +4768,1 @@\n-                    res1[i] = b[idx+i];\n+                    res1[i] = b[idx + i];\n@@ -4781,2 +4770,2 @@\n-                   res1[i] = res[j];\n-                   j++;\n+                    res1[i] = res[j];\n+                    j++;\n@@ -4788,1 +4777,1 @@\n-                    res1[i] = res[SPECIES.length()-origin+i];\n+                    res1[i] = res[SPECIES.length() - origin + i];\n@@ -4790,1 +4779,1 @@\n-                    res1[i] = b[idx+origin+j];\n+                    res1[i] = b[idx + origin + j];\n@@ -4842,1 +4831,1 @@\n-        return (byte)((a&~(c))|(b&c));\n+        return (byte) ((a &~ (c)) | (b & c));\n@@ -4845,1 +4834,1 @@\n-        return (byte)((a&~(c))|(b&c));\n+        return (byte) ((a &~ (c)) | (b & c));\n@@ -5061,1 +5050,1 @@\n-        return (byte)(-((byte)a));\n+        return (byte) (-((byte) a));\n@@ -5065,1 +5054,1 @@\n-        return (byte)(-((byte)a));\n+        return (byte) (-((byte) a));\n@@ -5117,1 +5106,1 @@\n-        return (byte)(Math.abs((byte)a));\n+        return (byte) (Math.abs((byte) a));\n@@ -5121,1 +5110,1 @@\n-        return (byte)(Math.abs((byte)a));\n+        return (byte) (Math.abs((byte) a));\n@@ -5174,1 +5163,1 @@\n-        return (byte)(~((byte)a));\n+        return (byte) (~((byte) a));\n@@ -5178,1 +5167,1 @@\n-        return (byte)(~((byte)a));\n+        return (byte) (~((byte) a));\n@@ -5236,1 +5225,1 @@\n-        return (byte)((a==0?0:-1));\n+        return (byte) ((a == 0 ? 0 : -1));\n@@ -5285,1 +5274,1 @@\n-        return (byte)(Integer.bitCount((int)a & 0xFF));\n+        return (byte) (Integer.bitCount((int) a & 0xFF));\n@@ -5331,1 +5320,1 @@\n-        return (byte)(TRAILING_ZEROS_COUNT_scalar(a));\n+        return (byte) (TRAILING_ZEROS_COUNT_scalar(a));\n@@ -5374,1 +5363,1 @@\n-        return (byte)(LEADING_ZEROS_COUNT_scalar(a));\n+        return (byte) (LEADING_ZEROS_COUNT_scalar(a));\n@@ -5417,1 +5406,1 @@\n-        return (byte)(REVERSE_scalar(a));\n+        return (byte) (REVERSE_scalar(a));\n@@ -5568,1 +5557,1 @@\n-        return (long)res;\n+        return (long) res;\n@@ -5607,1 +5596,1 @@\n-        return (long)res;\n+        return (long) res;\n@@ -5664,1 +5653,1 @@\n-                av.blend((long)b[i], vmask).intoArray(r, i);\n+                av.blend((long) b[i], vmask).intoArray(r, i);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte128VectorTests.java","additions":307,"deletions":318,"binary":false,"changes":625,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -73,1 +73,1 @@\n-                            i -> (byte)(i * 5));\n+                            i -> (byte) (i * 5));\n@@ -77,1 +77,1 @@\n-                            i -> (((byte)(i + 1) == 0) ? 1 : (byte)(i + 1)));\n+                            i -> (((byte) (i + 1) == 0) ? 1 : (byte) (i + 1)));\n@@ -184,1 +184,1 @@\n-                            return new Object[]{fa, fb, bo};\n+                            return new Object[] {fa, fb, bo};\n@@ -195,1 +195,1 @@\n-                            return new Object[]{fa, fb, fm, bo};\n+                            return new Object[] {fa, fb, fm, bo};\n@@ -204,1 +204,1 @@\n-                    return new Object[]{fa, bo};\n+                    return new Object[] {fa, bo};\n@@ -214,1 +214,1 @@\n-                        return new Object[]{fa, fm, bo};\n+                        return new Object[] {fa, fm, bo};\n@@ -932,1 +932,0 @@\n-\n@@ -1021,1 +1020,0 @@\n-\n@@ -1296,1 +1294,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte256VectorLoadStoreTests.java","additions":7,"deletions":10,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -93,1 +93,1 @@\n-            byte[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            byte[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -253,1 +253,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i+order[i + j]]);\n@@ -258,1 +258,1 @@\n-            Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i+order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]]);\n@@ -274,1 +274,1 @@\n-                    Assert.assertEquals(r[i + k], (byte)0);\n+                    Assert.assertEquals(r[i + k], (byte) 0);\n@@ -282,1 +282,1 @@\n-                Assert.assertEquals(r[idx], (byte)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], (byte) 0, \"at index #\" + idx);\n@@ -297,1 +297,1 @@\n-                        Assert.assertEquals(r[i + j], (byte)0);\n+                        Assert.assertEquals(r[i + j], (byte) 0);\n@@ -306,1 +306,1 @@\n-                Assert.assertEquals(r[idx], (byte)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], (byte) 0, \"at index #\" + idx);\n@@ -316,1 +316,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -321,1 +321,1 @@\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]]);\n@@ -331,1 +331,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + order[i + j]]);\n@@ -333,1 +333,1 @@\n-                         Assert.assertEquals(r[i+j], (byte)0);\n+                         Assert.assertEquals(r[i + j], (byte) 0);\n@@ -339,1 +339,1 @@\n-                Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -341,1 +341,1 @@\n-                Assert.assertEquals(r[i+j], (byte)0, \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], (byte) 0, \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -351,1 +351,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -353,1 +353,1 @@\n-                         Assert.assertEquals(r[i+j], (byte)0);\n+                         Assert.assertEquals(r[i + j], (byte) 0);\n@@ -359,1 +359,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -361,1 +361,1 @@\n-                Assert.assertEquals(r[i+j], (byte)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], (byte) 0, \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -370,1 +370,1 @@\n-                a[j]=a[idx];\n+                a[j] = a[idx];\n@@ -421,1 +421,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], (byte)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])));\n+                Assert.assertEquals(r[i], f.apply(a[i], (byte) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])));\n@@ -424,1 +424,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], (byte)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])),\n+            Assert.assertEquals(r[i], f.apply(a[i], (byte) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])),\n@@ -470,1 +470,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], (byte)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n+                Assert.assertEquals(r[i], f.apply(a[i], (byte) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n@@ -473,1 +473,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], (byte)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]),\n+            Assert.assertEquals(r[i], f.apply(a[i], (byte) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]),\n@@ -486,1 +486,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]));\n@@ -490,1 +490,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]), \"at index #\" + i + \", \" + j);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]), \"at index #\" + i + \", \" + j);\n@@ -504,1 +504,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]));\n@@ -508,1 +508,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i+j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i + j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n@@ -657,1 +657,0 @@\n-\n@@ -681,1 +680,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -686,1 +685,1 @@\n-            byte[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            byte[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -689,1 +688,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -691,1 +690,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -708,1 +707,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -713,1 +712,1 @@\n-            byte[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            byte[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -716,1 +715,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -718,1 +717,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -729,1 +728,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -734,1 +733,1 @@\n-            byte[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            byte[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -737,1 +736,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -739,1 +738,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -741,1 +740,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(r, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(r, i, i + SPECIES.length()))\n@@ -756,1 +755,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -761,1 +760,1 @@\n-            byte[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            byte[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -776,1 +775,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -781,1 +780,1 @@\n-            byte[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            byte[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -797,1 +796,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -802,1 +801,1 @@\n-            byte[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            byte[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -818,1 +817,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -823,1 +822,1 @@\n-            byte[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            byte[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -840,1 +839,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -845,1 +844,1 @@\n-            byte[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            byte[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -859,1 +858,1 @@\n-                Assert.assertEquals(r[i], (int)(a[i+offs]));\n+                Assert.assertEquals(r[i], (int) (a[i + offs]));\n@@ -862,1 +861,1 @@\n-            Assert.assertEquals(r[i], (int)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (int) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -871,1 +870,1 @@\n-                Assert.assertEquals(r[i], (long)(a[i+offs]));\n+                Assert.assertEquals(r[i], (long) (a[i + offs]));\n@@ -874,1 +873,1 @@\n-            Assert.assertEquals(r[i], (long)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (long) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -882,1 +881,1 @@\n-                Assert.assertEquals(r[i], (long)(a[i+offs]));\n+                Assert.assertEquals(r[i], (long) (a[i + offs]));\n@@ -885,1 +884,1 @@\n-            Assert.assertEquals(r[i], (long)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (long) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -893,1 +892,1 @@\n-                Assert.assertEquals(r[i], (double)(a[i+offs]));\n+                Assert.assertEquals(r[i], (double) (a[i + offs]));\n@@ -896,1 +895,1 @@\n-            Assert.assertEquals(r[i], (double)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (double) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -900,1 +899,0 @@\n-\n@@ -908,1 +906,1 @@\n-                            i -> (byte)(-i * 5));\n+                            i -> (byte) (-i * 5));\n@@ -912,1 +910,1 @@\n-                            i -> (byte)(i * 5));\n+                            i -> (byte) (i * 5));\n@@ -916,1 +914,1 @@\n-                            i -> (((byte)(i + 1) == 0) ? 1 : (byte)(i + 1)));\n+                            i -> (((byte) (i + 1) == 0) ? 1 : (byte) (i + 1)));\n@@ -1047,1 +1045,1 @@\n-                    a[i] = (byte)RAND.nextInt(upper);\n+                    a[i] = (byte) RAND.nextInt(upper);\n@@ -1072,1 +1070,0 @@\n-\n@@ -1076,1 +1073,1 @@\n-                            i -> (byte)i);\n+                            i -> (byte) i);\n@@ -1080,1 +1077,1 @@\n-                            i -> (byte)(i - (s * BUFFER_REPS \/ 2)));\n+                            i -> (byte) (i - (s * BUFFER_REPS \/ 2)));\n@@ -1084,1 +1081,1 @@\n-                            i -> (byte)(i + 1));\n+                            i -> (byte) (i + 1));\n@@ -1088,1 +1085,1 @@\n-                            i -> (byte)(i - 2));\n+                            i -> (byte) (i - 2));\n@@ -1092,1 +1089,1 @@\n-                            i -> i%3 == 0 ? (byte)i : (i%3 == 1 ? (byte)(i + 1) : (byte)(i - 2)));\n+                            i -> i % 3 == 0 ? (byte) i : (i % 3 == 1 ? (byte) (i + 1) : (byte) (i - 2)));\n@@ -1166,1 +1163,1 @@\n-                return (byte)0;\n+                return (byte) 0;\n@@ -1206,1 +1203,1 @@\n-        return (byte)(((((byte)a) & 0xFF) << (b & 7)) | ((((byte)a) & 0xFF) >>> (8 - (b & 7))));\n+        return (byte) (((((byte) a) & 0xFF) << (b & 7)) | ((((byte) a) & 0xFF) >>> (8 - (b & 7))));\n@@ -1210,1 +1207,1 @@\n-        return (byte)(((((byte)a) & 0xFF) >>> (b & 7)) | ((((byte)a) & 0xFF) << (8 - (b & 7))));\n+        return (byte) (((((byte) a) & 0xFF) >>> (b & 7)) | ((((byte) a) & 0xFF) << (8 - (b & 7))));\n@@ -1223,2 +1220,2 @@\n-        b = (byte)(((b & 0x55) << 1) | ((b & 0xAA) >>> 1));\n-        b = (byte)(((b & 0x33) << 2) | ((b & 0xCC) >>> 2));\n+        b = (byte) (((b & 0x55) << 1) | ((b & 0xAA) >>> 1));\n+        b = (byte) (((b & 0x33) << 2) | ((b & 0xCC) >>> 2));\n@@ -1228,1 +1225,0 @@\n-\n@@ -1275,1 +1271,1 @@\n-        ByteVector three = ByteVector.broadcast(SPECIES, (byte)-3);\n+        ByteVector three = ByteVector.broadcast(SPECIES, (byte) -3);\n@@ -1289,1 +1285,1 @@\n-        m = higher.min((byte)-1).test(VectorOperators.IS_NEGATIVE);\n+        m = higher.min((byte) -1).test(VectorOperators.IS_NEGATIVE);\n@@ -1292,1 +1288,1 @@\n-        assert(max == -3 + scale * (SPECIES.length()-1));\n+        assert(max == -3 + scale * (SPECIES.length() - 1));\n@@ -1307,1 +1303,1 @@\n-        ByteVector io2 = (ByteVector) VectorShuffle.iota(SPECIES,0,1,false).toVector();\n+        ByteVector io2 = (ByteVector) VectorShuffle.iota(SPECIES, 0, 1, false).toVector();\n@@ -1309,1 +1305,1 @@\n-        ByteVector a = io.add((byte)1); \/\/[1,2]\n+        ByteVector a = io.add((byte) 1); \/\/[1,2]\n@@ -1314,2 +1310,2 @@\n-        ByteVector zab0 = a.rearrange(zip0,b); \/\/[1,-1]\n-        ByteVector zab1 = a.rearrange(zip1,b); \/\/[2,-2]\n+        ByteVector zab0 = a.rearrange(zip0, b); \/\/[1,-1]\n+        ByteVector zab1 = a.rearrange(zip1, b); \/\/[2,-2]\n@@ -1320,2 +1316,2 @@\n-            manual[i+0] = abValues[i\/2];\n-            manual[i+1] = abValues[a.length() + i\/2];\n+            manual[i + 0] = abValues[i \/ 2];\n+            manual[i + 1] = abValues[a.length() + i \/ 2];\n@@ -1326,2 +1322,2 @@\n-        ByteVector uab0 = zab0.rearrange(unz0,zab1);\n-        ByteVector uab1 = zab0.rearrange(unz1,zab1);\n+        ByteVector uab0 = zab0.rearrange(unz0, zab1);\n+        ByteVector uab1 = zab0.rearrange(unz1, zab1);\n@@ -1379,1 +1375,1 @@\n-        return (byte)(a + b);\n+        return (byte) (a + b);\n@@ -1399,1 +1395,1 @@\n-        return (byte)(a + b);\n+        return (byte) (a + b);\n@@ -1455,1 +1451,1 @@\n-        return (byte)(a - b);\n+        return (byte) (a - b);\n@@ -1475,1 +1471,1 @@\n-        return (byte)(a - b);\n+        return (byte) (a - b);\n@@ -1531,1 +1527,1 @@\n-        return (byte)(a * b);\n+        return (byte) (a * b);\n@@ -1551,1 +1547,1 @@\n-        return (byte)(a * b);\n+        return (byte) (a * b);\n@@ -1610,1 +1606,1 @@\n-        return (byte)(a \/ b);\n+        return (byte) (a \/ b);\n@@ -1632,1 +1628,1 @@\n-        return (byte)(a \/ b);\n+        return (byte) (a \/ b);\n@@ -1701,1 +1697,1 @@\n-        return (byte)((a)!=0?a:b);\n+        return (byte) ((a) != 0 ? a : b);\n@@ -1742,1 +1738,1 @@\n-        return (byte)(a & b);\n+        return (byte) (a & b);\n@@ -1762,1 +1758,1 @@\n-        return (byte)(a & b);\n+        return (byte) (a & b);\n@@ -1804,1 +1800,1 @@\n-        return (byte)(a & ~b);\n+        return (byte) (a & ~b);\n@@ -1848,1 +1844,1 @@\n-        return (byte)(a | b);\n+        return (byte) (a | b);\n@@ -1868,1 +1864,1 @@\n-        return (byte)(a | b);\n+        return (byte) (a | b);\n@@ -1910,1 +1906,1 @@\n-        return (byte)(a ^ b);\n+        return (byte) (a ^ b);\n@@ -2194,1 +2190,1 @@\n-            av.lanewise(VectorOperators.OR, (long)b[i]).intoArray(r, i);\n+            av.lanewise(VectorOperators.OR, (long) b[i]).intoArray(r, i);\n@@ -2213,1 +2209,1 @@\n-            av.lanewise(VectorOperators.OR, (long)b[i], vmask).intoArray(r, i);\n+            av.lanewise(VectorOperators.OR, (long) b[i], vmask).intoArray(r, i);\n@@ -2228,1 +2224,1 @@\n-            av.lanewise(VectorOperators.ADD, (long)b[i]).intoArray(r, i);\n+            av.lanewise(VectorOperators.ADD, (long) b[i]).intoArray(r, i);\n@@ -2245,1 +2241,1 @@\n-            av.lanewise(VectorOperators.ADD, (long)b[i], vmask).intoArray(r, i);\n+            av.lanewise(VectorOperators.ADD, (long) b[i], vmask).intoArray(r, i);\n@@ -2254,1 +2250,1 @@\n-        return (byte)((a << (b & 0x7)));\n+        return (byte) ((a << (b & 0x7)));\n@@ -2302,1 +2298,1 @@\n-        return (byte)((a >> (b & 0x7)));\n+        return (byte) ((a >> (b & 0x7)));\n@@ -2350,1 +2346,1 @@\n-        return (byte)(((a & 0xFF) >>> (b & 0x7)));\n+        return (byte) (((a & 0xFF) >>> (b & 0x7)));\n@@ -2398,1 +2394,1 @@\n-        return (byte)((a << (b & 7)));\n+        return (byte) ((a << (b & 7)));\n@@ -2410,1 +2406,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i]).intoArray(r, i);\n@@ -2431,1 +2427,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i], vmask).intoArray(r, i);\n@@ -2444,1 +2440,1 @@\n-        return (byte)(((a & 0xFF) >>> (b & 7)));\n+        return (byte) (((a & 0xFF) >>> (b & 7)));\n@@ -2456,1 +2452,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i]).intoArray(r, i);\n@@ -2477,1 +2473,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i], vmask).intoArray(r, i);\n@@ -2490,1 +2486,1 @@\n-        return (byte)((a >> (b & 7)));\n+        return (byte) ((a >> (b & 7)));\n@@ -2502,1 +2498,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i]).intoArray(r, i);\n@@ -2523,1 +2519,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i], vmask).intoArray(r, i);\n@@ -2534,1 +2530,1 @@\n-        return (byte)(ROR_scalar(a,b));\n+        return (byte) (ROR_scalar(a, b));\n@@ -2578,1 +2574,1 @@\n-        return (byte)(ROL_scalar(a,b));\n+        return (byte) (ROL_scalar(a, b));\n@@ -2622,1 +2618,1 @@\n-        return (byte)(ROR_scalar(a,b));\n+        return (byte) (ROR_scalar(a, b));\n@@ -2634,1 +2630,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i]).intoArray(r, i);\n@@ -2655,1 +2651,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i], vmask).intoArray(r, i);\n@@ -2664,1 +2660,1 @@\n-        return (byte)(ROL_scalar(a,b));\n+        return (byte) (ROL_scalar(a, b));\n@@ -2676,1 +2672,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i]).intoArray(r, i);\n@@ -2697,1 +2693,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i], vmask).intoArray(r, i);\n@@ -2705,1 +2701,1 @@\n-        return (byte)(Math.min(a, b));\n+        return (byte) (Math.min(a, b));\n@@ -2725,1 +2721,1 @@\n-        return (byte)(Math.min(a, b));\n+        return (byte) (Math.min(a, b));\n@@ -2743,1 +2739,1 @@\n-        return (byte)(Math.max(a, b));\n+        return (byte) (Math.max(a, b));\n@@ -2763,1 +2759,1 @@\n-        return (byte)(Math.max(a, b));\n+        return (byte) (Math.max(a, b));\n@@ -3601,1 +3597,1 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (byte)(65535+i)).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length() - 1)), (byte) (65535 + i)).intoArray(r, i);\n@@ -3607,1 +3603,1 @@\n-            assertInsertArraysEquals(r, a, (byte)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+            assertInsertArraysEquals(r, a, (byte) (65535 + i), (j++ & (SPECIES.length() - 1)), i , i + SPECIES.length());\n@@ -3611,1 +3607,1 @@\n-        return bits(a)==0;\n+        return bits(a) == 0;\n@@ -3644,1 +3640,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_DEFAULT(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_DEFAULT(a[i + j]));\n@@ -3649,1 +3645,1 @@\n-        return bits(a)<0;\n+        return bits(a) < 0;\n@@ -3682,1 +3678,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_NEGATIVE(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_NEGATIVE(a[i + j]));\n@@ -4192,1 +4188,0 @@\n-\n@@ -4220,1 +4215,1 @@\n-            VectorMask<Byte> mv = av.compare(VectorOperators.LT, (long)b[i]);\n+            VectorMask<Byte> mv = av.compare(VectorOperators.LT, (long) b[i]);\n@@ -4224,1 +4219,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), a[i + j] < (byte)((long)b[i]));\n+                Assert.assertEquals(mv.laneIsSet(j), a[i + j] < (byte) ((long) b[i]));\n@@ -4229,1 +4224,0 @@\n-\n@@ -4241,1 +4235,1 @@\n-            VectorMask<Byte> mv = av.compare(VectorOperators.LT, (long)b[i], vmask);\n+            VectorMask<Byte> mv = av.compare(VectorOperators.LT, (long) b[i], vmask);\n@@ -4245,1 +4239,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] < (byte)((long)b[i])));\n+                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] < (byte) ((long) b[i])));\n@@ -4266,1 +4260,0 @@\n-\n@@ -4294,1 +4287,1 @@\n-            VectorMask<Byte> mv = av.compare(VectorOperators.EQ, (long)b[i]);\n+            VectorMask<Byte> mv = av.compare(VectorOperators.EQ, (long) b[i]);\n@@ -4298,1 +4291,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), a[i + j] == (byte)((long)b[i]));\n+                Assert.assertEquals(mv.laneIsSet(j), a[i + j] == (byte) ((long) b[i]));\n@@ -4303,1 +4296,0 @@\n-\n@@ -4315,1 +4307,1 @@\n-            VectorMask<Byte> mv = av.compare(VectorOperators.EQ, (long)b[i], vmask);\n+            VectorMask<Byte> mv = av.compare(VectorOperators.EQ, (long) b[i], vmask);\n@@ -4319,1 +4311,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] == (byte)((long)b[i])));\n+                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] == (byte) ((long) b[i])));\n@@ -4430,1 +4422,1 @@\n-                    r[i]=av.lane(0);\n+                    r[i] = av.lane(0);\n@@ -4432,2 +4424,2 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n@@ -4435,4 +4427,4 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n@@ -4440,8 +4432,8 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n@@ -4449,16 +4441,16 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n@@ -4466,32 +4458,32 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n@@ -4499,64 +4491,64 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n-                    r[i+32]=av.lane(32);\n-                    r[i+33]=av.lane(33);\n-                    r[i+34]=av.lane(34);\n-                    r[i+35]=av.lane(35);\n-                    r[i+36]=av.lane(36);\n-                    r[i+37]=av.lane(37);\n-                    r[i+38]=av.lane(38);\n-                    r[i+39]=av.lane(39);\n-                    r[i+40]=av.lane(40);\n-                    r[i+41]=av.lane(41);\n-                    r[i+42]=av.lane(42);\n-                    r[i+43]=av.lane(43);\n-                    r[i+44]=av.lane(44);\n-                    r[i+45]=av.lane(45);\n-                    r[i+46]=av.lane(46);\n-                    r[i+47]=av.lane(47);\n-                    r[i+48]=av.lane(48);\n-                    r[i+49]=av.lane(49);\n-                    r[i+50]=av.lane(50);\n-                    r[i+51]=av.lane(51);\n-                    r[i+52]=av.lane(52);\n-                    r[i+53]=av.lane(53);\n-                    r[i+54]=av.lane(54);\n-                    r[i+55]=av.lane(55);\n-                    r[i+56]=av.lane(56);\n-                    r[i+57]=av.lane(57);\n-                    r[i+58]=av.lane(58);\n-                    r[i+59]=av.lane(59);\n-                    r[i+60]=av.lane(60);\n-                    r[i+61]=av.lane(61);\n-                    r[i+62]=av.lane(62);\n-                    r[i+63]=av.lane(63);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n+                    r[i + 32] = av.lane(32);\n+                    r[i + 33] = av.lane(33);\n+                    r[i + 34] = av.lane(34);\n+                    r[i + 35] = av.lane(35);\n+                    r[i + 36] = av.lane(36);\n+                    r[i + 37] = av.lane(37);\n+                    r[i + 38] = av.lane(38);\n+                    r[i + 39] = av.lane(39);\n+                    r[i + 40] = av.lane(40);\n+                    r[i + 41] = av.lane(41);\n+                    r[i + 42] = av.lane(42);\n+                    r[i + 43] = av.lane(43);\n+                    r[i + 44] = av.lane(44);\n+                    r[i + 45] = av.lane(45);\n+                    r[i + 46] = av.lane(46);\n+                    r[i + 47] = av.lane(47);\n+                    r[i + 48] = av.lane(48);\n+                    r[i + 49] = av.lane(49);\n+                    r[i + 50] = av.lane(50);\n+                    r[i + 51] = av.lane(51);\n+                    r[i + 52] = av.lane(52);\n+                    r[i + 53] = av.lane(53);\n+                    r[i + 54] = av.lane(54);\n+                    r[i + 55] = av.lane(55);\n+                    r[i + 56] = av.lane(56);\n+                    r[i + 57] = av.lane(57);\n+                    r[i + 58] = av.lane(58);\n+                    r[i + 59] = av.lane(59);\n+                    r[i + 60] = av.lane(60);\n+                    r[i + 61] = av.lane(61);\n+                    r[i + 62] = av.lane(62);\n+                    r[i + 63] = av.lane(63);\n@@ -4565,1 +4557,1 @@\n-                        r[i+j]=av.lane(j);\n+                        r[i + j] = av.lane(j);\n@@ -4606,3 +4598,0 @@\n-\n-\n-\n@@ -4612,2 +4601,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = a[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = a[idx + i + origin];\n@@ -4615,1 +4604,1 @@\n-                res[i] = (byte)0;\n+                res[i] = (byte) 0;\n@@ -4638,1 +4627,1 @@\n-                res[i] = a[idx+i+origin];\n+                res[i] = a[idx + i + origin];\n@@ -4640,1 +4629,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n@@ -4666,2 +4655,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = mask[i] ? a[idx+i+origin] : (byte)0;\n+            if(i + origin < SPECIES.length())\n+                res[i] = mask[i] ? a[idx + i + origin] : (byte) 0;\n@@ -4669,1 +4658,1 @@\n-                res[i] = mask[i] ? b[idx+j] : (byte)0;\n+                res[i] = mask[i] ? b[idx + j] : (byte) 0;\n@@ -4700,1 +4689,1 @@\n-                res[i] = (byte)0;\n+                res[i] = (byte) 0;\n@@ -4702,1 +4691,1 @@\n-                res[i] = a[idx+j];\n+                res[i] = a[idx + j];\n@@ -4728,1 +4717,1 @@\n-                    res[i] = b[idx+i];\n+                    res[i] = b[idx + i];\n@@ -4730,1 +4719,1 @@\n-                    res[i] = a[idx+j];\n+                    res[i] = a[idx + j];\n@@ -4735,1 +4724,1 @@\n-                    res[i] = a[idx+SPECIES.length()-origin+i];\n+                    res[i] = a[idx + SPECIES.length() - origin + i];\n@@ -4737,1 +4726,1 @@\n-                    res[i] = b[idx+origin+j];\n+                    res[i] = b[idx + origin + j];\n@@ -4765,2 +4754,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = b[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = b[idx + i + origin];\n@@ -4768,1 +4757,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n@@ -4773,1 +4762,1 @@\n-            res[i] = mask[i] ? a[idx+i] : res[i];\n+            res[i] = mask[i] ? a[idx + i] : res[i];\n@@ -4779,1 +4768,1 @@\n-                    res1[i] = b[idx+i];\n+                    res1[i] = b[idx + i];\n@@ -4781,2 +4770,2 @@\n-                   res1[i] = res[j];\n-                   j++;\n+                    res1[i] = res[j];\n+                    j++;\n@@ -4788,1 +4777,1 @@\n-                    res1[i] = res[SPECIES.length()-origin+i];\n+                    res1[i] = res[SPECIES.length() - origin + i];\n@@ -4790,1 +4779,1 @@\n-                    res1[i] = b[idx+origin+j];\n+                    res1[i] = b[idx + origin + j];\n@@ -4842,1 +4831,1 @@\n-        return (byte)((a&~(c))|(b&c));\n+        return (byte) ((a &~ (c)) | (b & c));\n@@ -4845,1 +4834,1 @@\n-        return (byte)((a&~(c))|(b&c));\n+        return (byte) ((a &~ (c)) | (b & c));\n@@ -5061,1 +5050,1 @@\n-        return (byte)(-((byte)a));\n+        return (byte) (-((byte) a));\n@@ -5065,1 +5054,1 @@\n-        return (byte)(-((byte)a));\n+        return (byte) (-((byte) a));\n@@ -5117,1 +5106,1 @@\n-        return (byte)(Math.abs((byte)a));\n+        return (byte) (Math.abs((byte) a));\n@@ -5121,1 +5110,1 @@\n-        return (byte)(Math.abs((byte)a));\n+        return (byte) (Math.abs((byte) a));\n@@ -5174,1 +5163,1 @@\n-        return (byte)(~((byte)a));\n+        return (byte) (~((byte) a));\n@@ -5178,1 +5167,1 @@\n-        return (byte)(~((byte)a));\n+        return (byte) (~((byte) a));\n@@ -5236,1 +5225,1 @@\n-        return (byte)((a==0?0:-1));\n+        return (byte) ((a == 0 ? 0 : -1));\n@@ -5285,1 +5274,1 @@\n-        return (byte)(Integer.bitCount((int)a & 0xFF));\n+        return (byte) (Integer.bitCount((int) a & 0xFF));\n@@ -5331,1 +5320,1 @@\n-        return (byte)(TRAILING_ZEROS_COUNT_scalar(a));\n+        return (byte) (TRAILING_ZEROS_COUNT_scalar(a));\n@@ -5374,1 +5363,1 @@\n-        return (byte)(LEADING_ZEROS_COUNT_scalar(a));\n+        return (byte) (LEADING_ZEROS_COUNT_scalar(a));\n@@ -5417,1 +5406,1 @@\n-        return (byte)(REVERSE_scalar(a));\n+        return (byte) (REVERSE_scalar(a));\n@@ -5568,1 +5557,1 @@\n-        return (long)res;\n+        return (long) res;\n@@ -5607,1 +5596,1 @@\n-        return (long)res;\n+        return (long) res;\n@@ -5664,1 +5653,1 @@\n-                av.blend((long)b[i], vmask).intoArray(r, i);\n+                av.blend((long) b[i], vmask).intoArray(r, i);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte256VectorTests.java","additions":307,"deletions":318,"binary":false,"changes":625,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -73,1 +73,1 @@\n-                            i -> (byte)(i * 5));\n+                            i -> (byte) (i * 5));\n@@ -77,1 +77,1 @@\n-                            i -> (((byte)(i + 1) == 0) ? 1 : (byte)(i + 1)));\n+                            i -> (((byte) (i + 1) == 0) ? 1 : (byte) (i + 1)));\n@@ -184,1 +184,1 @@\n-                            return new Object[]{fa, fb, bo};\n+                            return new Object[] {fa, fb, bo};\n@@ -195,1 +195,1 @@\n-                            return new Object[]{fa, fb, fm, bo};\n+                            return new Object[] {fa, fb, fm, bo};\n@@ -204,1 +204,1 @@\n-                    return new Object[]{fa, bo};\n+                    return new Object[] {fa, bo};\n@@ -214,1 +214,1 @@\n-                        return new Object[]{fa, fm, bo};\n+                        return new Object[] {fa, fm, bo};\n@@ -932,1 +932,0 @@\n-\n@@ -1021,1 +1020,0 @@\n-\n@@ -1296,1 +1294,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte512VectorLoadStoreTests.java","additions":7,"deletions":10,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -93,1 +93,1 @@\n-            byte[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            byte[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -253,1 +253,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i+order[i + j]]);\n@@ -258,1 +258,1 @@\n-            Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i+order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]]);\n@@ -274,1 +274,1 @@\n-                    Assert.assertEquals(r[i + k], (byte)0);\n+                    Assert.assertEquals(r[i + k], (byte) 0);\n@@ -282,1 +282,1 @@\n-                Assert.assertEquals(r[idx], (byte)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], (byte) 0, \"at index #\" + idx);\n@@ -297,1 +297,1 @@\n-                        Assert.assertEquals(r[i + j], (byte)0);\n+                        Assert.assertEquals(r[i + j], (byte) 0);\n@@ -306,1 +306,1 @@\n-                Assert.assertEquals(r[idx], (byte)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], (byte) 0, \"at index #\" + idx);\n@@ -316,1 +316,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -321,1 +321,1 @@\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]]);\n@@ -331,1 +331,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + order[i + j]]);\n@@ -333,1 +333,1 @@\n-                         Assert.assertEquals(r[i+j], (byte)0);\n+                         Assert.assertEquals(r[i + j], (byte) 0);\n@@ -339,1 +339,1 @@\n-                Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -341,1 +341,1 @@\n-                Assert.assertEquals(r[i+j], (byte)0, \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], (byte) 0, \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -351,1 +351,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -353,1 +353,1 @@\n-                         Assert.assertEquals(r[i+j], (byte)0);\n+                         Assert.assertEquals(r[i + j], (byte) 0);\n@@ -359,1 +359,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -361,1 +361,1 @@\n-                Assert.assertEquals(r[i+j], (byte)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], (byte) 0, \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -370,1 +370,1 @@\n-                a[j]=a[idx];\n+                a[j] = a[idx];\n@@ -421,1 +421,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], (byte)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])));\n+                Assert.assertEquals(r[i], f.apply(a[i], (byte) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])));\n@@ -424,1 +424,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], (byte)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])),\n+            Assert.assertEquals(r[i], f.apply(a[i], (byte) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])),\n@@ -470,1 +470,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], (byte)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n+                Assert.assertEquals(r[i], f.apply(a[i], (byte) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n@@ -473,1 +473,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], (byte)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]),\n+            Assert.assertEquals(r[i], f.apply(a[i], (byte) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]),\n@@ -486,1 +486,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]));\n@@ -490,1 +490,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]), \"at index #\" + i + \", \" + j);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]), \"at index #\" + i + \", \" + j);\n@@ -504,1 +504,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]));\n@@ -508,1 +508,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i+j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i + j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n@@ -657,1 +657,0 @@\n-\n@@ -681,1 +680,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -686,1 +685,1 @@\n-            byte[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            byte[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -689,1 +688,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -691,1 +690,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -708,1 +707,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -713,1 +712,1 @@\n-            byte[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            byte[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -716,1 +715,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -718,1 +717,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -729,1 +728,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -734,1 +733,1 @@\n-            byte[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            byte[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -737,1 +736,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -739,1 +738,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -741,1 +740,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(r, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(r, i, i + SPECIES.length()))\n@@ -756,1 +755,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -761,1 +760,1 @@\n-            byte[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            byte[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -776,1 +775,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -781,1 +780,1 @@\n-            byte[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            byte[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -797,1 +796,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -802,1 +801,1 @@\n-            byte[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            byte[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -818,1 +817,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -823,1 +822,1 @@\n-            byte[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            byte[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -840,1 +839,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -845,1 +844,1 @@\n-            byte[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            byte[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -859,1 +858,1 @@\n-                Assert.assertEquals(r[i], (int)(a[i+offs]));\n+                Assert.assertEquals(r[i], (int) (a[i + offs]));\n@@ -862,1 +861,1 @@\n-            Assert.assertEquals(r[i], (int)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (int) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -871,1 +870,1 @@\n-                Assert.assertEquals(r[i], (long)(a[i+offs]));\n+                Assert.assertEquals(r[i], (long) (a[i + offs]));\n@@ -874,1 +873,1 @@\n-            Assert.assertEquals(r[i], (long)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (long) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -882,1 +881,1 @@\n-                Assert.assertEquals(r[i], (long)(a[i+offs]));\n+                Assert.assertEquals(r[i], (long) (a[i + offs]));\n@@ -885,1 +884,1 @@\n-            Assert.assertEquals(r[i], (long)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (long) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -893,1 +892,1 @@\n-                Assert.assertEquals(r[i], (double)(a[i+offs]));\n+                Assert.assertEquals(r[i], (double) (a[i + offs]));\n@@ -896,1 +895,1 @@\n-            Assert.assertEquals(r[i], (double)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (double) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -900,1 +899,0 @@\n-\n@@ -908,1 +906,1 @@\n-                            i -> (byte)(-i * 5));\n+                            i -> (byte) (-i * 5));\n@@ -912,1 +910,1 @@\n-                            i -> (byte)(i * 5));\n+                            i -> (byte) (i * 5));\n@@ -916,1 +914,1 @@\n-                            i -> (((byte)(i + 1) == 0) ? 1 : (byte)(i + 1)));\n+                            i -> (((byte) (i + 1) == 0) ? 1 : (byte) (i + 1)));\n@@ -1047,1 +1045,1 @@\n-                    a[i] = (byte)RAND.nextInt(upper);\n+                    a[i] = (byte) RAND.nextInt(upper);\n@@ -1072,1 +1070,0 @@\n-\n@@ -1076,1 +1073,1 @@\n-                            i -> (byte)i);\n+                            i -> (byte) i);\n@@ -1080,1 +1077,1 @@\n-                            i -> (byte)(i - (s * BUFFER_REPS \/ 2)));\n+                            i -> (byte) (i - (s * BUFFER_REPS \/ 2)));\n@@ -1084,1 +1081,1 @@\n-                            i -> (byte)(i + 1));\n+                            i -> (byte) (i + 1));\n@@ -1088,1 +1085,1 @@\n-                            i -> (byte)(i - 2));\n+                            i -> (byte) (i - 2));\n@@ -1092,1 +1089,1 @@\n-                            i -> i%3 == 0 ? (byte)i : (i%3 == 1 ? (byte)(i + 1) : (byte)(i - 2)));\n+                            i -> i % 3 == 0 ? (byte) i : (i % 3 == 1 ? (byte) (i + 1) : (byte) (i - 2)));\n@@ -1166,1 +1163,1 @@\n-                return (byte)0;\n+                return (byte) 0;\n@@ -1206,1 +1203,1 @@\n-        return (byte)(((((byte)a) & 0xFF) << (b & 7)) | ((((byte)a) & 0xFF) >>> (8 - (b & 7))));\n+        return (byte) (((((byte) a) & 0xFF) << (b & 7)) | ((((byte) a) & 0xFF) >>> (8 - (b & 7))));\n@@ -1210,1 +1207,1 @@\n-        return (byte)(((((byte)a) & 0xFF) >>> (b & 7)) | ((((byte)a) & 0xFF) << (8 - (b & 7))));\n+        return (byte) (((((byte) a) & 0xFF) >>> (b & 7)) | ((((byte) a) & 0xFF) << (8 - (b & 7))));\n@@ -1223,2 +1220,2 @@\n-        b = (byte)(((b & 0x55) << 1) | ((b & 0xAA) >>> 1));\n-        b = (byte)(((b & 0x33) << 2) | ((b & 0xCC) >>> 2));\n+        b = (byte) (((b & 0x55) << 1) | ((b & 0xAA) >>> 1));\n+        b = (byte) (((b & 0x33) << 2) | ((b & 0xCC) >>> 2));\n@@ -1228,1 +1225,0 @@\n-\n@@ -1275,1 +1271,1 @@\n-        ByteVector three = ByteVector.broadcast(SPECIES, (byte)-3);\n+        ByteVector three = ByteVector.broadcast(SPECIES, (byte) -3);\n@@ -1289,1 +1285,1 @@\n-        m = higher.min((byte)-1).test(VectorOperators.IS_NEGATIVE);\n+        m = higher.min((byte) -1).test(VectorOperators.IS_NEGATIVE);\n@@ -1292,1 +1288,1 @@\n-        assert(max == -3 + scale * (SPECIES.length()-1));\n+        assert(max == -3 + scale * (SPECIES.length() - 1));\n@@ -1307,1 +1303,1 @@\n-        ByteVector io2 = (ByteVector) VectorShuffle.iota(SPECIES,0,1,false).toVector();\n+        ByteVector io2 = (ByteVector) VectorShuffle.iota(SPECIES, 0, 1, false).toVector();\n@@ -1309,1 +1305,1 @@\n-        ByteVector a = io.add((byte)1); \/\/[1,2]\n+        ByteVector a = io.add((byte) 1); \/\/[1,2]\n@@ -1314,2 +1310,2 @@\n-        ByteVector zab0 = a.rearrange(zip0,b); \/\/[1,-1]\n-        ByteVector zab1 = a.rearrange(zip1,b); \/\/[2,-2]\n+        ByteVector zab0 = a.rearrange(zip0, b); \/\/[1,-1]\n+        ByteVector zab1 = a.rearrange(zip1, b); \/\/[2,-2]\n@@ -1320,2 +1316,2 @@\n-            manual[i+0] = abValues[i\/2];\n-            manual[i+1] = abValues[a.length() + i\/2];\n+            manual[i + 0] = abValues[i \/ 2];\n+            manual[i + 1] = abValues[a.length() + i \/ 2];\n@@ -1326,2 +1322,2 @@\n-        ByteVector uab0 = zab0.rearrange(unz0,zab1);\n-        ByteVector uab1 = zab0.rearrange(unz1,zab1);\n+        ByteVector uab0 = zab0.rearrange(unz0, zab1);\n+        ByteVector uab1 = zab0.rearrange(unz1, zab1);\n@@ -1379,1 +1375,1 @@\n-        return (byte)(a + b);\n+        return (byte) (a + b);\n@@ -1399,1 +1395,1 @@\n-        return (byte)(a + b);\n+        return (byte) (a + b);\n@@ -1455,1 +1451,1 @@\n-        return (byte)(a - b);\n+        return (byte) (a - b);\n@@ -1475,1 +1471,1 @@\n-        return (byte)(a - b);\n+        return (byte) (a - b);\n@@ -1531,1 +1527,1 @@\n-        return (byte)(a * b);\n+        return (byte) (a * b);\n@@ -1551,1 +1547,1 @@\n-        return (byte)(a * b);\n+        return (byte) (a * b);\n@@ -1610,1 +1606,1 @@\n-        return (byte)(a \/ b);\n+        return (byte) (a \/ b);\n@@ -1632,1 +1628,1 @@\n-        return (byte)(a \/ b);\n+        return (byte) (a \/ b);\n@@ -1701,1 +1697,1 @@\n-        return (byte)((a)!=0?a:b);\n+        return (byte) ((a) != 0 ? a : b);\n@@ -1742,1 +1738,1 @@\n-        return (byte)(a & b);\n+        return (byte) (a & b);\n@@ -1762,1 +1758,1 @@\n-        return (byte)(a & b);\n+        return (byte) (a & b);\n@@ -1804,1 +1800,1 @@\n-        return (byte)(a & ~b);\n+        return (byte) (a & ~b);\n@@ -1848,1 +1844,1 @@\n-        return (byte)(a | b);\n+        return (byte) (a | b);\n@@ -1868,1 +1864,1 @@\n-        return (byte)(a | b);\n+        return (byte) (a | b);\n@@ -1910,1 +1906,1 @@\n-        return (byte)(a ^ b);\n+        return (byte) (a ^ b);\n@@ -2194,1 +2190,1 @@\n-            av.lanewise(VectorOperators.OR, (long)b[i]).intoArray(r, i);\n+            av.lanewise(VectorOperators.OR, (long) b[i]).intoArray(r, i);\n@@ -2213,1 +2209,1 @@\n-            av.lanewise(VectorOperators.OR, (long)b[i], vmask).intoArray(r, i);\n+            av.lanewise(VectorOperators.OR, (long) b[i], vmask).intoArray(r, i);\n@@ -2228,1 +2224,1 @@\n-            av.lanewise(VectorOperators.ADD, (long)b[i]).intoArray(r, i);\n+            av.lanewise(VectorOperators.ADD, (long) b[i]).intoArray(r, i);\n@@ -2245,1 +2241,1 @@\n-            av.lanewise(VectorOperators.ADD, (long)b[i], vmask).intoArray(r, i);\n+            av.lanewise(VectorOperators.ADD, (long) b[i], vmask).intoArray(r, i);\n@@ -2254,1 +2250,1 @@\n-        return (byte)((a << (b & 0x7)));\n+        return (byte) ((a << (b & 0x7)));\n@@ -2302,1 +2298,1 @@\n-        return (byte)((a >> (b & 0x7)));\n+        return (byte) ((a >> (b & 0x7)));\n@@ -2350,1 +2346,1 @@\n-        return (byte)(((a & 0xFF) >>> (b & 0x7)));\n+        return (byte) (((a & 0xFF) >>> (b & 0x7)));\n@@ -2398,1 +2394,1 @@\n-        return (byte)((a << (b & 7)));\n+        return (byte) ((a << (b & 7)));\n@@ -2410,1 +2406,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i]).intoArray(r, i);\n@@ -2431,1 +2427,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i], vmask).intoArray(r, i);\n@@ -2444,1 +2440,1 @@\n-        return (byte)(((a & 0xFF) >>> (b & 7)));\n+        return (byte) (((a & 0xFF) >>> (b & 7)));\n@@ -2456,1 +2452,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i]).intoArray(r, i);\n@@ -2477,1 +2473,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i], vmask).intoArray(r, i);\n@@ -2490,1 +2486,1 @@\n-        return (byte)((a >> (b & 7)));\n+        return (byte) ((a >> (b & 7)));\n@@ -2502,1 +2498,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i]).intoArray(r, i);\n@@ -2523,1 +2519,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i], vmask).intoArray(r, i);\n@@ -2534,1 +2530,1 @@\n-        return (byte)(ROR_scalar(a,b));\n+        return (byte) (ROR_scalar(a, b));\n@@ -2578,1 +2574,1 @@\n-        return (byte)(ROL_scalar(a,b));\n+        return (byte) (ROL_scalar(a, b));\n@@ -2622,1 +2618,1 @@\n-        return (byte)(ROR_scalar(a,b));\n+        return (byte) (ROR_scalar(a, b));\n@@ -2634,1 +2630,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i]).intoArray(r, i);\n@@ -2655,1 +2651,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i], vmask).intoArray(r, i);\n@@ -2664,1 +2660,1 @@\n-        return (byte)(ROL_scalar(a,b));\n+        return (byte) (ROL_scalar(a, b));\n@@ -2676,1 +2672,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i]).intoArray(r, i);\n@@ -2697,1 +2693,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i], vmask).intoArray(r, i);\n@@ -2705,1 +2701,1 @@\n-        return (byte)(Math.min(a, b));\n+        return (byte) (Math.min(a, b));\n@@ -2725,1 +2721,1 @@\n-        return (byte)(Math.min(a, b));\n+        return (byte) (Math.min(a, b));\n@@ -2743,1 +2739,1 @@\n-        return (byte)(Math.max(a, b));\n+        return (byte) (Math.max(a, b));\n@@ -2763,1 +2759,1 @@\n-        return (byte)(Math.max(a, b));\n+        return (byte) (Math.max(a, b));\n@@ -3601,1 +3597,1 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (byte)(65535+i)).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length() - 1)), (byte) (65535 + i)).intoArray(r, i);\n@@ -3607,1 +3603,1 @@\n-            assertInsertArraysEquals(r, a, (byte)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+            assertInsertArraysEquals(r, a, (byte) (65535 + i), (j++ & (SPECIES.length() - 1)), i , i + SPECIES.length());\n@@ -3611,1 +3607,1 @@\n-        return bits(a)==0;\n+        return bits(a) == 0;\n@@ -3644,1 +3640,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_DEFAULT(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_DEFAULT(a[i + j]));\n@@ -3649,1 +3645,1 @@\n-        return bits(a)<0;\n+        return bits(a) < 0;\n@@ -3682,1 +3678,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_NEGATIVE(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_NEGATIVE(a[i + j]));\n@@ -4192,1 +4188,0 @@\n-\n@@ -4220,1 +4215,1 @@\n-            VectorMask<Byte> mv = av.compare(VectorOperators.LT, (long)b[i]);\n+            VectorMask<Byte> mv = av.compare(VectorOperators.LT, (long) b[i]);\n@@ -4224,1 +4219,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), a[i + j] < (byte)((long)b[i]));\n+                Assert.assertEquals(mv.laneIsSet(j), a[i + j] < (byte) ((long) b[i]));\n@@ -4229,1 +4224,0 @@\n-\n@@ -4241,1 +4235,1 @@\n-            VectorMask<Byte> mv = av.compare(VectorOperators.LT, (long)b[i], vmask);\n+            VectorMask<Byte> mv = av.compare(VectorOperators.LT, (long) b[i], vmask);\n@@ -4245,1 +4239,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] < (byte)((long)b[i])));\n+                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] < (byte) ((long) b[i])));\n@@ -4266,1 +4260,0 @@\n-\n@@ -4294,1 +4287,1 @@\n-            VectorMask<Byte> mv = av.compare(VectorOperators.EQ, (long)b[i]);\n+            VectorMask<Byte> mv = av.compare(VectorOperators.EQ, (long) b[i]);\n@@ -4298,1 +4291,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), a[i + j] == (byte)((long)b[i]));\n+                Assert.assertEquals(mv.laneIsSet(j), a[i + j] == (byte) ((long) b[i]));\n@@ -4303,1 +4296,0 @@\n-\n@@ -4315,1 +4307,1 @@\n-            VectorMask<Byte> mv = av.compare(VectorOperators.EQ, (long)b[i], vmask);\n+            VectorMask<Byte> mv = av.compare(VectorOperators.EQ, (long) b[i], vmask);\n@@ -4319,1 +4311,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] == (byte)((long)b[i])));\n+                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] == (byte) ((long) b[i])));\n@@ -4430,1 +4422,1 @@\n-                    r[i]=av.lane(0);\n+                    r[i] = av.lane(0);\n@@ -4432,2 +4424,2 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n@@ -4435,4 +4427,4 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n@@ -4440,8 +4432,8 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n@@ -4449,16 +4441,16 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n@@ -4466,32 +4458,32 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n@@ -4499,64 +4491,64 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n-                    r[i+32]=av.lane(32);\n-                    r[i+33]=av.lane(33);\n-                    r[i+34]=av.lane(34);\n-                    r[i+35]=av.lane(35);\n-                    r[i+36]=av.lane(36);\n-                    r[i+37]=av.lane(37);\n-                    r[i+38]=av.lane(38);\n-                    r[i+39]=av.lane(39);\n-                    r[i+40]=av.lane(40);\n-                    r[i+41]=av.lane(41);\n-                    r[i+42]=av.lane(42);\n-                    r[i+43]=av.lane(43);\n-                    r[i+44]=av.lane(44);\n-                    r[i+45]=av.lane(45);\n-                    r[i+46]=av.lane(46);\n-                    r[i+47]=av.lane(47);\n-                    r[i+48]=av.lane(48);\n-                    r[i+49]=av.lane(49);\n-                    r[i+50]=av.lane(50);\n-                    r[i+51]=av.lane(51);\n-                    r[i+52]=av.lane(52);\n-                    r[i+53]=av.lane(53);\n-                    r[i+54]=av.lane(54);\n-                    r[i+55]=av.lane(55);\n-                    r[i+56]=av.lane(56);\n-                    r[i+57]=av.lane(57);\n-                    r[i+58]=av.lane(58);\n-                    r[i+59]=av.lane(59);\n-                    r[i+60]=av.lane(60);\n-                    r[i+61]=av.lane(61);\n-                    r[i+62]=av.lane(62);\n-                    r[i+63]=av.lane(63);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n+                    r[i + 32] = av.lane(32);\n+                    r[i + 33] = av.lane(33);\n+                    r[i + 34] = av.lane(34);\n+                    r[i + 35] = av.lane(35);\n+                    r[i + 36] = av.lane(36);\n+                    r[i + 37] = av.lane(37);\n+                    r[i + 38] = av.lane(38);\n+                    r[i + 39] = av.lane(39);\n+                    r[i + 40] = av.lane(40);\n+                    r[i + 41] = av.lane(41);\n+                    r[i + 42] = av.lane(42);\n+                    r[i + 43] = av.lane(43);\n+                    r[i + 44] = av.lane(44);\n+                    r[i + 45] = av.lane(45);\n+                    r[i + 46] = av.lane(46);\n+                    r[i + 47] = av.lane(47);\n+                    r[i + 48] = av.lane(48);\n+                    r[i + 49] = av.lane(49);\n+                    r[i + 50] = av.lane(50);\n+                    r[i + 51] = av.lane(51);\n+                    r[i + 52] = av.lane(52);\n+                    r[i + 53] = av.lane(53);\n+                    r[i + 54] = av.lane(54);\n+                    r[i + 55] = av.lane(55);\n+                    r[i + 56] = av.lane(56);\n+                    r[i + 57] = av.lane(57);\n+                    r[i + 58] = av.lane(58);\n+                    r[i + 59] = av.lane(59);\n+                    r[i + 60] = av.lane(60);\n+                    r[i + 61] = av.lane(61);\n+                    r[i + 62] = av.lane(62);\n+                    r[i + 63] = av.lane(63);\n@@ -4565,1 +4557,1 @@\n-                        r[i+j]=av.lane(j);\n+                        r[i + j] = av.lane(j);\n@@ -4606,3 +4598,0 @@\n-\n-\n-\n@@ -4612,2 +4601,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = a[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = a[idx + i + origin];\n@@ -4615,1 +4604,1 @@\n-                res[i] = (byte)0;\n+                res[i] = (byte) 0;\n@@ -4638,1 +4627,1 @@\n-                res[i] = a[idx+i+origin];\n+                res[i] = a[idx + i + origin];\n@@ -4640,1 +4629,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n@@ -4666,2 +4655,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = mask[i] ? a[idx+i+origin] : (byte)0;\n+            if(i + origin < SPECIES.length())\n+                res[i] = mask[i] ? a[idx + i + origin] : (byte) 0;\n@@ -4669,1 +4658,1 @@\n-                res[i] = mask[i] ? b[idx+j] : (byte)0;\n+                res[i] = mask[i] ? b[idx + j] : (byte) 0;\n@@ -4700,1 +4689,1 @@\n-                res[i] = (byte)0;\n+                res[i] = (byte) 0;\n@@ -4702,1 +4691,1 @@\n-                res[i] = a[idx+j];\n+                res[i] = a[idx + j];\n@@ -4728,1 +4717,1 @@\n-                    res[i] = b[idx+i];\n+                    res[i] = b[idx + i];\n@@ -4730,1 +4719,1 @@\n-                    res[i] = a[idx+j];\n+                    res[i] = a[idx + j];\n@@ -4735,1 +4724,1 @@\n-                    res[i] = a[idx+SPECIES.length()-origin+i];\n+                    res[i] = a[idx + SPECIES.length() - origin + i];\n@@ -4737,1 +4726,1 @@\n-                    res[i] = b[idx+origin+j];\n+                    res[i] = b[idx + origin + j];\n@@ -4765,2 +4754,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = b[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = b[idx + i + origin];\n@@ -4768,1 +4757,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n@@ -4773,1 +4762,1 @@\n-            res[i] = mask[i] ? a[idx+i] : res[i];\n+            res[i] = mask[i] ? a[idx + i] : res[i];\n@@ -4779,1 +4768,1 @@\n-                    res1[i] = b[idx+i];\n+                    res1[i] = b[idx + i];\n@@ -4781,2 +4770,2 @@\n-                   res1[i] = res[j];\n-                   j++;\n+                    res1[i] = res[j];\n+                    j++;\n@@ -4788,1 +4777,1 @@\n-                    res1[i] = res[SPECIES.length()-origin+i];\n+                    res1[i] = res[SPECIES.length() - origin + i];\n@@ -4790,1 +4779,1 @@\n-                    res1[i] = b[idx+origin+j];\n+                    res1[i] = b[idx + origin + j];\n@@ -4842,1 +4831,1 @@\n-        return (byte)((a&~(c))|(b&c));\n+        return (byte) ((a &~ (c)) | (b & c));\n@@ -4845,1 +4834,1 @@\n-        return (byte)((a&~(c))|(b&c));\n+        return (byte) ((a &~ (c)) | (b & c));\n@@ -5061,1 +5050,1 @@\n-        return (byte)(-((byte)a));\n+        return (byte) (-((byte) a));\n@@ -5065,1 +5054,1 @@\n-        return (byte)(-((byte)a));\n+        return (byte) (-((byte) a));\n@@ -5117,1 +5106,1 @@\n-        return (byte)(Math.abs((byte)a));\n+        return (byte) (Math.abs((byte) a));\n@@ -5121,1 +5110,1 @@\n-        return (byte)(Math.abs((byte)a));\n+        return (byte) (Math.abs((byte) a));\n@@ -5174,1 +5163,1 @@\n-        return (byte)(~((byte)a));\n+        return (byte) (~((byte) a));\n@@ -5178,1 +5167,1 @@\n-        return (byte)(~((byte)a));\n+        return (byte) (~((byte) a));\n@@ -5236,1 +5225,1 @@\n-        return (byte)((a==0?0:-1));\n+        return (byte) ((a == 0 ? 0 : -1));\n@@ -5285,1 +5274,1 @@\n-        return (byte)(Integer.bitCount((int)a & 0xFF));\n+        return (byte) (Integer.bitCount((int) a & 0xFF));\n@@ -5331,1 +5320,1 @@\n-        return (byte)(TRAILING_ZEROS_COUNT_scalar(a));\n+        return (byte) (TRAILING_ZEROS_COUNT_scalar(a));\n@@ -5374,1 +5363,1 @@\n-        return (byte)(LEADING_ZEROS_COUNT_scalar(a));\n+        return (byte) (LEADING_ZEROS_COUNT_scalar(a));\n@@ -5417,1 +5406,1 @@\n-        return (byte)(REVERSE_scalar(a));\n+        return (byte) (REVERSE_scalar(a));\n@@ -5568,1 +5557,1 @@\n-        return (long)res;\n+        return (long) res;\n@@ -5607,1 +5596,1 @@\n-        return (long)res;\n+        return (long) res;\n@@ -5664,1 +5653,1 @@\n-                av.blend((long)b[i], vmask).intoArray(r, i);\n+                av.blend((long) b[i], vmask).intoArray(r, i);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte512VectorTests.java","additions":307,"deletions":318,"binary":false,"changes":625,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -73,1 +73,1 @@\n-                            i -> (byte)(i * 5));\n+                            i -> (byte) (i * 5));\n@@ -77,1 +77,1 @@\n-                            i -> (((byte)(i + 1) == 0) ? 1 : (byte)(i + 1)));\n+                            i -> (((byte) (i + 1) == 0) ? 1 : (byte) (i + 1)));\n@@ -184,1 +184,1 @@\n-                            return new Object[]{fa, fb, bo};\n+                            return new Object[] {fa, fb, bo};\n@@ -195,1 +195,1 @@\n-                            return new Object[]{fa, fb, fm, bo};\n+                            return new Object[] {fa, fb, fm, bo};\n@@ -204,1 +204,1 @@\n-                    return new Object[]{fa, bo};\n+                    return new Object[] {fa, bo};\n@@ -214,1 +214,1 @@\n-                        return new Object[]{fa, fm, bo};\n+                        return new Object[] {fa, fm, bo};\n@@ -932,1 +932,0 @@\n-\n@@ -1021,1 +1020,0 @@\n-\n@@ -1296,1 +1294,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte64VectorLoadStoreTests.java","additions":7,"deletions":10,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -93,1 +93,1 @@\n-            byte[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            byte[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -253,1 +253,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i+order[i + j]]);\n@@ -258,1 +258,1 @@\n-            Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i+order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]]);\n@@ -274,1 +274,1 @@\n-                    Assert.assertEquals(r[i + k], (byte)0);\n+                    Assert.assertEquals(r[i + k], (byte) 0);\n@@ -282,1 +282,1 @@\n-                Assert.assertEquals(r[idx], (byte)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], (byte) 0, \"at index #\" + idx);\n@@ -297,1 +297,1 @@\n-                        Assert.assertEquals(r[i + j], (byte)0);\n+                        Assert.assertEquals(r[i + j], (byte) 0);\n@@ -306,1 +306,1 @@\n-                Assert.assertEquals(r[idx], (byte)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], (byte) 0, \"at index #\" + idx);\n@@ -316,1 +316,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -321,1 +321,1 @@\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]]);\n@@ -331,1 +331,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + order[i + j]]);\n@@ -333,1 +333,1 @@\n-                         Assert.assertEquals(r[i+j], (byte)0);\n+                         Assert.assertEquals(r[i + j], (byte) 0);\n@@ -339,1 +339,1 @@\n-                Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -341,1 +341,1 @@\n-                Assert.assertEquals(r[i+j], (byte)0, \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], (byte) 0, \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -351,1 +351,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -353,1 +353,1 @@\n-                         Assert.assertEquals(r[i+j], (byte)0);\n+                         Assert.assertEquals(r[i + j], (byte) 0);\n@@ -359,1 +359,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -361,1 +361,1 @@\n-                Assert.assertEquals(r[i+j], (byte)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], (byte) 0, \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -370,1 +370,1 @@\n-                a[j]=a[idx];\n+                a[j] = a[idx];\n@@ -421,1 +421,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], (byte)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])));\n+                Assert.assertEquals(r[i], f.apply(a[i], (byte) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])));\n@@ -424,1 +424,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], (byte)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])),\n+            Assert.assertEquals(r[i], f.apply(a[i], (byte) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])),\n@@ -470,1 +470,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], (byte)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n+                Assert.assertEquals(r[i], f.apply(a[i], (byte) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n@@ -473,1 +473,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], (byte)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]),\n+            Assert.assertEquals(r[i], f.apply(a[i], (byte) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]),\n@@ -486,1 +486,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]));\n@@ -490,1 +490,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]), \"at index #\" + i + \", \" + j);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]), \"at index #\" + i + \", \" + j);\n@@ -504,1 +504,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]));\n@@ -508,1 +508,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i+j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i + j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n@@ -657,1 +657,0 @@\n-\n@@ -681,1 +680,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -686,1 +685,1 @@\n-            byte[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            byte[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -689,1 +688,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -691,1 +690,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -708,1 +707,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -713,1 +712,1 @@\n-            byte[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            byte[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -716,1 +715,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -718,1 +717,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -729,1 +728,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -734,1 +733,1 @@\n-            byte[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            byte[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -737,1 +736,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -739,1 +738,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -741,1 +740,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(r, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(r, i, i + SPECIES.length()))\n@@ -756,1 +755,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -761,1 +760,1 @@\n-            byte[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            byte[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -776,1 +775,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -781,1 +780,1 @@\n-            byte[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            byte[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -797,1 +796,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -802,1 +801,1 @@\n-            byte[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            byte[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -818,1 +817,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -823,1 +822,1 @@\n-            byte[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            byte[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -840,1 +839,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -845,1 +844,1 @@\n-            byte[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            byte[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -859,1 +858,1 @@\n-                Assert.assertEquals(r[i], (int)(a[i+offs]));\n+                Assert.assertEquals(r[i], (int) (a[i + offs]));\n@@ -862,1 +861,1 @@\n-            Assert.assertEquals(r[i], (int)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (int) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -871,1 +870,1 @@\n-                Assert.assertEquals(r[i], (long)(a[i+offs]));\n+                Assert.assertEquals(r[i], (long) (a[i + offs]));\n@@ -874,1 +873,1 @@\n-            Assert.assertEquals(r[i], (long)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (long) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -882,1 +881,1 @@\n-                Assert.assertEquals(r[i], (long)(a[i+offs]));\n+                Assert.assertEquals(r[i], (long) (a[i + offs]));\n@@ -885,1 +884,1 @@\n-            Assert.assertEquals(r[i], (long)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (long) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -893,1 +892,1 @@\n-                Assert.assertEquals(r[i], (double)(a[i+offs]));\n+                Assert.assertEquals(r[i], (double) (a[i + offs]));\n@@ -896,1 +895,1 @@\n-            Assert.assertEquals(r[i], (double)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (double) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -900,1 +899,0 @@\n-\n@@ -908,1 +906,1 @@\n-                            i -> (byte)(-i * 5));\n+                            i -> (byte) (-i * 5));\n@@ -912,1 +910,1 @@\n-                            i -> (byte)(i * 5));\n+                            i -> (byte) (i * 5));\n@@ -916,1 +914,1 @@\n-                            i -> (((byte)(i + 1) == 0) ? 1 : (byte)(i + 1)));\n+                            i -> (((byte) (i + 1) == 0) ? 1 : (byte) (i + 1)));\n@@ -1047,1 +1045,1 @@\n-                    a[i] = (byte)RAND.nextInt(upper);\n+                    a[i] = (byte) RAND.nextInt(upper);\n@@ -1072,1 +1070,0 @@\n-\n@@ -1076,1 +1073,1 @@\n-                            i -> (byte)i);\n+                            i -> (byte) i);\n@@ -1080,1 +1077,1 @@\n-                            i -> (byte)(i - (s * BUFFER_REPS \/ 2)));\n+                            i -> (byte) (i - (s * BUFFER_REPS \/ 2)));\n@@ -1084,1 +1081,1 @@\n-                            i -> (byte)(i + 1));\n+                            i -> (byte) (i + 1));\n@@ -1088,1 +1085,1 @@\n-                            i -> (byte)(i - 2));\n+                            i -> (byte) (i - 2));\n@@ -1092,1 +1089,1 @@\n-                            i -> i%3 == 0 ? (byte)i : (i%3 == 1 ? (byte)(i + 1) : (byte)(i - 2)));\n+                            i -> i % 3 == 0 ? (byte) i : (i % 3 == 1 ? (byte) (i + 1) : (byte) (i - 2)));\n@@ -1166,1 +1163,1 @@\n-                return (byte)0;\n+                return (byte) 0;\n@@ -1206,1 +1203,1 @@\n-        return (byte)(((((byte)a) & 0xFF) << (b & 7)) | ((((byte)a) & 0xFF) >>> (8 - (b & 7))));\n+        return (byte) (((((byte) a) & 0xFF) << (b & 7)) | ((((byte) a) & 0xFF) >>> (8 - (b & 7))));\n@@ -1210,1 +1207,1 @@\n-        return (byte)(((((byte)a) & 0xFF) >>> (b & 7)) | ((((byte)a) & 0xFF) << (8 - (b & 7))));\n+        return (byte) (((((byte) a) & 0xFF) >>> (b & 7)) | ((((byte) a) & 0xFF) << (8 - (b & 7))));\n@@ -1223,2 +1220,2 @@\n-        b = (byte)(((b & 0x55) << 1) | ((b & 0xAA) >>> 1));\n-        b = (byte)(((b & 0x33) << 2) | ((b & 0xCC) >>> 2));\n+        b = (byte) (((b & 0x55) << 1) | ((b & 0xAA) >>> 1));\n+        b = (byte) (((b & 0x33) << 2) | ((b & 0xCC) >>> 2));\n@@ -1228,1 +1225,0 @@\n-\n@@ -1275,1 +1271,1 @@\n-        ByteVector three = ByteVector.broadcast(SPECIES, (byte)-3);\n+        ByteVector three = ByteVector.broadcast(SPECIES, (byte) -3);\n@@ -1289,1 +1285,1 @@\n-        m = higher.min((byte)-1).test(VectorOperators.IS_NEGATIVE);\n+        m = higher.min((byte) -1).test(VectorOperators.IS_NEGATIVE);\n@@ -1292,1 +1288,1 @@\n-        assert(max == -3 + scale * (SPECIES.length()-1));\n+        assert(max == -3 + scale * (SPECIES.length() - 1));\n@@ -1307,1 +1303,1 @@\n-        ByteVector io2 = (ByteVector) VectorShuffle.iota(SPECIES,0,1,false).toVector();\n+        ByteVector io2 = (ByteVector) VectorShuffle.iota(SPECIES, 0, 1, false).toVector();\n@@ -1309,1 +1305,1 @@\n-        ByteVector a = io.add((byte)1); \/\/[1,2]\n+        ByteVector a = io.add((byte) 1); \/\/[1,2]\n@@ -1314,2 +1310,2 @@\n-        ByteVector zab0 = a.rearrange(zip0,b); \/\/[1,-1]\n-        ByteVector zab1 = a.rearrange(zip1,b); \/\/[2,-2]\n+        ByteVector zab0 = a.rearrange(zip0, b); \/\/[1,-1]\n+        ByteVector zab1 = a.rearrange(zip1, b); \/\/[2,-2]\n@@ -1320,2 +1316,2 @@\n-            manual[i+0] = abValues[i\/2];\n-            manual[i+1] = abValues[a.length() + i\/2];\n+            manual[i + 0] = abValues[i \/ 2];\n+            manual[i + 1] = abValues[a.length() + i \/ 2];\n@@ -1326,2 +1322,2 @@\n-        ByteVector uab0 = zab0.rearrange(unz0,zab1);\n-        ByteVector uab1 = zab0.rearrange(unz1,zab1);\n+        ByteVector uab0 = zab0.rearrange(unz0, zab1);\n+        ByteVector uab1 = zab0.rearrange(unz1, zab1);\n@@ -1379,1 +1375,1 @@\n-        return (byte)(a + b);\n+        return (byte) (a + b);\n@@ -1399,1 +1395,1 @@\n-        return (byte)(a + b);\n+        return (byte) (a + b);\n@@ -1455,1 +1451,1 @@\n-        return (byte)(a - b);\n+        return (byte) (a - b);\n@@ -1475,1 +1471,1 @@\n-        return (byte)(a - b);\n+        return (byte) (a - b);\n@@ -1531,1 +1527,1 @@\n-        return (byte)(a * b);\n+        return (byte) (a * b);\n@@ -1551,1 +1547,1 @@\n-        return (byte)(a * b);\n+        return (byte) (a * b);\n@@ -1610,1 +1606,1 @@\n-        return (byte)(a \/ b);\n+        return (byte) (a \/ b);\n@@ -1632,1 +1628,1 @@\n-        return (byte)(a \/ b);\n+        return (byte) (a \/ b);\n@@ -1701,1 +1697,1 @@\n-        return (byte)((a)!=0?a:b);\n+        return (byte) ((a) != 0 ? a : b);\n@@ -1742,1 +1738,1 @@\n-        return (byte)(a & b);\n+        return (byte) (a & b);\n@@ -1762,1 +1758,1 @@\n-        return (byte)(a & b);\n+        return (byte) (a & b);\n@@ -1804,1 +1800,1 @@\n-        return (byte)(a & ~b);\n+        return (byte) (a & ~b);\n@@ -1848,1 +1844,1 @@\n-        return (byte)(a | b);\n+        return (byte) (a | b);\n@@ -1868,1 +1864,1 @@\n-        return (byte)(a | b);\n+        return (byte) (a | b);\n@@ -1910,1 +1906,1 @@\n-        return (byte)(a ^ b);\n+        return (byte) (a ^ b);\n@@ -2194,1 +2190,1 @@\n-            av.lanewise(VectorOperators.OR, (long)b[i]).intoArray(r, i);\n+            av.lanewise(VectorOperators.OR, (long) b[i]).intoArray(r, i);\n@@ -2213,1 +2209,1 @@\n-            av.lanewise(VectorOperators.OR, (long)b[i], vmask).intoArray(r, i);\n+            av.lanewise(VectorOperators.OR, (long) b[i], vmask).intoArray(r, i);\n@@ -2228,1 +2224,1 @@\n-            av.lanewise(VectorOperators.ADD, (long)b[i]).intoArray(r, i);\n+            av.lanewise(VectorOperators.ADD, (long) b[i]).intoArray(r, i);\n@@ -2245,1 +2241,1 @@\n-            av.lanewise(VectorOperators.ADD, (long)b[i], vmask).intoArray(r, i);\n+            av.lanewise(VectorOperators.ADD, (long) b[i], vmask).intoArray(r, i);\n@@ -2254,1 +2250,1 @@\n-        return (byte)((a << (b & 0x7)));\n+        return (byte) ((a << (b & 0x7)));\n@@ -2302,1 +2298,1 @@\n-        return (byte)((a >> (b & 0x7)));\n+        return (byte) ((a >> (b & 0x7)));\n@@ -2350,1 +2346,1 @@\n-        return (byte)(((a & 0xFF) >>> (b & 0x7)));\n+        return (byte) (((a & 0xFF) >>> (b & 0x7)));\n@@ -2398,1 +2394,1 @@\n-        return (byte)((a << (b & 7)));\n+        return (byte) ((a << (b & 7)));\n@@ -2410,1 +2406,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i]).intoArray(r, i);\n@@ -2431,1 +2427,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i], vmask).intoArray(r, i);\n@@ -2444,1 +2440,1 @@\n-        return (byte)(((a & 0xFF) >>> (b & 7)));\n+        return (byte) (((a & 0xFF) >>> (b & 7)));\n@@ -2456,1 +2452,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i]).intoArray(r, i);\n@@ -2477,1 +2473,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i], vmask).intoArray(r, i);\n@@ -2490,1 +2486,1 @@\n-        return (byte)((a >> (b & 7)));\n+        return (byte) ((a >> (b & 7)));\n@@ -2502,1 +2498,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i]).intoArray(r, i);\n@@ -2523,1 +2519,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i], vmask).intoArray(r, i);\n@@ -2534,1 +2530,1 @@\n-        return (byte)(ROR_scalar(a,b));\n+        return (byte) (ROR_scalar(a, b));\n@@ -2578,1 +2574,1 @@\n-        return (byte)(ROL_scalar(a,b));\n+        return (byte) (ROL_scalar(a, b));\n@@ -2622,1 +2618,1 @@\n-        return (byte)(ROR_scalar(a,b));\n+        return (byte) (ROR_scalar(a, b));\n@@ -2634,1 +2630,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i]).intoArray(r, i);\n@@ -2655,1 +2651,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i], vmask).intoArray(r, i);\n@@ -2664,1 +2660,1 @@\n-        return (byte)(ROL_scalar(a,b));\n+        return (byte) (ROL_scalar(a, b));\n@@ -2676,1 +2672,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i]).intoArray(r, i);\n@@ -2697,1 +2693,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i], vmask).intoArray(r, i);\n@@ -2705,1 +2701,1 @@\n-        return (byte)(Math.min(a, b));\n+        return (byte) (Math.min(a, b));\n@@ -2725,1 +2721,1 @@\n-        return (byte)(Math.min(a, b));\n+        return (byte) (Math.min(a, b));\n@@ -2743,1 +2739,1 @@\n-        return (byte)(Math.max(a, b));\n+        return (byte) (Math.max(a, b));\n@@ -2763,1 +2759,1 @@\n-        return (byte)(Math.max(a, b));\n+        return (byte) (Math.max(a, b));\n@@ -3601,1 +3597,1 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (byte)(65535+i)).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length() - 1)), (byte) (65535 + i)).intoArray(r, i);\n@@ -3607,1 +3603,1 @@\n-            assertInsertArraysEquals(r, a, (byte)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+            assertInsertArraysEquals(r, a, (byte) (65535 + i), (j++ & (SPECIES.length() - 1)), i , i + SPECIES.length());\n@@ -3611,1 +3607,1 @@\n-        return bits(a)==0;\n+        return bits(a) == 0;\n@@ -3644,1 +3640,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_DEFAULT(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_DEFAULT(a[i + j]));\n@@ -3649,1 +3645,1 @@\n-        return bits(a)<0;\n+        return bits(a) < 0;\n@@ -3682,1 +3678,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_NEGATIVE(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_NEGATIVE(a[i + j]));\n@@ -4192,1 +4188,0 @@\n-\n@@ -4220,1 +4215,1 @@\n-            VectorMask<Byte> mv = av.compare(VectorOperators.LT, (long)b[i]);\n+            VectorMask<Byte> mv = av.compare(VectorOperators.LT, (long) b[i]);\n@@ -4224,1 +4219,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), a[i + j] < (byte)((long)b[i]));\n+                Assert.assertEquals(mv.laneIsSet(j), a[i + j] < (byte) ((long) b[i]));\n@@ -4229,1 +4224,0 @@\n-\n@@ -4241,1 +4235,1 @@\n-            VectorMask<Byte> mv = av.compare(VectorOperators.LT, (long)b[i], vmask);\n+            VectorMask<Byte> mv = av.compare(VectorOperators.LT, (long) b[i], vmask);\n@@ -4245,1 +4239,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] < (byte)((long)b[i])));\n+                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] < (byte) ((long) b[i])));\n@@ -4266,1 +4260,0 @@\n-\n@@ -4294,1 +4287,1 @@\n-            VectorMask<Byte> mv = av.compare(VectorOperators.EQ, (long)b[i]);\n+            VectorMask<Byte> mv = av.compare(VectorOperators.EQ, (long) b[i]);\n@@ -4298,1 +4291,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), a[i + j] == (byte)((long)b[i]));\n+                Assert.assertEquals(mv.laneIsSet(j), a[i + j] == (byte) ((long) b[i]));\n@@ -4303,1 +4296,0 @@\n-\n@@ -4315,1 +4307,1 @@\n-            VectorMask<Byte> mv = av.compare(VectorOperators.EQ, (long)b[i], vmask);\n+            VectorMask<Byte> mv = av.compare(VectorOperators.EQ, (long) b[i], vmask);\n@@ -4319,1 +4311,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] == (byte)((long)b[i])));\n+                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] == (byte) ((long) b[i])));\n@@ -4430,1 +4422,1 @@\n-                    r[i]=av.lane(0);\n+                    r[i] = av.lane(0);\n@@ -4432,2 +4424,2 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n@@ -4435,4 +4427,4 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n@@ -4440,8 +4432,8 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n@@ -4449,16 +4441,16 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n@@ -4466,32 +4458,32 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n@@ -4499,64 +4491,64 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n-                    r[i+32]=av.lane(32);\n-                    r[i+33]=av.lane(33);\n-                    r[i+34]=av.lane(34);\n-                    r[i+35]=av.lane(35);\n-                    r[i+36]=av.lane(36);\n-                    r[i+37]=av.lane(37);\n-                    r[i+38]=av.lane(38);\n-                    r[i+39]=av.lane(39);\n-                    r[i+40]=av.lane(40);\n-                    r[i+41]=av.lane(41);\n-                    r[i+42]=av.lane(42);\n-                    r[i+43]=av.lane(43);\n-                    r[i+44]=av.lane(44);\n-                    r[i+45]=av.lane(45);\n-                    r[i+46]=av.lane(46);\n-                    r[i+47]=av.lane(47);\n-                    r[i+48]=av.lane(48);\n-                    r[i+49]=av.lane(49);\n-                    r[i+50]=av.lane(50);\n-                    r[i+51]=av.lane(51);\n-                    r[i+52]=av.lane(52);\n-                    r[i+53]=av.lane(53);\n-                    r[i+54]=av.lane(54);\n-                    r[i+55]=av.lane(55);\n-                    r[i+56]=av.lane(56);\n-                    r[i+57]=av.lane(57);\n-                    r[i+58]=av.lane(58);\n-                    r[i+59]=av.lane(59);\n-                    r[i+60]=av.lane(60);\n-                    r[i+61]=av.lane(61);\n-                    r[i+62]=av.lane(62);\n-                    r[i+63]=av.lane(63);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n+                    r[i + 32] = av.lane(32);\n+                    r[i + 33] = av.lane(33);\n+                    r[i + 34] = av.lane(34);\n+                    r[i + 35] = av.lane(35);\n+                    r[i + 36] = av.lane(36);\n+                    r[i + 37] = av.lane(37);\n+                    r[i + 38] = av.lane(38);\n+                    r[i + 39] = av.lane(39);\n+                    r[i + 40] = av.lane(40);\n+                    r[i + 41] = av.lane(41);\n+                    r[i + 42] = av.lane(42);\n+                    r[i + 43] = av.lane(43);\n+                    r[i + 44] = av.lane(44);\n+                    r[i + 45] = av.lane(45);\n+                    r[i + 46] = av.lane(46);\n+                    r[i + 47] = av.lane(47);\n+                    r[i + 48] = av.lane(48);\n+                    r[i + 49] = av.lane(49);\n+                    r[i + 50] = av.lane(50);\n+                    r[i + 51] = av.lane(51);\n+                    r[i + 52] = av.lane(52);\n+                    r[i + 53] = av.lane(53);\n+                    r[i + 54] = av.lane(54);\n+                    r[i + 55] = av.lane(55);\n+                    r[i + 56] = av.lane(56);\n+                    r[i + 57] = av.lane(57);\n+                    r[i + 58] = av.lane(58);\n+                    r[i + 59] = av.lane(59);\n+                    r[i + 60] = av.lane(60);\n+                    r[i + 61] = av.lane(61);\n+                    r[i + 62] = av.lane(62);\n+                    r[i + 63] = av.lane(63);\n@@ -4565,1 +4557,1 @@\n-                        r[i+j]=av.lane(j);\n+                        r[i + j] = av.lane(j);\n@@ -4606,3 +4598,0 @@\n-\n-\n-\n@@ -4612,2 +4601,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = a[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = a[idx + i + origin];\n@@ -4615,1 +4604,1 @@\n-                res[i] = (byte)0;\n+                res[i] = (byte) 0;\n@@ -4638,1 +4627,1 @@\n-                res[i] = a[idx+i+origin];\n+                res[i] = a[idx + i + origin];\n@@ -4640,1 +4629,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n@@ -4666,2 +4655,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = mask[i] ? a[idx+i+origin] : (byte)0;\n+            if(i + origin < SPECIES.length())\n+                res[i] = mask[i] ? a[idx + i + origin] : (byte) 0;\n@@ -4669,1 +4658,1 @@\n-                res[i] = mask[i] ? b[idx+j] : (byte)0;\n+                res[i] = mask[i] ? b[idx + j] : (byte) 0;\n@@ -4700,1 +4689,1 @@\n-                res[i] = (byte)0;\n+                res[i] = (byte) 0;\n@@ -4702,1 +4691,1 @@\n-                res[i] = a[idx+j];\n+                res[i] = a[idx + j];\n@@ -4728,1 +4717,1 @@\n-                    res[i] = b[idx+i];\n+                    res[i] = b[idx + i];\n@@ -4730,1 +4719,1 @@\n-                    res[i] = a[idx+j];\n+                    res[i] = a[idx + j];\n@@ -4735,1 +4724,1 @@\n-                    res[i] = a[idx+SPECIES.length()-origin+i];\n+                    res[i] = a[idx + SPECIES.length() - origin + i];\n@@ -4737,1 +4726,1 @@\n-                    res[i] = b[idx+origin+j];\n+                    res[i] = b[idx + origin + j];\n@@ -4765,2 +4754,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = b[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = b[idx + i + origin];\n@@ -4768,1 +4757,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n@@ -4773,1 +4762,1 @@\n-            res[i] = mask[i] ? a[idx+i] : res[i];\n+            res[i] = mask[i] ? a[idx + i] : res[i];\n@@ -4779,1 +4768,1 @@\n-                    res1[i] = b[idx+i];\n+                    res1[i] = b[idx + i];\n@@ -4781,2 +4770,2 @@\n-                   res1[i] = res[j];\n-                   j++;\n+                    res1[i] = res[j];\n+                    j++;\n@@ -4788,1 +4777,1 @@\n-                    res1[i] = res[SPECIES.length()-origin+i];\n+                    res1[i] = res[SPECIES.length() - origin + i];\n@@ -4790,1 +4779,1 @@\n-                    res1[i] = b[idx+origin+j];\n+                    res1[i] = b[idx + origin + j];\n@@ -4842,1 +4831,1 @@\n-        return (byte)((a&~(c))|(b&c));\n+        return (byte) ((a &~ (c)) | (b & c));\n@@ -4845,1 +4834,1 @@\n-        return (byte)((a&~(c))|(b&c));\n+        return (byte) ((a &~ (c)) | (b & c));\n@@ -5061,1 +5050,1 @@\n-        return (byte)(-((byte)a));\n+        return (byte) (-((byte) a));\n@@ -5065,1 +5054,1 @@\n-        return (byte)(-((byte)a));\n+        return (byte) (-((byte) a));\n@@ -5117,1 +5106,1 @@\n-        return (byte)(Math.abs((byte)a));\n+        return (byte) (Math.abs((byte) a));\n@@ -5121,1 +5110,1 @@\n-        return (byte)(Math.abs((byte)a));\n+        return (byte) (Math.abs((byte) a));\n@@ -5174,1 +5163,1 @@\n-        return (byte)(~((byte)a));\n+        return (byte) (~((byte) a));\n@@ -5178,1 +5167,1 @@\n-        return (byte)(~((byte)a));\n+        return (byte) (~((byte) a));\n@@ -5236,1 +5225,1 @@\n-        return (byte)((a==0?0:-1));\n+        return (byte) ((a == 0 ? 0 : -1));\n@@ -5285,1 +5274,1 @@\n-        return (byte)(Integer.bitCount((int)a & 0xFF));\n+        return (byte) (Integer.bitCount((int) a & 0xFF));\n@@ -5331,1 +5320,1 @@\n-        return (byte)(TRAILING_ZEROS_COUNT_scalar(a));\n+        return (byte) (TRAILING_ZEROS_COUNT_scalar(a));\n@@ -5374,1 +5363,1 @@\n-        return (byte)(LEADING_ZEROS_COUNT_scalar(a));\n+        return (byte) (LEADING_ZEROS_COUNT_scalar(a));\n@@ -5417,1 +5406,1 @@\n-        return (byte)(REVERSE_scalar(a));\n+        return (byte) (REVERSE_scalar(a));\n@@ -5568,1 +5557,1 @@\n-        return (long)res;\n+        return (long) res;\n@@ -5607,1 +5596,1 @@\n-        return (long)res;\n+        return (long) res;\n@@ -5664,1 +5653,1 @@\n-                av.blend((long)b[i], vmask).intoArray(r, i);\n+                av.blend((long) b[i], vmask).intoArray(r, i);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte64VectorTests.java","additions":307,"deletions":318,"binary":false,"changes":625,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -82,1 +82,1 @@\n-                            i -> (byte)(i * 5));\n+                            i -> (byte) (i * 5));\n@@ -86,1 +86,1 @@\n-                            i -> (((byte)(i + 1) == 0) ? 1 : (byte)(i + 1)));\n+                            i -> (((byte) (i + 1) == 0) ? 1 : (byte) (i + 1)));\n@@ -193,1 +193,1 @@\n-                            return new Object[]{fa, fb, bo};\n+                            return new Object[] {fa, fb, bo};\n@@ -204,1 +204,1 @@\n-                            return new Object[]{fa, fb, fm, bo};\n+                            return new Object[] {fa, fb, fm, bo};\n@@ -213,1 +213,1 @@\n-                    return new Object[]{fa, bo};\n+                    return new Object[] {fa, bo};\n@@ -223,1 +223,1 @@\n-                        return new Object[]{fa, fm, bo};\n+                        return new Object[] {fa, fm, bo};\n@@ -941,1 +941,0 @@\n-\n@@ -1030,1 +1029,0 @@\n-\n@@ -1305,1 +1303,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ByteMaxVectorLoadStoreTests.java","additions":7,"deletions":10,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -93,1 +93,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -98,1 +98,1 @@\n-            byte[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            byte[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -258,1 +258,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i+order[i + j]]);\n@@ -263,1 +263,1 @@\n-            Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i+order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]]);\n@@ -279,1 +279,1 @@\n-                    Assert.assertEquals(r[i + k], (byte)0);\n+                    Assert.assertEquals(r[i + k], (byte) 0);\n@@ -287,1 +287,1 @@\n-                Assert.assertEquals(r[idx], (byte)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], (byte) 0, \"at index #\" + idx);\n@@ -302,1 +302,1 @@\n-                        Assert.assertEquals(r[i + j], (byte)0);\n+                        Assert.assertEquals(r[i + j], (byte) 0);\n@@ -311,1 +311,1 @@\n-                Assert.assertEquals(r[idx], (byte)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], (byte) 0, \"at index #\" + idx);\n@@ -321,1 +321,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -326,1 +326,1 @@\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]]);\n@@ -336,1 +336,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + order[i + j]]);\n@@ -338,1 +338,1 @@\n-                         Assert.assertEquals(r[i+j], (byte)0);\n+                         Assert.assertEquals(r[i + j], (byte) 0);\n@@ -344,1 +344,1 @@\n-                Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -346,1 +346,1 @@\n-                Assert.assertEquals(r[i+j], (byte)0, \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], (byte) 0, \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -356,1 +356,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -358,1 +358,1 @@\n-                         Assert.assertEquals(r[i+j], (byte)0);\n+                         Assert.assertEquals(r[i + j], (byte) 0);\n@@ -364,1 +364,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -366,1 +366,1 @@\n-                Assert.assertEquals(r[i+j], (byte)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], (byte) 0, \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -375,1 +375,1 @@\n-                a[j]=a[idx];\n+                a[j] = a[idx];\n@@ -426,1 +426,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], (byte)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])));\n+                Assert.assertEquals(r[i], f.apply(a[i], (byte) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])));\n@@ -429,1 +429,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], (byte)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])),\n+            Assert.assertEquals(r[i], f.apply(a[i], (byte) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])),\n@@ -475,1 +475,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], (byte)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n+                Assert.assertEquals(r[i], f.apply(a[i], (byte) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n@@ -478,1 +478,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], (byte)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]),\n+            Assert.assertEquals(r[i], f.apply(a[i], (byte) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]),\n@@ -491,1 +491,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]));\n@@ -495,1 +495,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]), \"at index #\" + i + \", \" + j);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]), \"at index #\" + i + \", \" + j);\n@@ -509,1 +509,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]));\n@@ -513,1 +513,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i+j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i + j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n@@ -662,1 +662,0 @@\n-\n@@ -686,1 +685,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -691,1 +690,1 @@\n-            byte[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            byte[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -694,1 +693,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -696,1 +695,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -713,1 +712,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -718,1 +717,1 @@\n-            byte[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            byte[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -721,1 +720,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -723,1 +722,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -734,1 +733,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -739,1 +738,1 @@\n-            byte[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            byte[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -742,1 +741,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -744,1 +743,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -746,1 +745,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(r, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(r, i, i + SPECIES.length()))\n@@ -761,1 +760,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -766,1 +765,1 @@\n-            byte[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            byte[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -781,1 +780,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -786,1 +785,1 @@\n-            byte[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            byte[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -802,1 +801,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -807,1 +806,1 @@\n-            byte[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            byte[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -823,1 +822,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -828,1 +827,1 @@\n-            byte[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            byte[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -845,1 +844,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -850,1 +849,1 @@\n-            byte[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            byte[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -864,1 +863,1 @@\n-                Assert.assertEquals(r[i], (int)(a[i+offs]));\n+                Assert.assertEquals(r[i], (int) (a[i + offs]));\n@@ -867,1 +866,1 @@\n-            Assert.assertEquals(r[i], (int)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (int) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -876,1 +875,1 @@\n-                Assert.assertEquals(r[i], (long)(a[i+offs]));\n+                Assert.assertEquals(r[i], (long) (a[i + offs]));\n@@ -879,1 +878,1 @@\n-            Assert.assertEquals(r[i], (long)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (long) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -887,1 +886,1 @@\n-                Assert.assertEquals(r[i], (long)(a[i+offs]));\n+                Assert.assertEquals(r[i], (long) (a[i + offs]));\n@@ -890,1 +889,1 @@\n-            Assert.assertEquals(r[i], (long)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (long) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -898,1 +897,1 @@\n-                Assert.assertEquals(r[i], (double)(a[i+offs]));\n+                Assert.assertEquals(r[i], (double) (a[i + offs]));\n@@ -901,1 +900,1 @@\n-            Assert.assertEquals(r[i], (double)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (double) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -905,1 +904,0 @@\n-\n@@ -913,1 +911,1 @@\n-                            i -> (byte)(-i * 5));\n+                            i -> (byte) (-i * 5));\n@@ -917,1 +915,1 @@\n-                            i -> (byte)(i * 5));\n+                            i -> (byte) (i * 5));\n@@ -921,1 +919,1 @@\n-                            i -> (((byte)(i + 1) == 0) ? 1 : (byte)(i + 1)));\n+                            i -> (((byte) (i + 1) == 0) ? 1 : (byte) (i + 1)));\n@@ -1052,1 +1050,1 @@\n-                    a[i] = (byte)RAND.nextInt(upper);\n+                    a[i] = (byte) RAND.nextInt(upper);\n@@ -1077,1 +1075,0 @@\n-\n@@ -1081,1 +1078,1 @@\n-                            i -> (byte)i);\n+                            i -> (byte) i);\n@@ -1085,1 +1082,1 @@\n-                            i -> (byte)(i - (s * BUFFER_REPS \/ 2)));\n+                            i -> (byte) (i - (s * BUFFER_REPS \/ 2)));\n@@ -1089,1 +1086,1 @@\n-                            i -> (byte)(i + 1));\n+                            i -> (byte) (i + 1));\n@@ -1093,1 +1090,1 @@\n-                            i -> (byte)(i - 2));\n+                            i -> (byte) (i - 2));\n@@ -1097,1 +1094,1 @@\n-                            i -> i%3 == 0 ? (byte)i : (i%3 == 1 ? (byte)(i + 1) : (byte)(i - 2)));\n+                            i -> i % 3 == 0 ? (byte) i : (i % 3 == 1 ? (byte) (i + 1) : (byte) (i - 2)));\n@@ -1171,1 +1168,1 @@\n-                return (byte)0;\n+                return (byte) 0;\n@@ -1211,1 +1208,1 @@\n-        return (byte)(((((byte)a) & 0xFF) << (b & 7)) | ((((byte)a) & 0xFF) >>> (8 - (b & 7))));\n+        return (byte) (((((byte) a) & 0xFF) << (b & 7)) | ((((byte) a) & 0xFF) >>> (8 - (b & 7))));\n@@ -1215,1 +1212,1 @@\n-        return (byte)(((((byte)a) & 0xFF) >>> (b & 7)) | ((((byte)a) & 0xFF) << (8 - (b & 7))));\n+        return (byte) (((((byte) a) & 0xFF) >>> (b & 7)) | ((((byte) a) & 0xFF) << (8 - (b & 7))));\n@@ -1228,2 +1225,2 @@\n-        b = (byte)(((b & 0x55) << 1) | ((b & 0xAA) >>> 1));\n-        b = (byte)(((b & 0x33) << 2) | ((b & 0xCC) >>> 2));\n+        b = (byte) (((b & 0x55) << 1) | ((b & 0xAA) >>> 1));\n+        b = (byte) (((b & 0x33) << 2) | ((b & 0xCC) >>> 2));\n@@ -1233,1 +1230,0 @@\n-\n@@ -1280,1 +1276,1 @@\n-        ByteVector three = ByteVector.broadcast(SPECIES, (byte)-3);\n+        ByteVector three = ByteVector.broadcast(SPECIES, (byte) -3);\n@@ -1294,1 +1290,1 @@\n-        m = higher.min((byte)-1).test(VectorOperators.IS_NEGATIVE);\n+        m = higher.min((byte) -1).test(VectorOperators.IS_NEGATIVE);\n@@ -1297,1 +1293,1 @@\n-        assert(max == -3 + scale * (SPECIES.length()-1));\n+        assert(max == -3 + scale * (SPECIES.length() - 1));\n@@ -1312,1 +1308,1 @@\n-        ByteVector io2 = (ByteVector) VectorShuffle.iota(SPECIES,0,1,false).toVector();\n+        ByteVector io2 = (ByteVector) VectorShuffle.iota(SPECIES, 0, 1, false).toVector();\n@@ -1314,1 +1310,1 @@\n-        ByteVector a = io.add((byte)1); \/\/[1,2]\n+        ByteVector a = io.add((byte) 1); \/\/[1,2]\n@@ -1319,2 +1315,2 @@\n-        ByteVector zab0 = a.rearrange(zip0,b); \/\/[1,-1]\n-        ByteVector zab1 = a.rearrange(zip1,b); \/\/[2,-2]\n+        ByteVector zab0 = a.rearrange(zip0, b); \/\/[1,-1]\n+        ByteVector zab1 = a.rearrange(zip1, b); \/\/[2,-2]\n@@ -1325,2 +1321,2 @@\n-            manual[i+0] = abValues[i\/2];\n-            manual[i+1] = abValues[a.length() + i\/2];\n+            manual[i + 0] = abValues[i \/ 2];\n+            manual[i + 1] = abValues[a.length() + i \/ 2];\n@@ -1331,2 +1327,2 @@\n-        ByteVector uab0 = zab0.rearrange(unz0,zab1);\n-        ByteVector uab1 = zab0.rearrange(unz1,zab1);\n+        ByteVector uab0 = zab0.rearrange(unz0, zab1);\n+        ByteVector uab1 = zab0.rearrange(unz1, zab1);\n@@ -1384,1 +1380,1 @@\n-        return (byte)(a + b);\n+        return (byte) (a + b);\n@@ -1404,1 +1400,1 @@\n-        return (byte)(a + b);\n+        return (byte) (a + b);\n@@ -1460,1 +1456,1 @@\n-        return (byte)(a - b);\n+        return (byte) (a - b);\n@@ -1480,1 +1476,1 @@\n-        return (byte)(a - b);\n+        return (byte) (a - b);\n@@ -1536,1 +1532,1 @@\n-        return (byte)(a * b);\n+        return (byte) (a * b);\n@@ -1556,1 +1552,1 @@\n-        return (byte)(a * b);\n+        return (byte) (a * b);\n@@ -1615,1 +1611,1 @@\n-        return (byte)(a \/ b);\n+        return (byte) (a \/ b);\n@@ -1637,1 +1633,1 @@\n-        return (byte)(a \/ b);\n+        return (byte) (a \/ b);\n@@ -1706,1 +1702,1 @@\n-        return (byte)((a)!=0?a:b);\n+        return (byte) ((a) != 0 ? a : b);\n@@ -1747,1 +1743,1 @@\n-        return (byte)(a & b);\n+        return (byte) (a & b);\n@@ -1767,1 +1763,1 @@\n-        return (byte)(a & b);\n+        return (byte) (a & b);\n@@ -1809,1 +1805,1 @@\n-        return (byte)(a & ~b);\n+        return (byte) (a & ~b);\n@@ -1853,1 +1849,1 @@\n-        return (byte)(a | b);\n+        return (byte) (a | b);\n@@ -1873,1 +1869,1 @@\n-        return (byte)(a | b);\n+        return (byte) (a | b);\n@@ -1915,1 +1911,1 @@\n-        return (byte)(a ^ b);\n+        return (byte) (a ^ b);\n@@ -2199,1 +2195,1 @@\n-            av.lanewise(VectorOperators.OR, (long)b[i]).intoArray(r, i);\n+            av.lanewise(VectorOperators.OR, (long) b[i]).intoArray(r, i);\n@@ -2218,1 +2214,1 @@\n-            av.lanewise(VectorOperators.OR, (long)b[i], vmask).intoArray(r, i);\n+            av.lanewise(VectorOperators.OR, (long) b[i], vmask).intoArray(r, i);\n@@ -2233,1 +2229,1 @@\n-            av.lanewise(VectorOperators.ADD, (long)b[i]).intoArray(r, i);\n+            av.lanewise(VectorOperators.ADD, (long) b[i]).intoArray(r, i);\n@@ -2250,1 +2246,1 @@\n-            av.lanewise(VectorOperators.ADD, (long)b[i], vmask).intoArray(r, i);\n+            av.lanewise(VectorOperators.ADD, (long) b[i], vmask).intoArray(r, i);\n@@ -2259,1 +2255,1 @@\n-        return (byte)((a << (b & 0x7)));\n+        return (byte) ((a << (b & 0x7)));\n@@ -2307,1 +2303,1 @@\n-        return (byte)((a >> (b & 0x7)));\n+        return (byte) ((a >> (b & 0x7)));\n@@ -2355,1 +2351,1 @@\n-        return (byte)(((a & 0xFF) >>> (b & 0x7)));\n+        return (byte) (((a & 0xFF) >>> (b & 0x7)));\n@@ -2403,1 +2399,1 @@\n-        return (byte)((a << (b & 7)));\n+        return (byte) ((a << (b & 7)));\n@@ -2415,1 +2411,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i]).intoArray(r, i);\n@@ -2436,1 +2432,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i], vmask).intoArray(r, i);\n@@ -2449,1 +2445,1 @@\n-        return (byte)(((a & 0xFF) >>> (b & 7)));\n+        return (byte) (((a & 0xFF) >>> (b & 7)));\n@@ -2461,1 +2457,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i]).intoArray(r, i);\n@@ -2482,1 +2478,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i], vmask).intoArray(r, i);\n@@ -2495,1 +2491,1 @@\n-        return (byte)((a >> (b & 7)));\n+        return (byte) ((a >> (b & 7)));\n@@ -2507,1 +2503,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i]).intoArray(r, i);\n@@ -2528,1 +2524,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i], vmask).intoArray(r, i);\n@@ -2539,1 +2535,1 @@\n-        return (byte)(ROR_scalar(a,b));\n+        return (byte) (ROR_scalar(a, b));\n@@ -2583,1 +2579,1 @@\n-        return (byte)(ROL_scalar(a,b));\n+        return (byte) (ROL_scalar(a, b));\n@@ -2627,1 +2623,1 @@\n-        return (byte)(ROR_scalar(a,b));\n+        return (byte) (ROR_scalar(a, b));\n@@ -2639,1 +2635,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i]).intoArray(r, i);\n@@ -2660,1 +2656,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i], vmask).intoArray(r, i);\n@@ -2669,1 +2665,1 @@\n-        return (byte)(ROL_scalar(a,b));\n+        return (byte) (ROL_scalar(a, b));\n@@ -2681,1 +2677,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i]).intoArray(r, i);\n@@ -2702,1 +2698,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i], vmask).intoArray(r, i);\n@@ -2710,1 +2706,1 @@\n-        return (byte)(Math.min(a, b));\n+        return (byte) (Math.min(a, b));\n@@ -2730,1 +2726,1 @@\n-        return (byte)(Math.min(a, b));\n+        return (byte) (Math.min(a, b));\n@@ -2748,1 +2744,1 @@\n-        return (byte)(Math.max(a, b));\n+        return (byte) (Math.max(a, b));\n@@ -2768,1 +2764,1 @@\n-        return (byte)(Math.max(a, b));\n+        return (byte) (Math.max(a, b));\n@@ -3606,1 +3602,1 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (byte)(65535+i)).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length() - 1)), (byte) (65535 + i)).intoArray(r, i);\n@@ -3612,1 +3608,1 @@\n-            assertInsertArraysEquals(r, a, (byte)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+            assertInsertArraysEquals(r, a, (byte) (65535 + i), (j++ & (SPECIES.length() - 1)), i , i + SPECIES.length());\n@@ -3616,1 +3612,1 @@\n-        return bits(a)==0;\n+        return bits(a) == 0;\n@@ -3649,1 +3645,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_DEFAULT(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_DEFAULT(a[i + j]));\n@@ -3654,1 +3650,1 @@\n-        return bits(a)<0;\n+        return bits(a) < 0;\n@@ -3687,1 +3683,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_NEGATIVE(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_NEGATIVE(a[i + j]));\n@@ -4197,1 +4193,0 @@\n-\n@@ -4225,1 +4220,1 @@\n-            VectorMask<Byte> mv = av.compare(VectorOperators.LT, (long)b[i]);\n+            VectorMask<Byte> mv = av.compare(VectorOperators.LT, (long) b[i]);\n@@ -4229,1 +4224,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), a[i + j] < (byte)((long)b[i]));\n+                Assert.assertEquals(mv.laneIsSet(j), a[i + j] < (byte) ((long) b[i]));\n@@ -4234,1 +4229,0 @@\n-\n@@ -4246,1 +4240,1 @@\n-            VectorMask<Byte> mv = av.compare(VectorOperators.LT, (long)b[i], vmask);\n+            VectorMask<Byte> mv = av.compare(VectorOperators.LT, (long) b[i], vmask);\n@@ -4250,1 +4244,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] < (byte)((long)b[i])));\n+                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] < (byte) ((long) b[i])));\n@@ -4271,1 +4265,0 @@\n-\n@@ -4299,1 +4292,1 @@\n-            VectorMask<Byte> mv = av.compare(VectorOperators.EQ, (long)b[i]);\n+            VectorMask<Byte> mv = av.compare(VectorOperators.EQ, (long) b[i]);\n@@ -4303,1 +4296,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), a[i + j] == (byte)((long)b[i]));\n+                Assert.assertEquals(mv.laneIsSet(j), a[i + j] == (byte) ((long) b[i]));\n@@ -4308,1 +4301,0 @@\n-\n@@ -4320,1 +4312,1 @@\n-            VectorMask<Byte> mv = av.compare(VectorOperators.EQ, (long)b[i], vmask);\n+            VectorMask<Byte> mv = av.compare(VectorOperators.EQ, (long) b[i], vmask);\n@@ -4324,1 +4316,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] == (byte)((long)b[i])));\n+                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] == (byte) ((long) b[i])));\n@@ -4435,1 +4427,1 @@\n-                    r[i]=av.lane(0);\n+                    r[i] = av.lane(0);\n@@ -4437,2 +4429,2 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n@@ -4440,4 +4432,4 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n@@ -4445,8 +4437,8 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n@@ -4454,16 +4446,16 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n@@ -4471,32 +4463,32 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n@@ -4504,64 +4496,64 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n-                    r[i+32]=av.lane(32);\n-                    r[i+33]=av.lane(33);\n-                    r[i+34]=av.lane(34);\n-                    r[i+35]=av.lane(35);\n-                    r[i+36]=av.lane(36);\n-                    r[i+37]=av.lane(37);\n-                    r[i+38]=av.lane(38);\n-                    r[i+39]=av.lane(39);\n-                    r[i+40]=av.lane(40);\n-                    r[i+41]=av.lane(41);\n-                    r[i+42]=av.lane(42);\n-                    r[i+43]=av.lane(43);\n-                    r[i+44]=av.lane(44);\n-                    r[i+45]=av.lane(45);\n-                    r[i+46]=av.lane(46);\n-                    r[i+47]=av.lane(47);\n-                    r[i+48]=av.lane(48);\n-                    r[i+49]=av.lane(49);\n-                    r[i+50]=av.lane(50);\n-                    r[i+51]=av.lane(51);\n-                    r[i+52]=av.lane(52);\n-                    r[i+53]=av.lane(53);\n-                    r[i+54]=av.lane(54);\n-                    r[i+55]=av.lane(55);\n-                    r[i+56]=av.lane(56);\n-                    r[i+57]=av.lane(57);\n-                    r[i+58]=av.lane(58);\n-                    r[i+59]=av.lane(59);\n-                    r[i+60]=av.lane(60);\n-                    r[i+61]=av.lane(61);\n-                    r[i+62]=av.lane(62);\n-                    r[i+63]=av.lane(63);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n+                    r[i + 32] = av.lane(32);\n+                    r[i + 33] = av.lane(33);\n+                    r[i + 34] = av.lane(34);\n+                    r[i + 35] = av.lane(35);\n+                    r[i + 36] = av.lane(36);\n+                    r[i + 37] = av.lane(37);\n+                    r[i + 38] = av.lane(38);\n+                    r[i + 39] = av.lane(39);\n+                    r[i + 40] = av.lane(40);\n+                    r[i + 41] = av.lane(41);\n+                    r[i + 42] = av.lane(42);\n+                    r[i + 43] = av.lane(43);\n+                    r[i + 44] = av.lane(44);\n+                    r[i + 45] = av.lane(45);\n+                    r[i + 46] = av.lane(46);\n+                    r[i + 47] = av.lane(47);\n+                    r[i + 48] = av.lane(48);\n+                    r[i + 49] = av.lane(49);\n+                    r[i + 50] = av.lane(50);\n+                    r[i + 51] = av.lane(51);\n+                    r[i + 52] = av.lane(52);\n+                    r[i + 53] = av.lane(53);\n+                    r[i + 54] = av.lane(54);\n+                    r[i + 55] = av.lane(55);\n+                    r[i + 56] = av.lane(56);\n+                    r[i + 57] = av.lane(57);\n+                    r[i + 58] = av.lane(58);\n+                    r[i + 59] = av.lane(59);\n+                    r[i + 60] = av.lane(60);\n+                    r[i + 61] = av.lane(61);\n+                    r[i + 62] = av.lane(62);\n+                    r[i + 63] = av.lane(63);\n@@ -4570,1 +4562,1 @@\n-                        r[i+j]=av.lane(j);\n+                        r[i + j] = av.lane(j);\n@@ -4611,3 +4603,0 @@\n-\n-\n-\n@@ -4617,2 +4606,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = a[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = a[idx + i + origin];\n@@ -4620,1 +4609,1 @@\n-                res[i] = (byte)0;\n+                res[i] = (byte) 0;\n@@ -4643,1 +4632,1 @@\n-                res[i] = a[idx+i+origin];\n+                res[i] = a[idx + i + origin];\n@@ -4645,1 +4634,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n@@ -4671,2 +4660,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = mask[i] ? a[idx+i+origin] : (byte)0;\n+            if(i + origin < SPECIES.length())\n+                res[i] = mask[i] ? a[idx + i + origin] : (byte) 0;\n@@ -4674,1 +4663,1 @@\n-                res[i] = mask[i] ? b[idx+j] : (byte)0;\n+                res[i] = mask[i] ? b[idx + j] : (byte) 0;\n@@ -4705,1 +4694,1 @@\n-                res[i] = (byte)0;\n+                res[i] = (byte) 0;\n@@ -4707,1 +4696,1 @@\n-                res[i] = a[idx+j];\n+                res[i] = a[idx + j];\n@@ -4733,1 +4722,1 @@\n-                    res[i] = b[idx+i];\n+                    res[i] = b[idx + i];\n@@ -4735,1 +4724,1 @@\n-                    res[i] = a[idx+j];\n+                    res[i] = a[idx + j];\n@@ -4740,1 +4729,1 @@\n-                    res[i] = a[idx+SPECIES.length()-origin+i];\n+                    res[i] = a[idx + SPECIES.length() - origin + i];\n@@ -4742,1 +4731,1 @@\n-                    res[i] = b[idx+origin+j];\n+                    res[i] = b[idx + origin + j];\n@@ -4770,2 +4759,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = b[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = b[idx + i + origin];\n@@ -4773,1 +4762,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n@@ -4778,1 +4767,1 @@\n-            res[i] = mask[i] ? a[idx+i] : res[i];\n+            res[i] = mask[i] ? a[idx + i] : res[i];\n@@ -4784,1 +4773,1 @@\n-                    res1[i] = b[idx+i];\n+                    res1[i] = b[idx + i];\n@@ -4786,2 +4775,2 @@\n-                   res1[i] = res[j];\n-                   j++;\n+                    res1[i] = res[j];\n+                    j++;\n@@ -4793,1 +4782,1 @@\n-                    res1[i] = res[SPECIES.length()-origin+i];\n+                    res1[i] = res[SPECIES.length() - origin + i];\n@@ -4795,1 +4784,1 @@\n-                    res1[i] = b[idx+origin+j];\n+                    res1[i] = b[idx + origin + j];\n@@ -4847,1 +4836,1 @@\n-        return (byte)((a&~(c))|(b&c));\n+        return (byte) ((a &~ (c)) | (b & c));\n@@ -4850,1 +4839,1 @@\n-        return (byte)((a&~(c))|(b&c));\n+        return (byte) ((a &~ (c)) | (b & c));\n@@ -5066,1 +5055,1 @@\n-        return (byte)(-((byte)a));\n+        return (byte) (-((byte) a));\n@@ -5070,1 +5059,1 @@\n-        return (byte)(-((byte)a));\n+        return (byte) (-((byte) a));\n@@ -5122,1 +5111,1 @@\n-        return (byte)(Math.abs((byte)a));\n+        return (byte) (Math.abs((byte) a));\n@@ -5126,1 +5115,1 @@\n-        return (byte)(Math.abs((byte)a));\n+        return (byte) (Math.abs((byte) a));\n@@ -5179,1 +5168,1 @@\n-        return (byte)(~((byte)a));\n+        return (byte) (~((byte) a));\n@@ -5183,1 +5172,1 @@\n-        return (byte)(~((byte)a));\n+        return (byte) (~((byte) a));\n@@ -5241,1 +5230,1 @@\n-        return (byte)((a==0?0:-1));\n+        return (byte) ((a == 0 ? 0 : -1));\n@@ -5290,1 +5279,1 @@\n-        return (byte)(Integer.bitCount((int)a & 0xFF));\n+        return (byte) (Integer.bitCount((int) a & 0xFF));\n@@ -5336,1 +5325,1 @@\n-        return (byte)(TRAILING_ZEROS_COUNT_scalar(a));\n+        return (byte) (TRAILING_ZEROS_COUNT_scalar(a));\n@@ -5379,1 +5368,1 @@\n-        return (byte)(LEADING_ZEROS_COUNT_scalar(a));\n+        return (byte) (LEADING_ZEROS_COUNT_scalar(a));\n@@ -5422,1 +5411,1 @@\n-        return (byte)(REVERSE_scalar(a));\n+        return (byte) (REVERSE_scalar(a));\n@@ -5573,1 +5562,1 @@\n-        return (long)res;\n+        return (long) res;\n@@ -5612,1 +5601,1 @@\n-        return (long)res;\n+        return (long) res;\n@@ -5669,1 +5658,1 @@\n-                av.blend((long)b[i], vmask).intoArray(r, i);\n+                av.blend((long) b[i], vmask).intoArray(r, i);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ByteMaxVectorTests.java","additions":307,"deletions":318,"binary":false,"changes":625,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,1 +74,1 @@\n-                Assert.assertEquals(r[i], mask[(i*8\/SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0);\n+                Assert.assertEquals(r[i], mask[(i * 8 \/ SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0);\n@@ -77,1 +77,1 @@\n-            Assert.assertEquals(r[i], mask[(i*8\/SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0, \"at index #\" + i);\n+            Assert.assertEquals(r[i], mask[(i * 8 \/ SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0, \"at index #\" + i);\n@@ -84,1 +84,1 @@\n-                            i -> (double)(i * 5));\n+                            i -> (double) (i * 5));\n@@ -88,1 +88,1 @@\n-                            i -> (((double)(i + 1) == 0) ? 1 : (double)(i + 1)));\n+                            i -> (((double) (i + 1) == 0) ? 1 : (double) (i + 1)));\n@@ -195,1 +195,1 @@\n-                            return new Object[]{fa, fb, bo};\n+                            return new Object[] {fa, fb, bo};\n@@ -206,1 +206,1 @@\n-                            return new Object[]{fa, fb, fm, bo};\n+                            return new Object[] {fa, fb, fm, bo};\n@@ -215,1 +215,1 @@\n-                    return new Object[]{fa, bo};\n+                    return new Object[] {fa, bo};\n@@ -225,1 +225,1 @@\n-                        return new Object[]{fa, fm, bo};\n+                        return new Object[] {fa, fm, bo};\n@@ -944,2 +944,0 @@\n-\n-\n@@ -1095,1 +1093,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double128VectorLoadStoreTests.java","additions":9,"deletions":12,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -93,1 +93,1 @@\n-            double[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            double[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -253,1 +253,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i+order[i + j]]);\n@@ -258,1 +258,1 @@\n-            Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i+order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]]);\n@@ -274,1 +274,1 @@\n-                    Assert.assertEquals(r[i + k], (double)0);\n+                    Assert.assertEquals(r[i + k], (double) 0);\n@@ -282,1 +282,1 @@\n-                Assert.assertEquals(r[idx], (double)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], (double) 0, \"at index #\" + idx);\n@@ -297,1 +297,1 @@\n-                        Assert.assertEquals(r[i + j], (double)0);\n+                        Assert.assertEquals(r[i + j], (double) 0);\n@@ -306,1 +306,1 @@\n-                Assert.assertEquals(r[idx], (double)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], (double) 0, \"at index #\" + idx);\n@@ -316,1 +316,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -321,1 +321,1 @@\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]]);\n@@ -331,1 +331,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + order[i + j]]);\n@@ -333,1 +333,1 @@\n-                         Assert.assertEquals(r[i+j], (double)0);\n+                         Assert.assertEquals(r[i + j], (double) 0);\n@@ -339,1 +339,1 @@\n-                Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -341,1 +341,1 @@\n-                Assert.assertEquals(r[i+j], (double)0, \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], (double) 0, \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -351,1 +351,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -353,1 +353,1 @@\n-                         Assert.assertEquals(r[i+j], (double)0);\n+                         Assert.assertEquals(r[i + j], (double) 0);\n@@ -359,1 +359,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -361,1 +361,1 @@\n-                Assert.assertEquals(r[i+j], (double)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], (double) 0, \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -370,1 +370,1 @@\n-                a[j]=a[idx];\n+                a[j] = a[idx];\n@@ -421,1 +421,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], (double)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])));\n+                Assert.assertEquals(r[i], f.apply(a[i], (double) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])));\n@@ -424,1 +424,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], (double)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])),\n+            Assert.assertEquals(r[i], f.apply(a[i], (double) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])),\n@@ -470,1 +470,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], (double)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n+                Assert.assertEquals(r[i], f.apply(a[i], (double) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n@@ -473,1 +473,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], (double)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]),\n+            Assert.assertEquals(r[i], f.apply(a[i], (double) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]),\n@@ -486,1 +486,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]));\n@@ -490,1 +490,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]), \"at index #\" + i + \", \" + j);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]), \"at index #\" + i + \", \" + j);\n@@ -504,1 +504,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]));\n@@ -508,1 +508,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i+j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i + j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n@@ -656,1 +656,0 @@\n-\n@@ -755,1 +754,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -760,1 +759,1 @@\n-            double[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            double[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -763,1 +762,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -765,1 +764,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -782,1 +781,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -787,1 +786,1 @@\n-            double[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            double[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -790,1 +789,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -792,1 +791,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -803,1 +802,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -808,1 +807,1 @@\n-            double[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            double[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -811,1 +810,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -813,1 +812,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -815,1 +814,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(r, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(r, i, i + SPECIES.length()))\n@@ -830,1 +829,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -835,1 +834,1 @@\n-            double[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            double[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -850,1 +849,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -855,1 +854,1 @@\n-            double[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            double[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -871,1 +870,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -876,1 +875,1 @@\n-            double[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            double[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -892,1 +891,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -897,1 +896,1 @@\n-            double[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            double[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -914,1 +913,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -919,1 +918,1 @@\n-            double[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            double[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -939,1 +938,1 @@\n-                return (int)0;\n+                return (int) 0;\n@@ -946,1 +945,1 @@\n-                            i -> (double)(-i * 5));\n+                            i -> (double) (-i * 5));\n@@ -950,1 +949,1 @@\n-                            i -> (double)(i * 5));\n+                            i -> (double) (i * 5));\n@@ -954,1 +953,1 @@\n-                            i -> (((double)(i + 1) == 0) ? 1 : (double)(i + 1)));\n+                            i -> (((double) (i + 1) == 0) ? 1 : (double) (i + 1)));\n@@ -958,1 +957,1 @@\n-                            i -> (double)intCornerCaseValue(i));\n+                            i -> (double) intCornerCaseValue(i));\n@@ -966,1 +965,1 @@\n-                Assert.assertEquals(r[i], (int)(a[i+offs]));\n+                Assert.assertEquals(r[i], (int) (a[i + offs]));\n@@ -969,1 +968,1 @@\n-            Assert.assertEquals(r[i], (int)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (int) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -984,1 +983,1 @@\n-                return (long)0;\n+                return (long) 0;\n@@ -991,1 +990,1 @@\n-                            i -> (double)(-i * 5));\n+                            i -> (double) (-i * 5));\n@@ -995,1 +994,1 @@\n-                            i -> (double)(i * 5));\n+                            i -> (double) (i * 5));\n@@ -999,1 +998,1 @@\n-                            i -> (((double)(i + 1) == 0) ? 1 : (double)(i + 1)));\n+                            i -> (((double) (i + 1) == 0) ? 1 : (double) (i + 1)));\n@@ -1003,1 +1002,1 @@\n-                            i -> (double)longCornerCaseValue(i));\n+                            i -> (double) longCornerCaseValue(i));\n@@ -1012,1 +1011,1 @@\n-                Assert.assertEquals(r[i], (long)(a[i+offs]));\n+                Assert.assertEquals(r[i], (long) (a[i + offs]));\n@@ -1015,1 +1014,1 @@\n-            Assert.assertEquals(r[i], (long)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (long) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -1020,1 +1019,0 @@\n-\n@@ -1028,1 +1026,1 @@\n-                            i -> (double)(-i * 5));\n+                            i -> (double) (-i * 5));\n@@ -1032,1 +1030,1 @@\n-                            i -> (double)(i * 5));\n+                            i -> (double) (i * 5));\n@@ -1036,1 +1034,1 @@\n-                            i -> (((double)(i + 1) == 0) ? 1 : (double)(i + 1)));\n+                            i -> (((double) (i + 1) == 0) ? 1 : (double) (i + 1)));\n@@ -1179,1 +1177,1 @@\n-                    a[i] = (double)RAND.nextInt(upper);\n+                    a[i] = (double) RAND.nextInt(upper);\n@@ -1204,1 +1202,0 @@\n-\n@@ -1208,1 +1205,1 @@\n-                            i -> (double)i);\n+                            i -> (double) i);\n@@ -1212,1 +1209,1 @@\n-                            i -> (double)(i - (s * BUFFER_REPS \/ 2)));\n+                            i -> (double) (i - (s * BUFFER_REPS \/ 2)));\n@@ -1216,1 +1213,1 @@\n-                            i -> (double)(i + 1));\n+                            i -> (double) (i + 1));\n@@ -1220,1 +1217,1 @@\n-                            i -> (double)(i - 2));\n+                            i -> (double) (i - 2));\n@@ -1224,1 +1221,1 @@\n-                            i -> i%3 == 0 ? (double)i : (i%3 == 1 ? (double)(i + 1) : (double)(i - 2)));\n+                            i -> i % 3 == 0 ? (double) i : (i % 3 == 1 ? (double) (i + 1) : (double) (i - 2)));\n@@ -1300,1 +1297,1 @@\n-                return (double)0.0;\n+                return (double) 0.0;\n@@ -1302,1 +1299,1 @@\n-                return (double)-0.0;\n+                return (double) -0.0;\n@@ -1356,1 +1353,1 @@\n-        DoubleVector three = DoubleVector.broadcast(SPECIES, (byte)-3);\n+        DoubleVector three = DoubleVector.broadcast(SPECIES, (byte) -3);\n@@ -1370,1 +1367,1 @@\n-        m = higher.min((double)-1).test(VectorOperators.IS_NEGATIVE);\n+        m = higher.min((double) -1).test(VectorOperators.IS_NEGATIVE);\n@@ -1375,1 +1372,1 @@\n-        assert(max == -3 + scale * (SPECIES.length()-1));\n+        assert(max == -3 + scale * (SPECIES.length() - 1));\n@@ -1390,1 +1387,1 @@\n-        DoubleVector io2 = (DoubleVector) VectorShuffle.iota(SPECIES,0,1,false).toVector();\n+        DoubleVector io2 = (DoubleVector) VectorShuffle.iota(SPECIES, 0, 1, false).toVector();\n@@ -1392,1 +1389,1 @@\n-        DoubleVector a = io.add((double)1); \/\/[1,2]\n+        DoubleVector a = io.add((double) 1); \/\/[1,2]\n@@ -1397,2 +1394,2 @@\n-        DoubleVector zab0 = a.rearrange(zip0,b); \/\/[1,-1]\n-        DoubleVector zab1 = a.rearrange(zip1,b); \/\/[2,-2]\n+        DoubleVector zab0 = a.rearrange(zip0, b); \/\/[1,-1]\n+        DoubleVector zab1 = a.rearrange(zip1, b); \/\/[2,-2]\n@@ -1403,2 +1400,2 @@\n-            manual[i+0] = abValues[i\/2];\n-            manual[i+1] = abValues[a.length() + i\/2];\n+            manual[i + 0] = abValues[i \/ 2];\n+            manual[i + 1] = abValues[a.length() + i \/ 2];\n@@ -1409,2 +1406,2 @@\n-        DoubleVector uab0 = zab0.rearrange(unz0,zab1);\n-        DoubleVector uab1 = zab0.rearrange(unz1,zab1);\n+        DoubleVector uab0 = zab0.rearrange(unz0, zab1);\n+        DoubleVector uab1 = zab0.rearrange(unz1, zab1);\n@@ -1447,1 +1444,1 @@\n-        return (double)(a + b);\n+        return (double) (a + b);\n@@ -1467,1 +1464,1 @@\n-        return (double)(a + b);\n+        return (double) (a + b);\n@@ -1523,1 +1520,1 @@\n-        return (double)(a - b);\n+        return (double) (a - b);\n@@ -1543,1 +1540,1 @@\n-        return (double)(a - b);\n+        return (double) (a - b);\n@@ -1599,1 +1596,1 @@\n-        return (double)(a * b);\n+        return (double) (a * b);\n@@ -1619,1 +1616,1 @@\n-        return (double)(a * b);\n+        return (double) (a * b);\n@@ -1676,1 +1673,1 @@\n-        return (double)(a \/ b);\n+        return (double) (a \/ b);\n@@ -1696,1 +1693,1 @@\n-        return (double)(a \/ b);\n+        return (double) (a \/ b);\n@@ -1757,1 +1754,1 @@\n-        return (double)(Double.doubleToLongBits(a)!=0?a:b);\n+        return (double) (Double.doubleToLongBits(a) != 0 ? a : b);\n@@ -1949,1 +1946,1 @@\n-            av.lanewise(VectorOperators.ADD, (long)b[i]).intoArray(r, i);\n+            av.lanewise(VectorOperators.ADD, (long) b[i]).intoArray(r, i);\n@@ -1966,1 +1963,1 @@\n-            av.lanewise(VectorOperators.ADD, (long)b[i], vmask).intoArray(r, i);\n+            av.lanewise(VectorOperators.ADD, (long) b[i], vmask).intoArray(r, i);\n@@ -2016,1 +2013,1 @@\n-        return (double)(Math.min(a, b));\n+        return (double) (Math.min(a, b));\n@@ -2036,1 +2033,1 @@\n-        return (double)(Math.min(a, b));\n+        return (double) (Math.min(a, b));\n@@ -2054,1 +2051,1 @@\n-        return (double)(Math.max(a, b));\n+        return (double) (Math.max(a, b));\n@@ -2074,1 +2071,1 @@\n-        return (double)(Math.max(a, b));\n+        return (double) (Math.max(a, b));\n@@ -2597,1 +2594,1 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (double)(65535+i)).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length() - 1)), (double) (65535 + i)).intoArray(r, i);\n@@ -2603,1 +2600,1 @@\n-            assertInsertArraysEquals(r, a, (double)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+            assertInsertArraysEquals(r, a, (double) (65535 + i), (j++ & (SPECIES.length() - 1)), i , i + SPECIES.length());\n@@ -2607,1 +2604,1 @@\n-        return bits(a)==0;\n+        return bits(a) == 0;\n@@ -2640,1 +2637,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_DEFAULT(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_DEFAULT(a[i + j]));\n@@ -2645,1 +2642,1 @@\n-        return bits(a)<0;\n+        return bits(a) < 0;\n@@ -2678,1 +2675,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_NEGATIVE(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_NEGATIVE(a[i + j]));\n@@ -2717,1 +2714,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_FINITE(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_FINITE(a[i + j]));\n@@ -2757,1 +2754,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_NAN(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_NAN(a[i + j]));\n@@ -2797,1 +2794,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_INFINITE(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_INFINITE(a[i + j]));\n@@ -3125,1 +3122,0 @@\n-\n@@ -3153,1 +3149,1 @@\n-            VectorMask<Double> mv = av.compare(VectorOperators.LT, (long)b[i]);\n+            VectorMask<Double> mv = av.compare(VectorOperators.LT, (long) b[i]);\n@@ -3157,1 +3153,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), a[i + j] < (double)((long)b[i]));\n+                Assert.assertEquals(mv.laneIsSet(j), a[i + j] < (double) ((long) b[i]));\n@@ -3162,1 +3158,0 @@\n-\n@@ -3174,1 +3169,1 @@\n-            VectorMask<Double> mv = av.compare(VectorOperators.LT, (long)b[i], vmask);\n+            VectorMask<Double> mv = av.compare(VectorOperators.LT, (long) b[i], vmask);\n@@ -3178,1 +3173,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] < (double)((long)b[i])));\n+                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] < (double) ((long) b[i])));\n@@ -3199,1 +3194,0 @@\n-\n@@ -3227,1 +3221,1 @@\n-            VectorMask<Double> mv = av.compare(VectorOperators.EQ, (long)b[i]);\n+            VectorMask<Double> mv = av.compare(VectorOperators.EQ, (long) b[i]);\n@@ -3231,1 +3225,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), a[i + j] == (double)((long)b[i]));\n+                Assert.assertEquals(mv.laneIsSet(j), a[i + j] == (double) ((long) b[i]));\n@@ -3236,1 +3230,0 @@\n-\n@@ -3248,1 +3241,1 @@\n-            VectorMask<Double> mv = av.compare(VectorOperators.EQ, (long)b[i], vmask);\n+            VectorMask<Double> mv = av.compare(VectorOperators.EQ, (long) b[i], vmask);\n@@ -3252,1 +3245,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] == (double)((long)b[i])));\n+                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] == (double) ((long) b[i])));\n@@ -3363,1 +3356,1 @@\n-                    r[i]=av.lane(0);\n+                    r[i] = av.lane(0);\n@@ -3365,2 +3358,2 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n@@ -3368,4 +3361,4 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n@@ -3373,8 +3366,8 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n@@ -3382,16 +3375,16 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n@@ -3399,32 +3392,32 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n@@ -3432,64 +3425,64 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n-                    r[i+32]=av.lane(32);\n-                    r[i+33]=av.lane(33);\n-                    r[i+34]=av.lane(34);\n-                    r[i+35]=av.lane(35);\n-                    r[i+36]=av.lane(36);\n-                    r[i+37]=av.lane(37);\n-                    r[i+38]=av.lane(38);\n-                    r[i+39]=av.lane(39);\n-                    r[i+40]=av.lane(40);\n-                    r[i+41]=av.lane(41);\n-                    r[i+42]=av.lane(42);\n-                    r[i+43]=av.lane(43);\n-                    r[i+44]=av.lane(44);\n-                    r[i+45]=av.lane(45);\n-                    r[i+46]=av.lane(46);\n-                    r[i+47]=av.lane(47);\n-                    r[i+48]=av.lane(48);\n-                    r[i+49]=av.lane(49);\n-                    r[i+50]=av.lane(50);\n-                    r[i+51]=av.lane(51);\n-                    r[i+52]=av.lane(52);\n-                    r[i+53]=av.lane(53);\n-                    r[i+54]=av.lane(54);\n-                    r[i+55]=av.lane(55);\n-                    r[i+56]=av.lane(56);\n-                    r[i+57]=av.lane(57);\n-                    r[i+58]=av.lane(58);\n-                    r[i+59]=av.lane(59);\n-                    r[i+60]=av.lane(60);\n-                    r[i+61]=av.lane(61);\n-                    r[i+62]=av.lane(62);\n-                    r[i+63]=av.lane(63);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n+                    r[i + 32] = av.lane(32);\n+                    r[i + 33] = av.lane(33);\n+                    r[i + 34] = av.lane(34);\n+                    r[i + 35] = av.lane(35);\n+                    r[i + 36] = av.lane(36);\n+                    r[i + 37] = av.lane(37);\n+                    r[i + 38] = av.lane(38);\n+                    r[i + 39] = av.lane(39);\n+                    r[i + 40] = av.lane(40);\n+                    r[i + 41] = av.lane(41);\n+                    r[i + 42] = av.lane(42);\n+                    r[i + 43] = av.lane(43);\n+                    r[i + 44] = av.lane(44);\n+                    r[i + 45] = av.lane(45);\n+                    r[i + 46] = av.lane(46);\n+                    r[i + 47] = av.lane(47);\n+                    r[i + 48] = av.lane(48);\n+                    r[i + 49] = av.lane(49);\n+                    r[i + 50] = av.lane(50);\n+                    r[i + 51] = av.lane(51);\n+                    r[i + 52] = av.lane(52);\n+                    r[i + 53] = av.lane(53);\n+                    r[i + 54] = av.lane(54);\n+                    r[i + 55] = av.lane(55);\n+                    r[i + 56] = av.lane(56);\n+                    r[i + 57] = av.lane(57);\n+                    r[i + 58] = av.lane(58);\n+                    r[i + 59] = av.lane(59);\n+                    r[i + 60] = av.lane(60);\n+                    r[i + 61] = av.lane(61);\n+                    r[i + 62] = av.lane(62);\n+                    r[i + 63] = av.lane(63);\n@@ -3498,1 +3491,1 @@\n-                        r[i+j]=av.lane(j);\n+                        r[i + j] = av.lane(j);\n@@ -3539,3 +3532,0 @@\n-\n-\n-\n@@ -3545,2 +3535,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = a[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = a[idx + i + origin];\n@@ -3548,1 +3538,1 @@\n-                res[i] = (double)0;\n+                res[i] = (double) 0;\n@@ -3571,1 +3561,1 @@\n-                res[i] = a[idx+i+origin];\n+                res[i] = a[idx + i + origin];\n@@ -3573,1 +3563,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n@@ -3599,2 +3589,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = mask[i] ? a[idx+i+origin] : (double)0;\n+            if(i + origin < SPECIES.length())\n+                res[i] = mask[i] ? a[idx + i + origin] : (double) 0;\n@@ -3602,1 +3592,1 @@\n-                res[i] = mask[i] ? b[idx+j] : (double)0;\n+                res[i] = mask[i] ? b[idx + j] : (double) 0;\n@@ -3633,1 +3623,1 @@\n-                res[i] = (double)0;\n+                res[i] = (double) 0;\n@@ -3635,1 +3625,1 @@\n-                res[i] = a[idx+j];\n+                res[i] = a[idx + j];\n@@ -3661,1 +3651,1 @@\n-                    res[i] = b[idx+i];\n+                    res[i] = b[idx + i];\n@@ -3663,1 +3653,1 @@\n-                    res[i] = a[idx+j];\n+                    res[i] = a[idx + j];\n@@ -3668,1 +3658,1 @@\n-                    res[i] = a[idx+SPECIES.length()-origin+i];\n+                    res[i] = a[idx + SPECIES.length() - origin + i];\n@@ -3670,1 +3660,1 @@\n-                    res[i] = b[idx+origin+j];\n+                    res[i] = b[idx + origin + j];\n@@ -3698,2 +3688,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = b[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = b[idx + i + origin];\n@@ -3701,1 +3691,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n@@ -3706,1 +3696,1 @@\n-            res[i] = mask[i] ? a[idx+i] : res[i];\n+            res[i] = mask[i] ? a[idx + i] : res[i];\n@@ -3712,1 +3702,1 @@\n-                    res1[i] = b[idx+i];\n+                    res1[i] = b[idx + i];\n@@ -3714,2 +3704,2 @@\n-                   res1[i] = res[j];\n-                   j++;\n+                    res1[i] = res[j];\n+                    j++;\n@@ -3721,1 +3711,1 @@\n-                    res1[i] = res[SPECIES.length()-origin+i];\n+                    res1[i] = res[SPECIES.length() - origin + i];\n@@ -3723,1 +3713,1 @@\n-                    res1[i] = b[idx+origin+j];\n+                    res1[i] = b[idx + origin + j];\n@@ -3753,1 +3743,1 @@\n-        return (double)(Math.sin((double)a));\n+        return (double) (Math.sin((double) a));\n@@ -3757,1 +3747,1 @@\n-        return (double)(StrictMath.sin((double)a));\n+        return (double) (StrictMath.sin((double) a));\n@@ -3777,1 +3767,1 @@\n-        return (double)(Math.exp((double)a));\n+        return (double) (Math.exp((double) a));\n@@ -3781,1 +3771,1 @@\n-        return (double)(StrictMath.exp((double)a));\n+        return (double) (StrictMath.exp((double) a));\n@@ -3801,1 +3791,1 @@\n-        return (double)(Math.log1p((double)a));\n+        return (double) (Math.log1p((double) a));\n@@ -3805,1 +3795,1 @@\n-        return (double)(StrictMath.log1p((double)a));\n+        return (double) (StrictMath.log1p((double) a));\n@@ -3825,1 +3815,1 @@\n-        return (double)(Math.log((double)a));\n+        return (double) (Math.log((double) a));\n@@ -3829,1 +3819,1 @@\n-        return (double)(StrictMath.log((double)a));\n+        return (double) (StrictMath.log((double) a));\n@@ -3849,1 +3839,1 @@\n-        return (double)(Math.log10((double)a));\n+        return (double) (Math.log10((double) a));\n@@ -3853,1 +3843,1 @@\n-        return (double)(StrictMath.log10((double)a));\n+        return (double) (StrictMath.log10((double) a));\n@@ -3873,1 +3863,1 @@\n-        return (double)(Math.expm1((double)a));\n+        return (double) (Math.expm1((double) a));\n@@ -3877,1 +3867,1 @@\n-        return (double)(StrictMath.expm1((double)a));\n+        return (double) (StrictMath.expm1((double) a));\n@@ -3897,1 +3887,1 @@\n-        return (double)(Math.cos((double)a));\n+        return (double) (Math.cos((double) a));\n@@ -3901,1 +3891,1 @@\n-        return (double)(StrictMath.cos((double)a));\n+        return (double) (StrictMath.cos((double) a));\n@@ -3921,1 +3911,1 @@\n-        return (double)(Math.tan((double)a));\n+        return (double) (Math.tan((double) a));\n@@ -3925,1 +3915,1 @@\n-        return (double)(StrictMath.tan((double)a));\n+        return (double) (StrictMath.tan((double) a));\n@@ -3945,1 +3935,1 @@\n-        return (double)(Math.sinh((double)a));\n+        return (double) (Math.sinh((double) a));\n@@ -3949,1 +3939,1 @@\n-        return (double)(StrictMath.sinh((double)a));\n+        return (double) (StrictMath.sinh((double) a));\n@@ -3969,1 +3959,1 @@\n-        return (double)(Math.cosh((double)a));\n+        return (double) (Math.cosh((double) a));\n@@ -3973,1 +3963,1 @@\n-        return (double)(StrictMath.cosh((double)a));\n+        return (double) (StrictMath.cosh((double) a));\n@@ -3993,1 +3983,1 @@\n-        return (double)(Math.tanh((double)a));\n+        return (double) (Math.tanh((double) a));\n@@ -3997,1 +3987,1 @@\n-        return (double)(StrictMath.tanh((double)a));\n+        return (double) (StrictMath.tanh((double) a));\n@@ -4017,1 +4007,1 @@\n-        return (double)(Math.asin((double)a));\n+        return (double) (Math.asin((double) a));\n@@ -4021,1 +4011,1 @@\n-        return (double)(StrictMath.asin((double)a));\n+        return (double) (StrictMath.asin((double) a));\n@@ -4041,1 +4031,1 @@\n-        return (double)(Math.acos((double)a));\n+        return (double) (Math.acos((double) a));\n@@ -4045,1 +4035,1 @@\n-        return (double)(StrictMath.acos((double)a));\n+        return (double) (StrictMath.acos((double) a));\n@@ -4065,1 +4055,1 @@\n-        return (double)(Math.atan((double)a));\n+        return (double) (Math.atan((double) a));\n@@ -4069,1 +4059,1 @@\n-        return (double)(StrictMath.atan((double)a));\n+        return (double) (StrictMath.atan((double) a));\n@@ -4089,1 +4079,1 @@\n-        return (double)(Math.cbrt((double)a));\n+        return (double) (Math.cbrt((double) a));\n@@ -4093,1 +4083,1 @@\n-        return (double)(StrictMath.cbrt((double)a));\n+        return (double) (StrictMath.cbrt((double) a));\n@@ -4113,1 +4103,1 @@\n-        return (double)(Math.hypot((double)a, (double)b));\n+        return (double)(Math.hypot((double) a, (double) b));\n@@ -4117,1 +4107,1 @@\n-        return (double)(StrictMath.hypot((double)a, (double)b));\n+        return (double)(StrictMath.hypot((double) a, (double) b));\n@@ -4140,1 +4130,1 @@\n-        return (double)(Math.pow((double)a, (double)b));\n+        return (double)(Math.pow((double) a, (double) b));\n@@ -4144,1 +4134,1 @@\n-        return (double)(StrictMath.pow((double)a, (double)b));\n+        return (double)(StrictMath.pow((double) a, (double) b));\n@@ -4165,1 +4155,1 @@\n-        return (double)(Math.pow((double)a, (double)b));\n+        return (double)(Math.pow((double) a, (double) b));\n@@ -4169,1 +4159,1 @@\n-        return (double)(StrictMath.pow((double)a, (double)b));\n+        return (double)(StrictMath.pow((double) a, (double) b));\n@@ -4192,1 +4182,1 @@\n-        return (double)(Math.atan2((double)a, (double)b));\n+        return (double)(Math.atan2((double) a, (double) b));\n@@ -4196,1 +4186,1 @@\n-        return (double)(StrictMath.atan2((double)a, (double)b));\n+        return (double)(StrictMath.atan2((double) a, (double) b));\n@@ -4249,1 +4239,1 @@\n-        return (double)(Math.fma(a, b, c));\n+        return (double) (Math.fma(a, b, c));\n@@ -4252,1 +4242,1 @@\n-        return (double)(Math.fma(a, b, c));\n+        return (double) (Math.fma(a, b, c));\n@@ -4262,1 +4252,1 @@\n-           count = Math.max(5, count\/20); break;\n+           count = Math.max(5, count \/ 20); break;\n@@ -4287,1 +4277,1 @@\n-           count = Math.max(5, count\/20); break;\n+           count = Math.max(5, count \/ 20); break;\n@@ -4313,1 +4303,1 @@\n-           count = Math.max(5, count\/20); break;\n+           count = Math.max(5, count \/ 20); break;\n@@ -4484,1 +4474,1 @@\n-        return (double)(-((double)a));\n+        return (double) (-((double) a));\n@@ -4488,1 +4478,1 @@\n-        return (double)(-((double)a));\n+        return (double) (-((double) a));\n@@ -4540,1 +4530,1 @@\n-        return (double)(Math.abs((double)a));\n+        return (double) (Math.abs((double) a));\n@@ -4544,1 +4534,1 @@\n-        return (double)(Math.abs((double)a));\n+        return (double) (Math.abs((double) a));\n@@ -4603,1 +4593,1 @@\n-        return (double)(Math.sqrt((double)a));\n+        return (double) (Math.sqrt((double) a));\n@@ -4607,1 +4597,1 @@\n-        return (double)(Math.sqrt((double)a));\n+        return (double) (Math.sqrt((double) a));\n@@ -4770,1 +4760,1 @@\n-        return (long)res;\n+        return (long) res;\n@@ -4809,1 +4799,1 @@\n-        return (long)res;\n+        return (long) res;\n@@ -4866,1 +4856,1 @@\n-                av.blend((long)b[i], vmask).intoArray(r, i);\n+                av.blend((long) b[i], vmask).intoArray(r, i);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double128VectorTests.java","additions":321,"deletions":331,"binary":false,"changes":652,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,1 +74,1 @@\n-                Assert.assertEquals(r[i], mask[(i*8\/SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0);\n+                Assert.assertEquals(r[i], mask[(i * 8 \/ SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0);\n@@ -77,1 +77,1 @@\n-            Assert.assertEquals(r[i], mask[(i*8\/SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0, \"at index #\" + i);\n+            Assert.assertEquals(r[i], mask[(i * 8 \/ SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0, \"at index #\" + i);\n@@ -84,1 +84,1 @@\n-                            i -> (double)(i * 5));\n+                            i -> (double) (i * 5));\n@@ -88,1 +88,1 @@\n-                            i -> (((double)(i + 1) == 0) ? 1 : (double)(i + 1)));\n+                            i -> (((double) (i + 1) == 0) ? 1 : (double) (i + 1)));\n@@ -195,1 +195,1 @@\n-                            return new Object[]{fa, fb, bo};\n+                            return new Object[] {fa, fb, bo};\n@@ -206,1 +206,1 @@\n-                            return new Object[]{fa, fb, fm, bo};\n+                            return new Object[] {fa, fb, fm, bo};\n@@ -215,1 +215,1 @@\n-                    return new Object[]{fa, bo};\n+                    return new Object[] {fa, bo};\n@@ -225,1 +225,1 @@\n-                        return new Object[]{fa, fm, bo};\n+                        return new Object[] {fa, fm, bo};\n@@ -944,2 +944,0 @@\n-\n-\n@@ -1095,1 +1093,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double256VectorLoadStoreTests.java","additions":9,"deletions":12,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -93,1 +93,1 @@\n-            double[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            double[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -253,1 +253,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i+order[i + j]]);\n@@ -258,1 +258,1 @@\n-            Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i+order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]]);\n@@ -274,1 +274,1 @@\n-                    Assert.assertEquals(r[i + k], (double)0);\n+                    Assert.assertEquals(r[i + k], (double) 0);\n@@ -282,1 +282,1 @@\n-                Assert.assertEquals(r[idx], (double)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], (double) 0, \"at index #\" + idx);\n@@ -297,1 +297,1 @@\n-                        Assert.assertEquals(r[i + j], (double)0);\n+                        Assert.assertEquals(r[i + j], (double) 0);\n@@ -306,1 +306,1 @@\n-                Assert.assertEquals(r[idx], (double)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], (double) 0, \"at index #\" + idx);\n@@ -316,1 +316,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -321,1 +321,1 @@\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]]);\n@@ -331,1 +331,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + order[i + j]]);\n@@ -333,1 +333,1 @@\n-                         Assert.assertEquals(r[i+j], (double)0);\n+                         Assert.assertEquals(r[i + j], (double) 0);\n@@ -339,1 +339,1 @@\n-                Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -341,1 +341,1 @@\n-                Assert.assertEquals(r[i+j], (double)0, \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], (double) 0, \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -351,1 +351,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -353,1 +353,1 @@\n-                         Assert.assertEquals(r[i+j], (double)0);\n+                         Assert.assertEquals(r[i + j], (double) 0);\n@@ -359,1 +359,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -361,1 +361,1 @@\n-                Assert.assertEquals(r[i+j], (double)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], (double) 0, \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -370,1 +370,1 @@\n-                a[j]=a[idx];\n+                a[j] = a[idx];\n@@ -421,1 +421,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], (double)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])));\n+                Assert.assertEquals(r[i], f.apply(a[i], (double) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])));\n@@ -424,1 +424,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], (double)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])),\n+            Assert.assertEquals(r[i], f.apply(a[i], (double) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])),\n@@ -470,1 +470,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], (double)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n+                Assert.assertEquals(r[i], f.apply(a[i], (double) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n@@ -473,1 +473,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], (double)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]),\n+            Assert.assertEquals(r[i], f.apply(a[i], (double) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]),\n@@ -486,1 +486,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]));\n@@ -490,1 +490,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]), \"at index #\" + i + \", \" + j);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]), \"at index #\" + i + \", \" + j);\n@@ -504,1 +504,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]));\n@@ -508,1 +508,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i+j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i + j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n@@ -656,1 +656,0 @@\n-\n@@ -755,1 +754,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -760,1 +759,1 @@\n-            double[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            double[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -763,1 +762,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -765,1 +764,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -782,1 +781,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -787,1 +786,1 @@\n-            double[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            double[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -790,1 +789,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -792,1 +791,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -803,1 +802,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -808,1 +807,1 @@\n-            double[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            double[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -811,1 +810,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -813,1 +812,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -815,1 +814,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(r, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(r, i, i + SPECIES.length()))\n@@ -830,1 +829,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -835,1 +834,1 @@\n-            double[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            double[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -850,1 +849,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -855,1 +854,1 @@\n-            double[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            double[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -871,1 +870,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -876,1 +875,1 @@\n-            double[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            double[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -892,1 +891,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -897,1 +896,1 @@\n-            double[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            double[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -914,1 +913,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -919,1 +918,1 @@\n-            double[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            double[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -939,1 +938,1 @@\n-                return (int)0;\n+                return (int) 0;\n@@ -946,1 +945,1 @@\n-                            i -> (double)(-i * 5));\n+                            i -> (double) (-i * 5));\n@@ -950,1 +949,1 @@\n-                            i -> (double)(i * 5));\n+                            i -> (double) (i * 5));\n@@ -954,1 +953,1 @@\n-                            i -> (((double)(i + 1) == 0) ? 1 : (double)(i + 1)));\n+                            i -> (((double) (i + 1) == 0) ? 1 : (double) (i + 1)));\n@@ -958,1 +957,1 @@\n-                            i -> (double)intCornerCaseValue(i));\n+                            i -> (double) intCornerCaseValue(i));\n@@ -966,1 +965,1 @@\n-                Assert.assertEquals(r[i], (int)(a[i+offs]));\n+                Assert.assertEquals(r[i], (int) (a[i + offs]));\n@@ -969,1 +968,1 @@\n-            Assert.assertEquals(r[i], (int)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (int) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -984,1 +983,1 @@\n-                return (long)0;\n+                return (long) 0;\n@@ -991,1 +990,1 @@\n-                            i -> (double)(-i * 5));\n+                            i -> (double) (-i * 5));\n@@ -995,1 +994,1 @@\n-                            i -> (double)(i * 5));\n+                            i -> (double) (i * 5));\n@@ -999,1 +998,1 @@\n-                            i -> (((double)(i + 1) == 0) ? 1 : (double)(i + 1)));\n+                            i -> (((double) (i + 1) == 0) ? 1 : (double) (i + 1)));\n@@ -1003,1 +1002,1 @@\n-                            i -> (double)longCornerCaseValue(i));\n+                            i -> (double) longCornerCaseValue(i));\n@@ -1012,1 +1011,1 @@\n-                Assert.assertEquals(r[i], (long)(a[i+offs]));\n+                Assert.assertEquals(r[i], (long) (a[i + offs]));\n@@ -1015,1 +1014,1 @@\n-            Assert.assertEquals(r[i], (long)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (long) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -1020,1 +1019,0 @@\n-\n@@ -1028,1 +1026,1 @@\n-                            i -> (double)(-i * 5));\n+                            i -> (double) (-i * 5));\n@@ -1032,1 +1030,1 @@\n-                            i -> (double)(i * 5));\n+                            i -> (double) (i * 5));\n@@ -1036,1 +1034,1 @@\n-                            i -> (((double)(i + 1) == 0) ? 1 : (double)(i + 1)));\n+                            i -> (((double) (i + 1) == 0) ? 1 : (double) (i + 1)));\n@@ -1179,1 +1177,1 @@\n-                    a[i] = (double)RAND.nextInt(upper);\n+                    a[i] = (double) RAND.nextInt(upper);\n@@ -1204,1 +1202,0 @@\n-\n@@ -1208,1 +1205,1 @@\n-                            i -> (double)i);\n+                            i -> (double) i);\n@@ -1212,1 +1209,1 @@\n-                            i -> (double)(i - (s * BUFFER_REPS \/ 2)));\n+                            i -> (double) (i - (s * BUFFER_REPS \/ 2)));\n@@ -1216,1 +1213,1 @@\n-                            i -> (double)(i + 1));\n+                            i -> (double) (i + 1));\n@@ -1220,1 +1217,1 @@\n-                            i -> (double)(i - 2));\n+                            i -> (double) (i - 2));\n@@ -1224,1 +1221,1 @@\n-                            i -> i%3 == 0 ? (double)i : (i%3 == 1 ? (double)(i + 1) : (double)(i - 2)));\n+                            i -> i % 3 == 0 ? (double) i : (i % 3 == 1 ? (double) (i + 1) : (double) (i - 2)));\n@@ -1300,1 +1297,1 @@\n-                return (double)0.0;\n+                return (double) 0.0;\n@@ -1302,1 +1299,1 @@\n-                return (double)-0.0;\n+                return (double) -0.0;\n@@ -1356,1 +1353,1 @@\n-        DoubleVector three = DoubleVector.broadcast(SPECIES, (byte)-3);\n+        DoubleVector three = DoubleVector.broadcast(SPECIES, (byte) -3);\n@@ -1370,1 +1367,1 @@\n-        m = higher.min((double)-1).test(VectorOperators.IS_NEGATIVE);\n+        m = higher.min((double) -1).test(VectorOperators.IS_NEGATIVE);\n@@ -1375,1 +1372,1 @@\n-        assert(max == -3 + scale * (SPECIES.length()-1));\n+        assert(max == -3 + scale * (SPECIES.length() - 1));\n@@ -1390,1 +1387,1 @@\n-        DoubleVector io2 = (DoubleVector) VectorShuffle.iota(SPECIES,0,1,false).toVector();\n+        DoubleVector io2 = (DoubleVector) VectorShuffle.iota(SPECIES, 0, 1, false).toVector();\n@@ -1392,1 +1389,1 @@\n-        DoubleVector a = io.add((double)1); \/\/[1,2]\n+        DoubleVector a = io.add((double) 1); \/\/[1,2]\n@@ -1397,2 +1394,2 @@\n-        DoubleVector zab0 = a.rearrange(zip0,b); \/\/[1,-1]\n-        DoubleVector zab1 = a.rearrange(zip1,b); \/\/[2,-2]\n+        DoubleVector zab0 = a.rearrange(zip0, b); \/\/[1,-1]\n+        DoubleVector zab1 = a.rearrange(zip1, b); \/\/[2,-2]\n@@ -1403,2 +1400,2 @@\n-            manual[i+0] = abValues[i\/2];\n-            manual[i+1] = abValues[a.length() + i\/2];\n+            manual[i + 0] = abValues[i \/ 2];\n+            manual[i + 1] = abValues[a.length() + i \/ 2];\n@@ -1409,2 +1406,2 @@\n-        DoubleVector uab0 = zab0.rearrange(unz0,zab1);\n-        DoubleVector uab1 = zab0.rearrange(unz1,zab1);\n+        DoubleVector uab0 = zab0.rearrange(unz0, zab1);\n+        DoubleVector uab1 = zab0.rearrange(unz1, zab1);\n@@ -1447,1 +1444,1 @@\n-        return (double)(a + b);\n+        return (double) (a + b);\n@@ -1467,1 +1464,1 @@\n-        return (double)(a + b);\n+        return (double) (a + b);\n@@ -1523,1 +1520,1 @@\n-        return (double)(a - b);\n+        return (double) (a - b);\n@@ -1543,1 +1540,1 @@\n-        return (double)(a - b);\n+        return (double) (a - b);\n@@ -1599,1 +1596,1 @@\n-        return (double)(a * b);\n+        return (double) (a * b);\n@@ -1619,1 +1616,1 @@\n-        return (double)(a * b);\n+        return (double) (a * b);\n@@ -1676,1 +1673,1 @@\n-        return (double)(a \/ b);\n+        return (double) (a \/ b);\n@@ -1696,1 +1693,1 @@\n-        return (double)(a \/ b);\n+        return (double) (a \/ b);\n@@ -1757,1 +1754,1 @@\n-        return (double)(Double.doubleToLongBits(a)!=0?a:b);\n+        return (double) (Double.doubleToLongBits(a) != 0 ? a : b);\n@@ -1949,1 +1946,1 @@\n-            av.lanewise(VectorOperators.ADD, (long)b[i]).intoArray(r, i);\n+            av.lanewise(VectorOperators.ADD, (long) b[i]).intoArray(r, i);\n@@ -1966,1 +1963,1 @@\n-            av.lanewise(VectorOperators.ADD, (long)b[i], vmask).intoArray(r, i);\n+            av.lanewise(VectorOperators.ADD, (long) b[i], vmask).intoArray(r, i);\n@@ -2016,1 +2013,1 @@\n-        return (double)(Math.min(a, b));\n+        return (double) (Math.min(a, b));\n@@ -2036,1 +2033,1 @@\n-        return (double)(Math.min(a, b));\n+        return (double) (Math.min(a, b));\n@@ -2054,1 +2051,1 @@\n-        return (double)(Math.max(a, b));\n+        return (double) (Math.max(a, b));\n@@ -2074,1 +2071,1 @@\n-        return (double)(Math.max(a, b));\n+        return (double) (Math.max(a, b));\n@@ -2597,1 +2594,1 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (double)(65535+i)).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length() - 1)), (double) (65535 + i)).intoArray(r, i);\n@@ -2603,1 +2600,1 @@\n-            assertInsertArraysEquals(r, a, (double)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+            assertInsertArraysEquals(r, a, (double) (65535 + i), (j++ & (SPECIES.length() - 1)), i , i + SPECIES.length());\n@@ -2607,1 +2604,1 @@\n-        return bits(a)==0;\n+        return bits(a) == 0;\n@@ -2640,1 +2637,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_DEFAULT(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_DEFAULT(a[i + j]));\n@@ -2645,1 +2642,1 @@\n-        return bits(a)<0;\n+        return bits(a) < 0;\n@@ -2678,1 +2675,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_NEGATIVE(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_NEGATIVE(a[i + j]));\n@@ -2717,1 +2714,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_FINITE(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_FINITE(a[i + j]));\n@@ -2757,1 +2754,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_NAN(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_NAN(a[i + j]));\n@@ -2797,1 +2794,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_INFINITE(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_INFINITE(a[i + j]));\n@@ -3125,1 +3122,0 @@\n-\n@@ -3153,1 +3149,1 @@\n-            VectorMask<Double> mv = av.compare(VectorOperators.LT, (long)b[i]);\n+            VectorMask<Double> mv = av.compare(VectorOperators.LT, (long) b[i]);\n@@ -3157,1 +3153,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), a[i + j] < (double)((long)b[i]));\n+                Assert.assertEquals(mv.laneIsSet(j), a[i + j] < (double) ((long) b[i]));\n@@ -3162,1 +3158,0 @@\n-\n@@ -3174,1 +3169,1 @@\n-            VectorMask<Double> mv = av.compare(VectorOperators.LT, (long)b[i], vmask);\n+            VectorMask<Double> mv = av.compare(VectorOperators.LT, (long) b[i], vmask);\n@@ -3178,1 +3173,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] < (double)((long)b[i])));\n+                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] < (double) ((long) b[i])));\n@@ -3199,1 +3194,0 @@\n-\n@@ -3227,1 +3221,1 @@\n-            VectorMask<Double> mv = av.compare(VectorOperators.EQ, (long)b[i]);\n+            VectorMask<Double> mv = av.compare(VectorOperators.EQ, (long) b[i]);\n@@ -3231,1 +3225,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), a[i + j] == (double)((long)b[i]));\n+                Assert.assertEquals(mv.laneIsSet(j), a[i + j] == (double) ((long) b[i]));\n@@ -3236,1 +3230,0 @@\n-\n@@ -3248,1 +3241,1 @@\n-            VectorMask<Double> mv = av.compare(VectorOperators.EQ, (long)b[i], vmask);\n+            VectorMask<Double> mv = av.compare(VectorOperators.EQ, (long) b[i], vmask);\n@@ -3252,1 +3245,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] == (double)((long)b[i])));\n+                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] == (double) ((long) b[i])));\n@@ -3363,1 +3356,1 @@\n-                    r[i]=av.lane(0);\n+                    r[i] = av.lane(0);\n@@ -3365,2 +3358,2 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n@@ -3368,4 +3361,4 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n@@ -3373,8 +3366,8 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n@@ -3382,16 +3375,16 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n@@ -3399,32 +3392,32 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n@@ -3432,64 +3425,64 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n-                    r[i+32]=av.lane(32);\n-                    r[i+33]=av.lane(33);\n-                    r[i+34]=av.lane(34);\n-                    r[i+35]=av.lane(35);\n-                    r[i+36]=av.lane(36);\n-                    r[i+37]=av.lane(37);\n-                    r[i+38]=av.lane(38);\n-                    r[i+39]=av.lane(39);\n-                    r[i+40]=av.lane(40);\n-                    r[i+41]=av.lane(41);\n-                    r[i+42]=av.lane(42);\n-                    r[i+43]=av.lane(43);\n-                    r[i+44]=av.lane(44);\n-                    r[i+45]=av.lane(45);\n-                    r[i+46]=av.lane(46);\n-                    r[i+47]=av.lane(47);\n-                    r[i+48]=av.lane(48);\n-                    r[i+49]=av.lane(49);\n-                    r[i+50]=av.lane(50);\n-                    r[i+51]=av.lane(51);\n-                    r[i+52]=av.lane(52);\n-                    r[i+53]=av.lane(53);\n-                    r[i+54]=av.lane(54);\n-                    r[i+55]=av.lane(55);\n-                    r[i+56]=av.lane(56);\n-                    r[i+57]=av.lane(57);\n-                    r[i+58]=av.lane(58);\n-                    r[i+59]=av.lane(59);\n-                    r[i+60]=av.lane(60);\n-                    r[i+61]=av.lane(61);\n-                    r[i+62]=av.lane(62);\n-                    r[i+63]=av.lane(63);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n+                    r[i + 32] = av.lane(32);\n+                    r[i + 33] = av.lane(33);\n+                    r[i + 34] = av.lane(34);\n+                    r[i + 35] = av.lane(35);\n+                    r[i + 36] = av.lane(36);\n+                    r[i + 37] = av.lane(37);\n+                    r[i + 38] = av.lane(38);\n+                    r[i + 39] = av.lane(39);\n+                    r[i + 40] = av.lane(40);\n+                    r[i + 41] = av.lane(41);\n+                    r[i + 42] = av.lane(42);\n+                    r[i + 43] = av.lane(43);\n+                    r[i + 44] = av.lane(44);\n+                    r[i + 45] = av.lane(45);\n+                    r[i + 46] = av.lane(46);\n+                    r[i + 47] = av.lane(47);\n+                    r[i + 48] = av.lane(48);\n+                    r[i + 49] = av.lane(49);\n+                    r[i + 50] = av.lane(50);\n+                    r[i + 51] = av.lane(51);\n+                    r[i + 52] = av.lane(52);\n+                    r[i + 53] = av.lane(53);\n+                    r[i + 54] = av.lane(54);\n+                    r[i + 55] = av.lane(55);\n+                    r[i + 56] = av.lane(56);\n+                    r[i + 57] = av.lane(57);\n+                    r[i + 58] = av.lane(58);\n+                    r[i + 59] = av.lane(59);\n+                    r[i + 60] = av.lane(60);\n+                    r[i + 61] = av.lane(61);\n+                    r[i + 62] = av.lane(62);\n+                    r[i + 63] = av.lane(63);\n@@ -3498,1 +3491,1 @@\n-                        r[i+j]=av.lane(j);\n+                        r[i + j] = av.lane(j);\n@@ -3539,3 +3532,0 @@\n-\n-\n-\n@@ -3545,2 +3535,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = a[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = a[idx + i + origin];\n@@ -3548,1 +3538,1 @@\n-                res[i] = (double)0;\n+                res[i] = (double) 0;\n@@ -3571,1 +3561,1 @@\n-                res[i] = a[idx+i+origin];\n+                res[i] = a[idx + i + origin];\n@@ -3573,1 +3563,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n@@ -3599,2 +3589,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = mask[i] ? a[idx+i+origin] : (double)0;\n+            if(i + origin < SPECIES.length())\n+                res[i] = mask[i] ? a[idx + i + origin] : (double) 0;\n@@ -3602,1 +3592,1 @@\n-                res[i] = mask[i] ? b[idx+j] : (double)0;\n+                res[i] = mask[i] ? b[idx + j] : (double) 0;\n@@ -3633,1 +3623,1 @@\n-                res[i] = (double)0;\n+                res[i] = (double) 0;\n@@ -3635,1 +3625,1 @@\n-                res[i] = a[idx+j];\n+                res[i] = a[idx + j];\n@@ -3661,1 +3651,1 @@\n-                    res[i] = b[idx+i];\n+                    res[i] = b[idx + i];\n@@ -3663,1 +3653,1 @@\n-                    res[i] = a[idx+j];\n+                    res[i] = a[idx + j];\n@@ -3668,1 +3658,1 @@\n-                    res[i] = a[idx+SPECIES.length()-origin+i];\n+                    res[i] = a[idx + SPECIES.length() - origin + i];\n@@ -3670,1 +3660,1 @@\n-                    res[i] = b[idx+origin+j];\n+                    res[i] = b[idx + origin + j];\n@@ -3698,2 +3688,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = b[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = b[idx + i + origin];\n@@ -3701,1 +3691,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n@@ -3706,1 +3696,1 @@\n-            res[i] = mask[i] ? a[idx+i] : res[i];\n+            res[i] = mask[i] ? a[idx + i] : res[i];\n@@ -3712,1 +3702,1 @@\n-                    res1[i] = b[idx+i];\n+                    res1[i] = b[idx + i];\n@@ -3714,2 +3704,2 @@\n-                   res1[i] = res[j];\n-                   j++;\n+                    res1[i] = res[j];\n+                    j++;\n@@ -3721,1 +3711,1 @@\n-                    res1[i] = res[SPECIES.length()-origin+i];\n+                    res1[i] = res[SPECIES.length() - origin + i];\n@@ -3723,1 +3713,1 @@\n-                    res1[i] = b[idx+origin+j];\n+                    res1[i] = b[idx + origin + j];\n@@ -3753,1 +3743,1 @@\n-        return (double)(Math.sin((double)a));\n+        return (double) (Math.sin((double) a));\n@@ -3757,1 +3747,1 @@\n-        return (double)(StrictMath.sin((double)a));\n+        return (double) (StrictMath.sin((double) a));\n@@ -3777,1 +3767,1 @@\n-        return (double)(Math.exp((double)a));\n+        return (double) (Math.exp((double) a));\n@@ -3781,1 +3771,1 @@\n-        return (double)(StrictMath.exp((double)a));\n+        return (double) (StrictMath.exp((double) a));\n@@ -3801,1 +3791,1 @@\n-        return (double)(Math.log1p((double)a));\n+        return (double) (Math.log1p((double) a));\n@@ -3805,1 +3795,1 @@\n-        return (double)(StrictMath.log1p((double)a));\n+        return (double) (StrictMath.log1p((double) a));\n@@ -3825,1 +3815,1 @@\n-        return (double)(Math.log((double)a));\n+        return (double) (Math.log((double) a));\n@@ -3829,1 +3819,1 @@\n-        return (double)(StrictMath.log((double)a));\n+        return (double) (StrictMath.log((double) a));\n@@ -3849,1 +3839,1 @@\n-        return (double)(Math.log10((double)a));\n+        return (double) (Math.log10((double) a));\n@@ -3853,1 +3843,1 @@\n-        return (double)(StrictMath.log10((double)a));\n+        return (double) (StrictMath.log10((double) a));\n@@ -3873,1 +3863,1 @@\n-        return (double)(Math.expm1((double)a));\n+        return (double) (Math.expm1((double) a));\n@@ -3877,1 +3867,1 @@\n-        return (double)(StrictMath.expm1((double)a));\n+        return (double) (StrictMath.expm1((double) a));\n@@ -3897,1 +3887,1 @@\n-        return (double)(Math.cos((double)a));\n+        return (double) (Math.cos((double) a));\n@@ -3901,1 +3891,1 @@\n-        return (double)(StrictMath.cos((double)a));\n+        return (double) (StrictMath.cos((double) a));\n@@ -3921,1 +3911,1 @@\n-        return (double)(Math.tan((double)a));\n+        return (double) (Math.tan((double) a));\n@@ -3925,1 +3915,1 @@\n-        return (double)(StrictMath.tan((double)a));\n+        return (double) (StrictMath.tan((double) a));\n@@ -3945,1 +3935,1 @@\n-        return (double)(Math.sinh((double)a));\n+        return (double) (Math.sinh((double) a));\n@@ -3949,1 +3939,1 @@\n-        return (double)(StrictMath.sinh((double)a));\n+        return (double) (StrictMath.sinh((double) a));\n@@ -3969,1 +3959,1 @@\n-        return (double)(Math.cosh((double)a));\n+        return (double) (Math.cosh((double) a));\n@@ -3973,1 +3963,1 @@\n-        return (double)(StrictMath.cosh((double)a));\n+        return (double) (StrictMath.cosh((double) a));\n@@ -3993,1 +3983,1 @@\n-        return (double)(Math.tanh((double)a));\n+        return (double) (Math.tanh((double) a));\n@@ -3997,1 +3987,1 @@\n-        return (double)(StrictMath.tanh((double)a));\n+        return (double) (StrictMath.tanh((double) a));\n@@ -4017,1 +4007,1 @@\n-        return (double)(Math.asin((double)a));\n+        return (double) (Math.asin((double) a));\n@@ -4021,1 +4011,1 @@\n-        return (double)(StrictMath.asin((double)a));\n+        return (double) (StrictMath.asin((double) a));\n@@ -4041,1 +4031,1 @@\n-        return (double)(Math.acos((double)a));\n+        return (double) (Math.acos((double) a));\n@@ -4045,1 +4035,1 @@\n-        return (double)(StrictMath.acos((double)a));\n+        return (double) (StrictMath.acos((double) a));\n@@ -4065,1 +4055,1 @@\n-        return (double)(Math.atan((double)a));\n+        return (double) (Math.atan((double) a));\n@@ -4069,1 +4059,1 @@\n-        return (double)(StrictMath.atan((double)a));\n+        return (double) (StrictMath.atan((double) a));\n@@ -4089,1 +4079,1 @@\n-        return (double)(Math.cbrt((double)a));\n+        return (double) (Math.cbrt((double) a));\n@@ -4093,1 +4083,1 @@\n-        return (double)(StrictMath.cbrt((double)a));\n+        return (double) (StrictMath.cbrt((double) a));\n@@ -4113,1 +4103,1 @@\n-        return (double)(Math.hypot((double)a, (double)b));\n+        return (double)(Math.hypot((double) a, (double) b));\n@@ -4117,1 +4107,1 @@\n-        return (double)(StrictMath.hypot((double)a, (double)b));\n+        return (double)(StrictMath.hypot((double) a, (double) b));\n@@ -4140,1 +4130,1 @@\n-        return (double)(Math.pow((double)a, (double)b));\n+        return (double)(Math.pow((double) a, (double) b));\n@@ -4144,1 +4134,1 @@\n-        return (double)(StrictMath.pow((double)a, (double)b));\n+        return (double)(StrictMath.pow((double) a, (double) b));\n@@ -4165,1 +4155,1 @@\n-        return (double)(Math.pow((double)a, (double)b));\n+        return (double)(Math.pow((double) a, (double) b));\n@@ -4169,1 +4159,1 @@\n-        return (double)(StrictMath.pow((double)a, (double)b));\n+        return (double)(StrictMath.pow((double) a, (double) b));\n@@ -4192,1 +4182,1 @@\n-        return (double)(Math.atan2((double)a, (double)b));\n+        return (double)(Math.atan2((double) a, (double) b));\n@@ -4196,1 +4186,1 @@\n-        return (double)(StrictMath.atan2((double)a, (double)b));\n+        return (double)(StrictMath.atan2((double) a, (double) b));\n@@ -4249,1 +4239,1 @@\n-        return (double)(Math.fma(a, b, c));\n+        return (double) (Math.fma(a, b, c));\n@@ -4252,1 +4242,1 @@\n-        return (double)(Math.fma(a, b, c));\n+        return (double) (Math.fma(a, b, c));\n@@ -4262,1 +4252,1 @@\n-           count = Math.max(5, count\/20); break;\n+           count = Math.max(5, count \/ 20); break;\n@@ -4287,1 +4277,1 @@\n-           count = Math.max(5, count\/20); break;\n+           count = Math.max(5, count \/ 20); break;\n@@ -4313,1 +4303,1 @@\n-           count = Math.max(5, count\/20); break;\n+           count = Math.max(5, count \/ 20); break;\n@@ -4484,1 +4474,1 @@\n-        return (double)(-((double)a));\n+        return (double) (-((double) a));\n@@ -4488,1 +4478,1 @@\n-        return (double)(-((double)a));\n+        return (double) (-((double) a));\n@@ -4540,1 +4530,1 @@\n-        return (double)(Math.abs((double)a));\n+        return (double) (Math.abs((double) a));\n@@ -4544,1 +4534,1 @@\n-        return (double)(Math.abs((double)a));\n+        return (double) (Math.abs((double) a));\n@@ -4603,1 +4593,1 @@\n-        return (double)(Math.sqrt((double)a));\n+        return (double) (Math.sqrt((double) a));\n@@ -4607,1 +4597,1 @@\n-        return (double)(Math.sqrt((double)a));\n+        return (double) (Math.sqrt((double) a));\n@@ -4770,1 +4760,1 @@\n-        return (long)res;\n+        return (long) res;\n@@ -4809,1 +4799,1 @@\n-        return (long)res;\n+        return (long) res;\n@@ -4866,1 +4856,1 @@\n-                av.blend((long)b[i], vmask).intoArray(r, i);\n+                av.blend((long) b[i], vmask).intoArray(r, i);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double256VectorTests.java","additions":321,"deletions":331,"binary":false,"changes":652,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,1 +74,1 @@\n-                Assert.assertEquals(r[i], mask[(i*8\/SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0);\n+                Assert.assertEquals(r[i], mask[(i * 8 \/ SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0);\n@@ -77,1 +77,1 @@\n-            Assert.assertEquals(r[i], mask[(i*8\/SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0, \"at index #\" + i);\n+            Assert.assertEquals(r[i], mask[(i * 8 \/ SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0, \"at index #\" + i);\n@@ -84,1 +84,1 @@\n-                            i -> (double)(i * 5));\n+                            i -> (double) (i * 5));\n@@ -88,1 +88,1 @@\n-                            i -> (((double)(i + 1) == 0) ? 1 : (double)(i + 1)));\n+                            i -> (((double) (i + 1) == 0) ? 1 : (double) (i + 1)));\n@@ -195,1 +195,1 @@\n-                            return new Object[]{fa, fb, bo};\n+                            return new Object[] {fa, fb, bo};\n@@ -206,1 +206,1 @@\n-                            return new Object[]{fa, fb, fm, bo};\n+                            return new Object[] {fa, fb, fm, bo};\n@@ -215,1 +215,1 @@\n-                    return new Object[]{fa, bo};\n+                    return new Object[] {fa, bo};\n@@ -225,1 +225,1 @@\n-                        return new Object[]{fa, fm, bo};\n+                        return new Object[] {fa, fm, bo};\n@@ -944,2 +944,0 @@\n-\n-\n@@ -1095,1 +1093,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double512VectorLoadStoreTests.java","additions":9,"deletions":12,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -93,1 +93,1 @@\n-            double[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            double[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -253,1 +253,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i+order[i + j]]);\n@@ -258,1 +258,1 @@\n-            Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i+order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]]);\n@@ -274,1 +274,1 @@\n-                    Assert.assertEquals(r[i + k], (double)0);\n+                    Assert.assertEquals(r[i + k], (double) 0);\n@@ -282,1 +282,1 @@\n-                Assert.assertEquals(r[idx], (double)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], (double) 0, \"at index #\" + idx);\n@@ -297,1 +297,1 @@\n-                        Assert.assertEquals(r[i + j], (double)0);\n+                        Assert.assertEquals(r[i + j], (double) 0);\n@@ -306,1 +306,1 @@\n-                Assert.assertEquals(r[idx], (double)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], (double) 0, \"at index #\" + idx);\n@@ -316,1 +316,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -321,1 +321,1 @@\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]]);\n@@ -331,1 +331,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + order[i + j]]);\n@@ -333,1 +333,1 @@\n-                         Assert.assertEquals(r[i+j], (double)0);\n+                         Assert.assertEquals(r[i + j], (double) 0);\n@@ -339,1 +339,1 @@\n-                Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -341,1 +341,1 @@\n-                Assert.assertEquals(r[i+j], (double)0, \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], (double) 0, \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -351,1 +351,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -353,1 +353,1 @@\n-                         Assert.assertEquals(r[i+j], (double)0);\n+                         Assert.assertEquals(r[i + j], (double) 0);\n@@ -359,1 +359,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -361,1 +361,1 @@\n-                Assert.assertEquals(r[i+j], (double)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], (double) 0, \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -370,1 +370,1 @@\n-                a[j]=a[idx];\n+                a[j] = a[idx];\n@@ -421,1 +421,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], (double)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])));\n+                Assert.assertEquals(r[i], f.apply(a[i], (double) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])));\n@@ -424,1 +424,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], (double)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])),\n+            Assert.assertEquals(r[i], f.apply(a[i], (double) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])),\n@@ -470,1 +470,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], (double)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n+                Assert.assertEquals(r[i], f.apply(a[i], (double) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n@@ -473,1 +473,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], (double)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]),\n+            Assert.assertEquals(r[i], f.apply(a[i], (double) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]),\n@@ -486,1 +486,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]));\n@@ -490,1 +490,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]), \"at index #\" + i + \", \" + j);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]), \"at index #\" + i + \", \" + j);\n@@ -504,1 +504,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]));\n@@ -508,1 +508,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i+j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i + j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n@@ -656,1 +656,0 @@\n-\n@@ -755,1 +754,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -760,1 +759,1 @@\n-            double[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            double[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -763,1 +762,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -765,1 +764,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -782,1 +781,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -787,1 +786,1 @@\n-            double[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            double[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -790,1 +789,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -792,1 +791,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -803,1 +802,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -808,1 +807,1 @@\n-            double[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            double[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -811,1 +810,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -813,1 +812,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -815,1 +814,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(r, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(r, i, i + SPECIES.length()))\n@@ -830,1 +829,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -835,1 +834,1 @@\n-            double[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            double[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -850,1 +849,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -855,1 +854,1 @@\n-            double[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            double[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -871,1 +870,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -876,1 +875,1 @@\n-            double[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            double[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -892,1 +891,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -897,1 +896,1 @@\n-            double[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            double[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -914,1 +913,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -919,1 +918,1 @@\n-            double[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            double[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -939,1 +938,1 @@\n-                return (int)0;\n+                return (int) 0;\n@@ -946,1 +945,1 @@\n-                            i -> (double)(-i * 5));\n+                            i -> (double) (-i * 5));\n@@ -950,1 +949,1 @@\n-                            i -> (double)(i * 5));\n+                            i -> (double) (i * 5));\n@@ -954,1 +953,1 @@\n-                            i -> (((double)(i + 1) == 0) ? 1 : (double)(i + 1)));\n+                            i -> (((double) (i + 1) == 0) ? 1 : (double) (i + 1)));\n@@ -958,1 +957,1 @@\n-                            i -> (double)intCornerCaseValue(i));\n+                            i -> (double) intCornerCaseValue(i));\n@@ -966,1 +965,1 @@\n-                Assert.assertEquals(r[i], (int)(a[i+offs]));\n+                Assert.assertEquals(r[i], (int) (a[i + offs]));\n@@ -969,1 +968,1 @@\n-            Assert.assertEquals(r[i], (int)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (int) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -984,1 +983,1 @@\n-                return (long)0;\n+                return (long) 0;\n@@ -991,1 +990,1 @@\n-                            i -> (double)(-i * 5));\n+                            i -> (double) (-i * 5));\n@@ -995,1 +994,1 @@\n-                            i -> (double)(i * 5));\n+                            i -> (double) (i * 5));\n@@ -999,1 +998,1 @@\n-                            i -> (((double)(i + 1) == 0) ? 1 : (double)(i + 1)));\n+                            i -> (((double) (i + 1) == 0) ? 1 : (double) (i + 1)));\n@@ -1003,1 +1002,1 @@\n-                            i -> (double)longCornerCaseValue(i));\n+                            i -> (double) longCornerCaseValue(i));\n@@ -1012,1 +1011,1 @@\n-                Assert.assertEquals(r[i], (long)(a[i+offs]));\n+                Assert.assertEquals(r[i], (long) (a[i + offs]));\n@@ -1015,1 +1014,1 @@\n-            Assert.assertEquals(r[i], (long)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (long) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -1020,1 +1019,0 @@\n-\n@@ -1028,1 +1026,1 @@\n-                            i -> (double)(-i * 5));\n+                            i -> (double) (-i * 5));\n@@ -1032,1 +1030,1 @@\n-                            i -> (double)(i * 5));\n+                            i -> (double) (i * 5));\n@@ -1036,1 +1034,1 @@\n-                            i -> (((double)(i + 1) == 0) ? 1 : (double)(i + 1)));\n+                            i -> (((double) (i + 1) == 0) ? 1 : (double) (i + 1)));\n@@ -1179,1 +1177,1 @@\n-                    a[i] = (double)RAND.nextInt(upper);\n+                    a[i] = (double) RAND.nextInt(upper);\n@@ -1204,1 +1202,0 @@\n-\n@@ -1208,1 +1205,1 @@\n-                            i -> (double)i);\n+                            i -> (double) i);\n@@ -1212,1 +1209,1 @@\n-                            i -> (double)(i - (s * BUFFER_REPS \/ 2)));\n+                            i -> (double) (i - (s * BUFFER_REPS \/ 2)));\n@@ -1216,1 +1213,1 @@\n-                            i -> (double)(i + 1));\n+                            i -> (double) (i + 1));\n@@ -1220,1 +1217,1 @@\n-                            i -> (double)(i - 2));\n+                            i -> (double) (i - 2));\n@@ -1224,1 +1221,1 @@\n-                            i -> i%3 == 0 ? (double)i : (i%3 == 1 ? (double)(i + 1) : (double)(i - 2)));\n+                            i -> i % 3 == 0 ? (double) i : (i % 3 == 1 ? (double) (i + 1) : (double) (i - 2)));\n@@ -1300,1 +1297,1 @@\n-                return (double)0.0;\n+                return (double) 0.0;\n@@ -1302,1 +1299,1 @@\n-                return (double)-0.0;\n+                return (double) -0.0;\n@@ -1356,1 +1353,1 @@\n-        DoubleVector three = DoubleVector.broadcast(SPECIES, (byte)-3);\n+        DoubleVector three = DoubleVector.broadcast(SPECIES, (byte) -3);\n@@ -1370,1 +1367,1 @@\n-        m = higher.min((double)-1).test(VectorOperators.IS_NEGATIVE);\n+        m = higher.min((double) -1).test(VectorOperators.IS_NEGATIVE);\n@@ -1375,1 +1372,1 @@\n-        assert(max == -3 + scale * (SPECIES.length()-1));\n+        assert(max == -3 + scale * (SPECIES.length() - 1));\n@@ -1390,1 +1387,1 @@\n-        DoubleVector io2 = (DoubleVector) VectorShuffle.iota(SPECIES,0,1,false).toVector();\n+        DoubleVector io2 = (DoubleVector) VectorShuffle.iota(SPECIES, 0, 1, false).toVector();\n@@ -1392,1 +1389,1 @@\n-        DoubleVector a = io.add((double)1); \/\/[1,2]\n+        DoubleVector a = io.add((double) 1); \/\/[1,2]\n@@ -1397,2 +1394,2 @@\n-        DoubleVector zab0 = a.rearrange(zip0,b); \/\/[1,-1]\n-        DoubleVector zab1 = a.rearrange(zip1,b); \/\/[2,-2]\n+        DoubleVector zab0 = a.rearrange(zip0, b); \/\/[1,-1]\n+        DoubleVector zab1 = a.rearrange(zip1, b); \/\/[2,-2]\n@@ -1403,2 +1400,2 @@\n-            manual[i+0] = abValues[i\/2];\n-            manual[i+1] = abValues[a.length() + i\/2];\n+            manual[i + 0] = abValues[i \/ 2];\n+            manual[i + 1] = abValues[a.length() + i \/ 2];\n@@ -1409,2 +1406,2 @@\n-        DoubleVector uab0 = zab0.rearrange(unz0,zab1);\n-        DoubleVector uab1 = zab0.rearrange(unz1,zab1);\n+        DoubleVector uab0 = zab0.rearrange(unz0, zab1);\n+        DoubleVector uab1 = zab0.rearrange(unz1, zab1);\n@@ -1447,1 +1444,1 @@\n-        return (double)(a + b);\n+        return (double) (a + b);\n@@ -1467,1 +1464,1 @@\n-        return (double)(a + b);\n+        return (double) (a + b);\n@@ -1523,1 +1520,1 @@\n-        return (double)(a - b);\n+        return (double) (a - b);\n@@ -1543,1 +1540,1 @@\n-        return (double)(a - b);\n+        return (double) (a - b);\n@@ -1599,1 +1596,1 @@\n-        return (double)(a * b);\n+        return (double) (a * b);\n@@ -1619,1 +1616,1 @@\n-        return (double)(a * b);\n+        return (double) (a * b);\n@@ -1676,1 +1673,1 @@\n-        return (double)(a \/ b);\n+        return (double) (a \/ b);\n@@ -1696,1 +1693,1 @@\n-        return (double)(a \/ b);\n+        return (double) (a \/ b);\n@@ -1757,1 +1754,1 @@\n-        return (double)(Double.doubleToLongBits(a)!=0?a:b);\n+        return (double) (Double.doubleToLongBits(a) != 0 ? a : b);\n@@ -1949,1 +1946,1 @@\n-            av.lanewise(VectorOperators.ADD, (long)b[i]).intoArray(r, i);\n+            av.lanewise(VectorOperators.ADD, (long) b[i]).intoArray(r, i);\n@@ -1966,1 +1963,1 @@\n-            av.lanewise(VectorOperators.ADD, (long)b[i], vmask).intoArray(r, i);\n+            av.lanewise(VectorOperators.ADD, (long) b[i], vmask).intoArray(r, i);\n@@ -2016,1 +2013,1 @@\n-        return (double)(Math.min(a, b));\n+        return (double) (Math.min(a, b));\n@@ -2036,1 +2033,1 @@\n-        return (double)(Math.min(a, b));\n+        return (double) (Math.min(a, b));\n@@ -2054,1 +2051,1 @@\n-        return (double)(Math.max(a, b));\n+        return (double) (Math.max(a, b));\n@@ -2074,1 +2071,1 @@\n-        return (double)(Math.max(a, b));\n+        return (double) (Math.max(a, b));\n@@ -2597,1 +2594,1 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (double)(65535+i)).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length() - 1)), (double) (65535 + i)).intoArray(r, i);\n@@ -2603,1 +2600,1 @@\n-            assertInsertArraysEquals(r, a, (double)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+            assertInsertArraysEquals(r, a, (double) (65535 + i), (j++ & (SPECIES.length() - 1)), i , i + SPECIES.length());\n@@ -2607,1 +2604,1 @@\n-        return bits(a)==0;\n+        return bits(a) == 0;\n@@ -2640,1 +2637,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_DEFAULT(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_DEFAULT(a[i + j]));\n@@ -2645,1 +2642,1 @@\n-        return bits(a)<0;\n+        return bits(a) < 0;\n@@ -2678,1 +2675,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_NEGATIVE(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_NEGATIVE(a[i + j]));\n@@ -2717,1 +2714,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_FINITE(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_FINITE(a[i + j]));\n@@ -2757,1 +2754,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_NAN(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_NAN(a[i + j]));\n@@ -2797,1 +2794,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_INFINITE(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_INFINITE(a[i + j]));\n@@ -3125,1 +3122,0 @@\n-\n@@ -3153,1 +3149,1 @@\n-            VectorMask<Double> mv = av.compare(VectorOperators.LT, (long)b[i]);\n+            VectorMask<Double> mv = av.compare(VectorOperators.LT, (long) b[i]);\n@@ -3157,1 +3153,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), a[i + j] < (double)((long)b[i]));\n+                Assert.assertEquals(mv.laneIsSet(j), a[i + j] < (double) ((long) b[i]));\n@@ -3162,1 +3158,0 @@\n-\n@@ -3174,1 +3169,1 @@\n-            VectorMask<Double> mv = av.compare(VectorOperators.LT, (long)b[i], vmask);\n+            VectorMask<Double> mv = av.compare(VectorOperators.LT, (long) b[i], vmask);\n@@ -3178,1 +3173,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] < (double)((long)b[i])));\n+                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] < (double) ((long) b[i])));\n@@ -3199,1 +3194,0 @@\n-\n@@ -3227,1 +3221,1 @@\n-            VectorMask<Double> mv = av.compare(VectorOperators.EQ, (long)b[i]);\n+            VectorMask<Double> mv = av.compare(VectorOperators.EQ, (long) b[i]);\n@@ -3231,1 +3225,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), a[i + j] == (double)((long)b[i]));\n+                Assert.assertEquals(mv.laneIsSet(j), a[i + j] == (double) ((long) b[i]));\n@@ -3236,1 +3230,0 @@\n-\n@@ -3248,1 +3241,1 @@\n-            VectorMask<Double> mv = av.compare(VectorOperators.EQ, (long)b[i], vmask);\n+            VectorMask<Double> mv = av.compare(VectorOperators.EQ, (long) b[i], vmask);\n@@ -3252,1 +3245,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] == (double)((long)b[i])));\n+                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] == (double) ((long) b[i])));\n@@ -3363,1 +3356,1 @@\n-                    r[i]=av.lane(0);\n+                    r[i] = av.lane(0);\n@@ -3365,2 +3358,2 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n@@ -3368,4 +3361,4 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n@@ -3373,8 +3366,8 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n@@ -3382,16 +3375,16 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n@@ -3399,32 +3392,32 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n@@ -3432,64 +3425,64 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n-                    r[i+32]=av.lane(32);\n-                    r[i+33]=av.lane(33);\n-                    r[i+34]=av.lane(34);\n-                    r[i+35]=av.lane(35);\n-                    r[i+36]=av.lane(36);\n-                    r[i+37]=av.lane(37);\n-                    r[i+38]=av.lane(38);\n-                    r[i+39]=av.lane(39);\n-                    r[i+40]=av.lane(40);\n-                    r[i+41]=av.lane(41);\n-                    r[i+42]=av.lane(42);\n-                    r[i+43]=av.lane(43);\n-                    r[i+44]=av.lane(44);\n-                    r[i+45]=av.lane(45);\n-                    r[i+46]=av.lane(46);\n-                    r[i+47]=av.lane(47);\n-                    r[i+48]=av.lane(48);\n-                    r[i+49]=av.lane(49);\n-                    r[i+50]=av.lane(50);\n-                    r[i+51]=av.lane(51);\n-                    r[i+52]=av.lane(52);\n-                    r[i+53]=av.lane(53);\n-                    r[i+54]=av.lane(54);\n-                    r[i+55]=av.lane(55);\n-                    r[i+56]=av.lane(56);\n-                    r[i+57]=av.lane(57);\n-                    r[i+58]=av.lane(58);\n-                    r[i+59]=av.lane(59);\n-                    r[i+60]=av.lane(60);\n-                    r[i+61]=av.lane(61);\n-                    r[i+62]=av.lane(62);\n-                    r[i+63]=av.lane(63);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n+                    r[i + 32] = av.lane(32);\n+                    r[i + 33] = av.lane(33);\n+                    r[i + 34] = av.lane(34);\n+                    r[i + 35] = av.lane(35);\n+                    r[i + 36] = av.lane(36);\n+                    r[i + 37] = av.lane(37);\n+                    r[i + 38] = av.lane(38);\n+                    r[i + 39] = av.lane(39);\n+                    r[i + 40] = av.lane(40);\n+                    r[i + 41] = av.lane(41);\n+                    r[i + 42] = av.lane(42);\n+                    r[i + 43] = av.lane(43);\n+                    r[i + 44] = av.lane(44);\n+                    r[i + 45] = av.lane(45);\n+                    r[i + 46] = av.lane(46);\n+                    r[i + 47] = av.lane(47);\n+                    r[i + 48] = av.lane(48);\n+                    r[i + 49] = av.lane(49);\n+                    r[i + 50] = av.lane(50);\n+                    r[i + 51] = av.lane(51);\n+                    r[i + 52] = av.lane(52);\n+                    r[i + 53] = av.lane(53);\n+                    r[i + 54] = av.lane(54);\n+                    r[i + 55] = av.lane(55);\n+                    r[i + 56] = av.lane(56);\n+                    r[i + 57] = av.lane(57);\n+                    r[i + 58] = av.lane(58);\n+                    r[i + 59] = av.lane(59);\n+                    r[i + 60] = av.lane(60);\n+                    r[i + 61] = av.lane(61);\n+                    r[i + 62] = av.lane(62);\n+                    r[i + 63] = av.lane(63);\n@@ -3498,1 +3491,1 @@\n-                        r[i+j]=av.lane(j);\n+                        r[i + j] = av.lane(j);\n@@ -3539,3 +3532,0 @@\n-\n-\n-\n@@ -3545,2 +3535,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = a[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = a[idx + i + origin];\n@@ -3548,1 +3538,1 @@\n-                res[i] = (double)0;\n+                res[i] = (double) 0;\n@@ -3571,1 +3561,1 @@\n-                res[i] = a[idx+i+origin];\n+                res[i] = a[idx + i + origin];\n@@ -3573,1 +3563,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n@@ -3599,2 +3589,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = mask[i] ? a[idx+i+origin] : (double)0;\n+            if(i + origin < SPECIES.length())\n+                res[i] = mask[i] ? a[idx + i + origin] : (double) 0;\n@@ -3602,1 +3592,1 @@\n-                res[i] = mask[i] ? b[idx+j] : (double)0;\n+                res[i] = mask[i] ? b[idx + j] : (double) 0;\n@@ -3633,1 +3623,1 @@\n-                res[i] = (double)0;\n+                res[i] = (double) 0;\n@@ -3635,1 +3625,1 @@\n-                res[i] = a[idx+j];\n+                res[i] = a[idx + j];\n@@ -3661,1 +3651,1 @@\n-                    res[i] = b[idx+i];\n+                    res[i] = b[idx + i];\n@@ -3663,1 +3653,1 @@\n-                    res[i] = a[idx+j];\n+                    res[i] = a[idx + j];\n@@ -3668,1 +3658,1 @@\n-                    res[i] = a[idx+SPECIES.length()-origin+i];\n+                    res[i] = a[idx + SPECIES.length() - origin + i];\n@@ -3670,1 +3660,1 @@\n-                    res[i] = b[idx+origin+j];\n+                    res[i] = b[idx + origin + j];\n@@ -3698,2 +3688,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = b[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = b[idx + i + origin];\n@@ -3701,1 +3691,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n@@ -3706,1 +3696,1 @@\n-            res[i] = mask[i] ? a[idx+i] : res[i];\n+            res[i] = mask[i] ? a[idx + i] : res[i];\n@@ -3712,1 +3702,1 @@\n-                    res1[i] = b[idx+i];\n+                    res1[i] = b[idx + i];\n@@ -3714,2 +3704,2 @@\n-                   res1[i] = res[j];\n-                   j++;\n+                    res1[i] = res[j];\n+                    j++;\n@@ -3721,1 +3711,1 @@\n-                    res1[i] = res[SPECIES.length()-origin+i];\n+                    res1[i] = res[SPECIES.length() - origin + i];\n@@ -3723,1 +3713,1 @@\n-                    res1[i] = b[idx+origin+j];\n+                    res1[i] = b[idx + origin + j];\n@@ -3753,1 +3743,1 @@\n-        return (double)(Math.sin((double)a));\n+        return (double) (Math.sin((double) a));\n@@ -3757,1 +3747,1 @@\n-        return (double)(StrictMath.sin((double)a));\n+        return (double) (StrictMath.sin((double) a));\n@@ -3777,1 +3767,1 @@\n-        return (double)(Math.exp((double)a));\n+        return (double) (Math.exp((double) a));\n@@ -3781,1 +3771,1 @@\n-        return (double)(StrictMath.exp((double)a));\n+        return (double) (StrictMath.exp((double) a));\n@@ -3801,1 +3791,1 @@\n-        return (double)(Math.log1p((double)a));\n+        return (double) (Math.log1p((double) a));\n@@ -3805,1 +3795,1 @@\n-        return (double)(StrictMath.log1p((double)a));\n+        return (double) (StrictMath.log1p((double) a));\n@@ -3825,1 +3815,1 @@\n-        return (double)(Math.log((double)a));\n+        return (double) (Math.log((double) a));\n@@ -3829,1 +3819,1 @@\n-        return (double)(StrictMath.log((double)a));\n+        return (double) (StrictMath.log((double) a));\n@@ -3849,1 +3839,1 @@\n-        return (double)(Math.log10((double)a));\n+        return (double) (Math.log10((double) a));\n@@ -3853,1 +3843,1 @@\n-        return (double)(StrictMath.log10((double)a));\n+        return (double) (StrictMath.log10((double) a));\n@@ -3873,1 +3863,1 @@\n-        return (double)(Math.expm1((double)a));\n+        return (double) (Math.expm1((double) a));\n@@ -3877,1 +3867,1 @@\n-        return (double)(StrictMath.expm1((double)a));\n+        return (double) (StrictMath.expm1((double) a));\n@@ -3897,1 +3887,1 @@\n-        return (double)(Math.cos((double)a));\n+        return (double) (Math.cos((double) a));\n@@ -3901,1 +3891,1 @@\n-        return (double)(StrictMath.cos((double)a));\n+        return (double) (StrictMath.cos((double) a));\n@@ -3921,1 +3911,1 @@\n-        return (double)(Math.tan((double)a));\n+        return (double) (Math.tan((double) a));\n@@ -3925,1 +3915,1 @@\n-        return (double)(StrictMath.tan((double)a));\n+        return (double) (StrictMath.tan((double) a));\n@@ -3945,1 +3935,1 @@\n-        return (double)(Math.sinh((double)a));\n+        return (double) (Math.sinh((double) a));\n@@ -3949,1 +3939,1 @@\n-        return (double)(StrictMath.sinh((double)a));\n+        return (double) (StrictMath.sinh((double) a));\n@@ -3969,1 +3959,1 @@\n-        return (double)(Math.cosh((double)a));\n+        return (double) (Math.cosh((double) a));\n@@ -3973,1 +3963,1 @@\n-        return (double)(StrictMath.cosh((double)a));\n+        return (double) (StrictMath.cosh((double) a));\n@@ -3993,1 +3983,1 @@\n-        return (double)(Math.tanh((double)a));\n+        return (double) (Math.tanh((double) a));\n@@ -3997,1 +3987,1 @@\n-        return (double)(StrictMath.tanh((double)a));\n+        return (double) (StrictMath.tanh((double) a));\n@@ -4017,1 +4007,1 @@\n-        return (double)(Math.asin((double)a));\n+        return (double) (Math.asin((double) a));\n@@ -4021,1 +4011,1 @@\n-        return (double)(StrictMath.asin((double)a));\n+        return (double) (StrictMath.asin((double) a));\n@@ -4041,1 +4031,1 @@\n-        return (double)(Math.acos((double)a));\n+        return (double) (Math.acos((double) a));\n@@ -4045,1 +4035,1 @@\n-        return (double)(StrictMath.acos((double)a));\n+        return (double) (StrictMath.acos((double) a));\n@@ -4065,1 +4055,1 @@\n-        return (double)(Math.atan((double)a));\n+        return (double) (Math.atan((double) a));\n@@ -4069,1 +4059,1 @@\n-        return (double)(StrictMath.atan((double)a));\n+        return (double) (StrictMath.atan((double) a));\n@@ -4089,1 +4079,1 @@\n-        return (double)(Math.cbrt((double)a));\n+        return (double) (Math.cbrt((double) a));\n@@ -4093,1 +4083,1 @@\n-        return (double)(StrictMath.cbrt((double)a));\n+        return (double) (StrictMath.cbrt((double) a));\n@@ -4113,1 +4103,1 @@\n-        return (double)(Math.hypot((double)a, (double)b));\n+        return (double)(Math.hypot((double) a, (double) b));\n@@ -4117,1 +4107,1 @@\n-        return (double)(StrictMath.hypot((double)a, (double)b));\n+        return (double)(StrictMath.hypot((double) a, (double) b));\n@@ -4140,1 +4130,1 @@\n-        return (double)(Math.pow((double)a, (double)b));\n+        return (double)(Math.pow((double) a, (double) b));\n@@ -4144,1 +4134,1 @@\n-        return (double)(StrictMath.pow((double)a, (double)b));\n+        return (double)(StrictMath.pow((double) a, (double) b));\n@@ -4165,1 +4155,1 @@\n-        return (double)(Math.pow((double)a, (double)b));\n+        return (double)(Math.pow((double) a, (double) b));\n@@ -4169,1 +4159,1 @@\n-        return (double)(StrictMath.pow((double)a, (double)b));\n+        return (double)(StrictMath.pow((double) a, (double) b));\n@@ -4192,1 +4182,1 @@\n-        return (double)(Math.atan2((double)a, (double)b));\n+        return (double)(Math.atan2((double) a, (double) b));\n@@ -4196,1 +4186,1 @@\n-        return (double)(StrictMath.atan2((double)a, (double)b));\n+        return (double)(StrictMath.atan2((double) a, (double) b));\n@@ -4249,1 +4239,1 @@\n-        return (double)(Math.fma(a, b, c));\n+        return (double) (Math.fma(a, b, c));\n@@ -4252,1 +4242,1 @@\n-        return (double)(Math.fma(a, b, c));\n+        return (double) (Math.fma(a, b, c));\n@@ -4262,1 +4252,1 @@\n-           count = Math.max(5, count\/20); break;\n+           count = Math.max(5, count \/ 20); break;\n@@ -4287,1 +4277,1 @@\n-           count = Math.max(5, count\/20); break;\n+           count = Math.max(5, count \/ 20); break;\n@@ -4313,1 +4303,1 @@\n-           count = Math.max(5, count\/20); break;\n+           count = Math.max(5, count \/ 20); break;\n@@ -4484,1 +4474,1 @@\n-        return (double)(-((double)a));\n+        return (double) (-((double) a));\n@@ -4488,1 +4478,1 @@\n-        return (double)(-((double)a));\n+        return (double) (-((double) a));\n@@ -4540,1 +4530,1 @@\n-        return (double)(Math.abs((double)a));\n+        return (double) (Math.abs((double) a));\n@@ -4544,1 +4534,1 @@\n-        return (double)(Math.abs((double)a));\n+        return (double) (Math.abs((double) a));\n@@ -4603,1 +4593,1 @@\n-        return (double)(Math.sqrt((double)a));\n+        return (double) (Math.sqrt((double) a));\n@@ -4607,1 +4597,1 @@\n-        return (double)(Math.sqrt((double)a));\n+        return (double) (Math.sqrt((double) a));\n@@ -4770,1 +4760,1 @@\n-        return (long)res;\n+        return (long) res;\n@@ -4809,1 +4799,1 @@\n-        return (long)res;\n+        return (long) res;\n@@ -4866,1 +4856,1 @@\n-                av.blend((long)b[i], vmask).intoArray(r, i);\n+                av.blend((long) b[i], vmask).intoArray(r, i);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double512VectorTests.java","additions":321,"deletions":331,"binary":false,"changes":652,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,1 +74,1 @@\n-                Assert.assertEquals(r[i], mask[(i*8\/SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0);\n+                Assert.assertEquals(r[i], mask[(i * 8 \/ SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0);\n@@ -77,1 +77,1 @@\n-            Assert.assertEquals(r[i], mask[(i*8\/SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0, \"at index #\" + i);\n+            Assert.assertEquals(r[i], mask[(i * 8 \/ SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0, \"at index #\" + i);\n@@ -84,1 +84,1 @@\n-                            i -> (double)(i * 5));\n+                            i -> (double) (i * 5));\n@@ -88,1 +88,1 @@\n-                            i -> (((double)(i + 1) == 0) ? 1 : (double)(i + 1)));\n+                            i -> (((double) (i + 1) == 0) ? 1 : (double) (i + 1)));\n@@ -195,1 +195,1 @@\n-                            return new Object[]{fa, fb, bo};\n+                            return new Object[] {fa, fb, bo};\n@@ -206,1 +206,1 @@\n-                            return new Object[]{fa, fb, fm, bo};\n+                            return new Object[] {fa, fb, fm, bo};\n@@ -215,1 +215,1 @@\n-                    return new Object[]{fa, bo};\n+                    return new Object[] {fa, bo};\n@@ -225,1 +225,1 @@\n-                        return new Object[]{fa, fm, bo};\n+                        return new Object[] {fa, fm, bo};\n@@ -944,2 +944,0 @@\n-\n-\n@@ -1095,1 +1093,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double64VectorLoadStoreTests.java","additions":9,"deletions":12,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -93,1 +93,1 @@\n-            double[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            double[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -253,1 +253,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i+order[i + j]]);\n@@ -258,1 +258,1 @@\n-            Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i+order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]]);\n@@ -274,1 +274,1 @@\n-                    Assert.assertEquals(r[i + k], (double)0);\n+                    Assert.assertEquals(r[i + k], (double) 0);\n@@ -282,1 +282,1 @@\n-                Assert.assertEquals(r[idx], (double)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], (double) 0, \"at index #\" + idx);\n@@ -297,1 +297,1 @@\n-                        Assert.assertEquals(r[i + j], (double)0);\n+                        Assert.assertEquals(r[i + j], (double) 0);\n@@ -306,1 +306,1 @@\n-                Assert.assertEquals(r[idx], (double)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], (double) 0, \"at index #\" + idx);\n@@ -316,1 +316,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -321,1 +321,1 @@\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]]);\n@@ -331,1 +331,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + order[i + j]]);\n@@ -333,1 +333,1 @@\n-                         Assert.assertEquals(r[i+j], (double)0);\n+                         Assert.assertEquals(r[i + j], (double) 0);\n@@ -339,1 +339,1 @@\n-                Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -341,1 +341,1 @@\n-                Assert.assertEquals(r[i+j], (double)0, \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], (double) 0, \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -351,1 +351,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -353,1 +353,1 @@\n-                         Assert.assertEquals(r[i+j], (double)0);\n+                         Assert.assertEquals(r[i + j], (double) 0);\n@@ -359,1 +359,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -361,1 +361,1 @@\n-                Assert.assertEquals(r[i+j], (double)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], (double) 0, \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -370,1 +370,1 @@\n-                a[j]=a[idx];\n+                a[j] = a[idx];\n@@ -421,1 +421,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], (double)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])));\n+                Assert.assertEquals(r[i], f.apply(a[i], (double) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])));\n@@ -424,1 +424,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], (double)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])),\n+            Assert.assertEquals(r[i], f.apply(a[i], (double) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])),\n@@ -470,1 +470,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], (double)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n+                Assert.assertEquals(r[i], f.apply(a[i], (double) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n@@ -473,1 +473,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], (double)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]),\n+            Assert.assertEquals(r[i], f.apply(a[i], (double) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]),\n@@ -486,1 +486,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]));\n@@ -490,1 +490,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]), \"at index #\" + i + \", \" + j);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]), \"at index #\" + i + \", \" + j);\n@@ -504,1 +504,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]));\n@@ -508,1 +508,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i+j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i + j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n@@ -656,1 +656,0 @@\n-\n@@ -755,1 +754,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -760,1 +759,1 @@\n-            double[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            double[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -763,1 +762,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -765,1 +764,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -782,1 +781,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -787,1 +786,1 @@\n-            double[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            double[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -790,1 +789,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -792,1 +791,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -803,1 +802,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -808,1 +807,1 @@\n-            double[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            double[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -811,1 +810,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -813,1 +812,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -815,1 +814,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(r, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(r, i, i + SPECIES.length()))\n@@ -830,1 +829,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -835,1 +834,1 @@\n-            double[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            double[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -850,1 +849,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -855,1 +854,1 @@\n-            double[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            double[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -871,1 +870,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -876,1 +875,1 @@\n-            double[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            double[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -892,1 +891,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -897,1 +896,1 @@\n-            double[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            double[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -914,1 +913,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -919,1 +918,1 @@\n-            double[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            double[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -939,1 +938,1 @@\n-                return (int)0;\n+                return (int) 0;\n@@ -946,1 +945,1 @@\n-                            i -> (double)(-i * 5));\n+                            i -> (double) (-i * 5));\n@@ -950,1 +949,1 @@\n-                            i -> (double)(i * 5));\n+                            i -> (double) (i * 5));\n@@ -954,1 +953,1 @@\n-                            i -> (((double)(i + 1) == 0) ? 1 : (double)(i + 1)));\n+                            i -> (((double) (i + 1) == 0) ? 1 : (double) (i + 1)));\n@@ -958,1 +957,1 @@\n-                            i -> (double)intCornerCaseValue(i));\n+                            i -> (double) intCornerCaseValue(i));\n@@ -966,1 +965,1 @@\n-                Assert.assertEquals(r[i], (int)(a[i+offs]));\n+                Assert.assertEquals(r[i], (int) (a[i + offs]));\n@@ -969,1 +968,1 @@\n-            Assert.assertEquals(r[i], (int)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (int) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -984,1 +983,1 @@\n-                return (long)0;\n+                return (long) 0;\n@@ -991,1 +990,1 @@\n-                            i -> (double)(-i * 5));\n+                            i -> (double) (-i * 5));\n@@ -995,1 +994,1 @@\n-                            i -> (double)(i * 5));\n+                            i -> (double) (i * 5));\n@@ -999,1 +998,1 @@\n-                            i -> (((double)(i + 1) == 0) ? 1 : (double)(i + 1)));\n+                            i -> (((double) (i + 1) == 0) ? 1 : (double) (i + 1)));\n@@ -1003,1 +1002,1 @@\n-                            i -> (double)longCornerCaseValue(i));\n+                            i -> (double) longCornerCaseValue(i));\n@@ -1012,1 +1011,1 @@\n-                Assert.assertEquals(r[i], (long)(a[i+offs]));\n+                Assert.assertEquals(r[i], (long) (a[i + offs]));\n@@ -1015,1 +1014,1 @@\n-            Assert.assertEquals(r[i], (long)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (long) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -1020,1 +1019,0 @@\n-\n@@ -1028,1 +1026,1 @@\n-                            i -> (double)(-i * 5));\n+                            i -> (double) (-i * 5));\n@@ -1032,1 +1030,1 @@\n-                            i -> (double)(i * 5));\n+                            i -> (double) (i * 5));\n@@ -1036,1 +1034,1 @@\n-                            i -> (((double)(i + 1) == 0) ? 1 : (double)(i + 1)));\n+                            i -> (((double) (i + 1) == 0) ? 1 : (double) (i + 1)));\n@@ -1179,1 +1177,1 @@\n-                    a[i] = (double)RAND.nextInt(upper);\n+                    a[i] = (double) RAND.nextInt(upper);\n@@ -1204,1 +1202,0 @@\n-\n@@ -1208,1 +1205,1 @@\n-                            i -> (double)i);\n+                            i -> (double) i);\n@@ -1212,1 +1209,1 @@\n-                            i -> (double)(i - (s * BUFFER_REPS \/ 2)));\n+                            i -> (double) (i - (s * BUFFER_REPS \/ 2)));\n@@ -1216,1 +1213,1 @@\n-                            i -> (double)(i + 1));\n+                            i -> (double) (i + 1));\n@@ -1220,1 +1217,1 @@\n-                            i -> (double)(i - 2));\n+                            i -> (double) (i - 2));\n@@ -1224,1 +1221,1 @@\n-                            i -> i%3 == 0 ? (double)i : (i%3 == 1 ? (double)(i + 1) : (double)(i - 2)));\n+                            i -> i % 3 == 0 ? (double) i : (i % 3 == 1 ? (double) (i + 1) : (double) (i - 2)));\n@@ -1300,1 +1297,1 @@\n-                return (double)0.0;\n+                return (double) 0.0;\n@@ -1302,1 +1299,1 @@\n-                return (double)-0.0;\n+                return (double) -0.0;\n@@ -1356,1 +1353,1 @@\n-        DoubleVector three = DoubleVector.broadcast(SPECIES, (byte)-3);\n+        DoubleVector three = DoubleVector.broadcast(SPECIES, (byte) -3);\n@@ -1370,1 +1367,1 @@\n-        m = higher.min((double)-1).test(VectorOperators.IS_NEGATIVE);\n+        m = higher.min((double) -1).test(VectorOperators.IS_NEGATIVE);\n@@ -1375,1 +1372,1 @@\n-        assert(max == -3 + scale * (SPECIES.length()-1));\n+        assert(max == -3 + scale * (SPECIES.length() - 1));\n@@ -1390,1 +1387,1 @@\n-        DoubleVector io2 = (DoubleVector) VectorShuffle.iota(SPECIES,0,1,false).toVector();\n+        DoubleVector io2 = (DoubleVector) VectorShuffle.iota(SPECIES, 0, 1, false).toVector();\n@@ -1392,1 +1389,1 @@\n-        DoubleVector a = io.add((double)1); \/\/[1,2]\n+        DoubleVector a = io.add((double) 1); \/\/[1,2]\n@@ -1397,2 +1394,2 @@\n-        DoubleVector zab0 = a.rearrange(zip0,b); \/\/[1,-1]\n-        DoubleVector zab1 = a.rearrange(zip1,b); \/\/[2,-2]\n+        DoubleVector zab0 = a.rearrange(zip0, b); \/\/[1,-1]\n+        DoubleVector zab1 = a.rearrange(zip1, b); \/\/[2,-2]\n@@ -1403,2 +1400,2 @@\n-            manual[i+0] = abValues[i\/2];\n-            manual[i+1] = abValues[a.length() + i\/2];\n+            manual[i + 0] = abValues[i \/ 2];\n+            manual[i + 1] = abValues[a.length() + i \/ 2];\n@@ -1409,2 +1406,2 @@\n-        DoubleVector uab0 = zab0.rearrange(unz0,zab1);\n-        DoubleVector uab1 = zab0.rearrange(unz1,zab1);\n+        DoubleVector uab0 = zab0.rearrange(unz0, zab1);\n+        DoubleVector uab1 = zab0.rearrange(unz1, zab1);\n@@ -1447,1 +1444,1 @@\n-        return (double)(a + b);\n+        return (double) (a + b);\n@@ -1467,1 +1464,1 @@\n-        return (double)(a + b);\n+        return (double) (a + b);\n@@ -1523,1 +1520,1 @@\n-        return (double)(a - b);\n+        return (double) (a - b);\n@@ -1543,1 +1540,1 @@\n-        return (double)(a - b);\n+        return (double) (a - b);\n@@ -1599,1 +1596,1 @@\n-        return (double)(a * b);\n+        return (double) (a * b);\n@@ -1619,1 +1616,1 @@\n-        return (double)(a * b);\n+        return (double) (a * b);\n@@ -1676,1 +1673,1 @@\n-        return (double)(a \/ b);\n+        return (double) (a \/ b);\n@@ -1696,1 +1693,1 @@\n-        return (double)(a \/ b);\n+        return (double) (a \/ b);\n@@ -1757,1 +1754,1 @@\n-        return (double)(Double.doubleToLongBits(a)!=0?a:b);\n+        return (double) (Double.doubleToLongBits(a) != 0 ? a : b);\n@@ -1949,1 +1946,1 @@\n-            av.lanewise(VectorOperators.ADD, (long)b[i]).intoArray(r, i);\n+            av.lanewise(VectorOperators.ADD, (long) b[i]).intoArray(r, i);\n@@ -1966,1 +1963,1 @@\n-            av.lanewise(VectorOperators.ADD, (long)b[i], vmask).intoArray(r, i);\n+            av.lanewise(VectorOperators.ADD, (long) b[i], vmask).intoArray(r, i);\n@@ -2016,1 +2013,1 @@\n-        return (double)(Math.min(a, b));\n+        return (double) (Math.min(a, b));\n@@ -2036,1 +2033,1 @@\n-        return (double)(Math.min(a, b));\n+        return (double) (Math.min(a, b));\n@@ -2054,1 +2051,1 @@\n-        return (double)(Math.max(a, b));\n+        return (double) (Math.max(a, b));\n@@ -2074,1 +2071,1 @@\n-        return (double)(Math.max(a, b));\n+        return (double) (Math.max(a, b));\n@@ -2597,1 +2594,1 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (double)(65535+i)).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length() - 1)), (double) (65535 + i)).intoArray(r, i);\n@@ -2603,1 +2600,1 @@\n-            assertInsertArraysEquals(r, a, (double)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+            assertInsertArraysEquals(r, a, (double) (65535 + i), (j++ & (SPECIES.length() - 1)), i , i + SPECIES.length());\n@@ -2607,1 +2604,1 @@\n-        return bits(a)==0;\n+        return bits(a) == 0;\n@@ -2640,1 +2637,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_DEFAULT(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_DEFAULT(a[i + j]));\n@@ -2645,1 +2642,1 @@\n-        return bits(a)<0;\n+        return bits(a) < 0;\n@@ -2678,1 +2675,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_NEGATIVE(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_NEGATIVE(a[i + j]));\n@@ -2717,1 +2714,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_FINITE(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_FINITE(a[i + j]));\n@@ -2757,1 +2754,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_NAN(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_NAN(a[i + j]));\n@@ -2797,1 +2794,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_INFINITE(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_INFINITE(a[i + j]));\n@@ -3125,1 +3122,0 @@\n-\n@@ -3153,1 +3149,1 @@\n-            VectorMask<Double> mv = av.compare(VectorOperators.LT, (long)b[i]);\n+            VectorMask<Double> mv = av.compare(VectorOperators.LT, (long) b[i]);\n@@ -3157,1 +3153,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), a[i + j] < (double)((long)b[i]));\n+                Assert.assertEquals(mv.laneIsSet(j), a[i + j] < (double) ((long) b[i]));\n@@ -3162,1 +3158,0 @@\n-\n@@ -3174,1 +3169,1 @@\n-            VectorMask<Double> mv = av.compare(VectorOperators.LT, (long)b[i], vmask);\n+            VectorMask<Double> mv = av.compare(VectorOperators.LT, (long) b[i], vmask);\n@@ -3178,1 +3173,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] < (double)((long)b[i])));\n+                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] < (double) ((long) b[i])));\n@@ -3199,1 +3194,0 @@\n-\n@@ -3227,1 +3221,1 @@\n-            VectorMask<Double> mv = av.compare(VectorOperators.EQ, (long)b[i]);\n+            VectorMask<Double> mv = av.compare(VectorOperators.EQ, (long) b[i]);\n@@ -3231,1 +3225,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), a[i + j] == (double)((long)b[i]));\n+                Assert.assertEquals(mv.laneIsSet(j), a[i + j] == (double) ((long) b[i]));\n@@ -3236,1 +3230,0 @@\n-\n@@ -3248,1 +3241,1 @@\n-            VectorMask<Double> mv = av.compare(VectorOperators.EQ, (long)b[i], vmask);\n+            VectorMask<Double> mv = av.compare(VectorOperators.EQ, (long) b[i], vmask);\n@@ -3252,1 +3245,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] == (double)((long)b[i])));\n+                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] == (double) ((long) b[i])));\n@@ -3363,1 +3356,1 @@\n-                    r[i]=av.lane(0);\n+                    r[i] = av.lane(0);\n@@ -3365,2 +3358,2 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n@@ -3368,4 +3361,4 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n@@ -3373,8 +3366,8 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n@@ -3382,16 +3375,16 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n@@ -3399,32 +3392,32 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n@@ -3432,64 +3425,64 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n-                    r[i+32]=av.lane(32);\n-                    r[i+33]=av.lane(33);\n-                    r[i+34]=av.lane(34);\n-                    r[i+35]=av.lane(35);\n-                    r[i+36]=av.lane(36);\n-                    r[i+37]=av.lane(37);\n-                    r[i+38]=av.lane(38);\n-                    r[i+39]=av.lane(39);\n-                    r[i+40]=av.lane(40);\n-                    r[i+41]=av.lane(41);\n-                    r[i+42]=av.lane(42);\n-                    r[i+43]=av.lane(43);\n-                    r[i+44]=av.lane(44);\n-                    r[i+45]=av.lane(45);\n-                    r[i+46]=av.lane(46);\n-                    r[i+47]=av.lane(47);\n-                    r[i+48]=av.lane(48);\n-                    r[i+49]=av.lane(49);\n-                    r[i+50]=av.lane(50);\n-                    r[i+51]=av.lane(51);\n-                    r[i+52]=av.lane(52);\n-                    r[i+53]=av.lane(53);\n-                    r[i+54]=av.lane(54);\n-                    r[i+55]=av.lane(55);\n-                    r[i+56]=av.lane(56);\n-                    r[i+57]=av.lane(57);\n-                    r[i+58]=av.lane(58);\n-                    r[i+59]=av.lane(59);\n-                    r[i+60]=av.lane(60);\n-                    r[i+61]=av.lane(61);\n-                    r[i+62]=av.lane(62);\n-                    r[i+63]=av.lane(63);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n+                    r[i + 32] = av.lane(32);\n+                    r[i + 33] = av.lane(33);\n+                    r[i + 34] = av.lane(34);\n+                    r[i + 35] = av.lane(35);\n+                    r[i + 36] = av.lane(36);\n+                    r[i + 37] = av.lane(37);\n+                    r[i + 38] = av.lane(38);\n+                    r[i + 39] = av.lane(39);\n+                    r[i + 40] = av.lane(40);\n+                    r[i + 41] = av.lane(41);\n+                    r[i + 42] = av.lane(42);\n+                    r[i + 43] = av.lane(43);\n+                    r[i + 44] = av.lane(44);\n+                    r[i + 45] = av.lane(45);\n+                    r[i + 46] = av.lane(46);\n+                    r[i + 47] = av.lane(47);\n+                    r[i + 48] = av.lane(48);\n+                    r[i + 49] = av.lane(49);\n+                    r[i + 50] = av.lane(50);\n+                    r[i + 51] = av.lane(51);\n+                    r[i + 52] = av.lane(52);\n+                    r[i + 53] = av.lane(53);\n+                    r[i + 54] = av.lane(54);\n+                    r[i + 55] = av.lane(55);\n+                    r[i + 56] = av.lane(56);\n+                    r[i + 57] = av.lane(57);\n+                    r[i + 58] = av.lane(58);\n+                    r[i + 59] = av.lane(59);\n+                    r[i + 60] = av.lane(60);\n+                    r[i + 61] = av.lane(61);\n+                    r[i + 62] = av.lane(62);\n+                    r[i + 63] = av.lane(63);\n@@ -3498,1 +3491,1 @@\n-                        r[i+j]=av.lane(j);\n+                        r[i + j] = av.lane(j);\n@@ -3539,3 +3532,0 @@\n-\n-\n-\n@@ -3545,2 +3535,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = a[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = a[idx + i + origin];\n@@ -3548,1 +3538,1 @@\n-                res[i] = (double)0;\n+                res[i] = (double) 0;\n@@ -3571,1 +3561,1 @@\n-                res[i] = a[idx+i+origin];\n+                res[i] = a[idx + i + origin];\n@@ -3573,1 +3563,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n@@ -3599,2 +3589,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = mask[i] ? a[idx+i+origin] : (double)0;\n+            if(i + origin < SPECIES.length())\n+                res[i] = mask[i] ? a[idx + i + origin] : (double) 0;\n@@ -3602,1 +3592,1 @@\n-                res[i] = mask[i] ? b[idx+j] : (double)0;\n+                res[i] = mask[i] ? b[idx + j] : (double) 0;\n@@ -3633,1 +3623,1 @@\n-                res[i] = (double)0;\n+                res[i] = (double) 0;\n@@ -3635,1 +3625,1 @@\n-                res[i] = a[idx+j];\n+                res[i] = a[idx + j];\n@@ -3661,1 +3651,1 @@\n-                    res[i] = b[idx+i];\n+                    res[i] = b[idx + i];\n@@ -3663,1 +3653,1 @@\n-                    res[i] = a[idx+j];\n+                    res[i] = a[idx + j];\n@@ -3668,1 +3658,1 @@\n-                    res[i] = a[idx+SPECIES.length()-origin+i];\n+                    res[i] = a[idx + SPECIES.length() - origin + i];\n@@ -3670,1 +3660,1 @@\n-                    res[i] = b[idx+origin+j];\n+                    res[i] = b[idx + origin + j];\n@@ -3698,2 +3688,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = b[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = b[idx + i + origin];\n@@ -3701,1 +3691,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n@@ -3706,1 +3696,1 @@\n-            res[i] = mask[i] ? a[idx+i] : res[i];\n+            res[i] = mask[i] ? a[idx + i] : res[i];\n@@ -3712,1 +3702,1 @@\n-                    res1[i] = b[idx+i];\n+                    res1[i] = b[idx + i];\n@@ -3714,2 +3704,2 @@\n-                   res1[i] = res[j];\n-                   j++;\n+                    res1[i] = res[j];\n+                    j++;\n@@ -3721,1 +3711,1 @@\n-                    res1[i] = res[SPECIES.length()-origin+i];\n+                    res1[i] = res[SPECIES.length() - origin + i];\n@@ -3723,1 +3713,1 @@\n-                    res1[i] = b[idx+origin+j];\n+                    res1[i] = b[idx + origin + j];\n@@ -3753,1 +3743,1 @@\n-        return (double)(Math.sin((double)a));\n+        return (double) (Math.sin((double) a));\n@@ -3757,1 +3747,1 @@\n-        return (double)(StrictMath.sin((double)a));\n+        return (double) (StrictMath.sin((double) a));\n@@ -3777,1 +3767,1 @@\n-        return (double)(Math.exp((double)a));\n+        return (double) (Math.exp((double) a));\n@@ -3781,1 +3771,1 @@\n-        return (double)(StrictMath.exp((double)a));\n+        return (double) (StrictMath.exp((double) a));\n@@ -3801,1 +3791,1 @@\n-        return (double)(Math.log1p((double)a));\n+        return (double) (Math.log1p((double) a));\n@@ -3805,1 +3795,1 @@\n-        return (double)(StrictMath.log1p((double)a));\n+        return (double) (StrictMath.log1p((double) a));\n@@ -3825,1 +3815,1 @@\n-        return (double)(Math.log((double)a));\n+        return (double) (Math.log((double) a));\n@@ -3829,1 +3819,1 @@\n-        return (double)(StrictMath.log((double)a));\n+        return (double) (StrictMath.log((double) a));\n@@ -3849,1 +3839,1 @@\n-        return (double)(Math.log10((double)a));\n+        return (double) (Math.log10((double) a));\n@@ -3853,1 +3843,1 @@\n-        return (double)(StrictMath.log10((double)a));\n+        return (double) (StrictMath.log10((double) a));\n@@ -3873,1 +3863,1 @@\n-        return (double)(Math.expm1((double)a));\n+        return (double) (Math.expm1((double) a));\n@@ -3877,1 +3867,1 @@\n-        return (double)(StrictMath.expm1((double)a));\n+        return (double) (StrictMath.expm1((double) a));\n@@ -3897,1 +3887,1 @@\n-        return (double)(Math.cos((double)a));\n+        return (double) (Math.cos((double) a));\n@@ -3901,1 +3891,1 @@\n-        return (double)(StrictMath.cos((double)a));\n+        return (double) (StrictMath.cos((double) a));\n@@ -3921,1 +3911,1 @@\n-        return (double)(Math.tan((double)a));\n+        return (double) (Math.tan((double) a));\n@@ -3925,1 +3915,1 @@\n-        return (double)(StrictMath.tan((double)a));\n+        return (double) (StrictMath.tan((double) a));\n@@ -3945,1 +3935,1 @@\n-        return (double)(Math.sinh((double)a));\n+        return (double) (Math.sinh((double) a));\n@@ -3949,1 +3939,1 @@\n-        return (double)(StrictMath.sinh((double)a));\n+        return (double) (StrictMath.sinh((double) a));\n@@ -3969,1 +3959,1 @@\n-        return (double)(Math.cosh((double)a));\n+        return (double) (Math.cosh((double) a));\n@@ -3973,1 +3963,1 @@\n-        return (double)(StrictMath.cosh((double)a));\n+        return (double) (StrictMath.cosh((double) a));\n@@ -3993,1 +3983,1 @@\n-        return (double)(Math.tanh((double)a));\n+        return (double) (Math.tanh((double) a));\n@@ -3997,1 +3987,1 @@\n-        return (double)(StrictMath.tanh((double)a));\n+        return (double) (StrictMath.tanh((double) a));\n@@ -4017,1 +4007,1 @@\n-        return (double)(Math.asin((double)a));\n+        return (double) (Math.asin((double) a));\n@@ -4021,1 +4011,1 @@\n-        return (double)(StrictMath.asin((double)a));\n+        return (double) (StrictMath.asin((double) a));\n@@ -4041,1 +4031,1 @@\n-        return (double)(Math.acos((double)a));\n+        return (double) (Math.acos((double) a));\n@@ -4045,1 +4035,1 @@\n-        return (double)(StrictMath.acos((double)a));\n+        return (double) (StrictMath.acos((double) a));\n@@ -4065,1 +4055,1 @@\n-        return (double)(Math.atan((double)a));\n+        return (double) (Math.atan((double) a));\n@@ -4069,1 +4059,1 @@\n-        return (double)(StrictMath.atan((double)a));\n+        return (double) (StrictMath.atan((double) a));\n@@ -4089,1 +4079,1 @@\n-        return (double)(Math.cbrt((double)a));\n+        return (double) (Math.cbrt((double) a));\n@@ -4093,1 +4083,1 @@\n-        return (double)(StrictMath.cbrt((double)a));\n+        return (double) (StrictMath.cbrt((double) a));\n@@ -4113,1 +4103,1 @@\n-        return (double)(Math.hypot((double)a, (double)b));\n+        return (double)(Math.hypot((double) a, (double) b));\n@@ -4117,1 +4107,1 @@\n-        return (double)(StrictMath.hypot((double)a, (double)b));\n+        return (double)(StrictMath.hypot((double) a, (double) b));\n@@ -4140,1 +4130,1 @@\n-        return (double)(Math.pow((double)a, (double)b));\n+        return (double)(Math.pow((double) a, (double) b));\n@@ -4144,1 +4134,1 @@\n-        return (double)(StrictMath.pow((double)a, (double)b));\n+        return (double)(StrictMath.pow((double) a, (double) b));\n@@ -4165,1 +4155,1 @@\n-        return (double)(Math.pow((double)a, (double)b));\n+        return (double)(Math.pow((double) a, (double) b));\n@@ -4169,1 +4159,1 @@\n-        return (double)(StrictMath.pow((double)a, (double)b));\n+        return (double)(StrictMath.pow((double) a, (double) b));\n@@ -4192,1 +4182,1 @@\n-        return (double)(Math.atan2((double)a, (double)b));\n+        return (double)(Math.atan2((double) a, (double) b));\n@@ -4196,1 +4186,1 @@\n-        return (double)(StrictMath.atan2((double)a, (double)b));\n+        return (double)(StrictMath.atan2((double) a, (double) b));\n@@ -4249,1 +4239,1 @@\n-        return (double)(Math.fma(a, b, c));\n+        return (double) (Math.fma(a, b, c));\n@@ -4252,1 +4242,1 @@\n-        return (double)(Math.fma(a, b, c));\n+        return (double) (Math.fma(a, b, c));\n@@ -4262,1 +4252,1 @@\n-           count = Math.max(5, count\/20); break;\n+           count = Math.max(5, count \/ 20); break;\n@@ -4287,1 +4277,1 @@\n-           count = Math.max(5, count\/20); break;\n+           count = Math.max(5, count \/ 20); break;\n@@ -4313,1 +4303,1 @@\n-           count = Math.max(5, count\/20); break;\n+           count = Math.max(5, count \/ 20); break;\n@@ -4484,1 +4474,1 @@\n-        return (double)(-((double)a));\n+        return (double) (-((double) a));\n@@ -4488,1 +4478,1 @@\n-        return (double)(-((double)a));\n+        return (double) (-((double) a));\n@@ -4540,1 +4530,1 @@\n-        return (double)(Math.abs((double)a));\n+        return (double) (Math.abs((double) a));\n@@ -4544,1 +4534,1 @@\n-        return (double)(Math.abs((double)a));\n+        return (double) (Math.abs((double) a));\n@@ -4603,1 +4593,1 @@\n-        return (double)(Math.sqrt((double)a));\n+        return (double) (Math.sqrt((double) a));\n@@ -4607,1 +4597,1 @@\n-        return (double)(Math.sqrt((double)a));\n+        return (double) (Math.sqrt((double) a));\n@@ -4770,1 +4760,1 @@\n-        return (long)res;\n+        return (long) res;\n@@ -4809,1 +4799,1 @@\n-        return (long)res;\n+        return (long) res;\n@@ -4866,1 +4856,1 @@\n-                av.blend((long)b[i], vmask).intoArray(r, i);\n+                av.blend((long) b[i], vmask).intoArray(r, i);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double64VectorTests.java","additions":321,"deletions":331,"binary":false,"changes":652,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -83,1 +83,1 @@\n-                Assert.assertEquals(r[i], mask[(i*8\/SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0);\n+                Assert.assertEquals(r[i], mask[(i * 8 \/ SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0);\n@@ -86,1 +86,1 @@\n-            Assert.assertEquals(r[i], mask[(i*8\/SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0, \"at index #\" + i);\n+            Assert.assertEquals(r[i], mask[(i * 8 \/ SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0, \"at index #\" + i);\n@@ -93,1 +93,1 @@\n-                            i -> (double)(i * 5));\n+                            i -> (double) (i * 5));\n@@ -97,1 +97,1 @@\n-                            i -> (((double)(i + 1) == 0) ? 1 : (double)(i + 1)));\n+                            i -> (((double) (i + 1) == 0) ? 1 : (double) (i + 1)));\n@@ -204,1 +204,1 @@\n-                            return new Object[]{fa, fb, bo};\n+                            return new Object[] {fa, fb, bo};\n@@ -215,1 +215,1 @@\n-                            return new Object[]{fa, fb, fm, bo};\n+                            return new Object[] {fa, fb, fm, bo};\n@@ -224,1 +224,1 @@\n-                    return new Object[]{fa, bo};\n+                    return new Object[] {fa, bo};\n@@ -234,1 +234,1 @@\n-                        return new Object[]{fa, fm, bo};\n+                        return new Object[] {fa, fm, bo};\n@@ -953,2 +953,0 @@\n-\n-\n@@ -1104,1 +1102,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/DoubleMaxVectorLoadStoreTests.java","additions":9,"deletions":12,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -93,1 +93,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -98,1 +98,1 @@\n-            double[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            double[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -258,1 +258,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i+order[i + j]]);\n@@ -263,1 +263,1 @@\n-            Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i+order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]]);\n@@ -279,1 +279,1 @@\n-                    Assert.assertEquals(r[i + k], (double)0);\n+                    Assert.assertEquals(r[i + k], (double) 0);\n@@ -287,1 +287,1 @@\n-                Assert.assertEquals(r[idx], (double)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], (double) 0, \"at index #\" + idx);\n@@ -302,1 +302,1 @@\n-                        Assert.assertEquals(r[i + j], (double)0);\n+                        Assert.assertEquals(r[i + j], (double) 0);\n@@ -311,1 +311,1 @@\n-                Assert.assertEquals(r[idx], (double)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], (double) 0, \"at index #\" + idx);\n@@ -321,1 +321,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -326,1 +326,1 @@\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]]);\n@@ -336,1 +336,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + order[i + j]]);\n@@ -338,1 +338,1 @@\n-                         Assert.assertEquals(r[i+j], (double)0);\n+                         Assert.assertEquals(r[i + j], (double) 0);\n@@ -344,1 +344,1 @@\n-                Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -346,1 +346,1 @@\n-                Assert.assertEquals(r[i+j], (double)0, \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], (double) 0, \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -356,1 +356,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -358,1 +358,1 @@\n-                         Assert.assertEquals(r[i+j], (double)0);\n+                         Assert.assertEquals(r[i + j], (double) 0);\n@@ -364,1 +364,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -366,1 +366,1 @@\n-                Assert.assertEquals(r[i+j], (double)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], (double) 0, \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -375,1 +375,1 @@\n-                a[j]=a[idx];\n+                a[j] = a[idx];\n@@ -426,1 +426,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], (double)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])));\n+                Assert.assertEquals(r[i], f.apply(a[i], (double) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])));\n@@ -429,1 +429,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], (double)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])),\n+            Assert.assertEquals(r[i], f.apply(a[i], (double) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])),\n@@ -475,1 +475,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], (double)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n+                Assert.assertEquals(r[i], f.apply(a[i], (double) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n@@ -478,1 +478,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], (double)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]),\n+            Assert.assertEquals(r[i], f.apply(a[i], (double) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]),\n@@ -491,1 +491,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]));\n@@ -495,1 +495,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]), \"at index #\" + i + \", \" + j);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]), \"at index #\" + i + \", \" + j);\n@@ -509,1 +509,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]));\n@@ -513,1 +513,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i+j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i + j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n@@ -661,1 +661,0 @@\n-\n@@ -760,1 +759,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -765,1 +764,1 @@\n-            double[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            double[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -768,1 +767,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -770,1 +769,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -787,1 +786,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -792,1 +791,1 @@\n-            double[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            double[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -795,1 +794,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -797,1 +796,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -808,1 +807,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -813,1 +812,1 @@\n-            double[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            double[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -816,1 +815,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -818,1 +817,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -820,1 +819,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(r, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(r, i, i + SPECIES.length()))\n@@ -835,1 +834,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -840,1 +839,1 @@\n-            double[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            double[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -855,1 +854,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -860,1 +859,1 @@\n-            double[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            double[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -876,1 +875,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -881,1 +880,1 @@\n-            double[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            double[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -897,1 +896,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -902,1 +901,1 @@\n-            double[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            double[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -919,1 +918,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -924,1 +923,1 @@\n-            double[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            double[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -944,1 +943,1 @@\n-                return (int)0;\n+                return (int) 0;\n@@ -951,1 +950,1 @@\n-                            i -> (double)(-i * 5));\n+                            i -> (double) (-i * 5));\n@@ -955,1 +954,1 @@\n-                            i -> (double)(i * 5));\n+                            i -> (double) (i * 5));\n@@ -959,1 +958,1 @@\n-                            i -> (((double)(i + 1) == 0) ? 1 : (double)(i + 1)));\n+                            i -> (((double) (i + 1) == 0) ? 1 : (double) (i + 1)));\n@@ -963,1 +962,1 @@\n-                            i -> (double)intCornerCaseValue(i));\n+                            i -> (double) intCornerCaseValue(i));\n@@ -971,1 +970,1 @@\n-                Assert.assertEquals(r[i], (int)(a[i+offs]));\n+                Assert.assertEquals(r[i], (int) (a[i + offs]));\n@@ -974,1 +973,1 @@\n-            Assert.assertEquals(r[i], (int)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (int) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -989,1 +988,1 @@\n-                return (long)0;\n+                return (long) 0;\n@@ -996,1 +995,1 @@\n-                            i -> (double)(-i * 5));\n+                            i -> (double) (-i * 5));\n@@ -1000,1 +999,1 @@\n-                            i -> (double)(i * 5));\n+                            i -> (double) (i * 5));\n@@ -1004,1 +1003,1 @@\n-                            i -> (((double)(i + 1) == 0) ? 1 : (double)(i + 1)));\n+                            i -> (((double) (i + 1) == 0) ? 1 : (double) (i + 1)));\n@@ -1008,1 +1007,1 @@\n-                            i -> (double)longCornerCaseValue(i));\n+                            i -> (double) longCornerCaseValue(i));\n@@ -1017,1 +1016,1 @@\n-                Assert.assertEquals(r[i], (long)(a[i+offs]));\n+                Assert.assertEquals(r[i], (long) (a[i + offs]));\n@@ -1020,1 +1019,1 @@\n-            Assert.assertEquals(r[i], (long)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (long) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -1025,1 +1024,0 @@\n-\n@@ -1033,1 +1031,1 @@\n-                            i -> (double)(-i * 5));\n+                            i -> (double) (-i * 5));\n@@ -1037,1 +1035,1 @@\n-                            i -> (double)(i * 5));\n+                            i -> (double) (i * 5));\n@@ -1041,1 +1039,1 @@\n-                            i -> (((double)(i + 1) == 0) ? 1 : (double)(i + 1)));\n+                            i -> (((double) (i + 1) == 0) ? 1 : (double) (i + 1)));\n@@ -1184,1 +1182,1 @@\n-                    a[i] = (double)RAND.nextInt(upper);\n+                    a[i] = (double) RAND.nextInt(upper);\n@@ -1209,1 +1207,0 @@\n-\n@@ -1213,1 +1210,1 @@\n-                            i -> (double)i);\n+                            i -> (double) i);\n@@ -1217,1 +1214,1 @@\n-                            i -> (double)(i - (s * BUFFER_REPS \/ 2)));\n+                            i -> (double) (i - (s * BUFFER_REPS \/ 2)));\n@@ -1221,1 +1218,1 @@\n-                            i -> (double)(i + 1));\n+                            i -> (double) (i + 1));\n@@ -1225,1 +1222,1 @@\n-                            i -> (double)(i - 2));\n+                            i -> (double) (i - 2));\n@@ -1229,1 +1226,1 @@\n-                            i -> i%3 == 0 ? (double)i : (i%3 == 1 ? (double)(i + 1) : (double)(i - 2)));\n+                            i -> i % 3 == 0 ? (double) i : (i % 3 == 1 ? (double) (i + 1) : (double) (i - 2)));\n@@ -1305,1 +1302,1 @@\n-                return (double)0.0;\n+                return (double) 0.0;\n@@ -1307,1 +1304,1 @@\n-                return (double)-0.0;\n+                return (double) -0.0;\n@@ -1361,1 +1358,1 @@\n-        DoubleVector three = DoubleVector.broadcast(SPECIES, (byte)-3);\n+        DoubleVector three = DoubleVector.broadcast(SPECIES, (byte) -3);\n@@ -1375,1 +1372,1 @@\n-        m = higher.min((double)-1).test(VectorOperators.IS_NEGATIVE);\n+        m = higher.min((double) -1).test(VectorOperators.IS_NEGATIVE);\n@@ -1380,1 +1377,1 @@\n-        assert(max == -3 + scale * (SPECIES.length()-1));\n+        assert(max == -3 + scale * (SPECIES.length() - 1));\n@@ -1395,1 +1392,1 @@\n-        DoubleVector io2 = (DoubleVector) VectorShuffle.iota(SPECIES,0,1,false).toVector();\n+        DoubleVector io2 = (DoubleVector) VectorShuffle.iota(SPECIES, 0, 1, false).toVector();\n@@ -1397,1 +1394,1 @@\n-        DoubleVector a = io.add((double)1); \/\/[1,2]\n+        DoubleVector a = io.add((double) 1); \/\/[1,2]\n@@ -1402,2 +1399,2 @@\n-        DoubleVector zab0 = a.rearrange(zip0,b); \/\/[1,-1]\n-        DoubleVector zab1 = a.rearrange(zip1,b); \/\/[2,-2]\n+        DoubleVector zab0 = a.rearrange(zip0, b); \/\/[1,-1]\n+        DoubleVector zab1 = a.rearrange(zip1, b); \/\/[2,-2]\n@@ -1408,2 +1405,2 @@\n-            manual[i+0] = abValues[i\/2];\n-            manual[i+1] = abValues[a.length() + i\/2];\n+            manual[i + 0] = abValues[i \/ 2];\n+            manual[i + 1] = abValues[a.length() + i \/ 2];\n@@ -1414,2 +1411,2 @@\n-        DoubleVector uab0 = zab0.rearrange(unz0,zab1);\n-        DoubleVector uab1 = zab0.rearrange(unz1,zab1);\n+        DoubleVector uab0 = zab0.rearrange(unz0, zab1);\n+        DoubleVector uab1 = zab0.rearrange(unz1, zab1);\n@@ -1452,1 +1449,1 @@\n-        return (double)(a + b);\n+        return (double) (a + b);\n@@ -1472,1 +1469,1 @@\n-        return (double)(a + b);\n+        return (double) (a + b);\n@@ -1528,1 +1525,1 @@\n-        return (double)(a - b);\n+        return (double) (a - b);\n@@ -1548,1 +1545,1 @@\n-        return (double)(a - b);\n+        return (double) (a - b);\n@@ -1604,1 +1601,1 @@\n-        return (double)(a * b);\n+        return (double) (a * b);\n@@ -1624,1 +1621,1 @@\n-        return (double)(a * b);\n+        return (double) (a * b);\n@@ -1681,1 +1678,1 @@\n-        return (double)(a \/ b);\n+        return (double) (a \/ b);\n@@ -1701,1 +1698,1 @@\n-        return (double)(a \/ b);\n+        return (double) (a \/ b);\n@@ -1762,1 +1759,1 @@\n-        return (double)(Double.doubleToLongBits(a)!=0?a:b);\n+        return (double) (Double.doubleToLongBits(a) != 0 ? a : b);\n@@ -1954,1 +1951,1 @@\n-            av.lanewise(VectorOperators.ADD, (long)b[i]).intoArray(r, i);\n+            av.lanewise(VectorOperators.ADD, (long) b[i]).intoArray(r, i);\n@@ -1971,1 +1968,1 @@\n-            av.lanewise(VectorOperators.ADD, (long)b[i], vmask).intoArray(r, i);\n+            av.lanewise(VectorOperators.ADD, (long) b[i], vmask).intoArray(r, i);\n@@ -2021,1 +2018,1 @@\n-        return (double)(Math.min(a, b));\n+        return (double) (Math.min(a, b));\n@@ -2041,1 +2038,1 @@\n-        return (double)(Math.min(a, b));\n+        return (double) (Math.min(a, b));\n@@ -2059,1 +2056,1 @@\n-        return (double)(Math.max(a, b));\n+        return (double) (Math.max(a, b));\n@@ -2079,1 +2076,1 @@\n-        return (double)(Math.max(a, b));\n+        return (double) (Math.max(a, b));\n@@ -2602,1 +2599,1 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (double)(65535+i)).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length() - 1)), (double) (65535 + i)).intoArray(r, i);\n@@ -2608,1 +2605,1 @@\n-            assertInsertArraysEquals(r, a, (double)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+            assertInsertArraysEquals(r, a, (double) (65535 + i), (j++ & (SPECIES.length() - 1)), i , i + SPECIES.length());\n@@ -2612,1 +2609,1 @@\n-        return bits(a)==0;\n+        return bits(a) == 0;\n@@ -2645,1 +2642,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_DEFAULT(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_DEFAULT(a[i + j]));\n@@ -2650,1 +2647,1 @@\n-        return bits(a)<0;\n+        return bits(a) < 0;\n@@ -2683,1 +2680,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_NEGATIVE(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_NEGATIVE(a[i + j]));\n@@ -2722,1 +2719,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_FINITE(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_FINITE(a[i + j]));\n@@ -2762,1 +2759,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_NAN(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_NAN(a[i + j]));\n@@ -2802,1 +2799,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_INFINITE(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_INFINITE(a[i + j]));\n@@ -3130,1 +3127,0 @@\n-\n@@ -3158,1 +3154,1 @@\n-            VectorMask<Double> mv = av.compare(VectorOperators.LT, (long)b[i]);\n+            VectorMask<Double> mv = av.compare(VectorOperators.LT, (long) b[i]);\n@@ -3162,1 +3158,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), a[i + j] < (double)((long)b[i]));\n+                Assert.assertEquals(mv.laneIsSet(j), a[i + j] < (double) ((long) b[i]));\n@@ -3167,1 +3163,0 @@\n-\n@@ -3179,1 +3174,1 @@\n-            VectorMask<Double> mv = av.compare(VectorOperators.LT, (long)b[i], vmask);\n+            VectorMask<Double> mv = av.compare(VectorOperators.LT, (long) b[i], vmask);\n@@ -3183,1 +3178,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] < (double)((long)b[i])));\n+                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] < (double) ((long) b[i])));\n@@ -3204,1 +3199,0 @@\n-\n@@ -3232,1 +3226,1 @@\n-            VectorMask<Double> mv = av.compare(VectorOperators.EQ, (long)b[i]);\n+            VectorMask<Double> mv = av.compare(VectorOperators.EQ, (long) b[i]);\n@@ -3236,1 +3230,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), a[i + j] == (double)((long)b[i]));\n+                Assert.assertEquals(mv.laneIsSet(j), a[i + j] == (double) ((long) b[i]));\n@@ -3241,1 +3235,0 @@\n-\n@@ -3253,1 +3246,1 @@\n-            VectorMask<Double> mv = av.compare(VectorOperators.EQ, (long)b[i], vmask);\n+            VectorMask<Double> mv = av.compare(VectorOperators.EQ, (long) b[i], vmask);\n@@ -3257,1 +3250,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] == (double)((long)b[i])));\n+                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] == (double) ((long) b[i])));\n@@ -3368,1 +3361,1 @@\n-                    r[i]=av.lane(0);\n+                    r[i] = av.lane(0);\n@@ -3370,2 +3363,2 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n@@ -3373,4 +3366,4 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n@@ -3378,8 +3371,8 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n@@ -3387,16 +3380,16 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n@@ -3404,32 +3397,32 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n@@ -3437,64 +3430,64 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n-                    r[i+32]=av.lane(32);\n-                    r[i+33]=av.lane(33);\n-                    r[i+34]=av.lane(34);\n-                    r[i+35]=av.lane(35);\n-                    r[i+36]=av.lane(36);\n-                    r[i+37]=av.lane(37);\n-                    r[i+38]=av.lane(38);\n-                    r[i+39]=av.lane(39);\n-                    r[i+40]=av.lane(40);\n-                    r[i+41]=av.lane(41);\n-                    r[i+42]=av.lane(42);\n-                    r[i+43]=av.lane(43);\n-                    r[i+44]=av.lane(44);\n-                    r[i+45]=av.lane(45);\n-                    r[i+46]=av.lane(46);\n-                    r[i+47]=av.lane(47);\n-                    r[i+48]=av.lane(48);\n-                    r[i+49]=av.lane(49);\n-                    r[i+50]=av.lane(50);\n-                    r[i+51]=av.lane(51);\n-                    r[i+52]=av.lane(52);\n-                    r[i+53]=av.lane(53);\n-                    r[i+54]=av.lane(54);\n-                    r[i+55]=av.lane(55);\n-                    r[i+56]=av.lane(56);\n-                    r[i+57]=av.lane(57);\n-                    r[i+58]=av.lane(58);\n-                    r[i+59]=av.lane(59);\n-                    r[i+60]=av.lane(60);\n-                    r[i+61]=av.lane(61);\n-                    r[i+62]=av.lane(62);\n-                    r[i+63]=av.lane(63);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n+                    r[i + 32] = av.lane(32);\n+                    r[i + 33] = av.lane(33);\n+                    r[i + 34] = av.lane(34);\n+                    r[i + 35] = av.lane(35);\n+                    r[i + 36] = av.lane(36);\n+                    r[i + 37] = av.lane(37);\n+                    r[i + 38] = av.lane(38);\n+                    r[i + 39] = av.lane(39);\n+                    r[i + 40] = av.lane(40);\n+                    r[i + 41] = av.lane(41);\n+                    r[i + 42] = av.lane(42);\n+                    r[i + 43] = av.lane(43);\n+                    r[i + 44] = av.lane(44);\n+                    r[i + 45] = av.lane(45);\n+                    r[i + 46] = av.lane(46);\n+                    r[i + 47] = av.lane(47);\n+                    r[i + 48] = av.lane(48);\n+                    r[i + 49] = av.lane(49);\n+                    r[i + 50] = av.lane(50);\n+                    r[i + 51] = av.lane(51);\n+                    r[i + 52] = av.lane(52);\n+                    r[i + 53] = av.lane(53);\n+                    r[i + 54] = av.lane(54);\n+                    r[i + 55] = av.lane(55);\n+                    r[i + 56] = av.lane(56);\n+                    r[i + 57] = av.lane(57);\n+                    r[i + 58] = av.lane(58);\n+                    r[i + 59] = av.lane(59);\n+                    r[i + 60] = av.lane(60);\n+                    r[i + 61] = av.lane(61);\n+                    r[i + 62] = av.lane(62);\n+                    r[i + 63] = av.lane(63);\n@@ -3503,1 +3496,1 @@\n-                        r[i+j]=av.lane(j);\n+                        r[i + j] = av.lane(j);\n@@ -3544,3 +3537,0 @@\n-\n-\n-\n@@ -3550,2 +3540,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = a[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = a[idx + i + origin];\n@@ -3553,1 +3543,1 @@\n-                res[i] = (double)0;\n+                res[i] = (double) 0;\n@@ -3576,1 +3566,1 @@\n-                res[i] = a[idx+i+origin];\n+                res[i] = a[idx + i + origin];\n@@ -3578,1 +3568,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n@@ -3604,2 +3594,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = mask[i] ? a[idx+i+origin] : (double)0;\n+            if(i + origin < SPECIES.length())\n+                res[i] = mask[i] ? a[idx + i + origin] : (double) 0;\n@@ -3607,1 +3597,1 @@\n-                res[i] = mask[i] ? b[idx+j] : (double)0;\n+                res[i] = mask[i] ? b[idx + j] : (double) 0;\n@@ -3638,1 +3628,1 @@\n-                res[i] = (double)0;\n+                res[i] = (double) 0;\n@@ -3640,1 +3630,1 @@\n-                res[i] = a[idx+j];\n+                res[i] = a[idx + j];\n@@ -3666,1 +3656,1 @@\n-                    res[i] = b[idx+i];\n+                    res[i] = b[idx + i];\n@@ -3668,1 +3658,1 @@\n-                    res[i] = a[idx+j];\n+                    res[i] = a[idx + j];\n@@ -3673,1 +3663,1 @@\n-                    res[i] = a[idx+SPECIES.length()-origin+i];\n+                    res[i] = a[idx + SPECIES.length() - origin + i];\n@@ -3675,1 +3665,1 @@\n-                    res[i] = b[idx+origin+j];\n+                    res[i] = b[idx + origin + j];\n@@ -3703,2 +3693,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = b[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = b[idx + i + origin];\n@@ -3706,1 +3696,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n@@ -3711,1 +3701,1 @@\n-            res[i] = mask[i] ? a[idx+i] : res[i];\n+            res[i] = mask[i] ? a[idx + i] : res[i];\n@@ -3717,1 +3707,1 @@\n-                    res1[i] = b[idx+i];\n+                    res1[i] = b[idx + i];\n@@ -3719,2 +3709,2 @@\n-                   res1[i] = res[j];\n-                   j++;\n+                    res1[i] = res[j];\n+                    j++;\n@@ -3726,1 +3716,1 @@\n-                    res1[i] = res[SPECIES.length()-origin+i];\n+                    res1[i] = res[SPECIES.length() - origin + i];\n@@ -3728,1 +3718,1 @@\n-                    res1[i] = b[idx+origin+j];\n+                    res1[i] = b[idx + origin + j];\n@@ -3758,1 +3748,1 @@\n-        return (double)(Math.sin((double)a));\n+        return (double) (Math.sin((double) a));\n@@ -3762,1 +3752,1 @@\n-        return (double)(StrictMath.sin((double)a));\n+        return (double) (StrictMath.sin((double) a));\n@@ -3782,1 +3772,1 @@\n-        return (double)(Math.exp((double)a));\n+        return (double) (Math.exp((double) a));\n@@ -3786,1 +3776,1 @@\n-        return (double)(StrictMath.exp((double)a));\n+        return (double) (StrictMath.exp((double) a));\n@@ -3806,1 +3796,1 @@\n-        return (double)(Math.log1p((double)a));\n+        return (double) (Math.log1p((double) a));\n@@ -3810,1 +3800,1 @@\n-        return (double)(StrictMath.log1p((double)a));\n+        return (double) (StrictMath.log1p((double) a));\n@@ -3830,1 +3820,1 @@\n-        return (double)(Math.log((double)a));\n+        return (double) (Math.log((double) a));\n@@ -3834,1 +3824,1 @@\n-        return (double)(StrictMath.log((double)a));\n+        return (double) (StrictMath.log((double) a));\n@@ -3854,1 +3844,1 @@\n-        return (double)(Math.log10((double)a));\n+        return (double) (Math.log10((double) a));\n@@ -3858,1 +3848,1 @@\n-        return (double)(StrictMath.log10((double)a));\n+        return (double) (StrictMath.log10((double) a));\n@@ -3878,1 +3868,1 @@\n-        return (double)(Math.expm1((double)a));\n+        return (double) (Math.expm1((double) a));\n@@ -3882,1 +3872,1 @@\n-        return (double)(StrictMath.expm1((double)a));\n+        return (double) (StrictMath.expm1((double) a));\n@@ -3902,1 +3892,1 @@\n-        return (double)(Math.cos((double)a));\n+        return (double) (Math.cos((double) a));\n@@ -3906,1 +3896,1 @@\n-        return (double)(StrictMath.cos((double)a));\n+        return (double) (StrictMath.cos((double) a));\n@@ -3926,1 +3916,1 @@\n-        return (double)(Math.tan((double)a));\n+        return (double) (Math.tan((double) a));\n@@ -3930,1 +3920,1 @@\n-        return (double)(StrictMath.tan((double)a));\n+        return (double) (StrictMath.tan((double) a));\n@@ -3950,1 +3940,1 @@\n-        return (double)(Math.sinh((double)a));\n+        return (double) (Math.sinh((double) a));\n@@ -3954,1 +3944,1 @@\n-        return (double)(StrictMath.sinh((double)a));\n+        return (double) (StrictMath.sinh((double) a));\n@@ -3974,1 +3964,1 @@\n-        return (double)(Math.cosh((double)a));\n+        return (double) (Math.cosh((double) a));\n@@ -3978,1 +3968,1 @@\n-        return (double)(StrictMath.cosh((double)a));\n+        return (double) (StrictMath.cosh((double) a));\n@@ -3998,1 +3988,1 @@\n-        return (double)(Math.tanh((double)a));\n+        return (double) (Math.tanh((double) a));\n@@ -4002,1 +3992,1 @@\n-        return (double)(StrictMath.tanh((double)a));\n+        return (double) (StrictMath.tanh((double) a));\n@@ -4022,1 +4012,1 @@\n-        return (double)(Math.asin((double)a));\n+        return (double) (Math.asin((double) a));\n@@ -4026,1 +4016,1 @@\n-        return (double)(StrictMath.asin((double)a));\n+        return (double) (StrictMath.asin((double) a));\n@@ -4046,1 +4036,1 @@\n-        return (double)(Math.acos((double)a));\n+        return (double) (Math.acos((double) a));\n@@ -4050,1 +4040,1 @@\n-        return (double)(StrictMath.acos((double)a));\n+        return (double) (StrictMath.acos((double) a));\n@@ -4070,1 +4060,1 @@\n-        return (double)(Math.atan((double)a));\n+        return (double) (Math.atan((double) a));\n@@ -4074,1 +4064,1 @@\n-        return (double)(StrictMath.atan((double)a));\n+        return (double) (StrictMath.atan((double) a));\n@@ -4094,1 +4084,1 @@\n-        return (double)(Math.cbrt((double)a));\n+        return (double) (Math.cbrt((double) a));\n@@ -4098,1 +4088,1 @@\n-        return (double)(StrictMath.cbrt((double)a));\n+        return (double) (StrictMath.cbrt((double) a));\n@@ -4118,1 +4108,1 @@\n-        return (double)(Math.hypot((double)a, (double)b));\n+        return (double)(Math.hypot((double) a, (double) b));\n@@ -4122,1 +4112,1 @@\n-        return (double)(StrictMath.hypot((double)a, (double)b));\n+        return (double)(StrictMath.hypot((double) a, (double) b));\n@@ -4145,1 +4135,1 @@\n-        return (double)(Math.pow((double)a, (double)b));\n+        return (double)(Math.pow((double) a, (double) b));\n@@ -4149,1 +4139,1 @@\n-        return (double)(StrictMath.pow((double)a, (double)b));\n+        return (double)(StrictMath.pow((double) a, (double) b));\n@@ -4170,1 +4160,1 @@\n-        return (double)(Math.pow((double)a, (double)b));\n+        return (double)(Math.pow((double) a, (double) b));\n@@ -4174,1 +4164,1 @@\n-        return (double)(StrictMath.pow((double)a, (double)b));\n+        return (double)(StrictMath.pow((double) a, (double) b));\n@@ -4197,1 +4187,1 @@\n-        return (double)(Math.atan2((double)a, (double)b));\n+        return (double)(Math.atan2((double) a, (double) b));\n@@ -4201,1 +4191,1 @@\n-        return (double)(StrictMath.atan2((double)a, (double)b));\n+        return (double)(StrictMath.atan2((double) a, (double) b));\n@@ -4254,1 +4244,1 @@\n-        return (double)(Math.fma(a, b, c));\n+        return (double) (Math.fma(a, b, c));\n@@ -4257,1 +4247,1 @@\n-        return (double)(Math.fma(a, b, c));\n+        return (double) (Math.fma(a, b, c));\n@@ -4267,1 +4257,1 @@\n-           count = Math.max(5, count\/20); break;\n+           count = Math.max(5, count \/ 20); break;\n@@ -4292,1 +4282,1 @@\n-           count = Math.max(5, count\/20); break;\n+           count = Math.max(5, count \/ 20); break;\n@@ -4318,1 +4308,1 @@\n-           count = Math.max(5, count\/20); break;\n+           count = Math.max(5, count \/ 20); break;\n@@ -4489,1 +4479,1 @@\n-        return (double)(-((double)a));\n+        return (double) (-((double) a));\n@@ -4493,1 +4483,1 @@\n-        return (double)(-((double)a));\n+        return (double) (-((double) a));\n@@ -4545,1 +4535,1 @@\n-        return (double)(Math.abs((double)a));\n+        return (double) (Math.abs((double) a));\n@@ -4549,1 +4539,1 @@\n-        return (double)(Math.abs((double)a));\n+        return (double) (Math.abs((double) a));\n@@ -4608,1 +4598,1 @@\n-        return (double)(Math.sqrt((double)a));\n+        return (double) (Math.sqrt((double) a));\n@@ -4612,1 +4602,1 @@\n-        return (double)(Math.sqrt((double)a));\n+        return (double) (Math.sqrt((double) a));\n@@ -4775,1 +4765,1 @@\n-        return (long)res;\n+        return (long) res;\n@@ -4814,1 +4804,1 @@\n-        return (long)res;\n+        return (long) res;\n@@ -4871,1 +4861,1 @@\n-                av.blend((long)b[i], vmask).intoArray(r, i);\n+                av.blend((long) b[i], vmask).intoArray(r, i);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/DoubleMaxVectorTests.java","additions":321,"deletions":331,"binary":false,"changes":652,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,1 +74,1 @@\n-                Assert.assertEquals(r[i], mask[(i*8\/SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0);\n+                Assert.assertEquals(r[i], mask[(i * 8 \/ SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0);\n@@ -77,1 +77,1 @@\n-            Assert.assertEquals(r[i], mask[(i*8\/SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0, \"at index #\" + i);\n+            Assert.assertEquals(r[i], mask[(i * 8 \/ SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0, \"at index #\" + i);\n@@ -84,1 +84,1 @@\n-                            i -> (float)(i * 5));\n+                            i -> (float) (i * 5));\n@@ -88,1 +88,1 @@\n-                            i -> (((float)(i + 1) == 0) ? 1 : (float)(i + 1)));\n+                            i -> (((float) (i + 1) == 0) ? 1 : (float) (i + 1)));\n@@ -195,1 +195,1 @@\n-                            return new Object[]{fa, fb, bo};\n+                            return new Object[] {fa, fb, bo};\n@@ -206,1 +206,1 @@\n-                            return new Object[]{fa, fb, fm, bo};\n+                            return new Object[] {fa, fb, fm, bo};\n@@ -215,1 +215,1 @@\n-                    return new Object[]{fa, bo};\n+                    return new Object[] {fa, bo};\n@@ -225,1 +225,1 @@\n-                        return new Object[]{fa, fm, bo};\n+                        return new Object[] {fa, fm, bo};\n@@ -944,2 +944,0 @@\n-\n-\n@@ -1095,1 +1093,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float128VectorLoadStoreTests.java","additions":9,"deletions":12,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -93,1 +93,1 @@\n-            float[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            float[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -253,1 +253,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i+order[i + j]]);\n@@ -258,1 +258,1 @@\n-            Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i+order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]]);\n@@ -274,1 +274,1 @@\n-                    Assert.assertEquals(r[i + k], (float)0);\n+                    Assert.assertEquals(r[i + k], (float) 0);\n@@ -282,1 +282,1 @@\n-                Assert.assertEquals(r[idx], (float)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], (float) 0, \"at index #\" + idx);\n@@ -297,1 +297,1 @@\n-                        Assert.assertEquals(r[i + j], (float)0);\n+                        Assert.assertEquals(r[i + j], (float) 0);\n@@ -306,1 +306,1 @@\n-                Assert.assertEquals(r[idx], (float)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], (float) 0, \"at index #\" + idx);\n@@ -316,1 +316,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -321,1 +321,1 @@\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]]);\n@@ -331,1 +331,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + order[i + j]]);\n@@ -333,1 +333,1 @@\n-                         Assert.assertEquals(r[i+j], (float)0);\n+                         Assert.assertEquals(r[i + j], (float) 0);\n@@ -339,1 +339,1 @@\n-                Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -341,1 +341,1 @@\n-                Assert.assertEquals(r[i+j], (float)0, \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], (float) 0, \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -351,1 +351,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -353,1 +353,1 @@\n-                         Assert.assertEquals(r[i+j], (float)0);\n+                         Assert.assertEquals(r[i + j], (float) 0);\n@@ -359,1 +359,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -361,1 +361,1 @@\n-                Assert.assertEquals(r[i+j], (float)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], (float) 0, \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -370,1 +370,1 @@\n-                a[j]=a[idx];\n+                a[j] = a[idx];\n@@ -421,1 +421,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], (float)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])));\n+                Assert.assertEquals(r[i], f.apply(a[i], (float) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])));\n@@ -424,1 +424,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], (float)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])),\n+            Assert.assertEquals(r[i], f.apply(a[i], (float) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])),\n@@ -470,1 +470,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], (float)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n+                Assert.assertEquals(r[i], f.apply(a[i], (float) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n@@ -473,1 +473,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], (float)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]),\n+            Assert.assertEquals(r[i], f.apply(a[i], (float) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]),\n@@ -486,1 +486,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]));\n@@ -490,1 +490,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]), \"at index #\" + i + \", \" + j);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]), \"at index #\" + i + \", \" + j);\n@@ -504,1 +504,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]));\n@@ -508,1 +508,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i+j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i + j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n@@ -656,1 +656,0 @@\n-\n@@ -755,1 +754,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -760,1 +759,1 @@\n-            float[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            float[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -763,1 +762,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -765,1 +764,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -782,1 +781,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -787,1 +786,1 @@\n-            float[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            float[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -790,1 +789,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -792,1 +791,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -803,1 +802,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -808,1 +807,1 @@\n-            float[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            float[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -811,1 +810,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -813,1 +812,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -815,1 +814,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(r, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(r, i, i + SPECIES.length()))\n@@ -830,1 +829,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -835,1 +834,1 @@\n-            float[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            float[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -850,1 +849,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -855,1 +854,1 @@\n-            float[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            float[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -871,1 +870,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -876,1 +875,1 @@\n-            float[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            float[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -892,1 +891,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -897,1 +896,1 @@\n-            float[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            float[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -914,1 +913,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -919,1 +918,1 @@\n-            float[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            float[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -939,1 +938,1 @@\n-                return (int)0;\n+                return (int) 0;\n@@ -946,1 +945,1 @@\n-                            i -> (float)(-i * 5));\n+                            i -> (float) (-i * 5));\n@@ -950,1 +949,1 @@\n-                            i -> (float)(i * 5));\n+                            i -> (float) (i * 5));\n@@ -954,1 +953,1 @@\n-                            i -> (((float)(i + 1) == 0) ? 1 : (float)(i + 1)));\n+                            i -> (((float) (i + 1) == 0) ? 1 : (float) (i + 1)));\n@@ -958,1 +957,1 @@\n-                            i -> (float)intCornerCaseValue(i));\n+                            i -> (float) intCornerCaseValue(i));\n@@ -966,1 +965,1 @@\n-                Assert.assertEquals(r[i], (int)(a[i+offs]));\n+                Assert.assertEquals(r[i], (int) (a[i + offs]));\n@@ -969,1 +968,1 @@\n-            Assert.assertEquals(r[i], (int)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (int) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -984,1 +983,1 @@\n-                return (long)0;\n+                return (long) 0;\n@@ -991,1 +990,1 @@\n-                            i -> (float)(-i * 5));\n+                            i -> (float) (-i * 5));\n@@ -995,1 +994,1 @@\n-                            i -> (float)(i * 5));\n+                            i -> (float) (i * 5));\n@@ -999,1 +998,1 @@\n-                            i -> (((float)(i + 1) == 0) ? 1 : (float)(i + 1)));\n+                            i -> (((float) (i + 1) == 0) ? 1 : (float) (i + 1)));\n@@ -1003,1 +1002,1 @@\n-                            i -> (float)longCornerCaseValue(i));\n+                            i -> (float) longCornerCaseValue(i));\n@@ -1012,1 +1011,1 @@\n-                Assert.assertEquals(r[i], (long)(a[i+offs]));\n+                Assert.assertEquals(r[i], (long) (a[i + offs]));\n@@ -1015,1 +1014,1 @@\n-            Assert.assertEquals(r[i], (long)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (long) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -1023,1 +1022,1 @@\n-                Assert.assertEquals(r[i], (double)(a[i+offs]));\n+                Assert.assertEquals(r[i], (double) (a[i + offs]));\n@@ -1026,1 +1025,1 @@\n-            Assert.assertEquals(r[i], (double)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (double) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -1030,1 +1029,0 @@\n-\n@@ -1038,1 +1036,1 @@\n-                            i -> (float)(-i * 5));\n+                            i -> (float) (-i * 5));\n@@ -1042,1 +1040,1 @@\n-                            i -> (float)(i * 5));\n+                            i -> (float) (i * 5));\n@@ -1046,1 +1044,1 @@\n-                            i -> (((float)(i + 1) == 0) ? 1 : (float)(i + 1)));\n+                            i -> (((float) (i + 1) == 0) ? 1 : (float) (i + 1)));\n@@ -1189,1 +1187,1 @@\n-                    a[i] = (float)RAND.nextInt(upper);\n+                    a[i] = (float) RAND.nextInt(upper);\n@@ -1214,1 +1212,0 @@\n-\n@@ -1218,1 +1215,1 @@\n-                            i -> (float)i);\n+                            i -> (float) i);\n@@ -1222,1 +1219,1 @@\n-                            i -> (float)(i - (s * BUFFER_REPS \/ 2)));\n+                            i -> (float) (i - (s * BUFFER_REPS \/ 2)));\n@@ -1226,1 +1223,1 @@\n-                            i -> (float)(i + 1));\n+                            i -> (float) (i + 1));\n@@ -1230,1 +1227,1 @@\n-                            i -> (float)(i - 2));\n+                            i -> (float) (i - 2));\n@@ -1234,1 +1231,1 @@\n-                            i -> i%3 == 0 ? (float)i : (i%3 == 1 ? (float)(i + 1) : (float)(i - 2)));\n+                            i -> i % 3 == 0 ? (float) i : (i % 3 == 1 ? (float) (i + 1) : (float) (i - 2)));\n@@ -1310,1 +1307,1 @@\n-                return (float)0.0;\n+                return (float) 0.0;\n@@ -1312,1 +1309,1 @@\n-                return (float)-0.0;\n+                return (float) -0.0;\n@@ -1366,1 +1363,1 @@\n-        FloatVector three = FloatVector.broadcast(SPECIES, (byte)-3);\n+        FloatVector three = FloatVector.broadcast(SPECIES, (byte) -3);\n@@ -1380,1 +1377,1 @@\n-        m = higher.min((float)-1).test(VectorOperators.IS_NEGATIVE);\n+        m = higher.min((float) -1).test(VectorOperators.IS_NEGATIVE);\n@@ -1385,1 +1382,1 @@\n-        assert(max == -3 + scale * (SPECIES.length()-1));\n+        assert(max == -3 + scale * (SPECIES.length() - 1));\n@@ -1400,1 +1397,1 @@\n-        FloatVector io2 = (FloatVector) VectorShuffle.iota(SPECIES,0,1,false).toVector();\n+        FloatVector io2 = (FloatVector) VectorShuffle.iota(SPECIES, 0, 1, false).toVector();\n@@ -1402,1 +1399,1 @@\n-        FloatVector a = io.add((float)1); \/\/[1,2]\n+        FloatVector a = io.add((float) 1); \/\/[1,2]\n@@ -1407,2 +1404,2 @@\n-        FloatVector zab0 = a.rearrange(zip0,b); \/\/[1,-1]\n-        FloatVector zab1 = a.rearrange(zip1,b); \/\/[2,-2]\n+        FloatVector zab0 = a.rearrange(zip0, b); \/\/[1,-1]\n+        FloatVector zab1 = a.rearrange(zip1, b); \/\/[2,-2]\n@@ -1413,2 +1410,2 @@\n-            manual[i+0] = abValues[i\/2];\n-            manual[i+1] = abValues[a.length() + i\/2];\n+            manual[i + 0] = abValues[i \/ 2];\n+            manual[i + 1] = abValues[a.length() + i \/ 2];\n@@ -1419,2 +1416,2 @@\n-        FloatVector uab0 = zab0.rearrange(unz0,zab1);\n-        FloatVector uab1 = zab0.rearrange(unz1,zab1);\n+        FloatVector uab0 = zab0.rearrange(unz0, zab1);\n+        FloatVector uab1 = zab0.rearrange(unz1, zab1);\n@@ -1457,1 +1454,1 @@\n-        return (float)(a + b);\n+        return (float) (a + b);\n@@ -1477,1 +1474,1 @@\n-        return (float)(a + b);\n+        return (float) (a + b);\n@@ -1533,1 +1530,1 @@\n-        return (float)(a - b);\n+        return (float) (a - b);\n@@ -1553,1 +1550,1 @@\n-        return (float)(a - b);\n+        return (float) (a - b);\n@@ -1609,1 +1606,1 @@\n-        return (float)(a * b);\n+        return (float) (a * b);\n@@ -1629,1 +1626,1 @@\n-        return (float)(a * b);\n+        return (float) (a * b);\n@@ -1686,1 +1683,1 @@\n-        return (float)(a \/ b);\n+        return (float) (a \/ b);\n@@ -1706,1 +1703,1 @@\n-        return (float)(a \/ b);\n+        return (float) (a \/ b);\n@@ -1767,1 +1764,1 @@\n-        return (float)(Double.doubleToLongBits(a)!=0?a:b);\n+        return (float) (Double.doubleToLongBits(a) != 0 ? a : b);\n@@ -1959,1 +1956,1 @@\n-            av.lanewise(VectorOperators.ADD, (long)b[i]).intoArray(r, i);\n+            av.lanewise(VectorOperators.ADD, (long) b[i]).intoArray(r, i);\n@@ -1976,1 +1973,1 @@\n-            av.lanewise(VectorOperators.ADD, (long)b[i], vmask).intoArray(r, i);\n+            av.lanewise(VectorOperators.ADD, (long) b[i], vmask).intoArray(r, i);\n@@ -2026,1 +2023,1 @@\n-        return (float)(Math.min(a, b));\n+        return (float) (Math.min(a, b));\n@@ -2046,1 +2043,1 @@\n-        return (float)(Math.min(a, b));\n+        return (float) (Math.min(a, b));\n@@ -2064,1 +2061,1 @@\n-        return (float)(Math.max(a, b));\n+        return (float) (Math.max(a, b));\n@@ -2084,1 +2081,1 @@\n-        return (float)(Math.max(a, b));\n+        return (float) (Math.max(a, b));\n@@ -2607,1 +2604,1 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (float)(65535+i)).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length() - 1)), (float) (65535 + i)).intoArray(r, i);\n@@ -2613,1 +2610,1 @@\n-            assertInsertArraysEquals(r, a, (float)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+            assertInsertArraysEquals(r, a, (float) (65535 + i), (j++ & (SPECIES.length() - 1)), i , i + SPECIES.length());\n@@ -2617,1 +2614,1 @@\n-        return bits(a)==0;\n+        return bits(a) == 0;\n@@ -2650,1 +2647,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_DEFAULT(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_DEFAULT(a[i + j]));\n@@ -2655,1 +2652,1 @@\n-        return bits(a)<0;\n+        return bits(a) < 0;\n@@ -2688,1 +2685,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_NEGATIVE(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_NEGATIVE(a[i + j]));\n@@ -2727,1 +2724,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_FINITE(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_FINITE(a[i + j]));\n@@ -2767,1 +2764,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_NAN(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_NAN(a[i + j]));\n@@ -2807,1 +2804,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_INFINITE(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_INFINITE(a[i + j]));\n@@ -3135,1 +3132,0 @@\n-\n@@ -3163,1 +3159,1 @@\n-            VectorMask<Float> mv = av.compare(VectorOperators.LT, (long)b[i]);\n+            VectorMask<Float> mv = av.compare(VectorOperators.LT, (long) b[i]);\n@@ -3167,1 +3163,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), a[i + j] < (float)((long)b[i]));\n+                Assert.assertEquals(mv.laneIsSet(j), a[i + j] < (float) ((long) b[i]));\n@@ -3172,1 +3168,0 @@\n-\n@@ -3184,1 +3179,1 @@\n-            VectorMask<Float> mv = av.compare(VectorOperators.LT, (long)b[i], vmask);\n+            VectorMask<Float> mv = av.compare(VectorOperators.LT, (long) b[i], vmask);\n@@ -3188,1 +3183,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] < (float)((long)b[i])));\n+                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] < (float) ((long) b[i])));\n@@ -3209,1 +3204,0 @@\n-\n@@ -3237,1 +3231,1 @@\n-            VectorMask<Float> mv = av.compare(VectorOperators.EQ, (long)b[i]);\n+            VectorMask<Float> mv = av.compare(VectorOperators.EQ, (long) b[i]);\n@@ -3241,1 +3235,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), a[i + j] == (float)((long)b[i]));\n+                Assert.assertEquals(mv.laneIsSet(j), a[i + j] == (float) ((long) b[i]));\n@@ -3246,1 +3240,0 @@\n-\n@@ -3258,1 +3251,1 @@\n-            VectorMask<Float> mv = av.compare(VectorOperators.EQ, (long)b[i], vmask);\n+            VectorMask<Float> mv = av.compare(VectorOperators.EQ, (long) b[i], vmask);\n@@ -3262,1 +3255,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] == (float)((long)b[i])));\n+                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] == (float) ((long) b[i])));\n@@ -3373,1 +3366,1 @@\n-                    r[i]=av.lane(0);\n+                    r[i] = av.lane(0);\n@@ -3375,2 +3368,2 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n@@ -3378,4 +3371,4 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n@@ -3383,8 +3376,8 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n@@ -3392,16 +3385,16 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n@@ -3409,32 +3402,32 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n@@ -3442,64 +3435,64 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n-                    r[i+32]=av.lane(32);\n-                    r[i+33]=av.lane(33);\n-                    r[i+34]=av.lane(34);\n-                    r[i+35]=av.lane(35);\n-                    r[i+36]=av.lane(36);\n-                    r[i+37]=av.lane(37);\n-                    r[i+38]=av.lane(38);\n-                    r[i+39]=av.lane(39);\n-                    r[i+40]=av.lane(40);\n-                    r[i+41]=av.lane(41);\n-                    r[i+42]=av.lane(42);\n-                    r[i+43]=av.lane(43);\n-                    r[i+44]=av.lane(44);\n-                    r[i+45]=av.lane(45);\n-                    r[i+46]=av.lane(46);\n-                    r[i+47]=av.lane(47);\n-                    r[i+48]=av.lane(48);\n-                    r[i+49]=av.lane(49);\n-                    r[i+50]=av.lane(50);\n-                    r[i+51]=av.lane(51);\n-                    r[i+52]=av.lane(52);\n-                    r[i+53]=av.lane(53);\n-                    r[i+54]=av.lane(54);\n-                    r[i+55]=av.lane(55);\n-                    r[i+56]=av.lane(56);\n-                    r[i+57]=av.lane(57);\n-                    r[i+58]=av.lane(58);\n-                    r[i+59]=av.lane(59);\n-                    r[i+60]=av.lane(60);\n-                    r[i+61]=av.lane(61);\n-                    r[i+62]=av.lane(62);\n-                    r[i+63]=av.lane(63);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n+                    r[i + 32] = av.lane(32);\n+                    r[i + 33] = av.lane(33);\n+                    r[i + 34] = av.lane(34);\n+                    r[i + 35] = av.lane(35);\n+                    r[i + 36] = av.lane(36);\n+                    r[i + 37] = av.lane(37);\n+                    r[i + 38] = av.lane(38);\n+                    r[i + 39] = av.lane(39);\n+                    r[i + 40] = av.lane(40);\n+                    r[i + 41] = av.lane(41);\n+                    r[i + 42] = av.lane(42);\n+                    r[i + 43] = av.lane(43);\n+                    r[i + 44] = av.lane(44);\n+                    r[i + 45] = av.lane(45);\n+                    r[i + 46] = av.lane(46);\n+                    r[i + 47] = av.lane(47);\n+                    r[i + 48] = av.lane(48);\n+                    r[i + 49] = av.lane(49);\n+                    r[i + 50] = av.lane(50);\n+                    r[i + 51] = av.lane(51);\n+                    r[i + 52] = av.lane(52);\n+                    r[i + 53] = av.lane(53);\n+                    r[i + 54] = av.lane(54);\n+                    r[i + 55] = av.lane(55);\n+                    r[i + 56] = av.lane(56);\n+                    r[i + 57] = av.lane(57);\n+                    r[i + 58] = av.lane(58);\n+                    r[i + 59] = av.lane(59);\n+                    r[i + 60] = av.lane(60);\n+                    r[i + 61] = av.lane(61);\n+                    r[i + 62] = av.lane(62);\n+                    r[i + 63] = av.lane(63);\n@@ -3508,1 +3501,1 @@\n-                        r[i+j]=av.lane(j);\n+                        r[i + j] = av.lane(j);\n@@ -3549,3 +3542,0 @@\n-\n-\n-\n@@ -3555,2 +3545,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = a[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = a[idx + i + origin];\n@@ -3558,1 +3548,1 @@\n-                res[i] = (float)0;\n+                res[i] = (float) 0;\n@@ -3581,1 +3571,1 @@\n-                res[i] = a[idx+i+origin];\n+                res[i] = a[idx + i + origin];\n@@ -3583,1 +3573,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n@@ -3609,2 +3599,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = mask[i] ? a[idx+i+origin] : (float)0;\n+            if(i + origin < SPECIES.length())\n+                res[i] = mask[i] ? a[idx + i + origin] : (float) 0;\n@@ -3612,1 +3602,1 @@\n-                res[i] = mask[i] ? b[idx+j] : (float)0;\n+                res[i] = mask[i] ? b[idx + j] : (float) 0;\n@@ -3643,1 +3633,1 @@\n-                res[i] = (float)0;\n+                res[i] = (float) 0;\n@@ -3645,1 +3635,1 @@\n-                res[i] = a[idx+j];\n+                res[i] = a[idx + j];\n@@ -3671,1 +3661,1 @@\n-                    res[i] = b[idx+i];\n+                    res[i] = b[idx + i];\n@@ -3673,1 +3663,1 @@\n-                    res[i] = a[idx+j];\n+                    res[i] = a[idx + j];\n@@ -3678,1 +3668,1 @@\n-                    res[i] = a[idx+SPECIES.length()-origin+i];\n+                    res[i] = a[idx + SPECIES.length() - origin + i];\n@@ -3680,1 +3670,1 @@\n-                    res[i] = b[idx+origin+j];\n+                    res[i] = b[idx + origin + j];\n@@ -3708,2 +3698,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = b[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = b[idx + i + origin];\n@@ -3711,1 +3701,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n@@ -3716,1 +3706,1 @@\n-            res[i] = mask[i] ? a[idx+i] : res[i];\n+            res[i] = mask[i] ? a[idx + i] : res[i];\n@@ -3722,1 +3712,1 @@\n-                    res1[i] = b[idx+i];\n+                    res1[i] = b[idx + i];\n@@ -3724,2 +3714,2 @@\n-                   res1[i] = res[j];\n-                   j++;\n+                    res1[i] = res[j];\n+                    j++;\n@@ -3731,1 +3721,1 @@\n-                    res1[i] = res[SPECIES.length()-origin+i];\n+                    res1[i] = res[SPECIES.length() - origin + i];\n@@ -3733,1 +3723,1 @@\n-                    res1[i] = b[idx+origin+j];\n+                    res1[i] = b[idx + origin + j];\n@@ -3763,1 +3753,1 @@\n-        return (float)(Math.sin((double)a));\n+        return (float) (Math.sin((double) a));\n@@ -3767,1 +3757,1 @@\n-        return (float)(StrictMath.sin((double)a));\n+        return (float) (StrictMath.sin((double) a));\n@@ -3787,1 +3777,1 @@\n-        return (float)(Math.exp((double)a));\n+        return (float) (Math.exp((double) a));\n@@ -3791,1 +3781,1 @@\n-        return (float)(StrictMath.exp((double)a));\n+        return (float) (StrictMath.exp((double) a));\n@@ -3811,1 +3801,1 @@\n-        return (float)(Math.log1p((double)a));\n+        return (float) (Math.log1p((double) a));\n@@ -3815,1 +3805,1 @@\n-        return (float)(StrictMath.log1p((double)a));\n+        return (float) (StrictMath.log1p((double) a));\n@@ -3835,1 +3825,1 @@\n-        return (float)(Math.log((double)a));\n+        return (float) (Math.log((double) a));\n@@ -3839,1 +3829,1 @@\n-        return (float)(StrictMath.log((double)a));\n+        return (float) (StrictMath.log((double) a));\n@@ -3859,1 +3849,1 @@\n-        return (float)(Math.log10((double)a));\n+        return (float) (Math.log10((double) a));\n@@ -3863,1 +3853,1 @@\n-        return (float)(StrictMath.log10((double)a));\n+        return (float) (StrictMath.log10((double) a));\n@@ -3883,1 +3873,1 @@\n-        return (float)(Math.expm1((double)a));\n+        return (float) (Math.expm1((double) a));\n@@ -3887,1 +3877,1 @@\n-        return (float)(StrictMath.expm1((double)a));\n+        return (float) (StrictMath.expm1((double) a));\n@@ -3907,1 +3897,1 @@\n-        return (float)(Math.cos((double)a));\n+        return (float) (Math.cos((double) a));\n@@ -3911,1 +3901,1 @@\n-        return (float)(StrictMath.cos((double)a));\n+        return (float) (StrictMath.cos((double) a));\n@@ -3931,1 +3921,1 @@\n-        return (float)(Math.tan((double)a));\n+        return (float) (Math.tan((double) a));\n@@ -3935,1 +3925,1 @@\n-        return (float)(StrictMath.tan((double)a));\n+        return (float) (StrictMath.tan((double) a));\n@@ -3955,1 +3945,1 @@\n-        return (float)(Math.sinh((double)a));\n+        return (float) (Math.sinh((double) a));\n@@ -3959,1 +3949,1 @@\n-        return (float)(StrictMath.sinh((double)a));\n+        return (float) (StrictMath.sinh((double) a));\n@@ -3979,1 +3969,1 @@\n-        return (float)(Math.cosh((double)a));\n+        return (float) (Math.cosh((double) a));\n@@ -3983,1 +3973,1 @@\n-        return (float)(StrictMath.cosh((double)a));\n+        return (float) (StrictMath.cosh((double) a));\n@@ -4003,1 +3993,1 @@\n-        return (float)(Math.tanh((double)a));\n+        return (float) (Math.tanh((double) a));\n@@ -4007,1 +3997,1 @@\n-        return (float)(StrictMath.tanh((double)a));\n+        return (float) (StrictMath.tanh((double) a));\n@@ -4027,1 +4017,1 @@\n-        return (float)(Math.asin((double)a));\n+        return (float) (Math.asin((double) a));\n@@ -4031,1 +4021,1 @@\n-        return (float)(StrictMath.asin((double)a));\n+        return (float) (StrictMath.asin((double) a));\n@@ -4051,1 +4041,1 @@\n-        return (float)(Math.acos((double)a));\n+        return (float) (Math.acos((double) a));\n@@ -4055,1 +4045,1 @@\n-        return (float)(StrictMath.acos((double)a));\n+        return (float) (StrictMath.acos((double) a));\n@@ -4075,1 +4065,1 @@\n-        return (float)(Math.atan((double)a));\n+        return (float) (Math.atan((double) a));\n@@ -4079,1 +4069,1 @@\n-        return (float)(StrictMath.atan((double)a));\n+        return (float) (StrictMath.atan((double) a));\n@@ -4099,1 +4089,1 @@\n-        return (float)(Math.cbrt((double)a));\n+        return (float) (Math.cbrt((double) a));\n@@ -4103,1 +4093,1 @@\n-        return (float)(StrictMath.cbrt((double)a));\n+        return (float) (StrictMath.cbrt((double) a));\n@@ -4123,1 +4113,1 @@\n-        return (float)(Math.hypot((double)a, (double)b));\n+        return (float)(Math.hypot((double) a, (double) b));\n@@ -4127,1 +4117,1 @@\n-        return (float)(StrictMath.hypot((double)a, (double)b));\n+        return (float)(StrictMath.hypot((double) a, (double) b));\n@@ -4150,1 +4140,1 @@\n-        return (float)(Math.pow((double)a, (double)b));\n+        return (float)(Math.pow((double) a, (double) b));\n@@ -4154,1 +4144,1 @@\n-        return (float)(StrictMath.pow((double)a, (double)b));\n+        return (float)(StrictMath.pow((double) a, (double) b));\n@@ -4175,1 +4165,1 @@\n-        return (float)(Math.pow((double)a, (double)b));\n+        return (float)(Math.pow((double) a, (double) b));\n@@ -4179,1 +4169,1 @@\n-        return (float)(StrictMath.pow((double)a, (double)b));\n+        return (float)(StrictMath.pow((double) a, (double) b));\n@@ -4202,1 +4192,1 @@\n-        return (float)(Math.atan2((double)a, (double)b));\n+        return (float)(Math.atan2((double) a, (double) b));\n@@ -4206,1 +4196,1 @@\n-        return (float)(StrictMath.atan2((double)a, (double)b));\n+        return (float)(StrictMath.atan2((double) a, (double) b));\n@@ -4259,1 +4249,1 @@\n-        return (float)(Math.fma(a, b, c));\n+        return (float) (Math.fma(a, b, c));\n@@ -4262,1 +4252,1 @@\n-        return (float)(Math.fma(a, b, c));\n+        return (float) (Math.fma(a, b, c));\n@@ -4452,1 +4442,1 @@\n-        return (float)(-((float)a));\n+        return (float) (-((float) a));\n@@ -4456,1 +4446,1 @@\n-        return (float)(-((float)a));\n+        return (float) (-((float) a));\n@@ -4508,1 +4498,1 @@\n-        return (float)(Math.abs((float)a));\n+        return (float) (Math.abs((float) a));\n@@ -4512,1 +4502,1 @@\n-        return (float)(Math.abs((float)a));\n+        return (float) (Math.abs((float) a));\n@@ -4571,1 +4561,1 @@\n-        return (float)(Math.sqrt((double)a));\n+        return (float) (Math.sqrt((double) a));\n@@ -4575,1 +4565,1 @@\n-        return (float)(Math.sqrt((double)a));\n+        return (float) (Math.sqrt((double) a));\n@@ -4748,1 +4738,1 @@\n-        return (long)res;\n+        return (long) res;\n@@ -4787,1 +4777,1 @@\n-        return (long)res;\n+        return (long) res;\n@@ -4844,1 +4834,1 @@\n-                av.blend((long)b[i], vmask).intoArray(r, i);\n+                av.blend((long) b[i], vmask).intoArray(r, i);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float128VectorTests.java","additions":320,"deletions":330,"binary":false,"changes":650,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,1 +74,1 @@\n-                Assert.assertEquals(r[i], mask[(i*8\/SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0);\n+                Assert.assertEquals(r[i], mask[(i * 8 \/ SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0);\n@@ -77,1 +77,1 @@\n-            Assert.assertEquals(r[i], mask[(i*8\/SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0, \"at index #\" + i);\n+            Assert.assertEquals(r[i], mask[(i * 8 \/ SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0, \"at index #\" + i);\n@@ -84,1 +84,1 @@\n-                            i -> (float)(i * 5));\n+                            i -> (float) (i * 5));\n@@ -88,1 +88,1 @@\n-                            i -> (((float)(i + 1) == 0) ? 1 : (float)(i + 1)));\n+                            i -> (((float) (i + 1) == 0) ? 1 : (float) (i + 1)));\n@@ -195,1 +195,1 @@\n-                            return new Object[]{fa, fb, bo};\n+                            return new Object[] {fa, fb, bo};\n@@ -206,1 +206,1 @@\n-                            return new Object[]{fa, fb, fm, bo};\n+                            return new Object[] {fa, fb, fm, bo};\n@@ -215,1 +215,1 @@\n-                    return new Object[]{fa, bo};\n+                    return new Object[] {fa, bo};\n@@ -225,1 +225,1 @@\n-                        return new Object[]{fa, fm, bo};\n+                        return new Object[] {fa, fm, bo};\n@@ -944,2 +944,0 @@\n-\n-\n@@ -1095,1 +1093,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float256VectorLoadStoreTests.java","additions":9,"deletions":12,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -93,1 +93,1 @@\n-            float[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            float[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -253,1 +253,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i+order[i + j]]);\n@@ -258,1 +258,1 @@\n-            Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i+order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]]);\n@@ -274,1 +274,1 @@\n-                    Assert.assertEquals(r[i + k], (float)0);\n+                    Assert.assertEquals(r[i + k], (float) 0);\n@@ -282,1 +282,1 @@\n-                Assert.assertEquals(r[idx], (float)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], (float) 0, \"at index #\" + idx);\n@@ -297,1 +297,1 @@\n-                        Assert.assertEquals(r[i + j], (float)0);\n+                        Assert.assertEquals(r[i + j], (float) 0);\n@@ -306,1 +306,1 @@\n-                Assert.assertEquals(r[idx], (float)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], (float) 0, \"at index #\" + idx);\n@@ -316,1 +316,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -321,1 +321,1 @@\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]]);\n@@ -331,1 +331,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + order[i + j]]);\n@@ -333,1 +333,1 @@\n-                         Assert.assertEquals(r[i+j], (float)0);\n+                         Assert.assertEquals(r[i + j], (float) 0);\n@@ -339,1 +339,1 @@\n-                Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -341,1 +341,1 @@\n-                Assert.assertEquals(r[i+j], (float)0, \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], (float) 0, \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -351,1 +351,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -353,1 +353,1 @@\n-                         Assert.assertEquals(r[i+j], (float)0);\n+                         Assert.assertEquals(r[i + j], (float) 0);\n@@ -359,1 +359,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -361,1 +361,1 @@\n-                Assert.assertEquals(r[i+j], (float)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], (float) 0, \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -370,1 +370,1 @@\n-                a[j]=a[idx];\n+                a[j] = a[idx];\n@@ -421,1 +421,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], (float)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])));\n+                Assert.assertEquals(r[i], f.apply(a[i], (float) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])));\n@@ -424,1 +424,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], (float)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])),\n+            Assert.assertEquals(r[i], f.apply(a[i], (float) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])),\n@@ -470,1 +470,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], (float)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n+                Assert.assertEquals(r[i], f.apply(a[i], (float) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n@@ -473,1 +473,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], (float)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]),\n+            Assert.assertEquals(r[i], f.apply(a[i], (float) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]),\n@@ -486,1 +486,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]));\n@@ -490,1 +490,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]), \"at index #\" + i + \", \" + j);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]), \"at index #\" + i + \", \" + j);\n@@ -504,1 +504,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]));\n@@ -508,1 +508,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i+j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i + j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n@@ -656,1 +656,0 @@\n-\n@@ -755,1 +754,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -760,1 +759,1 @@\n-            float[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            float[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -763,1 +762,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -765,1 +764,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -782,1 +781,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -787,1 +786,1 @@\n-            float[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            float[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -790,1 +789,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -792,1 +791,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -803,1 +802,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -808,1 +807,1 @@\n-            float[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            float[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -811,1 +810,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -813,1 +812,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -815,1 +814,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(r, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(r, i, i + SPECIES.length()))\n@@ -830,1 +829,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -835,1 +834,1 @@\n-            float[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            float[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -850,1 +849,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -855,1 +854,1 @@\n-            float[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            float[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -871,1 +870,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -876,1 +875,1 @@\n-            float[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            float[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -892,1 +891,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -897,1 +896,1 @@\n-            float[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            float[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -914,1 +913,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -919,1 +918,1 @@\n-            float[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            float[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -939,1 +938,1 @@\n-                return (int)0;\n+                return (int) 0;\n@@ -946,1 +945,1 @@\n-                            i -> (float)(-i * 5));\n+                            i -> (float) (-i * 5));\n@@ -950,1 +949,1 @@\n-                            i -> (float)(i * 5));\n+                            i -> (float) (i * 5));\n@@ -954,1 +953,1 @@\n-                            i -> (((float)(i + 1) == 0) ? 1 : (float)(i + 1)));\n+                            i -> (((float) (i + 1) == 0) ? 1 : (float) (i + 1)));\n@@ -958,1 +957,1 @@\n-                            i -> (float)intCornerCaseValue(i));\n+                            i -> (float) intCornerCaseValue(i));\n@@ -966,1 +965,1 @@\n-                Assert.assertEquals(r[i], (int)(a[i+offs]));\n+                Assert.assertEquals(r[i], (int) (a[i + offs]));\n@@ -969,1 +968,1 @@\n-            Assert.assertEquals(r[i], (int)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (int) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -984,1 +983,1 @@\n-                return (long)0;\n+                return (long) 0;\n@@ -991,1 +990,1 @@\n-                            i -> (float)(-i * 5));\n+                            i -> (float) (-i * 5));\n@@ -995,1 +994,1 @@\n-                            i -> (float)(i * 5));\n+                            i -> (float) (i * 5));\n@@ -999,1 +998,1 @@\n-                            i -> (((float)(i + 1) == 0) ? 1 : (float)(i + 1)));\n+                            i -> (((float) (i + 1) == 0) ? 1 : (float) (i + 1)));\n@@ -1003,1 +1002,1 @@\n-                            i -> (float)longCornerCaseValue(i));\n+                            i -> (float) longCornerCaseValue(i));\n@@ -1012,1 +1011,1 @@\n-                Assert.assertEquals(r[i], (long)(a[i+offs]));\n+                Assert.assertEquals(r[i], (long) (a[i + offs]));\n@@ -1015,1 +1014,1 @@\n-            Assert.assertEquals(r[i], (long)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (long) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -1023,1 +1022,1 @@\n-                Assert.assertEquals(r[i], (double)(a[i+offs]));\n+                Assert.assertEquals(r[i], (double) (a[i + offs]));\n@@ -1026,1 +1025,1 @@\n-            Assert.assertEquals(r[i], (double)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (double) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -1030,1 +1029,0 @@\n-\n@@ -1038,1 +1036,1 @@\n-                            i -> (float)(-i * 5));\n+                            i -> (float) (-i * 5));\n@@ -1042,1 +1040,1 @@\n-                            i -> (float)(i * 5));\n+                            i -> (float) (i * 5));\n@@ -1046,1 +1044,1 @@\n-                            i -> (((float)(i + 1) == 0) ? 1 : (float)(i + 1)));\n+                            i -> (((float) (i + 1) == 0) ? 1 : (float) (i + 1)));\n@@ -1189,1 +1187,1 @@\n-                    a[i] = (float)RAND.nextInt(upper);\n+                    a[i] = (float) RAND.nextInt(upper);\n@@ -1214,1 +1212,0 @@\n-\n@@ -1218,1 +1215,1 @@\n-                            i -> (float)i);\n+                            i -> (float) i);\n@@ -1222,1 +1219,1 @@\n-                            i -> (float)(i - (s * BUFFER_REPS \/ 2)));\n+                            i -> (float) (i - (s * BUFFER_REPS \/ 2)));\n@@ -1226,1 +1223,1 @@\n-                            i -> (float)(i + 1));\n+                            i -> (float) (i + 1));\n@@ -1230,1 +1227,1 @@\n-                            i -> (float)(i - 2));\n+                            i -> (float) (i - 2));\n@@ -1234,1 +1231,1 @@\n-                            i -> i%3 == 0 ? (float)i : (i%3 == 1 ? (float)(i + 1) : (float)(i - 2)));\n+                            i -> i % 3 == 0 ? (float) i : (i % 3 == 1 ? (float) (i + 1) : (float) (i - 2)));\n@@ -1310,1 +1307,1 @@\n-                return (float)0.0;\n+                return (float) 0.0;\n@@ -1312,1 +1309,1 @@\n-                return (float)-0.0;\n+                return (float) -0.0;\n@@ -1366,1 +1363,1 @@\n-        FloatVector three = FloatVector.broadcast(SPECIES, (byte)-3);\n+        FloatVector three = FloatVector.broadcast(SPECIES, (byte) -3);\n@@ -1380,1 +1377,1 @@\n-        m = higher.min((float)-1).test(VectorOperators.IS_NEGATIVE);\n+        m = higher.min((float) -1).test(VectorOperators.IS_NEGATIVE);\n@@ -1385,1 +1382,1 @@\n-        assert(max == -3 + scale * (SPECIES.length()-1));\n+        assert(max == -3 + scale * (SPECIES.length() - 1));\n@@ -1400,1 +1397,1 @@\n-        FloatVector io2 = (FloatVector) VectorShuffle.iota(SPECIES,0,1,false).toVector();\n+        FloatVector io2 = (FloatVector) VectorShuffle.iota(SPECIES, 0, 1, false).toVector();\n@@ -1402,1 +1399,1 @@\n-        FloatVector a = io.add((float)1); \/\/[1,2]\n+        FloatVector a = io.add((float) 1); \/\/[1,2]\n@@ -1407,2 +1404,2 @@\n-        FloatVector zab0 = a.rearrange(zip0,b); \/\/[1,-1]\n-        FloatVector zab1 = a.rearrange(zip1,b); \/\/[2,-2]\n+        FloatVector zab0 = a.rearrange(zip0, b); \/\/[1,-1]\n+        FloatVector zab1 = a.rearrange(zip1, b); \/\/[2,-2]\n@@ -1413,2 +1410,2 @@\n-            manual[i+0] = abValues[i\/2];\n-            manual[i+1] = abValues[a.length() + i\/2];\n+            manual[i + 0] = abValues[i \/ 2];\n+            manual[i + 1] = abValues[a.length() + i \/ 2];\n@@ -1419,2 +1416,2 @@\n-        FloatVector uab0 = zab0.rearrange(unz0,zab1);\n-        FloatVector uab1 = zab0.rearrange(unz1,zab1);\n+        FloatVector uab0 = zab0.rearrange(unz0, zab1);\n+        FloatVector uab1 = zab0.rearrange(unz1, zab1);\n@@ -1457,1 +1454,1 @@\n-        return (float)(a + b);\n+        return (float) (a + b);\n@@ -1477,1 +1474,1 @@\n-        return (float)(a + b);\n+        return (float) (a + b);\n@@ -1533,1 +1530,1 @@\n-        return (float)(a - b);\n+        return (float) (a - b);\n@@ -1553,1 +1550,1 @@\n-        return (float)(a - b);\n+        return (float) (a - b);\n@@ -1609,1 +1606,1 @@\n-        return (float)(a * b);\n+        return (float) (a * b);\n@@ -1629,1 +1626,1 @@\n-        return (float)(a * b);\n+        return (float) (a * b);\n@@ -1686,1 +1683,1 @@\n-        return (float)(a \/ b);\n+        return (float) (a \/ b);\n@@ -1706,1 +1703,1 @@\n-        return (float)(a \/ b);\n+        return (float) (a \/ b);\n@@ -1767,1 +1764,1 @@\n-        return (float)(Double.doubleToLongBits(a)!=0?a:b);\n+        return (float) (Double.doubleToLongBits(a) != 0 ? a : b);\n@@ -1959,1 +1956,1 @@\n-            av.lanewise(VectorOperators.ADD, (long)b[i]).intoArray(r, i);\n+            av.lanewise(VectorOperators.ADD, (long) b[i]).intoArray(r, i);\n@@ -1976,1 +1973,1 @@\n-            av.lanewise(VectorOperators.ADD, (long)b[i], vmask).intoArray(r, i);\n+            av.lanewise(VectorOperators.ADD, (long) b[i], vmask).intoArray(r, i);\n@@ -2026,1 +2023,1 @@\n-        return (float)(Math.min(a, b));\n+        return (float) (Math.min(a, b));\n@@ -2046,1 +2043,1 @@\n-        return (float)(Math.min(a, b));\n+        return (float) (Math.min(a, b));\n@@ -2064,1 +2061,1 @@\n-        return (float)(Math.max(a, b));\n+        return (float) (Math.max(a, b));\n@@ -2084,1 +2081,1 @@\n-        return (float)(Math.max(a, b));\n+        return (float) (Math.max(a, b));\n@@ -2607,1 +2604,1 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (float)(65535+i)).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length() - 1)), (float) (65535 + i)).intoArray(r, i);\n@@ -2613,1 +2610,1 @@\n-            assertInsertArraysEquals(r, a, (float)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+            assertInsertArraysEquals(r, a, (float) (65535 + i), (j++ & (SPECIES.length() - 1)), i , i + SPECIES.length());\n@@ -2617,1 +2614,1 @@\n-        return bits(a)==0;\n+        return bits(a) == 0;\n@@ -2650,1 +2647,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_DEFAULT(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_DEFAULT(a[i + j]));\n@@ -2655,1 +2652,1 @@\n-        return bits(a)<0;\n+        return bits(a) < 0;\n@@ -2688,1 +2685,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_NEGATIVE(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_NEGATIVE(a[i + j]));\n@@ -2727,1 +2724,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_FINITE(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_FINITE(a[i + j]));\n@@ -2767,1 +2764,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_NAN(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_NAN(a[i + j]));\n@@ -2807,1 +2804,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_INFINITE(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_INFINITE(a[i + j]));\n@@ -3135,1 +3132,0 @@\n-\n@@ -3163,1 +3159,1 @@\n-            VectorMask<Float> mv = av.compare(VectorOperators.LT, (long)b[i]);\n+            VectorMask<Float> mv = av.compare(VectorOperators.LT, (long) b[i]);\n@@ -3167,1 +3163,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), a[i + j] < (float)((long)b[i]));\n+                Assert.assertEquals(mv.laneIsSet(j), a[i + j] < (float) ((long) b[i]));\n@@ -3172,1 +3168,0 @@\n-\n@@ -3184,1 +3179,1 @@\n-            VectorMask<Float> mv = av.compare(VectorOperators.LT, (long)b[i], vmask);\n+            VectorMask<Float> mv = av.compare(VectorOperators.LT, (long) b[i], vmask);\n@@ -3188,1 +3183,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] < (float)((long)b[i])));\n+                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] < (float) ((long) b[i])));\n@@ -3209,1 +3204,0 @@\n-\n@@ -3237,1 +3231,1 @@\n-            VectorMask<Float> mv = av.compare(VectorOperators.EQ, (long)b[i]);\n+            VectorMask<Float> mv = av.compare(VectorOperators.EQ, (long) b[i]);\n@@ -3241,1 +3235,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), a[i + j] == (float)((long)b[i]));\n+                Assert.assertEquals(mv.laneIsSet(j), a[i + j] == (float) ((long) b[i]));\n@@ -3246,1 +3240,0 @@\n-\n@@ -3258,1 +3251,1 @@\n-            VectorMask<Float> mv = av.compare(VectorOperators.EQ, (long)b[i], vmask);\n+            VectorMask<Float> mv = av.compare(VectorOperators.EQ, (long) b[i], vmask);\n@@ -3262,1 +3255,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] == (float)((long)b[i])));\n+                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] == (float) ((long) b[i])));\n@@ -3373,1 +3366,1 @@\n-                    r[i]=av.lane(0);\n+                    r[i] = av.lane(0);\n@@ -3375,2 +3368,2 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n@@ -3378,4 +3371,4 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n@@ -3383,8 +3376,8 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n@@ -3392,16 +3385,16 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n@@ -3409,32 +3402,32 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n@@ -3442,64 +3435,64 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n-                    r[i+32]=av.lane(32);\n-                    r[i+33]=av.lane(33);\n-                    r[i+34]=av.lane(34);\n-                    r[i+35]=av.lane(35);\n-                    r[i+36]=av.lane(36);\n-                    r[i+37]=av.lane(37);\n-                    r[i+38]=av.lane(38);\n-                    r[i+39]=av.lane(39);\n-                    r[i+40]=av.lane(40);\n-                    r[i+41]=av.lane(41);\n-                    r[i+42]=av.lane(42);\n-                    r[i+43]=av.lane(43);\n-                    r[i+44]=av.lane(44);\n-                    r[i+45]=av.lane(45);\n-                    r[i+46]=av.lane(46);\n-                    r[i+47]=av.lane(47);\n-                    r[i+48]=av.lane(48);\n-                    r[i+49]=av.lane(49);\n-                    r[i+50]=av.lane(50);\n-                    r[i+51]=av.lane(51);\n-                    r[i+52]=av.lane(52);\n-                    r[i+53]=av.lane(53);\n-                    r[i+54]=av.lane(54);\n-                    r[i+55]=av.lane(55);\n-                    r[i+56]=av.lane(56);\n-                    r[i+57]=av.lane(57);\n-                    r[i+58]=av.lane(58);\n-                    r[i+59]=av.lane(59);\n-                    r[i+60]=av.lane(60);\n-                    r[i+61]=av.lane(61);\n-                    r[i+62]=av.lane(62);\n-                    r[i+63]=av.lane(63);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n+                    r[i + 32] = av.lane(32);\n+                    r[i + 33] = av.lane(33);\n+                    r[i + 34] = av.lane(34);\n+                    r[i + 35] = av.lane(35);\n+                    r[i + 36] = av.lane(36);\n+                    r[i + 37] = av.lane(37);\n+                    r[i + 38] = av.lane(38);\n+                    r[i + 39] = av.lane(39);\n+                    r[i + 40] = av.lane(40);\n+                    r[i + 41] = av.lane(41);\n+                    r[i + 42] = av.lane(42);\n+                    r[i + 43] = av.lane(43);\n+                    r[i + 44] = av.lane(44);\n+                    r[i + 45] = av.lane(45);\n+                    r[i + 46] = av.lane(46);\n+                    r[i + 47] = av.lane(47);\n+                    r[i + 48] = av.lane(48);\n+                    r[i + 49] = av.lane(49);\n+                    r[i + 50] = av.lane(50);\n+                    r[i + 51] = av.lane(51);\n+                    r[i + 52] = av.lane(52);\n+                    r[i + 53] = av.lane(53);\n+                    r[i + 54] = av.lane(54);\n+                    r[i + 55] = av.lane(55);\n+                    r[i + 56] = av.lane(56);\n+                    r[i + 57] = av.lane(57);\n+                    r[i + 58] = av.lane(58);\n+                    r[i + 59] = av.lane(59);\n+                    r[i + 60] = av.lane(60);\n+                    r[i + 61] = av.lane(61);\n+                    r[i + 62] = av.lane(62);\n+                    r[i + 63] = av.lane(63);\n@@ -3508,1 +3501,1 @@\n-                        r[i+j]=av.lane(j);\n+                        r[i + j] = av.lane(j);\n@@ -3549,3 +3542,0 @@\n-\n-\n-\n@@ -3555,2 +3545,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = a[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = a[idx + i + origin];\n@@ -3558,1 +3548,1 @@\n-                res[i] = (float)0;\n+                res[i] = (float) 0;\n@@ -3581,1 +3571,1 @@\n-                res[i] = a[idx+i+origin];\n+                res[i] = a[idx + i + origin];\n@@ -3583,1 +3573,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n@@ -3609,2 +3599,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = mask[i] ? a[idx+i+origin] : (float)0;\n+            if(i + origin < SPECIES.length())\n+                res[i] = mask[i] ? a[idx + i + origin] : (float) 0;\n@@ -3612,1 +3602,1 @@\n-                res[i] = mask[i] ? b[idx+j] : (float)0;\n+                res[i] = mask[i] ? b[idx + j] : (float) 0;\n@@ -3643,1 +3633,1 @@\n-                res[i] = (float)0;\n+                res[i] = (float) 0;\n@@ -3645,1 +3635,1 @@\n-                res[i] = a[idx+j];\n+                res[i] = a[idx + j];\n@@ -3671,1 +3661,1 @@\n-                    res[i] = b[idx+i];\n+                    res[i] = b[idx + i];\n@@ -3673,1 +3663,1 @@\n-                    res[i] = a[idx+j];\n+                    res[i] = a[idx + j];\n@@ -3678,1 +3668,1 @@\n-                    res[i] = a[idx+SPECIES.length()-origin+i];\n+                    res[i] = a[idx + SPECIES.length() - origin + i];\n@@ -3680,1 +3670,1 @@\n-                    res[i] = b[idx+origin+j];\n+                    res[i] = b[idx + origin + j];\n@@ -3708,2 +3698,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = b[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = b[idx + i + origin];\n@@ -3711,1 +3701,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n@@ -3716,1 +3706,1 @@\n-            res[i] = mask[i] ? a[idx+i] : res[i];\n+            res[i] = mask[i] ? a[idx + i] : res[i];\n@@ -3722,1 +3712,1 @@\n-                    res1[i] = b[idx+i];\n+                    res1[i] = b[idx + i];\n@@ -3724,2 +3714,2 @@\n-                   res1[i] = res[j];\n-                   j++;\n+                    res1[i] = res[j];\n+                    j++;\n@@ -3731,1 +3721,1 @@\n-                    res1[i] = res[SPECIES.length()-origin+i];\n+                    res1[i] = res[SPECIES.length() - origin + i];\n@@ -3733,1 +3723,1 @@\n-                    res1[i] = b[idx+origin+j];\n+                    res1[i] = b[idx + origin + j];\n@@ -3763,1 +3753,1 @@\n-        return (float)(Math.sin((double)a));\n+        return (float) (Math.sin((double) a));\n@@ -3767,1 +3757,1 @@\n-        return (float)(StrictMath.sin((double)a));\n+        return (float) (StrictMath.sin((double) a));\n@@ -3787,1 +3777,1 @@\n-        return (float)(Math.exp((double)a));\n+        return (float) (Math.exp((double) a));\n@@ -3791,1 +3781,1 @@\n-        return (float)(StrictMath.exp((double)a));\n+        return (float) (StrictMath.exp((double) a));\n@@ -3811,1 +3801,1 @@\n-        return (float)(Math.log1p((double)a));\n+        return (float) (Math.log1p((double) a));\n@@ -3815,1 +3805,1 @@\n-        return (float)(StrictMath.log1p((double)a));\n+        return (float) (StrictMath.log1p((double) a));\n@@ -3835,1 +3825,1 @@\n-        return (float)(Math.log((double)a));\n+        return (float) (Math.log((double) a));\n@@ -3839,1 +3829,1 @@\n-        return (float)(StrictMath.log((double)a));\n+        return (float) (StrictMath.log((double) a));\n@@ -3859,1 +3849,1 @@\n-        return (float)(Math.log10((double)a));\n+        return (float) (Math.log10((double) a));\n@@ -3863,1 +3853,1 @@\n-        return (float)(StrictMath.log10((double)a));\n+        return (float) (StrictMath.log10((double) a));\n@@ -3883,1 +3873,1 @@\n-        return (float)(Math.expm1((double)a));\n+        return (float) (Math.expm1((double) a));\n@@ -3887,1 +3877,1 @@\n-        return (float)(StrictMath.expm1((double)a));\n+        return (float) (StrictMath.expm1((double) a));\n@@ -3907,1 +3897,1 @@\n-        return (float)(Math.cos((double)a));\n+        return (float) (Math.cos((double) a));\n@@ -3911,1 +3901,1 @@\n-        return (float)(StrictMath.cos((double)a));\n+        return (float) (StrictMath.cos((double) a));\n@@ -3931,1 +3921,1 @@\n-        return (float)(Math.tan((double)a));\n+        return (float) (Math.tan((double) a));\n@@ -3935,1 +3925,1 @@\n-        return (float)(StrictMath.tan((double)a));\n+        return (float) (StrictMath.tan((double) a));\n@@ -3955,1 +3945,1 @@\n-        return (float)(Math.sinh((double)a));\n+        return (float) (Math.sinh((double) a));\n@@ -3959,1 +3949,1 @@\n-        return (float)(StrictMath.sinh((double)a));\n+        return (float) (StrictMath.sinh((double) a));\n@@ -3979,1 +3969,1 @@\n-        return (float)(Math.cosh((double)a));\n+        return (float) (Math.cosh((double) a));\n@@ -3983,1 +3973,1 @@\n-        return (float)(StrictMath.cosh((double)a));\n+        return (float) (StrictMath.cosh((double) a));\n@@ -4003,1 +3993,1 @@\n-        return (float)(Math.tanh((double)a));\n+        return (float) (Math.tanh((double) a));\n@@ -4007,1 +3997,1 @@\n-        return (float)(StrictMath.tanh((double)a));\n+        return (float) (StrictMath.tanh((double) a));\n@@ -4027,1 +4017,1 @@\n-        return (float)(Math.asin((double)a));\n+        return (float) (Math.asin((double) a));\n@@ -4031,1 +4021,1 @@\n-        return (float)(StrictMath.asin((double)a));\n+        return (float) (StrictMath.asin((double) a));\n@@ -4051,1 +4041,1 @@\n-        return (float)(Math.acos((double)a));\n+        return (float) (Math.acos((double) a));\n@@ -4055,1 +4045,1 @@\n-        return (float)(StrictMath.acos((double)a));\n+        return (float) (StrictMath.acos((double) a));\n@@ -4075,1 +4065,1 @@\n-        return (float)(Math.atan((double)a));\n+        return (float) (Math.atan((double) a));\n@@ -4079,1 +4069,1 @@\n-        return (float)(StrictMath.atan((double)a));\n+        return (float) (StrictMath.atan((double) a));\n@@ -4099,1 +4089,1 @@\n-        return (float)(Math.cbrt((double)a));\n+        return (float) (Math.cbrt((double) a));\n@@ -4103,1 +4093,1 @@\n-        return (float)(StrictMath.cbrt((double)a));\n+        return (float) (StrictMath.cbrt((double) a));\n@@ -4123,1 +4113,1 @@\n-        return (float)(Math.hypot((double)a, (double)b));\n+        return (float)(Math.hypot((double) a, (double) b));\n@@ -4127,1 +4117,1 @@\n-        return (float)(StrictMath.hypot((double)a, (double)b));\n+        return (float)(StrictMath.hypot((double) a, (double) b));\n@@ -4150,1 +4140,1 @@\n-        return (float)(Math.pow((double)a, (double)b));\n+        return (float)(Math.pow((double) a, (double) b));\n@@ -4154,1 +4144,1 @@\n-        return (float)(StrictMath.pow((double)a, (double)b));\n+        return (float)(StrictMath.pow((double) a, (double) b));\n@@ -4175,1 +4165,1 @@\n-        return (float)(Math.pow((double)a, (double)b));\n+        return (float)(Math.pow((double) a, (double) b));\n@@ -4179,1 +4169,1 @@\n-        return (float)(StrictMath.pow((double)a, (double)b));\n+        return (float)(StrictMath.pow((double) a, (double) b));\n@@ -4202,1 +4192,1 @@\n-        return (float)(Math.atan2((double)a, (double)b));\n+        return (float)(Math.atan2((double) a, (double) b));\n@@ -4206,1 +4196,1 @@\n-        return (float)(StrictMath.atan2((double)a, (double)b));\n+        return (float)(StrictMath.atan2((double) a, (double) b));\n@@ -4259,1 +4249,1 @@\n-        return (float)(Math.fma(a, b, c));\n+        return (float) (Math.fma(a, b, c));\n@@ -4262,1 +4252,1 @@\n-        return (float)(Math.fma(a, b, c));\n+        return (float) (Math.fma(a, b, c));\n@@ -4452,1 +4442,1 @@\n-        return (float)(-((float)a));\n+        return (float) (-((float) a));\n@@ -4456,1 +4446,1 @@\n-        return (float)(-((float)a));\n+        return (float) (-((float) a));\n@@ -4508,1 +4498,1 @@\n-        return (float)(Math.abs((float)a));\n+        return (float) (Math.abs((float) a));\n@@ -4512,1 +4502,1 @@\n-        return (float)(Math.abs((float)a));\n+        return (float) (Math.abs((float) a));\n@@ -4571,1 +4561,1 @@\n-        return (float)(Math.sqrt((double)a));\n+        return (float) (Math.sqrt((double) a));\n@@ -4575,1 +4565,1 @@\n-        return (float)(Math.sqrt((double)a));\n+        return (float) (Math.sqrt((double) a));\n@@ -4748,1 +4738,1 @@\n-        return (long)res;\n+        return (long) res;\n@@ -4787,1 +4777,1 @@\n-        return (long)res;\n+        return (long) res;\n@@ -4844,1 +4834,1 @@\n-                av.blend((long)b[i], vmask).intoArray(r, i);\n+                av.blend((long) b[i], vmask).intoArray(r, i);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float256VectorTests.java","additions":320,"deletions":330,"binary":false,"changes":650,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,1 +74,1 @@\n-                Assert.assertEquals(r[i], mask[(i*8\/SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0);\n+                Assert.assertEquals(r[i], mask[(i * 8 \/ SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0);\n@@ -77,1 +77,1 @@\n-            Assert.assertEquals(r[i], mask[(i*8\/SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0, \"at index #\" + i);\n+            Assert.assertEquals(r[i], mask[(i * 8 \/ SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0, \"at index #\" + i);\n@@ -84,1 +84,1 @@\n-                            i -> (float)(i * 5));\n+                            i -> (float) (i * 5));\n@@ -88,1 +88,1 @@\n-                            i -> (((float)(i + 1) == 0) ? 1 : (float)(i + 1)));\n+                            i -> (((float) (i + 1) == 0) ? 1 : (float) (i + 1)));\n@@ -195,1 +195,1 @@\n-                            return new Object[]{fa, fb, bo};\n+                            return new Object[] {fa, fb, bo};\n@@ -206,1 +206,1 @@\n-                            return new Object[]{fa, fb, fm, bo};\n+                            return new Object[] {fa, fb, fm, bo};\n@@ -215,1 +215,1 @@\n-                    return new Object[]{fa, bo};\n+                    return new Object[] {fa, bo};\n@@ -225,1 +225,1 @@\n-                        return new Object[]{fa, fm, bo};\n+                        return new Object[] {fa, fm, bo};\n@@ -944,2 +944,0 @@\n-\n-\n@@ -1095,1 +1093,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float512VectorLoadStoreTests.java","additions":9,"deletions":12,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -93,1 +93,1 @@\n-            float[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            float[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -253,1 +253,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i+order[i + j]]);\n@@ -258,1 +258,1 @@\n-            Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i+order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]]);\n@@ -274,1 +274,1 @@\n-                    Assert.assertEquals(r[i + k], (float)0);\n+                    Assert.assertEquals(r[i + k], (float) 0);\n@@ -282,1 +282,1 @@\n-                Assert.assertEquals(r[idx], (float)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], (float) 0, \"at index #\" + idx);\n@@ -297,1 +297,1 @@\n-                        Assert.assertEquals(r[i + j], (float)0);\n+                        Assert.assertEquals(r[i + j], (float) 0);\n@@ -306,1 +306,1 @@\n-                Assert.assertEquals(r[idx], (float)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], (float) 0, \"at index #\" + idx);\n@@ -316,1 +316,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -321,1 +321,1 @@\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]]);\n@@ -331,1 +331,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + order[i + j]]);\n@@ -333,1 +333,1 @@\n-                         Assert.assertEquals(r[i+j], (float)0);\n+                         Assert.assertEquals(r[i + j], (float) 0);\n@@ -339,1 +339,1 @@\n-                Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -341,1 +341,1 @@\n-                Assert.assertEquals(r[i+j], (float)0, \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], (float) 0, \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -351,1 +351,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -353,1 +353,1 @@\n-                         Assert.assertEquals(r[i+j], (float)0);\n+                         Assert.assertEquals(r[i + j], (float) 0);\n@@ -359,1 +359,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -361,1 +361,1 @@\n-                Assert.assertEquals(r[i+j], (float)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], (float) 0, \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -370,1 +370,1 @@\n-                a[j]=a[idx];\n+                a[j] = a[idx];\n@@ -421,1 +421,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], (float)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])));\n+                Assert.assertEquals(r[i], f.apply(a[i], (float) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])));\n@@ -424,1 +424,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], (float)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])),\n+            Assert.assertEquals(r[i], f.apply(a[i], (float) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])),\n@@ -470,1 +470,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], (float)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n+                Assert.assertEquals(r[i], f.apply(a[i], (float) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n@@ -473,1 +473,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], (float)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]),\n+            Assert.assertEquals(r[i], f.apply(a[i], (float) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]),\n@@ -486,1 +486,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]));\n@@ -490,1 +490,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]), \"at index #\" + i + \", \" + j);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]), \"at index #\" + i + \", \" + j);\n@@ -504,1 +504,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]));\n@@ -508,1 +508,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i+j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i + j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n@@ -656,1 +656,0 @@\n-\n@@ -755,1 +754,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -760,1 +759,1 @@\n-            float[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            float[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -763,1 +762,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -765,1 +764,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -782,1 +781,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -787,1 +786,1 @@\n-            float[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            float[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -790,1 +789,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -792,1 +791,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -803,1 +802,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -808,1 +807,1 @@\n-            float[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            float[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -811,1 +810,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -813,1 +812,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -815,1 +814,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(r, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(r, i, i + SPECIES.length()))\n@@ -830,1 +829,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -835,1 +834,1 @@\n-            float[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            float[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -850,1 +849,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -855,1 +854,1 @@\n-            float[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            float[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -871,1 +870,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -876,1 +875,1 @@\n-            float[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            float[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -892,1 +891,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -897,1 +896,1 @@\n-            float[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            float[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -914,1 +913,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -919,1 +918,1 @@\n-            float[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            float[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -939,1 +938,1 @@\n-                return (int)0;\n+                return (int) 0;\n@@ -946,1 +945,1 @@\n-                            i -> (float)(-i * 5));\n+                            i -> (float) (-i * 5));\n@@ -950,1 +949,1 @@\n-                            i -> (float)(i * 5));\n+                            i -> (float) (i * 5));\n@@ -954,1 +953,1 @@\n-                            i -> (((float)(i + 1) == 0) ? 1 : (float)(i + 1)));\n+                            i -> (((float) (i + 1) == 0) ? 1 : (float) (i + 1)));\n@@ -958,1 +957,1 @@\n-                            i -> (float)intCornerCaseValue(i));\n+                            i -> (float) intCornerCaseValue(i));\n@@ -966,1 +965,1 @@\n-                Assert.assertEquals(r[i], (int)(a[i+offs]));\n+                Assert.assertEquals(r[i], (int) (a[i + offs]));\n@@ -969,1 +968,1 @@\n-            Assert.assertEquals(r[i], (int)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (int) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -984,1 +983,1 @@\n-                return (long)0;\n+                return (long) 0;\n@@ -991,1 +990,1 @@\n-                            i -> (float)(-i * 5));\n+                            i -> (float) (-i * 5));\n@@ -995,1 +994,1 @@\n-                            i -> (float)(i * 5));\n+                            i -> (float) (i * 5));\n@@ -999,1 +998,1 @@\n-                            i -> (((float)(i + 1) == 0) ? 1 : (float)(i + 1)));\n+                            i -> (((float) (i + 1) == 0) ? 1 : (float) (i + 1)));\n@@ -1003,1 +1002,1 @@\n-                            i -> (float)longCornerCaseValue(i));\n+                            i -> (float) longCornerCaseValue(i));\n@@ -1012,1 +1011,1 @@\n-                Assert.assertEquals(r[i], (long)(a[i+offs]));\n+                Assert.assertEquals(r[i], (long) (a[i + offs]));\n@@ -1015,1 +1014,1 @@\n-            Assert.assertEquals(r[i], (long)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (long) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -1023,1 +1022,1 @@\n-                Assert.assertEquals(r[i], (double)(a[i+offs]));\n+                Assert.assertEquals(r[i], (double) (a[i + offs]));\n@@ -1026,1 +1025,1 @@\n-            Assert.assertEquals(r[i], (double)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (double) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -1030,1 +1029,0 @@\n-\n@@ -1038,1 +1036,1 @@\n-                            i -> (float)(-i * 5));\n+                            i -> (float) (-i * 5));\n@@ -1042,1 +1040,1 @@\n-                            i -> (float)(i * 5));\n+                            i -> (float) (i * 5));\n@@ -1046,1 +1044,1 @@\n-                            i -> (((float)(i + 1) == 0) ? 1 : (float)(i + 1)));\n+                            i -> (((float) (i + 1) == 0) ? 1 : (float) (i + 1)));\n@@ -1189,1 +1187,1 @@\n-                    a[i] = (float)RAND.nextInt(upper);\n+                    a[i] = (float) RAND.nextInt(upper);\n@@ -1214,1 +1212,0 @@\n-\n@@ -1218,1 +1215,1 @@\n-                            i -> (float)i);\n+                            i -> (float) i);\n@@ -1222,1 +1219,1 @@\n-                            i -> (float)(i - (s * BUFFER_REPS \/ 2)));\n+                            i -> (float) (i - (s * BUFFER_REPS \/ 2)));\n@@ -1226,1 +1223,1 @@\n-                            i -> (float)(i + 1));\n+                            i -> (float) (i + 1));\n@@ -1230,1 +1227,1 @@\n-                            i -> (float)(i - 2));\n+                            i -> (float) (i - 2));\n@@ -1234,1 +1231,1 @@\n-                            i -> i%3 == 0 ? (float)i : (i%3 == 1 ? (float)(i + 1) : (float)(i - 2)));\n+                            i -> i % 3 == 0 ? (float) i : (i % 3 == 1 ? (float) (i + 1) : (float) (i - 2)));\n@@ -1310,1 +1307,1 @@\n-                return (float)0.0;\n+                return (float) 0.0;\n@@ -1312,1 +1309,1 @@\n-                return (float)-0.0;\n+                return (float) -0.0;\n@@ -1366,1 +1363,1 @@\n-        FloatVector three = FloatVector.broadcast(SPECIES, (byte)-3);\n+        FloatVector three = FloatVector.broadcast(SPECIES, (byte) -3);\n@@ -1380,1 +1377,1 @@\n-        m = higher.min((float)-1).test(VectorOperators.IS_NEGATIVE);\n+        m = higher.min((float) -1).test(VectorOperators.IS_NEGATIVE);\n@@ -1385,1 +1382,1 @@\n-        assert(max == -3 + scale * (SPECIES.length()-1));\n+        assert(max == -3 + scale * (SPECIES.length() - 1));\n@@ -1400,1 +1397,1 @@\n-        FloatVector io2 = (FloatVector) VectorShuffle.iota(SPECIES,0,1,false).toVector();\n+        FloatVector io2 = (FloatVector) VectorShuffle.iota(SPECIES, 0, 1, false).toVector();\n@@ -1402,1 +1399,1 @@\n-        FloatVector a = io.add((float)1); \/\/[1,2]\n+        FloatVector a = io.add((float) 1); \/\/[1,2]\n@@ -1407,2 +1404,2 @@\n-        FloatVector zab0 = a.rearrange(zip0,b); \/\/[1,-1]\n-        FloatVector zab1 = a.rearrange(zip1,b); \/\/[2,-2]\n+        FloatVector zab0 = a.rearrange(zip0, b); \/\/[1,-1]\n+        FloatVector zab1 = a.rearrange(zip1, b); \/\/[2,-2]\n@@ -1413,2 +1410,2 @@\n-            manual[i+0] = abValues[i\/2];\n-            manual[i+1] = abValues[a.length() + i\/2];\n+            manual[i + 0] = abValues[i \/ 2];\n+            manual[i + 1] = abValues[a.length() + i \/ 2];\n@@ -1419,2 +1416,2 @@\n-        FloatVector uab0 = zab0.rearrange(unz0,zab1);\n-        FloatVector uab1 = zab0.rearrange(unz1,zab1);\n+        FloatVector uab0 = zab0.rearrange(unz0, zab1);\n+        FloatVector uab1 = zab0.rearrange(unz1, zab1);\n@@ -1457,1 +1454,1 @@\n-        return (float)(a + b);\n+        return (float) (a + b);\n@@ -1477,1 +1474,1 @@\n-        return (float)(a + b);\n+        return (float) (a + b);\n@@ -1533,1 +1530,1 @@\n-        return (float)(a - b);\n+        return (float) (a - b);\n@@ -1553,1 +1550,1 @@\n-        return (float)(a - b);\n+        return (float) (a - b);\n@@ -1609,1 +1606,1 @@\n-        return (float)(a * b);\n+        return (float) (a * b);\n@@ -1629,1 +1626,1 @@\n-        return (float)(a * b);\n+        return (float) (a * b);\n@@ -1686,1 +1683,1 @@\n-        return (float)(a \/ b);\n+        return (float) (a \/ b);\n@@ -1706,1 +1703,1 @@\n-        return (float)(a \/ b);\n+        return (float) (a \/ b);\n@@ -1767,1 +1764,1 @@\n-        return (float)(Double.doubleToLongBits(a)!=0?a:b);\n+        return (float) (Double.doubleToLongBits(a) != 0 ? a : b);\n@@ -1959,1 +1956,1 @@\n-            av.lanewise(VectorOperators.ADD, (long)b[i]).intoArray(r, i);\n+            av.lanewise(VectorOperators.ADD, (long) b[i]).intoArray(r, i);\n@@ -1976,1 +1973,1 @@\n-            av.lanewise(VectorOperators.ADD, (long)b[i], vmask).intoArray(r, i);\n+            av.lanewise(VectorOperators.ADD, (long) b[i], vmask).intoArray(r, i);\n@@ -2026,1 +2023,1 @@\n-        return (float)(Math.min(a, b));\n+        return (float) (Math.min(a, b));\n@@ -2046,1 +2043,1 @@\n-        return (float)(Math.min(a, b));\n+        return (float) (Math.min(a, b));\n@@ -2064,1 +2061,1 @@\n-        return (float)(Math.max(a, b));\n+        return (float) (Math.max(a, b));\n@@ -2084,1 +2081,1 @@\n-        return (float)(Math.max(a, b));\n+        return (float) (Math.max(a, b));\n@@ -2607,1 +2604,1 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (float)(65535+i)).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length() - 1)), (float) (65535 + i)).intoArray(r, i);\n@@ -2613,1 +2610,1 @@\n-            assertInsertArraysEquals(r, a, (float)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+            assertInsertArraysEquals(r, a, (float) (65535 + i), (j++ & (SPECIES.length() - 1)), i , i + SPECIES.length());\n@@ -2617,1 +2614,1 @@\n-        return bits(a)==0;\n+        return bits(a) == 0;\n@@ -2650,1 +2647,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_DEFAULT(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_DEFAULT(a[i + j]));\n@@ -2655,1 +2652,1 @@\n-        return bits(a)<0;\n+        return bits(a) < 0;\n@@ -2688,1 +2685,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_NEGATIVE(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_NEGATIVE(a[i + j]));\n@@ -2727,1 +2724,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_FINITE(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_FINITE(a[i + j]));\n@@ -2767,1 +2764,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_NAN(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_NAN(a[i + j]));\n@@ -2807,1 +2804,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_INFINITE(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_INFINITE(a[i + j]));\n@@ -3135,1 +3132,0 @@\n-\n@@ -3163,1 +3159,1 @@\n-            VectorMask<Float> mv = av.compare(VectorOperators.LT, (long)b[i]);\n+            VectorMask<Float> mv = av.compare(VectorOperators.LT, (long) b[i]);\n@@ -3167,1 +3163,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), a[i + j] < (float)((long)b[i]));\n+                Assert.assertEquals(mv.laneIsSet(j), a[i + j] < (float) ((long) b[i]));\n@@ -3172,1 +3168,0 @@\n-\n@@ -3184,1 +3179,1 @@\n-            VectorMask<Float> mv = av.compare(VectorOperators.LT, (long)b[i], vmask);\n+            VectorMask<Float> mv = av.compare(VectorOperators.LT, (long) b[i], vmask);\n@@ -3188,1 +3183,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] < (float)((long)b[i])));\n+                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] < (float) ((long) b[i])));\n@@ -3209,1 +3204,0 @@\n-\n@@ -3237,1 +3231,1 @@\n-            VectorMask<Float> mv = av.compare(VectorOperators.EQ, (long)b[i]);\n+            VectorMask<Float> mv = av.compare(VectorOperators.EQ, (long) b[i]);\n@@ -3241,1 +3235,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), a[i + j] == (float)((long)b[i]));\n+                Assert.assertEquals(mv.laneIsSet(j), a[i + j] == (float) ((long) b[i]));\n@@ -3246,1 +3240,0 @@\n-\n@@ -3258,1 +3251,1 @@\n-            VectorMask<Float> mv = av.compare(VectorOperators.EQ, (long)b[i], vmask);\n+            VectorMask<Float> mv = av.compare(VectorOperators.EQ, (long) b[i], vmask);\n@@ -3262,1 +3255,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] == (float)((long)b[i])));\n+                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] == (float) ((long) b[i])));\n@@ -3373,1 +3366,1 @@\n-                    r[i]=av.lane(0);\n+                    r[i] = av.lane(0);\n@@ -3375,2 +3368,2 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n@@ -3378,4 +3371,4 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n@@ -3383,8 +3376,8 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n@@ -3392,16 +3385,16 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n@@ -3409,32 +3402,32 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n@@ -3442,64 +3435,64 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n-                    r[i+32]=av.lane(32);\n-                    r[i+33]=av.lane(33);\n-                    r[i+34]=av.lane(34);\n-                    r[i+35]=av.lane(35);\n-                    r[i+36]=av.lane(36);\n-                    r[i+37]=av.lane(37);\n-                    r[i+38]=av.lane(38);\n-                    r[i+39]=av.lane(39);\n-                    r[i+40]=av.lane(40);\n-                    r[i+41]=av.lane(41);\n-                    r[i+42]=av.lane(42);\n-                    r[i+43]=av.lane(43);\n-                    r[i+44]=av.lane(44);\n-                    r[i+45]=av.lane(45);\n-                    r[i+46]=av.lane(46);\n-                    r[i+47]=av.lane(47);\n-                    r[i+48]=av.lane(48);\n-                    r[i+49]=av.lane(49);\n-                    r[i+50]=av.lane(50);\n-                    r[i+51]=av.lane(51);\n-                    r[i+52]=av.lane(52);\n-                    r[i+53]=av.lane(53);\n-                    r[i+54]=av.lane(54);\n-                    r[i+55]=av.lane(55);\n-                    r[i+56]=av.lane(56);\n-                    r[i+57]=av.lane(57);\n-                    r[i+58]=av.lane(58);\n-                    r[i+59]=av.lane(59);\n-                    r[i+60]=av.lane(60);\n-                    r[i+61]=av.lane(61);\n-                    r[i+62]=av.lane(62);\n-                    r[i+63]=av.lane(63);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n+                    r[i + 32] = av.lane(32);\n+                    r[i + 33] = av.lane(33);\n+                    r[i + 34] = av.lane(34);\n+                    r[i + 35] = av.lane(35);\n+                    r[i + 36] = av.lane(36);\n+                    r[i + 37] = av.lane(37);\n+                    r[i + 38] = av.lane(38);\n+                    r[i + 39] = av.lane(39);\n+                    r[i + 40] = av.lane(40);\n+                    r[i + 41] = av.lane(41);\n+                    r[i + 42] = av.lane(42);\n+                    r[i + 43] = av.lane(43);\n+                    r[i + 44] = av.lane(44);\n+                    r[i + 45] = av.lane(45);\n+                    r[i + 46] = av.lane(46);\n+                    r[i + 47] = av.lane(47);\n+                    r[i + 48] = av.lane(48);\n+                    r[i + 49] = av.lane(49);\n+                    r[i + 50] = av.lane(50);\n+                    r[i + 51] = av.lane(51);\n+                    r[i + 52] = av.lane(52);\n+                    r[i + 53] = av.lane(53);\n+                    r[i + 54] = av.lane(54);\n+                    r[i + 55] = av.lane(55);\n+                    r[i + 56] = av.lane(56);\n+                    r[i + 57] = av.lane(57);\n+                    r[i + 58] = av.lane(58);\n+                    r[i + 59] = av.lane(59);\n+                    r[i + 60] = av.lane(60);\n+                    r[i + 61] = av.lane(61);\n+                    r[i + 62] = av.lane(62);\n+                    r[i + 63] = av.lane(63);\n@@ -3508,1 +3501,1 @@\n-                        r[i+j]=av.lane(j);\n+                        r[i + j] = av.lane(j);\n@@ -3549,3 +3542,0 @@\n-\n-\n-\n@@ -3555,2 +3545,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = a[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = a[idx + i + origin];\n@@ -3558,1 +3548,1 @@\n-                res[i] = (float)0;\n+                res[i] = (float) 0;\n@@ -3581,1 +3571,1 @@\n-                res[i] = a[idx+i+origin];\n+                res[i] = a[idx + i + origin];\n@@ -3583,1 +3573,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n@@ -3609,2 +3599,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = mask[i] ? a[idx+i+origin] : (float)0;\n+            if(i + origin < SPECIES.length())\n+                res[i] = mask[i] ? a[idx + i + origin] : (float) 0;\n@@ -3612,1 +3602,1 @@\n-                res[i] = mask[i] ? b[idx+j] : (float)0;\n+                res[i] = mask[i] ? b[idx + j] : (float) 0;\n@@ -3643,1 +3633,1 @@\n-                res[i] = (float)0;\n+                res[i] = (float) 0;\n@@ -3645,1 +3635,1 @@\n-                res[i] = a[idx+j];\n+                res[i] = a[idx + j];\n@@ -3671,1 +3661,1 @@\n-                    res[i] = b[idx+i];\n+                    res[i] = b[idx + i];\n@@ -3673,1 +3663,1 @@\n-                    res[i] = a[idx+j];\n+                    res[i] = a[idx + j];\n@@ -3678,1 +3668,1 @@\n-                    res[i] = a[idx+SPECIES.length()-origin+i];\n+                    res[i] = a[idx + SPECIES.length() - origin + i];\n@@ -3680,1 +3670,1 @@\n-                    res[i] = b[idx+origin+j];\n+                    res[i] = b[idx + origin + j];\n@@ -3708,2 +3698,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = b[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = b[idx + i + origin];\n@@ -3711,1 +3701,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n@@ -3716,1 +3706,1 @@\n-            res[i] = mask[i] ? a[idx+i] : res[i];\n+            res[i] = mask[i] ? a[idx + i] : res[i];\n@@ -3722,1 +3712,1 @@\n-                    res1[i] = b[idx+i];\n+                    res1[i] = b[idx + i];\n@@ -3724,2 +3714,2 @@\n-                   res1[i] = res[j];\n-                   j++;\n+                    res1[i] = res[j];\n+                    j++;\n@@ -3731,1 +3721,1 @@\n-                    res1[i] = res[SPECIES.length()-origin+i];\n+                    res1[i] = res[SPECIES.length() - origin + i];\n@@ -3733,1 +3723,1 @@\n-                    res1[i] = b[idx+origin+j];\n+                    res1[i] = b[idx + origin + j];\n@@ -3763,1 +3753,1 @@\n-        return (float)(Math.sin((double)a));\n+        return (float) (Math.sin((double) a));\n@@ -3767,1 +3757,1 @@\n-        return (float)(StrictMath.sin((double)a));\n+        return (float) (StrictMath.sin((double) a));\n@@ -3787,1 +3777,1 @@\n-        return (float)(Math.exp((double)a));\n+        return (float) (Math.exp((double) a));\n@@ -3791,1 +3781,1 @@\n-        return (float)(StrictMath.exp((double)a));\n+        return (float) (StrictMath.exp((double) a));\n@@ -3811,1 +3801,1 @@\n-        return (float)(Math.log1p((double)a));\n+        return (float) (Math.log1p((double) a));\n@@ -3815,1 +3805,1 @@\n-        return (float)(StrictMath.log1p((double)a));\n+        return (float) (StrictMath.log1p((double) a));\n@@ -3835,1 +3825,1 @@\n-        return (float)(Math.log((double)a));\n+        return (float) (Math.log((double) a));\n@@ -3839,1 +3829,1 @@\n-        return (float)(StrictMath.log((double)a));\n+        return (float) (StrictMath.log((double) a));\n@@ -3859,1 +3849,1 @@\n-        return (float)(Math.log10((double)a));\n+        return (float) (Math.log10((double) a));\n@@ -3863,1 +3853,1 @@\n-        return (float)(StrictMath.log10((double)a));\n+        return (float) (StrictMath.log10((double) a));\n@@ -3883,1 +3873,1 @@\n-        return (float)(Math.expm1((double)a));\n+        return (float) (Math.expm1((double) a));\n@@ -3887,1 +3877,1 @@\n-        return (float)(StrictMath.expm1((double)a));\n+        return (float) (StrictMath.expm1((double) a));\n@@ -3907,1 +3897,1 @@\n-        return (float)(Math.cos((double)a));\n+        return (float) (Math.cos((double) a));\n@@ -3911,1 +3901,1 @@\n-        return (float)(StrictMath.cos((double)a));\n+        return (float) (StrictMath.cos((double) a));\n@@ -3931,1 +3921,1 @@\n-        return (float)(Math.tan((double)a));\n+        return (float) (Math.tan((double) a));\n@@ -3935,1 +3925,1 @@\n-        return (float)(StrictMath.tan((double)a));\n+        return (float) (StrictMath.tan((double) a));\n@@ -3955,1 +3945,1 @@\n-        return (float)(Math.sinh((double)a));\n+        return (float) (Math.sinh((double) a));\n@@ -3959,1 +3949,1 @@\n-        return (float)(StrictMath.sinh((double)a));\n+        return (float) (StrictMath.sinh((double) a));\n@@ -3979,1 +3969,1 @@\n-        return (float)(Math.cosh((double)a));\n+        return (float) (Math.cosh((double) a));\n@@ -3983,1 +3973,1 @@\n-        return (float)(StrictMath.cosh((double)a));\n+        return (float) (StrictMath.cosh((double) a));\n@@ -4003,1 +3993,1 @@\n-        return (float)(Math.tanh((double)a));\n+        return (float) (Math.tanh((double) a));\n@@ -4007,1 +3997,1 @@\n-        return (float)(StrictMath.tanh((double)a));\n+        return (float) (StrictMath.tanh((double) a));\n@@ -4027,1 +4017,1 @@\n-        return (float)(Math.asin((double)a));\n+        return (float) (Math.asin((double) a));\n@@ -4031,1 +4021,1 @@\n-        return (float)(StrictMath.asin((double)a));\n+        return (float) (StrictMath.asin((double) a));\n@@ -4051,1 +4041,1 @@\n-        return (float)(Math.acos((double)a));\n+        return (float) (Math.acos((double) a));\n@@ -4055,1 +4045,1 @@\n-        return (float)(StrictMath.acos((double)a));\n+        return (float) (StrictMath.acos((double) a));\n@@ -4075,1 +4065,1 @@\n-        return (float)(Math.atan((double)a));\n+        return (float) (Math.atan((double) a));\n@@ -4079,1 +4069,1 @@\n-        return (float)(StrictMath.atan((double)a));\n+        return (float) (StrictMath.atan((double) a));\n@@ -4099,1 +4089,1 @@\n-        return (float)(Math.cbrt((double)a));\n+        return (float) (Math.cbrt((double) a));\n@@ -4103,1 +4093,1 @@\n-        return (float)(StrictMath.cbrt((double)a));\n+        return (float) (StrictMath.cbrt((double) a));\n@@ -4123,1 +4113,1 @@\n-        return (float)(Math.hypot((double)a, (double)b));\n+        return (float)(Math.hypot((double) a, (double) b));\n@@ -4127,1 +4117,1 @@\n-        return (float)(StrictMath.hypot((double)a, (double)b));\n+        return (float)(StrictMath.hypot((double) a, (double) b));\n@@ -4150,1 +4140,1 @@\n-        return (float)(Math.pow((double)a, (double)b));\n+        return (float)(Math.pow((double) a, (double) b));\n@@ -4154,1 +4144,1 @@\n-        return (float)(StrictMath.pow((double)a, (double)b));\n+        return (float)(StrictMath.pow((double) a, (double) b));\n@@ -4175,1 +4165,1 @@\n-        return (float)(Math.pow((double)a, (double)b));\n+        return (float)(Math.pow((double) a, (double) b));\n@@ -4179,1 +4169,1 @@\n-        return (float)(StrictMath.pow((double)a, (double)b));\n+        return (float)(StrictMath.pow((double) a, (double) b));\n@@ -4202,1 +4192,1 @@\n-        return (float)(Math.atan2((double)a, (double)b));\n+        return (float)(Math.atan2((double) a, (double) b));\n@@ -4206,1 +4196,1 @@\n-        return (float)(StrictMath.atan2((double)a, (double)b));\n+        return (float)(StrictMath.atan2((double) a, (double) b));\n@@ -4259,1 +4249,1 @@\n-        return (float)(Math.fma(a, b, c));\n+        return (float) (Math.fma(a, b, c));\n@@ -4262,1 +4252,1 @@\n-        return (float)(Math.fma(a, b, c));\n+        return (float) (Math.fma(a, b, c));\n@@ -4452,1 +4442,1 @@\n-        return (float)(-((float)a));\n+        return (float) (-((float) a));\n@@ -4456,1 +4446,1 @@\n-        return (float)(-((float)a));\n+        return (float) (-((float) a));\n@@ -4508,1 +4498,1 @@\n-        return (float)(Math.abs((float)a));\n+        return (float) (Math.abs((float) a));\n@@ -4512,1 +4502,1 @@\n-        return (float)(Math.abs((float)a));\n+        return (float) (Math.abs((float) a));\n@@ -4571,1 +4561,1 @@\n-        return (float)(Math.sqrt((double)a));\n+        return (float) (Math.sqrt((double) a));\n@@ -4575,1 +4565,1 @@\n-        return (float)(Math.sqrt((double)a));\n+        return (float) (Math.sqrt((double) a));\n@@ -4748,1 +4738,1 @@\n-        return (long)res;\n+        return (long) res;\n@@ -4787,1 +4777,1 @@\n-        return (long)res;\n+        return (long) res;\n@@ -4844,1 +4834,1 @@\n-                av.blend((long)b[i], vmask).intoArray(r, i);\n+                av.blend((long) b[i], vmask).intoArray(r, i);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float512VectorTests.java","additions":320,"deletions":330,"binary":false,"changes":650,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,1 +74,1 @@\n-                Assert.assertEquals(r[i], mask[(i*8\/SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0);\n+                Assert.assertEquals(r[i], mask[(i * 8 \/ SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0);\n@@ -77,1 +77,1 @@\n-            Assert.assertEquals(r[i], mask[(i*8\/SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0, \"at index #\" + i);\n+            Assert.assertEquals(r[i], mask[(i * 8 \/ SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0, \"at index #\" + i);\n@@ -84,1 +84,1 @@\n-                            i -> (float)(i * 5));\n+                            i -> (float) (i * 5));\n@@ -88,1 +88,1 @@\n-                            i -> (((float)(i + 1) == 0) ? 1 : (float)(i + 1)));\n+                            i -> (((float) (i + 1) == 0) ? 1 : (float) (i + 1)));\n@@ -195,1 +195,1 @@\n-                            return new Object[]{fa, fb, bo};\n+                            return new Object[] {fa, fb, bo};\n@@ -206,1 +206,1 @@\n-                            return new Object[]{fa, fb, fm, bo};\n+                            return new Object[] {fa, fb, fm, bo};\n@@ -215,1 +215,1 @@\n-                    return new Object[]{fa, bo};\n+                    return new Object[] {fa, bo};\n@@ -225,1 +225,1 @@\n-                        return new Object[]{fa, fm, bo};\n+                        return new Object[] {fa, fm, bo};\n@@ -944,2 +944,0 @@\n-\n-\n@@ -1095,1 +1093,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float64VectorLoadStoreTests.java","additions":9,"deletions":12,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -93,1 +93,1 @@\n-            float[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            float[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -253,1 +253,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i+order[i + j]]);\n@@ -258,1 +258,1 @@\n-            Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i+order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]]);\n@@ -274,1 +274,1 @@\n-                    Assert.assertEquals(r[i + k], (float)0);\n+                    Assert.assertEquals(r[i + k], (float) 0);\n@@ -282,1 +282,1 @@\n-                Assert.assertEquals(r[idx], (float)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], (float) 0, \"at index #\" + idx);\n@@ -297,1 +297,1 @@\n-                        Assert.assertEquals(r[i + j], (float)0);\n+                        Assert.assertEquals(r[i + j], (float) 0);\n@@ -306,1 +306,1 @@\n-                Assert.assertEquals(r[idx], (float)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], (float) 0, \"at index #\" + idx);\n@@ -316,1 +316,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -321,1 +321,1 @@\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]]);\n@@ -331,1 +331,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + order[i + j]]);\n@@ -333,1 +333,1 @@\n-                         Assert.assertEquals(r[i+j], (float)0);\n+                         Assert.assertEquals(r[i + j], (float) 0);\n@@ -339,1 +339,1 @@\n-                Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -341,1 +341,1 @@\n-                Assert.assertEquals(r[i+j], (float)0, \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], (float) 0, \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -351,1 +351,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -353,1 +353,1 @@\n-                         Assert.assertEquals(r[i+j], (float)0);\n+                         Assert.assertEquals(r[i + j], (float) 0);\n@@ -359,1 +359,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -361,1 +361,1 @@\n-                Assert.assertEquals(r[i+j], (float)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], (float) 0, \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -370,1 +370,1 @@\n-                a[j]=a[idx];\n+                a[j] = a[idx];\n@@ -421,1 +421,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], (float)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])));\n+                Assert.assertEquals(r[i], f.apply(a[i], (float) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])));\n@@ -424,1 +424,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], (float)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])),\n+            Assert.assertEquals(r[i], f.apply(a[i], (float) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])),\n@@ -470,1 +470,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], (float)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n+                Assert.assertEquals(r[i], f.apply(a[i], (float) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n@@ -473,1 +473,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], (float)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]),\n+            Assert.assertEquals(r[i], f.apply(a[i], (float) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]),\n@@ -486,1 +486,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]));\n@@ -490,1 +490,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]), \"at index #\" + i + \", \" + j);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]), \"at index #\" + i + \", \" + j);\n@@ -504,1 +504,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]));\n@@ -508,1 +508,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i+j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i + j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n@@ -656,1 +656,0 @@\n-\n@@ -755,1 +754,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -760,1 +759,1 @@\n-            float[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            float[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -763,1 +762,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -765,1 +764,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -782,1 +781,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -787,1 +786,1 @@\n-            float[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            float[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -790,1 +789,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -792,1 +791,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -803,1 +802,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -808,1 +807,1 @@\n-            float[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            float[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -811,1 +810,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -813,1 +812,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -815,1 +814,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(r, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(r, i, i + SPECIES.length()))\n@@ -830,1 +829,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -835,1 +834,1 @@\n-            float[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            float[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -850,1 +849,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -855,1 +854,1 @@\n-            float[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            float[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -871,1 +870,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -876,1 +875,1 @@\n-            float[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            float[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -892,1 +891,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -897,1 +896,1 @@\n-            float[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            float[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -914,1 +913,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -919,1 +918,1 @@\n-            float[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            float[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -939,1 +938,1 @@\n-                return (int)0;\n+                return (int) 0;\n@@ -946,1 +945,1 @@\n-                            i -> (float)(-i * 5));\n+                            i -> (float) (-i * 5));\n@@ -950,1 +949,1 @@\n-                            i -> (float)(i * 5));\n+                            i -> (float) (i * 5));\n@@ -954,1 +953,1 @@\n-                            i -> (((float)(i + 1) == 0) ? 1 : (float)(i + 1)));\n+                            i -> (((float) (i + 1) == 0) ? 1 : (float) (i + 1)));\n@@ -958,1 +957,1 @@\n-                            i -> (float)intCornerCaseValue(i));\n+                            i -> (float) intCornerCaseValue(i));\n@@ -966,1 +965,1 @@\n-                Assert.assertEquals(r[i], (int)(a[i+offs]));\n+                Assert.assertEquals(r[i], (int) (a[i + offs]));\n@@ -969,1 +968,1 @@\n-            Assert.assertEquals(r[i], (int)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (int) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -984,1 +983,1 @@\n-                return (long)0;\n+                return (long) 0;\n@@ -991,1 +990,1 @@\n-                            i -> (float)(-i * 5));\n+                            i -> (float) (-i * 5));\n@@ -995,1 +994,1 @@\n-                            i -> (float)(i * 5));\n+                            i -> (float) (i * 5));\n@@ -999,1 +998,1 @@\n-                            i -> (((float)(i + 1) == 0) ? 1 : (float)(i + 1)));\n+                            i -> (((float) (i + 1) == 0) ? 1 : (float) (i + 1)));\n@@ -1003,1 +1002,1 @@\n-                            i -> (float)longCornerCaseValue(i));\n+                            i -> (float) longCornerCaseValue(i));\n@@ -1012,1 +1011,1 @@\n-                Assert.assertEquals(r[i], (long)(a[i+offs]));\n+                Assert.assertEquals(r[i], (long) (a[i + offs]));\n@@ -1015,1 +1014,1 @@\n-            Assert.assertEquals(r[i], (long)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (long) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -1023,1 +1022,1 @@\n-                Assert.assertEquals(r[i], (double)(a[i+offs]));\n+                Assert.assertEquals(r[i], (double) (a[i + offs]));\n@@ -1026,1 +1025,1 @@\n-            Assert.assertEquals(r[i], (double)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (double) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -1030,1 +1029,0 @@\n-\n@@ -1038,1 +1036,1 @@\n-                            i -> (float)(-i * 5));\n+                            i -> (float) (-i * 5));\n@@ -1042,1 +1040,1 @@\n-                            i -> (float)(i * 5));\n+                            i -> (float) (i * 5));\n@@ -1046,1 +1044,1 @@\n-                            i -> (((float)(i + 1) == 0) ? 1 : (float)(i + 1)));\n+                            i -> (((float) (i + 1) == 0) ? 1 : (float) (i + 1)));\n@@ -1189,1 +1187,1 @@\n-                    a[i] = (float)RAND.nextInt(upper);\n+                    a[i] = (float) RAND.nextInt(upper);\n@@ -1214,1 +1212,0 @@\n-\n@@ -1218,1 +1215,1 @@\n-                            i -> (float)i);\n+                            i -> (float) i);\n@@ -1222,1 +1219,1 @@\n-                            i -> (float)(i - (s * BUFFER_REPS \/ 2)));\n+                            i -> (float) (i - (s * BUFFER_REPS \/ 2)));\n@@ -1226,1 +1223,1 @@\n-                            i -> (float)(i + 1));\n+                            i -> (float) (i + 1));\n@@ -1230,1 +1227,1 @@\n-                            i -> (float)(i - 2));\n+                            i -> (float) (i - 2));\n@@ -1234,1 +1231,1 @@\n-                            i -> i%3 == 0 ? (float)i : (i%3 == 1 ? (float)(i + 1) : (float)(i - 2)));\n+                            i -> i % 3 == 0 ? (float) i : (i % 3 == 1 ? (float) (i + 1) : (float) (i - 2)));\n@@ -1310,1 +1307,1 @@\n-                return (float)0.0;\n+                return (float) 0.0;\n@@ -1312,1 +1309,1 @@\n-                return (float)-0.0;\n+                return (float) -0.0;\n@@ -1366,1 +1363,1 @@\n-        FloatVector three = FloatVector.broadcast(SPECIES, (byte)-3);\n+        FloatVector three = FloatVector.broadcast(SPECIES, (byte) -3);\n@@ -1380,1 +1377,1 @@\n-        m = higher.min((float)-1).test(VectorOperators.IS_NEGATIVE);\n+        m = higher.min((float) -1).test(VectorOperators.IS_NEGATIVE);\n@@ -1385,1 +1382,1 @@\n-        assert(max == -3 + scale * (SPECIES.length()-1));\n+        assert(max == -3 + scale * (SPECIES.length() - 1));\n@@ -1400,1 +1397,1 @@\n-        FloatVector io2 = (FloatVector) VectorShuffle.iota(SPECIES,0,1,false).toVector();\n+        FloatVector io2 = (FloatVector) VectorShuffle.iota(SPECIES, 0, 1, false).toVector();\n@@ -1402,1 +1399,1 @@\n-        FloatVector a = io.add((float)1); \/\/[1,2]\n+        FloatVector a = io.add((float) 1); \/\/[1,2]\n@@ -1407,2 +1404,2 @@\n-        FloatVector zab0 = a.rearrange(zip0,b); \/\/[1,-1]\n-        FloatVector zab1 = a.rearrange(zip1,b); \/\/[2,-2]\n+        FloatVector zab0 = a.rearrange(zip0, b); \/\/[1,-1]\n+        FloatVector zab1 = a.rearrange(zip1, b); \/\/[2,-2]\n@@ -1413,2 +1410,2 @@\n-            manual[i+0] = abValues[i\/2];\n-            manual[i+1] = abValues[a.length() + i\/2];\n+            manual[i + 0] = abValues[i \/ 2];\n+            manual[i + 1] = abValues[a.length() + i \/ 2];\n@@ -1419,2 +1416,2 @@\n-        FloatVector uab0 = zab0.rearrange(unz0,zab1);\n-        FloatVector uab1 = zab0.rearrange(unz1,zab1);\n+        FloatVector uab0 = zab0.rearrange(unz0, zab1);\n+        FloatVector uab1 = zab0.rearrange(unz1, zab1);\n@@ -1457,1 +1454,1 @@\n-        return (float)(a + b);\n+        return (float) (a + b);\n@@ -1477,1 +1474,1 @@\n-        return (float)(a + b);\n+        return (float) (a + b);\n@@ -1533,1 +1530,1 @@\n-        return (float)(a - b);\n+        return (float) (a - b);\n@@ -1553,1 +1550,1 @@\n-        return (float)(a - b);\n+        return (float) (a - b);\n@@ -1609,1 +1606,1 @@\n-        return (float)(a * b);\n+        return (float) (a * b);\n@@ -1629,1 +1626,1 @@\n-        return (float)(a * b);\n+        return (float) (a * b);\n@@ -1686,1 +1683,1 @@\n-        return (float)(a \/ b);\n+        return (float) (a \/ b);\n@@ -1706,1 +1703,1 @@\n-        return (float)(a \/ b);\n+        return (float) (a \/ b);\n@@ -1767,1 +1764,1 @@\n-        return (float)(Double.doubleToLongBits(a)!=0?a:b);\n+        return (float) (Double.doubleToLongBits(a) != 0 ? a : b);\n@@ -1959,1 +1956,1 @@\n-            av.lanewise(VectorOperators.ADD, (long)b[i]).intoArray(r, i);\n+            av.lanewise(VectorOperators.ADD, (long) b[i]).intoArray(r, i);\n@@ -1976,1 +1973,1 @@\n-            av.lanewise(VectorOperators.ADD, (long)b[i], vmask).intoArray(r, i);\n+            av.lanewise(VectorOperators.ADD, (long) b[i], vmask).intoArray(r, i);\n@@ -2026,1 +2023,1 @@\n-        return (float)(Math.min(a, b));\n+        return (float) (Math.min(a, b));\n@@ -2046,1 +2043,1 @@\n-        return (float)(Math.min(a, b));\n+        return (float) (Math.min(a, b));\n@@ -2064,1 +2061,1 @@\n-        return (float)(Math.max(a, b));\n+        return (float) (Math.max(a, b));\n@@ -2084,1 +2081,1 @@\n-        return (float)(Math.max(a, b));\n+        return (float) (Math.max(a, b));\n@@ -2607,1 +2604,1 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (float)(65535+i)).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length() - 1)), (float) (65535 + i)).intoArray(r, i);\n@@ -2613,1 +2610,1 @@\n-            assertInsertArraysEquals(r, a, (float)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+            assertInsertArraysEquals(r, a, (float) (65535 + i), (j++ & (SPECIES.length() - 1)), i , i + SPECIES.length());\n@@ -2617,1 +2614,1 @@\n-        return bits(a)==0;\n+        return bits(a) == 0;\n@@ -2650,1 +2647,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_DEFAULT(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_DEFAULT(a[i + j]));\n@@ -2655,1 +2652,1 @@\n-        return bits(a)<0;\n+        return bits(a) < 0;\n@@ -2688,1 +2685,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_NEGATIVE(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_NEGATIVE(a[i + j]));\n@@ -2727,1 +2724,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_FINITE(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_FINITE(a[i + j]));\n@@ -2767,1 +2764,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_NAN(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_NAN(a[i + j]));\n@@ -2807,1 +2804,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_INFINITE(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_INFINITE(a[i + j]));\n@@ -3135,1 +3132,0 @@\n-\n@@ -3163,1 +3159,1 @@\n-            VectorMask<Float> mv = av.compare(VectorOperators.LT, (long)b[i]);\n+            VectorMask<Float> mv = av.compare(VectorOperators.LT, (long) b[i]);\n@@ -3167,1 +3163,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), a[i + j] < (float)((long)b[i]));\n+                Assert.assertEquals(mv.laneIsSet(j), a[i + j] < (float) ((long) b[i]));\n@@ -3172,1 +3168,0 @@\n-\n@@ -3184,1 +3179,1 @@\n-            VectorMask<Float> mv = av.compare(VectorOperators.LT, (long)b[i], vmask);\n+            VectorMask<Float> mv = av.compare(VectorOperators.LT, (long) b[i], vmask);\n@@ -3188,1 +3183,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] < (float)((long)b[i])));\n+                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] < (float) ((long) b[i])));\n@@ -3209,1 +3204,0 @@\n-\n@@ -3237,1 +3231,1 @@\n-            VectorMask<Float> mv = av.compare(VectorOperators.EQ, (long)b[i]);\n+            VectorMask<Float> mv = av.compare(VectorOperators.EQ, (long) b[i]);\n@@ -3241,1 +3235,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), a[i + j] == (float)((long)b[i]));\n+                Assert.assertEquals(mv.laneIsSet(j), a[i + j] == (float) ((long) b[i]));\n@@ -3246,1 +3240,0 @@\n-\n@@ -3258,1 +3251,1 @@\n-            VectorMask<Float> mv = av.compare(VectorOperators.EQ, (long)b[i], vmask);\n+            VectorMask<Float> mv = av.compare(VectorOperators.EQ, (long) b[i], vmask);\n@@ -3262,1 +3255,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] == (float)((long)b[i])));\n+                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] == (float) ((long) b[i])));\n@@ -3373,1 +3366,1 @@\n-                    r[i]=av.lane(0);\n+                    r[i] = av.lane(0);\n@@ -3375,2 +3368,2 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n@@ -3378,4 +3371,4 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n@@ -3383,8 +3376,8 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n@@ -3392,16 +3385,16 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n@@ -3409,32 +3402,32 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n@@ -3442,64 +3435,64 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n-                    r[i+32]=av.lane(32);\n-                    r[i+33]=av.lane(33);\n-                    r[i+34]=av.lane(34);\n-                    r[i+35]=av.lane(35);\n-                    r[i+36]=av.lane(36);\n-                    r[i+37]=av.lane(37);\n-                    r[i+38]=av.lane(38);\n-                    r[i+39]=av.lane(39);\n-                    r[i+40]=av.lane(40);\n-                    r[i+41]=av.lane(41);\n-                    r[i+42]=av.lane(42);\n-                    r[i+43]=av.lane(43);\n-                    r[i+44]=av.lane(44);\n-                    r[i+45]=av.lane(45);\n-                    r[i+46]=av.lane(46);\n-                    r[i+47]=av.lane(47);\n-                    r[i+48]=av.lane(48);\n-                    r[i+49]=av.lane(49);\n-                    r[i+50]=av.lane(50);\n-                    r[i+51]=av.lane(51);\n-                    r[i+52]=av.lane(52);\n-                    r[i+53]=av.lane(53);\n-                    r[i+54]=av.lane(54);\n-                    r[i+55]=av.lane(55);\n-                    r[i+56]=av.lane(56);\n-                    r[i+57]=av.lane(57);\n-                    r[i+58]=av.lane(58);\n-                    r[i+59]=av.lane(59);\n-                    r[i+60]=av.lane(60);\n-                    r[i+61]=av.lane(61);\n-                    r[i+62]=av.lane(62);\n-                    r[i+63]=av.lane(63);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n+                    r[i + 32] = av.lane(32);\n+                    r[i + 33] = av.lane(33);\n+                    r[i + 34] = av.lane(34);\n+                    r[i + 35] = av.lane(35);\n+                    r[i + 36] = av.lane(36);\n+                    r[i + 37] = av.lane(37);\n+                    r[i + 38] = av.lane(38);\n+                    r[i + 39] = av.lane(39);\n+                    r[i + 40] = av.lane(40);\n+                    r[i + 41] = av.lane(41);\n+                    r[i + 42] = av.lane(42);\n+                    r[i + 43] = av.lane(43);\n+                    r[i + 44] = av.lane(44);\n+                    r[i + 45] = av.lane(45);\n+                    r[i + 46] = av.lane(46);\n+                    r[i + 47] = av.lane(47);\n+                    r[i + 48] = av.lane(48);\n+                    r[i + 49] = av.lane(49);\n+                    r[i + 50] = av.lane(50);\n+                    r[i + 51] = av.lane(51);\n+                    r[i + 52] = av.lane(52);\n+                    r[i + 53] = av.lane(53);\n+                    r[i + 54] = av.lane(54);\n+                    r[i + 55] = av.lane(55);\n+                    r[i + 56] = av.lane(56);\n+                    r[i + 57] = av.lane(57);\n+                    r[i + 58] = av.lane(58);\n+                    r[i + 59] = av.lane(59);\n+                    r[i + 60] = av.lane(60);\n+                    r[i + 61] = av.lane(61);\n+                    r[i + 62] = av.lane(62);\n+                    r[i + 63] = av.lane(63);\n@@ -3508,1 +3501,1 @@\n-                        r[i+j]=av.lane(j);\n+                        r[i + j] = av.lane(j);\n@@ -3549,3 +3542,0 @@\n-\n-\n-\n@@ -3555,2 +3545,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = a[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = a[idx + i + origin];\n@@ -3558,1 +3548,1 @@\n-                res[i] = (float)0;\n+                res[i] = (float) 0;\n@@ -3581,1 +3571,1 @@\n-                res[i] = a[idx+i+origin];\n+                res[i] = a[idx + i + origin];\n@@ -3583,1 +3573,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n@@ -3609,2 +3599,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = mask[i] ? a[idx+i+origin] : (float)0;\n+            if(i + origin < SPECIES.length())\n+                res[i] = mask[i] ? a[idx + i + origin] : (float) 0;\n@@ -3612,1 +3602,1 @@\n-                res[i] = mask[i] ? b[idx+j] : (float)0;\n+                res[i] = mask[i] ? b[idx + j] : (float) 0;\n@@ -3643,1 +3633,1 @@\n-                res[i] = (float)0;\n+                res[i] = (float) 0;\n@@ -3645,1 +3635,1 @@\n-                res[i] = a[idx+j];\n+                res[i] = a[idx + j];\n@@ -3671,1 +3661,1 @@\n-                    res[i] = b[idx+i];\n+                    res[i] = b[idx + i];\n@@ -3673,1 +3663,1 @@\n-                    res[i] = a[idx+j];\n+                    res[i] = a[idx + j];\n@@ -3678,1 +3668,1 @@\n-                    res[i] = a[idx+SPECIES.length()-origin+i];\n+                    res[i] = a[idx + SPECIES.length() - origin + i];\n@@ -3680,1 +3670,1 @@\n-                    res[i] = b[idx+origin+j];\n+                    res[i] = b[idx + origin + j];\n@@ -3708,2 +3698,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = b[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = b[idx + i + origin];\n@@ -3711,1 +3701,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n@@ -3716,1 +3706,1 @@\n-            res[i] = mask[i] ? a[idx+i] : res[i];\n+            res[i] = mask[i] ? a[idx + i] : res[i];\n@@ -3722,1 +3712,1 @@\n-                    res1[i] = b[idx+i];\n+                    res1[i] = b[idx + i];\n@@ -3724,2 +3714,2 @@\n-                   res1[i] = res[j];\n-                   j++;\n+                    res1[i] = res[j];\n+                    j++;\n@@ -3731,1 +3721,1 @@\n-                    res1[i] = res[SPECIES.length()-origin+i];\n+                    res1[i] = res[SPECIES.length() - origin + i];\n@@ -3733,1 +3723,1 @@\n-                    res1[i] = b[idx+origin+j];\n+                    res1[i] = b[idx + origin + j];\n@@ -3763,1 +3753,1 @@\n-        return (float)(Math.sin((double)a));\n+        return (float) (Math.sin((double) a));\n@@ -3767,1 +3757,1 @@\n-        return (float)(StrictMath.sin((double)a));\n+        return (float) (StrictMath.sin((double) a));\n@@ -3787,1 +3777,1 @@\n-        return (float)(Math.exp((double)a));\n+        return (float) (Math.exp((double) a));\n@@ -3791,1 +3781,1 @@\n-        return (float)(StrictMath.exp((double)a));\n+        return (float) (StrictMath.exp((double) a));\n@@ -3811,1 +3801,1 @@\n-        return (float)(Math.log1p((double)a));\n+        return (float) (Math.log1p((double) a));\n@@ -3815,1 +3805,1 @@\n-        return (float)(StrictMath.log1p((double)a));\n+        return (float) (StrictMath.log1p((double) a));\n@@ -3835,1 +3825,1 @@\n-        return (float)(Math.log((double)a));\n+        return (float) (Math.log((double) a));\n@@ -3839,1 +3829,1 @@\n-        return (float)(StrictMath.log((double)a));\n+        return (float) (StrictMath.log((double) a));\n@@ -3859,1 +3849,1 @@\n-        return (float)(Math.log10((double)a));\n+        return (float) (Math.log10((double) a));\n@@ -3863,1 +3853,1 @@\n-        return (float)(StrictMath.log10((double)a));\n+        return (float) (StrictMath.log10((double) a));\n@@ -3883,1 +3873,1 @@\n-        return (float)(Math.expm1((double)a));\n+        return (float) (Math.expm1((double) a));\n@@ -3887,1 +3877,1 @@\n-        return (float)(StrictMath.expm1((double)a));\n+        return (float) (StrictMath.expm1((double) a));\n@@ -3907,1 +3897,1 @@\n-        return (float)(Math.cos((double)a));\n+        return (float) (Math.cos((double) a));\n@@ -3911,1 +3901,1 @@\n-        return (float)(StrictMath.cos((double)a));\n+        return (float) (StrictMath.cos((double) a));\n@@ -3931,1 +3921,1 @@\n-        return (float)(Math.tan((double)a));\n+        return (float) (Math.tan((double) a));\n@@ -3935,1 +3925,1 @@\n-        return (float)(StrictMath.tan((double)a));\n+        return (float) (StrictMath.tan((double) a));\n@@ -3955,1 +3945,1 @@\n-        return (float)(Math.sinh((double)a));\n+        return (float) (Math.sinh((double) a));\n@@ -3959,1 +3949,1 @@\n-        return (float)(StrictMath.sinh((double)a));\n+        return (float) (StrictMath.sinh((double) a));\n@@ -3979,1 +3969,1 @@\n-        return (float)(Math.cosh((double)a));\n+        return (float) (Math.cosh((double) a));\n@@ -3983,1 +3973,1 @@\n-        return (float)(StrictMath.cosh((double)a));\n+        return (float) (StrictMath.cosh((double) a));\n@@ -4003,1 +3993,1 @@\n-        return (float)(Math.tanh((double)a));\n+        return (float) (Math.tanh((double) a));\n@@ -4007,1 +3997,1 @@\n-        return (float)(StrictMath.tanh((double)a));\n+        return (float) (StrictMath.tanh((double) a));\n@@ -4027,1 +4017,1 @@\n-        return (float)(Math.asin((double)a));\n+        return (float) (Math.asin((double) a));\n@@ -4031,1 +4021,1 @@\n-        return (float)(StrictMath.asin((double)a));\n+        return (float) (StrictMath.asin((double) a));\n@@ -4051,1 +4041,1 @@\n-        return (float)(Math.acos((double)a));\n+        return (float) (Math.acos((double) a));\n@@ -4055,1 +4045,1 @@\n-        return (float)(StrictMath.acos((double)a));\n+        return (float) (StrictMath.acos((double) a));\n@@ -4075,1 +4065,1 @@\n-        return (float)(Math.atan((double)a));\n+        return (float) (Math.atan((double) a));\n@@ -4079,1 +4069,1 @@\n-        return (float)(StrictMath.atan((double)a));\n+        return (float) (StrictMath.atan((double) a));\n@@ -4099,1 +4089,1 @@\n-        return (float)(Math.cbrt((double)a));\n+        return (float) (Math.cbrt((double) a));\n@@ -4103,1 +4093,1 @@\n-        return (float)(StrictMath.cbrt((double)a));\n+        return (float) (StrictMath.cbrt((double) a));\n@@ -4123,1 +4113,1 @@\n-        return (float)(Math.hypot((double)a, (double)b));\n+        return (float)(Math.hypot((double) a, (double) b));\n@@ -4127,1 +4117,1 @@\n-        return (float)(StrictMath.hypot((double)a, (double)b));\n+        return (float)(StrictMath.hypot((double) a, (double) b));\n@@ -4150,1 +4140,1 @@\n-        return (float)(Math.pow((double)a, (double)b));\n+        return (float)(Math.pow((double) a, (double) b));\n@@ -4154,1 +4144,1 @@\n-        return (float)(StrictMath.pow((double)a, (double)b));\n+        return (float)(StrictMath.pow((double) a, (double) b));\n@@ -4175,1 +4165,1 @@\n-        return (float)(Math.pow((double)a, (double)b));\n+        return (float)(Math.pow((double) a, (double) b));\n@@ -4179,1 +4169,1 @@\n-        return (float)(StrictMath.pow((double)a, (double)b));\n+        return (float)(StrictMath.pow((double) a, (double) b));\n@@ -4202,1 +4192,1 @@\n-        return (float)(Math.atan2((double)a, (double)b));\n+        return (float)(Math.atan2((double) a, (double) b));\n@@ -4206,1 +4196,1 @@\n-        return (float)(StrictMath.atan2((double)a, (double)b));\n+        return (float)(StrictMath.atan2((double) a, (double) b));\n@@ -4259,1 +4249,1 @@\n-        return (float)(Math.fma(a, b, c));\n+        return (float) (Math.fma(a, b, c));\n@@ -4262,1 +4252,1 @@\n-        return (float)(Math.fma(a, b, c));\n+        return (float) (Math.fma(a, b, c));\n@@ -4452,1 +4442,1 @@\n-        return (float)(-((float)a));\n+        return (float) (-((float) a));\n@@ -4456,1 +4446,1 @@\n-        return (float)(-((float)a));\n+        return (float) (-((float) a));\n@@ -4508,1 +4498,1 @@\n-        return (float)(Math.abs((float)a));\n+        return (float) (Math.abs((float) a));\n@@ -4512,1 +4502,1 @@\n-        return (float)(Math.abs((float)a));\n+        return (float) (Math.abs((float) a));\n@@ -4571,1 +4561,1 @@\n-        return (float)(Math.sqrt((double)a));\n+        return (float) (Math.sqrt((double) a));\n@@ -4575,1 +4565,1 @@\n-        return (float)(Math.sqrt((double)a));\n+        return (float) (Math.sqrt((double) a));\n@@ -4748,1 +4738,1 @@\n-        return (long)res;\n+        return (long) res;\n@@ -4787,1 +4777,1 @@\n-        return (long)res;\n+        return (long) res;\n@@ -4844,1 +4834,1 @@\n-                av.blend((long)b[i], vmask).intoArray(r, i);\n+                av.blend((long) b[i], vmask).intoArray(r, i);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float64VectorTests.java","additions":320,"deletions":330,"binary":false,"changes":650,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -83,1 +83,1 @@\n-                Assert.assertEquals(r[i], mask[(i*8\/SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0);\n+                Assert.assertEquals(r[i], mask[(i * 8 \/ SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0);\n@@ -86,1 +86,1 @@\n-            Assert.assertEquals(r[i], mask[(i*8\/SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0, \"at index #\" + i);\n+            Assert.assertEquals(r[i], mask[(i * 8 \/ SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0, \"at index #\" + i);\n@@ -93,1 +93,1 @@\n-                            i -> (float)(i * 5));\n+                            i -> (float) (i * 5));\n@@ -97,1 +97,1 @@\n-                            i -> (((float)(i + 1) == 0) ? 1 : (float)(i + 1)));\n+                            i -> (((float) (i + 1) == 0) ? 1 : (float) (i + 1)));\n@@ -204,1 +204,1 @@\n-                            return new Object[]{fa, fb, bo};\n+                            return new Object[] {fa, fb, bo};\n@@ -215,1 +215,1 @@\n-                            return new Object[]{fa, fb, fm, bo};\n+                            return new Object[] {fa, fb, fm, bo};\n@@ -224,1 +224,1 @@\n-                    return new Object[]{fa, bo};\n+                    return new Object[] {fa, bo};\n@@ -234,1 +234,1 @@\n-                        return new Object[]{fa, fm, bo};\n+                        return new Object[] {fa, fm, bo};\n@@ -953,2 +953,0 @@\n-\n-\n@@ -1104,1 +1102,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/FloatMaxVectorLoadStoreTests.java","additions":9,"deletions":12,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -93,1 +93,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -98,1 +98,1 @@\n-            float[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            float[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -258,1 +258,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i+order[i + j]]);\n@@ -263,1 +263,1 @@\n-            Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i+order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]]);\n@@ -279,1 +279,1 @@\n-                    Assert.assertEquals(r[i + k], (float)0);\n+                    Assert.assertEquals(r[i + k], (float) 0);\n@@ -287,1 +287,1 @@\n-                Assert.assertEquals(r[idx], (float)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], (float) 0, \"at index #\" + idx);\n@@ -302,1 +302,1 @@\n-                        Assert.assertEquals(r[i + j], (float)0);\n+                        Assert.assertEquals(r[i + j], (float) 0);\n@@ -311,1 +311,1 @@\n-                Assert.assertEquals(r[idx], (float)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], (float) 0, \"at index #\" + idx);\n@@ -321,1 +321,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -326,1 +326,1 @@\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]]);\n@@ -336,1 +336,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + order[i + j]]);\n@@ -338,1 +338,1 @@\n-                         Assert.assertEquals(r[i+j], (float)0);\n+                         Assert.assertEquals(r[i + j], (float) 0);\n@@ -344,1 +344,1 @@\n-                Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -346,1 +346,1 @@\n-                Assert.assertEquals(r[i+j], (float)0, \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], (float) 0, \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -356,1 +356,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -358,1 +358,1 @@\n-                         Assert.assertEquals(r[i+j], (float)0);\n+                         Assert.assertEquals(r[i + j], (float) 0);\n@@ -364,1 +364,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -366,1 +366,1 @@\n-                Assert.assertEquals(r[i+j], (float)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], (float) 0, \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -375,1 +375,1 @@\n-                a[j]=a[idx];\n+                a[j] = a[idx];\n@@ -426,1 +426,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], (float)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])));\n+                Assert.assertEquals(r[i], f.apply(a[i], (float) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])));\n@@ -429,1 +429,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], (float)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])),\n+            Assert.assertEquals(r[i], f.apply(a[i], (float) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])),\n@@ -475,1 +475,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], (float)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n+                Assert.assertEquals(r[i], f.apply(a[i], (float) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n@@ -478,1 +478,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], (float)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]),\n+            Assert.assertEquals(r[i], f.apply(a[i], (float) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]),\n@@ -491,1 +491,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]));\n@@ -495,1 +495,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]), \"at index #\" + i + \", \" + j);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]), \"at index #\" + i + \", \" + j);\n@@ -509,1 +509,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]));\n@@ -513,1 +513,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i+j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i + j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n@@ -661,1 +661,0 @@\n-\n@@ -760,1 +759,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -765,1 +764,1 @@\n-            float[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            float[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -768,1 +767,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -770,1 +769,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -787,1 +786,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -792,1 +791,1 @@\n-            float[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            float[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -795,1 +794,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -797,1 +796,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -808,1 +807,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -813,1 +812,1 @@\n-            float[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            float[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -816,1 +815,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -818,1 +817,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -820,1 +819,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(r, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(r, i, i + SPECIES.length()))\n@@ -835,1 +834,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -840,1 +839,1 @@\n-            float[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            float[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -855,1 +854,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -860,1 +859,1 @@\n-            float[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            float[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -876,1 +875,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -881,1 +880,1 @@\n-            float[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            float[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -897,1 +896,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -902,1 +901,1 @@\n-            float[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            float[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -919,1 +918,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -924,1 +923,1 @@\n-            float[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            float[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -944,1 +943,1 @@\n-                return (int)0;\n+                return (int) 0;\n@@ -951,1 +950,1 @@\n-                            i -> (float)(-i * 5));\n+                            i -> (float) (-i * 5));\n@@ -955,1 +954,1 @@\n-                            i -> (float)(i * 5));\n+                            i -> (float) (i * 5));\n@@ -959,1 +958,1 @@\n-                            i -> (((float)(i + 1) == 0) ? 1 : (float)(i + 1)));\n+                            i -> (((float) (i + 1) == 0) ? 1 : (float) (i + 1)));\n@@ -963,1 +962,1 @@\n-                            i -> (float)intCornerCaseValue(i));\n+                            i -> (float) intCornerCaseValue(i));\n@@ -971,1 +970,1 @@\n-                Assert.assertEquals(r[i], (int)(a[i+offs]));\n+                Assert.assertEquals(r[i], (int) (a[i + offs]));\n@@ -974,1 +973,1 @@\n-            Assert.assertEquals(r[i], (int)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (int) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -989,1 +988,1 @@\n-                return (long)0;\n+                return (long) 0;\n@@ -996,1 +995,1 @@\n-                            i -> (float)(-i * 5));\n+                            i -> (float) (-i * 5));\n@@ -1000,1 +999,1 @@\n-                            i -> (float)(i * 5));\n+                            i -> (float) (i * 5));\n@@ -1004,1 +1003,1 @@\n-                            i -> (((float)(i + 1) == 0) ? 1 : (float)(i + 1)));\n+                            i -> (((float) (i + 1) == 0) ? 1 : (float) (i + 1)));\n@@ -1008,1 +1007,1 @@\n-                            i -> (float)longCornerCaseValue(i));\n+                            i -> (float) longCornerCaseValue(i));\n@@ -1017,1 +1016,1 @@\n-                Assert.assertEquals(r[i], (long)(a[i+offs]));\n+                Assert.assertEquals(r[i], (long) (a[i + offs]));\n@@ -1020,1 +1019,1 @@\n-            Assert.assertEquals(r[i], (long)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (long) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -1028,1 +1027,1 @@\n-                Assert.assertEquals(r[i], (double)(a[i+offs]));\n+                Assert.assertEquals(r[i], (double) (a[i + offs]));\n@@ -1031,1 +1030,1 @@\n-            Assert.assertEquals(r[i], (double)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (double) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -1035,1 +1034,0 @@\n-\n@@ -1043,1 +1041,1 @@\n-                            i -> (float)(-i * 5));\n+                            i -> (float) (-i * 5));\n@@ -1047,1 +1045,1 @@\n-                            i -> (float)(i * 5));\n+                            i -> (float) (i * 5));\n@@ -1051,1 +1049,1 @@\n-                            i -> (((float)(i + 1) == 0) ? 1 : (float)(i + 1)));\n+                            i -> (((float) (i + 1) == 0) ? 1 : (float) (i + 1)));\n@@ -1194,1 +1192,1 @@\n-                    a[i] = (float)RAND.nextInt(upper);\n+                    a[i] = (float) RAND.nextInt(upper);\n@@ -1219,1 +1217,0 @@\n-\n@@ -1223,1 +1220,1 @@\n-                            i -> (float)i);\n+                            i -> (float) i);\n@@ -1227,1 +1224,1 @@\n-                            i -> (float)(i - (s * BUFFER_REPS \/ 2)));\n+                            i -> (float) (i - (s * BUFFER_REPS \/ 2)));\n@@ -1231,1 +1228,1 @@\n-                            i -> (float)(i + 1));\n+                            i -> (float) (i + 1));\n@@ -1235,1 +1232,1 @@\n-                            i -> (float)(i - 2));\n+                            i -> (float) (i - 2));\n@@ -1239,1 +1236,1 @@\n-                            i -> i%3 == 0 ? (float)i : (i%3 == 1 ? (float)(i + 1) : (float)(i - 2)));\n+                            i -> i % 3 == 0 ? (float) i : (i % 3 == 1 ? (float) (i + 1) : (float) (i - 2)));\n@@ -1315,1 +1312,1 @@\n-                return (float)0.0;\n+                return (float) 0.0;\n@@ -1317,1 +1314,1 @@\n-                return (float)-0.0;\n+                return (float) -0.0;\n@@ -1371,1 +1368,1 @@\n-        FloatVector three = FloatVector.broadcast(SPECIES, (byte)-3);\n+        FloatVector three = FloatVector.broadcast(SPECIES, (byte) -3);\n@@ -1385,1 +1382,1 @@\n-        m = higher.min((float)-1).test(VectorOperators.IS_NEGATIVE);\n+        m = higher.min((float) -1).test(VectorOperators.IS_NEGATIVE);\n@@ -1390,1 +1387,1 @@\n-        assert(max == -3 + scale * (SPECIES.length()-1));\n+        assert(max == -3 + scale * (SPECIES.length() - 1));\n@@ -1405,1 +1402,1 @@\n-        FloatVector io2 = (FloatVector) VectorShuffle.iota(SPECIES,0,1,false).toVector();\n+        FloatVector io2 = (FloatVector) VectorShuffle.iota(SPECIES, 0, 1, false).toVector();\n@@ -1407,1 +1404,1 @@\n-        FloatVector a = io.add((float)1); \/\/[1,2]\n+        FloatVector a = io.add((float) 1); \/\/[1,2]\n@@ -1412,2 +1409,2 @@\n-        FloatVector zab0 = a.rearrange(zip0,b); \/\/[1,-1]\n-        FloatVector zab1 = a.rearrange(zip1,b); \/\/[2,-2]\n+        FloatVector zab0 = a.rearrange(zip0, b); \/\/[1,-1]\n+        FloatVector zab1 = a.rearrange(zip1, b); \/\/[2,-2]\n@@ -1418,2 +1415,2 @@\n-            manual[i+0] = abValues[i\/2];\n-            manual[i+1] = abValues[a.length() + i\/2];\n+            manual[i + 0] = abValues[i \/ 2];\n+            manual[i + 1] = abValues[a.length() + i \/ 2];\n@@ -1424,2 +1421,2 @@\n-        FloatVector uab0 = zab0.rearrange(unz0,zab1);\n-        FloatVector uab1 = zab0.rearrange(unz1,zab1);\n+        FloatVector uab0 = zab0.rearrange(unz0, zab1);\n+        FloatVector uab1 = zab0.rearrange(unz1, zab1);\n@@ -1462,1 +1459,1 @@\n-        return (float)(a + b);\n+        return (float) (a + b);\n@@ -1482,1 +1479,1 @@\n-        return (float)(a + b);\n+        return (float) (a + b);\n@@ -1538,1 +1535,1 @@\n-        return (float)(a - b);\n+        return (float) (a - b);\n@@ -1558,1 +1555,1 @@\n-        return (float)(a - b);\n+        return (float) (a - b);\n@@ -1614,1 +1611,1 @@\n-        return (float)(a * b);\n+        return (float) (a * b);\n@@ -1634,1 +1631,1 @@\n-        return (float)(a * b);\n+        return (float) (a * b);\n@@ -1691,1 +1688,1 @@\n-        return (float)(a \/ b);\n+        return (float) (a \/ b);\n@@ -1711,1 +1708,1 @@\n-        return (float)(a \/ b);\n+        return (float) (a \/ b);\n@@ -1772,1 +1769,1 @@\n-        return (float)(Double.doubleToLongBits(a)!=0?a:b);\n+        return (float) (Double.doubleToLongBits(a) != 0 ? a : b);\n@@ -1964,1 +1961,1 @@\n-            av.lanewise(VectorOperators.ADD, (long)b[i]).intoArray(r, i);\n+            av.lanewise(VectorOperators.ADD, (long) b[i]).intoArray(r, i);\n@@ -1981,1 +1978,1 @@\n-            av.lanewise(VectorOperators.ADD, (long)b[i], vmask).intoArray(r, i);\n+            av.lanewise(VectorOperators.ADD, (long) b[i], vmask).intoArray(r, i);\n@@ -2031,1 +2028,1 @@\n-        return (float)(Math.min(a, b));\n+        return (float) (Math.min(a, b));\n@@ -2051,1 +2048,1 @@\n-        return (float)(Math.min(a, b));\n+        return (float) (Math.min(a, b));\n@@ -2069,1 +2066,1 @@\n-        return (float)(Math.max(a, b));\n+        return (float) (Math.max(a, b));\n@@ -2089,1 +2086,1 @@\n-        return (float)(Math.max(a, b));\n+        return (float) (Math.max(a, b));\n@@ -2612,1 +2609,1 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (float)(65535+i)).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length() - 1)), (float) (65535 + i)).intoArray(r, i);\n@@ -2618,1 +2615,1 @@\n-            assertInsertArraysEquals(r, a, (float)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+            assertInsertArraysEquals(r, a, (float) (65535 + i), (j++ & (SPECIES.length() - 1)), i , i + SPECIES.length());\n@@ -2622,1 +2619,1 @@\n-        return bits(a)==0;\n+        return bits(a) == 0;\n@@ -2655,1 +2652,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_DEFAULT(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_DEFAULT(a[i + j]));\n@@ -2660,1 +2657,1 @@\n-        return bits(a)<0;\n+        return bits(a) < 0;\n@@ -2693,1 +2690,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_NEGATIVE(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_NEGATIVE(a[i + j]));\n@@ -2732,1 +2729,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_FINITE(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_FINITE(a[i + j]));\n@@ -2772,1 +2769,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_NAN(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_NAN(a[i + j]));\n@@ -2812,1 +2809,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_INFINITE(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_INFINITE(a[i + j]));\n@@ -3140,1 +3137,0 @@\n-\n@@ -3168,1 +3164,1 @@\n-            VectorMask<Float> mv = av.compare(VectorOperators.LT, (long)b[i]);\n+            VectorMask<Float> mv = av.compare(VectorOperators.LT, (long) b[i]);\n@@ -3172,1 +3168,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), a[i + j] < (float)((long)b[i]));\n+                Assert.assertEquals(mv.laneIsSet(j), a[i + j] < (float) ((long) b[i]));\n@@ -3177,1 +3173,0 @@\n-\n@@ -3189,1 +3184,1 @@\n-            VectorMask<Float> mv = av.compare(VectorOperators.LT, (long)b[i], vmask);\n+            VectorMask<Float> mv = av.compare(VectorOperators.LT, (long) b[i], vmask);\n@@ -3193,1 +3188,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] < (float)((long)b[i])));\n+                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] < (float) ((long) b[i])));\n@@ -3214,1 +3209,0 @@\n-\n@@ -3242,1 +3236,1 @@\n-            VectorMask<Float> mv = av.compare(VectorOperators.EQ, (long)b[i]);\n+            VectorMask<Float> mv = av.compare(VectorOperators.EQ, (long) b[i]);\n@@ -3246,1 +3240,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), a[i + j] == (float)((long)b[i]));\n+                Assert.assertEquals(mv.laneIsSet(j), a[i + j] == (float) ((long) b[i]));\n@@ -3251,1 +3245,0 @@\n-\n@@ -3263,1 +3256,1 @@\n-            VectorMask<Float> mv = av.compare(VectorOperators.EQ, (long)b[i], vmask);\n+            VectorMask<Float> mv = av.compare(VectorOperators.EQ, (long) b[i], vmask);\n@@ -3267,1 +3260,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] == (float)((long)b[i])));\n+                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] == (float) ((long) b[i])));\n@@ -3378,1 +3371,1 @@\n-                    r[i]=av.lane(0);\n+                    r[i] = av.lane(0);\n@@ -3380,2 +3373,2 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n@@ -3383,4 +3376,4 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n@@ -3388,8 +3381,8 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n@@ -3397,16 +3390,16 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n@@ -3414,32 +3407,32 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n@@ -3447,64 +3440,64 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n-                    r[i+32]=av.lane(32);\n-                    r[i+33]=av.lane(33);\n-                    r[i+34]=av.lane(34);\n-                    r[i+35]=av.lane(35);\n-                    r[i+36]=av.lane(36);\n-                    r[i+37]=av.lane(37);\n-                    r[i+38]=av.lane(38);\n-                    r[i+39]=av.lane(39);\n-                    r[i+40]=av.lane(40);\n-                    r[i+41]=av.lane(41);\n-                    r[i+42]=av.lane(42);\n-                    r[i+43]=av.lane(43);\n-                    r[i+44]=av.lane(44);\n-                    r[i+45]=av.lane(45);\n-                    r[i+46]=av.lane(46);\n-                    r[i+47]=av.lane(47);\n-                    r[i+48]=av.lane(48);\n-                    r[i+49]=av.lane(49);\n-                    r[i+50]=av.lane(50);\n-                    r[i+51]=av.lane(51);\n-                    r[i+52]=av.lane(52);\n-                    r[i+53]=av.lane(53);\n-                    r[i+54]=av.lane(54);\n-                    r[i+55]=av.lane(55);\n-                    r[i+56]=av.lane(56);\n-                    r[i+57]=av.lane(57);\n-                    r[i+58]=av.lane(58);\n-                    r[i+59]=av.lane(59);\n-                    r[i+60]=av.lane(60);\n-                    r[i+61]=av.lane(61);\n-                    r[i+62]=av.lane(62);\n-                    r[i+63]=av.lane(63);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n+                    r[i + 32] = av.lane(32);\n+                    r[i + 33] = av.lane(33);\n+                    r[i + 34] = av.lane(34);\n+                    r[i + 35] = av.lane(35);\n+                    r[i + 36] = av.lane(36);\n+                    r[i + 37] = av.lane(37);\n+                    r[i + 38] = av.lane(38);\n+                    r[i + 39] = av.lane(39);\n+                    r[i + 40] = av.lane(40);\n+                    r[i + 41] = av.lane(41);\n+                    r[i + 42] = av.lane(42);\n+                    r[i + 43] = av.lane(43);\n+                    r[i + 44] = av.lane(44);\n+                    r[i + 45] = av.lane(45);\n+                    r[i + 46] = av.lane(46);\n+                    r[i + 47] = av.lane(47);\n+                    r[i + 48] = av.lane(48);\n+                    r[i + 49] = av.lane(49);\n+                    r[i + 50] = av.lane(50);\n+                    r[i + 51] = av.lane(51);\n+                    r[i + 52] = av.lane(52);\n+                    r[i + 53] = av.lane(53);\n+                    r[i + 54] = av.lane(54);\n+                    r[i + 55] = av.lane(55);\n+                    r[i + 56] = av.lane(56);\n+                    r[i + 57] = av.lane(57);\n+                    r[i + 58] = av.lane(58);\n+                    r[i + 59] = av.lane(59);\n+                    r[i + 60] = av.lane(60);\n+                    r[i + 61] = av.lane(61);\n+                    r[i + 62] = av.lane(62);\n+                    r[i + 63] = av.lane(63);\n@@ -3513,1 +3506,1 @@\n-                        r[i+j]=av.lane(j);\n+                        r[i + j] = av.lane(j);\n@@ -3554,3 +3547,0 @@\n-\n-\n-\n@@ -3560,2 +3550,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = a[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = a[idx + i + origin];\n@@ -3563,1 +3553,1 @@\n-                res[i] = (float)0;\n+                res[i] = (float) 0;\n@@ -3586,1 +3576,1 @@\n-                res[i] = a[idx+i+origin];\n+                res[i] = a[idx + i + origin];\n@@ -3588,1 +3578,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n@@ -3614,2 +3604,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = mask[i] ? a[idx+i+origin] : (float)0;\n+            if(i + origin < SPECIES.length())\n+                res[i] = mask[i] ? a[idx + i + origin] : (float) 0;\n@@ -3617,1 +3607,1 @@\n-                res[i] = mask[i] ? b[idx+j] : (float)0;\n+                res[i] = mask[i] ? b[idx + j] : (float) 0;\n@@ -3648,1 +3638,1 @@\n-                res[i] = (float)0;\n+                res[i] = (float) 0;\n@@ -3650,1 +3640,1 @@\n-                res[i] = a[idx+j];\n+                res[i] = a[idx + j];\n@@ -3676,1 +3666,1 @@\n-                    res[i] = b[idx+i];\n+                    res[i] = b[idx + i];\n@@ -3678,1 +3668,1 @@\n-                    res[i] = a[idx+j];\n+                    res[i] = a[idx + j];\n@@ -3683,1 +3673,1 @@\n-                    res[i] = a[idx+SPECIES.length()-origin+i];\n+                    res[i] = a[idx + SPECIES.length() - origin + i];\n@@ -3685,1 +3675,1 @@\n-                    res[i] = b[idx+origin+j];\n+                    res[i] = b[idx + origin + j];\n@@ -3713,2 +3703,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = b[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = b[idx + i + origin];\n@@ -3716,1 +3706,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n@@ -3721,1 +3711,1 @@\n-            res[i] = mask[i] ? a[idx+i] : res[i];\n+            res[i] = mask[i] ? a[idx + i] : res[i];\n@@ -3727,1 +3717,1 @@\n-                    res1[i] = b[idx+i];\n+                    res1[i] = b[idx + i];\n@@ -3729,2 +3719,2 @@\n-                   res1[i] = res[j];\n-                   j++;\n+                    res1[i] = res[j];\n+                    j++;\n@@ -3736,1 +3726,1 @@\n-                    res1[i] = res[SPECIES.length()-origin+i];\n+                    res1[i] = res[SPECIES.length() - origin + i];\n@@ -3738,1 +3728,1 @@\n-                    res1[i] = b[idx+origin+j];\n+                    res1[i] = b[idx + origin + j];\n@@ -3768,1 +3758,1 @@\n-        return (float)(Math.sin((double)a));\n+        return (float) (Math.sin((double) a));\n@@ -3772,1 +3762,1 @@\n-        return (float)(StrictMath.sin((double)a));\n+        return (float) (StrictMath.sin((double) a));\n@@ -3792,1 +3782,1 @@\n-        return (float)(Math.exp((double)a));\n+        return (float) (Math.exp((double) a));\n@@ -3796,1 +3786,1 @@\n-        return (float)(StrictMath.exp((double)a));\n+        return (float) (StrictMath.exp((double) a));\n@@ -3816,1 +3806,1 @@\n-        return (float)(Math.log1p((double)a));\n+        return (float) (Math.log1p((double) a));\n@@ -3820,1 +3810,1 @@\n-        return (float)(StrictMath.log1p((double)a));\n+        return (float) (StrictMath.log1p((double) a));\n@@ -3840,1 +3830,1 @@\n-        return (float)(Math.log((double)a));\n+        return (float) (Math.log((double) a));\n@@ -3844,1 +3834,1 @@\n-        return (float)(StrictMath.log((double)a));\n+        return (float) (StrictMath.log((double) a));\n@@ -3864,1 +3854,1 @@\n-        return (float)(Math.log10((double)a));\n+        return (float) (Math.log10((double) a));\n@@ -3868,1 +3858,1 @@\n-        return (float)(StrictMath.log10((double)a));\n+        return (float) (StrictMath.log10((double) a));\n@@ -3888,1 +3878,1 @@\n-        return (float)(Math.expm1((double)a));\n+        return (float) (Math.expm1((double) a));\n@@ -3892,1 +3882,1 @@\n-        return (float)(StrictMath.expm1((double)a));\n+        return (float) (StrictMath.expm1((double) a));\n@@ -3912,1 +3902,1 @@\n-        return (float)(Math.cos((double)a));\n+        return (float) (Math.cos((double) a));\n@@ -3916,1 +3906,1 @@\n-        return (float)(StrictMath.cos((double)a));\n+        return (float) (StrictMath.cos((double) a));\n@@ -3936,1 +3926,1 @@\n-        return (float)(Math.tan((double)a));\n+        return (float) (Math.tan((double) a));\n@@ -3940,1 +3930,1 @@\n-        return (float)(StrictMath.tan((double)a));\n+        return (float) (StrictMath.tan((double) a));\n@@ -3960,1 +3950,1 @@\n-        return (float)(Math.sinh((double)a));\n+        return (float) (Math.sinh((double) a));\n@@ -3964,1 +3954,1 @@\n-        return (float)(StrictMath.sinh((double)a));\n+        return (float) (StrictMath.sinh((double) a));\n@@ -3984,1 +3974,1 @@\n-        return (float)(Math.cosh((double)a));\n+        return (float) (Math.cosh((double) a));\n@@ -3988,1 +3978,1 @@\n-        return (float)(StrictMath.cosh((double)a));\n+        return (float) (StrictMath.cosh((double) a));\n@@ -4008,1 +3998,1 @@\n-        return (float)(Math.tanh((double)a));\n+        return (float) (Math.tanh((double) a));\n@@ -4012,1 +4002,1 @@\n-        return (float)(StrictMath.tanh((double)a));\n+        return (float) (StrictMath.tanh((double) a));\n@@ -4032,1 +4022,1 @@\n-        return (float)(Math.asin((double)a));\n+        return (float) (Math.asin((double) a));\n@@ -4036,1 +4026,1 @@\n-        return (float)(StrictMath.asin((double)a));\n+        return (float) (StrictMath.asin((double) a));\n@@ -4056,1 +4046,1 @@\n-        return (float)(Math.acos((double)a));\n+        return (float) (Math.acos((double) a));\n@@ -4060,1 +4050,1 @@\n-        return (float)(StrictMath.acos((double)a));\n+        return (float) (StrictMath.acos((double) a));\n@@ -4080,1 +4070,1 @@\n-        return (float)(Math.atan((double)a));\n+        return (float) (Math.atan((double) a));\n@@ -4084,1 +4074,1 @@\n-        return (float)(StrictMath.atan((double)a));\n+        return (float) (StrictMath.atan((double) a));\n@@ -4104,1 +4094,1 @@\n-        return (float)(Math.cbrt((double)a));\n+        return (float) (Math.cbrt((double) a));\n@@ -4108,1 +4098,1 @@\n-        return (float)(StrictMath.cbrt((double)a));\n+        return (float) (StrictMath.cbrt((double) a));\n@@ -4128,1 +4118,1 @@\n-        return (float)(Math.hypot((double)a, (double)b));\n+        return (float)(Math.hypot((double) a, (double) b));\n@@ -4132,1 +4122,1 @@\n-        return (float)(StrictMath.hypot((double)a, (double)b));\n+        return (float)(StrictMath.hypot((double) a, (double) b));\n@@ -4155,1 +4145,1 @@\n-        return (float)(Math.pow((double)a, (double)b));\n+        return (float)(Math.pow((double) a, (double) b));\n@@ -4159,1 +4149,1 @@\n-        return (float)(StrictMath.pow((double)a, (double)b));\n+        return (float)(StrictMath.pow((double) a, (double) b));\n@@ -4180,1 +4170,1 @@\n-        return (float)(Math.pow((double)a, (double)b));\n+        return (float)(Math.pow((double) a, (double) b));\n@@ -4184,1 +4174,1 @@\n-        return (float)(StrictMath.pow((double)a, (double)b));\n+        return (float)(StrictMath.pow((double) a, (double) b));\n@@ -4207,1 +4197,1 @@\n-        return (float)(Math.atan2((double)a, (double)b));\n+        return (float)(Math.atan2((double) a, (double) b));\n@@ -4211,1 +4201,1 @@\n-        return (float)(StrictMath.atan2((double)a, (double)b));\n+        return (float)(StrictMath.atan2((double) a, (double) b));\n@@ -4264,1 +4254,1 @@\n-        return (float)(Math.fma(a, b, c));\n+        return (float) (Math.fma(a, b, c));\n@@ -4267,1 +4257,1 @@\n-        return (float)(Math.fma(a, b, c));\n+        return (float) (Math.fma(a, b, c));\n@@ -4457,1 +4447,1 @@\n-        return (float)(-((float)a));\n+        return (float) (-((float) a));\n@@ -4461,1 +4451,1 @@\n-        return (float)(-((float)a));\n+        return (float) (-((float) a));\n@@ -4513,1 +4503,1 @@\n-        return (float)(Math.abs((float)a));\n+        return (float) (Math.abs((float) a));\n@@ -4517,1 +4507,1 @@\n-        return (float)(Math.abs((float)a));\n+        return (float) (Math.abs((float) a));\n@@ -4576,1 +4566,1 @@\n-        return (float)(Math.sqrt((double)a));\n+        return (float) (Math.sqrt((double) a));\n@@ -4580,1 +4570,1 @@\n-        return (float)(Math.sqrt((double)a));\n+        return (float) (Math.sqrt((double) a));\n@@ -4753,1 +4743,1 @@\n-        return (long)res;\n+        return (long) res;\n@@ -4792,1 +4782,1 @@\n-        return (long)res;\n+        return (long) res;\n@@ -4849,1 +4839,1 @@\n-                av.blend((long)b[i], vmask).intoArray(r, i);\n+                av.blend((long) b[i], vmask).intoArray(r, i);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/FloatMaxVectorTests.java","additions":320,"deletions":330,"binary":false,"changes":650,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,1 +74,1 @@\n-                Assert.assertEquals(r[i], mask[(i*8\/SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0);\n+                Assert.assertEquals(r[i], mask[(i * 8 \/ SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0);\n@@ -77,1 +77,1 @@\n-            Assert.assertEquals(r[i], mask[(i*8\/SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0, \"at index #\" + i);\n+            Assert.assertEquals(r[i], mask[(i * 8 \/ SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0, \"at index #\" + i);\n@@ -84,1 +84,1 @@\n-                            i -> (int)(i * 5));\n+                            i -> (int) (i * 5));\n@@ -88,1 +88,1 @@\n-                            i -> (((int)(i + 1) == 0) ? 1 : (int)(i + 1)));\n+                            i -> (((int) (i + 1) == 0) ? 1 : (int) (i + 1)));\n@@ -195,1 +195,1 @@\n-                            return new Object[]{fa, fb, bo};\n+                            return new Object[] {fa, fb, bo};\n@@ -206,1 +206,1 @@\n-                            return new Object[]{fa, fb, fm, bo};\n+                            return new Object[] {fa, fb, fm, bo};\n@@ -215,1 +215,1 @@\n-                    return new Object[]{fa, bo};\n+                    return new Object[] {fa, bo};\n@@ -225,1 +225,1 @@\n-                        return new Object[]{fa, fm, bo};\n+                        return new Object[] {fa, fm, bo};\n@@ -944,2 +944,0 @@\n-\n-\n@@ -1095,1 +1093,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int128VectorLoadStoreTests.java","additions":9,"deletions":12,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -93,1 +93,1 @@\n-            int[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            int[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -253,1 +253,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i+order[i + j]]);\n@@ -258,1 +258,1 @@\n-            Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i+order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]]);\n@@ -274,1 +274,1 @@\n-                    Assert.assertEquals(r[i + k], (int)0);\n+                    Assert.assertEquals(r[i + k], (int) 0);\n@@ -282,1 +282,1 @@\n-                Assert.assertEquals(r[idx], (int)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], (int) 0, \"at index #\" + idx);\n@@ -297,1 +297,1 @@\n-                        Assert.assertEquals(r[i + j], (int)0);\n+                        Assert.assertEquals(r[i + j], (int) 0);\n@@ -306,1 +306,1 @@\n-                Assert.assertEquals(r[idx], (int)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], (int) 0, \"at index #\" + idx);\n@@ -316,1 +316,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -321,1 +321,1 @@\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]]);\n@@ -331,1 +331,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + order[i + j]]);\n@@ -333,1 +333,1 @@\n-                         Assert.assertEquals(r[i+j], (int)0);\n+                         Assert.assertEquals(r[i + j], (int) 0);\n@@ -339,1 +339,1 @@\n-                Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -341,1 +341,1 @@\n-                Assert.assertEquals(r[i+j], (int)0, \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], (int) 0, \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -351,1 +351,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -353,1 +353,1 @@\n-                         Assert.assertEquals(r[i+j], (int)0);\n+                         Assert.assertEquals(r[i + j], (int) 0);\n@@ -359,1 +359,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -361,1 +361,1 @@\n-                Assert.assertEquals(r[i+j], (int)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], (int) 0, \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -370,1 +370,1 @@\n-                a[j]=a[idx];\n+                a[j] = a[idx];\n@@ -421,1 +421,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], (int)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])));\n+                Assert.assertEquals(r[i], f.apply(a[i], (int) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])));\n@@ -424,1 +424,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], (int)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])),\n+            Assert.assertEquals(r[i], f.apply(a[i], (int) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])),\n@@ -470,1 +470,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], (int)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n+                Assert.assertEquals(r[i], f.apply(a[i], (int) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n@@ -473,1 +473,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], (int)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]),\n+            Assert.assertEquals(r[i], f.apply(a[i], (int) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]),\n@@ -486,1 +486,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]));\n@@ -490,1 +490,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]), \"at index #\" + i + \", \" + j);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]), \"at index #\" + i + \", \" + j);\n@@ -504,1 +504,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]));\n@@ -508,1 +508,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i+j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i + j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n@@ -657,1 +657,0 @@\n-\n@@ -681,1 +680,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -686,1 +685,1 @@\n-            int[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            int[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -689,1 +688,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -691,1 +690,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -708,1 +707,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -713,1 +712,1 @@\n-            int[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            int[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -716,1 +715,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -718,1 +717,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -729,1 +728,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -734,1 +733,1 @@\n-            int[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            int[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -737,1 +736,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -739,1 +738,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -741,1 +740,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(r, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(r, i, i + SPECIES.length()))\n@@ -756,1 +755,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -761,1 +760,1 @@\n-            int[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            int[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -776,1 +775,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -781,1 +780,1 @@\n-            int[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            int[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -797,1 +796,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -802,1 +801,1 @@\n-            int[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            int[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -818,1 +817,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -823,1 +822,1 @@\n-            int[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            int[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -840,1 +839,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -845,1 +844,1 @@\n-            int[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            int[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -859,1 +858,1 @@\n-                Assert.assertEquals(r[i], (int)(a[i+offs]));\n+                Assert.assertEquals(r[i], (int) (a[i + offs]));\n@@ -862,1 +861,1 @@\n-            Assert.assertEquals(r[i], (int)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (int) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -872,1 +871,1 @@\n-                Assert.assertEquals(r[i], (long)(a[i+offs]));\n+                Assert.assertEquals(r[i], (long) (a[i + offs]));\n@@ -875,1 +874,1 @@\n-            Assert.assertEquals(r[i], (long)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (long) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -883,1 +882,1 @@\n-                Assert.assertEquals(r[i], (double)(a[i+offs]));\n+                Assert.assertEquals(r[i], (double) (a[i + offs]));\n@@ -886,1 +885,1 @@\n-            Assert.assertEquals(r[i], (double)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (double) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -890,1 +889,0 @@\n-\n@@ -898,1 +896,1 @@\n-                            i -> (int)(-i * 5));\n+                            i -> (int) (-i * 5));\n@@ -902,1 +900,1 @@\n-                            i -> (int)(i * 5));\n+                            i -> (int) (i * 5));\n@@ -906,1 +904,1 @@\n-                            i -> (((int)(i + 1) == 0) ? 1 : (int)(i + 1)));\n+                            i -> (((int) (i + 1) == 0) ? 1 : (int) (i + 1)));\n@@ -1036,1 +1034,1 @@\n-                            i -> (int)i);\n+                            i -> (int) i);\n@@ -1040,1 +1038,1 @@\n-                            i -> (int)(i - (s * BUFFER_REPS \/ 2)));\n+                            i -> (int) (i - (s * BUFFER_REPS \/ 2)));\n@@ -1044,1 +1042,1 @@\n-                            i -> (int)(i + 1));\n+                            i -> (int) (i + 1));\n@@ -1048,1 +1046,1 @@\n-                            i -> (int)(i - 2));\n+                            i -> (int) (i - 2));\n@@ -1052,1 +1050,1 @@\n-                            i -> i%3 == 0 ? (int)i : (i%3 == 1 ? (int)(i + 1) : (int)(i - 2)));\n+                            i -> i % 3 == 0 ? (int) i : (i % 3 == 1 ? (int) (i + 1) : (int) (i - 2)));\n@@ -1126,1 +1124,1 @@\n-                return (int)0;\n+                return (int) 0;\n@@ -1166,1 +1164,1 @@\n-        return Integer.rotateLeft(a, ((int)b));\n+        return Integer.rotateLeft(a, ((int) b));\n@@ -1170,1 +1168,1 @@\n-        return Integer.rotateRight(a, ((int)b));\n+        return Integer.rotateRight(a, ((int) b));\n@@ -1185,1 +1183,0 @@\n-\n@@ -1232,1 +1229,1 @@\n-        IntVector three = IntVector.broadcast(SPECIES, (byte)-3);\n+        IntVector three = IntVector.broadcast(SPECIES, (byte) -3);\n@@ -1246,1 +1243,1 @@\n-        m = higher.min((int)-1).test(VectorOperators.IS_NEGATIVE);\n+        m = higher.min((int) -1).test(VectorOperators.IS_NEGATIVE);\n@@ -1249,1 +1246,1 @@\n-        assert(max == -3 + scale * (SPECIES.length()-1));\n+        assert(max == -3 + scale * (SPECIES.length() - 1));\n@@ -1264,1 +1261,1 @@\n-        IntVector io2 = (IntVector) VectorShuffle.iota(SPECIES,0,1,false).toVector();\n+        IntVector io2 = (IntVector) VectorShuffle.iota(SPECIES, 0, 1, false).toVector();\n@@ -1266,1 +1263,1 @@\n-        IntVector a = io.add((int)1); \/\/[1,2]\n+        IntVector a = io.add((int) 1); \/\/[1,2]\n@@ -1271,2 +1268,2 @@\n-        IntVector zab0 = a.rearrange(zip0,b); \/\/[1,-1]\n-        IntVector zab1 = a.rearrange(zip1,b); \/\/[2,-2]\n+        IntVector zab0 = a.rearrange(zip0, b); \/\/[1,-1]\n+        IntVector zab1 = a.rearrange(zip1, b); \/\/[2,-2]\n@@ -1277,2 +1274,2 @@\n-            manual[i+0] = abValues[i\/2];\n-            manual[i+1] = abValues[a.length() + i\/2];\n+            manual[i + 0] = abValues[i \/ 2];\n+            manual[i + 1] = abValues[a.length() + i \/ 2];\n@@ -1283,2 +1280,2 @@\n-        IntVector uab0 = zab0.rearrange(unz0,zab1);\n-        IntVector uab1 = zab0.rearrange(unz1,zab1);\n+        IntVector uab0 = zab0.rearrange(unz0, zab1);\n+        IntVector uab1 = zab0.rearrange(unz1, zab1);\n@@ -1341,1 +1338,1 @@\n-        return (int)(a + b);\n+        return (int) (a + b);\n@@ -1361,1 +1358,1 @@\n-        return (int)(a + b);\n+        return (int) (a + b);\n@@ -1417,1 +1414,1 @@\n-        return (int)(a - b);\n+        return (int) (a - b);\n@@ -1437,1 +1434,1 @@\n-        return (int)(a - b);\n+        return (int) (a - b);\n@@ -1493,1 +1490,1 @@\n-        return (int)(a * b);\n+        return (int) (a * b);\n@@ -1513,1 +1510,1 @@\n-        return (int)(a * b);\n+        return (int) (a * b);\n@@ -1572,1 +1569,1 @@\n-        return (int)(a \/ b);\n+        return (int) (a \/ b);\n@@ -1594,1 +1591,1 @@\n-        return (int)(a \/ b);\n+        return (int) (a \/ b);\n@@ -1663,1 +1660,1 @@\n-        return (int)((a)!=0?a:b);\n+        return (int) ((a) != 0 ? a : b);\n@@ -1704,1 +1701,1 @@\n-        return (int)(a & b);\n+        return (int) (a & b);\n@@ -1724,1 +1721,1 @@\n-        return (int)(a & b);\n+        return (int) (a & b);\n@@ -1766,1 +1763,1 @@\n-        return (int)(a & ~b);\n+        return (int) (a & ~b);\n@@ -1810,1 +1807,1 @@\n-        return (int)(a | b);\n+        return (int) (a | b);\n@@ -1830,1 +1827,1 @@\n-        return (int)(a | b);\n+        return (int) (a | b);\n@@ -1872,1 +1869,1 @@\n-        return (int)(a ^ b);\n+        return (int) (a ^ b);\n@@ -2156,1 +2153,1 @@\n-            av.lanewise(VectorOperators.OR, (long)b[i]).intoArray(r, i);\n+            av.lanewise(VectorOperators.OR, (long) b[i]).intoArray(r, i);\n@@ -2175,1 +2172,1 @@\n-            av.lanewise(VectorOperators.OR, (long)b[i], vmask).intoArray(r, i);\n+            av.lanewise(VectorOperators.OR, (long) b[i], vmask).intoArray(r, i);\n@@ -2190,1 +2187,1 @@\n-            av.lanewise(VectorOperators.ADD, (long)b[i]).intoArray(r, i);\n+            av.lanewise(VectorOperators.ADD, (long) b[i]).intoArray(r, i);\n@@ -2207,1 +2204,1 @@\n-            av.lanewise(VectorOperators.ADD, (long)b[i], vmask).intoArray(r, i);\n+            av.lanewise(VectorOperators.ADD, (long) b[i], vmask).intoArray(r, i);\n@@ -2214,1 +2211,1 @@\n-        return (int)((a << b));\n+        return (int) ((a << b));\n@@ -2262,1 +2259,1 @@\n-        return (int)((a >> b));\n+        return (int) ((a >> b));\n@@ -2310,1 +2307,1 @@\n-        return (int)((a >>> b));\n+        return (int) ((a >>> b));\n@@ -2358,1 +2355,1 @@\n-        return (int)((a << b));\n+        return (int) ((a << b));\n@@ -2370,1 +2367,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i]).intoArray(r, i);\n@@ -2391,1 +2388,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i], vmask).intoArray(r, i);\n@@ -2404,1 +2401,1 @@\n-        return (int)((a >>> b));\n+        return (int) ((a >>> b));\n@@ -2416,1 +2413,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i]).intoArray(r, i);\n@@ -2437,1 +2434,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i], vmask).intoArray(r, i);\n@@ -2450,1 +2447,1 @@\n-        return (int)((a >> b));\n+        return (int) ((a >> b));\n@@ -2462,1 +2459,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i]).intoArray(r, i);\n@@ -2483,1 +2480,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i], vmask).intoArray(r, i);\n@@ -2496,1 +2493,1 @@\n-        return (int)(ROR_scalar(a,b));\n+        return (int) (ROR_scalar(a, b));\n@@ -2540,1 +2537,1 @@\n-        return (int)(ROL_scalar(a,b));\n+        return (int) (ROL_scalar(a, b));\n@@ -2584,1 +2581,1 @@\n-        return (int)(ROR_scalar(a,b));\n+        return (int) (ROR_scalar(a, b));\n@@ -2596,1 +2593,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i]).intoArray(r, i);\n@@ -2617,1 +2614,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i], vmask).intoArray(r, i);\n@@ -2626,1 +2623,1 @@\n-        return (int)(ROL_scalar(a,b));\n+        return (int) (ROL_scalar(a, b));\n@@ -2638,1 +2635,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i]).intoArray(r, i);\n@@ -2659,1 +2656,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i], vmask).intoArray(r, i);\n@@ -2667,1 +2664,1 @@\n-        return (int)(Math.min(a, b));\n+        return (int) (Math.min(a, b));\n@@ -2687,1 +2684,1 @@\n-        return (int)(Math.min(a, b));\n+        return (int) (Math.min(a, b));\n@@ -2705,1 +2702,1 @@\n-        return (int)(Math.max(a, b));\n+        return (int) (Math.max(a, b));\n@@ -2725,1 +2722,1 @@\n-        return (int)(Math.max(a, b));\n+        return (int) (Math.max(a, b));\n@@ -3563,1 +3560,1 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (int)(65535+i)).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length() - 1)), (int) (65535 + i)).intoArray(r, i);\n@@ -3569,1 +3566,1 @@\n-            assertInsertArraysEquals(r, a, (int)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+            assertInsertArraysEquals(r, a, (int) (65535 + i), (j++ & (SPECIES.length() - 1)), i , i + SPECIES.length());\n@@ -3573,1 +3570,1 @@\n-        return bits(a)==0;\n+        return bits(a) == 0;\n@@ -3606,1 +3603,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_DEFAULT(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_DEFAULT(a[i + j]));\n@@ -3611,1 +3608,1 @@\n-        return bits(a)<0;\n+        return bits(a) < 0;\n@@ -3644,1 +3641,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_NEGATIVE(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_NEGATIVE(a[i + j]));\n@@ -4154,1 +4151,0 @@\n-\n@@ -4182,1 +4178,1 @@\n-            VectorMask<Integer> mv = av.compare(VectorOperators.LT, (long)b[i]);\n+            VectorMask<Integer> mv = av.compare(VectorOperators.LT, (long) b[i]);\n@@ -4186,1 +4182,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), a[i + j] < (int)((long)b[i]));\n+                Assert.assertEquals(mv.laneIsSet(j), a[i + j] < (int) ((long) b[i]));\n@@ -4191,1 +4187,0 @@\n-\n@@ -4203,1 +4198,1 @@\n-            VectorMask<Integer> mv = av.compare(VectorOperators.LT, (long)b[i], vmask);\n+            VectorMask<Integer> mv = av.compare(VectorOperators.LT, (long) b[i], vmask);\n@@ -4207,1 +4202,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] < (int)((long)b[i])));\n+                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] < (int) ((long) b[i])));\n@@ -4228,1 +4223,0 @@\n-\n@@ -4256,1 +4250,1 @@\n-            VectorMask<Integer> mv = av.compare(VectorOperators.EQ, (long)b[i]);\n+            VectorMask<Integer> mv = av.compare(VectorOperators.EQ, (long) b[i]);\n@@ -4260,1 +4254,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), a[i + j] == (int)((long)b[i]));\n+                Assert.assertEquals(mv.laneIsSet(j), a[i + j] == (int) ((long) b[i]));\n@@ -4265,1 +4259,0 @@\n-\n@@ -4277,1 +4270,1 @@\n-            VectorMask<Integer> mv = av.compare(VectorOperators.EQ, (long)b[i], vmask);\n+            VectorMask<Integer> mv = av.compare(VectorOperators.EQ, (long) b[i], vmask);\n@@ -4281,1 +4274,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] == (int)((long)b[i])));\n+                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] == (int) ((long) b[i])));\n@@ -4392,1 +4385,1 @@\n-                    r[i]=av.lane(0);\n+                    r[i] = av.lane(0);\n@@ -4394,2 +4387,2 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n@@ -4397,4 +4390,4 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n@@ -4402,8 +4395,8 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n@@ -4411,16 +4404,16 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n@@ -4428,32 +4421,32 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n@@ -4461,64 +4454,64 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n-                    r[i+32]=av.lane(32);\n-                    r[i+33]=av.lane(33);\n-                    r[i+34]=av.lane(34);\n-                    r[i+35]=av.lane(35);\n-                    r[i+36]=av.lane(36);\n-                    r[i+37]=av.lane(37);\n-                    r[i+38]=av.lane(38);\n-                    r[i+39]=av.lane(39);\n-                    r[i+40]=av.lane(40);\n-                    r[i+41]=av.lane(41);\n-                    r[i+42]=av.lane(42);\n-                    r[i+43]=av.lane(43);\n-                    r[i+44]=av.lane(44);\n-                    r[i+45]=av.lane(45);\n-                    r[i+46]=av.lane(46);\n-                    r[i+47]=av.lane(47);\n-                    r[i+48]=av.lane(48);\n-                    r[i+49]=av.lane(49);\n-                    r[i+50]=av.lane(50);\n-                    r[i+51]=av.lane(51);\n-                    r[i+52]=av.lane(52);\n-                    r[i+53]=av.lane(53);\n-                    r[i+54]=av.lane(54);\n-                    r[i+55]=av.lane(55);\n-                    r[i+56]=av.lane(56);\n-                    r[i+57]=av.lane(57);\n-                    r[i+58]=av.lane(58);\n-                    r[i+59]=av.lane(59);\n-                    r[i+60]=av.lane(60);\n-                    r[i+61]=av.lane(61);\n-                    r[i+62]=av.lane(62);\n-                    r[i+63]=av.lane(63);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n+                    r[i + 32] = av.lane(32);\n+                    r[i + 33] = av.lane(33);\n+                    r[i + 34] = av.lane(34);\n+                    r[i + 35] = av.lane(35);\n+                    r[i + 36] = av.lane(36);\n+                    r[i + 37] = av.lane(37);\n+                    r[i + 38] = av.lane(38);\n+                    r[i + 39] = av.lane(39);\n+                    r[i + 40] = av.lane(40);\n+                    r[i + 41] = av.lane(41);\n+                    r[i + 42] = av.lane(42);\n+                    r[i + 43] = av.lane(43);\n+                    r[i + 44] = av.lane(44);\n+                    r[i + 45] = av.lane(45);\n+                    r[i + 46] = av.lane(46);\n+                    r[i + 47] = av.lane(47);\n+                    r[i + 48] = av.lane(48);\n+                    r[i + 49] = av.lane(49);\n+                    r[i + 50] = av.lane(50);\n+                    r[i + 51] = av.lane(51);\n+                    r[i + 52] = av.lane(52);\n+                    r[i + 53] = av.lane(53);\n+                    r[i + 54] = av.lane(54);\n+                    r[i + 55] = av.lane(55);\n+                    r[i + 56] = av.lane(56);\n+                    r[i + 57] = av.lane(57);\n+                    r[i + 58] = av.lane(58);\n+                    r[i + 59] = av.lane(59);\n+                    r[i + 60] = av.lane(60);\n+                    r[i + 61] = av.lane(61);\n+                    r[i + 62] = av.lane(62);\n+                    r[i + 63] = av.lane(63);\n@@ -4527,1 +4520,1 @@\n-                        r[i+j]=av.lane(j);\n+                        r[i + j] = av.lane(j);\n@@ -4568,3 +4561,0 @@\n-\n-\n-\n@@ -4574,2 +4564,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = a[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = a[idx + i + origin];\n@@ -4577,1 +4567,1 @@\n-                res[i] = (int)0;\n+                res[i] = (int) 0;\n@@ -4600,1 +4590,1 @@\n-                res[i] = a[idx+i+origin];\n+                res[i] = a[idx + i + origin];\n@@ -4602,1 +4592,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n@@ -4628,2 +4618,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = mask[i] ? a[idx+i+origin] : (int)0;\n+            if(i + origin < SPECIES.length())\n+                res[i] = mask[i] ? a[idx + i + origin] : (int) 0;\n@@ -4631,1 +4621,1 @@\n-                res[i] = mask[i] ? b[idx+j] : (int)0;\n+                res[i] = mask[i] ? b[idx + j] : (int) 0;\n@@ -4662,1 +4652,1 @@\n-                res[i] = (int)0;\n+                res[i] = (int) 0;\n@@ -4664,1 +4654,1 @@\n-                res[i] = a[idx+j];\n+                res[i] = a[idx + j];\n@@ -4690,1 +4680,1 @@\n-                    res[i] = b[idx+i];\n+                    res[i] = b[idx + i];\n@@ -4692,1 +4682,1 @@\n-                    res[i] = a[idx+j];\n+                    res[i] = a[idx + j];\n@@ -4697,1 +4687,1 @@\n-                    res[i] = a[idx+SPECIES.length()-origin+i];\n+                    res[i] = a[idx + SPECIES.length() - origin + i];\n@@ -4699,1 +4689,1 @@\n-                    res[i] = b[idx+origin+j];\n+                    res[i] = b[idx + origin + j];\n@@ -4727,2 +4717,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = b[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = b[idx + i + origin];\n@@ -4730,1 +4720,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n@@ -4735,1 +4725,1 @@\n-            res[i] = mask[i] ? a[idx+i] : res[i];\n+            res[i] = mask[i] ? a[idx + i] : res[i];\n@@ -4741,1 +4731,1 @@\n-                    res1[i] = b[idx+i];\n+                    res1[i] = b[idx + i];\n@@ -4743,2 +4733,2 @@\n-                   res1[i] = res[j];\n-                   j++;\n+                    res1[i] = res[j];\n+                    j++;\n@@ -4750,1 +4740,1 @@\n-                    res1[i] = res[SPECIES.length()-origin+i];\n+                    res1[i] = res[SPECIES.length() - origin + i];\n@@ -4752,1 +4742,1 @@\n-                    res1[i] = b[idx+origin+j];\n+                    res1[i] = b[idx + origin + j];\n@@ -4804,1 +4794,1 @@\n-        return (int)((a&~(c))|(b&c));\n+        return (int) ((a &~ (c)) | (b & c));\n@@ -4807,1 +4797,1 @@\n-        return (int)((a&~(c))|(b&c));\n+        return (int) ((a &~ (c)) | (b & c));\n@@ -5023,1 +5013,1 @@\n-        return (int)(-((int)a));\n+        return (int) (-((int) a));\n@@ -5027,1 +5017,1 @@\n-        return (int)(-((int)a));\n+        return (int) (-((int) a));\n@@ -5079,1 +5069,1 @@\n-        return (int)(Math.abs((int)a));\n+        return (int) (Math.abs((int) a));\n@@ -5083,1 +5073,1 @@\n-        return (int)(Math.abs((int)a));\n+        return (int) (Math.abs((int) a));\n@@ -5136,1 +5126,1 @@\n-        return (int)(~((int)a));\n+        return (int) (~((int) a));\n@@ -5140,1 +5130,1 @@\n-        return (int)(~((int)a));\n+        return (int) (~((int) a));\n@@ -5198,1 +5188,1 @@\n-        return (int)((a==0?0:-1));\n+        return (int) ((a == 0 ? 0 : -1));\n@@ -5244,1 +5234,1 @@\n-        return (int)(Integer.bitCount(a));\n+        return (int) (Integer.bitCount(a));\n@@ -5293,1 +5283,1 @@\n-        return (int)(TRAILING_ZEROS_COUNT_scalar(a));\n+        return (int) (TRAILING_ZEROS_COUNT_scalar(a));\n@@ -5336,1 +5326,1 @@\n-        return (int)(LEADING_ZEROS_COUNT_scalar(a));\n+        return (int) (LEADING_ZEROS_COUNT_scalar(a));\n@@ -5379,1 +5369,1 @@\n-        return (int)(REVERSE_scalar(a));\n+        return (int) (REVERSE_scalar(a));\n@@ -5519,1 +5509,1 @@\n-        return (long)res;\n+        return (long) res;\n@@ -5558,1 +5548,1 @@\n-        return (long)res;\n+        return (long) res;\n@@ -5615,1 +5605,1 @@\n-                av.blend((long)b[i], vmask).intoArray(r, i);\n+                av.blend((long) b[i], vmask).intoArray(r, i);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int128VectorTests.java","additions":302,"deletions":312,"binary":false,"changes":614,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,1 +74,1 @@\n-                Assert.assertEquals(r[i], mask[(i*8\/SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0);\n+                Assert.assertEquals(r[i], mask[(i * 8 \/ SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0);\n@@ -77,1 +77,1 @@\n-            Assert.assertEquals(r[i], mask[(i*8\/SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0, \"at index #\" + i);\n+            Assert.assertEquals(r[i], mask[(i * 8 \/ SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0, \"at index #\" + i);\n@@ -84,1 +84,1 @@\n-                            i -> (int)(i * 5));\n+                            i -> (int) (i * 5));\n@@ -88,1 +88,1 @@\n-                            i -> (((int)(i + 1) == 0) ? 1 : (int)(i + 1)));\n+                            i -> (((int) (i + 1) == 0) ? 1 : (int) (i + 1)));\n@@ -195,1 +195,1 @@\n-                            return new Object[]{fa, fb, bo};\n+                            return new Object[] {fa, fb, bo};\n@@ -206,1 +206,1 @@\n-                            return new Object[]{fa, fb, fm, bo};\n+                            return new Object[] {fa, fb, fm, bo};\n@@ -215,1 +215,1 @@\n-                    return new Object[]{fa, bo};\n+                    return new Object[] {fa, bo};\n@@ -225,1 +225,1 @@\n-                        return new Object[]{fa, fm, bo};\n+                        return new Object[] {fa, fm, bo};\n@@ -944,2 +944,0 @@\n-\n-\n@@ -1095,1 +1093,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int256VectorLoadStoreTests.java","additions":9,"deletions":12,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -93,1 +93,1 @@\n-            int[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            int[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -253,1 +253,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i+order[i + j]]);\n@@ -258,1 +258,1 @@\n-            Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i+order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]]);\n@@ -274,1 +274,1 @@\n-                    Assert.assertEquals(r[i + k], (int)0);\n+                    Assert.assertEquals(r[i + k], (int) 0);\n@@ -282,1 +282,1 @@\n-                Assert.assertEquals(r[idx], (int)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], (int) 0, \"at index #\" + idx);\n@@ -297,1 +297,1 @@\n-                        Assert.assertEquals(r[i + j], (int)0);\n+                        Assert.assertEquals(r[i + j], (int) 0);\n@@ -306,1 +306,1 @@\n-                Assert.assertEquals(r[idx], (int)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], (int) 0, \"at index #\" + idx);\n@@ -316,1 +316,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -321,1 +321,1 @@\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]]);\n@@ -331,1 +331,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + order[i + j]]);\n@@ -333,1 +333,1 @@\n-                         Assert.assertEquals(r[i+j], (int)0);\n+                         Assert.assertEquals(r[i + j], (int) 0);\n@@ -339,1 +339,1 @@\n-                Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -341,1 +341,1 @@\n-                Assert.assertEquals(r[i+j], (int)0, \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], (int) 0, \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -351,1 +351,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -353,1 +353,1 @@\n-                         Assert.assertEquals(r[i+j], (int)0);\n+                         Assert.assertEquals(r[i + j], (int) 0);\n@@ -359,1 +359,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -361,1 +361,1 @@\n-                Assert.assertEquals(r[i+j], (int)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], (int) 0, \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -370,1 +370,1 @@\n-                a[j]=a[idx];\n+                a[j] = a[idx];\n@@ -421,1 +421,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], (int)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])));\n+                Assert.assertEquals(r[i], f.apply(a[i], (int) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])));\n@@ -424,1 +424,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], (int)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])),\n+            Assert.assertEquals(r[i], f.apply(a[i], (int) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])),\n@@ -470,1 +470,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], (int)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n+                Assert.assertEquals(r[i], f.apply(a[i], (int) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n@@ -473,1 +473,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], (int)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]),\n+            Assert.assertEquals(r[i], f.apply(a[i], (int) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]),\n@@ -486,1 +486,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]));\n@@ -490,1 +490,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]), \"at index #\" + i + \", \" + j);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]), \"at index #\" + i + \", \" + j);\n@@ -504,1 +504,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]));\n@@ -508,1 +508,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i+j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i + j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n@@ -657,1 +657,0 @@\n-\n@@ -681,1 +680,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -686,1 +685,1 @@\n-            int[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            int[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -689,1 +688,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -691,1 +690,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -708,1 +707,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -713,1 +712,1 @@\n-            int[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            int[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -716,1 +715,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -718,1 +717,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -729,1 +728,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -734,1 +733,1 @@\n-            int[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            int[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -737,1 +736,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -739,1 +738,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -741,1 +740,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(r, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(r, i, i + SPECIES.length()))\n@@ -756,1 +755,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -761,1 +760,1 @@\n-            int[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            int[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -776,1 +775,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -781,1 +780,1 @@\n-            int[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            int[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -797,1 +796,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -802,1 +801,1 @@\n-            int[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            int[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -818,1 +817,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -823,1 +822,1 @@\n-            int[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            int[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -840,1 +839,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -845,1 +844,1 @@\n-            int[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            int[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -859,1 +858,1 @@\n-                Assert.assertEquals(r[i], (int)(a[i+offs]));\n+                Assert.assertEquals(r[i], (int) (a[i + offs]));\n@@ -862,1 +861,1 @@\n-            Assert.assertEquals(r[i], (int)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (int) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -872,1 +871,1 @@\n-                Assert.assertEquals(r[i], (long)(a[i+offs]));\n+                Assert.assertEquals(r[i], (long) (a[i + offs]));\n@@ -875,1 +874,1 @@\n-            Assert.assertEquals(r[i], (long)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (long) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -883,1 +882,1 @@\n-                Assert.assertEquals(r[i], (double)(a[i+offs]));\n+                Assert.assertEquals(r[i], (double) (a[i + offs]));\n@@ -886,1 +885,1 @@\n-            Assert.assertEquals(r[i], (double)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (double) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -890,1 +889,0 @@\n-\n@@ -898,1 +896,1 @@\n-                            i -> (int)(-i * 5));\n+                            i -> (int) (-i * 5));\n@@ -902,1 +900,1 @@\n-                            i -> (int)(i * 5));\n+                            i -> (int) (i * 5));\n@@ -906,1 +904,1 @@\n-                            i -> (((int)(i + 1) == 0) ? 1 : (int)(i + 1)));\n+                            i -> (((int) (i + 1) == 0) ? 1 : (int) (i + 1)));\n@@ -1036,1 +1034,1 @@\n-                            i -> (int)i);\n+                            i -> (int) i);\n@@ -1040,1 +1038,1 @@\n-                            i -> (int)(i - (s * BUFFER_REPS \/ 2)));\n+                            i -> (int) (i - (s * BUFFER_REPS \/ 2)));\n@@ -1044,1 +1042,1 @@\n-                            i -> (int)(i + 1));\n+                            i -> (int) (i + 1));\n@@ -1048,1 +1046,1 @@\n-                            i -> (int)(i - 2));\n+                            i -> (int) (i - 2));\n@@ -1052,1 +1050,1 @@\n-                            i -> i%3 == 0 ? (int)i : (i%3 == 1 ? (int)(i + 1) : (int)(i - 2)));\n+                            i -> i % 3 == 0 ? (int) i : (i % 3 == 1 ? (int) (i + 1) : (int) (i - 2)));\n@@ -1126,1 +1124,1 @@\n-                return (int)0;\n+                return (int) 0;\n@@ -1166,1 +1164,1 @@\n-        return Integer.rotateLeft(a, ((int)b));\n+        return Integer.rotateLeft(a, ((int) b));\n@@ -1170,1 +1168,1 @@\n-        return Integer.rotateRight(a, ((int)b));\n+        return Integer.rotateRight(a, ((int) b));\n@@ -1185,1 +1183,0 @@\n-\n@@ -1232,1 +1229,1 @@\n-        IntVector three = IntVector.broadcast(SPECIES, (byte)-3);\n+        IntVector three = IntVector.broadcast(SPECIES, (byte) -3);\n@@ -1246,1 +1243,1 @@\n-        m = higher.min((int)-1).test(VectorOperators.IS_NEGATIVE);\n+        m = higher.min((int) -1).test(VectorOperators.IS_NEGATIVE);\n@@ -1249,1 +1246,1 @@\n-        assert(max == -3 + scale * (SPECIES.length()-1));\n+        assert(max == -3 + scale * (SPECIES.length() - 1));\n@@ -1264,1 +1261,1 @@\n-        IntVector io2 = (IntVector) VectorShuffle.iota(SPECIES,0,1,false).toVector();\n+        IntVector io2 = (IntVector) VectorShuffle.iota(SPECIES, 0, 1, false).toVector();\n@@ -1266,1 +1263,1 @@\n-        IntVector a = io.add((int)1); \/\/[1,2]\n+        IntVector a = io.add((int) 1); \/\/[1,2]\n@@ -1271,2 +1268,2 @@\n-        IntVector zab0 = a.rearrange(zip0,b); \/\/[1,-1]\n-        IntVector zab1 = a.rearrange(zip1,b); \/\/[2,-2]\n+        IntVector zab0 = a.rearrange(zip0, b); \/\/[1,-1]\n+        IntVector zab1 = a.rearrange(zip1, b); \/\/[2,-2]\n@@ -1277,2 +1274,2 @@\n-            manual[i+0] = abValues[i\/2];\n-            manual[i+1] = abValues[a.length() + i\/2];\n+            manual[i + 0] = abValues[i \/ 2];\n+            manual[i + 1] = abValues[a.length() + i \/ 2];\n@@ -1283,2 +1280,2 @@\n-        IntVector uab0 = zab0.rearrange(unz0,zab1);\n-        IntVector uab1 = zab0.rearrange(unz1,zab1);\n+        IntVector uab0 = zab0.rearrange(unz0, zab1);\n+        IntVector uab1 = zab0.rearrange(unz1, zab1);\n@@ -1341,1 +1338,1 @@\n-        return (int)(a + b);\n+        return (int) (a + b);\n@@ -1361,1 +1358,1 @@\n-        return (int)(a + b);\n+        return (int) (a + b);\n@@ -1417,1 +1414,1 @@\n-        return (int)(a - b);\n+        return (int) (a - b);\n@@ -1437,1 +1434,1 @@\n-        return (int)(a - b);\n+        return (int) (a - b);\n@@ -1493,1 +1490,1 @@\n-        return (int)(a * b);\n+        return (int) (a * b);\n@@ -1513,1 +1510,1 @@\n-        return (int)(a * b);\n+        return (int) (a * b);\n@@ -1572,1 +1569,1 @@\n-        return (int)(a \/ b);\n+        return (int) (a \/ b);\n@@ -1594,1 +1591,1 @@\n-        return (int)(a \/ b);\n+        return (int) (a \/ b);\n@@ -1663,1 +1660,1 @@\n-        return (int)((a)!=0?a:b);\n+        return (int) ((a) != 0 ? a : b);\n@@ -1704,1 +1701,1 @@\n-        return (int)(a & b);\n+        return (int) (a & b);\n@@ -1724,1 +1721,1 @@\n-        return (int)(a & b);\n+        return (int) (a & b);\n@@ -1766,1 +1763,1 @@\n-        return (int)(a & ~b);\n+        return (int) (a & ~b);\n@@ -1810,1 +1807,1 @@\n-        return (int)(a | b);\n+        return (int) (a | b);\n@@ -1830,1 +1827,1 @@\n-        return (int)(a | b);\n+        return (int) (a | b);\n@@ -1872,1 +1869,1 @@\n-        return (int)(a ^ b);\n+        return (int) (a ^ b);\n@@ -2156,1 +2153,1 @@\n-            av.lanewise(VectorOperators.OR, (long)b[i]).intoArray(r, i);\n+            av.lanewise(VectorOperators.OR, (long) b[i]).intoArray(r, i);\n@@ -2175,1 +2172,1 @@\n-            av.lanewise(VectorOperators.OR, (long)b[i], vmask).intoArray(r, i);\n+            av.lanewise(VectorOperators.OR, (long) b[i], vmask).intoArray(r, i);\n@@ -2190,1 +2187,1 @@\n-            av.lanewise(VectorOperators.ADD, (long)b[i]).intoArray(r, i);\n+            av.lanewise(VectorOperators.ADD, (long) b[i]).intoArray(r, i);\n@@ -2207,1 +2204,1 @@\n-            av.lanewise(VectorOperators.ADD, (long)b[i], vmask).intoArray(r, i);\n+            av.lanewise(VectorOperators.ADD, (long) b[i], vmask).intoArray(r, i);\n@@ -2214,1 +2211,1 @@\n-        return (int)((a << b));\n+        return (int) ((a << b));\n@@ -2262,1 +2259,1 @@\n-        return (int)((a >> b));\n+        return (int) ((a >> b));\n@@ -2310,1 +2307,1 @@\n-        return (int)((a >>> b));\n+        return (int) ((a >>> b));\n@@ -2358,1 +2355,1 @@\n-        return (int)((a << b));\n+        return (int) ((a << b));\n@@ -2370,1 +2367,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i]).intoArray(r, i);\n@@ -2391,1 +2388,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i], vmask).intoArray(r, i);\n@@ -2404,1 +2401,1 @@\n-        return (int)((a >>> b));\n+        return (int) ((a >>> b));\n@@ -2416,1 +2413,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i]).intoArray(r, i);\n@@ -2437,1 +2434,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i], vmask).intoArray(r, i);\n@@ -2450,1 +2447,1 @@\n-        return (int)((a >> b));\n+        return (int) ((a >> b));\n@@ -2462,1 +2459,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i]).intoArray(r, i);\n@@ -2483,1 +2480,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i], vmask).intoArray(r, i);\n@@ -2496,1 +2493,1 @@\n-        return (int)(ROR_scalar(a,b));\n+        return (int) (ROR_scalar(a, b));\n@@ -2540,1 +2537,1 @@\n-        return (int)(ROL_scalar(a,b));\n+        return (int) (ROL_scalar(a, b));\n@@ -2584,1 +2581,1 @@\n-        return (int)(ROR_scalar(a,b));\n+        return (int) (ROR_scalar(a, b));\n@@ -2596,1 +2593,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i]).intoArray(r, i);\n@@ -2617,1 +2614,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i], vmask).intoArray(r, i);\n@@ -2626,1 +2623,1 @@\n-        return (int)(ROL_scalar(a,b));\n+        return (int) (ROL_scalar(a, b));\n@@ -2638,1 +2635,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i]).intoArray(r, i);\n@@ -2659,1 +2656,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i], vmask).intoArray(r, i);\n@@ -2667,1 +2664,1 @@\n-        return (int)(Math.min(a, b));\n+        return (int) (Math.min(a, b));\n@@ -2687,1 +2684,1 @@\n-        return (int)(Math.min(a, b));\n+        return (int) (Math.min(a, b));\n@@ -2705,1 +2702,1 @@\n-        return (int)(Math.max(a, b));\n+        return (int) (Math.max(a, b));\n@@ -2725,1 +2722,1 @@\n-        return (int)(Math.max(a, b));\n+        return (int) (Math.max(a, b));\n@@ -3563,1 +3560,1 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (int)(65535+i)).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length() - 1)), (int) (65535 + i)).intoArray(r, i);\n@@ -3569,1 +3566,1 @@\n-            assertInsertArraysEquals(r, a, (int)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+            assertInsertArraysEquals(r, a, (int) (65535 + i), (j++ & (SPECIES.length() - 1)), i , i + SPECIES.length());\n@@ -3573,1 +3570,1 @@\n-        return bits(a)==0;\n+        return bits(a) == 0;\n@@ -3606,1 +3603,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_DEFAULT(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_DEFAULT(a[i + j]));\n@@ -3611,1 +3608,1 @@\n-        return bits(a)<0;\n+        return bits(a) < 0;\n@@ -3644,1 +3641,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_NEGATIVE(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_NEGATIVE(a[i + j]));\n@@ -4154,1 +4151,0 @@\n-\n@@ -4182,1 +4178,1 @@\n-            VectorMask<Integer> mv = av.compare(VectorOperators.LT, (long)b[i]);\n+            VectorMask<Integer> mv = av.compare(VectorOperators.LT, (long) b[i]);\n@@ -4186,1 +4182,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), a[i + j] < (int)((long)b[i]));\n+                Assert.assertEquals(mv.laneIsSet(j), a[i + j] < (int) ((long) b[i]));\n@@ -4191,1 +4187,0 @@\n-\n@@ -4203,1 +4198,1 @@\n-            VectorMask<Integer> mv = av.compare(VectorOperators.LT, (long)b[i], vmask);\n+            VectorMask<Integer> mv = av.compare(VectorOperators.LT, (long) b[i], vmask);\n@@ -4207,1 +4202,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] < (int)((long)b[i])));\n+                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] < (int) ((long) b[i])));\n@@ -4228,1 +4223,0 @@\n-\n@@ -4256,1 +4250,1 @@\n-            VectorMask<Integer> mv = av.compare(VectorOperators.EQ, (long)b[i]);\n+            VectorMask<Integer> mv = av.compare(VectorOperators.EQ, (long) b[i]);\n@@ -4260,1 +4254,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), a[i + j] == (int)((long)b[i]));\n+                Assert.assertEquals(mv.laneIsSet(j), a[i + j] == (int) ((long) b[i]));\n@@ -4265,1 +4259,0 @@\n-\n@@ -4277,1 +4270,1 @@\n-            VectorMask<Integer> mv = av.compare(VectorOperators.EQ, (long)b[i], vmask);\n+            VectorMask<Integer> mv = av.compare(VectorOperators.EQ, (long) b[i], vmask);\n@@ -4281,1 +4274,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] == (int)((long)b[i])));\n+                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] == (int) ((long) b[i])));\n@@ -4392,1 +4385,1 @@\n-                    r[i]=av.lane(0);\n+                    r[i] = av.lane(0);\n@@ -4394,2 +4387,2 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n@@ -4397,4 +4390,4 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n@@ -4402,8 +4395,8 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n@@ -4411,16 +4404,16 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n@@ -4428,32 +4421,32 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n@@ -4461,64 +4454,64 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n-                    r[i+32]=av.lane(32);\n-                    r[i+33]=av.lane(33);\n-                    r[i+34]=av.lane(34);\n-                    r[i+35]=av.lane(35);\n-                    r[i+36]=av.lane(36);\n-                    r[i+37]=av.lane(37);\n-                    r[i+38]=av.lane(38);\n-                    r[i+39]=av.lane(39);\n-                    r[i+40]=av.lane(40);\n-                    r[i+41]=av.lane(41);\n-                    r[i+42]=av.lane(42);\n-                    r[i+43]=av.lane(43);\n-                    r[i+44]=av.lane(44);\n-                    r[i+45]=av.lane(45);\n-                    r[i+46]=av.lane(46);\n-                    r[i+47]=av.lane(47);\n-                    r[i+48]=av.lane(48);\n-                    r[i+49]=av.lane(49);\n-                    r[i+50]=av.lane(50);\n-                    r[i+51]=av.lane(51);\n-                    r[i+52]=av.lane(52);\n-                    r[i+53]=av.lane(53);\n-                    r[i+54]=av.lane(54);\n-                    r[i+55]=av.lane(55);\n-                    r[i+56]=av.lane(56);\n-                    r[i+57]=av.lane(57);\n-                    r[i+58]=av.lane(58);\n-                    r[i+59]=av.lane(59);\n-                    r[i+60]=av.lane(60);\n-                    r[i+61]=av.lane(61);\n-                    r[i+62]=av.lane(62);\n-                    r[i+63]=av.lane(63);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n+                    r[i + 32] = av.lane(32);\n+                    r[i + 33] = av.lane(33);\n+                    r[i + 34] = av.lane(34);\n+                    r[i + 35] = av.lane(35);\n+                    r[i + 36] = av.lane(36);\n+                    r[i + 37] = av.lane(37);\n+                    r[i + 38] = av.lane(38);\n+                    r[i + 39] = av.lane(39);\n+                    r[i + 40] = av.lane(40);\n+                    r[i + 41] = av.lane(41);\n+                    r[i + 42] = av.lane(42);\n+                    r[i + 43] = av.lane(43);\n+                    r[i + 44] = av.lane(44);\n+                    r[i + 45] = av.lane(45);\n+                    r[i + 46] = av.lane(46);\n+                    r[i + 47] = av.lane(47);\n+                    r[i + 48] = av.lane(48);\n+                    r[i + 49] = av.lane(49);\n+                    r[i + 50] = av.lane(50);\n+                    r[i + 51] = av.lane(51);\n+                    r[i + 52] = av.lane(52);\n+                    r[i + 53] = av.lane(53);\n+                    r[i + 54] = av.lane(54);\n+                    r[i + 55] = av.lane(55);\n+                    r[i + 56] = av.lane(56);\n+                    r[i + 57] = av.lane(57);\n+                    r[i + 58] = av.lane(58);\n+                    r[i + 59] = av.lane(59);\n+                    r[i + 60] = av.lane(60);\n+                    r[i + 61] = av.lane(61);\n+                    r[i + 62] = av.lane(62);\n+                    r[i + 63] = av.lane(63);\n@@ -4527,1 +4520,1 @@\n-                        r[i+j]=av.lane(j);\n+                        r[i + j] = av.lane(j);\n@@ -4568,3 +4561,0 @@\n-\n-\n-\n@@ -4574,2 +4564,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = a[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = a[idx + i + origin];\n@@ -4577,1 +4567,1 @@\n-                res[i] = (int)0;\n+                res[i] = (int) 0;\n@@ -4600,1 +4590,1 @@\n-                res[i] = a[idx+i+origin];\n+                res[i] = a[idx + i + origin];\n@@ -4602,1 +4592,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n@@ -4628,2 +4618,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = mask[i] ? a[idx+i+origin] : (int)0;\n+            if(i + origin < SPECIES.length())\n+                res[i] = mask[i] ? a[idx + i + origin] : (int) 0;\n@@ -4631,1 +4621,1 @@\n-                res[i] = mask[i] ? b[idx+j] : (int)0;\n+                res[i] = mask[i] ? b[idx + j] : (int) 0;\n@@ -4662,1 +4652,1 @@\n-                res[i] = (int)0;\n+                res[i] = (int) 0;\n@@ -4664,1 +4654,1 @@\n-                res[i] = a[idx+j];\n+                res[i] = a[idx + j];\n@@ -4690,1 +4680,1 @@\n-                    res[i] = b[idx+i];\n+                    res[i] = b[idx + i];\n@@ -4692,1 +4682,1 @@\n-                    res[i] = a[idx+j];\n+                    res[i] = a[idx + j];\n@@ -4697,1 +4687,1 @@\n-                    res[i] = a[idx+SPECIES.length()-origin+i];\n+                    res[i] = a[idx + SPECIES.length() - origin + i];\n@@ -4699,1 +4689,1 @@\n-                    res[i] = b[idx+origin+j];\n+                    res[i] = b[idx + origin + j];\n@@ -4727,2 +4717,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = b[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = b[idx + i + origin];\n@@ -4730,1 +4720,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n@@ -4735,1 +4725,1 @@\n-            res[i] = mask[i] ? a[idx+i] : res[i];\n+            res[i] = mask[i] ? a[idx + i] : res[i];\n@@ -4741,1 +4731,1 @@\n-                    res1[i] = b[idx+i];\n+                    res1[i] = b[idx + i];\n@@ -4743,2 +4733,2 @@\n-                   res1[i] = res[j];\n-                   j++;\n+                    res1[i] = res[j];\n+                    j++;\n@@ -4750,1 +4740,1 @@\n-                    res1[i] = res[SPECIES.length()-origin+i];\n+                    res1[i] = res[SPECIES.length() - origin + i];\n@@ -4752,1 +4742,1 @@\n-                    res1[i] = b[idx+origin+j];\n+                    res1[i] = b[idx + origin + j];\n@@ -4804,1 +4794,1 @@\n-        return (int)((a&~(c))|(b&c));\n+        return (int) ((a &~ (c)) | (b & c));\n@@ -4807,1 +4797,1 @@\n-        return (int)((a&~(c))|(b&c));\n+        return (int) ((a &~ (c)) | (b & c));\n@@ -5023,1 +5013,1 @@\n-        return (int)(-((int)a));\n+        return (int) (-((int) a));\n@@ -5027,1 +5017,1 @@\n-        return (int)(-((int)a));\n+        return (int) (-((int) a));\n@@ -5079,1 +5069,1 @@\n-        return (int)(Math.abs((int)a));\n+        return (int) (Math.abs((int) a));\n@@ -5083,1 +5073,1 @@\n-        return (int)(Math.abs((int)a));\n+        return (int) (Math.abs((int) a));\n@@ -5136,1 +5126,1 @@\n-        return (int)(~((int)a));\n+        return (int) (~((int) a));\n@@ -5140,1 +5130,1 @@\n-        return (int)(~((int)a));\n+        return (int) (~((int) a));\n@@ -5198,1 +5188,1 @@\n-        return (int)((a==0?0:-1));\n+        return (int) ((a == 0 ? 0 : -1));\n@@ -5244,1 +5234,1 @@\n-        return (int)(Integer.bitCount(a));\n+        return (int) (Integer.bitCount(a));\n@@ -5293,1 +5283,1 @@\n-        return (int)(TRAILING_ZEROS_COUNT_scalar(a));\n+        return (int) (TRAILING_ZEROS_COUNT_scalar(a));\n@@ -5336,1 +5326,1 @@\n-        return (int)(LEADING_ZEROS_COUNT_scalar(a));\n+        return (int) (LEADING_ZEROS_COUNT_scalar(a));\n@@ -5379,1 +5369,1 @@\n-        return (int)(REVERSE_scalar(a));\n+        return (int) (REVERSE_scalar(a));\n@@ -5519,1 +5509,1 @@\n-        return (long)res;\n+        return (long) res;\n@@ -5558,1 +5548,1 @@\n-        return (long)res;\n+        return (long) res;\n@@ -5615,1 +5605,1 @@\n-                av.blend((long)b[i], vmask).intoArray(r, i);\n+                av.blend((long) b[i], vmask).intoArray(r, i);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int256VectorTests.java","additions":302,"deletions":312,"binary":false,"changes":614,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,1 +74,1 @@\n-                Assert.assertEquals(r[i], mask[(i*8\/SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0);\n+                Assert.assertEquals(r[i], mask[(i * 8 \/ SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0);\n@@ -77,1 +77,1 @@\n-            Assert.assertEquals(r[i], mask[(i*8\/SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0, \"at index #\" + i);\n+            Assert.assertEquals(r[i], mask[(i * 8 \/ SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0, \"at index #\" + i);\n@@ -84,1 +84,1 @@\n-                            i -> (int)(i * 5));\n+                            i -> (int) (i * 5));\n@@ -88,1 +88,1 @@\n-                            i -> (((int)(i + 1) == 0) ? 1 : (int)(i + 1)));\n+                            i -> (((int) (i + 1) == 0) ? 1 : (int) (i + 1)));\n@@ -195,1 +195,1 @@\n-                            return new Object[]{fa, fb, bo};\n+                            return new Object[] {fa, fb, bo};\n@@ -206,1 +206,1 @@\n-                            return new Object[]{fa, fb, fm, bo};\n+                            return new Object[] {fa, fb, fm, bo};\n@@ -215,1 +215,1 @@\n-                    return new Object[]{fa, bo};\n+                    return new Object[] {fa, bo};\n@@ -225,1 +225,1 @@\n-                        return new Object[]{fa, fm, bo};\n+                        return new Object[] {fa, fm, bo};\n@@ -944,2 +944,0 @@\n-\n-\n@@ -1095,1 +1093,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int512VectorLoadStoreTests.java","additions":9,"deletions":12,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -93,1 +93,1 @@\n-            int[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            int[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -253,1 +253,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i+order[i + j]]);\n@@ -258,1 +258,1 @@\n-            Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i+order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]]);\n@@ -274,1 +274,1 @@\n-                    Assert.assertEquals(r[i + k], (int)0);\n+                    Assert.assertEquals(r[i + k], (int) 0);\n@@ -282,1 +282,1 @@\n-                Assert.assertEquals(r[idx], (int)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], (int) 0, \"at index #\" + idx);\n@@ -297,1 +297,1 @@\n-                        Assert.assertEquals(r[i + j], (int)0);\n+                        Assert.assertEquals(r[i + j], (int) 0);\n@@ -306,1 +306,1 @@\n-                Assert.assertEquals(r[idx], (int)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], (int) 0, \"at index #\" + idx);\n@@ -316,1 +316,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -321,1 +321,1 @@\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]]);\n@@ -331,1 +331,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + order[i + j]]);\n@@ -333,1 +333,1 @@\n-                         Assert.assertEquals(r[i+j], (int)0);\n+                         Assert.assertEquals(r[i + j], (int) 0);\n@@ -339,1 +339,1 @@\n-                Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -341,1 +341,1 @@\n-                Assert.assertEquals(r[i+j], (int)0, \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], (int) 0, \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -351,1 +351,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -353,1 +353,1 @@\n-                         Assert.assertEquals(r[i+j], (int)0);\n+                         Assert.assertEquals(r[i + j], (int) 0);\n@@ -359,1 +359,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -361,1 +361,1 @@\n-                Assert.assertEquals(r[i+j], (int)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], (int) 0, \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -370,1 +370,1 @@\n-                a[j]=a[idx];\n+                a[j] = a[idx];\n@@ -421,1 +421,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], (int)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])));\n+                Assert.assertEquals(r[i], f.apply(a[i], (int) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])));\n@@ -424,1 +424,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], (int)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])),\n+            Assert.assertEquals(r[i], f.apply(a[i], (int) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])),\n@@ -470,1 +470,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], (int)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n+                Assert.assertEquals(r[i], f.apply(a[i], (int) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n@@ -473,1 +473,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], (int)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]),\n+            Assert.assertEquals(r[i], f.apply(a[i], (int) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]),\n@@ -486,1 +486,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]));\n@@ -490,1 +490,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]), \"at index #\" + i + \", \" + j);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]), \"at index #\" + i + \", \" + j);\n@@ -504,1 +504,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]));\n@@ -508,1 +508,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i+j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i + j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n@@ -657,1 +657,0 @@\n-\n@@ -681,1 +680,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -686,1 +685,1 @@\n-            int[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            int[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -689,1 +688,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -691,1 +690,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -708,1 +707,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -713,1 +712,1 @@\n-            int[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            int[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -716,1 +715,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -718,1 +717,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -729,1 +728,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -734,1 +733,1 @@\n-            int[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            int[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -737,1 +736,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -739,1 +738,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -741,1 +740,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(r, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(r, i, i + SPECIES.length()))\n@@ -756,1 +755,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -761,1 +760,1 @@\n-            int[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            int[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -776,1 +775,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -781,1 +780,1 @@\n-            int[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            int[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -797,1 +796,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -802,1 +801,1 @@\n-            int[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            int[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -818,1 +817,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -823,1 +822,1 @@\n-            int[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            int[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -840,1 +839,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -845,1 +844,1 @@\n-            int[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            int[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -859,1 +858,1 @@\n-                Assert.assertEquals(r[i], (int)(a[i+offs]));\n+                Assert.assertEquals(r[i], (int) (a[i + offs]));\n@@ -862,1 +861,1 @@\n-            Assert.assertEquals(r[i], (int)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (int) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -872,1 +871,1 @@\n-                Assert.assertEquals(r[i], (long)(a[i+offs]));\n+                Assert.assertEquals(r[i], (long) (a[i + offs]));\n@@ -875,1 +874,1 @@\n-            Assert.assertEquals(r[i], (long)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (long) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -883,1 +882,1 @@\n-                Assert.assertEquals(r[i], (double)(a[i+offs]));\n+                Assert.assertEquals(r[i], (double) (a[i + offs]));\n@@ -886,1 +885,1 @@\n-            Assert.assertEquals(r[i], (double)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (double) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -890,1 +889,0 @@\n-\n@@ -898,1 +896,1 @@\n-                            i -> (int)(-i * 5));\n+                            i -> (int) (-i * 5));\n@@ -902,1 +900,1 @@\n-                            i -> (int)(i * 5));\n+                            i -> (int) (i * 5));\n@@ -906,1 +904,1 @@\n-                            i -> (((int)(i + 1) == 0) ? 1 : (int)(i + 1)));\n+                            i -> (((int) (i + 1) == 0) ? 1 : (int) (i + 1)));\n@@ -1036,1 +1034,1 @@\n-                            i -> (int)i);\n+                            i -> (int) i);\n@@ -1040,1 +1038,1 @@\n-                            i -> (int)(i - (s * BUFFER_REPS \/ 2)));\n+                            i -> (int) (i - (s * BUFFER_REPS \/ 2)));\n@@ -1044,1 +1042,1 @@\n-                            i -> (int)(i + 1));\n+                            i -> (int) (i + 1));\n@@ -1048,1 +1046,1 @@\n-                            i -> (int)(i - 2));\n+                            i -> (int) (i - 2));\n@@ -1052,1 +1050,1 @@\n-                            i -> i%3 == 0 ? (int)i : (i%3 == 1 ? (int)(i + 1) : (int)(i - 2)));\n+                            i -> i % 3 == 0 ? (int) i : (i % 3 == 1 ? (int) (i + 1) : (int) (i - 2)));\n@@ -1126,1 +1124,1 @@\n-                return (int)0;\n+                return (int) 0;\n@@ -1166,1 +1164,1 @@\n-        return Integer.rotateLeft(a, ((int)b));\n+        return Integer.rotateLeft(a, ((int) b));\n@@ -1170,1 +1168,1 @@\n-        return Integer.rotateRight(a, ((int)b));\n+        return Integer.rotateRight(a, ((int) b));\n@@ -1185,1 +1183,0 @@\n-\n@@ -1232,1 +1229,1 @@\n-        IntVector three = IntVector.broadcast(SPECIES, (byte)-3);\n+        IntVector three = IntVector.broadcast(SPECIES, (byte) -3);\n@@ -1246,1 +1243,1 @@\n-        m = higher.min((int)-1).test(VectorOperators.IS_NEGATIVE);\n+        m = higher.min((int) -1).test(VectorOperators.IS_NEGATIVE);\n@@ -1249,1 +1246,1 @@\n-        assert(max == -3 + scale * (SPECIES.length()-1));\n+        assert(max == -3 + scale * (SPECIES.length() - 1));\n@@ -1264,1 +1261,1 @@\n-        IntVector io2 = (IntVector) VectorShuffle.iota(SPECIES,0,1,false).toVector();\n+        IntVector io2 = (IntVector) VectorShuffle.iota(SPECIES, 0, 1, false).toVector();\n@@ -1266,1 +1263,1 @@\n-        IntVector a = io.add((int)1); \/\/[1,2]\n+        IntVector a = io.add((int) 1); \/\/[1,2]\n@@ -1271,2 +1268,2 @@\n-        IntVector zab0 = a.rearrange(zip0,b); \/\/[1,-1]\n-        IntVector zab1 = a.rearrange(zip1,b); \/\/[2,-2]\n+        IntVector zab0 = a.rearrange(zip0, b); \/\/[1,-1]\n+        IntVector zab1 = a.rearrange(zip1, b); \/\/[2,-2]\n@@ -1277,2 +1274,2 @@\n-            manual[i+0] = abValues[i\/2];\n-            manual[i+1] = abValues[a.length() + i\/2];\n+            manual[i + 0] = abValues[i \/ 2];\n+            manual[i + 1] = abValues[a.length() + i \/ 2];\n@@ -1283,2 +1280,2 @@\n-        IntVector uab0 = zab0.rearrange(unz0,zab1);\n-        IntVector uab1 = zab0.rearrange(unz1,zab1);\n+        IntVector uab0 = zab0.rearrange(unz0, zab1);\n+        IntVector uab1 = zab0.rearrange(unz1, zab1);\n@@ -1341,1 +1338,1 @@\n-        return (int)(a + b);\n+        return (int) (a + b);\n@@ -1361,1 +1358,1 @@\n-        return (int)(a + b);\n+        return (int) (a + b);\n@@ -1417,1 +1414,1 @@\n-        return (int)(a - b);\n+        return (int) (a - b);\n@@ -1437,1 +1434,1 @@\n-        return (int)(a - b);\n+        return (int) (a - b);\n@@ -1493,1 +1490,1 @@\n-        return (int)(a * b);\n+        return (int) (a * b);\n@@ -1513,1 +1510,1 @@\n-        return (int)(a * b);\n+        return (int) (a * b);\n@@ -1572,1 +1569,1 @@\n-        return (int)(a \/ b);\n+        return (int) (a \/ b);\n@@ -1594,1 +1591,1 @@\n-        return (int)(a \/ b);\n+        return (int) (a \/ b);\n@@ -1663,1 +1660,1 @@\n-        return (int)((a)!=0?a:b);\n+        return (int) ((a) != 0 ? a : b);\n@@ -1704,1 +1701,1 @@\n-        return (int)(a & b);\n+        return (int) (a & b);\n@@ -1724,1 +1721,1 @@\n-        return (int)(a & b);\n+        return (int) (a & b);\n@@ -1766,1 +1763,1 @@\n-        return (int)(a & ~b);\n+        return (int) (a & ~b);\n@@ -1810,1 +1807,1 @@\n-        return (int)(a | b);\n+        return (int) (a | b);\n@@ -1830,1 +1827,1 @@\n-        return (int)(a | b);\n+        return (int) (a | b);\n@@ -1872,1 +1869,1 @@\n-        return (int)(a ^ b);\n+        return (int) (a ^ b);\n@@ -2156,1 +2153,1 @@\n-            av.lanewise(VectorOperators.OR, (long)b[i]).intoArray(r, i);\n+            av.lanewise(VectorOperators.OR, (long) b[i]).intoArray(r, i);\n@@ -2175,1 +2172,1 @@\n-            av.lanewise(VectorOperators.OR, (long)b[i], vmask).intoArray(r, i);\n+            av.lanewise(VectorOperators.OR, (long) b[i], vmask).intoArray(r, i);\n@@ -2190,1 +2187,1 @@\n-            av.lanewise(VectorOperators.ADD, (long)b[i]).intoArray(r, i);\n+            av.lanewise(VectorOperators.ADD, (long) b[i]).intoArray(r, i);\n@@ -2207,1 +2204,1 @@\n-            av.lanewise(VectorOperators.ADD, (long)b[i], vmask).intoArray(r, i);\n+            av.lanewise(VectorOperators.ADD, (long) b[i], vmask).intoArray(r, i);\n@@ -2214,1 +2211,1 @@\n-        return (int)((a << b));\n+        return (int) ((a << b));\n@@ -2262,1 +2259,1 @@\n-        return (int)((a >> b));\n+        return (int) ((a >> b));\n@@ -2310,1 +2307,1 @@\n-        return (int)((a >>> b));\n+        return (int) ((a >>> b));\n@@ -2358,1 +2355,1 @@\n-        return (int)((a << b));\n+        return (int) ((a << b));\n@@ -2370,1 +2367,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i]).intoArray(r, i);\n@@ -2391,1 +2388,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i], vmask).intoArray(r, i);\n@@ -2404,1 +2401,1 @@\n-        return (int)((a >>> b));\n+        return (int) ((a >>> b));\n@@ -2416,1 +2413,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i]).intoArray(r, i);\n@@ -2437,1 +2434,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i], vmask).intoArray(r, i);\n@@ -2450,1 +2447,1 @@\n-        return (int)((a >> b));\n+        return (int) ((a >> b));\n@@ -2462,1 +2459,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i]).intoArray(r, i);\n@@ -2483,1 +2480,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i], vmask).intoArray(r, i);\n@@ -2496,1 +2493,1 @@\n-        return (int)(ROR_scalar(a,b));\n+        return (int) (ROR_scalar(a, b));\n@@ -2540,1 +2537,1 @@\n-        return (int)(ROL_scalar(a,b));\n+        return (int) (ROL_scalar(a, b));\n@@ -2584,1 +2581,1 @@\n-        return (int)(ROR_scalar(a,b));\n+        return (int) (ROR_scalar(a, b));\n@@ -2596,1 +2593,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i]).intoArray(r, i);\n@@ -2617,1 +2614,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i], vmask).intoArray(r, i);\n@@ -2626,1 +2623,1 @@\n-        return (int)(ROL_scalar(a,b));\n+        return (int) (ROL_scalar(a, b));\n@@ -2638,1 +2635,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i]).intoArray(r, i);\n@@ -2659,1 +2656,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i], vmask).intoArray(r, i);\n@@ -2667,1 +2664,1 @@\n-        return (int)(Math.min(a, b));\n+        return (int) (Math.min(a, b));\n@@ -2687,1 +2684,1 @@\n-        return (int)(Math.min(a, b));\n+        return (int) (Math.min(a, b));\n@@ -2705,1 +2702,1 @@\n-        return (int)(Math.max(a, b));\n+        return (int) (Math.max(a, b));\n@@ -2725,1 +2722,1 @@\n-        return (int)(Math.max(a, b));\n+        return (int) (Math.max(a, b));\n@@ -3563,1 +3560,1 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (int)(65535+i)).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length() - 1)), (int) (65535 + i)).intoArray(r, i);\n@@ -3569,1 +3566,1 @@\n-            assertInsertArraysEquals(r, a, (int)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+            assertInsertArraysEquals(r, a, (int) (65535 + i), (j++ & (SPECIES.length() - 1)), i , i + SPECIES.length());\n@@ -3573,1 +3570,1 @@\n-        return bits(a)==0;\n+        return bits(a) == 0;\n@@ -3606,1 +3603,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_DEFAULT(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_DEFAULT(a[i + j]));\n@@ -3611,1 +3608,1 @@\n-        return bits(a)<0;\n+        return bits(a) < 0;\n@@ -3644,1 +3641,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_NEGATIVE(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_NEGATIVE(a[i + j]));\n@@ -4154,1 +4151,0 @@\n-\n@@ -4182,1 +4178,1 @@\n-            VectorMask<Integer> mv = av.compare(VectorOperators.LT, (long)b[i]);\n+            VectorMask<Integer> mv = av.compare(VectorOperators.LT, (long) b[i]);\n@@ -4186,1 +4182,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), a[i + j] < (int)((long)b[i]));\n+                Assert.assertEquals(mv.laneIsSet(j), a[i + j] < (int) ((long) b[i]));\n@@ -4191,1 +4187,0 @@\n-\n@@ -4203,1 +4198,1 @@\n-            VectorMask<Integer> mv = av.compare(VectorOperators.LT, (long)b[i], vmask);\n+            VectorMask<Integer> mv = av.compare(VectorOperators.LT, (long) b[i], vmask);\n@@ -4207,1 +4202,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] < (int)((long)b[i])));\n+                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] < (int) ((long) b[i])));\n@@ -4228,1 +4223,0 @@\n-\n@@ -4256,1 +4250,1 @@\n-            VectorMask<Integer> mv = av.compare(VectorOperators.EQ, (long)b[i]);\n+            VectorMask<Integer> mv = av.compare(VectorOperators.EQ, (long) b[i]);\n@@ -4260,1 +4254,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), a[i + j] == (int)((long)b[i]));\n+                Assert.assertEquals(mv.laneIsSet(j), a[i + j] == (int) ((long) b[i]));\n@@ -4265,1 +4259,0 @@\n-\n@@ -4277,1 +4270,1 @@\n-            VectorMask<Integer> mv = av.compare(VectorOperators.EQ, (long)b[i], vmask);\n+            VectorMask<Integer> mv = av.compare(VectorOperators.EQ, (long) b[i], vmask);\n@@ -4281,1 +4274,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] == (int)((long)b[i])));\n+                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] == (int) ((long) b[i])));\n@@ -4392,1 +4385,1 @@\n-                    r[i]=av.lane(0);\n+                    r[i] = av.lane(0);\n@@ -4394,2 +4387,2 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n@@ -4397,4 +4390,4 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n@@ -4402,8 +4395,8 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n@@ -4411,16 +4404,16 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n@@ -4428,32 +4421,32 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n@@ -4461,64 +4454,64 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n-                    r[i+32]=av.lane(32);\n-                    r[i+33]=av.lane(33);\n-                    r[i+34]=av.lane(34);\n-                    r[i+35]=av.lane(35);\n-                    r[i+36]=av.lane(36);\n-                    r[i+37]=av.lane(37);\n-                    r[i+38]=av.lane(38);\n-                    r[i+39]=av.lane(39);\n-                    r[i+40]=av.lane(40);\n-                    r[i+41]=av.lane(41);\n-                    r[i+42]=av.lane(42);\n-                    r[i+43]=av.lane(43);\n-                    r[i+44]=av.lane(44);\n-                    r[i+45]=av.lane(45);\n-                    r[i+46]=av.lane(46);\n-                    r[i+47]=av.lane(47);\n-                    r[i+48]=av.lane(48);\n-                    r[i+49]=av.lane(49);\n-                    r[i+50]=av.lane(50);\n-                    r[i+51]=av.lane(51);\n-                    r[i+52]=av.lane(52);\n-                    r[i+53]=av.lane(53);\n-                    r[i+54]=av.lane(54);\n-                    r[i+55]=av.lane(55);\n-                    r[i+56]=av.lane(56);\n-                    r[i+57]=av.lane(57);\n-                    r[i+58]=av.lane(58);\n-                    r[i+59]=av.lane(59);\n-                    r[i+60]=av.lane(60);\n-                    r[i+61]=av.lane(61);\n-                    r[i+62]=av.lane(62);\n-                    r[i+63]=av.lane(63);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n+                    r[i + 32] = av.lane(32);\n+                    r[i + 33] = av.lane(33);\n+                    r[i + 34] = av.lane(34);\n+                    r[i + 35] = av.lane(35);\n+                    r[i + 36] = av.lane(36);\n+                    r[i + 37] = av.lane(37);\n+                    r[i + 38] = av.lane(38);\n+                    r[i + 39] = av.lane(39);\n+                    r[i + 40] = av.lane(40);\n+                    r[i + 41] = av.lane(41);\n+                    r[i + 42] = av.lane(42);\n+                    r[i + 43] = av.lane(43);\n+                    r[i + 44] = av.lane(44);\n+                    r[i + 45] = av.lane(45);\n+                    r[i + 46] = av.lane(46);\n+                    r[i + 47] = av.lane(47);\n+                    r[i + 48] = av.lane(48);\n+                    r[i + 49] = av.lane(49);\n+                    r[i + 50] = av.lane(50);\n+                    r[i + 51] = av.lane(51);\n+                    r[i + 52] = av.lane(52);\n+                    r[i + 53] = av.lane(53);\n+                    r[i + 54] = av.lane(54);\n+                    r[i + 55] = av.lane(55);\n+                    r[i + 56] = av.lane(56);\n+                    r[i + 57] = av.lane(57);\n+                    r[i + 58] = av.lane(58);\n+                    r[i + 59] = av.lane(59);\n+                    r[i + 60] = av.lane(60);\n+                    r[i + 61] = av.lane(61);\n+                    r[i + 62] = av.lane(62);\n+                    r[i + 63] = av.lane(63);\n@@ -4527,1 +4520,1 @@\n-                        r[i+j]=av.lane(j);\n+                        r[i + j] = av.lane(j);\n@@ -4568,3 +4561,0 @@\n-\n-\n-\n@@ -4574,2 +4564,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = a[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = a[idx + i + origin];\n@@ -4577,1 +4567,1 @@\n-                res[i] = (int)0;\n+                res[i] = (int) 0;\n@@ -4600,1 +4590,1 @@\n-                res[i] = a[idx+i+origin];\n+                res[i] = a[idx + i + origin];\n@@ -4602,1 +4592,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n@@ -4628,2 +4618,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = mask[i] ? a[idx+i+origin] : (int)0;\n+            if(i + origin < SPECIES.length())\n+                res[i] = mask[i] ? a[idx + i + origin] : (int) 0;\n@@ -4631,1 +4621,1 @@\n-                res[i] = mask[i] ? b[idx+j] : (int)0;\n+                res[i] = mask[i] ? b[idx + j] : (int) 0;\n@@ -4662,1 +4652,1 @@\n-                res[i] = (int)0;\n+                res[i] = (int) 0;\n@@ -4664,1 +4654,1 @@\n-                res[i] = a[idx+j];\n+                res[i] = a[idx + j];\n@@ -4690,1 +4680,1 @@\n-                    res[i] = b[idx+i];\n+                    res[i] = b[idx + i];\n@@ -4692,1 +4682,1 @@\n-                    res[i] = a[idx+j];\n+                    res[i] = a[idx + j];\n@@ -4697,1 +4687,1 @@\n-                    res[i] = a[idx+SPECIES.length()-origin+i];\n+                    res[i] = a[idx + SPECIES.length() - origin + i];\n@@ -4699,1 +4689,1 @@\n-                    res[i] = b[idx+origin+j];\n+                    res[i] = b[idx + origin + j];\n@@ -4727,2 +4717,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = b[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = b[idx + i + origin];\n@@ -4730,1 +4720,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n@@ -4735,1 +4725,1 @@\n-            res[i] = mask[i] ? a[idx+i] : res[i];\n+            res[i] = mask[i] ? a[idx + i] : res[i];\n@@ -4741,1 +4731,1 @@\n-                    res1[i] = b[idx+i];\n+                    res1[i] = b[idx + i];\n@@ -4743,2 +4733,2 @@\n-                   res1[i] = res[j];\n-                   j++;\n+                    res1[i] = res[j];\n+                    j++;\n@@ -4750,1 +4740,1 @@\n-                    res1[i] = res[SPECIES.length()-origin+i];\n+                    res1[i] = res[SPECIES.length() - origin + i];\n@@ -4752,1 +4742,1 @@\n-                    res1[i] = b[idx+origin+j];\n+                    res1[i] = b[idx + origin + j];\n@@ -4804,1 +4794,1 @@\n-        return (int)((a&~(c))|(b&c));\n+        return (int) ((a &~ (c)) | (b & c));\n@@ -4807,1 +4797,1 @@\n-        return (int)((a&~(c))|(b&c));\n+        return (int) ((a &~ (c)) | (b & c));\n@@ -5023,1 +5013,1 @@\n-        return (int)(-((int)a));\n+        return (int) (-((int) a));\n@@ -5027,1 +5017,1 @@\n-        return (int)(-((int)a));\n+        return (int) (-((int) a));\n@@ -5079,1 +5069,1 @@\n-        return (int)(Math.abs((int)a));\n+        return (int) (Math.abs((int) a));\n@@ -5083,1 +5073,1 @@\n-        return (int)(Math.abs((int)a));\n+        return (int) (Math.abs((int) a));\n@@ -5136,1 +5126,1 @@\n-        return (int)(~((int)a));\n+        return (int) (~((int) a));\n@@ -5140,1 +5130,1 @@\n-        return (int)(~((int)a));\n+        return (int) (~((int) a));\n@@ -5198,1 +5188,1 @@\n-        return (int)((a==0?0:-1));\n+        return (int) ((a == 0 ? 0 : -1));\n@@ -5244,1 +5234,1 @@\n-        return (int)(Integer.bitCount(a));\n+        return (int) (Integer.bitCount(a));\n@@ -5293,1 +5283,1 @@\n-        return (int)(TRAILING_ZEROS_COUNT_scalar(a));\n+        return (int) (TRAILING_ZEROS_COUNT_scalar(a));\n@@ -5336,1 +5326,1 @@\n-        return (int)(LEADING_ZEROS_COUNT_scalar(a));\n+        return (int) (LEADING_ZEROS_COUNT_scalar(a));\n@@ -5379,1 +5369,1 @@\n-        return (int)(REVERSE_scalar(a));\n+        return (int) (REVERSE_scalar(a));\n@@ -5519,1 +5509,1 @@\n-        return (long)res;\n+        return (long) res;\n@@ -5558,1 +5548,1 @@\n-        return (long)res;\n+        return (long) res;\n@@ -5615,1 +5605,1 @@\n-                av.blend((long)b[i], vmask).intoArray(r, i);\n+                av.blend((long) b[i], vmask).intoArray(r, i);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int512VectorTests.java","additions":302,"deletions":312,"binary":false,"changes":614,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,1 +74,1 @@\n-                Assert.assertEquals(r[i], mask[(i*8\/SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0);\n+                Assert.assertEquals(r[i], mask[(i * 8 \/ SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0);\n@@ -77,1 +77,1 @@\n-            Assert.assertEquals(r[i], mask[(i*8\/SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0, \"at index #\" + i);\n+            Assert.assertEquals(r[i], mask[(i * 8 \/ SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0, \"at index #\" + i);\n@@ -84,1 +84,1 @@\n-                            i -> (int)(i * 5));\n+                            i -> (int) (i * 5));\n@@ -88,1 +88,1 @@\n-                            i -> (((int)(i + 1) == 0) ? 1 : (int)(i + 1)));\n+                            i -> (((int) (i + 1) == 0) ? 1 : (int) (i + 1)));\n@@ -195,1 +195,1 @@\n-                            return new Object[]{fa, fb, bo};\n+                            return new Object[] {fa, fb, bo};\n@@ -206,1 +206,1 @@\n-                            return new Object[]{fa, fb, fm, bo};\n+                            return new Object[] {fa, fb, fm, bo};\n@@ -215,1 +215,1 @@\n-                    return new Object[]{fa, bo};\n+                    return new Object[] {fa, bo};\n@@ -225,1 +225,1 @@\n-                        return new Object[]{fa, fm, bo};\n+                        return new Object[] {fa, fm, bo};\n@@ -944,2 +944,0 @@\n-\n-\n@@ -1095,1 +1093,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int64VectorLoadStoreTests.java","additions":9,"deletions":12,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -93,1 +93,1 @@\n-            int[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            int[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -253,1 +253,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i+order[i + j]]);\n@@ -258,1 +258,1 @@\n-            Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i+order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]]);\n@@ -274,1 +274,1 @@\n-                    Assert.assertEquals(r[i + k], (int)0);\n+                    Assert.assertEquals(r[i + k], (int) 0);\n@@ -282,1 +282,1 @@\n-                Assert.assertEquals(r[idx], (int)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], (int) 0, \"at index #\" + idx);\n@@ -297,1 +297,1 @@\n-                        Assert.assertEquals(r[i + j], (int)0);\n+                        Assert.assertEquals(r[i + j], (int) 0);\n@@ -306,1 +306,1 @@\n-                Assert.assertEquals(r[idx], (int)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], (int) 0, \"at index #\" + idx);\n@@ -316,1 +316,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -321,1 +321,1 @@\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]]);\n@@ -331,1 +331,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + order[i + j]]);\n@@ -333,1 +333,1 @@\n-                         Assert.assertEquals(r[i+j], (int)0);\n+                         Assert.assertEquals(r[i + j], (int) 0);\n@@ -339,1 +339,1 @@\n-                Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -341,1 +341,1 @@\n-                Assert.assertEquals(r[i+j], (int)0, \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], (int) 0, \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -351,1 +351,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -353,1 +353,1 @@\n-                         Assert.assertEquals(r[i+j], (int)0);\n+                         Assert.assertEquals(r[i + j], (int) 0);\n@@ -359,1 +359,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -361,1 +361,1 @@\n-                Assert.assertEquals(r[i+j], (int)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], (int) 0, \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -370,1 +370,1 @@\n-                a[j]=a[idx];\n+                a[j] = a[idx];\n@@ -421,1 +421,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], (int)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])));\n+                Assert.assertEquals(r[i], f.apply(a[i], (int) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])));\n@@ -424,1 +424,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], (int)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])),\n+            Assert.assertEquals(r[i], f.apply(a[i], (int) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])),\n@@ -470,1 +470,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], (int)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n+                Assert.assertEquals(r[i], f.apply(a[i], (int) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n@@ -473,1 +473,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], (int)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]),\n+            Assert.assertEquals(r[i], f.apply(a[i], (int) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]),\n@@ -486,1 +486,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]));\n@@ -490,1 +490,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]), \"at index #\" + i + \", \" + j);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]), \"at index #\" + i + \", \" + j);\n@@ -504,1 +504,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]));\n@@ -508,1 +508,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i+j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i + j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n@@ -657,1 +657,0 @@\n-\n@@ -681,1 +680,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -686,1 +685,1 @@\n-            int[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            int[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -689,1 +688,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -691,1 +690,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -708,1 +707,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -713,1 +712,1 @@\n-            int[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            int[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -716,1 +715,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -718,1 +717,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -729,1 +728,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -734,1 +733,1 @@\n-            int[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            int[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -737,1 +736,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -739,1 +738,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -741,1 +740,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(r, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(r, i, i + SPECIES.length()))\n@@ -756,1 +755,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -761,1 +760,1 @@\n-            int[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            int[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -776,1 +775,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -781,1 +780,1 @@\n-            int[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            int[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -797,1 +796,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -802,1 +801,1 @@\n-            int[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            int[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -818,1 +817,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -823,1 +822,1 @@\n-            int[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            int[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -840,1 +839,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -845,1 +844,1 @@\n-            int[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            int[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -859,1 +858,1 @@\n-                Assert.assertEquals(r[i], (int)(a[i+offs]));\n+                Assert.assertEquals(r[i], (int) (a[i + offs]));\n@@ -862,1 +861,1 @@\n-            Assert.assertEquals(r[i], (int)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (int) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -872,1 +871,1 @@\n-                Assert.assertEquals(r[i], (long)(a[i+offs]));\n+                Assert.assertEquals(r[i], (long) (a[i + offs]));\n@@ -875,1 +874,1 @@\n-            Assert.assertEquals(r[i], (long)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (long) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -883,1 +882,1 @@\n-                Assert.assertEquals(r[i], (double)(a[i+offs]));\n+                Assert.assertEquals(r[i], (double) (a[i + offs]));\n@@ -886,1 +885,1 @@\n-            Assert.assertEquals(r[i], (double)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (double) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -890,1 +889,0 @@\n-\n@@ -898,1 +896,1 @@\n-                            i -> (int)(-i * 5));\n+                            i -> (int) (-i * 5));\n@@ -902,1 +900,1 @@\n-                            i -> (int)(i * 5));\n+                            i -> (int) (i * 5));\n@@ -906,1 +904,1 @@\n-                            i -> (((int)(i + 1) == 0) ? 1 : (int)(i + 1)));\n+                            i -> (((int) (i + 1) == 0) ? 1 : (int) (i + 1)));\n@@ -1036,1 +1034,1 @@\n-                            i -> (int)i);\n+                            i -> (int) i);\n@@ -1040,1 +1038,1 @@\n-                            i -> (int)(i - (s * BUFFER_REPS \/ 2)));\n+                            i -> (int) (i - (s * BUFFER_REPS \/ 2)));\n@@ -1044,1 +1042,1 @@\n-                            i -> (int)(i + 1));\n+                            i -> (int) (i + 1));\n@@ -1048,1 +1046,1 @@\n-                            i -> (int)(i - 2));\n+                            i -> (int) (i - 2));\n@@ -1052,1 +1050,1 @@\n-                            i -> i%3 == 0 ? (int)i : (i%3 == 1 ? (int)(i + 1) : (int)(i - 2)));\n+                            i -> i % 3 == 0 ? (int) i : (i % 3 == 1 ? (int) (i + 1) : (int) (i - 2)));\n@@ -1126,1 +1124,1 @@\n-                return (int)0;\n+                return (int) 0;\n@@ -1166,1 +1164,1 @@\n-        return Integer.rotateLeft(a, ((int)b));\n+        return Integer.rotateLeft(a, ((int) b));\n@@ -1170,1 +1168,1 @@\n-        return Integer.rotateRight(a, ((int)b));\n+        return Integer.rotateRight(a, ((int) b));\n@@ -1185,1 +1183,0 @@\n-\n@@ -1232,1 +1229,1 @@\n-        IntVector three = IntVector.broadcast(SPECIES, (byte)-3);\n+        IntVector three = IntVector.broadcast(SPECIES, (byte) -3);\n@@ -1246,1 +1243,1 @@\n-        m = higher.min((int)-1).test(VectorOperators.IS_NEGATIVE);\n+        m = higher.min((int) -1).test(VectorOperators.IS_NEGATIVE);\n@@ -1249,1 +1246,1 @@\n-        assert(max == -3 + scale * (SPECIES.length()-1));\n+        assert(max == -3 + scale * (SPECIES.length() - 1));\n@@ -1264,1 +1261,1 @@\n-        IntVector io2 = (IntVector) VectorShuffle.iota(SPECIES,0,1,false).toVector();\n+        IntVector io2 = (IntVector) VectorShuffle.iota(SPECIES, 0, 1, false).toVector();\n@@ -1266,1 +1263,1 @@\n-        IntVector a = io.add((int)1); \/\/[1,2]\n+        IntVector a = io.add((int) 1); \/\/[1,2]\n@@ -1271,2 +1268,2 @@\n-        IntVector zab0 = a.rearrange(zip0,b); \/\/[1,-1]\n-        IntVector zab1 = a.rearrange(zip1,b); \/\/[2,-2]\n+        IntVector zab0 = a.rearrange(zip0, b); \/\/[1,-1]\n+        IntVector zab1 = a.rearrange(zip1, b); \/\/[2,-2]\n@@ -1277,2 +1274,2 @@\n-            manual[i+0] = abValues[i\/2];\n-            manual[i+1] = abValues[a.length() + i\/2];\n+            manual[i + 0] = abValues[i \/ 2];\n+            manual[i + 1] = abValues[a.length() + i \/ 2];\n@@ -1283,2 +1280,2 @@\n-        IntVector uab0 = zab0.rearrange(unz0,zab1);\n-        IntVector uab1 = zab0.rearrange(unz1,zab1);\n+        IntVector uab0 = zab0.rearrange(unz0, zab1);\n+        IntVector uab1 = zab0.rearrange(unz1, zab1);\n@@ -1341,1 +1338,1 @@\n-        return (int)(a + b);\n+        return (int) (a + b);\n@@ -1361,1 +1358,1 @@\n-        return (int)(a + b);\n+        return (int) (a + b);\n@@ -1417,1 +1414,1 @@\n-        return (int)(a - b);\n+        return (int) (a - b);\n@@ -1437,1 +1434,1 @@\n-        return (int)(a - b);\n+        return (int) (a - b);\n@@ -1493,1 +1490,1 @@\n-        return (int)(a * b);\n+        return (int) (a * b);\n@@ -1513,1 +1510,1 @@\n-        return (int)(a * b);\n+        return (int) (a * b);\n@@ -1572,1 +1569,1 @@\n-        return (int)(a \/ b);\n+        return (int) (a \/ b);\n@@ -1594,1 +1591,1 @@\n-        return (int)(a \/ b);\n+        return (int) (a \/ b);\n@@ -1663,1 +1660,1 @@\n-        return (int)((a)!=0?a:b);\n+        return (int) ((a) != 0 ? a : b);\n@@ -1704,1 +1701,1 @@\n-        return (int)(a & b);\n+        return (int) (a & b);\n@@ -1724,1 +1721,1 @@\n-        return (int)(a & b);\n+        return (int) (a & b);\n@@ -1766,1 +1763,1 @@\n-        return (int)(a & ~b);\n+        return (int) (a & ~b);\n@@ -1810,1 +1807,1 @@\n-        return (int)(a | b);\n+        return (int) (a | b);\n@@ -1830,1 +1827,1 @@\n-        return (int)(a | b);\n+        return (int) (a | b);\n@@ -1872,1 +1869,1 @@\n-        return (int)(a ^ b);\n+        return (int) (a ^ b);\n@@ -2156,1 +2153,1 @@\n-            av.lanewise(VectorOperators.OR, (long)b[i]).intoArray(r, i);\n+            av.lanewise(VectorOperators.OR, (long) b[i]).intoArray(r, i);\n@@ -2175,1 +2172,1 @@\n-            av.lanewise(VectorOperators.OR, (long)b[i], vmask).intoArray(r, i);\n+            av.lanewise(VectorOperators.OR, (long) b[i], vmask).intoArray(r, i);\n@@ -2190,1 +2187,1 @@\n-            av.lanewise(VectorOperators.ADD, (long)b[i]).intoArray(r, i);\n+            av.lanewise(VectorOperators.ADD, (long) b[i]).intoArray(r, i);\n@@ -2207,1 +2204,1 @@\n-            av.lanewise(VectorOperators.ADD, (long)b[i], vmask).intoArray(r, i);\n+            av.lanewise(VectorOperators.ADD, (long) b[i], vmask).intoArray(r, i);\n@@ -2214,1 +2211,1 @@\n-        return (int)((a << b));\n+        return (int) ((a << b));\n@@ -2262,1 +2259,1 @@\n-        return (int)((a >> b));\n+        return (int) ((a >> b));\n@@ -2310,1 +2307,1 @@\n-        return (int)((a >>> b));\n+        return (int) ((a >>> b));\n@@ -2358,1 +2355,1 @@\n-        return (int)((a << b));\n+        return (int) ((a << b));\n@@ -2370,1 +2367,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i]).intoArray(r, i);\n@@ -2391,1 +2388,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i], vmask).intoArray(r, i);\n@@ -2404,1 +2401,1 @@\n-        return (int)((a >>> b));\n+        return (int) ((a >>> b));\n@@ -2416,1 +2413,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i]).intoArray(r, i);\n@@ -2437,1 +2434,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i], vmask).intoArray(r, i);\n@@ -2450,1 +2447,1 @@\n-        return (int)((a >> b));\n+        return (int) ((a >> b));\n@@ -2462,1 +2459,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i]).intoArray(r, i);\n@@ -2483,1 +2480,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i], vmask).intoArray(r, i);\n@@ -2496,1 +2493,1 @@\n-        return (int)(ROR_scalar(a,b));\n+        return (int) (ROR_scalar(a, b));\n@@ -2540,1 +2537,1 @@\n-        return (int)(ROL_scalar(a,b));\n+        return (int) (ROL_scalar(a, b));\n@@ -2584,1 +2581,1 @@\n-        return (int)(ROR_scalar(a,b));\n+        return (int) (ROR_scalar(a, b));\n@@ -2596,1 +2593,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i]).intoArray(r, i);\n@@ -2617,1 +2614,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i], vmask).intoArray(r, i);\n@@ -2626,1 +2623,1 @@\n-        return (int)(ROL_scalar(a,b));\n+        return (int) (ROL_scalar(a, b));\n@@ -2638,1 +2635,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i]).intoArray(r, i);\n@@ -2659,1 +2656,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i], vmask).intoArray(r, i);\n@@ -2667,1 +2664,1 @@\n-        return (int)(Math.min(a, b));\n+        return (int) (Math.min(a, b));\n@@ -2687,1 +2684,1 @@\n-        return (int)(Math.min(a, b));\n+        return (int) (Math.min(a, b));\n@@ -2705,1 +2702,1 @@\n-        return (int)(Math.max(a, b));\n+        return (int) (Math.max(a, b));\n@@ -2725,1 +2722,1 @@\n-        return (int)(Math.max(a, b));\n+        return (int) (Math.max(a, b));\n@@ -3563,1 +3560,1 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (int)(65535+i)).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length() - 1)), (int) (65535 + i)).intoArray(r, i);\n@@ -3569,1 +3566,1 @@\n-            assertInsertArraysEquals(r, a, (int)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+            assertInsertArraysEquals(r, a, (int) (65535 + i), (j++ & (SPECIES.length() - 1)), i , i + SPECIES.length());\n@@ -3573,1 +3570,1 @@\n-        return bits(a)==0;\n+        return bits(a) == 0;\n@@ -3606,1 +3603,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_DEFAULT(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_DEFAULT(a[i + j]));\n@@ -3611,1 +3608,1 @@\n-        return bits(a)<0;\n+        return bits(a) < 0;\n@@ -3644,1 +3641,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_NEGATIVE(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_NEGATIVE(a[i + j]));\n@@ -4154,1 +4151,0 @@\n-\n@@ -4182,1 +4178,1 @@\n-            VectorMask<Integer> mv = av.compare(VectorOperators.LT, (long)b[i]);\n+            VectorMask<Integer> mv = av.compare(VectorOperators.LT, (long) b[i]);\n@@ -4186,1 +4182,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), a[i + j] < (int)((long)b[i]));\n+                Assert.assertEquals(mv.laneIsSet(j), a[i + j] < (int) ((long) b[i]));\n@@ -4191,1 +4187,0 @@\n-\n@@ -4203,1 +4198,1 @@\n-            VectorMask<Integer> mv = av.compare(VectorOperators.LT, (long)b[i], vmask);\n+            VectorMask<Integer> mv = av.compare(VectorOperators.LT, (long) b[i], vmask);\n@@ -4207,1 +4202,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] < (int)((long)b[i])));\n+                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] < (int) ((long) b[i])));\n@@ -4228,1 +4223,0 @@\n-\n@@ -4256,1 +4250,1 @@\n-            VectorMask<Integer> mv = av.compare(VectorOperators.EQ, (long)b[i]);\n+            VectorMask<Integer> mv = av.compare(VectorOperators.EQ, (long) b[i]);\n@@ -4260,1 +4254,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), a[i + j] == (int)((long)b[i]));\n+                Assert.assertEquals(mv.laneIsSet(j), a[i + j] == (int) ((long) b[i]));\n@@ -4265,1 +4259,0 @@\n-\n@@ -4277,1 +4270,1 @@\n-            VectorMask<Integer> mv = av.compare(VectorOperators.EQ, (long)b[i], vmask);\n+            VectorMask<Integer> mv = av.compare(VectorOperators.EQ, (long) b[i], vmask);\n@@ -4281,1 +4274,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] == (int)((long)b[i])));\n+                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] == (int) ((long) b[i])));\n@@ -4392,1 +4385,1 @@\n-                    r[i]=av.lane(0);\n+                    r[i] = av.lane(0);\n@@ -4394,2 +4387,2 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n@@ -4397,4 +4390,4 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n@@ -4402,8 +4395,8 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n@@ -4411,16 +4404,16 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n@@ -4428,32 +4421,32 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n@@ -4461,64 +4454,64 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n-                    r[i+32]=av.lane(32);\n-                    r[i+33]=av.lane(33);\n-                    r[i+34]=av.lane(34);\n-                    r[i+35]=av.lane(35);\n-                    r[i+36]=av.lane(36);\n-                    r[i+37]=av.lane(37);\n-                    r[i+38]=av.lane(38);\n-                    r[i+39]=av.lane(39);\n-                    r[i+40]=av.lane(40);\n-                    r[i+41]=av.lane(41);\n-                    r[i+42]=av.lane(42);\n-                    r[i+43]=av.lane(43);\n-                    r[i+44]=av.lane(44);\n-                    r[i+45]=av.lane(45);\n-                    r[i+46]=av.lane(46);\n-                    r[i+47]=av.lane(47);\n-                    r[i+48]=av.lane(48);\n-                    r[i+49]=av.lane(49);\n-                    r[i+50]=av.lane(50);\n-                    r[i+51]=av.lane(51);\n-                    r[i+52]=av.lane(52);\n-                    r[i+53]=av.lane(53);\n-                    r[i+54]=av.lane(54);\n-                    r[i+55]=av.lane(55);\n-                    r[i+56]=av.lane(56);\n-                    r[i+57]=av.lane(57);\n-                    r[i+58]=av.lane(58);\n-                    r[i+59]=av.lane(59);\n-                    r[i+60]=av.lane(60);\n-                    r[i+61]=av.lane(61);\n-                    r[i+62]=av.lane(62);\n-                    r[i+63]=av.lane(63);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n+                    r[i + 32] = av.lane(32);\n+                    r[i + 33] = av.lane(33);\n+                    r[i + 34] = av.lane(34);\n+                    r[i + 35] = av.lane(35);\n+                    r[i + 36] = av.lane(36);\n+                    r[i + 37] = av.lane(37);\n+                    r[i + 38] = av.lane(38);\n+                    r[i + 39] = av.lane(39);\n+                    r[i + 40] = av.lane(40);\n+                    r[i + 41] = av.lane(41);\n+                    r[i + 42] = av.lane(42);\n+                    r[i + 43] = av.lane(43);\n+                    r[i + 44] = av.lane(44);\n+                    r[i + 45] = av.lane(45);\n+                    r[i + 46] = av.lane(46);\n+                    r[i + 47] = av.lane(47);\n+                    r[i + 48] = av.lane(48);\n+                    r[i + 49] = av.lane(49);\n+                    r[i + 50] = av.lane(50);\n+                    r[i + 51] = av.lane(51);\n+                    r[i + 52] = av.lane(52);\n+                    r[i + 53] = av.lane(53);\n+                    r[i + 54] = av.lane(54);\n+                    r[i + 55] = av.lane(55);\n+                    r[i + 56] = av.lane(56);\n+                    r[i + 57] = av.lane(57);\n+                    r[i + 58] = av.lane(58);\n+                    r[i + 59] = av.lane(59);\n+                    r[i + 60] = av.lane(60);\n+                    r[i + 61] = av.lane(61);\n+                    r[i + 62] = av.lane(62);\n+                    r[i + 63] = av.lane(63);\n@@ -4527,1 +4520,1 @@\n-                        r[i+j]=av.lane(j);\n+                        r[i + j] = av.lane(j);\n@@ -4568,3 +4561,0 @@\n-\n-\n-\n@@ -4574,2 +4564,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = a[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = a[idx + i + origin];\n@@ -4577,1 +4567,1 @@\n-                res[i] = (int)0;\n+                res[i] = (int) 0;\n@@ -4600,1 +4590,1 @@\n-                res[i] = a[idx+i+origin];\n+                res[i] = a[idx + i + origin];\n@@ -4602,1 +4592,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n@@ -4628,2 +4618,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = mask[i] ? a[idx+i+origin] : (int)0;\n+            if(i + origin < SPECIES.length())\n+                res[i] = mask[i] ? a[idx + i + origin] : (int) 0;\n@@ -4631,1 +4621,1 @@\n-                res[i] = mask[i] ? b[idx+j] : (int)0;\n+                res[i] = mask[i] ? b[idx + j] : (int) 0;\n@@ -4662,1 +4652,1 @@\n-                res[i] = (int)0;\n+                res[i] = (int) 0;\n@@ -4664,1 +4654,1 @@\n-                res[i] = a[idx+j];\n+                res[i] = a[idx + j];\n@@ -4690,1 +4680,1 @@\n-                    res[i] = b[idx+i];\n+                    res[i] = b[idx + i];\n@@ -4692,1 +4682,1 @@\n-                    res[i] = a[idx+j];\n+                    res[i] = a[idx + j];\n@@ -4697,1 +4687,1 @@\n-                    res[i] = a[idx+SPECIES.length()-origin+i];\n+                    res[i] = a[idx + SPECIES.length() - origin + i];\n@@ -4699,1 +4689,1 @@\n-                    res[i] = b[idx+origin+j];\n+                    res[i] = b[idx + origin + j];\n@@ -4727,2 +4717,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = b[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = b[idx + i + origin];\n@@ -4730,1 +4720,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n@@ -4735,1 +4725,1 @@\n-            res[i] = mask[i] ? a[idx+i] : res[i];\n+            res[i] = mask[i] ? a[idx + i] : res[i];\n@@ -4741,1 +4731,1 @@\n-                    res1[i] = b[idx+i];\n+                    res1[i] = b[idx + i];\n@@ -4743,2 +4733,2 @@\n-                   res1[i] = res[j];\n-                   j++;\n+                    res1[i] = res[j];\n+                    j++;\n@@ -4750,1 +4740,1 @@\n-                    res1[i] = res[SPECIES.length()-origin+i];\n+                    res1[i] = res[SPECIES.length() - origin + i];\n@@ -4752,1 +4742,1 @@\n-                    res1[i] = b[idx+origin+j];\n+                    res1[i] = b[idx + origin + j];\n@@ -4804,1 +4794,1 @@\n-        return (int)((a&~(c))|(b&c));\n+        return (int) ((a &~ (c)) | (b & c));\n@@ -4807,1 +4797,1 @@\n-        return (int)((a&~(c))|(b&c));\n+        return (int) ((a &~ (c)) | (b & c));\n@@ -5023,1 +5013,1 @@\n-        return (int)(-((int)a));\n+        return (int) (-((int) a));\n@@ -5027,1 +5017,1 @@\n-        return (int)(-((int)a));\n+        return (int) (-((int) a));\n@@ -5079,1 +5069,1 @@\n-        return (int)(Math.abs((int)a));\n+        return (int) (Math.abs((int) a));\n@@ -5083,1 +5073,1 @@\n-        return (int)(Math.abs((int)a));\n+        return (int) (Math.abs((int) a));\n@@ -5136,1 +5126,1 @@\n-        return (int)(~((int)a));\n+        return (int) (~((int) a));\n@@ -5140,1 +5130,1 @@\n-        return (int)(~((int)a));\n+        return (int) (~((int) a));\n@@ -5198,1 +5188,1 @@\n-        return (int)((a==0?0:-1));\n+        return (int) ((a == 0 ? 0 : -1));\n@@ -5244,1 +5234,1 @@\n-        return (int)(Integer.bitCount(a));\n+        return (int) (Integer.bitCount(a));\n@@ -5293,1 +5283,1 @@\n-        return (int)(TRAILING_ZEROS_COUNT_scalar(a));\n+        return (int) (TRAILING_ZEROS_COUNT_scalar(a));\n@@ -5336,1 +5326,1 @@\n-        return (int)(LEADING_ZEROS_COUNT_scalar(a));\n+        return (int) (LEADING_ZEROS_COUNT_scalar(a));\n@@ -5379,1 +5369,1 @@\n-        return (int)(REVERSE_scalar(a));\n+        return (int) (REVERSE_scalar(a));\n@@ -5519,1 +5509,1 @@\n-        return (long)res;\n+        return (long) res;\n@@ -5558,1 +5548,1 @@\n-        return (long)res;\n+        return (long) res;\n@@ -5615,1 +5605,1 @@\n-                av.blend((long)b[i], vmask).intoArray(r, i);\n+                av.blend((long) b[i], vmask).intoArray(r, i);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int64VectorTests.java","additions":302,"deletions":312,"binary":false,"changes":614,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -83,1 +83,1 @@\n-                Assert.assertEquals(r[i], mask[(i*8\/SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0);\n+                Assert.assertEquals(r[i], mask[(i * 8 \/ SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0);\n@@ -86,1 +86,1 @@\n-            Assert.assertEquals(r[i], mask[(i*8\/SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0, \"at index #\" + i);\n+            Assert.assertEquals(r[i], mask[(i * 8 \/ SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0, \"at index #\" + i);\n@@ -93,1 +93,1 @@\n-                            i -> (int)(i * 5));\n+                            i -> (int) (i * 5));\n@@ -97,1 +97,1 @@\n-                            i -> (((int)(i + 1) == 0) ? 1 : (int)(i + 1)));\n+                            i -> (((int) (i + 1) == 0) ? 1 : (int) (i + 1)));\n@@ -204,1 +204,1 @@\n-                            return new Object[]{fa, fb, bo};\n+                            return new Object[] {fa, fb, bo};\n@@ -215,1 +215,1 @@\n-                            return new Object[]{fa, fb, fm, bo};\n+                            return new Object[] {fa, fb, fm, bo};\n@@ -224,1 +224,1 @@\n-                    return new Object[]{fa, bo};\n+                    return new Object[] {fa, bo};\n@@ -234,1 +234,1 @@\n-                        return new Object[]{fa, fm, bo};\n+                        return new Object[] {fa, fm, bo};\n@@ -953,2 +953,0 @@\n-\n-\n@@ -1104,1 +1102,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/IntMaxVectorLoadStoreTests.java","additions":9,"deletions":12,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -93,1 +93,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -98,1 +98,1 @@\n-            int[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            int[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -258,1 +258,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i+order[i + j]]);\n@@ -263,1 +263,1 @@\n-            Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i+order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]]);\n@@ -279,1 +279,1 @@\n-                    Assert.assertEquals(r[i + k], (int)0);\n+                    Assert.assertEquals(r[i + k], (int) 0);\n@@ -287,1 +287,1 @@\n-                Assert.assertEquals(r[idx], (int)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], (int) 0, \"at index #\" + idx);\n@@ -302,1 +302,1 @@\n-                        Assert.assertEquals(r[i + j], (int)0);\n+                        Assert.assertEquals(r[i + j], (int) 0);\n@@ -311,1 +311,1 @@\n-                Assert.assertEquals(r[idx], (int)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], (int) 0, \"at index #\" + idx);\n@@ -321,1 +321,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -326,1 +326,1 @@\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]]);\n@@ -336,1 +336,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + order[i + j]]);\n@@ -338,1 +338,1 @@\n-                         Assert.assertEquals(r[i+j], (int)0);\n+                         Assert.assertEquals(r[i + j], (int) 0);\n@@ -344,1 +344,1 @@\n-                Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -346,1 +346,1 @@\n-                Assert.assertEquals(r[i+j], (int)0, \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], (int) 0, \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -356,1 +356,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -358,1 +358,1 @@\n-                         Assert.assertEquals(r[i+j], (int)0);\n+                         Assert.assertEquals(r[i + j], (int) 0);\n@@ -364,1 +364,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -366,1 +366,1 @@\n-                Assert.assertEquals(r[i+j], (int)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], (int) 0, \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -375,1 +375,1 @@\n-                a[j]=a[idx];\n+                a[j] = a[idx];\n@@ -426,1 +426,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], (int)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])));\n+                Assert.assertEquals(r[i], f.apply(a[i], (int) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])));\n@@ -429,1 +429,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], (int)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])),\n+            Assert.assertEquals(r[i], f.apply(a[i], (int) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])),\n@@ -475,1 +475,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], (int)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n+                Assert.assertEquals(r[i], f.apply(a[i], (int) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n@@ -478,1 +478,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], (int)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]),\n+            Assert.assertEquals(r[i], f.apply(a[i], (int) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]),\n@@ -491,1 +491,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]));\n@@ -495,1 +495,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]), \"at index #\" + i + \", \" + j);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]), \"at index #\" + i + \", \" + j);\n@@ -509,1 +509,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]));\n@@ -513,1 +513,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i+j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i + j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n@@ -662,1 +662,0 @@\n-\n@@ -686,1 +685,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -691,1 +690,1 @@\n-            int[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            int[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -694,1 +693,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -696,1 +695,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -713,1 +712,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -718,1 +717,1 @@\n-            int[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            int[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -721,1 +720,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -723,1 +722,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -734,1 +733,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -739,1 +738,1 @@\n-            int[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            int[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -742,1 +741,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -744,1 +743,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -746,1 +745,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(r, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(r, i, i + SPECIES.length()))\n@@ -761,1 +760,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -766,1 +765,1 @@\n-            int[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            int[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -781,1 +780,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -786,1 +785,1 @@\n-            int[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            int[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -802,1 +801,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -807,1 +806,1 @@\n-            int[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            int[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -823,1 +822,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -828,1 +827,1 @@\n-            int[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            int[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -845,1 +844,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -850,1 +849,1 @@\n-            int[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            int[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -864,1 +863,1 @@\n-                Assert.assertEquals(r[i], (int)(a[i+offs]));\n+                Assert.assertEquals(r[i], (int) (a[i + offs]));\n@@ -867,1 +866,1 @@\n-            Assert.assertEquals(r[i], (int)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (int) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -877,1 +876,1 @@\n-                Assert.assertEquals(r[i], (long)(a[i+offs]));\n+                Assert.assertEquals(r[i], (long) (a[i + offs]));\n@@ -880,1 +879,1 @@\n-            Assert.assertEquals(r[i], (long)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (long) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -888,1 +887,1 @@\n-                Assert.assertEquals(r[i], (double)(a[i+offs]));\n+                Assert.assertEquals(r[i], (double) (a[i + offs]));\n@@ -891,1 +890,1 @@\n-            Assert.assertEquals(r[i], (double)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (double) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -895,1 +894,0 @@\n-\n@@ -903,1 +901,1 @@\n-                            i -> (int)(-i * 5));\n+                            i -> (int) (-i * 5));\n@@ -907,1 +905,1 @@\n-                            i -> (int)(i * 5));\n+                            i -> (int) (i * 5));\n@@ -911,1 +909,1 @@\n-                            i -> (((int)(i + 1) == 0) ? 1 : (int)(i + 1)));\n+                            i -> (((int) (i + 1) == 0) ? 1 : (int) (i + 1)));\n@@ -1041,1 +1039,1 @@\n-                            i -> (int)i);\n+                            i -> (int) i);\n@@ -1045,1 +1043,1 @@\n-                            i -> (int)(i - (s * BUFFER_REPS \/ 2)));\n+                            i -> (int) (i - (s * BUFFER_REPS \/ 2)));\n@@ -1049,1 +1047,1 @@\n-                            i -> (int)(i + 1));\n+                            i -> (int) (i + 1));\n@@ -1053,1 +1051,1 @@\n-                            i -> (int)(i - 2));\n+                            i -> (int) (i - 2));\n@@ -1057,1 +1055,1 @@\n-                            i -> i%3 == 0 ? (int)i : (i%3 == 1 ? (int)(i + 1) : (int)(i - 2)));\n+                            i -> i % 3 == 0 ? (int) i : (i % 3 == 1 ? (int) (i + 1) : (int) (i - 2)));\n@@ -1131,1 +1129,1 @@\n-                return (int)0;\n+                return (int) 0;\n@@ -1171,1 +1169,1 @@\n-        return Integer.rotateLeft(a, ((int)b));\n+        return Integer.rotateLeft(a, ((int) b));\n@@ -1175,1 +1173,1 @@\n-        return Integer.rotateRight(a, ((int)b));\n+        return Integer.rotateRight(a, ((int) b));\n@@ -1190,1 +1188,0 @@\n-\n@@ -1237,1 +1234,1 @@\n-        IntVector three = IntVector.broadcast(SPECIES, (byte)-3);\n+        IntVector three = IntVector.broadcast(SPECIES, (byte) -3);\n@@ -1251,1 +1248,1 @@\n-        m = higher.min((int)-1).test(VectorOperators.IS_NEGATIVE);\n+        m = higher.min((int) -1).test(VectorOperators.IS_NEGATIVE);\n@@ -1254,1 +1251,1 @@\n-        assert(max == -3 + scale * (SPECIES.length()-1));\n+        assert(max == -3 + scale * (SPECIES.length() - 1));\n@@ -1269,1 +1266,1 @@\n-        IntVector io2 = (IntVector) VectorShuffle.iota(SPECIES,0,1,false).toVector();\n+        IntVector io2 = (IntVector) VectorShuffle.iota(SPECIES, 0, 1, false).toVector();\n@@ -1271,1 +1268,1 @@\n-        IntVector a = io.add((int)1); \/\/[1,2]\n+        IntVector a = io.add((int) 1); \/\/[1,2]\n@@ -1276,2 +1273,2 @@\n-        IntVector zab0 = a.rearrange(zip0,b); \/\/[1,-1]\n-        IntVector zab1 = a.rearrange(zip1,b); \/\/[2,-2]\n+        IntVector zab0 = a.rearrange(zip0, b); \/\/[1,-1]\n+        IntVector zab1 = a.rearrange(zip1, b); \/\/[2,-2]\n@@ -1282,2 +1279,2 @@\n-            manual[i+0] = abValues[i\/2];\n-            manual[i+1] = abValues[a.length() + i\/2];\n+            manual[i + 0] = abValues[i \/ 2];\n+            manual[i + 1] = abValues[a.length() + i \/ 2];\n@@ -1288,2 +1285,2 @@\n-        IntVector uab0 = zab0.rearrange(unz0,zab1);\n-        IntVector uab1 = zab0.rearrange(unz1,zab1);\n+        IntVector uab0 = zab0.rearrange(unz0, zab1);\n+        IntVector uab1 = zab0.rearrange(unz1, zab1);\n@@ -1346,1 +1343,1 @@\n-        return (int)(a + b);\n+        return (int) (a + b);\n@@ -1366,1 +1363,1 @@\n-        return (int)(a + b);\n+        return (int) (a + b);\n@@ -1422,1 +1419,1 @@\n-        return (int)(a - b);\n+        return (int) (a - b);\n@@ -1442,1 +1439,1 @@\n-        return (int)(a - b);\n+        return (int) (a - b);\n@@ -1498,1 +1495,1 @@\n-        return (int)(a * b);\n+        return (int) (a * b);\n@@ -1518,1 +1515,1 @@\n-        return (int)(a * b);\n+        return (int) (a * b);\n@@ -1577,1 +1574,1 @@\n-        return (int)(a \/ b);\n+        return (int) (a \/ b);\n@@ -1599,1 +1596,1 @@\n-        return (int)(a \/ b);\n+        return (int) (a \/ b);\n@@ -1668,1 +1665,1 @@\n-        return (int)((a)!=0?a:b);\n+        return (int) ((a) != 0 ? a : b);\n@@ -1709,1 +1706,1 @@\n-        return (int)(a & b);\n+        return (int) (a & b);\n@@ -1729,1 +1726,1 @@\n-        return (int)(a & b);\n+        return (int) (a & b);\n@@ -1771,1 +1768,1 @@\n-        return (int)(a & ~b);\n+        return (int) (a & ~b);\n@@ -1815,1 +1812,1 @@\n-        return (int)(a | b);\n+        return (int) (a | b);\n@@ -1835,1 +1832,1 @@\n-        return (int)(a | b);\n+        return (int) (a | b);\n@@ -1877,1 +1874,1 @@\n-        return (int)(a ^ b);\n+        return (int) (a ^ b);\n@@ -2161,1 +2158,1 @@\n-            av.lanewise(VectorOperators.OR, (long)b[i]).intoArray(r, i);\n+            av.lanewise(VectorOperators.OR, (long) b[i]).intoArray(r, i);\n@@ -2180,1 +2177,1 @@\n-            av.lanewise(VectorOperators.OR, (long)b[i], vmask).intoArray(r, i);\n+            av.lanewise(VectorOperators.OR, (long) b[i], vmask).intoArray(r, i);\n@@ -2195,1 +2192,1 @@\n-            av.lanewise(VectorOperators.ADD, (long)b[i]).intoArray(r, i);\n+            av.lanewise(VectorOperators.ADD, (long) b[i]).intoArray(r, i);\n@@ -2212,1 +2209,1 @@\n-            av.lanewise(VectorOperators.ADD, (long)b[i], vmask).intoArray(r, i);\n+            av.lanewise(VectorOperators.ADD, (long) b[i], vmask).intoArray(r, i);\n@@ -2219,1 +2216,1 @@\n-        return (int)((a << b));\n+        return (int) ((a << b));\n@@ -2267,1 +2264,1 @@\n-        return (int)((a >> b));\n+        return (int) ((a >> b));\n@@ -2315,1 +2312,1 @@\n-        return (int)((a >>> b));\n+        return (int) ((a >>> b));\n@@ -2363,1 +2360,1 @@\n-        return (int)((a << b));\n+        return (int) ((a << b));\n@@ -2375,1 +2372,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i]).intoArray(r, i);\n@@ -2396,1 +2393,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i], vmask).intoArray(r, i);\n@@ -2409,1 +2406,1 @@\n-        return (int)((a >>> b));\n+        return (int) ((a >>> b));\n@@ -2421,1 +2418,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i]).intoArray(r, i);\n@@ -2442,1 +2439,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i], vmask).intoArray(r, i);\n@@ -2455,1 +2452,1 @@\n-        return (int)((a >> b));\n+        return (int) ((a >> b));\n@@ -2467,1 +2464,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i]).intoArray(r, i);\n@@ -2488,1 +2485,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i], vmask).intoArray(r, i);\n@@ -2501,1 +2498,1 @@\n-        return (int)(ROR_scalar(a,b));\n+        return (int) (ROR_scalar(a, b));\n@@ -2545,1 +2542,1 @@\n-        return (int)(ROL_scalar(a,b));\n+        return (int) (ROL_scalar(a, b));\n@@ -2589,1 +2586,1 @@\n-        return (int)(ROR_scalar(a,b));\n+        return (int) (ROR_scalar(a, b));\n@@ -2601,1 +2598,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i]).intoArray(r, i);\n@@ -2622,1 +2619,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i], vmask).intoArray(r, i);\n@@ -2631,1 +2628,1 @@\n-        return (int)(ROL_scalar(a,b));\n+        return (int) (ROL_scalar(a, b));\n@@ -2643,1 +2640,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i]).intoArray(r, i);\n@@ -2664,1 +2661,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i], vmask).intoArray(r, i);\n@@ -2672,1 +2669,1 @@\n-        return (int)(Math.min(a, b));\n+        return (int) (Math.min(a, b));\n@@ -2692,1 +2689,1 @@\n-        return (int)(Math.min(a, b));\n+        return (int) (Math.min(a, b));\n@@ -2710,1 +2707,1 @@\n-        return (int)(Math.max(a, b));\n+        return (int) (Math.max(a, b));\n@@ -2730,1 +2727,1 @@\n-        return (int)(Math.max(a, b));\n+        return (int) (Math.max(a, b));\n@@ -3568,1 +3565,1 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (int)(65535+i)).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length() - 1)), (int) (65535 + i)).intoArray(r, i);\n@@ -3574,1 +3571,1 @@\n-            assertInsertArraysEquals(r, a, (int)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+            assertInsertArraysEquals(r, a, (int) (65535 + i), (j++ & (SPECIES.length() - 1)), i , i + SPECIES.length());\n@@ -3578,1 +3575,1 @@\n-        return bits(a)==0;\n+        return bits(a) == 0;\n@@ -3611,1 +3608,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_DEFAULT(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_DEFAULT(a[i + j]));\n@@ -3616,1 +3613,1 @@\n-        return bits(a)<0;\n+        return bits(a) < 0;\n@@ -3649,1 +3646,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_NEGATIVE(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_NEGATIVE(a[i + j]));\n@@ -4159,1 +4156,0 @@\n-\n@@ -4187,1 +4183,1 @@\n-            VectorMask<Integer> mv = av.compare(VectorOperators.LT, (long)b[i]);\n+            VectorMask<Integer> mv = av.compare(VectorOperators.LT, (long) b[i]);\n@@ -4191,1 +4187,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), a[i + j] < (int)((long)b[i]));\n+                Assert.assertEquals(mv.laneIsSet(j), a[i + j] < (int) ((long) b[i]));\n@@ -4196,1 +4192,0 @@\n-\n@@ -4208,1 +4203,1 @@\n-            VectorMask<Integer> mv = av.compare(VectorOperators.LT, (long)b[i], vmask);\n+            VectorMask<Integer> mv = av.compare(VectorOperators.LT, (long) b[i], vmask);\n@@ -4212,1 +4207,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] < (int)((long)b[i])));\n+                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] < (int) ((long) b[i])));\n@@ -4233,1 +4228,0 @@\n-\n@@ -4261,1 +4255,1 @@\n-            VectorMask<Integer> mv = av.compare(VectorOperators.EQ, (long)b[i]);\n+            VectorMask<Integer> mv = av.compare(VectorOperators.EQ, (long) b[i]);\n@@ -4265,1 +4259,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), a[i + j] == (int)((long)b[i]));\n+                Assert.assertEquals(mv.laneIsSet(j), a[i + j] == (int) ((long) b[i]));\n@@ -4270,1 +4264,0 @@\n-\n@@ -4282,1 +4275,1 @@\n-            VectorMask<Integer> mv = av.compare(VectorOperators.EQ, (long)b[i], vmask);\n+            VectorMask<Integer> mv = av.compare(VectorOperators.EQ, (long) b[i], vmask);\n@@ -4286,1 +4279,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] == (int)((long)b[i])));\n+                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] == (int) ((long) b[i])));\n@@ -4397,1 +4390,1 @@\n-                    r[i]=av.lane(0);\n+                    r[i] = av.lane(0);\n@@ -4399,2 +4392,2 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n@@ -4402,4 +4395,4 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n@@ -4407,8 +4400,8 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n@@ -4416,16 +4409,16 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n@@ -4433,32 +4426,32 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n@@ -4466,64 +4459,64 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n-                    r[i+32]=av.lane(32);\n-                    r[i+33]=av.lane(33);\n-                    r[i+34]=av.lane(34);\n-                    r[i+35]=av.lane(35);\n-                    r[i+36]=av.lane(36);\n-                    r[i+37]=av.lane(37);\n-                    r[i+38]=av.lane(38);\n-                    r[i+39]=av.lane(39);\n-                    r[i+40]=av.lane(40);\n-                    r[i+41]=av.lane(41);\n-                    r[i+42]=av.lane(42);\n-                    r[i+43]=av.lane(43);\n-                    r[i+44]=av.lane(44);\n-                    r[i+45]=av.lane(45);\n-                    r[i+46]=av.lane(46);\n-                    r[i+47]=av.lane(47);\n-                    r[i+48]=av.lane(48);\n-                    r[i+49]=av.lane(49);\n-                    r[i+50]=av.lane(50);\n-                    r[i+51]=av.lane(51);\n-                    r[i+52]=av.lane(52);\n-                    r[i+53]=av.lane(53);\n-                    r[i+54]=av.lane(54);\n-                    r[i+55]=av.lane(55);\n-                    r[i+56]=av.lane(56);\n-                    r[i+57]=av.lane(57);\n-                    r[i+58]=av.lane(58);\n-                    r[i+59]=av.lane(59);\n-                    r[i+60]=av.lane(60);\n-                    r[i+61]=av.lane(61);\n-                    r[i+62]=av.lane(62);\n-                    r[i+63]=av.lane(63);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n+                    r[i + 32] = av.lane(32);\n+                    r[i + 33] = av.lane(33);\n+                    r[i + 34] = av.lane(34);\n+                    r[i + 35] = av.lane(35);\n+                    r[i + 36] = av.lane(36);\n+                    r[i + 37] = av.lane(37);\n+                    r[i + 38] = av.lane(38);\n+                    r[i + 39] = av.lane(39);\n+                    r[i + 40] = av.lane(40);\n+                    r[i + 41] = av.lane(41);\n+                    r[i + 42] = av.lane(42);\n+                    r[i + 43] = av.lane(43);\n+                    r[i + 44] = av.lane(44);\n+                    r[i + 45] = av.lane(45);\n+                    r[i + 46] = av.lane(46);\n+                    r[i + 47] = av.lane(47);\n+                    r[i + 48] = av.lane(48);\n+                    r[i + 49] = av.lane(49);\n+                    r[i + 50] = av.lane(50);\n+                    r[i + 51] = av.lane(51);\n+                    r[i + 52] = av.lane(52);\n+                    r[i + 53] = av.lane(53);\n+                    r[i + 54] = av.lane(54);\n+                    r[i + 55] = av.lane(55);\n+                    r[i + 56] = av.lane(56);\n+                    r[i + 57] = av.lane(57);\n+                    r[i + 58] = av.lane(58);\n+                    r[i + 59] = av.lane(59);\n+                    r[i + 60] = av.lane(60);\n+                    r[i + 61] = av.lane(61);\n+                    r[i + 62] = av.lane(62);\n+                    r[i + 63] = av.lane(63);\n@@ -4532,1 +4525,1 @@\n-                        r[i+j]=av.lane(j);\n+                        r[i + j] = av.lane(j);\n@@ -4573,3 +4566,0 @@\n-\n-\n-\n@@ -4579,2 +4569,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = a[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = a[idx + i + origin];\n@@ -4582,1 +4572,1 @@\n-                res[i] = (int)0;\n+                res[i] = (int) 0;\n@@ -4605,1 +4595,1 @@\n-                res[i] = a[idx+i+origin];\n+                res[i] = a[idx + i + origin];\n@@ -4607,1 +4597,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n@@ -4633,2 +4623,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = mask[i] ? a[idx+i+origin] : (int)0;\n+            if(i + origin < SPECIES.length())\n+                res[i] = mask[i] ? a[idx + i + origin] : (int) 0;\n@@ -4636,1 +4626,1 @@\n-                res[i] = mask[i] ? b[idx+j] : (int)0;\n+                res[i] = mask[i] ? b[idx + j] : (int) 0;\n@@ -4667,1 +4657,1 @@\n-                res[i] = (int)0;\n+                res[i] = (int) 0;\n@@ -4669,1 +4659,1 @@\n-                res[i] = a[idx+j];\n+                res[i] = a[idx + j];\n@@ -4695,1 +4685,1 @@\n-                    res[i] = b[idx+i];\n+                    res[i] = b[idx + i];\n@@ -4697,1 +4687,1 @@\n-                    res[i] = a[idx+j];\n+                    res[i] = a[idx + j];\n@@ -4702,1 +4692,1 @@\n-                    res[i] = a[idx+SPECIES.length()-origin+i];\n+                    res[i] = a[idx + SPECIES.length() - origin + i];\n@@ -4704,1 +4694,1 @@\n-                    res[i] = b[idx+origin+j];\n+                    res[i] = b[idx + origin + j];\n@@ -4732,2 +4722,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = b[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = b[idx + i + origin];\n@@ -4735,1 +4725,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n@@ -4740,1 +4730,1 @@\n-            res[i] = mask[i] ? a[idx+i] : res[i];\n+            res[i] = mask[i] ? a[idx + i] : res[i];\n@@ -4746,1 +4736,1 @@\n-                    res1[i] = b[idx+i];\n+                    res1[i] = b[idx + i];\n@@ -4748,2 +4738,2 @@\n-                   res1[i] = res[j];\n-                   j++;\n+                    res1[i] = res[j];\n+                    j++;\n@@ -4755,1 +4745,1 @@\n-                    res1[i] = res[SPECIES.length()-origin+i];\n+                    res1[i] = res[SPECIES.length() - origin + i];\n@@ -4757,1 +4747,1 @@\n-                    res1[i] = b[idx+origin+j];\n+                    res1[i] = b[idx + origin + j];\n@@ -4809,1 +4799,1 @@\n-        return (int)((a&~(c))|(b&c));\n+        return (int) ((a &~ (c)) | (b & c));\n@@ -4812,1 +4802,1 @@\n-        return (int)((a&~(c))|(b&c));\n+        return (int) ((a &~ (c)) | (b & c));\n@@ -5028,1 +5018,1 @@\n-        return (int)(-((int)a));\n+        return (int) (-((int) a));\n@@ -5032,1 +5022,1 @@\n-        return (int)(-((int)a));\n+        return (int) (-((int) a));\n@@ -5084,1 +5074,1 @@\n-        return (int)(Math.abs((int)a));\n+        return (int) (Math.abs((int) a));\n@@ -5088,1 +5078,1 @@\n-        return (int)(Math.abs((int)a));\n+        return (int) (Math.abs((int) a));\n@@ -5141,1 +5131,1 @@\n-        return (int)(~((int)a));\n+        return (int) (~((int) a));\n@@ -5145,1 +5135,1 @@\n-        return (int)(~((int)a));\n+        return (int) (~((int) a));\n@@ -5203,1 +5193,1 @@\n-        return (int)((a==0?0:-1));\n+        return (int) ((a == 0 ? 0 : -1));\n@@ -5249,1 +5239,1 @@\n-        return (int)(Integer.bitCount(a));\n+        return (int) (Integer.bitCount(a));\n@@ -5298,1 +5288,1 @@\n-        return (int)(TRAILING_ZEROS_COUNT_scalar(a));\n+        return (int) (TRAILING_ZEROS_COUNT_scalar(a));\n@@ -5341,1 +5331,1 @@\n-        return (int)(LEADING_ZEROS_COUNT_scalar(a));\n+        return (int) (LEADING_ZEROS_COUNT_scalar(a));\n@@ -5384,1 +5374,1 @@\n-        return (int)(REVERSE_scalar(a));\n+        return (int) (REVERSE_scalar(a));\n@@ -5524,1 +5514,1 @@\n-        return (long)res;\n+        return (long) res;\n@@ -5563,1 +5553,1 @@\n-        return (long)res;\n+        return (long) res;\n@@ -5620,1 +5610,1 @@\n-                av.blend((long)b[i], vmask).intoArray(r, i);\n+                av.blend((long) b[i], vmask).intoArray(r, i);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/IntMaxVectorTests.java","additions":302,"deletions":312,"binary":false,"changes":614,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,1 +74,1 @@\n-                Assert.assertEquals(r[i], mask[(i*8\/SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0);\n+                Assert.assertEquals(r[i], mask[(i * 8 \/ SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0);\n@@ -77,1 +77,1 @@\n-            Assert.assertEquals(r[i], mask[(i*8\/SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0, \"at index #\" + i);\n+            Assert.assertEquals(r[i], mask[(i * 8 \/ SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0, \"at index #\" + i);\n@@ -84,1 +84,1 @@\n-                            i -> (long)(i * 5));\n+                            i -> (long) (i * 5));\n@@ -88,1 +88,1 @@\n-                            i -> (((long)(i + 1) == 0) ? 1 : (long)(i + 1)));\n+                            i -> (((long) (i + 1) == 0) ? 1 : (long) (i + 1)));\n@@ -195,1 +195,1 @@\n-                            return new Object[]{fa, fb, bo};\n+                            return new Object[] {fa, fb, bo};\n@@ -206,1 +206,1 @@\n-                            return new Object[]{fa, fb, fm, bo};\n+                            return new Object[] {fa, fb, fm, bo};\n@@ -215,1 +215,1 @@\n-                    return new Object[]{fa, bo};\n+                    return new Object[] {fa, bo};\n@@ -225,1 +225,1 @@\n-                        return new Object[]{fa, fm, bo};\n+                        return new Object[] {fa, fm, bo};\n@@ -944,2 +944,0 @@\n-\n-\n@@ -1095,1 +1093,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long128VectorLoadStoreTests.java","additions":9,"deletions":12,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -93,1 +93,1 @@\n-            long[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            long[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -210,1 +210,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i+order[i + j]]);\n@@ -215,1 +215,1 @@\n-            Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i+order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]]);\n@@ -231,1 +231,1 @@\n-                    Assert.assertEquals(r[i + k], (long)0);\n+                    Assert.assertEquals(r[i + k], (long) 0);\n@@ -239,1 +239,1 @@\n-                Assert.assertEquals(r[idx], (long)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], (long) 0, \"at index #\" + idx);\n@@ -254,1 +254,1 @@\n-                        Assert.assertEquals(r[i + j], (long)0);\n+                        Assert.assertEquals(r[i + j], (long) 0);\n@@ -263,1 +263,1 @@\n-                Assert.assertEquals(r[idx], (long)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], (long) 0, \"at index #\" + idx);\n@@ -273,1 +273,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -278,1 +278,1 @@\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]]);\n@@ -288,1 +288,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + order[i + j]]);\n@@ -290,1 +290,1 @@\n-                         Assert.assertEquals(r[i+j], (long)0);\n+                         Assert.assertEquals(r[i + j], (long) 0);\n@@ -296,1 +296,1 @@\n-                Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -298,1 +298,1 @@\n-                Assert.assertEquals(r[i+j], (long)0, \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], (long) 0, \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -308,1 +308,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -310,1 +310,1 @@\n-                         Assert.assertEquals(r[i+j], (long)0);\n+                         Assert.assertEquals(r[i + j], (long) 0);\n@@ -316,1 +316,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -318,1 +318,1 @@\n-                Assert.assertEquals(r[i+j], (long)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], (long) 0, \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -327,1 +327,1 @@\n-                a[j]=a[idx];\n+                a[j] = a[idx];\n@@ -378,1 +378,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], (long)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])));\n+                Assert.assertEquals(r[i], f.apply(a[i], (long) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])));\n@@ -381,1 +381,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], (long)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])),\n+            Assert.assertEquals(r[i], f.apply(a[i], (long) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])),\n@@ -427,1 +427,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], (long)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n+                Assert.assertEquals(r[i], f.apply(a[i], (long) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n@@ -430,1 +430,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], (long)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]),\n+            Assert.assertEquals(r[i], f.apply(a[i], (long) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]),\n@@ -443,1 +443,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]));\n@@ -447,1 +447,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]), \"at index #\" + i + \", \" + j);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]), \"at index #\" + i + \", \" + j);\n@@ -461,1 +461,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]));\n@@ -465,1 +465,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i+j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i + j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n@@ -614,1 +614,0 @@\n-\n@@ -638,1 +637,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -643,1 +642,1 @@\n-            long[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            long[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -646,1 +645,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -648,1 +647,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -665,1 +664,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -670,1 +669,1 @@\n-            long[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            long[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -673,1 +672,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -675,1 +674,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -686,1 +685,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -691,1 +690,1 @@\n-            long[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            long[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -694,1 +693,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -696,1 +695,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -698,1 +697,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(r, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(r, i, i + SPECIES.length()))\n@@ -713,1 +712,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -718,1 +717,1 @@\n-            long[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            long[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -733,1 +732,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -738,1 +737,1 @@\n-            long[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            long[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -754,1 +753,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -759,1 +758,1 @@\n-            long[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            long[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -775,1 +774,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -780,1 +779,1 @@\n-            long[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            long[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -797,1 +796,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -802,1 +801,1 @@\n-            long[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            long[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -822,1 +821,1 @@\n-                return (int)0;\n+                return (int) 0;\n@@ -829,1 +828,1 @@\n-                            i -> (long)(-i * 5));\n+                            i -> (long) (-i * 5));\n@@ -833,1 +832,1 @@\n-                            i -> (long)(i * 5));\n+                            i -> (long) (i * 5));\n@@ -837,1 +836,1 @@\n-                            i -> (((long)(i + 1) == 0) ? 1 : (long)(i + 1)));\n+                            i -> (((long) (i + 1) == 0) ? 1 : (long) (i + 1)));\n@@ -841,1 +840,1 @@\n-                            i -> (long)intCornerCaseValue(i));\n+                            i -> (long) intCornerCaseValue(i));\n@@ -849,1 +848,1 @@\n-                Assert.assertEquals(r[i], (int)(a[i+offs]));\n+                Assert.assertEquals(r[i], (int) (a[i + offs]));\n@@ -852,1 +851,1 @@\n-            Assert.assertEquals(r[i], (int)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (int) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -862,1 +861,1 @@\n-                Assert.assertEquals(r[i], (long)(a[i+offs]));\n+                Assert.assertEquals(r[i], (long) (a[i + offs]));\n@@ -865,1 +864,1 @@\n-            Assert.assertEquals(r[i], (long)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (long) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -873,1 +872,1 @@\n-                Assert.assertEquals(r[i], (double)(a[i+offs]));\n+                Assert.assertEquals(r[i], (double) (a[i + offs]));\n@@ -876,1 +875,1 @@\n-            Assert.assertEquals(r[i], (double)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (double) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -880,1 +879,0 @@\n-\n@@ -888,1 +886,1 @@\n-                            i -> (long)(-i * 5));\n+                            i -> (long) (-i * 5));\n@@ -892,1 +890,1 @@\n-                            i -> (long)(i * 5));\n+                            i -> (long) (i * 5));\n@@ -896,1 +894,1 @@\n-                            i -> (((long)(i + 1) == 0) ? 1 : (long)(i + 1)));\n+                            i -> (((long) (i + 1) == 0) ? 1 : (long) (i + 1)));\n@@ -1033,1 +1031,1 @@\n-                    a[i] = (long)RAND.nextInt(upper);\n+                    a[i] = (long) RAND.nextInt(upper);\n@@ -1058,1 +1056,0 @@\n-\n@@ -1062,1 +1059,1 @@\n-                            i -> (long)i);\n+                            i -> (long) i);\n@@ -1066,1 +1063,1 @@\n-                            i -> (long)(i - (s * BUFFER_REPS \/ 2)));\n+                            i -> (long) (i - (s * BUFFER_REPS \/ 2)));\n@@ -1070,1 +1067,1 @@\n-                            i -> (long)(i + 1));\n+                            i -> (long) (i + 1));\n@@ -1074,1 +1071,1 @@\n-                            i -> (long)(i - 2));\n+                            i -> (long) (i - 2));\n@@ -1078,1 +1075,1 @@\n-                            i -> i%3 == 0 ? (long)i : (i%3 == 1 ? (long)(i + 1) : (long)(i - 2)));\n+                            i -> i % 3 == 0 ? (long) i : (i % 3 == 1 ? (long) (i + 1) : (long) (i - 2)));\n@@ -1152,1 +1149,1 @@\n-                return (long)0;\n+                return (long) 0;\n@@ -1188,1 +1185,1 @@\n-        return Long.rotateLeft(a, ((int)b));\n+        return Long.rotateLeft(a, ((int) b));\n@@ -1192,1 +1189,1 @@\n-        return Long.rotateRight(a, ((int)b));\n+        return Long.rotateRight(a, ((int) b));\n@@ -1207,1 +1204,0 @@\n-\n@@ -1254,1 +1250,1 @@\n-        LongVector three = LongVector.broadcast(SPECIES, (byte)-3);\n+        LongVector three = LongVector.broadcast(SPECIES, (byte) -3);\n@@ -1268,1 +1264,1 @@\n-        m = higher.min((long)-1).test(VectorOperators.IS_NEGATIVE);\n+        m = higher.min((long) -1).test(VectorOperators.IS_NEGATIVE);\n@@ -1271,1 +1267,1 @@\n-        assert(max == -3 + scale * (SPECIES.length()-1));\n+        assert(max == -3 + scale * (SPECIES.length() - 1));\n@@ -1286,1 +1282,1 @@\n-        LongVector io2 = (LongVector) VectorShuffle.iota(SPECIES,0,1,false).toVector();\n+        LongVector io2 = (LongVector) VectorShuffle.iota(SPECIES, 0, 1, false).toVector();\n@@ -1288,1 +1284,1 @@\n-        LongVector a = io.add((long)1); \/\/[1,2]\n+        LongVector a = io.add((long) 1); \/\/[1,2]\n@@ -1293,2 +1289,2 @@\n-        LongVector zab0 = a.rearrange(zip0,b); \/\/[1,-1]\n-        LongVector zab1 = a.rearrange(zip1,b); \/\/[2,-2]\n+        LongVector zab0 = a.rearrange(zip0, b); \/\/[1,-1]\n+        LongVector zab1 = a.rearrange(zip1, b); \/\/[2,-2]\n@@ -1299,2 +1295,2 @@\n-            manual[i+0] = abValues[i\/2];\n-            manual[i+1] = abValues[a.length() + i\/2];\n+            manual[i + 0] = abValues[i \/ 2];\n+            manual[i + 1] = abValues[a.length() + i \/ 2];\n@@ -1305,2 +1301,2 @@\n-        LongVector uab0 = zab0.rearrange(unz0,zab1);\n-        LongVector uab1 = zab0.rearrange(unz1,zab1);\n+        LongVector uab0 = zab0.rearrange(unz0, zab1);\n+        LongVector uab1 = zab0.rearrange(unz1, zab1);\n@@ -1363,1 +1359,1 @@\n-        return (long)(a + b);\n+        return (long) (a + b);\n@@ -1383,1 +1379,1 @@\n-        return (long)(a + b);\n+        return (long) (a + b);\n@@ -1439,1 +1435,1 @@\n-        return (long)(a - b);\n+        return (long) (a - b);\n@@ -1459,1 +1455,1 @@\n-        return (long)(a - b);\n+        return (long) (a - b);\n@@ -1515,1 +1511,1 @@\n-        return (long)(a * b);\n+        return (long) (a * b);\n@@ -1535,1 +1531,1 @@\n-        return (long)(a * b);\n+        return (long) (a * b);\n@@ -1594,1 +1590,1 @@\n-        return (long)(a \/ b);\n+        return (long) (a \/ b);\n@@ -1616,1 +1612,1 @@\n-        return (long)(a \/ b);\n+        return (long) (a \/ b);\n@@ -1685,1 +1681,1 @@\n-        return (long)((a)!=0?a:b);\n+        return (long) ((a) != 0 ? a : b);\n@@ -1726,1 +1722,1 @@\n-        return (long)(a & b);\n+        return (long) (a & b);\n@@ -1746,1 +1742,1 @@\n-        return (long)(a & b);\n+        return (long) (a & b);\n@@ -1788,1 +1784,1 @@\n-        return (long)(a & ~b);\n+        return (long) (a & ~b);\n@@ -1832,1 +1828,1 @@\n-        return (long)(a | b);\n+        return (long) (a | b);\n@@ -1852,1 +1848,1 @@\n-        return (long)(a | b);\n+        return (long) (a | b);\n@@ -1894,1 +1890,1 @@\n-        return (long)(a ^ b);\n+        return (long) (a ^ b);\n@@ -2178,1 +2174,1 @@\n-            av.lanewise(VectorOperators.OR, (long)b[i]).intoArray(r, i);\n+            av.lanewise(VectorOperators.OR, (long) b[i]).intoArray(r, i);\n@@ -2197,1 +2193,1 @@\n-            av.lanewise(VectorOperators.OR, (long)b[i], vmask).intoArray(r, i);\n+            av.lanewise(VectorOperators.OR, (long) b[i], vmask).intoArray(r, i);\n@@ -2212,1 +2208,1 @@\n-            av.lanewise(VectorOperators.ADD, (long)b[i]).intoArray(r, i);\n+            av.lanewise(VectorOperators.ADD, (long) b[i]).intoArray(r, i);\n@@ -2229,1 +2225,1 @@\n-            av.lanewise(VectorOperators.ADD, (long)b[i], vmask).intoArray(r, i);\n+            av.lanewise(VectorOperators.ADD, (long) b[i], vmask).intoArray(r, i);\n@@ -2236,1 +2232,1 @@\n-        return (long)((a << b));\n+        return (long) ((a << b));\n@@ -2284,1 +2280,1 @@\n-        return (long)((a >> b));\n+        return (long) ((a >> b));\n@@ -2332,1 +2328,1 @@\n-        return (long)((a >>> b));\n+        return (long) ((a >>> b));\n@@ -2380,1 +2376,1 @@\n-        return (long)((a << b));\n+        return (long) ((a << b));\n@@ -2392,1 +2388,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i]).intoArray(r, i);\n@@ -2413,1 +2409,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i], vmask).intoArray(r, i);\n@@ -2426,1 +2422,1 @@\n-        return (long)((a >>> b));\n+        return (long) ((a >>> b));\n@@ -2438,1 +2434,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i]).intoArray(r, i);\n@@ -2459,1 +2455,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i], vmask).intoArray(r, i);\n@@ -2472,1 +2468,1 @@\n-        return (long)((a >> b));\n+        return (long) ((a >> b));\n@@ -2484,1 +2480,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i]).intoArray(r, i);\n@@ -2505,1 +2501,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i], vmask).intoArray(r, i);\n@@ -2518,1 +2514,1 @@\n-        return (long)(ROR_scalar(a,b));\n+        return (long) (ROR_scalar(a, b));\n@@ -2562,1 +2558,1 @@\n-        return (long)(ROL_scalar(a,b));\n+        return (long) (ROL_scalar(a, b));\n@@ -2606,1 +2602,1 @@\n-        return (long)(ROR_scalar(a,b));\n+        return (long) (ROR_scalar(a, b));\n@@ -2618,1 +2614,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i]).intoArray(r, i);\n@@ -2639,1 +2635,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i], vmask).intoArray(r, i);\n@@ -2648,1 +2644,1 @@\n-        return (long)(ROL_scalar(a,b));\n+        return (long) (ROL_scalar(a, b));\n@@ -2660,1 +2656,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i]).intoArray(r, i);\n@@ -2681,1 +2677,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i], vmask).intoArray(r, i);\n@@ -2689,1 +2685,1 @@\n-        return (long)(Math.min(a, b));\n+        return (long) (Math.min(a, b));\n@@ -2709,1 +2705,1 @@\n-        return (long)(Math.min(a, b));\n+        return (long) (Math.min(a, b));\n@@ -2727,1 +2723,1 @@\n-        return (long)(Math.max(a, b));\n+        return (long) (Math.max(a, b));\n@@ -2747,1 +2743,1 @@\n-        return (long)(Math.max(a, b));\n+        return (long) (Math.max(a, b));\n@@ -3585,1 +3581,1 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (long)(65535+i)).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length() - 1)), (long) (65535 + i)).intoArray(r, i);\n@@ -3591,1 +3587,1 @@\n-            assertInsertArraysEquals(r, a, (long)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+            assertInsertArraysEquals(r, a, (long) (65535 + i), (j++ & (SPECIES.length() - 1)), i , i + SPECIES.length());\n@@ -3595,1 +3591,1 @@\n-        return bits(a)==0;\n+        return bits(a) == 0;\n@@ -3628,1 +3624,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_DEFAULT(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_DEFAULT(a[i + j]));\n@@ -3633,1 +3629,1 @@\n-        return bits(a)<0;\n+        return bits(a) < 0;\n@@ -3666,1 +3662,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_NEGATIVE(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_NEGATIVE(a[i + j]));\n@@ -4176,1 +4172,0 @@\n-\n@@ -4214,1 +4209,0 @@\n-\n@@ -4342,1 +4336,1 @@\n-                    r[i]=av.lane(0);\n+                    r[i] = av.lane(0);\n@@ -4344,2 +4338,2 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n@@ -4347,4 +4341,4 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n@@ -4352,8 +4346,8 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n@@ -4361,16 +4355,16 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n@@ -4378,32 +4372,32 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n@@ -4411,64 +4405,64 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n-                    r[i+32]=av.lane(32);\n-                    r[i+33]=av.lane(33);\n-                    r[i+34]=av.lane(34);\n-                    r[i+35]=av.lane(35);\n-                    r[i+36]=av.lane(36);\n-                    r[i+37]=av.lane(37);\n-                    r[i+38]=av.lane(38);\n-                    r[i+39]=av.lane(39);\n-                    r[i+40]=av.lane(40);\n-                    r[i+41]=av.lane(41);\n-                    r[i+42]=av.lane(42);\n-                    r[i+43]=av.lane(43);\n-                    r[i+44]=av.lane(44);\n-                    r[i+45]=av.lane(45);\n-                    r[i+46]=av.lane(46);\n-                    r[i+47]=av.lane(47);\n-                    r[i+48]=av.lane(48);\n-                    r[i+49]=av.lane(49);\n-                    r[i+50]=av.lane(50);\n-                    r[i+51]=av.lane(51);\n-                    r[i+52]=av.lane(52);\n-                    r[i+53]=av.lane(53);\n-                    r[i+54]=av.lane(54);\n-                    r[i+55]=av.lane(55);\n-                    r[i+56]=av.lane(56);\n-                    r[i+57]=av.lane(57);\n-                    r[i+58]=av.lane(58);\n-                    r[i+59]=av.lane(59);\n-                    r[i+60]=av.lane(60);\n-                    r[i+61]=av.lane(61);\n-                    r[i+62]=av.lane(62);\n-                    r[i+63]=av.lane(63);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n+                    r[i + 32] = av.lane(32);\n+                    r[i + 33] = av.lane(33);\n+                    r[i + 34] = av.lane(34);\n+                    r[i + 35] = av.lane(35);\n+                    r[i + 36] = av.lane(36);\n+                    r[i + 37] = av.lane(37);\n+                    r[i + 38] = av.lane(38);\n+                    r[i + 39] = av.lane(39);\n+                    r[i + 40] = av.lane(40);\n+                    r[i + 41] = av.lane(41);\n+                    r[i + 42] = av.lane(42);\n+                    r[i + 43] = av.lane(43);\n+                    r[i + 44] = av.lane(44);\n+                    r[i + 45] = av.lane(45);\n+                    r[i + 46] = av.lane(46);\n+                    r[i + 47] = av.lane(47);\n+                    r[i + 48] = av.lane(48);\n+                    r[i + 49] = av.lane(49);\n+                    r[i + 50] = av.lane(50);\n+                    r[i + 51] = av.lane(51);\n+                    r[i + 52] = av.lane(52);\n+                    r[i + 53] = av.lane(53);\n+                    r[i + 54] = av.lane(54);\n+                    r[i + 55] = av.lane(55);\n+                    r[i + 56] = av.lane(56);\n+                    r[i + 57] = av.lane(57);\n+                    r[i + 58] = av.lane(58);\n+                    r[i + 59] = av.lane(59);\n+                    r[i + 60] = av.lane(60);\n+                    r[i + 61] = av.lane(61);\n+                    r[i + 62] = av.lane(62);\n+                    r[i + 63] = av.lane(63);\n@@ -4477,1 +4471,1 @@\n-                        r[i+j]=av.lane(j);\n+                        r[i + j] = av.lane(j);\n@@ -4518,3 +4512,0 @@\n-\n-\n-\n@@ -4524,2 +4515,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = a[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = a[idx + i + origin];\n@@ -4527,1 +4518,1 @@\n-                res[i] = (long)0;\n+                res[i] = (long) 0;\n@@ -4550,1 +4541,1 @@\n-                res[i] = a[idx+i+origin];\n+                res[i] = a[idx + i + origin];\n@@ -4552,1 +4543,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n@@ -4578,2 +4569,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = mask[i] ? a[idx+i+origin] : (long)0;\n+            if(i + origin < SPECIES.length())\n+                res[i] = mask[i] ? a[idx + i + origin] : (long) 0;\n@@ -4581,1 +4572,1 @@\n-                res[i] = mask[i] ? b[idx+j] : (long)0;\n+                res[i] = mask[i] ? b[idx + j] : (long) 0;\n@@ -4612,1 +4603,1 @@\n-                res[i] = (long)0;\n+                res[i] = (long) 0;\n@@ -4614,1 +4605,1 @@\n-                res[i] = a[idx+j];\n+                res[i] = a[idx + j];\n@@ -4640,1 +4631,1 @@\n-                    res[i] = b[idx+i];\n+                    res[i] = b[idx + i];\n@@ -4642,1 +4633,1 @@\n-                    res[i] = a[idx+j];\n+                    res[i] = a[idx + j];\n@@ -4647,1 +4638,1 @@\n-                    res[i] = a[idx+SPECIES.length()-origin+i];\n+                    res[i] = a[idx + SPECIES.length() - origin + i];\n@@ -4649,1 +4640,1 @@\n-                    res[i] = b[idx+origin+j];\n+                    res[i] = b[idx + origin + j];\n@@ -4677,2 +4668,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = b[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = b[idx + i + origin];\n@@ -4680,1 +4671,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n@@ -4685,1 +4676,1 @@\n-            res[i] = mask[i] ? a[idx+i] : res[i];\n+            res[i] = mask[i] ? a[idx + i] : res[i];\n@@ -4691,1 +4682,1 @@\n-                    res1[i] = b[idx+i];\n+                    res1[i] = b[idx + i];\n@@ -4693,2 +4684,2 @@\n-                   res1[i] = res[j];\n-                   j++;\n+                    res1[i] = res[j];\n+                    j++;\n@@ -4700,1 +4691,1 @@\n-                    res1[i] = res[SPECIES.length()-origin+i];\n+                    res1[i] = res[SPECIES.length() - origin + i];\n@@ -4702,1 +4693,1 @@\n-                    res1[i] = b[idx+origin+j];\n+                    res1[i] = b[idx + origin + j];\n@@ -4754,1 +4745,1 @@\n-        return (long)((a&~(c))|(b&c));\n+        return (long) ((a &~ (c)) | (b & c));\n@@ -4757,1 +4748,1 @@\n-        return (long)((a&~(c))|(b&c));\n+        return (long) ((a &~ (c)) | (b & c));\n@@ -4973,1 +4964,1 @@\n-        return (long)(-((long)a));\n+        return (long) (-((long) a));\n@@ -4977,1 +4968,1 @@\n-        return (long)(-((long)a));\n+        return (long) (-((long) a));\n@@ -5029,1 +5020,1 @@\n-        return (long)(Math.abs((long)a));\n+        return (long) (Math.abs((long) a));\n@@ -5033,1 +5024,1 @@\n-        return (long)(Math.abs((long)a));\n+        return (long) (Math.abs((long) a));\n@@ -5086,1 +5077,1 @@\n-        return (long)(~((long)a));\n+        return (long) (~((long) a));\n@@ -5090,1 +5081,1 @@\n-        return (long)(~((long)a));\n+        return (long) (~((long) a));\n@@ -5148,1 +5139,1 @@\n-        return (long)((a==0?0:-1));\n+        return (long) ((a == 0 ? 0 : -1));\n@@ -5194,1 +5185,1 @@\n-        return (long)(Long.bitCount(a));\n+        return (long) (Long.bitCount(a));\n@@ -5243,1 +5234,1 @@\n-        return (long)(TRAILING_ZEROS_COUNT_scalar(a));\n+        return (long) (TRAILING_ZEROS_COUNT_scalar(a));\n@@ -5286,1 +5277,1 @@\n-        return (long)(LEADING_ZEROS_COUNT_scalar(a));\n+        return (long) (LEADING_ZEROS_COUNT_scalar(a));\n@@ -5329,1 +5320,1 @@\n-        return (long)(REVERSE_scalar(a));\n+        return (long) (REVERSE_scalar(a));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long128VectorTests.java","additions":297,"deletions":306,"binary":false,"changes":603,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,1 +74,1 @@\n-                Assert.assertEquals(r[i], mask[(i*8\/SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0);\n+                Assert.assertEquals(r[i], mask[(i * 8 \/ SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0);\n@@ -77,1 +77,1 @@\n-            Assert.assertEquals(r[i], mask[(i*8\/SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0, \"at index #\" + i);\n+            Assert.assertEquals(r[i], mask[(i * 8 \/ SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0, \"at index #\" + i);\n@@ -84,1 +84,1 @@\n-                            i -> (long)(i * 5));\n+                            i -> (long) (i * 5));\n@@ -88,1 +88,1 @@\n-                            i -> (((long)(i + 1) == 0) ? 1 : (long)(i + 1)));\n+                            i -> (((long) (i + 1) == 0) ? 1 : (long) (i + 1)));\n@@ -195,1 +195,1 @@\n-                            return new Object[]{fa, fb, bo};\n+                            return new Object[] {fa, fb, bo};\n@@ -206,1 +206,1 @@\n-                            return new Object[]{fa, fb, fm, bo};\n+                            return new Object[] {fa, fb, fm, bo};\n@@ -215,1 +215,1 @@\n-                    return new Object[]{fa, bo};\n+                    return new Object[] {fa, bo};\n@@ -225,1 +225,1 @@\n-                        return new Object[]{fa, fm, bo};\n+                        return new Object[] {fa, fm, bo};\n@@ -944,2 +944,0 @@\n-\n-\n@@ -1095,1 +1093,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long256VectorLoadStoreTests.java","additions":9,"deletions":12,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -93,1 +93,1 @@\n-            long[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            long[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -210,1 +210,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i+order[i + j]]);\n@@ -215,1 +215,1 @@\n-            Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i+order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]]);\n@@ -231,1 +231,1 @@\n-                    Assert.assertEquals(r[i + k], (long)0);\n+                    Assert.assertEquals(r[i + k], (long) 0);\n@@ -239,1 +239,1 @@\n-                Assert.assertEquals(r[idx], (long)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], (long) 0, \"at index #\" + idx);\n@@ -254,1 +254,1 @@\n-                        Assert.assertEquals(r[i + j], (long)0);\n+                        Assert.assertEquals(r[i + j], (long) 0);\n@@ -263,1 +263,1 @@\n-                Assert.assertEquals(r[idx], (long)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], (long) 0, \"at index #\" + idx);\n@@ -273,1 +273,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -278,1 +278,1 @@\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]]);\n@@ -288,1 +288,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + order[i + j]]);\n@@ -290,1 +290,1 @@\n-                         Assert.assertEquals(r[i+j], (long)0);\n+                         Assert.assertEquals(r[i + j], (long) 0);\n@@ -296,1 +296,1 @@\n-                Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -298,1 +298,1 @@\n-                Assert.assertEquals(r[i+j], (long)0, \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], (long) 0, \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -308,1 +308,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -310,1 +310,1 @@\n-                         Assert.assertEquals(r[i+j], (long)0);\n+                         Assert.assertEquals(r[i + j], (long) 0);\n@@ -316,1 +316,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -318,1 +318,1 @@\n-                Assert.assertEquals(r[i+j], (long)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], (long) 0, \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -327,1 +327,1 @@\n-                a[j]=a[idx];\n+                a[j] = a[idx];\n@@ -378,1 +378,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], (long)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])));\n+                Assert.assertEquals(r[i], f.apply(a[i], (long) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])));\n@@ -381,1 +381,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], (long)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])),\n+            Assert.assertEquals(r[i], f.apply(a[i], (long) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])),\n@@ -427,1 +427,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], (long)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n+                Assert.assertEquals(r[i], f.apply(a[i], (long) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n@@ -430,1 +430,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], (long)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]),\n+            Assert.assertEquals(r[i], f.apply(a[i], (long) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]),\n@@ -443,1 +443,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]));\n@@ -447,1 +447,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]), \"at index #\" + i + \", \" + j);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]), \"at index #\" + i + \", \" + j);\n@@ -461,1 +461,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]));\n@@ -465,1 +465,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i+j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i + j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n@@ -614,1 +614,0 @@\n-\n@@ -638,1 +637,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -643,1 +642,1 @@\n-            long[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            long[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -646,1 +645,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -648,1 +647,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -665,1 +664,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -670,1 +669,1 @@\n-            long[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            long[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -673,1 +672,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -675,1 +674,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -686,1 +685,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -691,1 +690,1 @@\n-            long[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            long[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -694,1 +693,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -696,1 +695,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -698,1 +697,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(r, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(r, i, i + SPECIES.length()))\n@@ -713,1 +712,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -718,1 +717,1 @@\n-            long[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            long[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -733,1 +732,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -738,1 +737,1 @@\n-            long[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            long[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -754,1 +753,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -759,1 +758,1 @@\n-            long[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            long[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -775,1 +774,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -780,1 +779,1 @@\n-            long[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            long[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -797,1 +796,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -802,1 +801,1 @@\n-            long[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            long[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -822,1 +821,1 @@\n-                return (int)0;\n+                return (int) 0;\n@@ -829,1 +828,1 @@\n-                            i -> (long)(-i * 5));\n+                            i -> (long) (-i * 5));\n@@ -833,1 +832,1 @@\n-                            i -> (long)(i * 5));\n+                            i -> (long) (i * 5));\n@@ -837,1 +836,1 @@\n-                            i -> (((long)(i + 1) == 0) ? 1 : (long)(i + 1)));\n+                            i -> (((long) (i + 1) == 0) ? 1 : (long) (i + 1)));\n@@ -841,1 +840,1 @@\n-                            i -> (long)intCornerCaseValue(i));\n+                            i -> (long) intCornerCaseValue(i));\n@@ -849,1 +848,1 @@\n-                Assert.assertEquals(r[i], (int)(a[i+offs]));\n+                Assert.assertEquals(r[i], (int) (a[i + offs]));\n@@ -852,1 +851,1 @@\n-            Assert.assertEquals(r[i], (int)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (int) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -862,1 +861,1 @@\n-                Assert.assertEquals(r[i], (long)(a[i+offs]));\n+                Assert.assertEquals(r[i], (long) (a[i + offs]));\n@@ -865,1 +864,1 @@\n-            Assert.assertEquals(r[i], (long)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (long) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -873,1 +872,1 @@\n-                Assert.assertEquals(r[i], (double)(a[i+offs]));\n+                Assert.assertEquals(r[i], (double) (a[i + offs]));\n@@ -876,1 +875,1 @@\n-            Assert.assertEquals(r[i], (double)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (double) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -880,1 +879,0 @@\n-\n@@ -888,1 +886,1 @@\n-                            i -> (long)(-i * 5));\n+                            i -> (long) (-i * 5));\n@@ -892,1 +890,1 @@\n-                            i -> (long)(i * 5));\n+                            i -> (long) (i * 5));\n@@ -896,1 +894,1 @@\n-                            i -> (((long)(i + 1) == 0) ? 1 : (long)(i + 1)));\n+                            i -> (((long) (i + 1) == 0) ? 1 : (long) (i + 1)));\n@@ -1033,1 +1031,1 @@\n-                    a[i] = (long)RAND.nextInt(upper);\n+                    a[i] = (long) RAND.nextInt(upper);\n@@ -1058,1 +1056,0 @@\n-\n@@ -1062,1 +1059,1 @@\n-                            i -> (long)i);\n+                            i -> (long) i);\n@@ -1066,1 +1063,1 @@\n-                            i -> (long)(i - (s * BUFFER_REPS \/ 2)));\n+                            i -> (long) (i - (s * BUFFER_REPS \/ 2)));\n@@ -1070,1 +1067,1 @@\n-                            i -> (long)(i + 1));\n+                            i -> (long) (i + 1));\n@@ -1074,1 +1071,1 @@\n-                            i -> (long)(i - 2));\n+                            i -> (long) (i - 2));\n@@ -1078,1 +1075,1 @@\n-                            i -> i%3 == 0 ? (long)i : (i%3 == 1 ? (long)(i + 1) : (long)(i - 2)));\n+                            i -> i % 3 == 0 ? (long) i : (i % 3 == 1 ? (long) (i + 1) : (long) (i - 2)));\n@@ -1152,1 +1149,1 @@\n-                return (long)0;\n+                return (long) 0;\n@@ -1188,1 +1185,1 @@\n-        return Long.rotateLeft(a, ((int)b));\n+        return Long.rotateLeft(a, ((int) b));\n@@ -1192,1 +1189,1 @@\n-        return Long.rotateRight(a, ((int)b));\n+        return Long.rotateRight(a, ((int) b));\n@@ -1207,1 +1204,0 @@\n-\n@@ -1254,1 +1250,1 @@\n-        LongVector three = LongVector.broadcast(SPECIES, (byte)-3);\n+        LongVector three = LongVector.broadcast(SPECIES, (byte) -3);\n@@ -1268,1 +1264,1 @@\n-        m = higher.min((long)-1).test(VectorOperators.IS_NEGATIVE);\n+        m = higher.min((long) -1).test(VectorOperators.IS_NEGATIVE);\n@@ -1271,1 +1267,1 @@\n-        assert(max == -3 + scale * (SPECIES.length()-1));\n+        assert(max == -3 + scale * (SPECIES.length() - 1));\n@@ -1286,1 +1282,1 @@\n-        LongVector io2 = (LongVector) VectorShuffle.iota(SPECIES,0,1,false).toVector();\n+        LongVector io2 = (LongVector) VectorShuffle.iota(SPECIES, 0, 1, false).toVector();\n@@ -1288,1 +1284,1 @@\n-        LongVector a = io.add((long)1); \/\/[1,2]\n+        LongVector a = io.add((long) 1); \/\/[1,2]\n@@ -1293,2 +1289,2 @@\n-        LongVector zab0 = a.rearrange(zip0,b); \/\/[1,-1]\n-        LongVector zab1 = a.rearrange(zip1,b); \/\/[2,-2]\n+        LongVector zab0 = a.rearrange(zip0, b); \/\/[1,-1]\n+        LongVector zab1 = a.rearrange(zip1, b); \/\/[2,-2]\n@@ -1299,2 +1295,2 @@\n-            manual[i+0] = abValues[i\/2];\n-            manual[i+1] = abValues[a.length() + i\/2];\n+            manual[i + 0] = abValues[i \/ 2];\n+            manual[i + 1] = abValues[a.length() + i \/ 2];\n@@ -1305,2 +1301,2 @@\n-        LongVector uab0 = zab0.rearrange(unz0,zab1);\n-        LongVector uab1 = zab0.rearrange(unz1,zab1);\n+        LongVector uab0 = zab0.rearrange(unz0, zab1);\n+        LongVector uab1 = zab0.rearrange(unz1, zab1);\n@@ -1363,1 +1359,1 @@\n-        return (long)(a + b);\n+        return (long) (a + b);\n@@ -1383,1 +1379,1 @@\n-        return (long)(a + b);\n+        return (long) (a + b);\n@@ -1439,1 +1435,1 @@\n-        return (long)(a - b);\n+        return (long) (a - b);\n@@ -1459,1 +1455,1 @@\n-        return (long)(a - b);\n+        return (long) (a - b);\n@@ -1515,1 +1511,1 @@\n-        return (long)(a * b);\n+        return (long) (a * b);\n@@ -1535,1 +1531,1 @@\n-        return (long)(a * b);\n+        return (long) (a * b);\n@@ -1594,1 +1590,1 @@\n-        return (long)(a \/ b);\n+        return (long) (a \/ b);\n@@ -1616,1 +1612,1 @@\n-        return (long)(a \/ b);\n+        return (long) (a \/ b);\n@@ -1685,1 +1681,1 @@\n-        return (long)((a)!=0?a:b);\n+        return (long) ((a) != 0 ? a : b);\n@@ -1726,1 +1722,1 @@\n-        return (long)(a & b);\n+        return (long) (a & b);\n@@ -1746,1 +1742,1 @@\n-        return (long)(a & b);\n+        return (long) (a & b);\n@@ -1788,1 +1784,1 @@\n-        return (long)(a & ~b);\n+        return (long) (a & ~b);\n@@ -1832,1 +1828,1 @@\n-        return (long)(a | b);\n+        return (long) (a | b);\n@@ -1852,1 +1848,1 @@\n-        return (long)(a | b);\n+        return (long) (a | b);\n@@ -1894,1 +1890,1 @@\n-        return (long)(a ^ b);\n+        return (long) (a ^ b);\n@@ -2178,1 +2174,1 @@\n-            av.lanewise(VectorOperators.OR, (long)b[i]).intoArray(r, i);\n+            av.lanewise(VectorOperators.OR, (long) b[i]).intoArray(r, i);\n@@ -2197,1 +2193,1 @@\n-            av.lanewise(VectorOperators.OR, (long)b[i], vmask).intoArray(r, i);\n+            av.lanewise(VectorOperators.OR, (long) b[i], vmask).intoArray(r, i);\n@@ -2212,1 +2208,1 @@\n-            av.lanewise(VectorOperators.ADD, (long)b[i]).intoArray(r, i);\n+            av.lanewise(VectorOperators.ADD, (long) b[i]).intoArray(r, i);\n@@ -2229,1 +2225,1 @@\n-            av.lanewise(VectorOperators.ADD, (long)b[i], vmask).intoArray(r, i);\n+            av.lanewise(VectorOperators.ADD, (long) b[i], vmask).intoArray(r, i);\n@@ -2236,1 +2232,1 @@\n-        return (long)((a << b));\n+        return (long) ((a << b));\n@@ -2284,1 +2280,1 @@\n-        return (long)((a >> b));\n+        return (long) ((a >> b));\n@@ -2332,1 +2328,1 @@\n-        return (long)((a >>> b));\n+        return (long) ((a >>> b));\n@@ -2380,1 +2376,1 @@\n-        return (long)((a << b));\n+        return (long) ((a << b));\n@@ -2392,1 +2388,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i]).intoArray(r, i);\n@@ -2413,1 +2409,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i], vmask).intoArray(r, i);\n@@ -2426,1 +2422,1 @@\n-        return (long)((a >>> b));\n+        return (long) ((a >>> b));\n@@ -2438,1 +2434,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i]).intoArray(r, i);\n@@ -2459,1 +2455,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i], vmask).intoArray(r, i);\n@@ -2472,1 +2468,1 @@\n-        return (long)((a >> b));\n+        return (long) ((a >> b));\n@@ -2484,1 +2480,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i]).intoArray(r, i);\n@@ -2505,1 +2501,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i], vmask).intoArray(r, i);\n@@ -2518,1 +2514,1 @@\n-        return (long)(ROR_scalar(a,b));\n+        return (long) (ROR_scalar(a, b));\n@@ -2562,1 +2558,1 @@\n-        return (long)(ROL_scalar(a,b));\n+        return (long) (ROL_scalar(a, b));\n@@ -2606,1 +2602,1 @@\n-        return (long)(ROR_scalar(a,b));\n+        return (long) (ROR_scalar(a, b));\n@@ -2618,1 +2614,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i]).intoArray(r, i);\n@@ -2639,1 +2635,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i], vmask).intoArray(r, i);\n@@ -2648,1 +2644,1 @@\n-        return (long)(ROL_scalar(a,b));\n+        return (long) (ROL_scalar(a, b));\n@@ -2660,1 +2656,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i]).intoArray(r, i);\n@@ -2681,1 +2677,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i], vmask).intoArray(r, i);\n@@ -2689,1 +2685,1 @@\n-        return (long)(Math.min(a, b));\n+        return (long) (Math.min(a, b));\n@@ -2709,1 +2705,1 @@\n-        return (long)(Math.min(a, b));\n+        return (long) (Math.min(a, b));\n@@ -2727,1 +2723,1 @@\n-        return (long)(Math.max(a, b));\n+        return (long) (Math.max(a, b));\n@@ -2747,1 +2743,1 @@\n-        return (long)(Math.max(a, b));\n+        return (long) (Math.max(a, b));\n@@ -3585,1 +3581,1 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (long)(65535+i)).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length() - 1)), (long) (65535 + i)).intoArray(r, i);\n@@ -3591,1 +3587,1 @@\n-            assertInsertArraysEquals(r, a, (long)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+            assertInsertArraysEquals(r, a, (long) (65535 + i), (j++ & (SPECIES.length() - 1)), i , i + SPECIES.length());\n@@ -3595,1 +3591,1 @@\n-        return bits(a)==0;\n+        return bits(a) == 0;\n@@ -3628,1 +3624,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_DEFAULT(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_DEFAULT(a[i + j]));\n@@ -3633,1 +3629,1 @@\n-        return bits(a)<0;\n+        return bits(a) < 0;\n@@ -3666,1 +3662,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_NEGATIVE(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_NEGATIVE(a[i + j]));\n@@ -4176,1 +4172,0 @@\n-\n@@ -4214,1 +4209,0 @@\n-\n@@ -4342,1 +4336,1 @@\n-                    r[i]=av.lane(0);\n+                    r[i] = av.lane(0);\n@@ -4344,2 +4338,2 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n@@ -4347,4 +4341,4 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n@@ -4352,8 +4346,8 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n@@ -4361,16 +4355,16 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n@@ -4378,32 +4372,32 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n@@ -4411,64 +4405,64 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n-                    r[i+32]=av.lane(32);\n-                    r[i+33]=av.lane(33);\n-                    r[i+34]=av.lane(34);\n-                    r[i+35]=av.lane(35);\n-                    r[i+36]=av.lane(36);\n-                    r[i+37]=av.lane(37);\n-                    r[i+38]=av.lane(38);\n-                    r[i+39]=av.lane(39);\n-                    r[i+40]=av.lane(40);\n-                    r[i+41]=av.lane(41);\n-                    r[i+42]=av.lane(42);\n-                    r[i+43]=av.lane(43);\n-                    r[i+44]=av.lane(44);\n-                    r[i+45]=av.lane(45);\n-                    r[i+46]=av.lane(46);\n-                    r[i+47]=av.lane(47);\n-                    r[i+48]=av.lane(48);\n-                    r[i+49]=av.lane(49);\n-                    r[i+50]=av.lane(50);\n-                    r[i+51]=av.lane(51);\n-                    r[i+52]=av.lane(52);\n-                    r[i+53]=av.lane(53);\n-                    r[i+54]=av.lane(54);\n-                    r[i+55]=av.lane(55);\n-                    r[i+56]=av.lane(56);\n-                    r[i+57]=av.lane(57);\n-                    r[i+58]=av.lane(58);\n-                    r[i+59]=av.lane(59);\n-                    r[i+60]=av.lane(60);\n-                    r[i+61]=av.lane(61);\n-                    r[i+62]=av.lane(62);\n-                    r[i+63]=av.lane(63);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n+                    r[i + 32] = av.lane(32);\n+                    r[i + 33] = av.lane(33);\n+                    r[i + 34] = av.lane(34);\n+                    r[i + 35] = av.lane(35);\n+                    r[i + 36] = av.lane(36);\n+                    r[i + 37] = av.lane(37);\n+                    r[i + 38] = av.lane(38);\n+                    r[i + 39] = av.lane(39);\n+                    r[i + 40] = av.lane(40);\n+                    r[i + 41] = av.lane(41);\n+                    r[i + 42] = av.lane(42);\n+                    r[i + 43] = av.lane(43);\n+                    r[i + 44] = av.lane(44);\n+                    r[i + 45] = av.lane(45);\n+                    r[i + 46] = av.lane(46);\n+                    r[i + 47] = av.lane(47);\n+                    r[i + 48] = av.lane(48);\n+                    r[i + 49] = av.lane(49);\n+                    r[i + 50] = av.lane(50);\n+                    r[i + 51] = av.lane(51);\n+                    r[i + 52] = av.lane(52);\n+                    r[i + 53] = av.lane(53);\n+                    r[i + 54] = av.lane(54);\n+                    r[i + 55] = av.lane(55);\n+                    r[i + 56] = av.lane(56);\n+                    r[i + 57] = av.lane(57);\n+                    r[i + 58] = av.lane(58);\n+                    r[i + 59] = av.lane(59);\n+                    r[i + 60] = av.lane(60);\n+                    r[i + 61] = av.lane(61);\n+                    r[i + 62] = av.lane(62);\n+                    r[i + 63] = av.lane(63);\n@@ -4477,1 +4471,1 @@\n-                        r[i+j]=av.lane(j);\n+                        r[i + j] = av.lane(j);\n@@ -4518,3 +4512,0 @@\n-\n-\n-\n@@ -4524,2 +4515,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = a[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = a[idx + i + origin];\n@@ -4527,1 +4518,1 @@\n-                res[i] = (long)0;\n+                res[i] = (long) 0;\n@@ -4550,1 +4541,1 @@\n-                res[i] = a[idx+i+origin];\n+                res[i] = a[idx + i + origin];\n@@ -4552,1 +4543,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n@@ -4578,2 +4569,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = mask[i] ? a[idx+i+origin] : (long)0;\n+            if(i + origin < SPECIES.length())\n+                res[i] = mask[i] ? a[idx + i + origin] : (long) 0;\n@@ -4581,1 +4572,1 @@\n-                res[i] = mask[i] ? b[idx+j] : (long)0;\n+                res[i] = mask[i] ? b[idx + j] : (long) 0;\n@@ -4612,1 +4603,1 @@\n-                res[i] = (long)0;\n+                res[i] = (long) 0;\n@@ -4614,1 +4605,1 @@\n-                res[i] = a[idx+j];\n+                res[i] = a[idx + j];\n@@ -4640,1 +4631,1 @@\n-                    res[i] = b[idx+i];\n+                    res[i] = b[idx + i];\n@@ -4642,1 +4633,1 @@\n-                    res[i] = a[idx+j];\n+                    res[i] = a[idx + j];\n@@ -4647,1 +4638,1 @@\n-                    res[i] = a[idx+SPECIES.length()-origin+i];\n+                    res[i] = a[idx + SPECIES.length() - origin + i];\n@@ -4649,1 +4640,1 @@\n-                    res[i] = b[idx+origin+j];\n+                    res[i] = b[idx + origin + j];\n@@ -4677,2 +4668,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = b[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = b[idx + i + origin];\n@@ -4680,1 +4671,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n@@ -4685,1 +4676,1 @@\n-            res[i] = mask[i] ? a[idx+i] : res[i];\n+            res[i] = mask[i] ? a[idx + i] : res[i];\n@@ -4691,1 +4682,1 @@\n-                    res1[i] = b[idx+i];\n+                    res1[i] = b[idx + i];\n@@ -4693,2 +4684,2 @@\n-                   res1[i] = res[j];\n-                   j++;\n+                    res1[i] = res[j];\n+                    j++;\n@@ -4700,1 +4691,1 @@\n-                    res1[i] = res[SPECIES.length()-origin+i];\n+                    res1[i] = res[SPECIES.length() - origin + i];\n@@ -4702,1 +4693,1 @@\n-                    res1[i] = b[idx+origin+j];\n+                    res1[i] = b[idx + origin + j];\n@@ -4754,1 +4745,1 @@\n-        return (long)((a&~(c))|(b&c));\n+        return (long) ((a &~ (c)) | (b & c));\n@@ -4757,1 +4748,1 @@\n-        return (long)((a&~(c))|(b&c));\n+        return (long) ((a &~ (c)) | (b & c));\n@@ -4973,1 +4964,1 @@\n-        return (long)(-((long)a));\n+        return (long) (-((long) a));\n@@ -4977,1 +4968,1 @@\n-        return (long)(-((long)a));\n+        return (long) (-((long) a));\n@@ -5029,1 +5020,1 @@\n-        return (long)(Math.abs((long)a));\n+        return (long) (Math.abs((long) a));\n@@ -5033,1 +5024,1 @@\n-        return (long)(Math.abs((long)a));\n+        return (long) (Math.abs((long) a));\n@@ -5086,1 +5077,1 @@\n-        return (long)(~((long)a));\n+        return (long) (~((long) a));\n@@ -5090,1 +5081,1 @@\n-        return (long)(~((long)a));\n+        return (long) (~((long) a));\n@@ -5148,1 +5139,1 @@\n-        return (long)((a==0?0:-1));\n+        return (long) ((a == 0 ? 0 : -1));\n@@ -5194,1 +5185,1 @@\n-        return (long)(Long.bitCount(a));\n+        return (long) (Long.bitCount(a));\n@@ -5243,1 +5234,1 @@\n-        return (long)(TRAILING_ZEROS_COUNT_scalar(a));\n+        return (long) (TRAILING_ZEROS_COUNT_scalar(a));\n@@ -5286,1 +5277,1 @@\n-        return (long)(LEADING_ZEROS_COUNT_scalar(a));\n+        return (long) (LEADING_ZEROS_COUNT_scalar(a));\n@@ -5329,1 +5320,1 @@\n-        return (long)(REVERSE_scalar(a));\n+        return (long) (REVERSE_scalar(a));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long256VectorTests.java","additions":297,"deletions":306,"binary":false,"changes":603,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,1 +74,1 @@\n-                Assert.assertEquals(r[i], mask[(i*8\/SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0);\n+                Assert.assertEquals(r[i], mask[(i * 8 \/ SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0);\n@@ -77,1 +77,1 @@\n-            Assert.assertEquals(r[i], mask[(i*8\/SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0, \"at index #\" + i);\n+            Assert.assertEquals(r[i], mask[(i * 8 \/ SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0, \"at index #\" + i);\n@@ -84,1 +84,1 @@\n-                            i -> (long)(i * 5));\n+                            i -> (long) (i * 5));\n@@ -88,1 +88,1 @@\n-                            i -> (((long)(i + 1) == 0) ? 1 : (long)(i + 1)));\n+                            i -> (((long) (i + 1) == 0) ? 1 : (long) (i + 1)));\n@@ -195,1 +195,1 @@\n-                            return new Object[]{fa, fb, bo};\n+                            return new Object[] {fa, fb, bo};\n@@ -206,1 +206,1 @@\n-                            return new Object[]{fa, fb, fm, bo};\n+                            return new Object[] {fa, fb, fm, bo};\n@@ -215,1 +215,1 @@\n-                    return new Object[]{fa, bo};\n+                    return new Object[] {fa, bo};\n@@ -225,1 +225,1 @@\n-                        return new Object[]{fa, fm, bo};\n+                        return new Object[] {fa, fm, bo};\n@@ -944,2 +944,0 @@\n-\n-\n@@ -1095,1 +1093,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long512VectorLoadStoreTests.java","additions":9,"deletions":12,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -93,1 +93,1 @@\n-            long[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            long[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -210,1 +210,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i+order[i + j]]);\n@@ -215,1 +215,1 @@\n-            Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i+order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]]);\n@@ -231,1 +231,1 @@\n-                    Assert.assertEquals(r[i + k], (long)0);\n+                    Assert.assertEquals(r[i + k], (long) 0);\n@@ -239,1 +239,1 @@\n-                Assert.assertEquals(r[idx], (long)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], (long) 0, \"at index #\" + idx);\n@@ -254,1 +254,1 @@\n-                        Assert.assertEquals(r[i + j], (long)0);\n+                        Assert.assertEquals(r[i + j], (long) 0);\n@@ -263,1 +263,1 @@\n-                Assert.assertEquals(r[idx], (long)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], (long) 0, \"at index #\" + idx);\n@@ -273,1 +273,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -278,1 +278,1 @@\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]]);\n@@ -288,1 +288,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + order[i + j]]);\n@@ -290,1 +290,1 @@\n-                         Assert.assertEquals(r[i+j], (long)0);\n+                         Assert.assertEquals(r[i + j], (long) 0);\n@@ -296,1 +296,1 @@\n-                Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -298,1 +298,1 @@\n-                Assert.assertEquals(r[i+j], (long)0, \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], (long) 0, \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -308,1 +308,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -310,1 +310,1 @@\n-                         Assert.assertEquals(r[i+j], (long)0);\n+                         Assert.assertEquals(r[i + j], (long) 0);\n@@ -316,1 +316,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -318,1 +318,1 @@\n-                Assert.assertEquals(r[i+j], (long)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], (long) 0, \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -327,1 +327,1 @@\n-                a[j]=a[idx];\n+                a[j] = a[idx];\n@@ -378,1 +378,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], (long)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])));\n+                Assert.assertEquals(r[i], f.apply(a[i], (long) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])));\n@@ -381,1 +381,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], (long)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])),\n+            Assert.assertEquals(r[i], f.apply(a[i], (long) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])),\n@@ -427,1 +427,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], (long)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n+                Assert.assertEquals(r[i], f.apply(a[i], (long) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n@@ -430,1 +430,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], (long)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]),\n+            Assert.assertEquals(r[i], f.apply(a[i], (long) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]),\n@@ -443,1 +443,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]));\n@@ -447,1 +447,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]), \"at index #\" + i + \", \" + j);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]), \"at index #\" + i + \", \" + j);\n@@ -461,1 +461,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]));\n@@ -465,1 +465,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i+j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i + j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n@@ -614,1 +614,0 @@\n-\n@@ -638,1 +637,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -643,1 +642,1 @@\n-            long[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            long[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -646,1 +645,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -648,1 +647,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -665,1 +664,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -670,1 +669,1 @@\n-            long[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            long[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -673,1 +672,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -675,1 +674,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -686,1 +685,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -691,1 +690,1 @@\n-            long[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            long[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -694,1 +693,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -696,1 +695,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -698,1 +697,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(r, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(r, i, i + SPECIES.length()))\n@@ -713,1 +712,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -718,1 +717,1 @@\n-            long[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            long[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -733,1 +732,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -738,1 +737,1 @@\n-            long[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            long[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -754,1 +753,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -759,1 +758,1 @@\n-            long[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            long[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -775,1 +774,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -780,1 +779,1 @@\n-            long[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            long[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -797,1 +796,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -802,1 +801,1 @@\n-            long[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            long[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -822,1 +821,1 @@\n-                return (int)0;\n+                return (int) 0;\n@@ -829,1 +828,1 @@\n-                            i -> (long)(-i * 5));\n+                            i -> (long) (-i * 5));\n@@ -833,1 +832,1 @@\n-                            i -> (long)(i * 5));\n+                            i -> (long) (i * 5));\n@@ -837,1 +836,1 @@\n-                            i -> (((long)(i + 1) == 0) ? 1 : (long)(i + 1)));\n+                            i -> (((long) (i + 1) == 0) ? 1 : (long) (i + 1)));\n@@ -841,1 +840,1 @@\n-                            i -> (long)intCornerCaseValue(i));\n+                            i -> (long) intCornerCaseValue(i));\n@@ -849,1 +848,1 @@\n-                Assert.assertEquals(r[i], (int)(a[i+offs]));\n+                Assert.assertEquals(r[i], (int) (a[i + offs]));\n@@ -852,1 +851,1 @@\n-            Assert.assertEquals(r[i], (int)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (int) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -862,1 +861,1 @@\n-                Assert.assertEquals(r[i], (long)(a[i+offs]));\n+                Assert.assertEquals(r[i], (long) (a[i + offs]));\n@@ -865,1 +864,1 @@\n-            Assert.assertEquals(r[i], (long)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (long) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -873,1 +872,1 @@\n-                Assert.assertEquals(r[i], (double)(a[i+offs]));\n+                Assert.assertEquals(r[i], (double) (a[i + offs]));\n@@ -876,1 +875,1 @@\n-            Assert.assertEquals(r[i], (double)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (double) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -880,1 +879,0 @@\n-\n@@ -888,1 +886,1 @@\n-                            i -> (long)(-i * 5));\n+                            i -> (long) (-i * 5));\n@@ -892,1 +890,1 @@\n-                            i -> (long)(i * 5));\n+                            i -> (long) (i * 5));\n@@ -896,1 +894,1 @@\n-                            i -> (((long)(i + 1) == 0) ? 1 : (long)(i + 1)));\n+                            i -> (((long) (i + 1) == 0) ? 1 : (long) (i + 1)));\n@@ -1033,1 +1031,1 @@\n-                    a[i] = (long)RAND.nextInt(upper);\n+                    a[i] = (long) RAND.nextInt(upper);\n@@ -1058,1 +1056,0 @@\n-\n@@ -1062,1 +1059,1 @@\n-                            i -> (long)i);\n+                            i -> (long) i);\n@@ -1066,1 +1063,1 @@\n-                            i -> (long)(i - (s * BUFFER_REPS \/ 2)));\n+                            i -> (long) (i - (s * BUFFER_REPS \/ 2)));\n@@ -1070,1 +1067,1 @@\n-                            i -> (long)(i + 1));\n+                            i -> (long) (i + 1));\n@@ -1074,1 +1071,1 @@\n-                            i -> (long)(i - 2));\n+                            i -> (long) (i - 2));\n@@ -1078,1 +1075,1 @@\n-                            i -> i%3 == 0 ? (long)i : (i%3 == 1 ? (long)(i + 1) : (long)(i - 2)));\n+                            i -> i % 3 == 0 ? (long) i : (i % 3 == 1 ? (long) (i + 1) : (long) (i - 2)));\n@@ -1152,1 +1149,1 @@\n-                return (long)0;\n+                return (long) 0;\n@@ -1188,1 +1185,1 @@\n-        return Long.rotateLeft(a, ((int)b));\n+        return Long.rotateLeft(a, ((int) b));\n@@ -1192,1 +1189,1 @@\n-        return Long.rotateRight(a, ((int)b));\n+        return Long.rotateRight(a, ((int) b));\n@@ -1207,1 +1204,0 @@\n-\n@@ -1254,1 +1250,1 @@\n-        LongVector three = LongVector.broadcast(SPECIES, (byte)-3);\n+        LongVector three = LongVector.broadcast(SPECIES, (byte) -3);\n@@ -1268,1 +1264,1 @@\n-        m = higher.min((long)-1).test(VectorOperators.IS_NEGATIVE);\n+        m = higher.min((long) -1).test(VectorOperators.IS_NEGATIVE);\n@@ -1271,1 +1267,1 @@\n-        assert(max == -3 + scale * (SPECIES.length()-1));\n+        assert(max == -3 + scale * (SPECIES.length() - 1));\n@@ -1286,1 +1282,1 @@\n-        LongVector io2 = (LongVector) VectorShuffle.iota(SPECIES,0,1,false).toVector();\n+        LongVector io2 = (LongVector) VectorShuffle.iota(SPECIES, 0, 1, false).toVector();\n@@ -1288,1 +1284,1 @@\n-        LongVector a = io.add((long)1); \/\/[1,2]\n+        LongVector a = io.add((long) 1); \/\/[1,2]\n@@ -1293,2 +1289,2 @@\n-        LongVector zab0 = a.rearrange(zip0,b); \/\/[1,-1]\n-        LongVector zab1 = a.rearrange(zip1,b); \/\/[2,-2]\n+        LongVector zab0 = a.rearrange(zip0, b); \/\/[1,-1]\n+        LongVector zab1 = a.rearrange(zip1, b); \/\/[2,-2]\n@@ -1299,2 +1295,2 @@\n-            manual[i+0] = abValues[i\/2];\n-            manual[i+1] = abValues[a.length() + i\/2];\n+            manual[i + 0] = abValues[i \/ 2];\n+            manual[i + 1] = abValues[a.length() + i \/ 2];\n@@ -1305,2 +1301,2 @@\n-        LongVector uab0 = zab0.rearrange(unz0,zab1);\n-        LongVector uab1 = zab0.rearrange(unz1,zab1);\n+        LongVector uab0 = zab0.rearrange(unz0, zab1);\n+        LongVector uab1 = zab0.rearrange(unz1, zab1);\n@@ -1363,1 +1359,1 @@\n-        return (long)(a + b);\n+        return (long) (a + b);\n@@ -1383,1 +1379,1 @@\n-        return (long)(a + b);\n+        return (long) (a + b);\n@@ -1439,1 +1435,1 @@\n-        return (long)(a - b);\n+        return (long) (a - b);\n@@ -1459,1 +1455,1 @@\n-        return (long)(a - b);\n+        return (long) (a - b);\n@@ -1515,1 +1511,1 @@\n-        return (long)(a * b);\n+        return (long) (a * b);\n@@ -1535,1 +1531,1 @@\n-        return (long)(a * b);\n+        return (long) (a * b);\n@@ -1594,1 +1590,1 @@\n-        return (long)(a \/ b);\n+        return (long) (a \/ b);\n@@ -1616,1 +1612,1 @@\n-        return (long)(a \/ b);\n+        return (long) (a \/ b);\n@@ -1685,1 +1681,1 @@\n-        return (long)((a)!=0?a:b);\n+        return (long) ((a) != 0 ? a : b);\n@@ -1726,1 +1722,1 @@\n-        return (long)(a & b);\n+        return (long) (a & b);\n@@ -1746,1 +1742,1 @@\n-        return (long)(a & b);\n+        return (long) (a & b);\n@@ -1788,1 +1784,1 @@\n-        return (long)(a & ~b);\n+        return (long) (a & ~b);\n@@ -1832,1 +1828,1 @@\n-        return (long)(a | b);\n+        return (long) (a | b);\n@@ -1852,1 +1848,1 @@\n-        return (long)(a | b);\n+        return (long) (a | b);\n@@ -1894,1 +1890,1 @@\n-        return (long)(a ^ b);\n+        return (long) (a ^ b);\n@@ -2178,1 +2174,1 @@\n-            av.lanewise(VectorOperators.OR, (long)b[i]).intoArray(r, i);\n+            av.lanewise(VectorOperators.OR, (long) b[i]).intoArray(r, i);\n@@ -2197,1 +2193,1 @@\n-            av.lanewise(VectorOperators.OR, (long)b[i], vmask).intoArray(r, i);\n+            av.lanewise(VectorOperators.OR, (long) b[i], vmask).intoArray(r, i);\n@@ -2212,1 +2208,1 @@\n-            av.lanewise(VectorOperators.ADD, (long)b[i]).intoArray(r, i);\n+            av.lanewise(VectorOperators.ADD, (long) b[i]).intoArray(r, i);\n@@ -2229,1 +2225,1 @@\n-            av.lanewise(VectorOperators.ADD, (long)b[i], vmask).intoArray(r, i);\n+            av.lanewise(VectorOperators.ADD, (long) b[i], vmask).intoArray(r, i);\n@@ -2236,1 +2232,1 @@\n-        return (long)((a << b));\n+        return (long) ((a << b));\n@@ -2284,1 +2280,1 @@\n-        return (long)((a >> b));\n+        return (long) ((a >> b));\n@@ -2332,1 +2328,1 @@\n-        return (long)((a >>> b));\n+        return (long) ((a >>> b));\n@@ -2380,1 +2376,1 @@\n-        return (long)((a << b));\n+        return (long) ((a << b));\n@@ -2392,1 +2388,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i]).intoArray(r, i);\n@@ -2413,1 +2409,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i], vmask).intoArray(r, i);\n@@ -2426,1 +2422,1 @@\n-        return (long)((a >>> b));\n+        return (long) ((a >>> b));\n@@ -2438,1 +2434,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i]).intoArray(r, i);\n@@ -2459,1 +2455,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i], vmask).intoArray(r, i);\n@@ -2472,1 +2468,1 @@\n-        return (long)((a >> b));\n+        return (long) ((a >> b));\n@@ -2484,1 +2480,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i]).intoArray(r, i);\n@@ -2505,1 +2501,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i], vmask).intoArray(r, i);\n@@ -2518,1 +2514,1 @@\n-        return (long)(ROR_scalar(a,b));\n+        return (long) (ROR_scalar(a, b));\n@@ -2562,1 +2558,1 @@\n-        return (long)(ROL_scalar(a,b));\n+        return (long) (ROL_scalar(a, b));\n@@ -2606,1 +2602,1 @@\n-        return (long)(ROR_scalar(a,b));\n+        return (long) (ROR_scalar(a, b));\n@@ -2618,1 +2614,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i]).intoArray(r, i);\n@@ -2639,1 +2635,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i], vmask).intoArray(r, i);\n@@ -2648,1 +2644,1 @@\n-        return (long)(ROL_scalar(a,b));\n+        return (long) (ROL_scalar(a, b));\n@@ -2660,1 +2656,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i]).intoArray(r, i);\n@@ -2681,1 +2677,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i], vmask).intoArray(r, i);\n@@ -2689,1 +2685,1 @@\n-        return (long)(Math.min(a, b));\n+        return (long) (Math.min(a, b));\n@@ -2709,1 +2705,1 @@\n-        return (long)(Math.min(a, b));\n+        return (long) (Math.min(a, b));\n@@ -2727,1 +2723,1 @@\n-        return (long)(Math.max(a, b));\n+        return (long) (Math.max(a, b));\n@@ -2747,1 +2743,1 @@\n-        return (long)(Math.max(a, b));\n+        return (long) (Math.max(a, b));\n@@ -3585,1 +3581,1 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (long)(65535+i)).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length() - 1)), (long) (65535 + i)).intoArray(r, i);\n@@ -3591,1 +3587,1 @@\n-            assertInsertArraysEquals(r, a, (long)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+            assertInsertArraysEquals(r, a, (long) (65535 + i), (j++ & (SPECIES.length() - 1)), i , i + SPECIES.length());\n@@ -3595,1 +3591,1 @@\n-        return bits(a)==0;\n+        return bits(a) == 0;\n@@ -3628,1 +3624,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_DEFAULT(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_DEFAULT(a[i + j]));\n@@ -3633,1 +3629,1 @@\n-        return bits(a)<0;\n+        return bits(a) < 0;\n@@ -3666,1 +3662,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_NEGATIVE(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_NEGATIVE(a[i + j]));\n@@ -4176,1 +4172,0 @@\n-\n@@ -4214,1 +4209,0 @@\n-\n@@ -4342,1 +4336,1 @@\n-                    r[i]=av.lane(0);\n+                    r[i] = av.lane(0);\n@@ -4344,2 +4338,2 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n@@ -4347,4 +4341,4 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n@@ -4352,8 +4346,8 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n@@ -4361,16 +4355,16 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n@@ -4378,32 +4372,32 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n@@ -4411,64 +4405,64 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n-                    r[i+32]=av.lane(32);\n-                    r[i+33]=av.lane(33);\n-                    r[i+34]=av.lane(34);\n-                    r[i+35]=av.lane(35);\n-                    r[i+36]=av.lane(36);\n-                    r[i+37]=av.lane(37);\n-                    r[i+38]=av.lane(38);\n-                    r[i+39]=av.lane(39);\n-                    r[i+40]=av.lane(40);\n-                    r[i+41]=av.lane(41);\n-                    r[i+42]=av.lane(42);\n-                    r[i+43]=av.lane(43);\n-                    r[i+44]=av.lane(44);\n-                    r[i+45]=av.lane(45);\n-                    r[i+46]=av.lane(46);\n-                    r[i+47]=av.lane(47);\n-                    r[i+48]=av.lane(48);\n-                    r[i+49]=av.lane(49);\n-                    r[i+50]=av.lane(50);\n-                    r[i+51]=av.lane(51);\n-                    r[i+52]=av.lane(52);\n-                    r[i+53]=av.lane(53);\n-                    r[i+54]=av.lane(54);\n-                    r[i+55]=av.lane(55);\n-                    r[i+56]=av.lane(56);\n-                    r[i+57]=av.lane(57);\n-                    r[i+58]=av.lane(58);\n-                    r[i+59]=av.lane(59);\n-                    r[i+60]=av.lane(60);\n-                    r[i+61]=av.lane(61);\n-                    r[i+62]=av.lane(62);\n-                    r[i+63]=av.lane(63);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n+                    r[i + 32] = av.lane(32);\n+                    r[i + 33] = av.lane(33);\n+                    r[i + 34] = av.lane(34);\n+                    r[i + 35] = av.lane(35);\n+                    r[i + 36] = av.lane(36);\n+                    r[i + 37] = av.lane(37);\n+                    r[i + 38] = av.lane(38);\n+                    r[i + 39] = av.lane(39);\n+                    r[i + 40] = av.lane(40);\n+                    r[i + 41] = av.lane(41);\n+                    r[i + 42] = av.lane(42);\n+                    r[i + 43] = av.lane(43);\n+                    r[i + 44] = av.lane(44);\n+                    r[i + 45] = av.lane(45);\n+                    r[i + 46] = av.lane(46);\n+                    r[i + 47] = av.lane(47);\n+                    r[i + 48] = av.lane(48);\n+                    r[i + 49] = av.lane(49);\n+                    r[i + 50] = av.lane(50);\n+                    r[i + 51] = av.lane(51);\n+                    r[i + 52] = av.lane(52);\n+                    r[i + 53] = av.lane(53);\n+                    r[i + 54] = av.lane(54);\n+                    r[i + 55] = av.lane(55);\n+                    r[i + 56] = av.lane(56);\n+                    r[i + 57] = av.lane(57);\n+                    r[i + 58] = av.lane(58);\n+                    r[i + 59] = av.lane(59);\n+                    r[i + 60] = av.lane(60);\n+                    r[i + 61] = av.lane(61);\n+                    r[i + 62] = av.lane(62);\n+                    r[i + 63] = av.lane(63);\n@@ -4477,1 +4471,1 @@\n-                        r[i+j]=av.lane(j);\n+                        r[i + j] = av.lane(j);\n@@ -4518,3 +4512,0 @@\n-\n-\n-\n@@ -4524,2 +4515,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = a[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = a[idx + i + origin];\n@@ -4527,1 +4518,1 @@\n-                res[i] = (long)0;\n+                res[i] = (long) 0;\n@@ -4550,1 +4541,1 @@\n-                res[i] = a[idx+i+origin];\n+                res[i] = a[idx + i + origin];\n@@ -4552,1 +4543,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n@@ -4578,2 +4569,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = mask[i] ? a[idx+i+origin] : (long)0;\n+            if(i + origin < SPECIES.length())\n+                res[i] = mask[i] ? a[idx + i + origin] : (long) 0;\n@@ -4581,1 +4572,1 @@\n-                res[i] = mask[i] ? b[idx+j] : (long)0;\n+                res[i] = mask[i] ? b[idx + j] : (long) 0;\n@@ -4612,1 +4603,1 @@\n-                res[i] = (long)0;\n+                res[i] = (long) 0;\n@@ -4614,1 +4605,1 @@\n-                res[i] = a[idx+j];\n+                res[i] = a[idx + j];\n@@ -4640,1 +4631,1 @@\n-                    res[i] = b[idx+i];\n+                    res[i] = b[idx + i];\n@@ -4642,1 +4633,1 @@\n-                    res[i] = a[idx+j];\n+                    res[i] = a[idx + j];\n@@ -4647,1 +4638,1 @@\n-                    res[i] = a[idx+SPECIES.length()-origin+i];\n+                    res[i] = a[idx + SPECIES.length() - origin + i];\n@@ -4649,1 +4640,1 @@\n-                    res[i] = b[idx+origin+j];\n+                    res[i] = b[idx + origin + j];\n@@ -4677,2 +4668,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = b[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = b[idx + i + origin];\n@@ -4680,1 +4671,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n@@ -4685,1 +4676,1 @@\n-            res[i] = mask[i] ? a[idx+i] : res[i];\n+            res[i] = mask[i] ? a[idx + i] : res[i];\n@@ -4691,1 +4682,1 @@\n-                    res1[i] = b[idx+i];\n+                    res1[i] = b[idx + i];\n@@ -4693,2 +4684,2 @@\n-                   res1[i] = res[j];\n-                   j++;\n+                    res1[i] = res[j];\n+                    j++;\n@@ -4700,1 +4691,1 @@\n-                    res1[i] = res[SPECIES.length()-origin+i];\n+                    res1[i] = res[SPECIES.length() - origin + i];\n@@ -4702,1 +4693,1 @@\n-                    res1[i] = b[idx+origin+j];\n+                    res1[i] = b[idx + origin + j];\n@@ -4754,1 +4745,1 @@\n-        return (long)((a&~(c))|(b&c));\n+        return (long) ((a &~ (c)) | (b & c));\n@@ -4757,1 +4748,1 @@\n-        return (long)((a&~(c))|(b&c));\n+        return (long) ((a &~ (c)) | (b & c));\n@@ -4973,1 +4964,1 @@\n-        return (long)(-((long)a));\n+        return (long) (-((long) a));\n@@ -4977,1 +4968,1 @@\n-        return (long)(-((long)a));\n+        return (long) (-((long) a));\n@@ -5029,1 +5020,1 @@\n-        return (long)(Math.abs((long)a));\n+        return (long) (Math.abs((long) a));\n@@ -5033,1 +5024,1 @@\n-        return (long)(Math.abs((long)a));\n+        return (long) (Math.abs((long) a));\n@@ -5086,1 +5077,1 @@\n-        return (long)(~((long)a));\n+        return (long) (~((long) a));\n@@ -5090,1 +5081,1 @@\n-        return (long)(~((long)a));\n+        return (long) (~((long) a));\n@@ -5148,1 +5139,1 @@\n-        return (long)((a==0?0:-1));\n+        return (long) ((a == 0 ? 0 : -1));\n@@ -5194,1 +5185,1 @@\n-        return (long)(Long.bitCount(a));\n+        return (long) (Long.bitCount(a));\n@@ -5243,1 +5234,1 @@\n-        return (long)(TRAILING_ZEROS_COUNT_scalar(a));\n+        return (long) (TRAILING_ZEROS_COUNT_scalar(a));\n@@ -5286,1 +5277,1 @@\n-        return (long)(LEADING_ZEROS_COUNT_scalar(a));\n+        return (long) (LEADING_ZEROS_COUNT_scalar(a));\n@@ -5329,1 +5320,1 @@\n-        return (long)(REVERSE_scalar(a));\n+        return (long) (REVERSE_scalar(a));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long512VectorTests.java","additions":297,"deletions":306,"binary":false,"changes":603,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,1 +74,1 @@\n-                Assert.assertEquals(r[i], mask[(i*8\/SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0);\n+                Assert.assertEquals(r[i], mask[(i * 8 \/ SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0);\n@@ -77,1 +77,1 @@\n-            Assert.assertEquals(r[i], mask[(i*8\/SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0, \"at index #\" + i);\n+            Assert.assertEquals(r[i], mask[(i * 8 \/ SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0, \"at index #\" + i);\n@@ -84,1 +84,1 @@\n-                            i -> (long)(i * 5));\n+                            i -> (long) (i * 5));\n@@ -88,1 +88,1 @@\n-                            i -> (((long)(i + 1) == 0) ? 1 : (long)(i + 1)));\n+                            i -> (((long) (i + 1) == 0) ? 1 : (long) (i + 1)));\n@@ -195,1 +195,1 @@\n-                            return new Object[]{fa, fb, bo};\n+                            return new Object[] {fa, fb, bo};\n@@ -206,1 +206,1 @@\n-                            return new Object[]{fa, fb, fm, bo};\n+                            return new Object[] {fa, fb, fm, bo};\n@@ -215,1 +215,1 @@\n-                    return new Object[]{fa, bo};\n+                    return new Object[] {fa, bo};\n@@ -225,1 +225,1 @@\n-                        return new Object[]{fa, fm, bo};\n+                        return new Object[] {fa, fm, bo};\n@@ -944,2 +944,0 @@\n-\n-\n@@ -1095,1 +1093,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long64VectorLoadStoreTests.java","additions":9,"deletions":12,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -93,1 +93,1 @@\n-            long[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            long[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -210,1 +210,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i+order[i + j]]);\n@@ -215,1 +215,1 @@\n-            Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i+order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]]);\n@@ -231,1 +231,1 @@\n-                    Assert.assertEquals(r[i + k], (long)0);\n+                    Assert.assertEquals(r[i + k], (long) 0);\n@@ -239,1 +239,1 @@\n-                Assert.assertEquals(r[idx], (long)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], (long) 0, \"at index #\" + idx);\n@@ -254,1 +254,1 @@\n-                        Assert.assertEquals(r[i + j], (long)0);\n+                        Assert.assertEquals(r[i + j], (long) 0);\n@@ -263,1 +263,1 @@\n-                Assert.assertEquals(r[idx], (long)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], (long) 0, \"at index #\" + idx);\n@@ -273,1 +273,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -278,1 +278,1 @@\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]]);\n@@ -288,1 +288,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + order[i + j]]);\n@@ -290,1 +290,1 @@\n-                         Assert.assertEquals(r[i+j], (long)0);\n+                         Assert.assertEquals(r[i + j], (long) 0);\n@@ -296,1 +296,1 @@\n-                Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -298,1 +298,1 @@\n-                Assert.assertEquals(r[i+j], (long)0, \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], (long) 0, \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -308,1 +308,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -310,1 +310,1 @@\n-                         Assert.assertEquals(r[i+j], (long)0);\n+                         Assert.assertEquals(r[i + j], (long) 0);\n@@ -316,1 +316,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -318,1 +318,1 @@\n-                Assert.assertEquals(r[i+j], (long)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], (long) 0, \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -327,1 +327,1 @@\n-                a[j]=a[idx];\n+                a[j] = a[idx];\n@@ -378,1 +378,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], (long)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])));\n+                Assert.assertEquals(r[i], f.apply(a[i], (long) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])));\n@@ -381,1 +381,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], (long)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])),\n+            Assert.assertEquals(r[i], f.apply(a[i], (long) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])),\n@@ -427,1 +427,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], (long)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n+                Assert.assertEquals(r[i], f.apply(a[i], (long) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n@@ -430,1 +430,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], (long)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]),\n+            Assert.assertEquals(r[i], f.apply(a[i], (long) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]),\n@@ -443,1 +443,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]));\n@@ -447,1 +447,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]), \"at index #\" + i + \", \" + j);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]), \"at index #\" + i + \", \" + j);\n@@ -461,1 +461,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]));\n@@ -465,1 +465,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i+j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i + j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n@@ -614,1 +614,0 @@\n-\n@@ -638,1 +637,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -643,1 +642,1 @@\n-            long[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            long[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -646,1 +645,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -648,1 +647,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -665,1 +664,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -670,1 +669,1 @@\n-            long[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            long[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -673,1 +672,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -675,1 +674,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -686,1 +685,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -691,1 +690,1 @@\n-            long[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            long[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -694,1 +693,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -696,1 +695,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -698,1 +697,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(r, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(r, i, i + SPECIES.length()))\n@@ -713,1 +712,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -718,1 +717,1 @@\n-            long[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            long[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -733,1 +732,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -738,1 +737,1 @@\n-            long[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            long[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -754,1 +753,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -759,1 +758,1 @@\n-            long[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            long[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -775,1 +774,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -780,1 +779,1 @@\n-            long[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            long[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -797,1 +796,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -802,1 +801,1 @@\n-            long[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            long[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -822,1 +821,1 @@\n-                return (int)0;\n+                return (int) 0;\n@@ -829,1 +828,1 @@\n-                            i -> (long)(-i * 5));\n+                            i -> (long) (-i * 5));\n@@ -833,1 +832,1 @@\n-                            i -> (long)(i * 5));\n+                            i -> (long) (i * 5));\n@@ -837,1 +836,1 @@\n-                            i -> (((long)(i + 1) == 0) ? 1 : (long)(i + 1)));\n+                            i -> (((long) (i + 1) == 0) ? 1 : (long) (i + 1)));\n@@ -841,1 +840,1 @@\n-                            i -> (long)intCornerCaseValue(i));\n+                            i -> (long) intCornerCaseValue(i));\n@@ -849,1 +848,1 @@\n-                Assert.assertEquals(r[i], (int)(a[i+offs]));\n+                Assert.assertEquals(r[i], (int) (a[i + offs]));\n@@ -852,1 +851,1 @@\n-            Assert.assertEquals(r[i], (int)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (int) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -862,1 +861,1 @@\n-                Assert.assertEquals(r[i], (long)(a[i+offs]));\n+                Assert.assertEquals(r[i], (long) (a[i + offs]));\n@@ -865,1 +864,1 @@\n-            Assert.assertEquals(r[i], (long)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (long) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -873,1 +872,1 @@\n-                Assert.assertEquals(r[i], (double)(a[i+offs]));\n+                Assert.assertEquals(r[i], (double) (a[i + offs]));\n@@ -876,1 +875,1 @@\n-            Assert.assertEquals(r[i], (double)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (double) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -880,1 +879,0 @@\n-\n@@ -888,1 +886,1 @@\n-                            i -> (long)(-i * 5));\n+                            i -> (long) (-i * 5));\n@@ -892,1 +890,1 @@\n-                            i -> (long)(i * 5));\n+                            i -> (long) (i * 5));\n@@ -896,1 +894,1 @@\n-                            i -> (((long)(i + 1) == 0) ? 1 : (long)(i + 1)));\n+                            i -> (((long) (i + 1) == 0) ? 1 : (long) (i + 1)));\n@@ -1033,1 +1031,1 @@\n-                    a[i] = (long)RAND.nextInt(upper);\n+                    a[i] = (long) RAND.nextInt(upper);\n@@ -1058,1 +1056,0 @@\n-\n@@ -1062,1 +1059,1 @@\n-                            i -> (long)i);\n+                            i -> (long) i);\n@@ -1066,1 +1063,1 @@\n-                            i -> (long)(i - (s * BUFFER_REPS \/ 2)));\n+                            i -> (long) (i - (s * BUFFER_REPS \/ 2)));\n@@ -1070,1 +1067,1 @@\n-                            i -> (long)(i + 1));\n+                            i -> (long) (i + 1));\n@@ -1074,1 +1071,1 @@\n-                            i -> (long)(i - 2));\n+                            i -> (long) (i - 2));\n@@ -1078,1 +1075,1 @@\n-                            i -> i%3 == 0 ? (long)i : (i%3 == 1 ? (long)(i + 1) : (long)(i - 2)));\n+                            i -> i % 3 == 0 ? (long) i : (i % 3 == 1 ? (long) (i + 1) : (long) (i - 2)));\n@@ -1152,1 +1149,1 @@\n-                return (long)0;\n+                return (long) 0;\n@@ -1188,1 +1185,1 @@\n-        return Long.rotateLeft(a, ((int)b));\n+        return Long.rotateLeft(a, ((int) b));\n@@ -1192,1 +1189,1 @@\n-        return Long.rotateRight(a, ((int)b));\n+        return Long.rotateRight(a, ((int) b));\n@@ -1207,1 +1204,0 @@\n-\n@@ -1254,1 +1250,1 @@\n-        LongVector three = LongVector.broadcast(SPECIES, (byte)-3);\n+        LongVector three = LongVector.broadcast(SPECIES, (byte) -3);\n@@ -1268,1 +1264,1 @@\n-        m = higher.min((long)-1).test(VectorOperators.IS_NEGATIVE);\n+        m = higher.min((long) -1).test(VectorOperators.IS_NEGATIVE);\n@@ -1271,1 +1267,1 @@\n-        assert(max == -3 + scale * (SPECIES.length()-1));\n+        assert(max == -3 + scale * (SPECIES.length() - 1));\n@@ -1286,1 +1282,1 @@\n-        LongVector io2 = (LongVector) VectorShuffle.iota(SPECIES,0,1,false).toVector();\n+        LongVector io2 = (LongVector) VectorShuffle.iota(SPECIES, 0, 1, false).toVector();\n@@ -1288,1 +1284,1 @@\n-        LongVector a = io.add((long)1); \/\/[1,2]\n+        LongVector a = io.add((long) 1); \/\/[1,2]\n@@ -1293,2 +1289,2 @@\n-        LongVector zab0 = a.rearrange(zip0,b); \/\/[1,-1]\n-        LongVector zab1 = a.rearrange(zip1,b); \/\/[2,-2]\n+        LongVector zab0 = a.rearrange(zip0, b); \/\/[1,-1]\n+        LongVector zab1 = a.rearrange(zip1, b); \/\/[2,-2]\n@@ -1299,2 +1295,2 @@\n-            manual[i+0] = abValues[i\/2];\n-            manual[i+1] = abValues[a.length() + i\/2];\n+            manual[i + 0] = abValues[i \/ 2];\n+            manual[i + 1] = abValues[a.length() + i \/ 2];\n@@ -1305,2 +1301,2 @@\n-        LongVector uab0 = zab0.rearrange(unz0,zab1);\n-        LongVector uab1 = zab0.rearrange(unz1,zab1);\n+        LongVector uab0 = zab0.rearrange(unz0, zab1);\n+        LongVector uab1 = zab0.rearrange(unz1, zab1);\n@@ -1363,1 +1359,1 @@\n-        return (long)(a + b);\n+        return (long) (a + b);\n@@ -1383,1 +1379,1 @@\n-        return (long)(a + b);\n+        return (long) (a + b);\n@@ -1439,1 +1435,1 @@\n-        return (long)(a - b);\n+        return (long) (a - b);\n@@ -1459,1 +1455,1 @@\n-        return (long)(a - b);\n+        return (long) (a - b);\n@@ -1515,1 +1511,1 @@\n-        return (long)(a * b);\n+        return (long) (a * b);\n@@ -1535,1 +1531,1 @@\n-        return (long)(a * b);\n+        return (long) (a * b);\n@@ -1594,1 +1590,1 @@\n-        return (long)(a \/ b);\n+        return (long) (a \/ b);\n@@ -1616,1 +1612,1 @@\n-        return (long)(a \/ b);\n+        return (long) (a \/ b);\n@@ -1685,1 +1681,1 @@\n-        return (long)((a)!=0?a:b);\n+        return (long) ((a) != 0 ? a : b);\n@@ -1726,1 +1722,1 @@\n-        return (long)(a & b);\n+        return (long) (a & b);\n@@ -1746,1 +1742,1 @@\n-        return (long)(a & b);\n+        return (long) (a & b);\n@@ -1788,1 +1784,1 @@\n-        return (long)(a & ~b);\n+        return (long) (a & ~b);\n@@ -1832,1 +1828,1 @@\n-        return (long)(a | b);\n+        return (long) (a | b);\n@@ -1852,1 +1848,1 @@\n-        return (long)(a | b);\n+        return (long) (a | b);\n@@ -1894,1 +1890,1 @@\n-        return (long)(a ^ b);\n+        return (long) (a ^ b);\n@@ -2178,1 +2174,1 @@\n-            av.lanewise(VectorOperators.OR, (long)b[i]).intoArray(r, i);\n+            av.lanewise(VectorOperators.OR, (long) b[i]).intoArray(r, i);\n@@ -2197,1 +2193,1 @@\n-            av.lanewise(VectorOperators.OR, (long)b[i], vmask).intoArray(r, i);\n+            av.lanewise(VectorOperators.OR, (long) b[i], vmask).intoArray(r, i);\n@@ -2212,1 +2208,1 @@\n-            av.lanewise(VectorOperators.ADD, (long)b[i]).intoArray(r, i);\n+            av.lanewise(VectorOperators.ADD, (long) b[i]).intoArray(r, i);\n@@ -2229,1 +2225,1 @@\n-            av.lanewise(VectorOperators.ADD, (long)b[i], vmask).intoArray(r, i);\n+            av.lanewise(VectorOperators.ADD, (long) b[i], vmask).intoArray(r, i);\n@@ -2236,1 +2232,1 @@\n-        return (long)((a << b));\n+        return (long) ((a << b));\n@@ -2284,1 +2280,1 @@\n-        return (long)((a >> b));\n+        return (long) ((a >> b));\n@@ -2332,1 +2328,1 @@\n-        return (long)((a >>> b));\n+        return (long) ((a >>> b));\n@@ -2380,1 +2376,1 @@\n-        return (long)((a << b));\n+        return (long) ((a << b));\n@@ -2392,1 +2388,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i]).intoArray(r, i);\n@@ -2413,1 +2409,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i], vmask).intoArray(r, i);\n@@ -2426,1 +2422,1 @@\n-        return (long)((a >>> b));\n+        return (long) ((a >>> b));\n@@ -2438,1 +2434,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i]).intoArray(r, i);\n@@ -2459,1 +2455,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i], vmask).intoArray(r, i);\n@@ -2472,1 +2468,1 @@\n-        return (long)((a >> b));\n+        return (long) ((a >> b));\n@@ -2484,1 +2480,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i]).intoArray(r, i);\n@@ -2505,1 +2501,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i], vmask).intoArray(r, i);\n@@ -2518,1 +2514,1 @@\n-        return (long)(ROR_scalar(a,b));\n+        return (long) (ROR_scalar(a, b));\n@@ -2562,1 +2558,1 @@\n-        return (long)(ROL_scalar(a,b));\n+        return (long) (ROL_scalar(a, b));\n@@ -2606,1 +2602,1 @@\n-        return (long)(ROR_scalar(a,b));\n+        return (long) (ROR_scalar(a, b));\n@@ -2618,1 +2614,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i]).intoArray(r, i);\n@@ -2639,1 +2635,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i], vmask).intoArray(r, i);\n@@ -2648,1 +2644,1 @@\n-        return (long)(ROL_scalar(a,b));\n+        return (long) (ROL_scalar(a, b));\n@@ -2660,1 +2656,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i]).intoArray(r, i);\n@@ -2681,1 +2677,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i], vmask).intoArray(r, i);\n@@ -2689,1 +2685,1 @@\n-        return (long)(Math.min(a, b));\n+        return (long) (Math.min(a, b));\n@@ -2709,1 +2705,1 @@\n-        return (long)(Math.min(a, b));\n+        return (long) (Math.min(a, b));\n@@ -2727,1 +2723,1 @@\n-        return (long)(Math.max(a, b));\n+        return (long) (Math.max(a, b));\n@@ -2747,1 +2743,1 @@\n-        return (long)(Math.max(a, b));\n+        return (long) (Math.max(a, b));\n@@ -3585,1 +3581,1 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (long)(65535+i)).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length() - 1)), (long) (65535 + i)).intoArray(r, i);\n@@ -3591,1 +3587,1 @@\n-            assertInsertArraysEquals(r, a, (long)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+            assertInsertArraysEquals(r, a, (long) (65535 + i), (j++ & (SPECIES.length() - 1)), i , i + SPECIES.length());\n@@ -3595,1 +3591,1 @@\n-        return bits(a)==0;\n+        return bits(a) == 0;\n@@ -3628,1 +3624,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_DEFAULT(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_DEFAULT(a[i + j]));\n@@ -3633,1 +3629,1 @@\n-        return bits(a)<0;\n+        return bits(a) < 0;\n@@ -3666,1 +3662,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_NEGATIVE(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_NEGATIVE(a[i + j]));\n@@ -4176,1 +4172,0 @@\n-\n@@ -4214,1 +4209,0 @@\n-\n@@ -4342,1 +4336,1 @@\n-                    r[i]=av.lane(0);\n+                    r[i] = av.lane(0);\n@@ -4344,2 +4338,2 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n@@ -4347,4 +4341,4 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n@@ -4352,8 +4346,8 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n@@ -4361,16 +4355,16 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n@@ -4378,32 +4372,32 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n@@ -4411,64 +4405,64 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n-                    r[i+32]=av.lane(32);\n-                    r[i+33]=av.lane(33);\n-                    r[i+34]=av.lane(34);\n-                    r[i+35]=av.lane(35);\n-                    r[i+36]=av.lane(36);\n-                    r[i+37]=av.lane(37);\n-                    r[i+38]=av.lane(38);\n-                    r[i+39]=av.lane(39);\n-                    r[i+40]=av.lane(40);\n-                    r[i+41]=av.lane(41);\n-                    r[i+42]=av.lane(42);\n-                    r[i+43]=av.lane(43);\n-                    r[i+44]=av.lane(44);\n-                    r[i+45]=av.lane(45);\n-                    r[i+46]=av.lane(46);\n-                    r[i+47]=av.lane(47);\n-                    r[i+48]=av.lane(48);\n-                    r[i+49]=av.lane(49);\n-                    r[i+50]=av.lane(50);\n-                    r[i+51]=av.lane(51);\n-                    r[i+52]=av.lane(52);\n-                    r[i+53]=av.lane(53);\n-                    r[i+54]=av.lane(54);\n-                    r[i+55]=av.lane(55);\n-                    r[i+56]=av.lane(56);\n-                    r[i+57]=av.lane(57);\n-                    r[i+58]=av.lane(58);\n-                    r[i+59]=av.lane(59);\n-                    r[i+60]=av.lane(60);\n-                    r[i+61]=av.lane(61);\n-                    r[i+62]=av.lane(62);\n-                    r[i+63]=av.lane(63);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n+                    r[i + 32] = av.lane(32);\n+                    r[i + 33] = av.lane(33);\n+                    r[i + 34] = av.lane(34);\n+                    r[i + 35] = av.lane(35);\n+                    r[i + 36] = av.lane(36);\n+                    r[i + 37] = av.lane(37);\n+                    r[i + 38] = av.lane(38);\n+                    r[i + 39] = av.lane(39);\n+                    r[i + 40] = av.lane(40);\n+                    r[i + 41] = av.lane(41);\n+                    r[i + 42] = av.lane(42);\n+                    r[i + 43] = av.lane(43);\n+                    r[i + 44] = av.lane(44);\n+                    r[i + 45] = av.lane(45);\n+                    r[i + 46] = av.lane(46);\n+                    r[i + 47] = av.lane(47);\n+                    r[i + 48] = av.lane(48);\n+                    r[i + 49] = av.lane(49);\n+                    r[i + 50] = av.lane(50);\n+                    r[i + 51] = av.lane(51);\n+                    r[i + 52] = av.lane(52);\n+                    r[i + 53] = av.lane(53);\n+                    r[i + 54] = av.lane(54);\n+                    r[i + 55] = av.lane(55);\n+                    r[i + 56] = av.lane(56);\n+                    r[i + 57] = av.lane(57);\n+                    r[i + 58] = av.lane(58);\n+                    r[i + 59] = av.lane(59);\n+                    r[i + 60] = av.lane(60);\n+                    r[i + 61] = av.lane(61);\n+                    r[i + 62] = av.lane(62);\n+                    r[i + 63] = av.lane(63);\n@@ -4477,1 +4471,1 @@\n-                        r[i+j]=av.lane(j);\n+                        r[i + j] = av.lane(j);\n@@ -4518,3 +4512,0 @@\n-\n-\n-\n@@ -4524,2 +4515,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = a[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = a[idx + i + origin];\n@@ -4527,1 +4518,1 @@\n-                res[i] = (long)0;\n+                res[i] = (long) 0;\n@@ -4550,1 +4541,1 @@\n-                res[i] = a[idx+i+origin];\n+                res[i] = a[idx + i + origin];\n@@ -4552,1 +4543,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n@@ -4578,2 +4569,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = mask[i] ? a[idx+i+origin] : (long)0;\n+            if(i + origin < SPECIES.length())\n+                res[i] = mask[i] ? a[idx + i + origin] : (long) 0;\n@@ -4581,1 +4572,1 @@\n-                res[i] = mask[i] ? b[idx+j] : (long)0;\n+                res[i] = mask[i] ? b[idx + j] : (long) 0;\n@@ -4612,1 +4603,1 @@\n-                res[i] = (long)0;\n+                res[i] = (long) 0;\n@@ -4614,1 +4605,1 @@\n-                res[i] = a[idx+j];\n+                res[i] = a[idx + j];\n@@ -4640,1 +4631,1 @@\n-                    res[i] = b[idx+i];\n+                    res[i] = b[idx + i];\n@@ -4642,1 +4633,1 @@\n-                    res[i] = a[idx+j];\n+                    res[i] = a[idx + j];\n@@ -4647,1 +4638,1 @@\n-                    res[i] = a[idx+SPECIES.length()-origin+i];\n+                    res[i] = a[idx + SPECIES.length() - origin + i];\n@@ -4649,1 +4640,1 @@\n-                    res[i] = b[idx+origin+j];\n+                    res[i] = b[idx + origin + j];\n@@ -4677,2 +4668,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = b[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = b[idx + i + origin];\n@@ -4680,1 +4671,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n@@ -4685,1 +4676,1 @@\n-            res[i] = mask[i] ? a[idx+i] : res[i];\n+            res[i] = mask[i] ? a[idx + i] : res[i];\n@@ -4691,1 +4682,1 @@\n-                    res1[i] = b[idx+i];\n+                    res1[i] = b[idx + i];\n@@ -4693,2 +4684,2 @@\n-                   res1[i] = res[j];\n-                   j++;\n+                    res1[i] = res[j];\n+                    j++;\n@@ -4700,1 +4691,1 @@\n-                    res1[i] = res[SPECIES.length()-origin+i];\n+                    res1[i] = res[SPECIES.length() - origin + i];\n@@ -4702,1 +4693,1 @@\n-                    res1[i] = b[idx+origin+j];\n+                    res1[i] = b[idx + origin + j];\n@@ -4754,1 +4745,1 @@\n-        return (long)((a&~(c))|(b&c));\n+        return (long) ((a &~ (c)) | (b & c));\n@@ -4757,1 +4748,1 @@\n-        return (long)((a&~(c))|(b&c));\n+        return (long) ((a &~ (c)) | (b & c));\n@@ -4973,1 +4964,1 @@\n-        return (long)(-((long)a));\n+        return (long) (-((long) a));\n@@ -4977,1 +4968,1 @@\n-        return (long)(-((long)a));\n+        return (long) (-((long) a));\n@@ -5029,1 +5020,1 @@\n-        return (long)(Math.abs((long)a));\n+        return (long) (Math.abs((long) a));\n@@ -5033,1 +5024,1 @@\n-        return (long)(Math.abs((long)a));\n+        return (long) (Math.abs((long) a));\n@@ -5086,1 +5077,1 @@\n-        return (long)(~((long)a));\n+        return (long) (~((long) a));\n@@ -5090,1 +5081,1 @@\n-        return (long)(~((long)a));\n+        return (long) (~((long) a));\n@@ -5148,1 +5139,1 @@\n-        return (long)((a==0?0:-1));\n+        return (long) ((a == 0 ? 0 : -1));\n@@ -5194,1 +5185,1 @@\n-        return (long)(Long.bitCount(a));\n+        return (long) (Long.bitCount(a));\n@@ -5243,1 +5234,1 @@\n-        return (long)(TRAILING_ZEROS_COUNT_scalar(a));\n+        return (long) (TRAILING_ZEROS_COUNT_scalar(a));\n@@ -5286,1 +5277,1 @@\n-        return (long)(LEADING_ZEROS_COUNT_scalar(a));\n+        return (long) (LEADING_ZEROS_COUNT_scalar(a));\n@@ -5329,1 +5320,1 @@\n-        return (long)(REVERSE_scalar(a));\n+        return (long) (REVERSE_scalar(a));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long64VectorTests.java","additions":297,"deletions":306,"binary":false,"changes":603,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -83,1 +83,1 @@\n-                Assert.assertEquals(r[i], mask[(i*8\/SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0);\n+                Assert.assertEquals(r[i], mask[(i * 8 \/ SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0);\n@@ -86,1 +86,1 @@\n-            Assert.assertEquals(r[i], mask[(i*8\/SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0, \"at index #\" + i);\n+            Assert.assertEquals(r[i], mask[(i * 8 \/ SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0, \"at index #\" + i);\n@@ -93,1 +93,1 @@\n-                            i -> (long)(i * 5));\n+                            i -> (long) (i * 5));\n@@ -97,1 +97,1 @@\n-                            i -> (((long)(i + 1) == 0) ? 1 : (long)(i + 1)));\n+                            i -> (((long) (i + 1) == 0) ? 1 : (long) (i + 1)));\n@@ -204,1 +204,1 @@\n-                            return new Object[]{fa, fb, bo};\n+                            return new Object[] {fa, fb, bo};\n@@ -215,1 +215,1 @@\n-                            return new Object[]{fa, fb, fm, bo};\n+                            return new Object[] {fa, fb, fm, bo};\n@@ -224,1 +224,1 @@\n-                    return new Object[]{fa, bo};\n+                    return new Object[] {fa, bo};\n@@ -234,1 +234,1 @@\n-                        return new Object[]{fa, fm, bo};\n+                        return new Object[] {fa, fm, bo};\n@@ -953,2 +953,0 @@\n-\n-\n@@ -1104,1 +1102,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/LongMaxVectorLoadStoreTests.java","additions":9,"deletions":12,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -93,1 +93,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -98,1 +98,1 @@\n-            long[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            long[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -215,1 +215,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i+order[i + j]]);\n@@ -220,1 +220,1 @@\n-            Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i+order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]]);\n@@ -236,1 +236,1 @@\n-                    Assert.assertEquals(r[i + k], (long)0);\n+                    Assert.assertEquals(r[i + k], (long) 0);\n@@ -244,1 +244,1 @@\n-                Assert.assertEquals(r[idx], (long)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], (long) 0, \"at index #\" + idx);\n@@ -259,1 +259,1 @@\n-                        Assert.assertEquals(r[i + j], (long)0);\n+                        Assert.assertEquals(r[i + j], (long) 0);\n@@ -268,1 +268,1 @@\n-                Assert.assertEquals(r[idx], (long)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], (long) 0, \"at index #\" + idx);\n@@ -278,1 +278,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -283,1 +283,1 @@\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]]);\n@@ -293,1 +293,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + order[i + j]]);\n@@ -295,1 +295,1 @@\n-                         Assert.assertEquals(r[i+j], (long)0);\n+                         Assert.assertEquals(r[i + j], (long) 0);\n@@ -301,1 +301,1 @@\n-                Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -303,1 +303,1 @@\n-                Assert.assertEquals(r[i+j], (long)0, \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], (long) 0, \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -313,1 +313,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -315,1 +315,1 @@\n-                         Assert.assertEquals(r[i+j], (long)0);\n+                         Assert.assertEquals(r[i + j], (long) 0);\n@@ -321,1 +321,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -323,1 +323,1 @@\n-                Assert.assertEquals(r[i+j], (long)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], (long) 0, \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -332,1 +332,1 @@\n-                a[j]=a[idx];\n+                a[j] = a[idx];\n@@ -383,1 +383,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], (long)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])));\n+                Assert.assertEquals(r[i], f.apply(a[i], (long) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])));\n@@ -386,1 +386,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], (long)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])),\n+            Assert.assertEquals(r[i], f.apply(a[i], (long) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])),\n@@ -432,1 +432,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], (long)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n+                Assert.assertEquals(r[i], f.apply(a[i], (long) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n@@ -435,1 +435,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], (long)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]),\n+            Assert.assertEquals(r[i], f.apply(a[i], (long) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]),\n@@ -448,1 +448,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]));\n@@ -452,1 +452,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]), \"at index #\" + i + \", \" + j);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]), \"at index #\" + i + \", \" + j);\n@@ -466,1 +466,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]));\n@@ -470,1 +470,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i+j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i + j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n@@ -619,1 +619,0 @@\n-\n@@ -643,1 +642,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -648,1 +647,1 @@\n-            long[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            long[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -651,1 +650,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -653,1 +652,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -670,1 +669,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -675,1 +674,1 @@\n-            long[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            long[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -678,1 +677,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -680,1 +679,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -691,1 +690,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -696,1 +695,1 @@\n-            long[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            long[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -699,1 +698,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -701,1 +700,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -703,1 +702,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(r, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(r, i, i + SPECIES.length()))\n@@ -718,1 +717,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -723,1 +722,1 @@\n-            long[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            long[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -738,1 +737,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -743,1 +742,1 @@\n-            long[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            long[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -759,1 +758,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -764,1 +763,1 @@\n-            long[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            long[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -780,1 +779,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -785,1 +784,1 @@\n-            long[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            long[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -802,1 +801,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -807,1 +806,1 @@\n-            long[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            long[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -827,1 +826,1 @@\n-                return (int)0;\n+                return (int) 0;\n@@ -834,1 +833,1 @@\n-                            i -> (long)(-i * 5));\n+                            i -> (long) (-i * 5));\n@@ -838,1 +837,1 @@\n-                            i -> (long)(i * 5));\n+                            i -> (long) (i * 5));\n@@ -842,1 +841,1 @@\n-                            i -> (((long)(i + 1) == 0) ? 1 : (long)(i + 1)));\n+                            i -> (((long) (i + 1) == 0) ? 1 : (long) (i + 1)));\n@@ -846,1 +845,1 @@\n-                            i -> (long)intCornerCaseValue(i));\n+                            i -> (long) intCornerCaseValue(i));\n@@ -854,1 +853,1 @@\n-                Assert.assertEquals(r[i], (int)(a[i+offs]));\n+                Assert.assertEquals(r[i], (int) (a[i + offs]));\n@@ -857,1 +856,1 @@\n-            Assert.assertEquals(r[i], (int)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (int) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -867,1 +866,1 @@\n-                Assert.assertEquals(r[i], (long)(a[i+offs]));\n+                Assert.assertEquals(r[i], (long) (a[i + offs]));\n@@ -870,1 +869,1 @@\n-            Assert.assertEquals(r[i], (long)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (long) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -878,1 +877,1 @@\n-                Assert.assertEquals(r[i], (double)(a[i+offs]));\n+                Assert.assertEquals(r[i], (double) (a[i + offs]));\n@@ -881,1 +880,1 @@\n-            Assert.assertEquals(r[i], (double)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (double) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -885,1 +884,0 @@\n-\n@@ -893,1 +891,1 @@\n-                            i -> (long)(-i * 5));\n+                            i -> (long) (-i * 5));\n@@ -897,1 +895,1 @@\n-                            i -> (long)(i * 5));\n+                            i -> (long) (i * 5));\n@@ -901,1 +899,1 @@\n-                            i -> (((long)(i + 1) == 0) ? 1 : (long)(i + 1)));\n+                            i -> (((long) (i + 1) == 0) ? 1 : (long) (i + 1)));\n@@ -1038,1 +1036,1 @@\n-                    a[i] = (long)RAND.nextInt(upper);\n+                    a[i] = (long) RAND.nextInt(upper);\n@@ -1063,1 +1061,0 @@\n-\n@@ -1067,1 +1064,1 @@\n-                            i -> (long)i);\n+                            i -> (long) i);\n@@ -1071,1 +1068,1 @@\n-                            i -> (long)(i - (s * BUFFER_REPS \/ 2)));\n+                            i -> (long) (i - (s * BUFFER_REPS \/ 2)));\n@@ -1075,1 +1072,1 @@\n-                            i -> (long)(i + 1));\n+                            i -> (long) (i + 1));\n@@ -1079,1 +1076,1 @@\n-                            i -> (long)(i - 2));\n+                            i -> (long) (i - 2));\n@@ -1083,1 +1080,1 @@\n-                            i -> i%3 == 0 ? (long)i : (i%3 == 1 ? (long)(i + 1) : (long)(i - 2)));\n+                            i -> i % 3 == 0 ? (long) i : (i % 3 == 1 ? (long) (i + 1) : (long) (i - 2)));\n@@ -1157,1 +1154,1 @@\n-                return (long)0;\n+                return (long) 0;\n@@ -1193,1 +1190,1 @@\n-        return Long.rotateLeft(a, ((int)b));\n+        return Long.rotateLeft(a, ((int) b));\n@@ -1197,1 +1194,1 @@\n-        return Long.rotateRight(a, ((int)b));\n+        return Long.rotateRight(a, ((int) b));\n@@ -1212,1 +1209,0 @@\n-\n@@ -1259,1 +1255,1 @@\n-        LongVector three = LongVector.broadcast(SPECIES, (byte)-3);\n+        LongVector three = LongVector.broadcast(SPECIES, (byte) -3);\n@@ -1273,1 +1269,1 @@\n-        m = higher.min((long)-1).test(VectorOperators.IS_NEGATIVE);\n+        m = higher.min((long) -1).test(VectorOperators.IS_NEGATIVE);\n@@ -1276,1 +1272,1 @@\n-        assert(max == -3 + scale * (SPECIES.length()-1));\n+        assert(max == -3 + scale * (SPECIES.length() - 1));\n@@ -1291,1 +1287,1 @@\n-        LongVector io2 = (LongVector) VectorShuffle.iota(SPECIES,0,1,false).toVector();\n+        LongVector io2 = (LongVector) VectorShuffle.iota(SPECIES, 0, 1, false).toVector();\n@@ -1293,1 +1289,1 @@\n-        LongVector a = io.add((long)1); \/\/[1,2]\n+        LongVector a = io.add((long) 1); \/\/[1,2]\n@@ -1298,2 +1294,2 @@\n-        LongVector zab0 = a.rearrange(zip0,b); \/\/[1,-1]\n-        LongVector zab1 = a.rearrange(zip1,b); \/\/[2,-2]\n+        LongVector zab0 = a.rearrange(zip0, b); \/\/[1,-1]\n+        LongVector zab1 = a.rearrange(zip1, b); \/\/[2,-2]\n@@ -1304,2 +1300,2 @@\n-            manual[i+0] = abValues[i\/2];\n-            manual[i+1] = abValues[a.length() + i\/2];\n+            manual[i + 0] = abValues[i \/ 2];\n+            manual[i + 1] = abValues[a.length() + i \/ 2];\n@@ -1310,2 +1306,2 @@\n-        LongVector uab0 = zab0.rearrange(unz0,zab1);\n-        LongVector uab1 = zab0.rearrange(unz1,zab1);\n+        LongVector uab0 = zab0.rearrange(unz0, zab1);\n+        LongVector uab1 = zab0.rearrange(unz1, zab1);\n@@ -1368,1 +1364,1 @@\n-        return (long)(a + b);\n+        return (long) (a + b);\n@@ -1388,1 +1384,1 @@\n-        return (long)(a + b);\n+        return (long) (a + b);\n@@ -1444,1 +1440,1 @@\n-        return (long)(a - b);\n+        return (long) (a - b);\n@@ -1464,1 +1460,1 @@\n-        return (long)(a - b);\n+        return (long) (a - b);\n@@ -1520,1 +1516,1 @@\n-        return (long)(a * b);\n+        return (long) (a * b);\n@@ -1540,1 +1536,1 @@\n-        return (long)(a * b);\n+        return (long) (a * b);\n@@ -1599,1 +1595,1 @@\n-        return (long)(a \/ b);\n+        return (long) (a \/ b);\n@@ -1621,1 +1617,1 @@\n-        return (long)(a \/ b);\n+        return (long) (a \/ b);\n@@ -1690,1 +1686,1 @@\n-        return (long)((a)!=0?a:b);\n+        return (long) ((a) != 0 ? a : b);\n@@ -1731,1 +1727,1 @@\n-        return (long)(a & b);\n+        return (long) (a & b);\n@@ -1751,1 +1747,1 @@\n-        return (long)(a & b);\n+        return (long) (a & b);\n@@ -1793,1 +1789,1 @@\n-        return (long)(a & ~b);\n+        return (long) (a & ~b);\n@@ -1837,1 +1833,1 @@\n-        return (long)(a | b);\n+        return (long) (a | b);\n@@ -1857,1 +1853,1 @@\n-        return (long)(a | b);\n+        return (long) (a | b);\n@@ -1899,1 +1895,1 @@\n-        return (long)(a ^ b);\n+        return (long) (a ^ b);\n@@ -2183,1 +2179,1 @@\n-            av.lanewise(VectorOperators.OR, (long)b[i]).intoArray(r, i);\n+            av.lanewise(VectorOperators.OR, (long) b[i]).intoArray(r, i);\n@@ -2202,1 +2198,1 @@\n-            av.lanewise(VectorOperators.OR, (long)b[i], vmask).intoArray(r, i);\n+            av.lanewise(VectorOperators.OR, (long) b[i], vmask).intoArray(r, i);\n@@ -2217,1 +2213,1 @@\n-            av.lanewise(VectorOperators.ADD, (long)b[i]).intoArray(r, i);\n+            av.lanewise(VectorOperators.ADD, (long) b[i]).intoArray(r, i);\n@@ -2234,1 +2230,1 @@\n-            av.lanewise(VectorOperators.ADD, (long)b[i], vmask).intoArray(r, i);\n+            av.lanewise(VectorOperators.ADD, (long) b[i], vmask).intoArray(r, i);\n@@ -2241,1 +2237,1 @@\n-        return (long)((a << b));\n+        return (long) ((a << b));\n@@ -2289,1 +2285,1 @@\n-        return (long)((a >> b));\n+        return (long) ((a >> b));\n@@ -2337,1 +2333,1 @@\n-        return (long)((a >>> b));\n+        return (long) ((a >>> b));\n@@ -2385,1 +2381,1 @@\n-        return (long)((a << b));\n+        return (long) ((a << b));\n@@ -2397,1 +2393,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i]).intoArray(r, i);\n@@ -2418,1 +2414,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i], vmask).intoArray(r, i);\n@@ -2431,1 +2427,1 @@\n-        return (long)((a >>> b));\n+        return (long) ((a >>> b));\n@@ -2443,1 +2439,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i]).intoArray(r, i);\n@@ -2464,1 +2460,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i], vmask).intoArray(r, i);\n@@ -2477,1 +2473,1 @@\n-        return (long)((a >> b));\n+        return (long) ((a >> b));\n@@ -2489,1 +2485,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i]).intoArray(r, i);\n@@ -2510,1 +2506,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i], vmask).intoArray(r, i);\n@@ -2523,1 +2519,1 @@\n-        return (long)(ROR_scalar(a,b));\n+        return (long) (ROR_scalar(a, b));\n@@ -2567,1 +2563,1 @@\n-        return (long)(ROL_scalar(a,b));\n+        return (long) (ROL_scalar(a, b));\n@@ -2611,1 +2607,1 @@\n-        return (long)(ROR_scalar(a,b));\n+        return (long) (ROR_scalar(a, b));\n@@ -2623,1 +2619,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i]).intoArray(r, i);\n@@ -2644,1 +2640,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i], vmask).intoArray(r, i);\n@@ -2653,1 +2649,1 @@\n-        return (long)(ROL_scalar(a,b));\n+        return (long) (ROL_scalar(a, b));\n@@ -2665,1 +2661,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i]).intoArray(r, i);\n@@ -2686,1 +2682,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i], vmask).intoArray(r, i);\n@@ -2694,1 +2690,1 @@\n-        return (long)(Math.min(a, b));\n+        return (long) (Math.min(a, b));\n@@ -2714,1 +2710,1 @@\n-        return (long)(Math.min(a, b));\n+        return (long) (Math.min(a, b));\n@@ -2732,1 +2728,1 @@\n-        return (long)(Math.max(a, b));\n+        return (long) (Math.max(a, b));\n@@ -2752,1 +2748,1 @@\n-        return (long)(Math.max(a, b));\n+        return (long) (Math.max(a, b));\n@@ -3590,1 +3586,1 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (long)(65535+i)).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length() - 1)), (long) (65535 + i)).intoArray(r, i);\n@@ -3596,1 +3592,1 @@\n-            assertInsertArraysEquals(r, a, (long)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+            assertInsertArraysEquals(r, a, (long) (65535 + i), (j++ & (SPECIES.length() - 1)), i , i + SPECIES.length());\n@@ -3600,1 +3596,1 @@\n-        return bits(a)==0;\n+        return bits(a) == 0;\n@@ -3633,1 +3629,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_DEFAULT(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_DEFAULT(a[i + j]));\n@@ -3638,1 +3634,1 @@\n-        return bits(a)<0;\n+        return bits(a) < 0;\n@@ -3671,1 +3667,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_NEGATIVE(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_NEGATIVE(a[i + j]));\n@@ -4181,1 +4177,0 @@\n-\n@@ -4219,1 +4214,0 @@\n-\n@@ -4347,1 +4341,1 @@\n-                    r[i]=av.lane(0);\n+                    r[i] = av.lane(0);\n@@ -4349,2 +4343,2 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n@@ -4352,4 +4346,4 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n@@ -4357,8 +4351,8 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n@@ -4366,16 +4360,16 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n@@ -4383,32 +4377,32 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n@@ -4416,64 +4410,64 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n-                    r[i+32]=av.lane(32);\n-                    r[i+33]=av.lane(33);\n-                    r[i+34]=av.lane(34);\n-                    r[i+35]=av.lane(35);\n-                    r[i+36]=av.lane(36);\n-                    r[i+37]=av.lane(37);\n-                    r[i+38]=av.lane(38);\n-                    r[i+39]=av.lane(39);\n-                    r[i+40]=av.lane(40);\n-                    r[i+41]=av.lane(41);\n-                    r[i+42]=av.lane(42);\n-                    r[i+43]=av.lane(43);\n-                    r[i+44]=av.lane(44);\n-                    r[i+45]=av.lane(45);\n-                    r[i+46]=av.lane(46);\n-                    r[i+47]=av.lane(47);\n-                    r[i+48]=av.lane(48);\n-                    r[i+49]=av.lane(49);\n-                    r[i+50]=av.lane(50);\n-                    r[i+51]=av.lane(51);\n-                    r[i+52]=av.lane(52);\n-                    r[i+53]=av.lane(53);\n-                    r[i+54]=av.lane(54);\n-                    r[i+55]=av.lane(55);\n-                    r[i+56]=av.lane(56);\n-                    r[i+57]=av.lane(57);\n-                    r[i+58]=av.lane(58);\n-                    r[i+59]=av.lane(59);\n-                    r[i+60]=av.lane(60);\n-                    r[i+61]=av.lane(61);\n-                    r[i+62]=av.lane(62);\n-                    r[i+63]=av.lane(63);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n+                    r[i + 32] = av.lane(32);\n+                    r[i + 33] = av.lane(33);\n+                    r[i + 34] = av.lane(34);\n+                    r[i + 35] = av.lane(35);\n+                    r[i + 36] = av.lane(36);\n+                    r[i + 37] = av.lane(37);\n+                    r[i + 38] = av.lane(38);\n+                    r[i + 39] = av.lane(39);\n+                    r[i + 40] = av.lane(40);\n+                    r[i + 41] = av.lane(41);\n+                    r[i + 42] = av.lane(42);\n+                    r[i + 43] = av.lane(43);\n+                    r[i + 44] = av.lane(44);\n+                    r[i + 45] = av.lane(45);\n+                    r[i + 46] = av.lane(46);\n+                    r[i + 47] = av.lane(47);\n+                    r[i + 48] = av.lane(48);\n+                    r[i + 49] = av.lane(49);\n+                    r[i + 50] = av.lane(50);\n+                    r[i + 51] = av.lane(51);\n+                    r[i + 52] = av.lane(52);\n+                    r[i + 53] = av.lane(53);\n+                    r[i + 54] = av.lane(54);\n+                    r[i + 55] = av.lane(55);\n+                    r[i + 56] = av.lane(56);\n+                    r[i + 57] = av.lane(57);\n+                    r[i + 58] = av.lane(58);\n+                    r[i + 59] = av.lane(59);\n+                    r[i + 60] = av.lane(60);\n+                    r[i + 61] = av.lane(61);\n+                    r[i + 62] = av.lane(62);\n+                    r[i + 63] = av.lane(63);\n@@ -4482,1 +4476,1 @@\n-                        r[i+j]=av.lane(j);\n+                        r[i + j] = av.lane(j);\n@@ -4523,3 +4517,0 @@\n-\n-\n-\n@@ -4529,2 +4520,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = a[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = a[idx + i + origin];\n@@ -4532,1 +4523,1 @@\n-                res[i] = (long)0;\n+                res[i] = (long) 0;\n@@ -4555,1 +4546,1 @@\n-                res[i] = a[idx+i+origin];\n+                res[i] = a[idx + i + origin];\n@@ -4557,1 +4548,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n@@ -4583,2 +4574,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = mask[i] ? a[idx+i+origin] : (long)0;\n+            if(i + origin < SPECIES.length())\n+                res[i] = mask[i] ? a[idx + i + origin] : (long) 0;\n@@ -4586,1 +4577,1 @@\n-                res[i] = mask[i] ? b[idx+j] : (long)0;\n+                res[i] = mask[i] ? b[idx + j] : (long) 0;\n@@ -4617,1 +4608,1 @@\n-                res[i] = (long)0;\n+                res[i] = (long) 0;\n@@ -4619,1 +4610,1 @@\n-                res[i] = a[idx+j];\n+                res[i] = a[idx + j];\n@@ -4645,1 +4636,1 @@\n-                    res[i] = b[idx+i];\n+                    res[i] = b[idx + i];\n@@ -4647,1 +4638,1 @@\n-                    res[i] = a[idx+j];\n+                    res[i] = a[idx + j];\n@@ -4652,1 +4643,1 @@\n-                    res[i] = a[idx+SPECIES.length()-origin+i];\n+                    res[i] = a[idx + SPECIES.length() - origin + i];\n@@ -4654,1 +4645,1 @@\n-                    res[i] = b[idx+origin+j];\n+                    res[i] = b[idx + origin + j];\n@@ -4682,2 +4673,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = b[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = b[idx + i + origin];\n@@ -4685,1 +4676,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n@@ -4690,1 +4681,1 @@\n-            res[i] = mask[i] ? a[idx+i] : res[i];\n+            res[i] = mask[i] ? a[idx + i] : res[i];\n@@ -4696,1 +4687,1 @@\n-                    res1[i] = b[idx+i];\n+                    res1[i] = b[idx + i];\n@@ -4698,2 +4689,2 @@\n-                   res1[i] = res[j];\n-                   j++;\n+                    res1[i] = res[j];\n+                    j++;\n@@ -4705,1 +4696,1 @@\n-                    res1[i] = res[SPECIES.length()-origin+i];\n+                    res1[i] = res[SPECIES.length() - origin + i];\n@@ -4707,1 +4698,1 @@\n-                    res1[i] = b[idx+origin+j];\n+                    res1[i] = b[idx + origin + j];\n@@ -4759,1 +4750,1 @@\n-        return (long)((a&~(c))|(b&c));\n+        return (long) ((a &~ (c)) | (b & c));\n@@ -4762,1 +4753,1 @@\n-        return (long)((a&~(c))|(b&c));\n+        return (long) ((a &~ (c)) | (b & c));\n@@ -4978,1 +4969,1 @@\n-        return (long)(-((long)a));\n+        return (long) (-((long) a));\n@@ -4982,1 +4973,1 @@\n-        return (long)(-((long)a));\n+        return (long) (-((long) a));\n@@ -5034,1 +5025,1 @@\n-        return (long)(Math.abs((long)a));\n+        return (long) (Math.abs((long) a));\n@@ -5038,1 +5029,1 @@\n-        return (long)(Math.abs((long)a));\n+        return (long) (Math.abs((long) a));\n@@ -5091,1 +5082,1 @@\n-        return (long)(~((long)a));\n+        return (long) (~((long) a));\n@@ -5095,1 +5086,1 @@\n-        return (long)(~((long)a));\n+        return (long) (~((long) a));\n@@ -5153,1 +5144,1 @@\n-        return (long)((a==0?0:-1));\n+        return (long) ((a == 0 ? 0 : -1));\n@@ -5199,1 +5190,1 @@\n-        return (long)(Long.bitCount(a));\n+        return (long) (Long.bitCount(a));\n@@ -5248,1 +5239,1 @@\n-        return (long)(TRAILING_ZEROS_COUNT_scalar(a));\n+        return (long) (TRAILING_ZEROS_COUNT_scalar(a));\n@@ -5291,1 +5282,1 @@\n-        return (long)(LEADING_ZEROS_COUNT_scalar(a));\n+        return (long) (LEADING_ZEROS_COUNT_scalar(a));\n@@ -5334,1 +5325,1 @@\n-        return (long)(REVERSE_scalar(a));\n+        return (long) (REVERSE_scalar(a));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/LongMaxVectorTests.java","additions":297,"deletions":306,"binary":false,"changes":603,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,1 +74,1 @@\n-                Assert.assertEquals(r[i], mask[(i*8\/SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0);\n+                Assert.assertEquals(r[i], mask[(i * 8 \/ SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0);\n@@ -77,1 +77,1 @@\n-            Assert.assertEquals(r[i], mask[(i*8\/SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0, \"at index #\" + i);\n+            Assert.assertEquals(r[i], mask[(i * 8 \/ SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0, \"at index #\" + i);\n@@ -84,1 +84,1 @@\n-                            i -> (short)(i * 5));\n+                            i -> (short) (i * 5));\n@@ -88,1 +88,1 @@\n-                            i -> (((short)(i + 1) == 0) ? 1 : (short)(i + 1)));\n+                            i -> (((short) (i + 1) == 0) ? 1 : (short) (i + 1)));\n@@ -195,1 +195,1 @@\n-                            return new Object[]{fa, fb, bo};\n+                            return new Object[] {fa, fb, bo};\n@@ -206,1 +206,1 @@\n-                            return new Object[]{fa, fb, fm, bo};\n+                            return new Object[] {fa, fb, fm, bo};\n@@ -215,1 +215,1 @@\n-                    return new Object[]{fa, bo};\n+                    return new Object[] {fa, bo};\n@@ -225,1 +225,1 @@\n-                        return new Object[]{fa, fm, bo};\n+                        return new Object[] {fa, fm, bo};\n@@ -942,1 +942,0 @@\n-\n@@ -957,1 +956,1 @@\n-                            i -> (char)(i * 5));\n+                            i -> (char) (i * 5));\n@@ -961,1 +960,1 @@\n-                            i -> (((char)(i + 1) == 0) ? 1 : (char)(i + 1)));\n+                            i -> (((char) (i + 1) == 0) ? 1 : (char) (i + 1)));\n@@ -968,1 +967,1 @@\n-                map(f -> new Object[]{f}).\n+                map(f -> new Object[] {f}).\n@@ -1188,2 +1187,0 @@\n-\n-\n@@ -1415,1 +1412,0 @@\n-\n@@ -1484,1 +1480,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short128VectorLoadStoreTests.java","additions":12,"deletions":17,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -93,1 +93,1 @@\n-            short[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            short[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -253,1 +253,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i+order[i + j]]);\n@@ -258,1 +258,1 @@\n-            Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i+order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]]);\n@@ -274,1 +274,1 @@\n-                    Assert.assertEquals(r[i + k], (short)0);\n+                    Assert.assertEquals(r[i + k], (short) 0);\n@@ -282,1 +282,1 @@\n-                Assert.assertEquals(r[idx], (short)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], (short) 0, \"at index #\" + idx);\n@@ -297,1 +297,1 @@\n-                        Assert.assertEquals(r[i + j], (short)0);\n+                        Assert.assertEquals(r[i + j], (short) 0);\n@@ -306,1 +306,1 @@\n-                Assert.assertEquals(r[idx], (short)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], (short) 0, \"at index #\" + idx);\n@@ -316,1 +316,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -321,1 +321,1 @@\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]]);\n@@ -331,1 +331,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + order[i + j]]);\n@@ -333,1 +333,1 @@\n-                         Assert.assertEquals(r[i+j], (short)0);\n+                         Assert.assertEquals(r[i + j], (short) 0);\n@@ -339,1 +339,1 @@\n-                Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -341,1 +341,1 @@\n-                Assert.assertEquals(r[i+j], (short)0, \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], (short) 0, \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -351,1 +351,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -353,1 +353,1 @@\n-                         Assert.assertEquals(r[i+j], (short)0);\n+                         Assert.assertEquals(r[i + j], (short) 0);\n@@ -359,1 +359,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -361,1 +361,1 @@\n-                Assert.assertEquals(r[i+j], (short)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], (short) 0, \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -370,1 +370,1 @@\n-                a[j]=a[idx];\n+                a[j] = a[idx];\n@@ -421,1 +421,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], (short)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])));\n+                Assert.assertEquals(r[i], f.apply(a[i], (short) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])));\n@@ -424,1 +424,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], (short)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])),\n+            Assert.assertEquals(r[i], f.apply(a[i], (short) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])),\n@@ -470,1 +470,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], (short)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n+                Assert.assertEquals(r[i], f.apply(a[i], (short) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n@@ -473,1 +473,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], (short)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]),\n+            Assert.assertEquals(r[i], f.apply(a[i], (short) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]),\n@@ -486,1 +486,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]));\n@@ -490,1 +490,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]), \"at index #\" + i + \", \" + j);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]), \"at index #\" + i + \", \" + j);\n@@ -504,1 +504,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]));\n@@ -508,1 +508,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i+j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i + j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n@@ -657,1 +657,0 @@\n-\n@@ -681,1 +680,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -686,1 +685,1 @@\n-            short[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            short[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -689,1 +688,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -691,1 +690,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -708,1 +707,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -713,1 +712,1 @@\n-            short[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            short[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -716,1 +715,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -718,1 +717,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -729,1 +728,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -734,1 +733,1 @@\n-            short[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            short[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -737,1 +736,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -739,1 +738,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -741,1 +740,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(r, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(r, i, i + SPECIES.length()))\n@@ -756,1 +755,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -761,1 +760,1 @@\n-            short[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            short[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -776,1 +775,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -781,1 +780,1 @@\n-            short[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            short[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -797,1 +796,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -802,1 +801,1 @@\n-            short[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            short[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -818,1 +817,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -823,1 +822,1 @@\n-            short[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            short[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -840,1 +839,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -845,1 +844,1 @@\n-            short[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            short[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -859,1 +858,1 @@\n-                Assert.assertEquals(r[i], (int)(a[i+offs]));\n+                Assert.assertEquals(r[i], (int) (a[i + offs]));\n@@ -862,1 +861,1 @@\n-            Assert.assertEquals(r[i], (int)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (int) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -872,1 +871,1 @@\n-                Assert.assertEquals(r[i], (long)(a[i+offs]));\n+                Assert.assertEquals(r[i], (long) (a[i + offs]));\n@@ -875,1 +874,1 @@\n-            Assert.assertEquals(r[i], (long)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (long) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -883,1 +882,1 @@\n-                Assert.assertEquals(r[i], (double)(a[i+offs]));\n+                Assert.assertEquals(r[i], (double) (a[i + offs]));\n@@ -886,1 +885,1 @@\n-            Assert.assertEquals(r[i], (double)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (double) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -890,1 +889,0 @@\n-\n@@ -898,1 +896,1 @@\n-                            i -> (short)(-i * 5));\n+                            i -> (short) (-i * 5));\n@@ -902,1 +900,1 @@\n-                            i -> (short)(i * 5));\n+                            i -> (short) (i * 5));\n@@ -906,1 +904,1 @@\n-                            i -> (((short)(i + 1) == 0) ? 1 : (short)(i + 1)));\n+                            i -> (((short) (i + 1) == 0) ? 1 : (short) (i + 1)));\n@@ -1037,1 +1035,1 @@\n-                    a[i] = (short)RAND.nextInt(upper);\n+                    a[i] = (short) RAND.nextInt(upper);\n@@ -1062,1 +1060,0 @@\n-\n@@ -1066,1 +1063,1 @@\n-                            i -> (short)i);\n+                            i -> (short) i);\n@@ -1070,1 +1067,1 @@\n-                            i -> (short)(i - (s * BUFFER_REPS \/ 2)));\n+                            i -> (short) (i - (s * BUFFER_REPS \/ 2)));\n@@ -1074,1 +1071,1 @@\n-                            i -> (short)(i + 1));\n+                            i -> (short) (i + 1));\n@@ -1078,1 +1075,1 @@\n-                            i -> (short)(i - 2));\n+                            i -> (short) (i - 2));\n@@ -1082,1 +1079,1 @@\n-                            i -> i%3 == 0 ? (short)i : (i%3 == 1 ? (short)(i + 1) : (short)(i - 2)));\n+                            i -> i % 3 == 0 ? (short) i : (i % 3 == 1 ? (short) (i + 1) : (short) (i - 2)));\n@@ -1156,1 +1153,1 @@\n-                return (short)0;\n+                return (short) 0;\n@@ -1196,1 +1193,1 @@\n-        return (short)(((((short)a) & 0xFFFF) << (b & 15)) | ((((short)a) & 0xFFFF) >>> (16 - (b & 15))));\n+        return (short) (((((short) a) & 0xFFFF) << (b & 15)) | ((((short) a) & 0xFFFF) >>> (16 - (b & 15))));\n@@ -1200,1 +1197,1 @@\n-        return (short)(((((short)a) & 0xFFFF) >>> (b & 15)) | ((((short)a) & 0xFFFF) << (16 - (b & 15))));\n+        return (short) (((((short) a) & 0xFFFF) >>> (b & 15)) | ((((short) a) & 0xFFFF) << (16 - (b & 15))));\n@@ -1213,3 +1210,3 @@\n-        b = (short)(((b & 0x5555) << 1) | ((b & 0xAAAA) >>> 1));\n-        b = (short)(((b & 0x3333) << 2) | ((b & 0xCCCC) >>> 2));\n-        b = (short)(((b & 0x0F0F) << 4) | ((b & 0xF0F0) >>> 4));\n+        b = (short) (((b & 0x5555) << 1) | ((b & 0xAAAA) >>> 1));\n+        b = (short) (((b & 0x3333) << 2) | ((b & 0xCCCC) >>> 2));\n+        b = (short) (((b & 0x0F0F) << 4) | ((b & 0xF0F0) >>> 4));\n@@ -1219,1 +1216,0 @@\n-\n@@ -1266,1 +1262,1 @@\n-        ShortVector three = ShortVector.broadcast(SPECIES, (byte)-3);\n+        ShortVector three = ShortVector.broadcast(SPECIES, (byte) -3);\n@@ -1280,1 +1276,1 @@\n-        m = higher.min((short)-1).test(VectorOperators.IS_NEGATIVE);\n+        m = higher.min((short) -1).test(VectorOperators.IS_NEGATIVE);\n@@ -1283,1 +1279,1 @@\n-        assert(max == -3 + scale * (SPECIES.length()-1));\n+        assert(max == -3 + scale * (SPECIES.length() - 1));\n@@ -1298,1 +1294,1 @@\n-        ShortVector io2 = (ShortVector) VectorShuffle.iota(SPECIES,0,1,false).toVector();\n+        ShortVector io2 = (ShortVector) VectorShuffle.iota(SPECIES, 0, 1, false).toVector();\n@@ -1300,1 +1296,1 @@\n-        ShortVector a = io.add((short)1); \/\/[1,2]\n+        ShortVector a = io.add((short) 1); \/\/[1,2]\n@@ -1305,2 +1301,2 @@\n-        ShortVector zab0 = a.rearrange(zip0,b); \/\/[1,-1]\n-        ShortVector zab1 = a.rearrange(zip1,b); \/\/[2,-2]\n+        ShortVector zab0 = a.rearrange(zip0, b); \/\/[1,-1]\n+        ShortVector zab1 = a.rearrange(zip1, b); \/\/[2,-2]\n@@ -1311,2 +1307,2 @@\n-            manual[i+0] = abValues[i\/2];\n-            manual[i+1] = abValues[a.length() + i\/2];\n+            manual[i + 0] = abValues[i \/ 2];\n+            manual[i + 1] = abValues[a.length() + i \/ 2];\n@@ -1317,2 +1313,2 @@\n-        ShortVector uab0 = zab0.rearrange(unz0,zab1);\n-        ShortVector uab1 = zab0.rearrange(unz1,zab1);\n+        ShortVector uab0 = zab0.rearrange(unz0, zab1);\n+        ShortVector uab1 = zab0.rearrange(unz1, zab1);\n@@ -1370,1 +1366,1 @@\n-        return (short)(a + b);\n+        return (short) (a + b);\n@@ -1390,1 +1386,1 @@\n-        return (short)(a + b);\n+        return (short) (a + b);\n@@ -1446,1 +1442,1 @@\n-        return (short)(a - b);\n+        return (short) (a - b);\n@@ -1466,1 +1462,1 @@\n-        return (short)(a - b);\n+        return (short) (a - b);\n@@ -1522,1 +1518,1 @@\n-        return (short)(a * b);\n+        return (short) (a * b);\n@@ -1542,1 +1538,1 @@\n-        return (short)(a * b);\n+        return (short) (a * b);\n@@ -1601,1 +1597,1 @@\n-        return (short)(a \/ b);\n+        return (short) (a \/ b);\n@@ -1623,1 +1619,1 @@\n-        return (short)(a \/ b);\n+        return (short) (a \/ b);\n@@ -1692,1 +1688,1 @@\n-        return (short)((a)!=0?a:b);\n+        return (short) ((a) != 0 ? a : b);\n@@ -1733,1 +1729,1 @@\n-        return (short)(a & b);\n+        return (short) (a & b);\n@@ -1753,1 +1749,1 @@\n-        return (short)(a & b);\n+        return (short) (a & b);\n@@ -1795,1 +1791,1 @@\n-        return (short)(a & ~b);\n+        return (short) (a & ~b);\n@@ -1839,1 +1835,1 @@\n-        return (short)(a | b);\n+        return (short) (a | b);\n@@ -1859,1 +1855,1 @@\n-        return (short)(a | b);\n+        return (short) (a | b);\n@@ -1901,1 +1897,1 @@\n-        return (short)(a ^ b);\n+        return (short) (a ^ b);\n@@ -2185,1 +2181,1 @@\n-            av.lanewise(VectorOperators.OR, (long)b[i]).intoArray(r, i);\n+            av.lanewise(VectorOperators.OR, (long) b[i]).intoArray(r, i);\n@@ -2204,1 +2200,1 @@\n-            av.lanewise(VectorOperators.OR, (long)b[i], vmask).intoArray(r, i);\n+            av.lanewise(VectorOperators.OR, (long) b[i], vmask).intoArray(r, i);\n@@ -2219,1 +2215,1 @@\n-            av.lanewise(VectorOperators.ADD, (long)b[i]).intoArray(r, i);\n+            av.lanewise(VectorOperators.ADD, (long) b[i]).intoArray(r, i);\n@@ -2236,1 +2232,1 @@\n-            av.lanewise(VectorOperators.ADD, (long)b[i], vmask).intoArray(r, i);\n+            av.lanewise(VectorOperators.ADD, (long) b[i], vmask).intoArray(r, i);\n@@ -2247,1 +2243,1 @@\n-        return (short)((a << (b & 0xF)));\n+        return (short) ((a << (b & 0xF)));\n@@ -2295,1 +2291,1 @@\n-        return (short)((a >> (b & 0xF)));\n+        return (short) ((a >> (b & 0xF)));\n@@ -2343,1 +2339,1 @@\n-        return (short)(((a & 0xFFFF) >>> (b & 0xF)));\n+        return (short) (((a & 0xFFFF) >>> (b & 0xF)));\n@@ -2391,1 +2387,1 @@\n-        return (short)((a << (b & 15)));\n+        return (short) ((a << (b & 15)));\n@@ -2403,1 +2399,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i]).intoArray(r, i);\n@@ -2424,1 +2420,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i], vmask).intoArray(r, i);\n@@ -2437,1 +2433,1 @@\n-        return (short)(((a & 0xFFFF) >>> (b & 15)));\n+        return (short) (((a & 0xFFFF) >>> (b & 15)));\n@@ -2449,1 +2445,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i]).intoArray(r, i);\n@@ -2470,1 +2466,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i], vmask).intoArray(r, i);\n@@ -2483,1 +2479,1 @@\n-        return (short)((a >> (b & 15)));\n+        return (short) ((a >> (b & 15)));\n@@ -2495,1 +2491,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i]).intoArray(r, i);\n@@ -2516,1 +2512,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i], vmask).intoArray(r, i);\n@@ -2525,1 +2521,1 @@\n-        return (short)(ROR_scalar(a,b));\n+        return (short) (ROR_scalar(a, b));\n@@ -2569,1 +2565,1 @@\n-        return (short)(ROL_scalar(a,b));\n+        return (short) (ROL_scalar(a, b));\n@@ -2613,1 +2609,1 @@\n-        return (short)(ROR_scalar(a,b));\n+        return (short) (ROR_scalar(a, b));\n@@ -2625,1 +2621,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i]).intoArray(r, i);\n@@ -2646,1 +2642,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i], vmask).intoArray(r, i);\n@@ -2655,1 +2651,1 @@\n-        return (short)(ROL_scalar(a,b));\n+        return (short) (ROL_scalar(a, b));\n@@ -2667,1 +2663,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i]).intoArray(r, i);\n@@ -2688,1 +2684,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i], vmask).intoArray(r, i);\n@@ -2696,1 +2692,1 @@\n-        return (short)(Math.min(a, b));\n+        return (short) (Math.min(a, b));\n@@ -2716,1 +2712,1 @@\n-        return (short)(Math.min(a, b));\n+        return (short) (Math.min(a, b));\n@@ -2734,1 +2730,1 @@\n-        return (short)(Math.max(a, b));\n+        return (short) (Math.max(a, b));\n@@ -2754,1 +2750,1 @@\n-        return (short)(Math.max(a, b));\n+        return (short) (Math.max(a, b));\n@@ -3592,1 +3588,1 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (short)(65535+i)).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length() - 1)), (short) (65535 + i)).intoArray(r, i);\n@@ -3598,1 +3594,1 @@\n-            assertInsertArraysEquals(r, a, (short)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+            assertInsertArraysEquals(r, a, (short) (65535 + i), (j++ & (SPECIES.length() - 1)), i , i + SPECIES.length());\n@@ -3602,1 +3598,1 @@\n-        return bits(a)==0;\n+        return bits(a) == 0;\n@@ -3635,1 +3631,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_DEFAULT(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_DEFAULT(a[i + j]));\n@@ -3640,1 +3636,1 @@\n-        return bits(a)<0;\n+        return bits(a) < 0;\n@@ -3673,1 +3669,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_NEGATIVE(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_NEGATIVE(a[i + j]));\n@@ -4183,1 +4179,0 @@\n-\n@@ -4211,1 +4206,1 @@\n-            VectorMask<Short> mv = av.compare(VectorOperators.LT, (long)b[i]);\n+            VectorMask<Short> mv = av.compare(VectorOperators.LT, (long) b[i]);\n@@ -4215,1 +4210,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), a[i + j] < (short)((long)b[i]));\n+                Assert.assertEquals(mv.laneIsSet(j), a[i + j] < (short) ((long) b[i]));\n@@ -4220,1 +4215,0 @@\n-\n@@ -4232,1 +4226,1 @@\n-            VectorMask<Short> mv = av.compare(VectorOperators.LT, (long)b[i], vmask);\n+            VectorMask<Short> mv = av.compare(VectorOperators.LT, (long) b[i], vmask);\n@@ -4236,1 +4230,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] < (short)((long)b[i])));\n+                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] < (short) ((long) b[i])));\n@@ -4257,1 +4251,0 @@\n-\n@@ -4285,1 +4278,1 @@\n-            VectorMask<Short> mv = av.compare(VectorOperators.EQ, (long)b[i]);\n+            VectorMask<Short> mv = av.compare(VectorOperators.EQ, (long) b[i]);\n@@ -4289,1 +4282,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), a[i + j] == (short)((long)b[i]));\n+                Assert.assertEquals(mv.laneIsSet(j), a[i + j] == (short) ((long) b[i]));\n@@ -4294,1 +4287,0 @@\n-\n@@ -4306,1 +4298,1 @@\n-            VectorMask<Short> mv = av.compare(VectorOperators.EQ, (long)b[i], vmask);\n+            VectorMask<Short> mv = av.compare(VectorOperators.EQ, (long) b[i], vmask);\n@@ -4310,1 +4302,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] == (short)((long)b[i])));\n+                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] == (short) ((long) b[i])));\n@@ -4421,1 +4413,1 @@\n-                    r[i]=av.lane(0);\n+                    r[i] = av.lane(0);\n@@ -4423,2 +4415,2 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n@@ -4426,4 +4418,4 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n@@ -4431,8 +4423,8 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n@@ -4440,16 +4432,16 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n@@ -4457,32 +4449,32 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n@@ -4490,64 +4482,64 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n-                    r[i+32]=av.lane(32);\n-                    r[i+33]=av.lane(33);\n-                    r[i+34]=av.lane(34);\n-                    r[i+35]=av.lane(35);\n-                    r[i+36]=av.lane(36);\n-                    r[i+37]=av.lane(37);\n-                    r[i+38]=av.lane(38);\n-                    r[i+39]=av.lane(39);\n-                    r[i+40]=av.lane(40);\n-                    r[i+41]=av.lane(41);\n-                    r[i+42]=av.lane(42);\n-                    r[i+43]=av.lane(43);\n-                    r[i+44]=av.lane(44);\n-                    r[i+45]=av.lane(45);\n-                    r[i+46]=av.lane(46);\n-                    r[i+47]=av.lane(47);\n-                    r[i+48]=av.lane(48);\n-                    r[i+49]=av.lane(49);\n-                    r[i+50]=av.lane(50);\n-                    r[i+51]=av.lane(51);\n-                    r[i+52]=av.lane(52);\n-                    r[i+53]=av.lane(53);\n-                    r[i+54]=av.lane(54);\n-                    r[i+55]=av.lane(55);\n-                    r[i+56]=av.lane(56);\n-                    r[i+57]=av.lane(57);\n-                    r[i+58]=av.lane(58);\n-                    r[i+59]=av.lane(59);\n-                    r[i+60]=av.lane(60);\n-                    r[i+61]=av.lane(61);\n-                    r[i+62]=av.lane(62);\n-                    r[i+63]=av.lane(63);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n+                    r[i + 32] = av.lane(32);\n+                    r[i + 33] = av.lane(33);\n+                    r[i + 34] = av.lane(34);\n+                    r[i + 35] = av.lane(35);\n+                    r[i + 36] = av.lane(36);\n+                    r[i + 37] = av.lane(37);\n+                    r[i + 38] = av.lane(38);\n+                    r[i + 39] = av.lane(39);\n+                    r[i + 40] = av.lane(40);\n+                    r[i + 41] = av.lane(41);\n+                    r[i + 42] = av.lane(42);\n+                    r[i + 43] = av.lane(43);\n+                    r[i + 44] = av.lane(44);\n+                    r[i + 45] = av.lane(45);\n+                    r[i + 46] = av.lane(46);\n+                    r[i + 47] = av.lane(47);\n+                    r[i + 48] = av.lane(48);\n+                    r[i + 49] = av.lane(49);\n+                    r[i + 50] = av.lane(50);\n+                    r[i + 51] = av.lane(51);\n+                    r[i + 52] = av.lane(52);\n+                    r[i + 53] = av.lane(53);\n+                    r[i + 54] = av.lane(54);\n+                    r[i + 55] = av.lane(55);\n+                    r[i + 56] = av.lane(56);\n+                    r[i + 57] = av.lane(57);\n+                    r[i + 58] = av.lane(58);\n+                    r[i + 59] = av.lane(59);\n+                    r[i + 60] = av.lane(60);\n+                    r[i + 61] = av.lane(61);\n+                    r[i + 62] = av.lane(62);\n+                    r[i + 63] = av.lane(63);\n@@ -4556,1 +4548,1 @@\n-                        r[i+j]=av.lane(j);\n+                        r[i + j] = av.lane(j);\n@@ -4597,3 +4589,0 @@\n-\n-\n-\n@@ -4603,2 +4592,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = a[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = a[idx + i + origin];\n@@ -4606,1 +4595,1 @@\n-                res[i] = (short)0;\n+                res[i] = (short) 0;\n@@ -4629,1 +4618,1 @@\n-                res[i] = a[idx+i+origin];\n+                res[i] = a[idx + i + origin];\n@@ -4631,1 +4620,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n@@ -4657,2 +4646,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = mask[i] ? a[idx+i+origin] : (short)0;\n+            if(i + origin < SPECIES.length())\n+                res[i] = mask[i] ? a[idx + i + origin] : (short) 0;\n@@ -4660,1 +4649,1 @@\n-                res[i] = mask[i] ? b[idx+j] : (short)0;\n+                res[i] = mask[i] ? b[idx + j] : (short) 0;\n@@ -4691,1 +4680,1 @@\n-                res[i] = (short)0;\n+                res[i] = (short) 0;\n@@ -4693,1 +4682,1 @@\n-                res[i] = a[idx+j];\n+                res[i] = a[idx + j];\n@@ -4719,1 +4708,1 @@\n-                    res[i] = b[idx+i];\n+                    res[i] = b[idx + i];\n@@ -4721,1 +4710,1 @@\n-                    res[i] = a[idx+j];\n+                    res[i] = a[idx + j];\n@@ -4726,1 +4715,1 @@\n-                    res[i] = a[idx+SPECIES.length()-origin+i];\n+                    res[i] = a[idx + SPECIES.length() - origin + i];\n@@ -4728,1 +4717,1 @@\n-                    res[i] = b[idx+origin+j];\n+                    res[i] = b[idx + origin + j];\n@@ -4756,2 +4745,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = b[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = b[idx + i + origin];\n@@ -4759,1 +4748,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n@@ -4764,1 +4753,1 @@\n-            res[i] = mask[i] ? a[idx+i] : res[i];\n+            res[i] = mask[i] ? a[idx + i] : res[i];\n@@ -4770,1 +4759,1 @@\n-                    res1[i] = b[idx+i];\n+                    res1[i] = b[idx + i];\n@@ -4772,2 +4761,2 @@\n-                   res1[i] = res[j];\n-                   j++;\n+                    res1[i] = res[j];\n+                    j++;\n@@ -4779,1 +4768,1 @@\n-                    res1[i] = res[SPECIES.length()-origin+i];\n+                    res1[i] = res[SPECIES.length() - origin + i];\n@@ -4781,1 +4770,1 @@\n-                    res1[i] = b[idx+origin+j];\n+                    res1[i] = b[idx + origin + j];\n@@ -4833,1 +4822,1 @@\n-        return (short)((a&~(c))|(b&c));\n+        return (short) ((a &~ (c)) | (b & c));\n@@ -4836,1 +4825,1 @@\n-        return (short)((a&~(c))|(b&c));\n+        return (short) ((a &~ (c)) | (b & c));\n@@ -5052,1 +5041,1 @@\n-        return (short)(-((short)a));\n+        return (short) (-((short) a));\n@@ -5056,1 +5045,1 @@\n-        return (short)(-((short)a));\n+        return (short) (-((short) a));\n@@ -5108,1 +5097,1 @@\n-        return (short)(Math.abs((short)a));\n+        return (short) (Math.abs((short) a));\n@@ -5112,1 +5101,1 @@\n-        return (short)(Math.abs((short)a));\n+        return (short) (Math.abs((short) a));\n@@ -5165,1 +5154,1 @@\n-        return (short)(~((short)a));\n+        return (short) (~((short) a));\n@@ -5169,1 +5158,1 @@\n-        return (short)(~((short)a));\n+        return (short) (~((short) a));\n@@ -5227,1 +5216,1 @@\n-        return (short)((a==0?0:-1));\n+        return (short) ((a == 0 ? 0 : -1));\n@@ -5279,1 +5268,1 @@\n-        return (short)(Integer.bitCount((int)a & 0xFFFF));\n+        return (short) (Integer.bitCount((int) a & 0xFFFF));\n@@ -5322,1 +5311,1 @@\n-        return (short)(TRAILING_ZEROS_COUNT_scalar(a));\n+        return (short) (TRAILING_ZEROS_COUNT_scalar(a));\n@@ -5365,1 +5354,1 @@\n-        return (short)(LEADING_ZEROS_COUNT_scalar(a));\n+        return (short) (LEADING_ZEROS_COUNT_scalar(a));\n@@ -5408,1 +5397,1 @@\n-        return (short)(REVERSE_scalar(a));\n+        return (short) (REVERSE_scalar(a));\n@@ -5548,1 +5537,1 @@\n-        return (long)res;\n+        return (long) res;\n@@ -5587,1 +5576,1 @@\n-        return (long)res;\n+        return (long) res;\n@@ -5644,1 +5633,1 @@\n-                av.blend((long)b[i], vmask).intoArray(r, i);\n+                av.blend((long) b[i], vmask).intoArray(r, i);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short128VectorTests.java","additions":306,"deletions":317,"binary":false,"changes":623,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,1 +74,1 @@\n-                Assert.assertEquals(r[i], mask[(i*8\/SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0);\n+                Assert.assertEquals(r[i], mask[(i * 8 \/ SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0);\n@@ -77,1 +77,1 @@\n-            Assert.assertEquals(r[i], mask[(i*8\/SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0, \"at index #\" + i);\n+            Assert.assertEquals(r[i], mask[(i * 8 \/ SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0, \"at index #\" + i);\n@@ -84,1 +84,1 @@\n-                            i -> (short)(i * 5));\n+                            i -> (short) (i * 5));\n@@ -88,1 +88,1 @@\n-                            i -> (((short)(i + 1) == 0) ? 1 : (short)(i + 1)));\n+                            i -> (((short) (i + 1) == 0) ? 1 : (short) (i + 1)));\n@@ -195,1 +195,1 @@\n-                            return new Object[]{fa, fb, bo};\n+                            return new Object[] {fa, fb, bo};\n@@ -206,1 +206,1 @@\n-                            return new Object[]{fa, fb, fm, bo};\n+                            return new Object[] {fa, fb, fm, bo};\n@@ -215,1 +215,1 @@\n-                    return new Object[]{fa, bo};\n+                    return new Object[] {fa, bo};\n@@ -225,1 +225,1 @@\n-                        return new Object[]{fa, fm, bo};\n+                        return new Object[] {fa, fm, bo};\n@@ -942,1 +942,0 @@\n-\n@@ -957,1 +956,1 @@\n-                            i -> (char)(i * 5));\n+                            i -> (char) (i * 5));\n@@ -961,1 +960,1 @@\n-                            i -> (((char)(i + 1) == 0) ? 1 : (char)(i + 1)));\n+                            i -> (((char) (i + 1) == 0) ? 1 : (char) (i + 1)));\n@@ -968,1 +967,1 @@\n-                map(f -> new Object[]{f}).\n+                map(f -> new Object[] {f}).\n@@ -1188,2 +1187,0 @@\n-\n-\n@@ -1415,1 +1412,0 @@\n-\n@@ -1484,1 +1480,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short256VectorLoadStoreTests.java","additions":12,"deletions":17,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -93,1 +93,1 @@\n-            short[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            short[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -253,1 +253,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i+order[i + j]]);\n@@ -258,1 +258,1 @@\n-            Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i+order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]]);\n@@ -274,1 +274,1 @@\n-                    Assert.assertEquals(r[i + k], (short)0);\n+                    Assert.assertEquals(r[i + k], (short) 0);\n@@ -282,1 +282,1 @@\n-                Assert.assertEquals(r[idx], (short)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], (short) 0, \"at index #\" + idx);\n@@ -297,1 +297,1 @@\n-                        Assert.assertEquals(r[i + j], (short)0);\n+                        Assert.assertEquals(r[i + j], (short) 0);\n@@ -306,1 +306,1 @@\n-                Assert.assertEquals(r[idx], (short)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], (short) 0, \"at index #\" + idx);\n@@ -316,1 +316,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -321,1 +321,1 @@\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]]);\n@@ -331,1 +331,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + order[i + j]]);\n@@ -333,1 +333,1 @@\n-                         Assert.assertEquals(r[i+j], (short)0);\n+                         Assert.assertEquals(r[i + j], (short) 0);\n@@ -339,1 +339,1 @@\n-                Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -341,1 +341,1 @@\n-                Assert.assertEquals(r[i+j], (short)0, \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], (short) 0, \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -351,1 +351,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -353,1 +353,1 @@\n-                         Assert.assertEquals(r[i+j], (short)0);\n+                         Assert.assertEquals(r[i + j], (short) 0);\n@@ -359,1 +359,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -361,1 +361,1 @@\n-                Assert.assertEquals(r[i+j], (short)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], (short) 0, \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -370,1 +370,1 @@\n-                a[j]=a[idx];\n+                a[j] = a[idx];\n@@ -421,1 +421,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], (short)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])));\n+                Assert.assertEquals(r[i], f.apply(a[i], (short) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])));\n@@ -424,1 +424,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], (short)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])),\n+            Assert.assertEquals(r[i], f.apply(a[i], (short) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])),\n@@ -470,1 +470,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], (short)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n+                Assert.assertEquals(r[i], f.apply(a[i], (short) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n@@ -473,1 +473,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], (short)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]),\n+            Assert.assertEquals(r[i], f.apply(a[i], (short) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]),\n@@ -486,1 +486,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]));\n@@ -490,1 +490,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]), \"at index #\" + i + \", \" + j);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]), \"at index #\" + i + \", \" + j);\n@@ -504,1 +504,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]));\n@@ -508,1 +508,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i+j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i + j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n@@ -657,1 +657,0 @@\n-\n@@ -681,1 +680,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -686,1 +685,1 @@\n-            short[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            short[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -689,1 +688,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -691,1 +690,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -708,1 +707,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -713,1 +712,1 @@\n-            short[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            short[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -716,1 +715,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -718,1 +717,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -729,1 +728,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -734,1 +733,1 @@\n-            short[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            short[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -737,1 +736,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -739,1 +738,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -741,1 +740,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(r, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(r, i, i + SPECIES.length()))\n@@ -756,1 +755,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -761,1 +760,1 @@\n-            short[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            short[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -776,1 +775,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -781,1 +780,1 @@\n-            short[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            short[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -797,1 +796,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -802,1 +801,1 @@\n-            short[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            short[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -818,1 +817,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -823,1 +822,1 @@\n-            short[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            short[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -840,1 +839,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -845,1 +844,1 @@\n-            short[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            short[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -859,1 +858,1 @@\n-                Assert.assertEquals(r[i], (int)(a[i+offs]));\n+                Assert.assertEquals(r[i], (int) (a[i + offs]));\n@@ -862,1 +861,1 @@\n-            Assert.assertEquals(r[i], (int)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (int) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -872,1 +871,1 @@\n-                Assert.assertEquals(r[i], (long)(a[i+offs]));\n+                Assert.assertEquals(r[i], (long) (a[i + offs]));\n@@ -875,1 +874,1 @@\n-            Assert.assertEquals(r[i], (long)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (long) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -883,1 +882,1 @@\n-                Assert.assertEquals(r[i], (double)(a[i+offs]));\n+                Assert.assertEquals(r[i], (double) (a[i + offs]));\n@@ -886,1 +885,1 @@\n-            Assert.assertEquals(r[i], (double)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (double) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -890,1 +889,0 @@\n-\n@@ -898,1 +896,1 @@\n-                            i -> (short)(-i * 5));\n+                            i -> (short) (-i * 5));\n@@ -902,1 +900,1 @@\n-                            i -> (short)(i * 5));\n+                            i -> (short) (i * 5));\n@@ -906,1 +904,1 @@\n-                            i -> (((short)(i + 1) == 0) ? 1 : (short)(i + 1)));\n+                            i -> (((short) (i + 1) == 0) ? 1 : (short) (i + 1)));\n@@ -1037,1 +1035,1 @@\n-                    a[i] = (short)RAND.nextInt(upper);\n+                    a[i] = (short) RAND.nextInt(upper);\n@@ -1062,1 +1060,0 @@\n-\n@@ -1066,1 +1063,1 @@\n-                            i -> (short)i);\n+                            i -> (short) i);\n@@ -1070,1 +1067,1 @@\n-                            i -> (short)(i - (s * BUFFER_REPS \/ 2)));\n+                            i -> (short) (i - (s * BUFFER_REPS \/ 2)));\n@@ -1074,1 +1071,1 @@\n-                            i -> (short)(i + 1));\n+                            i -> (short) (i + 1));\n@@ -1078,1 +1075,1 @@\n-                            i -> (short)(i - 2));\n+                            i -> (short) (i - 2));\n@@ -1082,1 +1079,1 @@\n-                            i -> i%3 == 0 ? (short)i : (i%3 == 1 ? (short)(i + 1) : (short)(i - 2)));\n+                            i -> i % 3 == 0 ? (short) i : (i % 3 == 1 ? (short) (i + 1) : (short) (i - 2)));\n@@ -1156,1 +1153,1 @@\n-                return (short)0;\n+                return (short) 0;\n@@ -1196,1 +1193,1 @@\n-        return (short)(((((short)a) & 0xFFFF) << (b & 15)) | ((((short)a) & 0xFFFF) >>> (16 - (b & 15))));\n+        return (short) (((((short) a) & 0xFFFF) << (b & 15)) | ((((short) a) & 0xFFFF) >>> (16 - (b & 15))));\n@@ -1200,1 +1197,1 @@\n-        return (short)(((((short)a) & 0xFFFF) >>> (b & 15)) | ((((short)a) & 0xFFFF) << (16 - (b & 15))));\n+        return (short) (((((short) a) & 0xFFFF) >>> (b & 15)) | ((((short) a) & 0xFFFF) << (16 - (b & 15))));\n@@ -1213,3 +1210,3 @@\n-        b = (short)(((b & 0x5555) << 1) | ((b & 0xAAAA) >>> 1));\n-        b = (short)(((b & 0x3333) << 2) | ((b & 0xCCCC) >>> 2));\n-        b = (short)(((b & 0x0F0F) << 4) | ((b & 0xF0F0) >>> 4));\n+        b = (short) (((b & 0x5555) << 1) | ((b & 0xAAAA) >>> 1));\n+        b = (short) (((b & 0x3333) << 2) | ((b & 0xCCCC) >>> 2));\n+        b = (short) (((b & 0x0F0F) << 4) | ((b & 0xF0F0) >>> 4));\n@@ -1219,1 +1216,0 @@\n-\n@@ -1266,1 +1262,1 @@\n-        ShortVector three = ShortVector.broadcast(SPECIES, (byte)-3);\n+        ShortVector three = ShortVector.broadcast(SPECIES, (byte) -3);\n@@ -1280,1 +1276,1 @@\n-        m = higher.min((short)-1).test(VectorOperators.IS_NEGATIVE);\n+        m = higher.min((short) -1).test(VectorOperators.IS_NEGATIVE);\n@@ -1283,1 +1279,1 @@\n-        assert(max == -3 + scale * (SPECIES.length()-1));\n+        assert(max == -3 + scale * (SPECIES.length() - 1));\n@@ -1298,1 +1294,1 @@\n-        ShortVector io2 = (ShortVector) VectorShuffle.iota(SPECIES,0,1,false).toVector();\n+        ShortVector io2 = (ShortVector) VectorShuffle.iota(SPECIES, 0, 1, false).toVector();\n@@ -1300,1 +1296,1 @@\n-        ShortVector a = io.add((short)1); \/\/[1,2]\n+        ShortVector a = io.add((short) 1); \/\/[1,2]\n@@ -1305,2 +1301,2 @@\n-        ShortVector zab0 = a.rearrange(zip0,b); \/\/[1,-1]\n-        ShortVector zab1 = a.rearrange(zip1,b); \/\/[2,-2]\n+        ShortVector zab0 = a.rearrange(zip0, b); \/\/[1,-1]\n+        ShortVector zab1 = a.rearrange(zip1, b); \/\/[2,-2]\n@@ -1311,2 +1307,2 @@\n-            manual[i+0] = abValues[i\/2];\n-            manual[i+1] = abValues[a.length() + i\/2];\n+            manual[i + 0] = abValues[i \/ 2];\n+            manual[i + 1] = abValues[a.length() + i \/ 2];\n@@ -1317,2 +1313,2 @@\n-        ShortVector uab0 = zab0.rearrange(unz0,zab1);\n-        ShortVector uab1 = zab0.rearrange(unz1,zab1);\n+        ShortVector uab0 = zab0.rearrange(unz0, zab1);\n+        ShortVector uab1 = zab0.rearrange(unz1, zab1);\n@@ -1370,1 +1366,1 @@\n-        return (short)(a + b);\n+        return (short) (a + b);\n@@ -1390,1 +1386,1 @@\n-        return (short)(a + b);\n+        return (short) (a + b);\n@@ -1446,1 +1442,1 @@\n-        return (short)(a - b);\n+        return (short) (a - b);\n@@ -1466,1 +1462,1 @@\n-        return (short)(a - b);\n+        return (short) (a - b);\n@@ -1522,1 +1518,1 @@\n-        return (short)(a * b);\n+        return (short) (a * b);\n@@ -1542,1 +1538,1 @@\n-        return (short)(a * b);\n+        return (short) (a * b);\n@@ -1601,1 +1597,1 @@\n-        return (short)(a \/ b);\n+        return (short) (a \/ b);\n@@ -1623,1 +1619,1 @@\n-        return (short)(a \/ b);\n+        return (short) (a \/ b);\n@@ -1692,1 +1688,1 @@\n-        return (short)((a)!=0?a:b);\n+        return (short) ((a) != 0 ? a : b);\n@@ -1733,1 +1729,1 @@\n-        return (short)(a & b);\n+        return (short) (a & b);\n@@ -1753,1 +1749,1 @@\n-        return (short)(a & b);\n+        return (short) (a & b);\n@@ -1795,1 +1791,1 @@\n-        return (short)(a & ~b);\n+        return (short) (a & ~b);\n@@ -1839,1 +1835,1 @@\n-        return (short)(a | b);\n+        return (short) (a | b);\n@@ -1859,1 +1855,1 @@\n-        return (short)(a | b);\n+        return (short) (a | b);\n@@ -1901,1 +1897,1 @@\n-        return (short)(a ^ b);\n+        return (short) (a ^ b);\n@@ -2185,1 +2181,1 @@\n-            av.lanewise(VectorOperators.OR, (long)b[i]).intoArray(r, i);\n+            av.lanewise(VectorOperators.OR, (long) b[i]).intoArray(r, i);\n@@ -2204,1 +2200,1 @@\n-            av.lanewise(VectorOperators.OR, (long)b[i], vmask).intoArray(r, i);\n+            av.lanewise(VectorOperators.OR, (long) b[i], vmask).intoArray(r, i);\n@@ -2219,1 +2215,1 @@\n-            av.lanewise(VectorOperators.ADD, (long)b[i]).intoArray(r, i);\n+            av.lanewise(VectorOperators.ADD, (long) b[i]).intoArray(r, i);\n@@ -2236,1 +2232,1 @@\n-            av.lanewise(VectorOperators.ADD, (long)b[i], vmask).intoArray(r, i);\n+            av.lanewise(VectorOperators.ADD, (long) b[i], vmask).intoArray(r, i);\n@@ -2247,1 +2243,1 @@\n-        return (short)((a << (b & 0xF)));\n+        return (short) ((a << (b & 0xF)));\n@@ -2295,1 +2291,1 @@\n-        return (short)((a >> (b & 0xF)));\n+        return (short) ((a >> (b & 0xF)));\n@@ -2343,1 +2339,1 @@\n-        return (short)(((a & 0xFFFF) >>> (b & 0xF)));\n+        return (short) (((a & 0xFFFF) >>> (b & 0xF)));\n@@ -2391,1 +2387,1 @@\n-        return (short)((a << (b & 15)));\n+        return (short) ((a << (b & 15)));\n@@ -2403,1 +2399,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i]).intoArray(r, i);\n@@ -2424,1 +2420,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i], vmask).intoArray(r, i);\n@@ -2437,1 +2433,1 @@\n-        return (short)(((a & 0xFFFF) >>> (b & 15)));\n+        return (short) (((a & 0xFFFF) >>> (b & 15)));\n@@ -2449,1 +2445,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i]).intoArray(r, i);\n@@ -2470,1 +2466,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i], vmask).intoArray(r, i);\n@@ -2483,1 +2479,1 @@\n-        return (short)((a >> (b & 15)));\n+        return (short) ((a >> (b & 15)));\n@@ -2495,1 +2491,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i]).intoArray(r, i);\n@@ -2516,1 +2512,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i], vmask).intoArray(r, i);\n@@ -2525,1 +2521,1 @@\n-        return (short)(ROR_scalar(a,b));\n+        return (short) (ROR_scalar(a, b));\n@@ -2569,1 +2565,1 @@\n-        return (short)(ROL_scalar(a,b));\n+        return (short) (ROL_scalar(a, b));\n@@ -2613,1 +2609,1 @@\n-        return (short)(ROR_scalar(a,b));\n+        return (short) (ROR_scalar(a, b));\n@@ -2625,1 +2621,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i]).intoArray(r, i);\n@@ -2646,1 +2642,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i], vmask).intoArray(r, i);\n@@ -2655,1 +2651,1 @@\n-        return (short)(ROL_scalar(a,b));\n+        return (short) (ROL_scalar(a, b));\n@@ -2667,1 +2663,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i]).intoArray(r, i);\n@@ -2688,1 +2684,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i], vmask).intoArray(r, i);\n@@ -2696,1 +2692,1 @@\n-        return (short)(Math.min(a, b));\n+        return (short) (Math.min(a, b));\n@@ -2716,1 +2712,1 @@\n-        return (short)(Math.min(a, b));\n+        return (short) (Math.min(a, b));\n@@ -2734,1 +2730,1 @@\n-        return (short)(Math.max(a, b));\n+        return (short) (Math.max(a, b));\n@@ -2754,1 +2750,1 @@\n-        return (short)(Math.max(a, b));\n+        return (short) (Math.max(a, b));\n@@ -3592,1 +3588,1 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (short)(65535+i)).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length() - 1)), (short) (65535 + i)).intoArray(r, i);\n@@ -3598,1 +3594,1 @@\n-            assertInsertArraysEquals(r, a, (short)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+            assertInsertArraysEquals(r, a, (short) (65535 + i), (j++ & (SPECIES.length() - 1)), i , i + SPECIES.length());\n@@ -3602,1 +3598,1 @@\n-        return bits(a)==0;\n+        return bits(a) == 0;\n@@ -3635,1 +3631,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_DEFAULT(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_DEFAULT(a[i + j]));\n@@ -3640,1 +3636,1 @@\n-        return bits(a)<0;\n+        return bits(a) < 0;\n@@ -3673,1 +3669,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_NEGATIVE(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_NEGATIVE(a[i + j]));\n@@ -4183,1 +4179,0 @@\n-\n@@ -4211,1 +4206,1 @@\n-            VectorMask<Short> mv = av.compare(VectorOperators.LT, (long)b[i]);\n+            VectorMask<Short> mv = av.compare(VectorOperators.LT, (long) b[i]);\n@@ -4215,1 +4210,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), a[i + j] < (short)((long)b[i]));\n+                Assert.assertEquals(mv.laneIsSet(j), a[i + j] < (short) ((long) b[i]));\n@@ -4220,1 +4215,0 @@\n-\n@@ -4232,1 +4226,1 @@\n-            VectorMask<Short> mv = av.compare(VectorOperators.LT, (long)b[i], vmask);\n+            VectorMask<Short> mv = av.compare(VectorOperators.LT, (long) b[i], vmask);\n@@ -4236,1 +4230,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] < (short)((long)b[i])));\n+                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] < (short) ((long) b[i])));\n@@ -4257,1 +4251,0 @@\n-\n@@ -4285,1 +4278,1 @@\n-            VectorMask<Short> mv = av.compare(VectorOperators.EQ, (long)b[i]);\n+            VectorMask<Short> mv = av.compare(VectorOperators.EQ, (long) b[i]);\n@@ -4289,1 +4282,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), a[i + j] == (short)((long)b[i]));\n+                Assert.assertEquals(mv.laneIsSet(j), a[i + j] == (short) ((long) b[i]));\n@@ -4294,1 +4287,0 @@\n-\n@@ -4306,1 +4298,1 @@\n-            VectorMask<Short> mv = av.compare(VectorOperators.EQ, (long)b[i], vmask);\n+            VectorMask<Short> mv = av.compare(VectorOperators.EQ, (long) b[i], vmask);\n@@ -4310,1 +4302,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] == (short)((long)b[i])));\n+                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] == (short) ((long) b[i])));\n@@ -4421,1 +4413,1 @@\n-                    r[i]=av.lane(0);\n+                    r[i] = av.lane(0);\n@@ -4423,2 +4415,2 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n@@ -4426,4 +4418,4 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n@@ -4431,8 +4423,8 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n@@ -4440,16 +4432,16 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n@@ -4457,32 +4449,32 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n@@ -4490,64 +4482,64 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n-                    r[i+32]=av.lane(32);\n-                    r[i+33]=av.lane(33);\n-                    r[i+34]=av.lane(34);\n-                    r[i+35]=av.lane(35);\n-                    r[i+36]=av.lane(36);\n-                    r[i+37]=av.lane(37);\n-                    r[i+38]=av.lane(38);\n-                    r[i+39]=av.lane(39);\n-                    r[i+40]=av.lane(40);\n-                    r[i+41]=av.lane(41);\n-                    r[i+42]=av.lane(42);\n-                    r[i+43]=av.lane(43);\n-                    r[i+44]=av.lane(44);\n-                    r[i+45]=av.lane(45);\n-                    r[i+46]=av.lane(46);\n-                    r[i+47]=av.lane(47);\n-                    r[i+48]=av.lane(48);\n-                    r[i+49]=av.lane(49);\n-                    r[i+50]=av.lane(50);\n-                    r[i+51]=av.lane(51);\n-                    r[i+52]=av.lane(52);\n-                    r[i+53]=av.lane(53);\n-                    r[i+54]=av.lane(54);\n-                    r[i+55]=av.lane(55);\n-                    r[i+56]=av.lane(56);\n-                    r[i+57]=av.lane(57);\n-                    r[i+58]=av.lane(58);\n-                    r[i+59]=av.lane(59);\n-                    r[i+60]=av.lane(60);\n-                    r[i+61]=av.lane(61);\n-                    r[i+62]=av.lane(62);\n-                    r[i+63]=av.lane(63);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n+                    r[i + 32] = av.lane(32);\n+                    r[i + 33] = av.lane(33);\n+                    r[i + 34] = av.lane(34);\n+                    r[i + 35] = av.lane(35);\n+                    r[i + 36] = av.lane(36);\n+                    r[i + 37] = av.lane(37);\n+                    r[i + 38] = av.lane(38);\n+                    r[i + 39] = av.lane(39);\n+                    r[i + 40] = av.lane(40);\n+                    r[i + 41] = av.lane(41);\n+                    r[i + 42] = av.lane(42);\n+                    r[i + 43] = av.lane(43);\n+                    r[i + 44] = av.lane(44);\n+                    r[i + 45] = av.lane(45);\n+                    r[i + 46] = av.lane(46);\n+                    r[i + 47] = av.lane(47);\n+                    r[i + 48] = av.lane(48);\n+                    r[i + 49] = av.lane(49);\n+                    r[i + 50] = av.lane(50);\n+                    r[i + 51] = av.lane(51);\n+                    r[i + 52] = av.lane(52);\n+                    r[i + 53] = av.lane(53);\n+                    r[i + 54] = av.lane(54);\n+                    r[i + 55] = av.lane(55);\n+                    r[i + 56] = av.lane(56);\n+                    r[i + 57] = av.lane(57);\n+                    r[i + 58] = av.lane(58);\n+                    r[i + 59] = av.lane(59);\n+                    r[i + 60] = av.lane(60);\n+                    r[i + 61] = av.lane(61);\n+                    r[i + 62] = av.lane(62);\n+                    r[i + 63] = av.lane(63);\n@@ -4556,1 +4548,1 @@\n-                        r[i+j]=av.lane(j);\n+                        r[i + j] = av.lane(j);\n@@ -4597,3 +4589,0 @@\n-\n-\n-\n@@ -4603,2 +4592,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = a[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = a[idx + i + origin];\n@@ -4606,1 +4595,1 @@\n-                res[i] = (short)0;\n+                res[i] = (short) 0;\n@@ -4629,1 +4618,1 @@\n-                res[i] = a[idx+i+origin];\n+                res[i] = a[idx + i + origin];\n@@ -4631,1 +4620,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n@@ -4657,2 +4646,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = mask[i] ? a[idx+i+origin] : (short)0;\n+            if(i + origin < SPECIES.length())\n+                res[i] = mask[i] ? a[idx + i + origin] : (short) 0;\n@@ -4660,1 +4649,1 @@\n-                res[i] = mask[i] ? b[idx+j] : (short)0;\n+                res[i] = mask[i] ? b[idx + j] : (short) 0;\n@@ -4691,1 +4680,1 @@\n-                res[i] = (short)0;\n+                res[i] = (short) 0;\n@@ -4693,1 +4682,1 @@\n-                res[i] = a[idx+j];\n+                res[i] = a[idx + j];\n@@ -4719,1 +4708,1 @@\n-                    res[i] = b[idx+i];\n+                    res[i] = b[idx + i];\n@@ -4721,1 +4710,1 @@\n-                    res[i] = a[idx+j];\n+                    res[i] = a[idx + j];\n@@ -4726,1 +4715,1 @@\n-                    res[i] = a[idx+SPECIES.length()-origin+i];\n+                    res[i] = a[idx + SPECIES.length() - origin + i];\n@@ -4728,1 +4717,1 @@\n-                    res[i] = b[idx+origin+j];\n+                    res[i] = b[idx + origin + j];\n@@ -4756,2 +4745,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = b[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = b[idx + i + origin];\n@@ -4759,1 +4748,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n@@ -4764,1 +4753,1 @@\n-            res[i] = mask[i] ? a[idx+i] : res[i];\n+            res[i] = mask[i] ? a[idx + i] : res[i];\n@@ -4770,1 +4759,1 @@\n-                    res1[i] = b[idx+i];\n+                    res1[i] = b[idx + i];\n@@ -4772,2 +4761,2 @@\n-                   res1[i] = res[j];\n-                   j++;\n+                    res1[i] = res[j];\n+                    j++;\n@@ -4779,1 +4768,1 @@\n-                    res1[i] = res[SPECIES.length()-origin+i];\n+                    res1[i] = res[SPECIES.length() - origin + i];\n@@ -4781,1 +4770,1 @@\n-                    res1[i] = b[idx+origin+j];\n+                    res1[i] = b[idx + origin + j];\n@@ -4833,1 +4822,1 @@\n-        return (short)((a&~(c))|(b&c));\n+        return (short) ((a &~ (c)) | (b & c));\n@@ -4836,1 +4825,1 @@\n-        return (short)((a&~(c))|(b&c));\n+        return (short) ((a &~ (c)) | (b & c));\n@@ -5052,1 +5041,1 @@\n-        return (short)(-((short)a));\n+        return (short) (-((short) a));\n@@ -5056,1 +5045,1 @@\n-        return (short)(-((short)a));\n+        return (short) (-((short) a));\n@@ -5108,1 +5097,1 @@\n-        return (short)(Math.abs((short)a));\n+        return (short) (Math.abs((short) a));\n@@ -5112,1 +5101,1 @@\n-        return (short)(Math.abs((short)a));\n+        return (short) (Math.abs((short) a));\n@@ -5165,1 +5154,1 @@\n-        return (short)(~((short)a));\n+        return (short) (~((short) a));\n@@ -5169,1 +5158,1 @@\n-        return (short)(~((short)a));\n+        return (short) (~((short) a));\n@@ -5227,1 +5216,1 @@\n-        return (short)((a==0?0:-1));\n+        return (short) ((a == 0 ? 0 : -1));\n@@ -5279,1 +5268,1 @@\n-        return (short)(Integer.bitCount((int)a & 0xFFFF));\n+        return (short) (Integer.bitCount((int) a & 0xFFFF));\n@@ -5322,1 +5311,1 @@\n-        return (short)(TRAILING_ZEROS_COUNT_scalar(a));\n+        return (short) (TRAILING_ZEROS_COUNT_scalar(a));\n@@ -5365,1 +5354,1 @@\n-        return (short)(LEADING_ZEROS_COUNT_scalar(a));\n+        return (short) (LEADING_ZEROS_COUNT_scalar(a));\n@@ -5408,1 +5397,1 @@\n-        return (short)(REVERSE_scalar(a));\n+        return (short) (REVERSE_scalar(a));\n@@ -5548,1 +5537,1 @@\n-        return (long)res;\n+        return (long) res;\n@@ -5587,1 +5576,1 @@\n-        return (long)res;\n+        return (long) res;\n@@ -5644,1 +5633,1 @@\n-                av.blend((long)b[i], vmask).intoArray(r, i);\n+                av.blend((long) b[i], vmask).intoArray(r, i);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short256VectorTests.java","additions":306,"deletions":317,"binary":false,"changes":623,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,1 +74,1 @@\n-                Assert.assertEquals(r[i], mask[(i*8\/SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0);\n+                Assert.assertEquals(r[i], mask[(i * 8 \/ SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0);\n@@ -77,1 +77,1 @@\n-            Assert.assertEquals(r[i], mask[(i*8\/SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0, \"at index #\" + i);\n+            Assert.assertEquals(r[i], mask[(i * 8 \/ SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0, \"at index #\" + i);\n@@ -84,1 +84,1 @@\n-                            i -> (short)(i * 5));\n+                            i -> (short) (i * 5));\n@@ -88,1 +88,1 @@\n-                            i -> (((short)(i + 1) == 0) ? 1 : (short)(i + 1)));\n+                            i -> (((short) (i + 1) == 0) ? 1 : (short) (i + 1)));\n@@ -195,1 +195,1 @@\n-                            return new Object[]{fa, fb, bo};\n+                            return new Object[] {fa, fb, bo};\n@@ -206,1 +206,1 @@\n-                            return new Object[]{fa, fb, fm, bo};\n+                            return new Object[] {fa, fb, fm, bo};\n@@ -215,1 +215,1 @@\n-                    return new Object[]{fa, bo};\n+                    return new Object[] {fa, bo};\n@@ -225,1 +225,1 @@\n-                        return new Object[]{fa, fm, bo};\n+                        return new Object[] {fa, fm, bo};\n@@ -942,1 +942,0 @@\n-\n@@ -957,1 +956,1 @@\n-                            i -> (char)(i * 5));\n+                            i -> (char) (i * 5));\n@@ -961,1 +960,1 @@\n-                            i -> (((char)(i + 1) == 0) ? 1 : (char)(i + 1)));\n+                            i -> (((char) (i + 1) == 0) ? 1 : (char) (i + 1)));\n@@ -968,1 +967,1 @@\n-                map(f -> new Object[]{f}).\n+                map(f -> new Object[] {f}).\n@@ -1188,2 +1187,0 @@\n-\n-\n@@ -1415,1 +1412,0 @@\n-\n@@ -1484,1 +1480,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short512VectorLoadStoreTests.java","additions":12,"deletions":17,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -93,1 +93,1 @@\n-            short[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            short[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -253,1 +253,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i+order[i + j]]);\n@@ -258,1 +258,1 @@\n-            Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i+order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]]);\n@@ -274,1 +274,1 @@\n-                    Assert.assertEquals(r[i + k], (short)0);\n+                    Assert.assertEquals(r[i + k], (short) 0);\n@@ -282,1 +282,1 @@\n-                Assert.assertEquals(r[idx], (short)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], (short) 0, \"at index #\" + idx);\n@@ -297,1 +297,1 @@\n-                        Assert.assertEquals(r[i + j], (short)0);\n+                        Assert.assertEquals(r[i + j], (short) 0);\n@@ -306,1 +306,1 @@\n-                Assert.assertEquals(r[idx], (short)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], (short) 0, \"at index #\" + idx);\n@@ -316,1 +316,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -321,1 +321,1 @@\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]]);\n@@ -331,1 +331,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + order[i + j]]);\n@@ -333,1 +333,1 @@\n-                         Assert.assertEquals(r[i+j], (short)0);\n+                         Assert.assertEquals(r[i + j], (short) 0);\n@@ -339,1 +339,1 @@\n-                Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -341,1 +341,1 @@\n-                Assert.assertEquals(r[i+j], (short)0, \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], (short) 0, \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -351,1 +351,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -353,1 +353,1 @@\n-                         Assert.assertEquals(r[i+j], (short)0);\n+                         Assert.assertEquals(r[i + j], (short) 0);\n@@ -359,1 +359,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -361,1 +361,1 @@\n-                Assert.assertEquals(r[i+j], (short)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], (short) 0, \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -370,1 +370,1 @@\n-                a[j]=a[idx];\n+                a[j] = a[idx];\n@@ -421,1 +421,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], (short)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])));\n+                Assert.assertEquals(r[i], f.apply(a[i], (short) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])));\n@@ -424,1 +424,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], (short)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])),\n+            Assert.assertEquals(r[i], f.apply(a[i], (short) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])),\n@@ -470,1 +470,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], (short)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n+                Assert.assertEquals(r[i], f.apply(a[i], (short) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n@@ -473,1 +473,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], (short)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]),\n+            Assert.assertEquals(r[i], f.apply(a[i], (short) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]),\n@@ -486,1 +486,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]));\n@@ -490,1 +490,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]), \"at index #\" + i + \", \" + j);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]), \"at index #\" + i + \", \" + j);\n@@ -504,1 +504,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]));\n@@ -508,1 +508,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i+j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i + j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n@@ -657,1 +657,0 @@\n-\n@@ -681,1 +680,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -686,1 +685,1 @@\n-            short[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            short[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -689,1 +688,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -691,1 +690,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -708,1 +707,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -713,1 +712,1 @@\n-            short[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            short[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -716,1 +715,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -718,1 +717,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -729,1 +728,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -734,1 +733,1 @@\n-            short[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            short[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -737,1 +736,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -739,1 +738,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -741,1 +740,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(r, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(r, i, i + SPECIES.length()))\n@@ -756,1 +755,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -761,1 +760,1 @@\n-            short[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            short[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -776,1 +775,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -781,1 +780,1 @@\n-            short[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            short[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -797,1 +796,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -802,1 +801,1 @@\n-            short[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            short[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -818,1 +817,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -823,1 +822,1 @@\n-            short[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            short[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -840,1 +839,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -845,1 +844,1 @@\n-            short[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            short[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -859,1 +858,1 @@\n-                Assert.assertEquals(r[i], (int)(a[i+offs]));\n+                Assert.assertEquals(r[i], (int) (a[i + offs]));\n@@ -862,1 +861,1 @@\n-            Assert.assertEquals(r[i], (int)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (int) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -872,1 +871,1 @@\n-                Assert.assertEquals(r[i], (long)(a[i+offs]));\n+                Assert.assertEquals(r[i], (long) (a[i + offs]));\n@@ -875,1 +874,1 @@\n-            Assert.assertEquals(r[i], (long)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (long) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -883,1 +882,1 @@\n-                Assert.assertEquals(r[i], (double)(a[i+offs]));\n+                Assert.assertEquals(r[i], (double) (a[i + offs]));\n@@ -886,1 +885,1 @@\n-            Assert.assertEquals(r[i], (double)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (double) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -890,1 +889,0 @@\n-\n@@ -898,1 +896,1 @@\n-                            i -> (short)(-i * 5));\n+                            i -> (short) (-i * 5));\n@@ -902,1 +900,1 @@\n-                            i -> (short)(i * 5));\n+                            i -> (short) (i * 5));\n@@ -906,1 +904,1 @@\n-                            i -> (((short)(i + 1) == 0) ? 1 : (short)(i + 1)));\n+                            i -> (((short) (i + 1) == 0) ? 1 : (short) (i + 1)));\n@@ -1037,1 +1035,1 @@\n-                    a[i] = (short)RAND.nextInt(upper);\n+                    a[i] = (short) RAND.nextInt(upper);\n@@ -1062,1 +1060,0 @@\n-\n@@ -1066,1 +1063,1 @@\n-                            i -> (short)i);\n+                            i -> (short) i);\n@@ -1070,1 +1067,1 @@\n-                            i -> (short)(i - (s * BUFFER_REPS \/ 2)));\n+                            i -> (short) (i - (s * BUFFER_REPS \/ 2)));\n@@ -1074,1 +1071,1 @@\n-                            i -> (short)(i + 1));\n+                            i -> (short) (i + 1));\n@@ -1078,1 +1075,1 @@\n-                            i -> (short)(i - 2));\n+                            i -> (short) (i - 2));\n@@ -1082,1 +1079,1 @@\n-                            i -> i%3 == 0 ? (short)i : (i%3 == 1 ? (short)(i + 1) : (short)(i - 2)));\n+                            i -> i % 3 == 0 ? (short) i : (i % 3 == 1 ? (short) (i + 1) : (short) (i - 2)));\n@@ -1156,1 +1153,1 @@\n-                return (short)0;\n+                return (short) 0;\n@@ -1196,1 +1193,1 @@\n-        return (short)(((((short)a) & 0xFFFF) << (b & 15)) | ((((short)a) & 0xFFFF) >>> (16 - (b & 15))));\n+        return (short) (((((short) a) & 0xFFFF) << (b & 15)) | ((((short) a) & 0xFFFF) >>> (16 - (b & 15))));\n@@ -1200,1 +1197,1 @@\n-        return (short)(((((short)a) & 0xFFFF) >>> (b & 15)) | ((((short)a) & 0xFFFF) << (16 - (b & 15))));\n+        return (short) (((((short) a) & 0xFFFF) >>> (b & 15)) | ((((short) a) & 0xFFFF) << (16 - (b & 15))));\n@@ -1213,3 +1210,3 @@\n-        b = (short)(((b & 0x5555) << 1) | ((b & 0xAAAA) >>> 1));\n-        b = (short)(((b & 0x3333) << 2) | ((b & 0xCCCC) >>> 2));\n-        b = (short)(((b & 0x0F0F) << 4) | ((b & 0xF0F0) >>> 4));\n+        b = (short) (((b & 0x5555) << 1) | ((b & 0xAAAA) >>> 1));\n+        b = (short) (((b & 0x3333) << 2) | ((b & 0xCCCC) >>> 2));\n+        b = (short) (((b & 0x0F0F) << 4) | ((b & 0xF0F0) >>> 4));\n@@ -1219,1 +1216,0 @@\n-\n@@ -1266,1 +1262,1 @@\n-        ShortVector three = ShortVector.broadcast(SPECIES, (byte)-3);\n+        ShortVector three = ShortVector.broadcast(SPECIES, (byte) -3);\n@@ -1280,1 +1276,1 @@\n-        m = higher.min((short)-1).test(VectorOperators.IS_NEGATIVE);\n+        m = higher.min((short) -1).test(VectorOperators.IS_NEGATIVE);\n@@ -1283,1 +1279,1 @@\n-        assert(max == -3 + scale * (SPECIES.length()-1));\n+        assert(max == -3 + scale * (SPECIES.length() - 1));\n@@ -1298,1 +1294,1 @@\n-        ShortVector io2 = (ShortVector) VectorShuffle.iota(SPECIES,0,1,false).toVector();\n+        ShortVector io2 = (ShortVector) VectorShuffle.iota(SPECIES, 0, 1, false).toVector();\n@@ -1300,1 +1296,1 @@\n-        ShortVector a = io.add((short)1); \/\/[1,2]\n+        ShortVector a = io.add((short) 1); \/\/[1,2]\n@@ -1305,2 +1301,2 @@\n-        ShortVector zab0 = a.rearrange(zip0,b); \/\/[1,-1]\n-        ShortVector zab1 = a.rearrange(zip1,b); \/\/[2,-2]\n+        ShortVector zab0 = a.rearrange(zip0, b); \/\/[1,-1]\n+        ShortVector zab1 = a.rearrange(zip1, b); \/\/[2,-2]\n@@ -1311,2 +1307,2 @@\n-            manual[i+0] = abValues[i\/2];\n-            manual[i+1] = abValues[a.length() + i\/2];\n+            manual[i + 0] = abValues[i \/ 2];\n+            manual[i + 1] = abValues[a.length() + i \/ 2];\n@@ -1317,2 +1313,2 @@\n-        ShortVector uab0 = zab0.rearrange(unz0,zab1);\n-        ShortVector uab1 = zab0.rearrange(unz1,zab1);\n+        ShortVector uab0 = zab0.rearrange(unz0, zab1);\n+        ShortVector uab1 = zab0.rearrange(unz1, zab1);\n@@ -1370,1 +1366,1 @@\n-        return (short)(a + b);\n+        return (short) (a + b);\n@@ -1390,1 +1386,1 @@\n-        return (short)(a + b);\n+        return (short) (a + b);\n@@ -1446,1 +1442,1 @@\n-        return (short)(a - b);\n+        return (short) (a - b);\n@@ -1466,1 +1462,1 @@\n-        return (short)(a - b);\n+        return (short) (a - b);\n@@ -1522,1 +1518,1 @@\n-        return (short)(a * b);\n+        return (short) (a * b);\n@@ -1542,1 +1538,1 @@\n-        return (short)(a * b);\n+        return (short) (a * b);\n@@ -1601,1 +1597,1 @@\n-        return (short)(a \/ b);\n+        return (short) (a \/ b);\n@@ -1623,1 +1619,1 @@\n-        return (short)(a \/ b);\n+        return (short) (a \/ b);\n@@ -1692,1 +1688,1 @@\n-        return (short)((a)!=0?a:b);\n+        return (short) ((a) != 0 ? a : b);\n@@ -1733,1 +1729,1 @@\n-        return (short)(a & b);\n+        return (short) (a & b);\n@@ -1753,1 +1749,1 @@\n-        return (short)(a & b);\n+        return (short) (a & b);\n@@ -1795,1 +1791,1 @@\n-        return (short)(a & ~b);\n+        return (short) (a & ~b);\n@@ -1839,1 +1835,1 @@\n-        return (short)(a | b);\n+        return (short) (a | b);\n@@ -1859,1 +1855,1 @@\n-        return (short)(a | b);\n+        return (short) (a | b);\n@@ -1901,1 +1897,1 @@\n-        return (short)(a ^ b);\n+        return (short) (a ^ b);\n@@ -2185,1 +2181,1 @@\n-            av.lanewise(VectorOperators.OR, (long)b[i]).intoArray(r, i);\n+            av.lanewise(VectorOperators.OR, (long) b[i]).intoArray(r, i);\n@@ -2204,1 +2200,1 @@\n-            av.lanewise(VectorOperators.OR, (long)b[i], vmask).intoArray(r, i);\n+            av.lanewise(VectorOperators.OR, (long) b[i], vmask).intoArray(r, i);\n@@ -2219,1 +2215,1 @@\n-            av.lanewise(VectorOperators.ADD, (long)b[i]).intoArray(r, i);\n+            av.lanewise(VectorOperators.ADD, (long) b[i]).intoArray(r, i);\n@@ -2236,1 +2232,1 @@\n-            av.lanewise(VectorOperators.ADD, (long)b[i], vmask).intoArray(r, i);\n+            av.lanewise(VectorOperators.ADD, (long) b[i], vmask).intoArray(r, i);\n@@ -2247,1 +2243,1 @@\n-        return (short)((a << (b & 0xF)));\n+        return (short) ((a << (b & 0xF)));\n@@ -2295,1 +2291,1 @@\n-        return (short)((a >> (b & 0xF)));\n+        return (short) ((a >> (b & 0xF)));\n@@ -2343,1 +2339,1 @@\n-        return (short)(((a & 0xFFFF) >>> (b & 0xF)));\n+        return (short) (((a & 0xFFFF) >>> (b & 0xF)));\n@@ -2391,1 +2387,1 @@\n-        return (short)((a << (b & 15)));\n+        return (short) ((a << (b & 15)));\n@@ -2403,1 +2399,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i]).intoArray(r, i);\n@@ -2424,1 +2420,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i], vmask).intoArray(r, i);\n@@ -2437,1 +2433,1 @@\n-        return (short)(((a & 0xFFFF) >>> (b & 15)));\n+        return (short) (((a & 0xFFFF) >>> (b & 15)));\n@@ -2449,1 +2445,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i]).intoArray(r, i);\n@@ -2470,1 +2466,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i], vmask).intoArray(r, i);\n@@ -2483,1 +2479,1 @@\n-        return (short)((a >> (b & 15)));\n+        return (short) ((a >> (b & 15)));\n@@ -2495,1 +2491,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i]).intoArray(r, i);\n@@ -2516,1 +2512,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i], vmask).intoArray(r, i);\n@@ -2525,1 +2521,1 @@\n-        return (short)(ROR_scalar(a,b));\n+        return (short) (ROR_scalar(a, b));\n@@ -2569,1 +2565,1 @@\n-        return (short)(ROL_scalar(a,b));\n+        return (short) (ROL_scalar(a, b));\n@@ -2613,1 +2609,1 @@\n-        return (short)(ROR_scalar(a,b));\n+        return (short) (ROR_scalar(a, b));\n@@ -2625,1 +2621,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i]).intoArray(r, i);\n@@ -2646,1 +2642,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i], vmask).intoArray(r, i);\n@@ -2655,1 +2651,1 @@\n-        return (short)(ROL_scalar(a,b));\n+        return (short) (ROL_scalar(a, b));\n@@ -2667,1 +2663,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i]).intoArray(r, i);\n@@ -2688,1 +2684,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i], vmask).intoArray(r, i);\n@@ -2696,1 +2692,1 @@\n-        return (short)(Math.min(a, b));\n+        return (short) (Math.min(a, b));\n@@ -2716,1 +2712,1 @@\n-        return (short)(Math.min(a, b));\n+        return (short) (Math.min(a, b));\n@@ -2734,1 +2730,1 @@\n-        return (short)(Math.max(a, b));\n+        return (short) (Math.max(a, b));\n@@ -2754,1 +2750,1 @@\n-        return (short)(Math.max(a, b));\n+        return (short) (Math.max(a, b));\n@@ -3592,1 +3588,1 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (short)(65535+i)).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length() - 1)), (short) (65535 + i)).intoArray(r, i);\n@@ -3598,1 +3594,1 @@\n-            assertInsertArraysEquals(r, a, (short)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+            assertInsertArraysEquals(r, a, (short) (65535 + i), (j++ & (SPECIES.length() - 1)), i , i + SPECIES.length());\n@@ -3602,1 +3598,1 @@\n-        return bits(a)==0;\n+        return bits(a) == 0;\n@@ -3635,1 +3631,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_DEFAULT(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_DEFAULT(a[i + j]));\n@@ -3640,1 +3636,1 @@\n-        return bits(a)<0;\n+        return bits(a) < 0;\n@@ -3673,1 +3669,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_NEGATIVE(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_NEGATIVE(a[i + j]));\n@@ -4183,1 +4179,0 @@\n-\n@@ -4211,1 +4206,1 @@\n-            VectorMask<Short> mv = av.compare(VectorOperators.LT, (long)b[i]);\n+            VectorMask<Short> mv = av.compare(VectorOperators.LT, (long) b[i]);\n@@ -4215,1 +4210,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), a[i + j] < (short)((long)b[i]));\n+                Assert.assertEquals(mv.laneIsSet(j), a[i + j] < (short) ((long) b[i]));\n@@ -4220,1 +4215,0 @@\n-\n@@ -4232,1 +4226,1 @@\n-            VectorMask<Short> mv = av.compare(VectorOperators.LT, (long)b[i], vmask);\n+            VectorMask<Short> mv = av.compare(VectorOperators.LT, (long) b[i], vmask);\n@@ -4236,1 +4230,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] < (short)((long)b[i])));\n+                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] < (short) ((long) b[i])));\n@@ -4257,1 +4251,0 @@\n-\n@@ -4285,1 +4278,1 @@\n-            VectorMask<Short> mv = av.compare(VectorOperators.EQ, (long)b[i]);\n+            VectorMask<Short> mv = av.compare(VectorOperators.EQ, (long) b[i]);\n@@ -4289,1 +4282,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), a[i + j] == (short)((long)b[i]));\n+                Assert.assertEquals(mv.laneIsSet(j), a[i + j] == (short) ((long) b[i]));\n@@ -4294,1 +4287,0 @@\n-\n@@ -4306,1 +4298,1 @@\n-            VectorMask<Short> mv = av.compare(VectorOperators.EQ, (long)b[i], vmask);\n+            VectorMask<Short> mv = av.compare(VectorOperators.EQ, (long) b[i], vmask);\n@@ -4310,1 +4302,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] == (short)((long)b[i])));\n+                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] == (short) ((long) b[i])));\n@@ -4421,1 +4413,1 @@\n-                    r[i]=av.lane(0);\n+                    r[i] = av.lane(0);\n@@ -4423,2 +4415,2 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n@@ -4426,4 +4418,4 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n@@ -4431,8 +4423,8 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n@@ -4440,16 +4432,16 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n@@ -4457,32 +4449,32 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n@@ -4490,64 +4482,64 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n-                    r[i+32]=av.lane(32);\n-                    r[i+33]=av.lane(33);\n-                    r[i+34]=av.lane(34);\n-                    r[i+35]=av.lane(35);\n-                    r[i+36]=av.lane(36);\n-                    r[i+37]=av.lane(37);\n-                    r[i+38]=av.lane(38);\n-                    r[i+39]=av.lane(39);\n-                    r[i+40]=av.lane(40);\n-                    r[i+41]=av.lane(41);\n-                    r[i+42]=av.lane(42);\n-                    r[i+43]=av.lane(43);\n-                    r[i+44]=av.lane(44);\n-                    r[i+45]=av.lane(45);\n-                    r[i+46]=av.lane(46);\n-                    r[i+47]=av.lane(47);\n-                    r[i+48]=av.lane(48);\n-                    r[i+49]=av.lane(49);\n-                    r[i+50]=av.lane(50);\n-                    r[i+51]=av.lane(51);\n-                    r[i+52]=av.lane(52);\n-                    r[i+53]=av.lane(53);\n-                    r[i+54]=av.lane(54);\n-                    r[i+55]=av.lane(55);\n-                    r[i+56]=av.lane(56);\n-                    r[i+57]=av.lane(57);\n-                    r[i+58]=av.lane(58);\n-                    r[i+59]=av.lane(59);\n-                    r[i+60]=av.lane(60);\n-                    r[i+61]=av.lane(61);\n-                    r[i+62]=av.lane(62);\n-                    r[i+63]=av.lane(63);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n+                    r[i + 32] = av.lane(32);\n+                    r[i + 33] = av.lane(33);\n+                    r[i + 34] = av.lane(34);\n+                    r[i + 35] = av.lane(35);\n+                    r[i + 36] = av.lane(36);\n+                    r[i + 37] = av.lane(37);\n+                    r[i + 38] = av.lane(38);\n+                    r[i + 39] = av.lane(39);\n+                    r[i + 40] = av.lane(40);\n+                    r[i + 41] = av.lane(41);\n+                    r[i + 42] = av.lane(42);\n+                    r[i + 43] = av.lane(43);\n+                    r[i + 44] = av.lane(44);\n+                    r[i + 45] = av.lane(45);\n+                    r[i + 46] = av.lane(46);\n+                    r[i + 47] = av.lane(47);\n+                    r[i + 48] = av.lane(48);\n+                    r[i + 49] = av.lane(49);\n+                    r[i + 50] = av.lane(50);\n+                    r[i + 51] = av.lane(51);\n+                    r[i + 52] = av.lane(52);\n+                    r[i + 53] = av.lane(53);\n+                    r[i + 54] = av.lane(54);\n+                    r[i + 55] = av.lane(55);\n+                    r[i + 56] = av.lane(56);\n+                    r[i + 57] = av.lane(57);\n+                    r[i + 58] = av.lane(58);\n+                    r[i + 59] = av.lane(59);\n+                    r[i + 60] = av.lane(60);\n+                    r[i + 61] = av.lane(61);\n+                    r[i + 62] = av.lane(62);\n+                    r[i + 63] = av.lane(63);\n@@ -4556,1 +4548,1 @@\n-                        r[i+j]=av.lane(j);\n+                        r[i + j] = av.lane(j);\n@@ -4597,3 +4589,0 @@\n-\n-\n-\n@@ -4603,2 +4592,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = a[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = a[idx + i + origin];\n@@ -4606,1 +4595,1 @@\n-                res[i] = (short)0;\n+                res[i] = (short) 0;\n@@ -4629,1 +4618,1 @@\n-                res[i] = a[idx+i+origin];\n+                res[i] = a[idx + i + origin];\n@@ -4631,1 +4620,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n@@ -4657,2 +4646,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = mask[i] ? a[idx+i+origin] : (short)0;\n+            if(i + origin < SPECIES.length())\n+                res[i] = mask[i] ? a[idx + i + origin] : (short) 0;\n@@ -4660,1 +4649,1 @@\n-                res[i] = mask[i] ? b[idx+j] : (short)0;\n+                res[i] = mask[i] ? b[idx + j] : (short) 0;\n@@ -4691,1 +4680,1 @@\n-                res[i] = (short)0;\n+                res[i] = (short) 0;\n@@ -4693,1 +4682,1 @@\n-                res[i] = a[idx+j];\n+                res[i] = a[idx + j];\n@@ -4719,1 +4708,1 @@\n-                    res[i] = b[idx+i];\n+                    res[i] = b[idx + i];\n@@ -4721,1 +4710,1 @@\n-                    res[i] = a[idx+j];\n+                    res[i] = a[idx + j];\n@@ -4726,1 +4715,1 @@\n-                    res[i] = a[idx+SPECIES.length()-origin+i];\n+                    res[i] = a[idx + SPECIES.length() - origin + i];\n@@ -4728,1 +4717,1 @@\n-                    res[i] = b[idx+origin+j];\n+                    res[i] = b[idx + origin + j];\n@@ -4756,2 +4745,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = b[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = b[idx + i + origin];\n@@ -4759,1 +4748,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n@@ -4764,1 +4753,1 @@\n-            res[i] = mask[i] ? a[idx+i] : res[i];\n+            res[i] = mask[i] ? a[idx + i] : res[i];\n@@ -4770,1 +4759,1 @@\n-                    res1[i] = b[idx+i];\n+                    res1[i] = b[idx + i];\n@@ -4772,2 +4761,2 @@\n-                   res1[i] = res[j];\n-                   j++;\n+                    res1[i] = res[j];\n+                    j++;\n@@ -4779,1 +4768,1 @@\n-                    res1[i] = res[SPECIES.length()-origin+i];\n+                    res1[i] = res[SPECIES.length() - origin + i];\n@@ -4781,1 +4770,1 @@\n-                    res1[i] = b[idx+origin+j];\n+                    res1[i] = b[idx + origin + j];\n@@ -4833,1 +4822,1 @@\n-        return (short)((a&~(c))|(b&c));\n+        return (short) ((a &~ (c)) | (b & c));\n@@ -4836,1 +4825,1 @@\n-        return (short)((a&~(c))|(b&c));\n+        return (short) ((a &~ (c)) | (b & c));\n@@ -5052,1 +5041,1 @@\n-        return (short)(-((short)a));\n+        return (short) (-((short) a));\n@@ -5056,1 +5045,1 @@\n-        return (short)(-((short)a));\n+        return (short) (-((short) a));\n@@ -5108,1 +5097,1 @@\n-        return (short)(Math.abs((short)a));\n+        return (short) (Math.abs((short) a));\n@@ -5112,1 +5101,1 @@\n-        return (short)(Math.abs((short)a));\n+        return (short) (Math.abs((short) a));\n@@ -5165,1 +5154,1 @@\n-        return (short)(~((short)a));\n+        return (short) (~((short) a));\n@@ -5169,1 +5158,1 @@\n-        return (short)(~((short)a));\n+        return (short) (~((short) a));\n@@ -5227,1 +5216,1 @@\n-        return (short)((a==0?0:-1));\n+        return (short) ((a == 0 ? 0 : -1));\n@@ -5279,1 +5268,1 @@\n-        return (short)(Integer.bitCount((int)a & 0xFFFF));\n+        return (short) (Integer.bitCount((int) a & 0xFFFF));\n@@ -5322,1 +5311,1 @@\n-        return (short)(TRAILING_ZEROS_COUNT_scalar(a));\n+        return (short) (TRAILING_ZEROS_COUNT_scalar(a));\n@@ -5365,1 +5354,1 @@\n-        return (short)(LEADING_ZEROS_COUNT_scalar(a));\n+        return (short) (LEADING_ZEROS_COUNT_scalar(a));\n@@ -5408,1 +5397,1 @@\n-        return (short)(REVERSE_scalar(a));\n+        return (short) (REVERSE_scalar(a));\n@@ -5548,1 +5537,1 @@\n-        return (long)res;\n+        return (long) res;\n@@ -5587,1 +5576,1 @@\n-        return (long)res;\n+        return (long) res;\n@@ -5644,1 +5633,1 @@\n-                av.blend((long)b[i], vmask).intoArray(r, i);\n+                av.blend((long) b[i], vmask).intoArray(r, i);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short512VectorTests.java","additions":306,"deletions":317,"binary":false,"changes":623,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,1 +74,1 @@\n-                Assert.assertEquals(r[i], mask[(i*8\/SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0);\n+                Assert.assertEquals(r[i], mask[(i * 8 \/ SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0);\n@@ -77,1 +77,1 @@\n-            Assert.assertEquals(r[i], mask[(i*8\/SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0, \"at index #\" + i);\n+            Assert.assertEquals(r[i], mask[(i * 8 \/ SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0, \"at index #\" + i);\n@@ -84,1 +84,1 @@\n-                            i -> (short)(i * 5));\n+                            i -> (short) (i * 5));\n@@ -88,1 +88,1 @@\n-                            i -> (((short)(i + 1) == 0) ? 1 : (short)(i + 1)));\n+                            i -> (((short) (i + 1) == 0) ? 1 : (short) (i + 1)));\n@@ -195,1 +195,1 @@\n-                            return new Object[]{fa, fb, bo};\n+                            return new Object[] {fa, fb, bo};\n@@ -206,1 +206,1 @@\n-                            return new Object[]{fa, fb, fm, bo};\n+                            return new Object[] {fa, fb, fm, bo};\n@@ -215,1 +215,1 @@\n-                    return new Object[]{fa, bo};\n+                    return new Object[] {fa, bo};\n@@ -225,1 +225,1 @@\n-                        return new Object[]{fa, fm, bo};\n+                        return new Object[] {fa, fm, bo};\n@@ -942,1 +942,0 @@\n-\n@@ -957,1 +956,1 @@\n-                            i -> (char)(i * 5));\n+                            i -> (char) (i * 5));\n@@ -961,1 +960,1 @@\n-                            i -> (((char)(i + 1) == 0) ? 1 : (char)(i + 1)));\n+                            i -> (((char) (i + 1) == 0) ? 1 : (char) (i + 1)));\n@@ -968,1 +967,1 @@\n-                map(f -> new Object[]{f}).\n+                map(f -> new Object[] {f}).\n@@ -1188,2 +1187,0 @@\n-\n-\n@@ -1415,1 +1412,0 @@\n-\n@@ -1484,1 +1480,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short64VectorLoadStoreTests.java","additions":12,"deletions":17,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -93,1 +93,1 @@\n-            short[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            short[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -253,1 +253,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i+order[i + j]]);\n@@ -258,1 +258,1 @@\n-            Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i+order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]]);\n@@ -274,1 +274,1 @@\n-                    Assert.assertEquals(r[i + k], (short)0);\n+                    Assert.assertEquals(r[i + k], (short) 0);\n@@ -282,1 +282,1 @@\n-                Assert.assertEquals(r[idx], (short)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], (short) 0, \"at index #\" + idx);\n@@ -297,1 +297,1 @@\n-                        Assert.assertEquals(r[i + j], (short)0);\n+                        Assert.assertEquals(r[i + j], (short) 0);\n@@ -306,1 +306,1 @@\n-                Assert.assertEquals(r[idx], (short)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], (short) 0, \"at index #\" + idx);\n@@ -316,1 +316,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -321,1 +321,1 @@\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]]);\n@@ -331,1 +331,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + order[i + j]]);\n@@ -333,1 +333,1 @@\n-                         Assert.assertEquals(r[i+j], (short)0);\n+                         Assert.assertEquals(r[i + j], (short) 0);\n@@ -339,1 +339,1 @@\n-                Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -341,1 +341,1 @@\n-                Assert.assertEquals(r[i+j], (short)0, \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], (short) 0, \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -351,1 +351,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -353,1 +353,1 @@\n-                         Assert.assertEquals(r[i+j], (short)0);\n+                         Assert.assertEquals(r[i + j], (short) 0);\n@@ -359,1 +359,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -361,1 +361,1 @@\n-                Assert.assertEquals(r[i+j], (short)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], (short) 0, \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -370,1 +370,1 @@\n-                a[j]=a[idx];\n+                a[j] = a[idx];\n@@ -421,1 +421,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], (short)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])));\n+                Assert.assertEquals(r[i], f.apply(a[i], (short) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])));\n@@ -424,1 +424,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], (short)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])),\n+            Assert.assertEquals(r[i], f.apply(a[i], (short) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])),\n@@ -470,1 +470,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], (short)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n+                Assert.assertEquals(r[i], f.apply(a[i], (short) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n@@ -473,1 +473,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], (short)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]),\n+            Assert.assertEquals(r[i], f.apply(a[i], (short) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]),\n@@ -486,1 +486,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]));\n@@ -490,1 +490,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]), \"at index #\" + i + \", \" + j);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]), \"at index #\" + i + \", \" + j);\n@@ -504,1 +504,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]));\n@@ -508,1 +508,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i+j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i + j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n@@ -657,1 +657,0 @@\n-\n@@ -681,1 +680,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -686,1 +685,1 @@\n-            short[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            short[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -689,1 +688,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -691,1 +690,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -708,1 +707,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -713,1 +712,1 @@\n-            short[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            short[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -716,1 +715,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -718,1 +717,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -729,1 +728,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -734,1 +733,1 @@\n-            short[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            short[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -737,1 +736,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -739,1 +738,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -741,1 +740,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(r, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(r, i, i + SPECIES.length()))\n@@ -756,1 +755,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -761,1 +760,1 @@\n-            short[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            short[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -776,1 +775,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -781,1 +780,1 @@\n-            short[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            short[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -797,1 +796,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -802,1 +801,1 @@\n-            short[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            short[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -818,1 +817,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -823,1 +822,1 @@\n-            short[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            short[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -840,1 +839,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -845,1 +844,1 @@\n-            short[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            short[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -859,1 +858,1 @@\n-                Assert.assertEquals(r[i], (int)(a[i+offs]));\n+                Assert.assertEquals(r[i], (int) (a[i + offs]));\n@@ -862,1 +861,1 @@\n-            Assert.assertEquals(r[i], (int)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (int) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -872,1 +871,1 @@\n-                Assert.assertEquals(r[i], (long)(a[i+offs]));\n+                Assert.assertEquals(r[i], (long) (a[i + offs]));\n@@ -875,1 +874,1 @@\n-            Assert.assertEquals(r[i], (long)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (long) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -883,1 +882,1 @@\n-                Assert.assertEquals(r[i], (double)(a[i+offs]));\n+                Assert.assertEquals(r[i], (double) (a[i + offs]));\n@@ -886,1 +885,1 @@\n-            Assert.assertEquals(r[i], (double)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (double) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -890,1 +889,0 @@\n-\n@@ -898,1 +896,1 @@\n-                            i -> (short)(-i * 5));\n+                            i -> (short) (-i * 5));\n@@ -902,1 +900,1 @@\n-                            i -> (short)(i * 5));\n+                            i -> (short) (i * 5));\n@@ -906,1 +904,1 @@\n-                            i -> (((short)(i + 1) == 0) ? 1 : (short)(i + 1)));\n+                            i -> (((short) (i + 1) == 0) ? 1 : (short) (i + 1)));\n@@ -1037,1 +1035,1 @@\n-                    a[i] = (short)RAND.nextInt(upper);\n+                    a[i] = (short) RAND.nextInt(upper);\n@@ -1062,1 +1060,0 @@\n-\n@@ -1066,1 +1063,1 @@\n-                            i -> (short)i);\n+                            i -> (short) i);\n@@ -1070,1 +1067,1 @@\n-                            i -> (short)(i - (s * BUFFER_REPS \/ 2)));\n+                            i -> (short) (i - (s * BUFFER_REPS \/ 2)));\n@@ -1074,1 +1071,1 @@\n-                            i -> (short)(i + 1));\n+                            i -> (short) (i + 1));\n@@ -1078,1 +1075,1 @@\n-                            i -> (short)(i - 2));\n+                            i -> (short) (i - 2));\n@@ -1082,1 +1079,1 @@\n-                            i -> i%3 == 0 ? (short)i : (i%3 == 1 ? (short)(i + 1) : (short)(i - 2)));\n+                            i -> i % 3 == 0 ? (short) i : (i % 3 == 1 ? (short) (i + 1) : (short) (i - 2)));\n@@ -1156,1 +1153,1 @@\n-                return (short)0;\n+                return (short) 0;\n@@ -1196,1 +1193,1 @@\n-        return (short)(((((short)a) & 0xFFFF) << (b & 15)) | ((((short)a) & 0xFFFF) >>> (16 - (b & 15))));\n+        return (short) (((((short) a) & 0xFFFF) << (b & 15)) | ((((short) a) & 0xFFFF) >>> (16 - (b & 15))));\n@@ -1200,1 +1197,1 @@\n-        return (short)(((((short)a) & 0xFFFF) >>> (b & 15)) | ((((short)a) & 0xFFFF) << (16 - (b & 15))));\n+        return (short) (((((short) a) & 0xFFFF) >>> (b & 15)) | ((((short) a) & 0xFFFF) << (16 - (b & 15))));\n@@ -1213,3 +1210,3 @@\n-        b = (short)(((b & 0x5555) << 1) | ((b & 0xAAAA) >>> 1));\n-        b = (short)(((b & 0x3333) << 2) | ((b & 0xCCCC) >>> 2));\n-        b = (short)(((b & 0x0F0F) << 4) | ((b & 0xF0F0) >>> 4));\n+        b = (short) (((b & 0x5555) << 1) | ((b & 0xAAAA) >>> 1));\n+        b = (short) (((b & 0x3333) << 2) | ((b & 0xCCCC) >>> 2));\n+        b = (short) (((b & 0x0F0F) << 4) | ((b & 0xF0F0) >>> 4));\n@@ -1219,1 +1216,0 @@\n-\n@@ -1266,1 +1262,1 @@\n-        ShortVector three = ShortVector.broadcast(SPECIES, (byte)-3);\n+        ShortVector three = ShortVector.broadcast(SPECIES, (byte) -3);\n@@ -1280,1 +1276,1 @@\n-        m = higher.min((short)-1).test(VectorOperators.IS_NEGATIVE);\n+        m = higher.min((short) -1).test(VectorOperators.IS_NEGATIVE);\n@@ -1283,1 +1279,1 @@\n-        assert(max == -3 + scale * (SPECIES.length()-1));\n+        assert(max == -3 + scale * (SPECIES.length() - 1));\n@@ -1298,1 +1294,1 @@\n-        ShortVector io2 = (ShortVector) VectorShuffle.iota(SPECIES,0,1,false).toVector();\n+        ShortVector io2 = (ShortVector) VectorShuffle.iota(SPECIES, 0, 1, false).toVector();\n@@ -1300,1 +1296,1 @@\n-        ShortVector a = io.add((short)1); \/\/[1,2]\n+        ShortVector a = io.add((short) 1); \/\/[1,2]\n@@ -1305,2 +1301,2 @@\n-        ShortVector zab0 = a.rearrange(zip0,b); \/\/[1,-1]\n-        ShortVector zab1 = a.rearrange(zip1,b); \/\/[2,-2]\n+        ShortVector zab0 = a.rearrange(zip0, b); \/\/[1,-1]\n+        ShortVector zab1 = a.rearrange(zip1, b); \/\/[2,-2]\n@@ -1311,2 +1307,2 @@\n-            manual[i+0] = abValues[i\/2];\n-            manual[i+1] = abValues[a.length() + i\/2];\n+            manual[i + 0] = abValues[i \/ 2];\n+            manual[i + 1] = abValues[a.length() + i \/ 2];\n@@ -1317,2 +1313,2 @@\n-        ShortVector uab0 = zab0.rearrange(unz0,zab1);\n-        ShortVector uab1 = zab0.rearrange(unz1,zab1);\n+        ShortVector uab0 = zab0.rearrange(unz0, zab1);\n+        ShortVector uab1 = zab0.rearrange(unz1, zab1);\n@@ -1370,1 +1366,1 @@\n-        return (short)(a + b);\n+        return (short) (a + b);\n@@ -1390,1 +1386,1 @@\n-        return (short)(a + b);\n+        return (short) (a + b);\n@@ -1446,1 +1442,1 @@\n-        return (short)(a - b);\n+        return (short) (a - b);\n@@ -1466,1 +1462,1 @@\n-        return (short)(a - b);\n+        return (short) (a - b);\n@@ -1522,1 +1518,1 @@\n-        return (short)(a * b);\n+        return (short) (a * b);\n@@ -1542,1 +1538,1 @@\n-        return (short)(a * b);\n+        return (short) (a * b);\n@@ -1601,1 +1597,1 @@\n-        return (short)(a \/ b);\n+        return (short) (a \/ b);\n@@ -1623,1 +1619,1 @@\n-        return (short)(a \/ b);\n+        return (short) (a \/ b);\n@@ -1692,1 +1688,1 @@\n-        return (short)((a)!=0?a:b);\n+        return (short) ((a) != 0 ? a : b);\n@@ -1733,1 +1729,1 @@\n-        return (short)(a & b);\n+        return (short) (a & b);\n@@ -1753,1 +1749,1 @@\n-        return (short)(a & b);\n+        return (short) (a & b);\n@@ -1795,1 +1791,1 @@\n-        return (short)(a & ~b);\n+        return (short) (a & ~b);\n@@ -1839,1 +1835,1 @@\n-        return (short)(a | b);\n+        return (short) (a | b);\n@@ -1859,1 +1855,1 @@\n-        return (short)(a | b);\n+        return (short) (a | b);\n@@ -1901,1 +1897,1 @@\n-        return (short)(a ^ b);\n+        return (short) (a ^ b);\n@@ -2185,1 +2181,1 @@\n-            av.lanewise(VectorOperators.OR, (long)b[i]).intoArray(r, i);\n+            av.lanewise(VectorOperators.OR, (long) b[i]).intoArray(r, i);\n@@ -2204,1 +2200,1 @@\n-            av.lanewise(VectorOperators.OR, (long)b[i], vmask).intoArray(r, i);\n+            av.lanewise(VectorOperators.OR, (long) b[i], vmask).intoArray(r, i);\n@@ -2219,1 +2215,1 @@\n-            av.lanewise(VectorOperators.ADD, (long)b[i]).intoArray(r, i);\n+            av.lanewise(VectorOperators.ADD, (long) b[i]).intoArray(r, i);\n@@ -2236,1 +2232,1 @@\n-            av.lanewise(VectorOperators.ADD, (long)b[i], vmask).intoArray(r, i);\n+            av.lanewise(VectorOperators.ADD, (long) b[i], vmask).intoArray(r, i);\n@@ -2247,1 +2243,1 @@\n-        return (short)((a << (b & 0xF)));\n+        return (short) ((a << (b & 0xF)));\n@@ -2295,1 +2291,1 @@\n-        return (short)((a >> (b & 0xF)));\n+        return (short) ((a >> (b & 0xF)));\n@@ -2343,1 +2339,1 @@\n-        return (short)(((a & 0xFFFF) >>> (b & 0xF)));\n+        return (short) (((a & 0xFFFF) >>> (b & 0xF)));\n@@ -2391,1 +2387,1 @@\n-        return (short)((a << (b & 15)));\n+        return (short) ((a << (b & 15)));\n@@ -2403,1 +2399,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i]).intoArray(r, i);\n@@ -2424,1 +2420,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i], vmask).intoArray(r, i);\n@@ -2437,1 +2433,1 @@\n-        return (short)(((a & 0xFFFF) >>> (b & 15)));\n+        return (short) (((a & 0xFFFF) >>> (b & 15)));\n@@ -2449,1 +2445,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i]).intoArray(r, i);\n@@ -2470,1 +2466,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i], vmask).intoArray(r, i);\n@@ -2483,1 +2479,1 @@\n-        return (short)((a >> (b & 15)));\n+        return (short) ((a >> (b & 15)));\n@@ -2495,1 +2491,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i]).intoArray(r, i);\n@@ -2516,1 +2512,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i], vmask).intoArray(r, i);\n@@ -2525,1 +2521,1 @@\n-        return (short)(ROR_scalar(a,b));\n+        return (short) (ROR_scalar(a, b));\n@@ -2569,1 +2565,1 @@\n-        return (short)(ROL_scalar(a,b));\n+        return (short) (ROL_scalar(a, b));\n@@ -2613,1 +2609,1 @@\n-        return (short)(ROR_scalar(a,b));\n+        return (short) (ROR_scalar(a, b));\n@@ -2625,1 +2621,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i]).intoArray(r, i);\n@@ -2646,1 +2642,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i], vmask).intoArray(r, i);\n@@ -2655,1 +2651,1 @@\n-        return (short)(ROL_scalar(a,b));\n+        return (short) (ROL_scalar(a, b));\n@@ -2667,1 +2663,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i]).intoArray(r, i);\n@@ -2688,1 +2684,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i], vmask).intoArray(r, i);\n@@ -2696,1 +2692,1 @@\n-        return (short)(Math.min(a, b));\n+        return (short) (Math.min(a, b));\n@@ -2716,1 +2712,1 @@\n-        return (short)(Math.min(a, b));\n+        return (short) (Math.min(a, b));\n@@ -2734,1 +2730,1 @@\n-        return (short)(Math.max(a, b));\n+        return (short) (Math.max(a, b));\n@@ -2754,1 +2750,1 @@\n-        return (short)(Math.max(a, b));\n+        return (short) (Math.max(a, b));\n@@ -3592,1 +3588,1 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (short)(65535+i)).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length() - 1)), (short) (65535 + i)).intoArray(r, i);\n@@ -3598,1 +3594,1 @@\n-            assertInsertArraysEquals(r, a, (short)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+            assertInsertArraysEquals(r, a, (short) (65535 + i), (j++ & (SPECIES.length() - 1)), i , i + SPECIES.length());\n@@ -3602,1 +3598,1 @@\n-        return bits(a)==0;\n+        return bits(a) == 0;\n@@ -3635,1 +3631,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_DEFAULT(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_DEFAULT(a[i + j]));\n@@ -3640,1 +3636,1 @@\n-        return bits(a)<0;\n+        return bits(a) < 0;\n@@ -3673,1 +3669,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_NEGATIVE(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_NEGATIVE(a[i + j]));\n@@ -4183,1 +4179,0 @@\n-\n@@ -4211,1 +4206,1 @@\n-            VectorMask<Short> mv = av.compare(VectorOperators.LT, (long)b[i]);\n+            VectorMask<Short> mv = av.compare(VectorOperators.LT, (long) b[i]);\n@@ -4215,1 +4210,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), a[i + j] < (short)((long)b[i]));\n+                Assert.assertEquals(mv.laneIsSet(j), a[i + j] < (short) ((long) b[i]));\n@@ -4220,1 +4215,0 @@\n-\n@@ -4232,1 +4226,1 @@\n-            VectorMask<Short> mv = av.compare(VectorOperators.LT, (long)b[i], vmask);\n+            VectorMask<Short> mv = av.compare(VectorOperators.LT, (long) b[i], vmask);\n@@ -4236,1 +4230,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] < (short)((long)b[i])));\n+                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] < (short) ((long) b[i])));\n@@ -4257,1 +4251,0 @@\n-\n@@ -4285,1 +4278,1 @@\n-            VectorMask<Short> mv = av.compare(VectorOperators.EQ, (long)b[i]);\n+            VectorMask<Short> mv = av.compare(VectorOperators.EQ, (long) b[i]);\n@@ -4289,1 +4282,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), a[i + j] == (short)((long)b[i]));\n+                Assert.assertEquals(mv.laneIsSet(j), a[i + j] == (short) ((long) b[i]));\n@@ -4294,1 +4287,0 @@\n-\n@@ -4306,1 +4298,1 @@\n-            VectorMask<Short> mv = av.compare(VectorOperators.EQ, (long)b[i], vmask);\n+            VectorMask<Short> mv = av.compare(VectorOperators.EQ, (long) b[i], vmask);\n@@ -4310,1 +4302,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] == (short)((long)b[i])));\n+                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] == (short) ((long) b[i])));\n@@ -4421,1 +4413,1 @@\n-                    r[i]=av.lane(0);\n+                    r[i] = av.lane(0);\n@@ -4423,2 +4415,2 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n@@ -4426,4 +4418,4 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n@@ -4431,8 +4423,8 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n@@ -4440,16 +4432,16 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n@@ -4457,32 +4449,32 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n@@ -4490,64 +4482,64 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n-                    r[i+32]=av.lane(32);\n-                    r[i+33]=av.lane(33);\n-                    r[i+34]=av.lane(34);\n-                    r[i+35]=av.lane(35);\n-                    r[i+36]=av.lane(36);\n-                    r[i+37]=av.lane(37);\n-                    r[i+38]=av.lane(38);\n-                    r[i+39]=av.lane(39);\n-                    r[i+40]=av.lane(40);\n-                    r[i+41]=av.lane(41);\n-                    r[i+42]=av.lane(42);\n-                    r[i+43]=av.lane(43);\n-                    r[i+44]=av.lane(44);\n-                    r[i+45]=av.lane(45);\n-                    r[i+46]=av.lane(46);\n-                    r[i+47]=av.lane(47);\n-                    r[i+48]=av.lane(48);\n-                    r[i+49]=av.lane(49);\n-                    r[i+50]=av.lane(50);\n-                    r[i+51]=av.lane(51);\n-                    r[i+52]=av.lane(52);\n-                    r[i+53]=av.lane(53);\n-                    r[i+54]=av.lane(54);\n-                    r[i+55]=av.lane(55);\n-                    r[i+56]=av.lane(56);\n-                    r[i+57]=av.lane(57);\n-                    r[i+58]=av.lane(58);\n-                    r[i+59]=av.lane(59);\n-                    r[i+60]=av.lane(60);\n-                    r[i+61]=av.lane(61);\n-                    r[i+62]=av.lane(62);\n-                    r[i+63]=av.lane(63);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n+                    r[i + 32] = av.lane(32);\n+                    r[i + 33] = av.lane(33);\n+                    r[i + 34] = av.lane(34);\n+                    r[i + 35] = av.lane(35);\n+                    r[i + 36] = av.lane(36);\n+                    r[i + 37] = av.lane(37);\n+                    r[i + 38] = av.lane(38);\n+                    r[i + 39] = av.lane(39);\n+                    r[i + 40] = av.lane(40);\n+                    r[i + 41] = av.lane(41);\n+                    r[i + 42] = av.lane(42);\n+                    r[i + 43] = av.lane(43);\n+                    r[i + 44] = av.lane(44);\n+                    r[i + 45] = av.lane(45);\n+                    r[i + 46] = av.lane(46);\n+                    r[i + 47] = av.lane(47);\n+                    r[i + 48] = av.lane(48);\n+                    r[i + 49] = av.lane(49);\n+                    r[i + 50] = av.lane(50);\n+                    r[i + 51] = av.lane(51);\n+                    r[i + 52] = av.lane(52);\n+                    r[i + 53] = av.lane(53);\n+                    r[i + 54] = av.lane(54);\n+                    r[i + 55] = av.lane(55);\n+                    r[i + 56] = av.lane(56);\n+                    r[i + 57] = av.lane(57);\n+                    r[i + 58] = av.lane(58);\n+                    r[i + 59] = av.lane(59);\n+                    r[i + 60] = av.lane(60);\n+                    r[i + 61] = av.lane(61);\n+                    r[i + 62] = av.lane(62);\n+                    r[i + 63] = av.lane(63);\n@@ -4556,1 +4548,1 @@\n-                        r[i+j]=av.lane(j);\n+                        r[i + j] = av.lane(j);\n@@ -4597,3 +4589,0 @@\n-\n-\n-\n@@ -4603,2 +4592,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = a[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = a[idx + i + origin];\n@@ -4606,1 +4595,1 @@\n-                res[i] = (short)0;\n+                res[i] = (short) 0;\n@@ -4629,1 +4618,1 @@\n-                res[i] = a[idx+i+origin];\n+                res[i] = a[idx + i + origin];\n@@ -4631,1 +4620,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n@@ -4657,2 +4646,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = mask[i] ? a[idx+i+origin] : (short)0;\n+            if(i + origin < SPECIES.length())\n+                res[i] = mask[i] ? a[idx + i + origin] : (short) 0;\n@@ -4660,1 +4649,1 @@\n-                res[i] = mask[i] ? b[idx+j] : (short)0;\n+                res[i] = mask[i] ? b[idx + j] : (short) 0;\n@@ -4691,1 +4680,1 @@\n-                res[i] = (short)0;\n+                res[i] = (short) 0;\n@@ -4693,1 +4682,1 @@\n-                res[i] = a[idx+j];\n+                res[i] = a[idx + j];\n@@ -4719,1 +4708,1 @@\n-                    res[i] = b[idx+i];\n+                    res[i] = b[idx + i];\n@@ -4721,1 +4710,1 @@\n-                    res[i] = a[idx+j];\n+                    res[i] = a[idx + j];\n@@ -4726,1 +4715,1 @@\n-                    res[i] = a[idx+SPECIES.length()-origin+i];\n+                    res[i] = a[idx + SPECIES.length() - origin + i];\n@@ -4728,1 +4717,1 @@\n-                    res[i] = b[idx+origin+j];\n+                    res[i] = b[idx + origin + j];\n@@ -4756,2 +4745,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = b[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = b[idx + i + origin];\n@@ -4759,1 +4748,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n@@ -4764,1 +4753,1 @@\n-            res[i] = mask[i] ? a[idx+i] : res[i];\n+            res[i] = mask[i] ? a[idx + i] : res[i];\n@@ -4770,1 +4759,1 @@\n-                    res1[i] = b[idx+i];\n+                    res1[i] = b[idx + i];\n@@ -4772,2 +4761,2 @@\n-                   res1[i] = res[j];\n-                   j++;\n+                    res1[i] = res[j];\n+                    j++;\n@@ -4779,1 +4768,1 @@\n-                    res1[i] = res[SPECIES.length()-origin+i];\n+                    res1[i] = res[SPECIES.length() - origin + i];\n@@ -4781,1 +4770,1 @@\n-                    res1[i] = b[idx+origin+j];\n+                    res1[i] = b[idx + origin + j];\n@@ -4833,1 +4822,1 @@\n-        return (short)((a&~(c))|(b&c));\n+        return (short) ((a &~ (c)) | (b & c));\n@@ -4836,1 +4825,1 @@\n-        return (short)((a&~(c))|(b&c));\n+        return (short) ((a &~ (c)) | (b & c));\n@@ -5052,1 +5041,1 @@\n-        return (short)(-((short)a));\n+        return (short) (-((short) a));\n@@ -5056,1 +5045,1 @@\n-        return (short)(-((short)a));\n+        return (short) (-((short) a));\n@@ -5108,1 +5097,1 @@\n-        return (short)(Math.abs((short)a));\n+        return (short) (Math.abs((short) a));\n@@ -5112,1 +5101,1 @@\n-        return (short)(Math.abs((short)a));\n+        return (short) (Math.abs((short) a));\n@@ -5165,1 +5154,1 @@\n-        return (short)(~((short)a));\n+        return (short) (~((short) a));\n@@ -5169,1 +5158,1 @@\n-        return (short)(~((short)a));\n+        return (short) (~((short) a));\n@@ -5227,1 +5216,1 @@\n-        return (short)((a==0?0:-1));\n+        return (short) ((a == 0 ? 0 : -1));\n@@ -5279,1 +5268,1 @@\n-        return (short)(Integer.bitCount((int)a & 0xFFFF));\n+        return (short) (Integer.bitCount((int) a & 0xFFFF));\n@@ -5322,1 +5311,1 @@\n-        return (short)(TRAILING_ZEROS_COUNT_scalar(a));\n+        return (short) (TRAILING_ZEROS_COUNT_scalar(a));\n@@ -5365,1 +5354,1 @@\n-        return (short)(LEADING_ZEROS_COUNT_scalar(a));\n+        return (short) (LEADING_ZEROS_COUNT_scalar(a));\n@@ -5408,1 +5397,1 @@\n-        return (short)(REVERSE_scalar(a));\n+        return (short) (REVERSE_scalar(a));\n@@ -5548,1 +5537,1 @@\n-        return (long)res;\n+        return (long) res;\n@@ -5587,1 +5576,1 @@\n-        return (long)res;\n+        return (long) res;\n@@ -5644,1 +5633,1 @@\n-                av.blend((long)b[i], vmask).intoArray(r, i);\n+                av.blend((long) b[i], vmask).intoArray(r, i);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short64VectorTests.java","additions":306,"deletions":317,"binary":false,"changes":623,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -83,1 +83,1 @@\n-                Assert.assertEquals(r[i], mask[(i*8\/SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0);\n+                Assert.assertEquals(r[i], mask[(i * 8 \/ SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0);\n@@ -86,1 +86,1 @@\n-            Assert.assertEquals(r[i], mask[(i*8\/SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0, \"at index #\" + i);\n+            Assert.assertEquals(r[i], mask[(i * 8 \/ SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0, \"at index #\" + i);\n@@ -93,1 +93,1 @@\n-                            i -> (short)(i * 5));\n+                            i -> (short) (i * 5));\n@@ -97,1 +97,1 @@\n-                            i -> (((short)(i + 1) == 0) ? 1 : (short)(i + 1)));\n+                            i -> (((short) (i + 1) == 0) ? 1 : (short) (i + 1)));\n@@ -204,1 +204,1 @@\n-                            return new Object[]{fa, fb, bo};\n+                            return new Object[] {fa, fb, bo};\n@@ -215,1 +215,1 @@\n-                            return new Object[]{fa, fb, fm, bo};\n+                            return new Object[] {fa, fb, fm, bo};\n@@ -224,1 +224,1 @@\n-                    return new Object[]{fa, bo};\n+                    return new Object[] {fa, bo};\n@@ -234,1 +234,1 @@\n-                        return new Object[]{fa, fm, bo};\n+                        return new Object[] {fa, fm, bo};\n@@ -951,1 +951,0 @@\n-\n@@ -966,1 +965,1 @@\n-                            i -> (char)(i * 5));\n+                            i -> (char) (i * 5));\n@@ -970,1 +969,1 @@\n-                            i -> (((char)(i + 1) == 0) ? 1 : (char)(i + 1)));\n+                            i -> (((char) (i + 1) == 0) ? 1 : (char) (i + 1)));\n@@ -977,1 +976,1 @@\n-                map(f -> new Object[]{f}).\n+                map(f -> new Object[] {f}).\n@@ -1197,2 +1196,0 @@\n-\n-\n@@ -1424,1 +1421,0 @@\n-\n@@ -1493,1 +1489,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ShortMaxVectorLoadStoreTests.java","additions":12,"deletions":17,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -93,1 +93,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -98,1 +98,1 @@\n-            short[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            short[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -258,1 +258,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i+order[i + j]]);\n@@ -263,1 +263,1 @@\n-            Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i+order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]]);\n@@ -279,1 +279,1 @@\n-                    Assert.assertEquals(r[i + k], (short)0);\n+                    Assert.assertEquals(r[i + k], (short) 0);\n@@ -287,1 +287,1 @@\n-                Assert.assertEquals(r[idx], (short)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], (short) 0, \"at index #\" + idx);\n@@ -302,1 +302,1 @@\n-                        Assert.assertEquals(r[i + j], (short)0);\n+                        Assert.assertEquals(r[i + j], (short) 0);\n@@ -311,1 +311,1 @@\n-                Assert.assertEquals(r[idx], (short)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], (short) 0, \"at index #\" + idx);\n@@ -321,1 +321,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -326,1 +326,1 @@\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]]);\n@@ -336,1 +336,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + order[i + j]]);\n@@ -338,1 +338,1 @@\n-                         Assert.assertEquals(r[i+j], (short)0);\n+                         Assert.assertEquals(r[i + j], (short) 0);\n@@ -344,1 +344,1 @@\n-                Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -346,1 +346,1 @@\n-                Assert.assertEquals(r[i+j], (short)0, \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], (short) 0, \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -356,1 +356,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -358,1 +358,1 @@\n-                         Assert.assertEquals(r[i+j], (short)0);\n+                         Assert.assertEquals(r[i + j], (short) 0);\n@@ -364,1 +364,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -366,1 +366,1 @@\n-                Assert.assertEquals(r[i+j], (short)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], (short) 0, \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -375,1 +375,1 @@\n-                a[j]=a[idx];\n+                a[j] = a[idx];\n@@ -426,1 +426,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], (short)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])));\n+                Assert.assertEquals(r[i], f.apply(a[i], (short) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])));\n@@ -429,1 +429,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], (short)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])),\n+            Assert.assertEquals(r[i], f.apply(a[i], (short) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])),\n@@ -475,1 +475,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], (short)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n+                Assert.assertEquals(r[i], f.apply(a[i], (short) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n@@ -478,1 +478,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], (short)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]),\n+            Assert.assertEquals(r[i], f.apply(a[i], (short) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]),\n@@ -491,1 +491,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]));\n@@ -495,1 +495,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]), \"at index #\" + i + \", \" + j);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]), \"at index #\" + i + \", \" + j);\n@@ -509,1 +509,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]));\n@@ -513,1 +513,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i+j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i + j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n@@ -662,1 +662,0 @@\n-\n@@ -686,1 +685,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -691,1 +690,1 @@\n-            short[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            short[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -694,1 +693,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -696,1 +695,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -713,1 +712,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -718,1 +717,1 @@\n-            short[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            short[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -721,1 +720,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -723,1 +722,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -734,1 +733,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -739,1 +738,1 @@\n-            short[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            short[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -742,1 +741,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -744,1 +743,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -746,1 +745,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(r, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(r, i, i + SPECIES.length()))\n@@ -761,1 +760,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -766,1 +765,1 @@\n-            short[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            short[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -781,1 +780,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -786,1 +785,1 @@\n-            short[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            short[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -802,1 +801,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -807,1 +806,1 @@\n-            short[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            short[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -823,1 +822,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -828,1 +827,1 @@\n-            short[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            short[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -845,1 +844,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -850,1 +849,1 @@\n-            short[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            short[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -864,1 +863,1 @@\n-                Assert.assertEquals(r[i], (int)(a[i+offs]));\n+                Assert.assertEquals(r[i], (int) (a[i + offs]));\n@@ -867,1 +866,1 @@\n-            Assert.assertEquals(r[i], (int)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (int) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -877,1 +876,1 @@\n-                Assert.assertEquals(r[i], (long)(a[i+offs]));\n+                Assert.assertEquals(r[i], (long) (a[i + offs]));\n@@ -880,1 +879,1 @@\n-            Assert.assertEquals(r[i], (long)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (long) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -888,1 +887,1 @@\n-                Assert.assertEquals(r[i], (double)(a[i+offs]));\n+                Assert.assertEquals(r[i], (double) (a[i + offs]));\n@@ -891,1 +890,1 @@\n-            Assert.assertEquals(r[i], (double)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (double) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -895,1 +894,0 @@\n-\n@@ -903,1 +901,1 @@\n-                            i -> (short)(-i * 5));\n+                            i -> (short) (-i * 5));\n@@ -907,1 +905,1 @@\n-                            i -> (short)(i * 5));\n+                            i -> (short) (i * 5));\n@@ -911,1 +909,1 @@\n-                            i -> (((short)(i + 1) == 0) ? 1 : (short)(i + 1)));\n+                            i -> (((short) (i + 1) == 0) ? 1 : (short) (i + 1)));\n@@ -1042,1 +1040,1 @@\n-                    a[i] = (short)RAND.nextInt(upper);\n+                    a[i] = (short) RAND.nextInt(upper);\n@@ -1067,1 +1065,0 @@\n-\n@@ -1071,1 +1068,1 @@\n-                            i -> (short)i);\n+                            i -> (short) i);\n@@ -1075,1 +1072,1 @@\n-                            i -> (short)(i - (s * BUFFER_REPS \/ 2)));\n+                            i -> (short) (i - (s * BUFFER_REPS \/ 2)));\n@@ -1079,1 +1076,1 @@\n-                            i -> (short)(i + 1));\n+                            i -> (short) (i + 1));\n@@ -1083,1 +1080,1 @@\n-                            i -> (short)(i - 2));\n+                            i -> (short) (i - 2));\n@@ -1087,1 +1084,1 @@\n-                            i -> i%3 == 0 ? (short)i : (i%3 == 1 ? (short)(i + 1) : (short)(i - 2)));\n+                            i -> i % 3 == 0 ? (short) i : (i % 3 == 1 ? (short) (i + 1) : (short) (i - 2)));\n@@ -1161,1 +1158,1 @@\n-                return (short)0;\n+                return (short) 0;\n@@ -1201,1 +1198,1 @@\n-        return (short)(((((short)a) & 0xFFFF) << (b & 15)) | ((((short)a) & 0xFFFF) >>> (16 - (b & 15))));\n+        return (short) (((((short) a) & 0xFFFF) << (b & 15)) | ((((short) a) & 0xFFFF) >>> (16 - (b & 15))));\n@@ -1205,1 +1202,1 @@\n-        return (short)(((((short)a) & 0xFFFF) >>> (b & 15)) | ((((short)a) & 0xFFFF) << (16 - (b & 15))));\n+        return (short) (((((short) a) & 0xFFFF) >>> (b & 15)) | ((((short) a) & 0xFFFF) << (16 - (b & 15))));\n@@ -1218,3 +1215,3 @@\n-        b = (short)(((b & 0x5555) << 1) | ((b & 0xAAAA) >>> 1));\n-        b = (short)(((b & 0x3333) << 2) | ((b & 0xCCCC) >>> 2));\n-        b = (short)(((b & 0x0F0F) << 4) | ((b & 0xF0F0) >>> 4));\n+        b = (short) (((b & 0x5555) << 1) | ((b & 0xAAAA) >>> 1));\n+        b = (short) (((b & 0x3333) << 2) | ((b & 0xCCCC) >>> 2));\n+        b = (short) (((b & 0x0F0F) << 4) | ((b & 0xF0F0) >>> 4));\n@@ -1224,1 +1221,0 @@\n-\n@@ -1271,1 +1267,1 @@\n-        ShortVector three = ShortVector.broadcast(SPECIES, (byte)-3);\n+        ShortVector three = ShortVector.broadcast(SPECIES, (byte) -3);\n@@ -1285,1 +1281,1 @@\n-        m = higher.min((short)-1).test(VectorOperators.IS_NEGATIVE);\n+        m = higher.min((short) -1).test(VectorOperators.IS_NEGATIVE);\n@@ -1288,1 +1284,1 @@\n-        assert(max == -3 + scale * (SPECIES.length()-1));\n+        assert(max == -3 + scale * (SPECIES.length() - 1));\n@@ -1303,1 +1299,1 @@\n-        ShortVector io2 = (ShortVector) VectorShuffle.iota(SPECIES,0,1,false).toVector();\n+        ShortVector io2 = (ShortVector) VectorShuffle.iota(SPECIES, 0, 1, false).toVector();\n@@ -1305,1 +1301,1 @@\n-        ShortVector a = io.add((short)1); \/\/[1,2]\n+        ShortVector a = io.add((short) 1); \/\/[1,2]\n@@ -1310,2 +1306,2 @@\n-        ShortVector zab0 = a.rearrange(zip0,b); \/\/[1,-1]\n-        ShortVector zab1 = a.rearrange(zip1,b); \/\/[2,-2]\n+        ShortVector zab0 = a.rearrange(zip0, b); \/\/[1,-1]\n+        ShortVector zab1 = a.rearrange(zip1, b); \/\/[2,-2]\n@@ -1316,2 +1312,2 @@\n-            manual[i+0] = abValues[i\/2];\n-            manual[i+1] = abValues[a.length() + i\/2];\n+            manual[i + 0] = abValues[i \/ 2];\n+            manual[i + 1] = abValues[a.length() + i \/ 2];\n@@ -1322,2 +1318,2 @@\n-        ShortVector uab0 = zab0.rearrange(unz0,zab1);\n-        ShortVector uab1 = zab0.rearrange(unz1,zab1);\n+        ShortVector uab0 = zab0.rearrange(unz0, zab1);\n+        ShortVector uab1 = zab0.rearrange(unz1, zab1);\n@@ -1375,1 +1371,1 @@\n-        return (short)(a + b);\n+        return (short) (a + b);\n@@ -1395,1 +1391,1 @@\n-        return (short)(a + b);\n+        return (short) (a + b);\n@@ -1451,1 +1447,1 @@\n-        return (short)(a - b);\n+        return (short) (a - b);\n@@ -1471,1 +1467,1 @@\n-        return (short)(a - b);\n+        return (short) (a - b);\n@@ -1527,1 +1523,1 @@\n-        return (short)(a * b);\n+        return (short) (a * b);\n@@ -1547,1 +1543,1 @@\n-        return (short)(a * b);\n+        return (short) (a * b);\n@@ -1606,1 +1602,1 @@\n-        return (short)(a \/ b);\n+        return (short) (a \/ b);\n@@ -1628,1 +1624,1 @@\n-        return (short)(a \/ b);\n+        return (short) (a \/ b);\n@@ -1697,1 +1693,1 @@\n-        return (short)((a)!=0?a:b);\n+        return (short) ((a) != 0 ? a : b);\n@@ -1738,1 +1734,1 @@\n-        return (short)(a & b);\n+        return (short) (a & b);\n@@ -1758,1 +1754,1 @@\n-        return (short)(a & b);\n+        return (short) (a & b);\n@@ -1800,1 +1796,1 @@\n-        return (short)(a & ~b);\n+        return (short) (a & ~b);\n@@ -1844,1 +1840,1 @@\n-        return (short)(a | b);\n+        return (short) (a | b);\n@@ -1864,1 +1860,1 @@\n-        return (short)(a | b);\n+        return (short) (a | b);\n@@ -1906,1 +1902,1 @@\n-        return (short)(a ^ b);\n+        return (short) (a ^ b);\n@@ -2190,1 +2186,1 @@\n-            av.lanewise(VectorOperators.OR, (long)b[i]).intoArray(r, i);\n+            av.lanewise(VectorOperators.OR, (long) b[i]).intoArray(r, i);\n@@ -2209,1 +2205,1 @@\n-            av.lanewise(VectorOperators.OR, (long)b[i], vmask).intoArray(r, i);\n+            av.lanewise(VectorOperators.OR, (long) b[i], vmask).intoArray(r, i);\n@@ -2224,1 +2220,1 @@\n-            av.lanewise(VectorOperators.ADD, (long)b[i]).intoArray(r, i);\n+            av.lanewise(VectorOperators.ADD, (long) b[i]).intoArray(r, i);\n@@ -2241,1 +2237,1 @@\n-            av.lanewise(VectorOperators.ADD, (long)b[i], vmask).intoArray(r, i);\n+            av.lanewise(VectorOperators.ADD, (long) b[i], vmask).intoArray(r, i);\n@@ -2252,1 +2248,1 @@\n-        return (short)((a << (b & 0xF)));\n+        return (short) ((a << (b & 0xF)));\n@@ -2300,1 +2296,1 @@\n-        return (short)((a >> (b & 0xF)));\n+        return (short) ((a >> (b & 0xF)));\n@@ -2348,1 +2344,1 @@\n-        return (short)(((a & 0xFFFF) >>> (b & 0xF)));\n+        return (short) (((a & 0xFFFF) >>> (b & 0xF)));\n@@ -2396,1 +2392,1 @@\n-        return (short)((a << (b & 15)));\n+        return (short) ((a << (b & 15)));\n@@ -2408,1 +2404,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i]).intoArray(r, i);\n@@ -2429,1 +2425,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i], vmask).intoArray(r, i);\n@@ -2442,1 +2438,1 @@\n-        return (short)(((a & 0xFFFF) >>> (b & 15)));\n+        return (short) (((a & 0xFFFF) >>> (b & 15)));\n@@ -2454,1 +2450,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i]).intoArray(r, i);\n@@ -2475,1 +2471,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i], vmask).intoArray(r, i);\n@@ -2488,1 +2484,1 @@\n-        return (short)((a >> (b & 15)));\n+        return (short) ((a >> (b & 15)));\n@@ -2500,1 +2496,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i]).intoArray(r, i);\n@@ -2521,1 +2517,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i], vmask).intoArray(r, i);\n@@ -2530,1 +2526,1 @@\n-        return (short)(ROR_scalar(a,b));\n+        return (short) (ROR_scalar(a, b));\n@@ -2574,1 +2570,1 @@\n-        return (short)(ROL_scalar(a,b));\n+        return (short) (ROL_scalar(a, b));\n@@ -2618,1 +2614,1 @@\n-        return (short)(ROR_scalar(a,b));\n+        return (short) (ROR_scalar(a, b));\n@@ -2630,1 +2626,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i]).intoArray(r, i);\n@@ -2651,1 +2647,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i], vmask).intoArray(r, i);\n@@ -2660,1 +2656,1 @@\n-        return (short)(ROL_scalar(a,b));\n+        return (short) (ROL_scalar(a, b));\n@@ -2672,1 +2668,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i]).intoArray(r, i);\n@@ -2693,1 +2689,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i], vmask).intoArray(r, i);\n@@ -2701,1 +2697,1 @@\n-        return (short)(Math.min(a, b));\n+        return (short) (Math.min(a, b));\n@@ -2721,1 +2717,1 @@\n-        return (short)(Math.min(a, b));\n+        return (short) (Math.min(a, b));\n@@ -2739,1 +2735,1 @@\n-        return (short)(Math.max(a, b));\n+        return (short) (Math.max(a, b));\n@@ -2759,1 +2755,1 @@\n-        return (short)(Math.max(a, b));\n+        return (short) (Math.max(a, b));\n@@ -3597,1 +3593,1 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (short)(65535+i)).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length() - 1)), (short) (65535 + i)).intoArray(r, i);\n@@ -3603,1 +3599,1 @@\n-            assertInsertArraysEquals(r, a, (short)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+            assertInsertArraysEquals(r, a, (short) (65535 + i), (j++ & (SPECIES.length() - 1)), i , i + SPECIES.length());\n@@ -3607,1 +3603,1 @@\n-        return bits(a)==0;\n+        return bits(a) == 0;\n@@ -3640,1 +3636,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_DEFAULT(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_DEFAULT(a[i + j]));\n@@ -3645,1 +3641,1 @@\n-        return bits(a)<0;\n+        return bits(a) < 0;\n@@ -3678,1 +3674,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && testIS_NEGATIVE(a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && testIS_NEGATIVE(a[i + j]));\n@@ -4188,1 +4184,0 @@\n-\n@@ -4216,1 +4211,1 @@\n-            VectorMask<Short> mv = av.compare(VectorOperators.LT, (long)b[i]);\n+            VectorMask<Short> mv = av.compare(VectorOperators.LT, (long) b[i]);\n@@ -4220,1 +4215,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), a[i + j] < (short)((long)b[i]));\n+                Assert.assertEquals(mv.laneIsSet(j), a[i + j] < (short) ((long) b[i]));\n@@ -4225,1 +4220,0 @@\n-\n@@ -4237,1 +4231,1 @@\n-            VectorMask<Short> mv = av.compare(VectorOperators.LT, (long)b[i], vmask);\n+            VectorMask<Short> mv = av.compare(VectorOperators.LT, (long) b[i], vmask);\n@@ -4241,1 +4235,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] < (short)((long)b[i])));\n+                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] < (short) ((long) b[i])));\n@@ -4262,1 +4256,0 @@\n-\n@@ -4290,1 +4283,1 @@\n-            VectorMask<Short> mv = av.compare(VectorOperators.EQ, (long)b[i]);\n+            VectorMask<Short> mv = av.compare(VectorOperators.EQ, (long) b[i]);\n@@ -4294,1 +4287,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), a[i + j] == (short)((long)b[i]));\n+                Assert.assertEquals(mv.laneIsSet(j), a[i + j] == (short) ((long) b[i]));\n@@ -4299,1 +4292,0 @@\n-\n@@ -4311,1 +4303,1 @@\n-            VectorMask<Short> mv = av.compare(VectorOperators.EQ, (long)b[i], vmask);\n+            VectorMask<Short> mv = av.compare(VectorOperators.EQ, (long) b[i], vmask);\n@@ -4315,1 +4307,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] == (short)((long)b[i])));\n+                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] == (short) ((long) b[i])));\n@@ -4426,1 +4418,1 @@\n-                    r[i]=av.lane(0);\n+                    r[i] = av.lane(0);\n@@ -4428,2 +4420,2 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n@@ -4431,4 +4423,4 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n@@ -4436,8 +4428,8 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n@@ -4445,16 +4437,16 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n@@ -4462,32 +4454,32 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n@@ -4495,64 +4487,64 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n-                    r[i+32]=av.lane(32);\n-                    r[i+33]=av.lane(33);\n-                    r[i+34]=av.lane(34);\n-                    r[i+35]=av.lane(35);\n-                    r[i+36]=av.lane(36);\n-                    r[i+37]=av.lane(37);\n-                    r[i+38]=av.lane(38);\n-                    r[i+39]=av.lane(39);\n-                    r[i+40]=av.lane(40);\n-                    r[i+41]=av.lane(41);\n-                    r[i+42]=av.lane(42);\n-                    r[i+43]=av.lane(43);\n-                    r[i+44]=av.lane(44);\n-                    r[i+45]=av.lane(45);\n-                    r[i+46]=av.lane(46);\n-                    r[i+47]=av.lane(47);\n-                    r[i+48]=av.lane(48);\n-                    r[i+49]=av.lane(49);\n-                    r[i+50]=av.lane(50);\n-                    r[i+51]=av.lane(51);\n-                    r[i+52]=av.lane(52);\n-                    r[i+53]=av.lane(53);\n-                    r[i+54]=av.lane(54);\n-                    r[i+55]=av.lane(55);\n-                    r[i+56]=av.lane(56);\n-                    r[i+57]=av.lane(57);\n-                    r[i+58]=av.lane(58);\n-                    r[i+59]=av.lane(59);\n-                    r[i+60]=av.lane(60);\n-                    r[i+61]=av.lane(61);\n-                    r[i+62]=av.lane(62);\n-                    r[i+63]=av.lane(63);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n+                    r[i + 32] = av.lane(32);\n+                    r[i + 33] = av.lane(33);\n+                    r[i + 34] = av.lane(34);\n+                    r[i + 35] = av.lane(35);\n+                    r[i + 36] = av.lane(36);\n+                    r[i + 37] = av.lane(37);\n+                    r[i + 38] = av.lane(38);\n+                    r[i + 39] = av.lane(39);\n+                    r[i + 40] = av.lane(40);\n+                    r[i + 41] = av.lane(41);\n+                    r[i + 42] = av.lane(42);\n+                    r[i + 43] = av.lane(43);\n+                    r[i + 44] = av.lane(44);\n+                    r[i + 45] = av.lane(45);\n+                    r[i + 46] = av.lane(46);\n+                    r[i + 47] = av.lane(47);\n+                    r[i + 48] = av.lane(48);\n+                    r[i + 49] = av.lane(49);\n+                    r[i + 50] = av.lane(50);\n+                    r[i + 51] = av.lane(51);\n+                    r[i + 52] = av.lane(52);\n+                    r[i + 53] = av.lane(53);\n+                    r[i + 54] = av.lane(54);\n+                    r[i + 55] = av.lane(55);\n+                    r[i + 56] = av.lane(56);\n+                    r[i + 57] = av.lane(57);\n+                    r[i + 58] = av.lane(58);\n+                    r[i + 59] = av.lane(59);\n+                    r[i + 60] = av.lane(60);\n+                    r[i + 61] = av.lane(61);\n+                    r[i + 62] = av.lane(62);\n+                    r[i + 63] = av.lane(63);\n@@ -4561,1 +4553,1 @@\n-                        r[i+j]=av.lane(j);\n+                        r[i + j] = av.lane(j);\n@@ -4602,3 +4594,0 @@\n-\n-\n-\n@@ -4608,2 +4597,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = a[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = a[idx + i + origin];\n@@ -4611,1 +4600,1 @@\n-                res[i] = (short)0;\n+                res[i] = (short) 0;\n@@ -4634,1 +4623,1 @@\n-                res[i] = a[idx+i+origin];\n+                res[i] = a[idx + i + origin];\n@@ -4636,1 +4625,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n@@ -4662,2 +4651,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = mask[i] ? a[idx+i+origin] : (short)0;\n+            if(i + origin < SPECIES.length())\n+                res[i] = mask[i] ? a[idx + i + origin] : (short) 0;\n@@ -4665,1 +4654,1 @@\n-                res[i] = mask[i] ? b[idx+j] : (short)0;\n+                res[i] = mask[i] ? b[idx + j] : (short) 0;\n@@ -4696,1 +4685,1 @@\n-                res[i] = (short)0;\n+                res[i] = (short) 0;\n@@ -4698,1 +4687,1 @@\n-                res[i] = a[idx+j];\n+                res[i] = a[idx + j];\n@@ -4724,1 +4713,1 @@\n-                    res[i] = b[idx+i];\n+                    res[i] = b[idx + i];\n@@ -4726,1 +4715,1 @@\n-                    res[i] = a[idx+j];\n+                    res[i] = a[idx + j];\n@@ -4731,1 +4720,1 @@\n-                    res[i] = a[idx+SPECIES.length()-origin+i];\n+                    res[i] = a[idx + SPECIES.length() - origin + i];\n@@ -4733,1 +4722,1 @@\n-                    res[i] = b[idx+origin+j];\n+                    res[i] = b[idx + origin + j];\n@@ -4761,2 +4750,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = b[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = b[idx + i + origin];\n@@ -4764,1 +4753,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n@@ -4769,1 +4758,1 @@\n-            res[i] = mask[i] ? a[idx+i] : res[i];\n+            res[i] = mask[i] ? a[idx + i] : res[i];\n@@ -4775,1 +4764,1 @@\n-                    res1[i] = b[idx+i];\n+                    res1[i] = b[idx + i];\n@@ -4777,2 +4766,2 @@\n-                   res1[i] = res[j];\n-                   j++;\n+                    res1[i] = res[j];\n+                    j++;\n@@ -4784,1 +4773,1 @@\n-                    res1[i] = res[SPECIES.length()-origin+i];\n+                    res1[i] = res[SPECIES.length() - origin + i];\n@@ -4786,1 +4775,1 @@\n-                    res1[i] = b[idx+origin+j];\n+                    res1[i] = b[idx + origin + j];\n@@ -4838,1 +4827,1 @@\n-        return (short)((a&~(c))|(b&c));\n+        return (short) ((a &~ (c)) | (b & c));\n@@ -4841,1 +4830,1 @@\n-        return (short)((a&~(c))|(b&c));\n+        return (short) ((a &~ (c)) | (b & c));\n@@ -5057,1 +5046,1 @@\n-        return (short)(-((short)a));\n+        return (short) (-((short) a));\n@@ -5061,1 +5050,1 @@\n-        return (short)(-((short)a));\n+        return (short) (-((short) a));\n@@ -5113,1 +5102,1 @@\n-        return (short)(Math.abs((short)a));\n+        return (short) (Math.abs((short) a));\n@@ -5117,1 +5106,1 @@\n-        return (short)(Math.abs((short)a));\n+        return (short) (Math.abs((short) a));\n@@ -5170,1 +5159,1 @@\n-        return (short)(~((short)a));\n+        return (short) (~((short) a));\n@@ -5174,1 +5163,1 @@\n-        return (short)(~((short)a));\n+        return (short) (~((short) a));\n@@ -5232,1 +5221,1 @@\n-        return (short)((a==0?0:-1));\n+        return (short) ((a == 0 ? 0 : -1));\n@@ -5284,1 +5273,1 @@\n-        return (short)(Integer.bitCount((int)a & 0xFFFF));\n+        return (short) (Integer.bitCount((int) a & 0xFFFF));\n@@ -5327,1 +5316,1 @@\n-        return (short)(TRAILING_ZEROS_COUNT_scalar(a));\n+        return (short) (TRAILING_ZEROS_COUNT_scalar(a));\n@@ -5370,1 +5359,1 @@\n-        return (short)(LEADING_ZEROS_COUNT_scalar(a));\n+        return (short) (LEADING_ZEROS_COUNT_scalar(a));\n@@ -5413,1 +5402,1 @@\n-        return (short)(REVERSE_scalar(a));\n+        return (short) (REVERSE_scalar(a));\n@@ -5553,1 +5542,1 @@\n-        return (long)res;\n+        return (long) res;\n@@ -5592,1 +5581,1 @@\n-        return (long)res;\n+        return (long) res;\n@@ -5649,1 +5638,1 @@\n-                av.blend((long)b[i], vmask).intoArray(r, i);\n+                av.blend((long) b[i], vmask).intoArray(r, i);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ShortMaxVectorTests.java","additions":306,"deletions":317,"binary":false,"changes":623,"status":"modified"},{"patch":"@@ -400,1 +400,1 @@\n-gen_binary_alu_op \"FIRST_NONZERO\" \"{#if[FP]?Double.doubleToLongBits}(a)!=0?a:b\"\n+gen_binary_alu_op \"FIRST_NONZERO\" \"{#if[FP]?Double.doubleToLongBits}(a) != 0 ? a : b\"\n@@ -437,4 +437,4 @@\n-gen_binary_alu_op \"ROR\" \"ROR_scalar(a,b)\" \"BITWISE\"\n-gen_binary_alu_op \"ROL\" \"ROL_scalar(a,b)\" \"BITWISE\"\n-gen_shift_cst_op  \"ROR\" \"ROR_scalar(a,b)\" \"BITWISE\"\n-gen_shift_cst_op  \"ROL\" \"ROL_scalar(a,b)\" \"BITWISE\"\n+gen_binary_alu_op \"ROR\" \"ROR_scalar(a, b)\" \"BITWISE\"\n+gen_binary_alu_op \"ROL\" \"ROL_scalar(a, b)\" \"BITWISE\"\n+gen_shift_cst_op  \"ROR\" \"ROR_scalar(a, b)\" \"BITWISE\"\n+gen_shift_cst_op  \"ROL\" \"ROL_scalar(a, b)\" \"BITWISE\"\n@@ -466,2 +466,2 @@\n-gen_op_tmpl $test_template \"IS_DEFAULT\" \"bits(a)==0\"\n-gen_op_tmpl $test_template \"IS_NEGATIVE\" \"bits(a)<0\"\n+gen_op_tmpl $test_template \"IS_DEFAULT\" \"bits(a) == 0\"\n+gen_op_tmpl $test_template \"IS_NEGATIVE\" \"bits(a) < 0\"\n@@ -518,19 +518,19 @@\n-gen_op_tmpl $unary_math_template \"SIN\" \"Math.sin((double)a)\" \"FP\"\n-gen_op_tmpl $unary_math_template \"EXP\" \"Math.exp((double)a)\" \"FP\"\n-gen_op_tmpl $unary_math_template \"LOG1P\" \"Math.log1p((double)a)\" \"FP\"\n-gen_op_tmpl $unary_math_template \"LOG\" \"Math.log((double)a)\" \"FP\"\n-gen_op_tmpl $unary_math_template \"LOG10\" \"Math.log10((double)a)\" \"FP\"\n-gen_op_tmpl $unary_math_template \"EXPM1\" \"Math.expm1((double)a)\" \"FP\"\n-gen_op_tmpl $unary_math_template \"COS\" \"Math.cos((double)a)\" \"FP\"\n-gen_op_tmpl $unary_math_template \"TAN\" \"Math.tan((double)a)\" \"FP\"\n-gen_op_tmpl $unary_math_template \"SINH\" \"Math.sinh((double)a)\" \"FP\"\n-gen_op_tmpl $unary_math_template \"COSH\" \"Math.cosh((double)a)\" \"FP\"\n-gen_op_tmpl $unary_math_template \"TANH\" \"Math.tanh((double)a)\" \"FP\"\n-gen_op_tmpl $unary_math_template \"ASIN\" \"Math.asin((double)a)\" \"FP\"\n-gen_op_tmpl $unary_math_template \"ACOS\" \"Math.acos((double)a)\" \"FP\"\n-gen_op_tmpl $unary_math_template \"ATAN\" \"Math.atan((double)a)\" \"FP\"\n-gen_op_tmpl $unary_math_template \"CBRT\" \"Math.cbrt((double)a)\" \"FP\"\n-gen_op_tmpl $binary_math_template \"HYPOT\" \"Math.hypot((double)a, (double)b)\" \"FP\"\n-gen_op_tmpl $binary_math_template \"POW+pow\" \"Math.pow((double)a, (double)b)\" \"FP\"\n-gen_op_tmpl $binary_math_template \"ATAN2\" \"Math.atan2((double)a, (double)b)\" \"FP\"\n-gen_op_tmpl $binary_math_broadcast_template \"POW+pow\" \"Math.pow((double)a, (double)b)\" \"FP\"\n+gen_op_tmpl $unary_math_template \"SIN\" \"Math.sin((double) a)\" \"FP\"\n+gen_op_tmpl $unary_math_template \"EXP\" \"Math.exp((double) a)\" \"FP\"\n+gen_op_tmpl $unary_math_template \"LOG1P\" \"Math.log1p((double) a)\" \"FP\"\n+gen_op_tmpl $unary_math_template \"LOG\" \"Math.log((double) a)\" \"FP\"\n+gen_op_tmpl $unary_math_template \"LOG10\" \"Math.log10((double) a)\" \"FP\"\n+gen_op_tmpl $unary_math_template \"EXPM1\" \"Math.expm1((double) a)\" \"FP\"\n+gen_op_tmpl $unary_math_template \"COS\" \"Math.cos((double) a)\" \"FP\"\n+gen_op_tmpl $unary_math_template \"TAN\" \"Math.tan((double) a)\" \"FP\"\n+gen_op_tmpl $unary_math_template \"SINH\" \"Math.sinh((double) a)\" \"FP\"\n+gen_op_tmpl $unary_math_template \"COSH\" \"Math.cosh((double) a)\" \"FP\"\n+gen_op_tmpl $unary_math_template \"TANH\" \"Math.tanh((double) a)\" \"FP\"\n+gen_op_tmpl $unary_math_template \"ASIN\" \"Math.asin((double) a)\" \"FP\"\n+gen_op_tmpl $unary_math_template \"ACOS\" \"Math.acos((double) a)\" \"FP\"\n+gen_op_tmpl $unary_math_template \"ATAN\" \"Math.atan((double) a)\" \"FP\"\n+gen_op_tmpl $unary_math_template \"CBRT\" \"Math.cbrt((double) a)\" \"FP\"\n+gen_op_tmpl $binary_math_template \"HYPOT\" \"Math.hypot((double) a, (double) b)\" \"FP\"\n+gen_op_tmpl $binary_math_template \"POW+pow\" \"Math.pow((double) a, (double) b)\" \"FP\"\n+gen_op_tmpl $binary_math_template \"ATAN2\" \"Math.atan2((double) a, (double) b)\" \"FP\"\n+gen_op_tmpl $binary_math_broadcast_template \"POW+pow\" \"Math.pow((double) a, (double) b)\" \"FP\"\n@@ -540,1 +540,1 @@\n-gen_ternary_alu_op \"BITWISE_BLEND+bitwiseBlend\" \"(a\\&~(c))|(b\\&c)\" \"BITWISE\"\n+gen_ternary_alu_op \"BITWISE_BLEND+bitwiseBlend\" \"(a \\&~ (c)) | (b \\& c)\" \"BITWISE\"\n@@ -542,1 +542,1 @@\n-gen_ternary_alu_bcst_op \"BITWISE_BLEND+bitwiseBlend\" \"(a\\&~(c))|(b\\&c)\" \"BITWISE\"\n+gen_ternary_alu_bcst_op \"BITWISE_BLEND+bitwiseBlend\" \"(a \\&~ (c)) | (b \\& c)\" \"BITWISE\"\n@@ -544,1 +544,1 @@\n-gen_ternary_alu_double_bcst_op \"BITWISE_BLEND+bitwiseBlend\" \"(a\\&~(c))|(b\\&c)\" \"BITWISE\"\n+gen_ternary_alu_double_bcst_op \"BITWISE_BLEND+bitwiseBlend\" \"(a \\&~ (c)) | (b \\& c)\" \"BITWISE\"\n@@ -547,5 +547,5 @@\n-gen_unary_alu_op \"NEG+neg\" \"-((\\$type\\$)a)\"\n-gen_unary_alu_op \"ABS+abs\" \"Math.abs((\\$type\\$)a)\"\n-gen_unary_alu_op \"NOT+not\" \"~((\\$type\\$)a)\" \"BITWISE\"\n-gen_unary_alu_op \"ZOMO\" \"(a==0?0:-1)\" \"BITWISE\"\n-gen_unary_alu_op \"SQRT+sqrt\" \"Math.sqrt((double)a)\" \"FP\"\n+gen_unary_alu_op \"NEG+neg\" \"-((\\$type\\$) a)\"\n+gen_unary_alu_op \"ABS+abs\" \"Math.abs((\\$type\\$) a)\"\n+gen_unary_alu_op \"NOT+not\" \"~((\\$type\\$) a)\" \"BITWISE\"\n+gen_unary_alu_op \"ZOMO\" \"(a == 0 ? 0 : -1)\" \"BITWISE\"\n+gen_unary_alu_op \"SQRT+sqrt\" \"Math.sqrt((double) a)\" \"FP\"\n@@ -553,2 +553,2 @@\n-gen_unary_alu_op \"BIT_COUNT\" \"Integer.bitCount((int)a \\& 0xFF)\" \"byte\"\n-gen_unary_alu_op \"BIT_COUNT\" \"Integer.bitCount((int)a \\& 0xFFFF)\" \"short\"\n+gen_unary_alu_op \"BIT_COUNT\" \"Integer.bitCount((int) a \\& 0xFF)\" \"byte\"\n+gen_unary_alu_op \"BIT_COUNT\" \"Integer.bitCount((int) a \\& 0xFFFF)\" \"short\"\n","filename":"test\/jdk\/jdk\/incubator\/vector\/gen-template.sh","additions":36,"deletions":36,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n-            av.lanewise(VectorOperators.[[TEST]], (long)b[i]).intoArray(r, i);\n+            av.lanewise(VectorOperators.[[TEST]], (long) b[i]).intoArray(r, i);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Kernel-Binary-Broadcast-Long-op.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -9,1 +9,1 @@\n-            av.lanewise(VectorOperators.[[TEST]], (long)b[i], vmask).intoArray(r, i);\n+            av.lanewise(VectorOperators.[[TEST]], (long) b[i], vmask).intoArray(r, i);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Kernel-Binary-Broadcast-Masked-Long-op.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -11,1 +11,1 @@\n-                    r[i]=av.lane(0);\n+                    r[i] = av.lane(0);\n@@ -13,2 +13,2 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n@@ -16,4 +16,4 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n@@ -21,8 +21,8 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n@@ -30,16 +30,16 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n@@ -47,32 +47,32 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n@@ -80,64 +80,64 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n-                    r[i+32]=av.lane(32);\n-                    r[i+33]=av.lane(33);\n-                    r[i+34]=av.lane(34);\n-                    r[i+35]=av.lane(35);\n-                    r[i+36]=av.lane(36);\n-                    r[i+37]=av.lane(37);\n-                    r[i+38]=av.lane(38);\n-                    r[i+39]=av.lane(39);\n-                    r[i+40]=av.lane(40);\n-                    r[i+41]=av.lane(41);\n-                    r[i+42]=av.lane(42);\n-                    r[i+43]=av.lane(43);\n-                    r[i+44]=av.lane(44);\n-                    r[i+45]=av.lane(45);\n-                    r[i+46]=av.lane(46);\n-                    r[i+47]=av.lane(47);\n-                    r[i+48]=av.lane(48);\n-                    r[i+49]=av.lane(49);\n-                    r[i+50]=av.lane(50);\n-                    r[i+51]=av.lane(51);\n-                    r[i+52]=av.lane(52);\n-                    r[i+53]=av.lane(53);\n-                    r[i+54]=av.lane(54);\n-                    r[i+55]=av.lane(55);\n-                    r[i+56]=av.lane(56);\n-                    r[i+57]=av.lane(57);\n-                    r[i+58]=av.lane(58);\n-                    r[i+59]=av.lane(59);\n-                    r[i+60]=av.lane(60);\n-                    r[i+61]=av.lane(61);\n-                    r[i+62]=av.lane(62);\n-                    r[i+63]=av.lane(63);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n+                    r[i + 32] = av.lane(32);\n+                    r[i + 33] = av.lane(33);\n+                    r[i + 34] = av.lane(34);\n+                    r[i + 35] = av.lane(35);\n+                    r[i + 36] = av.lane(36);\n+                    r[i + 37] = av.lane(37);\n+                    r[i + 38] = av.lane(38);\n+                    r[i + 39] = av.lane(39);\n+                    r[i + 40] = av.lane(40);\n+                    r[i + 41] = av.lane(41);\n+                    r[i + 42] = av.lane(42);\n+                    r[i + 43] = av.lane(43);\n+                    r[i + 44] = av.lane(44);\n+                    r[i + 45] = av.lane(45);\n+                    r[i + 46] = av.lane(46);\n+                    r[i + 47] = av.lane(47);\n+                    r[i + 48] = av.lane(48);\n+                    r[i + 49] = av.lane(49);\n+                    r[i + 50] = av.lane(50);\n+                    r[i + 51] = av.lane(51);\n+                    r[i + 52] = av.lane(52);\n+                    r[i + 53] = av.lane(53);\n+                    r[i + 54] = av.lane(54);\n+                    r[i + 55] = av.lane(55);\n+                    r[i + 56] = av.lane(56);\n+                    r[i + 57] = av.lane(57);\n+                    r[i + 58] = av.lane(58);\n+                    r[i + 59] = av.lane(59);\n+                    r[i + 60] = av.lane(60);\n+                    r[i + 61] = av.lane(61);\n+                    r[i + 62] = av.lane(62);\n+                    r[i + 63] = av.lane(63);\n@@ -146,1 +146,1 @@\n-                        r[i+j]=av.lane(j);\n+                        r[i + j] = av.lane(j);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Kernel-Get-op.template","additions":128,"deletions":128,"binary":false,"changes":256,"status":"modified"},{"patch":"@@ -10,1 +10,1 @@\n-                av.lanewise(VectorOperators.[[TEST]], (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.[[TEST]], (int) b[i], vmask).intoArray(r, i);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Kernel-Shift-Masked-op.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n-                av.lanewise(VectorOperators.[[TEST]], (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.[[TEST]], (int) b[i]).intoArray(r, i);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Kernel-Shift-op.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n-                av.withLane((j++ \\& (SPECIES.length()-1)), ($type$)(65535+i)).intoArray(r, i);\n+                av.withLane((j++ \\& (SPECIES.length() - 1)), ($type$) (65535 + i)).intoArray(r, i);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Kernel-With-Op.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -14,1 +14,1 @@\n-                    rs[i] = ($type$)([[TEST_OP]]);\n+                    rs[i] = ($type$) ([[TEST_OP]]);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Binary-Masked-op.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -12,1 +12,1 @@\n-                rs[i] = ($type$)([[TEST_OP]]);\n+                rs[i] = ($type$) ([[TEST_OP]]);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Binary-op-math.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -12,1 +12,1 @@\n-                rs[i] = ($type$)([[TEST_OP]]);\n+                rs[i] = ($type$) ([[TEST_OP]]);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Binary-op.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -9,1 +9,1 @@\n-                    $type$ a = as[i+j];\n+                    $type$ a = as[i + j];\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Rearrange.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -11,1 +11,1 @@\n-                    r = ($type$)Math.max(r, as[i]);\n+                    r = ($type$) Math.max(r, as[i]);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Reduction-Masked-Max-op.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -11,1 +11,1 @@\n-                    r = ($type$)Math.min(r, as[i]);\n+                    r = ($type$) Math.min(r, as[i]);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Reduction-Masked-Min-op.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -9,1 +9,1 @@\n-                r = ($type$)Math.max(r, as[i]);\n+                r = ($type$) Math.max(r, as[i]);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Reduction-Max-op.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -9,1 +9,1 @@\n-                r = ($type$)Math.min(r, as[i]);\n+                r = ($type$) Math.min(r, as[i]);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Reduction-Min-op.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -14,1 +14,1 @@\n-                rs[i] = (m ? ($type$)([[TEST_OP]]) : a);\n+                rs[i] = (m ? ($type$) ([[TEST_OP]]) : a);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Shift-Masked-op.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -12,1 +12,1 @@\n-                rs[i] = ($type$)([[TEST_OP]]);\n+                rs[i] = ($type$) ([[TEST_OP]]);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Shift-op.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -16,1 +16,1 @@\n-                    rs[i] = ($type$)([[TEST_OP]]);\n+                    rs[i] = ($type$) ([[TEST_OP]]);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Ternary-Masked-op.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -14,1 +14,1 @@\n-                rs[i] = ($type$)([[TEST_OP]]);\n+                rs[i] = ($type$) ([[TEST_OP]]);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Ternary-op.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -12,1 +12,1 @@\n-                rs[i] = (m ? ($type$)([[TEST_OP]]) : a);\n+                rs[i] = (m ? ($type$) ([[TEST_OP]]) : a);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Unary-Masked-op.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -10,1 +10,1 @@\n-                rs[i] = ($type$)([[TEST_OP]]);\n+                rs[i] = ($type$) ([[TEST_OP]]);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Unary-math.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -10,1 +10,1 @@\n-                rs[i] = ($type$)([[TEST_OP]]);\n+                rs[i] = ($type$) ([[TEST_OP]]);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Unary-op-math.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -10,1 +10,1 @@\n-                rs[i] = ($type$)([[TEST_OP]]);\n+                rs[i] = ($type$) ([[TEST_OP]]);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Unary-op.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n-                as[i] = ($type$)0;\n+                as[i] = ($type$) 0;\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-Zero.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -64,4 +64,4 @@\n-        as = fill(i -> ($type$)(2*i));\n-        bs = fill(i -> ($type$)(i+1));\n-        cs = fill(i -> ($type$)(i+5));\n-        rs = fill(i -> ($type$)0);\n+        as = fill(i -> ($type$) (2 * i));\n+        bs = fill(i -> ($type$) (i + 1));\n+        cs = fill(i -> ($type$) (i + 5));\n+        rs = fill(i -> ($type$) 0);\n@@ -72,1 +72,1 @@\n-        ss = fillInt(size, i -> RANDOM.nextInt(Math.max(i,1)));\n+        ss = fillInt(size, i -> RANDOM.nextInt(Math.max(i, 1)));\n@@ -129,1 +129,1 @@\n-        return $Wideboxtype$.rotateLeft(a, ((int)b));\n+        return $Wideboxtype$.rotateLeft(a, ((int) b));\n@@ -132,1 +132,1 @@\n-        return (short)(((((short)a) & 0xFFFF) << (b & 15)) | ((((short)a) & 0xFFFF) >>> (16 - (b & 15))));\n+        return (short) (((((short) a) & 0xFFFF) << (b & 15)) | ((((short) a) & 0xFFFF) >>> (16 - (b & 15))));\n@@ -134,1 +134,1 @@\n-        return (byte)(((((byte)a) & 0xFF) << (b & 7)) | ((((byte)a) & 0xFF) >>> (8 - (b & 7))));\n+        return (byte) (((((byte) a) & 0xFF) << (b & 7)) | ((((byte) a) & 0xFF) >>> (8 - (b & 7))));\n@@ -141,1 +141,1 @@\n-        return $Wideboxtype$.rotateRight(a, ((int)b));\n+        return $Wideboxtype$.rotateRight(a, ((int) b));\n@@ -144,1 +144,1 @@\n-        return (short)(((((short)a) & 0xFFFF) >>> (b & 15)) | ((((short)a) & 0xFFFF) << (16 - (b & 15))));\n+        return (short) (((((short) a) & 0xFFFF) >>> (b & 15)) | ((((short) a) & 0xFFFF) << (16 - (b & 15))));\n@@ -146,1 +146,1 @@\n-        return (byte)(((((byte)a) & 0xFF) >>> (b & 7)) | ((((byte)a) & 0xFF) << (8 - (b & 7))));\n+        return (byte) (((((byte) a) & 0xFF) >>> (b & 7)) | ((((byte) a) & 0xFF) << (8 - (b & 7))));\n@@ -181,3 +181,3 @@\n-        b = (short)(((b & 0x5555) << 1) | ((b & 0xAAAA) >>> 1));\n-        b = (short)(((b & 0x3333) << 2) | ((b & 0xCCCC) >>> 2));\n-        b = (short)(((b & 0x0F0F) << 4) | ((b & 0xF0F0) >>> 4));\n+        b = (short) (((b & 0x5555) << 1) | ((b & 0xAAAA) >>> 1));\n+        b = (short) (((b & 0x3333) << 2) | ((b & 0xCCCC) >>> 2));\n+        b = (short) (((b & 0x0F0F) << 4) | ((b & 0xF0F0) >>> 4));\n@@ -187,2 +187,2 @@\n-        b = (byte)(((b & 0x55) << 1) | ((b & 0xAA) >>> 1));\n-        b = (byte)(((b & 0x33) << 2) | ((b & 0xCC) >>> 2));\n+        b = (byte) (((b & 0x55) << 1) | ((b & 0xAA) >>> 1));\n+        b = (byte) (((b & 0x33) << 2) | ((b & 0xCC) >>> 2));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-Scalar-header.template","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -99,4 +99,4 @@\n-        a = fill(i -> ($type$)(2*i));\n-        b = fill(i -> ($type$)(i+1));\n-        c = fill(i -> ($type$)(i+5));\n-        r = fill(i -> ($type$)0);\n+        a = fill(i -> ($type$) (2 * i));\n+        b = fill(i -> ($type$) (i + 1));\n+        c = fill(i -> ($type$) (i + 5));\n+        r = fill(i -> ($type$) 0);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Perf-header.template","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-        return ($type$)([[TEST_OP]]);\n+        return ($type$) ([[TEST_OP]]);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-Binary-Scalar-op.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-        return ($type$)([[TEST_OP]]);\n+        return ($type$) ([[TEST_OP]]);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-Binary-op.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -18,1 +18,0 @@\n-\n@@ -47,1 +46,1 @@\n-            VectorMask<$Wideboxtype$> mv = av.compare(VectorOperators.[[TEST]], (long)b[i]);\n+            VectorMask<$Wideboxtype$> mv = av.compare(VectorOperators.[[TEST]], (long) b[i]);\n@@ -51,1 +50,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), a[i + j] [[TEST_OP]] ($type$)((long)b[i]));\n+                Assert.assertEquals(mv.laneIsSet(j), a[i + j] [[TEST_OP]] ($type$) ((long) b[i]));\n@@ -56,1 +55,0 @@\n-\n@@ -68,1 +66,1 @@\n-            VectorMask<$Wideboxtype$> mv = av.compare(VectorOperators.[[TEST]], (long)b[i], vmask);\n+            VectorMask<$Wideboxtype$> mv = av.compare(VectorOperators.[[TEST]], (long) b[i], vmask);\n@@ -72,1 +70,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] [[TEST_OP]] ($type$)((long)b[i])));\n+                Assert.assertEquals(mv.laneIsSet(j), mask[j] && (a[i + j] [[TEST_OP]] ($type$) ((long) b[i])));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-Compare-Broadcast.template","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -129,1 +129,1 @@\n-        return (long)res;\n+        return (long) res;\n@@ -168,1 +168,1 @@\n-        return (long)res;\n+        return (long) res;\n@@ -229,1 +229,1 @@\n-                av.blend((long)b[i], vmask).intoArray(r, i);\n+                av.blend((long) b[i], vmask).intoArray(r, i);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-Miscellaneous.template","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-        return ($type$)([[TEST_OP]]);\n+        return ($type$) ([[TEST_OP]]);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-Shift-op.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4,2 +4,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = mask[i] ? a[idx+i+origin] : ($type$)0;\n+            if(i + origin < SPECIES.length())\n+                res[i] = mask[i] ? a[idx + i + origin] : ($type$) 0;\n@@ -7,1 +7,1 @@\n-                res[i] = mask[i] ? b[idx+j] : ($type$)0;\n+                res[i] = mask[i] ? b[idx + j] : ($type$) 0;\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-Slice-Masked-bop.template","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n-                res[i] = a[idx+i+origin];\n+                res[i] = a[idx + i + origin];\n@@ -7,1 +7,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-Slice-bop.template","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -4,2 +4,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = a[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = a[idx + i + origin];\n@@ -7,1 +7,1 @@\n-                res[i] = ($type$)0;\n+                res[i] = ($type$) 0;\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-Slice-op.template","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -9,1 +9,1 @@\n-           count = Math.max(5, count\/20); break;\n+           count = Math.max(5, count \/ 20); break;\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-Ternary-Masked-op.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-        return ($type$)([[TEST_OP]]);\n+        return ($type$) ([[TEST_OP]]);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-Ternary-Scalar-op.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n-           count = Math.max(5, count\/20); break;\n+           count = Math.max(5, count \/ 20); break;\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-Ternary-op.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && test[[TEST]](a[i + j]));\n+                Assert.assertEquals(mv.laneIsSet(j), vmask.laneIsSet(j) && test[[TEST]](a[i + j]));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-Test.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-        return ($type$)([[TEST_OP]]);\n+        return ($type$) ([[TEST_OP]]);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-Unary-Scalar-op.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-        return ($type$)([[TEST_OP]]);\n+        return ($type$) ([[TEST_OP]]);\n@@ -6,1 +6,1 @@\n-        return ($type$)(Strict[[TEST_OP]]);\n+        return ($type$) (Strict[[TEST_OP]]);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-Unary-op-math.template","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -4,2 +4,2 @@\n-            if(i+origin < SPECIES.length())\n-                res[i] = b[idx+i+origin];\n+            if(i + origin < SPECIES.length())\n+                res[i] = b[idx + i + origin];\n@@ -7,1 +7,1 @@\n-                res[i] = b[idx+j];\n+                res[i] = b[idx + j];\n@@ -12,1 +12,1 @@\n-            res[i] = mask[i] ? a[idx+i] : res[i];\n+            res[i] = mask[i] ? a[idx + i] : res[i];\n@@ -18,1 +18,1 @@\n-                    res1[i] = b[idx+i];\n+                    res1[i] = b[idx + i];\n@@ -20,2 +20,2 @@\n-                   res1[i] = res[j];\n-                   j++;\n+                    res1[i] = res[j];\n+                    j++;\n@@ -27,1 +27,1 @@\n-                    res1[i] = res[SPECIES.length()-origin+i];\n+                    res1[i] = res[SPECIES.length() - origin + i];\n@@ -29,1 +29,1 @@\n-                    res1[i] = b[idx+origin+j];\n+                    res1[i] = b[idx + origin + j];\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-Unslice-Masked-bop.template","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -6,1 +6,1 @@\n-                    res[i] = b[idx+i];\n+                    res[i] = b[idx + i];\n@@ -8,1 +8,1 @@\n-                    res[i] = a[idx+j];\n+                    res[i] = a[idx + j];\n@@ -13,1 +13,1 @@\n-                    res[i] = a[idx+SPECIES.length()-origin+i];\n+                    res[i] = a[idx + SPECIES.length() - origin + i];\n@@ -15,1 +15,1 @@\n-                    res[i] = b[idx+origin+j];\n+                    res[i] = b[idx + origin + j];\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-Unslice-bop.template","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n-                res[i] = ($type$)0;\n+                res[i] = ($type$) 0;\n@@ -7,1 +7,1 @@\n-                res[i] = a[idx+j];\n+                res[i] = a[idx + j];\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-Unslice-op.template","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7,1 +7,1 @@\n-            assertInsertArraysEquals(r, a, ($type$)(65535+i), (j++ & (SPECIES.length()-1)), i , i + SPECIES.length());\n+            assertInsertArraysEquals(r, a, ($type$) (65535 + i), (j++ & (SPECIES.length() - 1)), i , i + SPECIES.length());\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-With-Op.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -8,3 +8,0 @@\n-\n-\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-Zero.template","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -117,1 +117,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -122,1 +122,1 @@\n-            $type$[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            $type$[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -284,1 +284,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i+order[i + j]]);\n@@ -289,1 +289,1 @@\n-            Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i+order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]]);\n@@ -305,1 +305,1 @@\n-                    Assert.assertEquals(r[i + k], ($type$)0);\n+                    Assert.assertEquals(r[i + k], ($type$) 0);\n@@ -313,1 +313,1 @@\n-                Assert.assertEquals(r[idx], ($type$)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], ($type$) 0, \"at index #\" + idx);\n@@ -328,1 +328,1 @@\n-                        Assert.assertEquals(r[i + j], ($type$)0);\n+                        Assert.assertEquals(r[i + j], ($type$) 0);\n@@ -337,1 +337,1 @@\n-                Assert.assertEquals(r[idx], ($type$)0, \"at index #\" + idx);\n+                Assert.assertEquals(r[idx], ($type$) 0, \"at index #\" + idx);\n@@ -347,1 +347,1 @@\n-                    Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                    Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -352,1 +352,1 @@\n-            Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]]);\n+            Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]]);\n@@ -362,1 +362,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + order[i + j]]);\n@@ -364,1 +364,1 @@\n-                         Assert.assertEquals(r[i+j], ($type$)0);\n+                         Assert.assertEquals(r[i + j], ($type$) 0);\n@@ -370,1 +370,1 @@\n-                Assert.assertEquals(r[i+j], a[i+order[i+j]], \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + order[i + j]], \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -372,1 +372,1 @@\n-                Assert.assertEquals(r[i+j], ($type$)0, \"at index #\" + idx + \", input = \" + a[i+order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], ($type$) 0, \"at index #\" + idx + \", input = \" + a[i + order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -382,1 +382,1 @@\n-                         Assert.assertEquals(r[i+j], a[i+(int)order[i+j]]);\n+                         Assert.assertEquals(r[i + j], a[i + (int) order[i + j]]);\n@@ -384,1 +384,1 @@\n-                         Assert.assertEquals(r[i+j], ($type$)0);\n+                         Assert.assertEquals(r[i + j], ($type$) 0);\n@@ -390,1 +390,1 @@\n-                Assert.assertEquals(r[i+j], a[i+(int)order[i+j]], \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], a[i + (int) order[i + j]], \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -392,1 +392,1 @@\n-                Assert.assertEquals(r[i+j], ($type$)0, \"at index #\" + idx + \", input = \" + a[i+(int)order[i+j]] + \", mask = \" + mask[j % SPECIES.length()]);\n+                Assert.assertEquals(r[i + j], ($type$) 0, \"at index #\" + idx + \", input = \" + a[i + (int) order[i + j]] + \", mask = \" + mask[j % SPECIES.length()]);\n@@ -401,1 +401,1 @@\n-                a[j]=a[idx];\n+                a[j] = a[idx];\n@@ -452,1 +452,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], ($type$)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])));\n+                Assert.assertEquals(r[i], f.apply(a[i], ($type$) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])));\n@@ -455,1 +455,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], ($type$)((long)b[(i \/ SPECIES.length()) * SPECIES.length()])),\n+            Assert.assertEquals(r[i], f.apply(a[i], ($type$) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()])),\n@@ -501,1 +501,1 @@\n-                Assert.assertEquals(r[i], f.apply(a[i], ($type$)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n+                Assert.assertEquals(r[i], f.apply(a[i], ($type$) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]), mask[i % SPECIES.length()]));\n@@ -504,1 +504,1 @@\n-            Assert.assertEquals(r[i], f.apply(a[i], ($type$)((long)b[(i \/ SPECIES.length()) * SPECIES.length()]),\n+            Assert.assertEquals(r[i], f.apply(a[i], ($type$) ((long) b[(i \/ SPECIES.length()) * SPECIES.length()]),\n@@ -517,1 +517,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]));\n@@ -521,1 +521,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j]), \"at index #\" + i + \", \" + j);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j]), \"at index #\" + i + \", \" + j);\n@@ -535,1 +535,1 @@\n-                    Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]));\n+                    Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]));\n@@ -539,1 +539,1 @@\n-            Assert.assertEquals(r[i+j], f.apply(a[i+j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i+j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n+            Assert.assertEquals(r[i + j], f.apply(a[i + j], b[j], mask[i]), \"at index #\" + i + \", input1 = \" + a[i + j] + \", input2 = \" + b[j] + \", mask = \" + mask[i]);\n@@ -687,1 +687,0 @@\n-\n@@ -788,1 +787,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -793,1 +792,1 @@\n-            $type$[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            $type$[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -796,1 +795,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -798,1 +797,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -815,1 +814,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -820,1 +819,1 @@\n-            $type$[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            $type$[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -823,1 +822,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -825,1 +824,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -836,1 +835,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -841,1 +840,1 @@\n-            $type$[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            $type$[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -844,1 +843,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(a, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(a, i, i + SPECIES.length()))\n@@ -846,1 +845,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(b, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(b, i, i + SPECIES.length()))\n@@ -848,1 +847,1 @@\n-              + Arrays.toString(Arrays.copyOfRange(r, i, i+SPECIES.length()))\n+              + Arrays.toString(Arrays.copyOfRange(r, i, i + SPECIES.length()))\n@@ -863,1 +862,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -868,1 +867,1 @@\n-            $type$[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            $type$[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -883,1 +882,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -888,1 +887,1 @@\n-            $type$[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            $type$[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -904,1 +903,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -909,1 +908,1 @@\n-            $type$[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            $type$[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -925,1 +924,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -930,1 +929,1 @@\n-            $type$[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            $type$[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -947,1 +946,1 @@\n-                Assert.assertEquals(Arrays.copyOfRange(r, i, i+SPECIES.length()),\n+                Assert.assertEquals(Arrays.copyOfRange(r, i, i + SPECIES.length()),\n@@ -952,1 +951,1 @@\n-            $type$[] res = Arrays.copyOfRange(r, i, i+SPECIES.length());\n+            $type$[] res = Arrays.copyOfRange(r, i, i + SPECIES.length());\n@@ -974,1 +973,1 @@\n-                return (int)0;\n+                return (int) 0;\n@@ -981,1 +980,1 @@\n-                            i -> ($type$)(-i * 5));\n+                            i -> ($type$) (-i * 5));\n@@ -985,1 +984,1 @@\n-                            i -> ($type$)(i * 5));\n+                            i -> ($type$) (i * 5));\n@@ -989,1 +988,1 @@\n-                            i -> ((($type$)(i + 1) == 0) ? 1 : ($type$)(i + 1)));\n+                            i -> ((($type$) (i + 1) == 0) ? 1 : ($type$) (i + 1)));\n@@ -993,1 +992,1 @@\n-                            i -> ($type$)intCornerCaseValue(i));\n+                            i -> ($type$) intCornerCaseValue(i));\n@@ -1003,1 +1002,1 @@\n-                Assert.assertEquals(r[i], (int)(a[i+offs]));\n+                Assert.assertEquals(r[i], (int) (a[i + offs]));\n@@ -1006,1 +1005,1 @@\n-            Assert.assertEquals(r[i], (int)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (int) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -1023,1 +1022,1 @@\n-                return (long)0;\n+                return (long) 0;\n@@ -1030,1 +1029,1 @@\n-                            i -> ($type$)(-i * 5));\n+                            i -> ($type$) (-i * 5));\n@@ -1034,1 +1033,1 @@\n-                            i -> ($type$)(i * 5));\n+                            i -> ($type$) (i * 5));\n@@ -1038,1 +1037,1 @@\n-                            i -> ((($type$)(i + 1) == 0) ? 1 : ($type$)(i + 1)));\n+                            i -> ((($type$) (i + 1) == 0) ? 1 : ($type$) (i + 1)));\n@@ -1042,1 +1041,1 @@\n-                            i -> ($type$)longCornerCaseValue(i));\n+                            i -> ($type$) longCornerCaseValue(i));\n@@ -1053,1 +1052,1 @@\n-                Assert.assertEquals(r[i], (long)(a[i+offs]));\n+                Assert.assertEquals(r[i], (long) (a[i + offs]));\n@@ -1056,1 +1055,1 @@\n-            Assert.assertEquals(r[i], (long)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (long) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -1065,1 +1064,1 @@\n-                Assert.assertEquals(r[i], (long)(a[i+offs]));\n+                Assert.assertEquals(r[i], (long) (a[i + offs]));\n@@ -1068,1 +1067,1 @@\n-            Assert.assertEquals(r[i], (long)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (long) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -1077,1 +1076,1 @@\n-                Assert.assertEquals(r[i], (double)(a[i+offs]));\n+                Assert.assertEquals(r[i], (double) (a[i + offs]));\n@@ -1080,1 +1079,1 @@\n-            Assert.assertEquals(r[i], (double)(a[i+offs]), \"at index #\" + i + \", input = \" + a[i+offs]);\n+            Assert.assertEquals(r[i], (double) (a[i + offs]), \"at index #\" + i + \", input = \" + a[i + offs]);\n@@ -1085,1 +1084,0 @@\n-\n@@ -1093,1 +1091,1 @@\n-                            i -> ($type$)(-i * 5));\n+                            i -> ($type$) (-i * 5));\n@@ -1097,1 +1095,1 @@\n-                            i -> ($type$)(i * 5));\n+                            i -> ($type$) (i * 5));\n@@ -1101,1 +1099,1 @@\n-                            i -> ((($type$)(i + 1) == 0) ? 1 : ($type$)(i + 1)));\n+                            i -> ((($type$) (i + 1) == 0) ? 1 : ($type$) (i + 1)));\n@@ -1255,1 +1253,1 @@\n-                    a[i] = ($type$)RAND.nextInt(upper);\n+                    a[i] = ($type$) RAND.nextInt(upper);\n@@ -1279,1 +1277,0 @@\n-\n@@ -1285,1 +1282,1 @@\n-                            i -> ($type$)i);\n+                            i -> ($type$) i);\n@@ -1289,1 +1286,1 @@\n-                            i -> ($type$)(i - (s * BUFFER_REPS \/ 2)));\n+                            i -> ($type$) (i - (s * BUFFER_REPS \/ 2)));\n@@ -1293,1 +1290,1 @@\n-                            i -> ($type$)(i + 1));\n+                            i -> ($type$) (i + 1));\n@@ -1297,1 +1294,1 @@\n-                            i -> ($type$)(i - 2));\n+                            i -> ($type$) (i - 2));\n@@ -1301,1 +1298,1 @@\n-                            i -> i%3 == 0 ? ($type$)i : (i%3 == 1 ? ($type$)(i + 1) : ($type$)(i - 2)));\n+                            i -> i % 3 == 0 ? ($type$) i : (i % 3 == 1 ? ($type$) (i + 1) : ($type$) (i - 2)));\n@@ -1378,1 +1375,1 @@\n-                return ($type$)0.0;\n+                return ($type$) 0.0;\n@@ -1380,1 +1377,1 @@\n-                return ($type$)-0.0;\n+                return ($type$) -0.0;\n@@ -1393,1 +1390,1 @@\n-                return ($type$)0;\n+                return ($type$) 0;\n@@ -1438,1 +1435,1 @@\n-        return $Wideboxtype$.rotateLeft(a, ((int)b));\n+        return $Wideboxtype$.rotateLeft(a, ((int) b));\n@@ -1441,1 +1438,1 @@\n-        return (short)(((((short)a) & 0xFFFF) << (b & 15)) | ((((short)a) & 0xFFFF) >>> (16 - (b & 15))));\n+        return (short) (((((short) a) & 0xFFFF) << (b & 15)) | ((((short) a) & 0xFFFF) >>> (16 - (b & 15))));\n@@ -1443,1 +1440,1 @@\n-        return (byte)(((((byte)a) & 0xFF) << (b & 7)) | ((((byte)a) & 0xFF) >>> (8 - (b & 7))));\n+        return (byte) (((((byte) a) & 0xFF) << (b & 7)) | ((((byte) a) & 0xFF) >>> (8 - (b & 7))));\n@@ -1450,1 +1447,1 @@\n-        return $Wideboxtype$.rotateRight(a, ((int)b));\n+        return $Wideboxtype$.rotateRight(a, ((int) b));\n@@ -1453,1 +1450,1 @@\n-        return (short)(((((short)a) & 0xFFFF) >>> (b & 15)) | ((((short)a) & 0xFFFF) << (16 - (b & 15))));\n+        return (short) (((((short) a) & 0xFFFF) >>> (b & 15)) | ((((short) a) & 0xFFFF) << (16 - (b & 15))));\n@@ -1455,1 +1452,1 @@\n-        return (byte)(((((byte)a) & 0xFF) >>> (b & 7)) | ((((byte)a) & 0xFF) << (8 - (b & 7))));\n+        return (byte) (((((byte) a) & 0xFF) >>> (b & 7)) | ((((byte) a) & 0xFF) << (8 - (b & 7))));\n@@ -1490,3 +1487,3 @@\n-        b = (short)(((b & 0x5555) << 1) | ((b & 0xAAAA) >>> 1));\n-        b = (short)(((b & 0x3333) << 2) | ((b & 0xCCCC) >>> 2));\n-        b = (short)(((b & 0x0F0F) << 4) | ((b & 0xF0F0) >>> 4));\n+        b = (short) (((b & 0x5555) << 1) | ((b & 0xAAAA) >>> 1));\n+        b = (short) (((b & 0x3333) << 2) | ((b & 0xCCCC) >>> 2));\n+        b = (short) (((b & 0x0F0F) << 4) | ((b & 0xF0F0) >>> 4));\n@@ -1496,2 +1493,2 @@\n-        b = (byte)(((b & 0x55) << 1) | ((b & 0xAA) >>> 1));\n-        b = (byte)(((b & 0x33) << 2) | ((b & 0xCC) >>> 2));\n+        b = (byte) (((b & 0x55) << 1) | ((b & 0xAA) >>> 1));\n+        b = (byte) (((b & 0x33) << 2) | ((b & 0xCC) >>> 2));\n@@ -1552,1 +1549,1 @@\n-        $abstractvectortype$ three = $abstractvectortype$.broadcast(SPECIES, (byte)-3);\n+        $abstractvectortype$ three = $abstractvectortype$.broadcast(SPECIES, (byte) -3);\n@@ -1566,1 +1563,1 @@\n-        m = higher.min(($type$)-1).test(VectorOperators.IS_NEGATIVE);\n+        m = higher.min(($type$) -1).test(VectorOperators.IS_NEGATIVE);\n@@ -1573,1 +1570,1 @@\n-        assert(max == -3 + scale * (SPECIES.length()-1));\n+        assert(max == -3 + scale * (SPECIES.length() - 1));\n@@ -1588,1 +1585,1 @@\n-        $abstractvectortype$ io2 = ($abstractvectortype$) VectorShuffle.iota(SPECIES,0,1,false).toVector();\n+        $abstractvectortype$ io2 = ($abstractvectortype$) VectorShuffle.iota(SPECIES, 0, 1, false).toVector();\n@@ -1590,1 +1587,1 @@\n-        $abstractvectortype$ a = io.add(($type$)1); \/\/[1,2]\n+        $abstractvectortype$ a = io.add(($type$) 1); \/\/[1,2]\n@@ -1595,2 +1592,2 @@\n-        $abstractvectortype$ zab0 = a.rearrange(zip0,b); \/\/[1,-1]\n-        $abstractvectortype$ zab1 = a.rearrange(zip1,b); \/\/[2,-2]\n+        $abstractvectortype$ zab0 = a.rearrange(zip0, b); \/\/[1,-1]\n+        $abstractvectortype$ zab1 = a.rearrange(zip1, b); \/\/[2,-2]\n@@ -1601,2 +1598,2 @@\n-            manual[i+0] = abValues[i\/2];\n-            manual[i+1] = abValues[a.length() + i\/2];\n+            manual[i + 0] = abValues[i \/ 2];\n+            manual[i + 1] = abValues[a.length() + i \/ 2];\n@@ -1607,2 +1604,2 @@\n-        $abstractvectortype$ uab0 = zab0.rearrange(unz0,zab1);\n-        $abstractvectortype$ uab1 = zab0.rearrange(unz1,zab1);\n+        $abstractvectortype$ uab0 = zab0.rearrange(unz0, zab1);\n+        $abstractvectortype$ uab1 = zab0.rearrange(unz1, zab1);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-header.template","additions":102,"deletions":105,"binary":false,"changes":207,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -101,1 +101,1 @@\n-                Assert.assertEquals(r[i], mask[(i*8\/SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0);\n+                Assert.assertEquals(r[i], mask[(i * 8 \/ SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0);\n@@ -104,1 +104,1 @@\n-            Assert.assertEquals(r[i], mask[(i*8\/SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0, \"at index #\" + i);\n+            Assert.assertEquals(r[i], mask[(i * 8 \/ SPECIES.elementSize()) % SPECIES.length()] ? a[i] : (byte) 0, \"at index #\" + i);\n@@ -112,1 +112,1 @@\n-                            i -> ($type$)(i * 5));\n+                            i -> ($type$) (i * 5));\n@@ -116,1 +116,1 @@\n-                            i -> ((($type$)(i + 1) == 0) ? 1 : ($type$)(i + 1)));\n+                            i -> ((($type$) (i + 1) == 0) ? 1 : ($type$) (i + 1)));\n@@ -223,1 +223,1 @@\n-                            return new Object[]{fa, fb, bo};\n+                            return new Object[] {fa, fb, bo};\n@@ -234,1 +234,1 @@\n-                            return new Object[]{fa, fb, fm, bo};\n+                            return new Object[] {fa, fb, fm, bo};\n@@ -243,1 +243,1 @@\n-                    return new Object[]{fa, bo};\n+                    return new Object[] {fa, bo};\n@@ -253,1 +253,1 @@\n-                        return new Object[]{fa, fm, bo};\n+                        return new Object[] {fa, fm, bo};\n@@ -974,1 +974,0 @@\n-\n@@ -990,1 +989,1 @@\n-                            i -> (char)(i * 5));\n+                            i -> (char) (i * 5));\n@@ -994,1 +993,1 @@\n-                            i -> (((char)(i + 1) == 0) ? 1 : (char)(i + 1)));\n+                            i -> (((char) (i + 1) == 0) ? 1 : (char) (i + 1)));\n@@ -1001,1 +1000,1 @@\n-                map(f -> new Object[]{f}).\n+                map(f -> new Object[] {f}).\n@@ -1219,1 +1218,0 @@\n-\n@@ -1312,1 +1310,0 @@\n-\n@@ -1539,1 +1536,0 @@\n-\n@@ -1736,1 +1732,0 @@\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/X-LoadStoreTest.java.template","additions":12,"deletions":17,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -93,4 +93,4 @@\n-        a = fill(i -> (byte)(2*i));\n-        b = fill(i -> (byte)(i+1));\n-        c = fill(i -> (byte)(i+5));\n-        r = fill(i -> (byte)0);\n+        a = fill(i -> (byte) (2 * i));\n+        b = fill(i -> (byte) (i + 1));\n+        c = fill(i -> (byte) (i + 5));\n+        r = fill(i -> (byte) 0);\n@@ -609,1 +609,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i]).intoArray(r, i);\n@@ -629,1 +629,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i], vmask).intoArray(r, i);\n@@ -651,1 +651,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i]).intoArray(r, i);\n@@ -671,1 +671,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i], vmask).intoArray(r, i);\n@@ -693,1 +693,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i]).intoArray(r, i);\n@@ -713,1 +713,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i], vmask).intoArray(r, i);\n@@ -813,1 +813,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i]).intoArray(r, i);\n@@ -833,1 +833,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i], vmask).intoArray(r, i);\n@@ -851,1 +851,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i]).intoArray(r, i);\n@@ -871,1 +871,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i], vmask).intoArray(r, i);\n@@ -1223,1 +1223,1 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (byte)(65535+i)).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length() - 1)), (byte) (65535 + i)).intoArray(r, i);\n@@ -1575,1 +1575,1 @@\n-                    r[i]=av.lane(0);\n+                    r[i] = av.lane(0);\n@@ -1577,2 +1577,2 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n@@ -1580,4 +1580,4 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n@@ -1585,8 +1585,8 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n@@ -1594,16 +1594,16 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n@@ -1611,32 +1611,32 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n@@ -1644,64 +1644,64 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n-                    r[i+32]=av.lane(32);\n-                    r[i+33]=av.lane(33);\n-                    r[i+34]=av.lane(34);\n-                    r[i+35]=av.lane(35);\n-                    r[i+36]=av.lane(36);\n-                    r[i+37]=av.lane(37);\n-                    r[i+38]=av.lane(38);\n-                    r[i+39]=av.lane(39);\n-                    r[i+40]=av.lane(40);\n-                    r[i+41]=av.lane(41);\n-                    r[i+42]=av.lane(42);\n-                    r[i+43]=av.lane(43);\n-                    r[i+44]=av.lane(44);\n-                    r[i+45]=av.lane(45);\n-                    r[i+46]=av.lane(46);\n-                    r[i+47]=av.lane(47);\n-                    r[i+48]=av.lane(48);\n-                    r[i+49]=av.lane(49);\n-                    r[i+50]=av.lane(50);\n-                    r[i+51]=av.lane(51);\n-                    r[i+52]=av.lane(52);\n-                    r[i+53]=av.lane(53);\n-                    r[i+54]=av.lane(54);\n-                    r[i+55]=av.lane(55);\n-                    r[i+56]=av.lane(56);\n-                    r[i+57]=av.lane(57);\n-                    r[i+58]=av.lane(58);\n-                    r[i+59]=av.lane(59);\n-                    r[i+60]=av.lane(60);\n-                    r[i+61]=av.lane(61);\n-                    r[i+62]=av.lane(62);\n-                    r[i+63]=av.lane(63);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n+                    r[i + 32] = av.lane(32);\n+                    r[i + 33] = av.lane(33);\n+                    r[i + 34] = av.lane(34);\n+                    r[i + 35] = av.lane(35);\n+                    r[i + 36] = av.lane(36);\n+                    r[i + 37] = av.lane(37);\n+                    r[i + 38] = av.lane(38);\n+                    r[i + 39] = av.lane(39);\n+                    r[i + 40] = av.lane(40);\n+                    r[i + 41] = av.lane(41);\n+                    r[i + 42] = av.lane(42);\n+                    r[i + 43] = av.lane(43);\n+                    r[i + 44] = av.lane(44);\n+                    r[i + 45] = av.lane(45);\n+                    r[i + 46] = av.lane(46);\n+                    r[i + 47] = av.lane(47);\n+                    r[i + 48] = av.lane(48);\n+                    r[i + 49] = av.lane(49);\n+                    r[i + 50] = av.lane(50);\n+                    r[i + 51] = av.lane(51);\n+                    r[i + 52] = av.lane(52);\n+                    r[i + 53] = av.lane(53);\n+                    r[i + 54] = av.lane(54);\n+                    r[i + 55] = av.lane(55);\n+                    r[i + 56] = av.lane(56);\n+                    r[i + 57] = av.lane(57);\n+                    r[i + 58] = av.lane(58);\n+                    r[i + 59] = av.lane(59);\n+                    r[i + 60] = av.lane(60);\n+                    r[i + 61] = av.lane(61);\n+                    r[i + 62] = av.lane(62);\n+                    r[i + 63] = av.lane(63);\n@@ -1710,1 +1710,1 @@\n-                        r[i+j]=av.lane(j);\n+                        r[i + j] = av.lane(j);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte128Vector.java","additions":144,"deletions":144,"binary":false,"changes":288,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -93,4 +93,4 @@\n-        a = fill(i -> (byte)(2*i));\n-        b = fill(i -> (byte)(i+1));\n-        c = fill(i -> (byte)(i+5));\n-        r = fill(i -> (byte)0);\n+        a = fill(i -> (byte) (2 * i));\n+        b = fill(i -> (byte) (i + 1));\n+        c = fill(i -> (byte) (i + 5));\n+        r = fill(i -> (byte) 0);\n@@ -609,1 +609,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i]).intoArray(r, i);\n@@ -629,1 +629,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i], vmask).intoArray(r, i);\n@@ -651,1 +651,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i]).intoArray(r, i);\n@@ -671,1 +671,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i], vmask).intoArray(r, i);\n@@ -693,1 +693,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i]).intoArray(r, i);\n@@ -713,1 +713,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i], vmask).intoArray(r, i);\n@@ -813,1 +813,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i]).intoArray(r, i);\n@@ -833,1 +833,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i], vmask).intoArray(r, i);\n@@ -851,1 +851,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i]).intoArray(r, i);\n@@ -871,1 +871,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i], vmask).intoArray(r, i);\n@@ -1223,1 +1223,1 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (byte)(65535+i)).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length() - 1)), (byte) (65535 + i)).intoArray(r, i);\n@@ -1575,1 +1575,1 @@\n-                    r[i]=av.lane(0);\n+                    r[i] = av.lane(0);\n@@ -1577,2 +1577,2 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n@@ -1580,4 +1580,4 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n@@ -1585,8 +1585,8 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n@@ -1594,16 +1594,16 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n@@ -1611,32 +1611,32 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n@@ -1644,64 +1644,64 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n-                    r[i+32]=av.lane(32);\n-                    r[i+33]=av.lane(33);\n-                    r[i+34]=av.lane(34);\n-                    r[i+35]=av.lane(35);\n-                    r[i+36]=av.lane(36);\n-                    r[i+37]=av.lane(37);\n-                    r[i+38]=av.lane(38);\n-                    r[i+39]=av.lane(39);\n-                    r[i+40]=av.lane(40);\n-                    r[i+41]=av.lane(41);\n-                    r[i+42]=av.lane(42);\n-                    r[i+43]=av.lane(43);\n-                    r[i+44]=av.lane(44);\n-                    r[i+45]=av.lane(45);\n-                    r[i+46]=av.lane(46);\n-                    r[i+47]=av.lane(47);\n-                    r[i+48]=av.lane(48);\n-                    r[i+49]=av.lane(49);\n-                    r[i+50]=av.lane(50);\n-                    r[i+51]=av.lane(51);\n-                    r[i+52]=av.lane(52);\n-                    r[i+53]=av.lane(53);\n-                    r[i+54]=av.lane(54);\n-                    r[i+55]=av.lane(55);\n-                    r[i+56]=av.lane(56);\n-                    r[i+57]=av.lane(57);\n-                    r[i+58]=av.lane(58);\n-                    r[i+59]=av.lane(59);\n-                    r[i+60]=av.lane(60);\n-                    r[i+61]=av.lane(61);\n-                    r[i+62]=av.lane(62);\n-                    r[i+63]=av.lane(63);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n+                    r[i + 32] = av.lane(32);\n+                    r[i + 33] = av.lane(33);\n+                    r[i + 34] = av.lane(34);\n+                    r[i + 35] = av.lane(35);\n+                    r[i + 36] = av.lane(36);\n+                    r[i + 37] = av.lane(37);\n+                    r[i + 38] = av.lane(38);\n+                    r[i + 39] = av.lane(39);\n+                    r[i + 40] = av.lane(40);\n+                    r[i + 41] = av.lane(41);\n+                    r[i + 42] = av.lane(42);\n+                    r[i + 43] = av.lane(43);\n+                    r[i + 44] = av.lane(44);\n+                    r[i + 45] = av.lane(45);\n+                    r[i + 46] = av.lane(46);\n+                    r[i + 47] = av.lane(47);\n+                    r[i + 48] = av.lane(48);\n+                    r[i + 49] = av.lane(49);\n+                    r[i + 50] = av.lane(50);\n+                    r[i + 51] = av.lane(51);\n+                    r[i + 52] = av.lane(52);\n+                    r[i + 53] = av.lane(53);\n+                    r[i + 54] = av.lane(54);\n+                    r[i + 55] = av.lane(55);\n+                    r[i + 56] = av.lane(56);\n+                    r[i + 57] = av.lane(57);\n+                    r[i + 58] = av.lane(58);\n+                    r[i + 59] = av.lane(59);\n+                    r[i + 60] = av.lane(60);\n+                    r[i + 61] = av.lane(61);\n+                    r[i + 62] = av.lane(62);\n+                    r[i + 63] = av.lane(63);\n@@ -1710,1 +1710,1 @@\n-                        r[i+j]=av.lane(j);\n+                        r[i + j] = av.lane(j);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte256Vector.java","additions":144,"deletions":144,"binary":false,"changes":288,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -93,4 +93,4 @@\n-        a = fill(i -> (byte)(2*i));\n-        b = fill(i -> (byte)(i+1));\n-        c = fill(i -> (byte)(i+5));\n-        r = fill(i -> (byte)0);\n+        a = fill(i -> (byte) (2 * i));\n+        b = fill(i -> (byte) (i + 1));\n+        c = fill(i -> (byte) (i + 5));\n+        r = fill(i -> (byte) 0);\n@@ -609,1 +609,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i]).intoArray(r, i);\n@@ -629,1 +629,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i], vmask).intoArray(r, i);\n@@ -651,1 +651,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i]).intoArray(r, i);\n@@ -671,1 +671,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i], vmask).intoArray(r, i);\n@@ -693,1 +693,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i]).intoArray(r, i);\n@@ -713,1 +713,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i], vmask).intoArray(r, i);\n@@ -813,1 +813,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i]).intoArray(r, i);\n@@ -833,1 +833,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i], vmask).intoArray(r, i);\n@@ -851,1 +851,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i]).intoArray(r, i);\n@@ -871,1 +871,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i], vmask).intoArray(r, i);\n@@ -1223,1 +1223,1 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (byte)(65535+i)).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length() - 1)), (byte) (65535 + i)).intoArray(r, i);\n@@ -1575,1 +1575,1 @@\n-                    r[i]=av.lane(0);\n+                    r[i] = av.lane(0);\n@@ -1577,2 +1577,2 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n@@ -1580,4 +1580,4 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n@@ -1585,8 +1585,8 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n@@ -1594,16 +1594,16 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n@@ -1611,32 +1611,32 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n@@ -1644,64 +1644,64 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n-                    r[i+32]=av.lane(32);\n-                    r[i+33]=av.lane(33);\n-                    r[i+34]=av.lane(34);\n-                    r[i+35]=av.lane(35);\n-                    r[i+36]=av.lane(36);\n-                    r[i+37]=av.lane(37);\n-                    r[i+38]=av.lane(38);\n-                    r[i+39]=av.lane(39);\n-                    r[i+40]=av.lane(40);\n-                    r[i+41]=av.lane(41);\n-                    r[i+42]=av.lane(42);\n-                    r[i+43]=av.lane(43);\n-                    r[i+44]=av.lane(44);\n-                    r[i+45]=av.lane(45);\n-                    r[i+46]=av.lane(46);\n-                    r[i+47]=av.lane(47);\n-                    r[i+48]=av.lane(48);\n-                    r[i+49]=av.lane(49);\n-                    r[i+50]=av.lane(50);\n-                    r[i+51]=av.lane(51);\n-                    r[i+52]=av.lane(52);\n-                    r[i+53]=av.lane(53);\n-                    r[i+54]=av.lane(54);\n-                    r[i+55]=av.lane(55);\n-                    r[i+56]=av.lane(56);\n-                    r[i+57]=av.lane(57);\n-                    r[i+58]=av.lane(58);\n-                    r[i+59]=av.lane(59);\n-                    r[i+60]=av.lane(60);\n-                    r[i+61]=av.lane(61);\n-                    r[i+62]=av.lane(62);\n-                    r[i+63]=av.lane(63);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n+                    r[i + 32] = av.lane(32);\n+                    r[i + 33] = av.lane(33);\n+                    r[i + 34] = av.lane(34);\n+                    r[i + 35] = av.lane(35);\n+                    r[i + 36] = av.lane(36);\n+                    r[i + 37] = av.lane(37);\n+                    r[i + 38] = av.lane(38);\n+                    r[i + 39] = av.lane(39);\n+                    r[i + 40] = av.lane(40);\n+                    r[i + 41] = av.lane(41);\n+                    r[i + 42] = av.lane(42);\n+                    r[i + 43] = av.lane(43);\n+                    r[i + 44] = av.lane(44);\n+                    r[i + 45] = av.lane(45);\n+                    r[i + 46] = av.lane(46);\n+                    r[i + 47] = av.lane(47);\n+                    r[i + 48] = av.lane(48);\n+                    r[i + 49] = av.lane(49);\n+                    r[i + 50] = av.lane(50);\n+                    r[i + 51] = av.lane(51);\n+                    r[i + 52] = av.lane(52);\n+                    r[i + 53] = av.lane(53);\n+                    r[i + 54] = av.lane(54);\n+                    r[i + 55] = av.lane(55);\n+                    r[i + 56] = av.lane(56);\n+                    r[i + 57] = av.lane(57);\n+                    r[i + 58] = av.lane(58);\n+                    r[i + 59] = av.lane(59);\n+                    r[i + 60] = av.lane(60);\n+                    r[i + 61] = av.lane(61);\n+                    r[i + 62] = av.lane(62);\n+                    r[i + 63] = av.lane(63);\n@@ -1710,1 +1710,1 @@\n-                        r[i+j]=av.lane(j);\n+                        r[i + j] = av.lane(j);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte512Vector.java","additions":144,"deletions":144,"binary":false,"changes":288,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -93,4 +93,4 @@\n-        a = fill(i -> (byte)(2*i));\n-        b = fill(i -> (byte)(i+1));\n-        c = fill(i -> (byte)(i+5));\n-        r = fill(i -> (byte)0);\n+        a = fill(i -> (byte) (2 * i));\n+        b = fill(i -> (byte) (i + 1));\n+        c = fill(i -> (byte) (i + 5));\n+        r = fill(i -> (byte) 0);\n@@ -609,1 +609,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i]).intoArray(r, i);\n@@ -629,1 +629,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i], vmask).intoArray(r, i);\n@@ -651,1 +651,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i]).intoArray(r, i);\n@@ -671,1 +671,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i], vmask).intoArray(r, i);\n@@ -693,1 +693,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i]).intoArray(r, i);\n@@ -713,1 +713,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i], vmask).intoArray(r, i);\n@@ -813,1 +813,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i]).intoArray(r, i);\n@@ -833,1 +833,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i], vmask).intoArray(r, i);\n@@ -851,1 +851,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i]).intoArray(r, i);\n@@ -871,1 +871,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i], vmask).intoArray(r, i);\n@@ -1223,1 +1223,1 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (byte)(65535+i)).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length() - 1)), (byte) (65535 + i)).intoArray(r, i);\n@@ -1575,1 +1575,1 @@\n-                    r[i]=av.lane(0);\n+                    r[i] = av.lane(0);\n@@ -1577,2 +1577,2 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n@@ -1580,4 +1580,4 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n@@ -1585,8 +1585,8 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n@@ -1594,16 +1594,16 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n@@ -1611,32 +1611,32 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n@@ -1644,64 +1644,64 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n-                    r[i+32]=av.lane(32);\n-                    r[i+33]=av.lane(33);\n-                    r[i+34]=av.lane(34);\n-                    r[i+35]=av.lane(35);\n-                    r[i+36]=av.lane(36);\n-                    r[i+37]=av.lane(37);\n-                    r[i+38]=av.lane(38);\n-                    r[i+39]=av.lane(39);\n-                    r[i+40]=av.lane(40);\n-                    r[i+41]=av.lane(41);\n-                    r[i+42]=av.lane(42);\n-                    r[i+43]=av.lane(43);\n-                    r[i+44]=av.lane(44);\n-                    r[i+45]=av.lane(45);\n-                    r[i+46]=av.lane(46);\n-                    r[i+47]=av.lane(47);\n-                    r[i+48]=av.lane(48);\n-                    r[i+49]=av.lane(49);\n-                    r[i+50]=av.lane(50);\n-                    r[i+51]=av.lane(51);\n-                    r[i+52]=av.lane(52);\n-                    r[i+53]=av.lane(53);\n-                    r[i+54]=av.lane(54);\n-                    r[i+55]=av.lane(55);\n-                    r[i+56]=av.lane(56);\n-                    r[i+57]=av.lane(57);\n-                    r[i+58]=av.lane(58);\n-                    r[i+59]=av.lane(59);\n-                    r[i+60]=av.lane(60);\n-                    r[i+61]=av.lane(61);\n-                    r[i+62]=av.lane(62);\n-                    r[i+63]=av.lane(63);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n+                    r[i + 32] = av.lane(32);\n+                    r[i + 33] = av.lane(33);\n+                    r[i + 34] = av.lane(34);\n+                    r[i + 35] = av.lane(35);\n+                    r[i + 36] = av.lane(36);\n+                    r[i + 37] = av.lane(37);\n+                    r[i + 38] = av.lane(38);\n+                    r[i + 39] = av.lane(39);\n+                    r[i + 40] = av.lane(40);\n+                    r[i + 41] = av.lane(41);\n+                    r[i + 42] = av.lane(42);\n+                    r[i + 43] = av.lane(43);\n+                    r[i + 44] = av.lane(44);\n+                    r[i + 45] = av.lane(45);\n+                    r[i + 46] = av.lane(46);\n+                    r[i + 47] = av.lane(47);\n+                    r[i + 48] = av.lane(48);\n+                    r[i + 49] = av.lane(49);\n+                    r[i + 50] = av.lane(50);\n+                    r[i + 51] = av.lane(51);\n+                    r[i + 52] = av.lane(52);\n+                    r[i + 53] = av.lane(53);\n+                    r[i + 54] = av.lane(54);\n+                    r[i + 55] = av.lane(55);\n+                    r[i + 56] = av.lane(56);\n+                    r[i + 57] = av.lane(57);\n+                    r[i + 58] = av.lane(58);\n+                    r[i + 59] = av.lane(59);\n+                    r[i + 60] = av.lane(60);\n+                    r[i + 61] = av.lane(61);\n+                    r[i + 62] = av.lane(62);\n+                    r[i + 63] = av.lane(63);\n@@ -1710,1 +1710,1 @@\n-                        r[i+j]=av.lane(j);\n+                        r[i + j] = av.lane(j);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Byte64Vector.java","additions":144,"deletions":144,"binary":false,"changes":288,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -93,4 +93,4 @@\n-        a = fill(i -> (byte)(2*i));\n-        b = fill(i -> (byte)(i+1));\n-        c = fill(i -> (byte)(i+5));\n-        r = fill(i -> (byte)0);\n+        a = fill(i -> (byte) (2 * i));\n+        b = fill(i -> (byte) (i + 1));\n+        c = fill(i -> (byte) (i + 5));\n+        r = fill(i -> (byte) 0);\n@@ -609,1 +609,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i]).intoArray(r, i);\n@@ -629,1 +629,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i], vmask).intoArray(r, i);\n@@ -651,1 +651,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i]).intoArray(r, i);\n@@ -671,1 +671,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i], vmask).intoArray(r, i);\n@@ -693,1 +693,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i]).intoArray(r, i);\n@@ -713,1 +713,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i], vmask).intoArray(r, i);\n@@ -813,1 +813,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i]).intoArray(r, i);\n@@ -833,1 +833,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i], vmask).intoArray(r, i);\n@@ -851,1 +851,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i]).intoArray(r, i);\n@@ -871,1 +871,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i], vmask).intoArray(r, i);\n@@ -1223,1 +1223,1 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (byte)(65535+i)).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length() - 1)), (byte) (65535 + i)).intoArray(r, i);\n@@ -1575,1 +1575,1 @@\n-                    r[i]=av.lane(0);\n+                    r[i] = av.lane(0);\n@@ -1577,2 +1577,2 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n@@ -1580,4 +1580,4 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n@@ -1585,8 +1585,8 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n@@ -1594,16 +1594,16 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n@@ -1611,32 +1611,32 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n@@ -1644,64 +1644,64 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n-                    r[i+32]=av.lane(32);\n-                    r[i+33]=av.lane(33);\n-                    r[i+34]=av.lane(34);\n-                    r[i+35]=av.lane(35);\n-                    r[i+36]=av.lane(36);\n-                    r[i+37]=av.lane(37);\n-                    r[i+38]=av.lane(38);\n-                    r[i+39]=av.lane(39);\n-                    r[i+40]=av.lane(40);\n-                    r[i+41]=av.lane(41);\n-                    r[i+42]=av.lane(42);\n-                    r[i+43]=av.lane(43);\n-                    r[i+44]=av.lane(44);\n-                    r[i+45]=av.lane(45);\n-                    r[i+46]=av.lane(46);\n-                    r[i+47]=av.lane(47);\n-                    r[i+48]=av.lane(48);\n-                    r[i+49]=av.lane(49);\n-                    r[i+50]=av.lane(50);\n-                    r[i+51]=av.lane(51);\n-                    r[i+52]=av.lane(52);\n-                    r[i+53]=av.lane(53);\n-                    r[i+54]=av.lane(54);\n-                    r[i+55]=av.lane(55);\n-                    r[i+56]=av.lane(56);\n-                    r[i+57]=av.lane(57);\n-                    r[i+58]=av.lane(58);\n-                    r[i+59]=av.lane(59);\n-                    r[i+60]=av.lane(60);\n-                    r[i+61]=av.lane(61);\n-                    r[i+62]=av.lane(62);\n-                    r[i+63]=av.lane(63);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n+                    r[i + 32] = av.lane(32);\n+                    r[i + 33] = av.lane(33);\n+                    r[i + 34] = av.lane(34);\n+                    r[i + 35] = av.lane(35);\n+                    r[i + 36] = av.lane(36);\n+                    r[i + 37] = av.lane(37);\n+                    r[i + 38] = av.lane(38);\n+                    r[i + 39] = av.lane(39);\n+                    r[i + 40] = av.lane(40);\n+                    r[i + 41] = av.lane(41);\n+                    r[i + 42] = av.lane(42);\n+                    r[i + 43] = av.lane(43);\n+                    r[i + 44] = av.lane(44);\n+                    r[i + 45] = av.lane(45);\n+                    r[i + 46] = av.lane(46);\n+                    r[i + 47] = av.lane(47);\n+                    r[i + 48] = av.lane(48);\n+                    r[i + 49] = av.lane(49);\n+                    r[i + 50] = av.lane(50);\n+                    r[i + 51] = av.lane(51);\n+                    r[i + 52] = av.lane(52);\n+                    r[i + 53] = av.lane(53);\n+                    r[i + 54] = av.lane(54);\n+                    r[i + 55] = av.lane(55);\n+                    r[i + 56] = av.lane(56);\n+                    r[i + 57] = av.lane(57);\n+                    r[i + 58] = av.lane(58);\n+                    r[i + 59] = av.lane(59);\n+                    r[i + 60] = av.lane(60);\n+                    r[i + 61] = av.lane(61);\n+                    r[i + 62] = av.lane(62);\n+                    r[i + 63] = av.lane(63);\n@@ -1710,1 +1710,1 @@\n-                        r[i+j]=av.lane(j);\n+                        r[i + j] = av.lane(j);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ByteMaxVector.java","additions":144,"deletions":144,"binary":false,"changes":288,"status":"modified"},{"patch":"@@ -64,4 +64,4 @@\n-        as = fill(i -> (byte)(2*i));\n-        bs = fill(i -> (byte)(i+1));\n-        cs = fill(i -> (byte)(i+5));\n-        rs = fill(i -> (byte)0);\n+        as = fill(i -> (byte) (2 * i));\n+        bs = fill(i -> (byte) (i + 1));\n+        cs = fill(i -> (byte) (i + 5));\n+        rs = fill(i -> (byte) 0);\n@@ -72,1 +72,1 @@\n-        ss = fillInt(size, i -> RANDOM.nextInt(Math.max(i,1)));\n+        ss = fillInt(size, i -> RANDOM.nextInt(Math.max(i, 1)));\n@@ -125,1 +125,1 @@\n-        return (byte)(((((byte)a) & 0xFF) << (b & 7)) | ((((byte)a) & 0xFF) >>> (8 - (b & 7))));\n+        return (byte) (((((byte) a) & 0xFF) << (b & 7)) | ((((byte) a) & 0xFF) >>> (8 - (b & 7))));\n@@ -129,1 +129,1 @@\n-        return (byte)(((((byte)a) & 0xFF) >>> (b & 7)) | ((((byte)a) & 0xFF) << (8 - (b & 7))));\n+        return (byte) (((((byte) a) & 0xFF) >>> (b & 7)) | ((((byte) a) & 0xFF) << (8 - (b & 7))));\n@@ -142,2 +142,2 @@\n-        b = (byte)(((b & 0x55) << 1) | ((b & 0xAA) >>> 1));\n-        b = (byte)(((b & 0x33) << 2) | ((b & 0xCC) >>> 2));\n+        b = (byte) (((b & 0x55) << 1) | ((b & 0xAA) >>> 1));\n+        b = (byte) (((b & 0x33) << 2) | ((b & 0xCC) >>> 2));\n@@ -157,1 +157,1 @@\n-                rs[i] = (byte)(a + b);\n+                rs[i] = (byte) (a + b);\n@@ -176,1 +176,1 @@\n-                    rs[i] = (byte)(a + b);\n+                    rs[i] = (byte) (a + b);\n@@ -195,1 +195,1 @@\n-                rs[i] = (byte)(a - b);\n+                rs[i] = (byte) (a - b);\n@@ -214,1 +214,1 @@\n-                    rs[i] = (byte)(a - b);\n+                    rs[i] = (byte) (a - b);\n@@ -233,1 +233,1 @@\n-                rs[i] = (byte)(a * b);\n+                rs[i] = (byte) (a * b);\n@@ -252,1 +252,1 @@\n-                    rs[i] = (byte)(a * b);\n+                    rs[i] = (byte) (a * b);\n@@ -273,1 +273,1 @@\n-                rs[i] = (byte)((a)!=0?a:b);\n+                rs[i] = (byte) ((a) != 0 ? a : b);\n@@ -292,1 +292,1 @@\n-                    rs[i] = (byte)((a)!=0?a:b);\n+                    rs[i] = (byte) ((a) != 0 ? a : b);\n@@ -312,1 +312,1 @@\n-                rs[i] = (byte)(a & b);\n+                rs[i] = (byte) (a & b);\n@@ -333,1 +333,1 @@\n-                    rs[i] = (byte)(a & b);\n+                    rs[i] = (byte) (a & b);\n@@ -354,1 +354,1 @@\n-                rs[i] = (byte)(a & ~b);\n+                rs[i] = (byte) (a & ~b);\n@@ -375,1 +375,1 @@\n-                    rs[i] = (byte)(a & ~b);\n+                    rs[i] = (byte) (a & ~b);\n@@ -396,1 +396,1 @@\n-                rs[i] = (byte)(a | b);\n+                rs[i] = (byte) (a | b);\n@@ -417,1 +417,1 @@\n-                    rs[i] = (byte)(a | b);\n+                    rs[i] = (byte) (a | b);\n@@ -438,1 +438,1 @@\n-                rs[i] = (byte)(a ^ b);\n+                rs[i] = (byte) (a ^ b);\n@@ -459,1 +459,1 @@\n-                    rs[i] = (byte)(a ^ b);\n+                    rs[i] = (byte) (a ^ b);\n@@ -482,1 +482,1 @@\n-                rs[i] = (byte)((a << (b & 0x7)));\n+                rs[i] = (byte) ((a << (b & 0x7)));\n@@ -503,1 +503,1 @@\n-                    rs[i] = (byte)((a << (b & 0x7)));\n+                    rs[i] = (byte) ((a << (b & 0x7)));\n@@ -528,1 +528,1 @@\n-                rs[i] = (byte)((a >> (b & 0x7)));\n+                rs[i] = (byte) ((a >> (b & 0x7)));\n@@ -549,1 +549,1 @@\n-                    rs[i] = (byte)((a >> (b & 0x7)));\n+                    rs[i] = (byte) ((a >> (b & 0x7)));\n@@ -574,1 +574,1 @@\n-                rs[i] = (byte)(((a & 0xFF) >>> (b & 0x7)));\n+                rs[i] = (byte) (((a & 0xFF) >>> (b & 0x7)));\n@@ -595,1 +595,1 @@\n-                    rs[i] = (byte)(((a & 0xFF) >>> (b & 0x7)));\n+                    rs[i] = (byte) (((a & 0xFF) >>> (b & 0x7)));\n@@ -620,1 +620,1 @@\n-                rs[i] = (byte)((a << (b & 7)));\n+                rs[i] = (byte) ((a << (b & 7)));\n@@ -641,1 +641,1 @@\n-                rs[i] = (m ? (byte)((a << (b & 7))) : a);\n+                rs[i] = (m ? (byte) ((a << (b & 7))) : a);\n@@ -664,1 +664,1 @@\n-                rs[i] = (byte)(((a & 0xFF) >>> (b & 7)));\n+                rs[i] = (byte) (((a & 0xFF) >>> (b & 7)));\n@@ -685,1 +685,1 @@\n-                rs[i] = (m ? (byte)(((a & 0xFF) >>> (b & 7))) : a);\n+                rs[i] = (m ? (byte) (((a & 0xFF) >>> (b & 7))) : a);\n@@ -708,1 +708,1 @@\n-                rs[i] = (byte)((a >> (b & 7)));\n+                rs[i] = (byte) ((a >> (b & 7)));\n@@ -729,1 +729,1 @@\n-                rs[i] = (m ? (byte)((a >> (b & 7))) : a);\n+                rs[i] = (m ? (byte) ((a >> (b & 7))) : a);\n@@ -750,1 +750,1 @@\n-                rs[i] = (byte)(ROR_scalar(a,b));\n+                rs[i] = (byte) (ROR_scalar(a, b));\n@@ -771,1 +771,1 @@\n-                    rs[i] = (byte)(ROR_scalar(a,b));\n+                    rs[i] = (byte) (ROR_scalar(a, b));\n@@ -792,1 +792,1 @@\n-                rs[i] = (byte)(ROL_scalar(a,b));\n+                rs[i] = (byte) (ROL_scalar(a, b));\n@@ -813,1 +813,1 @@\n-                    rs[i] = (byte)(ROL_scalar(a,b));\n+                    rs[i] = (byte) (ROL_scalar(a, b));\n@@ -834,1 +834,1 @@\n-                rs[i] = (byte)(ROR_scalar(a,b));\n+                rs[i] = (byte) (ROR_scalar(a, b));\n@@ -855,1 +855,1 @@\n-                rs[i] = (m ? (byte)(ROR_scalar(a,b)) : a);\n+                rs[i] = (m ? (byte) (ROR_scalar(a, b)) : a);\n@@ -874,1 +874,1 @@\n-                rs[i] = (byte)(ROL_scalar(a,b));\n+                rs[i] = (byte) (ROL_scalar(a, b));\n@@ -895,1 +895,1 @@\n-                rs[i] = (m ? (byte)(ROL_scalar(a,b)) : a);\n+                rs[i] = (m ? (byte) (ROL_scalar(a, b)) : a);\n@@ -913,1 +913,1 @@\n-                rs[i] = (byte)(Math.min(a, b));\n+                rs[i] = (byte) (Math.min(a, b));\n@@ -930,1 +930,1 @@\n-                rs[i] = (byte)(Math.max(a, b));\n+                rs[i] = (byte) (Math.max(a, b));\n@@ -1127,1 +1127,1 @@\n-                r &= (bits(a)==0); \/\/ accumulate so JIT can't eliminate the computation\n+                r &= (bits(a) == 0); \/\/ accumulate so JIT can't eliminate the computation\n@@ -1142,1 +1142,1 @@\n-                r &= (bits(a)<0); \/\/ accumulate so JIT can't eliminate the computation\n+                r &= (bits(a) < 0); \/\/ accumulate so JIT can't eliminate the computation\n@@ -1336,1 +1336,1 @@\n-                    byte a = as[i+j];\n+                    byte a = as[i + j];\n@@ -1465,1 +1465,1 @@\n-                as[i] = (byte)0;\n+                as[i] = (byte) 0;\n@@ -1505,1 +1505,1 @@\n-                rs[i] = (byte)((a&~(c))|(b&c));\n+                rs[i] = (byte) ((a &~ (c)) | (b & c));\n@@ -1529,1 +1529,1 @@\n-                    rs[i] = (byte)((a&~(c))|(b&c));\n+                    rs[i] = (byte) ((a &~ (c)) | (b & c));\n@@ -1547,1 +1547,1 @@\n-                rs[i] = (byte)(-((byte)a));\n+                rs[i] = (byte) (-((byte) a));\n@@ -1564,1 +1564,1 @@\n-                rs[i] = (m ? (byte)(-((byte)a)) : a);\n+                rs[i] = (m ? (byte) (-((byte) a)) : a);\n@@ -1579,1 +1579,1 @@\n-                rs[i] = (byte)(Math.abs((byte)a));\n+                rs[i] = (byte) (Math.abs((byte) a));\n@@ -1596,1 +1596,1 @@\n-                rs[i] = (m ? (byte)(Math.abs((byte)a)) : a);\n+                rs[i] = (m ? (byte) (Math.abs((byte) a)) : a);\n@@ -1612,1 +1612,1 @@\n-                rs[i] = (byte)(~((byte)a));\n+                rs[i] = (byte) (~((byte) a));\n@@ -1631,1 +1631,1 @@\n-                rs[i] = (m ? (byte)(~((byte)a)) : a);\n+                rs[i] = (m ? (byte) (~((byte) a)) : a);\n@@ -1648,1 +1648,1 @@\n-                rs[i] = (byte)((a==0?0:-1));\n+                rs[i] = (byte) ((a == 0 ? 0 : -1));\n@@ -1667,1 +1667,1 @@\n-                rs[i] = (m ? (byte)((a==0?0:-1)) : a);\n+                rs[i] = (m ? (byte) ((a == 0 ? 0 : -1)) : a);\n@@ -1688,1 +1688,1 @@\n-                rs[i] = (byte)(Integer.bitCount((int)a & 0xFF));\n+                rs[i] = (byte) (Integer.bitCount((int) a & 0xFF));\n@@ -1707,1 +1707,1 @@\n-                rs[i] = (m ? (byte)(Integer.bitCount((int)a & 0xFF)) : a);\n+                rs[i] = (m ? (byte) (Integer.bitCount((int) a & 0xFF)) : a);\n@@ -1726,1 +1726,1 @@\n-                rs[i] = (byte)(TRAILING_ZEROS_COUNT_scalar(a));\n+                rs[i] = (byte) (TRAILING_ZEROS_COUNT_scalar(a));\n@@ -1745,1 +1745,1 @@\n-                rs[i] = (m ? (byte)(TRAILING_ZEROS_COUNT_scalar(a)) : a);\n+                rs[i] = (m ? (byte) (TRAILING_ZEROS_COUNT_scalar(a)) : a);\n@@ -1762,1 +1762,1 @@\n-                rs[i] = (byte)(LEADING_ZEROS_COUNT_scalar(a));\n+                rs[i] = (byte) (LEADING_ZEROS_COUNT_scalar(a));\n@@ -1781,1 +1781,1 @@\n-                rs[i] = (m ? (byte)(LEADING_ZEROS_COUNT_scalar(a)) : a);\n+                rs[i] = (m ? (byte) (LEADING_ZEROS_COUNT_scalar(a)) : a);\n@@ -1798,1 +1798,1 @@\n-                rs[i] = (byte)(REVERSE_scalar(a));\n+                rs[i] = (byte) (REVERSE_scalar(a));\n@@ -1817,1 +1817,1 @@\n-                rs[i] = (m ? (byte)(REVERSE_scalar(a)) : a);\n+                rs[i] = (m ? (byte) (REVERSE_scalar(a)) : a);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ByteScalar.java","additions":69,"deletions":69,"binary":false,"changes":138,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,4 +78,4 @@\n-        a = fill(i -> (double)(2*i));\n-        b = fill(i -> (double)(i+1));\n-        c = fill(i -> (double)(i+5));\n-        r = fill(i -> (double)0);\n+        a = fill(i -> (double) (2 * i));\n+        b = fill(i -> (double) (i + 1));\n+        c = fill(i -> (double) (i + 5));\n+        r = fill(i -> (double) 0);\n@@ -548,1 +548,1 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (double)(65535+i)).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length() - 1)), (double) (65535 + i)).intoArray(r, i);\n@@ -873,1 +873,1 @@\n-                    r[i]=av.lane(0);\n+                    r[i] = av.lane(0);\n@@ -875,2 +875,2 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n@@ -878,4 +878,4 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n@@ -883,8 +883,8 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n@@ -892,16 +892,16 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n@@ -909,32 +909,32 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n@@ -942,64 +942,64 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n-                    r[i+32]=av.lane(32);\n-                    r[i+33]=av.lane(33);\n-                    r[i+34]=av.lane(34);\n-                    r[i+35]=av.lane(35);\n-                    r[i+36]=av.lane(36);\n-                    r[i+37]=av.lane(37);\n-                    r[i+38]=av.lane(38);\n-                    r[i+39]=av.lane(39);\n-                    r[i+40]=av.lane(40);\n-                    r[i+41]=av.lane(41);\n-                    r[i+42]=av.lane(42);\n-                    r[i+43]=av.lane(43);\n-                    r[i+44]=av.lane(44);\n-                    r[i+45]=av.lane(45);\n-                    r[i+46]=av.lane(46);\n-                    r[i+47]=av.lane(47);\n-                    r[i+48]=av.lane(48);\n-                    r[i+49]=av.lane(49);\n-                    r[i+50]=av.lane(50);\n-                    r[i+51]=av.lane(51);\n-                    r[i+52]=av.lane(52);\n-                    r[i+53]=av.lane(53);\n-                    r[i+54]=av.lane(54);\n-                    r[i+55]=av.lane(55);\n-                    r[i+56]=av.lane(56);\n-                    r[i+57]=av.lane(57);\n-                    r[i+58]=av.lane(58);\n-                    r[i+59]=av.lane(59);\n-                    r[i+60]=av.lane(60);\n-                    r[i+61]=av.lane(61);\n-                    r[i+62]=av.lane(62);\n-                    r[i+63]=av.lane(63);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n+                    r[i + 32] = av.lane(32);\n+                    r[i + 33] = av.lane(33);\n+                    r[i + 34] = av.lane(34);\n+                    r[i + 35] = av.lane(35);\n+                    r[i + 36] = av.lane(36);\n+                    r[i + 37] = av.lane(37);\n+                    r[i + 38] = av.lane(38);\n+                    r[i + 39] = av.lane(39);\n+                    r[i + 40] = av.lane(40);\n+                    r[i + 41] = av.lane(41);\n+                    r[i + 42] = av.lane(42);\n+                    r[i + 43] = av.lane(43);\n+                    r[i + 44] = av.lane(44);\n+                    r[i + 45] = av.lane(45);\n+                    r[i + 46] = av.lane(46);\n+                    r[i + 47] = av.lane(47);\n+                    r[i + 48] = av.lane(48);\n+                    r[i + 49] = av.lane(49);\n+                    r[i + 50] = av.lane(50);\n+                    r[i + 51] = av.lane(51);\n+                    r[i + 52] = av.lane(52);\n+                    r[i + 53] = av.lane(53);\n+                    r[i + 54] = av.lane(54);\n+                    r[i + 55] = av.lane(55);\n+                    r[i + 56] = av.lane(56);\n+                    r[i + 57] = av.lane(57);\n+                    r[i + 58] = av.lane(58);\n+                    r[i + 59] = av.lane(59);\n+                    r[i + 60] = av.lane(60);\n+                    r[i + 61] = av.lane(61);\n+                    r[i + 62] = av.lane(62);\n+                    r[i + 63] = av.lane(63);\n@@ -1008,1 +1008,1 @@\n-                        r[i+j]=av.lane(j);\n+                        r[i + j] = av.lane(j);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double128Vector.java","additions":134,"deletions":134,"binary":false,"changes":268,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,4 +78,4 @@\n-        a = fill(i -> (double)(2*i));\n-        b = fill(i -> (double)(i+1));\n-        c = fill(i -> (double)(i+5));\n-        r = fill(i -> (double)0);\n+        a = fill(i -> (double) (2 * i));\n+        b = fill(i -> (double) (i + 1));\n+        c = fill(i -> (double) (i + 5));\n+        r = fill(i -> (double) 0);\n@@ -548,1 +548,1 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (double)(65535+i)).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length() - 1)), (double) (65535 + i)).intoArray(r, i);\n@@ -873,1 +873,1 @@\n-                    r[i]=av.lane(0);\n+                    r[i] = av.lane(0);\n@@ -875,2 +875,2 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n@@ -878,4 +878,4 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n@@ -883,8 +883,8 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n@@ -892,16 +892,16 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n@@ -909,32 +909,32 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n@@ -942,64 +942,64 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n-                    r[i+32]=av.lane(32);\n-                    r[i+33]=av.lane(33);\n-                    r[i+34]=av.lane(34);\n-                    r[i+35]=av.lane(35);\n-                    r[i+36]=av.lane(36);\n-                    r[i+37]=av.lane(37);\n-                    r[i+38]=av.lane(38);\n-                    r[i+39]=av.lane(39);\n-                    r[i+40]=av.lane(40);\n-                    r[i+41]=av.lane(41);\n-                    r[i+42]=av.lane(42);\n-                    r[i+43]=av.lane(43);\n-                    r[i+44]=av.lane(44);\n-                    r[i+45]=av.lane(45);\n-                    r[i+46]=av.lane(46);\n-                    r[i+47]=av.lane(47);\n-                    r[i+48]=av.lane(48);\n-                    r[i+49]=av.lane(49);\n-                    r[i+50]=av.lane(50);\n-                    r[i+51]=av.lane(51);\n-                    r[i+52]=av.lane(52);\n-                    r[i+53]=av.lane(53);\n-                    r[i+54]=av.lane(54);\n-                    r[i+55]=av.lane(55);\n-                    r[i+56]=av.lane(56);\n-                    r[i+57]=av.lane(57);\n-                    r[i+58]=av.lane(58);\n-                    r[i+59]=av.lane(59);\n-                    r[i+60]=av.lane(60);\n-                    r[i+61]=av.lane(61);\n-                    r[i+62]=av.lane(62);\n-                    r[i+63]=av.lane(63);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n+                    r[i + 32] = av.lane(32);\n+                    r[i + 33] = av.lane(33);\n+                    r[i + 34] = av.lane(34);\n+                    r[i + 35] = av.lane(35);\n+                    r[i + 36] = av.lane(36);\n+                    r[i + 37] = av.lane(37);\n+                    r[i + 38] = av.lane(38);\n+                    r[i + 39] = av.lane(39);\n+                    r[i + 40] = av.lane(40);\n+                    r[i + 41] = av.lane(41);\n+                    r[i + 42] = av.lane(42);\n+                    r[i + 43] = av.lane(43);\n+                    r[i + 44] = av.lane(44);\n+                    r[i + 45] = av.lane(45);\n+                    r[i + 46] = av.lane(46);\n+                    r[i + 47] = av.lane(47);\n+                    r[i + 48] = av.lane(48);\n+                    r[i + 49] = av.lane(49);\n+                    r[i + 50] = av.lane(50);\n+                    r[i + 51] = av.lane(51);\n+                    r[i + 52] = av.lane(52);\n+                    r[i + 53] = av.lane(53);\n+                    r[i + 54] = av.lane(54);\n+                    r[i + 55] = av.lane(55);\n+                    r[i + 56] = av.lane(56);\n+                    r[i + 57] = av.lane(57);\n+                    r[i + 58] = av.lane(58);\n+                    r[i + 59] = av.lane(59);\n+                    r[i + 60] = av.lane(60);\n+                    r[i + 61] = av.lane(61);\n+                    r[i + 62] = av.lane(62);\n+                    r[i + 63] = av.lane(63);\n@@ -1008,1 +1008,1 @@\n-                        r[i+j]=av.lane(j);\n+                        r[i + j] = av.lane(j);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double256Vector.java","additions":134,"deletions":134,"binary":false,"changes":268,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,4 +78,4 @@\n-        a = fill(i -> (double)(2*i));\n-        b = fill(i -> (double)(i+1));\n-        c = fill(i -> (double)(i+5));\n-        r = fill(i -> (double)0);\n+        a = fill(i -> (double) (2 * i));\n+        b = fill(i -> (double) (i + 1));\n+        c = fill(i -> (double) (i + 5));\n+        r = fill(i -> (double) 0);\n@@ -548,1 +548,1 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (double)(65535+i)).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length() - 1)), (double) (65535 + i)).intoArray(r, i);\n@@ -873,1 +873,1 @@\n-                    r[i]=av.lane(0);\n+                    r[i] = av.lane(0);\n@@ -875,2 +875,2 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n@@ -878,4 +878,4 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n@@ -883,8 +883,8 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n@@ -892,16 +892,16 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n@@ -909,32 +909,32 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n@@ -942,64 +942,64 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n-                    r[i+32]=av.lane(32);\n-                    r[i+33]=av.lane(33);\n-                    r[i+34]=av.lane(34);\n-                    r[i+35]=av.lane(35);\n-                    r[i+36]=av.lane(36);\n-                    r[i+37]=av.lane(37);\n-                    r[i+38]=av.lane(38);\n-                    r[i+39]=av.lane(39);\n-                    r[i+40]=av.lane(40);\n-                    r[i+41]=av.lane(41);\n-                    r[i+42]=av.lane(42);\n-                    r[i+43]=av.lane(43);\n-                    r[i+44]=av.lane(44);\n-                    r[i+45]=av.lane(45);\n-                    r[i+46]=av.lane(46);\n-                    r[i+47]=av.lane(47);\n-                    r[i+48]=av.lane(48);\n-                    r[i+49]=av.lane(49);\n-                    r[i+50]=av.lane(50);\n-                    r[i+51]=av.lane(51);\n-                    r[i+52]=av.lane(52);\n-                    r[i+53]=av.lane(53);\n-                    r[i+54]=av.lane(54);\n-                    r[i+55]=av.lane(55);\n-                    r[i+56]=av.lane(56);\n-                    r[i+57]=av.lane(57);\n-                    r[i+58]=av.lane(58);\n-                    r[i+59]=av.lane(59);\n-                    r[i+60]=av.lane(60);\n-                    r[i+61]=av.lane(61);\n-                    r[i+62]=av.lane(62);\n-                    r[i+63]=av.lane(63);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n+                    r[i + 32] = av.lane(32);\n+                    r[i + 33] = av.lane(33);\n+                    r[i + 34] = av.lane(34);\n+                    r[i + 35] = av.lane(35);\n+                    r[i + 36] = av.lane(36);\n+                    r[i + 37] = av.lane(37);\n+                    r[i + 38] = av.lane(38);\n+                    r[i + 39] = av.lane(39);\n+                    r[i + 40] = av.lane(40);\n+                    r[i + 41] = av.lane(41);\n+                    r[i + 42] = av.lane(42);\n+                    r[i + 43] = av.lane(43);\n+                    r[i + 44] = av.lane(44);\n+                    r[i + 45] = av.lane(45);\n+                    r[i + 46] = av.lane(46);\n+                    r[i + 47] = av.lane(47);\n+                    r[i + 48] = av.lane(48);\n+                    r[i + 49] = av.lane(49);\n+                    r[i + 50] = av.lane(50);\n+                    r[i + 51] = av.lane(51);\n+                    r[i + 52] = av.lane(52);\n+                    r[i + 53] = av.lane(53);\n+                    r[i + 54] = av.lane(54);\n+                    r[i + 55] = av.lane(55);\n+                    r[i + 56] = av.lane(56);\n+                    r[i + 57] = av.lane(57);\n+                    r[i + 58] = av.lane(58);\n+                    r[i + 59] = av.lane(59);\n+                    r[i + 60] = av.lane(60);\n+                    r[i + 61] = av.lane(61);\n+                    r[i + 62] = av.lane(62);\n+                    r[i + 63] = av.lane(63);\n@@ -1008,1 +1008,1 @@\n-                        r[i+j]=av.lane(j);\n+                        r[i + j] = av.lane(j);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double512Vector.java","additions":134,"deletions":134,"binary":false,"changes":268,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,4 +78,4 @@\n-        a = fill(i -> (double)(2*i));\n-        b = fill(i -> (double)(i+1));\n-        c = fill(i -> (double)(i+5));\n-        r = fill(i -> (double)0);\n+        a = fill(i -> (double) (2 * i));\n+        b = fill(i -> (double) (i + 1));\n+        c = fill(i -> (double) (i + 5));\n+        r = fill(i -> (double) 0);\n@@ -548,1 +548,1 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (double)(65535+i)).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length() - 1)), (double) (65535 + i)).intoArray(r, i);\n@@ -873,1 +873,1 @@\n-                    r[i]=av.lane(0);\n+                    r[i] = av.lane(0);\n@@ -875,2 +875,2 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n@@ -878,4 +878,4 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n@@ -883,8 +883,8 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n@@ -892,16 +892,16 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n@@ -909,32 +909,32 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n@@ -942,64 +942,64 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n-                    r[i+32]=av.lane(32);\n-                    r[i+33]=av.lane(33);\n-                    r[i+34]=av.lane(34);\n-                    r[i+35]=av.lane(35);\n-                    r[i+36]=av.lane(36);\n-                    r[i+37]=av.lane(37);\n-                    r[i+38]=av.lane(38);\n-                    r[i+39]=av.lane(39);\n-                    r[i+40]=av.lane(40);\n-                    r[i+41]=av.lane(41);\n-                    r[i+42]=av.lane(42);\n-                    r[i+43]=av.lane(43);\n-                    r[i+44]=av.lane(44);\n-                    r[i+45]=av.lane(45);\n-                    r[i+46]=av.lane(46);\n-                    r[i+47]=av.lane(47);\n-                    r[i+48]=av.lane(48);\n-                    r[i+49]=av.lane(49);\n-                    r[i+50]=av.lane(50);\n-                    r[i+51]=av.lane(51);\n-                    r[i+52]=av.lane(52);\n-                    r[i+53]=av.lane(53);\n-                    r[i+54]=av.lane(54);\n-                    r[i+55]=av.lane(55);\n-                    r[i+56]=av.lane(56);\n-                    r[i+57]=av.lane(57);\n-                    r[i+58]=av.lane(58);\n-                    r[i+59]=av.lane(59);\n-                    r[i+60]=av.lane(60);\n-                    r[i+61]=av.lane(61);\n-                    r[i+62]=av.lane(62);\n-                    r[i+63]=av.lane(63);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n+                    r[i + 32] = av.lane(32);\n+                    r[i + 33] = av.lane(33);\n+                    r[i + 34] = av.lane(34);\n+                    r[i + 35] = av.lane(35);\n+                    r[i + 36] = av.lane(36);\n+                    r[i + 37] = av.lane(37);\n+                    r[i + 38] = av.lane(38);\n+                    r[i + 39] = av.lane(39);\n+                    r[i + 40] = av.lane(40);\n+                    r[i + 41] = av.lane(41);\n+                    r[i + 42] = av.lane(42);\n+                    r[i + 43] = av.lane(43);\n+                    r[i + 44] = av.lane(44);\n+                    r[i + 45] = av.lane(45);\n+                    r[i + 46] = av.lane(46);\n+                    r[i + 47] = av.lane(47);\n+                    r[i + 48] = av.lane(48);\n+                    r[i + 49] = av.lane(49);\n+                    r[i + 50] = av.lane(50);\n+                    r[i + 51] = av.lane(51);\n+                    r[i + 52] = av.lane(52);\n+                    r[i + 53] = av.lane(53);\n+                    r[i + 54] = av.lane(54);\n+                    r[i + 55] = av.lane(55);\n+                    r[i + 56] = av.lane(56);\n+                    r[i + 57] = av.lane(57);\n+                    r[i + 58] = av.lane(58);\n+                    r[i + 59] = av.lane(59);\n+                    r[i + 60] = av.lane(60);\n+                    r[i + 61] = av.lane(61);\n+                    r[i + 62] = av.lane(62);\n+                    r[i + 63] = av.lane(63);\n@@ -1008,1 +1008,1 @@\n-                        r[i+j]=av.lane(j);\n+                        r[i + j] = av.lane(j);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Double64Vector.java","additions":134,"deletions":134,"binary":false,"changes":268,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,4 +78,4 @@\n-        a = fill(i -> (double)(2*i));\n-        b = fill(i -> (double)(i+1));\n-        c = fill(i -> (double)(i+5));\n-        r = fill(i -> (double)0);\n+        a = fill(i -> (double) (2 * i));\n+        b = fill(i -> (double) (i + 1));\n+        c = fill(i -> (double) (i + 5));\n+        r = fill(i -> (double) 0);\n@@ -548,1 +548,1 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (double)(65535+i)).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length() - 1)), (double) (65535 + i)).intoArray(r, i);\n@@ -873,1 +873,1 @@\n-                    r[i]=av.lane(0);\n+                    r[i] = av.lane(0);\n@@ -875,2 +875,2 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n@@ -878,4 +878,4 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n@@ -883,8 +883,8 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n@@ -892,16 +892,16 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n@@ -909,32 +909,32 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n@@ -942,64 +942,64 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n-                    r[i+32]=av.lane(32);\n-                    r[i+33]=av.lane(33);\n-                    r[i+34]=av.lane(34);\n-                    r[i+35]=av.lane(35);\n-                    r[i+36]=av.lane(36);\n-                    r[i+37]=av.lane(37);\n-                    r[i+38]=av.lane(38);\n-                    r[i+39]=av.lane(39);\n-                    r[i+40]=av.lane(40);\n-                    r[i+41]=av.lane(41);\n-                    r[i+42]=av.lane(42);\n-                    r[i+43]=av.lane(43);\n-                    r[i+44]=av.lane(44);\n-                    r[i+45]=av.lane(45);\n-                    r[i+46]=av.lane(46);\n-                    r[i+47]=av.lane(47);\n-                    r[i+48]=av.lane(48);\n-                    r[i+49]=av.lane(49);\n-                    r[i+50]=av.lane(50);\n-                    r[i+51]=av.lane(51);\n-                    r[i+52]=av.lane(52);\n-                    r[i+53]=av.lane(53);\n-                    r[i+54]=av.lane(54);\n-                    r[i+55]=av.lane(55);\n-                    r[i+56]=av.lane(56);\n-                    r[i+57]=av.lane(57);\n-                    r[i+58]=av.lane(58);\n-                    r[i+59]=av.lane(59);\n-                    r[i+60]=av.lane(60);\n-                    r[i+61]=av.lane(61);\n-                    r[i+62]=av.lane(62);\n-                    r[i+63]=av.lane(63);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n+                    r[i + 32] = av.lane(32);\n+                    r[i + 33] = av.lane(33);\n+                    r[i + 34] = av.lane(34);\n+                    r[i + 35] = av.lane(35);\n+                    r[i + 36] = av.lane(36);\n+                    r[i + 37] = av.lane(37);\n+                    r[i + 38] = av.lane(38);\n+                    r[i + 39] = av.lane(39);\n+                    r[i + 40] = av.lane(40);\n+                    r[i + 41] = av.lane(41);\n+                    r[i + 42] = av.lane(42);\n+                    r[i + 43] = av.lane(43);\n+                    r[i + 44] = av.lane(44);\n+                    r[i + 45] = av.lane(45);\n+                    r[i + 46] = av.lane(46);\n+                    r[i + 47] = av.lane(47);\n+                    r[i + 48] = av.lane(48);\n+                    r[i + 49] = av.lane(49);\n+                    r[i + 50] = av.lane(50);\n+                    r[i + 51] = av.lane(51);\n+                    r[i + 52] = av.lane(52);\n+                    r[i + 53] = av.lane(53);\n+                    r[i + 54] = av.lane(54);\n+                    r[i + 55] = av.lane(55);\n+                    r[i + 56] = av.lane(56);\n+                    r[i + 57] = av.lane(57);\n+                    r[i + 58] = av.lane(58);\n+                    r[i + 59] = av.lane(59);\n+                    r[i + 60] = av.lane(60);\n+                    r[i + 61] = av.lane(61);\n+                    r[i + 62] = av.lane(62);\n+                    r[i + 63] = av.lane(63);\n@@ -1008,1 +1008,1 @@\n-                        r[i+j]=av.lane(j);\n+                        r[i + j] = av.lane(j);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/DoubleMaxVector.java","additions":134,"deletions":134,"binary":false,"changes":268,"status":"modified"},{"patch":"@@ -64,4 +64,4 @@\n-        as = fill(i -> (double)(2*i));\n-        bs = fill(i -> (double)(i+1));\n-        cs = fill(i -> (double)(i+5));\n-        rs = fill(i -> (double)0);\n+        as = fill(i -> (double) (2 * i));\n+        bs = fill(i -> (double) (i + 1));\n+        cs = fill(i -> (double) (i + 5));\n+        rs = fill(i -> (double) 0);\n@@ -72,1 +72,1 @@\n-        ss = fillInt(size, i -> RANDOM.nextInt(Math.max(i,1)));\n+        ss = fillInt(size, i -> RANDOM.nextInt(Math.max(i, 1)));\n@@ -120,1 +120,1 @@\n-                rs[i] = (double)(a + b);\n+                rs[i] = (double) (a + b);\n@@ -139,1 +139,1 @@\n-                    rs[i] = (double)(a + b);\n+                    rs[i] = (double) (a + b);\n@@ -158,1 +158,1 @@\n-                rs[i] = (double)(a - b);\n+                rs[i] = (double) (a - b);\n@@ -177,1 +177,1 @@\n-                    rs[i] = (double)(a - b);\n+                    rs[i] = (double) (a - b);\n@@ -196,1 +196,1 @@\n-                rs[i] = (double)(a * b);\n+                rs[i] = (double) (a * b);\n@@ -215,1 +215,1 @@\n-                    rs[i] = (double)(a * b);\n+                    rs[i] = (double) (a * b);\n@@ -235,1 +235,1 @@\n-                rs[i] = (double)(a \/ b);\n+                rs[i] = (double) (a \/ b);\n@@ -256,1 +256,1 @@\n-                    rs[i] = (double)(a \/ b);\n+                    rs[i] = (double) (a \/ b);\n@@ -276,1 +276,1 @@\n-                rs[i] = (double)(Double.doubleToLongBits(a)!=0?a:b);\n+                rs[i] = (double) (Double.doubleToLongBits(a) != 0 ? a : b);\n@@ -295,1 +295,1 @@\n-                    rs[i] = (double)(Double.doubleToLongBits(a)!=0?a:b);\n+                    rs[i] = (double) (Double.doubleToLongBits(a) != 0 ? a : b);\n@@ -366,1 +366,1 @@\n-                rs[i] = (double)(Math.min(a, b));\n+                rs[i] = (double) (Math.min(a, b));\n@@ -383,1 +383,1 @@\n-                rs[i] = (double)(Math.max(a, b));\n+                rs[i] = (double) (Math.max(a, b));\n@@ -462,1 +462,1 @@\n-                r &= (bits(a)==0); \/\/ accumulate so JIT can't eliminate the computation\n+                r &= (bits(a) == 0); \/\/ accumulate so JIT can't eliminate the computation\n@@ -477,1 +477,1 @@\n-                r &= (bits(a)<0); \/\/ accumulate so JIT can't eliminate the computation\n+                r &= (bits(a) < 0); \/\/ accumulate so JIT can't eliminate the computation\n@@ -655,1 +655,1 @@\n-                    double a = as[i+j];\n+                    double a = as[i + j];\n@@ -784,1 +784,1 @@\n-                as[i] = (double)0;\n+                as[i] = (double) 0;\n@@ -800,1 +800,1 @@\n-                rs[i] = (double)(Math.sin((double)a));\n+                rs[i] = (double) (Math.sin((double) a));\n@@ -817,1 +817,1 @@\n-                rs[i] = (double)(Math.exp((double)a));\n+                rs[i] = (double) (Math.exp((double) a));\n@@ -834,1 +834,1 @@\n-                rs[i] = (double)(Math.log1p((double)a));\n+                rs[i] = (double) (Math.log1p((double) a));\n@@ -851,1 +851,1 @@\n-                rs[i] = (double)(Math.log((double)a));\n+                rs[i] = (double) (Math.log((double) a));\n@@ -868,1 +868,1 @@\n-                rs[i] = (double)(Math.log10((double)a));\n+                rs[i] = (double) (Math.log10((double) a));\n@@ -885,1 +885,1 @@\n-                rs[i] = (double)(Math.expm1((double)a));\n+                rs[i] = (double) (Math.expm1((double) a));\n@@ -902,1 +902,1 @@\n-                rs[i] = (double)(Math.cos((double)a));\n+                rs[i] = (double) (Math.cos((double) a));\n@@ -919,1 +919,1 @@\n-                rs[i] = (double)(Math.tan((double)a));\n+                rs[i] = (double) (Math.tan((double) a));\n@@ -936,1 +936,1 @@\n-                rs[i] = (double)(Math.sinh((double)a));\n+                rs[i] = (double) (Math.sinh((double) a));\n@@ -953,1 +953,1 @@\n-                rs[i] = (double)(Math.cosh((double)a));\n+                rs[i] = (double) (Math.cosh((double) a));\n@@ -970,1 +970,1 @@\n-                rs[i] = (double)(Math.tanh((double)a));\n+                rs[i] = (double) (Math.tanh((double) a));\n@@ -987,1 +987,1 @@\n-                rs[i] = (double)(Math.asin((double)a));\n+                rs[i] = (double) (Math.asin((double) a));\n@@ -1004,1 +1004,1 @@\n-                rs[i] = (double)(Math.acos((double)a));\n+                rs[i] = (double) (Math.acos((double) a));\n@@ -1021,1 +1021,1 @@\n-                rs[i] = (double)(Math.atan((double)a));\n+                rs[i] = (double) (Math.atan((double) a));\n@@ -1038,1 +1038,1 @@\n-                rs[i] = (double)(Math.cbrt((double)a));\n+                rs[i] = (double) (Math.cbrt((double) a));\n@@ -1057,1 +1057,1 @@\n-                rs[i] = (double)(Math.hypot((double)a, (double)b));\n+                rs[i] = (double) (Math.hypot((double) a, (double) b));\n@@ -1076,1 +1076,1 @@\n-                rs[i] = (double)(Math.pow((double)a, (double)b));\n+                rs[i] = (double) (Math.pow((double) a, (double) b));\n@@ -1095,1 +1095,1 @@\n-                rs[i] = (double)(Math.atan2((double)a, (double)b));\n+                rs[i] = (double) (Math.atan2((double) a, (double) b));\n@@ -1116,1 +1116,1 @@\n-                rs[i] = (double)(Math.fma(a, b, c));\n+                rs[i] = (double) (Math.fma(a, b, c));\n@@ -1140,1 +1140,1 @@\n-                    rs[i] = (double)(Math.fma(a, b, c));\n+                    rs[i] = (double) (Math.fma(a, b, c));\n@@ -1160,1 +1160,1 @@\n-                rs[i] = (double)(-((double)a));\n+                rs[i] = (double) (-((double) a));\n@@ -1177,1 +1177,1 @@\n-                rs[i] = (m ? (double)(-((double)a)) : a);\n+                rs[i] = (m ? (double) (-((double) a)) : a);\n@@ -1192,1 +1192,1 @@\n-                rs[i] = (double)(Math.abs((double)a));\n+                rs[i] = (double) (Math.abs((double) a));\n@@ -1209,1 +1209,1 @@\n-                rs[i] = (m ? (double)(Math.abs((double)a)) : a);\n+                rs[i] = (m ? (double) (Math.abs((double) a)) : a);\n@@ -1229,1 +1229,1 @@\n-                rs[i] = (double)(Math.sqrt((double)a));\n+                rs[i] = (double) (Math.sqrt((double) a));\n@@ -1248,1 +1248,1 @@\n-                rs[i] = (m ? (double)(Math.sqrt((double)a)) : a);\n+                rs[i] = (m ? (double) (Math.sqrt((double) a)) : a);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/DoubleScalar.java","additions":47,"deletions":47,"binary":false,"changes":94,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,4 +78,4 @@\n-        a = fill(i -> (float)(2*i));\n-        b = fill(i -> (float)(i+1));\n-        c = fill(i -> (float)(i+5));\n-        r = fill(i -> (float)0);\n+        a = fill(i -> (float) (2 * i));\n+        b = fill(i -> (float) (i + 1));\n+        c = fill(i -> (float) (i + 5));\n+        r = fill(i -> (float) 0);\n@@ -548,1 +548,1 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (float)(65535+i)).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length() - 1)), (float) (65535 + i)).intoArray(r, i);\n@@ -873,1 +873,1 @@\n-                    r[i]=av.lane(0);\n+                    r[i] = av.lane(0);\n@@ -875,2 +875,2 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n@@ -878,4 +878,4 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n@@ -883,8 +883,8 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n@@ -892,16 +892,16 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n@@ -909,32 +909,32 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n@@ -942,64 +942,64 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n-                    r[i+32]=av.lane(32);\n-                    r[i+33]=av.lane(33);\n-                    r[i+34]=av.lane(34);\n-                    r[i+35]=av.lane(35);\n-                    r[i+36]=av.lane(36);\n-                    r[i+37]=av.lane(37);\n-                    r[i+38]=av.lane(38);\n-                    r[i+39]=av.lane(39);\n-                    r[i+40]=av.lane(40);\n-                    r[i+41]=av.lane(41);\n-                    r[i+42]=av.lane(42);\n-                    r[i+43]=av.lane(43);\n-                    r[i+44]=av.lane(44);\n-                    r[i+45]=av.lane(45);\n-                    r[i+46]=av.lane(46);\n-                    r[i+47]=av.lane(47);\n-                    r[i+48]=av.lane(48);\n-                    r[i+49]=av.lane(49);\n-                    r[i+50]=av.lane(50);\n-                    r[i+51]=av.lane(51);\n-                    r[i+52]=av.lane(52);\n-                    r[i+53]=av.lane(53);\n-                    r[i+54]=av.lane(54);\n-                    r[i+55]=av.lane(55);\n-                    r[i+56]=av.lane(56);\n-                    r[i+57]=av.lane(57);\n-                    r[i+58]=av.lane(58);\n-                    r[i+59]=av.lane(59);\n-                    r[i+60]=av.lane(60);\n-                    r[i+61]=av.lane(61);\n-                    r[i+62]=av.lane(62);\n-                    r[i+63]=av.lane(63);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n+                    r[i + 32] = av.lane(32);\n+                    r[i + 33] = av.lane(33);\n+                    r[i + 34] = av.lane(34);\n+                    r[i + 35] = av.lane(35);\n+                    r[i + 36] = av.lane(36);\n+                    r[i + 37] = av.lane(37);\n+                    r[i + 38] = av.lane(38);\n+                    r[i + 39] = av.lane(39);\n+                    r[i + 40] = av.lane(40);\n+                    r[i + 41] = av.lane(41);\n+                    r[i + 42] = av.lane(42);\n+                    r[i + 43] = av.lane(43);\n+                    r[i + 44] = av.lane(44);\n+                    r[i + 45] = av.lane(45);\n+                    r[i + 46] = av.lane(46);\n+                    r[i + 47] = av.lane(47);\n+                    r[i + 48] = av.lane(48);\n+                    r[i + 49] = av.lane(49);\n+                    r[i + 50] = av.lane(50);\n+                    r[i + 51] = av.lane(51);\n+                    r[i + 52] = av.lane(52);\n+                    r[i + 53] = av.lane(53);\n+                    r[i + 54] = av.lane(54);\n+                    r[i + 55] = av.lane(55);\n+                    r[i + 56] = av.lane(56);\n+                    r[i + 57] = av.lane(57);\n+                    r[i + 58] = av.lane(58);\n+                    r[i + 59] = av.lane(59);\n+                    r[i + 60] = av.lane(60);\n+                    r[i + 61] = av.lane(61);\n+                    r[i + 62] = av.lane(62);\n+                    r[i + 63] = av.lane(63);\n@@ -1008,1 +1008,1 @@\n-                        r[i+j]=av.lane(j);\n+                        r[i + j] = av.lane(j);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float128Vector.java","additions":134,"deletions":134,"binary":false,"changes":268,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,4 +78,4 @@\n-        a = fill(i -> (float)(2*i));\n-        b = fill(i -> (float)(i+1));\n-        c = fill(i -> (float)(i+5));\n-        r = fill(i -> (float)0);\n+        a = fill(i -> (float) (2 * i));\n+        b = fill(i -> (float) (i + 1));\n+        c = fill(i -> (float) (i + 5));\n+        r = fill(i -> (float) 0);\n@@ -548,1 +548,1 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (float)(65535+i)).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length() - 1)), (float) (65535 + i)).intoArray(r, i);\n@@ -873,1 +873,1 @@\n-                    r[i]=av.lane(0);\n+                    r[i] = av.lane(0);\n@@ -875,2 +875,2 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n@@ -878,4 +878,4 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n@@ -883,8 +883,8 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n@@ -892,16 +892,16 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n@@ -909,32 +909,32 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n@@ -942,64 +942,64 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n-                    r[i+32]=av.lane(32);\n-                    r[i+33]=av.lane(33);\n-                    r[i+34]=av.lane(34);\n-                    r[i+35]=av.lane(35);\n-                    r[i+36]=av.lane(36);\n-                    r[i+37]=av.lane(37);\n-                    r[i+38]=av.lane(38);\n-                    r[i+39]=av.lane(39);\n-                    r[i+40]=av.lane(40);\n-                    r[i+41]=av.lane(41);\n-                    r[i+42]=av.lane(42);\n-                    r[i+43]=av.lane(43);\n-                    r[i+44]=av.lane(44);\n-                    r[i+45]=av.lane(45);\n-                    r[i+46]=av.lane(46);\n-                    r[i+47]=av.lane(47);\n-                    r[i+48]=av.lane(48);\n-                    r[i+49]=av.lane(49);\n-                    r[i+50]=av.lane(50);\n-                    r[i+51]=av.lane(51);\n-                    r[i+52]=av.lane(52);\n-                    r[i+53]=av.lane(53);\n-                    r[i+54]=av.lane(54);\n-                    r[i+55]=av.lane(55);\n-                    r[i+56]=av.lane(56);\n-                    r[i+57]=av.lane(57);\n-                    r[i+58]=av.lane(58);\n-                    r[i+59]=av.lane(59);\n-                    r[i+60]=av.lane(60);\n-                    r[i+61]=av.lane(61);\n-                    r[i+62]=av.lane(62);\n-                    r[i+63]=av.lane(63);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n+                    r[i + 32] = av.lane(32);\n+                    r[i + 33] = av.lane(33);\n+                    r[i + 34] = av.lane(34);\n+                    r[i + 35] = av.lane(35);\n+                    r[i + 36] = av.lane(36);\n+                    r[i + 37] = av.lane(37);\n+                    r[i + 38] = av.lane(38);\n+                    r[i + 39] = av.lane(39);\n+                    r[i + 40] = av.lane(40);\n+                    r[i + 41] = av.lane(41);\n+                    r[i + 42] = av.lane(42);\n+                    r[i + 43] = av.lane(43);\n+                    r[i + 44] = av.lane(44);\n+                    r[i + 45] = av.lane(45);\n+                    r[i + 46] = av.lane(46);\n+                    r[i + 47] = av.lane(47);\n+                    r[i + 48] = av.lane(48);\n+                    r[i + 49] = av.lane(49);\n+                    r[i + 50] = av.lane(50);\n+                    r[i + 51] = av.lane(51);\n+                    r[i + 52] = av.lane(52);\n+                    r[i + 53] = av.lane(53);\n+                    r[i + 54] = av.lane(54);\n+                    r[i + 55] = av.lane(55);\n+                    r[i + 56] = av.lane(56);\n+                    r[i + 57] = av.lane(57);\n+                    r[i + 58] = av.lane(58);\n+                    r[i + 59] = av.lane(59);\n+                    r[i + 60] = av.lane(60);\n+                    r[i + 61] = av.lane(61);\n+                    r[i + 62] = av.lane(62);\n+                    r[i + 63] = av.lane(63);\n@@ -1008,1 +1008,1 @@\n-                        r[i+j]=av.lane(j);\n+                        r[i + j] = av.lane(j);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float256Vector.java","additions":134,"deletions":134,"binary":false,"changes":268,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,4 +78,4 @@\n-        a = fill(i -> (float)(2*i));\n-        b = fill(i -> (float)(i+1));\n-        c = fill(i -> (float)(i+5));\n-        r = fill(i -> (float)0);\n+        a = fill(i -> (float) (2 * i));\n+        b = fill(i -> (float) (i + 1));\n+        c = fill(i -> (float) (i + 5));\n+        r = fill(i -> (float) 0);\n@@ -548,1 +548,1 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (float)(65535+i)).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length() - 1)), (float) (65535 + i)).intoArray(r, i);\n@@ -873,1 +873,1 @@\n-                    r[i]=av.lane(0);\n+                    r[i] = av.lane(0);\n@@ -875,2 +875,2 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n@@ -878,4 +878,4 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n@@ -883,8 +883,8 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n@@ -892,16 +892,16 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n@@ -909,32 +909,32 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n@@ -942,64 +942,64 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n-                    r[i+32]=av.lane(32);\n-                    r[i+33]=av.lane(33);\n-                    r[i+34]=av.lane(34);\n-                    r[i+35]=av.lane(35);\n-                    r[i+36]=av.lane(36);\n-                    r[i+37]=av.lane(37);\n-                    r[i+38]=av.lane(38);\n-                    r[i+39]=av.lane(39);\n-                    r[i+40]=av.lane(40);\n-                    r[i+41]=av.lane(41);\n-                    r[i+42]=av.lane(42);\n-                    r[i+43]=av.lane(43);\n-                    r[i+44]=av.lane(44);\n-                    r[i+45]=av.lane(45);\n-                    r[i+46]=av.lane(46);\n-                    r[i+47]=av.lane(47);\n-                    r[i+48]=av.lane(48);\n-                    r[i+49]=av.lane(49);\n-                    r[i+50]=av.lane(50);\n-                    r[i+51]=av.lane(51);\n-                    r[i+52]=av.lane(52);\n-                    r[i+53]=av.lane(53);\n-                    r[i+54]=av.lane(54);\n-                    r[i+55]=av.lane(55);\n-                    r[i+56]=av.lane(56);\n-                    r[i+57]=av.lane(57);\n-                    r[i+58]=av.lane(58);\n-                    r[i+59]=av.lane(59);\n-                    r[i+60]=av.lane(60);\n-                    r[i+61]=av.lane(61);\n-                    r[i+62]=av.lane(62);\n-                    r[i+63]=av.lane(63);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n+                    r[i + 32] = av.lane(32);\n+                    r[i + 33] = av.lane(33);\n+                    r[i + 34] = av.lane(34);\n+                    r[i + 35] = av.lane(35);\n+                    r[i + 36] = av.lane(36);\n+                    r[i + 37] = av.lane(37);\n+                    r[i + 38] = av.lane(38);\n+                    r[i + 39] = av.lane(39);\n+                    r[i + 40] = av.lane(40);\n+                    r[i + 41] = av.lane(41);\n+                    r[i + 42] = av.lane(42);\n+                    r[i + 43] = av.lane(43);\n+                    r[i + 44] = av.lane(44);\n+                    r[i + 45] = av.lane(45);\n+                    r[i + 46] = av.lane(46);\n+                    r[i + 47] = av.lane(47);\n+                    r[i + 48] = av.lane(48);\n+                    r[i + 49] = av.lane(49);\n+                    r[i + 50] = av.lane(50);\n+                    r[i + 51] = av.lane(51);\n+                    r[i + 52] = av.lane(52);\n+                    r[i + 53] = av.lane(53);\n+                    r[i + 54] = av.lane(54);\n+                    r[i + 55] = av.lane(55);\n+                    r[i + 56] = av.lane(56);\n+                    r[i + 57] = av.lane(57);\n+                    r[i + 58] = av.lane(58);\n+                    r[i + 59] = av.lane(59);\n+                    r[i + 60] = av.lane(60);\n+                    r[i + 61] = av.lane(61);\n+                    r[i + 62] = av.lane(62);\n+                    r[i + 63] = av.lane(63);\n@@ -1008,1 +1008,1 @@\n-                        r[i+j]=av.lane(j);\n+                        r[i + j] = av.lane(j);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float512Vector.java","additions":134,"deletions":134,"binary":false,"changes":268,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,4 +78,4 @@\n-        a = fill(i -> (float)(2*i));\n-        b = fill(i -> (float)(i+1));\n-        c = fill(i -> (float)(i+5));\n-        r = fill(i -> (float)0);\n+        a = fill(i -> (float) (2 * i));\n+        b = fill(i -> (float) (i + 1));\n+        c = fill(i -> (float) (i + 5));\n+        r = fill(i -> (float) 0);\n@@ -548,1 +548,1 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (float)(65535+i)).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length() - 1)), (float) (65535 + i)).intoArray(r, i);\n@@ -873,1 +873,1 @@\n-                    r[i]=av.lane(0);\n+                    r[i] = av.lane(0);\n@@ -875,2 +875,2 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n@@ -878,4 +878,4 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n@@ -883,8 +883,8 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n@@ -892,16 +892,16 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n@@ -909,32 +909,32 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n@@ -942,64 +942,64 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n-                    r[i+32]=av.lane(32);\n-                    r[i+33]=av.lane(33);\n-                    r[i+34]=av.lane(34);\n-                    r[i+35]=av.lane(35);\n-                    r[i+36]=av.lane(36);\n-                    r[i+37]=av.lane(37);\n-                    r[i+38]=av.lane(38);\n-                    r[i+39]=av.lane(39);\n-                    r[i+40]=av.lane(40);\n-                    r[i+41]=av.lane(41);\n-                    r[i+42]=av.lane(42);\n-                    r[i+43]=av.lane(43);\n-                    r[i+44]=av.lane(44);\n-                    r[i+45]=av.lane(45);\n-                    r[i+46]=av.lane(46);\n-                    r[i+47]=av.lane(47);\n-                    r[i+48]=av.lane(48);\n-                    r[i+49]=av.lane(49);\n-                    r[i+50]=av.lane(50);\n-                    r[i+51]=av.lane(51);\n-                    r[i+52]=av.lane(52);\n-                    r[i+53]=av.lane(53);\n-                    r[i+54]=av.lane(54);\n-                    r[i+55]=av.lane(55);\n-                    r[i+56]=av.lane(56);\n-                    r[i+57]=av.lane(57);\n-                    r[i+58]=av.lane(58);\n-                    r[i+59]=av.lane(59);\n-                    r[i+60]=av.lane(60);\n-                    r[i+61]=av.lane(61);\n-                    r[i+62]=av.lane(62);\n-                    r[i+63]=av.lane(63);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n+                    r[i + 32] = av.lane(32);\n+                    r[i + 33] = av.lane(33);\n+                    r[i + 34] = av.lane(34);\n+                    r[i + 35] = av.lane(35);\n+                    r[i + 36] = av.lane(36);\n+                    r[i + 37] = av.lane(37);\n+                    r[i + 38] = av.lane(38);\n+                    r[i + 39] = av.lane(39);\n+                    r[i + 40] = av.lane(40);\n+                    r[i + 41] = av.lane(41);\n+                    r[i + 42] = av.lane(42);\n+                    r[i + 43] = av.lane(43);\n+                    r[i + 44] = av.lane(44);\n+                    r[i + 45] = av.lane(45);\n+                    r[i + 46] = av.lane(46);\n+                    r[i + 47] = av.lane(47);\n+                    r[i + 48] = av.lane(48);\n+                    r[i + 49] = av.lane(49);\n+                    r[i + 50] = av.lane(50);\n+                    r[i + 51] = av.lane(51);\n+                    r[i + 52] = av.lane(52);\n+                    r[i + 53] = av.lane(53);\n+                    r[i + 54] = av.lane(54);\n+                    r[i + 55] = av.lane(55);\n+                    r[i + 56] = av.lane(56);\n+                    r[i + 57] = av.lane(57);\n+                    r[i + 58] = av.lane(58);\n+                    r[i + 59] = av.lane(59);\n+                    r[i + 60] = av.lane(60);\n+                    r[i + 61] = av.lane(61);\n+                    r[i + 62] = av.lane(62);\n+                    r[i + 63] = av.lane(63);\n@@ -1008,1 +1008,1 @@\n-                        r[i+j]=av.lane(j);\n+                        r[i + j] = av.lane(j);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Float64Vector.java","additions":134,"deletions":134,"binary":false,"changes":268,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,4 +78,4 @@\n-        a = fill(i -> (float)(2*i));\n-        b = fill(i -> (float)(i+1));\n-        c = fill(i -> (float)(i+5));\n-        r = fill(i -> (float)0);\n+        a = fill(i -> (float) (2 * i));\n+        b = fill(i -> (float) (i + 1));\n+        c = fill(i -> (float) (i + 5));\n+        r = fill(i -> (float) 0);\n@@ -548,1 +548,1 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (float)(65535+i)).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length() - 1)), (float) (65535 + i)).intoArray(r, i);\n@@ -873,1 +873,1 @@\n-                    r[i]=av.lane(0);\n+                    r[i] = av.lane(0);\n@@ -875,2 +875,2 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n@@ -878,4 +878,4 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n@@ -883,8 +883,8 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n@@ -892,16 +892,16 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n@@ -909,32 +909,32 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n@@ -942,64 +942,64 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n-                    r[i+32]=av.lane(32);\n-                    r[i+33]=av.lane(33);\n-                    r[i+34]=av.lane(34);\n-                    r[i+35]=av.lane(35);\n-                    r[i+36]=av.lane(36);\n-                    r[i+37]=av.lane(37);\n-                    r[i+38]=av.lane(38);\n-                    r[i+39]=av.lane(39);\n-                    r[i+40]=av.lane(40);\n-                    r[i+41]=av.lane(41);\n-                    r[i+42]=av.lane(42);\n-                    r[i+43]=av.lane(43);\n-                    r[i+44]=av.lane(44);\n-                    r[i+45]=av.lane(45);\n-                    r[i+46]=av.lane(46);\n-                    r[i+47]=av.lane(47);\n-                    r[i+48]=av.lane(48);\n-                    r[i+49]=av.lane(49);\n-                    r[i+50]=av.lane(50);\n-                    r[i+51]=av.lane(51);\n-                    r[i+52]=av.lane(52);\n-                    r[i+53]=av.lane(53);\n-                    r[i+54]=av.lane(54);\n-                    r[i+55]=av.lane(55);\n-                    r[i+56]=av.lane(56);\n-                    r[i+57]=av.lane(57);\n-                    r[i+58]=av.lane(58);\n-                    r[i+59]=av.lane(59);\n-                    r[i+60]=av.lane(60);\n-                    r[i+61]=av.lane(61);\n-                    r[i+62]=av.lane(62);\n-                    r[i+63]=av.lane(63);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n+                    r[i + 32] = av.lane(32);\n+                    r[i + 33] = av.lane(33);\n+                    r[i + 34] = av.lane(34);\n+                    r[i + 35] = av.lane(35);\n+                    r[i + 36] = av.lane(36);\n+                    r[i + 37] = av.lane(37);\n+                    r[i + 38] = av.lane(38);\n+                    r[i + 39] = av.lane(39);\n+                    r[i + 40] = av.lane(40);\n+                    r[i + 41] = av.lane(41);\n+                    r[i + 42] = av.lane(42);\n+                    r[i + 43] = av.lane(43);\n+                    r[i + 44] = av.lane(44);\n+                    r[i + 45] = av.lane(45);\n+                    r[i + 46] = av.lane(46);\n+                    r[i + 47] = av.lane(47);\n+                    r[i + 48] = av.lane(48);\n+                    r[i + 49] = av.lane(49);\n+                    r[i + 50] = av.lane(50);\n+                    r[i + 51] = av.lane(51);\n+                    r[i + 52] = av.lane(52);\n+                    r[i + 53] = av.lane(53);\n+                    r[i + 54] = av.lane(54);\n+                    r[i + 55] = av.lane(55);\n+                    r[i + 56] = av.lane(56);\n+                    r[i + 57] = av.lane(57);\n+                    r[i + 58] = av.lane(58);\n+                    r[i + 59] = av.lane(59);\n+                    r[i + 60] = av.lane(60);\n+                    r[i + 61] = av.lane(61);\n+                    r[i + 62] = av.lane(62);\n+                    r[i + 63] = av.lane(63);\n@@ -1008,1 +1008,1 @@\n-                        r[i+j]=av.lane(j);\n+                        r[i + j] = av.lane(j);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/FloatMaxVector.java","additions":134,"deletions":134,"binary":false,"changes":268,"status":"modified"},{"patch":"@@ -64,4 +64,4 @@\n-        as = fill(i -> (float)(2*i));\n-        bs = fill(i -> (float)(i+1));\n-        cs = fill(i -> (float)(i+5));\n-        rs = fill(i -> (float)0);\n+        as = fill(i -> (float) (2 * i));\n+        bs = fill(i -> (float) (i + 1));\n+        cs = fill(i -> (float) (i + 5));\n+        rs = fill(i -> (float) 0);\n@@ -72,1 +72,1 @@\n-        ss = fillInt(size, i -> RANDOM.nextInt(Math.max(i,1)));\n+        ss = fillInt(size, i -> RANDOM.nextInt(Math.max(i, 1)));\n@@ -120,1 +120,1 @@\n-                rs[i] = (float)(a + b);\n+                rs[i] = (float) (a + b);\n@@ -139,1 +139,1 @@\n-                    rs[i] = (float)(a + b);\n+                    rs[i] = (float) (a + b);\n@@ -158,1 +158,1 @@\n-                rs[i] = (float)(a - b);\n+                rs[i] = (float) (a - b);\n@@ -177,1 +177,1 @@\n-                    rs[i] = (float)(a - b);\n+                    rs[i] = (float) (a - b);\n@@ -196,1 +196,1 @@\n-                rs[i] = (float)(a * b);\n+                rs[i] = (float) (a * b);\n@@ -215,1 +215,1 @@\n-                    rs[i] = (float)(a * b);\n+                    rs[i] = (float) (a * b);\n@@ -235,1 +235,1 @@\n-                rs[i] = (float)(a \/ b);\n+                rs[i] = (float) (a \/ b);\n@@ -256,1 +256,1 @@\n-                    rs[i] = (float)(a \/ b);\n+                    rs[i] = (float) (a \/ b);\n@@ -276,1 +276,1 @@\n-                rs[i] = (float)(Double.doubleToLongBits(a)!=0?a:b);\n+                rs[i] = (float) (Double.doubleToLongBits(a) != 0 ? a : b);\n@@ -295,1 +295,1 @@\n-                    rs[i] = (float)(Double.doubleToLongBits(a)!=0?a:b);\n+                    rs[i] = (float) (Double.doubleToLongBits(a) != 0 ? a : b);\n@@ -366,1 +366,1 @@\n-                rs[i] = (float)(Math.min(a, b));\n+                rs[i] = (float) (Math.min(a, b));\n@@ -383,1 +383,1 @@\n-                rs[i] = (float)(Math.max(a, b));\n+                rs[i] = (float) (Math.max(a, b));\n@@ -462,1 +462,1 @@\n-                r &= (bits(a)==0); \/\/ accumulate so JIT can't eliminate the computation\n+                r &= (bits(a) == 0); \/\/ accumulate so JIT can't eliminate the computation\n@@ -477,1 +477,1 @@\n-                r &= (bits(a)<0); \/\/ accumulate so JIT can't eliminate the computation\n+                r &= (bits(a) < 0); \/\/ accumulate so JIT can't eliminate the computation\n@@ -655,1 +655,1 @@\n-                    float a = as[i+j];\n+                    float a = as[i + j];\n@@ -784,1 +784,1 @@\n-                as[i] = (float)0;\n+                as[i] = (float) 0;\n@@ -800,1 +800,1 @@\n-                rs[i] = (float)(Math.sin((double)a));\n+                rs[i] = (float) (Math.sin((double) a));\n@@ -817,1 +817,1 @@\n-                rs[i] = (float)(Math.exp((double)a));\n+                rs[i] = (float) (Math.exp((double) a));\n@@ -834,1 +834,1 @@\n-                rs[i] = (float)(Math.log1p((double)a));\n+                rs[i] = (float) (Math.log1p((double) a));\n@@ -851,1 +851,1 @@\n-                rs[i] = (float)(Math.log((double)a));\n+                rs[i] = (float) (Math.log((double) a));\n@@ -868,1 +868,1 @@\n-                rs[i] = (float)(Math.log10((double)a));\n+                rs[i] = (float) (Math.log10((double) a));\n@@ -885,1 +885,1 @@\n-                rs[i] = (float)(Math.expm1((double)a));\n+                rs[i] = (float) (Math.expm1((double) a));\n@@ -902,1 +902,1 @@\n-                rs[i] = (float)(Math.cos((double)a));\n+                rs[i] = (float) (Math.cos((double) a));\n@@ -919,1 +919,1 @@\n-                rs[i] = (float)(Math.tan((double)a));\n+                rs[i] = (float) (Math.tan((double) a));\n@@ -936,1 +936,1 @@\n-                rs[i] = (float)(Math.sinh((double)a));\n+                rs[i] = (float) (Math.sinh((double) a));\n@@ -953,1 +953,1 @@\n-                rs[i] = (float)(Math.cosh((double)a));\n+                rs[i] = (float) (Math.cosh((double) a));\n@@ -970,1 +970,1 @@\n-                rs[i] = (float)(Math.tanh((double)a));\n+                rs[i] = (float) (Math.tanh((double) a));\n@@ -987,1 +987,1 @@\n-                rs[i] = (float)(Math.asin((double)a));\n+                rs[i] = (float) (Math.asin((double) a));\n@@ -1004,1 +1004,1 @@\n-                rs[i] = (float)(Math.acos((double)a));\n+                rs[i] = (float) (Math.acos((double) a));\n@@ -1021,1 +1021,1 @@\n-                rs[i] = (float)(Math.atan((double)a));\n+                rs[i] = (float) (Math.atan((double) a));\n@@ -1038,1 +1038,1 @@\n-                rs[i] = (float)(Math.cbrt((double)a));\n+                rs[i] = (float) (Math.cbrt((double) a));\n@@ -1057,1 +1057,1 @@\n-                rs[i] = (float)(Math.hypot((double)a, (double)b));\n+                rs[i] = (float) (Math.hypot((double) a, (double) b));\n@@ -1076,1 +1076,1 @@\n-                rs[i] = (float)(Math.pow((double)a, (double)b));\n+                rs[i] = (float) (Math.pow((double) a, (double) b));\n@@ -1095,1 +1095,1 @@\n-                rs[i] = (float)(Math.atan2((double)a, (double)b));\n+                rs[i] = (float) (Math.atan2((double) a, (double) b));\n@@ -1116,1 +1116,1 @@\n-                rs[i] = (float)(Math.fma(a, b, c));\n+                rs[i] = (float) (Math.fma(a, b, c));\n@@ -1140,1 +1140,1 @@\n-                    rs[i] = (float)(Math.fma(a, b, c));\n+                    rs[i] = (float) (Math.fma(a, b, c));\n@@ -1160,1 +1160,1 @@\n-                rs[i] = (float)(-((float)a));\n+                rs[i] = (float) (-((float) a));\n@@ -1177,1 +1177,1 @@\n-                rs[i] = (m ? (float)(-((float)a)) : a);\n+                rs[i] = (m ? (float) (-((float) a)) : a);\n@@ -1192,1 +1192,1 @@\n-                rs[i] = (float)(Math.abs((float)a));\n+                rs[i] = (float) (Math.abs((float) a));\n@@ -1209,1 +1209,1 @@\n-                rs[i] = (m ? (float)(Math.abs((float)a)) : a);\n+                rs[i] = (m ? (float) (Math.abs((float) a)) : a);\n@@ -1229,1 +1229,1 @@\n-                rs[i] = (float)(Math.sqrt((double)a));\n+                rs[i] = (float) (Math.sqrt((double) a));\n@@ -1248,1 +1248,1 @@\n-                rs[i] = (m ? (float)(Math.sqrt((double)a)) : a);\n+                rs[i] = (m ? (float) (Math.sqrt((double) a)) : a);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/FloatScalar.java","additions":47,"deletions":47,"binary":false,"changes":94,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -93,4 +93,4 @@\n-        a = fill(i -> (int)(2*i));\n-        b = fill(i -> (int)(i+1));\n-        c = fill(i -> (int)(i+5));\n-        r = fill(i -> (int)0);\n+        a = fill(i -> (int) (2 * i));\n+        b = fill(i -> (int) (i + 1));\n+        c = fill(i -> (int) (i + 5));\n+        r = fill(i -> (int) 0);\n@@ -607,1 +607,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i]).intoArray(r, i);\n@@ -627,1 +627,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i], vmask).intoArray(r, i);\n@@ -649,1 +649,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i]).intoArray(r, i);\n@@ -669,1 +669,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i], vmask).intoArray(r, i);\n@@ -691,1 +691,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i]).intoArray(r, i);\n@@ -711,1 +711,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i], vmask).intoArray(r, i);\n@@ -813,1 +813,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i]).intoArray(r, i);\n@@ -833,1 +833,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i], vmask).intoArray(r, i);\n@@ -851,1 +851,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i]).intoArray(r, i);\n@@ -871,1 +871,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i], vmask).intoArray(r, i);\n@@ -1223,1 +1223,1 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (int)(65535+i)).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length() - 1)), (int) (65535 + i)).intoArray(r, i);\n@@ -1575,1 +1575,1 @@\n-                    r[i]=av.lane(0);\n+                    r[i] = av.lane(0);\n@@ -1577,2 +1577,2 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n@@ -1580,4 +1580,4 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n@@ -1585,8 +1585,8 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n@@ -1594,16 +1594,16 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n@@ -1611,32 +1611,32 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n@@ -1644,64 +1644,64 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n-                    r[i+32]=av.lane(32);\n-                    r[i+33]=av.lane(33);\n-                    r[i+34]=av.lane(34);\n-                    r[i+35]=av.lane(35);\n-                    r[i+36]=av.lane(36);\n-                    r[i+37]=av.lane(37);\n-                    r[i+38]=av.lane(38);\n-                    r[i+39]=av.lane(39);\n-                    r[i+40]=av.lane(40);\n-                    r[i+41]=av.lane(41);\n-                    r[i+42]=av.lane(42);\n-                    r[i+43]=av.lane(43);\n-                    r[i+44]=av.lane(44);\n-                    r[i+45]=av.lane(45);\n-                    r[i+46]=av.lane(46);\n-                    r[i+47]=av.lane(47);\n-                    r[i+48]=av.lane(48);\n-                    r[i+49]=av.lane(49);\n-                    r[i+50]=av.lane(50);\n-                    r[i+51]=av.lane(51);\n-                    r[i+52]=av.lane(52);\n-                    r[i+53]=av.lane(53);\n-                    r[i+54]=av.lane(54);\n-                    r[i+55]=av.lane(55);\n-                    r[i+56]=av.lane(56);\n-                    r[i+57]=av.lane(57);\n-                    r[i+58]=av.lane(58);\n-                    r[i+59]=av.lane(59);\n-                    r[i+60]=av.lane(60);\n-                    r[i+61]=av.lane(61);\n-                    r[i+62]=av.lane(62);\n-                    r[i+63]=av.lane(63);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n+                    r[i + 32] = av.lane(32);\n+                    r[i + 33] = av.lane(33);\n+                    r[i + 34] = av.lane(34);\n+                    r[i + 35] = av.lane(35);\n+                    r[i + 36] = av.lane(36);\n+                    r[i + 37] = av.lane(37);\n+                    r[i + 38] = av.lane(38);\n+                    r[i + 39] = av.lane(39);\n+                    r[i + 40] = av.lane(40);\n+                    r[i + 41] = av.lane(41);\n+                    r[i + 42] = av.lane(42);\n+                    r[i + 43] = av.lane(43);\n+                    r[i + 44] = av.lane(44);\n+                    r[i + 45] = av.lane(45);\n+                    r[i + 46] = av.lane(46);\n+                    r[i + 47] = av.lane(47);\n+                    r[i + 48] = av.lane(48);\n+                    r[i + 49] = av.lane(49);\n+                    r[i + 50] = av.lane(50);\n+                    r[i + 51] = av.lane(51);\n+                    r[i + 52] = av.lane(52);\n+                    r[i + 53] = av.lane(53);\n+                    r[i + 54] = av.lane(54);\n+                    r[i + 55] = av.lane(55);\n+                    r[i + 56] = av.lane(56);\n+                    r[i + 57] = av.lane(57);\n+                    r[i + 58] = av.lane(58);\n+                    r[i + 59] = av.lane(59);\n+                    r[i + 60] = av.lane(60);\n+                    r[i + 61] = av.lane(61);\n+                    r[i + 62] = av.lane(62);\n+                    r[i + 63] = av.lane(63);\n@@ -1710,1 +1710,1 @@\n-                        r[i+j]=av.lane(j);\n+                        r[i + j] = av.lane(j);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int128Vector.java","additions":144,"deletions":144,"binary":false,"changes":288,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -93,4 +93,4 @@\n-        a = fill(i -> (int)(2*i));\n-        b = fill(i -> (int)(i+1));\n-        c = fill(i -> (int)(i+5));\n-        r = fill(i -> (int)0);\n+        a = fill(i -> (int) (2 * i));\n+        b = fill(i -> (int) (i + 1));\n+        c = fill(i -> (int) (i + 5));\n+        r = fill(i -> (int) 0);\n@@ -607,1 +607,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i]).intoArray(r, i);\n@@ -627,1 +627,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i], vmask).intoArray(r, i);\n@@ -649,1 +649,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i]).intoArray(r, i);\n@@ -669,1 +669,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i], vmask).intoArray(r, i);\n@@ -691,1 +691,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i]).intoArray(r, i);\n@@ -711,1 +711,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i], vmask).intoArray(r, i);\n@@ -813,1 +813,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i]).intoArray(r, i);\n@@ -833,1 +833,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i], vmask).intoArray(r, i);\n@@ -851,1 +851,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i]).intoArray(r, i);\n@@ -871,1 +871,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i], vmask).intoArray(r, i);\n@@ -1223,1 +1223,1 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (int)(65535+i)).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length() - 1)), (int) (65535 + i)).intoArray(r, i);\n@@ -1575,1 +1575,1 @@\n-                    r[i]=av.lane(0);\n+                    r[i] = av.lane(0);\n@@ -1577,2 +1577,2 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n@@ -1580,4 +1580,4 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n@@ -1585,8 +1585,8 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n@@ -1594,16 +1594,16 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n@@ -1611,32 +1611,32 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n@@ -1644,64 +1644,64 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n-                    r[i+32]=av.lane(32);\n-                    r[i+33]=av.lane(33);\n-                    r[i+34]=av.lane(34);\n-                    r[i+35]=av.lane(35);\n-                    r[i+36]=av.lane(36);\n-                    r[i+37]=av.lane(37);\n-                    r[i+38]=av.lane(38);\n-                    r[i+39]=av.lane(39);\n-                    r[i+40]=av.lane(40);\n-                    r[i+41]=av.lane(41);\n-                    r[i+42]=av.lane(42);\n-                    r[i+43]=av.lane(43);\n-                    r[i+44]=av.lane(44);\n-                    r[i+45]=av.lane(45);\n-                    r[i+46]=av.lane(46);\n-                    r[i+47]=av.lane(47);\n-                    r[i+48]=av.lane(48);\n-                    r[i+49]=av.lane(49);\n-                    r[i+50]=av.lane(50);\n-                    r[i+51]=av.lane(51);\n-                    r[i+52]=av.lane(52);\n-                    r[i+53]=av.lane(53);\n-                    r[i+54]=av.lane(54);\n-                    r[i+55]=av.lane(55);\n-                    r[i+56]=av.lane(56);\n-                    r[i+57]=av.lane(57);\n-                    r[i+58]=av.lane(58);\n-                    r[i+59]=av.lane(59);\n-                    r[i+60]=av.lane(60);\n-                    r[i+61]=av.lane(61);\n-                    r[i+62]=av.lane(62);\n-                    r[i+63]=av.lane(63);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n+                    r[i + 32] = av.lane(32);\n+                    r[i + 33] = av.lane(33);\n+                    r[i + 34] = av.lane(34);\n+                    r[i + 35] = av.lane(35);\n+                    r[i + 36] = av.lane(36);\n+                    r[i + 37] = av.lane(37);\n+                    r[i + 38] = av.lane(38);\n+                    r[i + 39] = av.lane(39);\n+                    r[i + 40] = av.lane(40);\n+                    r[i + 41] = av.lane(41);\n+                    r[i + 42] = av.lane(42);\n+                    r[i + 43] = av.lane(43);\n+                    r[i + 44] = av.lane(44);\n+                    r[i + 45] = av.lane(45);\n+                    r[i + 46] = av.lane(46);\n+                    r[i + 47] = av.lane(47);\n+                    r[i + 48] = av.lane(48);\n+                    r[i + 49] = av.lane(49);\n+                    r[i + 50] = av.lane(50);\n+                    r[i + 51] = av.lane(51);\n+                    r[i + 52] = av.lane(52);\n+                    r[i + 53] = av.lane(53);\n+                    r[i + 54] = av.lane(54);\n+                    r[i + 55] = av.lane(55);\n+                    r[i + 56] = av.lane(56);\n+                    r[i + 57] = av.lane(57);\n+                    r[i + 58] = av.lane(58);\n+                    r[i + 59] = av.lane(59);\n+                    r[i + 60] = av.lane(60);\n+                    r[i + 61] = av.lane(61);\n+                    r[i + 62] = av.lane(62);\n+                    r[i + 63] = av.lane(63);\n@@ -1710,1 +1710,1 @@\n-                        r[i+j]=av.lane(j);\n+                        r[i + j] = av.lane(j);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int256Vector.java","additions":144,"deletions":144,"binary":false,"changes":288,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -93,4 +93,4 @@\n-        a = fill(i -> (int)(2*i));\n-        b = fill(i -> (int)(i+1));\n-        c = fill(i -> (int)(i+5));\n-        r = fill(i -> (int)0);\n+        a = fill(i -> (int) (2 * i));\n+        b = fill(i -> (int) (i + 1));\n+        c = fill(i -> (int) (i + 5));\n+        r = fill(i -> (int) 0);\n@@ -607,1 +607,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i]).intoArray(r, i);\n@@ -627,1 +627,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i], vmask).intoArray(r, i);\n@@ -649,1 +649,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i]).intoArray(r, i);\n@@ -669,1 +669,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i], vmask).intoArray(r, i);\n@@ -691,1 +691,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i]).intoArray(r, i);\n@@ -711,1 +711,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i], vmask).intoArray(r, i);\n@@ -813,1 +813,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i]).intoArray(r, i);\n@@ -833,1 +833,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i], vmask).intoArray(r, i);\n@@ -851,1 +851,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i]).intoArray(r, i);\n@@ -871,1 +871,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i], vmask).intoArray(r, i);\n@@ -1223,1 +1223,1 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (int)(65535+i)).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length() - 1)), (int) (65535 + i)).intoArray(r, i);\n@@ -1575,1 +1575,1 @@\n-                    r[i]=av.lane(0);\n+                    r[i] = av.lane(0);\n@@ -1577,2 +1577,2 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n@@ -1580,4 +1580,4 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n@@ -1585,8 +1585,8 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n@@ -1594,16 +1594,16 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n@@ -1611,32 +1611,32 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n@@ -1644,64 +1644,64 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n-                    r[i+32]=av.lane(32);\n-                    r[i+33]=av.lane(33);\n-                    r[i+34]=av.lane(34);\n-                    r[i+35]=av.lane(35);\n-                    r[i+36]=av.lane(36);\n-                    r[i+37]=av.lane(37);\n-                    r[i+38]=av.lane(38);\n-                    r[i+39]=av.lane(39);\n-                    r[i+40]=av.lane(40);\n-                    r[i+41]=av.lane(41);\n-                    r[i+42]=av.lane(42);\n-                    r[i+43]=av.lane(43);\n-                    r[i+44]=av.lane(44);\n-                    r[i+45]=av.lane(45);\n-                    r[i+46]=av.lane(46);\n-                    r[i+47]=av.lane(47);\n-                    r[i+48]=av.lane(48);\n-                    r[i+49]=av.lane(49);\n-                    r[i+50]=av.lane(50);\n-                    r[i+51]=av.lane(51);\n-                    r[i+52]=av.lane(52);\n-                    r[i+53]=av.lane(53);\n-                    r[i+54]=av.lane(54);\n-                    r[i+55]=av.lane(55);\n-                    r[i+56]=av.lane(56);\n-                    r[i+57]=av.lane(57);\n-                    r[i+58]=av.lane(58);\n-                    r[i+59]=av.lane(59);\n-                    r[i+60]=av.lane(60);\n-                    r[i+61]=av.lane(61);\n-                    r[i+62]=av.lane(62);\n-                    r[i+63]=av.lane(63);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n+                    r[i + 32] = av.lane(32);\n+                    r[i + 33] = av.lane(33);\n+                    r[i + 34] = av.lane(34);\n+                    r[i + 35] = av.lane(35);\n+                    r[i + 36] = av.lane(36);\n+                    r[i + 37] = av.lane(37);\n+                    r[i + 38] = av.lane(38);\n+                    r[i + 39] = av.lane(39);\n+                    r[i + 40] = av.lane(40);\n+                    r[i + 41] = av.lane(41);\n+                    r[i + 42] = av.lane(42);\n+                    r[i + 43] = av.lane(43);\n+                    r[i + 44] = av.lane(44);\n+                    r[i + 45] = av.lane(45);\n+                    r[i + 46] = av.lane(46);\n+                    r[i + 47] = av.lane(47);\n+                    r[i + 48] = av.lane(48);\n+                    r[i + 49] = av.lane(49);\n+                    r[i + 50] = av.lane(50);\n+                    r[i + 51] = av.lane(51);\n+                    r[i + 52] = av.lane(52);\n+                    r[i + 53] = av.lane(53);\n+                    r[i + 54] = av.lane(54);\n+                    r[i + 55] = av.lane(55);\n+                    r[i + 56] = av.lane(56);\n+                    r[i + 57] = av.lane(57);\n+                    r[i + 58] = av.lane(58);\n+                    r[i + 59] = av.lane(59);\n+                    r[i + 60] = av.lane(60);\n+                    r[i + 61] = av.lane(61);\n+                    r[i + 62] = av.lane(62);\n+                    r[i + 63] = av.lane(63);\n@@ -1710,1 +1710,1 @@\n-                        r[i+j]=av.lane(j);\n+                        r[i + j] = av.lane(j);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int512Vector.java","additions":144,"deletions":144,"binary":false,"changes":288,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -93,4 +93,4 @@\n-        a = fill(i -> (int)(2*i));\n-        b = fill(i -> (int)(i+1));\n-        c = fill(i -> (int)(i+5));\n-        r = fill(i -> (int)0);\n+        a = fill(i -> (int) (2 * i));\n+        b = fill(i -> (int) (i + 1));\n+        c = fill(i -> (int) (i + 5));\n+        r = fill(i -> (int) 0);\n@@ -607,1 +607,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i]).intoArray(r, i);\n@@ -627,1 +627,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i], vmask).intoArray(r, i);\n@@ -649,1 +649,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i]).intoArray(r, i);\n@@ -669,1 +669,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i], vmask).intoArray(r, i);\n@@ -691,1 +691,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i]).intoArray(r, i);\n@@ -711,1 +711,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i], vmask).intoArray(r, i);\n@@ -813,1 +813,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i]).intoArray(r, i);\n@@ -833,1 +833,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i], vmask).intoArray(r, i);\n@@ -851,1 +851,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i]).intoArray(r, i);\n@@ -871,1 +871,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i], vmask).intoArray(r, i);\n@@ -1223,1 +1223,1 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (int)(65535+i)).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length() - 1)), (int) (65535 + i)).intoArray(r, i);\n@@ -1575,1 +1575,1 @@\n-                    r[i]=av.lane(0);\n+                    r[i] = av.lane(0);\n@@ -1577,2 +1577,2 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n@@ -1580,4 +1580,4 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n@@ -1585,8 +1585,8 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n@@ -1594,16 +1594,16 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n@@ -1611,32 +1611,32 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n@@ -1644,64 +1644,64 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n-                    r[i+32]=av.lane(32);\n-                    r[i+33]=av.lane(33);\n-                    r[i+34]=av.lane(34);\n-                    r[i+35]=av.lane(35);\n-                    r[i+36]=av.lane(36);\n-                    r[i+37]=av.lane(37);\n-                    r[i+38]=av.lane(38);\n-                    r[i+39]=av.lane(39);\n-                    r[i+40]=av.lane(40);\n-                    r[i+41]=av.lane(41);\n-                    r[i+42]=av.lane(42);\n-                    r[i+43]=av.lane(43);\n-                    r[i+44]=av.lane(44);\n-                    r[i+45]=av.lane(45);\n-                    r[i+46]=av.lane(46);\n-                    r[i+47]=av.lane(47);\n-                    r[i+48]=av.lane(48);\n-                    r[i+49]=av.lane(49);\n-                    r[i+50]=av.lane(50);\n-                    r[i+51]=av.lane(51);\n-                    r[i+52]=av.lane(52);\n-                    r[i+53]=av.lane(53);\n-                    r[i+54]=av.lane(54);\n-                    r[i+55]=av.lane(55);\n-                    r[i+56]=av.lane(56);\n-                    r[i+57]=av.lane(57);\n-                    r[i+58]=av.lane(58);\n-                    r[i+59]=av.lane(59);\n-                    r[i+60]=av.lane(60);\n-                    r[i+61]=av.lane(61);\n-                    r[i+62]=av.lane(62);\n-                    r[i+63]=av.lane(63);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n+                    r[i + 32] = av.lane(32);\n+                    r[i + 33] = av.lane(33);\n+                    r[i + 34] = av.lane(34);\n+                    r[i + 35] = av.lane(35);\n+                    r[i + 36] = av.lane(36);\n+                    r[i + 37] = av.lane(37);\n+                    r[i + 38] = av.lane(38);\n+                    r[i + 39] = av.lane(39);\n+                    r[i + 40] = av.lane(40);\n+                    r[i + 41] = av.lane(41);\n+                    r[i + 42] = av.lane(42);\n+                    r[i + 43] = av.lane(43);\n+                    r[i + 44] = av.lane(44);\n+                    r[i + 45] = av.lane(45);\n+                    r[i + 46] = av.lane(46);\n+                    r[i + 47] = av.lane(47);\n+                    r[i + 48] = av.lane(48);\n+                    r[i + 49] = av.lane(49);\n+                    r[i + 50] = av.lane(50);\n+                    r[i + 51] = av.lane(51);\n+                    r[i + 52] = av.lane(52);\n+                    r[i + 53] = av.lane(53);\n+                    r[i + 54] = av.lane(54);\n+                    r[i + 55] = av.lane(55);\n+                    r[i + 56] = av.lane(56);\n+                    r[i + 57] = av.lane(57);\n+                    r[i + 58] = av.lane(58);\n+                    r[i + 59] = av.lane(59);\n+                    r[i + 60] = av.lane(60);\n+                    r[i + 61] = av.lane(61);\n+                    r[i + 62] = av.lane(62);\n+                    r[i + 63] = av.lane(63);\n@@ -1710,1 +1710,1 @@\n-                        r[i+j]=av.lane(j);\n+                        r[i + j] = av.lane(j);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Int64Vector.java","additions":144,"deletions":144,"binary":false,"changes":288,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -93,4 +93,4 @@\n-        a = fill(i -> (int)(2*i));\n-        b = fill(i -> (int)(i+1));\n-        c = fill(i -> (int)(i+5));\n-        r = fill(i -> (int)0);\n+        a = fill(i -> (int) (2 * i));\n+        b = fill(i -> (int) (i + 1));\n+        c = fill(i -> (int) (i + 5));\n+        r = fill(i -> (int) 0);\n@@ -607,1 +607,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i]).intoArray(r, i);\n@@ -627,1 +627,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i], vmask).intoArray(r, i);\n@@ -649,1 +649,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i]).intoArray(r, i);\n@@ -669,1 +669,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i], vmask).intoArray(r, i);\n@@ -691,1 +691,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i]).intoArray(r, i);\n@@ -711,1 +711,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i], vmask).intoArray(r, i);\n@@ -813,1 +813,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i]).intoArray(r, i);\n@@ -833,1 +833,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i], vmask).intoArray(r, i);\n@@ -851,1 +851,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i]).intoArray(r, i);\n@@ -871,1 +871,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i], vmask).intoArray(r, i);\n@@ -1223,1 +1223,1 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (int)(65535+i)).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length() - 1)), (int) (65535 + i)).intoArray(r, i);\n@@ -1575,1 +1575,1 @@\n-                    r[i]=av.lane(0);\n+                    r[i] = av.lane(0);\n@@ -1577,2 +1577,2 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n@@ -1580,4 +1580,4 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n@@ -1585,8 +1585,8 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n@@ -1594,16 +1594,16 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n@@ -1611,32 +1611,32 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n@@ -1644,64 +1644,64 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n-                    r[i+32]=av.lane(32);\n-                    r[i+33]=av.lane(33);\n-                    r[i+34]=av.lane(34);\n-                    r[i+35]=av.lane(35);\n-                    r[i+36]=av.lane(36);\n-                    r[i+37]=av.lane(37);\n-                    r[i+38]=av.lane(38);\n-                    r[i+39]=av.lane(39);\n-                    r[i+40]=av.lane(40);\n-                    r[i+41]=av.lane(41);\n-                    r[i+42]=av.lane(42);\n-                    r[i+43]=av.lane(43);\n-                    r[i+44]=av.lane(44);\n-                    r[i+45]=av.lane(45);\n-                    r[i+46]=av.lane(46);\n-                    r[i+47]=av.lane(47);\n-                    r[i+48]=av.lane(48);\n-                    r[i+49]=av.lane(49);\n-                    r[i+50]=av.lane(50);\n-                    r[i+51]=av.lane(51);\n-                    r[i+52]=av.lane(52);\n-                    r[i+53]=av.lane(53);\n-                    r[i+54]=av.lane(54);\n-                    r[i+55]=av.lane(55);\n-                    r[i+56]=av.lane(56);\n-                    r[i+57]=av.lane(57);\n-                    r[i+58]=av.lane(58);\n-                    r[i+59]=av.lane(59);\n-                    r[i+60]=av.lane(60);\n-                    r[i+61]=av.lane(61);\n-                    r[i+62]=av.lane(62);\n-                    r[i+63]=av.lane(63);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n+                    r[i + 32] = av.lane(32);\n+                    r[i + 33] = av.lane(33);\n+                    r[i + 34] = av.lane(34);\n+                    r[i + 35] = av.lane(35);\n+                    r[i + 36] = av.lane(36);\n+                    r[i + 37] = av.lane(37);\n+                    r[i + 38] = av.lane(38);\n+                    r[i + 39] = av.lane(39);\n+                    r[i + 40] = av.lane(40);\n+                    r[i + 41] = av.lane(41);\n+                    r[i + 42] = av.lane(42);\n+                    r[i + 43] = av.lane(43);\n+                    r[i + 44] = av.lane(44);\n+                    r[i + 45] = av.lane(45);\n+                    r[i + 46] = av.lane(46);\n+                    r[i + 47] = av.lane(47);\n+                    r[i + 48] = av.lane(48);\n+                    r[i + 49] = av.lane(49);\n+                    r[i + 50] = av.lane(50);\n+                    r[i + 51] = av.lane(51);\n+                    r[i + 52] = av.lane(52);\n+                    r[i + 53] = av.lane(53);\n+                    r[i + 54] = av.lane(54);\n+                    r[i + 55] = av.lane(55);\n+                    r[i + 56] = av.lane(56);\n+                    r[i + 57] = av.lane(57);\n+                    r[i + 58] = av.lane(58);\n+                    r[i + 59] = av.lane(59);\n+                    r[i + 60] = av.lane(60);\n+                    r[i + 61] = av.lane(61);\n+                    r[i + 62] = av.lane(62);\n+                    r[i + 63] = av.lane(63);\n@@ -1710,1 +1710,1 @@\n-                        r[i+j]=av.lane(j);\n+                        r[i + j] = av.lane(j);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/IntMaxVector.java","additions":144,"deletions":144,"binary":false,"changes":288,"status":"modified"},{"patch":"@@ -64,4 +64,4 @@\n-        as = fill(i -> (int)(2*i));\n-        bs = fill(i -> (int)(i+1));\n-        cs = fill(i -> (int)(i+5));\n-        rs = fill(i -> (int)0);\n+        as = fill(i -> (int) (2 * i));\n+        bs = fill(i -> (int) (i + 1));\n+        cs = fill(i -> (int) (i + 5));\n+        rs = fill(i -> (int) 0);\n@@ -72,1 +72,1 @@\n-        ss = fillInt(size, i -> RANDOM.nextInt(Math.max(i,1)));\n+        ss = fillInt(size, i -> RANDOM.nextInt(Math.max(i, 1)));\n@@ -125,1 +125,1 @@\n-        return Integer.rotateLeft(a, ((int)b));\n+        return Integer.rotateLeft(a, ((int) b));\n@@ -129,1 +129,1 @@\n-        return Integer.rotateRight(a, ((int)b));\n+        return Integer.rotateRight(a, ((int) b));\n@@ -154,1 +154,1 @@\n-                rs[i] = (int)(a + b);\n+                rs[i] = (int) (a + b);\n@@ -173,1 +173,1 @@\n-                    rs[i] = (int)(a + b);\n+                    rs[i] = (int) (a + b);\n@@ -192,1 +192,1 @@\n-                rs[i] = (int)(a - b);\n+                rs[i] = (int) (a - b);\n@@ -211,1 +211,1 @@\n-                    rs[i] = (int)(a - b);\n+                    rs[i] = (int) (a - b);\n@@ -230,1 +230,1 @@\n-                rs[i] = (int)(a * b);\n+                rs[i] = (int) (a * b);\n@@ -249,1 +249,1 @@\n-                    rs[i] = (int)(a * b);\n+                    rs[i] = (int) (a * b);\n@@ -270,1 +270,1 @@\n-                rs[i] = (int)((a)!=0?a:b);\n+                rs[i] = (int) ((a) != 0 ? a : b);\n@@ -289,1 +289,1 @@\n-                    rs[i] = (int)((a)!=0?a:b);\n+                    rs[i] = (int) ((a) != 0 ? a : b);\n@@ -309,1 +309,1 @@\n-                rs[i] = (int)(a & b);\n+                rs[i] = (int) (a & b);\n@@ -330,1 +330,1 @@\n-                    rs[i] = (int)(a & b);\n+                    rs[i] = (int) (a & b);\n@@ -351,1 +351,1 @@\n-                rs[i] = (int)(a & ~b);\n+                rs[i] = (int) (a & ~b);\n@@ -372,1 +372,1 @@\n-                    rs[i] = (int)(a & ~b);\n+                    rs[i] = (int) (a & ~b);\n@@ -393,1 +393,1 @@\n-                rs[i] = (int)(a | b);\n+                rs[i] = (int) (a | b);\n@@ -414,1 +414,1 @@\n-                    rs[i] = (int)(a | b);\n+                    rs[i] = (int) (a | b);\n@@ -435,1 +435,1 @@\n-                rs[i] = (int)(a ^ b);\n+                rs[i] = (int) (a ^ b);\n@@ -456,1 +456,1 @@\n-                    rs[i] = (int)(a ^ b);\n+                    rs[i] = (int) (a ^ b);\n@@ -477,1 +477,1 @@\n-                rs[i] = (int)((a << b));\n+                rs[i] = (int) ((a << b));\n@@ -498,1 +498,1 @@\n-                    rs[i] = (int)((a << b));\n+                    rs[i] = (int) ((a << b));\n@@ -523,1 +523,1 @@\n-                rs[i] = (int)((a >> b));\n+                rs[i] = (int) ((a >> b));\n@@ -544,1 +544,1 @@\n-                    rs[i] = (int)((a >> b));\n+                    rs[i] = (int) ((a >> b));\n@@ -569,1 +569,1 @@\n-                rs[i] = (int)((a >>> b));\n+                rs[i] = (int) ((a >>> b));\n@@ -590,1 +590,1 @@\n-                    rs[i] = (int)((a >>> b));\n+                    rs[i] = (int) ((a >>> b));\n@@ -615,1 +615,1 @@\n-                rs[i] = (int)((a << b));\n+                rs[i] = (int) ((a << b));\n@@ -636,1 +636,1 @@\n-                rs[i] = (m ? (int)((a << b)) : a);\n+                rs[i] = (m ? (int) ((a << b)) : a);\n@@ -659,1 +659,1 @@\n-                rs[i] = (int)((a >>> b));\n+                rs[i] = (int) ((a >>> b));\n@@ -680,1 +680,1 @@\n-                rs[i] = (m ? (int)((a >>> b)) : a);\n+                rs[i] = (m ? (int) ((a >>> b)) : a);\n@@ -703,1 +703,1 @@\n-                rs[i] = (int)((a >> b));\n+                rs[i] = (int) ((a >> b));\n@@ -724,1 +724,1 @@\n-                rs[i] = (m ? (int)((a >> b)) : a);\n+                rs[i] = (m ? (int) ((a >> b)) : a);\n@@ -747,1 +747,1 @@\n-                rs[i] = (int)(ROR_scalar(a,b));\n+                rs[i] = (int) (ROR_scalar(a, b));\n@@ -768,1 +768,1 @@\n-                    rs[i] = (int)(ROR_scalar(a,b));\n+                    rs[i] = (int) (ROR_scalar(a, b));\n@@ -789,1 +789,1 @@\n-                rs[i] = (int)(ROL_scalar(a,b));\n+                rs[i] = (int) (ROL_scalar(a, b));\n@@ -810,1 +810,1 @@\n-                    rs[i] = (int)(ROL_scalar(a,b));\n+                    rs[i] = (int) (ROL_scalar(a, b));\n@@ -831,1 +831,1 @@\n-                rs[i] = (int)(ROR_scalar(a,b));\n+                rs[i] = (int) (ROR_scalar(a, b));\n@@ -852,1 +852,1 @@\n-                rs[i] = (m ? (int)(ROR_scalar(a,b)) : a);\n+                rs[i] = (m ? (int) (ROR_scalar(a, b)) : a);\n@@ -871,1 +871,1 @@\n-                rs[i] = (int)(ROL_scalar(a,b));\n+                rs[i] = (int) (ROL_scalar(a, b));\n@@ -892,1 +892,1 @@\n-                rs[i] = (m ? (int)(ROL_scalar(a,b)) : a);\n+                rs[i] = (m ? (int) (ROL_scalar(a, b)) : a);\n@@ -910,1 +910,1 @@\n-                rs[i] = (int)(Math.min(a, b));\n+                rs[i] = (int) (Math.min(a, b));\n@@ -927,1 +927,1 @@\n-                rs[i] = (int)(Math.max(a, b));\n+                rs[i] = (int) (Math.max(a, b));\n@@ -1124,1 +1124,1 @@\n-                r &= (bits(a)==0); \/\/ accumulate so JIT can't eliminate the computation\n+                r &= (bits(a) == 0); \/\/ accumulate so JIT can't eliminate the computation\n@@ -1139,1 +1139,1 @@\n-                r &= (bits(a)<0); \/\/ accumulate so JIT can't eliminate the computation\n+                r &= (bits(a) < 0); \/\/ accumulate so JIT can't eliminate the computation\n@@ -1333,1 +1333,1 @@\n-                    int a = as[i+j];\n+                    int a = as[i + j];\n@@ -1462,1 +1462,1 @@\n-                as[i] = (int)0;\n+                as[i] = (int) 0;\n@@ -1502,1 +1502,1 @@\n-                rs[i] = (int)((a&~(c))|(b&c));\n+                rs[i] = (int) ((a &~ (c)) | (b & c));\n@@ -1526,1 +1526,1 @@\n-                    rs[i] = (int)((a&~(c))|(b&c));\n+                    rs[i] = (int) ((a &~ (c)) | (b & c));\n@@ -1544,1 +1544,1 @@\n-                rs[i] = (int)(-((int)a));\n+                rs[i] = (int) (-((int) a));\n@@ -1561,1 +1561,1 @@\n-                rs[i] = (m ? (int)(-((int)a)) : a);\n+                rs[i] = (m ? (int) (-((int) a)) : a);\n@@ -1576,1 +1576,1 @@\n-                rs[i] = (int)(Math.abs((int)a));\n+                rs[i] = (int) (Math.abs((int) a));\n@@ -1593,1 +1593,1 @@\n-                rs[i] = (m ? (int)(Math.abs((int)a)) : a);\n+                rs[i] = (m ? (int) (Math.abs((int) a)) : a);\n@@ -1609,1 +1609,1 @@\n-                rs[i] = (int)(~((int)a));\n+                rs[i] = (int) (~((int) a));\n@@ -1628,1 +1628,1 @@\n-                rs[i] = (m ? (int)(~((int)a)) : a);\n+                rs[i] = (m ? (int) (~((int) a)) : a);\n@@ -1645,1 +1645,1 @@\n-                rs[i] = (int)((a==0?0:-1));\n+                rs[i] = (int) ((a == 0 ? 0 : -1));\n@@ -1664,1 +1664,1 @@\n-                rs[i] = (m ? (int)((a==0?0:-1)) : a);\n+                rs[i] = (m ? (int) ((a == 0 ? 0 : -1)) : a);\n@@ -1683,1 +1683,1 @@\n-                rs[i] = (int)(Integer.bitCount(a));\n+                rs[i] = (int) (Integer.bitCount(a));\n@@ -1702,1 +1702,1 @@\n-                rs[i] = (m ? (int)(Integer.bitCount(a)) : a);\n+                rs[i] = (m ? (int) (Integer.bitCount(a)) : a);\n@@ -1723,1 +1723,1 @@\n-                rs[i] = (int)(TRAILING_ZEROS_COUNT_scalar(a));\n+                rs[i] = (int) (TRAILING_ZEROS_COUNT_scalar(a));\n@@ -1742,1 +1742,1 @@\n-                rs[i] = (m ? (int)(TRAILING_ZEROS_COUNT_scalar(a)) : a);\n+                rs[i] = (m ? (int) (TRAILING_ZEROS_COUNT_scalar(a)) : a);\n@@ -1759,1 +1759,1 @@\n-                rs[i] = (int)(LEADING_ZEROS_COUNT_scalar(a));\n+                rs[i] = (int) (LEADING_ZEROS_COUNT_scalar(a));\n@@ -1778,1 +1778,1 @@\n-                rs[i] = (m ? (int)(LEADING_ZEROS_COUNT_scalar(a)) : a);\n+                rs[i] = (m ? (int) (LEADING_ZEROS_COUNT_scalar(a)) : a);\n@@ -1795,1 +1795,1 @@\n-                rs[i] = (int)(REVERSE_scalar(a));\n+                rs[i] = (int) (REVERSE_scalar(a));\n@@ -1814,1 +1814,1 @@\n-                rs[i] = (m ? (int)(REVERSE_scalar(a)) : a);\n+                rs[i] = (m ? (int) (REVERSE_scalar(a)) : a);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/IntScalar.java","additions":67,"deletions":67,"binary":false,"changes":134,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -93,4 +93,4 @@\n-        a = fill(i -> (long)(2*i));\n-        b = fill(i -> (long)(i+1));\n-        c = fill(i -> (long)(i+5));\n-        r = fill(i -> (long)0);\n+        a = fill(i -> (long) (2 * i));\n+        b = fill(i -> (long) (i + 1));\n+        c = fill(i -> (long) (i + 5));\n+        r = fill(i -> (long) 0);\n@@ -607,1 +607,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i]).intoArray(r, i);\n@@ -627,1 +627,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i], vmask).intoArray(r, i);\n@@ -649,1 +649,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i]).intoArray(r, i);\n@@ -669,1 +669,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i], vmask).intoArray(r, i);\n@@ -691,1 +691,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i]).intoArray(r, i);\n@@ -711,1 +711,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i], vmask).intoArray(r, i);\n@@ -813,1 +813,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i]).intoArray(r, i);\n@@ -833,1 +833,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i], vmask).intoArray(r, i);\n@@ -851,1 +851,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i]).intoArray(r, i);\n@@ -871,1 +871,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i], vmask).intoArray(r, i);\n@@ -1223,1 +1223,1 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (long)(65535+i)).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length() - 1)), (long) (65535 + i)).intoArray(r, i);\n@@ -1575,1 +1575,1 @@\n-                    r[i]=av.lane(0);\n+                    r[i] = av.lane(0);\n@@ -1577,2 +1577,2 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n@@ -1580,4 +1580,4 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n@@ -1585,8 +1585,8 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n@@ -1594,16 +1594,16 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n@@ -1611,32 +1611,32 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n@@ -1644,64 +1644,64 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n-                    r[i+32]=av.lane(32);\n-                    r[i+33]=av.lane(33);\n-                    r[i+34]=av.lane(34);\n-                    r[i+35]=av.lane(35);\n-                    r[i+36]=av.lane(36);\n-                    r[i+37]=av.lane(37);\n-                    r[i+38]=av.lane(38);\n-                    r[i+39]=av.lane(39);\n-                    r[i+40]=av.lane(40);\n-                    r[i+41]=av.lane(41);\n-                    r[i+42]=av.lane(42);\n-                    r[i+43]=av.lane(43);\n-                    r[i+44]=av.lane(44);\n-                    r[i+45]=av.lane(45);\n-                    r[i+46]=av.lane(46);\n-                    r[i+47]=av.lane(47);\n-                    r[i+48]=av.lane(48);\n-                    r[i+49]=av.lane(49);\n-                    r[i+50]=av.lane(50);\n-                    r[i+51]=av.lane(51);\n-                    r[i+52]=av.lane(52);\n-                    r[i+53]=av.lane(53);\n-                    r[i+54]=av.lane(54);\n-                    r[i+55]=av.lane(55);\n-                    r[i+56]=av.lane(56);\n-                    r[i+57]=av.lane(57);\n-                    r[i+58]=av.lane(58);\n-                    r[i+59]=av.lane(59);\n-                    r[i+60]=av.lane(60);\n-                    r[i+61]=av.lane(61);\n-                    r[i+62]=av.lane(62);\n-                    r[i+63]=av.lane(63);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n+                    r[i + 32] = av.lane(32);\n+                    r[i + 33] = av.lane(33);\n+                    r[i + 34] = av.lane(34);\n+                    r[i + 35] = av.lane(35);\n+                    r[i + 36] = av.lane(36);\n+                    r[i + 37] = av.lane(37);\n+                    r[i + 38] = av.lane(38);\n+                    r[i + 39] = av.lane(39);\n+                    r[i + 40] = av.lane(40);\n+                    r[i + 41] = av.lane(41);\n+                    r[i + 42] = av.lane(42);\n+                    r[i + 43] = av.lane(43);\n+                    r[i + 44] = av.lane(44);\n+                    r[i + 45] = av.lane(45);\n+                    r[i + 46] = av.lane(46);\n+                    r[i + 47] = av.lane(47);\n+                    r[i + 48] = av.lane(48);\n+                    r[i + 49] = av.lane(49);\n+                    r[i + 50] = av.lane(50);\n+                    r[i + 51] = av.lane(51);\n+                    r[i + 52] = av.lane(52);\n+                    r[i + 53] = av.lane(53);\n+                    r[i + 54] = av.lane(54);\n+                    r[i + 55] = av.lane(55);\n+                    r[i + 56] = av.lane(56);\n+                    r[i + 57] = av.lane(57);\n+                    r[i + 58] = av.lane(58);\n+                    r[i + 59] = av.lane(59);\n+                    r[i + 60] = av.lane(60);\n+                    r[i + 61] = av.lane(61);\n+                    r[i + 62] = av.lane(62);\n+                    r[i + 63] = av.lane(63);\n@@ -1710,1 +1710,1 @@\n-                        r[i+j]=av.lane(j);\n+                        r[i + j] = av.lane(j);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long128Vector.java","additions":144,"deletions":144,"binary":false,"changes":288,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -93,4 +93,4 @@\n-        a = fill(i -> (long)(2*i));\n-        b = fill(i -> (long)(i+1));\n-        c = fill(i -> (long)(i+5));\n-        r = fill(i -> (long)0);\n+        a = fill(i -> (long) (2 * i));\n+        b = fill(i -> (long) (i + 1));\n+        c = fill(i -> (long) (i + 5));\n+        r = fill(i -> (long) 0);\n@@ -607,1 +607,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i]).intoArray(r, i);\n@@ -627,1 +627,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i], vmask).intoArray(r, i);\n@@ -649,1 +649,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i]).intoArray(r, i);\n@@ -669,1 +669,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i], vmask).intoArray(r, i);\n@@ -691,1 +691,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i]).intoArray(r, i);\n@@ -711,1 +711,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i], vmask).intoArray(r, i);\n@@ -813,1 +813,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i]).intoArray(r, i);\n@@ -833,1 +833,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i], vmask).intoArray(r, i);\n@@ -851,1 +851,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i]).intoArray(r, i);\n@@ -871,1 +871,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i], vmask).intoArray(r, i);\n@@ -1223,1 +1223,1 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (long)(65535+i)).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length() - 1)), (long) (65535 + i)).intoArray(r, i);\n@@ -1575,1 +1575,1 @@\n-                    r[i]=av.lane(0);\n+                    r[i] = av.lane(0);\n@@ -1577,2 +1577,2 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n@@ -1580,4 +1580,4 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n@@ -1585,8 +1585,8 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n@@ -1594,16 +1594,16 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n@@ -1611,32 +1611,32 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n@@ -1644,64 +1644,64 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n-                    r[i+32]=av.lane(32);\n-                    r[i+33]=av.lane(33);\n-                    r[i+34]=av.lane(34);\n-                    r[i+35]=av.lane(35);\n-                    r[i+36]=av.lane(36);\n-                    r[i+37]=av.lane(37);\n-                    r[i+38]=av.lane(38);\n-                    r[i+39]=av.lane(39);\n-                    r[i+40]=av.lane(40);\n-                    r[i+41]=av.lane(41);\n-                    r[i+42]=av.lane(42);\n-                    r[i+43]=av.lane(43);\n-                    r[i+44]=av.lane(44);\n-                    r[i+45]=av.lane(45);\n-                    r[i+46]=av.lane(46);\n-                    r[i+47]=av.lane(47);\n-                    r[i+48]=av.lane(48);\n-                    r[i+49]=av.lane(49);\n-                    r[i+50]=av.lane(50);\n-                    r[i+51]=av.lane(51);\n-                    r[i+52]=av.lane(52);\n-                    r[i+53]=av.lane(53);\n-                    r[i+54]=av.lane(54);\n-                    r[i+55]=av.lane(55);\n-                    r[i+56]=av.lane(56);\n-                    r[i+57]=av.lane(57);\n-                    r[i+58]=av.lane(58);\n-                    r[i+59]=av.lane(59);\n-                    r[i+60]=av.lane(60);\n-                    r[i+61]=av.lane(61);\n-                    r[i+62]=av.lane(62);\n-                    r[i+63]=av.lane(63);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n+                    r[i + 32] = av.lane(32);\n+                    r[i + 33] = av.lane(33);\n+                    r[i + 34] = av.lane(34);\n+                    r[i + 35] = av.lane(35);\n+                    r[i + 36] = av.lane(36);\n+                    r[i + 37] = av.lane(37);\n+                    r[i + 38] = av.lane(38);\n+                    r[i + 39] = av.lane(39);\n+                    r[i + 40] = av.lane(40);\n+                    r[i + 41] = av.lane(41);\n+                    r[i + 42] = av.lane(42);\n+                    r[i + 43] = av.lane(43);\n+                    r[i + 44] = av.lane(44);\n+                    r[i + 45] = av.lane(45);\n+                    r[i + 46] = av.lane(46);\n+                    r[i + 47] = av.lane(47);\n+                    r[i + 48] = av.lane(48);\n+                    r[i + 49] = av.lane(49);\n+                    r[i + 50] = av.lane(50);\n+                    r[i + 51] = av.lane(51);\n+                    r[i + 52] = av.lane(52);\n+                    r[i + 53] = av.lane(53);\n+                    r[i + 54] = av.lane(54);\n+                    r[i + 55] = av.lane(55);\n+                    r[i + 56] = av.lane(56);\n+                    r[i + 57] = av.lane(57);\n+                    r[i + 58] = av.lane(58);\n+                    r[i + 59] = av.lane(59);\n+                    r[i + 60] = av.lane(60);\n+                    r[i + 61] = av.lane(61);\n+                    r[i + 62] = av.lane(62);\n+                    r[i + 63] = av.lane(63);\n@@ -1710,1 +1710,1 @@\n-                        r[i+j]=av.lane(j);\n+                        r[i + j] = av.lane(j);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long256Vector.java","additions":144,"deletions":144,"binary":false,"changes":288,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -93,4 +93,4 @@\n-        a = fill(i -> (long)(2*i));\n-        b = fill(i -> (long)(i+1));\n-        c = fill(i -> (long)(i+5));\n-        r = fill(i -> (long)0);\n+        a = fill(i -> (long) (2 * i));\n+        b = fill(i -> (long) (i + 1));\n+        c = fill(i -> (long) (i + 5));\n+        r = fill(i -> (long) 0);\n@@ -607,1 +607,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i]).intoArray(r, i);\n@@ -627,1 +627,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i], vmask).intoArray(r, i);\n@@ -649,1 +649,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i]).intoArray(r, i);\n@@ -669,1 +669,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i], vmask).intoArray(r, i);\n@@ -691,1 +691,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i]).intoArray(r, i);\n@@ -711,1 +711,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i], vmask).intoArray(r, i);\n@@ -813,1 +813,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i]).intoArray(r, i);\n@@ -833,1 +833,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i], vmask).intoArray(r, i);\n@@ -851,1 +851,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i]).intoArray(r, i);\n@@ -871,1 +871,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i], vmask).intoArray(r, i);\n@@ -1223,1 +1223,1 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (long)(65535+i)).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length() - 1)), (long) (65535 + i)).intoArray(r, i);\n@@ -1575,1 +1575,1 @@\n-                    r[i]=av.lane(0);\n+                    r[i] = av.lane(0);\n@@ -1577,2 +1577,2 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n@@ -1580,4 +1580,4 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n@@ -1585,8 +1585,8 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n@@ -1594,16 +1594,16 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n@@ -1611,32 +1611,32 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n@@ -1644,64 +1644,64 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n-                    r[i+32]=av.lane(32);\n-                    r[i+33]=av.lane(33);\n-                    r[i+34]=av.lane(34);\n-                    r[i+35]=av.lane(35);\n-                    r[i+36]=av.lane(36);\n-                    r[i+37]=av.lane(37);\n-                    r[i+38]=av.lane(38);\n-                    r[i+39]=av.lane(39);\n-                    r[i+40]=av.lane(40);\n-                    r[i+41]=av.lane(41);\n-                    r[i+42]=av.lane(42);\n-                    r[i+43]=av.lane(43);\n-                    r[i+44]=av.lane(44);\n-                    r[i+45]=av.lane(45);\n-                    r[i+46]=av.lane(46);\n-                    r[i+47]=av.lane(47);\n-                    r[i+48]=av.lane(48);\n-                    r[i+49]=av.lane(49);\n-                    r[i+50]=av.lane(50);\n-                    r[i+51]=av.lane(51);\n-                    r[i+52]=av.lane(52);\n-                    r[i+53]=av.lane(53);\n-                    r[i+54]=av.lane(54);\n-                    r[i+55]=av.lane(55);\n-                    r[i+56]=av.lane(56);\n-                    r[i+57]=av.lane(57);\n-                    r[i+58]=av.lane(58);\n-                    r[i+59]=av.lane(59);\n-                    r[i+60]=av.lane(60);\n-                    r[i+61]=av.lane(61);\n-                    r[i+62]=av.lane(62);\n-                    r[i+63]=av.lane(63);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n+                    r[i + 32] = av.lane(32);\n+                    r[i + 33] = av.lane(33);\n+                    r[i + 34] = av.lane(34);\n+                    r[i + 35] = av.lane(35);\n+                    r[i + 36] = av.lane(36);\n+                    r[i + 37] = av.lane(37);\n+                    r[i + 38] = av.lane(38);\n+                    r[i + 39] = av.lane(39);\n+                    r[i + 40] = av.lane(40);\n+                    r[i + 41] = av.lane(41);\n+                    r[i + 42] = av.lane(42);\n+                    r[i + 43] = av.lane(43);\n+                    r[i + 44] = av.lane(44);\n+                    r[i + 45] = av.lane(45);\n+                    r[i + 46] = av.lane(46);\n+                    r[i + 47] = av.lane(47);\n+                    r[i + 48] = av.lane(48);\n+                    r[i + 49] = av.lane(49);\n+                    r[i + 50] = av.lane(50);\n+                    r[i + 51] = av.lane(51);\n+                    r[i + 52] = av.lane(52);\n+                    r[i + 53] = av.lane(53);\n+                    r[i + 54] = av.lane(54);\n+                    r[i + 55] = av.lane(55);\n+                    r[i + 56] = av.lane(56);\n+                    r[i + 57] = av.lane(57);\n+                    r[i + 58] = av.lane(58);\n+                    r[i + 59] = av.lane(59);\n+                    r[i + 60] = av.lane(60);\n+                    r[i + 61] = av.lane(61);\n+                    r[i + 62] = av.lane(62);\n+                    r[i + 63] = av.lane(63);\n@@ -1710,1 +1710,1 @@\n-                        r[i+j]=av.lane(j);\n+                        r[i + j] = av.lane(j);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long512Vector.java","additions":144,"deletions":144,"binary":false,"changes":288,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -93,4 +93,4 @@\n-        a = fill(i -> (long)(2*i));\n-        b = fill(i -> (long)(i+1));\n-        c = fill(i -> (long)(i+5));\n-        r = fill(i -> (long)0);\n+        a = fill(i -> (long) (2 * i));\n+        b = fill(i -> (long) (i + 1));\n+        c = fill(i -> (long) (i + 5));\n+        r = fill(i -> (long) 0);\n@@ -607,1 +607,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i]).intoArray(r, i);\n@@ -627,1 +627,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i], vmask).intoArray(r, i);\n@@ -649,1 +649,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i]).intoArray(r, i);\n@@ -669,1 +669,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i], vmask).intoArray(r, i);\n@@ -691,1 +691,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i]).intoArray(r, i);\n@@ -711,1 +711,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i], vmask).intoArray(r, i);\n@@ -813,1 +813,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i]).intoArray(r, i);\n@@ -833,1 +833,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i], vmask).intoArray(r, i);\n@@ -851,1 +851,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i]).intoArray(r, i);\n@@ -871,1 +871,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i], vmask).intoArray(r, i);\n@@ -1223,1 +1223,1 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (long)(65535+i)).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length() - 1)), (long) (65535 + i)).intoArray(r, i);\n@@ -1575,1 +1575,1 @@\n-                    r[i]=av.lane(0);\n+                    r[i] = av.lane(0);\n@@ -1577,2 +1577,2 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n@@ -1580,4 +1580,4 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n@@ -1585,8 +1585,8 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n@@ -1594,16 +1594,16 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n@@ -1611,32 +1611,32 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n@@ -1644,64 +1644,64 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n-                    r[i+32]=av.lane(32);\n-                    r[i+33]=av.lane(33);\n-                    r[i+34]=av.lane(34);\n-                    r[i+35]=av.lane(35);\n-                    r[i+36]=av.lane(36);\n-                    r[i+37]=av.lane(37);\n-                    r[i+38]=av.lane(38);\n-                    r[i+39]=av.lane(39);\n-                    r[i+40]=av.lane(40);\n-                    r[i+41]=av.lane(41);\n-                    r[i+42]=av.lane(42);\n-                    r[i+43]=av.lane(43);\n-                    r[i+44]=av.lane(44);\n-                    r[i+45]=av.lane(45);\n-                    r[i+46]=av.lane(46);\n-                    r[i+47]=av.lane(47);\n-                    r[i+48]=av.lane(48);\n-                    r[i+49]=av.lane(49);\n-                    r[i+50]=av.lane(50);\n-                    r[i+51]=av.lane(51);\n-                    r[i+52]=av.lane(52);\n-                    r[i+53]=av.lane(53);\n-                    r[i+54]=av.lane(54);\n-                    r[i+55]=av.lane(55);\n-                    r[i+56]=av.lane(56);\n-                    r[i+57]=av.lane(57);\n-                    r[i+58]=av.lane(58);\n-                    r[i+59]=av.lane(59);\n-                    r[i+60]=av.lane(60);\n-                    r[i+61]=av.lane(61);\n-                    r[i+62]=av.lane(62);\n-                    r[i+63]=av.lane(63);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n+                    r[i + 32] = av.lane(32);\n+                    r[i + 33] = av.lane(33);\n+                    r[i + 34] = av.lane(34);\n+                    r[i + 35] = av.lane(35);\n+                    r[i + 36] = av.lane(36);\n+                    r[i + 37] = av.lane(37);\n+                    r[i + 38] = av.lane(38);\n+                    r[i + 39] = av.lane(39);\n+                    r[i + 40] = av.lane(40);\n+                    r[i + 41] = av.lane(41);\n+                    r[i + 42] = av.lane(42);\n+                    r[i + 43] = av.lane(43);\n+                    r[i + 44] = av.lane(44);\n+                    r[i + 45] = av.lane(45);\n+                    r[i + 46] = av.lane(46);\n+                    r[i + 47] = av.lane(47);\n+                    r[i + 48] = av.lane(48);\n+                    r[i + 49] = av.lane(49);\n+                    r[i + 50] = av.lane(50);\n+                    r[i + 51] = av.lane(51);\n+                    r[i + 52] = av.lane(52);\n+                    r[i + 53] = av.lane(53);\n+                    r[i + 54] = av.lane(54);\n+                    r[i + 55] = av.lane(55);\n+                    r[i + 56] = av.lane(56);\n+                    r[i + 57] = av.lane(57);\n+                    r[i + 58] = av.lane(58);\n+                    r[i + 59] = av.lane(59);\n+                    r[i + 60] = av.lane(60);\n+                    r[i + 61] = av.lane(61);\n+                    r[i + 62] = av.lane(62);\n+                    r[i + 63] = av.lane(63);\n@@ -1710,1 +1710,1 @@\n-                        r[i+j]=av.lane(j);\n+                        r[i + j] = av.lane(j);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Long64Vector.java","additions":144,"deletions":144,"binary":false,"changes":288,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -93,4 +93,4 @@\n-        a = fill(i -> (long)(2*i));\n-        b = fill(i -> (long)(i+1));\n-        c = fill(i -> (long)(i+5));\n-        r = fill(i -> (long)0);\n+        a = fill(i -> (long) (2 * i));\n+        b = fill(i -> (long) (i + 1));\n+        c = fill(i -> (long) (i + 5));\n+        r = fill(i -> (long) 0);\n@@ -607,1 +607,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i]).intoArray(r, i);\n@@ -627,1 +627,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i], vmask).intoArray(r, i);\n@@ -649,1 +649,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i]).intoArray(r, i);\n@@ -669,1 +669,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i], vmask).intoArray(r, i);\n@@ -691,1 +691,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i]).intoArray(r, i);\n@@ -711,1 +711,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i], vmask).intoArray(r, i);\n@@ -813,1 +813,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i]).intoArray(r, i);\n@@ -833,1 +833,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i], vmask).intoArray(r, i);\n@@ -851,1 +851,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i]).intoArray(r, i);\n@@ -871,1 +871,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i], vmask).intoArray(r, i);\n@@ -1223,1 +1223,1 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (long)(65535+i)).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length() - 1)), (long) (65535 + i)).intoArray(r, i);\n@@ -1575,1 +1575,1 @@\n-                    r[i]=av.lane(0);\n+                    r[i] = av.lane(0);\n@@ -1577,2 +1577,2 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n@@ -1580,4 +1580,4 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n@@ -1585,8 +1585,8 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n@@ -1594,16 +1594,16 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n@@ -1611,32 +1611,32 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n@@ -1644,64 +1644,64 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n-                    r[i+32]=av.lane(32);\n-                    r[i+33]=av.lane(33);\n-                    r[i+34]=av.lane(34);\n-                    r[i+35]=av.lane(35);\n-                    r[i+36]=av.lane(36);\n-                    r[i+37]=av.lane(37);\n-                    r[i+38]=av.lane(38);\n-                    r[i+39]=av.lane(39);\n-                    r[i+40]=av.lane(40);\n-                    r[i+41]=av.lane(41);\n-                    r[i+42]=av.lane(42);\n-                    r[i+43]=av.lane(43);\n-                    r[i+44]=av.lane(44);\n-                    r[i+45]=av.lane(45);\n-                    r[i+46]=av.lane(46);\n-                    r[i+47]=av.lane(47);\n-                    r[i+48]=av.lane(48);\n-                    r[i+49]=av.lane(49);\n-                    r[i+50]=av.lane(50);\n-                    r[i+51]=av.lane(51);\n-                    r[i+52]=av.lane(52);\n-                    r[i+53]=av.lane(53);\n-                    r[i+54]=av.lane(54);\n-                    r[i+55]=av.lane(55);\n-                    r[i+56]=av.lane(56);\n-                    r[i+57]=av.lane(57);\n-                    r[i+58]=av.lane(58);\n-                    r[i+59]=av.lane(59);\n-                    r[i+60]=av.lane(60);\n-                    r[i+61]=av.lane(61);\n-                    r[i+62]=av.lane(62);\n-                    r[i+63]=av.lane(63);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n+                    r[i + 32] = av.lane(32);\n+                    r[i + 33] = av.lane(33);\n+                    r[i + 34] = av.lane(34);\n+                    r[i + 35] = av.lane(35);\n+                    r[i + 36] = av.lane(36);\n+                    r[i + 37] = av.lane(37);\n+                    r[i + 38] = av.lane(38);\n+                    r[i + 39] = av.lane(39);\n+                    r[i + 40] = av.lane(40);\n+                    r[i + 41] = av.lane(41);\n+                    r[i + 42] = av.lane(42);\n+                    r[i + 43] = av.lane(43);\n+                    r[i + 44] = av.lane(44);\n+                    r[i + 45] = av.lane(45);\n+                    r[i + 46] = av.lane(46);\n+                    r[i + 47] = av.lane(47);\n+                    r[i + 48] = av.lane(48);\n+                    r[i + 49] = av.lane(49);\n+                    r[i + 50] = av.lane(50);\n+                    r[i + 51] = av.lane(51);\n+                    r[i + 52] = av.lane(52);\n+                    r[i + 53] = av.lane(53);\n+                    r[i + 54] = av.lane(54);\n+                    r[i + 55] = av.lane(55);\n+                    r[i + 56] = av.lane(56);\n+                    r[i + 57] = av.lane(57);\n+                    r[i + 58] = av.lane(58);\n+                    r[i + 59] = av.lane(59);\n+                    r[i + 60] = av.lane(60);\n+                    r[i + 61] = av.lane(61);\n+                    r[i + 62] = av.lane(62);\n+                    r[i + 63] = av.lane(63);\n@@ -1710,1 +1710,1 @@\n-                        r[i+j]=av.lane(j);\n+                        r[i + j] = av.lane(j);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/LongMaxVector.java","additions":144,"deletions":144,"binary":false,"changes":288,"status":"modified"},{"patch":"@@ -64,4 +64,4 @@\n-        as = fill(i -> (long)(2*i));\n-        bs = fill(i -> (long)(i+1));\n-        cs = fill(i -> (long)(i+5));\n-        rs = fill(i -> (long)0);\n+        as = fill(i -> (long) (2 * i));\n+        bs = fill(i -> (long) (i + 1));\n+        cs = fill(i -> (long) (i + 5));\n+        rs = fill(i -> (long) 0);\n@@ -72,1 +72,1 @@\n-        ss = fillInt(size, i -> RANDOM.nextInt(Math.max(i,1)));\n+        ss = fillInt(size, i -> RANDOM.nextInt(Math.max(i, 1)));\n@@ -125,1 +125,1 @@\n-        return Long.rotateLeft(a, ((int)b));\n+        return Long.rotateLeft(a, ((int) b));\n@@ -129,1 +129,1 @@\n-        return Long.rotateRight(a, ((int)b));\n+        return Long.rotateRight(a, ((int) b));\n@@ -154,1 +154,1 @@\n-                rs[i] = (long)(a + b);\n+                rs[i] = (long) (a + b);\n@@ -173,1 +173,1 @@\n-                    rs[i] = (long)(a + b);\n+                    rs[i] = (long) (a + b);\n@@ -192,1 +192,1 @@\n-                rs[i] = (long)(a - b);\n+                rs[i] = (long) (a - b);\n@@ -211,1 +211,1 @@\n-                    rs[i] = (long)(a - b);\n+                    rs[i] = (long) (a - b);\n@@ -230,1 +230,1 @@\n-                rs[i] = (long)(a * b);\n+                rs[i] = (long) (a * b);\n@@ -249,1 +249,1 @@\n-                    rs[i] = (long)(a * b);\n+                    rs[i] = (long) (a * b);\n@@ -270,1 +270,1 @@\n-                rs[i] = (long)((a)!=0?a:b);\n+                rs[i] = (long) ((a) != 0 ? a : b);\n@@ -289,1 +289,1 @@\n-                    rs[i] = (long)((a)!=0?a:b);\n+                    rs[i] = (long) ((a) != 0 ? a : b);\n@@ -309,1 +309,1 @@\n-                rs[i] = (long)(a & b);\n+                rs[i] = (long) (a & b);\n@@ -330,1 +330,1 @@\n-                    rs[i] = (long)(a & b);\n+                    rs[i] = (long) (a & b);\n@@ -351,1 +351,1 @@\n-                rs[i] = (long)(a & ~b);\n+                rs[i] = (long) (a & ~b);\n@@ -372,1 +372,1 @@\n-                    rs[i] = (long)(a & ~b);\n+                    rs[i] = (long) (a & ~b);\n@@ -393,1 +393,1 @@\n-                rs[i] = (long)(a | b);\n+                rs[i] = (long) (a | b);\n@@ -414,1 +414,1 @@\n-                    rs[i] = (long)(a | b);\n+                    rs[i] = (long) (a | b);\n@@ -435,1 +435,1 @@\n-                rs[i] = (long)(a ^ b);\n+                rs[i] = (long) (a ^ b);\n@@ -456,1 +456,1 @@\n-                    rs[i] = (long)(a ^ b);\n+                    rs[i] = (long) (a ^ b);\n@@ -477,1 +477,1 @@\n-                rs[i] = (long)((a << b));\n+                rs[i] = (long) ((a << b));\n@@ -498,1 +498,1 @@\n-                    rs[i] = (long)((a << b));\n+                    rs[i] = (long) ((a << b));\n@@ -523,1 +523,1 @@\n-                rs[i] = (long)((a >> b));\n+                rs[i] = (long) ((a >> b));\n@@ -544,1 +544,1 @@\n-                    rs[i] = (long)((a >> b));\n+                    rs[i] = (long) ((a >> b));\n@@ -569,1 +569,1 @@\n-                rs[i] = (long)((a >>> b));\n+                rs[i] = (long) ((a >>> b));\n@@ -590,1 +590,1 @@\n-                    rs[i] = (long)((a >>> b));\n+                    rs[i] = (long) ((a >>> b));\n@@ -615,1 +615,1 @@\n-                rs[i] = (long)((a << b));\n+                rs[i] = (long) ((a << b));\n@@ -636,1 +636,1 @@\n-                rs[i] = (m ? (long)((a << b)) : a);\n+                rs[i] = (m ? (long) ((a << b)) : a);\n@@ -659,1 +659,1 @@\n-                rs[i] = (long)((a >>> b));\n+                rs[i] = (long) ((a >>> b));\n@@ -680,1 +680,1 @@\n-                rs[i] = (m ? (long)((a >>> b)) : a);\n+                rs[i] = (m ? (long) ((a >>> b)) : a);\n@@ -703,1 +703,1 @@\n-                rs[i] = (long)((a >> b));\n+                rs[i] = (long) ((a >> b));\n@@ -724,1 +724,1 @@\n-                rs[i] = (m ? (long)((a >> b)) : a);\n+                rs[i] = (m ? (long) ((a >> b)) : a);\n@@ -747,1 +747,1 @@\n-                rs[i] = (long)(ROR_scalar(a,b));\n+                rs[i] = (long) (ROR_scalar(a, b));\n@@ -768,1 +768,1 @@\n-                    rs[i] = (long)(ROR_scalar(a,b));\n+                    rs[i] = (long) (ROR_scalar(a, b));\n@@ -789,1 +789,1 @@\n-                rs[i] = (long)(ROL_scalar(a,b));\n+                rs[i] = (long) (ROL_scalar(a, b));\n@@ -810,1 +810,1 @@\n-                    rs[i] = (long)(ROL_scalar(a,b));\n+                    rs[i] = (long) (ROL_scalar(a, b));\n@@ -831,1 +831,1 @@\n-                rs[i] = (long)(ROR_scalar(a,b));\n+                rs[i] = (long) (ROR_scalar(a, b));\n@@ -852,1 +852,1 @@\n-                rs[i] = (m ? (long)(ROR_scalar(a,b)) : a);\n+                rs[i] = (m ? (long) (ROR_scalar(a, b)) : a);\n@@ -871,1 +871,1 @@\n-                rs[i] = (long)(ROL_scalar(a,b));\n+                rs[i] = (long) (ROL_scalar(a, b));\n@@ -892,1 +892,1 @@\n-                rs[i] = (m ? (long)(ROL_scalar(a,b)) : a);\n+                rs[i] = (m ? (long) (ROL_scalar(a, b)) : a);\n@@ -910,1 +910,1 @@\n-                rs[i] = (long)(Math.min(a, b));\n+                rs[i] = (long) (Math.min(a, b));\n@@ -927,1 +927,1 @@\n-                rs[i] = (long)(Math.max(a, b));\n+                rs[i] = (long) (Math.max(a, b));\n@@ -1124,1 +1124,1 @@\n-                r &= (bits(a)==0); \/\/ accumulate so JIT can't eliminate the computation\n+                r &= (bits(a) == 0); \/\/ accumulate so JIT can't eliminate the computation\n@@ -1139,1 +1139,1 @@\n-                r &= (bits(a)<0); \/\/ accumulate so JIT can't eliminate the computation\n+                r &= (bits(a) < 0); \/\/ accumulate so JIT can't eliminate the computation\n@@ -1333,1 +1333,1 @@\n-                    long a = as[i+j];\n+                    long a = as[i + j];\n@@ -1462,1 +1462,1 @@\n-                as[i] = (long)0;\n+                as[i] = (long) 0;\n@@ -1502,1 +1502,1 @@\n-                rs[i] = (long)((a&~(c))|(b&c));\n+                rs[i] = (long) ((a &~ (c)) | (b & c));\n@@ -1526,1 +1526,1 @@\n-                    rs[i] = (long)((a&~(c))|(b&c));\n+                    rs[i] = (long) ((a &~ (c)) | (b & c));\n@@ -1544,1 +1544,1 @@\n-                rs[i] = (long)(-((long)a));\n+                rs[i] = (long) (-((long) a));\n@@ -1561,1 +1561,1 @@\n-                rs[i] = (m ? (long)(-((long)a)) : a);\n+                rs[i] = (m ? (long) (-((long) a)) : a);\n@@ -1576,1 +1576,1 @@\n-                rs[i] = (long)(Math.abs((long)a));\n+                rs[i] = (long) (Math.abs((long) a));\n@@ -1593,1 +1593,1 @@\n-                rs[i] = (m ? (long)(Math.abs((long)a)) : a);\n+                rs[i] = (m ? (long) (Math.abs((long) a)) : a);\n@@ -1609,1 +1609,1 @@\n-                rs[i] = (long)(~((long)a));\n+                rs[i] = (long) (~((long) a));\n@@ -1628,1 +1628,1 @@\n-                rs[i] = (m ? (long)(~((long)a)) : a);\n+                rs[i] = (m ? (long) (~((long) a)) : a);\n@@ -1645,1 +1645,1 @@\n-                rs[i] = (long)((a==0?0:-1));\n+                rs[i] = (long) ((a == 0 ? 0 : -1));\n@@ -1664,1 +1664,1 @@\n-                rs[i] = (m ? (long)((a==0?0:-1)) : a);\n+                rs[i] = (m ? (long) ((a == 0 ? 0 : -1)) : a);\n@@ -1683,1 +1683,1 @@\n-                rs[i] = (long)(Long.bitCount(a));\n+                rs[i] = (long) (Long.bitCount(a));\n@@ -1702,1 +1702,1 @@\n-                rs[i] = (m ? (long)(Long.bitCount(a)) : a);\n+                rs[i] = (m ? (long) (Long.bitCount(a)) : a);\n@@ -1723,1 +1723,1 @@\n-                rs[i] = (long)(TRAILING_ZEROS_COUNT_scalar(a));\n+                rs[i] = (long) (TRAILING_ZEROS_COUNT_scalar(a));\n@@ -1742,1 +1742,1 @@\n-                rs[i] = (m ? (long)(TRAILING_ZEROS_COUNT_scalar(a)) : a);\n+                rs[i] = (m ? (long) (TRAILING_ZEROS_COUNT_scalar(a)) : a);\n@@ -1759,1 +1759,1 @@\n-                rs[i] = (long)(LEADING_ZEROS_COUNT_scalar(a));\n+                rs[i] = (long) (LEADING_ZEROS_COUNT_scalar(a));\n@@ -1778,1 +1778,1 @@\n-                rs[i] = (m ? (long)(LEADING_ZEROS_COUNT_scalar(a)) : a);\n+                rs[i] = (m ? (long) (LEADING_ZEROS_COUNT_scalar(a)) : a);\n@@ -1795,1 +1795,1 @@\n-                rs[i] = (long)(REVERSE_scalar(a));\n+                rs[i] = (long) (REVERSE_scalar(a));\n@@ -1814,1 +1814,1 @@\n-                rs[i] = (m ? (long)(REVERSE_scalar(a)) : a);\n+                rs[i] = (m ? (long) (REVERSE_scalar(a)) : a);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/LongScalar.java","additions":67,"deletions":67,"binary":false,"changes":134,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -93,4 +93,4 @@\n-        a = fill(i -> (short)(2*i));\n-        b = fill(i -> (short)(i+1));\n-        c = fill(i -> (short)(i+5));\n-        r = fill(i -> (short)0);\n+        a = fill(i -> (short) (2 * i));\n+        b = fill(i -> (short) (i + 1));\n+        c = fill(i -> (short) (i + 5));\n+        r = fill(i -> (short) 0);\n@@ -611,1 +611,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i]).intoArray(r, i);\n@@ -631,1 +631,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i], vmask).intoArray(r, i);\n@@ -653,1 +653,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i]).intoArray(r, i);\n@@ -673,1 +673,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i], vmask).intoArray(r, i);\n@@ -695,1 +695,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i]).intoArray(r, i);\n@@ -715,1 +715,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i], vmask).intoArray(r, i);\n@@ -813,1 +813,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i]).intoArray(r, i);\n@@ -833,1 +833,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i], vmask).intoArray(r, i);\n@@ -851,1 +851,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i]).intoArray(r, i);\n@@ -871,1 +871,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i], vmask).intoArray(r, i);\n@@ -1223,1 +1223,1 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (short)(65535+i)).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length() - 1)), (short) (65535 + i)).intoArray(r, i);\n@@ -1575,1 +1575,1 @@\n-                    r[i]=av.lane(0);\n+                    r[i] = av.lane(0);\n@@ -1577,2 +1577,2 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n@@ -1580,4 +1580,4 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n@@ -1585,8 +1585,8 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n@@ -1594,16 +1594,16 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n@@ -1611,32 +1611,32 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n@@ -1644,64 +1644,64 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n-                    r[i+32]=av.lane(32);\n-                    r[i+33]=av.lane(33);\n-                    r[i+34]=av.lane(34);\n-                    r[i+35]=av.lane(35);\n-                    r[i+36]=av.lane(36);\n-                    r[i+37]=av.lane(37);\n-                    r[i+38]=av.lane(38);\n-                    r[i+39]=av.lane(39);\n-                    r[i+40]=av.lane(40);\n-                    r[i+41]=av.lane(41);\n-                    r[i+42]=av.lane(42);\n-                    r[i+43]=av.lane(43);\n-                    r[i+44]=av.lane(44);\n-                    r[i+45]=av.lane(45);\n-                    r[i+46]=av.lane(46);\n-                    r[i+47]=av.lane(47);\n-                    r[i+48]=av.lane(48);\n-                    r[i+49]=av.lane(49);\n-                    r[i+50]=av.lane(50);\n-                    r[i+51]=av.lane(51);\n-                    r[i+52]=av.lane(52);\n-                    r[i+53]=av.lane(53);\n-                    r[i+54]=av.lane(54);\n-                    r[i+55]=av.lane(55);\n-                    r[i+56]=av.lane(56);\n-                    r[i+57]=av.lane(57);\n-                    r[i+58]=av.lane(58);\n-                    r[i+59]=av.lane(59);\n-                    r[i+60]=av.lane(60);\n-                    r[i+61]=av.lane(61);\n-                    r[i+62]=av.lane(62);\n-                    r[i+63]=av.lane(63);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n+                    r[i + 32] = av.lane(32);\n+                    r[i + 33] = av.lane(33);\n+                    r[i + 34] = av.lane(34);\n+                    r[i + 35] = av.lane(35);\n+                    r[i + 36] = av.lane(36);\n+                    r[i + 37] = av.lane(37);\n+                    r[i + 38] = av.lane(38);\n+                    r[i + 39] = av.lane(39);\n+                    r[i + 40] = av.lane(40);\n+                    r[i + 41] = av.lane(41);\n+                    r[i + 42] = av.lane(42);\n+                    r[i + 43] = av.lane(43);\n+                    r[i + 44] = av.lane(44);\n+                    r[i + 45] = av.lane(45);\n+                    r[i + 46] = av.lane(46);\n+                    r[i + 47] = av.lane(47);\n+                    r[i + 48] = av.lane(48);\n+                    r[i + 49] = av.lane(49);\n+                    r[i + 50] = av.lane(50);\n+                    r[i + 51] = av.lane(51);\n+                    r[i + 52] = av.lane(52);\n+                    r[i + 53] = av.lane(53);\n+                    r[i + 54] = av.lane(54);\n+                    r[i + 55] = av.lane(55);\n+                    r[i + 56] = av.lane(56);\n+                    r[i + 57] = av.lane(57);\n+                    r[i + 58] = av.lane(58);\n+                    r[i + 59] = av.lane(59);\n+                    r[i + 60] = av.lane(60);\n+                    r[i + 61] = av.lane(61);\n+                    r[i + 62] = av.lane(62);\n+                    r[i + 63] = av.lane(63);\n@@ -1710,1 +1710,1 @@\n-                        r[i+j]=av.lane(j);\n+                        r[i + j] = av.lane(j);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short128Vector.java","additions":144,"deletions":144,"binary":false,"changes":288,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -93,4 +93,4 @@\n-        a = fill(i -> (short)(2*i));\n-        b = fill(i -> (short)(i+1));\n-        c = fill(i -> (short)(i+5));\n-        r = fill(i -> (short)0);\n+        a = fill(i -> (short) (2 * i));\n+        b = fill(i -> (short) (i + 1));\n+        c = fill(i -> (short) (i + 5));\n+        r = fill(i -> (short) 0);\n@@ -611,1 +611,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i]).intoArray(r, i);\n@@ -631,1 +631,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i], vmask).intoArray(r, i);\n@@ -653,1 +653,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i]).intoArray(r, i);\n@@ -673,1 +673,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i], vmask).intoArray(r, i);\n@@ -695,1 +695,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i]).intoArray(r, i);\n@@ -715,1 +715,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i], vmask).intoArray(r, i);\n@@ -813,1 +813,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i]).intoArray(r, i);\n@@ -833,1 +833,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i], vmask).intoArray(r, i);\n@@ -851,1 +851,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i]).intoArray(r, i);\n@@ -871,1 +871,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i], vmask).intoArray(r, i);\n@@ -1223,1 +1223,1 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (short)(65535+i)).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length() - 1)), (short) (65535 + i)).intoArray(r, i);\n@@ -1575,1 +1575,1 @@\n-                    r[i]=av.lane(0);\n+                    r[i] = av.lane(0);\n@@ -1577,2 +1577,2 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n@@ -1580,4 +1580,4 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n@@ -1585,8 +1585,8 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n@@ -1594,16 +1594,16 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n@@ -1611,32 +1611,32 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n@@ -1644,64 +1644,64 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n-                    r[i+32]=av.lane(32);\n-                    r[i+33]=av.lane(33);\n-                    r[i+34]=av.lane(34);\n-                    r[i+35]=av.lane(35);\n-                    r[i+36]=av.lane(36);\n-                    r[i+37]=av.lane(37);\n-                    r[i+38]=av.lane(38);\n-                    r[i+39]=av.lane(39);\n-                    r[i+40]=av.lane(40);\n-                    r[i+41]=av.lane(41);\n-                    r[i+42]=av.lane(42);\n-                    r[i+43]=av.lane(43);\n-                    r[i+44]=av.lane(44);\n-                    r[i+45]=av.lane(45);\n-                    r[i+46]=av.lane(46);\n-                    r[i+47]=av.lane(47);\n-                    r[i+48]=av.lane(48);\n-                    r[i+49]=av.lane(49);\n-                    r[i+50]=av.lane(50);\n-                    r[i+51]=av.lane(51);\n-                    r[i+52]=av.lane(52);\n-                    r[i+53]=av.lane(53);\n-                    r[i+54]=av.lane(54);\n-                    r[i+55]=av.lane(55);\n-                    r[i+56]=av.lane(56);\n-                    r[i+57]=av.lane(57);\n-                    r[i+58]=av.lane(58);\n-                    r[i+59]=av.lane(59);\n-                    r[i+60]=av.lane(60);\n-                    r[i+61]=av.lane(61);\n-                    r[i+62]=av.lane(62);\n-                    r[i+63]=av.lane(63);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n+                    r[i + 32] = av.lane(32);\n+                    r[i + 33] = av.lane(33);\n+                    r[i + 34] = av.lane(34);\n+                    r[i + 35] = av.lane(35);\n+                    r[i + 36] = av.lane(36);\n+                    r[i + 37] = av.lane(37);\n+                    r[i + 38] = av.lane(38);\n+                    r[i + 39] = av.lane(39);\n+                    r[i + 40] = av.lane(40);\n+                    r[i + 41] = av.lane(41);\n+                    r[i + 42] = av.lane(42);\n+                    r[i + 43] = av.lane(43);\n+                    r[i + 44] = av.lane(44);\n+                    r[i + 45] = av.lane(45);\n+                    r[i + 46] = av.lane(46);\n+                    r[i + 47] = av.lane(47);\n+                    r[i + 48] = av.lane(48);\n+                    r[i + 49] = av.lane(49);\n+                    r[i + 50] = av.lane(50);\n+                    r[i + 51] = av.lane(51);\n+                    r[i + 52] = av.lane(52);\n+                    r[i + 53] = av.lane(53);\n+                    r[i + 54] = av.lane(54);\n+                    r[i + 55] = av.lane(55);\n+                    r[i + 56] = av.lane(56);\n+                    r[i + 57] = av.lane(57);\n+                    r[i + 58] = av.lane(58);\n+                    r[i + 59] = av.lane(59);\n+                    r[i + 60] = av.lane(60);\n+                    r[i + 61] = av.lane(61);\n+                    r[i + 62] = av.lane(62);\n+                    r[i + 63] = av.lane(63);\n@@ -1710,1 +1710,1 @@\n-                        r[i+j]=av.lane(j);\n+                        r[i + j] = av.lane(j);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short256Vector.java","additions":144,"deletions":144,"binary":false,"changes":288,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -93,4 +93,4 @@\n-        a = fill(i -> (short)(2*i));\n-        b = fill(i -> (short)(i+1));\n-        c = fill(i -> (short)(i+5));\n-        r = fill(i -> (short)0);\n+        a = fill(i -> (short) (2 * i));\n+        b = fill(i -> (short) (i + 1));\n+        c = fill(i -> (short) (i + 5));\n+        r = fill(i -> (short) 0);\n@@ -611,1 +611,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i]).intoArray(r, i);\n@@ -631,1 +631,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i], vmask).intoArray(r, i);\n@@ -653,1 +653,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i]).intoArray(r, i);\n@@ -673,1 +673,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i], vmask).intoArray(r, i);\n@@ -695,1 +695,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i]).intoArray(r, i);\n@@ -715,1 +715,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i], vmask).intoArray(r, i);\n@@ -813,1 +813,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i]).intoArray(r, i);\n@@ -833,1 +833,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i], vmask).intoArray(r, i);\n@@ -851,1 +851,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i]).intoArray(r, i);\n@@ -871,1 +871,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i], vmask).intoArray(r, i);\n@@ -1223,1 +1223,1 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (short)(65535+i)).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length() - 1)), (short) (65535 + i)).intoArray(r, i);\n@@ -1575,1 +1575,1 @@\n-                    r[i]=av.lane(0);\n+                    r[i] = av.lane(0);\n@@ -1577,2 +1577,2 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n@@ -1580,4 +1580,4 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n@@ -1585,8 +1585,8 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n@@ -1594,16 +1594,16 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n@@ -1611,32 +1611,32 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n@@ -1644,64 +1644,64 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n-                    r[i+32]=av.lane(32);\n-                    r[i+33]=av.lane(33);\n-                    r[i+34]=av.lane(34);\n-                    r[i+35]=av.lane(35);\n-                    r[i+36]=av.lane(36);\n-                    r[i+37]=av.lane(37);\n-                    r[i+38]=av.lane(38);\n-                    r[i+39]=av.lane(39);\n-                    r[i+40]=av.lane(40);\n-                    r[i+41]=av.lane(41);\n-                    r[i+42]=av.lane(42);\n-                    r[i+43]=av.lane(43);\n-                    r[i+44]=av.lane(44);\n-                    r[i+45]=av.lane(45);\n-                    r[i+46]=av.lane(46);\n-                    r[i+47]=av.lane(47);\n-                    r[i+48]=av.lane(48);\n-                    r[i+49]=av.lane(49);\n-                    r[i+50]=av.lane(50);\n-                    r[i+51]=av.lane(51);\n-                    r[i+52]=av.lane(52);\n-                    r[i+53]=av.lane(53);\n-                    r[i+54]=av.lane(54);\n-                    r[i+55]=av.lane(55);\n-                    r[i+56]=av.lane(56);\n-                    r[i+57]=av.lane(57);\n-                    r[i+58]=av.lane(58);\n-                    r[i+59]=av.lane(59);\n-                    r[i+60]=av.lane(60);\n-                    r[i+61]=av.lane(61);\n-                    r[i+62]=av.lane(62);\n-                    r[i+63]=av.lane(63);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n+                    r[i + 32] = av.lane(32);\n+                    r[i + 33] = av.lane(33);\n+                    r[i + 34] = av.lane(34);\n+                    r[i + 35] = av.lane(35);\n+                    r[i + 36] = av.lane(36);\n+                    r[i + 37] = av.lane(37);\n+                    r[i + 38] = av.lane(38);\n+                    r[i + 39] = av.lane(39);\n+                    r[i + 40] = av.lane(40);\n+                    r[i + 41] = av.lane(41);\n+                    r[i + 42] = av.lane(42);\n+                    r[i + 43] = av.lane(43);\n+                    r[i + 44] = av.lane(44);\n+                    r[i + 45] = av.lane(45);\n+                    r[i + 46] = av.lane(46);\n+                    r[i + 47] = av.lane(47);\n+                    r[i + 48] = av.lane(48);\n+                    r[i + 49] = av.lane(49);\n+                    r[i + 50] = av.lane(50);\n+                    r[i + 51] = av.lane(51);\n+                    r[i + 52] = av.lane(52);\n+                    r[i + 53] = av.lane(53);\n+                    r[i + 54] = av.lane(54);\n+                    r[i + 55] = av.lane(55);\n+                    r[i + 56] = av.lane(56);\n+                    r[i + 57] = av.lane(57);\n+                    r[i + 58] = av.lane(58);\n+                    r[i + 59] = av.lane(59);\n+                    r[i + 60] = av.lane(60);\n+                    r[i + 61] = av.lane(61);\n+                    r[i + 62] = av.lane(62);\n+                    r[i + 63] = av.lane(63);\n@@ -1710,1 +1710,1 @@\n-                        r[i+j]=av.lane(j);\n+                        r[i + j] = av.lane(j);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short512Vector.java","additions":144,"deletions":144,"binary":false,"changes":288,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -93,4 +93,4 @@\n-        a = fill(i -> (short)(2*i));\n-        b = fill(i -> (short)(i+1));\n-        c = fill(i -> (short)(i+5));\n-        r = fill(i -> (short)0);\n+        a = fill(i -> (short) (2 * i));\n+        b = fill(i -> (short) (i + 1));\n+        c = fill(i -> (short) (i + 5));\n+        r = fill(i -> (short) 0);\n@@ -611,1 +611,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i]).intoArray(r, i);\n@@ -631,1 +631,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i], vmask).intoArray(r, i);\n@@ -653,1 +653,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i]).intoArray(r, i);\n@@ -673,1 +673,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i], vmask).intoArray(r, i);\n@@ -695,1 +695,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i]).intoArray(r, i);\n@@ -715,1 +715,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i], vmask).intoArray(r, i);\n@@ -813,1 +813,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i]).intoArray(r, i);\n@@ -833,1 +833,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i], vmask).intoArray(r, i);\n@@ -851,1 +851,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i]).intoArray(r, i);\n@@ -871,1 +871,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i], vmask).intoArray(r, i);\n@@ -1223,1 +1223,1 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (short)(65535+i)).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length() - 1)), (short) (65535 + i)).intoArray(r, i);\n@@ -1575,1 +1575,1 @@\n-                    r[i]=av.lane(0);\n+                    r[i] = av.lane(0);\n@@ -1577,2 +1577,2 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n@@ -1580,4 +1580,4 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n@@ -1585,8 +1585,8 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n@@ -1594,16 +1594,16 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n@@ -1611,32 +1611,32 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n@@ -1644,64 +1644,64 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n-                    r[i+32]=av.lane(32);\n-                    r[i+33]=av.lane(33);\n-                    r[i+34]=av.lane(34);\n-                    r[i+35]=av.lane(35);\n-                    r[i+36]=av.lane(36);\n-                    r[i+37]=av.lane(37);\n-                    r[i+38]=av.lane(38);\n-                    r[i+39]=av.lane(39);\n-                    r[i+40]=av.lane(40);\n-                    r[i+41]=av.lane(41);\n-                    r[i+42]=av.lane(42);\n-                    r[i+43]=av.lane(43);\n-                    r[i+44]=av.lane(44);\n-                    r[i+45]=av.lane(45);\n-                    r[i+46]=av.lane(46);\n-                    r[i+47]=av.lane(47);\n-                    r[i+48]=av.lane(48);\n-                    r[i+49]=av.lane(49);\n-                    r[i+50]=av.lane(50);\n-                    r[i+51]=av.lane(51);\n-                    r[i+52]=av.lane(52);\n-                    r[i+53]=av.lane(53);\n-                    r[i+54]=av.lane(54);\n-                    r[i+55]=av.lane(55);\n-                    r[i+56]=av.lane(56);\n-                    r[i+57]=av.lane(57);\n-                    r[i+58]=av.lane(58);\n-                    r[i+59]=av.lane(59);\n-                    r[i+60]=av.lane(60);\n-                    r[i+61]=av.lane(61);\n-                    r[i+62]=av.lane(62);\n-                    r[i+63]=av.lane(63);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n+                    r[i + 32] = av.lane(32);\n+                    r[i + 33] = av.lane(33);\n+                    r[i + 34] = av.lane(34);\n+                    r[i + 35] = av.lane(35);\n+                    r[i + 36] = av.lane(36);\n+                    r[i + 37] = av.lane(37);\n+                    r[i + 38] = av.lane(38);\n+                    r[i + 39] = av.lane(39);\n+                    r[i + 40] = av.lane(40);\n+                    r[i + 41] = av.lane(41);\n+                    r[i + 42] = av.lane(42);\n+                    r[i + 43] = av.lane(43);\n+                    r[i + 44] = av.lane(44);\n+                    r[i + 45] = av.lane(45);\n+                    r[i + 46] = av.lane(46);\n+                    r[i + 47] = av.lane(47);\n+                    r[i + 48] = av.lane(48);\n+                    r[i + 49] = av.lane(49);\n+                    r[i + 50] = av.lane(50);\n+                    r[i + 51] = av.lane(51);\n+                    r[i + 52] = av.lane(52);\n+                    r[i + 53] = av.lane(53);\n+                    r[i + 54] = av.lane(54);\n+                    r[i + 55] = av.lane(55);\n+                    r[i + 56] = av.lane(56);\n+                    r[i + 57] = av.lane(57);\n+                    r[i + 58] = av.lane(58);\n+                    r[i + 59] = av.lane(59);\n+                    r[i + 60] = av.lane(60);\n+                    r[i + 61] = av.lane(61);\n+                    r[i + 62] = av.lane(62);\n+                    r[i + 63] = av.lane(63);\n@@ -1710,1 +1710,1 @@\n-                        r[i+j]=av.lane(j);\n+                        r[i + j] = av.lane(j);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/Short64Vector.java","additions":144,"deletions":144,"binary":false,"changes":288,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -93,4 +93,4 @@\n-        a = fill(i -> (short)(2*i));\n-        b = fill(i -> (short)(i+1));\n-        c = fill(i -> (short)(i+5));\n-        r = fill(i -> (short)0);\n+        a = fill(i -> (short) (2 * i));\n+        b = fill(i -> (short) (i + 1));\n+        c = fill(i -> (short) (i + 5));\n+        r = fill(i -> (short) 0);\n@@ -611,1 +611,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i]).intoArray(r, i);\n@@ -631,1 +631,1 @@\n-                av.lanewise(VectorOperators.LSHL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHL, (int) b[i], vmask).intoArray(r, i);\n@@ -653,1 +653,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i]).intoArray(r, i);\n@@ -673,1 +673,1 @@\n-                av.lanewise(VectorOperators.LSHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.LSHR, (int) b[i], vmask).intoArray(r, i);\n@@ -695,1 +695,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i]).intoArray(r, i);\n@@ -715,1 +715,1 @@\n-                av.lanewise(VectorOperators.ASHR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ASHR, (int) b[i], vmask).intoArray(r, i);\n@@ -813,1 +813,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i]).intoArray(r, i);\n@@ -833,1 +833,1 @@\n-                av.lanewise(VectorOperators.ROR, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROR, (int) b[i], vmask).intoArray(r, i);\n@@ -851,1 +851,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i]).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i]).intoArray(r, i);\n@@ -871,1 +871,1 @@\n-                av.lanewise(VectorOperators.ROL, (int)b[i], vmask).intoArray(r, i);\n+                av.lanewise(VectorOperators.ROL, (int) b[i], vmask).intoArray(r, i);\n@@ -1223,1 +1223,1 @@\n-                av.withLane((j++ & (SPECIES.length()-1)), (short)(65535+i)).intoArray(r, i);\n+                av.withLane((j++ & (SPECIES.length() - 1)), (short) (65535 + i)).intoArray(r, i);\n@@ -1575,1 +1575,1 @@\n-                    r[i]=av.lane(0);\n+                    r[i] = av.lane(0);\n@@ -1577,2 +1577,2 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n@@ -1580,4 +1580,4 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n@@ -1585,8 +1585,8 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n@@ -1594,16 +1594,16 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n@@ -1611,32 +1611,32 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n@@ -1644,64 +1644,64 @@\n-                    r[i]=av.lane(0);\n-                    r[i+1]=av.lane(1);\n-                    r[i+2]=av.lane(2);\n-                    r[i+3]=av.lane(3);\n-                    r[i+4]=av.lane(4);\n-                    r[i+5]=av.lane(5);\n-                    r[i+6]=av.lane(6);\n-                    r[i+7]=av.lane(7);\n-                    r[i+8]=av.lane(8);\n-                    r[i+9]=av.lane(9);\n-                    r[i+10]=av.lane(10);\n-                    r[i+11]=av.lane(11);\n-                    r[i+12]=av.lane(12);\n-                    r[i+13]=av.lane(13);\n-                    r[i+14]=av.lane(14);\n-                    r[i+15]=av.lane(15);\n-                    r[i+16]=av.lane(16);\n-                    r[i+17]=av.lane(17);\n-                    r[i+18]=av.lane(18);\n-                    r[i+19]=av.lane(19);\n-                    r[i+20]=av.lane(20);\n-                    r[i+21]=av.lane(21);\n-                    r[i+22]=av.lane(22);\n-                    r[i+23]=av.lane(23);\n-                    r[i+24]=av.lane(24);\n-                    r[i+25]=av.lane(25);\n-                    r[i+26]=av.lane(26);\n-                    r[i+27]=av.lane(27);\n-                    r[i+28]=av.lane(28);\n-                    r[i+29]=av.lane(29);\n-                    r[i+30]=av.lane(30);\n-                    r[i+31]=av.lane(31);\n-                    r[i+32]=av.lane(32);\n-                    r[i+33]=av.lane(33);\n-                    r[i+34]=av.lane(34);\n-                    r[i+35]=av.lane(35);\n-                    r[i+36]=av.lane(36);\n-                    r[i+37]=av.lane(37);\n-                    r[i+38]=av.lane(38);\n-                    r[i+39]=av.lane(39);\n-                    r[i+40]=av.lane(40);\n-                    r[i+41]=av.lane(41);\n-                    r[i+42]=av.lane(42);\n-                    r[i+43]=av.lane(43);\n-                    r[i+44]=av.lane(44);\n-                    r[i+45]=av.lane(45);\n-                    r[i+46]=av.lane(46);\n-                    r[i+47]=av.lane(47);\n-                    r[i+48]=av.lane(48);\n-                    r[i+49]=av.lane(49);\n-                    r[i+50]=av.lane(50);\n-                    r[i+51]=av.lane(51);\n-                    r[i+52]=av.lane(52);\n-                    r[i+53]=av.lane(53);\n-                    r[i+54]=av.lane(54);\n-                    r[i+55]=av.lane(55);\n-                    r[i+56]=av.lane(56);\n-                    r[i+57]=av.lane(57);\n-                    r[i+58]=av.lane(58);\n-                    r[i+59]=av.lane(59);\n-                    r[i+60]=av.lane(60);\n-                    r[i+61]=av.lane(61);\n-                    r[i+62]=av.lane(62);\n-                    r[i+63]=av.lane(63);\n+                    r[i] = av.lane(0);\n+                    r[i + 1] = av.lane(1);\n+                    r[i + 2] = av.lane(2);\n+                    r[i + 3] = av.lane(3);\n+                    r[i + 4] = av.lane(4);\n+                    r[i + 5] = av.lane(5);\n+                    r[i + 6] = av.lane(6);\n+                    r[i + 7] = av.lane(7);\n+                    r[i + 8] = av.lane(8);\n+                    r[i + 9] = av.lane(9);\n+                    r[i + 10] = av.lane(10);\n+                    r[i + 11] = av.lane(11);\n+                    r[i + 12] = av.lane(12);\n+                    r[i + 13] = av.lane(13);\n+                    r[i + 14] = av.lane(14);\n+                    r[i + 15] = av.lane(15);\n+                    r[i + 16] = av.lane(16);\n+                    r[i + 17] = av.lane(17);\n+                    r[i + 18] = av.lane(18);\n+                    r[i + 19] = av.lane(19);\n+                    r[i + 20] = av.lane(20);\n+                    r[i + 21] = av.lane(21);\n+                    r[i + 22] = av.lane(22);\n+                    r[i + 23] = av.lane(23);\n+                    r[i + 24] = av.lane(24);\n+                    r[i + 25] = av.lane(25);\n+                    r[i + 26] = av.lane(26);\n+                    r[i + 27] = av.lane(27);\n+                    r[i + 28] = av.lane(28);\n+                    r[i + 29] = av.lane(29);\n+                    r[i + 30] = av.lane(30);\n+                    r[i + 31] = av.lane(31);\n+                    r[i + 32] = av.lane(32);\n+                    r[i + 33] = av.lane(33);\n+                    r[i + 34] = av.lane(34);\n+                    r[i + 35] = av.lane(35);\n+                    r[i + 36] = av.lane(36);\n+                    r[i + 37] = av.lane(37);\n+                    r[i + 38] = av.lane(38);\n+                    r[i + 39] = av.lane(39);\n+                    r[i + 40] = av.lane(40);\n+                    r[i + 41] = av.lane(41);\n+                    r[i + 42] = av.lane(42);\n+                    r[i + 43] = av.lane(43);\n+                    r[i + 44] = av.lane(44);\n+                    r[i + 45] = av.lane(45);\n+                    r[i + 46] = av.lane(46);\n+                    r[i + 47] = av.lane(47);\n+                    r[i + 48] = av.lane(48);\n+                    r[i + 49] = av.lane(49);\n+                    r[i + 50] = av.lane(50);\n+                    r[i + 51] = av.lane(51);\n+                    r[i + 52] = av.lane(52);\n+                    r[i + 53] = av.lane(53);\n+                    r[i + 54] = av.lane(54);\n+                    r[i + 55] = av.lane(55);\n+                    r[i + 56] = av.lane(56);\n+                    r[i + 57] = av.lane(57);\n+                    r[i + 58] = av.lane(58);\n+                    r[i + 59] = av.lane(59);\n+                    r[i + 60] = av.lane(60);\n+                    r[i + 61] = av.lane(61);\n+                    r[i + 62] = av.lane(62);\n+                    r[i + 63] = av.lane(63);\n@@ -1710,1 +1710,1 @@\n-                        r[i+j]=av.lane(j);\n+                        r[i + j] = av.lane(j);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ShortMaxVector.java","additions":144,"deletions":144,"binary":false,"changes":288,"status":"modified"},{"patch":"@@ -64,4 +64,4 @@\n-        as = fill(i -> (short)(2*i));\n-        bs = fill(i -> (short)(i+1));\n-        cs = fill(i -> (short)(i+5));\n-        rs = fill(i -> (short)0);\n+        as = fill(i -> (short) (2 * i));\n+        bs = fill(i -> (short) (i + 1));\n+        cs = fill(i -> (short) (i + 5));\n+        rs = fill(i -> (short) 0);\n@@ -72,1 +72,1 @@\n-        ss = fillInt(size, i -> RANDOM.nextInt(Math.max(i,1)));\n+        ss = fillInt(size, i -> RANDOM.nextInt(Math.max(i, 1)));\n@@ -125,1 +125,1 @@\n-        return (short)(((((short)a) & 0xFFFF) << (b & 15)) | ((((short)a) & 0xFFFF) >>> (16 - (b & 15))));\n+        return (short) (((((short) a) & 0xFFFF) << (b & 15)) | ((((short) a) & 0xFFFF) >>> (16 - (b & 15))));\n@@ -129,1 +129,1 @@\n-        return (short)(((((short)a) & 0xFFFF) >>> (b & 15)) | ((((short)a) & 0xFFFF) << (16 - (b & 15))));\n+        return (short) (((((short) a) & 0xFFFF) >>> (b & 15)) | ((((short) a) & 0xFFFF) << (16 - (b & 15))));\n@@ -142,3 +142,3 @@\n-        b = (short)(((b & 0x5555) << 1) | ((b & 0xAAAA) >>> 1));\n-        b = (short)(((b & 0x3333) << 2) | ((b & 0xCCCC) >>> 2));\n-        b = (short)(((b & 0x0F0F) << 4) | ((b & 0xF0F0) >>> 4));\n+        b = (short) (((b & 0x5555) << 1) | ((b & 0xAAAA) >>> 1));\n+        b = (short) (((b & 0x3333) << 2) | ((b & 0xCCCC) >>> 2));\n+        b = (short) (((b & 0x0F0F) << 4) | ((b & 0xF0F0) >>> 4));\n@@ -158,1 +158,1 @@\n-                rs[i] = (short)(a + b);\n+                rs[i] = (short) (a + b);\n@@ -177,1 +177,1 @@\n-                    rs[i] = (short)(a + b);\n+                    rs[i] = (short) (a + b);\n@@ -196,1 +196,1 @@\n-                rs[i] = (short)(a - b);\n+                rs[i] = (short) (a - b);\n@@ -215,1 +215,1 @@\n-                    rs[i] = (short)(a - b);\n+                    rs[i] = (short) (a - b);\n@@ -234,1 +234,1 @@\n-                rs[i] = (short)(a * b);\n+                rs[i] = (short) (a * b);\n@@ -253,1 +253,1 @@\n-                    rs[i] = (short)(a * b);\n+                    rs[i] = (short) (a * b);\n@@ -274,1 +274,1 @@\n-                rs[i] = (short)((a)!=0?a:b);\n+                rs[i] = (short) ((a) != 0 ? a : b);\n@@ -293,1 +293,1 @@\n-                    rs[i] = (short)((a)!=0?a:b);\n+                    rs[i] = (short) ((a) != 0 ? a : b);\n@@ -313,1 +313,1 @@\n-                rs[i] = (short)(a & b);\n+                rs[i] = (short) (a & b);\n@@ -334,1 +334,1 @@\n-                    rs[i] = (short)(a & b);\n+                    rs[i] = (short) (a & b);\n@@ -355,1 +355,1 @@\n-                rs[i] = (short)(a & ~b);\n+                rs[i] = (short) (a & ~b);\n@@ -376,1 +376,1 @@\n-                    rs[i] = (short)(a & ~b);\n+                    rs[i] = (short) (a & ~b);\n@@ -397,1 +397,1 @@\n-                rs[i] = (short)(a | b);\n+                rs[i] = (short) (a | b);\n@@ -418,1 +418,1 @@\n-                    rs[i] = (short)(a | b);\n+                    rs[i] = (short) (a | b);\n@@ -439,1 +439,1 @@\n-                rs[i] = (short)(a ^ b);\n+                rs[i] = (short) (a ^ b);\n@@ -460,1 +460,1 @@\n-                    rs[i] = (short)(a ^ b);\n+                    rs[i] = (short) (a ^ b);\n@@ -485,1 +485,1 @@\n-                rs[i] = (short)((a << (b & 0xF)));\n+                rs[i] = (short) ((a << (b & 0xF)));\n@@ -506,1 +506,1 @@\n-                    rs[i] = (short)((a << (b & 0xF)));\n+                    rs[i] = (short) ((a << (b & 0xF)));\n@@ -531,1 +531,1 @@\n-                rs[i] = (short)((a >> (b & 0xF)));\n+                rs[i] = (short) ((a >> (b & 0xF)));\n@@ -552,1 +552,1 @@\n-                    rs[i] = (short)((a >> (b & 0xF)));\n+                    rs[i] = (short) ((a >> (b & 0xF)));\n@@ -577,1 +577,1 @@\n-                rs[i] = (short)(((a & 0xFFFF) >>> (b & 0xF)));\n+                rs[i] = (short) (((a & 0xFFFF) >>> (b & 0xF)));\n@@ -598,1 +598,1 @@\n-                    rs[i] = (short)(((a & 0xFFFF) >>> (b & 0xF)));\n+                    rs[i] = (short) (((a & 0xFFFF) >>> (b & 0xF)));\n@@ -623,1 +623,1 @@\n-                rs[i] = (short)((a << (b & 15)));\n+                rs[i] = (short) ((a << (b & 15)));\n@@ -644,1 +644,1 @@\n-                rs[i] = (m ? (short)((a << (b & 15))) : a);\n+                rs[i] = (m ? (short) ((a << (b & 15))) : a);\n@@ -667,1 +667,1 @@\n-                rs[i] = (short)(((a & 0xFFFF) >>> (b & 15)));\n+                rs[i] = (short) (((a & 0xFFFF) >>> (b & 15)));\n@@ -688,1 +688,1 @@\n-                rs[i] = (m ? (short)(((a & 0xFFFF) >>> (b & 15))) : a);\n+                rs[i] = (m ? (short) (((a & 0xFFFF) >>> (b & 15))) : a);\n@@ -711,1 +711,1 @@\n-                rs[i] = (short)((a >> (b & 15)));\n+                rs[i] = (short) ((a >> (b & 15)));\n@@ -732,1 +732,1 @@\n-                rs[i] = (m ? (short)((a >> (b & 15))) : a);\n+                rs[i] = (m ? (short) ((a >> (b & 15))) : a);\n@@ -751,1 +751,1 @@\n-                rs[i] = (short)(ROR_scalar(a,b));\n+                rs[i] = (short) (ROR_scalar(a, b));\n@@ -772,1 +772,1 @@\n-                    rs[i] = (short)(ROR_scalar(a,b));\n+                    rs[i] = (short) (ROR_scalar(a, b));\n@@ -793,1 +793,1 @@\n-                rs[i] = (short)(ROL_scalar(a,b));\n+                rs[i] = (short) (ROL_scalar(a, b));\n@@ -814,1 +814,1 @@\n-                    rs[i] = (short)(ROL_scalar(a,b));\n+                    rs[i] = (short) (ROL_scalar(a, b));\n@@ -835,1 +835,1 @@\n-                rs[i] = (short)(ROR_scalar(a,b));\n+                rs[i] = (short) (ROR_scalar(a, b));\n@@ -856,1 +856,1 @@\n-                rs[i] = (m ? (short)(ROR_scalar(a,b)) : a);\n+                rs[i] = (m ? (short) (ROR_scalar(a, b)) : a);\n@@ -875,1 +875,1 @@\n-                rs[i] = (short)(ROL_scalar(a,b));\n+                rs[i] = (short) (ROL_scalar(a, b));\n@@ -896,1 +896,1 @@\n-                rs[i] = (m ? (short)(ROL_scalar(a,b)) : a);\n+                rs[i] = (m ? (short) (ROL_scalar(a, b)) : a);\n@@ -914,1 +914,1 @@\n-                rs[i] = (short)(Math.min(a, b));\n+                rs[i] = (short) (Math.min(a, b));\n@@ -931,1 +931,1 @@\n-                rs[i] = (short)(Math.max(a, b));\n+                rs[i] = (short) (Math.max(a, b));\n@@ -1128,1 +1128,1 @@\n-                r &= (bits(a)==0); \/\/ accumulate so JIT can't eliminate the computation\n+                r &= (bits(a) == 0); \/\/ accumulate so JIT can't eliminate the computation\n@@ -1143,1 +1143,1 @@\n-                r &= (bits(a)<0); \/\/ accumulate so JIT can't eliminate the computation\n+                r &= (bits(a) < 0); \/\/ accumulate so JIT can't eliminate the computation\n@@ -1337,1 +1337,1 @@\n-                    short a = as[i+j];\n+                    short a = as[i + j];\n@@ -1466,1 +1466,1 @@\n-                as[i] = (short)0;\n+                as[i] = (short) 0;\n@@ -1506,1 +1506,1 @@\n-                rs[i] = (short)((a&~(c))|(b&c));\n+                rs[i] = (short) ((a &~ (c)) | (b & c));\n@@ -1530,1 +1530,1 @@\n-                    rs[i] = (short)((a&~(c))|(b&c));\n+                    rs[i] = (short) ((a &~ (c)) | (b & c));\n@@ -1548,1 +1548,1 @@\n-                rs[i] = (short)(-((short)a));\n+                rs[i] = (short) (-((short) a));\n@@ -1565,1 +1565,1 @@\n-                rs[i] = (m ? (short)(-((short)a)) : a);\n+                rs[i] = (m ? (short) (-((short) a)) : a);\n@@ -1580,1 +1580,1 @@\n-                rs[i] = (short)(Math.abs((short)a));\n+                rs[i] = (short) (Math.abs((short) a));\n@@ -1597,1 +1597,1 @@\n-                rs[i] = (m ? (short)(Math.abs((short)a)) : a);\n+                rs[i] = (m ? (short) (Math.abs((short) a)) : a);\n@@ -1613,1 +1613,1 @@\n-                rs[i] = (short)(~((short)a));\n+                rs[i] = (short) (~((short) a));\n@@ -1632,1 +1632,1 @@\n-                rs[i] = (m ? (short)(~((short)a)) : a);\n+                rs[i] = (m ? (short) (~((short) a)) : a);\n@@ -1649,1 +1649,1 @@\n-                rs[i] = (short)((a==0?0:-1));\n+                rs[i] = (short) ((a == 0 ? 0 : -1));\n@@ -1668,1 +1668,1 @@\n-                rs[i] = (m ? (short)((a==0?0:-1)) : a);\n+                rs[i] = (m ? (short) ((a == 0 ? 0 : -1)) : a);\n@@ -1691,1 +1691,1 @@\n-                rs[i] = (short)(Integer.bitCount((int)a & 0xFFFF));\n+                rs[i] = (short) (Integer.bitCount((int) a & 0xFFFF));\n@@ -1710,1 +1710,1 @@\n-                rs[i] = (m ? (short)(Integer.bitCount((int)a & 0xFFFF)) : a);\n+                rs[i] = (m ? (short) (Integer.bitCount((int) a & 0xFFFF)) : a);\n@@ -1727,1 +1727,1 @@\n-                rs[i] = (short)(TRAILING_ZEROS_COUNT_scalar(a));\n+                rs[i] = (short) (TRAILING_ZEROS_COUNT_scalar(a));\n@@ -1746,1 +1746,1 @@\n-                rs[i] = (m ? (short)(TRAILING_ZEROS_COUNT_scalar(a)) : a);\n+                rs[i] = (m ? (short) (TRAILING_ZEROS_COUNT_scalar(a)) : a);\n@@ -1763,1 +1763,1 @@\n-                rs[i] = (short)(LEADING_ZEROS_COUNT_scalar(a));\n+                rs[i] = (short) (LEADING_ZEROS_COUNT_scalar(a));\n@@ -1782,1 +1782,1 @@\n-                rs[i] = (m ? (short)(LEADING_ZEROS_COUNT_scalar(a)) : a);\n+                rs[i] = (m ? (short) (LEADING_ZEROS_COUNT_scalar(a)) : a);\n@@ -1799,1 +1799,1 @@\n-                rs[i] = (short)(REVERSE_scalar(a));\n+                rs[i] = (short) (REVERSE_scalar(a));\n@@ -1818,1 +1818,1 @@\n-                rs[i] = (m ? (short)(REVERSE_scalar(a)) : a);\n+                rs[i] = (m ? (short) (REVERSE_scalar(a)) : a);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/operation\/ShortScalar.java","additions":70,"deletions":70,"binary":false,"changes":140,"status":"modified"}]}