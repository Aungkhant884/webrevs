{"files":[{"patch":"@@ -42,0 +42,1 @@\n+    implementation project(':version')\n","filename":"bot\/build.gradle","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+    requires org.openjdk.skara.version;\n@@ -35,0 +36,1 @@\n+    requires jdk.jfr;\n","filename":"bot\/src\/main\/java\/module-info.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -396,1 +396,3 @@\n-            LivenessHandler.name(), LivenessHandler::create\n+            LivenessHandler.name(), LivenessHandler::create,\n+            ProfileHandler.name(), ProfileHandler::create,\n+            VersionHandler.name(), VersionHandler::create\n","filename":"bot\/src\/main\/java\/org\/openjdk\/skara\/bot\/BotRunnerConfiguration.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,129 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bot;\n+\n+import org.openjdk.skara.json.JSONObject;\n+\n+import java.io.*;\n+import java.nio.file.*;\n+import java.util.*;\n+import java.util.logging.*;\n+import com.sun.net.httpserver.*;\n+import jdk.jfr.*;\n+import java.text.ParseException;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+class ProfileHandler implements HttpHandler {\n+    private static final Logger log = Logger.getLogger(\"org.openjdk.skara.bot\");\n+    private final Path configurationPath;\n+    private final int maxDuration;\n+    private final ReentrantLock lock = new ReentrantLock();\n+\n+    private ProfileHandler(Path configurationPath, int maxDuration) {\n+        this.configurationPath = configurationPath;\n+        this.maxDuration = maxDuration;\n+    }\n+\n+    private static Map<String, String> parameters(HttpExchange exchange) {\n+        var query = exchange.getRequestURI().getQuery();\n+        var parts = query.split(\"&\");\n+        var result = new HashMap<String, String>();\n+        for (var part : parts) {\n+            var keyAndValue = part.split(\"=\");\n+            result.put(keyAndValue[0], keyAndValue[1]);\n+        }\n+        return result;\n+    }\n+\n+    private void handleLocked(HttpExchange exchange) throws IOException {\n+        var params = parameters(exchange);\n+        var seconds = params.getOrDefault(\"seconds\", \"30\");\n+        var configurationName = params.getOrDefault(\"configuration\", \"profile\");\n+\n+        Configuration configuration = null;\n+        try {\n+            configuration = Configuration.create(configurationPath);\n+        } catch (ParseException e) {\n+            log.log(Level.WARNING, \"Could not get JFR configuration\", e);\n+            exchange.sendResponseHeaders(500, 0);\n+            exchange.getResponseBody().close();\n+        }\n+\n+        log.info(\"Profiling for \" + seconds + \" seconds with configuration \" + configurationName);\n+        var recording = new Recording(configuration);\n+        recording.start();\n+\n+        try {\n+            var duration = Integer.parseInt(seconds);\n+            if (duration > maxDuration) {\n+                duration = maxDuration;\n+            }\n+            Thread.sleep(duration * 1000);\n+        } catch (InterruptedException e) {\n+            log.log(Level.WARNING, \"Thread interrupted when sleeping\", e);\n+            exchange.sendResponseHeaders(500, 0);\n+            exchange.getResponseBody().close();\n+        }\n+\n+        recording.stop();\n+        var path = Files.createTempFile(\"recording\", \"jfr\");\n+        recording.dump(path);\n+\n+        var buffer = new byte[4096];\n+        exchange.sendResponseHeaders(200, Files.size(path));\n+        try (var output = exchange.getResponseBody(); var stream = Files.newInputStream(path)) {\n+            while (true) {\n+                var read = stream.read(buffer);\n+                if (read == -1) {\n+                    break;\n+                }\n+                output.write(buffer, 0, read);\n+            }\n+        } catch (Throwable t) {\n+            log.log(Level.WARNING, \"Could not send JFR recording\", t);\n+        } finally {\n+            Files.deleteIfExists(path);\n+        }\n+    }\n+\n+    @Override\n+    public void handle(HttpExchange exchange) throws IOException {\n+        \/\/ Only allow one recording at a time.\n+        lock.lock();\n+        try {\n+            handleLocked(exchange);\n+        } finally {\n+            lock.unlock();\n+        }\n+    }\n+\n+    static ProfileHandler create(BotRunner runner, JSONObject configuration) {\n+        var configurationPath = Path.of(configuration.get(\"configuration\").asString());\n+        var maxDuration = configuration.get(\"max-duration\").asInt();\n+        return new ProfileHandler(configurationPath, maxDuration);\n+    }\n+\n+    static String name() {\n+        return \"profile\";\n+    }\n+}\n","filename":"bot\/src\/main\/java\/org\/openjdk\/skara\/bot\/ProfileHandler.java","additions":129,"deletions":0,"binary":false,"changes":129,"status":"added"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bot;\n+\n+import org.openjdk.skara.json.JSONObject;\n+import org.openjdk.skara.version.Version;\n+\n+import com.sun.net.httpserver.*;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.logging.Logger;\n+\n+class VersionHandler implements HttpHandler {\n+    private static final Logger log = Logger.getLogger(\"org.openjdk.skara.bot\");\n+\n+    @Override\n+    public void handle(HttpExchange exchange) throws IOException {\n+        var version = Version.fromManifest();\n+        if (version.isPresent()) {\n+            var bytes = version.get().getBytes(StandardCharsets.UTF_8);\n+            exchange.sendResponseHeaders(200, bytes.length);\n+            exchange.getResponseBody().write(bytes);\n+            exchange.getResponseBody().close();\n+        } else {\n+            exchange.sendResponseHeaders(500, 0);\n+            exchange.getResponseBody().close();\n+        }\n+    }\n+\n+    static VersionHandler create(BotRunner runner, JSONObject configuration) {\n+        return new VersionHandler();\n+    }\n+\n+    static String name() {\n+        return \"version\";\n+    }\n+}\n","filename":"bot\/src\/main\/java\/org\/openjdk\/skara\/bot\/VersionHandler.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"}]}