{"files":[{"patch":"@@ -50,1 +50,0 @@\n-    private final boolean shouldMirrorEverything;\n@@ -52,0 +51,1 @@\n+    private final boolean onlyTags;\n@@ -54,1 +54,1 @@\n-        this(storage, from, to, List.of(), true);\n+        this(storage, from, to, List.of(), true, false);\n@@ -58,1 +58,1 @@\n-              boolean includeTags) {\n+              boolean includeTags, boolean onlyTags) {\n@@ -63,1 +63,0 @@\n-        this.shouldMirrorEverything = branchPatterns.isEmpty();\n@@ -65,0 +64,1 @@\n+        this.onlyTags = onlyTags;\n@@ -106,4 +106,7 @@\n-            repo.fetchAll(from.authenticatedUrl(), includeTags);\n-            if (shouldMirrorEverything) {\n-                log.info(\"Pushing to \" + to.name());\n-                repo.pushAll(to.authenticatedUrl());\n+            repo.fetchAll(from.authenticatedUrl(), includeTags || onlyTags);\n+            if (onlyTags) {\n+                log.info(\"Pushing tags to \" + to.name());\n+                repo.pushTags(to.authenticatedUrl(), true);\n+            } else if (branchPatterns.isEmpty() && includeTags) {\n+                log.info(\"Pushing tags and branches to \" + to.name());\n+                repo.pushAll(to.authenticatedUrl(), true);\n@@ -111,2 +114,1 @@\n-                var branches = repo.branches();\n-                for (var branch : branches) {\n+                for (var branch : repo.branches()) {\n@@ -116,0 +118,2 @@\n+                            log.info(\"Pushing branch \" + branch.name() + \" to \" + to.name() + \" \" +\n+                                     (includeTags ? \"including\" : \"excluding\") + \" tags\");\n@@ -132,1 +136,7 @@\n-        if (!branchPatterns.isEmpty()) {\n+        if (branchPatterns.isEmpty()) {\n+            if (onlyTags) {\n+                name += \" ()\";\n+            } else {\n+                name += \" (*)\";\n+            }\n+        } else {\n@@ -136,0 +146,7 @@\n+        if (onlyTags) {\n+            name += \" [tags only]\";\n+        } else if (includeTags) {\n+            name += \" [tags included]\";\n+        } else {\n+            name += \" [tags excluded]\";\n+        }\n@@ -167,2 +184,2 @@\n-    public boolean isShouldMirrorEverything() {\n-        return shouldMirrorEverything;\n+    public boolean isOnlyTags() {\n+        return onlyTags;\n","filename":"bots\/mirror\/src\/main\/java\/org\/openjdk\/skara\/bots\/mirror\/MirrorBot.java","additions":30,"deletions":13,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -82,1 +82,20 @@\n-            var includeTags = branchPatterns.isEmpty() || (repo.contains(\"tags\") && repo.get(\"tags\").asBoolean());\n+            var includeTags = branchPatterns.isEmpty();\n+            var onlyTags = false;\n+            if (repo.contains(\"tags\")) {\n+                var tags = repo.get(\"tags\").asString().toLowerCase().strip();\n+                if (!Set.of(\"include\", \"only\").contains(tags)) {\n+                    throw new IllegalStateException(\"\\\"tags\\\" field can only have value \\\"include\\\" or \\\"only\\\"\");\n+                }\n+                onlyTags = tags.equals(\"only\");\n+                includeTags = tags.equals(\"include\");\n+            }\n+            if (onlyTags) {\n+                \/\/ Tags are by definition included when only tags are mirrored\n+                includeTags = true;\n+            }\n+            if (onlyTags && !branchPatterns.isEmpty()) {\n+                throw new IllegalStateException(\"Branches cannot be mirrored when only tags are mirrored\");\n+            }\n+            if (includeTags && !branchPatterns.isEmpty()) {\n+                throw new IllegalStateException(\"Cannot include tags with only selected branches (tags are *not* per branch)\");\n+            }\n@@ -85,1 +104,1 @@\n-            bots.add(new MirrorBot(storage, fromRepo, toRepo, branchPatterns, includeTags));\n+            bots.add(new MirrorBot(storage, fromRepo, toRepo, branchPatterns, includeTags, onlyTags));\n","filename":"bots\/mirror\/src\/main\/java\/org\/openjdk\/skara\/bots\/mirror\/MirrorBotFactory.java","additions":21,"deletions":2,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -25,0 +25,3 @@\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n@@ -77,2 +80,1 @@\n-            assertEquals(\"MirrorBot@from1->to1 (master)\", mirrorBot1.toString());\n-            assertFalse(mirrorBot1.isShouldMirrorEverything());\n+            assertEquals(\"MirrorBot@from1->to1 (master) [tags excluded]\", mirrorBot1.toString());\n@@ -80,0 +82,1 @@\n+            assertFalse(mirrorBot1.isOnlyTags());\n@@ -83,2 +86,1 @@\n-            assertEquals(\"MirrorBot@from2->to2 (master,dev,test)\", mirrorBot2.toString());\n-            assertFalse(mirrorBot2.isShouldMirrorEverything());\n+            assertEquals(\"MirrorBot@from2->to2 (master,dev,test) [tags excluded]\", mirrorBot2.toString());\n@@ -86,0 +88,1 @@\n+            assertFalse(mirrorBot2.isOnlyTags());\n@@ -91,2 +94,1 @@\n-            assertEquals(\"MirrorBot@from3->to3\", mirrorBot3.toString());\n-            assertTrue(mirrorBot3.isShouldMirrorEverything());\n+            assertEquals(\"MirrorBot@from3->to3 (*) [tags included]\", mirrorBot3.toString());\n@@ -94,0 +96,1 @@\n+            assertFalse(mirrorBot3.isOnlyTags());\n@@ -97,1 +100,168 @@\n-}\n\\ No newline at end of file\n+\n+    @Test\n+    public void testThrowsWithUnsupportedTagsValue() {\n+        try (var tempFolder = new TemporaryDirectory()) {\n+            String jsonString = \"\"\"\n+                    {\n+                      \"repositories\": [\n+                        {\n+                          \"from\": \"from1\",\n+                          \"to\": \"to1\",\n+                          \"branches\": \"master\",\n+                          \"tags\": \"foo\"\n+                        }\n+                      ]\n+                    }\n+                    \"\"\";\n+            var jsonConfig = JWCC.parse(jsonString).asObject();\n+\n+            var testBotFactory = TestBotFactory.newBuilder()\n+                    .addHostedRepository(\"from1\", new TestHostedRepository(\"from1\"))\n+                    .addHostedRepository(\"to1\", new TestHostedRepository(\"to1\"))\n+                    .storagePath(tempFolder.path().resolve(\"storage\"))\n+                    .build();\n+\n+            assertThrows(IllegalStateException.class, () -> testBotFactory.createBots(MirrorBotFactory.NAME, jsonConfig));\n+        }\n+    }\n+\n+    @Test\n+    public void testThrowsWithBranchesAndTagsOnly() {\n+        try (var tempFolder = new TemporaryDirectory()) {\n+            String jsonString = \"\"\"\n+                    {\n+                      \"repositories\": [\n+                        {\n+                          \"from\": \"from1\",\n+                          \"to\": \"to1\",\n+                          \"branches\": \"master\",\n+                          \"tags\": \"only\"\n+                        }\n+                      ]\n+                    }\n+                    \"\"\";\n+            var jsonConfig = JWCC.parse(jsonString).asObject();\n+\n+            var testBotFactory = TestBotFactory.newBuilder()\n+                    .addHostedRepository(\"from1\", new TestHostedRepository(\"from1\"))\n+                    .addHostedRepository(\"to1\", new TestHostedRepository(\"to1\"))\n+                    .storagePath(tempFolder.path().resolve(\"storage\"))\n+                    .build();\n+\n+            assertThrows(IllegalStateException.class, () -> testBotFactory.createBots(MirrorBotFactory.NAME, jsonConfig));\n+        }\n+    }\n+\n+    @Test\n+    public void testThrowsWithBranchesAndTagsIncluded() {\n+        try (var tempFolder = new TemporaryDirectory()) {\n+            String jsonString = \"\"\"\n+                    {\n+                      \"repositories\": [\n+                        {\n+                          \"from\": \"from1\",\n+                          \"to\": \"to1\",\n+                          \"branches\": \"master\",\n+                          \"tags\": \"include\"\n+                        }\n+                      ]\n+                    }\n+                    \"\"\";\n+            var jsonConfig = JWCC.parse(jsonString).asObject();\n+\n+            var testBotFactory = TestBotFactory.newBuilder()\n+                    .addHostedRepository(\"from1\", new TestHostedRepository(\"from1\"))\n+                    .addHostedRepository(\"to1\", new TestHostedRepository(\"to1\"))\n+                    .storagePath(tempFolder.path().resolve(\"storage\"))\n+                    .build();\n+\n+            assertThrows(IllegalStateException.class, () -> testBotFactory.createBots(MirrorBotFactory.NAME, jsonConfig));\n+        }\n+    }\n+\n+    @Test\n+    public void testCreateWithTags() {\n+        try (var tempFolder = new TemporaryDirectory()) {\n+            String jsonString = \"\"\"\n+                    {\n+                      \"repositories\": [\n+                        {\n+                          \"from\": \"from1\",\n+                          \"to\": \"to1\",\n+                          \"branches\": \"master\"\n+                        },\n+                        {\n+                          \"from\": \"from2\",\n+                          \"to\": \"to2\",\n+                          \"tags\": \"include\"\n+                        },\n+                        {\n+                          \"from\": \"from3\",\n+                          \"to\": \"to3\",\n+                        },\n+                        {\n+                          \"from\": \"from4\",\n+                          \"to\": \"to4\",\n+                          \"tags\": \"only\"\n+                        },\n+                        {\n+                          \"from\": \"from5\",\n+                          \"to\": \"to5\",\n+                          \"branches\": [\"master\", \"dev\"]\n+                        },\n+                      ]\n+                    }\n+                    \"\"\";\n+            var jsonConfig = JWCC.parse(jsonString).asObject();\n+\n+            var testBotFactory = TestBotFactory.newBuilder()\n+                    .addHostedRepository(\"from1\", new TestHostedRepository(\"from1\"))\n+                    .addHostedRepository(\"from2\", new TestHostedRepository(\"from2\"))\n+                    .addHostedRepository(\"from3\", new TestHostedRepository(\"from3\"))\n+                    .addHostedRepository(\"from4\", new TestHostedRepository(\"from4\"))\n+                    .addHostedRepository(\"from5\", new TestHostedRepository(\"from5\"))\n+                    .addHostedRepository(\"to1\", new TestHostedRepository(\"to1\"))\n+                    .addHostedRepository(\"to2\", new TestHostedRepository(\"to2\"))\n+                    .addHostedRepository(\"to3\", new TestHostedRepository(\"to3\"))\n+                    .addHostedRepository(\"to4\", new TestHostedRepository(\"to4\"))\n+                    .addHostedRepository(\"to5\", new TestHostedRepository(\"to5\"))\n+                    .storagePath(tempFolder.path().resolve(\"storage\"))\n+                    .build();\n+\n+            var bots = testBotFactory.createBots(MirrorBotFactory.NAME, jsonConfig);\n+            assertEquals(5, bots.size());\n+\n+            MirrorBot mirrorBot1 = (MirrorBot) bots.get(0);\n+            assertEquals(\"MirrorBot@from1->to1 (master) [tags excluded]\", mirrorBot1.toString());\n+            assertFalse(mirrorBot1.isIncludeTags());\n+            assertFalse(mirrorBot1.isOnlyTags());\n+            assertEquals(List.of(\"master\"),\n+                         mirrorBot1.getBranchPatterns().stream().map(Pattern::toString).toList());\n+\n+            MirrorBot mirrorBot2 = (MirrorBot) bots.get(1);\n+            assertEquals(\"MirrorBot@from2->to2 (*) [tags included]\", mirrorBot2.toString());\n+            assertTrue(mirrorBot2.isIncludeTags());\n+            assertFalse(mirrorBot2.isOnlyTags());\n+            assertEquals(List.of(), mirrorBot2.getBranchPatterns());\n+\n+            MirrorBot mirrorBot3 = (MirrorBot) bots.get(2);\n+            assertEquals(\"MirrorBot@from3->to3 (*) [tags included]\", mirrorBot3.toString());\n+            assertTrue(mirrorBot3.isIncludeTags());\n+            assertFalse(mirrorBot3.isOnlyTags());\n+            assertEquals(List.of(), mirrorBot3.getBranchPatterns());\n+\n+            MirrorBot mirrorBot4 = (MirrorBot) bots.get(3);\n+            assertEquals(\"MirrorBot@from4->to4 () [tags only]\", mirrorBot4.toString());\n+            assertTrue(mirrorBot4.isIncludeTags());\n+            assertTrue(mirrorBot4.isOnlyTags());\n+            assertEquals(List.of(), mirrorBot4.getBranchPatterns());\n+\n+            MirrorBot mirrorBot5 = (MirrorBot) bots.get(4);\n+            assertEquals(\"MirrorBot@from5->to5 (master,dev) [tags excluded]\", mirrorBot5.toString());\n+            assertFalse(mirrorBot5.isIncludeTags());\n+            assertFalse(mirrorBot5.isOnlyTags());\n+            assertEquals(List.of(\"master\", \"dev\"),\n+                         mirrorBot5.getBranchPatterns().stream().map(Pattern::toString).toList());\n+        }\n+    }\n+}\n","filename":"bots\/mirror\/src\/test\/java\/org\/openjdk\/skara\/bots\/mirror\/MirrorBotFactoryTest.java","additions":177,"deletions":7,"binary":false,"changes":184,"status":"modified"},{"patch":"@@ -219,1 +219,1 @@\n-            var bot = new MirrorBot(storage, fromHostedRepo, toHostedRepo, List.of(Pattern.compile(\"master\")), true);\n+            var bot = new MirrorBot(storage, fromHostedRepo, toHostedRepo, List.of(Pattern.compile(\"master\")), true, false);\n@@ -287,1 +287,1 @@\n-            var bot = new MirrorBot(storage, fromHostedRepo, toHostedRepo, List.of(Pattern.compile(\"master\")), false);\n+            var bot = new MirrorBot(storage, fromHostedRepo, toHostedRepo, List.of(Pattern.compile(\"master\")), false, false);\n@@ -396,1 +396,1 @@\n-            var bot = new MirrorBot(storage, fromHostedRepo, toHostedRepo, List.of(Pattern.compile(\"master\")), false);\n+            var bot = new MirrorBot(storage, fromHostedRepo, toHostedRepo, List.of(Pattern.compile(\"master\")), false, false);\n@@ -444,1 +444,1 @@\n-            var bot = new MirrorBot(storage, fromHostedRepo, toHostedRepo, List.of(Pattern.compile(\"f.*\")), false);\n+            var bot = new MirrorBot(storage, fromHostedRepo, toHostedRepo, List.of(Pattern.compile(\"f.*\")), false, false);\n@@ -494,0 +494,77 @@\n+\n+    \/**\n+     * Tests mirroring only tags\n+     *\/\n+    @Test\n+    void mirrorOnlyTags(TestInfo testInfo) throws IOException {\n+        try (var temp = new TemporaryDirectory()) {\n+            var host = TestHost.createNew(List.of(HostUser.create(0, \"duke\", \"J. Duke\")));\n+\n+            var fromDir = temp.path().resolve(\"from.git\");\n+            var fromLocalRepo = TestableRepository.init(fromDir, VCS.GIT);\n+            var fromHostedRepo = new TestHostedRepository(host, \"test\", fromLocalRepo);\n+\n+            var toDir = temp.path().resolve(\"to.git\");\n+            var toLocalRepo = TestableRepository.init(toDir, VCS.GIT);\n+            var gitConfig = toDir.resolve(\".git\").resolve(\"config\");\n+            Files.write(gitConfig, List.of(\"[receive]\", \"denyCurrentBranch = ignore\"),\n+                    StandardOpenOption.APPEND);\n+            var toHostedRepo = new TestHostedRepository(host, \"test-mirror\", toLocalRepo);\n+\n+            var newFile = fromDir.resolve(\"this-file-cannot-exist.txt\");\n+            Files.writeString(newFile, \"Hello world\\n\");\n+            fromLocalRepo.add(newFile);\n+            var newHash = fromLocalRepo.commit(\"An additional commit\", \"duke\", \"duke@openjdk.org\");\n+            var fromCommits = fromLocalRepo.commits().asList();\n+            assertEquals(1, fromCommits.size());\n+            assertEquals(newHash, fromCommits.get(0).hash());\n+\n+            fromLocalRepo.tag(newHash, \"first\", \"add first tag\", \"duke\", \"duk@openjdk.org\");\n+            fromLocalRepo.tag(newHash, \"second\", \"add second tag\", \"duke\", \"duk@openjdk.org\");\n+\n+            var toCommits = toLocalRepo.commits().asList();\n+            assertEquals(0, toCommits.size());\n+            assertEquals(0, toLocalRepo.tags().size());\n+            assertEquals(0, toLocalRepo.branches().size());\n+\n+            var storage = temp.path().resolve(\"storage\");\n+            var bot = new MirrorBot(storage, fromHostedRepo, toHostedRepo, List.of(), true, true);\n+            TestBotRunner.runPeriodicItems(bot);\n+\n+            toCommits = toLocalRepo.commits().asList();\n+            assertEquals(1, toCommits.size());\n+            assertEquals(newHash, toCommits.get(0).hash());\n+            var toTags = toLocalRepo.tags();\n+            assertEquals(2, toTags.size());\n+            assertTrue(toTags.contains(new Tag(\"first\")));\n+            assertTrue(toTags.contains(new Tag(\"second\")));\n+            assertEquals(0, toLocalRepo.branches().size());\n+\n+            \/\/ Add another tag and go again\n+            fromLocalRepo.tag(newHash, \"third\", \"add third tag\", \"duke\", \"duk@openjdk.org\");\n+\n+            TestBotRunner.runPeriodicItems(bot);\n+            toTags = toLocalRepo.tags();\n+            assertEquals(3, toTags.size());\n+            assertTrue(toTags.contains(new Tag(\"first\")));\n+            assertTrue(toTags.contains(new Tag(\"second\")));\n+            assertTrue(toTags.contains(new Tag(\"third\")));\n+            assertEquals(0, toLocalRepo.branches().size());\n+            toCommits = toLocalRepo.commits().asList();\n+            assertEquals(1, toCommits.size());\n+\n+            \/\/ Change a tag and go again\n+            Files.writeString(newFile, \"Hello world again\\n\", StandardOpenOption.APPEND);\n+            fromLocalRepo.add(newFile);\n+            var secondHash = fromLocalRepo.commit(\"An additional commit\", \"duke\", \"duke@openjdk.org\");\n+            var firstTag = fromLocalRepo.tag(secondHash, \"first\", \"add first tag again\", \"duke\", \"duk@openjdk.org\", null, true);\n+\n+            TestBotRunner.runPeriodicItems(bot);\n+            assertEquals(0, toLocalRepo.branches().size());\n+            toCommits = toLocalRepo.commits().asList();\n+            assertEquals(2, toCommits.size());\n+            toTags = toLocalRepo.tags();\n+            assertEquals(3, toTags.size());\n+            assertEquals(fromLocalRepo.annotate(firstTag), toLocalRepo.annotate(firstTag), \"First tag not correctly mirrored\");\n+        }\n+    }\n","filename":"bots\/mirror\/src\/test\/java\/org\/openjdk\/skara\/bots\/mirror\/MirrorBotTests.java","additions":81,"deletions":4,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -60,1 +60,8 @@\n-    void pushAll(URI uri) throws IOException;\n+    void pushAll(URI uri, boolean force) throws IOException;\n+    default void pushAll(URI uri) throws IOException {\n+        pushAll(uri, false);\n+    }\n+    void pushTags(URI uri, boolean force) throws IOException;\n+    default void pushTags(URI uri) throws IOException {\n+        pushTags(uri, false);\n+    }\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/Repository.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -584,2 +584,21 @@\n-    public void pushAll(URI uri) throws IOException {\n-        try (var p = capture(\"git\", \"push\", \"--mirror\", uri.toString())) {\n+    public void pushAll(URI uri, boolean force) throws IOException {\n+        var cmd = new ArrayList<String>();\n+        cmd.addAll(List.of(\"git\", \"push\", \"--mirror\"));\n+        if (force) {\n+            cmd.add(\"--force\");\n+        }\n+        cmd.add(uri.toString());\n+        try (var p = capture(cmd)) {\n+            await(p);\n+        }\n+    }\n+\n+    @Override\n+    public void pushTags(URI uri, boolean force) throws IOException {\n+        var cmd = new ArrayList<String>();\n+        cmd.addAll(List.of(\"git\", \"push\", \"--tags\"));\n+        if (force) {\n+            cmd.add(\"--force\");\n+        }\n+        cmd.add(uri.toString());\n+        try (var p = capture(cmd)) {\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/git\/GitRepository.java","additions":21,"deletions":2,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -555,2 +555,8 @@\n-    public void pushAll(URI uri) throws IOException {\n-        try (var p = capture(\"hg\", \"push\", \"--new-branch\", uri.toString())) {\n+    public void pushAll(URI uri, boolean force) throws IOException {\n+        var cmd = new ArrayList<String>();\n+        cmd.addAll(List.of(\"hg\", \"push\", \"--new-branch\"));\n+        if (force) {\n+            cmd.add(\"--force\");\n+        }\n+        cmd.add(uri.toString());\n+        try (var p = capture(cmd)) {\n@@ -561,0 +567,5 @@\n+    @Override\n+    public void pushTags(URI uri, boolean force) throws IOException {\n+        throw new RuntimeException(\"Cannot push only tags with Mercurial\");\n+    }\n+\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/hg\/HgRepository.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"}]}