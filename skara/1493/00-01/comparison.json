{"files":[{"patch":"@@ -140,0 +140,7 @@\n+        if (onlyTags) {\n+            name += \" [tags only]\";\n+        } else if (includeTags) {\n+            name += \" [tags included]\";\n+        } else {\n+            name += \" [tags excluded]\";\n+        }\n@@ -170,0 +177,4 @@\n+\n+    public boolean isOnlyTags() {\n+        return onlyTags;\n+    }\n","filename":"bots\/mirror\/src\/main\/java\/org\/openjdk\/skara\/bots\/mirror\/MirrorBot.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -85,4 +85,6 @@\n-                includeTags = repo.get(\"tags\").contains(\"include\") &&\n-                              repo.get(\"tags\").get(\"include\").asBoolean();\n-                onlyTags = repo.get(\"tags\").contains(\"only\") &&\n-                           repo.get(\"tags\").get(\"only\").asBoolean();\n+                var tags = repo.get(\"tags\").asString().toLowerCase().strip();\n+                if (!Set.of(\"include\", \"only\", \"exclude\").contains(tags)) {\n+                    throw new IllegalStateException(\"\\\"tags\\\" field can only have values \\\"include\\\", \\\"only\\\" or \\\"exclude\\\"\");\n+                }\n+                onlyTags = tags.equals(\"only\");\n+                includeTags = tags.equals(\"include\");\n@@ -90,2 +92,3 @@\n-            if (onlyTags && !includeTags) {\n-                throw new IllegalStateException(\"Must include tags if only tags are mirrored\");\n+            if (onlyTags) {\n+                \/\/ Tags are by definition included when only tags are mirrored\n+                includeTags = true;\n@@ -96,0 +99,3 @@\n+            if (includeTags && !branchPatterns.isEmpty()) {\n+                throw new IllegalStateException(\"Cannot include tags with only selected branches (tags are *not* per branch)\");\n+            }\n","filename":"bots\/mirror\/src\/main\/java\/org\/openjdk\/skara\/bots\/mirror\/MirrorBotFactory.java","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -25,0 +25,2 @@\n+import java.util.List;\n+\n@@ -77,1 +79,1 @@\n-            assertEquals(\"MirrorBot@from1->to1 (master)\", mirrorBot1.toString());\n+            assertEquals(\"MirrorBot@from1->to1 (master) [tags excluded]\", mirrorBot1.toString());\n@@ -79,0 +81,1 @@\n+            assertFalse(mirrorBot1.isOnlyTags());\n@@ -82,1 +85,1 @@\n-            assertEquals(\"MirrorBot@from2->to2 (master,dev,test)\", mirrorBot2.toString());\n+            assertEquals(\"MirrorBot@from2->to2 (master,dev,test) [tags excluded]\", mirrorBot2.toString());\n@@ -84,0 +87,1 @@\n+            assertFalse(mirrorBot2.isOnlyTags());\n@@ -89,1 +93,174 @@\n-            assertEquals(\"MirrorBot@from3->to3\", mirrorBot3.toString());\n+            assertEquals(\"MirrorBot@from3->to3 [tags included]\", mirrorBot3.toString());\n+            assertTrue(mirrorBot3.isIncludeTags());\n+            assertFalse(mirrorBot3.isOnlyTags());\n+            assertEquals(0, mirrorBot3.getBranchPatterns().size());\n+        }\n+    }\n+\n+    @Test\n+    public void testThrowsWithUnsupportedTagsValue() {\n+        try (var tempFolder = new TemporaryDirectory()) {\n+            String jsonString = \"\"\"\n+                    {\n+                      \"repositories\": [\n+                        {\n+                          \"from\": \"from1\",\n+                          \"to\": \"to1\",\n+                          \"branches\": \"master\",\n+                          \"tags\": \"foo\"\n+                        }\n+                      ]\n+                    }\n+                    \"\"\";\n+            var jsonConfig = JWCC.parse(jsonString).asObject();\n+\n+            var testBotFactory = TestBotFactory.newBuilder()\n+                    .addHostedRepository(\"from1\", new TestHostedRepository(\"from1\"))\n+                    .addHostedRepository(\"to1\", new TestHostedRepository(\"to1\"))\n+                    .storagePath(tempFolder.path().resolve(\"storage\"))\n+                    .build();\n+\n+            assertThrows(IllegalStateException.class, () -> testBotFactory.createBots(MirrorBotFactory.NAME, jsonConfig));\n+        }\n+    }\n+\n+    @Test\n+    public void testThrowsWithBranchesAndTagsOnly() {\n+        try (var tempFolder = new TemporaryDirectory()) {\n+            String jsonString = \"\"\"\n+                    {\n+                      \"repositories\": [\n+                        {\n+                          \"from\": \"from1\",\n+                          \"to\": \"to1\",\n+                          \"branches\": \"master\",\n+                          \"tags\": \"only\"\n+                        }\n+                      ]\n+                    }\n+                    \"\"\";\n+            var jsonConfig = JWCC.parse(jsonString).asObject();\n+\n+            var testBotFactory = TestBotFactory.newBuilder()\n+                    .addHostedRepository(\"from1\", new TestHostedRepository(\"from1\"))\n+                    .addHostedRepository(\"to1\", new TestHostedRepository(\"to1\"))\n+                    .storagePath(tempFolder.path().resolve(\"storage\"))\n+                    .build();\n+\n+            assertThrows(IllegalStateException.class, () -> testBotFactory.createBots(MirrorBotFactory.NAME, jsonConfig));\n+        }\n+    }\n+\n+    @Test\n+    public void testThrowsWithBranchesAndTagsIncluded() {\n+        try (var tempFolder = new TemporaryDirectory()) {\n+            String jsonString = \"\"\"\n+                    {\n+                      \"repositories\": [\n+                        {\n+                          \"from\": \"from1\",\n+                          \"to\": \"to1\",\n+                          \"branches\": \"master\",\n+                          \"tags\": \"include\"\n+                        }\n+                      ]\n+                    }\n+                    \"\"\";\n+            var jsonConfig = JWCC.parse(jsonString).asObject();\n+\n+            var testBotFactory = TestBotFactory.newBuilder()\n+                    .addHostedRepository(\"from1\", new TestHostedRepository(\"from1\"))\n+                    .addHostedRepository(\"to1\", new TestHostedRepository(\"to1\"))\n+                    .storagePath(tempFolder.path().resolve(\"storage\"))\n+                    .build();\n+\n+            assertThrows(IllegalStateException.class, () -> testBotFactory.createBots(MirrorBotFactory.NAME, jsonConfig));\n+        }\n+    }\n+\n+    @Test\n+    public void testPassesWithBranchesAndTagsExplicitlyExcluded() {\n+        try (var tempFolder = new TemporaryDirectory()) {\n+            String jsonString = \"\"\"\n+                    {\n+                      \"repositories\": [\n+                        {\n+                          \"from\": \"from1\",\n+                          \"to\": \"to1\",\n+                          \"branches\": \"master\",\n+                          \"tags\": \"exclude\"\n+                        }\n+                      ]\n+                    }\n+                    \"\"\";\n+            var jsonConfig = JWCC.parse(jsonString).asObject();\n+\n+            var testBotFactory = TestBotFactory.newBuilder()\n+                    .addHostedRepository(\"from1\", new TestHostedRepository(\"from1\"))\n+                    .addHostedRepository(\"to1\", new TestHostedRepository(\"to1\"))\n+                    .storagePath(tempFolder.path().resolve(\"storage\"))\n+                    .build();\n+\n+            var bots = testBotFactory.createBots(MirrorBotFactory.NAME, jsonConfig);\n+            assertEquals(1, bots.size());\n+        }\n+    }\n+\n+    @Test\n+    public void testCreateWithTags() {\n+        try (var tempFolder = new TemporaryDirectory()) {\n+            String jsonString = \"\"\"\n+                    {\n+                      \"repositories\": [\n+                        {\n+                          \"from\": \"from1\",\n+                          \"to\": \"to1\",\n+                          \"branches\": \"master\"\n+                        },\n+                        {\n+                          \"from\": \"from2\",\n+                          \"to\": \"to2\",\n+                          \"tags\": \"include\"\n+                        },\n+                        {\n+                          \"from\": \"from3\",\n+                          \"to\": \"to3\",\n+                          \"tags\": \"only\"\n+                        },\n+                        {\n+                          \"from\": \"from4\",\n+                          \"to\": \"to4\",\n+                          \"tags\": \"exclude\"\n+                        },\n+                      ]\n+                    }\n+                    \"\"\";\n+            var jsonConfig = JWCC.parse(jsonString).asObject();\n+\n+            var testBotFactory = TestBotFactory.newBuilder()\n+                    .addHostedRepository(\"from1\", new TestHostedRepository(\"from1\"))\n+                    .addHostedRepository(\"from2\", new TestHostedRepository(\"from2\"))\n+                    .addHostedRepository(\"from3\", new TestHostedRepository(\"from3\"))\n+                    .addHostedRepository(\"from4\", new TestHostedRepository(\"from4\"))\n+                    .addHostedRepository(\"to1\", new TestHostedRepository(\"to1\"))\n+                    .addHostedRepository(\"to2\", new TestHostedRepository(\"to2\"))\n+                    .addHostedRepository(\"to3\", new TestHostedRepository(\"to3\"))\n+                    .addHostedRepository(\"to4\", new TestHostedRepository(\"to4\"))\n+                    .storagePath(tempFolder.path().resolve(\"storage\"))\n+                    .build();\n+\n+            var bots = testBotFactory.createBots(MirrorBotFactory.NAME, jsonConfig);\n+            assertEquals(4, bots.size());\n+\n+            MirrorBot mirrorBot1 = (MirrorBot) bots.get(0);\n+            assertEquals(\"MirrorBot@from1->to1 (master) [tags excluded]\", mirrorBot1.toString());\n+            assertFalse(mirrorBot1.isIncludeTags());\n+            assertEquals(\"master\", mirrorBot1.getBranchPatterns().get(0).toString());\n+\n+            MirrorBot mirrorBot2 = (MirrorBot) bots.get(1);\n+            assertEquals(\"MirrorBot@from2->to2 [tags included]\", mirrorBot2.toString());\n+            assertTrue(mirrorBot2.isIncludeTags());\n+            assertEquals(List.of(), mirrorBot2.getBranchPatterns());\n+\n+            MirrorBot mirrorBot3 = (MirrorBot) bots.get(2);\n+            assertEquals(\"MirrorBot@from3->to3 [tags only]\", mirrorBot3.toString());\n@@ -91,0 +268,7 @@\n+            assertTrue(mirrorBot3.isOnlyTags());\n+            assertEquals(0, mirrorBot3.getBranchPatterns().size());\n+\n+            MirrorBot mirrorBot4 = (MirrorBot) bots.get(3);\n+            assertEquals(\"MirrorBot@from4->to4 [tags excluded]\", mirrorBot4.toString());\n+            assertFalse(mirrorBot4.isIncludeTags());\n+            assertFalse(mirrorBot4.isOnlyTags());\n","filename":"bots\/mirror\/src\/test\/java\/org\/openjdk\/skara\/bots\/mirror\/MirrorBotFactoryTest.java","additions":187,"deletions":3,"binary":false,"changes":190,"status":"modified"}]}