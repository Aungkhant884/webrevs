{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,2 @@\n+    implementation project(':jcheck')\n+    implementation project(':jbs')\n","filename":"bots\/csr\/build.gradle","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,2 @@\n+    requires org.openjdk.skara.jcheck;\n+    requires org.openjdk.skara.jbs;\n","filename":"bots\/csr\/src\/main\/java\/module-info.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,3 @@\n+import org.openjdk.skara.jbs.Backports;\n+import org.openjdk.skara.jbs.JdkVersion;\n+import org.openjdk.skara.jcheck.JCheckConfiguration;\n@@ -65,0 +68,22 @@\n+    \/**\n+     * Find the right CSR of the PR according to the primary issue and the primary CSR\n+     *\/\n+    private Optional<Issue> findBackportCsr(PullRequest pr, Issue primary, Issue csr) {\n+        var confFile = pr.repository().fileContents(\".jcheck\/conf\", pr.targetRef());\n+        var configuration = JCheckConfiguration.parse(confFile.lines().toList());\n+        var version = configuration.general().version().orElse(null);\n+        if (version == null || \"\".equals(version)) {\n+            return Optional.empty();\n+        }\n+        var jdkVersion = JdkVersion.parse(version);\n+        if (jdkVersion.isEmpty()) {\n+            return Optional.empty();\n+        }\n+        var versionMatch = Backports.fixVersions(csr).stream().anyMatch(v -> v.equals(version));\n+        if (versionMatch) {\n+            return Optional.of(csr);\n+        }\n+        var backportIssue = Backports.findIssue(primary, jdkVersion.get());\n+        return backportIssue.flatMap(issue -> csrLink(issue).flatMap(Link::issue));\n+    }\n+\n@@ -75,2 +100,2 @@\n-            var jbsIssue = project.issue(issue.get().shortId());\n-            if (jbsIssue.isEmpty()) {\n+            var jbsIssueOpt = project.issue(issue.get().shortId());\n+            if (jbsIssueOpt.isEmpty()) {\n@@ -81,1 +106,2 @@\n-            var csrOptional = csrLink(jbsIssue.get()).flatMap(Link::issue);\n+            var jbsIssue = jbsIssueOpt.get();\n+            var csrOptional = csrLink(jbsIssue).flatMap(Link::issue);\n@@ -88,0 +114,9 @@\n+            if (pr.labelNames().contains(\"backport\")) {\n+                csrOptional = findBackportCsr(pr, jbsIssue, csr);\n+                if (csrOptional.isEmpty()) {\n+                    log.info(\"Not found backport CSR for \" + describe(pr));\n+                    continue;\n+                }\n+                csr = csrOptional.get();\n+            }\n+\n","filename":"bots\/csr\/src\/main\/java\/org\/openjdk\/skara\/bots\/csr\/CSRBot.java","additions":39,"deletions":4,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import org.openjdk.skara.json.JSONArray;\n@@ -33,0 +34,2 @@\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n@@ -259,0 +262,123 @@\n+\n+    @Test\n+    void testBackportCsr(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var repo = credentials.getHostedRepository();\n+            var issueProject = credentials.getIssueProject();\n+            var bot = new CSRBot(repo, issueProject);\n+\n+            var issue = issueProject.createIssue(\"This is the primary issue\", List.of(), Map.of());\n+            issue.setState(Issue.State.CLOSED);\n+            issue.setProperty(\"issuetype\", JSON.of(\"Bug\"));\n+            issue.setProperty(\"fixVersions\",  new JSONArray(List.of(JSON.of(\"18\"))));\n+\n+            var csr = issueProject.createIssue(\"This is the primary CSR\", List.of(), Map.of());\n+            csr.setState(Issue.State.CLOSED);\n+            csr.setProperty(\"issuetype\", JSON.of(\"CSR\"));\n+            csr.setProperty(\"fixVersions\",  new JSONArray(List.of(JSON.of(\"18\"))));\n+            issue.addLink(Link.create(csr, \"csr for\").build());\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n+            var localRepo = CheckableRepository.init(localRepoFolder, repo.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, repo.url(), \"master\", true);\n+\n+            \/\/ Push a commit to the jdk18 branch\n+            var jdk18Branch = localRepo.branch(masterHash, \"jdk18\");\n+            localRepo.checkout(jdk18Branch);\n+            var newFile = localRepo.root().resolve(\"a_new_file.txt\");\n+            Files.writeString(newFile, \"a_new_file\");\n+            localRepo.add(newFile);\n+            var issueNumber = issue.id().split(\"-\")[1];\n+            var commitMessage = issueNumber + \": This is the primary issue\\n\\nReviewed-by: integrationreviewer2\";\n+            var commitHash = localRepo.commit(commitMessage, \"integrationcommitter1\", \"integrationcommitter1@openjdk.java.net\");\n+            localRepo.push(commitHash, repo.url(), \"jdk18\", true);\n+\n+            \/\/ \"backport\" the commit to the master branch\n+            localRepo.checkout(localRepo.defaultBranch());\n+            var editBranch = localRepo.branch(masterHash, \"edit\");\n+            localRepo.checkout(editBranch);\n+            var newFile2 = localRepo.root().resolve(\"a_new_file.txt\");\n+            Files.writeString(newFile2, \"a_new_file\");\n+            localRepo.add(newFile2);\n+            var editHash = localRepo.commit(\"Backport\", \"duke\", \"duke@openjdk.java.net\");\n+            localRepo.push(editHash, repo.url(), \"edit\", true);\n+            var pr = credentials.createPullRequest(repo, \"master\", \"edit\", issueNumber + \": This is the primary issue\");\n+            pr.addLabel(\"backport\");\n+\n+            \/\/ Remove `version=0.1` from `.jcheck\/conf`, set the version as null\n+            localRepo.checkout(localRepo.defaultBranch());\n+            var defaultConf = Files.readString(localRepo.root().resolve(\".jcheck\/conf\"), StandardCharsets.UTF_8);\n+            var newConf = defaultConf.replace(\"version=0.1\", \"\");\n+            Files.writeString(localRepo.root().resolve(\".jcheck\/conf\"), newConf, StandardCharsets.UTF_8);\n+            localRepo.add(localRepo.root().resolve(\".jcheck\/conf\"));\n+            var confHash = localRepo.commit(\"Set version as null\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(confHash, repo.url(), \"master\", true);\n+            assertFalse(pr.labelNames().contains(\"csr\"));\n+            \/\/ Run bot. The bot won't get a CSR.\n+            TestBotRunner.runPeriodicItems(bot);\n+            \/\/ The bot shouldn't add the `csr` label.\n+            assertFalse(pr.labelNames().contains(\"csr\"));\n+\n+            \/\/ Add `version=bla` to `.jcheck\/conf`, set the version as a wrong value\n+            localRepo.checkout(localRepo.defaultBranch());\n+            defaultConf = Files.readString(localRepo.root().resolve(\".jcheck\/conf\"), StandardCharsets.UTF_8);\n+            newConf = defaultConf.replace(\"project=test\", \"project=test\\nversion=bla\");\n+            Files.writeString(localRepo.root().resolve(\".jcheck\/conf\"), newConf, StandardCharsets.UTF_8);\n+            localRepo.add(localRepo.root().resolve(\".jcheck\/conf\"));\n+            confHash = localRepo.commit(\"Set the version as a wrong value\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(confHash, repo.url(), \"master\", true);\n+            \/\/ Run bot. The bot won't get a CSR.\n+            TestBotRunner.runPeriodicItems(bot);\n+            \/\/ The bot shouldn't add the `csr` label.\n+            assertFalse(pr.labelNames().contains(\"csr\"));\n+\n+            \/\/ Set the `version` in `.jcheck\/conf` as 17 which is an available version.\n+            localRepo.checkout(localRepo.defaultBranch());\n+            defaultConf = Files.readString(localRepo.root().resolve(\".jcheck\/conf\"), StandardCharsets.UTF_8);\n+            newConf = defaultConf.replace(\"version=bla\", \"version=17\");\n+            Files.writeString(localRepo.root().resolve(\".jcheck\/conf\"), newConf, StandardCharsets.UTF_8);\n+            localRepo.add(localRepo.root().resolve(\".jcheck\/conf\"));\n+            confHash = localRepo.commit(\"Set the version as 17\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(confHash, repo.url(), \"master\", true);\n+            \/\/ Run bot. The primary CSR doesn't have the fix version `17`, so the bot won't get a CSR.\n+            TestBotRunner.runPeriodicItems(bot);\n+            \/\/ The bot shouldn't add the `csr` label.\n+            assertFalse(pr.labelNames().contains(\"csr\"));\n+\n+            \/\/ Set the fix versions of the primary CSR to 17 and 18.\n+            csr.setProperty(\"fixVersions\",  new JSONArray(List.of(JSON.of(\"17\"), JSON.of(\"18\"))));\n+            \/\/ Run bot. The primary CSR has the fix version `17`, so it would be used and the `csr` label would be added.\n+            TestBotRunner.runPeriodicItems(bot);\n+            \/\/ The bot should have added the `csr` label\n+            assertTrue(pr.labelNames().contains(\"csr\"));\n+\n+            \/\/ Revert the fix versions of the primary CSR to 18.\n+            csr.setProperty(\"fixVersions\",  new JSONArray(List.of(JSON.of(\"18\"))));\n+            \/\/ Create a backport issue whose fix version is 17\n+            var backportIssue = issueProject.createIssue(\"This is the backport issue\", List.of(), Map.of());\n+            backportIssue.setProperty(\"issuetype\", JSON.of(\"Backport\"));\n+            backportIssue.setProperty(\"fixVersions\",  new JSONArray(List.of(JSON.of(\"17\"))));\n+            backportIssue.setState(Issue.State.OPEN);\n+            issue.addLink(Link.create(backportIssue, \"backported by\").build());\n+            assertTrue(pr.labelNames().contains(\"csr\"));\n+            pr.removeLabel(\"csr\");\n+            \/\/ Run bot. The bot can find a backport issue but can't find a backport CSR.\n+            TestBotRunner.runPeriodicItems(bot);\n+            \/\/ The bot shouldn't add the `csr` label.\n+            assertFalse(pr.labelNames().contains(\"csr\"));\n+\n+            \/\/ Create a backport CSR whose fix version is 17.\n+            var backportCsr = issueProject.createIssue(\"This is the backport CSR\", List.of(), Map.of());\n+            backportCsr.setProperty(\"issuetype\", JSON.of(\"CSR\"));\n+            backportCsr.setProperty(\"fixVersions\",  new JSONArray(List.of(JSON.of(\"17\"))));\n+            backportCsr.setState(Issue.State.OPEN);\n+            backportIssue.addLink(Link.create(backportCsr, \"csr for\").build());\n+            \/\/ Run bot. The bot can find a backport issue and a backport CSR.\n+            TestBotRunner.runPeriodicItems(bot);\n+            \/\/ The bot should have added the CSR label\n+            assertTrue(pr.labelNames().contains(\"csr\"));\n+        }\n+    }\n","filename":"bots\/csr\/src\/test\/java\/org\/openjdk\/skara\/bots\/csr\/CSRBotTests.java","additions":127,"deletions":1,"binary":false,"changes":128,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,0 +47,1 @@\n+    implementation project(':jbs')\n","filename":"bots\/pr\/build.gradle","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+    requires org.openjdk.skara.jbs;\n","filename":"bots\/pr\/src\/main\/java\/module-info.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,0 +27,3 @@\n+import org.openjdk.skara.jbs.Backports;\n+import org.openjdk.skara.jbs.JdkVersion;\n+import org.openjdk.skara.jcheck.JCheckConfiguration;\n@@ -53,1 +56,1 @@\n-    private static void linkReply(PullRequest pr, Issue issue, PrintWriter writer) {\n+    private static void linkReply(PullRequest pr, Issue issue, PrintWriter writer, boolean withVersion) {\n@@ -55,2 +58,2 @@\n-                      \"[\" + issue.id() + \"](\" + issue.webUrl() + \"). This pull request cannot be integrated until \" +\n-                      \"the CSR request is approved.\");\n+                \"[\" + issue.id() + \"](\" + issue.webUrl() + \")\" + (withVersion ? \" with the right fix version\" : \"\")\n+                + \". This pull request cannot be integrated until the CSR request is approved.\");\n@@ -64,0 +67,22 @@\n+    \/**\n+     * Find the right CSR of the PR according to the primary issue and the primary CSR\n+     *\/\n+    private Optional<Issue> findBackportCsr(PullRequest pr, Issue primary, Issue csr) {\n+        var confFile = pr.repository().fileContents(\".jcheck\/conf\", pr.targetRef());\n+        var configuration = JCheckConfiguration.parse(confFile.lines().toList());\n+        var version = configuration.general().version().orElse(null);\n+        if (version == null || \"\".equals(version)) {\n+            return Optional.empty();\n+        }\n+        var jdkVersion = JdkVersion.parse(version);\n+        if (jdkVersion.isEmpty()) {\n+            return Optional.empty();\n+        }\n+        var versionMatch = Backports.fixVersions(csr).stream().anyMatch(v -> v.equals(version));\n+        if (versionMatch) {\n+            return Optional.of(csr);\n+        }\n+        var backportIssue = Backports.findIssue(primary, jdkVersion.get());\n+        return backportIssue.flatMap(issue -> csrLink(issue).flatMap(Link::issue));\n+    }\n+\n@@ -91,0 +116,2 @@\n+                \/\/ FIXME here, the PR may have an approved CSR. We should distinguishing the situations\n+                \/\/ about having no csr request and (having csr request && the CSR has been approved).\n@@ -103,2 +130,2 @@\n-            var jbsIssue = issueProject.issue(issue.get().shortId());\n-            if (jbsIssue.isEmpty()) {\n+            var jbsIssueOpt = issueProject.issue(issue.get().shortId());\n+            if (jbsIssueOpt.isEmpty()) {\n@@ -111,1 +138,2 @@\n-            var csrLink = csrLink(jbsIssue.get());\n+            var jbsIssue = jbsIssueOpt.get();\n+            var csrLink = csrLink(jbsIssue);\n@@ -129,0 +157,11 @@\n+            if (pr.labelNames().contains(\"backport\")) {\n+                csrOptional = findBackportCsr(pr, jbsIssue, csrIssue);\n+                if (csrOptional.isEmpty()) {\n+                    pr.removeLabel(CSR_LABEL);\n+                    reply.println(\"determined that a [CSR](https:\/\/wiki.openjdk.java.net\/display\/csr\/Main) request \" +\n+                            \"is not needed for this pull request.\");\n+                    return;\n+                }\n+                csrIssue = csrOptional.get();\n+            }\n+\n@@ -163,2 +202,2 @@\n-        var jbsIssue = issueProject.issue(issue.get().shortId());\n-        if (jbsIssue.isEmpty()) {\n+        var jbsIssueOpt = issueProject.issue(issue.get().shortId());\n+        if (jbsIssueOpt.isEmpty()) {\n@@ -169,1 +208,0 @@\n-\n@@ -172,1 +210,2 @@\n-        var csrOptional = csrLink(jbsIssue.get()).flatMap(Link::issue);\n+        var jbsIssue = jbsIssueOpt.get();\n+        var csrOptional = csrLink(jbsIssue).flatMap(Link::issue);\n@@ -175,1 +214,1 @@\n-            linkReply(pr, jbsIssue.get(), reply);\n+            linkReply(pr, jbsIssue, reply, false);\n@@ -181,0 +220,11 @@\n+        if (pr.labelNames().contains(\"backport\")) {\n+            csrOptional = findBackportCsr(pr, jbsIssue, csr);\n+            if (csrOptional.isEmpty()) {\n+                csrReply(reply);\n+                linkReply(pr, jbsIssue, reply, true);\n+                pr.addLabel(CSR_LABEL);\n+                return;\n+            }\n+            csr = csrOptional.get();\n+        }\n+\n@@ -190,1 +240,1 @@\n-            reply.println(\"the issue for this pull request, [\" + jbsIssue.get().id() + \"](\" + jbsIssue.get().webUrl() + \"), already has \" +\n+            reply.println(\"the issue for this pull request, [\" + jbsIssue.id() + \"](\" + jbsIssue.webUrl() + \"), already has \" +\n@@ -195,1 +245,1 @@\n-                          \"[\" + jbsIssue.get().id() + \"](\" + jbsIssue.get().webUrl() + \") has been approved.\");\n+                          \"[\" + jbsIssue.id() + \"](\" + jbsIssue.webUrl() + \") has been approved.\");\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CSRCommand.java","additions":63,"deletions":13,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -30,0 +30,3 @@\n+import org.openjdk.skara.jbs.Backports;\n+import org.openjdk.skara.jbs.JdkVersion;\n+import org.openjdk.skara.jcheck.JCheckConfiguration;\n@@ -139,2 +142,2 @@\n-        var jbsIssue = issueProject.issue(issue.shortId());\n-        if (jbsIssue.isEmpty()) {\n+        var jbsIssueOpt = issueProject.issue(issue.shortId());\n+        if (jbsIssueOpt.isEmpty()) {\n@@ -143,3 +146,5 @@\n-        var csr = csrLink(jbsIssue.get()).flatMap(Link::issue);\n-        if (csr.isPresent()) {\n-            return Issue.fromStringRelaxed(csr.get().id() + \": \" + csr.get().title());\n+\n+        var jbsIssue = jbsIssueOpt.get();\n+        var csrOpt = csrLink(jbsIssue).flatMap(Link::issue);\n+        if (csrOpt.isEmpty()) {\n+            return Optional.empty();\n@@ -147,1 +152,28 @@\n-        return Optional.empty();\n+\n+        var csr = csrOpt.get();\n+        if (pr.labelNames().contains(\"backport\")) {\n+            return findBackportCsr(jbsIssue, csr).flatMap(perIssue -> Issue.fromStringRelaxed(perIssue.id() + \": \" + perIssue.title()));\n+        }\n+        return Issue.fromStringRelaxed(csr.id() + \": \" + csr.title());\n+    }\n+\n+    \/**\n+     * Find the right CSR according to the primary issue and the primary CSR\n+     *\/\n+    private Optional<org.openjdk.skara.issuetracker.Issue> findBackportCsr(org.openjdk.skara.issuetracker.Issue primary, org.openjdk.skara.issuetracker.Issue csr) {\n+        var confFile = pr.repository().fileContents(\".jcheck\/conf\", pr.targetRef());\n+        var configuration = JCheckConfiguration.parse(confFile.lines().toList());\n+        var version = configuration.general().version().orElse(null);\n+        if (version == null || \"\".equals(version)) {\n+            return Optional.empty();\n+        }\n+        var jdkVersion = JdkVersion.parse(version);\n+        if (jdkVersion.isEmpty()) {\n+            return Optional.empty();\n+        }\n+        var versionMatch = Backports.fixVersions(csr).stream().anyMatch(v -> v.equals(version));\n+        if (versionMatch) {\n+            return Optional.of(csr);\n+        }\n+        var backportIssue = Backports.findIssue(primary, jdkVersion.get());\n+        return backportIssue.flatMap(issue -> csrLink(issue).flatMap(Link::issue));\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":38,"deletions":6,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+import org.openjdk.skara.forge.HostedRepository;\n@@ -29,0 +30,1 @@\n+import org.openjdk.skara.json.JSONArray;\n@@ -30,0 +32,2 @@\n+import org.openjdk.skara.vcs.Hash;\n+import org.openjdk.skara.vcs.Repository;\n@@ -32,0 +36,2 @@\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n@@ -686,0 +692,209 @@\n+\n+    @Test\n+    void testBackportCsr(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var issueProject = credentials.getIssueProject();\n+            var botRepo = credentials.getHostedRepository();\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addReviewer(author.forge().currentUser().id())\n+                    .addReviewer(reviewer.forge().currentUser().id());\n+            var bot = PullRequestBot.newBuilder().repo(botRepo).enableCsr(true)\n+                    .censusRepo(censusBuilder.build()).issueProject(issueProject).build();\n+\n+            var issue = issueProject.createIssue(\"This is the primary issue\", List.of(), Map.of());\n+            issue.setState(Issue.State.CLOSED);\n+            issue.setProperty(\"issuetype\", JSON.of(\"Bug\"));\n+            issue.setProperty(\"fixVersions\",  new JSONArray(List.of(JSON.of(\"18\"))));\n+\n+            var csr = issueProject.createIssue(\"This is the primary CSR\", List.of(), Map.of());\n+            csr.setState(Issue.State.CLOSED);\n+            csr.setProperty(\"issuetype\", JSON.of(\"CSR\"));\n+            csr.setProperty(\"fixVersions\",  new JSONArray(List.of(JSON.of(\"18\"))));\n+            csr.setProperty(\"resolution\", JSON.object().put(\"name\", \"Approved\"));\n+            issue.addLink(Link.create(csr, \"csr for\").build());\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Push a commit to the jdk18 branch\n+            var jdk18Branch = localRepo.branch(masterHash, \"jdk18\");\n+            localRepo.checkout(jdk18Branch);\n+            var newFile = localRepo.root().resolve(\"a_new_file.txt\");\n+            Files.writeString(newFile, \"a_new_file\");\n+            localRepo.add(newFile);\n+            var issueNumber = issue.id().split(\"-\")[1];\n+            var commitMessage = issueNumber + \": This is the primary issue\\n\\nReviewed-by: integrationreviewer2\";\n+            var commitHash = localRepo.commit(commitMessage, \"integrationcommitter1\", \"integrationcommitter1@openjdk.java.net\");\n+            localRepo.push(commitHash, author.url(), \"jdk18\", true);\n+\n+            \/\/ Remove `version=0.1` from `.jcheck\/conf`, set the version as null\n+            localRepo.checkout(localRepo.defaultBranch());\n+            var defaultConf = Files.readString(localRepo.root().resolve(\".jcheck\/conf\"), StandardCharsets.UTF_8);\n+            var newConf = defaultConf.replace(\"version=0.1\", \"\");\n+            Files.writeString(localRepo.root().resolve(\".jcheck\/conf\"), newConf, StandardCharsets.UTF_8);\n+            localRepo.add(localRepo.root().resolve(\".jcheck\/conf\"));\n+            var confHash = localRepo.commit(\"Set version as null\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(confHash, author.url(), \"master\", true);\n+            createBackport(localRepo, author, confHash, \"edit1\");\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit1\", \"Backport \" + commitHash);\n+            \/\/ Run bot. Request a CSR.\n+            pr.addComment(\"\/csr\");\n+            TestBotRunner.runPeriodicItems(bot);\n+            assertTrue(pr.body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.labelNames().contains(\"csr\"));\n+            assertLastCommentContains(pr, \"has indicated that a \" +\n+                    \"[compatibility and specification](https:\/\/wiki.openjdk.java.net\/display\/csr\/Main) (CSR) request \" +\n+                    \"is needed for this pull request.\");\n+            assertLastCommentContains(pr, \"please create a [CSR](https:\/\/wiki.openjdk.java.net\/display\/csr\/Main) request for issue\");\n+            assertLastCommentContains(pr, \"with the right fix version\");\n+            assertLastCommentContains(pr, \"This pull request cannot be integrated until the CSR request is approved.\");\n+            \/\/ Use `\/csr unneeded` to revert the change.\n+            pr.addComment(\"\/csr unneeded\");\n+            TestBotRunner.runPeriodicItems(bot);\n+            assertFalse(pr.body().contains(\"Change requires a CSR request to be approved\"));\n+            assertFalse(pr.labelNames().contains(\"csr\"));\n+            assertLastCommentContains(pr, \"determined that a [CSR](https:\/\/wiki.openjdk.java.net\/display\/csr\/Main) request \" +\n+                    \"is not needed for this pull request.\");\n+\n+            \/\/ Add `version=bla` to `.jcheck\/conf`, set the version as a wrong value\n+            localRepo.checkout(localRepo.defaultBranch());\n+            defaultConf = Files.readString(localRepo.root().resolve(\".jcheck\/conf\"), StandardCharsets.UTF_8);\n+            newConf = defaultConf.replace(\"project=test\", \"project=test\\nversion=bla\");\n+            Files.writeString(localRepo.root().resolve(\".jcheck\/conf\"), newConf, StandardCharsets.UTF_8);\n+            localRepo.add(localRepo.root().resolve(\".jcheck\/conf\"));\n+            confHash = localRepo.commit(\"Set the version as a wrong value\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(confHash, author.url(), \"master\", true);\n+            createBackport(localRepo, author, confHash, \"edit2\");\n+            pr = credentials.createPullRequest(author, \"master\", \"edit2\", \"Backport \" + commitHash);\n+            \/\/ Run bot. Request a CSR.\n+            pr.addComment(\"\/csr\");\n+            TestBotRunner.runPeriodicItems(bot);\n+            assertTrue(pr.body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.labelNames().contains(\"csr\"));\n+            assertLastCommentContains(pr, \"has indicated that a \" +\n+                    \"[compatibility and specification](https:\/\/wiki.openjdk.java.net\/display\/csr\/Main) (CSR) request \" +\n+                    \"is needed for this pull request.\");\n+            assertLastCommentContains(pr, \"please create a [CSR](https:\/\/wiki.openjdk.java.net\/display\/csr\/Main) request for issue\");\n+            assertLastCommentContains(pr, \"with the right fix version\");\n+            assertLastCommentContains(pr, \"This pull request cannot be integrated until the CSR request is approved.\");\n+            \/\/ Use `\/csr unneeded` to revert the change.\n+            pr.addComment(\"\/csr unneeded\");\n+            TestBotRunner.runPeriodicItems(bot);\n+            assertFalse(pr.body().contains(\"Change requires a CSR request to be approved\"));\n+            assertFalse(pr.labelNames().contains(\"csr\"));\n+            assertLastCommentContains(pr, \"determined that a [CSR](https:\/\/wiki.openjdk.java.net\/display\/csr\/Main) request \" +\n+                    \"is not needed for this pull request.\");\n+\n+            \/\/ Set the `version` in `.jcheck\/conf` as 17 which is an available version.\n+            localRepo.checkout(localRepo.defaultBranch());\n+            defaultConf = Files.readString(localRepo.root().resolve(\".jcheck\/conf\"), StandardCharsets.UTF_8);\n+            newConf = defaultConf.replace(\"version=bla\", \"version=17\");\n+            Files.writeString(localRepo.root().resolve(\".jcheck\/conf\"), newConf, StandardCharsets.UTF_8);\n+            localRepo.add(localRepo.root().resolve(\".jcheck\/conf\"));\n+            confHash = localRepo.commit(\"Set the version as 17\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(confHash, author.url(), \"master\", true);\n+            createBackport(localRepo, author, confHash, \"edit3\");\n+            pr = credentials.createPullRequest(author, \"master\", \"edit3\", \"Backport \" + commitHash);\n+            \/\/ Run bot. Request a CSR.\n+            pr.addComment(\"\/csr\");\n+            TestBotRunner.runPeriodicItems(bot);\n+            assertTrue(pr.body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.labelNames().contains(\"csr\"));\n+            assertLastCommentContains(pr, \"has indicated that a \" +\n+                    \"[compatibility and specification](https:\/\/wiki.openjdk.java.net\/display\/csr\/Main) (CSR) request \" +\n+                    \"is needed for this pull request.\");\n+            assertLastCommentContains(pr, \"please create a [CSR](https:\/\/wiki.openjdk.java.net\/display\/csr\/Main) request for issue\");\n+            assertLastCommentContains(pr, \"with the right fix version\");\n+            assertLastCommentContains(pr, \"This pull request cannot be integrated until the CSR request is approved.\");\n+            \/\/ Use `\/csr unneeded` to revert the change.\n+            pr.addComment(\"\/csr unneeded\");\n+            TestBotRunner.runPeriodicItems(bot);\n+            assertFalse(pr.body().contains(\"Change requires a CSR request to be approved\"));\n+            assertFalse(pr.labelNames().contains(\"csr\"));\n+            assertLastCommentContains(pr, \"determined that a [CSR](https:\/\/wiki.openjdk.java.net\/display\/csr\/Main) request \" +\n+                    \"is not needed for this pull request.\");\n+\n+            \/\/ Set the fix versions of the primary CSR to 17 and 18.\n+            csr.setProperty(\"fixVersions\",  new JSONArray(List.of(JSON.of(\"17\"), JSON.of(\"18\"))));\n+            \/\/ Run bot. Request a CSR.\n+            pr.addComment(\"\/summary\\n\" + commitMessage);\n+            pr.addComment(\"\/csr\");\n+            TestBotRunner.runPeriodicItems(bot);\n+            assertTrue(pr.body().contains(\"- [x] Change requires a CSR request to be approved\"));\n+            assertFalse(pr.labelNames().contains(\"csr\"));\n+            assertLastCommentContains(pr, \"the issue for this pull request\");\n+            assertLastCommentContains(pr, \"already has an approved CSR request\");\n+            \/\/ FIXME here, `\/csr unneeded` is not used because these is a bug at CSRCommand. See the FIXME at CSRCommand.\n+\n+            \/\/ Revert the fix versions of the primary CSR to 18.\n+            csr.setProperty(\"fixVersions\",  new JSONArray(List.of(JSON.of(\"18\"))));\n+            \/\/ Create a backport issue whose fix version is 17\n+            var backportIssue = issueProject.createIssue(\"This is the backport issue\", List.of(), Map.of());\n+            backportIssue.setProperty(\"issuetype\", JSON.of(\"Backport\"));\n+            backportIssue.setProperty(\"fixVersions\",  new JSONArray(List.of(JSON.of(\"17\"))));\n+            backportIssue.setState(Issue.State.OPEN);\n+            issue.addLink(Link.create(backportIssue, \"backported by\").build());\n+            \/\/ Run bot. Request a CSR.\n+            pr.addComment(\"\/summary\\n\" + commitMessage);\n+            pr.addComment(\"\/csr\");\n+            TestBotRunner.runPeriodicItems(bot);\n+            assertTrue(pr.body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.labelNames().contains(\"csr\"));\n+            assertLastCommentContains(pr, \"has indicated that a \" +\n+                    \"[compatibility and specification](https:\/\/wiki.openjdk.java.net\/display\/csr\/Main) (CSR) request \" +\n+                    \"is needed for this pull request.\");\n+            assertLastCommentContains(pr, \"please create a [CSR](https:\/\/wiki.openjdk.java.net\/display\/csr\/Main) request for issue\");\n+            assertLastCommentContains(pr, \"with the right fix version\");\n+            assertLastCommentContains(pr, \"This pull request cannot be integrated until the CSR request is approved.\");\n+            \/\/ Use `\/csr unneeded` to revert the change.\n+            pr.addComment(\"\/summary\\n\" + commitMessage);\n+            pr.addComment(\"\/csr unneeded\");\n+            TestBotRunner.runPeriodicItems(bot);\n+            assertFalse(pr.body().contains(\"Change requires a CSR request to be approved\"));\n+            assertFalse(pr.labelNames().contains(\"csr\"));\n+            assertLastCommentContains(pr, \"determined that a [CSR](https:\/\/wiki.openjdk.java.net\/display\/csr\/Main) request \" +\n+                    \"is not needed for this pull request.\");\n+\n+            \/\/ Create a backport CSR whose fix version is 17.\n+            var backportCsr = issueProject.createIssue(\"This is the backport CSR\", List.of(), Map.of());\n+            backportCsr.setProperty(\"issuetype\", JSON.of(\"CSR\"));\n+            backportCsr.setProperty(\"fixVersions\",  new JSONArray(List.of(JSON.of(\"17\"))));\n+            backportCsr.setState(Issue.State.OPEN);\n+            backportIssue.addLink(Link.create(backportCsr, \"csr for\").build());\n+            \/\/ Run bot. Request a CSR.\n+            pr.addComment(\"\/summary\\n\" + commitMessage);\n+            pr.addComment(\"\/csr\");\n+            TestBotRunner.runPeriodicItems(bot);\n+            assertTrue(pr.body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.labelNames().contains(\"csr\"));\n+            assertLastCommentContains(pr, \"this pull request will not be integrated until the [CSR]\");\n+            assertLastCommentContains(pr, \"for issue \");\n+            assertLastCommentContains(pr, \"has been approved.\");\n+            \/\/ Use `\/csr unneeded` to revert the change.\n+            pr.addComment(\"\/summary\\n\" + commitMessage);\n+            pr.addComment(\"\/csr unneeded\");\n+            TestBotRunner.runPeriodicItems(bot);\n+            assertTrue(pr.body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.labelNames().contains(\"csr\"));\n+            assertLastCommentContains(pr, \"The CSR requirement cannot be removed as there is already a CSR associated \" +\n+                    \"with the main issue of this pull request. Please withdraw the CSR\");\n+            assertLastCommentContains(pr, \"and then use the command `\/csr unneeded` again.\");\n+        }\n+    }\n+\n+    private void createBackport(Repository localRepo, HostedRepository author, Hash masterHash, String branchName) throws IOException {\n+        localRepo.checkout(localRepo.defaultBranch());\n+        var editBranch = localRepo.branch(masterHash, branchName);\n+        localRepo.checkout(editBranch);\n+        var newFile2 = localRepo.root().resolve(\"a_new_file.txt\");\n+        Files.writeString(newFile2, \"a_new_file\");\n+        localRepo.add(newFile2);\n+        var editHash = localRepo.commit(\"Backport\", \"duke\", \"duke@openjdk.java.net\");\n+        localRepo.push(editHash, author.url(), branchName, true);\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CSRTests.java","additions":215,"deletions":0,"binary":false,"changes":215,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import org.openjdk.skara.json.JSONArray;\n@@ -2043,0 +2044,165 @@\n+\n+    @Test\n+    void testBackportCsr(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var issueProject = credentials.getIssueProject();\n+            var botRepo = credentials.getHostedRepository();\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addCommitter(author.forge().currentUser().id())\n+                    .addReviewer(reviewer.forge().currentUser().id());\n+            var bot = PullRequestBot.newBuilder().repo(botRepo)\n+                    .censusRepo(censusBuilder.build()).issueProject(issueProject).build();\n+\n+            var issue = issueProject.createIssue(\"This is the primary issue\", List.of(), Map.of());\n+            issue.setState(Issue.State.CLOSED);\n+            issue.setProperty(\"issuetype\", JSON.of(\"Bug\"));\n+            issue.setProperty(\"fixVersions\",  new JSONArray(List.of(JSON.of(\"18\"))));\n+\n+            var csr = issueProject.createIssue(\"This is the primary CSR\", List.of(), Map.of());\n+            csr.setState(Issue.State.CLOSED);\n+            csr.setProperty(\"issuetype\", JSON.of(\"CSR\"));\n+            csr.setProperty(\"fixVersions\",  new JSONArray(List.of(JSON.of(\"18\"))));\n+            issue.addLink(Link.create(csr, \"csr for\").build());\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Push a commit to the jdk18 branch\n+            var jdk18Branch = localRepo.branch(masterHash, \"jdk18\");\n+            localRepo.checkout(jdk18Branch);\n+            var newFile = localRepo.root().resolve(\"a_new_file.txt\");\n+            Files.writeString(newFile, \"a_new_file\");\n+            localRepo.add(newFile);\n+            var issueNumber = issue.id().split(\"-\")[1];\n+            var commitMessage = issueNumber + \": This is the primary issue\\n\\nReviewed-by: integrationreviewer2\";\n+            var commitHash = localRepo.commit(commitMessage, \"integrationcommitter1\", \"integrationcommitter1@openjdk.java.net\");\n+            localRepo.push(commitHash, author.url(), \"jdk18\", true);\n+\n+            \/\/ \"backport\" the commit to the master branch\n+            localRepo.checkout(localRepo.defaultBranch());\n+            var editBranch = localRepo.branch(masterHash, \"edit\");\n+            localRepo.checkout(editBranch);\n+            var newFile2 = localRepo.root().resolve(\"a_new_file.txt\");\n+            Files.writeString(newFile2, \"a_new_file\");\n+            localRepo.add(newFile2);\n+            var editHash = localRepo.commit(\"Backport\", \"duke\", \"duke@openjdk.java.net\");\n+            localRepo.push(editHash, author.url(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"Backport \" + commitHash);\n+\n+            \/\/ Remove `version=0.1` from `.jcheck\/conf`, set the version as null\n+            localRepo.checkout(localRepo.defaultBranch());\n+            var defaultConf = Files.readString(localRepo.root().resolve(\".jcheck\/conf\"), StandardCharsets.UTF_8);\n+            var newConf = defaultConf.replace(\"version=0.1\", \"\");\n+            Files.writeString(localRepo.root().resolve(\".jcheck\/conf\"), newConf, StandardCharsets.UTF_8);\n+            localRepo.add(localRepo.root().resolve(\".jcheck\/conf\"));\n+            var confHash = localRepo.commit(\"Set version as null\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(confHash, author.url(), \"master\", true);\n+            \/\/ Run bot. The bot won't get a CSR.\n+            pr.addComment(\"\/summary\\n\" + commitMessage);\n+            TestBotRunner.runPeriodicItems(bot);\n+            \/\/ The PR should have primary issue and shouldn't have primary CSR.\n+            assertTrue(pr.body().contains(\"### Issue\"));\n+            assertFalse(pr.body().contains(\"### Issues\"));\n+            assumeTrue(pr.body().contains(issue.id()));\n+            assumeTrue(pr.body().contains(issue.title()));\n+            assertFalse(pr.body().contains(csr.id()));\n+            assertFalse(pr.body().contains(csr.title()));\n+\n+            \/\/ Add `version=bla` to `.jcheck\/conf`, set the version as a wrong value\n+            localRepo.checkout(localRepo.defaultBranch());\n+            defaultConf = Files.readString(localRepo.root().resolve(\".jcheck\/conf\"), StandardCharsets.UTF_8);\n+            newConf = defaultConf.replace(\"project=test\", \"project=test\\nversion=bla\");\n+            Files.writeString(localRepo.root().resolve(\".jcheck\/conf\"), newConf, StandardCharsets.UTF_8);\n+            localRepo.add(localRepo.root().resolve(\".jcheck\/conf\"));\n+            confHash = localRepo.commit(\"Set the version as a wrong value\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(confHash, author.url(), \"master\", true);\n+            \/\/ Run bot. The bot won't get a CSR.\n+            pr.addComment(\"\/summary\\n\" + commitMessage);\n+            TestBotRunner.runPeriodicItems(bot);\n+            \/\/ The PR should have primary issue and shouldn't have primary CSR.\n+            assertTrue(pr.body().contains(\"### Issue\"));\n+            assertFalse(pr.body().contains(\"### Issues\"));\n+            assumeTrue(pr.body().contains(issue.id()));\n+            assumeTrue(pr.body().contains(issue.title()));\n+            assertFalse(pr.body().contains(csr.id()));\n+            assertFalse(pr.body().contains(csr.title()));\n+\n+            \/\/ Set the `version` in `.jcheck\/conf` as 17 which is an available version.\n+            localRepo.checkout(localRepo.defaultBranch());\n+            defaultConf = Files.readString(localRepo.root().resolve(\".jcheck\/conf\"), StandardCharsets.UTF_8);\n+            newConf = defaultConf.replace(\"version=bla\", \"version=17\");\n+            Files.writeString(localRepo.root().resolve(\".jcheck\/conf\"), newConf, StandardCharsets.UTF_8);\n+            localRepo.add(localRepo.root().resolve(\".jcheck\/conf\"));\n+            confHash = localRepo.commit(\"Set the version as 17\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(confHash, author.url(), \"master\", true);\n+            \/\/ Run bot. The primary CSR doesn't have the fix version `17`, so the bot won't get a CSR.\n+            pr.addComment(\"\/summary\\n\" + commitMessage);\n+            TestBotRunner.runPeriodicItems(bot);\n+            \/\/ The PR should have primary issue and shouldn't have primary CSR.\n+            assertTrue(pr.body().contains(\"### Issue\"));\n+            assertFalse(pr.body().contains(\"### Issues\"));\n+            assumeTrue(pr.body().contains(issue.id()));\n+            assumeTrue(pr.body().contains(issue.title()));\n+            assertFalse(pr.body().contains(csr.id()));\n+            assertFalse(pr.body().contains(csr.title()));\n+\n+            \/\/ Set the fix versions of the primary CSR to 17 and 18.\n+            csr.setProperty(\"fixVersions\",  new JSONArray(List.of(JSON.of(\"17\"), JSON.of(\"18\"))));\n+            \/\/ Run bot. The primary CSR has the fix version `17`, so it would be used.\n+            pr.addComment(\"\/summary\\n\" + commitMessage);\n+            TestBotRunner.runPeriodicItems(bot);\n+            \/\/ The bot should have primary issue and primary CSR\n+            assumeTrue(pr.body().contains(\"### Issues\"));\n+            assumeTrue(pr.body().contains(issue.id()));\n+            assumeTrue(pr.body().contains(issue.title()));\n+            assumeTrue(pr.body().contains(csr.id()));\n+            assumeTrue(pr.body().contains(csr.title() + \" (**CSR**)\"));\n+\n+            \/\/ Revert the fix versions of the primary CSR to 18.\n+            csr.setProperty(\"fixVersions\",  new JSONArray(List.of(JSON.of(\"18\"))));\n+            \/\/ Create a backport issue whose fix version is 17\n+            var backportIssue = issueProject.createIssue(\"This is the backport issue\", List.of(), Map.of());\n+            backportIssue.setProperty(\"issuetype\", JSON.of(\"Backport\"));\n+            backportIssue.setProperty(\"fixVersions\",  new JSONArray(List.of(JSON.of(\"17\"))));\n+            backportIssue.setState(Issue.State.OPEN);\n+            issue.addLink(Link.create(backportIssue, \"backported by\").build());\n+            \/\/ Run bot. The bot can find a backport issue but can't find a backport CSR.\n+            pr.addComment(\"\/summary\\n\" + commitMessage);\n+            TestBotRunner.runPeriodicItems(bot);\n+            \/\/ The bot should have primary issue and shouldn't have primary CSR.\n+            assertTrue(pr.body().contains(\"### Issue\"));\n+            assertFalse(pr.body().contains(\"### Issues\"));\n+            assumeTrue(pr.body().contains(issue.id()));\n+            assumeTrue(pr.body().contains(issue.title()));\n+            assertFalse(pr.body().contains(csr.id()));\n+            assertFalse(pr.body().contains(csr.title()));\n+            assertFalse(pr.body().contains(backportIssue.id()));\n+            assertFalse(pr.body().contains(backportIssue.title()));\n+\n+            \/\/ Create a backport CSR whose fix version is 17.\n+            var backportCsr = issueProject.createIssue(\"This is the backport CSR\", List.of(), Map.of());\n+            backportCsr.setProperty(\"issuetype\", JSON.of(\"CSR\"));\n+            backportCsr.setProperty(\"fixVersions\",  new JSONArray(List.of(JSON.of(\"17\"))));\n+            backportCsr.setState(Issue.State.OPEN);\n+            backportIssue.addLink(Link.create(backportCsr, \"csr for\").build());\n+            \/\/ Run bot. The bot can find a backport issue and a backport CSR.\n+            pr.addComment(\"\/summary\\n\" + commitMessage);\n+            TestBotRunner.runPeriodicItems(bot);\n+            \/\/ The bot should have primary issue and backport CSR.\n+            assertTrue(pr.body().contains(\"### Issues\"));\n+            assumeTrue(pr.body().contains(issue.id()));\n+            assumeTrue(pr.body().contains(issue.title()));\n+            assumeTrue(pr.body().contains(backportCsr.id()));\n+            assumeTrue(pr.body().contains(backportCsr.title() + \" (**CSR**)\"));\n+            assertFalse(pr.body().contains(csr.id()));\n+            assertFalse(pr.body().contains(csr.title()));\n+            assertFalse(pr.body().contains(backportIssue.id()));\n+            assertFalse(pr.body().contains(backportIssue.title()));\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CheckTests.java","additions":166,"deletions":0,"binary":false,"changes":166,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,1 +52,1 @@\n-    private static Set<String> fixVersions(Issue issue) {\n+    public static Set<String> fixVersions(Issue issue) {\n","filename":"jbs\/src\/main\/java\/org\/openjdk\/skara\/jbs\/Backports.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}