{"files":[{"patch":"@@ -30,2 +30,0 @@\n-import org.openjdk.skara.issuetracker.Link;\n-import org.openjdk.skara.jbs.Backports;\n@@ -64,5 +62,0 @@\n-    private static Optional<Link> csrLink(Issue issue) {\n-        return issue == null ? Optional.empty() : issue.links().stream()\n-                .filter(link -> link.relationship().isPresent() && \"csr for\".equals(link.relationship().get())).findAny();\n-    }\n-\n@@ -70,1 +63,1 @@\n-     * Find the right CSR of the PR according to the primary issue and the primary CSR\n+     * Get the fix version from the provided PR.\n@@ -72,2 +65,2 @@\n-    private Optional<Issue> findBackportCsr(PullRequest pr, Issue primary, Issue csr) {\n-        var confFile = pr.repository().fileContents(\".jcheck\/conf\", pr.targetRef());\n+    public static Optional<JdkVersion> getVersion(PullRequest pullRequest) {\n+        var confFile = pullRequest.repository().fileContents(\".jcheck\/conf\", pullRequest.targetRef());\n@@ -79,11 +72,1 @@\n-        var jdkVersion = JdkVersion.parse(version);\n-        if (jdkVersion.isEmpty()) {\n-            return Optional.empty();\n-        }\n-        var csrList = new ArrayList<org.openjdk.skara.issuetracker.Issue>();\n-        csrList.add(csr);\n-        for (var backportIssue : Backports.findBackports(primary, false)) {\n-            var backportCsr = csrLink(backportIssue).flatMap(Link::issue);\n-            backportCsr.ifPresent(csrList::add);\n-        }\n-        return IssueUtil.findClosestIssue(csrList, jdkVersion.get());\n+        return JdkVersion.parse(version);\n@@ -108,4 +91,3 @@\n-            var jbsIssue = jbsIssueOpt.get();\n-            var csrOptional = csrLink(jbsIssue).flatMap(Link::issue);\n-            if (csrOptional.isEmpty()) {\n-                log.info(\"Not found CSR for \" + describe(pr));\n+            var versionOpt = getVersion(pr);\n+            if (versionOpt.isEmpty()) {\n+                log.info(\"No right fix version found in file `.jcheck\/conf` for \" + describe(pr));\n@@ -115,8 +97,4 @@\n-            var csr = csrOptional.get();\n-            if (pr.labelNames().contains(\"backport\")) {\n-                csrOptional = findBackportCsr(pr, jbsIssue, csr);\n-                if (csrOptional.isEmpty()) {\n-                    log.info(\"Not found backport CSR for \" + describe(pr));\n-                    continue;\n-                }\n-                csr = csrOptional.get();\n+            var csrOptional = IssueUtil.findCsr(jbsIssueOpt.get(), versionOpt.get());\n+            if (csrOptional.isEmpty()) {\n+                log.info(\"No CSR found for \" + describe(pr));\n+                continue;\n@@ -124,0 +102,1 @@\n+            var csr = csrOptional.get();\n","filename":"bots\/csr\/src\/main\/java\/org\/openjdk\/skara\/bots\/csr\/CSRBot.java","additions":12,"deletions":33,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import org.openjdk.skara.jbs.Backports;\n@@ -29,2 +28,0 @@\n-import org.openjdk.skara.jbs.JdkVersion;\n-import org.openjdk.skara.jcheck.JCheckConfiguration;\n@@ -35,1 +32,0 @@\n-import java.util.ArrayList;\n@@ -37,1 +33,0 @@\n-import java.util.Optional;\n@@ -58,1 +53,1 @@\n-    private static void linkReply(PullRequest pr, Issue issue, PrintWriter writer, boolean withVersion) {\n+    private static void linkReply(PullRequest pr, Issue issue, PrintWriter writer) {\n@@ -60,30 +55,1 @@\n-                \"[\" + issue.id() + \"](\" + issue.webUrl() + \")\" + (withVersion ? \" with the right fix version\" : \"\")\n-                + \". This pull request cannot be integrated until the CSR request is approved.\");\n-    }\n-\n-    private static Optional<Link> csrLink(Issue issue) {\n-        return issue == null ? Optional.empty() : issue.links().stream()\n-                .filter(link -> link.relationship().isPresent() && \"csr for\".equals(link.relationship().get())).findAny();\n-    }\n-\n-    \/**\n-     * Find the right CSR of the PR according to the primary issue and the primary CSR\n-     *\/\n-    private Optional<Issue> findBackportCsr(PullRequest pr, Issue primary, Issue csr) {\n-        var confFile = pr.repository().fileContents(\".jcheck\/conf\", pr.targetRef());\n-        var configuration = JCheckConfiguration.parse(confFile.lines().toList());\n-        var version = configuration.general().version().orElse(null);\n-        if (version == null || \"\".equals(version)) {\n-            return Optional.empty();\n-        }\n-        var jdkVersion = JdkVersion.parse(version);\n-        if (jdkVersion.isEmpty()) {\n-            return Optional.empty();\n-        }\n-        var csrList = new ArrayList<Issue>();\n-        csrList.add(csr);\n-        for (var backportIssue : Backports.findBackports(primary, false)) {\n-            var backportCsr = csrLink(backportIssue).flatMap(Link::issue);\n-            backportCsr.ifPresent(csrList::add);\n-        }\n-        return IssueUtil.findClosestIssue(csrList, jdkVersion.get());\n+                \"[\" + issue.id() + \"](\" + issue.webUrl() + \") with the right fix version. This pull request cannot be integrated until the CSR request is approved.\");\n@@ -141,4 +107,2 @@\n-            var jbsIssue = jbsIssueOpt.get();\n-            var csrLink = csrLink(jbsIssue);\n-            if (csrLink.isEmpty()) {\n-                \/\/ The issue has no csr link, the bot should just remove the csr label.\n+            var versionOpt = CheckRun.getVersion(pr);\n+            if (versionOpt.isEmpty()) {\n@@ -151,1 +115,1 @@\n-            var csrOptional = csrLink.flatMap(Link::issue);\n+            var csrOptional = IssueUtil.findCsr(jbsIssueOpt.get(), versionOpt.get());\n@@ -153,1 +117,0 @@\n-                \/\/ The csr link exists but the csr issue doesn't exist, the bot should just remove the csr label.\n@@ -160,10 +123,0 @@\n-            if (pr.labelNames().contains(\"backport\")) {\n-                csrOptional = findBackportCsr(pr, jbsIssue, csrIssue);\n-                if (csrOptional.isEmpty()) {\n-                    pr.removeLabel(CSR_LABEL);\n-                    reply.println(\"determined that a [CSR](https:\/\/wiki.openjdk.java.net\/display\/csr\/Main) request \" +\n-                            \"is not needed for this pull request.\");\n-                    return;\n-                }\n-                csrIssue = csrOptional.get();\n-            }\n@@ -214,2 +167,2 @@\n-        var csrOptional = csrLink(jbsIssue).flatMap(Link::issue);\n-        if (csrOptional.isEmpty()) {\n+        var versionOpt = CheckRun.getVersion(pr);\n+        if (versionOpt.isEmpty()) {\n@@ -217,1 +170,1 @@\n-            linkReply(pr, jbsIssue, reply, false);\n+            linkReply(pr, jbsIssue, reply);\n@@ -222,10 +175,6 @@\n-        var csr = csrOptional.get();\n-        if (pr.labelNames().contains(\"backport\")) {\n-            csrOptional = findBackportCsr(pr, jbsIssue, csr);\n-            if (csrOptional.isEmpty()) {\n-                csrReply(reply);\n-                linkReply(pr, jbsIssue, reply, true);\n-                pr.addLabel(CSR_LABEL);\n-                return;\n-            }\n-            csr = csrOptional.get();\n+        var csrOptional = IssueUtil.findCsr(jbsIssueOpt.get(), versionOpt.get());\n+        if (csrOptional.isEmpty()) {\n+            csrReply(reply);\n+            linkReply(pr, jbsIssue, reply);\n+            pr.addLabel(CSR_LABEL);\n+            return;\n@@ -233,0 +182,1 @@\n+        var csr = csrOptional.get();\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CSRCommand.java","additions":15,"deletions":65,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import org.openjdk.skara.jbs.Backports;\n@@ -135,0 +134,13 @@\n+    \/**\n+     * Get the fix version from the provided PR.\n+     *\/\n+    public static Optional<JdkVersion> getVersion(PullRequest pullRequest) {\n+        var confFile = pullRequest.repository().fileContents(\".jcheck\/conf\", pullRequest.targetRef());\n+        var configuration = JCheckConfiguration.parse(confFile.lines().toList());\n+        var version = configuration.general().version().orElse(null);\n+        if (version == null || \"\".equals(version)) {\n+            return Optional.empty();\n+        }\n+        return JdkVersion.parse(version);\n+    }\n+\n@@ -148,25 +160,2 @@\n-        var jbsIssue = jbsIssueOpt.get();\n-        var csrOpt = csrLink(jbsIssue).flatMap(Link::issue);\n-        if (csrOpt.isEmpty()) {\n-            return Optional.empty();\n-        }\n-\n-        var csr = csrOpt.get();\n-        if (pr.labelNames().contains(\"backport\")) {\n-            return findBackportCsr(jbsIssue, csr).flatMap(perIssue -> Issue.fromStringRelaxed(perIssue.id() + \": \" + perIssue.title()));\n-        }\n-        return Issue.fromStringRelaxed(csr.id() + \": \" + csr.title());\n-    }\n-\n-    \/**\n-     * Find the right CSR according to the primary issue and the primary CSR\n-     *\/\n-    private Optional<org.openjdk.skara.issuetracker.Issue> findBackportCsr(org.openjdk.skara.issuetracker.Issue primary, org.openjdk.skara.issuetracker.Issue csr) {\n-        var confFile = pr.repository().fileContents(\".jcheck\/conf\", pr.targetRef());\n-        var configuration = JCheckConfiguration.parse(confFile.lines().toList());\n-        var version = configuration.general().version().orElse(null);\n-        if (version == null || \"\".equals(version)) {\n-            return Optional.empty();\n-        }\n-        var jdkVersion = JdkVersion.parse(version);\n-        if (jdkVersion.isEmpty()) {\n+        var versionOpt = getVersion(pr);\n+        if (versionOpt.isEmpty()) {\n@@ -175,8 +164,0 @@\n-        var csrList = new ArrayList<org.openjdk.skara.issuetracker.Issue>();\n-        csrList.add(csr);\n-        for (var backportIssue : Backports.findBackports(primary, false)) {\n-            var backportCsr = csrLink(backportIssue).flatMap(Link::issue);\n-            backportCsr.ifPresent(csrList::add);\n-        }\n-        return IssueUtil.findClosestIssue(csrList, jdkVersion.get());\n-    }\n@@ -184,3 +165,2 @@\n-    private static Optional<Link> csrLink(org.openjdk.skara.issuetracker.Issue issue) {\n-        return issue == null ? Optional.empty() : issue.links().stream()\n-                .filter(link -> link.relationship().isPresent() && \"csr for\".equals(link.relationship().get())).findAny();\n+        return IssueUtil.findCsr(jbsIssueOpt.get(), versionOpt.get())\n+                .flatMap(perIssue -> Issue.fromStringRelaxed(perIssue.id() + \": \" + perIssue.title()));\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":17,"deletions":37,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+import org.openjdk.skara.issuetracker.Link;\n@@ -27,0 +28,1 @@\n+import java.util.ArrayList;\n@@ -74,0 +76,20 @@\n+\n+    \/**\n+     * Find the right CSR according to the primary issue and the requested version\n+     *\/\n+    public static Optional<Issue> findCsr(Issue primary, JdkVersion version) {\n+        var csrList = new ArrayList<Issue>();\n+        csrLink(primary).flatMap(Link::issue).ifPresent(csrList::add);\n+        for (var backportIssue : Backports.findBackports(primary, false)) {\n+            csrLink(backportIssue).flatMap(Link::issue).ifPresent(csrList::add);\n+        }\n+        return IssueUtil.findClosestIssue(csrList, version);\n+    }\n+\n+    \/**\n+     * Find the CSR of the provided issue\n+     *\/\n+    public static Optional<Link> csrLink(Issue issue) {\n+        return issue == null ? Optional.empty() : issue.links().stream()\n+                .filter(link -> link.relationship().isPresent() && \"csr for\".equals(link.relationship().get())).findAny();\n+    }\n","filename":"jbs\/src\/main\/java\/org\/openjdk\/skara\/jbs\/IssueUtil.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"}]}