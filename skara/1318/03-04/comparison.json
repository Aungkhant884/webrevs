{"files":[{"patch":"@@ -30,1 +30,1 @@\n-import org.openjdk.skara.jbs.IssueUtil;\n+import org.openjdk.skara.jbs.Backports;\n@@ -97,1 +97,1 @@\n-            var csrOptional = IssueUtil.findCsr(jbsIssueOpt.get(), versionOpt.get());\n+            var csrOptional = Backports.findCsr(jbsIssueOpt.get(), versionOpt.get());\n","filename":"bots\/csr\/src\/main\/java\/org\/openjdk\/skara\/bots\/csr\/CSRBot.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import org.openjdk.skara.jbs.IssueUtil;\n+import org.openjdk.skara.jbs.Backports;\n@@ -115,1 +115,1 @@\n-            var csrOptional = IssueUtil.findCsr(jbsIssueOpt.get(), versionOpt.get());\n+            var csrOptional = Backports.findCsr(jbsIssueOpt.get(), versionOpt.get());\n@@ -175,1 +175,1 @@\n-        var csrOptional = IssueUtil.findCsr(jbsIssueOpt.get(), versionOpt.get());\n+        var csrOptional = Backports.findCsr(jbsIssueOpt.get(), versionOpt.get());\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CSRCommand.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import org.openjdk.skara.jbs.IssueUtil;\n+import org.openjdk.skara.jbs.Backports;\n@@ -165,1 +165,1 @@\n-        return IssueUtil.findCsr(jbsIssueOpt.get(), versionOpt.get())\n+        return Backports.findCsr(jbsIssueOpt.get(), versionOpt.get())\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+import org.openjdk.skara.issuetracker.Link;\n@@ -226,0 +227,63 @@\n+    \/**\n+     * Find the closest issue from the provided issue list according to the provided fix version.\n+     * This method is similar to `findIssue`, but this method can handle all the fix versions of the issue\n+     * instead of only the main fix version and can receive an issue list instead of only the primary issue.\n+     *\n+     * If one of the issues has the correct fix version, use it.\n+     * Else, if one of the issues has a matching <N>-pool-<opt> fix version, use it.\n+     * Else, if one of the issues has a matching <N>-pool fix version, use it.\n+     * Else, if one of the issues has a \"scratch\" fix version, use it.\n+     * Otherwise, return empty.\n+     *\n+     * A \"scratch\" fixVersion is empty, \"tbd.*\", or \"unknown\".\n+     *\/\n+    public static Optional<Issue> findClosestIssue(List<Issue> issueList, JdkVersion fixVersion) {\n+        var matchingVersionIssue = issueList.stream()\n+                .filter(issue -> Backports.fixVersions(issue).stream().anyMatch(v -> v.equals(fixVersion.raw())))\n+                .findFirst();\n+        if (matchingVersionIssue.isPresent()) {\n+            return matchingVersionIssue;\n+        }\n+\n+        if (fixVersion.opt().isPresent()) {\n+            var matchingOptPoolVersionIssue = issueList.stream()\n+                    .filter(issue -> Backports.fixVersions(issue).stream().anyMatch(\n+                            v -> v.equals(fixVersion.feature() + \"-pool-\" + fixVersion.opt().get())))\n+                    .findFirst();\n+            if (matchingOptPoolVersionIssue.isPresent()) {\n+                return matchingOptPoolVersionIssue;\n+            }\n+        }\n+\n+        var matchingPoolVersionIssue = issueList.stream()\n+                .filter(issue -> Backports.fixVersions(issue).stream().anyMatch(v -> v.equals(fixVersion.feature() + \"-pool\")))\n+                .findFirst();\n+        if (matchingPoolVersionIssue.isPresent()) {\n+            return matchingPoolVersionIssue;\n+        }\n+\n+        return issueList.stream()\n+                .filter(issue -> Backports.fixVersions(issue).stream().noneMatch(v -> !v.startsWith(\"tbd\") && !v.equalsIgnoreCase(\"unknown\")))\n+                .findFirst();\n+    }\n+\n+    \/**\n+     * Find the right CSR according to the primary issue and the requested version\n+     *\/\n+    public static Optional<Issue> findCsr(Issue primary, JdkVersion version) {\n+        var csrList = new ArrayList<Issue>();\n+        csrLink(primary).flatMap(Link::issue).ifPresent(csrList::add);\n+        for (var backportIssue : Backports.findBackports(primary, false)) {\n+            csrLink(backportIssue).flatMap(Link::issue).ifPresent(csrList::add);\n+        }\n+        return findClosestIssue(csrList, version);\n+    }\n+\n+    \/**\n+     * Find the CSR of the provided issue\n+     *\/\n+    private static Optional<Link> csrLink(Issue issue) {\n+        return issue == null ? Optional.empty() : issue.links().stream()\n+                .filter(link -> link.relationship().isPresent() && \"csr for\".equals(link.relationship().get())).findAny();\n+    }\n+\n","filename":"jbs\/src\/main\/java\/org\/openjdk\/skara\/jbs\/Backports.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -1,96 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.skara.jbs;\n-\n-import org.openjdk.skara.issuetracker.Issue;\n-import org.openjdk.skara.issuetracker.Link;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Optional;\n-\n-public class IssueUtil {\n-\n-    \/**\n-     * Find the closest issue from the provided issue list according to the provided fix version.\n-     * This method is similar to Backports#findIssue, but this method can handle all the fix versions of the issue\n-     * instead of only the main fix version and can receive an issue list instead of only the primary issue.\n-     *\n-     * If one of the issues has the correct fix version, use it.\n-     * Else, if one of the issues has a matching <N>-pool-<opt> fix version, use it.\n-     * Else, if one of the issues has a matching <N>-pool fix version, use it.\n-     * Else, if one of the issues has a \"scratch\" fix version, use it.\n-     * Otherwise, return empty.\n-     *\n-     * A \"scratch\" fixVersion is empty, \"tbd.*\", or \"unknown\".\n-     *\/\n-    public static Optional<Issue> findClosestIssue(List<Issue> issueList, JdkVersion fixVersion) {\n-        var matchingVersionIssue = issueList.stream()\n-                .filter(issue -> Backports.fixVersions(issue).stream().anyMatch(v -> v.equals(fixVersion.raw())))\n-                .findFirst();\n-        if (matchingVersionIssue.isPresent()) {\n-            return matchingVersionIssue;\n-        }\n-\n-        if (fixVersion.opt().isPresent()) {\n-            var matchingOptPoolVersionIssue = issueList.stream()\n-                    .filter(issue -> Backports.fixVersions(issue).stream().anyMatch(\n-                            v -> v.equals(fixVersion.feature() + \"-pool-\" + fixVersion.opt().get())))\n-                    .findFirst();\n-            if (matchingOptPoolVersionIssue.isPresent()) {\n-                return matchingOptPoolVersionIssue;\n-            }\n-        }\n-\n-        var matchingPoolVersionIssue = issueList.stream()\n-                .filter(issue -> Backports.fixVersions(issue).stream().anyMatch(v -> v.equals(fixVersion.feature() + \"-pool\")))\n-                .findFirst();\n-        if (matchingPoolVersionIssue.isPresent()) {\n-            return matchingPoolVersionIssue;\n-        }\n-\n-        return issueList.stream()\n-                .filter(issue -> Backports.fixVersions(issue).stream().noneMatch(v -> !v.startsWith(\"tbd\") && !v.equalsIgnoreCase(\"unknown\")))\n-                .findFirst();\n-    }\n-\n-    \/**\n-     * Find the right CSR according to the primary issue and the requested version\n-     *\/\n-    public static Optional<Issue> findCsr(Issue primary, JdkVersion version) {\n-        var csrList = new ArrayList<Issue>();\n-        csrLink(primary).flatMap(Link::issue).ifPresent(csrList::add);\n-        for (var backportIssue : Backports.findBackports(primary, false)) {\n-            csrLink(backportIssue).flatMap(Link::issue).ifPresent(csrList::add);\n-        }\n-        return IssueUtil.findClosestIssue(csrList, version);\n-    }\n-\n-    \/**\n-     * Find the CSR of the provided issue\n-     *\/\n-    public static Optional<Link> csrLink(Issue issue) {\n-        return issue == null ? Optional.empty() : issue.links().stream()\n-                .filter(link -> link.relationship().isPresent() && \"csr for\".equals(link.relationship().get())).findAny();\n-    }\n-}\n","filename":"jbs\/src\/main\/java\/org\/openjdk\/skara\/jbs\/IssueUtil.java","additions":0,"deletions":96,"binary":false,"changes":96,"status":"deleted"},{"patch":"@@ -187,0 +187,59 @@\n+    @Test\n+    void testFindClosestIssue(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo)) {\n+            var issueProject = credentials.getIssueProject();\n+            var issue = credentials.createIssue(issueProject, \"Issue\");\n+            issue.setProperty(\"issuetype\", JSON.of(\"Bug\"));\n+            var backport = credentials.createIssue(issueProject, \"Backport\");\n+            backport.setProperty(\"issuetype\", JSON.of(\"Backport\"));\n+            backport.setState(Issue.State.RESOLVED);\n+            issue.addLink(Link.create(backport, \"backported by\").build());\n+            var backportFoo = credentials.createIssue(issueProject, \"Backport Foo\");\n+            backportFoo.setProperty(\"issuetype\", JSON.of(\"Backport\"));\n+            issue.addLink(Link.create(backportFoo, \"backported by\").build());\n+\n+            issue.setProperty(\"fixVersions\", JSON.array().add(\"11-pool\"));\n+            backport.setProperty(\"fixVersions\", JSON.array().add(\"12-pool\"));\n+            backportFoo.setProperty(\"fixVersions\", JSON.array().add(\"12-pool-foo\"));\n+            assertEquals(issue, Backports.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"11.1\").orElseThrow()).orElseThrow());\n+            assertEquals(backport, Backports.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"12.2\").orElseThrow()).orElseThrow());\n+            assertEquals(backportFoo, Backports.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"12.2-foo\").orElseThrow()).orElseThrow());\n+            assertEquals(Optional.empty(), Backports.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"13.3\").orElseThrow()));\n+            assertEquals(issue, Backports.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"11.1-foo\").orElseThrow()).orElseThrow());\n+\n+            issue.setProperty(\"fixVersions\", JSON.array().add(\"8\").add(\"11-pool\"));\n+            backport.setProperty(\"fixVersions\", JSON.array().add(\"8\").add(\"12-pool\"));\n+            backportFoo.setProperty(\"fixVersions\", JSON.array().add(\"8\").add(\"12-pool-foo\"));\n+            assertEquals(issue, Backports.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"11.1\").orElseThrow()).orElseThrow());\n+            assertEquals(backport, Backports.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"12.2\").orElseThrow()).orElseThrow());\n+            assertEquals(backportFoo, Backports.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"12.2-foo\").orElseThrow()).orElseThrow());\n+            assertEquals(Optional.empty(), Backports.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"13.3\").orElseThrow()));\n+            assertEquals(issue, Backports.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"11.1-foo\").orElseThrow()).orElseThrow());\n+\n+            issue.setProperty(\"fixVersions\", JSON.array().add(\"tbd\"));\n+            assertEquals(issue, Backports.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"11.1\").orElseThrow()).orElseThrow());\n+            issue.setProperty(\"fixVersions\", JSON.array().add(\"8\").add(\"tbd\"));\n+            assertEquals(Optional.empty(), Backports.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"11.1\").orElseThrow()));\n+\n+            issue.setProperty(\"fixVersions\", JSON.array().add(\"12.2\"));\n+            backport.setProperty(\"fixVersions\", JSON.array().add(\"tbd\"));\n+            assertEquals(issue, Backports.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"12.2\").orElseThrow()).orElseThrow());\n+            assertEquals(backport, Backports.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"11.1\").orElseThrow()).orElseThrow());\n+            issue.setProperty(\"fixVersions\", JSON.array().add(\"8\").add(\"12.2\"));\n+            backport.setProperty(\"fixVersions\", JSON.array().add(\"8\").add(\"tbd\"));\n+            assertEquals(issue, Backports.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"12.2\").orElseThrow()).orElseThrow());\n+            assertEquals(Optional.empty(), Backports.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"11.1\").orElseThrow()));\n+\n+            issue.setProperty(\"fixVersions\", JSON.array().add(\"12.2\"));\n+            backport.setProperty(\"fixVersions\", JSON.array().add(\"11.1\"));\n+            assertEquals(issue, Backports.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"12.2\").orElseThrow()).orElseThrow());\n+            assertEquals(backport, Backports.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"11.1\").orElseThrow()).orElseThrow());\n+            assertEquals(Optional.empty(), Backports.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"13.3\").orElseThrow()));\n+            issue.setProperty(\"fixVersions\", JSON.array().add(\"8\").add(\"12.2\"));\n+            backport.setProperty(\"fixVersions\", JSON.array().add(\"8\").add(\"11.1\"));\n+            assertEquals(issue, Backports.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"12.2\").orElseThrow()).orElseThrow());\n+            assertEquals(backport, Backports.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"11.1\").orElseThrow()).orElseThrow());\n+            assertEquals(Optional.empty(), Backports.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"13.3\").orElseThrow()));\n+        }\n+    }\n+\n","filename":"jbs\/src\/test\/java\/org\/openjdk\/skara\/jbs\/BackportsTests.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -1,98 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.skara.jbs;\n-\n-import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.TestInfo;\n-import org.openjdk.skara.issuetracker.Issue;\n-import org.openjdk.skara.issuetracker.Link;\n-import org.openjdk.skara.json.JSON;\n-import org.openjdk.skara.test.HostCredentials;\n-\n-import java.io.IOException;\n-import java.util.List;\n-import java.util.Optional;\n-\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-\n-public class IssueUtilTests {\n-\n-    @Test\n-    void testFindClosestIssue(TestInfo testInfo) throws IOException {\n-        try (var credentials = new HostCredentials(testInfo)) {\n-            var issueProject = credentials.getIssueProject();\n-            var issue = credentials.createIssue(issueProject, \"Issue\");\n-            issue.setProperty(\"issuetype\", JSON.of(\"Bug\"));\n-            var backport = credentials.createIssue(issueProject, \"Backport\");\n-            backport.setProperty(\"issuetype\", JSON.of(\"Backport\"));\n-            backport.setState(Issue.State.RESOLVED);\n-            issue.addLink(Link.create(backport, \"backported by\").build());\n-            var backportFoo = credentials.createIssue(issueProject, \"Backport Foo\");\n-            backportFoo.setProperty(\"issuetype\", JSON.of(\"Backport\"));\n-            issue.addLink(Link.create(backportFoo, \"backported by\").build());\n-\n-            issue.setProperty(\"fixVersions\", JSON.array().add(\"11-pool\"));\n-            backport.setProperty(\"fixVersions\", JSON.array().add(\"12-pool\"));\n-            backportFoo.setProperty(\"fixVersions\", JSON.array().add(\"12-pool-foo\"));\n-            assertEquals(issue, IssueUtil.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"11.1\").orElseThrow()).orElseThrow());\n-            assertEquals(backport, IssueUtil.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"12.2\").orElseThrow()).orElseThrow());\n-            assertEquals(backportFoo, IssueUtil.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"12.2-foo\").orElseThrow()).orElseThrow());\n-            assertEquals(Optional.empty(), IssueUtil.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"13.3\").orElseThrow()));\n-            assertEquals(issue, IssueUtil.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"11.1-foo\").orElseThrow()).orElseThrow());\n-\n-            issue.setProperty(\"fixVersions\", JSON.array().add(\"8\").add(\"11-pool\"));\n-            backport.setProperty(\"fixVersions\", JSON.array().add(\"8\").add(\"12-pool\"));\n-            backportFoo.setProperty(\"fixVersions\", JSON.array().add(\"8\").add(\"12-pool-foo\"));\n-            assertEquals(issue, IssueUtil.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"11.1\").orElseThrow()).orElseThrow());\n-            assertEquals(backport, IssueUtil.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"12.2\").orElseThrow()).orElseThrow());\n-            assertEquals(backportFoo, IssueUtil.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"12.2-foo\").orElseThrow()).orElseThrow());\n-            assertEquals(Optional.empty(), IssueUtil.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"13.3\").orElseThrow()));\n-            assertEquals(issue, IssueUtil.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"11.1-foo\").orElseThrow()).orElseThrow());\n-\n-            issue.setProperty(\"fixVersions\", JSON.array().add(\"tbd\"));\n-            assertEquals(issue, IssueUtil.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"11.1\").orElseThrow()).orElseThrow());\n-            issue.setProperty(\"fixVersions\", JSON.array().add(\"8\").add(\"tbd\"));\n-            assertEquals(Optional.empty(), IssueUtil.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"11.1\").orElseThrow()));\n-\n-            issue.setProperty(\"fixVersions\", JSON.array().add(\"12.2\"));\n-            backport.setProperty(\"fixVersions\", JSON.array().add(\"tbd\"));\n-            assertEquals(issue, IssueUtil.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"12.2\").orElseThrow()).orElseThrow());\n-            assertEquals(backport, IssueUtil.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"11.1\").orElseThrow()).orElseThrow());\n-            issue.setProperty(\"fixVersions\", JSON.array().add(\"8\").add(\"12.2\"));\n-            backport.setProperty(\"fixVersions\", JSON.array().add(\"8\").add(\"tbd\"));\n-            assertEquals(issue, IssueUtil.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"12.2\").orElseThrow()).orElseThrow());\n-            assertEquals(Optional.empty(), IssueUtil.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"11.1\").orElseThrow()));\n-\n-            issue.setProperty(\"fixVersions\", JSON.array().add(\"12.2\"));\n-            backport.setProperty(\"fixVersions\", JSON.array().add(\"11.1\"));\n-            assertEquals(issue, IssueUtil.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"12.2\").orElseThrow()).orElseThrow());\n-            assertEquals(backport, IssueUtil.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"11.1\").orElseThrow()).orElseThrow());\n-            assertEquals(Optional.empty(), IssueUtil.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"13.3\").orElseThrow()));\n-            issue.setProperty(\"fixVersions\", JSON.array().add(\"8\").add(\"12.2\"));\n-            backport.setProperty(\"fixVersions\", JSON.array().add(\"8\").add(\"11.1\"));\n-            assertEquals(issue, IssueUtil.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"12.2\").orElseThrow()).orElseThrow());\n-            assertEquals(backport, IssueUtil.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"11.1\").orElseThrow()).orElseThrow());\n-            assertEquals(Optional.empty(), IssueUtil.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"13.3\").orElseThrow()));\n-        }\n-    }\n-}\n","filename":"jbs\/src\/test\/java\/org\/openjdk\/skara\/jbs\/IssueUtilTests.java","additions":0,"deletions":98,"binary":false,"changes":98,"status":"deleted"}]}