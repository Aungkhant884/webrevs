{"files":[{"patch":"@@ -32,0 +32,1 @@\n+import org.openjdk.skara.jbs.IssueUtil;\n@@ -82,3 +83,5 @@\n-        var versionMatch = Backports.fixVersions(csr).stream().anyMatch(v -> v.equals(version));\n-        if (versionMatch) {\n-            return Optional.of(csr);\n+        var csrList = new ArrayList<org.openjdk.skara.issuetracker.Issue>();\n+        csrList.add(csr);\n+        for (var backportIssue : Backports.findBackports(primary, false)) {\n+            var backportCsr = csrLink(backportIssue).flatMap(Link::issue);\n+            backportCsr.ifPresent(csrList::add);\n@@ -86,2 +89,1 @@\n-        var backportIssue = Backports.findIssue(primary, jdkVersion.get());\n-        return backportIssue.flatMap(issue -> csrLink(issue).flatMap(Link::issue));\n+        return IssueUtil.findClosestIssue(csrList, jdkVersion.get());\n","filename":"bots\/csr\/src\/main\/java\/org\/openjdk\/skara\/bots\/csr\/CSRBot.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import org.openjdk.skara.json.JSONArray;\n@@ -274,1 +273,1 @@\n-            issue.setProperty(\"fixVersions\",  new JSONArray(List.of(JSON.of(\"18\"))));\n+            issue.setProperty(\"fixVersions\", JSON.array().add(\"18\"));\n@@ -279,1 +278,1 @@\n-            csr.setProperty(\"fixVersions\",  new JSONArray(List.of(JSON.of(\"18\"))));\n+            csr.setProperty(\"fixVersions\", JSON.array().add(\"18\"));\n@@ -352,1 +351,1 @@\n-            csr.setProperty(\"fixVersions\",  new JSONArray(List.of(JSON.of(\"17\"), JSON.of(\"18\"))));\n+            csr.setProperty(\"fixVersions\", JSON.array().add(\"17\").add(\"18\"));\n@@ -359,1 +358,1 @@\n-            csr.setProperty(\"fixVersions\",  new JSONArray(List.of(JSON.of(\"18\"))));\n+            csr.setProperty(\"fixVersions\", JSON.array().add(\"18\"));\n@@ -363,1 +362,1 @@\n-            backportIssue.setProperty(\"fixVersions\",  new JSONArray(List.of(JSON.of(\"17\"))));\n+            backportIssue.setProperty(\"fixVersions\", JSON.array().add(\"17\"));\n@@ -376,1 +375,1 @@\n-            backportCsr.setProperty(\"fixVersions\",  new JSONArray(List.of(JSON.of(\"17\"))));\n+            backportCsr.setProperty(\"fixVersions\", JSON.array().add(\"17\"));\n@@ -383,0 +382,25 @@\n+\n+            \/\/ Now we have a primary issue, a primary CSR, a backport issue, a backport CSR.\n+            \/\/ Set the backport CSR to have multiple fix versions, included 11.\n+            backportCsr.setProperty(\"fixVersions\", JSON.array().add(\"17\").add(\"11\").add(\"8\"));\n+            \/\/ Set the `version` in `.jcheck\/conf` as 11.\n+            localRepo.checkout(localRepo.defaultBranch());\n+            defaultConf = Files.readString(localRepo.root().resolve(\".jcheck\/conf\"), StandardCharsets.UTF_8);\n+            newConf = defaultConf.replace(\"version=17\", \"version=11\");\n+            Files.writeString(localRepo.root().resolve(\".jcheck\/conf\"), newConf, StandardCharsets.UTF_8);\n+            localRepo.add(localRepo.root().resolve(\".jcheck\/conf\"));\n+            confHash = localRepo.commit(\"Set the version as 11\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(confHash, repo.url(), \"master\", true);\n+            pr.removeLabel(\"csr\");\n+            \/\/ Run bot.\n+            TestBotRunner.runPeriodicItems(bot);\n+            \/\/ The bot should have added the CSR label\n+            assertTrue(pr.labelNames().contains(\"csr\"));\n+\n+            \/\/ Set the backport CSR to have multiple fix versions, excluded 11.\n+            backportCsr.setProperty(\"fixVersions\", JSON.array().add(\"17\").add(\"8\"));\n+            pr.removeLabel(\"csr\");\n+            \/\/ Run bot.\n+            TestBotRunner.runPeriodicItems(bot);\n+            \/\/ The bot shouldn't add the `csr` label.\n+            assertFalse(pr.labelNames().contains(\"csr\"));\n","filename":"bots\/csr\/src\/test\/java\/org\/openjdk\/skara\/bots\/csr\/CSRBotTests.java","additions":31,"deletions":7,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import org.openjdk.skara.jbs.IssueUtil;\n@@ -34,0 +35,1 @@\n+import java.util.ArrayList;\n@@ -81,3 +83,5 @@\n-        var versionMatch = Backports.fixVersions(csr).stream().anyMatch(v -> v.equals(version));\n-        if (versionMatch) {\n-            return Optional.of(csr);\n+        var csrList = new ArrayList<Issue>();\n+        csrList.add(csr);\n+        for (var backportIssue : Backports.findBackports(primary, false)) {\n+            var backportCsr = csrLink(backportIssue).flatMap(Link::issue);\n+            backportCsr.ifPresent(csrList::add);\n@@ -85,2 +89,1 @@\n-        var backportIssue = Backports.findIssue(primary, jdkVersion.get());\n-        return backportIssue.flatMap(issue -> csrLink(issue).flatMap(Link::issue));\n+        return IssueUtil.findClosestIssue(csrList, jdkVersion.get());\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CSRCommand.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import org.openjdk.skara.jbs.IssueUtil;\n@@ -174,3 +175,5 @@\n-        var versionMatch = Backports.fixVersions(csr).stream().anyMatch(v -> v.equals(version));\n-        if (versionMatch) {\n-            return Optional.of(csr);\n+        var csrList = new ArrayList<org.openjdk.skara.issuetracker.Issue>();\n+        csrList.add(csr);\n+        for (var backportIssue : Backports.findBackports(primary, false)) {\n+            var backportCsr = csrLink(backportIssue).flatMap(Link::issue);\n+            backportCsr.ifPresent(csrList::add);\n@@ -178,2 +181,1 @@\n-        var backportIssue = Backports.findIssue(primary, jdkVersion.get());\n-        return backportIssue.flatMap(issue -> csrLink(issue).flatMap(Link::issue));\n+        return IssueUtil.findClosestIssue(csrList, jdkVersion.get());\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import org.openjdk.skara.json.JSONArray;\n@@ -710,1 +709,1 @@\n-            issue.setProperty(\"fixVersions\",  new JSONArray(List.of(JSON.of(\"18\"))));\n+            issue.setProperty(\"fixVersions\", JSON.array().add(\"18\"));\n@@ -715,1 +714,1 @@\n-            csr.setProperty(\"fixVersions\",  new JSONArray(List.of(JSON.of(\"18\"))));\n+            csr.setProperty(\"fixVersions\", JSON.array().add(\"18\"));\n@@ -824,1 +823,1 @@\n-            csr.setProperty(\"fixVersions\",  new JSONArray(List.of(JSON.of(\"17\"), JSON.of(\"18\"))));\n+            csr.setProperty(\"fixVersions\", JSON.array().add(\"17\").add(\"18\"));\n@@ -836,1 +835,1 @@\n-            csr.setProperty(\"fixVersions\",  new JSONArray(List.of(JSON.of(\"18\"))));\n+            csr.setProperty(\"fixVersions\", JSON.array().add(\"18\"));\n@@ -840,1 +839,1 @@\n-            backportIssue.setProperty(\"fixVersions\",  new JSONArray(List.of(JSON.of(\"17\"))));\n+            backportIssue.setProperty(\"fixVersions\", JSON.array().add(\"17\"));\n@@ -867,1 +866,1 @@\n-            backportCsr.setProperty(\"fixVersions\",  new JSONArray(List.of(JSON.of(\"17\"))));\n+            backportCsr.setProperty(\"fixVersions\", JSON.array().add(\"17\"));\n@@ -888,0 +887,46 @@\n+\n+            \/\/ Now we have a primary issue, a primary CSR, a backport issue, a backport CSR.\n+            \/\/ Set the backport CSR to have multiple fix versions, included 11.\n+            backportCsr.setProperty(\"fixVersions\", JSON.array().add(\"17\").add(\"11\").add(\"8\"));\n+            \/\/ Set the `version` in `.jcheck\/conf` as 11.\n+            localRepo.checkout(localRepo.defaultBranch());\n+            defaultConf = Files.readString(localRepo.root().resolve(\".jcheck\/conf\"), StandardCharsets.UTF_8);\n+            newConf = defaultConf.replace(\"version=17\", \"version=11\");\n+            Files.writeString(localRepo.root().resolve(\".jcheck\/conf\"), newConf, StandardCharsets.UTF_8);\n+            localRepo.add(localRepo.root().resolve(\".jcheck\/conf\"));\n+            confHash = localRepo.commit(\"Set the version as 11\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(confHash, author.url(), \"master\", true);\n+            createBackport(localRepo, author, confHash, \"edit4\");\n+            pr = credentials.createPullRequest(author, \"master\", \"edit4\", \"Backport \" + commitHash);\n+            \/\/ Run bot.\n+            pr.addComment(\"\/summary\\n\" + commitMessage);\n+            pr.addComment(\"\/csr\");\n+            TestBotRunner.runPeriodicItems(bot);\n+            assertTrue(pr.body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.labelNames().contains(\"csr\"));\n+            assertLastCommentContains(pr, \"this pull request will not be integrated until the [CSR]\");\n+            assertLastCommentContains(pr, \"for issue \");\n+            assertLastCommentContains(pr, \"has been approved.\");\n+            \/\/ Set the backport CSR to have multiple fix versions, excluded 11.\n+            backportCsr.setProperty(\"fixVersions\", JSON.array().add(\"17\").add(\"8\"));\n+            \/\/ Use `\/csr unneeded` to revert the change.\n+            pr.addComment(\"\/summary\\n\" + commitMessage);\n+            pr.addComment(\"\/csr unneeded\");\n+            TestBotRunner.runPeriodicItems(bot);\n+            assertFalse(pr.body().contains(\"Change requires a CSR request to be approved\"));\n+            assertFalse(pr.labelNames().contains(\"csr\"));\n+            assertLastCommentContains(pr, \"determined that a [CSR](https:\/\/wiki.openjdk.java.net\/display\/csr\/Main) request \" +\n+                    \"is not needed for this pull request.\");\n+\n+            \/\/ re-run bot.\n+            pr.addComment(\"\/summary\\n\" + commitMessage);\n+            pr.addComment(\"\/csr\");\n+            TestBotRunner.runPeriodicItems(bot);\n+            assertTrue(pr.body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.labelNames().contains(\"csr\"));\n+            assertLastCommentContains(pr, \"has indicated that a \" +\n+                    \"[compatibility and specification](https:\/\/wiki.openjdk.java.net\/display\/csr\/Main) (CSR) request \" +\n+                    \"is needed for this pull request.\");\n+            assertLastCommentContains(pr, \"please create a [CSR](https:\/\/wiki.openjdk.java.net\/display\/csr\/Main) request for issue\");\n+            assertLastCommentContains(pr, \"with the right fix version\");\n+            assertLastCommentContains(pr, \"This pull request cannot be integrated until the CSR request is approved.\");\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CSRTests.java","additions":52,"deletions":7,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import org.openjdk.skara.json.JSONArray;\n@@ -2062,1 +2061,1 @@\n-            issue.setProperty(\"fixVersions\",  new JSONArray(List.of(JSON.of(\"18\"))));\n+            issue.setProperty(\"fixVersions\", JSON.array().add(\"18\"));\n@@ -2067,1 +2066,1 @@\n-            csr.setProperty(\"fixVersions\",  new JSONArray(List.of(JSON.of(\"18\"))));\n+            csr.setProperty(\"fixVersions\", JSON.array().add(\"18\"));\n@@ -2156,1 +2155,1 @@\n-            csr.setProperty(\"fixVersions\",  new JSONArray(List.of(JSON.of(\"17\"), JSON.of(\"18\"))));\n+            csr.setProperty(\"fixVersions\", JSON.array().add(\"17\").add(\"18\"));\n@@ -2168,1 +2167,1 @@\n-            csr.setProperty(\"fixVersions\",  new JSONArray(List.of(JSON.of(\"18\"))));\n+            csr.setProperty(\"fixVersions\", JSON.array().add(\"18\"));\n@@ -2172,1 +2171,1 @@\n-            backportIssue.setProperty(\"fixVersions\",  new JSONArray(List.of(JSON.of(\"17\"))));\n+            backportIssue.setProperty(\"fixVersions\", JSON.array().add(\"17\"));\n@@ -2191,1 +2190,1 @@\n-            backportCsr.setProperty(\"fixVersions\",  new JSONArray(List.of(JSON.of(\"17\"))));\n+            backportCsr.setProperty(\"fixVersions\", JSON.array().add(\"17\"));\n@@ -2207,0 +2206,42 @@\n+\n+            \/\/ Now we have a primary issue, a primary CSR, a backport issue, a backport CSR.\n+            \/\/ Set the backport CSR to have multiple fix versions, included 11.\n+            backportCsr.setProperty(\"fixVersions\", JSON.array().add(\"17\").add(\"11\").add(\"8\"));\n+            \/\/ Set the `version` in `.jcheck\/conf` as 11.\n+            localRepo.checkout(localRepo.defaultBranch());\n+            defaultConf = Files.readString(localRepo.root().resolve(\".jcheck\/conf\"), StandardCharsets.UTF_8);\n+            newConf = defaultConf.replace(\"version=17\", \"version=11\");\n+            Files.writeString(localRepo.root().resolve(\".jcheck\/conf\"), newConf, StandardCharsets.UTF_8);\n+            localRepo.add(localRepo.root().resolve(\".jcheck\/conf\"));\n+            confHash = localRepo.commit(\"Set the version as 11\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(confHash, author.url(), \"master\", true);\n+            \/\/ Run bot.\n+            pr.addComment(\"\/summary\\n\" + commitMessage);\n+            TestBotRunner.runPeriodicItems(bot);\n+            \/\/ The PR should have primary issue and backport CSR.\n+            assertTrue(pr.body().contains(\"### Issues\"));\n+            assumeTrue(pr.body().contains(issue.id()));\n+            assumeTrue(pr.body().contains(issue.title()));\n+            assumeTrue(pr.body().contains(backportCsr.id()));\n+            assumeTrue(pr.body().contains(backportCsr.title() + \" (**CSR**)\"));\n+            assertFalse(pr.body().contains(csr.id()));\n+            assertFalse(pr.body().contains(csr.title()));\n+            assertFalse(pr.body().contains(backportIssue.id()));\n+            assertFalse(pr.body().contains(backportIssue.title()));\n+\n+            \/\/ Set the backport CSR to have multiple fix versions, excluded 11.\n+            backportCsr.setProperty(\"fixVersions\", JSON.array().add(\"17\").add(\"8\"));\n+            \/\/ Run bot.\n+            pr.addComment(\"\/summary\\n\" + commitMessage);\n+            TestBotRunner.runPeriodicItems(bot);\n+            \/\/ The bot should have primary issue and shouldn't have CSR.\n+            assertTrue(pr.body().contains(\"### Issue\"));\n+            assertFalse(pr.body().contains(\"### Issues\"));\n+            assumeTrue(pr.body().contains(issue.id()));\n+            assumeTrue(pr.body().contains(issue.title()));\n+            assertFalse(pr.body().contains(csr.id()));\n+            assertFalse(pr.body().contains(csr.title()));\n+            assertFalse(pr.body().contains(backportIssue.id()));\n+            assertFalse(pr.body().contains(backportIssue.title()));\n+            assertFalse(pr.body().contains(backportCsr.id()));\n+            assertFalse(pr.body().contains(backportCsr.title()));\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CheckTests.java","additions":48,"deletions":7,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.jbs;\n+\n+import org.openjdk.skara.issuetracker.Issue;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+public class IssueUtil {\n+\n+    \/**\n+     * Find the closest issue from the provided issue list according to the provided fix version.\n+     * This method is similar to Backports#findIssue, but this method can handle all the fix versions of the issue\n+     * instead of only the main fix version and can receive an issue list instead of only the primary issue.\n+     *\n+     * If one of the issues has the correct fix version, use it.\n+     * Else, if one of the issues has a matching <N>-pool-<opt> fix version, use it.\n+     * Else, if one of the issues has a matching <N>-pool fix version, use it.\n+     * Else, if one of the issues has a \"scratch\" fix version, use it.\n+     * Otherwise, return empty.\n+     *\n+     * A \"scratch\" fixVersion is empty, \"tbd.*\", or \"unknown\".\n+     *\/\n+    public static Optional<Issue> findClosestIssue(List<Issue> issueList, JdkVersion fixVersion) {\n+        var matchingVersionIssue = issueList.stream()\n+                .filter(issue -> Backports.fixVersions(issue).stream().anyMatch(v -> v.equals(fixVersion.raw())))\n+                .findFirst();\n+        if (matchingVersionIssue.isPresent()) {\n+            return matchingVersionIssue;\n+        }\n+\n+        if (fixVersion.opt().isPresent()) {\n+            var matchingOptPoolVersionIssue = issueList.stream()\n+                    .filter(issue -> Backports.fixVersions(issue).stream().anyMatch(\n+                            v -> v.equals(fixVersion.feature() + \"-pool-\" + fixVersion.opt().get())))\n+                    .findFirst();\n+            if (matchingOptPoolVersionIssue.isPresent()) {\n+                return matchingOptPoolVersionIssue;\n+            }\n+        }\n+\n+        var matchingPoolVersionIssue = issueList.stream()\n+                .filter(issue -> Backports.fixVersions(issue).stream().anyMatch(v -> v.equals(fixVersion.feature() + \"-pool\")))\n+                .findFirst();\n+        if (matchingPoolVersionIssue.isPresent()) {\n+            return matchingPoolVersionIssue;\n+        }\n+\n+        return issueList.stream()\n+                .filter(issue -> Backports.fixVersions(issue).stream().noneMatch(v -> !v.startsWith(\"tbd\") && !v.equalsIgnoreCase(\"unknown\")))\n+                .findFirst();\n+    }\n+}\n","filename":"jbs\/src\/main\/java\/org\/openjdk\/skara\/jbs\/IssueUtil.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"},{"patch":"@@ -0,0 +1,98 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.jbs;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInfo;\n+import org.openjdk.skara.issuetracker.Issue;\n+import org.openjdk.skara.issuetracker.Link;\n+import org.openjdk.skara.json.JSON;\n+import org.openjdk.skara.test.HostCredentials;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class IssueUtilTests {\n+\n+    @Test\n+    void testFindClosestIssue(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo)) {\n+            var issueProject = credentials.getIssueProject();\n+            var issue = credentials.createIssue(issueProject, \"Issue\");\n+            issue.setProperty(\"issuetype\", JSON.of(\"Bug\"));\n+            var backport = credentials.createIssue(issueProject, \"Backport\");\n+            backport.setProperty(\"issuetype\", JSON.of(\"Backport\"));\n+            backport.setState(Issue.State.RESOLVED);\n+            issue.addLink(Link.create(backport, \"backported by\").build());\n+            var backportFoo = credentials.createIssue(issueProject, \"Backport Foo\");\n+            backportFoo.setProperty(\"issuetype\", JSON.of(\"Backport\"));\n+            issue.addLink(Link.create(backportFoo, \"backported by\").build());\n+\n+            issue.setProperty(\"fixVersions\", JSON.array().add(\"11-pool\"));\n+            backport.setProperty(\"fixVersions\", JSON.array().add(\"12-pool\"));\n+            backportFoo.setProperty(\"fixVersions\", JSON.array().add(\"12-pool-foo\"));\n+            assertEquals(issue, IssueUtil.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"11.1\").orElseThrow()).orElseThrow());\n+            assertEquals(backport, IssueUtil.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"12.2\").orElseThrow()).orElseThrow());\n+            assertEquals(backportFoo, IssueUtil.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"12.2-foo\").orElseThrow()).orElseThrow());\n+            assertEquals(Optional.empty(), IssueUtil.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"13.3\").orElseThrow()));\n+            assertEquals(issue, IssueUtil.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"11.1-foo\").orElseThrow()).orElseThrow());\n+\n+            issue.setProperty(\"fixVersions\", JSON.array().add(\"8\").add(\"11-pool\"));\n+            backport.setProperty(\"fixVersions\", JSON.array().add(\"8\").add(\"12-pool\"));\n+            backportFoo.setProperty(\"fixVersions\", JSON.array().add(\"8\").add(\"12-pool-foo\"));\n+            assertEquals(issue, IssueUtil.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"11.1\").orElseThrow()).orElseThrow());\n+            assertEquals(backport, IssueUtil.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"12.2\").orElseThrow()).orElseThrow());\n+            assertEquals(backportFoo, IssueUtil.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"12.2-foo\").orElseThrow()).orElseThrow());\n+            assertEquals(Optional.empty(), IssueUtil.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"13.3\").orElseThrow()));\n+            assertEquals(issue, IssueUtil.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"11.1-foo\").orElseThrow()).orElseThrow());\n+\n+            issue.setProperty(\"fixVersions\", JSON.array().add(\"tbd\"));\n+            assertEquals(issue, IssueUtil.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"11.1\").orElseThrow()).orElseThrow());\n+            issue.setProperty(\"fixVersions\", JSON.array().add(\"8\").add(\"tbd\"));\n+            assertEquals(Optional.empty(), IssueUtil.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"11.1\").orElseThrow()));\n+\n+            issue.setProperty(\"fixVersions\", JSON.array().add(\"12.2\"));\n+            backport.setProperty(\"fixVersions\", JSON.array().add(\"tbd\"));\n+            assertEquals(issue, IssueUtil.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"12.2\").orElseThrow()).orElseThrow());\n+            assertEquals(backport, IssueUtil.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"11.1\").orElseThrow()).orElseThrow());\n+            issue.setProperty(\"fixVersions\", JSON.array().add(\"8\").add(\"12.2\"));\n+            backport.setProperty(\"fixVersions\", JSON.array().add(\"8\").add(\"tbd\"));\n+            assertEquals(issue, IssueUtil.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"12.2\").orElseThrow()).orElseThrow());\n+            assertEquals(Optional.empty(), IssueUtil.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"11.1\").orElseThrow()));\n+\n+            issue.setProperty(\"fixVersions\", JSON.array().add(\"12.2\"));\n+            backport.setProperty(\"fixVersions\", JSON.array().add(\"11.1\"));\n+            assertEquals(issue, IssueUtil.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"12.2\").orElseThrow()).orElseThrow());\n+            assertEquals(backport, IssueUtil.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"11.1\").orElseThrow()).orElseThrow());\n+            assertEquals(Optional.empty(), IssueUtil.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"13.3\").orElseThrow()));\n+            issue.setProperty(\"fixVersions\", JSON.array().add(\"8\").add(\"12.2\"));\n+            backport.setProperty(\"fixVersions\", JSON.array().add(\"8\").add(\"11.1\"));\n+            assertEquals(issue, IssueUtil.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"12.2\").orElseThrow()).orElseThrow());\n+            assertEquals(backport, IssueUtil.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"11.1\").orElseThrow()).orElseThrow());\n+            assertEquals(Optional.empty(), IssueUtil.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"13.3\").orElseThrow()));\n+        }\n+    }\n+}\n","filename":"jbs\/src\/test\/java\/org\/openjdk\/skara\/jbs\/IssueUtilTests.java","additions":98,"deletions":0,"binary":false,"changes":98,"status":"added"}]}