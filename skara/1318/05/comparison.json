{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,2 @@\n+    implementation project(':jcheck')\n+    implementation project(':jbs')\n","filename":"bots\/csr\/build.gradle","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,2 @@\n+    requires org.openjdk.skara.jcheck;\n+    requires org.openjdk.skara.jbs;\n","filename":"bots\/csr\/src\/main\/java\/module-info.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,3 @@\n-import org.openjdk.skara.issuetracker.Link;\n+import org.openjdk.skara.jbs.Backports;\n+import org.openjdk.skara.jbs.JdkVersion;\n+import org.openjdk.skara.jcheck.JCheckConfiguration;\n@@ -60,3 +62,11 @@\n-    private static Optional<Link> csrLink(Issue issue) {\n-        return issue == null ? Optional.empty() : issue.links().stream()\n-                .filter(link -> link.relationship().isPresent() && \"csr for\".equals(link.relationship().get())).findAny();\n+    \/**\n+     * Get the fix version from the provided PR.\n+     *\/\n+    public static Optional<JdkVersion> getVersion(PullRequest pullRequest) {\n+        var confFile = pullRequest.repository().fileContents(\".jcheck\/conf\", pullRequest.targetRef());\n+        var configuration = JCheckConfiguration.parse(confFile.lines().toList());\n+        var version = configuration.general().version().orElse(null);\n+        if (version == null || \"\".equals(version)) {\n+            return Optional.empty();\n+        }\n+        return JdkVersion.parse(version);\n@@ -75,2 +85,2 @@\n-            var jbsIssue = project.issue(issue.get().shortId());\n-            if (jbsIssue.isEmpty()) {\n+            var jbsIssueOpt = project.issue(issue.get().shortId());\n+            if (jbsIssueOpt.isEmpty()) {\n@@ -81,3 +91,3 @@\n-            var csrOptional = csrLink(jbsIssue.get()).flatMap(Link::issue);\n-            if (csrOptional.isEmpty()) {\n-                log.info(\"Not found CSR for \" + describe(pr));\n+            var versionOpt = getVersion(pr);\n+            if (versionOpt.isEmpty()) {\n+                log.info(\"No fix version found in `.jcheck\/conf` for \" + describe(pr));\n@@ -87,0 +97,5 @@\n+            var csrOptional = Backports.findCsr(jbsIssueOpt.get(), versionOpt.get());\n+            if (csrOptional.isEmpty()) {\n+                log.info(\"No CSR found for \" + describe(pr));\n+                continue;\n+            }\n@@ -88,0 +103,1 @@\n+\n","filename":"bots\/csr\/src\/main\/java\/org\/openjdk\/skara\/bots\/csr\/CSRBot.java","additions":26,"deletions":10,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,2 @@\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n@@ -259,0 +261,148 @@\n+\n+    @Test\n+    void testBackportCsr(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var repo = credentials.getHostedRepository();\n+            var issueProject = credentials.getIssueProject();\n+            var bot = new CSRBot(repo, issueProject);\n+\n+            var issue = issueProject.createIssue(\"This is the primary issue\", List.of(), Map.of());\n+            issue.setState(Issue.State.CLOSED);\n+            issue.setProperty(\"issuetype\", JSON.of(\"Bug\"));\n+            issue.setProperty(\"fixVersions\", JSON.array().add(\"18\"));\n+\n+            var csr = issueProject.createIssue(\"This is the primary CSR\", List.of(), Map.of());\n+            csr.setState(Issue.State.CLOSED);\n+            csr.setProperty(\"issuetype\", JSON.of(\"CSR\"));\n+            csr.setProperty(\"fixVersions\", JSON.array().add(\"18\"));\n+            issue.addLink(Link.create(csr, \"csr for\").build());\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n+            var localRepo = CheckableRepository.init(localRepoFolder, repo.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, repo.url(), \"master\", true);\n+\n+            \/\/ Push a commit to the jdk18 branch\n+            var jdk18Branch = localRepo.branch(masterHash, \"jdk18\");\n+            localRepo.checkout(jdk18Branch);\n+            var newFile = localRepo.root().resolve(\"a_new_file.txt\");\n+            Files.writeString(newFile, \"a_new_file\");\n+            localRepo.add(newFile);\n+            var issueNumber = issue.id().split(\"-\")[1];\n+            var commitMessage = issueNumber + \": This is the primary issue\\n\\nReviewed-by: integrationreviewer2\";\n+            var commitHash = localRepo.commit(commitMessage, \"integrationcommitter1\", \"integrationcommitter1@openjdk.java.net\");\n+            localRepo.push(commitHash, repo.url(), \"jdk18\", true);\n+\n+            \/\/ \"backport\" the commit to the master branch\n+            localRepo.checkout(localRepo.defaultBranch());\n+            var editBranch = localRepo.branch(masterHash, \"edit\");\n+            localRepo.checkout(editBranch);\n+            var newFile2 = localRepo.root().resolve(\"a_new_file.txt\");\n+            Files.writeString(newFile2, \"a_new_file\");\n+            localRepo.add(newFile2);\n+            var editHash = localRepo.commit(\"Backport\", \"duke\", \"duke@openjdk.java.net\");\n+            localRepo.push(editHash, repo.url(), \"edit\", true);\n+            var pr = credentials.createPullRequest(repo, \"master\", \"edit\", issueNumber + \": This is the primary issue\");\n+            pr.addLabel(\"backport\");\n+\n+            \/\/ Remove `version=0.1` from `.jcheck\/conf`, set the version as null\n+            localRepo.checkout(localRepo.defaultBranch());\n+            var defaultConf = Files.readString(localRepo.root().resolve(\".jcheck\/conf\"), StandardCharsets.UTF_8);\n+            var newConf = defaultConf.replace(\"version=0.1\", \"\");\n+            Files.writeString(localRepo.root().resolve(\".jcheck\/conf\"), newConf, StandardCharsets.UTF_8);\n+            localRepo.add(localRepo.root().resolve(\".jcheck\/conf\"));\n+            var confHash = localRepo.commit(\"Set version as null\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(confHash, repo.url(), \"master\", true);\n+            assertFalse(pr.labelNames().contains(\"csr\"));\n+            \/\/ Run bot. The bot won't get a CSR.\n+            TestBotRunner.runPeriodicItems(bot);\n+            \/\/ The bot shouldn't add the `csr` label.\n+            assertFalse(pr.labelNames().contains(\"csr\"));\n+\n+            \/\/ Add `version=bla` to `.jcheck\/conf`, set the version as a wrong value\n+            localRepo.checkout(localRepo.defaultBranch());\n+            defaultConf = Files.readString(localRepo.root().resolve(\".jcheck\/conf\"), StandardCharsets.UTF_8);\n+            newConf = defaultConf.replace(\"project=test\", \"project=test\\nversion=bla\");\n+            Files.writeString(localRepo.root().resolve(\".jcheck\/conf\"), newConf, StandardCharsets.UTF_8);\n+            localRepo.add(localRepo.root().resolve(\".jcheck\/conf\"));\n+            confHash = localRepo.commit(\"Set the version as a wrong value\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(confHash, repo.url(), \"master\", true);\n+            \/\/ Run bot. The bot won't get a CSR.\n+            TestBotRunner.runPeriodicItems(bot);\n+            \/\/ The bot shouldn't add the `csr` label.\n+            assertFalse(pr.labelNames().contains(\"csr\"));\n+\n+            \/\/ Set the `version` in `.jcheck\/conf` as 17 which is an available version.\n+            localRepo.checkout(localRepo.defaultBranch());\n+            defaultConf = Files.readString(localRepo.root().resolve(\".jcheck\/conf\"), StandardCharsets.UTF_8);\n+            newConf = defaultConf.replace(\"version=bla\", \"version=17\");\n+            Files.writeString(localRepo.root().resolve(\".jcheck\/conf\"), newConf, StandardCharsets.UTF_8);\n+            localRepo.add(localRepo.root().resolve(\".jcheck\/conf\"));\n+            confHash = localRepo.commit(\"Set the version as 17\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(confHash, repo.url(), \"master\", true);\n+            \/\/ Run bot. The primary CSR doesn't have the fix version `17`, so the bot won't get a CSR.\n+            TestBotRunner.runPeriodicItems(bot);\n+            \/\/ The bot shouldn't add the `csr` label.\n+            assertFalse(pr.labelNames().contains(\"csr\"));\n+\n+            \/\/ Set the fix versions of the primary CSR to 17 and 18.\n+            csr.setProperty(\"fixVersions\", JSON.array().add(\"17\").add(\"18\"));\n+            \/\/ Run bot. The primary CSR has the fix version `17`, so it would be used and the `csr` label would be added.\n+            TestBotRunner.runPeriodicItems(bot);\n+            \/\/ The bot should have added the `csr` label\n+            assertTrue(pr.labelNames().contains(\"csr\"));\n+\n+            \/\/ Revert the fix versions of the primary CSR to 18.\n+            csr.setProperty(\"fixVersions\", JSON.array().add(\"18\"));\n+            \/\/ Create a backport issue whose fix version is 17\n+            var backportIssue = issueProject.createIssue(\"This is the backport issue\", List.of(), Map.of());\n+            backportIssue.setProperty(\"issuetype\", JSON.of(\"Backport\"));\n+            backportIssue.setProperty(\"fixVersions\", JSON.array().add(\"17\"));\n+            backportIssue.setState(Issue.State.OPEN);\n+            issue.addLink(Link.create(backportIssue, \"backported by\").build());\n+            assertTrue(pr.labelNames().contains(\"csr\"));\n+            pr.removeLabel(\"csr\");\n+            \/\/ Run bot. The bot can find a backport issue but can't find a backport CSR.\n+            TestBotRunner.runPeriodicItems(bot);\n+            \/\/ The bot shouldn't add the `csr` label.\n+            assertFalse(pr.labelNames().contains(\"csr\"));\n+\n+            \/\/ Create a backport CSR whose fix version is 17.\n+            var backportCsr = issueProject.createIssue(\"This is the backport CSR\", List.of(), Map.of());\n+            backportCsr.setProperty(\"issuetype\", JSON.of(\"CSR\"));\n+            backportCsr.setProperty(\"fixVersions\", JSON.array().add(\"17\"));\n+            backportCsr.setState(Issue.State.OPEN);\n+            backportIssue.addLink(Link.create(backportCsr, \"csr for\").build());\n+            \/\/ Run bot. The bot can find a backport issue and a backport CSR.\n+            TestBotRunner.runPeriodicItems(bot);\n+            \/\/ The bot should have added the CSR label\n+            assertTrue(pr.labelNames().contains(\"csr\"));\n+\n+            \/\/ Now we have a primary issue, a primary CSR, a backport issue, a backport CSR.\n+            \/\/ Set the backport CSR to have multiple fix versions, included 11.\n+            backportCsr.setProperty(\"fixVersions\", JSON.array().add(\"17\").add(\"11\").add(\"8\"));\n+            \/\/ Set the `version` in `.jcheck\/conf` as 11.\n+            localRepo.checkout(localRepo.defaultBranch());\n+            defaultConf = Files.readString(localRepo.root().resolve(\".jcheck\/conf\"), StandardCharsets.UTF_8);\n+            newConf = defaultConf.replace(\"version=17\", \"version=11\");\n+            Files.writeString(localRepo.root().resolve(\".jcheck\/conf\"), newConf, StandardCharsets.UTF_8);\n+            localRepo.add(localRepo.root().resolve(\".jcheck\/conf\"));\n+            confHash = localRepo.commit(\"Set the version as 11\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(confHash, repo.url(), \"master\", true);\n+            pr.removeLabel(\"csr\");\n+            \/\/ Run bot.\n+            TestBotRunner.runPeriodicItems(bot);\n+            \/\/ The bot should have added the CSR label\n+            assertTrue(pr.labelNames().contains(\"csr\"));\n+\n+            \/\/ Set the backport CSR to have multiple fix versions, excluded 11.\n+            backportCsr.setProperty(\"fixVersions\", JSON.array().add(\"17\").add(\"8\"));\n+            pr.removeLabel(\"csr\");\n+            \/\/ Run bot.\n+            TestBotRunner.runPeriodicItems(bot);\n+            \/\/ The bot shouldn't add the `csr` label.\n+            assertFalse(pr.labelNames().contains(\"csr\"));\n+        }\n+    }\n","filename":"bots\/csr\/src\/test\/java\/org\/openjdk\/skara\/bots\/csr\/CSRBotTests.java","additions":151,"deletions":1,"binary":false,"changes":152,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,0 +47,1 @@\n+    implementation project(':jbs')\n","filename":"bots\/pr\/build.gradle","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+    requires org.openjdk.skara.jbs;\n","filename":"bots\/pr\/src\/main\/java\/module-info.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import org.openjdk.skara.jbs.Backports;\n@@ -32,1 +33,0 @@\n-import java.util.Optional;\n@@ -55,2 +55,2 @@\n-                      \"[\" + issue.id() + \"](\" + issue.webUrl() + \"). This pull request cannot be integrated until \" +\n-                      \"the CSR request is approved.\");\n+                \"[\" + issue.id() + \"](\" + issue.webUrl() + \") with the correct fix version. \" +\n+                \"This pull request cannot be integrated until the CSR request is approved.\");\n@@ -59,3 +59,3 @@\n-    private static Optional<Link> csrLink(Issue issue) {\n-        return issue == null ? Optional.empty() : issue.links().stream()\n-                .filter(link -> link.relationship().isPresent() && \"csr for\".equals(link.relationship().get())).findAny();\n+    private static void csrUnneededReply(PrintWriter writer) {\n+        writer.println(\"determined that a [CSR](https:\/\/wiki.openjdk.java.net\/display\/csr\/Main) request \" +\n+                \"is not needed for this pull request.\");\n@@ -91,2 +91,3 @@\n-                reply.println(\"determined that a [CSR](https:\/\/wiki.openjdk.java.net\/display\/csr\/Main) request \" +\n-                        \"is not needed for this pull request.\");\n+                \/\/ FIXME here, the PR may have an approved CSR. We should distinguish the situations\n+                \/\/ of having no csr request and having an approved csr request.\n+                csrUnneededReply(reply);\n@@ -99,2 +100,1 @@\n-                reply.println(\"determined that a [CSR](https:\/\/wiki.openjdk.java.net\/display\/csr\/Main) request \" +\n-                        \"is not needed for this pull request.\");\n+                csrUnneededReply(reply);\n@@ -103,2 +103,2 @@\n-            var jbsIssue = issueProject.issue(issue.get().shortId());\n-            if (jbsIssue.isEmpty()) {\n+            var jbsIssueOpt = issueProject.issue(issue.get().shortId());\n+            if (jbsIssueOpt.isEmpty()) {\n@@ -106,2 +106,1 @@\n-                reply.println(\"determined that a [CSR](https:\/\/wiki.openjdk.java.net\/display\/csr\/Main) request \" +\n-                        \"is not needed for this pull request.\");\n+                csrUnneededReply(reply);\n@@ -111,3 +110,2 @@\n-            var csrLink = csrLink(jbsIssue.get());\n-            if (csrLink.isEmpty()) {\n-                \/\/ The issue has no csr link, the bot should just remove the csr label.\n+            var versionOpt = CheckRun.getVersion(pr);\n+            if (versionOpt.isEmpty()) {\n@@ -115,2 +113,1 @@\n-                reply.println(\"determined that a [CSR](https:\/\/wiki.openjdk.java.net\/display\/csr\/Main) request \" +\n-                        \"is not needed for this pull request.\");\n+                csrUnneededReply(reply);\n@@ -120,1 +117,1 @@\n-            var csrOptional = csrLink.flatMap(Link::issue);\n+            var csrOptional = Backports.findCsr(jbsIssueOpt.get(), versionOpt.get());\n@@ -122,1 +119,0 @@\n-                \/\/ The csr link exists but the csr issue doesn't exist, the bot should just remove the csr label.\n@@ -124,2 +120,1 @@\n-                reply.println(\"determined that a [CSR](https:\/\/wiki.openjdk.java.net\/display\/csr\/Main) request \" +\n-                        \"is not needed for this pull request.\");\n+                csrUnneededReply(reply);\n@@ -129,0 +124,1 @@\n+\n@@ -143,2 +139,1 @@\n-            reply.println(\"determined that a [CSR](https:\/\/wiki.openjdk.java.net\/display\/csr\/Main) request \" +\n-                    \"is not needed for this pull request.\");\n+            csrUnneededReply(reply);\n@@ -163,2 +158,2 @@\n-        var jbsIssue = issueProject.issue(issue.get().shortId());\n-        if (jbsIssue.isEmpty()) {\n+        var jbsIssueOpt = issueProject.issue(issue.get().shortId());\n+        if (jbsIssueOpt.isEmpty()) {\n@@ -169,0 +164,1 @@\n+        }\n@@ -170,0 +166,7 @@\n+        var jbsIssue = jbsIssueOpt.get();\n+        var versionOpt = CheckRun.getVersion(pr);\n+        if (versionOpt.isEmpty()) {\n+            csrReply(reply);\n+            linkReply(pr, jbsIssue, reply);\n+            pr.addLabel(CSR_LABEL);\n+            return;\n@@ -172,1 +175,1 @@\n-        var csrOptional = csrLink(jbsIssue.get()).flatMap(Link::issue);\n+        var csrOptional = Backports.findCsr(jbsIssueOpt.get(), versionOpt.get());\n@@ -175,1 +178,1 @@\n-            linkReply(pr, jbsIssue.get(), reply);\n+            linkReply(pr, jbsIssue, reply);\n@@ -179,1 +182,0 @@\n-\n@@ -181,0 +183,1 @@\n+\n@@ -190,1 +193,1 @@\n-            reply.println(\"the issue for this pull request, [\" + jbsIssue.get().id() + \"](\" + jbsIssue.get().webUrl() + \"), already has \" +\n+            reply.println(\"the issue for this pull request, [\" + jbsIssue.id() + \"](\" + jbsIssue.webUrl() + \"), already has \" +\n@@ -195,1 +198,1 @@\n-                          \"[\" + jbsIssue.get().id() + \"](\" + jbsIssue.get().webUrl() + \") has been approved.\");\n+                          \"[\" + jbsIssue.id() + \"](\" + jbsIssue.webUrl() + \") has been approved.\");\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CSRCommand.java","additions":35,"deletions":32,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -30,0 +30,3 @@\n+import org.openjdk.skara.jbs.Backports;\n+import org.openjdk.skara.jbs.JdkVersion;\n+import org.openjdk.skara.jcheck.JCheckConfiguration;\n@@ -131,0 +134,13 @@\n+    \/**\n+     * Get the fix version from the provided PR.\n+     *\/\n+    public static Optional<JdkVersion> getVersion(PullRequest pullRequest) {\n+        var confFile = pullRequest.repository().fileContents(\".jcheck\/conf\", pullRequest.targetRef());\n+        var configuration = JCheckConfiguration.parse(confFile.lines().toList());\n+        var version = configuration.general().version().orElse(null);\n+        if (version == null || \"\".equals(version)) {\n+            return Optional.empty();\n+        }\n+        return JdkVersion.parse(version);\n+    }\n+\n@@ -139,2 +155,2 @@\n-        var jbsIssue = issueProject.issue(issue.shortId());\n-        if (jbsIssue.isEmpty()) {\n+        var jbsIssueOpt = issueProject.issue(issue.shortId());\n+        if (jbsIssueOpt.isEmpty()) {\n@@ -143,3 +159,4 @@\n-        var csr = csrLink(jbsIssue.get()).flatMap(Link::issue);\n-        if (csr.isPresent()) {\n-            return Issue.fromStringRelaxed(csr.get().id() + \": \" + csr.get().title());\n+\n+        var versionOpt = getVersion(pr);\n+        if (versionOpt.isEmpty()) {\n+            return Optional.empty();\n@@ -147,2 +164,0 @@\n-        return Optional.empty();\n-    }\n@@ -150,3 +165,2 @@\n-    private static Optional<Link> csrLink(org.openjdk.skara.issuetracker.Issue issue) {\n-        return issue == null ? Optional.empty() : issue.links().stream()\n-                .filter(link -> link.relationship().isPresent() && \"csr for\".equals(link.relationship().get())).findAny();\n+        return Backports.findCsr(jbsIssueOpt.get(), versionOpt.get())\n+                .flatMap(perIssue -> Issue.fromStringRelaxed(perIssue.id() + \": \" + perIssue.title()));\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":24,"deletions":10,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+import org.openjdk.skara.forge.HostedRepository;\n@@ -30,0 +31,2 @@\n+import org.openjdk.skara.vcs.Hash;\n+import org.openjdk.skara.vcs.Repository;\n@@ -32,0 +35,2 @@\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n@@ -686,0 +691,255 @@\n+\n+    @Test\n+    void testBackportCsr(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var issueProject = credentials.getIssueProject();\n+            var botRepo = credentials.getHostedRepository();\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addReviewer(author.forge().currentUser().id())\n+                    .addReviewer(reviewer.forge().currentUser().id());\n+            var bot = PullRequestBot.newBuilder().repo(botRepo).enableCsr(true)\n+                    .censusRepo(censusBuilder.build()).issueProject(issueProject).build();\n+\n+            var issue = issueProject.createIssue(\"This is the primary issue\", List.of(), Map.of());\n+            issue.setState(Issue.State.CLOSED);\n+            issue.setProperty(\"issuetype\", JSON.of(\"Bug\"));\n+            issue.setProperty(\"fixVersions\", JSON.array().add(\"18\"));\n+\n+            var csr = issueProject.createIssue(\"This is the primary CSR\", List.of(), Map.of());\n+            csr.setState(Issue.State.CLOSED);\n+            csr.setProperty(\"issuetype\", JSON.of(\"CSR\"));\n+            csr.setProperty(\"fixVersions\", JSON.array().add(\"18\"));\n+            csr.setProperty(\"resolution\", JSON.object().put(\"name\", \"Approved\"));\n+            issue.addLink(Link.create(csr, \"csr for\").build());\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Push a commit to the jdk18 branch\n+            var jdk18Branch = localRepo.branch(masterHash, \"jdk18\");\n+            localRepo.checkout(jdk18Branch);\n+            var newFile = localRepo.root().resolve(\"a_new_file.txt\");\n+            Files.writeString(newFile, \"a_new_file\");\n+            localRepo.add(newFile);\n+            var issueNumber = issue.id().split(\"-\")[1];\n+            var commitMessage = issueNumber + \": This is the primary issue\\n\\nReviewed-by: integrationreviewer2\";\n+            var commitHash = localRepo.commit(commitMessage, \"integrationcommitter1\", \"integrationcommitter1@openjdk.java.net\");\n+            localRepo.push(commitHash, author.url(), \"jdk18\", true);\n+\n+            \/\/ Remove `version=0.1` from `.jcheck\/conf`, set the version as null\n+            localRepo.checkout(localRepo.defaultBranch());\n+            var defaultConf = Files.readString(localRepo.root().resolve(\".jcheck\/conf\"), StandardCharsets.UTF_8);\n+            var newConf = defaultConf.replace(\"version=0.1\", \"\");\n+            Files.writeString(localRepo.root().resolve(\".jcheck\/conf\"), newConf, StandardCharsets.UTF_8);\n+            localRepo.add(localRepo.root().resolve(\".jcheck\/conf\"));\n+            var confHash = localRepo.commit(\"Set version as null\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(confHash, author.url(), \"master\", true);\n+            createBackport(localRepo, author, confHash, \"edit1\");\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit1\", \"Backport \" + commitHash);\n+            \/\/ Run bot. Request a CSR.\n+            pr.addComment(\"\/csr\");\n+            TestBotRunner.runPeriodicItems(bot);\n+            assertTrue(pr.body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.labelNames().contains(\"csr\"));\n+            assertLastCommentContains(pr, \"has indicated that a \" +\n+                    \"[compatibility and specification](https:\/\/wiki.openjdk.java.net\/display\/csr\/Main) (CSR) request \" +\n+                    \"is needed for this pull request.\");\n+            assertLastCommentContains(pr, \"please create a [CSR](https:\/\/wiki.openjdk.java.net\/display\/csr\/Main) request for issue\");\n+            assertLastCommentContains(pr, \"with the correct fix version\");\n+            assertLastCommentContains(pr, \"This pull request cannot be integrated until the CSR request is approved.\");\n+            \/\/ Use `\/csr unneeded` to revert the change.\n+            pr.addComment(\"\/csr unneeded\");\n+            TestBotRunner.runPeriodicItems(bot);\n+            assertFalse(pr.body().contains(\"Change requires a CSR request to be approved\"));\n+            assertFalse(pr.labelNames().contains(\"csr\"));\n+            assertLastCommentContains(pr, \"determined that a [CSR](https:\/\/wiki.openjdk.java.net\/display\/csr\/Main) request \" +\n+                    \"is not needed for this pull request.\");\n+\n+            \/\/ Add `version=bla` to `.jcheck\/conf`, set the version as a wrong value\n+            localRepo.checkout(localRepo.defaultBranch());\n+            defaultConf = Files.readString(localRepo.root().resolve(\".jcheck\/conf\"), StandardCharsets.UTF_8);\n+            newConf = defaultConf.replace(\"project=test\", \"project=test\\nversion=bla\");\n+            Files.writeString(localRepo.root().resolve(\".jcheck\/conf\"), newConf, StandardCharsets.UTF_8);\n+            localRepo.add(localRepo.root().resolve(\".jcheck\/conf\"));\n+            confHash = localRepo.commit(\"Set the version as a wrong value\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(confHash, author.url(), \"master\", true);\n+            createBackport(localRepo, author, confHash, \"edit2\");\n+            pr = credentials.createPullRequest(author, \"master\", \"edit2\", \"Backport \" + commitHash);\n+            \/\/ Run bot. Request a CSR.\n+            pr.addComment(\"\/csr\");\n+            TestBotRunner.runPeriodicItems(bot);\n+            assertTrue(pr.body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.labelNames().contains(\"csr\"));\n+            assertLastCommentContains(pr, \"has indicated that a \" +\n+                    \"[compatibility and specification](https:\/\/wiki.openjdk.java.net\/display\/csr\/Main) (CSR) request \" +\n+                    \"is needed for this pull request.\");\n+            assertLastCommentContains(pr, \"please create a [CSR](https:\/\/wiki.openjdk.java.net\/display\/csr\/Main) request for issue\");\n+            assertLastCommentContains(pr, \"with the correct fix version\");\n+            assertLastCommentContains(pr, \"This pull request cannot be integrated until the CSR request is approved.\");\n+            \/\/ Use `\/csr unneeded` to revert the change.\n+            pr.addComment(\"\/csr unneeded\");\n+            TestBotRunner.runPeriodicItems(bot);\n+            assertFalse(pr.body().contains(\"Change requires a CSR request to be approved\"));\n+            assertFalse(pr.labelNames().contains(\"csr\"));\n+            assertLastCommentContains(pr, \"determined that a [CSR](https:\/\/wiki.openjdk.java.net\/display\/csr\/Main) request \" +\n+                    \"is not needed for this pull request.\");\n+\n+            \/\/ Set the `version` in `.jcheck\/conf` as 17 which is an available version.\n+            localRepo.checkout(localRepo.defaultBranch());\n+            defaultConf = Files.readString(localRepo.root().resolve(\".jcheck\/conf\"), StandardCharsets.UTF_8);\n+            newConf = defaultConf.replace(\"version=bla\", \"version=17\");\n+            Files.writeString(localRepo.root().resolve(\".jcheck\/conf\"), newConf, StandardCharsets.UTF_8);\n+            localRepo.add(localRepo.root().resolve(\".jcheck\/conf\"));\n+            confHash = localRepo.commit(\"Set the version as 17\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(confHash, author.url(), \"master\", true);\n+            createBackport(localRepo, author, confHash, \"edit3\");\n+            pr = credentials.createPullRequest(author, \"master\", \"edit3\", \"Backport \" + commitHash);\n+            \/\/ Run bot. Request a CSR.\n+            pr.addComment(\"\/csr\");\n+            TestBotRunner.runPeriodicItems(bot);\n+            assertTrue(pr.body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.labelNames().contains(\"csr\"));\n+            assertLastCommentContains(pr, \"has indicated that a \" +\n+                    \"[compatibility and specification](https:\/\/wiki.openjdk.java.net\/display\/csr\/Main) (CSR) request \" +\n+                    \"is needed for this pull request.\");\n+            assertLastCommentContains(pr, \"please create a [CSR](https:\/\/wiki.openjdk.java.net\/display\/csr\/Main) request for issue\");\n+            assertLastCommentContains(pr, \"with the correct fix version\");\n+            assertLastCommentContains(pr, \"This pull request cannot be integrated until the CSR request is approved.\");\n+            \/\/ Use `\/csr unneeded` to revert the change.\n+            pr.addComment(\"\/csr unneeded\");\n+            TestBotRunner.runPeriodicItems(bot);\n+            assertFalse(pr.body().contains(\"Change requires a CSR request to be approved\"));\n+            assertFalse(pr.labelNames().contains(\"csr\"));\n+            assertLastCommentContains(pr, \"determined that a [CSR](https:\/\/wiki.openjdk.java.net\/display\/csr\/Main) request \" +\n+                    \"is not needed for this pull request.\");\n+\n+            \/\/ Set the fix versions of the primary CSR to 17 and 18.\n+            csr.setProperty(\"fixVersions\", JSON.array().add(\"17\").add(\"18\"));\n+            \/\/ Run bot. Request a CSR.\n+            pr.addComment(\"\/summary\\n\" + commitMessage);\n+            pr.addComment(\"\/csr\");\n+            TestBotRunner.runPeriodicItems(bot);\n+            assertTrue(pr.body().contains(\"- [x] Change requires a CSR request to be approved\"));\n+            assertFalse(pr.labelNames().contains(\"csr\"));\n+            assertLastCommentContains(pr, \"the issue for this pull request\");\n+            assertLastCommentContains(pr, \"already has an approved CSR request\");\n+            \/\/ FIXME here, `\/csr unneeded` is not used because these is a bug at CSRCommand. See the FIXME at CSRCommand.\n+\n+            \/\/ Revert the fix versions of the primary CSR to 18.\n+            csr.setProperty(\"fixVersions\", JSON.array().add(\"18\"));\n+            \/\/ Create a backport issue whose fix version is 17\n+            var backportIssue = issueProject.createIssue(\"This is the backport issue\", List.of(), Map.of());\n+            backportIssue.setProperty(\"issuetype\", JSON.of(\"Backport\"));\n+            backportIssue.setProperty(\"fixVersions\", JSON.array().add(\"17\"));\n+            backportIssue.setState(Issue.State.OPEN);\n+            issue.addLink(Link.create(backportIssue, \"backported by\").build());\n+            \/\/ Run bot. Request a CSR.\n+            pr.addComment(\"\/summary\\n\" + commitMessage);\n+            pr.addComment(\"\/csr\");\n+            TestBotRunner.runPeriodicItems(bot);\n+            assertTrue(pr.body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.labelNames().contains(\"csr\"));\n+            assertLastCommentContains(pr, \"has indicated that a \" +\n+                    \"[compatibility and specification](https:\/\/wiki.openjdk.java.net\/display\/csr\/Main) (CSR) request \" +\n+                    \"is needed for this pull request.\");\n+            assertLastCommentContains(pr, \"please create a [CSR](https:\/\/wiki.openjdk.java.net\/display\/csr\/Main) request for issue\");\n+            assertLastCommentContains(pr, \"with the correct fix version\");\n+            assertLastCommentContains(pr, \"This pull request cannot be integrated until the CSR request is approved.\");\n+            \/\/ Use `\/csr unneeded` to revert the change.\n+            pr.addComment(\"\/summary\\n\" + commitMessage);\n+            pr.addComment(\"\/csr unneeded\");\n+            TestBotRunner.runPeriodicItems(bot);\n+            assertFalse(pr.body().contains(\"Change requires a CSR request to be approved\"));\n+            assertFalse(pr.labelNames().contains(\"csr\"));\n+            assertLastCommentContains(pr, \"determined that a [CSR](https:\/\/wiki.openjdk.java.net\/display\/csr\/Main) request \" +\n+                    \"is not needed for this pull request.\");\n+\n+            \/\/ Create a backport CSR whose fix version is 17.\n+            var backportCsr = issueProject.createIssue(\"This is the backport CSR\", List.of(), Map.of());\n+            backportCsr.setProperty(\"issuetype\", JSON.of(\"CSR\"));\n+            backportCsr.setProperty(\"fixVersions\", JSON.array().add(\"17\"));\n+            backportCsr.setState(Issue.State.OPEN);\n+            backportIssue.addLink(Link.create(backportCsr, \"csr for\").build());\n+            \/\/ Run bot. Request a CSR.\n+            pr.addComment(\"\/summary\\n\" + commitMessage);\n+            pr.addComment(\"\/csr\");\n+            TestBotRunner.runPeriodicItems(bot);\n+            assertTrue(pr.body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.labelNames().contains(\"csr\"));\n+            assertLastCommentContains(pr, \"this pull request will not be integrated until the [CSR]\");\n+            assertLastCommentContains(pr, \"for issue \");\n+            assertLastCommentContains(pr, \"has been approved.\");\n+            \/\/ Use `\/csr unneeded` to revert the change.\n+            pr.addComment(\"\/summary\\n\" + commitMessage);\n+            pr.addComment(\"\/csr unneeded\");\n+            TestBotRunner.runPeriodicItems(bot);\n+            assertTrue(pr.body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.labelNames().contains(\"csr\"));\n+            assertLastCommentContains(pr, \"The CSR requirement cannot be removed as there is already a CSR associated \" +\n+                    \"with the main issue of this pull request. Please withdraw the CSR\");\n+            assertLastCommentContains(pr, \"and then use the command `\/csr unneeded` again.\");\n+\n+            \/\/ Now we have a primary issue, a primary CSR, a backport issue, a backport CSR.\n+            \/\/ Set the backport CSR to have multiple fix versions, included 11.\n+            backportCsr.setProperty(\"fixVersions\", JSON.array().add(\"17\").add(\"11\").add(\"8\"));\n+            \/\/ Set the `version` in `.jcheck\/conf` as 11.\n+            localRepo.checkout(localRepo.defaultBranch());\n+            defaultConf = Files.readString(localRepo.root().resolve(\".jcheck\/conf\"), StandardCharsets.UTF_8);\n+            newConf = defaultConf.replace(\"version=17\", \"version=11\");\n+            Files.writeString(localRepo.root().resolve(\".jcheck\/conf\"), newConf, StandardCharsets.UTF_8);\n+            localRepo.add(localRepo.root().resolve(\".jcheck\/conf\"));\n+            confHash = localRepo.commit(\"Set the version as 11\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(confHash, author.url(), \"master\", true);\n+            createBackport(localRepo, author, confHash, \"edit4\");\n+            pr = credentials.createPullRequest(author, \"master\", \"edit4\", \"Backport \" + commitHash);\n+            \/\/ Run bot.\n+            pr.addComment(\"\/summary\\n\" + commitMessage);\n+            pr.addComment(\"\/csr\");\n+            TestBotRunner.runPeriodicItems(bot);\n+            assertTrue(pr.body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.labelNames().contains(\"csr\"));\n+            assertLastCommentContains(pr, \"this pull request will not be integrated until the [CSR]\");\n+            assertLastCommentContains(pr, \"for issue \");\n+            assertLastCommentContains(pr, \"has been approved.\");\n+            \/\/ Set the backport CSR to have multiple fix versions, excluded 11.\n+            backportCsr.setProperty(\"fixVersions\", JSON.array().add(\"17\").add(\"8\"));\n+            \/\/ Use `\/csr unneeded` to revert the change.\n+            pr.addComment(\"\/summary\\n\" + commitMessage);\n+            pr.addComment(\"\/csr unneeded\");\n+            TestBotRunner.runPeriodicItems(bot);\n+            assertFalse(pr.body().contains(\"Change requires a CSR request to be approved\"));\n+            assertFalse(pr.labelNames().contains(\"csr\"));\n+            assertLastCommentContains(pr, \"determined that a [CSR](https:\/\/wiki.openjdk.java.net\/display\/csr\/Main) request \" +\n+                    \"is not needed for this pull request.\");\n+\n+            \/\/ re-run bot.\n+            pr.addComment(\"\/summary\\n\" + commitMessage);\n+            pr.addComment(\"\/csr\");\n+            TestBotRunner.runPeriodicItems(bot);\n+            assertTrue(pr.body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.labelNames().contains(\"csr\"));\n+            assertLastCommentContains(pr, \"has indicated that a \" +\n+                    \"[compatibility and specification](https:\/\/wiki.openjdk.java.net\/display\/csr\/Main) (CSR) request \" +\n+                    \"is needed for this pull request.\");\n+            assertLastCommentContains(pr, \"please create a [CSR](https:\/\/wiki.openjdk.java.net\/display\/csr\/Main) request for issue\");\n+            assertLastCommentContains(pr, \"with the correct fix version\");\n+            assertLastCommentContains(pr, \"This pull request cannot be integrated until the CSR request is approved.\");\n+        }\n+    }\n+\n+    private void createBackport(Repository localRepo, HostedRepository author, Hash masterHash, String branchName) throws IOException {\n+        localRepo.checkout(localRepo.defaultBranch());\n+        var editBranch = localRepo.branch(masterHash, branchName);\n+        localRepo.checkout(editBranch);\n+        var newFile2 = localRepo.root().resolve(\"a_new_file.txt\");\n+        Files.writeString(newFile2, \"a_new_file\");\n+        localRepo.add(newFile2);\n+        var editHash = localRepo.commit(\"Backport\", \"duke\", \"duke@openjdk.java.net\");\n+        localRepo.push(editHash, author.url(), branchName, true);\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CSRTests.java","additions":260,"deletions":0,"binary":false,"changes":260,"status":"modified"},{"patch":"@@ -1153,0 +1153,9 @@\n+            \/\/ Set the version to 17\n+            localRepo.checkout(localRepo.defaultBranch());\n+            var defaultConf = Files.readString(localRepo.root().resolve(\".jcheck\/conf\"), StandardCharsets.UTF_8);\n+            var newConf = defaultConf.replace(\"project=test\", \"project=test\\nversion=17\");\n+            Files.writeString(localRepo.root().resolve(\".jcheck\/conf\"), newConf, StandardCharsets.UTF_8);\n+            localRepo.add(localRepo.root().resolve(\".jcheck\/conf\"));\n+            var confHash = localRepo.commit(\"Set version as 17\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(confHash, author.url(), \"master\", true);\n+\n@@ -2043,0 +2052,207 @@\n+\n+    @Test\n+    void testBackportCsr(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var issueProject = credentials.getIssueProject();\n+            var botRepo = credentials.getHostedRepository();\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addCommitter(author.forge().currentUser().id())\n+                    .addReviewer(reviewer.forge().currentUser().id());\n+            var bot = PullRequestBot.newBuilder().repo(botRepo)\n+                    .censusRepo(censusBuilder.build()).issueProject(issueProject).build();\n+\n+            var issue = issueProject.createIssue(\"This is the primary issue\", List.of(), Map.of());\n+            issue.setState(Issue.State.CLOSED);\n+            issue.setProperty(\"issuetype\", JSON.of(\"Bug\"));\n+            issue.setProperty(\"fixVersions\", JSON.array().add(\"18\"));\n+\n+            var csr = issueProject.createIssue(\"This is the primary CSR\", List.of(), Map.of());\n+            csr.setState(Issue.State.CLOSED);\n+            csr.setProperty(\"issuetype\", JSON.of(\"CSR\"));\n+            csr.setProperty(\"fixVersions\", JSON.array().add(\"18\"));\n+            issue.addLink(Link.create(csr, \"csr for\").build());\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Push a commit to the jdk18 branch\n+            var jdk18Branch = localRepo.branch(masterHash, \"jdk18\");\n+            localRepo.checkout(jdk18Branch);\n+            var newFile = localRepo.root().resolve(\"a_new_file.txt\");\n+            Files.writeString(newFile, \"a_new_file\");\n+            localRepo.add(newFile);\n+            var issueNumber = issue.id().split(\"-\")[1];\n+            var commitMessage = issueNumber + \": This is the primary issue\\n\\nReviewed-by: integrationreviewer2\";\n+            var commitHash = localRepo.commit(commitMessage, \"integrationcommitter1\", \"integrationcommitter1@openjdk.java.net\");\n+            localRepo.push(commitHash, author.url(), \"jdk18\", true);\n+\n+            \/\/ \"backport\" the commit to the master branch\n+            localRepo.checkout(localRepo.defaultBranch());\n+            var editBranch = localRepo.branch(masterHash, \"edit\");\n+            localRepo.checkout(editBranch);\n+            var newFile2 = localRepo.root().resolve(\"a_new_file.txt\");\n+            Files.writeString(newFile2, \"a_new_file\");\n+            localRepo.add(newFile2);\n+            var editHash = localRepo.commit(\"Backport\", \"duke\", \"duke@openjdk.java.net\");\n+            localRepo.push(editHash, author.url(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"Backport \" + commitHash);\n+\n+            \/\/ Remove `version=0.1` from `.jcheck\/conf`, set the version as null\n+            localRepo.checkout(localRepo.defaultBranch());\n+            var defaultConf = Files.readString(localRepo.root().resolve(\".jcheck\/conf\"), StandardCharsets.UTF_8);\n+            var newConf = defaultConf.replace(\"version=0.1\", \"\");\n+            Files.writeString(localRepo.root().resolve(\".jcheck\/conf\"), newConf, StandardCharsets.UTF_8);\n+            localRepo.add(localRepo.root().resolve(\".jcheck\/conf\"));\n+            var confHash = localRepo.commit(\"Set version as null\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(confHash, author.url(), \"master\", true);\n+            \/\/ Run bot. The bot won't get a CSR.\n+            pr.addComment(\"\/summary\\n\" + commitMessage);\n+            TestBotRunner.runPeriodicItems(bot);\n+            \/\/ The PR should have primary issue and shouldn't have primary CSR.\n+            assertTrue(pr.body().contains(\"### Issue\"));\n+            assertFalse(pr.body().contains(\"### Issues\"));\n+            assumeTrue(pr.body().contains(issue.id()));\n+            assumeTrue(pr.body().contains(issue.title()));\n+            assertFalse(pr.body().contains(csr.id()));\n+            assertFalse(pr.body().contains(csr.title()));\n+\n+            \/\/ Add `version=bla` to `.jcheck\/conf`, set the version as a wrong value\n+            localRepo.checkout(localRepo.defaultBranch());\n+            defaultConf = Files.readString(localRepo.root().resolve(\".jcheck\/conf\"), StandardCharsets.UTF_8);\n+            newConf = defaultConf.replace(\"project=test\", \"project=test\\nversion=bla\");\n+            Files.writeString(localRepo.root().resolve(\".jcheck\/conf\"), newConf, StandardCharsets.UTF_8);\n+            localRepo.add(localRepo.root().resolve(\".jcheck\/conf\"));\n+            confHash = localRepo.commit(\"Set the version as a wrong value\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(confHash, author.url(), \"master\", true);\n+            \/\/ Run bot. The bot won't get a CSR.\n+            pr.addComment(\"\/summary\\n\" + commitMessage);\n+            TestBotRunner.runPeriodicItems(bot);\n+            \/\/ The PR should have primary issue and shouldn't have primary CSR.\n+            assertTrue(pr.body().contains(\"### Issue\"));\n+            assertFalse(pr.body().contains(\"### Issues\"));\n+            assumeTrue(pr.body().contains(issue.id()));\n+            assumeTrue(pr.body().contains(issue.title()));\n+            assertFalse(pr.body().contains(csr.id()));\n+            assertFalse(pr.body().contains(csr.title()));\n+\n+            \/\/ Set the `version` in `.jcheck\/conf` as 17 which is an available version.\n+            localRepo.checkout(localRepo.defaultBranch());\n+            defaultConf = Files.readString(localRepo.root().resolve(\".jcheck\/conf\"), StandardCharsets.UTF_8);\n+            newConf = defaultConf.replace(\"version=bla\", \"version=17\");\n+            Files.writeString(localRepo.root().resolve(\".jcheck\/conf\"), newConf, StandardCharsets.UTF_8);\n+            localRepo.add(localRepo.root().resolve(\".jcheck\/conf\"));\n+            confHash = localRepo.commit(\"Set the version as 17\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(confHash, author.url(), \"master\", true);\n+            \/\/ Run bot. The primary CSR doesn't have the fix version `17`, so the bot won't get a CSR.\n+            pr.addComment(\"\/summary\\n\" + commitMessage);\n+            TestBotRunner.runPeriodicItems(bot);\n+            \/\/ The PR should have primary issue and shouldn't have primary CSR.\n+            assertTrue(pr.body().contains(\"### Issue\"));\n+            assertFalse(pr.body().contains(\"### Issues\"));\n+            assumeTrue(pr.body().contains(issue.id()));\n+            assumeTrue(pr.body().contains(issue.title()));\n+            assertFalse(pr.body().contains(csr.id()));\n+            assertFalse(pr.body().contains(csr.title()));\n+\n+            \/\/ Set the fix versions of the primary CSR to 17 and 18.\n+            csr.setProperty(\"fixVersions\", JSON.array().add(\"17\").add(\"18\"));\n+            \/\/ Run bot. The primary CSR has the fix version `17`, so it would be used.\n+            pr.addComment(\"\/summary\\n\" + commitMessage);\n+            TestBotRunner.runPeriodicItems(bot);\n+            \/\/ The bot should have primary issue and primary CSR\n+            assumeTrue(pr.body().contains(\"### Issues\"));\n+            assumeTrue(pr.body().contains(issue.id()));\n+            assumeTrue(pr.body().contains(issue.title()));\n+            assumeTrue(pr.body().contains(csr.id()));\n+            assumeTrue(pr.body().contains(csr.title() + \" (**CSR**)\"));\n+\n+            \/\/ Revert the fix versions of the primary CSR to 18.\n+            csr.setProperty(\"fixVersions\", JSON.array().add(\"18\"));\n+            \/\/ Create a backport issue whose fix version is 17\n+            var backportIssue = issueProject.createIssue(\"This is the backport issue\", List.of(), Map.of());\n+            backportIssue.setProperty(\"issuetype\", JSON.of(\"Backport\"));\n+            backportIssue.setProperty(\"fixVersions\", JSON.array().add(\"17\"));\n+            backportIssue.setState(Issue.State.OPEN);\n+            issue.addLink(Link.create(backportIssue, \"backported by\").build());\n+            \/\/ Run bot. The bot can find a backport issue but can't find a backport CSR.\n+            pr.addComment(\"\/summary\\n\" + commitMessage);\n+            TestBotRunner.runPeriodicItems(bot);\n+            \/\/ The bot should have primary issue and shouldn't have primary CSR.\n+            assertTrue(pr.body().contains(\"### Issue\"));\n+            assertFalse(pr.body().contains(\"### Issues\"));\n+            assumeTrue(pr.body().contains(issue.id()));\n+            assumeTrue(pr.body().contains(issue.title()));\n+            assertFalse(pr.body().contains(csr.id()));\n+            assertFalse(pr.body().contains(csr.title()));\n+            assertFalse(pr.body().contains(backportIssue.id()));\n+            assertFalse(pr.body().contains(backportIssue.title()));\n+\n+            \/\/ Create a backport CSR whose fix version is 17.\n+            var backportCsr = issueProject.createIssue(\"This is the backport CSR\", List.of(), Map.of());\n+            backportCsr.setProperty(\"issuetype\", JSON.of(\"CSR\"));\n+            backportCsr.setProperty(\"fixVersions\", JSON.array().add(\"17\"));\n+            backportCsr.setState(Issue.State.OPEN);\n+            backportIssue.addLink(Link.create(backportCsr, \"csr for\").build());\n+            \/\/ Run bot. The bot can find a backport issue and a backport CSR.\n+            pr.addComment(\"\/summary\\n\" + commitMessage);\n+            TestBotRunner.runPeriodicItems(bot);\n+            \/\/ The bot should have primary issue and backport CSR.\n+            assertTrue(pr.body().contains(\"### Issues\"));\n+            assumeTrue(pr.body().contains(issue.id()));\n+            assumeTrue(pr.body().contains(issue.title()));\n+            assumeTrue(pr.body().contains(backportCsr.id()));\n+            assumeTrue(pr.body().contains(backportCsr.title() + \" (**CSR**)\"));\n+            assertFalse(pr.body().contains(csr.id()));\n+            assertFalse(pr.body().contains(csr.title()));\n+            assertFalse(pr.body().contains(backportIssue.id()));\n+            assertFalse(pr.body().contains(backportIssue.title()));\n+\n+            \/\/ Now we have a primary issue, a primary CSR, a backport issue, a backport CSR.\n+            \/\/ Set the backport CSR to have multiple fix versions, included 11.\n+            backportCsr.setProperty(\"fixVersions\", JSON.array().add(\"17\").add(\"11\").add(\"8\"));\n+            \/\/ Set the `version` in `.jcheck\/conf` as 11.\n+            localRepo.checkout(localRepo.defaultBranch());\n+            defaultConf = Files.readString(localRepo.root().resolve(\".jcheck\/conf\"), StandardCharsets.UTF_8);\n+            newConf = defaultConf.replace(\"version=17\", \"version=11\");\n+            Files.writeString(localRepo.root().resolve(\".jcheck\/conf\"), newConf, StandardCharsets.UTF_8);\n+            localRepo.add(localRepo.root().resolve(\".jcheck\/conf\"));\n+            confHash = localRepo.commit(\"Set the version as 11\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(confHash, author.url(), \"master\", true);\n+            \/\/ Run bot.\n+            pr.addComment(\"\/summary\\n\" + commitMessage);\n+            TestBotRunner.runPeriodicItems(bot);\n+            \/\/ The PR should have primary issue and backport CSR.\n+            assertTrue(pr.body().contains(\"### Issues\"));\n+            assumeTrue(pr.body().contains(issue.id()));\n+            assumeTrue(pr.body().contains(issue.title()));\n+            assumeTrue(pr.body().contains(backportCsr.id()));\n+            assumeTrue(pr.body().contains(backportCsr.title() + \" (**CSR**)\"));\n+            assertFalse(pr.body().contains(csr.id()));\n+            assertFalse(pr.body().contains(csr.title()));\n+            assertFalse(pr.body().contains(backportIssue.id()));\n+            assertFalse(pr.body().contains(backportIssue.title()));\n+\n+            \/\/ Set the backport CSR to have multiple fix versions, excluded 11.\n+            backportCsr.setProperty(\"fixVersions\", JSON.array().add(\"17\").add(\"8\"));\n+            \/\/ Run bot.\n+            pr.addComment(\"\/summary\\n\" + commitMessage);\n+            TestBotRunner.runPeriodicItems(bot);\n+            \/\/ The bot should have primary issue and shouldn't have CSR.\n+            assertTrue(pr.body().contains(\"### Issue\"));\n+            assertFalse(pr.body().contains(\"### Issues\"));\n+            assumeTrue(pr.body().contains(issue.id()));\n+            assumeTrue(pr.body().contains(issue.title()));\n+            assertFalse(pr.body().contains(csr.id()));\n+            assertFalse(pr.body().contains(csr.title()));\n+            assertFalse(pr.body().contains(backportIssue.id()));\n+            assertFalse(pr.body().contains(backportIssue.title()));\n+            assertFalse(pr.body().contains(backportCsr.id()));\n+            assertFalse(pr.body().contains(backportCsr.title()));\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CheckTests.java","additions":216,"deletions":0,"binary":false,"changes":216,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+import org.openjdk.skara.issuetracker.Link;\n@@ -52,1 +53,1 @@\n-    private static Set<String> fixVersions(Issue issue) {\n+    public static Set<String> fixVersions(Issue issue) {\n@@ -226,0 +227,63 @@\n+    \/**\n+     * Find the closest issue from the provided issue list according to the provided fix version.\n+     * This method is similar to `findIssue`, but this method can handle all the fix versions of the issue\n+     * instead of only the main fix version and can receive an issue list instead of only the primary issue.\n+     *\n+     * If one of the issues has the correct fix version, use it.\n+     * Else, if one of the issues has a matching <N>-pool-<opt> fix version, use it.\n+     * Else, if one of the issues has a matching <N>-pool fix version, use it.\n+     * Else, if one of the issues has a \"scratch\" fix version, use it.\n+     * Otherwise, return empty.\n+     *\n+     * A \"scratch\" fixVersion is empty, \"tbd.*\", or \"unknown\".\n+     *\/\n+    public static Optional<Issue> findClosestIssue(List<Issue> issueList, JdkVersion fixVersion) {\n+        var matchingVersionIssue = issueList.stream()\n+                .filter(issue -> Backports.fixVersions(issue).stream().anyMatch(v -> v.equals(fixVersion.raw())))\n+                .findFirst();\n+        if (matchingVersionIssue.isPresent()) {\n+            return matchingVersionIssue;\n+        }\n+\n+        if (fixVersion.opt().isPresent()) {\n+            var matchingOptPoolVersionIssue = issueList.stream()\n+                    .filter(issue -> Backports.fixVersions(issue).stream().anyMatch(\n+                            v -> v.equals(fixVersion.feature() + \"-pool-\" + fixVersion.opt().get())))\n+                    .findFirst();\n+            if (matchingOptPoolVersionIssue.isPresent()) {\n+                return matchingOptPoolVersionIssue;\n+            }\n+        }\n+\n+        var matchingPoolVersionIssue = issueList.stream()\n+                .filter(issue -> Backports.fixVersions(issue).stream().anyMatch(v -> v.equals(fixVersion.feature() + \"-pool\")))\n+                .findFirst();\n+        if (matchingPoolVersionIssue.isPresent()) {\n+            return matchingPoolVersionIssue;\n+        }\n+\n+        return issueList.stream()\n+                .filter(issue -> Backports.fixVersions(issue).stream().noneMatch(v -> !v.startsWith(\"tbd\") && !v.equalsIgnoreCase(\"unknown\")))\n+                .findFirst();\n+    }\n+\n+    \/**\n+     * Find the right CSR according to the primary issue and the requested version\n+     *\/\n+    public static Optional<Issue> findCsr(Issue primary, JdkVersion version) {\n+        var csrList = new ArrayList<Issue>();\n+        csrLink(primary).flatMap(Link::issue).ifPresent(csrList::add);\n+        for (var backportIssue : Backports.findBackports(primary, false)) {\n+            csrLink(backportIssue).flatMap(Link::issue).ifPresent(csrList::add);\n+        }\n+        return findClosestIssue(csrList, version);\n+    }\n+\n+    \/**\n+     * Find the CSR of the provided issue\n+     *\/\n+    private static Optional<Link> csrLink(Issue issue) {\n+        return issue == null ? Optional.empty() : issue.links().stream()\n+                .filter(link -> link.relationship().isPresent() && \"csr for\".equals(link.relationship().get())).findAny();\n+    }\n+\n","filename":"jbs\/src\/main\/java\/org\/openjdk\/skara\/jbs\/Backports.java","additions":66,"deletions":2,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -187,0 +187,59 @@\n+    @Test\n+    void testFindClosestIssue(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo)) {\n+            var issueProject = credentials.getIssueProject();\n+            var issue = credentials.createIssue(issueProject, \"Issue\");\n+            issue.setProperty(\"issuetype\", JSON.of(\"Bug\"));\n+            var backport = credentials.createIssue(issueProject, \"Backport\");\n+            backport.setProperty(\"issuetype\", JSON.of(\"Backport\"));\n+            backport.setState(Issue.State.RESOLVED);\n+            issue.addLink(Link.create(backport, \"backported by\").build());\n+            var backportFoo = credentials.createIssue(issueProject, \"Backport Foo\");\n+            backportFoo.setProperty(\"issuetype\", JSON.of(\"Backport\"));\n+            issue.addLink(Link.create(backportFoo, \"backported by\").build());\n+\n+            issue.setProperty(\"fixVersions\", JSON.array().add(\"11-pool\"));\n+            backport.setProperty(\"fixVersions\", JSON.array().add(\"12-pool\"));\n+            backportFoo.setProperty(\"fixVersions\", JSON.array().add(\"12-pool-foo\"));\n+            assertEquals(issue, Backports.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"11.1\").orElseThrow()).orElseThrow());\n+            assertEquals(backport, Backports.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"12.2\").orElseThrow()).orElseThrow());\n+            assertEquals(backportFoo, Backports.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"12.2-foo\").orElseThrow()).orElseThrow());\n+            assertEquals(Optional.empty(), Backports.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"13.3\").orElseThrow()));\n+            assertEquals(issue, Backports.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"11.1-foo\").orElseThrow()).orElseThrow());\n+\n+            issue.setProperty(\"fixVersions\", JSON.array().add(\"8\").add(\"11-pool\"));\n+            backport.setProperty(\"fixVersions\", JSON.array().add(\"8\").add(\"12-pool\"));\n+            backportFoo.setProperty(\"fixVersions\", JSON.array().add(\"8\").add(\"12-pool-foo\"));\n+            assertEquals(issue, Backports.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"11.1\").orElseThrow()).orElseThrow());\n+            assertEquals(backport, Backports.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"12.2\").orElseThrow()).orElseThrow());\n+            assertEquals(backportFoo, Backports.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"12.2-foo\").orElseThrow()).orElseThrow());\n+            assertEquals(Optional.empty(), Backports.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"13.3\").orElseThrow()));\n+            assertEquals(issue, Backports.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"11.1-foo\").orElseThrow()).orElseThrow());\n+\n+            issue.setProperty(\"fixVersions\", JSON.array().add(\"tbd\"));\n+            assertEquals(issue, Backports.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"11.1\").orElseThrow()).orElseThrow());\n+            issue.setProperty(\"fixVersions\", JSON.array().add(\"8\").add(\"tbd\"));\n+            assertEquals(Optional.empty(), Backports.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"11.1\").orElseThrow()));\n+\n+            issue.setProperty(\"fixVersions\", JSON.array().add(\"12.2\"));\n+            backport.setProperty(\"fixVersions\", JSON.array().add(\"tbd\"));\n+            assertEquals(issue, Backports.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"12.2\").orElseThrow()).orElseThrow());\n+            assertEquals(backport, Backports.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"11.1\").orElseThrow()).orElseThrow());\n+            issue.setProperty(\"fixVersions\", JSON.array().add(\"8\").add(\"12.2\"));\n+            backport.setProperty(\"fixVersions\", JSON.array().add(\"8\").add(\"tbd\"));\n+            assertEquals(issue, Backports.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"12.2\").orElseThrow()).orElseThrow());\n+            assertEquals(Optional.empty(), Backports.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"11.1\").orElseThrow()));\n+\n+            issue.setProperty(\"fixVersions\", JSON.array().add(\"12.2\"));\n+            backport.setProperty(\"fixVersions\", JSON.array().add(\"11.1\"));\n+            assertEquals(issue, Backports.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"12.2\").orElseThrow()).orElseThrow());\n+            assertEquals(backport, Backports.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"11.1\").orElseThrow()).orElseThrow());\n+            assertEquals(Optional.empty(), Backports.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"13.3\").orElseThrow()));\n+            issue.setProperty(\"fixVersions\", JSON.array().add(\"8\").add(\"12.2\"));\n+            backport.setProperty(\"fixVersions\", JSON.array().add(\"8\").add(\"11.1\"));\n+            assertEquals(issue, Backports.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"12.2\").orElseThrow()).orElseThrow());\n+            assertEquals(backport, Backports.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"11.1\").orElseThrow()).orElseThrow());\n+            assertEquals(Optional.empty(), Backports.findClosestIssue(List.of(issue, backport, backportFoo), JdkVersion.parse(\"13.3\").orElseThrow()));\n+        }\n+    }\n+\n","filename":"jbs\/src\/test\/java\/org\/openjdk\/skara\/jbs\/BackportsTests.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"modified"}]}