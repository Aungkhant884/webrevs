{"files":[{"patch":"@@ -640,1 +640,1 @@\n-                            if (iss.get().state() != org.openjdk.skara.issuetracker.Issue.State.OPEN) {\n+                            if (!iss.get().isOpen()) {\n@@ -643,1 +643,8 @@\n-                                    progressBody.append(\" ⚠️ Issue is not open.\");\n+                                    if (iss.get().isFixed()) {\n+                                        progressBody.append(\"⚠️ \" + iss.get().id() + \" is already resolved. \" +\n+                                                \"Please consider using a Backport-style pull request. \" +\n+                                                \"You can set the PR title to `Backport <hash>` with the hash of the original fix or \" +\n+                                                \"refer to [Backports](https:\/\/wiki.openjdk.org\/display\/SKARA\/Backports)\");\n+                                    } else {\n+                                        progressBody.append(\" ⚠️ Issue is not open.\");\n+                                    }\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import org.openjdk.skara.json.JSON;\n@@ -410,2 +411,3 @@\n-            var issue1 = issues.createIssue(\"First\", List.of(\"Hello\"), Map.of());\n-            issue1.setState(Issue.State.RESOLVED);\n+            var issue1 = (TestIssue)issues.createIssue(\"First\", List.of(\"Hello\"), Map.of());\n+            issue1.setState(Issue.State.CLOSED);\n+            issue1.store().properties().put(\"resolution\", JSON.object().put(\"name\", JSON.of(\"Not an Issue\")));\n@@ -424,0 +426,35 @@\n+    @Test\n+    void resolvedIssue(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var integrator = credentials.getHostedRepository();\n+            var issues = credentials.getIssueProject();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addAuthor(author.forge().currentUser().id());\n+            var prBot = PullRequestBot.newBuilder().repo(integrator).censusRepo(censusBuilder.build()).issueProject(issues).build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"edit\", true);\n+            var issue1 = (TestIssue)issues.createIssue(\"First\", List.of(\"Hello\"), Map.of());\n+            issue1.setState(Issue.State.RESOLVED);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\",\n+                    issue1.id() + \": This is a pull request\");\n+\n+            \/\/ First check\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertTrue(pr.store().body().contains(issue1.id()));\n+            assertTrue(pr.store().body().contains(\"First\"));\n+            assertTrue(pr.store().body().contains(\"## Issue\\n\"));\n+            assertTrue(pr.store().body().contains(\"Please consider using a Backport-style pull request.\"));\n+        }\n+    }\n+\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/IssueTests.java","additions":39,"deletions":2,"binary":false,"changes":41,"status":"modified"}]}