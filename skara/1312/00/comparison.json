{"files":[{"patch":"@@ -131,5 +131,2 @@\n-        try {\n-            localRepo.mergeBase(targetHash(localRepo), sourceHead);\n-        } catch (IOException e) {\n-            throw new CommitFailure(\"The target and the source branches do not share common history - cannot merge them.\");\n-        }\n+        localRepo.mergeBaseOptional(targetHash(localRepo), sourceHead)\n+                .orElseThrow(() -> new CommitFailure(\"The target and the source branches do not share common history - cannot merge them.\"));\n@@ -222,1 +219,2 @@\n-            if (!localRepo.mergeBase(targetHash(localRepo), mergeParent).equals(mergeParent)) {\n+            var mergeBase = localRepo.mergeBaseOptional(targetHash(localRepo), mergeParent);\n+            if (mergeBase.isEmpty() || !mergeBase.get().equals(mergeParent)) {\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/PullRequestUtils.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -85,0 +85,13 @@\n+\n+    \/**\n+     * Finds the hash of the merge-base commit for the two given hashes. Returns\n+     * empty if the two hashes do not share any history.\n+     *\/\n+    default Optional<Hash> mergeBaseOptional(Hash first, Hash second) throws IOException {\n+        return Optional.of(mergeBase(first, second));\n+    }\n+\n+    \/**\n+     * Finds the hash of the merge base commit for the two given hashes. Throws\n+     * IOException if it can't be found.\n+     *\/\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/ReadOnlyRepository.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -922,1 +922,1 @@\n-    public Hash mergeBase(Hash first, Hash second) throws IOException {\n+    public Optional<Hash> mergeBaseOptional(Hash first, Hash second) throws IOException {\n@@ -924,1 +924,7 @@\n-            var res = await(p);\n+            var res = p.await();\n+            if (res.status() == 1 && res.stdout().size() == 0) {\n+                return Optional.empty();\n+            }\n+            if (res.status() != 0) {\n+                throw new IOException(\"Unexpected exit code: \" + res);\n+            }\n@@ -928,1 +934,1 @@\n-            return new Hash(res.stdout().get(0));\n+            return Optional.of(new Hash(res.stdout().get(0)));\n@@ -932,0 +938,6 @@\n+    @Override\n+    public Hash mergeBase(Hash first, Hash second) throws IOException {\n+        return mergeBaseOptional(first, second)\n+                .orElseThrow(() -> new IOException(\"Could not find merge-base between \" + first + \" and \" + second));\n+    }\n+\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/git\/GitRepository.java","additions":15,"deletions":3,"binary":false,"changes":18,"status":"modified"}]}