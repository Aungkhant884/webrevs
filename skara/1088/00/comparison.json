{"files":[{"patch":"@@ -288,0 +288,19 @@\n+        \/\/ Determine which branch(es) this tag belongs to\n+        var tagBranches = new ArrayList<String>();\n+        try {\n+            for (var branch : repository.branches()) {\n+                if (PreIntegrations.isPreintegrationBranch(branch.name())) {\n+                    continue;\n+                }\n+                var hash = localRepository.resolve(tag.tag()).orElseThrow();\n+                if (localRepository.isAncestor(hash, branch.hash())) {\n+                    tagBranches.add(branch.name());\n+                }\n+            }\n+            if (tagBranches.isEmpty()) {\n+                throw new RuntimeException(\"Cannot find any branch containing the tag \" + tag.tag().name());\n+            }\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+\n@@ -297,15 +316,11 @@\n-                var issue = optionalIssue.get();\n-\n-                \/\/ Determine which branch this tag belongs to\n-                String tagBranch = null;\n-                try {\n-                    for (var branch : repository.branches()) {\n-                        if (PreIntegrations.isPreintegrationBranch(branch.name())) {\n-                            continue;\n-                        }\n-                        var hash = localRepository.resolve(tag.tag()).orElseThrow();\n-                        if (localRepository.isAncestor(hash, branch.hash())) {\n-                            if (tagBranch == null) {\n-                                tagBranch = branch.name();\n-                            } else {\n-                                throw new RuntimeException(\"Tag \" + tag.tag().name() + \" found in both \" + tagBranch + \" and \" + branch.name());\n+                \/\/ The actual issue to be updated can change depending on the fix version\n+                for (var tagBranch : tagBranches) {\n+                    var issue = optionalIssue.get();\n+                    var requestedVersion = fixVersions != null ? fixVersions.getOrDefault(tagBranch, null) : null;\n+                    if (requestedVersion == null) {\n+                        try {\n+                            var conf = localRepository.lines(Path.of(\".jcheck\/conf\"), commit.hash());\n+                            if (conf.isPresent()) {\n+                                var parsed = JCheckConfiguration.parse(conf.get());\n+                                var version = parsed.general().version();\n+                                requestedVersion = version.orElse(null);\n@@ -313,0 +328,2 @@\n+                        } catch (IOException e) {\n+                            throw new RuntimeException(e);\n@@ -315,2 +332,2 @@\n-                    if (tagBranch == null) {\n-                        throw new RuntimeException(\"Cannot find any branch containing the tag \" + tag.tag().name());\n+                    if (requestedVersion == null) {\n+                        throw new RuntimeException(\"Failed to determine requested fixVersion for \" + issue.id());\n@@ -318,16 +335,7 @@\n-                } catch (IOException e) {\n-                    throw new UncheckedIOException(e);\n-                }\n-\n-                \/\/ The actual issue to be updated can change depending on the fix version\n-                var requestedVersion = fixVersions != null ? fixVersions.getOrDefault(tagBranch, null) : null;\n-                if (requestedVersion == null) {\n-                    try {\n-                        var conf = localRepository.lines(Path.of(\".jcheck\/conf\"), commit.hash());\n-                        if (conf.isPresent()) {\n-                            var parsed = JCheckConfiguration.parse(conf.get());\n-                            var version = parsed.general().version();\n-                            requestedVersion = version.orElse(null);\n-                        }\n-                    } catch (IOException e) {\n-                        throw new RuntimeException(e);\n+                    var fixVersion = JdkVersion.parse(requestedVersion).orElseThrow();\n+                    var existing = Backports.findIssue(issue, fixVersion);\n+                    if (existing.isEmpty()) {\n+                        log.severe(\"Cannot find a properly resolved issue for: \" + issue.id() + \" - will not update resolved in build\");\n+                        return;\n+                    } else {\n+                        issue = existing.get();\n@@ -335,12 +343,0 @@\n-                }\n-                if (requestedVersion == null) {\n-                    throw new RuntimeException(\"Failed to determine requested fixVersion for \" + issue.id());\n-                }\n-                var fixVersion = JdkVersion.parse(requestedVersion).orElseThrow();\n-                var existing = Backports.findIssue(issue, fixVersion);\n-                if (existing.isEmpty()) {\n-                    log.severe(\"Cannot find a properly resolved issue for: \" + issue.id() + \" - will not update resolved in build\");\n-                    return;\n-                } else {\n-                    issue = existing.get();\n-                }\n@@ -348,7 +344,8 @@\n-                \/\/ Check if the build name should be updated\n-                var oldBuild = issue.properties().getOrDefault(\"customfield_10006\", JSON.of());\n-                var newBuild = \"b\" + String.format(\"%02d\", tag.buildNum().get());\n-                if (BuildCompare.shouldReplace(newBuild, oldBuild.asString())) {\n-                    issue.setProperty(\"customfield_10006\", JSON.of(newBuild));\n-                } else {\n-                    log.info(\"Not replacing build \" + oldBuild.asString() + \" with \" + newBuild + \" for issue \" + issue.id());\n+                    \/\/ Check if the build name should be updated\n+                    var oldBuild = issue.properties().getOrDefault(\"customfield_10006\", JSON.of());\n+                    var newBuild = \"b\" + String.format(\"%02d\", tag.buildNum().get());\n+                    if (BuildCompare.shouldReplace(newBuild, oldBuild.asString())) {\n+                        issue.setProperty(\"customfield_10006\", JSON.of(newBuild));\n+                    } else {\n+                        log.info(\"Not replacing build \" + oldBuild.asString() + \" with \" + newBuild + \" for issue \" + issue.id());\n+                    }\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifier.java","additions":49,"deletions":52,"binary":false,"changes":101,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-                                                                                          .put(\"branches\", \"master\")\n+                                                                                          .put(\"branches\", \"master|other\")\n@@ -587,0 +587,85 @@\n+        }\n+    }\n+\n+    @Test\n+    void testIssueBuildAfterTagMultipleBranches(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+\n+            var repo = credentials.getHostedRepository();\n+            var repoFolder = tempFolder.path().resolve(\"repo\");\n+            var localRepo = CheckableRepository.init(repoFolder, repo.repositoryType());\n+            credentials.commitLock(localRepo);\n+            localRepo.pushAll(repo.url());\n+\n+            var issueProject = credentials.getIssueProject();\n+            var storageFolder = tempFolder.path().resolve(\"storage\");\n+            var jbsNotifierConfig = JSON.object().put(\"fixversions\", JSON.object()\n+                                                                         .put(\"master\", \"16\")\n+                                                                         .put(\"other\", \"16.0.2\"))\n+                                        .put(\"buildname\", \"team\");\n+            var notifyBot = testBotBuilder(repo, issueProject, storageFolder, jbsNotifierConfig).create(\"notify\", JSON.object());\n+\n+            \/\/ Initialize history\n+            var current = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(current, repo.url(), \"other\");\n+            localRepo.tag(current, \"jdk-16+9\", \"First tag\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(new Branch(repo.url().toString()), \"--tags\", false);\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ Create an issue and commit a fix\n+            var authorEmailAddress = issueProject.issueTracker().currentUser().username() + \"@openjdk.org\";\n+            var issue = issueProject.createIssue(\"This is an issue\", List.of(\"Indeed\"), Map.of(\"issuetype\", JSON.of(\"Enhancement\")));\n+            issue.setProperty(\"fixVersions\", JSON.of(\"16.0.2\"));\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, \"Another line\", issue.id() + \": Fix that issue\", \"Duke\", authorEmailAddress);\n+            localRepo.push(editHash, repo.url(), \"master\");\n+            localRepo.push(editHash, repo.url(), \"other\");\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ The changeset should be reflected in a comment in the issue and in a new backport\n+            var updatedIssue = issueProject.issue(issue.id()).orElseThrow();\n+            var backportIssue = updatedIssue.links().get(0).issue().orElseThrow();\n+\n+            var comments = updatedIssue.comments();\n+            assertEquals(1, comments.size());\n+            var comment = comments.get(0);\n+            assertTrue(comment.body().contains(editHash.abbreviate()));\n+\n+            var backportComments = backportIssue.comments();\n+            assertEquals(1, backportComments.size());\n+            var backportComment = backportComments.get(0);\n+            assertTrue(backportComment.body().contains(editHash.abbreviate()));\n+\n+            \/\/ As well as a fixVersion and a resolved in build\n+            assertEquals(Set.of(\"16.0.2\"), fixVersions(updatedIssue));\n+            assertEquals(\"team\", updatedIssue.properties().get(\"customfield_10006\").asString());\n+            assertEquals(Set.of(\"16\"), fixVersions(backportIssue));\n+            assertEquals(\"team\", backportIssue.properties().get(\"customfield_10006\").asString());\n+\n+            \/\/ The issue should be assigned and resolved\n+            assertEquals(RESOLVED, updatedIssue.state());\n+            assertEquals(List.of(issueProject.issueTracker().currentUser()), updatedIssue.assignees());\n+            assertEquals(RESOLVED, backportIssue.state());\n+            assertEquals(List.of(issueProject.issueTracker().currentUser()), backportIssue.assignees());\n+\n+            \/\/ Tag it\n+            localRepo.tag(editHash, \"jdk-16+110\", \"Second tag\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(new Branch(repo.url().toString()), \"--tags\", false);\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ The build should now be updated\n+            updatedIssue = issueProject.issue(issue.id()).orElseThrow();\n+            backportIssue = issueProject.issue(backportIssue.id()).orElseThrow();\n+            assertEquals(\"b110\", updatedIssue.properties().get(\"customfield_10006\").asString());\n+            assertEquals(\"b110\", backportIssue.properties().get(\"customfield_10006\").asString());\n+\n+            \/\/ Tag it again\n+            localRepo.tag(editHash, \"jdk-16+10\", \"Third tag\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(new Branch(repo.url().toString()), \"--tags\", false);\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ The build should now be updated\n+            updatedIssue = issueProject.issue(issue.id()).orElseThrow();\n+            backportIssue = issueProject.issue(backportIssue.id()).orElseThrow();\n+            assertEquals(\"b10\", updatedIssue.properties().get(\"customfield_10006\").asString());\n+            assertEquals(\"b10\", backportIssue.properties().get(\"customfield_10006\").asString());\n@@ -588,0 +673,10 @@\n+            \/\/ Tag it once again\n+            localRepo.tag(editHash, \"jdk-16+8\", \"Fourth tag\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(new Branch(repo.url().toString()), \"--tags\", false);\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ The build should now be updated\n+            updatedIssue = issueProject.issue(issue.id()).orElseThrow();\n+            backportIssue = issueProject.issue(backportIssue.id()).orElseThrow();\n+            assertEquals(\"b08\", updatedIssue.properties().get(\"customfield_10006\").asString());\n+            assertEquals(\"b08\", backportIssue.properties().get(\"customfield_10006\").asString());\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifierTests.java","additions":96,"deletions":1,"binary":false,"changes":97,"status":"modified"}]}