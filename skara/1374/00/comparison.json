{"files":[{"patch":"@@ -91,2 +91,11 @@\n-                repo = Repository.get(dir).orElseThrow(() -> {\n-                        return new RuntimeException(\"Repository in \" + dir + \" has vanished\");\n+                repo = Repository.get(dir).orElseGet(() -> {\n+                    log.info(\"The existing scratch directory has problem. Now recloning \" + from.name());\n+                    try {\n+                        Files.walk(dir)\n+                                .map(Path::toFile)\n+                                .sorted(Comparator.reverseOrder())\n+                                .forEach(File::delete);\n+                        return Repository.mirror(from.url(), dir);\n+                    } catch (IOException io) {\n+                        throw new RuntimeException(io);\n+                    }\n@@ -114,1 +123,0 @@\n-\n","filename":"bots\/mirror\/src\/main\/java\/org\/openjdk\/skara\/bots\/mirror\/MirrorBot.java","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -25,0 +25,2 @@\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n@@ -451,0 +453,41 @@\n+\n+    @Test\n+    void mirrorMasterBranchWithExistingCloneDirectory(TestInfo testInfo) throws IOException {\n+        try (var temp = new TemporaryDirectory()) {\n+            var host = TestHost.createNew(List.of(HostUser.create(0, \"duke\", \"J. Duke\")));\n+\n+            var fromDir = temp.path().resolve(\"from.git\");\n+            var fromLocalRepo = TestableRepository.init(fromDir, VCS.GIT);\n+            var fromHostedRepo = new TestHostedRepository(host, \"test\", fromLocalRepo);\n+\n+            var toDir = temp.path().resolve(\"to.git\");\n+            var toLocalRepo = TestableRepository.init(toDir, VCS.GIT);\n+            var gitConfig = toDir.resolve(\".git\").resolve(\"config\");\n+            Files.write(gitConfig, List.of(\"[receive]\", \"denyCurrentBranch = ignore\"),\n+                    StandardOpenOption.APPEND);\n+            var toHostedRepo = new TestHostedRepository(host, \"test-mirror\", toLocalRepo);\n+\n+            var newFile = fromDir.resolve(\"this-file-cannot-exist.txt\");\n+            Files.writeString(newFile, \"Hello world\\n\");\n+            fromLocalRepo.add(newFile);\n+            var newHash = fromLocalRepo.commit(\"An additional commit\", \"duke\", \"duke@openjdk.org\");\n+            var fromCommits = fromLocalRepo.commits().asList();\n+            assertEquals(1, fromCommits.size());\n+            assertEquals(newHash, fromCommits.get(0).hash());\n+\n+            var toCommits = toLocalRepo.commits().asList();\n+            assertEquals(0, toCommits.size());\n+\n+            var storage = temp.path().resolve(\"storage\");\n+            var sanitizedUrl =\n+                    URLEncoder.encode(toHostedRepo.webUrl().toString(), StandardCharsets.UTF_8);\n+            var dir_temporary = storage.resolve(sanitizedUrl);\n+            Files.createDirectories(dir_temporary);\n+            var bot = new MirrorBot(storage, fromHostedRepo, toHostedRepo);\n+            TestBotRunner.runPeriodicItems(bot);\n+\n+            toCommits = toLocalRepo.commits().asList();\n+            assertEquals(1, toCommits.size());\n+            assertEquals(newHash, toCommits.get(0).hash());\n+        }\n+    }\n","filename":"bots\/mirror\/src\/test\/java\/org\/openjdk\/skara\/bots\/mirror\/MirrorBotTests.java","additions":43,"deletions":0,"binary":false,"changes":43,"status":"modified"}]}