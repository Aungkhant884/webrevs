{"files":[{"patch":"@@ -43,0 +43,1 @@\n+    private Map<String, Map<String, JSONObject>> createFieldCache = new HashMap<>();\n@@ -71,0 +72,32 @@\n+    private Map<String, JSONObject> createFields(String issueType) {\n+        if (createFieldCache.containsKey(issueType)) {\n+            return createFieldCache.get(issueType);\n+        }\n+        var ret = new HashMap<String, JSONObject>();\n+        var fields = request.get(\"issue\/createmeta\/\" + projectName + \"\/issuetypes\/\" + issueType)\n+                            .onError(et -> et.statusCode() == 404 ? Optional.of((JSON.object().put(\"jira7\", true))) : Optional.empty())\n+                            .execute()\n+                            .asObject();\n+        if (fields.contains(\"jira7\")) {\n+            var createMeta = createMeta();\n+            fields = createMeta.get(\"projects\").stream()\n+                               .filter(p -> p.contains(\"name\"))\n+                               .filter(p -> p.get(\"name\").asString().equalsIgnoreCase(projectName))\n+                               .findAny().orElseThrow()\n+                               .get(\"issuetypes\").stream()\n+                               .filter(i -> i.get(\"id\").asString().equals(issueType))\n+                               .findAny().orElseThrow()\n+                               .get(\"fields\")\n+                               .asObject();\n+            for (var field : fields.fields()) {\n+                ret.put(field.name(), field.value().asObject());\n+            }\n+        } else {\n+            for (var field : fields.get(\"values\").asArray()) {\n+                ret.put(field.get(\"fieldId\").asString(), field.asObject());\n+            }\n+        }\n+        createFieldCache.put(issueType, ret);\n+        return ret;\n+    }\n+\n@@ -262,11 +295,1 @@\n-        var createMeta = createMeta();\n-        var fields = createMeta.get(\"projects\").stream()\n-                               .filter(p -> p.contains(\"name\"))\n-                               .filter(p -> p.get(\"name\").asString().equalsIgnoreCase(projectName))\n-                               .findAny().orElseThrow()\n-                               .get(\"issuetypes\").stream()\n-                               .filter(i -> i.get(\"id\").asString().equals(allProperties.get(\"issuetype\").get(\"id\").asString()))\n-                               .findAny().orElseThrow()\n-                               .get(\"fields\")\n-                               .asObject();\n-\n+        var fields = createFields(allProperties.get(\"issuetype\").get(\"id\").asString());\n@@ -307,14 +330,3 @@\n-    private boolean isInitialField(String issueType, String name, JSONValue value) {\n-        var createMeta = createMeta();\n-        var fields = createMeta.get(\"projects\").stream()\n-                               .filter(p -> p.contains(\"name\"))\n-                               .filter(p -> p.get(\"name\").asString().equalsIgnoreCase(projectName))\n-                               .findAny().orElseThrow()\n-                               .get(\"issuetypes\").stream()\n-                               .filter(i -> i.get(\"id\").asString().equals(issueType))\n-                               .findAny().orElseThrow()\n-                               .get(\"fields\").fields().stream()\n-                               .map(JSONObject.Field::name)\n-                               .collect(Collectors.toSet());\n-\n-        return fields.contains(name);\n+    private boolean isInitialField(String issueType, String name) {\n+        var fields = createFields(issueType);\n+        return fields.containsKey(name);\n@@ -350,1 +362,1 @@\n-                       .filter(entry -> isInitialField(issueType, entry.getKey(), entry.getValue()))\n+                       .filter(entry -> isInitialField(issueType, entry.getKey()))\n@@ -370,1 +382,1 @@\n-                       .filter(entry -> !isInitialField(issueType, entry.getKey(), entry.getValue()))\n+                       .filter(entry -> !isInitialField(issueType, entry.getKey()))\n","filename":"issuetracker\/src\/main\/java\/org\/openjdk\/skara\/issuetracker\/jira\/JiraProject.java","additions":39,"deletions":27,"binary":false,"changes":66,"status":"modified"}]}