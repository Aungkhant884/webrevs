{"files":[{"patch":"@@ -35,1 +35,0 @@\n-import java.nio.charset.StandardCharsets;\n@@ -242,0 +241,4 @@\n+    private String mboxFile() {\n+        return bot.codeRepo().name() + \"\/\" + pr.id() + \".mbox\";\n+    }\n+\n@@ -245,2 +248,0 @@\n-        var archiveRepo = materializeArchive(path);\n-        var mboxBasePath = path.resolve(bot.codeRepo().name());\n@@ -249,5 +250,3 @@\n-        try {\n-            var archiveContents = Files.readString(mboxBasePath.resolve(pr.id() + \".mbox\"), StandardCharsets.UTF_8);\n-            sentMails.addAll(Mbox.splitMbox(archiveContents, bot.emailAddress()));\n-        } catch (IOException ignored) {\n-        }\n+        \/\/ Load in already sent emails from the archive, if there are any.\n+        var archiveContents = bot.archiveRepo().fileContents(mboxFile(), bot.archiveRef());\n+        archiveContents.ifPresent(s -> sentMails.addAll(Mbox.splitMbox(s, bot.emailAddress())));\n@@ -385,1 +384,2 @@\n-            var mbox = MailingListServerFactory.createMboxFileServer(mboxBasePath);\n+            var newArchivedContents = new StringBuilder();\n+            archiveContents.ifPresent(newArchivedContents::append);\n@@ -390,1 +390,1 @@\n-                mbox.post(forArchiving);\n+                newArchivedContents.append(Mbox.fromMail(forArchiving));\n@@ -392,1 +392,3 @@\n-            pushMbox(archiveRepo, \"Adding comments for PR \" + bot.codeRepo().name() + \"\/\" + pr.id());\n+            bot.archiveRepo().writeFileContents(mboxFile(), newArchivedContents.toString(), new Branch(bot.archiveRef()),\n+                    \"Adding comments for PR \" + bot.codeRepo().name() + \"\/\" + pr.id(),\n+                    bot.emailAddress().fullName().orElseThrow(), bot.emailAddress().address());\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/ArchiveWorkItem.java","additions":13,"deletions":11,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -136,0 +136,4 @@\n+    @Override\n+    public void writeFileContents(String filename, String content, Branch branch, String message, String authorName, String authorEmail) {\n+    }\n+\n","filename":"bots\/tester\/src\/test\/java\/org\/openjdk\/skara\/bots\/tester\/InMemoryHostedRepository.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -90,0 +90,12 @@\n+\n+    \/**\n+     * Writes new contents to a file in the repo by creating a new commit.\n+     *\n+     * @param filename    Name of file inside repository to write to\n+     * @param content     New file content to write, always replacing existing content\n+     * @param branch      Branch to add commit on top of\n+     * @param message     Commit message\n+     * @param authorName  Name of author and committer for commit\n+     * @param authorEmail Email of author and committer for commit\n+     *\/\n+    void writeFileContents(String filename, String content, Branch branch, String message, String authorName, String authorEmail);\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/HostedRepository.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -276,1 +276,1 @@\n-        } catch (IOException e) {\n+        } catch (IOException | UncheckedRestException e) {\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubHost.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,0 +25,2 @@\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n@@ -66,5 +68,0 @@\n-                \"Accept\", \"application\/vnd.github.machine-man-preview+json\",\n-                \"Accept\", \"application\/vnd.github.antiope-preview+json\",\n-                \"Accept\", \"application\/vnd.github.shadow-cat-preview+json\",\n-                \"Accept\", \"application\/vnd.github.comfort-fade-preview+json\",\n-                \"Accept\", \"application\/vnd.github.mockingbird-preview+json\",\n@@ -266,4 +263,35 @@\n-        var content = request.get(\"contents\/\" + filename)\n-                .param(\"ref\", ref)\n-                .onError(r -> r.statusCode() == 404 && JSON.parse(r.body()).get(\"message\").asString().equals(\"Not Found\")\n-                        ? Optional.of(JSON.object().put(\"NOT_FOUND\", true)) : Optional.empty())\n+        \/\/ Get file contents using raw format. This allows us to get files of\n+        \/\/ size up to 100MB (up from 1MB if getting in object from).\n+        try {\n+            var content = request.get(\"contents\/\" + filename)\n+                    .param(\"ref\", ref)\n+                    .header(\"Accept\", \"application\/vnd.github.raw+json\")\n+                    .executeUnparsed();\n+            return Optional.of(content);\n+        } catch (UncheckedRestException e) {\n+            \/\/ The onError handler is not used with executeUnparsed, so have to\n+            \/\/ resort to catching exception for 404 handling.\n+            if (e.getStatusCode() == 404) {\n+                return Optional.empty();\n+            } else {\n+                throw e;\n+            }\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void writeFileContents(String filename, String content, Branch branch, String message, String authorName, String authorEmail) {\n+        var body = JSON.object()\n+                .put(\"message\", message)\n+                .put(\"branch\", branch.name())\n+                .put(\"committer\", JSON.object()\n+                        .put(\"name\", authorName)\n+                        .put(\"email\", authorEmail))\n+                .put(\"content\", new String(Base64.getEncoder().encode(content.getBytes(StandardCharsets.UTF_8)), StandardCharsets.UTF_8));\n+\n+        \/\/ If the file exists, we have to supply the current sha with the update request.\n+        var curentFileData = request.get(\"contents\/\" + filename)\n+                .param(\"ref\", branch.name())\n+                .onError(r -> r.statusCode() == 404 ? Optional.of(JSON.object().put(\"NOT_FOUND\", true)) : Optional.empty())\n@@ -271,2 +299,2 @@\n-        if (content.contains(\"NOT_FOUND\")) {\n-            return Optional.empty();\n+        if (curentFileData.contains(\"sha\")) {\n+            body.put(\"sha\", curentFileData.get(\"sha\").asString());\n@@ -274,4 +302,4 @@\n-        \/\/ Content may contain newline characters\n-        return Optional.of(content.asObject().get(\"content\").asString().lines()\n-                .map(line -> new String(Base64.getDecoder().decode(line), StandardCharsets.UTF_8))\n-                .collect(Collectors.joining()));\n+\n+        request.put(\"contents\/\" + filename)\n+                .body(body)\n+                .execute();\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubRepository.java","additions":43,"deletions":15,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -316,0 +316,25 @@\n+    @Override\n+    public void writeFileContents(String filename, String content, Branch branch, String message, String authorName, String authorEmail) {\n+        var encodedFileName = URLEncoder.encode(filename, StandardCharsets.UTF_8);\n+        var body = JSON.object()\n+                .put(\"commit_message\", message)\n+                .put(\"branch\", branch.name())\n+                .put(\"author_name\", authorName)\n+                .put(\"author_email\", authorEmail)\n+                .put(\"encoding\", \"base64\")\n+                .put(\"content\", new String(Base64.getEncoder().encode(content.getBytes(StandardCharsets.UTF_8)), StandardCharsets.UTF_8));\n+        request.put(\"repository\/files\/\" + encodedFileName)\n+                .body(body)\n+                .onError(response -> {\n+                    \/\/ Gitlab requires POST for creating new files and PUT for updating existing.\n+                    \/\/ Retry with POST if we get 400 response.\n+                    if (response.statusCode() == 400) {\n+                        return Optional.of(request.post(\"repository\/files\/\" + encodedFileName)\n+                                .body(body)\n+                                .execute());\n+                    }\n+                    return Optional.empty();\n+                })\n+                .execute();\n+    }\n+\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabRepository.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import java.util.Properties;\n@@ -33,0 +34,1 @@\n+import org.openjdk.skara.vcs.Branch;\n@@ -52,0 +54,1 @@\n+    private Properties settings;\n@@ -56,1 +59,1 @@\n-        var settings = ManualTestSettings.loadManualTestSettings();\n+        settings = ManualTestSettings.loadManualTestSettings();\n@@ -163,0 +166,48 @@\n+\n+    @Test\n+    void fileContentsNonExisting() {\n+        var gitHubRepo = githubHost.repository(settings.getProperty(\"github.repository\")).orElseThrow();\n+        var branch = new Branch(settings.getProperty(\"github.repository.branch\"));\n+        var fileName = \"testfile-that-does-not-exist.txt\";\n+        var returnedContents = gitHubRepo.fileContents(fileName, branch.name());\n+        assertTrue(returnedContents.isEmpty());\n+    }\n+\n+    @Test\n+    void writeFileContents() {\n+        var gitHubRepo = githubHost.repository(settings.getProperty(\"github.repository\")).orElseThrow();\n+        var branch = new Branch(settings.getProperty(\"github.repository.branch\"));\n+\n+        var fileName = \"testfile.txt\";\n+\n+        \/\/ Create new file\n+        {\n+            var fileContent = \"File content\";\n+            gitHubRepo.writeFileContents(fileName, fileContent, branch,\n+                    \"First commit message\", \"Duke\", \"duke@openjdk.org\");\n+            var returnedContents = gitHubRepo.fileContents(fileName, branch.name());\n+            assertEquals(fileContent, returnedContents.orElseThrow());\n+        }\n+\n+        \/\/ Update file\n+        {\n+            var fileContent = \"New file content\";\n+            gitHubRepo.writeFileContents(fileName, fileContent, branch,\n+                    \"Second commit message\", \"Duke\", \"duke@openjdk.org\");\n+            var returnedContents = gitHubRepo.fileContents(fileName, branch.name());\n+            assertEquals(fileContent, returnedContents.orElseThrow());\n+        }\n+\n+        \/\/ Make the file huge\n+        {\n+            var fileContent = \"a\".repeat(1024 * 1024 * 10);\n+            gitHubRepo.writeFileContents(fileName, fileContent, branch,\n+                    \"Third commit message\", \"Duke\", \"duke@openjdk.org\");\n+            var returnedContents = gitHubRepo.fileContents(fileName, branch.name());\n+            assertTrue(returnedContents.isPresent());\n+            assertEquals(fileContent.length(), returnedContents.get().length());\n+            assertTrue(fileContent.equals(returnedContents.get()),\n+                    \"Diff for huge file contents, printing first 50 chars of each '\"\n+                    + fileContent.substring(0, 50) + \"' '\" + returnedContents.get().substring(0, 50) + \"'\");\n+        }\n+    }\n","filename":"forge\/src\/test\/java\/org\/openjdk\/skara\/forge\/github\/GitHubRestApiTests.java","additions":52,"deletions":1,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import org.openjdk.skara.vcs.Branch;\n@@ -132,0 +133,57 @@\n+\n+    @Test\n+    void fileContentsNonExisting() throws IOException {\n+        var settings = ManualTestSettings.loadManualTestSettings();\n+        var username = settings.getProperty(\"gitlab.user\");\n+        var token = settings.getProperty(\"gitlab.pat\");\n+        var credential = new Credential(username, token);\n+        var uri = URIBuilder.base(settings.getProperty(\"gitlab.uri\")).build();\n+        var gitLabHost = new GitLabHost(\"gitlab\", uri, false, credential, Set.of());\n+        var gitLabRepo = gitLabHost.repository(settings.getProperty(\"gitlab.repository\")).orElseThrow();\n+        var branch = new Branch(settings.getProperty(\"gitlab.repository.branch\"));\n+\n+        var fileName = \"testfile-that-does-not-exist.txt\";\n+        var returnedContents = gitLabRepo.fileContents(fileName, branch.name());\n+        assertTrue(returnedContents.isEmpty());\n+    }\n+\n+    @Test\n+    void writeFileContents() throws IOException {\n+        var settings = ManualTestSettings.loadManualTestSettings();\n+        var username = settings.getProperty(\"gitlab.user\");\n+        var token = settings.getProperty(\"gitlab.pat\");\n+        var credential = new Credential(username, token);\n+        var uri = URIBuilder.base(settings.getProperty(\"gitlab.uri\")).build();\n+        var gitLabHost = new GitLabHost(\"gitlab\", uri, false, credential, Set.of());\n+        var gitLabRepo = gitLabHost.repository(settings.getProperty(\"gitlab.repository\")).orElseThrow();\n+        var branch = new Branch(settings.getProperty(\"gitlab.repository.branch\"));\n+\n+        var fileName = \"testfile.txt\";\n+\n+        \/\/ Create new file\n+        {\n+            var fileContent = \"File content\";\n+            gitLabRepo.writeFileContents(fileName, fileContent, branch,\n+                    \"First commit message\", \"Duke\", \"duke@openjdk.org\");\n+            var returnedContents = gitLabRepo.fileContents(fileName, branch.name());\n+            assertEquals(fileContent, returnedContents.orElseThrow());\n+        }\n+\n+        \/\/ Update file\n+        {\n+            var fileContent = \"New file content\";\n+            gitLabRepo.writeFileContents(fileName, fileContent, branch,\n+                    \"Second commit message\", \"Duke\", \"duke@openjdk.org\");\n+            var returnedContents = gitLabRepo.fileContents(fileName, branch.name());\n+            assertEquals(fileContent, returnedContents.orElseThrow());\n+        }\n+\n+        \/\/ Make the file huge\n+        {\n+            var fileContent = \"a\".repeat(1024 * 1024 * 10);\n+            gitLabRepo.writeFileContents(fileName, fileContent, branch,\n+                    \"Third commit message\", \"Duke\", \"duke@openjdk.org\");\n+            var returnedContents = gitLabRepo.fileContents(fileName, branch.name());\n+            assertEquals(fileContent, returnedContents.orElseThrow());\n+        }\n+    }\n","filename":"forge\/src\/test\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabRestApiTest.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -520,1 +520,1 @@\n-            throw new IOException(\"Bad response: \" + response.statusCode());\n+            throw new UncheckedRestException(\"Bad response: \" + response.statusCode(), response.statusCode());\n","filename":"network\/src\/main\/java\/org\/openjdk\/skara\/network\/RestRequest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,0 +25,3 @@\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.StandardOpenOption;\n@@ -30,1 +33,0 @@\n-import org.openjdk.skara.network.UncheckedRestException;\n@@ -202,2 +204,2 @@\n-            var lines = localRepository.lines(Path.of(filename), localRepository.resolve(ref).orElseThrow());\n-            return lines.map(content -> String.join(\"\\n\", content));\n+            var bytes = localRepository.show(Path.of(filename), localRepository.resolve(ref).orElseThrow());\n+            return bytes.map(b -> new String(b, StandardCharsets.UTF_8));\n@@ -211,0 +213,17 @@\n+    @Override\n+    public void writeFileContents(String filename, String content, Branch branch, String message, String authorName, String authorEmail) {\n+        try {\n+            localRepository.checkout(branch);\n+            Path absPath = localRepository.root().resolve(filename);\n+            Files.createDirectories(absPath.getParent());\n+            Files.writeString(absPath, content, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);\n+            localRepository.add(absPath);\n+            var hash = localRepository.commit(message, authorName, authorEmail);\n+            \/\/ Don't leave the repository having a branch checked out as that would\n+            \/\/ prevent pushing to that branch.\n+            localRepository.checkout(hash);\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestHostedRepository.java","additions":22,"deletions":3,"binary":false,"changes":25,"status":"modified"}]}