{"files":[{"patch":"@@ -26,0 +26,1 @@\n+\n@@ -29,1 +30,0 @@\n-import org.openjdk.skara.network.UncheckedRestException;\n@@ -44,10 +44,3 @@\n-        String confFile;\n-        try {\n-            confFile = pr.repository().fileContents(\".jcheck\/conf\", pr.headHash().hex());\n-        } catch (UncheckedRestException e) {\n-            if (e.getStatusCode() == 404) {\n-                confFile = pr.repository().fileContents(\".jcheck\/conf\", pr.targetRef());\n-            } else {\n-                throw e;\n-            }\n-        }\n+        var confFile = pr.repository().fileContents(\".jcheck\/conf\", pr.headHash().hex())\n+                .orElse(pr.repository().fileContents(\".jcheck\/conf\", pr.targetRef())\n+                        .orElseThrow(() -> new RuntimeException(\"Could not find .jcheck\/conf in neither src or target of PR \" + pr)));\n","filename":"bots\/common\/src\/main\/java\/org\/openjdk\/skara\/bots\/common\/BotUtils.java","additions":4,"deletions":11,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -395,1 +395,2 @@\n-                    var contents = pr.repository().fileContents(reviewComment.path(), reviewComment.hash().get().hex()).lines().collect(Collectors.toList());\n+                    var contents = pr.repository().fileContents(reviewComment.path(), reviewComment.hash().get().hex())\n+                            .orElseThrow().lines().collect(Collectors.toList());\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/ArchiveMessages.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -79,1 +79,2 @@\n-        var confFile = remoteRepo.fileContents(\".jcheck\/conf\", ref);\n+        var confFile = remoteRepo.fileContents(\".jcheck\/conf\", ref)\n+                .orElseThrow(() -> new RuntimeException(\"Could not find .jcheck\/conf on ref \" + ref + \" in repo \" + remoteRepo.name()));\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/CensusInstance.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -55,1 +55,3 @@\n-            confOverride = jcheckRepo.fileContents(jcheckName, jcheckRef).lines().collect(Collectors.toList());\n+            confOverride = jcheckRepo.fileContents(jcheckName, jcheckRef).orElseThrow(\n+                    () -> new RuntimeException(\"Could not find \" + jcheckName + \" on ref \" + jcheckRef + \" in repo \" + jcheckRepo.name())\n+            ).lines().collect(Collectors.toList());\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckablePullRequest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -72,9 +72,1 @@\n-        Optional<List<String>> conf = Optional.empty();\n-        try {\n-            conf = Optional.of(Arrays.stream(remoteRepo.fileContents(name, ref).split(\"\\n\")).toList());\n-        } catch (UncheckedRestException e) {\n-            if (e.getStatusCode() != 404) {\n-                throw e;\n-            }\n-        }\n-        return conf.map(JCheckConfiguration::parse);\n+        return remoteRepo.fileContents(name, ref).map(contents -> JCheckConfiguration.parse(Arrays.stream(contents.split(\"\\n\")).toList()));\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/LimitedCensusInstance.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2383,1 +2383,0 @@\n-            \/\/ Check the status (should become ready immediately as reviewercount is overridden to 0)\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CheckTests.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -101,1 +101,3 @@\n-                var jcheckConf = repo.fileContents(\".jcheck\/conf\", Branch.defaultFor(VCS.GIT).name());\n+                var jcheckConf = repo.fileContents(\".jcheck\/conf\", Branch.defaultFor(VCS.GIT).name())\n+                        .orElseThrow(() -> new RuntimeException(\"Could not find .jcheck\/conf on ref \"\n+                                + Branch.defaultFor(VCS.GIT).name() + \" in repo \" + repo.name()));\n","filename":"bots\/tester\/src\/main\/java\/org\/openjdk\/skara\/bots\/tester\/TestBot.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -132,2 +132,2 @@\n-    public String fileContents(String filename, String ref) {\n-        return null;\n+    public Optional<String> fileContents(String filename, String ref) {\n+        return Optional.empty();\n","filename":"bots\/tester\/src\/test\/java\/org\/openjdk\/skara\/bots\/tester\/InMemoryHostedRepository.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -230,1 +230,2 @@\n-        var contributorsData = repository.fileContents(\"contributors.xml\", ref);\n+        var contributorsData = repository.fileContents(\"contributors.xml\", ref)\n+                .orElseThrow(() -> new RuntimeException(\"Could not find contributors.xml on ref \" + ref + \" in repo \" + repository.name()));\n@@ -232,1 +233,2 @@\n-        var namespaceData = repository.fileContents(\"namespaces\/\" + name + \".xml\", ref);\n+        var namespaceData = repository.fileContents(\"namespaces\/\" + name + \".xml\", ref)\n+                .orElseThrow(() -> new RuntimeException(\"Could not find namespaces\/\" + name + \".xml on ref \" + ref + \" in repo \" + repository.name()));\n","filename":"census\/src\/main\/java\/org\/openjdk\/skara\/census\/Census.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -111,1 +111,2 @@\n-        var rules = skaraRemoteRepo.fileContents(\"config\/mailinglist\/rules\/jdk.json\", Branch.defaultFor(VCS.GIT).name());\n+        var rules = skaraRemoteRepo\n+                .fileContents(\"config\/mailinglist\/rules\/jdk.json\", Branch.defaultFor(VCS.GIT).name()).orElseThrow();\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/pr\/GitPrCreate.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -85,1 +85,5 @@\n-    String fileContents(String filename, String ref);\n+\n+    \/**\n+     * Returns contents of the file, if the file does not exist, returns Optional.empty().\n+     *\/\n+    Optional<String> fileContents(String filename, String ref);\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/HostedRepository.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -49,1 +49,2 @@\n-        var contents = repository.fileContents(filename, ref);\n+        var contents = repository.fileContents(filename, ref)\n+                .orElseThrow(() -> new RuntimeException(\"Could not find \" + filename + \" on ref \" + ref + \" in repo \" + repository.name()));\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/LabelConfigurationHostedRepository.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -112,1 +112,1 @@\n-        var jsonText = repository.fileContents(filename, ref);\n+        var jsonText = repository.fileContents(filename, ref).orElseThrow();\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/LabelConfigurationJson.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -264,4 +264,9 @@\n-    public String fileContents(String filename, String ref) {\n-        var conf = request.get(\"contents\/\" + filename)\n-                          .param(\"ref\", ref)\n-                          .execute().asObject();\n+    public Optional<String> fileContents(String filename, String ref) {\n+        var content = request.get(\"contents\/\" + filename)\n+                .param(\"ref\", ref)\n+                .onError(r -> r.statusCode() == 404 && JSON.parse(r.body()).get(\"message\").asString().equals(\"Not Found\")\n+                        ? Optional.of(JSON.object().put(\"NOT_FOUND\", true)) : Optional.empty())\n+                .execute();\n+        if (content.contains(\"NOT_FOUND\")) {\n+            return Optional.empty();\n+        }\n@@ -269,3 +274,3 @@\n-        return conf.get(\"content\").asString().lines()\n-                   .map(line -> new String(Base64.getDecoder().decode(line), StandardCharsets.UTF_8))\n-                   .collect(Collectors.joining());\n+        return Optional.of(content.asObject().get(\"content\").asString().lines()\n+                .map(line -> new String(Base64.getDecoder().decode(line), StandardCharsets.UTF_8))\n+                .collect(Collectors.joining()));\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubRepository.java","additions":12,"deletions":7,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -289,15 +289,25 @@\n-    public String fileContents(String filename, String ref) {\n-        var confName = URLEncoder.encode(filename, StandardCharsets.UTF_8);\n-        var conf = request.get(\"repository\/files\/\" + confName)\n-                          .param(\"ref\", ref)\n-                          .onError(response -> {\n-                              log.warning(\"First time request returned bad status: \" + response.statusCode());\n-                              log.info(\"First time response body: \" + response.body());\n-                              \/\/ Retry once with additional escaping of the path fragment\n-                              var escapedConfName = URLEncoder.encode(confName, StandardCharsets.UTF_8);\n-                              return Optional.of(request.get(\"repository\/files\/\" + escapedConfName)\n-                                            .param(\"ref\", ref).execute());\n-                          })\n-                          .execute();\n-        var content = Base64.getDecoder().decode(conf.get(\"content\").asString());\n-        return new String(content, StandardCharsets.UTF_8);\n+    public Optional<String> fileContents(String filename, String ref) {\n+        var encodedFileName = URLEncoder.encode(filename, StandardCharsets.UTF_8);\n+        var content = request.get(\"repository\/files\/\" + encodedFileName)\n+                .param(\"ref\", ref)\n+                .onError(response -> {\n+                    \/\/ Retry once with additional escaping of the path fragment\n+                    \/\/ Only retry when the error is exactly \"File Not Found\"\n+                    if (response.statusCode() == 404 && JSON.parse(response.body()).get(\"message\").asString().endsWith(\"File Not Found\")) {\n+                        log.warning(\"First time request returned bad status: \" + response.statusCode());\n+                        log.info(\"First time response body: \" + response.body());\n+                        var doubleEncodedFileName = URLEncoder.encode(encodedFileName, StandardCharsets.UTF_8);\n+                        return Optional.of(request.get(\"repository\/files\/\" + doubleEncodedFileName)\n+                                .param(\"ref\", ref)\n+                                .onError(r -> r.statusCode() == 404 && JSON.parse(r.body()).get(\"message\").asString().endsWith(\"File Not Found\") ?\n+                                        Optional.of(JSON.object().put(\"NOT_FOUND\", true)) : Optional.empty())\n+                                .execute());\n+                    }\n+                    return Optional.empty();\n+                })\n+                .execute();\n+        if (content.contains(\"NOT_FOUND\")) {\n+            return Optional.empty();\n+        }\n+        var decodedContent = Base64.getDecoder().decode(content.get(\"content\").asString());\n+        return Optional.of(new String(decodedContent, StandardCharsets.UTF_8));\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabRepository.java","additions":25,"deletions":15,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -19,0 +19,1 @@\n+\n","filename":"network\/src\/main\/java\/org\/openjdk\/skara\/network\/UncheckedRestException.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -200,1 +200,1 @@\n-    public String fileContents(String filename, String ref) {\n+    public Optional<String> fileContents(String filename, String ref) {\n@@ -203,1 +203,1 @@\n-            return String.join(\"\\n\", lines.orElseThrow());\n+            return lines.map(content -> String.join(\"\\n\", content));\n@@ -207,2 +207,1 @@\n-            \/\/ Make this method behave more like other remote repo implementations\n-            throw new UncheckedRestException(\"Can't find file \" + filename, 404);\n+            return Optional.empty();\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestHostedRepository.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"}]}