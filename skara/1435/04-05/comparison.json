{"files":[{"patch":"@@ -44,3 +44,3 @@\n-        String confFile;\n-        confFile = pr.repository().fileContents(\".jcheck\/conf\", pr.headHash().hex())\n-                .orElse(pr.repository().fileContents(\".jcheck\/conf\", pr.targetRef()).orElseThrow());\n+        var confFile = pr.repository().fileContents(\".jcheck\/conf\", pr.headHash().hex())\n+                .orElse(pr.repository().fileContents(\".jcheck\/conf\", pr.targetRef())\n+                        .orElseThrow(() -> new RuntimeException(\"Could not find .jcheck\/conf in neither src or target of PR \" + pr)));\n","filename":"bots\/common\/src\/main\/java\/org\/openjdk\/skara\/bots\/common\/BotUtils.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -79,1 +79,2 @@\n-        var confFile = remoteRepo.fileContents(\".jcheck\/conf\", ref).orElseThrow();\n+        var confFile = remoteRepo.fileContents(\".jcheck\/conf\", ref)\n+                .orElseThrow(() -> new RuntimeException(\"Could not find .jcheck\/conf on ref \" + ref + \" in repo \" + remoteRepo.name()));\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/CensusInstance.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -55,1 +55,3 @@\n-            confOverride = jcheckRepo.fileContents(jcheckName, jcheckRef).orElseThrow().lines().collect(Collectors.toList());\n+            confOverride = jcheckRepo.fileContents(jcheckName, jcheckRef).orElseThrow(\n+                    () -> new RuntimeException(\"Could not find \" + jcheckName + \" on ref \" + jcheckRef + \" in repo \" + jcheckRepo.name())\n+            ).lines().collect(Collectors.toList());\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckablePullRequest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -72,6 +72,1 @@\n-        Optional<List<String>> conf = Optional.empty();\n-        var contents = remoteRepo.fileContents(name, ref);\n-        if (contents.isPresent()) {\n-            conf = Optional.of(Arrays.stream(contents.get().split(\"\\n\")).toList());\n-        }\n-        return conf.map(JCheckConfiguration::parse);\n+        return remoteRepo.fileContents(name, ref).map(contents -> JCheckConfiguration.parse(Arrays.stream(contents.split(\"\\n\")).toList()));\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/LimitedCensusInstance.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -101,1 +101,3 @@\n-                var jcheckConf = repo.fileContents(\".jcheck\/conf\", Branch.defaultFor(VCS.GIT).name()).orElseThrow();\n+                var jcheckConf = repo.fileContents(\".jcheck\/conf\", Branch.defaultFor(VCS.GIT).name())\n+                        .orElseThrow(() -> new RuntimeException(\"Could not find .jcheck\/conf on ref \"\n+                                + Branch.defaultFor(VCS.GIT).name() + \" in repo \" + repo.name()));\n","filename":"bots\/tester\/src\/main\/java\/org\/openjdk\/skara\/bots\/tester\/TestBot.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -230,1 +230,2 @@\n-        var contributorsData = repository.fileContents(\"contributors.xml\", ref).orElseThrow();\n+        var contributorsData = repository.fileContents(\"contributors.xml\", ref)\n+                .orElseThrow(() -> new RuntimeException(\"Could not find contributors.xml on ref \" + ref + \" in repo \" + repository.name()));\n@@ -232,1 +233,2 @@\n-        var namespaceData = repository.fileContents(\"namespaces\/\" + name + \".xml\", ref).orElseThrow();\n+        var namespaceData = repository.fileContents(\"namespaces\/\" + name + \".xml\", ref)\n+                .orElseThrow(() -> new RuntimeException(\"Could not find namespaces\/\" + name + \".xml on ref \" + ref + \" in repo \" + repository.name()));\n","filename":"census\/src\/main\/java\/org\/openjdk\/skara\/census\/Census.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -49,1 +49,2 @@\n-        var contents = repository.fileContents(filename, ref).orElseThrow();\n+        var contents = repository.fileContents(filename, ref)\n+                .orElseThrow(() -> new RuntimeException(\"Could not find \" + filename + \" on ref \" + ref + \" in repo \" + repository.name()));\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/LabelConfigurationHostedRepository.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -265,11 +265,7 @@\n-        JSONValue content;\n-        try {\n-            content = request.get(\"contents\/\" + filename)\n-                    .param(\"ref\", ref)\n-                    .execute();\n-        } catch (UncheckedRestException e) {\n-            \/\/ returns Optional.empty() on 404 File Not Found\n-            if (e.getStatusCode() == 404 && e.getBody().contains(\"Not Found\")) {\n-                return Optional.empty();\n-            }\n-            throw e;\n+        var content = request.get(\"contents\/\" + filename)\n+                .param(\"ref\", ref)\n+                .onError(r -> r.statusCode() == 404 && JSON.parse(r.body()).get(\"message\").asString().equals(\"Not Found\")\n+                        ? Optional.of(JSON.object().put(\"NOT_FOUND\", true)) : Optional.empty())\n+                .execute();\n+        if (content.contains(\"NOT_FOUND\")) {\n+            return Optional.empty();\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubRepository.java","additions":7,"deletions":11,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -291,23 +291,20 @@\n-        JSONValue content;\n-        try {\n-            content = request.get(\"repository\/files\/\" + encodedFileName)\n-                    .param(\"ref\", ref)\n-                    .onError(response -> {\n-                        \/\/ Retry once with additional escaping of the path fragment\n-                        \/\/ Only retry when the error is exactly \"File Not Found\"\n-                        if (response.statusCode() == 404 && response.body().contains(\"File Not Found\")) {\n-                            log.warning(\"First time request returned bad status: \" + response.statusCode());\n-                            log.info(\"First time response body: \" + response.body());\n-                            var doubleEncodedFileName = URLEncoder.encode(encodedFileName, StandardCharsets.UTF_8);\n-                            return Optional.of(request.get(\"repository\/files\/\" + doubleEncodedFileName)\n-                                    .param(\"ref\", ref).execute());\n-                        }\n-                        return Optional.empty();\n-                    })\n-                    .execute();\n-        } catch (UncheckedRestException e) {\n-            \/\/ After retry, if the error is still 404 File Not Found, return Optional.empty().\n-            if (e.getStatusCode() == 404 && e.getBody().contains(\"File Not Found\")) {\n-                return Optional.empty();\n-            }\n-            throw e;\n+        var content = request.get(\"repository\/files\/\" + encodedFileName)\n+                .param(\"ref\", ref)\n+                .onError(response -> {\n+                    \/\/ Retry once with additional escaping of the path fragment\n+                    \/\/ Only retry when the error is exactly \"File Not Found\"\n+                    if (response.statusCode() == 404 && JSON.parse(response.body()).get(\"message\").asString().endsWith(\"File Not Found\")) {\n+                        log.warning(\"First time request returned bad status: \" + response.statusCode());\n+                        log.info(\"First time response body: \" + response.body());\n+                        var doubleEncodedFileName = URLEncoder.encode(encodedFileName, StandardCharsets.UTF_8);\n+                        return Optional.of(request.get(\"repository\/files\/\" + doubleEncodedFileName)\n+                                .param(\"ref\", ref)\n+                                .onError(r -> r.statusCode() == 404 && JSON.parse(r.body()).get(\"message\").asString().endsWith(\"File Not Found\") ?\n+                                        Optional.of(JSON.object().put(\"NOT_FOUND\", true)) : Optional.empty())\n+                                .execute());\n+                    }\n+                    return Optional.empty();\n+                })\n+                .execute();\n+        if (content.contains(\"NOT_FOUND\")) {\n+            return Optional.empty();\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabRepository.java","additions":20,"deletions":23,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -377,2 +377,1 @@\n-            throw new UncheckedRestException(\"Request returned bad status: \" + response.statusCode(),\n-                    response.statusCode(), response.body());\n+            throw new UncheckedRestException(\"Request returned bad status: \" + response.statusCode(), response.statusCode());\n","filename":"network\/src\/main\/java\/org\/openjdk\/skara\/network\/RestRequest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -11,3 +11,1 @@\n-    String body;\n-\n-    public UncheckedRestException(String message, int statusCode, String body) {\n+    public UncheckedRestException(String message, int statusCode) {\n@@ -16,1 +14,0 @@\n-        this.body = body;\n@@ -23,3 +20,0 @@\n-    public String getBody() {\n-        return body;\n-    }\n","filename":"network\/src\/main\/java\/org\/openjdk\/skara\/network\/UncheckedRestException.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -203,1 +203,1 @@\n-            return Optional.of(String.join(\"\\n\", lines.orElseThrow()));\n+            return lines.map(content -> String.join(\"\\n\", content));\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestHostedRepository.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}