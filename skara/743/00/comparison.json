{"files":[{"patch":"@@ -25,1 +25,1 @@\n-    name = 'org.openjdk.skara.bots.hgbridge'\n+    name = 'org.openjdk.skara.bots.checkout'\n@@ -29,1 +29,1 @@\n-        opens 'org.openjdk.skara.bots.hgbridge' to 'org.junit.platform.commons'\n+        opens 'org.openjdk.skara.bots.checkout' to 'org.junit.platform.commons'\n@@ -44,0 +44,1 @@\n+    implementation project(':storage')\n","filename":"bots\/checkout\/build.gradle","additions":3,"deletions":2,"binary":false,"changes":5,"previous_filename":"bots\/hgbridge\/build.gradle","status":"copied"},{"patch":"@@ -23,1 +23,1 @@\n-module org.openjdk.skara.bots.hgbridge {\n+module org.openjdk.skara.bots.checkout {\n@@ -27,1 +27,0 @@\n-    requires org.openjdk.skara.census;\n@@ -30,0 +29,1 @@\n+    requires org.openjdk.skara.storage;\n@@ -32,1 +32,1 @@\n-    provides org.openjdk.skara.bot.BotFactory with org.openjdk.skara.bots.hgbridge.JBridgeBotFactory;\n+    provides org.openjdk.skara.bot.BotFactory with org.openjdk.skara.bots.checkout.CheckoutBotFactory;\n","filename":"bots\/checkout\/src\/main\/java\/module-info.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"bots\/hgbridge\/src\/main\/java\/module-info.java","status":"copied"},{"patch":"@@ -0,0 +1,130 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.skara.bots.checkout;\n+\n+import org.openjdk.skara.bot.*;\n+import org.openjdk.skara.vcs.*;\n+import org.openjdk.skara.vcs.openjdk.convert.*;\n+import org.openjdk.skara.storage.StorageBuilder;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+import java.nio.file.*;\n+import java.nio.charset.StandardCharsets;\n+import java.net.URI;\n+import java.net.URLEncoder;\n+import java.util.logging.Logger;\n+\n+public class CheckoutBot implements Bot, WorkItem {\n+    private static final Logger log = Logger.getLogger(\"org.openjdk.skara.bots\");;\n+    private final URI from;\n+    private final Branch branch;\n+    private final Path to;\n+    private final Path storage;\n+    private final StorageBuilder<Mark> marksStorage;\n+\n+    CheckoutBot(URI from, Branch branch, Path to, Path storage, StorageBuilder<Mark> marksStorage) {\n+        this.from = from;\n+        this.branch = branch;\n+        this.to = to;\n+        this.storage = storage;\n+        this.marksStorage = marksStorage;\n+    }\n+\n+    private static String urlEncode(Path p) {\n+        return URLEncoder.encode(p.toString(), StandardCharsets.UTF_8);\n+    }\n+\n+    private static String urlEncode(URI uri) {\n+        return URLEncoder.encode(uri.toString(), StandardCharsets.UTF_8);\n+    }\n+\n+    @Override\n+    public boolean concurrentWith(WorkItem other) {\n+        if (!(other instanceof CheckoutBot)) {\n+            return true;\n+        }\n+        var o = (CheckoutBot) other;\n+        return !(o.to.equals(to) || o.from.equals(from));\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"CheckoutBot(\" + from + \":\" + branch.name() + \", \" + to + \")\";\n+    }\n+\n+    @Override\n+    public List<WorkItem> getPeriodicItems() {\n+        return List.of(this);\n+    }\n+\n+    @Override\n+    public Collection<WorkItem> run(Path scratch) {\n+        try {\n+            var fromDir = storage.resolve(urlEncode(from));\n+            Repository fromRepo = null;\n+            if (!Files.exists(fromDir)) {\n+                Files.createDirectories(fromDir);\n+                log.info(\"Cloning Git repo \" + from + \" to \" + fromDir);\n+                fromRepo = Repository.clone(from, fromDir);\n+            } else {\n+                log.info(\"Getting existing Git repo repository from \" + fromDir);\n+                fromRepo = Repository.get(fromDir).orElseThrow(() ->\n+                    new IllegalStateException(\"Git repository vanished from \" + fromDir));\n+            }\n+            fromRepo.checkout(branch);\n+            fromRepo.pull(\"origin\", branch.name());\n+\n+            var repoName = Path.of(from.getPath()).getFileName().toString();\n+            var marksDir = scratch.resolve(\"checkout\").resolve(\"marks\").resolve(repoName);\n+            Files.createDirectories(marksDir);\n+            var marks = marksStorage.materialize(marksDir);\n+            var converter = new GitToHgConverter(branch);\n+            try {\n+                if (!Files.exists(to)) {\n+                    log.info(\"Creating Hg repository at: \" + to);\n+                    Files.createDirectories(to);\n+                    var toRepo = Repository.init(to, VCS.HG);\n+                    converter.convert(fromRepo, toRepo);\n+                } else {\n+                    log.info(\"Found existing Hg repository at: \" + to);\n+                    var toRepo = Repository.get(to).orElseThrow(() ->\n+                        new IllegalStateException(\"Repository vanished from \" + to));\n+                    var existing = new ArrayList<Mark>(marks.current());\n+                    log.info(\"Found \" + existing.size() + \" existing marks\");\n+                    Collections.sort(existing);\n+                    converter.convert(fromRepo, toRepo, existing);\n+                }\n+            } finally {\n+                log.info(\"Storing \" + converter.marks().size() + \" marks\");\n+                marks.put(converter.marks());\n+            }\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+        return List.of();\n+    }\n+}\n","filename":"bots\/checkout\/src\/main\/java\/org\/openjdk\/skara\/bots\/checkout\/CheckoutBot.java","additions":130,"deletions":0,"binary":false,"changes":130,"status":"added"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bots.checkout;\n+\n+import org.openjdk.skara.bot.*;\n+import org.openjdk.skara.vcs.*;\n+import org.openjdk.skara.vcs.openjdk.convert.Mark;\n+\n+import java.util.*;\n+import java.net.URI;\n+import java.nio.file.Path;\n+import java.util.logging.Logger;\n+\n+public class CheckoutBotFactory implements BotFactory {\n+    private static final Logger log = Logger.getLogger(\"org.openjdk.skara.bots\");\n+\n+    @Override\n+    public String name() {\n+        return \"checkout\";\n+    }\n+\n+    @Override\n+    public List<Bot> create(BotConfiguration configuration) {\n+        var specific = configuration.specific();\n+        var storage = configuration.storageFolder();\n+\n+        var marksRepo = configuration.repository(specific.get(\"marks\").get(\"repo\").asString());\n+        var marksUser = Author.fromString(specific.get(\"marks\").get(\"author\").asString());\n+\n+        var bots = new ArrayList<Bot>();\n+        for (var repo : specific.get(\"repositories\").asArray()) {\n+            var from = repo.get(\"from\").asString();\n+            var lastColon = from.lastIndexOf(\":\");\n+            var fromURI = URI.create(from.substring(0, lastColon));\n+            var fromBranch = new Branch(from.substring(lastColon + 1));\n+            var to = Path.of(repo.get(\"to\").asString());\n+\n+            var repoName = Path.of(fromURI.getPath()).getFileName().toString();\n+            var markStorage = MarkStorage.create(marksRepo, marksUser, repoName);\n+\n+            bots.add(new CheckoutBot(fromURI, fromBranch, to, storage, markStorage));\n+        }\n+\n+        return bots;\n+    }\n+}\n","filename":"bots\/checkout\/src\/main\/java\/org\/openjdk\/skara\/bots\/checkout\/CheckoutBotFactory.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"},{"patch":"@@ -0,0 +1,92 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.skara.bots.checkout;\n+\n+import org.openjdk.skara.forge.HostedRepository;\n+import org.openjdk.skara.vcs.Author;\n+import org.openjdk.skara.vcs.Hash;\n+import org.openjdk.skara.vcs.openjdk.convert.Mark;\n+import org.openjdk.skara.storage.StorageBuilder;\n+\n+import java.net.URI;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+class MarkStorage {\n+    private static Mark deserializeMark(String s) {\n+        var parts = s.split(\" \");\n+        if (!(parts.length == 3 || parts.length == 4)) {\n+            throw new IllegalArgumentException(\"Unexpected string:\" + s);\n+        }\n+\n+        var key = Integer.parseInt(parts[0]);\n+        var hg = new Hash(parts[1]);\n+        var git = new Hash(parts[2]);\n+\n+        return parts.length == 3 ? new Mark(key, hg, git) : new Mark(key, hg, git, new Hash(parts[3]));\n+    }\n+\n+    private static String serialize(Collection<Mark> added, Set<Mark> existing) {\n+        var marks = new ArrayList<Mark>();\n+        var handled = new HashSet<Integer>();\n+        for (var mark : added) {\n+            marks.add(mark);\n+            handled.add(mark.key());\n+        }\n+        for (var mark : existing) {\n+            if (!handled.contains(mark.key())) {\n+                marks.add(mark);\n+            }\n+        }\n+        Collections.sort(marks);\n+        var sb = new StringBuilder();\n+        for (var mark : marks) {\n+            sb.append(Integer.toString(mark.key()));\n+            sb.append(\" \");\n+            sb.append(mark.hg().hex());\n+            sb.append(\" \");\n+            sb.append(mark.git().hex());\n+            if (mark.tag().isPresent()) {\n+                sb.append(\" \");\n+                sb.append(mark.tag().get().hex());\n+            }\n+            sb.append(\"\\n\");\n+        }\n+        return sb.toString();\n+    }\n+\n+    private static Set<Mark> deserialize(String current) {\n+        var res = current.lines()\n+                         .map(MarkStorage::deserializeMark)\n+                         .collect(Collectors.toSet());\n+        return res;\n+    }\n+\n+    static StorageBuilder<Mark> create(HostedRepository repo, Author user, String name) {\n+        return new StorageBuilder<Mark>(name + \".marks.txt\")\n+            .remoteRepository(repo, \"master\", user.name(), user.email(), \"Updated marks for \" + name)\n+            .serializer(MarkStorage::serialize)\n+            .deserializer(MarkStorage::deserialize);\n+    }\n+}\n","filename":"bots\/checkout\/src\/main\/java\/org\/openjdk\/skara\/bots\/checkout\/MarkStorage.java","additions":92,"deletions":0,"binary":false,"changes":92,"status":"added"},{"patch":"@@ -0,0 +1,130 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bots.checkout;\n+\n+import org.openjdk.skara.forge.HostedRepository;\n+import org.openjdk.skara.storage.StorageBuilder;\n+import org.openjdk.skara.test.*;\n+import org.openjdk.skara.host.HostUser;\n+import org.openjdk.skara.vcs.Tag;\n+import org.openjdk.skara.vcs.*;\n+\n+import org.junit.jupiter.api.*;\n+\n+import java.io.IOException;\n+import java.nio.file.*;\n+import java.util.*;\n+import static java.nio.file.StandardOpenOption.*;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class CheckoutBotTests {\n+    private static void populate(Repository r) throws IOException {\n+        var readme = r.root().resolve(\"README\");\n+        Files.write(readme, List.of(\"Hello, readme!\"));\n+\n+        r.add(readme);\n+        r.commit(\"Add README\", \"duke\", \"duke@openjdk.java.net\");\n+\n+        Files.write(readme, List.of(\"Another line\"), WRITE, APPEND);\n+        r.add(readme);\n+        r.commit(\"Modify README\", \"duke\", \"duke@openjdk.java.net\");\n+\n+        Files.write(readme, List.of(\"A final line\"), WRITE, APPEND);\n+        r.add(readme);\n+        r.commit(\"Final README\", \"duke\", \"duke@openjdk.java.net\");\n+    }\n+\n+    @Test\n+    void simpleConversion(TestInfo testInfo) throws IOException {\n+        try (var tmp = new TemporaryDirectory()) {\n+            var host = TestHost.createNew(List.of(new HostUser(0, \"duke\", \"J. Duke\")));\n+            var marksLocalDir = tmp.path().resolve(\"marks.git\");\n+            Files.createDirectories(marksLocalDir);\n+            var marksLocalRepo = Repository.init(marksLocalDir, VCS.GIT);\n+            marksLocalRepo.config(\"receive\", \"denyCurrentBranch\", \"ignore\");\n+            var marksHostedRepo = new TestHostedRepository(host, \"marks\", marksLocalRepo);\n+\n+            var storage = tmp.path().resolve(\"storage\");\n+            var scratch = tmp.path().resolve(\"scratch\");\n+            var marksAuthor = new Author(\"duke\", \"duke@openjdk.org\");\n+            var marksStorage = MarkStorage.create(marksHostedRepo, marksAuthor, \"test\");\n+\n+            var hgDir = tmp.path().resolve(\"hg\");\n+\n+            var gitLocalDir = tmp.path().resolve(\"from.git\");\n+            Files.createDirectories(gitLocalDir);\n+            var gitLocalRepo = Repository.init(gitLocalDir, VCS.GIT);\n+            populate(gitLocalRepo);\n+            var gitHostedRepo = new TestHostedRepository(host, \"from\", gitLocalRepo);\n+\n+            var bot = new CheckoutBot(gitHostedRepo.url(), gitLocalRepo.defaultBranch(), hgDir, storage, marksStorage);\n+            var runner = new TestBotRunner();\n+            runner.runPeriodicItems(bot);\n+\n+            var hgRepo = Repository.get(hgDir).orElseThrow();\n+            assertEquals(3, hgRepo.commitMetadata().size());\n+        }\n+    }\n+\n+    @Test\n+    void update(TestInfo testInfo) throws IOException {\n+        try (var tmp = new TemporaryDirectory()) {\n+            var host = TestHost.createNew(List.of(new HostUser(0, \"duke\", \"J. Duke\")));\n+            var marksLocalDir = tmp.path().resolve(\"marks.git\");\n+            Files.createDirectories(marksLocalDir);\n+            var marksLocalRepo = Repository.init(marksLocalDir, VCS.GIT);\n+            marksLocalRepo.config(\"receive\", \"denyCurrentBranch\", \"ignore\");\n+            var marksHostedRepo = new TestHostedRepository(host, \"marks\", marksLocalRepo);\n+\n+            var storage = tmp.path().resolve(\"storage\");\n+            var scratch = tmp.path().resolve(\"scratch\");\n+            var marksAuthor = new Author(\"duke\", \"duke@openjdk.org\");\n+            var marksStorage = MarkStorage.create(marksHostedRepo, marksAuthor, \"test\");\n+            var runner = new TestBotRunner();\n+\n+            var hgDir = tmp.path().resolve(\"hg\");\n+\n+            var gitLocalDir = tmp.path().resolve(\"from.git\");\n+            Files.createDirectories(gitLocalDir);\n+            var gitLocalRepo = Repository.init(gitLocalDir, VCS.GIT);\n+            populate(gitLocalRepo);\n+            var gitHostedRepo = new TestHostedRepository(host, \"from\", gitLocalRepo);\n+\n+            var bot = new CheckoutBot(gitHostedRepo.url(), gitLocalRepo.defaultBranch(), hgDir, storage, marksStorage);\n+            runner.runPeriodicItems(bot);\n+\n+            var hgRepo = Repository.get(hgDir).orElseThrow();\n+            assertEquals(3, hgRepo.commitMetadata().size());\n+            assertEquals(3, gitLocalRepo.commitMetadata().size());\n+\n+            var readme = gitLocalRepo.root().resolve(\"README\");\n+            Files.write(readme, List.of(\"An updated line\"), WRITE, APPEND);\n+            gitLocalRepo.add(readme);\n+            gitLocalRepo.commit(\"Updated Final README\", \"duke\", \"duke@openjdk.java.net\");\n+\n+            runner.runPeriodicItems(bot);\n+            assertEquals(4, hgRepo.commitMetadata().size());\n+        }\n+    }\n+}\n","filename":"bots\/checkout\/src\/test\/java\/org\/openjdk\/skara\/bots\/checkout\/CheckoutBotTests.java","additions":130,"deletions":0,"binary":false,"changes":130,"status":"added"},{"patch":"@@ -52,0 +52,1 @@\n+    implementation project(':bots:checkout')\n@@ -85,1 +86,2 @@\n-                   'org.openjdk.skara.bots.bridgekeeper']\n+                   'org.openjdk.skara.bots.bridgekeeper',\n+                   'org.openjdk.skara.bots.checkout']\n","filename":"bots\/cli\/build.gradle","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -50,0 +50,1 @@\n+include 'bots:checkout'\n","filename":"settings.gradle","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}