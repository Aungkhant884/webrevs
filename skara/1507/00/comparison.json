{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -361,4 +361,0 @@\n-            for (var listener : listeners) {\n-                errors.addAll(handleTags(localRepo, history, listener, notifierScratchPath.resolve(listener.name())));\n-            }\n-\n@@ -387,0 +383,5 @@\n+\n+            for (var listener : listeners) {\n+                errors.addAll(handleTags(localRepo, history, listener, notifierScratchPath.resolve(listener.name())));\n+            }\n+\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/RepositoryWorkItem.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -2044,0 +2044,74 @@\n+\n+    @Test\n+    void testIssueBackportWithTag(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var repo = credentials.getHostedRepository();\n+            var repoFolder = tempFolder.path().resolve(\"repo\");\n+            var localRepo = CheckableRepository.init(repoFolder, repo.repositoryType(), Path.of(\"appendable.txt\"), Set.of(), null);\n+            credentials.commitLock(localRepo);\n+            localRepo.pushAll(repo.authenticatedUrl());\n+\n+            var storageFolder = tempFolder.path().resolve(\"storage\");\n+            var issueProject = credentials.getIssueProject();\n+            var jbsNotifierConfig = JSON.object().put(\"fixversions\", JSON.object().put(\".*aster\", \"12.0.2\")).put(\"buildname\", \"team\");\n+            var notifyBot = testBotBuilder(repo, issueProject, storageFolder, jbsNotifierConfig).create(\"notify\", JSON.object());\n+\n+            \/\/ Initialize history\n+            var current = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.tag(current, \"jdk-12.0.2+9\", \"First tag\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(new Branch(repo.authenticatedUrl().toString()), \"--tags\", false);\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ Create an issue and commit a fix\n+            var issue = issueProject.createIssue(\"This is an issue\", List.of(\"Indeed\"),\n+                    Map.of(\"issuetype\", JSON.of(\"Enhancement\"),\n+                            SUBCOMPONENT, JSON.of(\"java.io\"),\n+                            RESOLVED_IN_BUILD, JSON.of(\"b07\")\n+                    ));\n+            var level = issue.properties().get(\"security\");\n+            issue.setProperty(\"fixVersions\", JSON.array().add(\"13.0.1\"));\n+            issue.setProperty(\"priority\", JSON.of(\"1\"));\n+            issue.addLabel(\"test\");\n+            issue.addLabel(\"temporary\");\n+\n+            var authorEmailAddress = issueProject.issueTracker().currentUser().username() + \"@openjdk.org\";\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, \"Another line\", issue.id() + \": Fix that issue\", \"Duke\", authorEmailAddress);\n+            localRepo.push(editHash, repo.authenticatedUrl(), \"master\");\n+\n+            \/\/ Tag it\n+            localRepo.tag(editHash, \"jdk-12.0.2+110\", \"Second tag\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(new Branch(repo.authenticatedUrl().toString()), \"--tags\", false);\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ Same RepositoryWorkItem handles both tag and the commit\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ The fixVersion should not have been updated\n+            var updatedIssue = issueProject.issue(issue.id()).orElseThrow();\n+            assertEquals(Set.of(\"13.0.1\"), fixVersions(updatedIssue));\n+            assertEquals(OPEN, updatedIssue.state());\n+            assertEquals(List.of(), updatedIssue.assignees());\n+\n+            \/\/ There should be a link\n+            var links = updatedIssue.links();\n+            assertEquals(1, links.size());\n+            var link = links.get(0);\n+            var backport = link.issue().orElseThrow();\n+\n+            \/\/ The backport issue should have a correct fixVersion and assignee\n+            assertEquals(Set.of(\"12.0.2\"), fixVersions(backport));\n+            assertEquals(RESOLVED, backport.state());\n+            assertEquals(List.of(issueProject.issueTracker().currentUser()), backport.assignees());\n+\n+            \/\/ Custom properties should also propagate\n+            assertEquals(\"1\", backport.properties().get(\"priority\").asString());\n+            assertEquals(\"java.io\", backport.properties().get(SUBCOMPONENT).asString());\n+\n+            \/\/ Labels should not\n+            assertEquals(0, backport.labelNames().size());\n+\n+            \/\/ Resolved in Build should be updated\n+            assertEquals(\"b110\", backport.properties().get(RESOLVED_IN_BUILD).asString());\n+        }\n+    }\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifierTests.java","additions":75,"deletions":1,"binary":false,"changes":76,"status":"modified"}]}