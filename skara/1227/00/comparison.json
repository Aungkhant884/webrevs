{"files":[{"patch":"@@ -44,1 +44,1 @@\n-            backportRequest = new RestRequest(backportRequest(uri), vault.authId(), () -> Arrays.asList(\"Cookie\", vault.getCookie()));\n+            backportRequest = new RestRequest(backportRequest(uri), vault.authId(), (r) -> Arrays.asList(\"Cookie\", vault.getCookie()));\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/JbsBackport.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-        request = new RestRequest(vaultUri, authId, () -> Arrays.asList(\n+        request = new RestRequest(vaultUri, authId, (r) -> Arrays.asList(\n@@ -62,1 +62,1 @@\n-            var authProbeRequest = new RestRequest(authProbe, authId, () -> Arrays.asList(\"Cookie\", cookie));\n+            var authProbeRequest = new RestRequest(authProbe, authId, (r) -> Arrays.asList(\"Cookie\", cookie));\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/JbsVault.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-        request = new RestRequest(baseApi, application.authId(), () -> Arrays.asList(\n+        request = new RestRequest(baseApi, application.authId(), (r) -> Arrays.asList(\n@@ -79,1 +79,1 @@\n-        graphQL = new RestRequest(graphQLAPI, application.authId(), () -> Arrays.asList(\n+        graphQL = new RestRequest(graphQLAPI, application.authId(), (r) -> Arrays.asList(\n@@ -109,1 +109,1 @@\n-        request = new RestRequest(baseApi, pat.username(), () -> Arrays.asList(\n+        request = new RestRequest(baseApi, pat.username(), (r) -> Arrays.asList(\n@@ -120,1 +120,1 @@\n-        graphQL = new RestRequest(graphQLAPI, pat.username(), () -> Arrays.asList(\n+        graphQL = new RestRequest(graphQLAPI, pat.username(), (r) -> Arrays.asList(\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubHost.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-        request = new RestRequest(apiBase, gitHubHost.authId().orElse(null), () -> {\n+        request = new RestRequest(apiBase, gitHubHost.authId().orElse(null), (r) -> {\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubRepository.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-        request = new RestRequest(baseApi, pat.username(), () -> Arrays.asList(\"Private-Token\", pat.password()));\n+        request = new RestRequest(baseApi, pat.username(), (r) -> Arrays.asList(\"Private-Token\", pat.password()));\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabHost.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-                            .map(pat -> new RestRequest(baseApi, pat.username(), () -> Arrays.asList(\"Private-Token\", pat.password())))\n+                            .map(pat -> new RestRequest(baseApi, pat.username(), (r) -> Arrays.asList(\"Private-Token\", pat.password())))\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabRepository.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-        request = new RestRequest(baseApi, jiraVault.authId(), () -> Arrays.asList(\"Cookie\", jiraVault.getCookie()));\n+        request = new RestRequest(baseApi, jiraVault.authId(), (r) -> Arrays.asList(\"Cookie\", jiraVault.getCookie()));\n@@ -69,1 +69,1 @@\n-        request = new RestRequest(baseApi, jiraVault.authId(), () -> Arrays.asList(\"Cookie\", jiraVault.getCookie()));\n+        request = new RestRequest(baseApi, jiraVault.authId(), (r) -> Arrays.asList(\"Cookie\", jiraVault.getCookie()));\n","filename":"issuetracker\/src\/main\/java\/org\/openjdk\/skara\/issuetracker\/jira\/JiraHost.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-        request = new RestRequest(vaultUri, authId, () -> Arrays.asList(\n+        request = new RestRequest(vaultUri, authId, (r) -> Arrays.asList(\n@@ -62,1 +62,1 @@\n-            var authProbeRequest = new RestRequest(authProbe, authId, () -> Arrays.asList(\"Cookie\", cookie));\n+            var authProbeRequest = new RestRequest(authProbe, authId, (r) -> Arrays.asList(\"Cookie\", cookie));\n","filename":"issuetracker\/src\/main\/java\/org\/openjdk\/skara\/issuetracker\/jira\/JiraVault.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,0 +31,3 @@\n+import java.nio.charset.StandardCharsets;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n@@ -58,1 +61,6 @@\n-        List<String> getAuthHeaders();\n+        List<String> getAuthHeaders(HttpRequest.Builder request);\n+    }\n+\n+    @FunctionalInterface\n+    public interface NextLinkExtractor {\n+        Optional<HttpRequest.Builder> getNextLinkRequest(HttpResponse<String> response);\n@@ -82,0 +90,1 @@\n+        private String sha256Header;\n@@ -187,0 +196,9 @@\n+        \/**\n+         * Optionally name a header where a sha256 hash of the contents will be added.\n+         * This is commonly used by cloud vendors as part of verifying requests.\n+         *\/\n+        public QueryBuilder sha256Header(String name) {\n+            sha256Header = name;\n+            return this;\n+        }\n+\n@@ -210,0 +228,1 @@\n+    private final NextLinkExtractor nextLinkExtractor;\n@@ -212,0 +231,8 @@\n+    public RestRequest(URI apiBase, String authId, AuthenticationGenerator authGen,\n+                       NextLinkExtractor nextLinkExtractor) {\n+        this.apiBase = apiBase;\n+        this.authId = authId;\n+        this.authGen = authGen;\n+        this.nextLinkExtractor = nextLinkExtractor;\n+    }\n+\n@@ -216,0 +243,1 @@\n+        this.nextLinkExtractor = this::getNextLinkRequest;\n@@ -219,3 +247,1 @@\n-        this.apiBase = apiBase;\n-        this.authId = null;\n-        this.authGen = null;\n+        this(apiBase, null, null);\n@@ -283,1 +309,1 @@\n-                    request.headers(authGen.getAuthHeaders().toArray(new String[0]));\n+                    request.headers(authGen.getAuthHeaders(request).toArray(new String[0]));\n@@ -333,1 +359,2 @@\n-                                      List<QueryBuilder.Param> params, Map<String, String> headers, boolean isJSON) {\n+                                              List<QueryBuilder.Param> params, Map<String, String> headers,\n+                                              boolean isJSON, String sha256Header) {\n@@ -353,0 +380,10 @@\n+            if (sha256Header != null) {\n+                try {\n+                    var digest = MessageDigest.getInstance(\"SHA-256\");\n+                    var hash = digest.digest(body.getBytes(StandardCharsets.UTF_8));\n+                    var encoded  = new String(Base64.getEncoder().encode(hash), StandardCharsets.UTF_8);\n+                    requestBuilder.header(sha256Header, encoded);\n+                } catch (NoSuchAlgorithmException e) {\n+                    throw new Error(\"SHA-256 algorithm not found\");\n+                }\n+            }\n@@ -398,0 +435,13 @@\n+    private Optional<HttpRequest.Builder> getNextLinkRequest(HttpResponse<String> response) {\n+        var link = response.headers().firstValue(\"Link\");\n+        if (link.isEmpty()) {\n+            return Optional.empty();\n+        }\n+        var links = parseLink(link.get());\n+        if (!links.containsKey(\"next\")) {\n+            return Optional.empty();\n+        }\n+        var uri = URI.create(links.get(\"next\"));\n+        return Optional.of(getHttpRequestBuilder(uri).GET());\n+    }\n+\n@@ -400,1 +450,1 @@\n-                                    queryBuilder.params, queryBuilder.headers, queryBuilder.isJSON());\n+                queryBuilder.params, queryBuilder.headers, queryBuilder.isJSON(), queryBuilder.sha256Header);\n@@ -409,2 +459,2 @@\n-        var link = response.headers().firstValue(\"Link\");\n-        if (link.isEmpty() || queryBuilder.maxPages < 2) {\n+        var nextRequest = nextLinkExtractor.getNextLinkRequest(response);\n+        if (nextRequest.isEmpty() || queryBuilder.maxPages < 2) {\n@@ -419,4 +469,1 @@\n-        var links = parseLink(link.get());\n-        while (links.containsKey(\"next\") && ret.size() < queryBuilder.maxPages) {\n-            var uri = URI.create(links.get(\"next\"));\n-            request = getHttpRequestBuilder(uri).GET();\n+        while (nextRequest.isPresent() && ret.size() < queryBuilder.maxPages) {\n@@ -424,1 +471,1 @@\n-            response = sendRequest(request);\n+            response = sendRequest(nextRequest.get());\n@@ -433,3 +480,1 @@\n-            link = response.headers().firstValue(\"Link\");\n-            links = parseLink(link.orElseThrow(\n-                    () -> new UncheckedRestException(\"Initial paginated response no longer paginated for query: \" + queryBuilder)));\n+            nextRequest = nextLinkExtractor.getNextLinkRequest(response);\n@@ -445,1 +490,1 @@\n-                                    queryBuilder.params, queryBuilder.headers, queryBuilder.isJSON());\n+                queryBuilder.params, queryBuilder.headers, queryBuilder.isJSON(), queryBuilder.sha256Header);\n","filename":"network\/src\/main\/java\/org\/openjdk\/skara\/network\/RestRequest.java","additions":63,"deletions":18,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -140,0 +140,5 @@\n+    public URIBuilder setQuery(String query) {\n+        current.query = query;\n+        return this;\n+    }\n+\n","filename":"network\/src\/main\/java\/org\/openjdk\/skara\/network\/URIBuilder.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -307,2 +307,2 @@\n-            var authRequest1 = new RestRequest(receiver.getEndpoint(), \"id1\", () -> List.of(\"user\", \"1\"));\n-            var authRequest2 = new RestRequest(receiver.getEndpoint(), \"id2\", () -> List.of(\"user\", \"2\"));\n+            var authRequest1 = new RestRequest(receiver.getEndpoint(), \"id1\", (r) -> List.of(\"user\", \"1\"));\n+            var authRequest2 = new RestRequest(receiver.getEndpoint(), \"id2\", (r) -> List.of(\"user\", \"2\"));\n","filename":"network\/src\/test\/java\/org\/openjdk\/skara\/network\/RestRequestTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}