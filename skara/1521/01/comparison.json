{"files":[{"patch":"@@ -90,2 +90,2 @@\n-                                                         github.get(\"app\").get(\"installation\").asString(),\n-                                                 keyContents);\n+                                github.get(\"app\").get(\"installation\").asString(),\n+                                keyContents);\n@@ -102,0 +102,5 @@\n+            } else if (entry.value().contains(\"bitbucket\")) {\n+                var bitbucket = entry.value().get(\"bitbucket\");\n+                var uri = URIBuilder.base(bitbucket.get(\"url\").asString()).build();\n+                var credential = new Credential(bitbucket.get(\"username\").asString(), bitbucket.get(\"pat\").asString());\n+                ret.put(entry.name(), Forge.from(\"bitbucket\", uri, credential, bitbucket.asObject()));\n","filename":"bot\/src\/main\/java\/org\/openjdk\/skara\/bot\/BotRunnerConfiguration.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -100,1 +100,1 @@\n-            log.info(\"Setting up mirroring from \" + fromRepo.name() + \"to \" + toRepo.name());\n+            log.info(\"Setting up mirroring from \" + fromRepo.name() + \" to \" + toRepo.name());\n","filename":"bots\/mirror\/src\/main\/java\/org\/openjdk\/skara\/bots\/mirror\/MirrorBotFactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,4 @@\n-    provides org.openjdk.skara.forge.ForgeFactory with org.openjdk.skara.forge.github.GitHubForgeFactory, org.openjdk.skara.forge.gitlab.GitLabForgeFactory;\n+    provides org.openjdk.skara.forge.ForgeFactory with\n+            org.openjdk.skara.forge.github.GitHubForgeFactory,\n+            org.openjdk.skara.forge.gitlab.GitLabForgeFactory,\n+            org.openjdk.skara.forge.bitbucket.BitbucketForgeFactory;\n","filename":"forge\/src\/main\/java\/module-info.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.forge.bitbucket;\n+\n+import java.net.URI;\n+import java.util.Set;\n+import org.openjdk.skara.forge.Forge;\n+import org.openjdk.skara.forge.ForgeFactory;\n+import org.openjdk.skara.forge.internal.ForgeUtils;\n+import org.openjdk.skara.host.Credential;\n+import org.openjdk.skara.json.JSONObject;\n+\n+public class BitbucketForgeFactory implements ForgeFactory {\n+    @Override\n+    public String name() {\n+        return \"bitbucket\";\n+    }\n+\n+    @Override\n+    public Set<String> knownHosts() {\n+        return Set.of();\n+    }\n+\n+    @Override\n+    public Forge create(URI uri, Credential credential, JSONObject configuration) {\n+        var name = \"Bitbucket\";\n+        if (configuration != null && configuration.contains(\"name\")) {\n+            name = configuration.get(\"name\").asString();\n+        }\n+        var useSsh = false;\n+        if (configuration != null && configuration.contains(\"sshkey\") && credential != null) {\n+            ForgeUtils.configureSshKey(credential.username(), uri.getHost(), configuration.get(\"sshkey\").asString());\n+            useSsh = true;\n+        }\n+        int sshport = 22;\n+        if (configuration != null && configuration.contains(\"sshport\")) {\n+            sshport = configuration.get(\"sshport\").asInt();\n+        }\n+        if (credential != null) {\n+            return new BitbucketHost(name, uri, useSsh, sshport, credential);\n+        } else {\n+            return new BitbucketHost(name, uri, useSsh, sshport);\n+        }\n+    }\n+}\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/bitbucket\/BitbucketForgeFactory.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"},{"patch":"@@ -0,0 +1,115 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.forge.bitbucket;\n+\n+import java.net.URI;\n+import java.util.Optional;\n+import org.openjdk.skara.forge.Forge;\n+import org.openjdk.skara.forge.HostedCommit;\n+import org.openjdk.skara.forge.HostedRepository;\n+import org.openjdk.skara.host.Credential;\n+import org.openjdk.skara.host.HostUser;\n+import org.openjdk.skara.vcs.Hash;\n+\n+public class BitbucketHost implements Forge {\n+    private final String name;\n+    private final URI uri;\n+    private final boolean useSsh;\n+    private final int sshPort;\n+    private final Credential credential;\n+\n+    public BitbucketHost(String name, URI uri, boolean useSsh, int sshPort, Credential credential) {\n+        this.name = name;\n+        this.uri = uri;\n+        this.useSsh = useSsh;\n+        this.sshPort = sshPort;\n+        this.credential = credential;\n+    }\n+\n+    public BitbucketHost(String name, URI uri, boolean useSsh, int sshPort) {\n+        this.name = name;\n+        this.uri = uri;\n+        this.useSsh = useSsh;\n+        this.sshPort = sshPort;\n+        this.credential = null;\n+    }\n+\n+    @Override\n+    public String name() {\n+        return name;\n+    }\n+\n+    public URI getUri() {\n+        return uri;\n+    }\n+\n+    public String sshHostString() {\n+        if (credential == null) {\n+            throw new IllegalStateException(\"Cannot use ssh without user name\");\n+        }\n+        return credential.username() + \".\" + uri.getHost() + ((sshPort != 22) ? \":\" + sshPort : \"\");\n+    }\n+\n+    boolean useSsh() {\n+        return useSsh;\n+    }\n+\n+    Optional<Credential> getCredential() {\n+        return Optional.ofNullable(credential);\n+    }\n+\n+    @Override\n+    public Optional<HostedRepository> repository(String name) {\n+        return Optional.of(new BitbucketRepository(this, name));\n+    }\n+\n+    @Override\n+    public Optional<HostedCommit> search(Hash hash, boolean includeDiffs) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public boolean isValid() {\n+        return true;\n+    }\n+\n+    @Override\n+    public Optional<HostUser> user(String username) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public HostUser currentUser() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public boolean isMemberOf(String groupId, HostUser user) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public String hostname() {\n+        return uri.getHost();\n+    }\n+}\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/bitbucket\/BitbucketHost.java","additions":115,"deletions":0,"binary":false,"changes":115,"status":"added"},{"patch":"@@ -0,0 +1,306 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.forge.bitbucket;\n+\n+import java.net.URI;\n+import java.time.Duration;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import org.openjdk.skara.forge.Check;\n+import org.openjdk.skara.forge.CommitComment;\n+import org.openjdk.skara.forge.Forge;\n+import org.openjdk.skara.forge.HostedBranch;\n+import org.openjdk.skara.forge.HostedCommit;\n+import org.openjdk.skara.forge.HostedRepository;\n+import org.openjdk.skara.forge.PullRequest;\n+import org.openjdk.skara.forge.WebHook;\n+import org.openjdk.skara.forge.WorkflowStatus;\n+import org.openjdk.skara.host.HostUser;\n+import org.openjdk.skara.issuetracker.Label;\n+import org.openjdk.skara.json.JSONValue;\n+import org.openjdk.skara.network.URIBuilder;\n+import org.openjdk.skara.vcs.Branch;\n+import org.openjdk.skara.vcs.Hash;\n+import org.openjdk.skara.vcs.ReadOnlyRepository;\n+import org.openjdk.skara.vcs.Tag;\n+import org.openjdk.skara.vcs.VCS;\n+\n+public class BitbucketRepository implements HostedRepository {\n+    private final BitbucketHost bitbucketHost;\n+    private final String repositoryName;\n+\n+    public BitbucketRepository(BitbucketHost bitbucketHost, String repositoryName) {\n+        this.bitbucketHost = bitbucketHost;\n+        this.repositoryName = repositoryName;\n+    }\n+\n+    @Override\n+    public Forge forge() {\n+        return bitbucketHost;\n+    }\n+\n+    @Override\n+    public PullRequest createPullRequest(HostedRepository target, String targetRef, String sourceRef, String title, List<String> body, boolean draft) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public PullRequest pullRequest(String id) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public List<PullRequest> pullRequests() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public List<PullRequest> openPullRequests() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public List<PullRequest> pullRequestsAfter(ZonedDateTime updatedAfter) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public List<PullRequest> openPullRequestsAfter(ZonedDateTime updatedAfter) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public List<PullRequest> findPullRequestsWithComment(String author, String body) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public Optional<PullRequest> parsePullRequestUrl(String url) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public String name() {\n+        return repositoryName;\n+    }\n+\n+    @Override\n+    public Optional<HostedRepository> parent() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public URI authenticatedUrl() {\n+        if (bitbucketHost.useSsh()) {\n+            return URI.create(\"ssh:\/\/git@\" + bitbucketHost.sshHostString() + \"\/\" + repositoryName + \".git\");\n+        } else {\n+            var builder = URIBuilder\n+                    .base(bitbucketHost.getUri())\n+                    .setPath(\"\/\" + repositoryName + \".git\");\n+            bitbucketHost.getCredential().ifPresent(cred -> builder.setAuthentication(cred.username() + \":\" + cred.password()));\n+            return builder.build();\n+        }\n+    }\n+\n+    @Override\n+    public URI webUrl() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public URI nonTransformedWebUrl() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public URI webUrl(Hash hash) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public URI webUrl(Branch branch) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public URI webUrl(Tag tag) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public URI webUrl(String baseRef, String headRef) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public URI diffUrl(String prId) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public VCS repositoryType() {\n+        return VCS.GIT;\n+    }\n+\n+    @Override\n+    public URI url() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public Optional<String> fileContents(String filename, String ref) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public void writeFileContents(String filename, String content, Branch branch, String message, String authorName, String authorEmail) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public String namespace() {\n+        return URIBuilder.base(bitbucketHost.getUri()).build().getHost();\n+    }\n+\n+    @Override\n+    public Optional<WebHook> parseWebHook(JSONValue body) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public HostedRepository fork() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public long id() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public Optional<Hash> branchHash(String ref) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public List<HostedBranch> branches() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public void protectBranchPattern(String pattern) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public void unprotectBranchPattern(String pattern) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public void deleteBranch(String ref) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public List<CommitComment> commitComments(Hash hash) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public List<CommitComment> recentCommitComments(ReadOnlyRepository localRepo, Set<Integer> excludeAuthors, List<Branch> Branches, ZonedDateTime updatedAfter) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public CommitComment addCommitComment(Hash hash, String body) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public void updateCommitComment(String id, String body) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public Optional<HostedCommit> commit(Hash hash, boolean includeDiffs) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public List<Check> allChecks(Hash hash) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public WorkflowStatus workflowStatus() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public URI createPullRequestUrl(HostedRepository target, String targetRef, String sourceRef) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public void addCollaborator(HostUser user, boolean canPush) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public boolean canPush(HostUser user) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public void restrictPushAccess(Branch branch, HostUser users) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public List<Label> labels() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public void addLabel(Label label) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public void updateLabel(Label label) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public void deleteLabel(Label label) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public int deleteDeployKeys(Duration age) {\n+        throw new UnsupportedOperationException();\n+    }\n+}\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/bitbucket\/BitbucketRepository.java","additions":306,"deletions":0,"binary":false,"changes":306,"status":"added"},{"patch":"@@ -25,6 +25,0 @@\n-import org.openjdk.skara.forge.*;\n-import org.openjdk.skara.host.Credential;\n-import org.openjdk.skara.json.JSONObject;\n-import org.openjdk.skara.json.JSONValue;\n-\n-import java.io.*;\n@@ -32,2 +26,0 @@\n-import java.nio.charset.StandardCharsets;\n-import java.nio.file.*;\n@@ -36,1 +28,0 @@\n-import java.util.regex.Pattern;\n@@ -38,0 +29,6 @@\n+import org.openjdk.skara.forge.Forge;\n+import org.openjdk.skara.forge.ForgeFactory;\n+import org.openjdk.skara.forge.internal.ForgeUtils;\n+import org.openjdk.skara.host.Credential;\n+import org.openjdk.skara.json.JSONObject;\n+import org.openjdk.skara.json.JSONValue;\n@@ -50,34 +47,0 @@\n-    private void configureSshKey(String userName, String hostName, String sshKey) {\n-        var cfgPath = Path.of(System.getProperty(\"user.home\"), \".ssh\");\n-        if (!Files.isDirectory(cfgPath)) {\n-            try {\n-                Files.createDirectories(cfgPath);\n-            } catch (IOException ignored) {\n-            }\n-        }\n-\n-        var cfgFile = cfgPath.resolve(\"config\");\n-        var existing = \"\";\n-        try {\n-            existing = Files.readString(cfgFile, StandardCharsets.UTF_8);\n-        } catch (IOException ignored) {\n-        }\n-\n-        var userHost = userName + \".\" + hostName;\n-        var existingBlock = Pattern.compile(\"^Match host \" + Pattern.quote(userHost) + \"(?:\\\\R[ \\\\t]+.*)+\", Pattern.MULTILINE);\n-        var existingMatcher = existingBlock.matcher(existing);\n-        var filtered = existingMatcher.replaceAll(\"\");\n-        var result = \"Match host \" + userHost + \"\\n\" +\n-                \"  Hostname \" + hostName + \"\\n\" +\n-                \"  PreferredAuthentications publickey\\n\" +\n-                \"  StrictHostKeyChecking no\\n\" +\n-                \"  IdentityFile \" + sshKey + \"\\n\" +\n-                \"\\n\";\n-\n-        try {\n-            Files.writeString(cfgFile, result + filtered.strip() + \"\\n\", StandardCharsets.UTF_8);\n-        } catch (IOException e) {\n-            throw new UncheckedIOException(e);\n-        }\n-    }\n-\n@@ -99,1 +62,1 @@\n-            configureSshKey(credential.username(), uri.getHost(), configuration.get(\"sshkey\").asString());\n+            ForgeUtils.configureSshKey(credential.username(), uri.getHost(), configuration.get(\"sshkey\").asString());\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabForgeFactory.java","additions":7,"deletions":44,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.forge.internal;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.regex.Pattern;\n+\n+public class ForgeUtils {\n+\n+    \/**\n+     * Adds a special ssh key configuration in the user's ssh config file.\n+     * The config will only apply to the fake host userName.hostName so should\n+     * not interfere with other user configurations. The caller of this method\n+     * needs to use userName.hostName as host name when calling ssh.\n+     *\/\n+    public static void configureSshKey(String userName, String hostName, String sshKeyFile) {\n+        var cfgPath = Path.of(System.getProperty(\"user.home\"), \".ssh\");\n+        if (!Files.isDirectory(cfgPath)) {\n+            try {\n+                Files.createDirectories(cfgPath);\n+            } catch (IOException ignored) {\n+            }\n+        }\n+\n+        var cfgFile = cfgPath.resolve(\"config\");\n+        var existing = \"\";\n+        try {\n+            existing = Files.readString(cfgFile, StandardCharsets.UTF_8);\n+        } catch (IOException ignored) {\n+        }\n+\n+        var userHost = userName + \".\" + hostName;\n+        var existingBlock = Pattern.compile(\"^Match host \" + Pattern.quote(userHost) + \"(?:\\\\R[ \\\\t]+.*)+\", Pattern.MULTILINE);\n+        var existingMatcher = existingBlock.matcher(existing);\n+        var filtered = existingMatcher.replaceAll(\"\");\n+        var result = \"Match host \" + userHost + \"\\n\" +\n+                \"  Hostname \" + hostName + \"\\n\" +\n+                \"  PreferredAuthentications publickey\\n\" +\n+                \"  StrictHostKeyChecking no\\n\" +\n+                \"  IdentityFile \" + sshKeyFile + \"\\n\" +\n+                \"\\n\";\n+\n+        try {\n+            Files.writeString(cfgFile, result + filtered.strip() + \"\\n\", StandardCharsets.UTF_8);\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+}\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/internal\/ForgeUtils.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"}]}