{"files":[{"patch":"@@ -1,51 +0,0 @@\n-package org.openjdk.skara.forge;\n-\n-import java.io.IOException;\n-import java.io.UncheckedIOException;\n-import java.nio.charset.StandardCharsets;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.util.regex.Pattern;\n-\n-public class ForgeUtils {\n-\n-    \/**\n-     * Adds a special ssh key configuration in the user's ssh config file.\n-     * The config will only apply to the fake host userName.hostName so should\n-     * not interfere with other user configurations. The caller of this method\n-     * needs to use userName.hostName as host name when calling ssh.\n-     *\/\n-    public static void configureSshKey(String userName, String hostName, String sshKeyFile) {\n-        var cfgPath = Path.of(System.getProperty(\"user.home\"), \".ssh\");\n-        if (!Files.isDirectory(cfgPath)) {\n-            try {\n-                Files.createDirectories(cfgPath);\n-            } catch (IOException ignored) {\n-            }\n-        }\n-\n-        var cfgFile = cfgPath.resolve(\"config\");\n-        var existing = \"\";\n-        try {\n-            existing = Files.readString(cfgFile, StandardCharsets.UTF_8);\n-        } catch (IOException ignored) {\n-        }\n-\n-        var userHost = userName + \".\" + hostName;\n-        var existingBlock = Pattern.compile(\"^Match host \" + Pattern.quote(userHost) + \"(?:\\\\R[ \\\\t]+.*)+\", Pattern.MULTILINE);\n-        var existingMatcher = existingBlock.matcher(existing);\n-        var filtered = existingMatcher.replaceAll(\"\");\n-        var result = \"Match host \" + userHost + \"\\n\" +\n-                \"  Hostname \" + hostName + \"\\n\" +\n-                \"  PreferredAuthentications publickey\\n\" +\n-                \"  StrictHostKeyChecking no\\n\" +\n-                \"  IdentityFile \" + sshKeyFile + \"\\n\" +\n-                \"\\n\";\n-\n-        try {\n-            Files.writeString(cfgFile, result + filtered.strip() + \"\\n\", StandardCharsets.UTF_8);\n-        } catch (IOException e) {\n-            throw new UncheckedIOException(e);\n-        }\n-    }\n-}\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/ForgeUtils.java","additions":0,"deletions":51,"binary":false,"changes":51,"status":"deleted"},{"patch":"@@ -0,0 +1,22 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n@@ -7,1 +29,1 @@\n-import org.openjdk.skara.forge.ForgeUtils;\n+import org.openjdk.skara.forge.internal.ForgeUtils;\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/bitbucket\/BitbucketForgeFactory.java","additions":23,"deletions":1,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -0,0 +1,22 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/bitbucket\/BitbucketHost.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -0,0 +1,22 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/bitbucket\/BitbucketRepository.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-import org.openjdk.skara.forge.ForgeUtils;\n+import org.openjdk.skara.forge.internal.ForgeUtils;\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabForgeFactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.forge.internal;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.regex.Pattern;\n+\n+public class ForgeUtils {\n+\n+    \/**\n+     * Adds a special ssh key configuration in the user's ssh config file.\n+     * The config will only apply to the fake host userName.hostName so should\n+     * not interfere with other user configurations. The caller of this method\n+     * needs to use userName.hostName as host name when calling ssh.\n+     *\/\n+    public static void configureSshKey(String userName, String hostName, String sshKeyFile) {\n+        var cfgPath = Path.of(System.getProperty(\"user.home\"), \".ssh\");\n+        if (!Files.isDirectory(cfgPath)) {\n+            try {\n+                Files.createDirectories(cfgPath);\n+            } catch (IOException ignored) {\n+            }\n+        }\n+\n+        var cfgFile = cfgPath.resolve(\"config\");\n+        var existing = \"\";\n+        try {\n+            existing = Files.readString(cfgFile, StandardCharsets.UTF_8);\n+        } catch (IOException ignored) {\n+        }\n+\n+        var userHost = userName + \".\" + hostName;\n+        var existingBlock = Pattern.compile(\"^Match host \" + Pattern.quote(userHost) + \"(?:\\\\R[ \\\\t]+.*)+\", Pattern.MULTILINE);\n+        var existingMatcher = existingBlock.matcher(existing);\n+        var filtered = existingMatcher.replaceAll(\"\");\n+        var result = \"Match host \" + userHost + \"\\n\" +\n+                \"  Hostname \" + hostName + \"\\n\" +\n+                \"  PreferredAuthentications publickey\\n\" +\n+                \"  StrictHostKeyChecking no\\n\" +\n+                \"  IdentityFile \" + sshKeyFile + \"\\n\" +\n+                \"\\n\";\n+\n+        try {\n+            Files.writeString(cfgFile, result + filtered.strip() + \"\\n\", StandardCharsets.UTF_8);\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+}\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/internal\/ForgeUtils.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"}]}