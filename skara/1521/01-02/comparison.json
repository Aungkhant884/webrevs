{"files":[{"patch":"@@ -34,0 +34,1 @@\n+\n@@ -51,1 +52,4 @@\n-        if (configuration != null && configuration.contains(\"sshkey\") && credential != null) {\n+        if (configuration != null && configuration.contains(\"sshkey\")) {\n+            if (credential == null) {\n+                throw new RuntimeException(\"Cannot use SSH without credentials\");\n+            }\n@@ -55,1 +59,1 @@\n-        int sshport = 22;\n+        int sshport = BitbucketHost.DEFAULT_SSH_PORT;\n@@ -59,5 +63,1 @@\n-        if (credential != null) {\n-            return new BitbucketHost(name, uri, useSsh, sshport, credential);\n-        } else {\n-            return new BitbucketHost(name, uri, useSsh, sshport);\n-        }\n+        return new BitbucketHost(name, uri, useSsh, sshport, credential);\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/bitbucket\/BitbucketForgeFactory.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+    public static final int DEFAULT_SSH_PORT = 22;\n@@ -49,8 +50,0 @@\n-    public BitbucketHost(String name, URI uri, boolean useSsh, int sshPort) {\n-        this.name = name;\n-        this.uri = uri;\n-        this.useSsh = useSsh;\n-        this.sshPort = sshPort;\n-        this.credential = null;\n-    }\n-\n@@ -70,1 +63,1 @@\n-        return credential.username() + \".\" + uri.getHost() + ((sshPort != 22) ? \":\" + sshPort : \"\");\n+        return credential.username() + \".\" + uri.getHost() + ((sshPort != DEFAULT_SSH_PORT) ? \":\" + sshPort : \"\");\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/bitbucket\/BitbucketHost.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -51,2 +51,2 @@\n-    private final BitbucketHost bitbucketHost;\n-    private final String repositoryName;\n+    private final BitbucketHost host;\n+    private final String name;\n@@ -54,3 +54,3 @@\n-    public BitbucketRepository(BitbucketHost bitbucketHost, String repositoryName) {\n-        this.bitbucketHost = bitbucketHost;\n-        this.repositoryName = repositoryName;\n+    public BitbucketRepository(BitbucketHost host, String name) {\n+        this.host = host;\n+        this.name = name;\n@@ -61,1 +61,1 @@\n-        return bitbucketHost;\n+        return host;\n@@ -106,1 +106,1 @@\n-        return repositoryName;\n+        return name;\n@@ -116,2 +116,2 @@\n-        if (bitbucketHost.useSsh()) {\n-            return URI.create(\"ssh:\/\/git@\" + bitbucketHost.sshHostString() + \"\/\" + repositoryName + \".git\");\n+        if (host.useSsh()) {\n+            return URI.create(\"ssh:\/\/git@\" + host.sshHostString() + \"\/\" + name + \".git\");\n@@ -120,3 +120,3 @@\n-                    .base(bitbucketHost.getUri())\n-                    .setPath(\"\/\" + repositoryName + \".git\");\n-            bitbucketHost.getCredential().ifPresent(cred -> builder.setAuthentication(cred.username() + \":\" + cred.password()));\n+                    .base(host.getUri())\n+                    .setPath(\"\/\" + name + \".git\");\n+            host.getCredential().ifPresent(cred -> builder.setAuthentication(cred.username() + \":\" + cred.password()));\n@@ -184,1 +184,1 @@\n-        return URIBuilder.base(bitbucketHost.getUri()).build().getHost();\n+        return URIBuilder.base(host.getUri()).build().getHost();\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/bitbucket\/BitbucketRepository.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"}]}