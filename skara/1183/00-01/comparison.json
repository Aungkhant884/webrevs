{"files":[{"patch":"@@ -28,0 +28,1 @@\n+import org.openjdk.skara.vcs.Repository;\n@@ -41,1 +42,1 @@\n-    private final Logger log = Logger.getLogger(\"org.openjdk.skara.bots.pr\");\n+    private final static Logger log = Logger.getLogger(\"org.openjdk.skara.bots.pr\");\n@@ -115,31 +116,4 @@\n-        var botUser = pr.repository().forge().currentUser();\n-\n-        \/\/ Check if a prepush comment has been created already. This could happen if\n-        \/\/ the bot got interrupted after pushing, but before finishing closing the PR\n-        \/\/ and adding the final push comment.\n-        var prePushHashes = allComments.stream()\n-                .filter(c -> c.author().equals(botUser))\n-                .map(Comment::body)\n-                .map(PRE_PUSH_PATTERN::matcher)\n-                .filter(Matcher::find)\n-                .map(m -> m.group(1))\n-                .collect(Collectors.toList());\n-        if (!prePushHashes.isEmpty()) {\n-            var path = scratchPath.resolve(\"integrate\").resolve(pr.repository().name());\n-            var seedPath = bot.seedStorage().orElse(scratchPath.resolve(\"seeds\"));\n-            var hostedRepositoryPool = new HostedRepositoryPool(seedPath);\n-            try {\n-                var localRepo = PullRequestUtils.materialize(hostedRepositoryPool, pr, path);\n-                for (String prePushHash : prePushHashes) {\n-                    Hash hash = new Hash(prePushHash);\n-                    if (PullRequestUtils.isAncestorOfTarget(localRepo, hash)) {\n-                        \/\/ A previous attempt at pushing this PR was successful, but didn't finish\n-                        \/\/ closing the PR\n-                        log.info(\"Found previous successful push in prepush comment: \" + hash.hex());\n-                        markIntegratedAndClosed(pr, hash, reply);\n-                        return;\n-                    }\n-                }\n-            } catch (IOException e) {\n-                throw new UncheckedIOException(e);\n-            }\n+        Optional<Hash> prepushHash = checkForPrePushHash(bot, pr, scratchPath, allComments, \"integrate\");\n+        if (prepushHash.isPresent()) {\n+            markIntegratedAndClosed(pr, prepushHash.get(), reply);\n+            return;\n@@ -172,4 +146,1 @@\n-            var path = scratchPath.resolve(\"integrate\").resolve(pr.repository().name());\n-            var seedPath = bot.seedStorage().orElse(scratchPath.resolve(\"seeds\"));\n-            var hostedRepositoryPool = new HostedRepositoryPool(seedPath);\n-            var localRepo = PullRequestUtils.materialize(hostedRepositoryPool, pr, path);\n+            Repository localRepo = materializeLocalRepo(bot, pr, scratchPath, \"integrate\");\n@@ -196,1 +167,2 @@\n-            var backportLines = allComments\n+            var botUser = pr.repository().forge().currentUser();\n+            var backportLines = pr.comments()\n@@ -247,1 +219,45 @@\n-    private void addPrePushComment(PullRequest pr, Hash hash, String extraMessage) {\n+    static Repository materializeLocalRepo(PullRequestBot bot, PullRequest pr, Path scratchPath, String subdir) throws IOException {\n+        var path = scratchPath.resolve(subdir).resolve(pr.repository().name());\n+        var seedPath = bot.seedStorage().orElse(scratchPath.resolve(\"seeds\"));\n+        var hostedRepositoryPool = new HostedRepositoryPool(seedPath);\n+        return PullRequestUtils.materialize(hostedRepositoryPool, pr, path);\n+    }\n+\n+    \/**\n+     * Checks if a prepush comment has been created already. This could happen if\n+     * the bot got interrupted after pushing, but before finishing closing the PR\n+     * and adding the final push comment.\n+     *\/\n+    static Optional<Hash> checkForPrePushHash(PullRequestBot bot, PullRequest pr, Path scratchPath,\n+                                              List<Comment> allComments, String subdir) {\n+        var botUser = pr.repository().forge().currentUser();\n+        var prePushHashes = allComments.stream()\n+                .filter(c -> c.author().equals(botUser))\n+                .map(Comment::body)\n+                .map(PRE_PUSH_PATTERN::matcher)\n+                .filter(Matcher::find)\n+                .map(m -> m.group(1))\n+                .collect(Collectors.toList());\n+        if (!prePushHashes.isEmpty()) {\n+            var path = scratchPath.resolve(\"integrate\").resolve(pr.repository().name());\n+            var seedPath = bot.seedStorage().orElse(scratchPath.resolve(\"seeds\"));\n+            var hostedRepositoryPool = new HostedRepositoryPool(seedPath);\n+            try {\n+                var localRepo = materializeLocalRepo(bot, pr, scratchPath, subdir);\n+                for (String prePushHash : prePushHashes) {\n+                    Hash hash = new Hash(prePushHash);\n+                    if (PullRequestUtils.isAncestorOfTarget(localRepo, hash)) {\n+                        \/\/ A previous attempt at pushing this PR was successful, but didn't finish\n+                        \/\/ closing the PR\n+                        log.info(\"Found previous successful push in prepush comment: \" + hash.hex());\n+                        return Optional.of(hash);\n+                    }\n+                }\n+            } catch (IOException e) {\n+                throw new UncheckedIOException(e);\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    static void addPrePushComment(PullRequest pr, Hash hash, String extraMessage) {\n@@ -258,1 +274,1 @@\n-    private void markIntegratedAndClosed(PullRequest pr, Hash hash, PrintWriter reply) {\n+    static void markIntegratedAndClosed(PullRequest pr, Hash hash, PrintWriter reply) {\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/IntegrateCommand.java","additions":55,"deletions":39,"binary":false,"changes":94,"status":"modified"},{"patch":"@@ -55,0 +55,6 @@\n+        Optional<Hash> prePushHash = IntegrateCommand.checkForPrePushHash(bot, pr, scratchPath, allComments, \"sponsor\");\n+        if (prePushHash.isPresent()) {\n+            markIntegratedAndClosed(pr, prePushHash.get(), reply);\n+            return;\n+        }\n+\n@@ -88,4 +94,1 @@\n-            var path = scratchPath.resolve(\"sponsor\").resolve(pr.repository().name());\n-            var seedPath = bot.seedStorage().orElse(scratchPath.resolve(\"seeds\"));\n-            var hostedRepositoryPool = new HostedRepositoryPool(seedPath);\n-            var localRepo = PullRequestUtils.materialize(hostedRepositoryPool, pr, path);\n+            var localRepo = IntegrateCommand.materializeLocalRepo(bot, pr, scratchPath, \"sponsor\");\n@@ -98,1 +101,0 @@\n-            var rebaseMessage = new StringWriter();\n@@ -109,0 +111,1 @@\n+            var rebaseMessage = new StringWriter();\n@@ -142,0 +145,1 @@\n+                IntegrateCommand.addPrePushComment(pr, amendedHash, rebaseMessage.toString());\n@@ -143,12 +147,1 @@\n-                var finalRebaseMessage = rebaseMessage.toString();\n-                if (!finalRebaseMessage.isBlank()) {\n-                    reply.println(rebaseMessage.toString());\n-                }\n-                reply.println(\"Pushed as commit \" + amendedHash.hex() + \".\");\n-                reply.println();\n-                reply.println(\":bulb: You may see a message that your pull request was closed with unmerged commits. This can be safely ignored.\");\n-                pr.setState(PullRequest.State.CLOSED);\n-                pr.addLabel(\"integrated\");\n-                pr.removeLabel(\"sponsor\");\n-                pr.removeLabel(\"ready\");\n-                pr.removeLabel(\"rfr\");\n+                markIntegratedAndClosed(pr, amendedHash, reply);\n@@ -167,0 +160,5 @@\n+    private void markIntegratedAndClosed(PullRequest pr, Hash amendedHash, PrintWriter reply) {\n+        IntegrateCommand.markIntegratedAndClosed(pr, amendedHash, reply);\n+        pr.removeLabel(\"sponsor\");\n+    }\n+\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/SponsorCommand.java","additions":15,"deletions":17,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import org.openjdk.skara.issuetracker.Issue;\n@@ -1148,1 +1149,3 @@\n-            \/\/ Remove some labels and the commit comment to simulate that last attempt was interrupted\n+            \/\/ Simulate that interruption occurred after prePush comment was added, but before change was\n+            \/\/ pushed\n+            pr.setState(Issue.State.OPEN);\n@@ -1156,0 +1159,1 @@\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n@@ -1169,1 +1173,5 @@\n-            \/\/ Just remove the commit comment and repeat the test\n+            \/\/ Remove some labels and the commit comment to simulate that last attempt was interrupted\n+            \/\/ after the push was made and the PR was closed\n+            pr.removeLabel(\"integrated\");\n+            pr.addLabel(\"ready\");\n+            pr.addLabel(\"rfr\");\n@@ -1171,1 +1179,1 @@\n-                    .filter(comment -> comment.body().equals(commitComment.body()))\n+                    .filter(comment -> comment.body().contains(\"Pushed as commit\"))\n@@ -1187,0 +1195,18 @@\n+            \/\/ Simulate that interruption happened just before the commit comment was added\n+            var commitComment3 = pr.comments().stream()\n+                    .filter(comment -> comment.body().equals(commitComment2.body()))\n+                    .findAny().orElseThrow();\n+            ((TestPullRequest) pr).removeComment(commitComment3);\n+\n+            \/\/ The bot should now retry\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+\n+            \/\/ The bot should reply with an ok message\n+            pushed = pr.comments().stream()\n+                    .filter(comment -> comment.body().contains(\"Pushed as commit\"))\n+                    .count();\n+            assertEquals(1, pushed, \"Commit comment not found\");\n+            assertFalse(pr.labelNames().contains(\"ready\"), \"ready label not removed\");\n+            assertFalse(pr.labelNames().contains(\"rfr\"), \"rfr label not removed\");\n+            assertTrue(pr.labelNames().contains(\"integrated\"), \"integrated label not added\");\n+\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/IntegrateTests.java","additions":29,"deletions":3,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+import org.openjdk.skara.issuetracker.Issue;\n@@ -383,0 +384,5 @@\n+            var prePush = pr.comments().stream()\n+                    .filter(comment -> comment.body().contains(\"Going to push as commit\"))\n+                    .filter(comment -> comment.body().contains(\"commit was automatically rebased without conflicts\"))\n+                    .count();\n+            assertEquals(1, prePush);\n@@ -384,3 +390,2 @@\n-                           .filter(comment -> comment.body().contains(\"Pushed as commit\"))\n-                           .filter(comment -> comment.body().contains(\"commit was automatically rebased without conflicts\"))\n-                           .count();\n+                    .filter(comment -> comment.body().contains(\"Pushed as commit\"))\n+                    .count();\n@@ -769,0 +774,140 @@\n+    \/**\n+     * Tests recovery after successfully pushing the commit, but failing to update the PR\n+     *\/\n+    @Test\n+    void retryAfterInterrupt(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+\n+            var author = credentials.getHostedRepository();\n+            var integrator = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addReviewer(reviewer.forge().currentUser().id())\n+                    .addAuthor(author.forge().currentUser().id());\n+\n+            var censusRepo = censusBuilder.build();\n+            var mergeBot = PullRequestBot.newBuilder().repo(integrator).censusRepo(censusRepo).build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var authorFullName = author.forge().currentUser().fullName();\n+            var authorEmail = \"ta@none.none\";\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, \"This is a new line\", \"Append commit\", authorFullName, authorEmail);\n+            localRepo.push(editHash, author.url(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"This is a pull request\");\n+\n+            \/\/ Approve it as another user\n+            var approvalPr = reviewer.pullRequest(pr.id());\n+            approvalPr.addReview(Review.Verdict.APPROVED, \"Approved\");\n+\n+            \/\/ Let the bot check it\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+\n+            \/\/ Issue a merge command without being a Committer\n+            pr.addComment(\"\/integrate\");\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+\n+            \/\/ The bot should reply that a sponsor is required\n+            var sponsor = pr.comments().stream()\n+                    .filter(comment -> comment.body().contains(\"sponsor\"))\n+                    .filter(comment -> comment.body().contains(\"your change\"))\n+                    .count();\n+            assertEquals(1, sponsor);\n+\n+            \/\/ The bot should not have pushed the commit\n+            var notPushed = pr.comments().stream()\n+                    .filter(comment -> comment.body().contains(\"Pushed as commit\"))\n+                    .count();\n+            assertEquals(0, notPushed);\n+\n+            \/\/ Reviewer now agrees to sponsor\n+            var reviewerPr = reviewer.pullRequest(pr.id());\n+            reviewerPr.addComment(\"\/sponsor\");\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+\n+            \/\/ Simulate that interruption occurred after prePush comment was added, but before change was\n+            \/\/ pushed\n+            pr.setState(Issue.State.OPEN);\n+            pr.removeLabel(\"integrated\");\n+            pr.addLabel(\"ready\");\n+            pr.addLabel(\"rfr\");\n+            pr.addLabel(\"sponsor\");\n+            var commitComment = pr.comments().stream()\n+                    .filter(comment -> comment.body().contains(\"Pushed as commit\"))\n+                    .findAny().orElseThrow();\n+            ((TestPullRequest) pr).removeComment(commitComment);\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ The bot should now retry\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+\n+            \/\/ The bot should reply with an ok message\n+            var pushed = pr.comments().stream()\n+                    .filter(comment -> comment.body().contains(\"Pushed as commit\"))\n+                    .count();\n+            assertEquals(1, pushed, \"Commit comment not found\");\n+            assertFalse(pr.labelNames().contains(\"ready\"), \"ready label not removed\");\n+            assertFalse(pr.labelNames().contains(\"rfr\"), \"rfr label not removed\");\n+            assertFalse(pr.labelNames().contains(\"sponsor\"), \"sponsor label not removed\");\n+            assertTrue(pr.labelNames().contains(\"integrated\"), \"integrated label not added\");\n+\n+            \/\/ Remove some labels and the commit comment to simulate that last attempt was interrupted\n+            \/\/ after the push was made and the PR was closed\n+            pr.removeLabel(\"integrated\");\n+            pr.addLabel(\"ready\");\n+            pr.addLabel(\"rfr\");\n+            pr.addLabel(\"sponsor\");\n+            var commitComment2 = pr.comments().stream()\n+                    .filter(comment -> comment.body().contains(\"Pushed as commit\"))\n+                    .findAny().orElseThrow();\n+            ((TestPullRequest) pr).removeComment(commitComment2);\n+\n+            \/\/ The bot should now retry\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+\n+            \/\/ The bot should reply with an ok message\n+            pushed = pr.comments().stream()\n+                    .filter(comment -> comment.body().contains(\"Pushed as commit\"))\n+                    .count();\n+            assertEquals(1, pushed, \"Commit comment not found\");\n+            assertFalse(pr.labelNames().contains(\"ready\"), \"ready label not removed\");\n+            assertFalse(pr.labelNames().contains(\"rfr\"), \"rfr label not removed\");\n+            assertFalse(pr.labelNames().contains(\"sponsor\"), \"sponsor label not removed\");\n+            assertTrue(pr.labelNames().contains(\"integrated\"), \"integrated label not added\");\n+\n+            \/\/ Simulate that interruption happened just before the commit comment was added\n+            var commitComment3 = pr.comments().stream()\n+                    .filter(comment -> comment.body().contains(\"Pushed as commit\"))\n+                    .findAny().orElseThrow();\n+            ((TestPullRequest) pr).removeComment(commitComment3);\n+\n+            \/\/ The bot should now retry\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+\n+            \/\/ The bot should reply with an ok message\n+            pushed = pr.comments().stream()\n+                    .filter(comment -> comment.body().contains(\"Pushed as commit\"))\n+                    .count();\n+            assertEquals(1, pushed, \"Commit comment not found\");\n+            assertFalse(pr.labelNames().contains(\"ready\"), \"ready label not removed\");\n+            assertFalse(pr.labelNames().contains(\"rfr\"), \"rfr label not removed\");\n+            assertFalse(pr.labelNames().contains(\"sponsor\"), \"sponsor label not removed\");\n+            assertTrue(pr.labelNames().contains(\"integrated\"), \"integrated label not added\");\n+\n+            \/\/ Add another command and verify that no further action is taken\n+            pr.addComment(\"\/integrate\");\n+            var numComments = pr.comments().size();\n+\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+\n+            assertTrue(pr.comments().get(pr.comments().size() - 1).body()\n+                    .contains(\"can only be used in open pull requests\"));\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/SponsorTests.java","additions":148,"deletions":3,"binary":false,"changes":151,"status":"modified"}]}