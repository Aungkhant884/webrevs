{"files":[{"patch":"@@ -43,0 +43,2 @@\n+    private static final String PRE_PUSH_MARKER = \"<!-- prepush %s -->\";\n+    private static final Pattern PRE_PUSH_PATTERN = Pattern.compile(\"<!-- prepush ([0-9a-z]{40}) -->\");\n@@ -113,0 +115,33 @@\n+        var botUser = pr.repository().forge().currentUser();\n+\n+        \/\/ Check if a prepush comment has been created already. This could happen if\n+        \/\/ the bot got interrupted after pushing, but before finishing closing the PR\n+        \/\/ and adding the final push comment.\n+        var prePushHashes = allComments.stream()\n+                .filter(c -> c.author().equals(botUser))\n+                .map(Comment::body)\n+                .map(PRE_PUSH_PATTERN::matcher)\n+                .filter(Matcher::find)\n+                .map(m -> m.group(1))\n+                .collect(Collectors.toList());\n+        if (!prePushHashes.isEmpty()) {\n+            var path = scratchPath.resolve(\"integrate\").resolve(pr.repository().name());\n+            var seedPath = bot.seedStorage().orElse(scratchPath.resolve(\"seeds\"));\n+            var hostedRepositoryPool = new HostedRepositoryPool(seedPath);\n+            try {\n+                var localRepo = PullRequestUtils.materialize(hostedRepositoryPool, pr, path);\n+                for (String prePushHash : prePushHashes) {\n+                    Hash hash = new Hash(prePushHash);\n+                    if (PullRequestUtils.isAncestorOfTarget(localRepo, hash)) {\n+                        \/\/ A previous attempt at pushing this PR was successful, but didn't finish\n+                        \/\/ closing the PR\n+                        log.info(\"Found previous successful push in prepush comment: \" + hash.hex());\n+                        markIntegratedAndClosed(pr, hash, reply);\n+                        return;\n+                    }\n+                }\n+            } catch (IOException e) {\n+                throw new UncheckedIOException(e);\n+            }\n+        }\n+\n@@ -127,1 +162,0 @@\n-        var success = false;\n@@ -162,2 +196,1 @@\n-            var botUser = pr.repository().forge().currentUser();\n-            var backportLines = pr.comments()\n+            var backportLines = allComments\n@@ -199,0 +232,1 @@\n+                addPrePushComment(pr, amendedHash, rebaseMessage.toString());\n@@ -200,13 +234,1 @@\n-                success = true;\n-\n-                var finalRebaseMessage = rebaseMessage.toString();\n-                if (!finalRebaseMessage.isBlank()) {\n-                    reply.println(rebaseMessage.toString());\n-                }\n-                reply.println(\"Pushed as commit \" + amendedHash.hex() + \".\");\n-                reply.println();\n-                reply.println(\":bulb: You may see a message that your pull request was closed with unmerged commits. This can be safely ignored.\");\n-                pr.setState(PullRequest.State.CLOSED);\n-                pr.addLabel(\"integrated\");\n-                pr.removeLabel(\"ready\");\n-                pr.removeLabel(\"rfr\");\n+                markIntegratedAndClosed(pr, amendedHash, reply);\n@@ -225,0 +247,21 @@\n+    private void addPrePushComment(PullRequest pr, Hash hash, String extraMessage) {\n+        var commentBody = new StringWriter();\n+        var writer = new PrintWriter(commentBody);\n+        writer.println(PRE_PUSH_MARKER.formatted(hash.hex()));\n+        writer.println(\"Going to push as commit \" + hash.hex() + \".\");\n+        if (!extraMessage.isBlank()) {\n+            writer.println(extraMessage);\n+        }\n+        pr.addComment(commentBody.toString());\n+    }\n+\n+    private void markIntegratedAndClosed(PullRequest pr, Hash hash, PrintWriter reply) {\n+        pr.setState(PullRequest.State.CLOSED);\n+        pr.addLabel(\"integrated\");\n+        pr.removeLabel(\"ready\");\n+        pr.removeLabel(\"rfr\");\n+        reply.println(\"Pushed as commit \" + hash.hex() + \".\");\n+        reply.println();\n+        reply.println(\":bulb: You may see a message that your pull request was closed with unmerged commits. This can be safely ignored.\");\n+    }\n+\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/IntegrateCommand.java","additions":59,"deletions":16,"binary":false,"changes":75,"status":"modified"},{"patch":"@@ -226,1 +226,4 @@\n-        if (!pr.labelNames().contains(\"integrated\")) {\n+        \/\/ We can't trust just the integrated label as that gets set before the commit comment.\n+        \/\/ If marked as integrated but there is no commit comment, any integrate command needs\n+        \/\/ to run again to correct the state of the PR.\n+        if (!pr.labelNames().contains(\"integrated\") || resultingCommitHash(comments).isEmpty()) {\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestCommandWorkItem.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import org.openjdk.skara.vcs.Branch;\n@@ -533,2 +534,2 @@\n-            var pushed = pr.comments().stream()\n-                           .filter(comment -> comment.body().contains(\"Pushed as commit\"))\n+            var prePush = pr.comments().stream()\n+                           .filter(comment -> comment.body().contains(\"Going to push as commit\"))\n@@ -537,0 +538,4 @@\n+            assertEquals(1, prePush);\n+            var pushed = pr.comments().stream()\n+                    .filter(comment -> comment.body().contains(\"Pushed as commit\"))\n+                    .count();\n@@ -1101,0 +1106,167 @@\n+\n+    \/**\n+     * Tests recovery after successfully pushing the commit, but failing to update the PR\n+     *\/\n+    @Test\n+    void retryAfterInterrupt(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory();\n+             var censusFolder = new TemporaryDirectory()) {\n+\n+            var author = credentials.getHostedRepository();\n+            var integrator = credentials.getHostedRepository();\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addCommitter(author.forge().currentUser().id())\n+                    .addReviewer(integrator.forge().currentUser().id());\n+            var censusRepo = censusBuilder.build();\n+            var mergeBot = PullRequestBot.newBuilder().repo(integrator).censusRepo(censusRepo).build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"refs\/heads\/edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"This is a pull request\");\n+\n+            \/\/ Approve it as another user\n+            var approvalPr = integrator.pullRequest(pr.id());\n+            approvalPr.addReview(Review.Verdict.APPROVED, \"Approved\");\n+\n+            \/\/ Let the bot check it\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+\n+            \/\/ Attempt a merge\n+            pr.addComment(\"\/integrate\");\n+\n+            \/\/ Let it integrate\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+\n+            \/\/ Remove some labels and the commit comment to simulate that last attempt was interrupted\n+            pr.removeLabel(\"integrated\");\n+            pr.addLabel(\"ready\");\n+            pr.addLabel(\"rfr\");\n+            var commitComment = pr.comments().stream()\n+                    .filter(comment -> comment.body().contains(\"Pushed as commit\"))\n+                    .findAny().orElseThrow();\n+            ((TestPullRequest) pr).removeComment(commitComment);\n+\n+            \/\/ The bot should now retry\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+\n+            \/\/ The bot should reply with an ok message\n+            var pushed = pr.comments().stream()\n+                    .filter(comment -> comment.body().contains(\"Pushed as commit\"))\n+                    .count();\n+            assertEquals(1, pushed, \"Commit comment not found\");\n+            assertFalse(pr.labelNames().contains(\"ready\"), \"ready label not removed\");\n+            assertFalse(pr.labelNames().contains(\"rfr\"), \"rfr label not removed\");\n+            assertTrue(pr.labelNames().contains(\"integrated\"), \"integrated label not added\");\n+\n+            \/\/ Just remove the commit comment and repeat the test\n+            var commitComment2 = pr.comments().stream()\n+                    .filter(comment -> comment.body().equals(commitComment.body()))\n+                    .findAny().orElseThrow();\n+            ((TestPullRequest) pr).removeComment(commitComment2);\n+\n+            \/\/ The bot should now retry\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+\n+            \/\/ The bot should reply with an ok message\n+            pushed = pr.comments().stream()\n+                    .filter(comment -> comment.body().contains(\"Pushed as commit\"))\n+                    .count();\n+            assertEquals(1, pushed, \"Commit comment not found\");\n+            assertFalse(pr.labelNames().contains(\"ready\"), \"ready label not removed\");\n+            assertFalse(pr.labelNames().contains(\"rfr\"), \"rfr label not removed\");\n+            assertTrue(pr.labelNames().contains(\"integrated\"), \"integrated label not added\");\n+\n+            \/\/ Add another command and verify that no further action is taken\n+            pr.addComment(\"\/integrate\");\n+            var numComments = pr.comments().size();\n+\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+\n+            assertTrue(pr.comments().get(pr.comments().size() - 1).body()\n+                    .contains(\"can only be used in open pull requests\"));\n+        }\n+    }\n+\n+    \/**\n+     * Tests recovery after successfully pushing the commit, but failing to update the PR,\n+     * and an extra commit has been integrated to the target before retrying.\n+     *\/\n+    @Test\n+    void retryAfterInterruptExtraChange(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory();\n+             var censusFolder = new TemporaryDirectory()) {\n+\n+            var author = credentials.getHostedRepository();\n+            var integrator = credentials.getHostedRepository();\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addCommitter(author.forge().currentUser().id())\n+                    .addReviewer(integrator.forge().currentUser().id());\n+            var censusRepo = censusBuilder.build();\n+            var mergeBot = PullRequestBot.newBuilder().repo(integrator).censusRepo(censusRepo).build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editBranch = localRepo.branch(masterHash, \"edit\");\n+            localRepo.checkout(editBranch);\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"refs\/heads\/edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"This is a pull request\");\n+\n+            \/\/ Approve it as another user\n+            var approvalPr = integrator.pullRequest(pr.id());\n+            approvalPr.addReview(Review.Verdict.APPROVED, \"Approved\");\n+\n+            \/\/ Let the bot check it\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+\n+            \/\/ Attempt a merge\n+            pr.addComment(\"\/integrate\");\n+\n+            \/\/ Let it integrate\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+\n+            \/\/ Remove some labels and the commit comment to simulate that last attempt was interrupted\n+            pr.removeLabel(\"integrated\");\n+            pr.addLabel(\"ready\");\n+            pr.addLabel(\"rfr\");\n+            var commitComment = pr.comments().stream()\n+                    .filter(comment -> comment.body().contains(\"Pushed as commit\"))\n+                    .findAny().orElseThrow();\n+            ((TestPullRequest) pr).removeComment(commitComment);\n+\n+            \/\/ Add a new commit to master branch\n+            localRepo.checkout(new Branch(\"master\"));\n+            localRepo.fetch(author.url(), \"master\");\n+            localRepo.merge(new Branch(\"FETCH_HEAD\"));\n+            var integratedHash = localRepo.resolve(\"master\");\n+            var newMasterHash = CheckableRepository.appendAndCommit(localRepo, \"Another line\",\n+                    \"New master commit\");\n+            localRepo.push(newMasterHash, author.url(), \"master\", true);\n+\n+            \/\/ The bot should now retry\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+\n+            \/\/ The bot should reply with an ok message\n+            var pushed = pr.comments().stream()\n+                    .filter(comment -> comment.body().contains(\"Pushed as commit \" + integratedHash.orElseThrow()))\n+                    .count();\n+            assertEquals(1, pushed, \"Commit comment not found\");\n+            assertFalse(pr.labelNames().contains(\"ready\"), \"ready label not removed\");\n+            assertFalse(pr.labelNames().contains(\"rfr\"), \"rfr label not removed\");\n+            assertTrue(pr.labelNames().contains(\"integrated\"), \"integrated label not added\");\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/IntegrateTests.java","additions":174,"deletions":2,"binary":false,"changes":176,"status":"modified"},{"patch":"@@ -166,0 +166,5 @@\n+    public static boolean isAncestorOfTarget(Repository localRepo, Hash hash) throws IOException {\n+        Optional<Hash> targetHash = localRepo.resolve(\"prutils_targetref\");\n+        return localRepo.isAncestor(hash, targetHash.orElseThrow());\n+    }\n+\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/PullRequestUtils.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import org.openjdk.skara.issuetracker.Comment;\n@@ -265,0 +266,4 @@\n+\n+    public void removeComment(Comment comment) {\n+        data.comments.remove(comment);\n+    }\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestPullRequest.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}