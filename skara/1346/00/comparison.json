{"files":[{"patch":"@@ -25,0 +25,1 @@\n+import java.util.List;\n@@ -51,0 +52,1 @@\n+        List<String> altwebUriReplacements = List.of();\n@@ -56,2 +58,8 @@\n-                webUriPattern = Pattern.compile(configuration.get(\"weburl\").get(\"pattern\").asString());\n-                webUriReplacement = configuration.get(\"weburl\").get(\"replacement\").asString();\n+                var weburl = configuration.get(\"weburl\");\n+                webUriPattern = Pattern.compile(weburl.get(\"pattern\").asString());\n+                webUriReplacement = weburl.get(\"replacement\").asString();\n+                if (weburl.contains(\"altreplacements\")) {\n+                    altwebUriReplacements = weburl.get(\"altreplacements\").asArray().stream()\n+                            .map(JSONValue::asString)\n+                            .toList();\n+                }\n@@ -78,1 +86,1 @@\n-                return new GitHubHost(uri, app, webUriPattern, webUriReplacement, orgs);\n+                return new GitHubHost(uri, app, webUriPattern, webUriReplacement, altwebUriReplacements, orgs);\n@@ -80,1 +88,1 @@\n-                return new GitHubHost(uri, credential, webUriPattern, webUriReplacement, orgs);\n+                return new GitHubHost(uri, credential, webUriPattern, webUriReplacement, altwebUriReplacements, orgs);\n@@ -83,1 +91,1 @@\n-            return new GitHubHost(uri, webUriPattern, webUriReplacement, orgs, offline);\n+            return new GitHubHost(uri, webUriPattern, webUriReplacement, altwebUriReplacements, orgs, offline);\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubForgeFactory.java","additions":13,"deletions":5,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import java.util.stream.Stream;\n@@ -44,0 +45,1 @@\n+    private final List<String> altWebUriReplacements;\n@@ -58,1 +60,2 @@\n-    public GitHubHost(URI uri, GitHubApplication application, Pattern webUriPattern, String webUriReplacement, Set<String> orgs) {\n+    public GitHubHost(URI uri, GitHubApplication application, Pattern webUriPattern, String webUriReplacement,\n+            List<String> altWebUriReplacements, Set<String> orgs) {\n@@ -62,0 +65,1 @@\n+        this.altWebUriReplacements = altWebUriReplacements;\n@@ -100,1 +104,2 @@\n-    public GitHubHost(URI uri, Credential pat, Pattern webUriPattern, String webUriReplacement, Set<String> orgs) {\n+    public GitHubHost(URI uri, Credential pat, Pattern webUriPattern, String webUriReplacement,\n+            List<String> altWebUriReplacements, Set<String> orgs) {\n@@ -104,0 +109,1 @@\n+        this.altWebUriReplacements = altWebUriReplacements;\n@@ -135,1 +141,2 @@\n-    GitHubHost(URI uri, Pattern webUriPattern, String webUriReplacement, Set<String> orgs, boolean offline) {\n+    GitHubHost(URI uri, Pattern webUriPattern, String webUriReplacement,\n+            List<String> altWebUriReplacements, Set<String> orgs, boolean offline) {\n@@ -139,0 +146,1 @@\n+        this.altWebUriReplacements = altWebUriReplacements;\n@@ -189,0 +197,26 @@\n+    \/**\n+     * Gets a list of all the alternative URIs for this host for a given endpoint\n+     * @param endpoint Endpoint to resolve\n+     * @return List of URIs\n+     *\/\n+    List<URI> getAllWebURIs(String endpoint) {\n+        var mainURI = getWebURI(endpoint);\n+\n+        if (altWebUriReplacements.isEmpty()) {\n+            return List.of(mainURI);\n+        }\n+        var baseWebUri = URIBuilder.base(uri)\n+                .setPath(endpoint)\n+                .build();\n+\n+        var matcher = webUriPattern.matcher(baseWebUri.toString());\n+        if (!matcher.matches()) {\n+            return List.of(mainURI);\n+        }\n+\n+        return Stream.concat(Stream.of(mainURI),\n+                        altWebUriReplacements.stream()\n+                                .map(r -> URIBuilder.base(matcher.replaceAll(r)).build()))\n+                .toList();\n+    }\n+\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubHost.java","additions":37,"deletions":3,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import java.util.regex.Matcher;\n@@ -44,1 +45,1 @@\n-    private final Pattern pullRequestPattern;\n+    private final List<Pattern> pullRequestPatterns;\n@@ -77,2 +78,4 @@\n-        var urlPattern = gitHubHost.getWebURI(\"\/\" + repository + \"\/pull\/\").toString();\n-        pullRequestPattern = Pattern.compile(urlPattern + \"(\\\\d+)\");\n+        var urlPatterns = gitHubHost.getAllWebURIs(\"\/\" + repository + \"\/pull\/\");\n+        pullRequestPatterns = urlPatterns.stream()\n+                .map(u -> Pattern.compile(u + \"(\\\\d+)\"))\n+                .toList();\n@@ -178,6 +181,5 @@\n-        var matcher = pullRequestPattern.matcher(url);\n-        if (matcher.find()) {\n-            return Optional.of(pullRequest(matcher.group(1)));\n-        } else {\n-            return Optional.empty();\n-        }\n+        return pullRequestPatterns.stream()\n+                .map(p -> p.matcher(url))\n+                .filter(Matcher::find)\n+                .map(m -> pullRequest(m.group(1)))\n+                .findAny();\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubRepository.java","additions":11,"deletions":9,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-        var gitHubHost = new GitHubHost(uri, app, null, null, Set.of());\n+        var gitHubHost = new GitHubHost(uri, app, null, null, null, Set.of());\n","filename":"forge\/src\/test\/java\/org\/openjdk\/skara\/forge\/ManualForgeTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import java.util.List;\n@@ -38,7 +39,5 @@\n-    void webUriPatternReplacement() throws IOException, URISyntaxException {\n-        try (var tempFolder = new TemporaryDirectory()) {\n-            var host = new GitHubHost(URIBuilder.base(\"http:\/\/www.example.com\").build(),\n-                                      Pattern.compile(\"^(http:\/\/www.example.com)\/test\/(.*)$\"), \"$1\/another\/$2\",\n-                                      Set.of(), false);\n-            assertEquals(new URI(\"http:\/\/www.example.com\/another\/hello\"), host.getWebURI(\"\/test\/hello\"));\n-        }\n+    void webUriPatternReplacement() throws URISyntaxException {\n+        var host = new GitHubHost(URIBuilder.base(\"http:\/\/www.example.com\").build(),\n+                Pattern.compile(\"^(http:\/\/www.example.com)\/test\/(.*)$\"), \"$1\/another\/$2\",\n+                List.of(), Set.of(), false);\n+        assertEquals(new URI(\"http:\/\/www.example.com\/another\/hello\"), host.getWebURI(\"\/test\/hello\"));\n@@ -48,8 +47,19 @@\n-    void nonTransformedWebUrl() throws IOException, URISyntaxException {\n-        try (var tempFolder = new TemporaryDirectory()) {\n-            var host = new GitHubHost(URIBuilder.base(\"http:\/\/www.example.com\").build(),\n-                                      Pattern.compile(\"^(http:\/\/www.example.com)\/test\/(.*)$\"), \"$1\/another\/$2\",\n-                                      Set.of(), false);\n-            assertEquals(new URI(\"http:\/\/www.example.com\/another\/hello\"), host.getWebURI(\"\/test\/hello\"));\n-            assertEquals(new URI(\"http:\/\/www.example.com\/test\/hello\"), host.getWebURI(\"\/test\/hello\", false));\n-        }\n+    void nonTransformedWebUrl() throws URISyntaxException {\n+        var host = new GitHubHost(URIBuilder.base(\"http:\/\/www.example.com\").build(),\n+                Pattern.compile(\"^(http:\/\/www.example.com)\/test\/(.*)$\"), \"$1\/another\/$2\",\n+                List.of(), Set.of(), false);\n+        assertEquals(new URI(\"http:\/\/www.example.com\/another\/hello\"), host.getWebURI(\"\/test\/hello\"));\n+        assertEquals(new URI(\"http:\/\/www.example.com\/test\/hello\"), host.getWebURI(\"\/test\/hello\", false));\n+    }\n+\n+    @Test\n+    void webAltUriPatternReplacement() throws URISyntaxException {\n+        var host = new GitHubHost(URIBuilder.base(\"http:\/\/www.example.com\").build(),\n+                Pattern.compile(\"^(http:\/\/www.example.com)\/test\/(.*)$\"), \"$1\/another\/$2\",\n+                List.of(\"http:\/\/localhost\/$2\"), Set.of(), false);\n+        assertEquals(new URI(\"http:\/\/www.example.com\/another\/hello\"), host.getWebURI(\"\/test\/hello\"));\n+        assertEquals(List.of(\n+                        new URI(\"http:\/\/www.example.com\/another\/hello\"),\n+                        new URI(\"http:\/\/localhost\/hello\")\n+                ),\n+                host.getAllWebURIs(\"\/test\/hello\"));\n","filename":"forge\/src\/test\/java\/org\/openjdk\/skara\/forge\/github\/GitHubHostTests.java","additions":25,"deletions":15,"binary":false,"changes":40,"status":"modified"}]}