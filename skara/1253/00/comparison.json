{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+import org.openjdk.skara.forge.HostedBranch;\n@@ -376,0 +377,19 @@\n+\n+            \/\/ Check whether the branch name exists in fork.\n+            var branchNames = fork.branches().stream().map(HostedBranch::name).toList();\n+            var expectedBranchName = author.forge().currentUser().username() + \"-backport-\" + editHash.abbreviate();\n+            assertTrue(branchNames.contains(expectedBranchName));\n+\n+            \/\/ Fetch and checkout the branch.\n+            var branchOpt = fork.branches().stream().filter(branch -> expectedBranchName.equals(branch.name())).findAny();\n+            var head = localRepo.fetch(fork.url(), branchOpt.get().name());\n+            localRepo.checkout(head);\n+\n+            \/\/ Check whether the branch has the corresponding commits of the target branch.\n+            var commits = localRepo.commits().asList();\n+            assertEquals(commits.get(0).message().toString(), \"[Backport \" + editHash.hex() + \"]\");\n+            assertEquals(commits.get(0).author().name(), \"duke\");\n+            assertEquals(commits.get(0).author().email(), \"duke@openjdk.org\");\n+            assertEquals(commits.get(1).hash().hex(), masterHashCommon.hex());\n+            assertEquals(commits.get(2).hash().hex(), unrelatedHash.hex());\n+            assertEquals(commits.get(3).hash().hex(), masterHash.hex());\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/BackportCommitCommandTests.java","additions":21,"deletions":1,"binary":false,"changes":22,"status":"modified"}]}