{"files":[{"patch":"@@ -31,0 +31,1 @@\n+import org.openjdk.skara.issuetracker.Link;\n@@ -82,1 +83,3 @@\n-            var csr = jbsIssue.get().csrIssue().orElse(null);\n+            var csr = jbsIssue.get().links().stream()\n+                    .filter(link -> link.relationship().isPresent() && \"csr for\".equals(link.relationship().get()))\n+                    .findAny().flatMap(Link::issue).orElse(null);\n","filename":"bots\/csr\/src\/main\/java\/org\/openjdk\/skara\/bots\/csr\/CSRBot.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -100,1 +100,2 @@\n-            var csrLink = jbsIssue.get().csrLink();\n+            var csrLink = jbsIssue.get().links().stream()\n+                    .filter(link -> link.relationship().isPresent() && \"csr for\".equals(link.relationship().get())).findAny();\n@@ -109,1 +110,1 @@\n-            var csrIssue = csrLink.get().issue().orElse(null);\n+            var csrIssue = csrLink.flatMap(Link::issue).orElse(null);\n@@ -164,1 +165,3 @@\n-        var csr = jbsIssue.get().csrIssue().orElse(null);\n+        var csr = jbsIssue.get().links().stream()\n+                .filter(link -> link.relationship().isPresent() && \"csr for\".equals(link.relationship().get()))\n+                .findAny().flatMap(Link::issue).orElse(null);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CSRCommand.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -139,1 +139,3 @@\n-        org.openjdk.skara.issuetracker.Issue csr = jbsIssue.get().csrIssue().orElse(null);\n+        org.openjdk.skara.issuetracker.Issue csr = jbsIssue.get().links().stream()\n+                .filter(link -> link.relationship().isPresent() && \"csr for\".equals(link.relationship().get()))\n+                .findAny().flatMap(Link::issue).orElse(null);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -250,15 +250,0 @@\n-    @Override\n-    public List<Link> linksWithRelationships(List<String> relationships) {\n-        return null;\n-    }\n-\n-    @Override\n-    public Optional<Link> csrLink() {\n-        return Optional.empty();\n-    }\n-\n-    @Override\n-    public Optional<Issue> csrIssue() {\n-        return Optional.empty();\n-    }\n-\n","filename":"bots\/tester\/src\/test\/java\/org\/openjdk\/skara\/bots\/tester\/InMemoryPullRequest.java","additions":1,"deletions":16,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -630,15 +630,0 @@\n-    @Override\n-    public List<Link> linksWithRelationships(List<String> relationships) {\n-        throw new RuntimeException(\"not implemented yet\");\n-    }\n-\n-    @Override\n-    public Optional<Link> csrLink() {\n-        throw new RuntimeException(\"not implemented yet\");\n-    }\n-\n-    @Override\n-    public Optional<Issue> csrIssue() {\n-        throw new RuntimeException(\"not implemented yet\");\n-    }\n-\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubPullRequest.java","additions":0,"deletions":15,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -730,15 +730,0 @@\n-    @Override\n-    public List<Link> linksWithRelationships(List<String> relationships) {\n-        throw new RuntimeException(\"not implemented yet\");\n-    }\n-\n-    @Override\n-    public Optional<Link> csrLink() {\n-        throw new RuntimeException(\"not implemented yet\");\n-    }\n-\n-    @Override\n-    public Optional<Issue> csrIssue() {\n-        throw new RuntimeException(\"not implemented yet\");\n-    }\n-\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabMergeRequest.java","additions":0,"deletions":15,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -191,44 +191,0 @@\n-    \/**\n-     * Get the links which have the relationships listed in the arguments.\n-     * @param relationships the link relationship\n-     * @return the related links\n-     *\/\n-    default List<Link> linksWithRelationships(List<String> relationships) {\n-        var result = new ArrayList<Link>();\n-        if (relationships == null) {\n-            return result;\n-        }\n-        for (var link : links()) {\n-            if (link.relationship().isPresent() && relationships.contains(link.relationship().get())) {\n-                result.add(link);\n-            }\n-        }\n-        return result;\n-    }\n-\n-    \/**\n-     * Get the corresponding csr link of current issue if it exists.\n-     * @return the csr link\n-     *\/\n-    default Optional<Link> csrLink() {\n-        var links = linksWithRelationships(List.of(\"csr for\"));\n-        if (links != null && !links.isEmpty()) {\n-            \/\/ There is always only one csr link. If not, the csr links in the JBS need to be adjusted.\n-            return Optional.of(links.get(0));\n-        }\n-        return Optional.empty();\n-    }\n-\n-    \/**\n-     * Get the corresponding csr issue of current issue if it exists.\n-     * @return the csr issue\n-     *\/\n-    default Optional<Issue> csrIssue() {\n-        var csrLink = csrLink();\n-        var csrIssue = Optional.<Issue>empty();\n-        if (csrLink.isPresent()) {\n-            csrIssue = csrLink.get().issue();\n-        }\n-        return csrIssue;\n-    }\n-\n","filename":"issuetracker\/src\/main\/java\/org\/openjdk\/skara\/issuetracker\/Issue.java","additions":0,"deletions":44,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -92,8 +92,8 @@\n-        var links = issue.linksWithRelationships(List.of(\"backported by\", \"backport of\"));\n-        if (links == null || links.isEmpty()) {\n-            return Optional.empty();\n-        }\n-        for (var link : links) {\n-            var linkedIssue = link.issue().orElse(null);\n-            if (linkedIssue != null && isPrimaryIssue(linkedIssue)) {\n-                return Optional.of(linkedIssue);\n+        for (var link : issue.links()) {\n+            if (link.issue().isPresent() && link.relationship().isPresent()) {\n+                if (link.relationship().get().equals(\"backported by\") || link.relationship().get().equals(\"backport of\")) {\n+                    var linkedIssue = link.issue().get();\n+                    if (isPrimaryIssue(linkedIssue)) {\n+                        return Optional.of(linkedIssue);\n+                    }\n+                }\n","filename":"jbs\/src\/main\/java\/org\/openjdk\/skara\/jbs\/Backports.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"}]}