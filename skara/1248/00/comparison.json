{"files":[{"patch":"@@ -82,62 +82,33 @@\n-            for (var link : jbsIssue.get().links()) {\n-                var relationship = link.relationship();\n-                if (relationship.isPresent() && relationship.get().equals(\"csr for\")) {\n-                    log.info(\"Found CSR for \" + describe(pr));\n-\n-                    var csr = link.issue().orElseThrow(\n-                            () -> new IllegalStateException(\"Link with title 'csr for' does not contain issue\")\n-                    );\n-\n-                    log.info(\"CSR for \" + describe(pr) + \" has id \" + csr.id());\n-\n-                    var resolution = csr.properties().get(\"resolution\");\n-                    if (resolution == null || resolution.isNull()) {\n-                        if (!pr.labelNames().contains(CSR_LABEL)) {\n-                            log.info(\"CSR issue resolution is null for \" + describe(pr) + \", adding the CSR label\");\n-                            pr.addLabel(CSR_LABEL);\n-                        } else {\n-                            log.info(\"CSR issue resolution is null for \" + describe(pr) + \", not removing the CSR label\");\n-                        }\n-                        continue;\n-                    }\n-                    var name = resolution.get(\"name\");\n-                    if (name == null || name.isNull()) {\n-                        if (!pr.labelNames().contains(CSR_LABEL)) {\n-                            log.info(\"CSR issue resolution name is null for \" + describe(pr) + \", adding the CSR label\");\n-                            pr.addLabel(CSR_LABEL);\n-                        } else {\n-                            log.info(\"CSR issue resolution name is null for \" + describe(pr) + \", not removing the CSR label\");\n-                        }\n-                        continue;\n-                    }\n-\n-                    if (csr.state() != Issue.State.CLOSED) {\n-                        if (!pr.labelNames().contains(CSR_LABEL)) {\n-                            log.info(\"CSR issue state is not closed for \" + describe(pr) + \", adding the CSR label\");\n-                            pr.addLabel(CSR_LABEL);\n-                        } else {\n-                            log.info(\"CSR issue state is not closed for \" + describe(pr) + \", not removing the CSR label\");\n-                        }\n-                        continue;\n-                    }\n-\n-                    if (!name.asString().equals(\"Approved\")) {\n-                        if (name.asString().equals(\"Withdrawn\")) {\n-                            \/\/ This condition is necessary to prevent the bot from adding the CSR label again.\n-                            \/\/ And the bot can't remove the CSR label automatically here.\n-                            \/\/ Because the PR author with the role of Committer may withdraw a CSR that\n-                            \/\/ a Reviewer had requested and integrate it without satisfying that requirement.\n-                            log.info(\"CSR closed and withdrawn for \" + describe(pr) + \", not revising (not adding and not removing) CSR label\");\n-                        } else if (!pr.labelNames().contains(CSR_LABEL)) {\n-                            log.info(\"CSR issue resolution is not 'Approved' for \" + describe(pr) + \", adding the CSR label\");\n-                            pr.addLabel(CSR_LABEL);\n-                        } else {\n-                            log.info(\"CSR issue resolution is not 'Approved' for \" + describe(pr) + \", not removing the CSR label\");\n-                        }\n-                        continue;\n-                    }\n-\n-                    if (pr.labelNames().contains(CSR_LABEL)) {\n-                        log.info(\"CSR closed and approved for \" + describe(pr) + \", removing CSR label\");\n-                        pr.removeLabel(CSR_LABEL);\n-                    }\n+            var csr = jbsIssue.get().csrIssue().orElse(null);\n+            if (csr == null) {\n+                log.info(\"Not found CSR for \" + describe(pr));\n+            }\n+            log.info(\"Found CSR for \" + describe(pr) + \". It has id \" + csr.id());\n+\n+            var resolution = csr.properties().get(\"resolution\");\n+            if (resolution == null || resolution.isNull()) {\n+                if (!pr.labelNames().contains(CSR_LABEL)) {\n+                    log.info(\"CSR issue resolution is null for \" + describe(pr) + \", adding the CSR label\");\n+                    pr.addLabel(CSR_LABEL);\n+                } else {\n+                    log.info(\"CSR issue resolution is null for \" + describe(pr) + \", not removing the CSR label\");\n+                }\n+                continue;\n+            }\n+            var name = resolution.get(\"name\");\n+            if (name == null || name.isNull()) {\n+                if (!pr.labelNames().contains(CSR_LABEL)) {\n+                    log.info(\"CSR issue resolution name is null for \" + describe(pr) + \", adding the CSR label\");\n+                    pr.addLabel(CSR_LABEL);\n+                } else {\n+                    log.info(\"CSR issue resolution name is null for \" + describe(pr) + \", not removing the CSR label\");\n+                }\n+                continue;\n+            }\n+\n+            if (csr.state() != Issue.State.CLOSED) {\n+                if (!pr.labelNames().contains(CSR_LABEL)) {\n+                    log.info(\"CSR issue state is not closed for \" + describe(pr) + \", adding the CSR label\");\n+                    pr.addLabel(CSR_LABEL);\n+                } else {\n+                    log.info(\"CSR issue state is not closed for \" + describe(pr) + \", not removing the CSR label\");\n@@ -145,0 +116,22 @@\n+                continue;\n+            }\n+\n+            if (!name.asString().equals(\"Approved\")) {\n+                if (name.asString().equals(\"Withdrawn\")) {\n+                    \/\/ This condition is necessary to prevent the bot from adding the CSR label again.\n+                    \/\/ And the bot can't remove the CSR label automatically here.\n+                    \/\/ Because the PR author with the role of Committer may withdraw a CSR that\n+                    \/\/ a Reviewer had requested and integrate it without satisfying that requirement.\n+                    log.info(\"CSR closed and withdrawn for \" + describe(pr) + \", not revising (not adding and not removing) CSR label\");\n+                } else if (!pr.labelNames().contains(CSR_LABEL)) {\n+                    log.info(\"CSR issue resolution is not 'Approved' for \" + describe(pr) + \", adding the CSR label\");\n+                    pr.addLabel(CSR_LABEL);\n+                } else {\n+                    log.info(\"CSR issue resolution is not 'Approved' for \" + describe(pr) + \", not removing the CSR label\");\n+                }\n+                continue;\n+            }\n+\n+            if (pr.labelNames().contains(CSR_LABEL)) {\n+                log.info(\"CSR closed and approved for \" + describe(pr) + \", removing CSR label\");\n+                pr.removeLabel(CSR_LABEL);\n","filename":"bots\/csr\/src\/main\/java\/org\/openjdk\/skara\/bots\/csr\/CSRBot.java","additions":55,"deletions":62,"binary":false,"changes":117,"status":"modified"},{"patch":"@@ -99,29 +99,8 @@\n-            for (var link : jbsIssue.get().links()) {\n-                var relationship = link.relationship();\n-                if (relationship.isEmpty() || !relationship.get().equals(\"csr for\")) {\n-                    continue;\n-                }\n-                \/\/ Now the issue has a csr link.\n-                var csrIssue = link.issue().orElse(null);\n-                if (csrIssue == null) {\n-                    \/\/ The csr link exists but the csr issue doesn't exist.\n-                    \/\/ We should remind the user to remove the link firstly.\n-                    reply.println(\"the issue for this pull request, [\" + jbsIssue.get().id() + \"](\" + jbsIssue.get().webUrl()\n-                            + \"), has a invalid CSR link.\");\n-                    reply.println(\"So you can't directly indicate that a CSR request is not needed for this pull request. \");\n-                    reply.println(\"Please firstly remove the CSR link and then use the command `\/csr unneeded` again.\");\n-                    return;\n-                }\n-                var resolution = csrIssue.properties().get(\"resolution\");\n-                if (resolution == null || resolution.isNull()\n-                        || resolution.get(\"name\") == null || resolution.get(\"name\").isNull()\n-                        || csrIssue.state() != Issue.State.CLOSED\n-                        || !resolution.get(\"name\").asString().equals(\"Withdrawn\")) {\n-                    \/\/ The issue has a non-withdrawn csr issue, the bot should direct the user to withdraw the csr firstly.\n-                    reply.println(\"the issue for this pull request, [\" + jbsIssue.get().id() + \"](\" + jbsIssue.get().webUrl() + \"), has \" +\n-                            \"a non-withdrawn CSR request: [\" + csrIssue.id() + \"](\" + csrIssue.webUrl() + \"). \");\n-                    reply.println(\"So you can't directly indicate that a CSR request is not needed for this pull request. \");\n-                    reply.println(\"Please firstly withdraw the CSR request: [\" + csrIssue.id() + \"](\" + csrIssue.webUrl() + \"), \"\n-                            + \"and then use the command `\/csr unneeded` again.\");\n-                    return;\n-                }\n+\n+            var csrLink = jbsIssue.get().csrLink();\n+            if (csrLink.isEmpty()) {\n+                \/\/ The issue has no csr link, the bot should just remove the csr label.\n+                pr.removeLabel(CSR_LABEL);\n+                reply.println(\"determined that a [CSR](https:\/\/wiki.openjdk.java.net\/display\/csr\/Main) request \" +\n+                        \"is not needed for this pull request.\");\n+                return;\n@@ -129,1 +108,26 @@\n-            \/\/ The issue has no csr or the csr has been withdrawn, the bot should just remove the csr label.\n+\n+            var csrIssue = csrLink.get().issue().orElse(null);\n+            if (csrIssue == null) {\n+                \/\/ The csr link exists but the csr issue doesn't exist.\n+                \/\/ We should remind the user to remove the link firstly.\n+                reply.println(\"the issue for this pull request, [\" + jbsIssue.get().id() + \"](\" + jbsIssue.get().webUrl()\n+                        + \"), has a invalid CSR link.\");\n+                reply.println(\"So you can't directly indicate that a CSR request is not needed for this pull request. \");\n+                reply.println(\"Please firstly remove the CSR link and then use the command `\/csr unneeded` again.\");\n+                return;\n+            }\n+            var resolution = csrIssue.properties().get(\"resolution\");\n+            if (resolution == null || resolution.isNull()\n+                    || resolution.get(\"name\") == null || resolution.get(\"name\").isNull()\n+                    || csrIssue.state() != Issue.State.CLOSED\n+                    || !resolution.get(\"name\").asString().equals(\"Withdrawn\")) {\n+                \/\/ The issue has a non-withdrawn csr issue, the bot should direct the user to withdraw the csr firstly.\n+                reply.println(\"the issue for this pull request, [\" + jbsIssue.get().id() + \"](\" + jbsIssue.get().webUrl() + \"), has \" +\n+                        \"a non-withdrawn CSR request: [\" + csrIssue.id() + \"](\" + csrIssue.webUrl() + \"). \");\n+                reply.println(\"So you can't directly indicate that a CSR request is not needed for this pull request. \");\n+                reply.println(\"Please firstly withdraw the CSR request: [\" + csrIssue.id() + \"](\" + csrIssue.webUrl() + \"), \"\n+                        + \"and then use the command `\/csr unneeded` again.\");\n+                return;\n+            }\n+\n+            \/\/ The csr has been withdrawn, the bot should just remove the csr label.\n@@ -159,9 +163,0 @@\n-        Issue csr = null;\n-        for (var link : jbsIssue.get().links()) {\n-            var relationship = link.relationship();\n-            if (relationship.isPresent() && relationship.get().equals(\"csr for\")) {\n-                csr = link.issue().orElseThrow(\n-                        () -> new IllegalStateException(\"Link with title 'csr for' does not contain issue\")\n-                );\n-            }\n-        }\n@@ -169,0 +164,1 @@\n+        var csr = jbsIssue.get().csrIssue().orElse(null);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CSRCommand.java","additions":35,"deletions":39,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -127,0 +127,3 @@\n+    \/**\n+     * Get the csr issue. Note: this `Issue` is not the issue in module `issuetracker`.\n+     *\/\n@@ -136,14 +139,4 @@\n-        org.openjdk.skara.issuetracker.Issue csr = null;\n-        for (var link : jbsIssue.get().links()) {\n-            var relationship = link.relationship();\n-            if (relationship.isEmpty() || !relationship.get().equals(\"csr for\")) {\n-                continue;\n-            }\n-            csr = link.issue().orElse(null);\n-            if (csr == null) {\n-                log.warning(\"The CSR \" + link + \" of the issue \" + issue + \" does not exist\");\n-            } else {\n-                break;\n-            }\n-        }\n-        if (csr != null) {\n+        org.openjdk.skara.issuetracker.Issue csr = jbsIssue.get().csrIssue().orElse(null);\n+        if (csr == null) {\n+            log.warning(\"The CSR issue of the issue \" + issue + \" does not exist\");\n+        } else {\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":7,"deletions":14,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -250,0 +250,15 @@\n+    @Override\n+    public List<Link> linksWithRelationships(List<String> relationships) {\n+        return null;\n+    }\n+\n+    @Override\n+    public Optional<Link> csrLink() {\n+        return Optional.empty();\n+    }\n+\n+    @Override\n+    public Optional<Issue> csrIssue() {\n+        return Optional.empty();\n+    }\n+\n","filename":"bots\/tester\/src\/test\/java\/org\/openjdk\/skara\/bots\/tester\/InMemoryPullRequest.java","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -630,0 +630,15 @@\n+    @Override\n+    public List<Link> linksWithRelationships(List<String> relationships) {\n+        throw new RuntimeException(\"not implemented yet\");\n+    }\n+\n+    @Override\n+    public Optional<Link> csrLink() {\n+        throw new RuntimeException(\"not implemented yet\");\n+    }\n+\n+    @Override\n+    public Optional<Issue> csrIssue() {\n+        throw new RuntimeException(\"not implemented yet\");\n+    }\n+\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubPullRequest.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -730,0 +730,15 @@\n+    @Override\n+    public List<Link> linksWithRelationships(List<String> relationships) {\n+        throw new RuntimeException(\"not implemented yet\");\n+    }\n+\n+    @Override\n+    public Optional<Link> csrLink() {\n+        throw new RuntimeException(\"not implemented yet\");\n+    }\n+\n+    @Override\n+    public Optional<Issue> csrIssue() {\n+        throw new RuntimeException(\"not implemented yet\");\n+    }\n+\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabMergeRequest.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -191,0 +191,44 @@\n+    \/**\n+     * Get the links which have the relationships listed in the arguments.\n+     * @param relationships the link relationship\n+     * @return the related links\n+     *\/\n+    default List<Link> linksWithRelationships(List<String> relationships) {\n+        var result = new ArrayList<Link>();\n+        if (relationships == null) {\n+            return result;\n+        }\n+        for (var link : links()) {\n+            if (link.relationship().isPresent() && relationships.contains(link.relationship().get())) {\n+                result.add(link);\n+            }\n+        }\n+        return result;\n+    }\n+\n+    \/**\n+     * Get the corresponding csr link of current issue if it exists.\n+     * @return the csr link\n+     *\/\n+    default Optional<Link> csrLink() {\n+        var links = linksWithRelationships(List.of(\"csr for\"));\n+        if (links != null && !links.isEmpty()) {\n+            \/\/ There is always only one csr link. If not, the csr links in the JBS need to be adjusted.\n+            return Optional.of(links.get(0));\n+        }\n+        return Optional.empty();\n+    }\n+\n+    \/**\n+     * Get the corresponding csr issue of current issue if it exists.\n+     * @return the csr issue\n+     *\/\n+    default Optional<Issue> csrIssue() {\n+        var csrLink = csrLink();\n+        var csrIssue = Optional.<Issue>empty();\n+        if (csrLink.isPresent()) {\n+            csrIssue = csrLink.get().issue();\n+        }\n+        return csrIssue;\n+    }\n+\n","filename":"issuetracker\/src\/main\/java\/org\/openjdk\/skara\/issuetracker\/Issue.java","additions":44,"deletions":0,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -92,8 +92,8 @@\n-        for (var link : issue.links()) {\n-            if (link.issue().isPresent() && link.relationship().isPresent()) {\n-                if (link.relationship().get().equals(\"backported by\") || link.relationship().get().equals(\"backport of\")) {\n-                    var linkedIssue = link.issue().get();\n-                    if (isPrimaryIssue(linkedIssue)) {\n-                        return Optional.of(linkedIssue);\n-                    }\n-                }\n+        var links = issue.linksWithRelationships(List.of(\"backported by\", \"backport of\"));\n+        if (links == null || links.isEmpty()) {\n+            return Optional.empty();\n+        }\n+        for (var link : links) {\n+            var linkedIssue = link.issue().orElse(null);\n+            if (linkedIssue != null && isPrimaryIssue(linkedIssue)) {\n+                return Optional.of(linkedIssue);\n","filename":"jbs\/src\/main\/java\/org\/openjdk\/skara\/jbs\/Backports.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"}]}