{"files":[{"patch":"@@ -39,0 +39,1 @@\n+import org.openjdk.skara.network.RestRequest;\n@@ -328,4 +329,8 @@\n-        executor.scheduleAtFixedRate(this::itemWatchdog, 0,\n-                                     config.scheduledExecutionPeriod().toMillis(), TimeUnit.MILLISECONDS);\n-        executor.scheduleAtFixedRate(this::checkPeriodicItems, 0,\n-                                     config.scheduledExecutionPeriod().toMillis(), TimeUnit.MILLISECONDS);\n+\n+        var schedulingInterval = config.scheduledExecutionPeriod().toMillis();\n+        executor.scheduleAtFixedRate(this::itemWatchdog, 0, schedulingInterval, TimeUnit.MILLISECONDS);\n+        executor.scheduleAtFixedRate(this::checkPeriodicItems, 0, schedulingInterval, TimeUnit.MILLISECONDS);\n+\n+        var cacheEvictionInterval = config.cacheEvictionInterval().toMillis();\n+        executor.scheduleAtFixedRate(RestRequest::evictOldCacheData, cacheEvictionInterval,\n+                cacheEvictionInterval, TimeUnit.MILLISECONDS);\n","filename":"bot\/src\/main\/java\/org\/openjdk\/skara\/bot\/BotRunner.java","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -322,0 +322,14 @@\n+    \/**\n+     * The amount of time to wait between runs of the RestResponseCache evictions.\n+     * @return\n+     *\/\n+    Duration cacheEvictionInterval() {\n+        if (!config.contains(\"runner\") || !config.get(\"runner\").contains(\"cache_eviction_interval\")) {\n+            var defaultValue = Duration.ofMinutes(5);\n+            log.info(\"No cache eviction interval defined, using default value \" + defaultValue);\n+            return defaultValue;\n+        } else {\n+            return Duration.parse(config.get(\"runner\").get(\"cache_eviction_interval\").asString());\n+        }\n+    }\n+\n","filename":"bot\/src\/main\/java\/org\/openjdk\/skara\/bot\/BotRunnerConfiguration.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -482,0 +482,4 @@\n+\n+    public static void evictOldCacheData() {\n+        RestRequestCache.INSTANCE.evictOldData();\n+    }\n","filename":"network\/src\/main\/java\/org\/openjdk\/skara\/network\/RestRequest.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -25,0 +25,3 @@\n+import org.openjdk.skara.metrics.Counter;\n+import org.openjdk.skara.metrics.Gauge;\n+\n@@ -38,0 +41,3 @@\n+    private final static Gauge cachedEntriesGauge = Gauge.name(\"skara_response_cache_size\").register();\n+    private final static Counter cacheHitsCounter = Counter.name(\"skara_response_cache_hits\").register();\n+\n@@ -71,1 +77,11 @@\n-    private final Map<RequestContext, HttpResponse<String>> cachedResponses = new ConcurrentHashMap<>();\n+    private class CacheEntry {\n+        private final HttpResponse<String> response;\n+        private final Instant callTime;\n+\n+        public CacheEntry(HttpResponse<String> response, Instant callTime) {\n+            this.response = response;\n+            this.callTime = callTime;\n+        }\n+    }\n+\n+    private final Map<RequestContext, CacheEntry> cachedResponses = new ConcurrentHashMap<>();\n@@ -76,1 +92,0 @@\n-    private final Map<RequestContext, Instant> cachedUpdated = new ConcurrentHashMap<>();\n@@ -179,3 +194,2 @@\n-                var created = cachedUpdated.get(requestContext);\n-                if (Instant.now().minus(maxAllowedAge(requestContext)).isBefore(created)) {\n-                    var tag = cached.headers().firstValue(\"ETag\");\n+                if (Instant.now().minus(maxAllowedAge(requestContext)).isBefore(cached.callTime)) {\n+                    var tag = cached.response.headers().firstValue(\"ETag\");\n@@ -193,1 +207,2 @@\n-            if (response.statusCode() == 304) {\n+            if (cached != null && response.statusCode() == 304) {\n+                cacheHitsCounter.inc();\n@@ -195,1 +210,1 @@\n-                return new CachedHttpResponse<>(cached, response);\n+                return new CachedHttpResponse<>(cached.response, response);\n@@ -197,2 +212,2 @@\n-                cachedResponses.put(requestContext, response);\n-                cachedUpdated.put(requestContext, Instant.now());\n+                cachedResponses.put(requestContext, new CacheEntry(response, Instant.now()));\n+                cachedEntriesGauge.set(cachedResponses.size());\n@@ -223,3 +238,6 @@\n-                for (var cachedResponse : cachedResponses.keySet()) {\n-                    if (cachedResponse.unauthenticatedRequest.uri().toString().startsWith(postUriString)) {\n-                        cachedUpdated.put(cachedResponse, Instant.now().minus(Duration.ofDays(1)));\n+                var iterator = cachedResponses.entrySet().iterator();\n+                while (iterator.hasNext()) {\n+                    var entry = iterator.next();\n+                    if (entry.getKey().unauthenticatedRequest.uri().toString().startsWith(postUriString)) {\n+                        iterator.remove();\n+                        cachedEntriesGauge.set(cachedResponses.size());\n@@ -231,0 +249,15 @@\n+\n+    \/**\n+     * This method should be run from time to time to keep the cache from growing indefinitely.\n+     *\/\n+    public void evictOldData() {\n+        var now = Instant.now();\n+        var iterator = cachedResponses.entrySet().iterator();\n+        while (iterator.hasNext()) {\n+            var entry = iterator.next();\n+            if (entry.getValue().callTime.isBefore(now.minus(maxAllowedAge(entry.getKey())))) {\n+                iterator.remove();\n+                cachedEntriesGauge.set(cachedResponses.size());\n+            }\n+        }\n+    }\n","filename":"network\/src\/main\/java\/org\/openjdk\/skara\/network\/RestRequestCache.java","additions":45,"deletions":12,"binary":false,"changes":57,"status":"modified"}]}