{"files":[{"patch":"@@ -60,1 +60,1 @@\n-                    .map(pr -> new ApprovalWorkItem(pr.repository(), pr.id(), issue.project(),\n+                    .map(pr -> new ApprovalWorkItem(pr.repository(), pr.id(), issue,\n","filename":"bots\/approval\/src\/main\/java\/org\/openjdk\/skara\/bots\/approval\/ApprovalBot.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,2 +33,1 @@\n-import org.openjdk.skara.issuetracker.IssueProject;\n-import org.openjdk.skara.vcs.openjdk.Issue;\n+import org.openjdk.skara.issuetracker.Issue;\n@@ -44,1 +43,1 @@\n-    private final IssueProject issueProject;\n+    private final Issue issue;\n@@ -47,1 +46,1 @@\n-    public ApprovalWorkItem(HostedRepository repo, String prId, IssueProject issueProject, ApprovalInfo approvalInfo) {\n+    public ApprovalWorkItem(HostedRepository repo, String prId, Issue issue, ApprovalInfo approvalInfo) {\n@@ -50,1 +49,1 @@\n-        this.issueProject = issueProject;\n+        this.issue = issue;\n@@ -94,11 +93,0 @@\n-        var vcsIssue = Issue.fromStringRelaxed(pr.title());\n-        if (vcsIssue.isEmpty()) {\n-            log.info(\"No issue found in title for \" + describe(pr));\n-            return List.of();\n-        }\n-        var issueOpt = vcsIssue.flatMap(value -> issueProject.issue(value.shortId()));\n-        if (issueOpt.isEmpty()) {\n-            log.info(\"No issue found in JBS for \" + describe(pr));\n-            return List.of();\n-        }\n-        var issue = issueOpt.get();\n@@ -119,5 +107,0 @@\n-            if (pr.labelNames().contains(\"approval\")) {\n-                log.info(\"The issue \" + issue.id() + \" has the approval or disapproval label, \"\n-                        + \"removing the `approval` blocked label for \" + describe(pr));\n-                pr.removeLabel(\"approval\");\n-            }\n@@ -129,1 +112,1 @@\n-            if (issue.labelNames().contains(approvalInfo.disapprovalLabel()) && pr.isOpen()) {\n+            if (issue.labelNames().contains(approvalInfo.disapprovalLabel()) && hasApprovalProgressChecked(pr)) {\n","filename":"bots\/approval\/src\/main\/java\/org\/openjdk\/skara\/bots\/approval\/ApprovalWorkItem.java","additions":5,"deletions":22,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -92,2 +92,0 @@\n-            \/\/ The bot should remove the `approval` label of the pull request.\n-            assertFalse(pr.store().labelNames().contains(\"approval\"));\n@@ -145,2 +143,0 @@\n-            \/\/ The bot should remove the `approval` label of the pull request.\n-            assertFalse(pr.store().labelNames().contains(\"approval\"));\n@@ -249,2 +245,0 @@\n-            \/\/ The pull request shouldn't have the `approval` label.\n-            assertFalse(pr.store().labelNames().contains(\"approval\"));\n@@ -255,63 +249,0 @@\n-\n-    @Test\n-    void testWrongIssue(TestInfo testInfo) throws IOException {\n-        try (var credentials = new HostCredentials(testInfo);\n-             var tempFolder = new TemporaryDirectory()) {\n-            var author = credentials.getHostedRepository();\n-            var reviewer = credentials.getHostedRepository();\n-            var maintainer = credentials.getHostedRepository();\n-            var issueProject = credentials.getIssueProject();\n-\n-            var bot = new ApprovalBot(issueProject, List.of(author),\n-                    List.of(new ApprovalInfo(author, Pattern.compile(\"test\"),\n-                                    \"test-fix-request\" , \"test-fix-yes\" , \"test-fix-no\" , Set.of(\"integrationreviewer3\")),\n-                            new ApprovalInfo(author, Pattern.compile(\"master\"),\n-                                    \"master-fix-request\" , \"master-fix-yes\" , \"master-fix-no\" , Set.of(\"integrationreviewer3\")),\n-                            new ApprovalInfo(author, Pattern.compile(\"jdk18\"),\n-                                    \"jdk18-fix-request\" , \"jdk18-fix-yes\" , \"jdk18-fix-no\" , Set.of(\"integrationreviewer3\"))));\n-\n-            var issue = issueProject.createIssue(\"This is update change issue\", List.of(), Map.of());\n-            issue.setProperty(\"issuetype\", JSON.of(\"Bug\"));\n-            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n-            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n-            localRepo.push(masterHash, author.url(), \"master\", true);\n-            var editHash = CheckableRepository.appendAndCommit(localRepo);\n-            localRepo.push(editHash, author.url(), \"refs\/heads\/edit\", true);\n-\n-            \/\/ Create a pull request which has the wrong title.\n-            var pr = credentials.createPullRequest(author, \"master\", \"edit\", issue.title(), List.of(\"PR body\", PROGRESS_MARKER));\n-            pr.setBody(pr.body() + \"\\n- [ ] All issues must be\");\n-            PullRequestUtils.postPullRequestLinkComment(issue, pr);\n-\n-            \/\/ review the pr\n-            var reviewPr = reviewer.pullRequest(pr.id());\n-            reviewPr.addReview(Review.Verdict.APPROVED, \"LGTM\");\n-\n-            \/\/ Simulate the PRBot. Add the `approval` label to the pull request.\n-            pr.addLabel(\"approval\");\n-            \/\/ Simulate the PRBot. Add the `master-fix-request` label to the issue.\n-            issue.addLabel(\"master-fix-request\");\n-\n-            \/\/ Approve the update change.\n-            issue.addLabel(\"master-fix-yes\");\n-\n-            \/\/ run the approval pull request bot\n-            TestBotRunner.runPeriodicItems(bot);\n-\n-            \/\/ The bot shouldn't remove the `approval` label of the pull request.\n-            assertTrue(pr.store().labelNames().contains(\"approval\"));\n-            \/\/ The bot shouldn't add the approval update marker.\n-            assertFalse(pr.store().body().contains(APPROVAL_UPDATE_MARKER));\n-\n-            \/\/ Change the pr title to wrong issue id\n-            pr.setTitle(\"2: \" + issue.title());\n-\n-            \/\/ run the approval pull request bot\n-            TestBotRunner.runPeriodicItems(bot);\n-\n-            \/\/ The bot shouldn't remove the `approval` label of the pull request.\n-            assertTrue(pr.store().labelNames().contains(\"approval\"));\n-            \/\/ The bot shouldn't add the approval update marker.\n-            assertFalse(pr.store().body().contains(APPROVAL_UPDATE_MARKER));\n-        }\n-    }\n","filename":"bots\/approval\/src\/test\/java\/org\/openjdk\/skara\/bots\/approval\/ApprovalBotTests.java","additions":0,"deletions":69,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -1,144 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.skara.bots.pr;\n-\n-import java.io.PrintWriter;\n-import java.nio.file.Path;\n-import java.util.List;\n-import org.openjdk.skara.forge.PullRequest;\n-import org.openjdk.skara.issuetracker.Comment;\n-import org.openjdk.skara.issuetracker.Issue;\n-\n-public class ApprovalCommand implements CommandHandler {\n-    \/\/ The tags to re-run the CheckWorkItem of the PRBot.\n-    private static final String APPROVAL_MARKER = \"<!-- approval: 'yes' -->\";\n-    private static final String DISAPPROVAL_MARKER = \"<!-- approval: 'no' -->\";\n-\n-    private static void showHelp(PrintWriter writer) {\n-        writer.println(\"\"\"\n-                usage: `\/approval [yes|no|y|n]`\n-\n-                examples:\n-                * `\/approval`\n-                * `\/approval yes`\n-                * `\/approval no`\n-\n-                Note: Only the repository maintainers are allowed to use the `approval` command.\n-                \"\"\");\n-    }\n-\n-    private void approvalReply(PullRequest pr, PrintWriter writer) {\n-        writer.println(\"@\" + pr.author().username() + \" this pull request was approved by the maintainer.\");\n-        writer.println(APPROVAL_MARKER);\n-    }\n-\n-    private void disapprovalReply(PullRequest pr, PrintWriter writer) {\n-        writer.println(String.format(\"@%s this pull request was rejected by the maintainer. \"\n-                + \"This pull request will be closed.\", pr.author().username()));\n-        writer.println(DISAPPROVAL_MARKER);\n-    }\n-\n-    @Override\n-    public void handle(PullRequestBot bot, PullRequest pr, CensusInstance censusInstance, Path scratchPath,\n-                       CommandInvocation command, List<Comment> allComments, PrintWriter reply, PullRequestWorkItem workItem) {\n-        if (!workItem.requiresApproval()) {\n-            reply.println(\"the `approval` command can only be used on pull requests targeting branches and repositories that require approval.\");\n-            return;\n-        }\n-\n-        var commandUser = censusInstance.namespace().get(command.user().id());\n-        if (!workItem.isMaintainer(commandUser)) {\n-            reply.println(\"only the repository maintainers are allowed to use the `approval` command.\");\n-            return;\n-        }\n-\n-        var arg = command.args().trim().toLowerCase();\n-        if (!arg.isEmpty() && !(arg.equals(\"yes\") || arg.equals(\"y\") || arg.equals(\"no\") || arg.equals(\"n\"))) {\n-            showHelp(reply);\n-            return;\n-        }\n-\n-        if (arg.equals(\"no\") || arg.equals(\"n\")) {\n-            for (var vcsIssue : workItem.issues(false, false)) {\n-                var issueOpt = bot.issueProject().issue(vcsIssue.shortId());\n-                issueOpt.ifPresent(issue -> {\n-                    if (!issue.labelNames().contains(workItem.requestLabelName())) {\n-                        \/\/ The maintainers may disapprove the PR before it is ready.\n-                        \/\/ The bot should add the fix request label firstly to avoid the strange\n-                        \/\/ middle state which has disapproval label but has no fix request label.\n-                        issue.addLabel(workItem.requestLabelName());\n-                    }\n-                    if (issue.labelNames().contains(workItem.approvalLabelName())) {\n-                        \/\/ If the maintainers have approved the PR before,\n-                        \/\/ the bot should remove the approval label first.\n-                        issue.removeLabel(workItem.approvalLabelName());\n-                    }\n-                    if (!issue.labelNames().contains(workItem.disapprovalLabelName())) {\n-                        issue.addLabel(workItem.disapprovalLabelName());\n-                    }\n-                });\n-            }\n-            if (pr.labelNames().contains(\"approval\")) {\n-                pr.removeLabel(\"approval\");\n-            }\n-            disapprovalReply(pr, reply);\n-            pr.setState(Issue.State.CLOSED);\n-            return;\n-        }\n-\n-        pr.setState(Issue.State.OPEN);\n-        for (var vcsIssue : workItem.issues(false, false)) {\n-            var issueOpt = bot.issueProject().issue(vcsIssue.shortId());\n-            issueOpt.ifPresent(issue -> {\n-                if (!issue.labelNames().contains(workItem.requestLabelName())) {\n-                    \/\/ The maintainers may approve the PR before it is ready.\n-                    \/\/ The bot should add the fix request label firstly to avoid the strange\n-                    \/\/ middle state which has approval label but has no fix request label.\n-                    issue.addLabel(workItem.requestLabelName());\n-                }\n-                if (issue.labelNames().contains(workItem.disapprovalLabelName())) {\n-                    \/\/ If the maintainers have disapproved the PR before,\n-                    \/\/ the bot should remove the disapproval label first.\n-                    issue.removeLabel(workItem.disapprovalLabelName());\n-                }\n-                if (!issue.labelNames().contains(workItem.approvalLabelName())) {\n-                    issue.addLabel(workItem.approvalLabelName());\n-                }\n-            });\n-        }\n-        if (pr.labelNames().contains(\"approval\")) {\n-            pr.removeLabel(\"approval\");\n-        }\n-        approvalReply(pr, reply);\n-    }\n-\n-    @Override\n-    public boolean allowedInBody() {\n-        return true;\n-    }\n-\n-    @Override\n-    public String description() {\n-        return \"approve or disapprove a pull request which needs maintainer's approval\";\n-    }\n-}\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/ApprovalCommand.java","additions":0,"deletions":144,"binary":false,"changes":144,"status":"deleted"},{"patch":"@@ -0,0 +1,141 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bots.pr;\n+\n+import java.io.PrintWriter;\n+import java.nio.file.Path;\n+import java.util.List;\n+import org.openjdk.skara.forge.PullRequest;\n+import org.openjdk.skara.issuetracker.Comment;\n+\n+public class ApproveCommand implements CommandHandler {\n+    \/\/ The tags to re-run the CheckWorkItem of the PRBot.\n+    private static final String APPROVAL_MARKER = \"<!-- approval: 'yes' -->\";\n+    private static final String DISAPPROVAL_MARKER = \"<!-- approval: 'no' -->\";\n+\n+    private static void showHelp(PrintWriter writer) {\n+        writer.println(\"\"\"\n+                usage: `\/approve [yes|no|y|n]`\n+\n+                examples:\n+                * `\/approve`\n+                * `\/approve yes`\n+                * `\/approve no`\n+\n+                Note: Only the repository maintainers are allowed to use the `approve` command.\n+                \"\"\");\n+    }\n+\n+    private void approveReply(PullRequest pr, PrintWriter writer) {\n+        writer.println(\"@\" + pr.author().username() + \" this pull request was approved by the maintainer.\");\n+        writer.println(APPROVAL_MARKER);\n+    }\n+\n+    private void disapproveReply(PullRequest pr, PrintWriter writer) {\n+        writer.println(String.format(\"@%s this pull request was rejected by the maintainer. \"\n+                + \"This pull request will be closed.\", pr.author().username()));\n+        writer.println(DISAPPROVAL_MARKER);\n+    }\n+\n+    @Override\n+    public void handle(PullRequestBot bot, PullRequest pr, CensusInstance censusInstance, Path scratchPath,\n+                       CommandInvocation command, List<Comment> allComments, PrintWriter reply, PullRequestWorkItem workItem) {\n+        if (!workItem.requiresApproval()) {\n+            reply.println(\"the `approve` command can only be used on pull requests targeting branches and repositories that require approval.\");\n+            return;\n+        }\n+\n+        var commandUser = censusInstance.namespace().get(command.user().id());\n+        if (!workItem.isMaintainer(commandUser)) {\n+            reply.println(\"only the repository maintainers are allowed to use the `approve` command.\");\n+            return;\n+        }\n+\n+        var arg = command.args().trim().toLowerCase();\n+        if (!arg.isEmpty() && !(arg.equals(\"yes\") || arg.equals(\"y\") || arg.equals(\"no\") || arg.equals(\"n\"))) {\n+            showHelp(reply);\n+            return;\n+        }\n+\n+        if (arg.equals(\"no\") || arg.equals(\"n\")) {\n+            for (var vcsIssue : workItem.issues(false, false)) {\n+                var issueOpt = bot.issueProject().issue(vcsIssue.shortId());\n+                issueOpt.ifPresent(issue -> {\n+                    if (!issue.labelNames().contains(workItem.requestLabelName())) {\n+                        \/\/ The maintainers may disapprove the PR before it is ready.\n+                        \/\/ The bot should add the fix request label firstly to avoid the strange\n+                        \/\/ middle state which has disapproval label but has no fix request label.\n+                        issue.addLabel(workItem.requestLabelName());\n+                    }\n+                    if (issue.labelNames().contains(workItem.approvalLabelName())) {\n+                        \/\/ If the maintainers have approved the PR before,\n+                        \/\/ the bot should remove the approval label first.\n+                        issue.removeLabel(workItem.approvalLabelName());\n+                    }\n+                    if (!issue.labelNames().contains(workItem.disapprovalLabelName())) {\n+                        issue.addLabel(workItem.disapprovalLabelName());\n+                    }\n+                });\n+            }\n+            if (pr.labelNames().contains(\"approval\")) {\n+                pr.removeLabel(\"approval\");\n+            }\n+            disapproveReply(pr, reply);\n+            return;\n+        }\n+\n+        for (var vcsIssue : workItem.issues(false, false)) {\n+            var issueOpt = bot.issueProject().issue(vcsIssue.shortId());\n+            issueOpt.ifPresent(issue -> {\n+                if (!issue.labelNames().contains(workItem.requestLabelName())) {\n+                    \/\/ The maintainers may approve the PR before it is ready.\n+                    \/\/ The bot should add the fix request label firstly to avoid the strange\n+                    \/\/ middle state which has approval label but has no fix request label.\n+                    issue.addLabel(workItem.requestLabelName());\n+                }\n+                if (issue.labelNames().contains(workItem.disapprovalLabelName())) {\n+                    \/\/ If the maintainers have disapproved the PR before,\n+                    \/\/ the bot should remove the disapproval label first.\n+                    issue.removeLabel(workItem.disapprovalLabelName());\n+                }\n+                if (!issue.labelNames().contains(workItem.approvalLabelName())) {\n+                    issue.addLabel(workItem.approvalLabelName());\n+                }\n+            });\n+        }\n+        if (pr.labelNames().contains(\"approval\")) {\n+            pr.removeLabel(\"approval\");\n+        }\n+        approveReply(pr, reply);\n+    }\n+\n+    @Override\n+    public boolean allowedInBody() {\n+        return true;\n+    }\n+\n+    @Override\n+    public String description() {\n+        return \"approve or disapprove a pull request which needs maintainer's approval\";\n+    }\n+}\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/ApproveCommand.java","additions":141,"deletions":0,"binary":false,"changes":141,"status":"added"},{"patch":"@@ -972,0 +972,1 @@\n+        var messageStr = message.toString();\n@@ -973,3 +974,1 @@\n-        if (existing.isPresent()) {\n-            pr.updateComment(existing.get().id(), message.toString());\n-        } else {\n+        if (existing.isEmpty()) {\n@@ -977,0 +976,2 @@\n+        } else if(!messageStr.equals(existing.get().body())) {\n+            pr.updateComment(existing.get().id(), message.toString());\n@@ -1044,5 +1045,0 @@\n-                if (mainIssueOpt.get().labelNames().contains(workItem.disapprovalLabelName()) && pr.isOpen()) {\n-                    pr.addComment(String.format(\"@%s this pull request was rejected by the maintainer. \"\n-                            + \"The bot will close this pull request automatically.\", pr.author().username()));\n-                    pr.setState(org.openjdk.skara.issuetracker.Issue.State.CLOSED);\n-                }\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-            Map.entry(\"approval\", new ApprovalCommand()),\n+            Map.entry(\"approve\", new ApproveCommand()),\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CommandExtractor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import java.util.Map;\n@@ -44,1 +43,1 @@\n-public class ApprovalCommandTests {\n+public class ApproveCommandTests {\n@@ -115,1 +114,1 @@\n-            \/\/ Approve the update change by using the command `approval`.\n+            \/\/ Approve the update change by using the command `approve`.\n@@ -117,1 +116,1 @@\n-            maintainerPr.addComment(\"\/approval yes\\n\" + VALID_BOT_COMMAND_MARKER);\n+            maintainerPr.addComment(\"\/approve yes\\n\" + VALID_BOT_COMMAND_MARKER);\n@@ -147,2 +146,0 @@\n-            \/\/ The pull request should be open.\n-            assertTrue(pr.store().isOpen());\n@@ -150,2 +147,2 @@\n-            \/\/ Reject the update change by using the command `approval`.\n-            maintainerPr.addComment(\"\/approval no\\n\" + VALID_BOT_COMMAND_MARKER);\n+            \/\/ Reject the update change by using the command `approve`.\n+            maintainerPr.addComment(\"\/approve no\\n\" + VALID_BOT_COMMAND_MARKER);\n@@ -181,2 +178,0 @@\n-            \/\/ The pull request should be closed.\n-            assertTrue(pr.store().isClosed());\n@@ -185,1 +180,1 @@\n-            maintainerPr.addComment(\"\/approval yes\\n\" + VALID_BOT_COMMAND_MARKER);\n+            maintainerPr.addComment(\"\/approve yes\\n\" + VALID_BOT_COMMAND_MARKER);\n@@ -215,2 +210,0 @@\n-            \/\/ The pull request should be open.\n-            assertTrue(pr.store().isOpen());\n@@ -291,1 +284,1 @@\n-            \/\/ Approve the update change by using the command `approval`.\n+            \/\/ Approve the update change by using the command `approve`.\n@@ -293,1 +286,1 @@\n-            maintainerPr.addComment(\"\/approval yes\\n\" + VALID_BOT_COMMAND_MARKER);\n+            maintainerPr.addComment(\"\/approve yes\\n\" + VALID_BOT_COMMAND_MARKER);\n@@ -323,2 +316,0 @@\n-            \/\/ The pull request should be open.\n-            assertTrue(pr.store().isOpen());\n@@ -368,1 +359,1 @@\n-            \/\/ Reject the update change by using the command `approval`.\n+            \/\/ Reject the update change by using the command `approve`.\n@@ -370,1 +361,1 @@\n-            maintainerPr.addComment(\"\/approval no\\n\" + VALID_BOT_COMMAND_MARKER);\n+            maintainerPr.addComment(\"\/approve no\\n\" + VALID_BOT_COMMAND_MARKER);\n@@ -400,2 +391,0 @@\n-            \/\/ The pull request should be closed.\n-            assertTrue(anotherPr.store().isClosed());\n@@ -445,1 +434,1 @@\n-            maintainerPr.addComment(\"\/approval yes\\n\" + VALID_BOT_COMMAND_MARKER);\n+            maintainerPr.addComment(\"\/approve yes\\n\" + VALID_BOT_COMMAND_MARKER);\n@@ -452,1 +441,1 @@\n-                    .filter(comment -> comment.body().contains(\"the `approval` command can only be used on \"\n+                    .filter(comment -> comment.body().contains(\"the `approve` command can only be used on \"\n@@ -466,1 +455,1 @@\n-            reviewerPr.addComment(\"\/approval no\\n\" + VALID_BOT_COMMAND_MARKER);\n+            reviewerPr.addComment(\"\/approve no\\n\" + VALID_BOT_COMMAND_MARKER);\n@@ -473,1 +462,1 @@\n-                    .filter(comment -> comment.body().contains(\"only the repository maintainers are allowed to use the `approval` command\"))\n+                    .filter(comment -> comment.body().contains(\"only the repository maintainers are allowed to use the `approve` command\"))\n@@ -519,1 +508,1 @@\n-            maintainerPr.addComment(\"\/approval yea\\n\" + VALID_BOT_COMMAND_MARKER);\n+            maintainerPr.addComment(\"\/approve yea\\n\" + VALID_BOT_COMMAND_MARKER);\n@@ -526,1 +515,1 @@\n-                    .filter(comment -> comment.body().contains(\"usage: `\/approval [yes|no|y|n]`\"))\n+                    .filter(comment -> comment.body().contains(\"usage: `\/approve [yes|no|y|n]`\"))\n@@ -531,1 +520,1 @@\n-            maintainerPr.addComment(\"\/approval ni\\n\" + VALID_BOT_COMMAND_MARKER);\n+            maintainerPr.addComment(\"\/approve ni\\n\" + VALID_BOT_COMMAND_MARKER);\n@@ -538,1 +527,1 @@\n-                    .filter(comment -> comment.body().contains(\"usage: `\/approval [yes|no|y|n]`\"))\n+                    .filter(comment -> comment.body().contains(\"usage: `\/approve [yes|no|y|n]`\"))\n@@ -545,1 +534,1 @@\n-            maintainerPr.addComment(\"\/approval YeS\\n\" + VALID_BOT_COMMAND_MARKER);\n+            maintainerPr.addComment(\"\/approve YeS\\n\" + VALID_BOT_COMMAND_MARKER);\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/ApproveCommandTests.java","additions":19,"deletions":30,"binary":false,"changes":49,"previous_filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/ApprovalCommandTests.java","status":"renamed"},{"patch":"@@ -2351,2 +2351,0 @@\n-            \/\/ The pr is still open\n-            assertTrue(pr.store().isOpen());\n@@ -2387,2 +2385,0 @@\n-            \/\/ The pr is closed now.\n-            assertTrue(pr.store().isClosed());\n@@ -2425,2 +2421,0 @@\n-            \/\/ The pr is open (actually open by the approval bot).\n-            assertTrue(pr.store().isOpen());\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CheckTests.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"}]}