{"files":[{"patch":"@@ -337,1 +337,1 @@\n-    static ArchiveItem findRevisionItem(List<ArchiveItem> generated, Hash hash) {\n+    private static ArchiveItem findRevisionItem(List<ArchiveItem> generated, Hash hash) {\n@@ -340,6 +340,11 @@\n-        for (var item : generated) {\n-            if (item.id().startsWith(\"ha\")) {\n-                lastRevisionItem = item;\n-            }\n-            if (item.id().equals(\"ha\" + hash.hex())) {\n-                return item;\n+        \/\/ If no hash is given, that means the commit for the review\/comment no longer exists.\n+        \/\/ This means that no properly valid parent exists, but as we need to return one, just\n+        \/\/ return the first element.\n+        if (hash != null) {\n+            for (var item : generated) {\n+                if (item.id().startsWith(\"ha\")) {\n+                    lastRevisionItem = item;\n+                }\n+                if (item.id().equals(\"ha\" + hash.hex())) {\n+                    return item;\n+                }\n@@ -361,1 +366,1 @@\n-        return findRevisionItem(generated, review.hash());\n+        return findRevisionItem(generated, review.hash().orElse(null));\n@@ -382,1 +387,1 @@\n-            return findRevisionItem(generated, reviewComment.hash());\n+            return findRevisionItem(generated, reviewComment.hash().orElse(null));\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/ArchiveItem.java","additions":14,"deletions":9,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -377,1 +377,1 @@\n-            if (reviewComment.line() > 0) {\n+            if (reviewComment.hash().isPresent() && reviewComment.line() > 0) {\n@@ -379,1 +379,1 @@\n-                    var contents = pr.repository().fileContents(reviewComment.path(), reviewComment.hash().hex()).lines().collect(Collectors.toList());\n+                    var contents = pr.repository().fileContents(reviewComment.path(), reviewComment.hash().get().hex()).lines().collect(Collectors.toList());\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/ArchiveMessages.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -363,5 +363,8 @@\n-                                   if (!review.hash().equals(pr.headHash())) {\n-                                       if (ignoreStaleReviews) {\n-                                           entry += \" 🔄 Re-review required (review applies to \" + review.hash() + \")\";\n-                                       } else {\n-                                           entry += \" ⚠️ Review applies to \" + review.hash();\n+                                   var hash = review.hash();\n+                                   if (hash.isPresent()) {\n+                                       if (!hash.get().equals(pr.headHash())) {\n+                                           if (ignoreStaleReviews) {\n+                                               entry += \" 🔄 Re-review required (review applies to \" + hash.get() + \")\";\n+                                           } else {\n+                                               entry += \" ⚠️ Review applies to \" + hash.get();\n+                                           }\n@@ -369,0 +372,2 @@\n+                                   } else {\n+                                       entry += \" 🔄 Re-review required (review applies to a commit that is no longer present)\";\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -78,1 +78,2 @@\n-                                        .map(review -> encodeReviewer(review.reviewer(), censusInstance) + review.hash().hex())\n+                                        .filter(review -> review.hash().isPresent())\n+                                        .map(review -> encodeReviewer(review.reviewer(), censusInstance) + review.hash().orElseThrow().hex())\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckWorkItem.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -63,1 +63,4 @@\n-                                           .filter(review -> !ignoreStaleReviews || review.hash().equals(pr.headHash()))\n+                                           \/\/ Reviews without a hash are never valid as they referred to no longer\n+                                           \/\/ existing commits.\n+                                           .filter(review -> review.hash().isPresent())\n+                                           .filter(review -> !ignoreStaleReviews || review.hash().orElseThrow().equals(pr.headHash()))\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckablePullRequest.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -60,2 +60,6 @@\n-    public Hash hash() {\n-        return hash;\n+    \/**\n+     * The hash for the commit for which this review was created. Can be empty if the commit\n+     * no longer exists.\n+     *\/\n+    public Optional<Hash> hash() {\n+        return Optional.ofNullable(hash);\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/Review.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -53,2 +53,6 @@\n-    public Hash hash() {\n-        return hash;\n+    \/**\n+     * The hash for the commit for which this review comment was created. Can be empty if the commit\n+     * no longer exists.\n+     *\/\n+    public Optional<Hash> hash() {\n+        return Optional.ofNullable(hash);\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/ReviewComment.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -90,1 +90,5 @@\n-                                 var hash = new Hash(obj.get(\"commit_id\").asString());\n+                                 var commitId = obj.get(\"commit_id\");\n+                                 Hash hash = null;\n+                                 if (commitId != null) {\n+                                     hash = new Hash(commitId.asString());\n+                                 }\n@@ -193,1 +197,5 @@\n-        var hash = new Hash(reviewJson.get(\"original_commit_id\").asString());\n+        var originalCommitId = reviewJson.get(\"original_commit_id\");\n+        Hash hash = null;\n+        if (originalCommitId != null) {\n+            hash = new Hash(originalCommitId.asString());\n+        }\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubPullRequest.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -123,1 +123,1 @@\n-                                   var hash = commits.get(0).hash;\n+                                   Hash hash = null;\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabMergeRequest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -128,1 +128,1 @@\n-        var comment = new ReviewComment(parent, parent.threadId(), parent.hash(), parent.path(), parent.line(), String.valueOf(data.reviewComments.size()), body, user, ZonedDateTime.now(), ZonedDateTime.now());\n+        var comment = new ReviewComment(parent, parent.threadId(), parent.hash().orElseThrow(), parent.path(), parent.line(), String.valueOf(data.reviewComments.size()), body, user, ZonedDateTime.now(), ZonedDateTime.now());\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestPullRequest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}