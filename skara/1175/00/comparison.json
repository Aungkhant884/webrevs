{"files":[{"patch":"@@ -25,0 +25,1 @@\n+    requires jdk.management;\n","filename":"metrics\/src\/main\/java\/module-info.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,3 @@\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n@@ -31,0 +34,2 @@\n+import com.sun.management.UnixOperatingSystemMXBean;\n+import com.sun.management.OperatingSystemMXBean;\n@@ -33,1 +38,1 @@\n-    private static final CollectorRegistry DEFAULT = new CollectorRegistry(true);\n+    private static final CollectorRegistry DEFAULT = new CollectorRegistry(true, true);\n@@ -36,0 +41,1 @@\n+    private final boolean includeProcessMetrics;\n@@ -37,1 +43,1 @@\n-    public CollectorRegistry(boolean includeHotspotMetrics) {\n+    public CollectorRegistry(boolean includeHotspotMetrics, boolean includeProcessMetrics) {\n@@ -39,0 +45,1 @@\n+        this.includeProcessMetrics = includeProcessMetrics;\n@@ -114,0 +121,71 @@\n+    private static List<Metric> processMetrics() {\n+        var result = new ArrayList<Metric>();\n+        if (System.getProperty(\"os.name\").toLowerCase().startsWith(\"linux\")) {\n+            List<String> status = List.of();\n+            try {\n+                status = Files.readAllLines(Path.of(\"\/proc\/self\/status\"));\n+            } catch (IOException e) {\n+                \/\/ ignore\n+            }\n+            for (var line : status) {\n+                if (line.startsWith(\"VmRSS:\")) {\n+                    var parts = line.split(\"\\\\s+\");\n+                    if (parts.length == 3) {\n+                        var rssInKb = Long.parseLong(parts[1]);\n+                        var rssBytes = rssInKb * 1024;\n+                        result.add(new Metric(Metric.Type.GAUGE, \"process_resident_memory_bytes\", List.of(), rssBytes));\n+                    }\n+                } else if (line.startsWith(\"VmSize:\")) {\n+                    var parts = line.split(\"\\\\s+\");\n+                    if (parts.length == 3) {\n+                        var vmSizeInKb = Long.parseLong(parts[1]);\n+                        var vmBytes = vmSizeInKb * 1024;\n+                        result.add(new Metric(Metric.Type.GAUGE, \"process_virtual_memory_bytes\", List.of(), vmBytes));\n+                    }\n+                }\n+            }\n+\n+            List<String> maps = List.of();\n+            try {\n+                maps = Files.readAllLines(Path.of(\"\/proc\/self\/maps\"));\n+            } catch (IOException e) {\n+                \/\/ ignore\n+            }\n+            var heapBytes = maps.stream()\n+                                .filter(l -> l.endsWith(\"[heap]\"))\n+                                .map(l -> l.split(\"\\\\s+\")[0])\n+                                .mapToLong(range -> {\n+                                    var parts = range.split(\"-\");\n+                                    var start = Long.parseLong(parts[0], 16);\n+                                    var end = Long.parseLong(parts[1], 16);\n+                                    return end - start;\n+                                })\n+                                .sum();\n+            result.add(new Metric(Metric.Type.GAUGE, \"process_heap_bytes\", List.of(), heapBytes));\n+        }\n+\n+        var bean = ManagementFactory.getOperatingSystemMXBean();\n+        if (bean instanceof UnixOperatingSystemMXBean) {\n+            var osBean = (UnixOperatingSystemMXBean) bean;\n+            var numOpenFds = osBean.getOpenFileDescriptorCount();\n+            result.add(new Metric(Metric.Type.GAUGE, \"process_open_fds\", List.of(), numOpenFds));\n+            var maxFds = osBean.getMaxFileDescriptorCount();\n+            result.add(new Metric(Metric.Type.GAUGE, \"process_max_fds\", List.of(), maxFds));\n+        }\n+\n+        if (bean instanceof OperatingSystemMXBean) {\n+            var osBean = (OperatingSystemMXBean) bean;\n+            var vmMaxBytes = osBean.getCommittedVirtualMemorySize();\n+            result.add(new Metric(Metric.Type.GAUGE, \"process_virtual_memory_max_bytes\", List.of(), vmMaxBytes));\n+\n+            var cpuTimeNs = osBean.getProcessCpuTime();\n+            var cpuTimeSec = cpuTimeNs \/ 1_000_000_000.0;\n+            result.add(new Metric(Metric.Type.COUNTER, \"process_cpu_seconds_total\", List.of(), cpuTimeSec));\n+        }\n+\n+        var startTimeMillis = ManagementFactory.getRuntimeMXBean().getStartTime();\n+        result.add(new Metric(Metric.Type.COUNTER, \"process_start_time_seconds\", List.of(), startTimeMillis \/ 1000.0));\n+\n+        return result;\n+    }\n+\n@@ -122,0 +200,3 @@\n+        if (includeProcessMetrics) {\n+            result.addAll(processMetrics());\n+        }\n","filename":"metrics\/src\/main\/java\/org\/openjdk\/skara\/metrics\/CollectorRegistry.java","additions":83,"deletions":2,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-        var registry = new CollectorRegistry(false);\n+        var registry = new CollectorRegistry(false, false);\n@@ -48,1 +48,1 @@\n-        var registry = new CollectorRegistry(false);\n+        var registry = new CollectorRegistry(false, false);\n@@ -57,1 +57,1 @@\n-        var registry = new CollectorRegistry(true);\n+        var registry = new CollectorRegistry(true, false);\n@@ -74,0 +74,1 @@\n+    }\n@@ -75,0 +76,6 @@\n+    @Test\n+    void processMetrics() {\n+        var registry = new CollectorRegistry(false, true);\n+        var metrics = registry.scrape();\n+        var metricNames = metrics.stream().map(Metric::name).collect(Collectors.toSet());\n+        assertTrue(metricNames.contains(\"process_start_time_seconds\"));\n","filename":"metrics\/src\/test\/java\/org\/openjdk\/skara\/metrics\/CollectorRegistryTests.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-        var registry = new CollectorRegistry(false);\n+        var registry = new CollectorRegistry(false, false);\n@@ -41,1 +41,1 @@\n-        var registry = new CollectorRegistry(false);\n+        var registry = new CollectorRegistry(false, false);\n@@ -55,1 +55,1 @@\n-        var registry = new CollectorRegistry(false);\n+        var registry = new CollectorRegistry(false, false);\n@@ -64,1 +64,1 @@\n-        var registry = new CollectorRegistry(false);\n+        var registry = new CollectorRegistry(false, false);\n@@ -77,1 +77,1 @@\n-        var registry = new CollectorRegistry(false);\n+        var registry = new CollectorRegistry(false, false);\n@@ -90,1 +90,1 @@\n-        var registry = new CollectorRegistry(false);\n+        var registry = new CollectorRegistry(false, false);\n@@ -102,1 +102,1 @@\n-        var registry = new CollectorRegistry(false);\n+        var registry = new CollectorRegistry(false, false);\n@@ -116,1 +116,1 @@\n-        var registry = new CollectorRegistry(false);\n+        var registry = new CollectorRegistry(false, false);\n@@ -132,1 +132,1 @@\n-        var registry = new CollectorRegistry(false);\n+        var registry = new CollectorRegistry(false, false);\n@@ -146,1 +146,1 @@\n-        var registry = new CollectorRegistry(false);\n+        var registry = new CollectorRegistry(false, false);\n","filename":"metrics\/src\/test\/java\/org\/openjdk\/skara\/metrics\/CounterTests.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-        var registry = new CollectorRegistry(false);\n+        var registry = new CollectorRegistry(false, false);\n@@ -40,1 +40,1 @@\n-        var registry = new CollectorRegistry(false);\n+        var registry = new CollectorRegistry(false, false);\n@@ -52,1 +52,1 @@\n-        var registry = new CollectorRegistry(false);\n+        var registry = new CollectorRegistry(false, false);\n@@ -60,1 +60,1 @@\n-        var registry = new CollectorRegistry(false);\n+        var registry = new CollectorRegistry(false, false);\n@@ -68,1 +68,1 @@\n-        var registry = new CollectorRegistry(false);\n+        var registry = new CollectorRegistry(false, false);\n@@ -78,1 +78,1 @@\n-        var registry = new CollectorRegistry(false);\n+        var registry = new CollectorRegistry(false, false);\n@@ -88,1 +88,1 @@\n-        var registry = new CollectorRegistry(false);\n+        var registry = new CollectorRegistry(false, false);\n@@ -100,1 +100,1 @@\n-        var registry = new CollectorRegistry(false);\n+        var registry = new CollectorRegistry(false, false);\n@@ -116,1 +116,1 @@\n-        var registry = new CollectorRegistry(false);\n+        var registry = new CollectorRegistry(false, false);\n@@ -130,1 +130,1 @@\n-        var registry = new CollectorRegistry(false);\n+        var registry = new CollectorRegistry(false, false);\n@@ -148,1 +148,1 @@\n-        var registry = new CollectorRegistry(false);\n+        var registry = new CollectorRegistry(false, false);\n@@ -164,1 +164,1 @@\n-        var registry = new CollectorRegistry(false);\n+        var registry = new CollectorRegistry(false, false);\n","filename":"metrics\/src\/test\/java\/org\/openjdk\/skara\/metrics\/GaugeTests.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"}]}