{"files":[{"patch":"@@ -27,1 +27,1 @@\n-import org.openjdk.skara.issuetracker.Issue;\n+import org.openjdk.skara.issuetracker.IssueTrackerIssue;\n@@ -60,1 +60,1 @@\n-            List<Issue> issueLists = new ArrayList<>();\n+            List<IssueTrackerIssue> issueLists = new ArrayList<>();\n","filename":"bots\/jep\/src\/test\/java\/org\/openjdk\/skara\/bots\/jep\/JEPBotTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,1 @@\n-    private List<Issue> issues(CommitMetadata metadata) {\n+    private List<IssueTrackerIssue> issues(CommitMetadata metadata) {\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/comment\/CommitCommentNotifier.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -376,1 +376,1 @@\n-    private Optional<Issue> findAltFixedVersionIssue(Issue issue, Branch branch) {\n+    private Optional<IssueTrackerIssue> findAltFixedVersionIssue(IssueTrackerIssue issue, Branch branch) {\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifier.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,1 +52,1 @@\n-    private Issue createBackportIssue(Issue primary, String fixVersion, String defaultSecurity) {\n+    private IssueTrackerIssue createBackportIssue(IssueTrackerIssue primary, String fixVersion, String defaultSecurity) {\n@@ -68,1 +68,1 @@\n-    public Issue createBackport(Issue primary, String fixVersion, String assignee, String defaultSecurity) {\n+    public IssueTrackerIssue createBackport(IssueTrackerIssue primary, String fixVersion, String assignee, String defaultSecurity) {\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/JbsBackport.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-    private Set<String> fixVersions(Issue issue) {\n+    private Set<String> fixVersions(IssueTrackerIssue issue) {\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifierTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-    private static void singleIssueLinkReply(PullRequest pr, Issue issue, PrintWriter writer) {\n+    private static void singleIssueLinkReply(PullRequest pr, IssueTrackerIssue issue, PrintWriter writer) {\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CSRCommand.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,2 +34,1 @@\n-import org.openjdk.skara.issuetracker.Issue;\n-import org.openjdk.skara.issuetracker.IssuePoller;\n+import org.openjdk.skara.issuetracker.IssueProjectPoller;\n@@ -37,0 +36,1 @@\n+import org.openjdk.skara.issuetracker.IssueTrackerIssue;\n@@ -46,1 +46,1 @@\n-    private final IssuePoller poller;\n+    private final IssueProjectPoller poller;\n@@ -63,1 +63,1 @@\n-        this.poller = new IssuePoller(issueProject, Duration.ofMinutes(10)) {\n+        this.poller = new IssueProjectPoller(issueProject, Duration.ofMinutes(10)) {\n@@ -66,1 +66,1 @@\n-            protected List<Issue> queryIssues(IssueProject issueProject, ZonedDateTime updatedAfter) {\n+            protected List<IssueTrackerIssue> queryIssues(IssueProject issueProject, ZonedDateTime updatedAfter) {\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CSRIssueBot.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import org.openjdk.skara.issuetracker.IssueTrackerIssue;\n@@ -47,1 +48,1 @@\n-    private final Issue csrIssue;\n+    private final IssueTrackerIssue csrIssue;\n@@ -50,1 +51,1 @@\n-    public CSRIssueWorkItem(CSRIssueBot bot, Issue csrIssue, Consumer<RuntimeException> errorHandler) {\n+    public CSRIssueWorkItem(CSRIssueBot bot, IssueTrackerIssue csrIssue, Consumer<RuntimeException> errorHandler) {\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CSRIssueWorkItem.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -137,1 +137,1 @@\n-    private List<Issue> issuesWithCSRAndJEP(List<Issue> issues, List<org.openjdk.skara.issuetracker.Issue> csrIssueTrackerIssues) {\n+    private List<Issue> issuesWithCSRAndJEP(List<Issue> issues, List<IssueTrackerIssue> csrIssueTrackerIssues) {\n@@ -150,1 +150,1 @@\n-    private Map<Issue, org.openjdk.skara.issuetracker.Issue> getCsrIssueTrackerIssues(List<Issue> issues, JdkVersion version) {\n+    private Map<Issue, IssueTrackerIssue> getCsrIssueTrackerIssues(List<Issue> issues, JdkVersion version) {\n@@ -152,1 +152,1 @@\n-        var csrIssueMap = new HashMap<Issue, org.openjdk.skara.issuetracker.Issue>();\n+        var csrIssueMap = new HashMap<Issue, IssueTrackerIssue>();\n@@ -173,1 +173,1 @@\n-    private List<Issue> getCsrIssues(List<org.openjdk.skara.issuetracker.Issue> csrIssueTrackerIssues) {\n+    private List<Issue> getCsrIssues(List<IssueTrackerIssue> csrIssueTrackerIssues) {\n@@ -256,1 +256,1 @@\n-    private boolean isWithdrawnCSR(org.openjdk.skara.issuetracker.Issue csr) {\n+    private boolean isWithdrawnCSR(IssueTrackerIssue csr) {\n@@ -269,1 +269,1 @@\n-    private String generateCSRProgressMessage(org.openjdk.skara.issuetracker.Issue issue) {\n+    private String generateCSRProgressMessage(IssueTrackerIssue issue) {\n@@ -274,1 +274,1 @@\n-    private Map<String, Boolean> botSpecificProgresses(List<org.openjdk.skara.issuetracker.Issue> csrIssueTrackerIssues, JdkVersion version) {\n+    private Map<String, Boolean> botSpecificProgresses(List<IssueTrackerIssue> csrIssueTrackerIssues, JdkVersion version) {\n@@ -1381,1 +1381,1 @@\n-    private void updateCSRLabel(List<Issue> issues, JdkVersion version, Map<Issue, org.openjdk.skara.issuetracker.Issue> csrIssueTrackerIssueMap) {\n+    private void updateCSRLabel(List<Issue> issues, JdkVersion version, Map<Issue, IssueTrackerIssue> csrIssueTrackerIssueMap) {\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import org.openjdk.skara.issuetracker.IssuePoller;\n+import org.openjdk.skara.issuetracker.IssueProjectPoller;\n@@ -38,0 +38,1 @@\n+import org.openjdk.skara.issuetracker.IssueTrackerIssue;\n@@ -42,1 +43,1 @@\n-    private final IssuePoller poller;\n+    private final IssueProjectPoller poller;\n@@ -60,1 +61,1 @@\n-        this.poller = new IssuePoller(issueProject, Duration.ofMinutes(10)) {\n+        this.poller = new IssueProjectPoller(issueProject, Duration.ofMinutes(10)) {\n@@ -63,1 +64,1 @@\n-            protected List<Issue> queryIssues(IssueProject issueProject, ZonedDateTime updatedAfter) {\n+            protected List<IssueTrackerIssue> queryIssues(IssueProject issueProject, ZonedDateTime updatedAfter) {\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/IssueBot.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import org.openjdk.skara.issuetracker.Issue;\n@@ -33,0 +32,1 @@\n+import org.openjdk.skara.issuetracker.IssueTrackerIssue;\n@@ -63,2 +63,2 @@\n-    private Optional<Issue> getJepIssue(String args, PullRequestBot bot) {\n-        Optional<Issue> jbsIssue = Optional.empty();\n+    private Optional<IssueTrackerIssue> getJepIssue(String args, PullRequestBot bot) {\n+        Optional<IssueTrackerIssue> jbsIssue = Optional.empty();\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/JEPCommand.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -115,1 +115,1 @@\n-    private String generateCSRProgressMessage(org.openjdk.skara.issuetracker.Issue issue) {\n+    private String generateCSRProgressMessage(IssueTrackerIssue issue) {\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CSRCommandTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -435,1 +435,1 @@\n-            var issue1 = (TestIssue)issues.createIssue(\"First\", List.of(\"Hello\"), Map.of());\n+            var issue1 = (TestIssueTrackerIssue) issues.createIssue(\"First\", List.of(\"Hello\"), Map.of());\n@@ -476,1 +476,1 @@\n-            var issue1 = (TestIssue)issues.createIssue(\"First\", List.of(\"Hello\"), Map.of());\n+            var issue1 = (TestIssueTrackerIssue) issues.createIssue(\"First\", List.of(\"Hello\"), Map.of());\n@@ -533,1 +533,1 @@\n-    private static Issue issueFromLastComment(PullRequest pr, IssueProject issueProject) {\n+    private static IssueTrackerIssue issueFromLastComment(PullRequest pr, IssueProject issueProject) {\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/IssueTests.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -267,30 +267,0 @@\n-    @Override\n-    public List<Link> links() {\n-        return null;\n-    }\n-\n-    @Override\n-    public void addLink(Link link) {\n-\n-    }\n-\n-    @Override\n-    public void removeLink(Link link) {\n-\n-    }\n-\n-    @Override\n-    public Map<String, JSONValue> properties() {\n-        return null;\n-    }\n-\n-    @Override\n-    public void setProperty(String name, JSONValue value) {\n-\n-    }\n-\n-    @Override\n-    public void removeProperty(String name) {\n-\n-    }\n-\n","filename":"bots\/tester\/src\/test\/java\/org\/openjdk\/skara\/bots\/tester\/InMemoryPullRequest.java","additions":0,"deletions":30,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -76,1 +76,1 @@\n-        org.openjdk.skara.issuetracker.Issue issue = issueProject.issue(arguments.at(0).asString()).orElseThrow();\n+        IssueTrackerIssue issue = issueProject.issue(arguments.at(0).asString()).orElseThrow();\n@@ -86,1 +86,1 @@\n-        var allIssues = new ArrayList<Issue>();\n+        var allIssues = new ArrayList<IssueTrackerIssue>();\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/debug\/IssueRedecorate.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+import org.openjdk.skara.issuetracker.IssueTrackerIssue;\n@@ -189,1 +190,1 @@\n-    static Optional<Issue> getIssue(Commit commit, Optional<String> project) throws IOException {\n+    static Optional<IssueTrackerIssue> getIssue(Commit commit, Optional<String> project) throws IOException {\n@@ -193,1 +194,1 @@\n-    static Optional<Issue> getIssue(Commit commit, String project) throws IOException {\n+    static Optional<IssueTrackerIssue> getIssue(Commit commit, String project) throws IOException {\n@@ -205,1 +206,1 @@\n-    static Optional<Issue> getIssue(Branch b, Optional<String> project) throws IOException {\n+    static Optional<IssueTrackerIssue> getIssue(Branch b, Optional<String> project) throws IOException {\n@@ -209,1 +210,1 @@\n-    static Optional<Issue> getIssue(Branch b, String project) throws IOException {\n+    static Optional<IssueTrackerIssue> getIssue(Branch b, String project) throws IOException {\n@@ -213,1 +214,1 @@\n-    static Optional<Issue> getIssue(String s, String project) throws IOException {\n+    static Optional<IssueTrackerIssue> getIssue(String s, String project) throws IOException {\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/pr\/Utils.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -644,30 +644,0 @@\n-    @Override\n-    public List<Link> links() {\n-        throw new RuntimeException(\"not implemented yet\");\n-    }\n-\n-    @Override\n-    public void addLink(Link link) {\n-        throw new RuntimeException(\"not implemented yet\");\n-    }\n-\n-    @Override\n-    public void removeLink(Link link) {\n-        throw new RuntimeException(\"not implemented yet\");\n-    }\n-\n-    @Override\n-    public Map<String, JSONValue> properties() {\n-        throw new RuntimeException(\"not implemented yet\");\n-    }\n-\n-    @Override\n-    public void setProperty(String name, JSONValue value) {\n-        throw new RuntimeException(\"not implemented yet\");\n-    }\n-\n-    @Override\n-    public void removeProperty(String name) {\n-        throw new RuntimeException(\"not implemented yet\");\n-    }\n-\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubPullRequest.java","additions":0,"deletions":30,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -777,30 +777,0 @@\n-    @Override\n-    public List<Link> links() {\n-        throw new RuntimeException(\"not implemented yet\");\n-    }\n-\n-    @Override\n-    public void addLink(Link link) {\n-        throw new RuntimeException(\"not implemented yet\");\n-    }\n-\n-    @Override\n-    public void removeLink(Link link) {\n-        throw new RuntimeException(\"not implemented yet\");\n-    }\n-\n-    @Override\n-    public Map<String, JSONValue> properties() {\n-        throw new RuntimeException(\"not implemented yet\");\n-    }\n-\n-    @Override\n-    public void setProperty(String name,JSONValue value) {\n-        throw new RuntimeException(\"not implemented yet\");\n-    }\n-\n-    @Override\n-    public void removeProperty(String name) {\n-        throw new RuntimeException(\"not implemented yet\");\n-    }\n-\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabMergeRequest.java","additions":0,"deletions":30,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,5 @@\n+\/**\n+ * An interface for common aspects of different kinds of issues, either in a bug tracking\n+ * system or pull requests. In practice it's rare to operate on something that could be\n+ * either a bug or a pull request, so avoid using this interface directly.\n+ *\/\n@@ -204,12 +209,0 @@\n-    List<Link> links();\n-\n-    void addLink(Link link);\n-\n-    void removeLink(Link link);\n-\n-    Map<String, JSONValue> properties();\n-\n-    void setProperty(String name, JSONValue value);\n-\n-    void removeProperty(String name);\n-\n","filename":"issuetracker\/src\/main\/java\/org\/openjdk\/skara\/issuetracker\/Issue.java","additions":6,"deletions":13,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n-    private final Issue linked;\n+    private final IssueTrackerIssue linked;\n@@ -29,1 +29,1 @@\n-    IssueLinkBuilder(Issue issue, String relationship) {\n+    IssueLinkBuilder(IssueTrackerIssue issue, String relationship) {\n","filename":"issuetracker\/src\/main\/java\/org\/openjdk\/skara\/issuetracker\/IssueLinkBuilder.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,194 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.skara.issuetracker;\n-\n-import java.time.Duration;\n-import java.time.Instant;\n-import java.time.ZonedDateTime;\n-import java.util.Comparator;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.logging.Logger;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-\n-public class IssuePoller {\n-\n-    private static final Logger log = Logger.getLogger(IssuePoller.class.getName());\n-\n-    private final IssueProject issueProject;\n-    private final Duration timeStampQueryPrecision;\n-    private final ZonedDateTime initialUpdatedAt;\n-    private final Map<String, Issue> retryMap = new HashMap<>();\n-\n-    record QueryResult(Map<String, Issue> issues, ZonedDateTime maxUpdatedAt,\n-                       Instant afterQuery, List<Issue> result,\n-                       \/*\n-                        * When enough time has passed since the last time we actually returned\n-                        * results, it's possible to pad the updatedAt query parameter to avoid\n-                        * receiving the same issues over and over, only to then filter them out.\n-                        *\/\n-                       boolean paddingPossible) {}\n-    private QueryResult current;\n-    private QueryResult prev;\n-\n-    \/**\n-     * @param issueProject The IssueProject to poll from\n-     * @param startUpPadding The amount of historic time to include in the\n-     *                       very first query\n-     *\/\n-    public IssuePoller(IssueProject issueProject, Duration startUpPadding) {\n-        this.issueProject = issueProject;\n-        this.timeStampQueryPrecision = issueProject.issueTracker().timeStampQueryPrecision();\n-        this.initialUpdatedAt = ZonedDateTime.now().minus(startUpPadding);\n-    }\n-\n-    public List<Issue> updatedIssues() {\n-        var beforeQuery = Instant.now();\n-        List<Issue> issues = queryIssues();\n-        var afterQuery = Instant.now();\n-\n-        \/\/ Convert the query result into a map\n-        var issuesMap = issues.stream().collect(Collectors.toMap(Issue::id, i -> i));\n-\n-        \/\/ Find the max updatedAt value in the result set. Fall back on the previous\n-        \/\/ value (happens if no results were returned), or the initialUpdatedAt (if\n-        \/\/ no results have been found at all so far).\n-        var maxUpdatedAt = issues.stream()\n-                .map(Issue::updatedAt)\n-                .max(Comparator.naturalOrder())\n-                .orElseGet(() -> prev != null ? prev.maxUpdatedAt : initialUpdatedAt);\n-\n-        \/\/ Filter the results\n-        var filtered = issues.stream()\n-                .filter(this::isUpdated)\n-                .toList();\n-\n-        \/\/ If nothing was left after filtering, update the paddingPossible state if enough time\n-        \/\/ has passed since last we found something.\n-        boolean paddingPossible = false;\n-        if (filtered.isEmpty()) {\n-            if (prev != null) {\n-                \/\/ The afterQuery value that we save should be the time when we last\n-                \/\/ found something after filtering.\n-                afterQuery = prev.afterQuery;\n-                if (prev.afterQuery.isBefore(beforeQuery.minus(timeStampQueryPrecision))) {\n-                    paddingPossible = true;\n-                }\n-            }\n-        }\n-\n-        var withRetries = addRetries(filtered);\n-\n-        \/\/ Save the state of the current query results\n-        current = new QueryResult(issuesMap, maxUpdatedAt, afterQuery, withRetries, paddingPossible);\n-\n-        log.info(\"Found \" + withRetries.size() + \" updated issues for \" + issueProject.name());\n-        return withRetries;\n-    }\n-\n-    \/**\n-     * After calling updatedIssues(), this method must be called to acknowledge\n-     * that all the issues returned have been handled. If not, the previous results will be\n-     * included in the next call to updatedIssues() again.\n-     *\/\n-    public synchronized void lastBatchHandled() {\n-        if (current != null) {\n-            prev = current;\n-            current = null;\n-            \/\/ Remove any returned PRs from the retry\/quarantine sets\n-            prev.result.forEach(pr -> retryMap.remove(pr.id()));\n-        }\n-    }\n-\n-    public synchronized void retryIssue(Issue issue) {\n-        retryMap.put(issue.id(), issue);\n-    }\n-\n-    private List<Issue> queryIssues() {\n-        ZonedDateTime queryAfter;\n-        if (prev == null || prev.maxUpdatedAt == null) {\n-            queryAfter = initialUpdatedAt;\n-        } else if (prev.paddingPossible) {\n-            \/\/ If we haven't found any actual results for long enough,\n-            \/\/ we can pad on the query precision to avoid fetching the\n-            \/\/ last returned issue over and over.\n-            queryAfter = prev.maxUpdatedAt.plus(timeStampQueryPrecision);\n-        } else {\n-            queryAfter = prev.maxUpdatedAt;\n-        }\n-        log.fine(\"Fetching issues updated after \" + queryAfter);\n-        return queryIssues(issueProject, queryAfter);\n-    }\n-\n-    \/**\n-     * Subclasses can override this method to query for specific kinds of issues.\n-     * @param issueProject IssueProject to run query on\n-     * @param updatedAfter Timestamp for updatedAt query\n-     *\/\n-    protected List<Issue> queryIssues(IssueProject issueProject, ZonedDateTime updatedAfter) {\n-        return issueProject.issues(updatedAfter);\n-    }\n-\n-    \/**\n-     * Evaluates if an issue has been updated since the previous query result.\n-     *\/\n-    private boolean isUpdated(Issue issue) {\n-        if (prev == null) {\n-            return true;\n-        }\n-        var issuePrev = prev.issues.get(issue.id());\n-        if (issuePrev == null || issue.updatedAt().isAfter(issuePrev.updatedAt())) {\n-            return true;\n-        }\n-        if (!issuePrev.equals(issue)) {\n-            return true;\n-        }\n-        return false;\n-    }\n-\n-    \/**\n-     * Returns a list of all prs with retries added.\n-     *\/\n-    private synchronized List<Issue> addRetries(List<Issue> issues) {\n-        if (retryMap.isEmpty()) {\n-            return issues;\n-        } else {\n-            \/\/ Find the retries not already present in the issues list\n-            var retries = retryMap.values().stream()\n-                    .filter(retryIssue -> issues.stream().noneMatch(issue -> issue.id().equals(retryIssue.id())))\n-                    .toList();\n-            if (retries.isEmpty()) {\n-                return issues;\n-            } else {\n-                return Stream.concat(issues.stream(), retries.stream()).toList();\n-            }\n-        }\n-    }\n-\n-    \/\/ Expose the query results to tests\n-    QueryResult getCurrentQueryResult() {\n-        return current;\n-    }\n-}\n","filename":"issuetracker\/src\/main\/java\/org\/openjdk\/skara\/issuetracker\/IssuePoller.java","additions":0,"deletions":194,"binary":false,"changes":194,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,3 +34,3 @@\n-    Issue createIssue(String title, List<String> body, Map<String, JSONValue> properties);\n-    Optional<Issue> issue(String id);\n-    List<Issue> issues();\n+    IssueTrackerIssue createIssue(String title, List<String> body, Map<String, JSONValue> properties);\n+    Optional<IssueTrackerIssue> issue(String id);\n+    List<IssueTrackerIssue> issues();\n@@ -42,1 +42,1 @@\n-    List<Issue> issues(ZonedDateTime updatedAfter);\n+    List<IssueTrackerIssue> issues(ZonedDateTime updatedAfter);\n@@ -50,1 +50,1 @@\n-    Optional<Issue> jepIssue(String jepId);\n+    Optional<IssueTrackerIssue> jepIssue(String jepId);\n@@ -58,1 +58,1 @@\n-    List<Issue> csrIssues(ZonedDateTime updatedAfter);\n+    List<IssueTrackerIssue> csrIssues(ZonedDateTime updatedAfter);\n@@ -64,1 +64,1 @@\n-    Optional<Issue> lastUpdatedIssue();\n+    Optional<IssueTrackerIssue> lastUpdatedIssue();\n","filename":"issuetracker\/src\/main\/java\/org\/openjdk\/skara\/issuetracker\/IssueProject.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,194 @@\n+\/*\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.issuetracker;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.ZonedDateTime;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+public class IssueProjectPoller {\n+\n+    private static final Logger log = Logger.getLogger(IssueProjectPoller.class.getName());\n+\n+    private final IssueProject issueProject;\n+    private final Duration timeStampQueryPrecision;\n+    private final ZonedDateTime initialUpdatedAt;\n+    private final Map<String, IssueTrackerIssue> retryMap = new HashMap<>();\n+\n+    record QueryResult(Map<String, IssueTrackerIssue> issues, ZonedDateTime maxUpdatedAt,\n+                       Instant afterQuery, List<IssueTrackerIssue> result,\n+                       \/*\n+                        * When enough time has passed since the last time we actually returned\n+                        * results, it's possible to pad the updatedAt query parameter to avoid\n+                        * receiving the same issues over and over, only to then filter them out.\n+                        *\/\n+                       boolean paddingPossible) {}\n+    private QueryResult current;\n+    private QueryResult prev;\n+\n+    \/**\n+     * @param issueProject The IssueProject to poll from\n+     * @param startUpPadding The amount of historic time to include in the\n+     *                       very first query\n+     *\/\n+    public IssueProjectPoller(IssueProject issueProject, Duration startUpPadding) {\n+        this.issueProject = issueProject;\n+        this.timeStampQueryPrecision = issueProject.issueTracker().timeStampQueryPrecision();\n+        this.initialUpdatedAt = ZonedDateTime.now().minus(startUpPadding);\n+    }\n+\n+    public List<IssueTrackerIssue> updatedIssues() {\n+        var beforeQuery = Instant.now();\n+        List<IssueTrackerIssue> issues = queryIssues();\n+        var afterQuery = Instant.now();\n+\n+        \/\/ Convert the query result into a map\n+        var issuesMap = issues.stream().collect(Collectors.toMap(Issue::id, i -> i));\n+\n+        \/\/ Find the max updatedAt value in the result set. Fall back on the previous\n+        \/\/ value (happens if no results were returned), or the initialUpdatedAt (if\n+        \/\/ no results have been found at all so far).\n+        var maxUpdatedAt = issues.stream()\n+                .map(Issue::updatedAt)\n+                .max(Comparator.naturalOrder())\n+                .orElseGet(() -> prev != null ? prev.maxUpdatedAt : initialUpdatedAt);\n+\n+        \/\/ Filter the results\n+        var filtered = issues.stream()\n+                .filter(this::isUpdated)\n+                .toList();\n+\n+        \/\/ If nothing was left after filtering, update the paddingPossible state if enough time\n+        \/\/ has passed since last we found something.\n+        boolean paddingPossible = false;\n+        if (filtered.isEmpty()) {\n+            if (prev != null) {\n+                \/\/ The afterQuery value that we save should be the time when we last\n+                \/\/ found something after filtering.\n+                afterQuery = prev.afterQuery;\n+                if (prev.afterQuery.isBefore(beforeQuery.minus(timeStampQueryPrecision))) {\n+                    paddingPossible = true;\n+                }\n+            }\n+        }\n+\n+        var withRetries = addRetries(filtered);\n+\n+        \/\/ Save the state of the current query results\n+        current = new QueryResult(issuesMap, maxUpdatedAt, afterQuery, withRetries, paddingPossible);\n+\n+        log.info(\"Found \" + withRetries.size() + \" updated issues for \" + issueProject.name());\n+        return withRetries;\n+    }\n+\n+    \/**\n+     * After calling updatedIssues(), this method must be called to acknowledge\n+     * that all the issues returned have been handled. If not, the previous results will be\n+     * included in the next call to updatedIssues() again.\n+     *\/\n+    public synchronized void lastBatchHandled() {\n+        if (current != null) {\n+            prev = current;\n+            current = null;\n+            \/\/ Remove any returned PRs from the retry\/quarantine sets\n+            prev.result.forEach(pr -> retryMap.remove(pr.id()));\n+        }\n+    }\n+\n+    public synchronized void retryIssue(IssueTrackerIssue issue) {\n+        retryMap.put(issue.id(), issue);\n+    }\n+\n+    private List<IssueTrackerIssue> queryIssues() {\n+        ZonedDateTime queryAfter;\n+        if (prev == null || prev.maxUpdatedAt == null) {\n+            queryAfter = initialUpdatedAt;\n+        } else if (prev.paddingPossible) {\n+            \/\/ If we haven't found any actual results for long enough,\n+            \/\/ we can pad on the query precision to avoid fetching the\n+            \/\/ last returned issue over and over.\n+            queryAfter = prev.maxUpdatedAt.plus(timeStampQueryPrecision);\n+        } else {\n+            queryAfter = prev.maxUpdatedAt;\n+        }\n+        log.fine(\"Fetching issues updated after \" + queryAfter);\n+        return queryIssues(issueProject, queryAfter);\n+    }\n+\n+    \/**\n+     * Subclasses can override this method to query for specific kinds of issues.\n+     * @param issueProject IssueProject to run query on\n+     * @param updatedAfter Timestamp for updatedAt query\n+     *\/\n+    protected List<IssueTrackerIssue> queryIssues(IssueProject issueProject, ZonedDateTime updatedAfter) {\n+        return issueProject.issues(updatedAfter);\n+    }\n+\n+    \/**\n+     * Evaluates if an issue has been updated since the previous query result.\n+     *\/\n+    private boolean isUpdated(IssueTrackerIssue issue) {\n+        if (prev == null) {\n+            return true;\n+        }\n+        var issuePrev = prev.issues.get(issue.id());\n+        if (issuePrev == null || issue.updatedAt().isAfter(issuePrev.updatedAt())) {\n+            return true;\n+        }\n+        if (!issuePrev.equals(issue)) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    \/**\n+     * Returns a list of all prs with retries added.\n+     *\/\n+    private synchronized List<IssueTrackerIssue> addRetries(List<IssueTrackerIssue> issues) {\n+        if (retryMap.isEmpty()) {\n+            return issues;\n+        } else {\n+            \/\/ Find the retries not already present in the issues list\n+            var retries = retryMap.values().stream()\n+                    .filter(retryIssue -> issues.stream().noneMatch(issue -> issue.id().equals(retryIssue.id())))\n+                    .toList();\n+            if (retries.isEmpty()) {\n+                return issues;\n+            } else {\n+                return Stream.concat(issues.stream(), retries.stream()).toList();\n+            }\n+        }\n+    }\n+\n+    \/\/ Expose the query results to tests\n+    QueryResult getCurrentQueryResult() {\n+        return current;\n+    }\n+}\n","filename":"issuetracker\/src\/main\/java\/org\/openjdk\/skara\/issuetracker\/IssueProjectPoller.java","additions":194,"deletions":0,"binary":false,"changes":194,"status":"added"},{"patch":"@@ -0,0 +1,45 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.issuetracker;\n+\n+import java.util.List;\n+import java.util.Map;\n+import org.openjdk.skara.json.JSONValue;\n+\n+\/**\n+ * Extension of the Issue interface with additional functionality present in a bug\n+ * tracking system. Extracted to an interface to facilitate test implementations.\n+ *\/\n+public interface IssueTrackerIssue extends Issue {\n+    List<Link> links();\n+\n+    void addLink(Link link);\n+\n+    void removeLink(Link link);\n+\n+    Map<String, JSONValue> properties();\n+\n+    void setProperty(String name, JSONValue value);\n+\n+    void removeProperty(String name);\n+}\n","filename":"issuetracker\/src\/main\/java\/org\/openjdk\/skara\/issuetracker\/IssueTrackerIssue.java","additions":45,"deletions":0,"binary":false,"changes":45,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n-    private final Issue linked;\n+    private final IssueTrackerIssue linked;\n@@ -40,1 +40,2 @@\n-    Link(URI uri, String title, String relationship, String summary, URI iconUrl, String iconTitle, URI statusIconUrl, String statusIconTitle, boolean resolved, Issue linked) {\n+    Link(URI uri, String title, String relationship, String summary, URI iconUrl, String iconTitle,\n+            URI statusIconUrl, String statusIconTitle, boolean resolved, IssueTrackerIssue linked) {\n@@ -57,1 +58,1 @@\n-    public static IssueLinkBuilder create(Issue issue, String relationship) {\n+    public static IssueLinkBuilder create(IssueTrackerIssue issue, String relationship) {\n@@ -69,1 +70,1 @@\n-    public Optional<Issue> issue() {\n+    public Optional<IssueTrackerIssue> issue() {\n","filename":"issuetracker\/src\/main\/java\/org\/openjdk\/skara\/issuetracker\/Link.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-public class JiraIssue implements Issue {\n+public class JiraIssue implements IssueTrackerIssue {\n","filename":"issuetracker\/src\/main\/java\/org\/openjdk\/skara\/issuetracker\/jira\/JiraIssue.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,1 +49,1 @@\n-    private Map<String, Map<String, JSONObject>> createFieldCache = new HashMap<>();\n+    private final Map<String, Map<String, JSONObject>> createFieldCache = new HashMap<>();\n@@ -357,1 +357,1 @@\n-    public Issue createIssue(String title, List<String> body, Map<String, JSONValue> properties) {\n+    public IssueTrackerIssue createIssue(String title, List<String> body, Map<String, JSONValue> properties) {\n@@ -428,1 +428,1 @@\n-    public Optional<Issue> issue(String id) {\n+    public Optional<IssueTrackerIssue> issue(String id) {\n@@ -448,1 +448,1 @@\n-    public Optional<Issue> jepIssue(String jepId) {\n+    public Optional<IssueTrackerIssue> jepIssue(String jepId) {\n@@ -461,2 +461,2 @@\n-    public List<Issue> issues() {\n-        var ret = new ArrayList<Issue>();\n+    public List<IssueTrackerIssue> issues() {\n+        var ret = new ArrayList<IssueTrackerIssue>();\n@@ -473,1 +473,1 @@\n-    public List<Issue> issues(ZonedDateTime updatedAfter) {\n+    public List<IssueTrackerIssue> issues(ZonedDateTime updatedAfter) {\n@@ -481,1 +481,1 @@\n-    public List<Issue> csrIssues(ZonedDateTime updatedAfter) {\n+    public List<IssueTrackerIssue> csrIssues(ZonedDateTime updatedAfter) {\n@@ -488,1 +488,1 @@\n-    public Optional<Issue> lastUpdatedIssue() {\n+    public Optional<IssueTrackerIssue> lastUpdatedIssue() {\n@@ -508,2 +508,2 @@\n-    private ArrayList<Issue> queryIssues(String jql) {\n-        var ret = new ArrayList<Issue>();\n+    private ArrayList<IssueTrackerIssue> queryIssues(String jql) {\n+        var ret = new ArrayList<IssueTrackerIssue>();\n","filename":"issuetracker\/src\/main\/java\/org\/openjdk\/skara\/issuetracker\/jira\/JiraProject.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import org.junit.jupiter.api.Assertions;\n@@ -37,1 +36,1 @@\n-public class IssuePollerTests {\n+public class IssueProjectPollerTests {\n@@ -43,1 +42,1 @@\n-            var issuePoller = new IssuePoller(issueProject, Duration.ZERO);\n+            var issuePoller = new IssueProjectPoller(issueProject, Duration.ZERO);\n@@ -90,1 +89,1 @@\n-            var issuePoller = new IssuePoller(issueProject, Duration.ofDays(2));\n+            var issuePoller = new IssueProjectPoller(issueProject, Duration.ofDays(2));\n@@ -111,1 +110,1 @@\n-            var issuePoller = new IssuePoller(issueProject, Duration.ZERO);\n+            var issuePoller = new IssueProjectPoller(issueProject, Duration.ZERO);\n@@ -179,1 +178,1 @@\n-            var issuePoller = new IssuePoller(issueProject, Duration.ZERO);\n+            var issuePoller = new IssueProjectPoller(issueProject, Duration.ZERO);\n","filename":"issuetracker\/src\/test\/java\/org\/openjdk\/skara\/issuetracker\/IssueProjectPollerTests.java","additions":6,"deletions":7,"binary":false,"changes":13,"previous_filename":"issuetracker\/src\/test\/java\/org\/openjdk\/skara\/issuetracker\/IssuePollerTests.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n-import org.openjdk.skara.issuetracker.Issue;\n+import org.openjdk.skara.issuetracker.IssueTrackerIssue;\n@@ -42,1 +42,1 @@\n-    private static boolean isPrimaryIssue(Issue issue) {\n+    private static boolean isPrimaryIssue(IssueTrackerIssue issue) {\n@@ -55,1 +55,1 @@\n-    public static Set<String> fixVersions(Issue issue) {\n+    public static Set<String> fixVersions(IssueTrackerIssue issue) {\n@@ -70,1 +70,1 @@\n-    public static Optional<JdkVersion> mainFixVersion(Issue issue) {\n+    public static Optional<JdkVersion> mainFixVersion(IssueTrackerIssue issue) {\n@@ -92,1 +92,1 @@\n-    public static Optional<Issue> findMainIssue(Issue issue) {\n+    public static Optional<IssueTrackerIssue> findMainIssue(IssueTrackerIssue issue) {\n@@ -118,1 +118,1 @@\n-    private static boolean matchVersion(Issue issue, JdkVersion fixVersion) {\n+    private static boolean matchVersion(IssueTrackerIssue issue, JdkVersion fixVersion) {\n@@ -130,1 +130,1 @@\n-    private static boolean matchOptPoolVersion(Issue issue, JdkVersion fixVersion) {\n+    private static boolean matchOptPoolVersion(IssueTrackerIssue issue, JdkVersion fixVersion) {\n@@ -152,1 +152,1 @@\n-    private static boolean matchPoolVersion(Issue issue, JdkVersion fixVersion) {\n+    private static boolean matchPoolVersion(IssueTrackerIssue issue, JdkVersion fixVersion) {\n@@ -188,1 +188,1 @@\n-    private static boolean matchScratchVersion(Issue issue) {\n+    private static boolean matchScratchVersion(IssueTrackerIssue issue) {\n@@ -209,1 +209,1 @@\n-    public static Optional<Issue> findIssue(Issue primary, JdkVersion fixVersion) {\n+    public static Optional<IssueTrackerIssue> findIssue(IssueTrackerIssue primary, JdkVersion fixVersion) {\n@@ -211,1 +211,1 @@\n-        var candidates = Stream.concat(Stream.of(primary), findBackports(primary, false).stream()).collect(Collectors.toList());\n+        var candidates = Stream.concat(Stream.of(primary), findBackports(primary, false).stream()).toList();\n@@ -253,1 +253,1 @@\n-    public static Optional<Issue> findFixedIssue(Issue primary, Pattern versionPattern) {\n+    public static Optional<IssueTrackerIssue> findFixedIssue(IssueTrackerIssue primary, Pattern versionPattern) {\n@@ -256,1 +256,1 @@\n-        return Stream.concat(Stream.of(primary).filter(Issue::isFixed), findBackports(primary, true).stream())\n+        return Stream.concat(Stream.of(primary).filter(IssueTrackerIssue::isFixed), findBackports(primary, true).stream())\n@@ -274,1 +274,1 @@\n-    public static Optional<Issue> findClosestIssue(List<Issue> issueList, JdkVersion fixVersion) {\n+    public static Optional<IssueTrackerIssue> findClosestIssue(List<IssueTrackerIssue> issueList, JdkVersion fixVersion) {\n@@ -307,2 +307,2 @@\n-    public static Optional<Issue> findCsr(Issue primary, JdkVersion version) {\n-        var csrList = new ArrayList<Issue>();\n+    public static Optional<IssueTrackerIssue> findCsr(IssueTrackerIssue primary, JdkVersion version) {\n+        var csrList = new ArrayList<IssueTrackerIssue>();\n@@ -319,1 +319,1 @@\n-    private static Optional<Link> csrLink(Issue issue) {\n+    private static Optional<Link> csrLink(IssueTrackerIssue issue) {\n@@ -324,1 +324,1 @@\n-    public static List<Issue> findBackports(Issue primary, boolean fixedOnly) {\n+    public static List<IssueTrackerIssue> findBackports(IssueTrackerIssue primary, boolean fixedOnly) {\n@@ -447,2 +447,2 @@\n-    private static List<List<Issue>> groupByReleaseStream(List<Issue> issues) {\n-        var streamIssues = new HashMap<String, List<Issue>>();\n+    private static List<List<IssueTrackerIssue>> groupByReleaseStream(List<IssueTrackerIssue> issues) {\n+        var streamIssues = new HashMap<String, List<IssueTrackerIssue>>();\n@@ -464,1 +464,1 @@\n-        var ret = new ArrayList<List<Issue>>();\n+        var ret = new ArrayList<List<IssueTrackerIssue>>();\n@@ -477,1 +477,1 @@\n-    private static boolean onExcludeList(Issue issue) {\n+    private static boolean onExcludeList(IssueTrackerIssue issue) {\n@@ -521,2 +521,2 @@\n-    public static List<Issue> releaseStreamDuplicates(List<Issue> related) {\n-        var ret = new ArrayList<Issue>();\n+    public static List<IssueTrackerIssue> releaseStreamDuplicates(List<IssueTrackerIssue> related) {\n+        var ret = new ArrayList<IssueTrackerIssue>();\n","filename":"jbs\/src\/main\/java\/org\/openjdk\/skara\/jbs\/Backports.java","additions":25,"deletions":25,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n-import org.openjdk.skara.test.TestIssue;\n+import org.openjdk.skara.test.TestIssueTrackerIssue;\n@@ -273,1 +273,1 @@\n-        private final List<TestIssue> issues;\n+        private final List<TestIssueTrackerIssue> issues;\n@@ -275,1 +275,1 @@\n-        private void setState(Issue issue, String version) {\n+        private void setState(IssueTrackerIssue issue, String version) {\n@@ -319,1 +319,1 @@\n-            var allIssues = new ArrayList<Issue>();\n+            var allIssues = new ArrayList<IssueTrackerIssue>();\n@@ -332,1 +332,1 @@\n-            var allIssues = new ArrayList<Issue>();\n+            var allIssues = new ArrayList<IssueTrackerIssue>();\n@@ -1025,1 +1025,1 @@\n-            issue = (TestIssue) issueProject.issue(issue.id()).orElseThrow();\n+            issue = (TestIssueTrackerIssue) issueProject.issue(issue.id()).orElseThrow();\n","filename":"jbs\/src\/test\/java\/org\/openjdk\/skara\/jbs\/BackportsTests.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,1 +47,1 @@\n-    private final List<Issue> issuesToBeClosed = new ArrayList<>();\n+    private final List<IssueTrackerIssue> issuesToBeClosed = new ArrayList<>();\n@@ -399,2 +399,2 @@\n-    public TestIssue createIssue(IssueProject issueProject, String title) {\n-        var issue = (TestIssue) issueProject.createIssue(title, List.of(), Map.of(\"issuetype\", JSON.of(\"Bug\")));\n+    public TestIssueTrackerIssue createIssue(IssueProject issueProject, String title) {\n+        var issue = (TestIssueTrackerIssue) issueProject.createIssue(title, List.of(), Map.of(\"issuetype\", JSON.of(\"Bug\")));\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/HostCredentials.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -70,1 +70,1 @@\n-        private final Map<String, TestIssueStore> issues = new HashMap<>();\n+        private final Map<String, TestIssueTrackerIssueStore> issues = new HashMap<>();\n@@ -215,1 +215,1 @@\n-    TestIssue createIssue(TestIssueProject issueProject, String title, List<String> body, Map<String, JSONValue> properties) {\n+    TestIssueTrackerIssue createIssue(TestIssueProject issueProject, String title, List<String> body, Map<String, JSONValue> properties) {\n@@ -218,1 +218,1 @@\n-        var issueStore = new TestIssueStore(id, issueProject, author, title, body, properties);\n+        var issueStore = new TestIssueTrackerIssueStore(id, issueProject, author, title, body, properties);\n@@ -220,1 +220,1 @@\n-        return new TestIssue(issueStore, author);\n+        return new TestIssueTrackerIssue(issueStore, author);\n@@ -223,1 +223,1 @@\n-    TestIssue getIssue(TestIssueProject issueProject, String id) {\n+    TestIssueTrackerIssue getIssue(TestIssueProject issueProject, String id) {\n@@ -228,1 +228,1 @@\n-        return new TestIssue(issueStore, issueProject.issueTracker().currentUser());\n+        return new TestIssueTrackerIssue(issueStore, issueProject.issueTracker().currentUser());\n@@ -231,1 +231,1 @@\n-    TestIssue getJepIssue(TestIssueProject issueProject, String jepId) {\n+    TestIssueTrackerIssue getJepIssue(TestIssueProject issueProject, String jepId) {\n@@ -245,1 +245,1 @@\n-    List<TestIssue> getIssues(TestIssueProject issueProject) {\n+    List<TestIssueTrackerIssue> getIssues(TestIssueProject issueProject) {\n@@ -253,1 +253,1 @@\n-    List<TestIssue> getIssues(TestIssueProject issueProject, ZonedDateTime updatedAfter) {\n+    List<TestIssueTrackerIssue> getIssues(TestIssueProject issueProject, ZonedDateTime updatedAfter) {\n@@ -261,1 +261,1 @@\n-    List<TestIssue> getCsrIssues(TestIssueProject issueProject, ZonedDateTime updatedAfter) {\n+    List<TestIssueTrackerIssue> getCsrIssues(TestIssueProject issueProject, ZonedDateTime updatedAfter) {\n@@ -273,1 +273,1 @@\n-    Optional<TestIssue> getLastUpdatedIssue(TestIssueProject issueProject) {\n+    Optional<TestIssueTrackerIssue> getLastUpdatedIssue(TestIssueProject issueProject) {\n@@ -276,1 +276,1 @@\n-                .max(Comparator.comparing(TestIssue::updatedAt));\n+                .max(Comparator.comparing(TestIssueTrackerIssue::updatedAt));\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestHost.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,5 +25,0 @@\n-import org.openjdk.skara.host.HostUser;\n-import org.openjdk.skara.issuetracker.*;\n-import org.openjdk.skara.json.*;\n-import org.openjdk.skara.network.URIBuilder;\n-\n@@ -32,1 +27,4 @@\n-import java.util.*;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n@@ -34,0 +32,6 @@\n+import org.openjdk.skara.host.HostUser;\n+import org.openjdk.skara.issuetracker.Comment;\n+import org.openjdk.skara.issuetracker.Issue;\n+import org.openjdk.skara.issuetracker.IssueProject;\n+import org.openjdk.skara.issuetracker.Label;\n+import org.openjdk.skara.network.URIBuilder;\n@@ -36,5 +40,1 @@\n- * TestIssue is the object returned from a TestHost when queried for issues.\n- * It's backed by a TestIssueStore, which tracks the \"server side\" state of the\n- * issue. A TestIssue object contains a snapshot of the server side state for\n- * all data directly related to the issue. What data is snapshotted and what\n- * is fetched on request should be the same as for JiraIssue.\n+ * Base class with common functionality for TestIssueTrackerIssue and TestPullRequest\n@@ -114,4 +114,4 @@\n-                                  body,\n-                                  user,\n-                                  ZonedDateTime.now(),\n-                                  ZonedDateTime.now());\n+                body,\n+                user,\n+                ZonedDateTime.now(),\n+                ZonedDateTime.now());\n@@ -134,4 +134,4 @@\n-                                  body,\n-                                  originalComment.author(),\n-                                  originalComment.createdAt(),\n-                                  ZonedDateTime.now());\n+                body,\n+                originalComment.author(),\n+                originalComment.createdAt(),\n+                ZonedDateTime.now());\n@@ -163,3 +163,0 @@\n-        if (state == State.RESOLVED || state == State.CLOSED) {\n-            store.properties().put(\"resolution\", JSON.object().put(\"name\", JSON.of(\"Fixed\")));\n-        }\n@@ -168,5 +165,1 @@\n-    \/**\n-     * This implementation mimics the JiraIssue definition of isFixed and is\n-     * needed to test handling of backports.\n-     *\/\n-    @Override\n+   @Override\n@@ -174,7 +167,1 @@\n-        if (isResolved() || isClosed()) {\n-            var resolution = store.properties().get(\"resolution\");\n-            if (!resolution.isNull()) {\n-                return \"Fixed\".equals(resolution.get(\"name\").asString());\n-            }\n-        }\n-        return false;\n+        return isResolved() || isClosed();\n@@ -234,85 +221,0 @@\n-    \/**\n-     * When links are returned, they need to contain fresh snapshots of any TestIssue.\n-     *\/\n-    @Override\n-    public List<Link> links() {\n-        return store.links().stream()\n-                .map(this::updateLinkIssue)\n-                .toList();\n-    }\n-\n-    private Link updateLinkIssue(Link link) {\n-        if (link.issue().isPresent()) {\n-            var issue = (TestIssue) link.issue().get();\n-            return Link.create(issue.copy(), link.relationship().orElseThrow()).build();\n-        } else {\n-            return link;\n-        }\n-    }\n-\n-    protected TestIssue copy() {\n-        return new TestIssue(store, user);\n-    }\n-\n-    @Override\n-    public void addLink(Link link) {\n-        if (link.uri().isPresent()) {\n-            removeLink(link);\n-            store.links().add(link);\n-        } else if (link.issue().isPresent()) {\n-            var existing = store.links().stream()\n-                    .filter(l -> l.issue().isPresent() && l.issue().get().id().equals(link.issue().orElseThrow().id()))\n-                    .findAny();\n-            existing.ifPresent(store.links()::remove);\n-            store.links().add(link);\n-            if (existing.isEmpty()) {\n-                var map = Map.of(\"backported by\", \"backport of\", \"backport of\", \"backported by\",\n-                        \"csr for\", \"csr of\", \"csr of\", \"csr for\",\n-                        \"blocks\", \"is blocked by\", \"is blocked by\", \"blocks\",\n-                        \"clones\", \"is cloned by\", \"is cloned by\", \"clones\");\n-                var reverseRelationship = map.getOrDefault(link.relationship().orElseThrow(), link.relationship().orElseThrow());\n-                var reverse = Link.create(this, reverseRelationship).build();\n-                link.issue().get().addLink(reverse);\n-            }\n-        } else {\n-            throw new IllegalArgumentException(\"Can't add unknown link type: \" + link);\n-        }\n-        store.setLastUpdate(ZonedDateTime.now());\n-    }\n-\n-    @Override\n-    public void removeLink(Link link) {\n-        if (link.uri().isPresent()) {\n-            store.links().removeIf(l -> l.uri().equals(link.uri()));\n-        } else if (link.issue().isPresent()) {\n-            var existing = store.links().stream()\n-                                     .filter(l -> l.issue().orElseThrow().id().equals(link.issue().orElseThrow().id()))\n-                                     .findAny();\n-            if (existing.isPresent()) {\n-                store.links().remove(existing.get());\n-                var reverse = Link.create(this, \"\").build();\n-                link.issue().get().removeLink(reverse);\n-            }\n-        } else {\n-            throw new IllegalArgumentException(\"Can't remove unknown link type: \" + link);\n-        }\n-        store.setLastUpdate(ZonedDateTime.now());\n-    }\n-\n-    @Override\n-    public Map<String, JSONValue> properties() {\n-        return store.properties();\n-    }\n-\n-    @Override\n-    public void setProperty(String name, JSONValue value) {\n-        store.properties().put(name, value);\n-        store.setLastUpdate(ZonedDateTime.now());\n-    }\n-\n-    @Override\n-    public void removeProperty(String name) {\n-        store.properties().remove(name);\n-        store.setLastUpdate(ZonedDateTime.now());\n-    }\n-\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestIssue.java","additions":22,"deletions":120,"binary":false,"changes":142,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,1 +57,1 @@\n-    public Issue createIssue(String title, List<String> body, Map<String, JSONValue> properties) {\n+    public IssueTrackerIssue createIssue(String title, List<String> body, Map<String, JSONValue> properties) {\n@@ -62,1 +62,1 @@\n-    public Optional<Issue> issue(String id) {\n+    public Optional<IssueTrackerIssue> issue(String id) {\n@@ -71,1 +71,1 @@\n-    public Optional<Issue> jepIssue(String jepId) {\n+    public Optional<IssueTrackerIssue> jepIssue(String jepId) {\n@@ -76,1 +76,1 @@\n-    public List<Issue> issues() {\n+    public List<IssueTrackerIssue> issues() {\n@@ -81,1 +81,1 @@\n-    public List<Issue> issues(ZonedDateTime updatedAfter) {\n+    public List<IssueTrackerIssue> issues(ZonedDateTime updatedAfter) {\n@@ -86,1 +86,1 @@\n-    public List<Issue> csrIssues(ZonedDateTime updatedAfter) {\n+    public List<IssueTrackerIssue> csrIssues(ZonedDateTime updatedAfter) {\n@@ -91,1 +91,1 @@\n-    public Optional<Issue> lastUpdatedIssue() {\n+    public Optional<IssueTrackerIssue> lastUpdatedIssue() {\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestIssueProject.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,5 +25,0 @@\n-import java.util.stream.Collectors;\n-import org.openjdk.skara.host.HostUser;\n-import org.openjdk.skara.issuetracker.*;\n-import org.openjdk.skara.json.JSONValue;\n-\n@@ -31,1 +26,8 @@\n-import java.util.*;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.openjdk.skara.host.HostUser;\n+import org.openjdk.skara.issuetracker.Comment;\n+import org.openjdk.skara.issuetracker.Issue;\n+import org.openjdk.skara.issuetracker.IssueProject;\n@@ -34,2 +36,1 @@\n- * Backing store for TestIssue. Represents the \"server side\" state of an Issue.\n- *\n+ * Base class for backing store for issues. Represents the server side store of an Issue.\n@@ -48,2 +49,0 @@\n-    private final List<Link> links = new ArrayList<>();\n-    private final Map<String, JSONValue> properties = new HashMap<>();\n@@ -54,2 +53,1 @@\n-    public TestIssueStore(String id, IssueProject issueProject, HostUser author, String title, List<String> body,\n-            Map<String, JSONValue> properties) {\n+    public TestIssueStore(String id, IssueProject issueProject, HostUser author, String title, List<String> body) {\n@@ -61,3 +59,0 @@\n-        if (properties != null) {\n-            this.properties.putAll(properties);\n-        }\n@@ -106,8 +101,0 @@\n-    public List<Link> links() {\n-        return links;\n-    }\n-\n-    public Map<String, JSONValue> properties() {\n-        return properties;\n-    }\n-\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestIssueStore.java","additions":11,"deletions":24,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -0,0 +1,162 @@\n+\/*\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.test;\n+\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Map;\n+import org.openjdk.skara.host.HostUser;\n+import org.openjdk.skara.issuetracker.IssueTrackerIssue;\n+import org.openjdk.skara.issuetracker.Link;\n+import org.openjdk.skara.json.JSON;\n+import org.openjdk.skara.json.JSONValue;\n+\n+\/**\n+ * TestIssueTrackerIssue is the object returned from a TestHost when queried for\n+ * issues. It's backed by a TestIssueStore, which tracks the \"server side\" state\n+ * of the issue. A TestIssue object contains a snapshot of the server side state\n+ * for all data directly related to the issue. What data is snapshotted and what\n+ * is fetched on request should be the same as for JiraIssue.\n+ *\/\n+public class TestIssueTrackerIssue extends TestIssue implements IssueTrackerIssue {\n+\n+    public TestIssueTrackerIssue(TestIssueTrackerIssueStore store, HostUser user) {\n+        super(store, user);\n+    }\n+\n+    \/**\n+     * Gives test code direct access to the backing store object to be able to\n+     * inspect and manipulate state directly.\n+     *\/\n+    public TestIssueTrackerIssueStore store() {\n+        return (TestIssueTrackerIssueStore) super.store();\n+    }\n+\n+    @Override\n+    public void setState(State state) {\n+        super.setState(state);\n+        if (state == State.RESOLVED || state == State.CLOSED) {\n+            store().properties().put(\"resolution\", JSON.object().put(\"name\", JSON.of(\"Fixed\")));\n+        }\n+    }\n+\n+    \/**\n+     * This implementation mimics the JiraIssue definition of isFixed and is\n+     * needed to test handling of backports.\n+     *\/\n+    @Override\n+    public boolean isFixed() {\n+        if (super.isFixed()) {\n+            var resolution = store().properties().get(\"resolution\");\n+            if (!resolution.isNull()) {\n+                return \"Fixed\".equals(resolution.get(\"name\").asString());\n+            }\n+        }\n+        return false;\n+    }\n+\n+    \/**\n+     * When links are returned, they need to contain fresh snapshots of any TestIssue.\n+     *\/\n+    @Override\n+    public List<Link> links() {\n+        return store().links().stream()\n+                .map(this::updateLinkIssue)\n+                .toList();\n+    }\n+\n+    private Link updateLinkIssue(Link link) {\n+        if (link.issue().isPresent()) {\n+            var issue = (TestIssueTrackerIssue) link.issue().get();\n+            return Link.create(issue.copy(), link.relationship().orElseThrow()).build();\n+        } else {\n+            return link;\n+        }\n+    }\n+\n+    protected TestIssueTrackerIssue copy() {\n+        return new TestIssueTrackerIssue(store(), user);\n+    }\n+\n+    @Override\n+    public void addLink(Link link) {\n+        if (link.uri().isPresent()) {\n+            removeLink(link);\n+            store().links().add(link);\n+        } else if (link.issue().isPresent()) {\n+            var existing = store().links().stream()\n+                    .filter(l -> l.issue().isPresent() && l.issue().get().id().equals(link.issue().orElseThrow().id()))\n+                    .findAny();\n+            existing.ifPresent(store().links()::remove);\n+            store().links().add(link);\n+            if (existing.isEmpty()) {\n+                var map = Map.of(\"backported by\", \"backport of\", \"backport of\", \"backported by\",\n+                        \"csr for\", \"csr of\", \"csr of\", \"csr for\",\n+                        \"blocks\", \"is blocked by\", \"is blocked by\", \"blocks\",\n+                        \"clones\", \"is cloned by\", \"is cloned by\", \"clones\");\n+                var reverseRelationship = map.getOrDefault(link.relationship().orElseThrow(), link.relationship().orElseThrow());\n+                var reverse = Link.create(this, reverseRelationship).build();\n+                link.issue().get().addLink(reverse);\n+            }\n+        } else {\n+            throw new IllegalArgumentException(\"Can't add unknown link type: \" + link);\n+        }\n+        store().setLastUpdate(ZonedDateTime.now());\n+    }\n+\n+    @Override\n+    public void removeLink(Link link) {\n+        if (link.uri().isPresent()) {\n+            store().links().removeIf(l -> l.uri().equals(link.uri()));\n+        } else if (link.issue().isPresent()) {\n+            var existing = store().links().stream()\n+                    .filter(l -> l.issue().orElseThrow().id().equals(link.issue().orElseThrow().id()))\n+                    .findAny();\n+            if (existing.isPresent()) {\n+                store().links().remove(existing.get());\n+                var reverse = Link.create(this, \"\").build();\n+                link.issue().get().removeLink(reverse);\n+            }\n+        } else {\n+            throw new IllegalArgumentException(\"Can't remove unknown link type: \" + link);\n+        }\n+        store().setLastUpdate(ZonedDateTime.now());\n+    }\n+\n+    @Override\n+    public Map<String, JSONValue> properties() {\n+        return store().properties();\n+    }\n+\n+    @Override\n+    public void setProperty(String name, JSONValue value) {\n+        store().properties().put(name, value);\n+        store().setLastUpdate(ZonedDateTime.now());\n+    }\n+\n+    @Override\n+    public void removeProperty(String name) {\n+        store().properties().remove(name);\n+        store().setLastUpdate(ZonedDateTime.now());\n+    }\n+}\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestIssueTrackerIssue.java","additions":162,"deletions":0,"binary":false,"changes":162,"status":"added"},{"patch":"@@ -0,0 +1,54 @@\n+\/*\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.test;\n+\n+import org.openjdk.skara.host.HostUser;\n+import org.openjdk.skara.issuetracker.*;\n+import org.openjdk.skara.json.JSONValue;\n+\n+import java.util.*;\n+\n+\/**\n+ * Backing store for TestIssueTrackerIssue. Represents the \"server side\" state of an Issue.\n+ *\/\n+public class TestIssueTrackerIssueStore extends TestIssueStore {\n+\n+    private final List<Link> links = new ArrayList<>();\n+    private final Map<String, JSONValue> properties = new HashMap<>();\n+\n+    public TestIssueTrackerIssueStore(String id, IssueProject issueProject, HostUser author, String title,\n+            List<String> body, Map<String, JSONValue> properties) {\n+        super(id, issueProject, author, title, body);\n+        if (properties != null) {\n+            this.properties.putAll(properties);\n+        }\n+    }\n+\n+    public List<Link> links() {\n+        return links;\n+    }\n+\n+    public Map<String, JSONValue> properties() {\n+        return properties;\n+    }\n+}\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestIssueTrackerIssueStore.java","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"},{"patch":"@@ -67,5 +67,0 @@\n-    @Override\n-    protected TestPullRequest copy() {\n-        return new TestPullRequest(store(), targetRepository);\n-    }\n-\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestPullRequest.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-        super(id, null, author, title, body, null);\n+        super(id, null, author, title, body);\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestPullRequestStore.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}