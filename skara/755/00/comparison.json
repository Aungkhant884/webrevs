{"files":[{"patch":"@@ -79,2 +79,2 @@\n-    private static JCheckConfiguration configuration(HostedRepository remoteRepo, String ref) {\n-        var confFile = remoteRepo.fileContents(\".jcheck\/conf\", ref);\n+    private static JCheckConfiguration configuration(HostedRepository remoteRepo, String name, String ref) {\n+        var confFile = remoteRepo.fileContents(name, ref);\n@@ -84,1 +84,2 @@\n-    static CensusInstance create(HostedRepository censusRepo, String censusRef, Path folder, PullRequest pr) {\n+    static CensusInstance create(HostedRepository censusRepo, String censusRef, Path folder, PullRequest pr,\n+                                 HostedRepository confOverrideRepo, String confOverrideName, String confOverrideRef) {\n@@ -98,1 +99,6 @@\n-            var configuration = configuration(pr.repository(), pr.targetRef());\n+            JCheckConfiguration configuration;\n+            if (confOverrideRepo == null) {\n+                configuration = configuration(pr.repository(), \".jcheck\/conf\", pr.targetRef());\n+            } else {\n+                configuration = configuration(confOverrideRepo, confOverrideName, confOverrideRef);\n+            }\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CensusInstance.java","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -81,1 +81,4 @@\n-        checkablePullRequest = new CheckablePullRequest(pr, localRepo, ignoreStaleReviews);\n+        checkablePullRequest = new CheckablePullRequest(pr, localRepo, ignoreStaleReviews,\n+                                                        workItem.bot.confOverrideRepository().orElse(null),\n+                                                        workItem.bot.confOverrideName(),\n+                                                        workItem.bot.confOverrideRef());\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -138,1 +138,2 @@\n-        var census = CensusInstance.create(bot.censusRepo(), bot.censusRef(), scratchPath.resolve(\"census\"), pr);\n+        var census = CensusInstance.create(bot.censusRepo(), bot.censusRef(), scratchPath.resolve(\"census\"), pr,\n+                                           bot.confOverrideRepository().orElse(null), bot.confOverrideName(), bot.confOverrideRef());\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckWorkItem.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import org.openjdk.skara.jcheck.JCheck;\n+import org.openjdk.skara.jcheck.*;\n@@ -31,0 +31,1 @@\n+import org.openjdk.skara.vcs.openjdk.Issue;\n@@ -40,0 +41,1 @@\n+    private final List<String> confOverride;\n@@ -41,1 +43,2 @@\n-    CheckablePullRequest(PullRequest pr, Repository localRepo, boolean ignoreStaleReviews) {\n+    CheckablePullRequest(PullRequest pr, Repository localRepo, boolean ignoreStaleReviews,\n+            HostedRepository jcheckRepo, String jcheckName, String jcheckRef) {\n@@ -45,0 +48,6 @@\n+\n+        if (jcheckRepo != null) {\n+            confOverride = jcheckRepo.fileContents(jcheckName, jcheckRef).lines().collect(Collectors.toList());\n+        } else {\n+            confOverride = null;\n+        }\n@@ -134,0 +143,9 @@\n+        Optional<JCheckConfiguration> conf;\n+        if (confOverride != null) {\n+            conf = JCheck.parseConfiguration(confOverride, additionalConfiguration);\n+        } else {\n+            conf = JCheck.parseConfiguration(localRepo, pr.targetHash(), additionalConfiguration);\n+        }\n+        if (conf.isEmpty()) {\n+            throw new RuntimeException(\"Failed to parse jcheck configuration at: \" + pr.targetHash() + \" with extra: \" + additionalConfiguration);\n+        }\n@@ -135,1 +153,1 @@\n-                                       pr.targetHash(), additionalConfiguration)) {\n+                                       conf.get())) {\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckablePullRequest.java","additions":21,"deletions":3,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -220,1 +220,2 @@\n-        var census = CensusInstance.create(bot.censusRepo(), bot.censusRef(), scratchPath.resolve(\"census\"), pr);\n+        var census = CensusInstance.create(bot.censusRepo(), bot.censusRef(), scratchPath.resolve(\"census\"), pr,\n+                                           bot.confOverrideRepository().orElse(null), bot.confOverrideName(), bot.confOverrideRef());\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CommandWorkItem.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -103,1 +103,4 @@\n-            var checkablePr = new CheckablePullRequest(pr, localRepo, bot.ignoreStaleReviews());\n+            var checkablePr = new CheckablePullRequest(pr, localRepo, bot.ignoreStaleReviews(),\n+                                                       bot.confOverrideRepository().orElse(null),\n+                                                       bot.confOverrideName(),\n+                                                       bot.confOverrideRef());\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/IntegrateCommand.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -51,0 +51,3 @@\n+    private final HostedRepository confOverrideRepo;\n+    private final String confOverrideName;\n+    private final String confOverrideRef;\n@@ -59,1 +62,2 @@\n-                   Set<String> allowedIssueTypes, Pattern allowedTargetBranches, Path seedStorage) {\n+                   Set<String> allowedIssueTypes, Pattern allowedTargetBranches, Path seedStorage,\n+                   HostedRepository confOverrideRepo, String confOverrideName, String confOverrideRef) {\n@@ -73,0 +77,3 @@\n+        this.confOverrideRepo = confOverrideRepo;\n+        this.confOverrideName = confOverrideName;\n+        this.confOverrideRef = confOverrideRef;\n@@ -199,0 +206,12 @@\n+\n+    Optional<HostedRepository> confOverrideRepository() {\n+        return Optional.ofNullable(confOverrideRepo);\n+    }\n+\n+    String confOverrideName() {\n+        return confOverrideName;\n+    }\n+\n+    String confOverrideRef() {\n+        return confOverrideRef;\n+    }\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBot.java","additions":20,"deletions":1,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -25,2 +25,1 @@\n-import org.openjdk.skara.forge.HostedRepository;\n-import org.openjdk.skara.forge.LabelConfiguration;\n+import org.openjdk.skara.forge.*;\n@@ -47,0 +46,3 @@\n+    private HostedRepository confOverrideRepo = null;\n+    private String confOverrideName = \".conf\/jcheck\";\n+    private String confOverrideRef = \"master\";\n@@ -116,0 +118,15 @@\n+    public PullRequestBotBuilder confOverrideRepo(HostedRepository confOverrideRepo) {\n+        this.confOverrideRepo = confOverrideRepo;\n+        return this;\n+    }\n+\n+    public PullRequestBotBuilder confOverrideName(String confOverrideName) {\n+        this.confOverrideName = confOverrideName;\n+        return this;\n+    }\n+\n+    public PullRequestBotBuilder confOverrideRef(String confOverrideRef) {\n+        this.confOverrideRef = confOverrideRef;\n+        return this;\n+    }\n+\n@@ -120,1 +137,1 @@\n-                                  seedStorage);\n+                                  seedStorage, confOverrideRepo, confOverrideName, confOverrideRef);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBotBuilder.java","additions":20,"deletions":3,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -108,0 +108,7 @@\n+            if (repo.value().contains(\"jcheck\")) {\n+                botBuilder.confOverrideRepo(configuration.repository(repo.value().get(\"jcheck\").get(\"repo\").asString()));\n+                botBuilder.confOverrideRef(configuration.repositoryRef(repo.value().get(\"jcheck\").get(\"repo\").asString()));\n+                if (repo.value().get(\"jcheck\").contains(\"name\")) {\n+                    botBuilder.confOverrideName(repo.value().get(\"jcheck\").get(\"name\").asString());\n+                }\n+            }\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBotFactory.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -88,1 +88,4 @@\n-            var checkablePr = new CheckablePullRequest(pr, localRepo, bot.ignoreStaleReviews());\n+            var checkablePr = new CheckablePullRequest(pr, localRepo, bot.ignoreStaleReviews(),\n+                                                       bot.confOverrideRepository().orElse(null),\n+                                                       bot.confOverrideName(),\n+                                                       bot.confOverrideRef());\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/SponsorCommand.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1531,0 +1531,91 @@\n+\n+    @Test\n+    void overrideJcheckConf(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory();\n+             var confFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var conf = credentials.getHostedRepository();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                                           .addAuthor(author.forge().currentUser().id());\n+            var checkBot = PullRequestBot.newBuilder()\n+                                         .repo(author)\n+                                         .censusRepo(censusBuilder.build())\n+                                         .confOverrideRepo(conf)\n+                                         .confOverrideName(\"jcheck.conf\")\n+                                         .confOverrideRef(\"jcheck-branch\")\n+                                         .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Create a different conf on a different branch\n+            var defaultConf = Files.readString(localRepo.root().resolve(\".jcheck\/conf\"), StandardCharsets.UTF_8);\n+            var newConf = defaultConf.replace(\"reviewers=1\", \"reviewers=0\");\n+            Files.writeString(localRepo.root().resolve(\"jcheck.conf\"), newConf, StandardCharsets.UTF_8);\n+            localRepo.add(localRepo.root().resolve(\"jcheck.conf\"));\n+            var confHash = localRepo.commit(\"Separate conf\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(confHash, author.url(), \"jcheck-branch\", true);\n+            localRepo.checkout(masterHash, true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var testHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(testHash, author.url(), \"test\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"test\", \"This is a PR\");\n+\n+            \/\/ Check the status (should become ready immediately as reviewercount is overridden to 0)\n+            TestBotRunner.runPeriodicItems(checkBot);\n+            assertEquals(Set.of(\"rfr\", \"ready\"), new HashSet<>(pr.labels()));\n+        }\n+    }\n+\n+    @Test\n+    void overrideNonexistingJcheckConf(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory();\n+             var confFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var conf = credentials.getHostedRepository();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                                           .addAuthor(author.forge().currentUser().id());\n+            var checkBot = PullRequestBot.newBuilder()\n+                                         .repo(author)\n+                                         .censusRepo(censusBuilder.build())\n+                                         .confOverrideRepo(conf)\n+                                         .confOverrideName(\"jcheck.conf\")\n+                                         .confOverrideRef(\"jcheck-branch\")\n+                                         .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Create a different conf on a different branch\n+            var defaultConf = Files.readString(localRepo.root().resolve(\".jcheck\/conf\"), StandardCharsets.UTF_8);\n+            var newConf = defaultConf.replace(\"reviewers=1\", \"reviewers=0\");\n+            Files.writeString(localRepo.root().resolve(\"jcheck.conf\"), newConf, StandardCharsets.UTF_8);\n+            localRepo.add(localRepo.root().resolve(\"jcheck.conf\"));\n+            var confHash = localRepo.commit(\"Separate conf\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(confHash, author.url(), \"jcheck-branch\", true);\n+            localRepo.checkout(masterHash, true);\n+\n+            \/\/ Remove the default one\n+            localRepo.remove(localRepo.root().resolve(\".jcheck\/conf\"));\n+            var newMasterHash = localRepo.commit(\"No more conf\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(newMasterHash, author.url(), \"master\");\n+\n+            \/\/ Make a change with a corresponding PR\n+            var testHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(testHash, author.url(), \"test\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"test\", \"This is a PR\");\n+\n+            \/\/ Check the status (should become ready immediately as reviewercount is overridden to 0)\n+            TestBotRunner.runPeriodicItems(checkBot);\n+            assertEquals(Set.of(\"rfr\", \"ready\"), new HashSet<>(pr.labels()));\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CheckTests.java","additions":91,"deletions":0,"binary":false,"changes":91,"status":"modified"},{"patch":"@@ -90,1 +90,10 @@\n-    private static Optional<JCheckConfiguration> parseConfiguration(ReadOnlyRepository r, Hash h, List<String> additionalConfiguration) {\n+    public static Optional<JCheckConfiguration> parseConfiguration(List<String> configuration, List<String> additionalConfiguration) {\n+        var content = new ArrayList<>(configuration);\n+        content.addAll(additionalConfiguration);\n+        if (content.size() == 0) {\n+            return Optional.empty();\n+        }\n+        return Optional.of(JCheckConfiguration.parse(content));\n+    }\n+\n+    public static Optional<JCheckConfiguration> parseConfiguration(ReadOnlyRepository r, Hash h, List<String> additionalConfiguration) {\n@@ -93,5 +102,1 @@\n-            content.addAll(additionalConfiguration);\n-            if (content.size() == 0) {\n-                return Optional.empty();\n-            }\n-            return Optional.of(JCheckConfiguration.parse(content));\n+            return parseConfiguration(content, additionalConfiguration);\n@@ -235,2 +240,1 @@\n-                               Hash configuration,\n-                               List<String> additionalConfiguration) throws IOException {\n+                               JCheckConfiguration configuration) throws IOException {\n@@ -241,6 +245,2 @@\n-        var conf = parseConfiguration(repository, configuration, additionalConfiguration).orElseThrow(() ->\n-            new IllegalArgumentException(\"No .jcheck\/conf present at hash \" + configuration.hex())\n-        );\n-\n-        var branchRegex = conf.repository().branches();\n-        var tagRegex = conf.repository().tags();\n+        var branchRegex = configuration.repository().branches();\n+        var tagRegex = configuration.repository().tags();\n@@ -248,1 +248,1 @@\n-        return check(repository, census, parser, branchRegex, tagRegex, repository.range(toCheck), Map.of(), Set.of(), List.of(), conf);\n+        return check(repository, census, parser, branchRegex, tagRegex, repository.range(toCheck), Map.of(), Set.of(), List.of(), configuration);\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/JCheck.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -345,1 +345,2 @@\n-            try (var issues = JCheck.check(repo, census, CommitMessageParsers.v1, secondCommit, initialCommit.hash(), List.of())) {\n+            var conf = JCheck.parseConfiguration(repo, initialCommit.hash(), List.of()).orElseThrow();\n+            try (var issues = JCheck.check(repo, census, CommitMessageParsers.v1, secondCommit, conf)) {\n","filename":"jcheck\/src\/test\/java\/org\/openjdk\/skara\/jcheck\/JCheckTests.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}