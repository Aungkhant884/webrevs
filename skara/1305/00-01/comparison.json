{"files":[{"patch":"@@ -30,1 +30,0 @@\n-import org.openjdk.skara.jcheck.ReviewersCheck;\n@@ -472,5 +471,0 @@\n-        var reviewRequirements = checkablePullRequest.getReviewRequirements();\n-        if (checks.containsKey(ReviewersCheck.DESCRIPTION) && !\"\".equals(reviewRequirements)) {\n-            checks.put(ReviewersCheck.DESCRIPTION + reviewRequirements, checks.get(ReviewersCheck.DESCRIPTION));\n-            checks.remove(ReviewersCheck.DESCRIPTION);\n-        }\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -48,4 +48,0 @@\n-    \/\/ The review requirements is used by CheckRun#getChecksList to\n-    \/\/ set the checkbox of the `Progress` in the PR body.\n-    private String reviewRequirements;\n-\n@@ -57,1 +53,0 @@\n-        reviewRequirements = \"\";\n@@ -190,28 +185,0 @@\n-    String getReviewRequirements() {\n-        return reviewRequirements;\n-    }\n-\n-    private void setReviewRequirements(JCheckConfiguration conf) {\n-        var reviewersConf = conf.checks().reviewers();\n-        var requireList = new ArrayList<String>();\n-        var sum = 0;\n-        var reviewRequirementMap = new LinkedHashMap<String, Integer>();\n-        reviewRequirementMap.put(\"lead\", reviewersConf.lead());\n-        reviewRequirementMap.put(\"reviewer\", reviewersConf.reviewers());\n-        reviewRequirementMap.put(\"committer\", reviewersConf.committers());\n-        reviewRequirementMap.put(\"author\", reviewersConf.authors());\n-        reviewRequirementMap.put(\"contributor\", reviewersConf.contributors());\n-        for (var reviewRequirement : reviewRequirementMap.entrySet()) {\n-            var requirementNum = reviewRequirement.getValue();\n-            if (requirementNum > 0) {\n-                sum += requirementNum;\n-                requireList.add(requirementNum+ \" \" + reviewRequirement.getKey() + (requirementNum > 1 ? \"s\" : \"\"));\n-            }\n-        }\n-        if (sum == 0) {\n-            reviewRequirements = \" (no reviews required)\";\n-        } else {\n-            reviewRequirements = String.format(\" (%d reviews required, with at least %s)\", sum, String.join(\", \", requireList));\n-        }\n-    }\n-\n@@ -228,2 +195,1 @@\n-        \/\/ Set the review requirements for using in CheckRun#getChecksList\n-        setReviewRequirements(conf.get());\n+        visitor.setConfiguration(conf.get());\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckablePullRequest.java","additions":1,"deletions":35,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -50,0 +50,2 @@\n+    private JCheckConfiguration configuration;\n+\n@@ -77,1 +79,1 @@\n-                            .collect(Collectors.toMap(Check::description,\n+                            .collect(Collectors.toMap(this::checkDescription,\n@@ -89,1 +91,1 @@\n-                            .collect(Collectors.toMap(Check::description,\n+                            .collect(Collectors.toMap(this::checkDescription,\n@@ -93,0 +95,7 @@\n+    private String checkDescription(Check check) {\n+        if (check instanceof ReviewersCheck) {\n+            return check.description() + configuration.checks().reviewers().getReviewRequirements();\n+        }\n+        return check.description();\n+    }\n+\n@@ -99,0 +108,4 @@\n+    void setConfiguration(JCheckConfiguration configuration) {\n+        this.configuration = configuration;\n+    }\n+\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestCheckIssueVisitor.java","additions":15,"deletions":2,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n@@ -28,1 +30,0 @@\n-import java.util.stream.Collectors;\n@@ -40,0 +41,1 @@\n+    private final String reviewRequirements;\n@@ -49,0 +51,21 @@\n+\n+        var reviewRequirementMap = new LinkedHashMap<String, Integer>();\n+        var requireList = new ArrayList<String>();\n+        var sum = 0;\n+        reviewRequirementMap.put(\"lead\", lead);\n+        reviewRequirementMap.put(\"reviewer\", reviewers);\n+        reviewRequirementMap.put(\"committer\", committers);\n+        reviewRequirementMap.put(\"author\", authors);\n+        reviewRequirementMap.put(\"contributor\", contributors);\n+        for (var reviewRequirement : reviewRequirementMap.entrySet()) {\n+            var requirementNum = reviewRequirement.getValue();\n+            if (requirementNum > 0) {\n+                sum += requirementNum;\n+                requireList.add(requirementNum+ \" \" + reviewRequirement.getKey() + (requirementNum > 1 ? \"s\" : \"\"));\n+            }\n+        }\n+        if (sum == 0) {\n+            reviewRequirements = \" (no reviews required)\";\n+        } else {\n+            reviewRequirements = String.format(\" (%d reviews required, with at least %s)\", sum, String.join(\", \", requireList));\n+        }\n@@ -79,0 +102,4 @@\n+    public String getReviewRequirements() {\n+        return reviewRequirements;\n+    }\n+\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/ReviewersConfiguration.java","additions":28,"deletions":1,"binary":false,"changes":29,"status":"modified"}]}