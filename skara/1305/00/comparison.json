{"files":[{"patch":"@@ -30,0 +30,1 @@\n+import org.openjdk.skara.jcheck.ReviewersCheck;\n@@ -471,0 +472,5 @@\n+        var reviewRequirements = checkablePullRequest.getReviewRequirements();\n+        if (checks.containsKey(ReviewersCheck.DESCRIPTION) && !\"\".equals(reviewRequirements)) {\n+            checks.put(ReviewersCheck.DESCRIPTION + reviewRequirements, checks.get(ReviewersCheck.DESCRIPTION));\n+            checks.remove(ReviewersCheck.DESCRIPTION);\n+        }\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,0 +48,4 @@\n+    \/\/ The review requirements is used by CheckRun#getChecksList to\n+    \/\/ set the checkbox of the `Progress` in the PR body.\n+    private String reviewRequirements;\n+\n@@ -53,0 +57,1 @@\n+        reviewRequirements = \"\";\n@@ -185,0 +190,28 @@\n+    String getReviewRequirements() {\n+        return reviewRequirements;\n+    }\n+\n+    private void setReviewRequirements(JCheckConfiguration conf) {\n+        var reviewersConf = conf.checks().reviewers();\n+        var requireList = new ArrayList<String>();\n+        var sum = 0;\n+        var reviewRequirementMap = new LinkedHashMap<String, Integer>();\n+        reviewRequirementMap.put(\"lead\", reviewersConf.lead());\n+        reviewRequirementMap.put(\"reviewer\", reviewersConf.reviewers());\n+        reviewRequirementMap.put(\"committer\", reviewersConf.committers());\n+        reviewRequirementMap.put(\"author\", reviewersConf.authors());\n+        reviewRequirementMap.put(\"contributor\", reviewersConf.contributors());\n+        for (var reviewRequirement : reviewRequirementMap.entrySet()) {\n+            var requirementNum = reviewRequirement.getValue();\n+            if (requirementNum > 0) {\n+                sum += requirementNum;\n+                requireList.add(requirementNum+ \" \" + reviewRequirement.getKey() + (requirementNum > 1 ? \"s\" : \"\"));\n+            }\n+        }\n+        if (sum == 0) {\n+            reviewRequirements = \" (no reviews required)\";\n+        } else {\n+            reviewRequirements = String.format(\" (%d reviews required, with at least %s)\", sum, String.join(\", \", requireList));\n+        }\n+    }\n+\n@@ -195,0 +228,2 @@\n+        \/\/ Set the review requirements for using in CheckRun#getChecksList\n+        setReviewRequirements(conf.get());\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckablePullRequest.java","additions":36,"deletions":1,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -45,0 +45,3 @@\n+    private static final String reviewProgressTemplate = \"Change must be properly reviewed (%d reviews required, with at least %s)\";\n+    private static final String zeroReviewProgress = \"Change must be properly reviewed (no reviews required)\";\n+\n@@ -78,0 +81,1 @@\n+            assertTrue(reviewerPr.body().contains(String.format(reviewProgressTemplate, 1, \"1 reviewer\")));\n@@ -85,0 +89,1 @@\n+            assertTrue(reviewerPr.body().contains(String.format(reviewProgressTemplate, 1, \"1 reviewer\")));\n@@ -90,0 +95,1 @@\n+            assertTrue(reviewerPr.body().contains(String.format(reviewProgressTemplate, 1, \"1 reviewer\")));\n@@ -95,0 +101,1 @@\n+            assertTrue(reviewerPr.body().contains(String.format(reviewProgressTemplate, 1, \"1 reviewer\")));\n@@ -100,0 +107,1 @@\n+            assertTrue(reviewerPr.body().contains(String.format(reviewProgressTemplate, 1, \"1 reviewer\")));\n@@ -107,0 +115,1 @@\n+            assertTrue(reviewerPr.body().contains(String.format(reviewProgressTemplate, 2, \"1 reviewer, 1 author\")));\n@@ -114,0 +123,1 @@\n+            assertTrue(reviewerPr.body().contains(String.format(reviewProgressTemplate, 2, \"1 reviewer, 1 committer\")));\n@@ -121,0 +131,1 @@\n+            assertTrue(reviewerPr.body().contains(String.format(reviewProgressTemplate, 2, \"2 reviewers\")));\n@@ -130,0 +141,1 @@\n+            assertTrue(updatedPr.body().contains(String.format(reviewProgressTemplate, 2, \"2 reviewers\")));\n@@ -139,0 +151,1 @@\n+            assertTrue(updatedPr.body().contains(String.format(reviewProgressTemplate, 1, \"1 reviewer\")));\n@@ -145,0 +158,1 @@\n+            assertTrue(reviewerPr.body().contains(String.format(reviewProgressTemplate, 1, \"1 lead\")));\n@@ -155,0 +169,1 @@\n+            assertTrue(reviewerPr.body().contains(String.format(reviewProgressTemplate, 1, \"1 reviewer\")));\n@@ -195,0 +210,1 @@\n+            assertTrue(reviewerPr.body().contains(String.format(reviewProgressTemplate, 2, \"1 reviewer, 1 author\")));\n@@ -205,0 +221,1 @@\n+            assertTrue(reviewerPr.body().contains(String.format(reviewProgressTemplate, 2, \"1 reviewer, 1 author\")));\n@@ -209,0 +226,1 @@\n+            assertTrue(reviewerPr.body().contains(String.format(reviewProgressTemplate, 1, \"1 reviewer\")));\n@@ -214,0 +232,1 @@\n+            assertTrue(reviewerPr.body().contains(String.format(reviewProgressTemplate, 1, \"1 reviewer\")));\n@@ -248,0 +267,1 @@\n+            assertTrue(reviewerPr.body().contains(String.format(reviewProgressTemplate, 1, \"1 reviewer\")));\n@@ -253,0 +273,1 @@\n+            assertTrue(reviewerPr.body().contains(String.format(reviewProgressTemplate, 1, \"1 reviewer\")));\n@@ -260,0 +281,1 @@\n+            assertTrue(reviewerPr.body().contains(String.format(reviewProgressTemplate, 2, \"1 reviewer, 1 author\")));\n@@ -265,0 +287,1 @@\n+            assertTrue(reviewerPr.body().contains(String.format(reviewProgressTemplate, 2, \"1 reviewer, 1 author\")));\n@@ -269,0 +292,1 @@\n+            assertTrue(reviewerPr.body().contains(String.format(reviewProgressTemplate, 1, \"1 reviewer\")));\n@@ -274,0 +298,1 @@\n+            assertTrue(reviewerPr.body().contains(String.format(reviewProgressTemplate, 1, \"1 reviewer\")));\n@@ -308,0 +333,1 @@\n+            assertTrue(authorPR.body().contains(String.format(reviewProgressTemplate, 2, \"1 reviewer, 1 author\")));\n@@ -344,0 +370,1 @@\n+            assertTrue(authorPR.body().contains(String.format(reviewProgressTemplate, 2, \"1 reviewer, 1 author\")));\n@@ -348,0 +375,1 @@\n+            assertTrue(authorPR.body().contains(String.format(reviewProgressTemplate, 2, \"1 reviewer, 1 author\")));\n@@ -354,0 +382,1 @@\n+            assertTrue(reviewerPr.body().contains(String.format(reviewProgressTemplate, 1, \"1 reviewer\")));\n@@ -384,0 +413,1 @@\n+            assertTrue(authorPR.body().contains(String.format(reviewProgressTemplate, 2, \"1 reviewer, 1 author\")));\n@@ -434,2 +464,3 @@\n-                verifyReviewersComment(reviewerPr, prBot, \"\/reviewers \" + i + \" contributor\",\n-                        getReviewersExpectedComment(totalNum, 1, 1, 1, 1, contributorNum));\n+                verifyReviewersCommentAndProgress(reviewerPr, prBot, \"\/reviewers \" + i + \" contributor\",\n+                        getReviewersExpectedComment(totalNum, 1, 1, 1, 1, contributorNum),\n+                        getReviewersExpectedProgress(totalNum, 1, 1, 1, 1, contributorNum));\n@@ -443,2 +474,3 @@\n-                verifyReviewersComment(reviewerPr, prBot, \"\/reviewers \" + i + \" author\",\n-                        getReviewersExpectedComment(totalNum, 1, 1, 1, authorNum, contributorNum));\n+                verifyReviewersCommentAndProgress(reviewerPr, prBot, \"\/reviewers \" + i + \" author\",\n+                        getReviewersExpectedComment(totalNum, 1, 1, 1, authorNum, contributorNum),\n+                        getReviewersExpectedProgress(totalNum, 1, 1, 1, authorNum, contributorNum));\n@@ -453,2 +485,3 @@\n-                verifyReviewersComment(reviewerPr, prBot, \"\/reviewers \" + i + \" committer\",\n-                        getReviewersExpectedComment(totalNum, 1, 1, committerNum, authorNum, contributorNum));\n+                verifyReviewersCommentAndProgress(reviewerPr, prBot, \"\/reviewers \" + i + \" committer\",\n+                        getReviewersExpectedComment(totalNum, 1, 1, committerNum, authorNum, contributorNum),\n+                        getReviewersExpectedProgress(totalNum, 1, 1, committerNum, authorNum, contributorNum));\n@@ -464,2 +497,3 @@\n-                verifyReviewersComment(reviewerPr, prBot, \"\/reviewers \" + i + \" reviewer\",\n-                        getReviewersExpectedComment(totalNum, 1, reviewerNum, committerNum, authorNum, contributorNum));\n+                verifyReviewersCommentAndProgress(reviewerPr, prBot, \"\/reviewers \" + i + \" reviewer\",\n+                        getReviewersExpectedComment(totalNum, 1, reviewerNum, committerNum, authorNum, contributorNum),\n+                        getReviewersExpectedProgress(totalNum, 1, reviewerNum, committerNum, authorNum, contributorNum));\n@@ -470,2 +504,3 @@\n-            verifyReviewersComment(reviewerPr, prBot, \"\/reviewers 1 lead\",\n-                        getReviewersExpectedComment(5, 1, 1, 1, 1, 1));\n+            verifyReviewersCommentAndProgress(reviewerPr, prBot, \"\/reviewers 1 lead\",\n+                    getReviewersExpectedComment(5, 1, 1, 1, 1, 1),\n+                    getReviewersExpectedProgress(5, 1, 1, 1, 1, 1));\n@@ -475,1 +510,1 @@\n-    private void verifyReviewersComment(PullRequest reviewerPr, PullRequestBot prBot, String command, String expectedReply) throws IOException {\n+    private void verifyReviewersCommentAndProgress(PullRequest reviewerPr, PullRequestBot prBot, String command, String expectedComment, String expectedProgress) throws IOException {\n@@ -478,1 +513,2 @@\n-        assertLastCommentContains(reviewerPr, expectedReply);\n+        assertLastCommentContains(reviewerPr, expectedComment);\n+        assertTrue(reviewerPr.body().contains(expectedProgress));\n@@ -506,0 +542,76 @@\n+\n+    private String getReviewersExpectedProgress(int totalNum, int leadNum, int reviewerNum, int committerNum, int authorNum, int contributorNum) {\n+        var requireList = new ArrayList<String>();\n+        var reviewRequirementMap = new LinkedHashMap<String, Integer>();\n+        reviewRequirementMap.put(\"lead\", leadNum);\n+        reviewRequirementMap.put(\"reviewer\", reviewerNum);\n+        reviewRequirementMap.put(\"committer\", committerNum);\n+        reviewRequirementMap.put(\"author\", authorNum);\n+        reviewRequirementMap.put(\"contributor\", contributorNum);\n+        for (var reviewRequirement : reviewRequirementMap.entrySet()) {\n+            var requirementNum = reviewRequirement.getValue();\n+            if (requirementNum > 0) {\n+                requireList.add(requirementNum+ \" \" + reviewRequirement.getKey() + (requirementNum > 1 ? \"s\" : \"\"));\n+            }\n+        }\n+        if (totalNum == 0) {\n+            return zeroReviewProgress;\n+        } else {\n+            return String.format(reviewProgressTemplate, totalNum, String.join(\", \", requireList));\n+        }\n+    }\n+\n+    @Test\n+    void testZeroReviewer(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var bot = credentials.getHostedRepository();\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addReviewer(reviewer.forge().currentUser().id())\n+                    .addCommitter(author.forge().currentUser().id());\n+            var prBot = PullRequestBot.newBuilder().repo(bot).censusRepo(censusBuilder.build()).build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Change the jcheck configuration\n+            var confPath = localRepo.root().resolve(\".jcheck\/conf\");\n+            var defaultConf = Files.readString(confPath, StandardCharsets.UTF_8);\n+            var newConf = defaultConf.replace(\"reviewers=1\", \"\"\"\n+                                                    lead=0\n+                                                    reviewers=0\n+                                                    committers=0\n+                                                    authors=0\n+                                                    contributors=0\n+                                                    ignore=duke\n+                                                    \"\"\");\n+            Files.writeString(confPath, newConf);\n+            localRepo.add(confPath);\n+            var confHash = localRepo.commit(\"Change conf\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(confHash, author.url(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"123: This is a pull request\", List.of(\"\"));\n+            var reviewerPr = reviewer.pullRequest(pr.id());\n+\n+            TestBotRunner.runPeriodicItems(prBot);\n+            var authorPR = author.pullRequest(pr.id());\n+            assertTrue(authorPR.body().contains(zeroReviewProgress));\n+\n+            authorPR.addComment(\"\/reviewers 2 reviewer\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertTrue(authorPR.body().contains(String.format(reviewProgressTemplate, 2, \"2 reviewers\")));\n+\n+            reviewerPr.addComment(\"\/reviewers 0\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertTrue(reviewerPr.body().contains(zeroReviewProgress));\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/ReviewersTests.java","additions":124,"deletions":12,"binary":false,"changes":136,"status":"modified"}]}