{"files":[{"patch":"@@ -45,2 +45,2 @@\n-    private static final String reviewProgressTemplate = \"Change must be properly reviewed (%d reviews required, with at least %s)\";\n-    private static final String zeroReviewProgress = \"Change must be properly reviewed (no reviews required)\";\n+    private static final String REVIEW_PROGRESS_TEMPLATE = \"Change must be properly reviewed (%d reviews required, with at least %s)\";\n+    private static final String ZERO_REVIEW_PROGRESS = \"Change must be properly reviewed (no reviews required)\";\n@@ -81,1 +81,1 @@\n-            assertTrue(reviewerPr.body().contains(String.format(reviewProgressTemplate, 1, \"1 reviewer\")));\n+            assertTrue(reviewerPr.body().contains(String.format(REVIEW_PROGRESS_TEMPLATE, 1, \"1 reviewer\")));\n@@ -89,1 +89,1 @@\n-            assertTrue(reviewerPr.body().contains(String.format(reviewProgressTemplate, 1, \"1 reviewer\")));\n+            assertTrue(reviewerPr.body().contains(String.format(REVIEW_PROGRESS_TEMPLATE, 1, \"1 reviewer\")));\n@@ -95,1 +95,1 @@\n-            assertTrue(reviewerPr.body().contains(String.format(reviewProgressTemplate, 1, \"1 reviewer\")));\n+            assertTrue(reviewerPr.body().contains(String.format(REVIEW_PROGRESS_TEMPLATE, 1, \"1 reviewer\")));\n@@ -101,1 +101,1 @@\n-            assertTrue(reviewerPr.body().contains(String.format(reviewProgressTemplate, 1, \"1 reviewer\")));\n+            assertTrue(reviewerPr.body().contains(String.format(REVIEW_PROGRESS_TEMPLATE, 1, \"1 reviewer\")));\n@@ -107,1 +107,1 @@\n-            assertTrue(reviewerPr.body().contains(String.format(reviewProgressTemplate, 1, \"1 reviewer\")));\n+            assertTrue(reviewerPr.body().contains(String.format(REVIEW_PROGRESS_TEMPLATE, 1, \"1 reviewer\")));\n@@ -115,1 +115,1 @@\n-            assertTrue(reviewerPr.body().contains(String.format(reviewProgressTemplate, 2, \"1 reviewer, 1 author\")));\n+            assertTrue(reviewerPr.body().contains(String.format(REVIEW_PROGRESS_TEMPLATE, 2, \"1 reviewer, 1 author\")));\n@@ -123,1 +123,1 @@\n-            assertTrue(reviewerPr.body().contains(String.format(reviewProgressTemplate, 2, \"1 reviewer, 1 committer\")));\n+            assertTrue(reviewerPr.body().contains(String.format(REVIEW_PROGRESS_TEMPLATE, 2, \"1 reviewer, 1 committer\")));\n@@ -131,1 +131,1 @@\n-            assertTrue(reviewerPr.body().contains(String.format(reviewProgressTemplate, 2, \"2 reviewers\")));\n+            assertTrue(reviewerPr.body().contains(String.format(REVIEW_PROGRESS_TEMPLATE, 2, \"2 reviewers\")));\n@@ -141,1 +141,1 @@\n-            assertTrue(updatedPr.body().contains(String.format(reviewProgressTemplate, 2, \"2 reviewers\")));\n+            assertTrue(updatedPr.body().contains(String.format(REVIEW_PROGRESS_TEMPLATE, 2, \"2 reviewers\")));\n@@ -151,1 +151,1 @@\n-            assertTrue(updatedPr.body().contains(String.format(reviewProgressTemplate, 1, \"1 reviewer\")));\n+            assertTrue(updatedPr.body().contains(String.format(REVIEW_PROGRESS_TEMPLATE, 1, \"1 reviewer\")));\n@@ -158,1 +158,1 @@\n-            assertTrue(reviewerPr.body().contains(String.format(reviewProgressTemplate, 1, \"1 lead\")));\n+            assertTrue(reviewerPr.body().contains(String.format(REVIEW_PROGRESS_TEMPLATE, 1, \"1 lead\")));\n@@ -169,1 +169,1 @@\n-            assertTrue(reviewerPr.body().contains(String.format(reviewProgressTemplate, 1, \"1 reviewer\")));\n+            assertTrue(reviewerPr.body().contains(String.format(REVIEW_PROGRESS_TEMPLATE, 1, \"1 reviewer\")));\n@@ -210,1 +210,1 @@\n-            assertTrue(reviewerPr.body().contains(String.format(reviewProgressTemplate, 2, \"1 reviewer, 1 author\")));\n+            assertTrue(reviewerPr.body().contains(String.format(REVIEW_PROGRESS_TEMPLATE, 2, \"1 reviewer, 1 author\")));\n@@ -221,1 +221,1 @@\n-            assertTrue(reviewerPr.body().contains(String.format(reviewProgressTemplate, 2, \"1 reviewer, 1 author\")));\n+            assertTrue(reviewerPr.body().contains(String.format(REVIEW_PROGRESS_TEMPLATE, 2, \"1 reviewer, 1 author\")));\n@@ -226,1 +226,1 @@\n-            assertTrue(reviewerPr.body().contains(String.format(reviewProgressTemplate, 1, \"1 reviewer\")));\n+            assertTrue(reviewerPr.body().contains(String.format(REVIEW_PROGRESS_TEMPLATE, 1, \"1 reviewer\")));\n@@ -232,1 +232,1 @@\n-            assertTrue(reviewerPr.body().contains(String.format(reviewProgressTemplate, 1, \"1 reviewer\")));\n+            assertTrue(reviewerPr.body().contains(String.format(REVIEW_PROGRESS_TEMPLATE, 1, \"1 reviewer\")));\n@@ -267,1 +267,1 @@\n-            assertTrue(reviewerPr.body().contains(String.format(reviewProgressTemplate, 1, \"1 reviewer\")));\n+            assertTrue(reviewerPr.body().contains(String.format(REVIEW_PROGRESS_TEMPLATE, 1, \"1 reviewer\")));\n@@ -273,1 +273,1 @@\n-            assertTrue(reviewerPr.body().contains(String.format(reviewProgressTemplate, 1, \"1 reviewer\")));\n+            assertTrue(reviewerPr.body().contains(String.format(REVIEW_PROGRESS_TEMPLATE, 1, \"1 reviewer\")));\n@@ -281,1 +281,1 @@\n-            assertTrue(reviewerPr.body().contains(String.format(reviewProgressTemplate, 2, \"1 reviewer, 1 author\")));\n+            assertTrue(reviewerPr.body().contains(String.format(REVIEW_PROGRESS_TEMPLATE, 2, \"1 reviewer, 1 author\")));\n@@ -287,1 +287,1 @@\n-            assertTrue(reviewerPr.body().contains(String.format(reviewProgressTemplate, 2, \"1 reviewer, 1 author\")));\n+            assertTrue(reviewerPr.body().contains(String.format(REVIEW_PROGRESS_TEMPLATE, 2, \"1 reviewer, 1 author\")));\n@@ -292,1 +292,1 @@\n-            assertTrue(reviewerPr.body().contains(String.format(reviewProgressTemplate, 1, \"1 reviewer\")));\n+            assertTrue(reviewerPr.body().contains(String.format(REVIEW_PROGRESS_TEMPLATE, 1, \"1 reviewer\")));\n@@ -298,1 +298,1 @@\n-            assertTrue(reviewerPr.body().contains(String.format(reviewProgressTemplate, 1, \"1 reviewer\")));\n+            assertTrue(reviewerPr.body().contains(String.format(REVIEW_PROGRESS_TEMPLATE, 1, \"1 reviewer\")));\n@@ -333,1 +333,1 @@\n-            assertTrue(authorPR.body().contains(String.format(reviewProgressTemplate, 2, \"1 reviewer, 1 author\")));\n+            assertTrue(authorPR.body().contains(String.format(REVIEW_PROGRESS_TEMPLATE, 2, \"1 reviewer, 1 author\")));\n@@ -370,1 +370,1 @@\n-            assertTrue(authorPR.body().contains(String.format(reviewProgressTemplate, 2, \"1 reviewer, 1 author\")));\n+            assertTrue(authorPR.body().contains(String.format(REVIEW_PROGRESS_TEMPLATE, 2, \"1 reviewer, 1 author\")));\n@@ -375,1 +375,1 @@\n-            assertTrue(authorPR.body().contains(String.format(reviewProgressTemplate, 2, \"1 reviewer, 1 author\")));\n+            assertTrue(authorPR.body().contains(String.format(REVIEW_PROGRESS_TEMPLATE, 2, \"1 reviewer, 1 author\")));\n@@ -382,1 +382,1 @@\n-            assertTrue(reviewerPr.body().contains(String.format(reviewProgressTemplate, 1, \"1 reviewer\")));\n+            assertTrue(reviewerPr.body().contains(String.format(REVIEW_PROGRESS_TEMPLATE, 1, \"1 reviewer\")));\n@@ -413,1 +413,1 @@\n-            assertTrue(authorPR.body().contains(String.format(reviewProgressTemplate, 2, \"1 reviewer, 1 author\")));\n+            assertTrue(authorPR.body().contains(String.format(REVIEW_PROGRESS_TEMPLATE, 2, \"1 reviewer, 1 author\")));\n@@ -558,1 +558,1 @@\n-            return zeroReviewProgress;\n+            return ZERO_REVIEW_PROGRESS;\n@@ -560,1 +560,1 @@\n-            return String.format(reviewProgressTemplate, totalNum, String.join(\", \", requireList));\n+            return String.format(REVIEW_PROGRESS_TEMPLATE, totalNum, String.join(\", \", requireList));\n@@ -607,1 +607,1 @@\n-            assertTrue(authorPR.body().contains(zeroReviewProgress));\n+            assertTrue(authorPR.body().contains(ZERO_REVIEW_PROGRESS));\n@@ -611,1 +611,1 @@\n-            assertTrue(authorPR.body().contains(String.format(reviewProgressTemplate, 2, \"2 reviewers\")));\n+            assertTrue(authorPR.body().contains(String.format(REVIEW_PROGRESS_TEMPLATE, 2, \"2 reviewers\")));\n@@ -615,1 +615,1 @@\n-            assertTrue(reviewerPr.body().contains(zeroReviewProgress));\n+            assertTrue(reviewerPr.body().contains(ZERO_REVIEW_PROGRESS));\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/ReviewersTests.java","additions":34,"deletions":34,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,1 @@\n-    private final String reviewRequirements;\n+    private String reviewRequirements;\n@@ -51,21 +51,0 @@\n-\n-        var reviewRequirementMap = new LinkedHashMap<String, Integer>();\n-        var requireList = new ArrayList<String>();\n-        var sum = 0;\n-        reviewRequirementMap.put(\"lead\", lead);\n-        reviewRequirementMap.put(\"reviewer\", reviewers);\n-        reviewRequirementMap.put(\"committer\", committers);\n-        reviewRequirementMap.put(\"author\", authors);\n-        reviewRequirementMap.put(\"contributor\", contributors);\n-        for (var reviewRequirement : reviewRequirementMap.entrySet()) {\n-            var requirementNum = reviewRequirement.getValue();\n-            if (requirementNum > 0) {\n-                sum += requirementNum;\n-                requireList.add(requirementNum+ \" \" + reviewRequirement.getKey() + (requirementNum > 1 ? \"s\" : \"\"));\n-            }\n-        }\n-        if (sum == 0) {\n-            reviewRequirements = \" (no reviews required)\";\n-        } else {\n-            reviewRequirements = String.format(\" (%d reviews required, with at least %s)\", sum, String.join(\", \", requireList));\n-        }\n@@ -103,0 +82,23 @@\n+        if (reviewRequirements != null && !\"\".equals(reviewRequirements)) {\n+            return reviewRequirements;\n+        }\n+        var reviewRequirementMap = new LinkedHashMap<String, Integer>();\n+        var requireList = new ArrayList<String>();\n+        var sum = 0;\n+        reviewRequirementMap.put(\"lead\", lead);\n+        reviewRequirementMap.put(\"reviewer\", reviewers);\n+        reviewRequirementMap.put(\"committer\", committers);\n+        reviewRequirementMap.put(\"author\", authors);\n+        reviewRequirementMap.put(\"contributor\", contributors);\n+        for (var reviewRequirement : reviewRequirementMap.entrySet()) {\n+            var requirementNum = reviewRequirement.getValue();\n+            if (requirementNum > 0) {\n+                sum += requirementNum;\n+                requireList.add(requirementNum+ \" \" + reviewRequirement.getKey() + (requirementNum > 1 ? \"s\" : \"\"));\n+            }\n+        }\n+        if (sum == 0) {\n+            reviewRequirements = \" (no reviews required)\";\n+        } else {\n+            reviewRequirements = String.format(\" (%d reviews required, with at least %s)\", sum, String.join(\", \", requireList));\n+        }\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/ReviewersConfiguration.java","additions":25,"deletions":23,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -560,0 +560,117 @@\n+\n+    @Test\n+    void testReviewRequirements() throws IOException {\n+        \/\/ no review required.\n+        var noReview = \" (no reviews required)\";\n+        var conf = new ArrayList<>(CONFIGURATION);\n+        conf.add(\"reviewers = 0\");\n+        assertEquals(noReview, JCheckConfiguration.parse(conf).checks().reviewers().getReviewRequirements());\n+\n+        \/\/ review required template.\n+        var hasReview = \" (%d reviews required, with at least %s)\";\n+\n+        \/\/ one review required.\n+        conf = new ArrayList<>(CONFIGURATION);\n+        conf.add(\"reviewers = 1\");\n+        assertEquals(String.format(hasReview, 1, \"1 reviewer\"),\n+                JCheckConfiguration.parse(conf).checks().reviewers().getReviewRequirements());\n+\n+        conf = new ArrayList<>(CONFIGURATION);\n+        conf.add(\"committers = 1\");\n+        assertEquals(String.format(hasReview, 1, \"1 committer\"),\n+                JCheckConfiguration.parse(conf).checks().reviewers().getReviewRequirements());\n+\n+        \/\/ two reviews required.\n+        conf = new ArrayList<>(CONFIGURATION);\n+        conf.add(\"reviewers = 1\");\n+        conf.add(\"committers = 1\");\n+        assertEquals(String.format(hasReview, 2, \"1 reviewer, 1 committer\"),\n+                JCheckConfiguration.parse(conf).checks().reviewers().getReviewRequirements());\n+\n+        conf = new ArrayList<>(CONFIGURATION);\n+        conf.add(\"reviewers = 2\");\n+        assertEquals(String.format(hasReview, 2, \"2 reviewers\"),\n+                JCheckConfiguration.parse(conf).checks().reviewers().getReviewRequirements());\n+\n+        \/\/ three reviews required.\n+        conf = new ArrayList<>(CONFIGURATION);\n+        conf.add(\"reviewers = 1\");\n+        conf.add(\"committers = 1\");\n+        conf.add(\"authors = 1\");\n+        assertEquals(String.format(hasReview, 3, \"1 reviewer, 1 committer, 1 author\"),\n+                JCheckConfiguration.parse(conf).checks().reviewers().getReviewRequirements());\n+\n+        conf = new ArrayList<>(CONFIGURATION);\n+        conf.add(\"reviewers = 1\");\n+        conf.add(\"committers = 2\");\n+        assertEquals(String.format(hasReview, 3, \"1 reviewer, 2 committers\"),\n+                JCheckConfiguration.parse(conf).checks().reviewers().getReviewRequirements());\n+\n+        conf = new ArrayList<>(CONFIGURATION);\n+        conf.add(\"committers = 3\");\n+        assertEquals(String.format(hasReview, 3, \"3 committers\"),\n+                JCheckConfiguration.parse(conf).checks().reviewers().getReviewRequirements());\n+\n+        \/\/ four reviews required.\n+        conf = new ArrayList<>(CONFIGURATION);\n+        conf.add(\"reviewers = 1\");\n+        conf.add(\"committers = 1\");\n+        conf.add(\"authors = 1\");\n+        conf.add(\"contributors = 1\");\n+        assertEquals(String.format(hasReview, 4, \"1 reviewer, 1 committer, 1 author, 1 contributor\"),\n+                JCheckConfiguration.parse(conf).checks().reviewers().getReviewRequirements());\n+\n+        conf = new ArrayList<>(CONFIGURATION);\n+        conf.add(\"reviewers = 1\");\n+        conf.add(\"committers = 1\");\n+        conf.add(\"authors = 2\");\n+        assertEquals(String.format(hasReview, 4, \"1 reviewer, 1 committer, 2 authors\"),\n+                JCheckConfiguration.parse(conf).checks().reviewers().getReviewRequirements());\n+\n+        conf = new ArrayList<>(CONFIGURATION);\n+        conf.add(\"reviewers = 1\");\n+        conf.add(\"authors = 3\");\n+        assertEquals(String.format(hasReview, 4, \"1 reviewer, 3 authors\"),\n+                JCheckConfiguration.parse(conf).checks().reviewers().getReviewRequirements());\n+\n+        conf = new ArrayList<>(CONFIGURATION);\n+        conf.add(\"authors = 4\");\n+        assertEquals(String.format(hasReview, 4, \"4 authors\"),\n+                JCheckConfiguration.parse(conf).checks().reviewers().getReviewRequirements());\n+\n+        \/\/ five reviews required.\n+        conf = new ArrayList<>(CONFIGURATION);\n+        conf.add(\"lead = 1\");\n+        conf.add(\"reviewers = 1\");\n+        conf.add(\"committers = 1\");\n+        conf.add(\"authors = 1\");\n+        conf.add(\"contributors = 1\");\n+        assertEquals(String.format(hasReview, 5, \"1 lead, 1 reviewer, 1 committer, 1 author, 1 contributor\"),\n+                JCheckConfiguration.parse(conf).checks().reviewers().getReviewRequirements());\n+\n+        conf = new ArrayList<>(CONFIGURATION);\n+        conf.add(\"reviewers = 1\");\n+        conf.add(\"committers = 1\");\n+        conf.add(\"authors = 1\");\n+        conf.add(\"contributors = 2\");\n+        assertEquals(String.format(hasReview, 5, \"1 reviewer, 1 committer, 1 author, 2 contributors\"),\n+                JCheckConfiguration.parse(conf).checks().reviewers().getReviewRequirements());\n+\n+        conf = new ArrayList<>(CONFIGURATION);\n+        conf.add(\"reviewers = 1\");\n+        conf.add(\"committers = 1\");\n+        conf.add(\"contributors = 3\");\n+        assertEquals(String.format(hasReview, 5, \"1 reviewer, 1 committer, 3 contributors\"),\n+                JCheckConfiguration.parse(conf).checks().reviewers().getReviewRequirements());\n+\n+        conf = new ArrayList<>(CONFIGURATION);\n+        conf.add(\"reviewers = 1\");\n+        conf.add(\"contributors = 4\");\n+        assertEquals(String.format(hasReview, 5, \"1 reviewer, 4 contributors\"),\n+                JCheckConfiguration.parse(conf).checks().reviewers().getReviewRequirements());\n+\n+        conf = new ArrayList<>(CONFIGURATION);\n+        conf.add(\"contributors = 5\");\n+        assertEquals(String.format(hasReview, 5, \"5 contributors\"),\n+                JCheckConfiguration.parse(conf).checks().reviewers().getReviewRequirements());\n+    }\n","filename":"jcheck\/src\/test\/java\/org\/openjdk\/skara\/jcheck\/ReviewersCheckTests.java","additions":118,"deletions":1,"binary":false,"changes":119,"status":"modified"}]}