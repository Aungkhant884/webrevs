{"files":[{"patch":"@@ -62,1 +62,2 @@\n-    public void handle(PullRequestBot bot, HostedCommit commit, CensusInstance censusInstance, Path scratchPath, CommandInvocation command, List<Comment> allComments, PrintWriter reply) {\n+    public void handle(PullRequestBot bot, HostedCommit commit, LimitedCensusInstance censusInstance,\n+            Path scratchPath, CommandInvocation command, List<Comment> allComments, PrintWriter reply) {\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/BackportCommand.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,3 +30,0 @@\n-import java.io.*;\n-import java.net.URLEncoder;\n-import java.nio.charset.StandardCharsets;\n@@ -36,3 +33,1 @@\n-class CensusInstance {\n-    private final Census census;\n-    private final JCheckConfiguration configuration;\n+class CensusInstance extends LimitedCensusInstance {\n@@ -40,1 +35,0 @@\n-    private final Namespace namespace;\n@@ -43,2 +37,1 @@\n-        this.census = census;\n-        this.configuration = configuration;\n+        super(census, configuration, namespace);\n@@ -46,1 +39,0 @@\n-        this.namespace = namespace;\n@@ -59,15 +51,1 @@\n-    private static Namespace namespace(Census census, String hostNamespace) {\n-        \/\/var namespace = census.namespace(pr.repository().getNamespace());\n-        var namespace = census.namespace(hostNamespace);\n-        if (namespace == null) {\n-            throw new RuntimeException(\"Namespace not found in census: \" + hostNamespace);\n-        }\n-\n-        return namespace;\n-    }\n-\n-    private static Optional<JCheckConfiguration> configuration(HostedRepositoryPool hostedRepositoryPool, HostedRepository remoteRepo, String name, String ref) throws IOException {\n-        return hostedRepositoryPool.lines(remoteRepo, Path.of(name), ref).map(JCheckConfiguration::parse);\n-    }\n-\n-    static Optional<CensusInstance> create(HostedRepositoryPool hostedRepositoryPool,\n+    static Optional<CensusInstance> createCensusInstance(HostedRepositoryPool hostedRepositoryPool,\n@@ -76,1 +54,1 @@\n-        return create(hostedRepositoryPool, censusRepo, censusRef, folder, pr.repository(), pr.targetRef(),\n+        return createCensusInstance(hostedRepositoryPool, censusRepo, censusRef, folder, pr.repository(), pr.targetRef(),\n@@ -80,1 +58,1 @@\n-    static Optional<CensusInstance> create(HostedRepositoryPool hostedRepositoryPool,\n+    static Optional<CensusInstance> createCensusInstance(HostedRepositoryPool hostedRepositoryPool,\n@@ -83,36 +61,4 @@\n-        var repoName = censusRepo.url().getHost() + \"\/\" + censusRepo.name();\n-        var repoFolder = folder.resolve(URLEncoder.encode(repoName, StandardCharsets.UTF_8));\n-        try {\n-            hostedRepositoryPool.checkoutAllowStale(censusRepo, censusRef, repoFolder);\n-        } catch (IOException e) {\n-            throw new UncheckedIOException(\"Cannot materialize census to \" + repoFolder, e);\n-        }\n-\n-        try {\n-            Optional<JCheckConfiguration> configuration;\n-            if (confOverrideRepo == null) {\n-                configuration = configuration(hostedRepositoryPool, repository, \".jcheck\/conf\", ref);\n-            } else {\n-                configuration = configuration(hostedRepositoryPool,\n-                                              confOverrideRepo,\n-                                              confOverrideName,\n-                                              confOverrideRef);\n-            }\n-            if (configuration.isEmpty()) {\n-                return Optional.empty();\n-            }\n-            var census = Census.parse(repoFolder);\n-            var project = project(configuration.get(), census);\n-            var namespace = namespace(census, repository.namespace());\n-            return Optional.of(new CensusInstance(census, configuration.get(), project, namespace));\n-        } catch (IOException e) {\n-            throw new UncheckedIOException(\"Cannot parse census at \" + repoFolder, e);\n-        }\n-    }\n-\n-    Census census() {\n-        return census;\n-    }\n-\n-    JCheckConfiguration configuration() {\n-        return configuration;\n+        var limitedCensusInstance = LimitedCensusInstance.createLimitedCensusInstance(hostedRepositoryPool, censusRepo,\n+                censusRef, folder, repository, ref, confOverrideRepo, confOverrideName, confOverrideRef);\n+        return limitedCensusInstance.map(l ->\n+                new CensusInstance(l.census, l.configuration, project(l.configuration, l.census), l.namespace));\n@@ -125,9 +71,0 @@\n-    Namespace namespace() {\n-        return namespace;\n-    }\n-\n-    Optional<Contributor> contributor(HostUser hostUser) {\n-        var contributor = namespace.get(hostUser.id());\n-        return Optional.ofNullable(contributor);\n-    }\n-\n@@ -161,0 +98,1 @@\n+\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CensusInstance.java","additions":10,"deletions":72,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -226,1 +226,1 @@\n-        var census = CensusInstance.create(hostedRepositoryPool, bot.censusRepo(), bot.censusRef(), scratchPath.resolve(\"census\"), pr,\n+        var census = CensusInstance.createCensusInstance(hostedRepositoryPool, bot.censusRepo(), bot.censusRef(), scratchPath.resolve(\"census\"), pr,\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckWorkItem.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-        public void handle(PullRequestBot bot, HostedCommit hash, CensusInstance censusInstance, Path scratchPath, CommandInvocation command, List<Comment> allComments, PrintWriter reply) {\n+        public void handle(PullRequestBot bot, HostedCommit hash, LimitedCensusInstance censusInstance, Path scratchPath, CommandInvocation command, List<Comment> allComments, PrintWriter reply) {\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CommandExtractor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,2 @@\n-    default void handle(PullRequestBot bot, HostedCommit commit, CensusInstance censusInstance, Path scratchPath, CommandInvocation command, List<Comment> allComments, PrintWriter reply) {\n+    default void handle(PullRequestBot bot, HostedCommit commit, LimitedCensusInstance censusInstance, Path scratchPath,\n+            CommandInvocation command, List<Comment> allComments, PrintWriter reply) {\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CommandHandler.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -89,1 +89,2 @@\n-    private void processCommand(Path scratchPath, HostedCommit commit, CensusInstance censusInstance, CommandInvocation command, List<CommitComment> allComments) {\n+    private void processCommand(Path scratchPath, HostedCommit commit, LimitedCensusInstance censusInstance,\n+            CommandInvocation command, List<CommitComment> allComments) {\n@@ -132,1 +133,1 @@\n-            var census = CensusInstance.create(hostedRepositoryPool, bot.censusRepo(), bot.censusRef(),\n+            var census = LimitedCensusInstance.createLimitedCensusInstance(hostedRepositoryPool, bot.censusRepo(), bot.censusRef(),\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CommitCommandWorkItem.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,108 @@\n+package org.openjdk.skara.bots.pr;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Path;\n+import java.util.Optional;\n+import org.openjdk.skara.census.Census;\n+import org.openjdk.skara.census.Contributor;\n+import org.openjdk.skara.census.Namespace;\n+import org.openjdk.skara.forge.HostedRepository;\n+import org.openjdk.skara.forge.HostedRepositoryPool;\n+import org.openjdk.skara.host.HostUser;\n+import org.openjdk.skara.jcheck.JCheckConfiguration;\n+\n+\/**\n+ * The LimitedCensusInstance does not have a Project. Use this when the project\n+ * may be invalid or unavailable to avoid errors, otherwise use CensusInstance\n+ *\/\n+class LimitedCensusInstance {\n+\n+    protected final Census census;\n+    protected final JCheckConfiguration configuration;\n+    protected final Namespace namespace;\n+\n+    LimitedCensusInstance(Census census, JCheckConfiguration configuration, Namespace namespace) {\n+        this.census = census;\n+        this.configuration = configuration;\n+        this.namespace = namespace;\n+    }\n+\n+    static Optional<LimitedCensusInstance> createLimitedCensusInstance(HostedRepositoryPool hostedRepositoryPool,\n+            HostedRepository censusRepo, String censusRef, Path folder, HostedRepository repository, String ref,\n+            HostedRepository confOverrideRepo, String confOverrideName, String confOverrideRef) {\n+        Path repoFolder = getRepoFolder(hostedRepositoryPool, censusRepo, censusRef, folder);\n+\n+        try {\n+            Optional<JCheckConfiguration> configuration = jCheckConfiguration(hostedRepositoryPool,\n+                    repository, ref, confOverrideRepo, confOverrideName, confOverrideRef);\n+            if (configuration.isEmpty()) {\n+                return Optional.empty();\n+            }\n+            var census = Census.parse(repoFolder);\n+            var namespace = namespace(census, repository.namespace());\n+            return Optional.of(new LimitedCensusInstance(census, configuration.get(), namespace));\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(\"Cannot parse census at \" + repoFolder, e);\n+        }\n+    }\n+\n+    private static Namespace namespace(Census census, String hostNamespace) {\n+        \/\/var namespace = census.namespace(pr.repository().getNamespace());\n+        var namespace = census.namespace(hostNamespace);\n+        if (namespace == null) {\n+            throw new RuntimeException(\"Namespace not found in census: \" + hostNamespace);\n+        }\n+\n+        return namespace;\n+    }\n+\n+    private static Optional<JCheckConfiguration> configuration(HostedRepositoryPool hostedRepositoryPool, HostedRepository remoteRepo, String name, String ref) throws IOException {\n+        return hostedRepositoryPool.lines(remoteRepo, Path.of(name), ref).map(JCheckConfiguration::parse);\n+    }\n+\n+    private static Optional<JCheckConfiguration> jCheckConfiguration(HostedRepositoryPool hostedRepositoryPool,\n+            HostedRepository repository, String ref, HostedRepository confOverrideRepo, String confOverrideName,\n+            String confOverrideRef) throws IOException {\n+        Optional<JCheckConfiguration> configuration;\n+        if (confOverrideRepo == null) {\n+            configuration = configuration(hostedRepositoryPool, repository, \".jcheck\/conf\", ref);\n+        } else {\n+            configuration = configuration(hostedRepositoryPool,\n+                    confOverrideRepo,\n+                    confOverrideName,\n+                    confOverrideRef);\n+        }\n+        return configuration;\n+    }\n+\n+    private static Path getRepoFolder(HostedRepositoryPool hostedRepositoryPool, HostedRepository censusRepo, String censusRef, Path folder) {\n+        var repoName = censusRepo.url().getHost() + \"\/\" + censusRepo.name();\n+        var repoFolder = folder.resolve(URLEncoder.encode(repoName, StandardCharsets.UTF_8));\n+        try {\n+            hostedRepositoryPool.checkoutAllowStale(censusRepo, censusRef, repoFolder);\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(\"Cannot materialize census to \" + repoFolder, e);\n+        }\n+        return repoFolder;\n+    }\n+\n+    Optional<Contributor> contributor(HostUser hostUser) {\n+        var contributor = namespace.get(hostUser.id());\n+        return Optional.ofNullable(contributor);\n+    }\n+\n+    Census census() {\n+        return census;\n+    }\n+\n+    JCheckConfiguration configuration() {\n+        return configuration;\n+    }\n+\n+    Namespace namespace() {\n+        return namespace;\n+    }\n+}\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/LimitedCensusInstance.java","additions":108,"deletions":0,"binary":false,"changes":108,"status":"added"},{"patch":"@@ -27,1 +27,0 @@\n-import org.openjdk.skara.host.HostUser;\n@@ -192,1 +191,1 @@\n-        var census = CensusInstance.create(hostedRepositoryPool, bot.censusRepo(), bot.censusRef(), scratchPath.resolve(\"census\"), pr,\n+        var census = CensusInstance.createCensusInstance(hostedRepositoryPool, bot.censusRepo(), bot.censusRef(), scratchPath.resolve(\"census\"), pr,\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestCommandWorkItem.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -62,1 +62,2 @@\n-    public void handle(PullRequestBot bot, HostedCommit commit, CensusInstance censusInstance, Path scratchPath, CommandInvocation command, List<Comment> allComments, PrintWriter reply) {\n+    public void handle(PullRequestBot bot, HostedCommit commit, LimitedCensusInstance censusInstance,\n+            Path scratchPath, CommandInvocation command, List<Comment> allComments, PrintWriter reply) {\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/TagCommand.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}