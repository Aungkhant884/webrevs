{"files":[{"patch":"@@ -118,1 +118,0 @@\n-            \/\/ Use the information contained in the head commit - jcheck has verified that it contains sane values\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckablePullRequest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -165,1 +165,3 @@\n-        throw new IllegalStateException(\"Invalid author name: \" + issue.commit().author());\n+        \/\/ We only get here for contributors without an OpenJDK username\n+        addFailureMessage(issue.check(), \"Pull request's HEAD commit must contain a full name\");\n+        readyForReview = false;\n@@ -170,1 +172,3 @@\n-        throw new IllegalStateException(\"Invalid author email: \" + issue.commit().author());\n+        \/\/ We only get here for contributors without an OpenJDK username\n+        addFailureMessage(issue.check(), \"Pull request's HEAD commit must contain a valid e-mail\");\n+        readyForReview = false;\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestCheckIssueVisitor.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -786,0 +786,41 @@\n+\n+    @Test\n+    void contributorMissingEmail(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory();\n+             var pushedFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var committer = credentials.getHostedRepository();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                                           .addCommitter(committer.forge().currentUser().id())\n+                                           .addReviewer(reviewer.forge().currentUser().id());\n+            var mergeBot = PullRequestBot.newBuilder().repo(reviewer).censusRepo(censusBuilder.build()).build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR with an empty e-mail\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, \"Content\", \"A commit\", \"Duke\", \"\");\n+            localRepo.push(editHash, author.url(), \"refs\/heads\/edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"This is a pull request\");\n+\n+            \/\/ Run the bot\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+\n+            \/\/ The bot should respond with a failure about missing e-mail\n+            pr = author.pullRequest(pr.id());\n+            assertFalse(pr.labels().contains(\"ready\"));\n+            var checks = pr.checks(pr.headHash());\n+            assertTrue(checks.containsKey(\"jcheck\"));\n+            var jcheck = checks.get(\"jcheck\");\n+            assertEquals(CheckStatus.FAILURE, jcheck.status());\n+            assertTrue(jcheck.summary().isPresent());\n+            var summary = jcheck.summary().get();\n+            assertTrue(summary.contains(\"Pull request's HEAD commit must contain a valid e-mail\"));\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/IntegrateTests.java","additions":41,"deletions":0,"binary":false,"changes":41,"status":"modified"}]}