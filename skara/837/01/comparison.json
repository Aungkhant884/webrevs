{"files":[{"patch":"@@ -142,18 +142,0 @@\n-    \/\/ For unknown contributors, check that all commits have the same name and email\n-    private boolean checkCommitAuthor(List<CommitMetadata> commits) throws IOException {\n-        var author = censusInstance.namespace().get(pr.author().id());\n-        if (author != null) {\n-            return true;\n-        }\n-\n-        var names = new HashSet<String>();\n-        var emails = new HashSet<String>();\n-\n-        for (var commit : commits) {\n-            names.add(commit.author().name());\n-            emails.add(commit.author().email());\n-        }\n-\n-        return ((names.size() == 1) && emails.size() == 1);\n-    }\n-\n@@ -194,7 +176,0 @@\n-        if (!checkCommitAuthor(originalCommits)) {\n-            var error = \"For contributors who are not existing OpenJDK Authors, commit attribution will be taken from \" +\n-                    \"the commits in the PR. However, the commits in this PR have inconsistent user names and\/or \" +\n-                    \"email addresses. Please amend the commits.\";\n-            ret.add(error);\n-        }\n-\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":0,"deletions":25,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -118,1 +118,0 @@\n-            \/\/ Use the information contained in the head commit - jcheck has verified that it contains sane values\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckablePullRequest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -165,1 +165,3 @@\n-        throw new IllegalStateException(\"Invalid author name: \" + issue.commit().author());\n+        \/\/ We only get here for contributors without an OpenJDK username\n+        addFailureMessage(issue.check(), \"Pull request's HEAD commit must contain a full name\");\n+        readyForReview = false;\n@@ -170,1 +172,3 @@\n-        throw new IllegalStateException(\"Invalid author email: \" + issue.commit().author());\n+        \/\/ We only get here for contributors without an OpenJDK username\n+        addFailureMessage(issue.check(), \"Pull request's HEAD commit must contain a valid e-mail\");\n+        readyForReview = false;\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestCheckIssueVisitor.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -301,51 +301,0 @@\n-    @Test\n-    void multipleCommitters(TestInfo testInfo) throws IOException {\n-        try (var credentials = new HostCredentials(testInfo);\n-             var tempFolder = new TemporaryDirectory()) {\n-            var author = credentials.getHostedRepository();\n-            var reviewer = credentials.getHostedRepository();\n-\n-            var censusBuilder = credentials.getCensusBuilder()\n-                                           .addReviewer(reviewer.forge().currentUser().id());\n-            var checkBot = PullRequestBot.newBuilder().repo(author).censusRepo(censusBuilder.build()).build();\n-\n-            \/\/ Populate the projects repository\n-            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n-            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n-            localRepo.push(masterHash, author.url(), \"master\", true);\n-\n-            \/\/ Make two changes with different authors\n-            CheckableRepository.appendAndCommit(localRepo, \"First edit\", \"Edit by number 1\",\n-                                                \"number1\", \"number1@none.none\");\n-            var editHash = CheckableRepository.appendAndCommit(localRepo, \"Second edit\", \"Edit by number 2\",\n-                                                               \"number2\", \"number2@none.none\");\n-            localRepo.push(editHash, author.url(), \"refs\/heads\/edit\", true);\n-            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"This is a pull request\");\n-\n-            \/\/ Check the status\n-            TestBotRunner.runPeriodicItems(checkBot);\n-\n-            \/\/ Verify that the check failed\n-            var checks = pr.checks(editHash);\n-            assertEquals(1, checks.size());\n-            var check = checks.get(\"jcheck\");\n-            assertEquals(CheckStatus.FAILURE, check.status());\n-\n-            \/\/ Approve it as another user\n-            var approvalPr = reviewer.pullRequest(pr.id());\n-            approvalPr.addReview(Review.Verdict.APPROVED, \"Approved\");\n-\n-            \/\/ Check the status again\n-            TestBotRunner.runPeriodicItems(checkBot);\n-\n-            \/\/ The check should still be failing\n-            checks = pr.checks(editHash);\n-            assertEquals(1, checks.size());\n-            check = checks.get(\"jcheck\");\n-            assertEquals(CheckStatus.FAILURE, check.status());\n-\n-            \/\/ The PR should not be flagged as ready for review, as multiple committers is a problem\n-            assertFalse(pr.labels().contains(\"rfr\"));\n-        }\n-    }\n-\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CheckTests.java","additions":0,"deletions":51,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -786,0 +786,41 @@\n+\n+    @Test\n+    void contributorMissingEmail(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory();\n+             var pushedFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var committer = credentials.getHostedRepository();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                                           .addCommitter(committer.forge().currentUser().id())\n+                                           .addReviewer(reviewer.forge().currentUser().id());\n+            var mergeBot = PullRequestBot.newBuilder().repo(reviewer).censusRepo(censusBuilder.build()).build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR with an empty e-mail\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, \"Content\", \"A commit\", \"Duke\", \"\");\n+            localRepo.push(editHash, author.url(), \"refs\/heads\/edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"This is a pull request\");\n+\n+            \/\/ Run the bot\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+\n+            \/\/ The bot should respond with a failure about missing e-mail\n+            pr = author.pullRequest(pr.id());\n+            assertFalse(pr.labels().contains(\"ready\"));\n+            var checks = pr.checks(pr.headHash());\n+            assertTrue(checks.containsKey(\"jcheck\"));\n+            var jcheck = checks.get(\"jcheck\");\n+            assertEquals(CheckStatus.FAILURE, jcheck.status());\n+            assertTrue(jcheck.summary().isPresent());\n+            var summary = jcheck.summary().get();\n+            assertTrue(summary.contains(\"Pull request's HEAD commit must contain a valid e-mail\"));\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/IntegrateTests.java","additions":41,"deletions":0,"binary":false,"changes":41,"status":"modified"}]}