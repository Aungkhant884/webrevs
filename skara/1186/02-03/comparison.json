{"files":[{"patch":"@@ -269,0 +269,4 @@\n+        return findOriginalBackportHash(pr);\n+    }\n+\n+    static Hash findOriginalBackportHash(PullRequest pr) {\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckablePullRequest.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -64,2 +64,4 @@\n-        if (!pr.labelNames().contains(\"backport\")) {\n-            reply.println(\"@\" + username + \" can only mark [backport pull requests](https:\/\/wiki.openjdk.java.net\/display\/SKARA\/Backports#Backports-BackportPullRequests) as clean\");\n+        if (!pr.labelNames().contains(\"backport\") || CheckablePullRequest.findOriginalBackportHash(pr) == null) {\n+            reply.println(\"@\" + username + \" can only mark [backport pull requests]\" +\n+                    \"(https:\/\/wiki.openjdk.java.net\/display\/SKARA\/Backports#Backports-BackportPullRequests),\" +\n+                    \" with an original hash, as clean\");\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CleanCommand.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-            assertLastCommentContains(pr, \"as clean\");\n+            assertLastCommentContains(pr, \", with an original hash, as clean\");\n@@ -300,0 +300,45 @@\n+\n+    @Test\n+    void missingBackportHash(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var integrator = credentials.getHostedRepository();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addCommitter(author.forge().currentUser().id())\n+                    .addReviewer(integrator.forge().currentUser().id());\n+            var issues = credentials.getIssueProject();\n+            var prBot = PullRequestBot.newBuilder()\n+                    .repo(integrator)\n+                    .censusRepo(censusBuilder.build())\n+                    .issueProject(issues)\n+                    .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            var issue = credentials.createIssue(issues, \"An issue\");\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"Backport \" + issue.id());\n+            TestBotRunner.runPeriodicItems(prBot);\n+\n+            assertTrue(pr.labelNames().contains(\"backport\"));\n+            assertFalse(pr.labelNames().contains(\"clean\"));\n+\n+            \/\/ Try to issue the \"\/clean\" PR command, should not work\n+            pr.addComment(\"\/clean\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertTrue(pr.labelNames().contains(\"backport\"));\n+            assertFalse(pr.labelNames().contains(\"clean\"));\n+            assertLastCommentContains(pr, \"can only mark [backport pull requests]\");\n+            assertLastCommentContains(pr, \", with an original hash, as clean\");\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CleanCommandTests.java","additions":46,"deletions":1,"binary":false,"changes":47,"status":"modified"}]}