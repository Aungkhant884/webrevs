{"files":[{"patch":"@@ -43,1 +43,0 @@\n-import java.util.stream.Stream;\n@@ -49,1 +48,2 @@\n-    private static final Pattern BACKPORT_TITLE_PATTERN = Pattern.compile(\"^Backport\\\\s*([0-9a-z]{40})\\\\s*$\");\n+    private static final Pattern BACKPORT_HASH_TITLE_PATTERN = Pattern.compile(\"^Backport\\\\s*([0-9a-z]{40})\\\\s*$\");\n+    private static final Pattern BACKPORT_ISSUE_TITLE_PATTERN = Pattern.compile(\"^Backport\\\\s*(?:(?<prefix>[A-Za-z][A-Za-z0-9]+)-)?(?<id>[0-9]+)\\\\s*$\");\n@@ -230,3 +230,3 @@\n-            var m = BACKPORT_TITLE_PATTERN.matcher(pr.title());\n-            if (m.matches()) {\n-                var hash = new Hash(m.group(1));\n+            var backportHashMatcher = BACKPORT_HASH_TITLE_PATTERN.matcher(pr.title());\n+            if (backportHashMatcher.matches()) {\n+                var hash = new Hash(backportHashMatcher.group(1));\n@@ -302,0 +302,31 @@\n+            \/\/ Check for a title on the form Backport <issueid>\n+            var backportIssueMatcher = BACKPORT_ISSUE_TITLE_PATTERN.matcher(pr.title());\n+            if (backportIssueMatcher.matches()) {\n+                var prefix = getMatchGroup(backportIssueMatcher, \"prefix\");\n+                var id = getMatchGroup(backportIssueMatcher, \"id\");\n+                var project = bot.issueProject();\n+\n+                if (!prefix.isEmpty() && !prefix.equalsIgnoreCase(project.name())) {\n+                    var text = \"<!-- backport error -->\\n\" +\n+                            \":warning: @\" + pr.author().username() + \" the issue prefix `\" + prefix + \"` does not\" +\n+                            \" match project [\" + project.name() + \"](\" + project.webUrl() + \").\";\n+                    addBackportErrorComment(text, comments);\n+                    return List.of();\n+                }\n+                var issue = project.issue(id);\n+                if (issue.isEmpty()) {\n+                    var text = \"<!-- backport error -->\\n\" +\n+                            \":warning: @\" + pr.author().username() + \" the issue with id `\" + id + \"` \" +\n+                            \"does not exist in project [\" + project.name() + \"](\" + project.webUrl() + \").\";\n+                    addBackportErrorComment(text, comments);\n+                    return List.of();\n+                }\n+                pr.setTitle(id + \": \" + issue.get().title());\n+                var text = \"This backport pull request has now been updated with the original issue,\" +\n+                        \" but not the original commit. If you have the original commit hash, please update\" +\n+                        \" the pull request title with `Backport <hash>`.\";\n+                pr.addComment(text);\n+                pr.addLabel(\"backport\");\n+                return List.of(new CheckWorkItem(bot, pr.repository().pullRequest(pr.id()), errorHandler));\n+            }\n+\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckWorkItem.java","additions":36,"deletions":5,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -1350,0 +1350,111 @@\n+\n+    @Test\n+    void noShaOnlyIssue(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+\n+            var author = credentials.getHostedRepository();\n+            var integrator = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var issues = credentials.getIssueProject();\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addCommitter(author.forge().currentUser().id())\n+                    .addReviewer(integrator.forge().currentUser().id())\n+                    .addReviewer(reviewer.forge().currentUser().id());\n+            var bot = PullRequestBot.newBuilder()\n+                    .repo(integrator)\n+                    .censusRepo(censusBuilder.build())\n+                    .issueProject(issues)\n+                    .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            var issue1 = credentials.createIssue(issues, \"An issue\");\n+            var issue1Number = issue1.id().split(\"-\")[1];\n+\n+            \/\/ Create change\n+            localRepo.checkout(localRepo.defaultBranch());\n+            var editBranch = localRepo.branch(masterHash, \"edit\");\n+            localRepo.checkout(editBranch);\n+            var newFile2 = localRepo.root().resolve(\"a_new_file.txt\");\n+            Files.writeString(newFile2, \"hello\");\n+            localRepo.add(newFile2);\n+            var editHash = localRepo.commit(\"Backport\", \"duke\", \"duke@openjdk.java.net\");\n+            localRepo.push(editHash, author.url(), \"refs\/heads\/edit\", true);\n+\n+            \/\/ Create various kinds of bad pull request titles\n+            \/\/ Use a bad project\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\",\n+                    \"Backport \" + \"FOO-\" + issue1.id().split(\"-\")[1]);\n+            TestBotRunner.runPeriodicItems(bot);\n+            var backportComment = pr.comments().get(0).body();\n+            assertTrue(backportComment.contains(\"does not match project\"));\n+            assertFalse(pr.labelNames().contains(\"backport\"));\n+\n+            \/\/ Use bad issue ID\n+            pr.setTitle(\"Backport TEST-4711\");\n+            TestBotRunner.runPeriodicItems(bot);\n+            backportComment = pr.comments().get(1).body();\n+            assertTrue(backportComment.contains(\"does not exist in project\"));\n+            assertFalse(pr.labelNames().contains(\"backport\"));\n+\n+            \/\/ Use different kinds of good titles\n+            \/\/ Use the full issue ID\n+            pr.setTitle(\"Backport \" + issue1.id());\n+            TestBotRunner.runPeriodicItems(bot);\n+            backportComment = pr.comments().get(2).body();\n+            assertTrue(backportComment.contains(\"This backport pull request has now been updated with the original issue\"));\n+            assertEquals(issue1Number + \": An issue\", pr.title());\n+            assertTrue(pr.labelNames().contains(\"backport\"));\n+\n+            \/\/ Set the title without project name\n+            pr.setTitle(\"Backport \" + issue1.id().split(\"-\")[1]);\n+            TestBotRunner.runPeriodicItems(bot);\n+            backportComment = pr.comments().get(3).body();\n+            assertTrue(backportComment.contains(\"This backport pull request has now been updated with the original issue\"));\n+            assertEquals(issue1Number + \": An issue\", pr.title());\n+            assertTrue(pr.labelNames().contains(\"backport\"));\n+\n+            \/\/ Approve PR and re-run bot\n+            var prAsReviewer = reviewer.pullRequest(pr.id());\n+            prAsReviewer.addReview(Review.Verdict.APPROVED, \"Looks good\");\n+            TestBotRunner.runPeriodicItems(bot);\n+            assertLastCommentContains(pr, \"This change now passes all *automated* pre-integration checks\");\n+\n+            \/\/ Integrate\n+            var prAsCommitter = author.pullRequest(pr.id());\n+            prAsCommitter.addComment(\"\/integrate\");\n+            TestBotRunner.runPeriodicItems(bot);\n+\n+            \/\/ Find the commit\n+            assertLastCommentContains(pr, \"Pushed as commit\");\n+\n+            String hex = null;\n+            var comment = pr.comments().get(pr.comments().size() - 1);\n+            var lines = comment.body().split(\"\\n\");\n+            var pattern = Pattern.compile(\".* Pushed as commit ([0-9a-z]{40}).*\");\n+            for (var line : lines) {\n+                var m = pattern.matcher(line);\n+                if (m.matches()) {\n+                    hex = m.group(1);\n+                    break;\n+                }\n+            }\n+            assertNotNull(hex);\n+            assertEquals(40, hex.length());\n+            localRepo.checkout(localRepo.defaultBranch());\n+            localRepo.pull(author.url().toString(), \"master\", false);\n+            var commit = localRepo.lookup(new Hash(hex)).orElseThrow();\n+\n+            var message = CommitMessageParsers.v1.parse(commit);\n+            assertEquals(1, message.issues().size());\n+            assertEquals(\"An issue\", message.issues().get(0).description());\n+            assertEquals(List.of(\"integrationreviewer3\"), message.reviewers());\n+            assertEquals(List.of(), message.contributors());\n+            assertEquals(List.of(), message.summaries());\n+            assertEquals(List.of(), message.additional());\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/BackportTests.java","additions":111,"deletions":0,"binary":false,"changes":111,"status":"modified"}]}