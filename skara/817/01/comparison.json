{"files":[{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 20202, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bots.notify.issue;\n+\n+import java.util.regex.Pattern;\n+\n+public class BuildCompare {\n+    private static final Pattern buildPattern = Pattern.compile(\"^b(\\\\d+)\");\n+\n+    \/\/ Return the number from a numbered build (e.g., 'b12' -> 12), or -1 if not a numbered build.\n+    private static int buildNumber(String build) {\n+        var buildMatcher = buildPattern.matcher(build);\n+        if (buildMatcher.matches()) {\n+            return Integer.parseInt(buildMatcher.group(1));\n+        } else {\n+            return -1;\n+        }\n+    }\n+\n+    \/\/ Notable values for \"Resolved in Build\" are 'team', 'master', and numbered builds\n+    \/\/ (b22).  'team' should not overwrite any value; 'master' should only\n+    \/\/ overwrite 'team'; numbered builds (b22) should only be overwritten by\n+    \/\/ lower numbered builds.\n+    \/\/ The last condition is due to the use of duplicate bugids in jdk update\n+    \/\/ releases.  A fix could be made in jdk7u10-b02, and also (due to an\n+    \/\/ escalation or some other urgent need) be fixed in jdk7u8-b04.  At some\n+    \/\/ later date when jdk7u8 is merged into, say, jdk7u10-b10, without the\n+    \/\/ last condition the Resolved in Build field would be changed from b02\n+    \/\/ to b10.\n+    public static boolean shouldReplace(String newBuild, String oldBuild) {\n+        if (oldBuild == null) {\n+            return true;\n+        }\n+        if (newBuild.equals(oldBuild)) {\n+            return false;\n+        }\n+        if (newBuild.equals(\"team\")) {\n+            return false;\n+        }\n+        if (newBuild.startsWith(\"ma\")) {\n+            return oldBuild.equals(\"team\");\n+        }\n+\n+        var oldBuildNumber = buildNumber(oldBuild);\n+        var newBuildNumber = buildNumber(newBuild);\n+\n+        return oldBuildNumber < 0 || (newBuildNumber >= 0 && newBuildNumber < oldBuildNumber);\n+    }\n+}\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/BuildCompare.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"},{"patch":"@@ -29,0 +29,1 @@\n+import org.openjdk.skara.issuetracker.Issue;\n@@ -32,1 +33,1 @@\n-import org.openjdk.skara.vcs.openjdk.CommitMessageParsers;\n+import org.openjdk.skara.vcs.openjdk.*;\n@@ -34,1 +35,1 @@\n-import java.io.IOException;\n+import java.io.*;\n@@ -107,1 +108,1 @@\n-        if (!prOnly) {\n+        if (!prOnly || buildName != null) {\n@@ -263,3 +264,0 @@\n-                    if (buildName != null) {\n-                        issue.setProperty(\"customfield_10006\", JSON.of(buildName));\n-                    }\n@@ -267,0 +265,9 @@\n+                        if (buildName != null) {\n+                            \/\/ Check if the build name should be updated\n+                            var oldBuild = issue.properties().getOrDefault(\"customfield_10006\", JSON.of());\n+                            if (BuildCompare.shouldReplace(buildName, oldBuild.asString())) {\n+                                issue.setProperty(\"customfield_10006\", JSON.of(buildName));\n+                            } else {\n+                                log.info(\"Not replacing build \" + oldBuild.asString() + \" with \" + buildName + \" for issue \" + issue.id());\n+                            }\n+                        }\n@@ -275,0 +282,77 @@\n+    @Override\n+    public void onNewOpenJDKTagCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, OpenJDKTag tag, Tag.Annotated annotated) throws NonRetriableException {\n+        if (!setFixVersion) {\n+            return;\n+        }\n+        if (buildName == null) {\n+            return;\n+        }\n+\n+        for (var commit : commits) {\n+            var commitMessage = CommitMessageParsers.v1.parse(commit);\n+            for (var commitIssue : commitMessage.issues()) {\n+                var optionalIssue = issueProject.issue(commitIssue.shortId());\n+                if (optionalIssue.isEmpty()) {\n+                    log.severe(\"Cannot update \\\"Resolved in Build\\\" for issue \" + commitIssue.id()\n+                                       + \" - issue not found in issue project\");\n+                    continue;\n+                }\n+                var issue = optionalIssue.get();\n+\n+                \/\/ Determine which branch this tag belongs to\n+                String tagBranch = null;\n+                try {\n+                    for (var branch : repository.branches()) {\n+                        var hash = localRepository.resolve(tag.tag()).orElseThrow();\n+                        if (localRepository.isAncestor(hash, branch.hash())) {\n+                            if (tagBranch == null) {\n+                                tagBranch = branch.name();\n+                            } else {\n+                                throw new RuntimeException(\"Tag \" + tag.tag().name() + \" found in both \" + tagBranch + \" and \" + branch.name());\n+                            }\n+                        }\n+                    }\n+                    if (tagBranch == null) {\n+                        throw new RuntimeException(\"Cannot find any branch containing the tag \" + tag.tag().name());\n+                    }\n+                } catch (IOException e) {\n+                    throw new UncheckedIOException(e);\n+                }\n+\n+                \/\/ The actual issue to be updated can change depending on the fix version\n+                var requestedVersion = fixVersions != null ? fixVersions.getOrDefault(tagBranch, null) : null;\n+                if (requestedVersion == null) {\n+                    try {\n+                        var conf = localRepository.lines(Path.of(\".jcheck\/conf\"), commit.hash());\n+                        if (conf.isPresent()) {\n+                            var parsed = JCheckConfiguration.parse(conf.get());\n+                            var version = parsed.general().version();\n+                            requestedVersion = version.orElse(null);\n+                        }\n+                    } catch (IOException e) {\n+                        throw new RuntimeException(e);\n+                    }\n+                }\n+                if (requestedVersion == null) {\n+                    throw new RuntimeException(\"Failed to determine requested fixVersion for \" + issue.id());\n+                }\n+                var fixVersion = JdkVersion.parse(requestedVersion);\n+                var existing = Backports.findIssue(issue, fixVersion);\n+                if (existing.isEmpty()) {\n+                    throw new RuntimeException(\"Cannot find a properly resolved issue for: \" + issue.id());\n+                } else {\n+                    issue = existing.get();\n+                }\n+\n+                \/\/ Check if the build name should be updated\n+                var oldBuild = issue.properties().getOrDefault(\"customfield_10006\", JSON.of());\n+                var newBuild = \"b\" + tag.buildNum();\n+                if (BuildCompare.shouldReplace(newBuild, oldBuild.asString())) {\n+                    issue.setProperty(\"customfield_10006\", JSON.of(newBuild));\n+                } else {\n+                    log.info(\"Not replacing build \" + oldBuild.asString() + \" with \" + newBuild + \" for issue \" + issue.id());\n+                }\n+            }\n+        }\n+    }\n+\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifier.java","additions":90,"deletions":6,"binary":false,"changes":96,"status":"modified"},{"patch":"@@ -0,0 +1,51 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bots.notify.issue;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class BuildCompareTests {\n+    @Test\n+    void simple() {\n+        assertTrue(BuildCompare.shouldReplace(\"main\", \"team\"));\n+        assertFalse(BuildCompare.shouldReplace(\"team\", \"main\"));\n+\n+        assertTrue(BuildCompare.shouldReplace(\"b03\", \"team\"));\n+        assertTrue(BuildCompare.shouldReplace(\"b03\", \"main\"));\n+        assertTrue(BuildCompare.shouldReplace(\"b03\", \"b04\"));\n+\n+        assertFalse(BuildCompare.shouldReplace(\"team\", \"b03\"));\n+        assertFalse(BuildCompare.shouldReplace(\"main\", \"b03\"));\n+        assertFalse(BuildCompare.shouldReplace(\"b04\", \"b03\"));\n+\n+        assertTrue(BuildCompare.shouldReplace(\"team\", null));\n+        assertTrue(BuildCompare.shouldReplace(\"main\", null));\n+        assertTrue(BuildCompare.shouldReplace(\"b05\", null));\n+\n+        assertFalse(BuildCompare.shouldReplace(\"team\", \"team\"));\n+        assertFalse(BuildCompare.shouldReplace(\"main\", \"main\"));\n+        assertFalse(BuildCompare.shouldReplace(\"b12\", \"b12\"));\n+    }\n+}\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/BuildCompareTests.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"},{"patch":"@@ -31,0 +31,1 @@\n+import org.openjdk.skara.vcs.Branch;\n@@ -413,0 +414,155 @@\n+    @Test\n+    void testIssueBuildAfterMerge(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+\n+            var repo = credentials.getHostedRepository();\n+            var repoFolder = tempFolder.path().resolve(\"repo\");\n+            var localRepo = CheckableRepository.init(repoFolder, repo.repositoryType());\n+            credentials.commitLock(localRepo);\n+            localRepo.pushAll(repo.url());\n+\n+            var issueProject = credentials.getIssueProject();\n+            var storageFolder = tempFolder.path().resolve(\"storage\");\n+            var jbsNotifierConfig = JSON.object().put(\"fixversions\", JSON.object())\n+                                        .put(\"buildname\", \"team\");\n+            var notifyBot = testBotBuilder(repo, issueProject, storageFolder, jbsNotifierConfig).create(\"notify\", JSON.object());\n+            var jbsNotifierConfig2 = JSON.object().put(\"fixversions\", JSON.object())\n+                                        .put(\"buildname\", \"master\");\n+            var notifyBot2 = testBotBuilder(repo, issueProject, storageFolder, jbsNotifierConfig2).create(\"notify\", JSON.object());\n+            var jbsNotifierConfig3 = JSON.object().put(\"fixversions\", JSON.object())\n+                                         .put(\"buildname\", \"b04\");\n+            var notifyBot3 = testBotBuilder(repo, issueProject, storageFolder, jbsNotifierConfig3).create(\"notify\", JSON.object());\n+            var jbsNotifierConfig4 = JSON.object().put(\"fixversions\", JSON.object())\n+                                         .put(\"buildname\", \"b02\");\n+            var notifyBot4 = testBotBuilder(repo, issueProject, storageFolder, jbsNotifierConfig4).create(\"notify\", JSON.object());\n+            var jbsNotifierConfig5 = JSON.object().put(\"fixversions\", JSON.object())\n+                                         .put(\"buildname\", \"b03\");\n+            var notifyBot5 = testBotBuilder(repo, issueProject, storageFolder, jbsNotifierConfig5).create(\"notify\", JSON.object());\n+\n+            \/\/ Initialize history\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+            var blankHistory = repo.branchHash(\"history\");\n+\n+            \/\/ Create an issue and commit a fix\n+            var authorEmailAddress = issueProject.issueTracker().currentUser().userName() + \"@openjdk.org\";\n+            var issue = issueProject.createIssue(\"This is an issue\", List.of(\"Indeed\"), Map.of(\"issuetype\", JSON.of(\"Enhancement\")));\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, \"Another line\", issue.id() + \": Fix that issue\", \"Duke\", authorEmailAddress);\n+            localRepo.push(editHash, repo.url(), \"master\");\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ The changeset should be reflected in a comment\n+            var updatedIssue = issueProject.issue(issue.id()).orElseThrow();\n+\n+            var comments = updatedIssue.comments();\n+            assertEquals(1, comments.size());\n+            var comment = comments.get(0);\n+            assertTrue(comment.body().contains(editHash.abbreviate()));\n+\n+            \/\/ As well as a fixVersion and a resolved in build\n+            assertEquals(Set.of(\"0.1\"), fixVersions(updatedIssue));\n+            assertEquals(\"team\", updatedIssue.properties().get(\"customfield_10006\").asString());\n+\n+            \/\/ The issue should be assigned and resolved\n+            assertEquals(RESOLVED, updatedIssue.state());\n+            assertEquals(List.of(issueProject.issueTracker().currentUser()), updatedIssue.assignees());\n+\n+            \/\/ Restore the history to simulate looking at another repository\n+            localRepo.fetch(repo.url(), \"history\");\n+            localRepo.push(blankHistory, repo.url(), \"history\", true);\n+\n+            \/\/ When the second notifier sees it, it should upgrade the build name\n+            TestBotRunner.runPeriodicItems(notifyBot2);\n+\n+            updatedIssue = issueProject.issue(issue.id()).orElseThrow();\n+            assertEquals(\"master\", updatedIssue.properties().get(\"customfield_10006\").asString());\n+\n+            \/\/ Restore the history to simulate looking at another repository\n+            localRepo.fetch(repo.url(), \"history\");\n+            localRepo.push(blankHistory, repo.url(), \"history\", true);\n+\n+            \/\/ When the third notifier sees it, it should switch to a build number\n+            TestBotRunner.runPeriodicItems(notifyBot3);\n+\n+            updatedIssue = issueProject.issue(issue.id()).orElseThrow();\n+            assertEquals(\"b04\", updatedIssue.properties().get(\"customfield_10006\").asString());\n+\n+            \/\/ Restore the history to simulate looking at another repository\n+            localRepo.fetch(repo.url(), \"history\");\n+            localRepo.push(blankHistory, repo.url(), \"history\", true);\n+\n+            \/\/ When the fourth notifier sees it, it should switch to a lower build number\n+            TestBotRunner.runPeriodicItems(notifyBot4);\n+\n+            updatedIssue = issueProject.issue(issue.id()).orElseThrow();\n+            assertEquals(\"b02\", updatedIssue.properties().get(\"customfield_10006\").asString());\n+\n+            \/\/ Restore the history to simulate looking at another repository\n+            localRepo.fetch(repo.url(), \"history\");\n+            localRepo.push(blankHistory, repo.url(), \"history\", true);\n+\n+            \/\/ When the fifth notifier sees it, it should NOT switch to a higher build number\n+            TestBotRunner.runPeriodicItems(notifyBot5);\n+\n+            updatedIssue = issueProject.issue(issue.id()).orElseThrow();\n+            assertEquals(\"b02\", updatedIssue.properties().get(\"customfield_10006\").asString());\n+        }\n+    }\n+\n+    @Test\n+    void testIssueBuildAfterTag(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+\n+            var repo = credentials.getHostedRepository();\n+            var repoFolder = tempFolder.path().resolve(\"repo\");\n+            var localRepo = CheckableRepository.init(repoFolder, repo.repositoryType());\n+            credentials.commitLock(localRepo);\n+            localRepo.pushAll(repo.url());\n+\n+            var issueProject = credentials.getIssueProject();\n+            var storageFolder = tempFolder.path().resolve(\"storage\");\n+            var jbsNotifierConfig = JSON.object().put(\"fixversions\", JSON.object())\n+                                        .put(\"buildname\", \"team\");\n+            var notifyBot = testBotBuilder(repo, issueProject, storageFolder, jbsNotifierConfig).create(\"notify\", JSON.object());\n+\n+            \/\/ Initialize history\n+            var current = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.tag(current, \"jdk-16+9\", \"First tag\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(new Branch(repo.url().toString()), \"--tags\", false);\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ Create an issue and commit a fix\n+            var authorEmailAddress = issueProject.issueTracker().currentUser().userName() + \"@openjdk.org\";\n+            var issue = issueProject.createIssue(\"This is an issue\", List.of(\"Indeed\"), Map.of(\"issuetype\", JSON.of(\"Enhancement\")));\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, \"Another line\", issue.id() + \": Fix that issue\", \"Duke\", authorEmailAddress);\n+            localRepo.push(editHash, repo.url(), \"master\");\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ The changeset should be reflected in a comment\n+            var updatedIssue = issueProject.issue(issue.id()).orElseThrow();\n+\n+            var comments = updatedIssue.comments();\n+            assertEquals(1, comments.size());\n+            var comment = comments.get(0);\n+            assertTrue(comment.body().contains(editHash.abbreviate()));\n+\n+            \/\/ As well as a fixVersion and a resolved in build\n+            assertEquals(Set.of(\"0.1\"), fixVersions(updatedIssue));\n+            assertEquals(\"team\", updatedIssue.properties().get(\"customfield_10006\").asString());\n+\n+            \/\/ The issue should be assigned and resolved\n+            assertEquals(RESOLVED, updatedIssue.state());\n+            assertEquals(List.of(issueProject.issueTracker().currentUser()), updatedIssue.assignees());\n+\n+            \/\/ Tag it\n+            localRepo.tag(editHash, \"jdk-16+10\", \"Second tag\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(new Branch(repo.url().toString()), \"--tags\", false);\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ The build should now be updated\n+            updatedIssue = issueProject.issue(issue.id()).orElseThrow();\n+            assertEquals(\"b10\", updatedIssue.properties().get(\"customfield_10006\").asString());\n+        }\n+    }\n+\n@@ -433,1 +589,1 @@\n-            var authorEmailAddress = issueProject.issueTracker().currentUser().userName() + \"@otherjdk.org\";\n+            var authorEmailAddress = issueProject.issueTracker().currentUser().email().orElse(issueProject.issueTracker().currentUser().userName() + \"@otherjdk.org\");\n@@ -591,1 +747,1 @@\n-            var jbsNotifierConfig = JSON.object().put(\"fixversions\", JSON.object().put(\"master\", \"12u14\"));\n+            var jbsNotifierConfig = JSON.object().put(\"fixversions\", JSON.object().put(\"master\", \"12.0.1\"));\n@@ -599,1 +755,1 @@\n-            issue.setProperty(\"fixVersions\", JSON.array().add(\"12-pool\").add(\"tbd13\").add(\"unknown\"));\n+            issue.setProperty(\"fixVersions\", JSON.array().add(\"12-pool\").add(\"tbd_major\").add(\"unknown\"));\n@@ -606,1 +762,1 @@\n-            assertEquals(Set.of(\"12u14\"), fixVersions(issue));\n+            assertEquals(Set.of(\"12.0.1\"), fixVersions(issue));\n@@ -622,1 +778,1 @@\n-            var jbsNotifierConfig = JSON.object().put(\"fixversions\", JSON.object().put(\"master\", \"12u14\"));\n+            var jbsNotifierConfig = JSON.object().put(\"fixversions\", JSON.object().put(\"master\", \"12.0.1\"));\n@@ -630,1 +786,1 @@\n-            issue.setProperty(\"fixVersions\", JSON.array().add(\"12-pool\").add(\"tbd13\").add(\"unknown\"));\n+            issue.setProperty(\"fixVersions\", JSON.array().add(\"12-pool\").add(\"tbd_major\").add(\"unknown\"));\n@@ -637,1 +793,1 @@\n-            assertEquals(Set.of(\"12u14\"), fixVersions(issue));\n+            assertEquals(Set.of(\"12.0.1\"), fixVersions(issue));\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifierTests.java","additions":163,"deletions":7,"binary":false,"changes":170,"status":"modified"},{"patch":"@@ -39,0 +39,2 @@\n+    private HostUser currentUser;\n+\n@@ -113,5 +115,8 @@\n-        var data = request.get(\"myself\").execute();\n-        var user = new HostUser(data.get(\"name\").asString(),\n-                                data.get(\"name\").asString(),\n-                                data.get(\"displayName\").asString());\n-        return user;\n+        if (currentUser == null) {\n+            var data = request.get(\"myself\").execute();\n+            currentUser = new HostUser(data.get(\"name\").asString(),\n+                                       data.get(\"name\").asString(),\n+                                       data.get(\"displayName\").asString(),\n+                                       data.get(\"emailAddress\").asString());\n+        }\n+        return currentUser;\n","filename":"issuetracker\/src\/main\/java\/org\/openjdk\/skara\/issuetracker\/jira\/JiraHost.java","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -537,1 +537,2 @@\n-        var query = JSON.object().put(\"fields\", JSON.object().put(name, encoded.get()));\n+        var customEncoded = jiraProject.encodeCustomFields(name, encoded.get(), properties(), id());\n+        var query = JSON.object().put(\"fields\", JSON.object().put(name, customEncoded));\n","filename":"issuetracker\/src\/main\/java\/org\/openjdk\/skara\/issuetracker\/jira\/JiraIssue.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+    private JSONObject editMetaCache = null;\n@@ -70,0 +71,9 @@\n+    private JSONObject editMeta(String issueId) {\n+        if (editMetaCache == null) {\n+            editMetaCache = request.get(\"issue\/\" + issueId + \"\/editmeta\")\n+                                     .execute()\n+                                     .asObject();\n+        }\n+        return editMetaCache;\n+    }\n+\n@@ -186,1 +196,6 @@\n-            case \"customfield_10008\": \/\/ fall-through\n+            case \"customfield_10006\":\n+                return Optional.of(JSON.of(value.get(\"value\").asString()));\n+            case \"customfield_10008\":\n+                if (value.isString()) {\n+                    return Optional.of(value);\n+                } \/\/ fall-through\n@@ -222,1 +237,1 @@\n-    JSONValue encodeCustomFields(String name, JSONValue value, Map<String, JSONValue> allProperties) {\n+    JSONValue encodeCustomFields(String name, JSONValue value, Map<String, JSONValue> allProperties, String forIssue) {\n@@ -227,0 +242,8 @@\n+        if (name.equals(\"customfield_10006\")) {\n+            var editMeta = editMeta(forIssue);\n+            var valueToId = editMeta.get(\"fields\").get(name).get(\"allowedValues\").stream()\n+                                    .collect(Collectors.toMap(o -> o.get(\"value\").asString(),\n+                                                              o -> o.get(\"id\")));\n+            return JSON.object().put(\"id\", valueToId.get(value.asString()));\n+        }\n+\n@@ -255,0 +278,3 @@\n+        if (!field.contains(\"allowedValues\")) {\n+             return value.get(\"name\");\n+        }\n@@ -327,1 +353,2 @@\n-                                                                                       finalProperties)));\n+                                                                                       finalProperties,\n+                                                                                       null)));\n@@ -336,0 +363,5 @@\n+        var id = data.get(\"key\").asString();\n+        if (id.indexOf('-') < 0) {\n+            id = projectName.toUpperCase() + \"-\" + id;\n+        }\n+        var finalId = id;\n@@ -341,2 +373,2 @@\n-                                                                                           finalProperties)));\n-\n+                                                                                           finalProperties,\n+                                                                                           finalId)));\n@@ -344,4 +376,0 @@\n-            var id = data.get(\"key\").asString();\n-            if (id.indexOf('-') < 0) {\n-                id = projectName.toUpperCase() + \"-\" + id;\n-            }\n@@ -400,1 +428,5 @@\n-        if (user.asArray().size() != 1) {\n+        if (user.asArray().size() == 0) {\n+            log.info(\"No results returned for user query: \" + findBy);\n+            return Optional.empty();\n+        }\n+        if (user.asArray().size() > 1) {\n@@ -408,1 +440,1 @@\n-                                        data.get(\"emailAddresss\").asString()));\n+                                        data.get(\"emailAddress\").asString()));\n","filename":"issuetracker\/src\/main\/java\/org\/openjdk\/skara\/issuetracker\/jira\/JiraProject.java","additions":43,"deletions":11,"binary":false,"changes":54,"status":"modified"}]}