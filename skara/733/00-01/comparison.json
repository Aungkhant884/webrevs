{"files":[{"patch":"@@ -61,2 +61,0 @@\n-        'git-verify-import': 'org.openjdk.skara.cli\/org.openjdk.skara.cli.GitVerifyImport',\n-        'git-openjdk-import': 'org.openjdk.skara.cli\/org.openjdk.skara.cli.GitOpenJDKImport',\n@@ -69,1 +67,0 @@\n-        'hg-openjdk-import': 'org.openjdk.skara.cli\/org.openjdk.skara.cli.HgOpenJDKImport',\n","filename":"cli\/build.gradle","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.cli;\n+\n+import org.openjdk.skara.args.*;\n+import org.openjdk.skara.cli.debug.*;\n+import org.openjdk.skara.proxy.HttpProxy;\n+\n+import java.util.List;\n+\n+public class GitDebug {\n+    public static void main(String[] args) throws Exception {\n+        var commands = List.of(\n+                Default.name(\"help\")\n+                       .helptext(\"show help text\")\n+                       .main(GitDebugHelp::main),\n+                Command.name(\"import-hg\")\n+                       .helptext(\"convert hg to git\")\n+                       .main(GitOpenJDKImport::main),\n+                Command.name(\"import-git\")\n+                       .helptext(\"convert git to hg\")\n+                       .main(GitOpenJDKImport::main),\n+                Command.name(\"verify-import\")\n+                       .helptext(\"verify hg to git\")\n+                       .main(GitVerifyImport::main),\n+                Command.name(\"mlrules\")\n+                       .helptext(\"create and verify jdk mailing list filter rules\")\n+                       .main(GitMlRules::main)\n+        );\n+\n+        HttpProxy.setup();\n+\n+        var parser = new MultiCommandParser(\"git debug\", commands);\n+        var command = parser.parse(args);\n+        command.execute();\n+    }\n+}\n\\ No newline at end of file\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/GitDebug.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"},{"patch":"@@ -32,2 +32,0 @@\n-import java.nio.file.Path;\n-import java.nio.file.Files;\n@@ -35,0 +33,1 @@\n+import java.nio.file.*;\n@@ -192,2 +191,1 @@\n-        commands.put(\"verify-import\", GitVerifyImport::main);\n-        commands.put(\"openjdk-import\", GitOpenJDKImport::main);\n+        commands.put(\"debug\", GitDebug::main);\n@@ -204,1 +202,0 @@\n-        commands.put(\"mlrules\", MLRules::main);\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/GitSkara.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1,110 +0,0 @@\n-\/*\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.skara.cli;\n-\n-import org.openjdk.skara.args.*;\n-import org.openjdk.skara.json.*;\n-import org.openjdk.skara.vcs.*;\n-import org.openjdk.skara.vcs.openjdk.*;\n-import org.openjdk.skara.vcs.openjdk.convert.*;\n-import org.openjdk.skara.version.Version;\n-\n-import java.io.*;\n-import java.nio.file.*;\n-import java.util.*;\n-import static java.util.stream.Collectors.toList;\n-import java.util.function.*;\n-import java.util.logging.*;\n-\n-public class HgOpenJDKImport {\n-    static class ErrorException extends RuntimeException {\n-        ErrorException(String s) {\n-            super(s);\n-        }\n-    }\n-\n-    private static Supplier<ErrorException> error(String fmt, Object... args) {\n-        return () -> new ErrorException(String.format(fmt, args));\n-    }\n-\n-    public static void main(String[] args) throws IOException {\n-        var flags = List.of(\n-            Switch.shortcut(\"\")\n-                  .fullname(\"verbose\")\n-                  .helptext(\"Turn on verbose output\")\n-                  .optional(),\n-            Switch.shortcut(\"\")\n-                  .fullname(\"debug\")\n-                  .helptext(\"Turn on debugging output\")\n-                  .optional(),\n-            Switch.shortcut(\"\")\n-                  .fullname(\"version\")\n-                  .helptext(\"Print the version of this tool\")\n-                  .optional());\n-\n-        var inputs = List.of(\n-            Input.position(0)\n-                 .describe(\"REPO\")\n-                 .singular()\n-                 .required());\n-\n-        var parser = new ArgumentParser(\"hg-openjdk-import\", flags, inputs);\n-        var arguments = parser.parse(args);\n-\n-        if (arguments.contains(\"version\")) {\n-            System.out.println(\"hg-openjdk-import version: \" + Version.fromManifest().orElse(\"unknown\"));\n-            System.exit(0);\n-        }\n-\n-        if (arguments.contains(\"verbose\") || arguments.contains(\"debug\")) {\n-            var level = arguments.contains(\"debug\") ? Level.FINER : Level.FINE;\n-            Logging.setup(level);\n-        }\n-\n-        try {\n-            var cwd = Path.of(\"\").toAbsolutePath();\n-            var hgRepo = Repository.get(cwd)\n-                                   .orElseThrow(error(\"%s is not a hg repository\", cwd));\n-\n-            var gitDir = arguments.at(0).via(Path::of);\n-            var gitRepo = ReadOnlyRepository.get(gitDir)\n-                                            .orElseThrow(error(\"%s is not a git repository\", gitDir));\n-\n-            var converter = new GitToHgConverter();\n-            var marks = converter.convert(gitRepo, hgRepo);\n-\n-            var hgCommits = hgRepo.root().resolve(\".hg\").resolve(\"shamap\");\n-            try (var writer = Files.newBufferedWriter(hgCommits)) {\n-                for (var mark : marks) {\n-                    writer.write(mark.git().hex());\n-                    writer.write(\" \");\n-                    writer.write(mark.hg().hex());\n-                    writer.newLine();\n-                }\n-            }\n-        } catch (ErrorException e) {\n-            System.err.println(e.getMessage());\n-            System.exit(1);\n-        }\n-    }\n-}\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/HgOpenJDKImport.java","additions":0,"deletions":110,"binary":false,"changes":110,"status":"deleted"},{"patch":"@@ -0,0 +1,143 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.cli.debug;\n+\n+import org.openjdk.skara.args.*;\n+import org.openjdk.skara.cli.Logging;\n+import org.openjdk.skara.version.Version;\n+\n+import java.util.*;\n+import java.util.logging.Level;\n+import java.util.stream.Collectors;\n+\n+public class GitDebugHelp {\n+    private static final class Pair<T1, T2> {\n+        T1 e1;\n+        T2 e2;\n+\n+        Pair(T1 e1, T2 e2) {\n+            this.e1 = e1;\n+            this.e2 = e2;\n+        }\n+\n+        static <T3, T4> Pair<T3, T4> of(T3 e1, T4 e2) {\n+            return new Pair<T3, T4>(e1, e2);\n+        }\n+\n+        T1 first() {\n+            return e1;\n+        }\n+\n+        T2 second() {\n+            return e2;\n+        }\n+    }\n+\n+    private static final Map<String, Pair<List<Input>, List<Flag>>> commands = new HashMap<>();\n+\n+    static {\n+        commands.put(\"import-git\", Pair.of(GitOpenJDKImport.inputs, GitOpenJDKImport.flags));\n+        commands.put(\"import-hg\", Pair.of(HgOpenJDKImport.inputs, HgOpenJDKImport.flags));\n+        commands.put(\"verify-import\", Pair.of(GitVerifyImport.inputs, GitVerifyImport.flags));\n+        commands.put(\"mlrules\", Pair.of(GitMlRules.inputs, GitMlRules.flags));\n+    }\n+\n+    private static String describe(List<Input> inputs) {\n+        return inputs.stream().map(Input::toString).collect(Collectors.joining(\" \"));\n+    }\n+\n+    private static<T> TreeSet<T> sorted(Set<T> s) {\n+        return new TreeSet<T>(s);\n+    }\n+\n+    private static void showHelpFor(String command, int indentation) {\n+        var inputs = commands.get(command).first();\n+        var flags = commands.get(command).second();\n+\n+        System.out.println(\" \".repeat(indentation) + \"Usage: git skara debug \" + command + \" \" + describe(inputs));\n+        System.out.println(\" \".repeat(indentation) + \"Flags:\");\n+        ArgumentParser.showFlags(System.out, flags, \" \".repeat(indentation + 2));\n+    }\n+\n+    public static void main(String[] args) {\n+        var flags = List.of(\n+                Switch.shortcut(\"h\")\n+                      .fullname(\"help\")\n+                      .helptext(\"Show help\")\n+                      .optional(),\n+                Switch.shortcut(\"\")\n+                      .fullname(\"verbose\")\n+                      .helptext(\"Turn on verbose output\")\n+                      .optional(),\n+                Switch.shortcut(\"\")\n+                      .fullname(\"debug\")\n+                      .helptext(\"Turn on debugging output\")\n+                      .optional(),\n+                Switch.shortcut(\"\")\n+                      .fullname(\"version\")\n+                      .helptext(\"Print the version of this tool\")\n+                      .optional()\n+        );\n+\n+        var inputs = List.of(\n+                Input.position(0)\n+                     .describe(\"COMMAND\")\n+                     .singular()\n+                     .optional()\n+        );\n+\n+        var parser = new ArgumentParser(\"git skara debug\", flags, inputs);\n+        var arguments = parser.parse(args);\n+        if (arguments.contains(\"version\")) {\n+            System.out.println(\"git skara debug version: \" + Version.fromManifest().orElse(\"unknown\"));\n+            System.exit(0);\n+        }\n+        if (arguments.contains(\"verbose\") || arguments.contains(\"debug\")) {\n+            var level = arguments.contains(\"debug\") ? Level.FINER : Level.FINE;\n+            Logging.setup(level);\n+        }\n+\n+        if (arguments.at(0).isPresent()) {\n+            var command = arguments.at(0).asString();\n+            if (commands.keySet().contains(command)) {\n+                showHelpFor(command, 0);\n+                System.exit(0);\n+            } else {\n+                System.err.println(\"error: unknown sub-command: \" + command);\n+                System.err.println(\"\");\n+                System.err.println(\"Available sub-commands are:\");\n+                for (var subcommand : sorted(commands.keySet())) {\n+                    System.err.println(\"- \" + subcommand);\n+                }\n+                System.exit(1);\n+            }\n+        }\n+\n+        System.out.println(\"git skara debug is used for interacting with Skara debug commands.\");\n+        System.out.println(\"The following commands are available:\");\n+        for (var command : sorted(commands.keySet())) {\n+            System.out.println(\"- \" + command);\n+            showHelpFor(command, 2);\n+        }\n+    }\n+}\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/debug\/GitDebugHelp.java","additions":143,"deletions":0,"binary":false,"changes":143,"status":"added"},{"patch":"@@ -23,1 +23,1 @@\n-package org.openjdk.skara.cli;\n+package org.openjdk.skara.cli.debug;\n@@ -26,0 +26,1 @@\n+import org.openjdk.skara.cli.Logging;\n@@ -45,1 +46,1 @@\n-public class MLRules {\n+public class GitMlRules {\n@@ -55,0 +56,47 @@\n+    static final List<Flag> flags = List.of(\n+            Option.shortcut(\"d\")\n+                  .fullname(\"days\")\n+                  .describe(\"DAYS\")\n+                  .helptext(\"Number of days to look back\")\n+                  .optional(),\n+            Option.shortcut(\"f\")\n+                  .fullname(\"filter\")\n+                  .describe(\"DIVIDER\")\n+                  .helptext(\"Divider for filter threshold\")\n+                  .optional(),\n+            Option.shortcut(\"o\")\n+                  .fullname(\"output\")\n+                  .describe(\"FILE\")\n+                  .helptext(\"Name of file to write output to\")\n+                  .optional(),\n+            Option.shortcut(\"v\")\n+                  .fullname(\"verify\")\n+                  .describe(\"FILE\")\n+                  .helptext(\"Name of file to verify against\")\n+                  .optional(),\n+            Option.shortcut(\"l\")\n+                  .fullname(\"lists\")\n+                  .describe(\"PATTERN\")\n+                  .helptext(\"Regular expression matching mailing lists to include when verifying (default all known)\")\n+                  .optional(),\n+            Switch.shortcut(\"\")\n+                  .fullname(\"verbose\")\n+                  .helptext(\"Turn on verbose output\")\n+                  .optional(),\n+            Switch.shortcut(\"\")\n+                  .fullname(\"debug\")\n+                  .helptext(\"Turn on debugging output\")\n+                  .optional(),\n+            Switch.shortcut(\"\")\n+                  .fullname(\"relaxed\")\n+                  .helptext(\"Use more relaxed matching when searching for reviews\")\n+                  .optional()\n+    );\n+\n+    static final List<Input> inputs = List.of(\n+            Input.position(0)\n+                 .describe(\"repository root or files\")\n+                 .trailing()\n+                 .required()\n+    );\n+\n@@ -77,1 +125,1 @@\n-                                                                      .map(MLRules::archivePageName)\n+                                                                      .map(GitMlRules::archivePageName)\n@@ -493,47 +541,1 @@\n-        var flags = List.of(\n-                Option.shortcut(\"d\")\n-                      .fullname(\"days\")\n-                      .describe(\"DAYS\")\n-                      .helptext(\"Number of days to look back\")\n-                      .optional(),\n-                Option.shortcut(\"f\")\n-                      .fullname(\"filter\")\n-                      .describe(\"DIVIDER\")\n-                      .helptext(\"Divider for filter threshold\")\n-                      .optional(),\n-                Option.shortcut(\"o\")\n-                      .fullname(\"output\")\n-                      .describe(\"FILE\")\n-                      .helptext(\"Name of file to write output to\")\n-                      .optional(),\n-                Option.shortcut(\"v\")\n-                      .fullname(\"verify\")\n-                      .describe(\"FILE\")\n-                      .helptext(\"Name of file to verify against\")\n-                      .optional(),\n-                Option.shortcut(\"l\")\n-                      .fullname(\"lists\")\n-                      .describe(\"PATTERN\")\n-                      .helptext(\"Regular expression matching mailing lists to include when verifying (default all known)\")\n-                      .optional(),\n-                Switch.shortcut(\"\")\n-                      .fullname(\"verbose\")\n-                      .helptext(\"Turn on verbose output\")\n-                      .optional(),\n-                Switch.shortcut(\"\")\n-                      .fullname(\"debug\")\n-                      .helptext(\"Turn on debugging output\")\n-                      .optional(),\n-                Switch.shortcut(\"\")\n-                      .fullname(\"relaxed\")\n-                      .helptext(\"Use more relaxed matching when searching for reviews\")\n-                      .optional()\n-        );\n-\n-        var inputs = List.of(\n-                Input.position(0)\n-                     .describe(\"repository root or files\")\n-                     .trailing()\n-                     .required()\n-        );\n-        var parser = new ArgumentParser(\"mlrules\", flags, inputs);\n+        var parser = new ArgumentParser(\"git skara debug mlrules\", flags, inputs);\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/debug\/GitMlRules.java","additions":52,"deletions":50,"binary":false,"changes":102,"previous_filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/MLRules.java","status":"renamed"},{"patch":"@@ -23,1 +23,1 @@\n-package org.openjdk.skara.cli;\n+package org.openjdk.skara.cli.debug;\n@@ -26,0 +26,1 @@\n+import org.openjdk.skara.cli.Logging;\n@@ -41,11 +42,1 @@\n-    private static void die(Exception e) {\n-        System.err.println(e.getMessage());\n-        System.exit(1);\n-    }\n-\n-    private static Supplier<NoSuchElementException> error(String fmt, Object... args) {\n-        return () -> new NoSuchElementException(String.format(fmt, args));\n-    }\n-\n-    public static void main(String[] args) {\n-        var flags = List.of(\n+    static final List<Flag> flags = List.of(\n@@ -100,1 +91,1 @@\n-        var inputs = List.of(\n+    static final List<Input> inputs = List.of(\n@@ -106,1 +97,11 @@\n-        var parser = new ArgumentParser(\"git-openjdk-import\", flags, inputs);\n+    private static void die(Exception e) {\n+        System.err.println(e.getMessage());\n+        System.exit(1);\n+    }\n+\n+    private static Supplier<NoSuchElementException> error(String fmt, Object... args) {\n+        return () -> new NoSuchElementException(String.format(fmt, args));\n+    }\n+\n+    public static void main(String[] args) {\n+        var parser = new ArgumentParser(\"git skara debug hg-import\", flags, inputs);\n@@ -110,1 +111,1 @@\n-            System.out.println(\"git-openjdk-import version: \" + Version.fromManifest().orElse(\"unknown\"));\n+            System.out.println(\"git skara debug hg-import version: \" + Version.fromManifest().orElse(\"unknown\"));\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/debug\/GitOpenJDKImport.java","additions":16,"deletions":15,"binary":false,"changes":31,"previous_filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/GitOpenJDKImport.java","status":"renamed"},{"patch":"@@ -23,1 +23,1 @@\n-package org.openjdk.skara.cli;\n+package org.openjdk.skara.cli.debug;\n@@ -35,0 +35,16 @@\n+    static final List<Flag> flags = List.of(\n+            Switch.shortcut(\"\")\n+                  .fullname(\"verbose\")\n+                  .helptext(\"Turn on verbose output\")\n+                  .optional(),\n+            Switch.shortcut(\"\")\n+                  .fullname(\"version\")\n+                  .helptext(\"Print the version of this tool\")\n+                  .optional());\n+\n+    static final List<Input> inputs = List.of(\n+            Input.position(0)\n+                 .describe(\"hg repository\")\n+                 .singular()\n+                 .required());\n+\n@@ -180,9 +196,0 @@\n-        var flags = List.of(\n-            Switch.shortcut(\"\")\n-                  .fullname(\"verbose\")\n-                  .helptext(\"Turn on verbose output\")\n-                  .optional(),\n-            Switch.shortcut(\"\")\n-                  .fullname(\"version\")\n-                  .helptext(\"Print the version of this tool\")\n-                  .optional());\n@@ -190,5 +197,0 @@\n-        var inputs = List.of(\n-                Input.position(0)\n-                     .describe(\"hg repository\")\n-                     .singular()\n-                     .required());\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/debug\/GitVerifyImport.java","additions":17,"deletions":15,"binary":false,"changes":32,"previous_filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/GitVerifyImport.java","status":"renamed"},{"patch":"@@ -0,0 +1,108 @@\n+\/*\n+ * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.cli.debug;\n+\n+import org.openjdk.skara.args.*;\n+import org.openjdk.skara.cli.Logging;\n+import org.openjdk.skara.vcs.*;\n+import org.openjdk.skara.vcs.openjdk.convert.GitToHgConverter;\n+import org.openjdk.skara.version.Version;\n+\n+import java.io.IOException;\n+import java.nio.file.*;\n+import java.util.List;\n+import java.util.function.Supplier;\n+import java.util.logging.Level;\n+\n+public class HgOpenJDKImport {\n+    static final List<Flag> flags = List.of(\n+            Switch.shortcut(\"\")\n+                  .fullname(\"verbose\")\n+                  .helptext(\"Turn on verbose output\")\n+                  .optional(),\n+            Switch.shortcut(\"\")\n+                  .fullname(\"debug\")\n+                  .helptext(\"Turn on debugging output\")\n+                  .optional(),\n+            Switch.shortcut(\"\")\n+                  .fullname(\"version\")\n+                  .helptext(\"Print the version of this tool\")\n+                  .optional());\n+\n+    static final List<Input> inputs = List.of(\n+            Input.position(0)\n+                 .describe(\"REPO\")\n+                 .singular()\n+                 .required());\n+\n+    static class ErrorException extends RuntimeException {\n+        ErrorException(String s) {\n+            super(s);\n+        }\n+    }\n+\n+    private static Supplier<ErrorException> error(String fmt, Object... args) {\n+        return () -> new ErrorException(String.format(fmt, args));\n+    }\n+\n+    public static void main(String[] args) throws IOException {\n+        var parser = new ArgumentParser(\"git skara debug git-import\", flags, inputs);\n+        var arguments = parser.parse(args);\n+\n+        if (arguments.contains(\"version\")) {\n+            System.out.println(\"git skara debug git-import version: \" + Version.fromManifest().orElse(\"unknown\"));\n+            System.exit(0);\n+        }\n+\n+        if (arguments.contains(\"verbose\") || arguments.contains(\"debug\")) {\n+            var level = arguments.contains(\"debug\") ? Level.FINER : Level.FINE;\n+            Logging.setup(level);\n+        }\n+\n+        try {\n+            var cwd = Path.of(\"\").toAbsolutePath();\n+            var hgRepo = Repository.get(cwd)\n+                                   .orElseThrow(error(\"%s is not a hg repository\", cwd));\n+\n+            var gitDir = arguments.at(0).via(Path::of);\n+            var gitRepo = ReadOnlyRepository.get(gitDir)\n+                                            .orElseThrow(error(\"%s is not a git repository\", gitDir));\n+\n+            var converter = new GitToHgConverter();\n+            var marks = converter.convert(gitRepo, hgRepo);\n+\n+            var hgCommits = hgRepo.root().resolve(\".hg\").resolve(\"shamap\");\n+            try (var writer = Files.newBufferedWriter(hgCommits)) {\n+                for (var mark : marks) {\n+                    writer.write(mark.git().hex());\n+                    writer.write(\" \");\n+                    writer.write(mark.hg().hex());\n+                    writer.newLine();\n+                }\n+            }\n+        } catch (ErrorException e) {\n+            System.err.println(e.getMessage());\n+            System.exit(1);\n+        }\n+    }\n+}\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/debug\/HgOpenJDKImport.java","additions":108,"deletions":0,"binary":false,"changes":108,"status":"added"},{"patch":"@@ -1,91 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.skara.cli;\n-\n-import org.junit.jupiter.api.Test;\n-\n-import java.util.*;\n-\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-\n-public class TestMLRules {\n-    @Test\n-    void collapseEquals() {\n-        assertEquals(Map.of(\"\", List.of(\"v1\")),\n-                     MLRules.stripDuplicatePrefixes(Map.of(\"k1\", List.of(\"v1\"))));\n-    }\n-\n-    @Test\n-    void collapseSameList() {\n-        assertEquals(Map.of(\"\", List.of(\"v1\")),\n-                     MLRules.stripDuplicatePrefixes(Map.of(\"k1a\", List.of(\"v1\"),\n-                                                           \"k1b\", List.of(\"v1\"))));\n-    }\n-\n-    @Test\n-    void collapseDifferentList() {\n-        assertEquals(Map.of(\"k1a\", List.of(\"v1\"),\n-                            \"k1b\", List.of(\"v2\")),\n-                     MLRules.stripDuplicatePrefixes(Map.of(\"k1a\", List.of(\"v1\"),\n-                                                           \"k1b\", List.of(\"v2\"))));\n-    }\n-\n-    @Test\n-    void collapseMultiple() {\n-        assertEquals(Map.of(\"\", List.of(\"v1\")),\n-                     MLRules.stripDuplicatePrefixes(Map.of(\"k1a\", List.of(\"v1\"),\n-                                                           \"k1b\", List.of(\"v1\"),\n-                                                           \"k2bb\", List.of(\"v1\"))));\n-\n-    }\n-\n-    @Test\n-    void collapseMultiple2() {\n-        assertEquals(Map.of(\"\", List.of(\"v1\")),\n-                     MLRules.stripDuplicatePrefixes(Map.of(\"k1a\", List.of(\"v1\"),\n-                                                           \"k1b\", List.of(\"v1\"),\n-                                                           \"k2bb\", List.of(\"v1\"),\n-                                                           \"k4\", List.of(\"v1\"))));\n-\n-    }\n-\n-    @Test\n-    void collapseSingle() {\n-        assertEquals(Map.of(\"k1\/a\", List.of(\"v1\"),\n-                            \"k1\/b\", List.of(\"v2\")),\n-                     MLRules.stripDuplicatePrefixes(Map.of(\"k1\/a\/a\", List.of(\"v1\"),\n-                                                           \"k1\/b\/b\", List.of(\"v2\"))));\n-\n-    }\n-\n-    @Test\n-    void collapseSingle2() {\n-        assertEquals(Map.of(\"k\/1\", List.of(\"v1\"),\n-                            \"k\/2a\", List.of(\"v2\")),\n-                     MLRules.stripDuplicatePrefixes(Map.of(\"k\/1\/aa\", List.of(\"v1\"),\n-                                                           \"k\/1\/bb\", List.of(\"v1\"),\n-                                                           \"k\/2a\", List.of(\"v2\"))));\n-\n-    }\n-\n-}\n","filename":"cli\/src\/test\/java\/org\/openjdk\/skara\/cli\/TestMLRules.java","additions":0,"deletions":91,"binary":false,"changes":91,"status":"deleted"},{"patch":"@@ -0,0 +1,91 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.cli.debug;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.*;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class TestGitMlRules {\n+    @Test\n+    void collapseEquals() {\n+        assertEquals(Map.of(\"\", List.of(\"v1\")),\n+                     GitMlRules.stripDuplicatePrefixes(Map.of(\"k1\", List.of(\"v1\"))));\n+    }\n+\n+    @Test\n+    void collapseSameList() {\n+        assertEquals(Map.of(\"\", List.of(\"v1\")),\n+                     GitMlRules.stripDuplicatePrefixes(Map.of(\"k1a\", List.of(\"v1\"),\n+                                                              \"k1b\", List.of(\"v1\"))));\n+    }\n+\n+    @Test\n+    void collapseDifferentList() {\n+        assertEquals(Map.of(\"k1a\", List.of(\"v1\"),\n+                            \"k1b\", List.of(\"v2\")),\n+                     GitMlRules.stripDuplicatePrefixes(Map.of(\"k1a\", List.of(\"v1\"),\n+                                                              \"k1b\", List.of(\"v2\"))));\n+    }\n+\n+    @Test\n+    void collapseMultiple() {\n+        assertEquals(Map.of(\"\", List.of(\"v1\")),\n+                     GitMlRules.stripDuplicatePrefixes(Map.of(\"k1a\", List.of(\"v1\"),\n+                                                              \"k1b\", List.of(\"v1\"),\n+                                                              \"k2bb\", List.of(\"v1\"))));\n+\n+    }\n+\n+    @Test\n+    void collapseMultiple2() {\n+        assertEquals(Map.of(\"\", List.of(\"v1\")),\n+                     GitMlRules.stripDuplicatePrefixes(Map.of(\"k1a\", List.of(\"v1\"),\n+                                                              \"k1b\", List.of(\"v1\"),\n+                                                              \"k2bb\", List.of(\"v1\"),\n+                                                              \"k4\", List.of(\"v1\"))));\n+\n+    }\n+\n+    @Test\n+    void collapseSingle() {\n+        assertEquals(Map.of(\"k1\/a\", List.of(\"v1\"),\n+                            \"k1\/b\", List.of(\"v2\")),\n+                     GitMlRules.stripDuplicatePrefixes(Map.of(\"k1\/a\/a\", List.of(\"v1\"),\n+                                                              \"k1\/b\/b\", List.of(\"v2\"))));\n+\n+    }\n+\n+    @Test\n+    void collapseSingle2() {\n+        assertEquals(Map.of(\"k\/1\", List.of(\"v1\"),\n+                            \"k\/2a\", List.of(\"v2\")),\n+                     GitMlRules.stripDuplicatePrefixes(Map.of(\"k\/1\/aa\", List.of(\"v1\"),\n+                                                              \"k\/1\/bb\", List.of(\"v1\"),\n+                                                              \"k\/2a\", List.of(\"v2\"))));\n+\n+    }\n+\n+}\n","filename":"cli\/src\/test\/java\/org\/openjdk\/skara\/cli\/debug\/TestGitMlRules.java","additions":91,"deletions":0,"binary":false,"changes":91,"status":"added"}]}