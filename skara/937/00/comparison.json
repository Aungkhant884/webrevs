{"files":[{"patch":"@@ -2177,3 +2177,0 @@\n-            if (author.forge().supportsReviewBody()) {\n-                assertEquals(1, archiveContainsCount(archiveFolder.path(), \"Reason 1\"));\n-            }\n@@ -2190,3 +2187,0 @@\n-            if (author.forge().supportsReviewBody()) {\n-                assertEquals(1, archiveContainsCount(archiveFolder.path(), \"Reason 2\"));\n-            }\n@@ -2204,3 +2198,0 @@\n-            if (author.forge().supportsReviewBody()) {\n-                assertEquals(1, archiveContainsCount(archiveFolder.path(), \"Reason 3\"));\n-            }\n","filename":"bots\/mlbridge\/src\/test\/java\/org\/openjdk\/skara\/bots\/mlbridge\/MailingListBridgeBotTests.java","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -672,12 +672,0 @@\n-    private void updateReviewedMessages(List<Comment> comments, List<Review> reviews) {\n-        var reviewTracker = new ReviewTracker(comments, reviews);\n-\n-        for (var added : reviewTracker.newReviews().entrySet()) {\n-            var body = added.getValue() + \"\\n\" +\n-                    \"This PR has been reviewed by \" +\n-                    formatReviewer(added.getKey().reviewer()) + \" - \" +\n-                    verdictToString(added.getKey().verdict()) + \".\";\n-            pr.addComment(body);\n-        }\n-    }\n-\n@@ -1001,5 +989,0 @@\n-            \/\/ Post \/ update approval messages (only needed if the review itself can't contain a body)\n-            if (!pr.repository().forge().supportsReviewBody()) {\n-                updateReviewedMessages(comments, allReviews);\n-            }\n-\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":0,"deletions":17,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -1,63 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.skara.bots.pr;\n-\n-import org.openjdk.skara.forge.Review;\n-import org.openjdk.skara.issuetracker.Comment;\n-\n-import java.util.*;\n-import java.util.regex.Pattern;\n-\n-class ReviewTracker {\n-    private final String reviewMarker = \"<!-- Review id marker (%d) -->\";\n-    private final Pattern reviewMarkerPattern = Pattern.compile(\n-            \"<!-- Review id marker \\\\((\\\\d+)\\\\) -->\");\n-\n-    private final Map<Review, String> newComments = new HashMap<>();\n-\n-    ReviewTracker(List<Comment> comments, List<Review> reviews) {\n-        var notified = new HashSet<Integer>();\n-\n-        \/\/ Calculate current state\n-        for (var comment : comments) {\n-            var reviewMarkerMatcher = reviewMarkerPattern.matcher(comment.body());\n-\n-            if (reviewMarkerMatcher.find()) {\n-                var reviewId = Integer.parseInt(reviewMarkerMatcher.group(1));\n-                notified.add(reviewId);\n-            }\n-        }\n-\n-        \/\/ Find all reviews without a comment\n-        for (var review : reviews) {\n-            \/\/ Not notified yet\n-            if (!notified.contains(review.id())) {\n-                newComments.put(review, String.format(reviewMarker, review.id()));\n-            }\n-        }\n-    }\n-\n-    Map<Review, String> newReviews() {\n-        return newComments;\n-    }\n-}\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/ReviewTracker.java","additions":0,"deletions":63,"binary":false,"changes":63,"status":"deleted"},{"patch":"@@ -40,1 +40,0 @@\n-import static org.junit.jupiter.api.Assumptions.assumeTrue;\n@@ -385,64 +384,0 @@\n-    @Test\n-    void individualReviewComments(TestInfo testInfo) throws IOException {\n-        try (var credentials = new HostCredentials(testInfo);\n-             var tempFolder = new TemporaryDirectory()) {\n-            var author = credentials.getHostedRepository();\n-            var reviewer = credentials.getHostedRepository();\n-\n-            \/\/ This test is only relevant on hosts not supporting proper review comment bodies\n-            assumeTrue(!author.forge().supportsReviewBody());\n-\n-            var censusBuilder = credentials.getCensusBuilder()\n-                                           .addAuthor(author.forge().currentUser().id())\n-                                           .addReviewer(reviewer.forge().currentUser().id());\n-            var checkBot = PullRequestBot.newBuilder().repo(author).censusRepo(censusBuilder.build()).build();\n-\n-            \/\/ Populate the projects repository\n-            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n-            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n-            localRepo.push(masterHash, author.url(), \"master\", true);\n-\n-            \/\/ Make a change with a corresponding PR\n-            var editHash = CheckableRepository.appendAndCommit(localRepo);\n-            localRepo.push(editHash, author.url(), \"refs\/heads\/edit\", true);\n-            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"This is a pull request\");\n-\n-            \/\/ Check the status\n-            TestBotRunner.runPeriodicItems(checkBot);\n-            var comments = pr.comments();\n-            var commentCount = comments.size();\n-\n-            \/\/ Approve it as another user\n-            var approvalPr = reviewer.pullRequest(pr.id());\n-            approvalPr.addReview(Review.Verdict.APPROVED, \"Approved\");\n-\n-            \/\/ Check the status again\n-            TestBotRunner.runPeriodicItems(checkBot);\n-\n-            \/\/ There should now be two additional comments\n-            comments = pr.comments();\n-            assertEquals(commentCount + 2, comments.size());\n-            var comment = comments.get(commentCount);\n-            assertTrue(comment.body().contains(reviewer.forge().currentUser().username()));\n-            assertTrue(comment.body().contains(\"approved\"));\n-\n-            \/\/ Drop the review\n-            approvalPr.addReview(Review.Verdict.NONE, \"Unreviewed\");\n-\n-            \/\/ Check the status again\n-            TestBotRunner.runPeriodicItems(checkBot);\n-\n-            \/\/ There should now be yet another comment\n-            comments = pr.comments();\n-            assertEquals(commentCount + 3, comments.size());\n-            comment = comments.get(commentCount + 2);\n-            assertTrue(comment.body().contains(reviewer.forge().currentUser().username()));\n-            assertTrue(comment.body().contains(\"comment\"));\n-\n-            \/\/ No changes should not generate additional comments\n-            TestBotRunner.runPeriodicItems(checkBot);\n-            comments = pr.comments();\n-            assertEquals(commentCount + 3, comments.size());\n-        }\n-    }\n-\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CheckTests.java","additions":0,"deletions":65,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -65,5 +65,0 @@\n-    @Override\n-    public boolean supportsReviewBody() {\n-        return false;\n-    }\n-\n","filename":"bots\/tester\/src\/test\/java\/org\/openjdk\/skara\/bots\/tester\/InMemoryHost.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-    boolean supportsReviewBody();\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/Forge.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,2 +25,0 @@\n-import org.openjdk.skara.forge.gitlab.GitLabMergeRequest;\n-\n@@ -36,5 +34,0 @@\n-        \/\/ GitLab CE does not update this field on events such as adding an award\n-        if (pr instanceof GitLabMergeRequest) {\n-            return true;\n-        }\n-\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/PullRequestUpdateCache.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import org.openjdk.skara.vcs.*;\n+import org.openjdk.skara.vcs.Hash;\n@@ -34,1 +34,0 @@\n-import java.nio.file.Path;\n@@ -37,1 +36,0 @@\n-import java.util.stream.Collectors;\n@@ -40,0 +38,1 @@\n+import java.util.stream.Collectors;\n@@ -328,5 +327,0 @@\n-    @Override\n-    public boolean supportsReviewBody() {\n-        return true;\n-    }\n-\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubHost.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import org.openjdk.skara.vcs.*;\n+import org.openjdk.skara.vcs.Hash;\n@@ -34,1 +34,0 @@\n-import java.nio.file.Path;\n@@ -36,1 +35,0 @@\n-import java.util.stream.Collectors;\n@@ -38,1 +36,1 @@\n-import java.time.ZonedDateTime;\n+import java.util.stream.Collectors;\n@@ -189,6 +187,0 @@\n-    @Override\n-    public boolean supportsReviewBody() {\n-        \/\/ GitLab CE does not support this\n-        return false;\n-    }\n-\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabHost.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -107,1 +107,1 @@\n-        return request.get(\"award_emoji\").execute().stream()\n+        return request.get(\"notes\").execute().stream()\n@@ -109,3 +109,2 @@\n-                      .filter(obj -> obj.get(\"name\").asString().equals(\"thumbsup\") ||\n-                              obj.get(\"name\").asString().equals(\"thumbsdown\") ||\n-                              obj.get(\"name\").asString().equals(\"question\"))\n+                      .filter(obj -> obj.get(\"system\").asBoolean())\n+                      .filter(obj -> obj.get(\"body\").contains(\"approved this merge request\"))\n@@ -113,15 +112,6 @@\n-                          var reviewer = repository.forge().user(obj.get(\"user\").get(\"username\").asString());\n-                          Review.Verdict verdict;\n-                          switch (obj.get(\"name\").asString()) {\n-                              case \"thumbsup\":\n-                                  verdict = Review.Verdict.APPROVED;\n-                                  break;\n-                              case \"thumbsdown\":\n-                                  verdict = Review.Verdict.DISAPPROVED;\n-                                  break;\n-                              default:\n-                                  verdict = Review.Verdict.NONE;\n-                                  break;\n-                          }\n-\n-                          var createdAt = ZonedDateTime.parse(obj.get(\"updated_at\").asString());\n+                          var reviewerObj = obj.get(\"author\").asObject();\n+                          var reviewer = HostUser.create(reviewerObj.get(\"id\").asInt(),\n+                                                         reviewerObj.get(\"username\").asString(),\n+                                                         reviewerObj.get(\"name\").asString());\n+                          var verdict = obj.get(\"body\").contains(\"unapproved\") ? Review.Verdict.NONE : Review.Verdict.APPROVED;\n+                          var createdAt = ZonedDateTime.parse(obj.get(\"created_at\").asString());\n@@ -137,1 +127,2 @@\n-                          return new Review(createdAt, reviewer.get(), verdict, hash, id, null);\n+                          return new Review(createdAt, reviewer, verdict, hash, id, null);\n+\n@@ -144,24 +135,4 @@\n-        \/\/ Remove any previous awards\n-        var awards = request.get(\"award_emoji\").execute().stream()\n-                            .map(JSONValue::asObject)\n-                            .filter(obj -> obj.get(\"name\").asString().equals(\"thumbsup\") ||\n-                                    obj.get(\"name\").asString().equals(\"thumbsdown\") ||\n-                                    obj.get(\"name\").asString().equals(\"question\"))\n-                            .filter(obj -> obj.get(\"user\").get(\"username\").asString().equals(repository.forge().currentUser().username()))\n-                            .map(obj -> obj.get(\"id\").toString())\n-                            .collect(Collectors.toList());\n-        for (var award : awards) {\n-            request.delete(\"award_emoji\/\" + award).execute();\n-        }\n-\n-        String award;\n-        switch (verdict) {\n-            case APPROVED:\n-                award = \"thumbsup\";\n-                break;\n-            case DISAPPROVED:\n-                award = \"thumbsdown\";\n-                break;\n-            default:\n-                award = \"question\";\n-                break;\n+        if (verdict == Review.Verdict.APPROVED) {\n+            request.post(\"approve\").execute();\n+        } else {\n+            request.post(\"unapprove\").execute();\n@@ -169,3 +140,0 @@\n-        request.post(\"award_emoji\")\n-               .body(\"name\", award)\n-               .execute();\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabMergeRequest.java","additions":15,"deletions":47,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import org.openjdk.skara.host.*;\n+import org.openjdk.skara.host.HostUser;\n@@ -34,2 +34,1 @@\n-import java.nio.file.*;\n-import java.net.URI;\n+import java.nio.file.Files;\n@@ -152,5 +151,0 @@\n-    @Override\n-    public boolean supportsReviewBody() {\n-        return true;\n-    }\n-\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestHost.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"}]}