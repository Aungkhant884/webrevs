{"files":[{"patch":"@@ -49,1 +49,2 @@\n-            Map.entry(\"backport\", new BackportCommand())\n+            Map.entry(\"backport\", new BackportCommand()),\n+            Map.entry(\"tag\", new TagCommand())\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CommitCommandWorkItem.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,120 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bots.pr;\n+\n+import org.openjdk.skara.forge.HostedCommit;\n+import org.openjdk.skara.forge.PullRequest;\n+import org.openjdk.skara.issuetracker.Comment;\n+import org.openjdk.skara.vcs.*;\n+import org.openjdk.skara.vcs.openjdk.CommitMessageParsers;\n+import org.openjdk.skara.jcheck.JCheckConfiguration;\n+\n+import java.io.PrintWriter;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.time.format.DateTimeFormatter;\n+\n+public class TagCommand implements CommandHandler {\n+    private void showHelp(PrintWriter reply) {\n+        reply.println(\"Usage: `\/tag <name>`\");\n+    }\n+\n+    @Override\n+    public String description() {\n+        return \"Create a tag for the given commit\";\n+    }\n+\n+    @Override\n+    public boolean allowedInCommit() {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean allowedInPullRequest() {\n+        return false;\n+    }\n+\n+    @Override\n+    public void handle(PullRequestBot bot, HostedCommit commit, CensusInstance censusInstance, Path scratchPath, CommandInvocation command, List<Comment> allComments, PrintWriter reply) {\n+        try {\n+            var username = command.user().username();\n+            if (censusInstance.contributor(command.user()).isEmpty()) {\n+                reply.println(\"@\" + username + \" only OpenJDK [contributors](https:\/\/openjdk.java.net\/bylaws#contributor) can use the `\/tag` command.\");\n+                return;\n+            }\n+            if (!bot.integrators().contains(username)) {\n+                reply.println(\"@\" + username + \" only integrators for this repository are allowed to use the `\/tag` command.\");\n+                return;\n+            }\n+\n+            var args = command.args();\n+            if (args.isBlank()) {\n+                showHelp(reply);\n+                return;\n+            }\n+\n+            var parts = args.split(\" \");\n+            if (parts.length > 1) {\n+                showHelp(reply);\n+                return;\n+            }\n+            var tagName = parts[0];\n+\n+            var localRepoDir = scratchPath.resolve(\"tag-command\")\n+                                          .resolve(bot.repo().name());\n+            var localRepo = bot.hostedRepositoryPool()\n+                               .orElseThrow(() -> new IllegalStateException(\"Missing repository pool for PR bot\"))\n+                               .materialize(bot.repo(), localRepoDir);\n+\n+            var existingTagNames = localRepo.tags().stream().map(Tag::name).collect(Collectors.toSet());\n+            if (existingTagNames.contains(tagName)) {\n+                var hash = localRepo.resolve(tagName).orElseThrow(() ->\n+                        new IllegalStateException(\"Cannot resolve tag with name \" + tagName + \" in repo \" + bot.repo().name()));\n+                var hashUrl = bot.repo().webUrl(hash);\n+                reply.println(\"@\" + username + \" a tag with name `\" + tagName + \"` already exists that refers to commit [\" + hash.abbreviate() + \"](\" + hashUrl + \"].\");\n+                return;\n+            }\n+\n+            var jcheckConf = JCheckConfiguration.from(localRepo, commit.hash());\n+            var tagPattern = jcheckConf.isPresent() ? jcheckConf.get().repository().tags() : null;\n+            if (tagPattern != null && !tagName.matches(tagPattern)) {\n+                reply.println(\"@\" + username + \" the given tag name `\" + tagName + \"` is not of the form `\" + tagPattern + \"`.\");\n+                return;\n+            }\n+\n+            var domain = censusInstance.configuration().census().domain();\n+            var contributor = censusInstance.contributor(command.user()).orElseThrow();\n+            var email = contributor.username() + \"@\" + domain;\n+            var message = \"Added tag \" + tagName + \" for changeset \" + commit.hash().abbreviate();\n+            var tag = localRepo.tag(commit.hash(), tagName, message, contributor.username(), email);\n+            localRepo.push(tag, bot.repo().url(), false);\n+            reply.println(\"@\" + username + \" the tag [\" + tag.name() + \"](\" + bot.repo().webUrl(tag) + \") was successfully created.\");\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+}\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/TagCommand.java","additions":120,"deletions":0,"binary":false,"changes":120,"status":"added"},{"patch":"@@ -0,0 +1,304 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bots.pr;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInfo;\n+import org.openjdk.skara.issuetracker.Issue;\n+import org.openjdk.skara.test.*;\n+import org.openjdk.skara.vcs.Tag;\n+import org.openjdk.skara.vcs.Repository;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Files;\n+import java.nio.file.StandardOpenOption;\n+import java.util.*;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class TagCommitCommandTests {\n+    @Test\n+    void simple(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                                           .addAuthor(author.forge().currentUser().id())\n+                                           .addReviewer(reviewer.forge().currentUser().id());\n+            var seedFolder = tempFolder.path().resolve(\"seed\");\n+            var bot = PullRequestBot.newBuilder()\n+                                    .repo(author)\n+                                    .integrators(Set.of(author.forge().currentUser().username()))\n+                                    .censusRepo(censusBuilder.build())\n+                                    .censusLink(\"https:\/\/census.com\/{{contributor}}-profile\")\n+                                    .seedStorage(seedFolder)\n+                                    .forks(Map.of(author.name(), author))\n+                                    .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Add a tag command\n+            author.addCommitComment(masterHash, \"\/tag v1.0\");\n+            TestBotRunner.runPeriodicItems(bot);\n+\n+            var recentCommitComments = author.recentCommitComments();\n+            assertEquals(2, recentCommitComments.size());\n+            var botReply = recentCommitComments.get(0);\n+            assertTrue(botReply.body().contains(\"tag\"));\n+            assertTrue(botReply.body().contains(\"was successfully created\"));\n+\n+            var localAuthorRepoDir = tempFolder.path().resolve(\"author\");\n+            var localAuthorRepo = Repository.clone(author.url(), localAuthorRepoDir);\n+            var tags = localAuthorRepo.tags();\n+            assertEquals(List.of(new Tag(\"v1.0\")), tags);\n+        }\n+    }\n+\n+    @Test\n+    void missingTagName(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                                           .addAuthor(author.forge().currentUser().id())\n+                                           .addReviewer(reviewer.forge().currentUser().id());\n+            var seedFolder = tempFolder.path().resolve(\"seed\");\n+            var bot = PullRequestBot.newBuilder()\n+                                    .repo(author)\n+                                    .integrators(Set.of(author.forge().currentUser().username()))\n+                                    .censusRepo(censusBuilder.build())\n+                                    .censusLink(\"https:\/\/census.com\/{{contributor}}-profile\")\n+                                    .seedStorage(seedFolder)\n+                                    .forks(Map.of(author.name(), author))\n+                                    .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Add a tag command\n+            author.addCommitComment(masterHash, \"\/tag\");\n+            TestBotRunner.runPeriodicItems(bot);\n+\n+            var recentCommitComments = author.recentCommitComments();\n+            assertEquals(2, recentCommitComments.size());\n+            var botReply = recentCommitComments.get(0);\n+            assertTrue(botReply.body().contains(\"Usage: `\/tag <name>`\"));\n+\n+            var localAuthorRepoDir = tempFolder.path().resolve(\"author\");\n+            var localAuthorRepo = Repository.clone(author.url(), localAuthorRepoDir);\n+            var tags = localAuthorRepo.tags();\n+            assertEquals(List.of(), tags);\n+        }\n+    }\n+\n+    @Test\n+    void multipleTagNames(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                                           .addAuthor(author.forge().currentUser().id())\n+                                           .addReviewer(reviewer.forge().currentUser().id());\n+            var seedFolder = tempFolder.path().resolve(\"seed\");\n+            var bot = PullRequestBot.newBuilder()\n+                                    .repo(author)\n+                                    .integrators(Set.of(author.forge().currentUser().username()))\n+                                    .censusRepo(censusBuilder.build())\n+                                    .censusLink(\"https:\/\/census.com\/{{contributor}}-profile\")\n+                                    .seedStorage(seedFolder)\n+                                    .forks(Map.of(author.name(), author))\n+                                    .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Add a tag command\n+            author.addCommitComment(masterHash, \"\/tag a b c\");\n+            TestBotRunner.runPeriodicItems(bot);\n+\n+            var recentCommitComments = author.recentCommitComments();\n+            assertEquals(2, recentCommitComments.size());\n+            var botReply = recentCommitComments.get(0);\n+            assertTrue(botReply.body().contains(\"Usage: `\/tag <name>`\"));\n+\n+            var localAuthorRepoDir = tempFolder.path().resolve(\"author\");\n+            var localAuthorRepo = Repository.clone(author.url(), localAuthorRepoDir);\n+            var tags = localAuthorRepo.tags();\n+            assertEquals(List.of(), tags);\n+        }\n+    }\n+\n+    @Test\n+    void existingTag(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                                           .addAuthor(author.forge().currentUser().id())\n+                                           .addReviewer(reviewer.forge().currentUser().id());\n+            var seedFolder = tempFolder.path().resolve(\"seed\");\n+            var bot = PullRequestBot.newBuilder()\n+                                    .repo(author)\n+                                    .integrators(Set.of(author.forge().currentUser().username()))\n+                                    .censusRepo(censusBuilder.build())\n+                                    .censusLink(\"https:\/\/census.com\/{{contributor}}-profile\")\n+                                    .seedStorage(seedFolder)\n+                                    .forks(Map.of(author.name(), author))\n+                                    .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Add a tag command\n+            author.addCommitComment(masterHash, \"\/tag v1.0\");\n+            TestBotRunner.runPeriodicItems(bot);\n+\n+            var recentCommitComments = author.recentCommitComments();\n+            assertEquals(2, recentCommitComments.size());\n+            var botReply = recentCommitComments.get(0);\n+            assertTrue(botReply.body().contains(\"tag\"));\n+            assertTrue(botReply.body().contains(\"was successfully created\"));\n+\n+            var localAuthorRepoDir = tempFolder.path().resolve(\"author\");\n+            var localAuthorRepo = Repository.clone(author.url(), localAuthorRepoDir);\n+            var tags = localAuthorRepo.tags();\n+            assertEquals(List.of(new Tag(\"v1.0\")), tags);\n+\n+            \/\/ Make another commit\n+            var anotherHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(anotherHash, author.url(), \"master\", true);\n+\n+            \/\/ Try to re-create an existing tag\n+            author.addCommitComment(anotherHash, \"\/tag v1.0\");\n+            TestBotRunner.runPeriodicItems(bot);\n+\n+            recentCommitComments = author.recentCommitComments();\n+            assertEquals(4, recentCommitComments.size());\n+            botReply = recentCommitComments.get(0);\n+            assertTrue(botReply.body().contains(\"a tag with name `v1.0` already exists\"));\n+        }\n+    }\n+\n+    @Test\n+    void nonIntegrator(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                                           .addAuthor(author.forge().currentUser().id())\n+                                           .addReviewer(reviewer.forge().currentUser().id());\n+            var seedFolder = tempFolder.path().resolve(\"seed\");\n+            var bot = PullRequestBot.newBuilder()\n+                                    .repo(author)\n+                                    .censusRepo(censusBuilder.build())\n+                                    .censusLink(\"https:\/\/census.com\/{{contributor}}-profile\")\n+                                    .seedStorage(seedFolder)\n+                                    .forks(Map.of(author.name(), author))\n+                                    .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Add a tag command\n+            author.addCommitComment(masterHash, \"\/tag v1.0\");\n+            TestBotRunner.runPeriodicItems(bot);\n+\n+            var recentCommitComments = author.recentCommitComments();\n+            assertEquals(2, recentCommitComments.size());\n+            var botReply = recentCommitComments.get(0);\n+            assertTrue(botReply.body().contains(\"only integrators for this repository are allowed to use the `\/tag` command\"));\n+\n+            var localAuthorRepoDir = tempFolder.path().resolve(\"author\");\n+            var localAuthorRepo = Repository.clone(author.url(), localAuthorRepoDir);\n+            var tags = localAuthorRepo.tags();\n+            assertEquals(List.of(), tags);\n+        }\n+    }\n+\n+    @Test\n+    void nonConformingTag(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                                           .addAuthor(author.forge().currentUser().id())\n+                                           .addReviewer(reviewer.forge().currentUser().id());\n+            var seedFolder = tempFolder.path().resolve(\"seed\");\n+            var bot = PullRequestBot.newBuilder()\n+                                    .repo(author)\n+                                    .integrators(Set.of(author.forge().currentUser().username()))\n+                                    .censusRepo(censusBuilder.build())\n+                                    .censusLink(\"https:\/\/census.com\/{{contributor}}-profile\")\n+                                    .seedStorage(seedFolder)\n+                                    .forks(Map.of(author.name(), author))\n+                                    .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var jcheckConf = localRepo.root().resolve(\".jcheck\").resolve(\"conf\");\n+            Files.write(jcheckConf, List.of(\"[repository]\", \"tags=foo\"), StandardOpenOption.APPEND);\n+            localRepo.add(List.of(Path.of(\".jcheck\", \"conf\")));\n+            localRepo.commit(\"Added tags spec\", \"testauthor\", \"ta@none.none\");\n+            var masterHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Add a tag command\n+            author.addCommitComment(masterHash, \"\/tag bar\");\n+            TestBotRunner.runPeriodicItems(bot);\n+\n+            var recentCommitComments = author.recentCommitComments();\n+            assertEquals(2, recentCommitComments.size());\n+            var botReply = recentCommitComments.get(0);\n+            System.out.println(botReply);\n+            assertTrue(botReply.body().contains(\"the given tag name `bar` is not of the form `foo`\"));\n+\n+            var localAuthorRepoDir = tempFolder.path().resolve(\"author\");\n+            var localAuthorRepo = Repository.clone(author.url(), localAuthorRepoDir);\n+            var tags = localAuthorRepo.tags();\n+            assertEquals(List.of(), tags);\n+        }\n+    }\n+}\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/TagCommitCommandTests.java","additions":304,"deletions":0,"binary":false,"changes":304,"status":"added"}]}