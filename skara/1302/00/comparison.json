{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -739,1 +739,3 @@\n-        var files = request.get(\"pulls\/\" + json.get(\"number\").toString() + \"\/files\").execute();\n+        var files = request.get(\"pulls\/\" + json.get(\"number\").toString() + \"\/files\")\n+                           .param(\"per_page\", \"50\")\n+                           .execute();\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubPullRequest.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -460,0 +460,1 @@\n+                       .param(\"per_page\", \"50\")\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubRepository.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,98 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.forge.github;\n+\n+import org.junit.jupiter.api.*;\n+import org.openjdk.skara.forge.Forge;\n+import org.openjdk.skara.forge.HostedRepository;\n+import org.openjdk.skara.host.Credential;\n+import org.openjdk.skara.network.URIBuilder;\n+import org.openjdk.skara.proxy.HttpProxy;\n+import org.openjdk.skara.test.ManualTestSettings;\n+import org.openjdk.skara.vcs.Diff;\n+import org.openjdk.skara.vcs.DiffComparator;\n+import org.openjdk.skara.vcs.Hash;\n+\n+import java.io.IOException;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+\/**\n+ * To be able to run the tests, you need to remove or comment out the @Disabled annotation first.\n+ *\/\n+@Disabled(\"Manual\")\n+public class GitHubRestApiTests {\n+    private static final String GITHUB_REST_URI = \"https:\/\/github.com\";\n+    Forge githubHost;\n+\n+    @BeforeEach\n+    void setupHost() throws IOException {\n+        HttpProxy.setup();\n+        var settings = ManualTestSettings.loadManualTestSettings();\n+        \/\/ Here use the OAuth2 token. To use a GitHub App, please see ManualForgeTests#gitHubLabels.\n+        var username = settings.getProperty(\"username\");\n+        var token = settings.getProperty(\"token\");\n+        var credential = new Credential(username, token);\n+        var uri = URIBuilder.base(GITHUB_REST_URI).build();\n+        githubHost = new GitHubForgeFactory().create(uri, credential, null);\n+    }\n+\n+    @Test\n+    void testDiffEqual() throws IOException {\n+        var githubRepoOpt = githubHost.repository(\"openjdk\/jfx\");\n+        assumeTrue(githubRepoOpt.isPresent());\n+        var githubRepo = githubRepoOpt.get();\n+\n+        \/\/ Test the files number of a PR\n+        var prDiffLittle = testDiffOfPullRequest(githubRepo, \"756\", 2);\n+        var prDiffMiddle = testDiffOfPullRequest(githubRepo, \"764\", 105);\n+        var prDiffLarge = testDiffOfPullRequest(githubRepo, \"723\", 3000); \/\/ Only 3000 files return\n+\n+        \/\/ Test the file number of a commit\n+        var commitDiffLittle = testDiffOfCommit(githubRepo, new Hash(\"eb7fa5dd1c0911bca15576060691d884d29895a1\"), 2);\n+        var commitDiffMiddle = testDiffOfCommit(githubRepo, new Hash(\"b0f2521219efc1b0d0c45088736d5105712bc2c9\"), 105);\n+        var commitDiffLarge = testDiffOfCommit(githubRepo, new Hash(\"6f28d912024495278c4c35ab054bc2aab480b3e4\"), 3000); \/\/ Only 3000 files return\n+\n+        \/\/ Test whether the diff is equal.\n+        assertTrue(DiffComparator.areFuzzyEqual(commitDiffLittle, prDiffLittle));\n+        assertTrue(DiffComparator.areFuzzyEqual(commitDiffMiddle, prDiffMiddle));\n+        assertTrue(DiffComparator.areFuzzyEqual(commitDiffLarge, prDiffLarge));\n+    }\n+\n+    Diff testDiffOfPullRequest(HostedRepository githubRepo, String prId, int expectedPatchesSize) {\n+        var pr = githubRepo.pullRequest(prId);\n+        var diff = pr.diff();\n+        assertEquals(expectedPatchesSize, diff.patches().size());\n+        return diff;\n+    }\n+\n+    Diff testDiffOfCommit(HostedRepository githubRepo, Hash hash, int expectedPatchesSize) {\n+        var commit = githubRepo.commit(hash);\n+        assumeTrue(commit.isPresent());\n+        assertEquals(1, commit.get().parentDiffs().size());\n+        assertEquals(expectedPatchesSize, commit.get().parentDiffs().get(0).patches().size());\n+        return commit.get().parentDiffs().get(0);\n+    }\n+}\n","filename":"forge\/src\/test\/java\/org\/openjdk\/skara\/forge\/github\/GitHubRestApiTests.java","additions":98,"deletions":0,"binary":false,"changes":98,"status":"added"}]}