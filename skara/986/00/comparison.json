{"files":[{"patch":"@@ -194,12 +194,8 @@\n-                    if (!issues.isEmpty()) {\n-                        var id = issues.get(0).id();\n-                        var issue = bot.issueProject().issue(id);\n-                        if (!issue.isPresent()) {\n-                            var text = \"<!-- backport error -->\\n\" +\n-                                       \":warning: @\" + pr.author().username() + \" the issue `\" + id + \"` from commit \" +\n-                                       \"`\" + hash.hex() + \"` does not exist in project [\" +\n-                                       bot.issueProject().name() + \"](\" + bot.issueProject().webUrl() + \")\";\n-                            pr.addComment(text);\n-                            return List.of();\n-                        }\n-                        pr.setTitle(id + \": \" + issue.get().title());\n+                    var comment = new ArrayList<String>();\n+                    if (issues.isEmpty()) {\n+                        var text = \"<!-- backport error -->\\n\" +\n+                                   \":warning: @\" + pr.author().username() + \" the commit `\" + hash.hex() + \"`\" +\n+                                   \" does not refer to an issue in project [\" +\n+                                   bot.issueProject().name() + \"](\" + bot.issueProject().webUrl() + \").\";\n+                        pr.addComment(text);\n+                        return List.of();\n@@ -208,1 +204,11 @@\n-                    var comment = new ArrayList<String>();\n+                    var id = issues.get(0).id();\n+                    var issue = bot.issueProject().issue(id);\n+                    if (!issue.isPresent()) {\n+                        var text = \"<!-- backport error -->\\n\" +\n+                                   \":warning: @\" + pr.author().username() + \" the issue with id `\" + id + \"` from commit \" +\n+                                   \"`\" + hash.hex() + \"` does not exist in project [\" +\n+                                   bot.issueProject().name() + \"](\" + bot.issueProject().webUrl() + \").\";\n+                        pr.addComment(text);\n+                        return List.of();\n+                    }\n+                    pr.setTitle(id + \": \" + issue.get().title());\n@@ -210,2 +216,2 @@\n-                    for (var issue : issues.subList(1, issues.size())) {\n-                        comment.add(SolvesTracker.setSolvesMarker(issue));\n+                    for (var additionalIssue : issues.subList(1, issues.size())) {\n+                        comment.add(SolvesTracker.setSolvesMarker(additionalIssue));\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckWorkItem.java","additions":21,"deletions":15,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -1151,0 +1151,58 @@\n+\n+    @Test\n+    void badIssueInOriginal(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory();\n+             var pushedFolder = new TemporaryDirectory()) {\n+\n+            var author = credentials.getHostedRepository();\n+            var integrator = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var issues = credentials.getIssueProject();\n+            var censusBuilder = credentials.getCensusBuilder()\n+                                           .addCommitter(author.forge().currentUser().id())\n+                                           .addReviewer(integrator.forge().currentUser().id())\n+                                           .addReviewer(reviewer.forge().currentUser().id());\n+            var bot = PullRequestBot.newBuilder()\n+                                    .repo(integrator)\n+                                    .censusRepo(censusBuilder.build())\n+                                    .issueProject(issues)\n+                                    .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            var releaseBranch = localRepo.branch(masterHash, \"release\");\n+            localRepo.checkout(releaseBranch);\n+            var newFile = localRepo.root().resolve(\"a_new_file.txt\");\n+            Files.writeString(newFile, \"hello\");\n+            localRepo.add(newFile);\n+            var issue1 = credentials.createIssue(issues, \"An issue\");\n+            var issue1Number = issue1.id().split(\"-\")[1];\n+            var originalMessage = issue1Number + \" An issue\\n\" +\n+                                  \"\\n\" +\n+                                  \"Reviewed-by: integrationreviewer2\";\n+            var releaseHash = localRepo.commit(originalMessage, \"integrationcommitter1\", \"integrationcommitter1@openjdk.java.net\");\n+            localRepo.push(releaseHash, author.url(), \"refs\/heads\/release\", true);\n+\n+            \/\/ \"backport\" the new file to the master branch\n+            localRepo.checkout(localRepo.defaultBranch());\n+            var editBranch = localRepo.branch(masterHash, \"edit\");\n+            localRepo.checkout(editBranch);\n+            var newFile2 = localRepo.root().resolve(\"a_new_file.txt\");\n+            Files.writeString(newFile2, \"hello\");\n+            localRepo.add(newFile2);\n+            var editHash = localRepo.commit(\"Backport\", \"duke\", \"duke@openjdk.java.net\");\n+            localRepo.push(editHash, author.url(), \"refs\/heads\/edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"Backport \" + releaseHash.hex());\n+\n+            \/\/ The bot should reply with a backport message\n+            TestBotRunner.runPeriodicItems(bot);\n+            var backportComment = pr.comments().get(0).body();\n+            assertTrue(backportComment.contains(\"<!-- backport error -->\"));\n+            assertTrue(backportComment.contains(\"the commit `\" + releaseHash.hex() + \"` does not refer to an issue\"));\n+            assertFalse(pr.labels().contains(\"backport\"));\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/BackportTests.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"modified"}]}