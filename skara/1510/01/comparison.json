{"files":[{"patch":"@@ -1139,2 +1139,30 @@\n-            if (rebasePossible && PullRequestUtils.isMerge(pr)) {\n-                localRepo.lookup(pr.headHash()).ifPresent(this::updateMergeClean);\n+            List<String> mergeJCheckMessage = new ArrayList<>();\n+\n+            if (PullRequestUtils.isMerge(pr)) {\n+                if (rebasePossible) {\n+                    localRepo.lookup(pr.headHash()).ifPresent(this::updateMergeClean);\n+                }\n+\n+                \/\/ JCheck all commits in \"Merge PR\"\n+                if (workItem.bot.jcheckMerge()) {\n+                    var commits = localRepo.commitMetadata(localRepo.mergeBase(PullRequestUtils.targetHash(localRepo), pr.headHash()), commitHash);\n+                    var commitHashes = commits.stream()\n+                            .map(CommitMetadata::hash)\n+                            .collect(Collectors.toSet());\n+                    commitHashes.remove(pr.headHash());\n+                    for (Hash hash : commitHashes) {\n+                        try {\n+                            PullRequestCheckIssueVisitor visitor = checkablePullRequest.createVisitor(hash);\n+                            checkablePullRequest.executeChecks(hash, censusInstance, visitor, List.of(), hash);\n+                            mergeJCheckMessage.addAll(visitor.messages().stream()\n+                                    .map(StringBuilder::new)\n+                                    .map(e -> e.append(\" (in commit \" + hash.hex() + \")\"))\n+                                    .map(StringBuilder::toString)\n+                                    .toList());\n+                        } catch (Exception e) {\n+                            var message = e.getMessage() + \" (exception thrown when running jcheck with commit \" + hash.hex() + \")\";\n+                            log.warning(message);\n+                            mergeJCheckMessage.add(message);\n+                        }\n+                    }\n+                }\n@@ -1161,1 +1189,1 @@\n-            PullRequestCheckIssueVisitor visitor = checkablePullRequest.createVisitor();\n+            PullRequestCheckIssueVisitor visitor = checkablePullRequest.createVisitor(checkablePullRequest.targetHash());\n@@ -1178,1 +1206,1 @@\n-                        PullRequestCheckIssueVisitor visitor2 = checkablePullRequest.createVisitorUsingHeadHash();\n+                        PullRequestCheckIssueVisitor visitor2 = checkablePullRequest.createVisitor(pr.headHash());\n@@ -1223,0 +1251,1 @@\n+            integrationBlockers.addAll(mergeJCheckMessage);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":33,"deletions":4,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -199,7 +199,2 @@\n-    PullRequestCheckIssueVisitor createVisitor() throws IOException {\n-        var checks = JCheck.checksFor(localRepo, targetHash());\n-        return new PullRequestCheckIssueVisitor(checks);\n-    }\n-\n-    PullRequestCheckIssueVisitor createVisitorUsingHeadHash() throws IOException {\n-        var checks = JCheck.checksFor(localRepo, pr.headHash());\n+    PullRequestCheckIssueVisitor createVisitor(Hash hash) throws IOException {\n+        var checks = JCheck.checksFor(localRepo, hash);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckablePullRequest.java","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -262,1 +262,1 @@\n-        var issues = checkablePr.createVisitor();\n+        var issues = checkablePr.createVisitor(checkablePr.targetHash());\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/IntegrateCommand.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -72,0 +72,1 @@\n+    private final boolean jcheckMerge;\n@@ -86,1 +87,1 @@\n-                   boolean enableMerge, Set<String> mergeSources) {\n+                   boolean enableMerge, Set<String> mergeSources, boolean jcheckMerge) {\n@@ -118,0 +119,1 @@\n+        this.jcheckMerge = jcheckMerge;\n@@ -307,0 +309,4 @@\n+    public boolean jcheckMerge() {\n+        return jcheckMerge;\n+    }\n+\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBot.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -64,0 +64,1 @@\n+    private boolean jcheckMerge = false;\n@@ -224,0 +225,5 @@\n+    public PullRequestBotBuilder jcheckMerge(boolean jcheckMerge) {\n+        this.jcheckMerge = jcheckMerge;\n+        return this;\n+    }\n+\n@@ -232,1 +238,1 @@\n-                                  processPR, processCommit, enableMerge, mergeSources);\n+                                  processPR, processCommit, enableMerge, mergeSources, jcheckMerge);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBotBuilder.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -214,0 +214,3 @@\n+            if (repo.value().contains(\"jcheckMerge\")) {\n+                botBuilder.jcheckMerge(repo.value().get(\"jcheckMerge\").asBoolean());\n+            }\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBotFactory.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1732,0 +1732,62 @@\n+\n+    @Test\n+    void JCheckFailInOneOfTheCommits(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+\n+            var author = credentials.getHostedRepository();\n+            var integrator = credentials.getHostedRepository();\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addCommitter(author.forge().currentUser().id())\n+                    .addReviewer(integrator.forge().currentUser().id());\n+            var mergeBot = PullRequestBot.newBuilder().repo(integrator).censusRepo(censusBuilder.build()).jcheckMerge(true).build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.authenticatedUrl(), \"master\", true);\n+\n+            \/\/ Make more changes in another branch\n+            var otherHash1 = CheckableRepository.appendAndCommit(localRepo, \"First change in other_\/-1.2\",\n+                    \"First other_\/-1.2\");\n+            localRepo.push(otherHash1, author.authenticatedUrl(), \"other_\/-1.2\", true);\n+            var otherHash2 = CheckableRepository.appendAndCommit(localRepo, \"Second change in other_\/-1.2\\n\\r\",\n+                    \"Second other_\/-1.2\\n\\nReviewed-by: integrationreviewer2\");\n+            localRepo.push(otherHash2, author.authenticatedUrl(), \"other_\/-1.2\");\n+\n+            \/\/ Go back to the original master\n+            localRepo.checkout(masterHash, true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var unrelated = Files.writeString(localRepo.root().resolve(\"unrelated.txt\"), \"Unrelated\", StandardCharsets.UTF_8);\n+            localRepo.add(unrelated);\n+            var updatedMaster = localRepo.commit(\"Unrelated\", \"some\", \"some@one\");\n+            localRepo.merge(otherHash2);\n+            localRepo.push(updatedMaster, author.authenticatedUrl(), \"master\");\n+\n+            var mergeHash = localRepo.commit(\"Merge commit\", \"some\", \"some@one\");\n+            localRepo.push(mergeHash, author.authenticatedUrl(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"Merge \" + author.name() + \":other_\/-1.2\");\n+\n+            \/\/ Let the bot check the status\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+\n+            \/\/ There is a merge commit at HEAD, but the merge commit is empty\n+            assertTrue(pr.store().labelNames().contains(\"clean\"));\n+\n+            \/\/ Push it\n+            pr.addComment(\"\/integrate\");\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+\n+            \/\/ The bot should reply with an ok message\n+            var pushed = pr.comments().stream()\n+                    .filter(comment -> comment.body().contains(\"Pushed as commit\"))\n+                    .count();\n+            assertEquals(0, pushed);\n+\n+            assertTrue(pr.store().body().contains(\"Too few reviewers with at least role reviewer found (have 0, need at least 1) (failed when running jcheck with commit \" + otherHash1.hex() + \")\"));\n+            assertTrue(pr.store().body().contains(\"Whitespace errors (failed when running jcheck with commit \" + otherHash2.hex() + \")\"));\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/MergeTests.java","additions":62,"deletions":0,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -124,1 +124,2 @@\n-                          \"processPR\": false\n+                          \"processPR\": false,\n+                          \"jcheckMerge\": true\n@@ -142,1 +143,2 @@\n-                          \"processPR\": false\n+                          \"processPR\": false,\n+                          \"jcheckMerge\": false\n@@ -196,0 +198,1 @@\n+            assertTrue(pullRequestBot0.jcheckMerge());\n@@ -199,0 +202,1 @@\n+            assertFalse(pullRequestBot1.jcheckMerge());\n@@ -203,0 +207,1 @@\n+            assertFalse(pullRequestBot2.jcheckMerge());\n@@ -209,0 +214,1 @@\n+            assertFalse(pullRequestBot3.jcheckMerge());\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBotFactoryTest.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"}]}