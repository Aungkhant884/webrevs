{"files":[{"patch":"@@ -71,1 +71,0 @@\n-        'git-expand': 'org.openjdk.skara.cli\/org.openjdk.skara.cli.GitExpand',\n","filename":"cli\/build.gradle","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,159 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.skara.cli;\n-\n-import org.openjdk.skara.args.*;\n-import org.openjdk.skara.vcs.Commit;\n-import org.openjdk.skara.vcs.ReadOnlyRepository;\n-import org.openjdk.skara.vcs.Repository;\n-import org.openjdk.skara.jcheck.JCheckConfiguration;\n-import org.openjdk.skara.issuetracker.IssueTracker;\n-import org.openjdk.skara.version.Version;\n-\n-import java.io.IOException;\n-import java.nio.file.Path;\n-import java.net.URI;\n-import java.util.regex.Pattern;\n-import java.util.*;\n-import java.util.logging.Level;\n-\n-public class GitExpand {\n-    static final Pattern ISSUE_ID_PATTERN = Pattern.compile(\"([A-Za-z][A-Za-z0-9]+)?-([0-9]+)\");\n-\n-    private static String getOption(String name, Arguments arguments, ReadOnlyRepository repo) throws IOException {\n-        if (arguments.contains(name)) {\n-            return arguments.get(name).asString();\n-        }\n-\n-        var lines = repo.config(\"publish.\" + name);\n-        return lines.size() == 1 ? lines.get(0) : null;\n-    }\n-\n-    private static boolean getSwitch(String name, Arguments arguments, ReadOnlyRepository repo) throws IOException {\n-        if (arguments.contains(name)) {\n-            return true;\n-        }\n-\n-        var lines = repo.config(\"publish.\" + name);\n-        return lines.size() == 1 && lines.get(0).toLowerCase().equals(\"true\");\n-    }\n-\n-    private static Repository repo(Path p) throws IOException {\n-        var repo = Repository.get(p);\n-        if (repo.isEmpty()) {\n-            System.err.println(\"error: no repository found at \" + p.toString());\n-            System.exit(1);\n-        }\n-        return repo.get();\n-    }\n-\n-    private static Commit lookup(ReadOnlyRepository repo, String rev) throws IOException {\n-        var hash = repo.resolve(rev);\n-        if (hash.isEmpty()) {\n-            System.err.println(\"error: could not resolve \" + rev);\n-            System.exit(1);\n-        }\n-        var commit = repo.lookup(hash.get());\n-        if (commit.isEmpty()) {\n-            System.err.println(\"error: could not find commit for hash \" + hash.get());\n-            System.exit(1);\n-        }\n-\n-        return commit.get();\n-    }\n-\n-    public static void main(String[] args) throws IOException, InterruptedException {\n-        var flags = List.of(\n-            Switch.shortcut(\"\")\n-                  .fullname(\"issues\")\n-                  .helptext(\"Expand issues in the commit message\")\n-                  .optional(),\n-            Switch.shortcut(\"\")\n-                  .fullname(\"verbose\")\n-                  .helptext(\"Turn on verbose output\")\n-                  .optional(),\n-            Switch.shortcut(\"\")\n-                  .fullname(\"debug\")\n-                  .helptext(\"Turn on debugging output\")\n-                  .optional(),\n-            Switch.shortcut(\"\")\n-                  .fullname(\"version\")\n-                  .helptext(\"Print the version of this tool\")\n-                  .optional());\n-\n-        var inputs = List.of(\n-            Input.position(0)\n-                 .describe(\"REV\")\n-                 .singular()\n-                 .optional()\n-        );\n-\n-        var parser = new ArgumentParser(\"git-publish\", flags, inputs);\n-        var arguments = parser.parse(args);\n-\n-        if (arguments.contains(\"version\")) {\n-            System.out.println(\"git-expand version: \" + Version.fromManifest().orElse(\"unknown\"));\n-            System.exit(0);\n-        }\n-\n-        if (arguments.contains(\"verbose\") || arguments.contains(\"debug\")) {\n-            var level = arguments.contains(\"debug\") ? Level.FINER : Level.FINE;\n-            Logging.setup(level);\n-        }\n-\n-        var cwd = Path.of(\"\").toAbsolutePath();\n-        var repo = repo(cwd);\n-        var rev = arguments.at(0).orString(\"HEAD\");\n-        var commit = lookup(repo, rev);\n-        var message = commit.message();\n-\n-        var shouldExpandIssues = getSwitch(\"issues\", arguments, repo);\n-        if (shouldExpandIssues) {\n-            var conf = JCheckConfiguration.from(repo, commit.hash());\n-            if (conf.isPresent()) {\n-                var project = conf.get().general().jbs();\n-                var tracker = IssueTracker.from(\"jira\", URI.create(\"https:\/\/bugs.openjdk.java.net\"));\n-\n-                var amended = new ArrayList<String>();\n-                for (var line : message) {\n-                    var m = ISSUE_ID_PATTERN.matcher(line);\n-                    if (m.matches()) {\n-                        var id = m.group(2);\n-                        var issue = tracker.project(project).issue(id);\n-                        if (issue.isPresent()) {\n-                            amended.add(id + \": \" + issue.get().title());\n-                        }\n-                    } else {\n-                        amended.add(line);\n-                    }\n-                }\n-\n-                repo.amend(String.join(\"\\n\", amended));\n-            } else {\n-                System.err.println(\"warning: could not expand issues commit message,\\n\" +\n-                                   \"         no JBS project configured in .jcheck\/conf\");\n-            }\n-        }\n-    }\n-}\n-\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/GitExpand.java","additions":0,"deletions":159,"binary":false,"changes":159,"status":"deleted"}]}