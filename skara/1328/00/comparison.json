{"files":[{"patch":"@@ -35,0 +35,6 @@\n+    protected static final String FORCE_PUSH_MARKER = \"<!-- force-push suggestion -->\";\n+    protected static final String FORCE_PUSH_SUGGESTION= \"\"\"\n+            Please don't rebase and force-push to your branch of this PR because it invalidates previous review comments. \\\n+            To keep track of your changes incrementally, you only need to merge the target branch (optionally), \\\n+            commit your new change and push normally. The bot can squash them as a single commit when integrating.\n+            \"\"\";\n@@ -114,0 +120,14 @@\n+        var lastForcePushTime = pr.lastForcePushTime();\n+        if (lastForcePushTime.isPresent()) {\n+            var lastForcePushSuggestion = pr.comments().stream()\n+                    .filter(comment -> comment.body().contains(FORCE_PUSH_MARKER))\n+                    .reduce((a, b) -> b);\n+            if (lastForcePushSuggestion.isEmpty() || lastForcePushSuggestion.get().createdAt().isBefore(lastForcePushTime.get())) {\n+                log.info(\"Found force-push for \" + describe(pr) + \", adding force-push suggestion\");\n+                pr.addComment(\"@\" + pr.author().username() + \" \" + FORCE_PUSH_SUGGESTION + FORCE_PUSH_MARKER);\n+            }\n+        }\n+    }\n+\n+    private String describe(PullRequest pr) {\n+        return pr.repository().name() + \"#\" + pr.id();\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/prbranch\/PullRequestBranchNotifier.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import java.time.ZonedDateTime;\n@@ -36,0 +37,2 @@\n+import static org.openjdk.skara.bots.notify.prbranch.PullRequestBranchNotifier.FORCE_PUSH_MARKER;\n+import static org.openjdk.skara.bots.notify.prbranch.PullRequestBranchNotifier.FORCE_PUSH_SUGGESTION;\n@@ -298,0 +301,87 @@\n+\n+    @Test\n+    void testForcePush(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var repo = credentials.getHostedRepository();\n+            var repoFolder = tempFolder.path().resolve(\"repo\");\n+            var localRepo = CheckableRepository.init(repoFolder, repo.repositoryType());\n+            var storageFolder = tempFolder.path().resolve(\"storage\");\n+            var notifyBot = testBotBuilder(repo, storageFolder).create(\"notify\", JSON.object());\n+\n+            \/\/ Create a PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, \"Another line\");\n+            localRepo.push(editHash, repo.url(), \"source\", true);\n+            var pr = credentials.createPullRequest(repo, \"master\", \"source\", \"This is a PR\", false);\n+            pr.addLabel(\"rfr\");\n+            pr.addComment(\"initial\");\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ The PR shouldn't have the force-push suggestion comment\n+            assertEquals(1, pr.comments().size());\n+            var lastComment = pr.comments().get(pr.comments().size() - 1);\n+            assertTrue(lastComment.body().contains(\"initial\"));\n+            assertFalse(lastComment.body().contains(FORCE_PUSH_MARKER));\n+            assertFalse(lastComment.body().contains(FORCE_PUSH_SUGGESTION));\n+\n+            \/\/ Normally push.\n+            var updatedHash = CheckableRepository.appendAndCommit(localRepo, \"Normally push\");\n+            localRepo.push(updatedHash, repo.url(), \"source\", false);\n+            pr.addComment(\"Normally push\");\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ The PR shouldn't have the force-push suggestion comment.\n+            assertEquals(2, pr.comments().size());\n+            lastComment = pr.comments().get(pr.comments().size() - 1);\n+            assertTrue(lastComment.body().contains(\"Normally push\"));\n+            assertFalse(lastComment.body().contains(FORCE_PUSH_MARKER));\n+            assertFalse(lastComment.body().contains(FORCE_PUSH_SUGGESTION));\n+\n+            \/\/ Simulate force-push.\n+            updatedHash = CheckableRepository.appendAndCommit(localRepo, \"test force-push\");\n+            localRepo.checkout(editHash);\n+            localRepo.squash(updatedHash);\n+            var forcePushHash = localRepo.commit(\"test force-push\", \"duke\", \"duke@openjdk.java.net\");\n+            localRepo.push(forcePushHash, repo.url(), \"source\", true);\n+            ((TestPullRequest) pr).setLastForcePushTime(ZonedDateTime.now());\n+            pr.addComment(\"Force-push\");\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ The last comment of the PR should be the force-push suggestion comment.\n+            assertEquals(4, pr.comments().size());\n+            lastComment = pr.comments().get(pr.comments().size() - 1);\n+            assertFalse(lastComment.body().contains(\"Force-push\"));\n+            assertTrue(lastComment.body().contains(FORCE_PUSH_MARKER));\n+            assertTrue(lastComment.body().contains(FORCE_PUSH_SUGGESTION));\n+\n+            \/\/ Normally push again.\n+            updatedHash = CheckableRepository.appendAndCommit(localRepo, \"Normally push\");\n+            localRepo.push(updatedHash, repo.url(), \"source\", false);\n+            pr.addComment(\"Normally push again\");\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ The last comment of the PR shouldn't be the force-push suggestion comment.\n+            assertEquals(5, pr.comments().size());\n+            lastComment = pr.comments().get(pr.comments().size() - 1);\n+            assertTrue(lastComment.body().contains(\"Normally push again\"));\n+            assertFalse(lastComment.body().contains(FORCE_PUSH_MARKER));\n+            assertFalse(lastComment.body().contains(FORCE_PUSH_SUGGESTION));\n+\n+            \/\/ Simulate force-push again.\n+            updatedHash = CheckableRepository.appendAndCommit(localRepo, \"test force-push again\");\n+            localRepo.checkout(editHash);\n+            localRepo.squash(updatedHash);\n+            forcePushHash = localRepo.commit(\"test force-push again\", \"duke\", \"duke@openjdk.java.net\");\n+            localRepo.push(forcePushHash, repo.url(), \"source\", true);\n+            ((TestPullRequest) pr).setLastForcePushTime(ZonedDateTime.now());\n+            pr.addComment(\"Force-push again\");\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ The last comment of the PR should be the force-push suggestion comment.\n+            assertEquals(7, pr.comments().size());\n+            lastComment = pr.comments().get(pr.comments().size() - 1);\n+            assertFalse(lastComment.body().contains(\"Force-push again\"));\n+            assertTrue(lastComment.body().contains(FORCE_PUSH_MARKER));\n+            assertTrue(lastComment.body().contains(FORCE_PUSH_SUGGESTION));\n+        }\n+    }\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/prbranch\/PullRequestBranchNotifierTests.java","additions":90,"deletions":0,"binary":false,"changes":90,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -330,0 +330,5 @@\n+\n+    @Override\n+    public Optional<ZonedDateTime> lastForcePushTime() {\n+        return Optional.empty();\n+    }\n","filename":"bots\/tester\/src\/test\/java\/org\/openjdk\/skara\/bots\/tester\/InMemoryPullRequest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -173,0 +173,6 @@\n+\n+    \/**\n+     * Get the last force-push time. If there is no force-push in pull request\n+     * or the restful api doesn't support force-push, return empty.\n+     *\/\n+    Optional<ZonedDateTime> lastForcePushTime();\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/PullRequest.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -768,0 +768,12 @@\n+\n+    @Override\n+    public Optional<ZonedDateTime> lastForcePushTime() {\n+        return request.get(\"issues\/\" + json.get(\"number\").toString() + \"\/timeline\")\n+                      .execute()\n+                      .stream()\n+                      .map(JSONValue::asObject)\n+                      .filter(obj -> obj.contains(\"event\"))\n+                      .filter(obj -> obj.get(\"event\").asString().equals(\"head_ref_force_pushed\"))\n+                      .reduce((a, b) -> b)\n+                      .map(obj -> ZonedDateTime.parse(obj.get(\"created_at\").asString()));\n+    }\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubPullRequest.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -856,0 +856,5 @@\n+\n+    @Override\n+    public Optional<ZonedDateTime> lastForcePushTime() {\n+        return Optional.empty();\n+    }\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabMergeRequest.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -98,0 +98,10 @@\n+\n+    @Test\n+    void testLastForcePushTime() {\n+        var githubRepoOpt = githubHost.repository(\"openjdk\/playground\");\n+        assumeTrue(githubRepoOpt.isPresent());\n+        var githubRepo = githubRepoOpt.get();\n+        var pr = githubRepo.pullRequest(\"96\");\n+        var lastForcePushTime = pr.lastForcePushTime();\n+        assertEquals(\"2022-05-29T10:32:43Z\", lastForcePushTime.get().toString());\n+    }\n","filename":"forge\/src\/test\/java\/org\/openjdk\/skara\/forge\/github\/GitHubRestApiTests.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,1 @@\n+import java.time.ZonedDateTime;\n@@ -37,0 +38,1 @@\n+    ZonedDateTime lastForcePushTime;\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/PullRequestData.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -265,0 +265,9 @@\n+\n+    @Override\n+    public Optional<ZonedDateTime> lastForcePushTime() {\n+        return Optional.ofNullable(data.lastForcePushTime);\n+    }\n+\n+    public void setLastForcePushTime(ZonedDateTime lastForcePushTime) {\n+        data.lastForcePushTime = lastForcePushTime;\n+    }\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestPullRequest.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"}]}