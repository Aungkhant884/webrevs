{"files":[{"patch":"@@ -204,3 +204,0 @@\n-            \/\/ When all commands are processed, it's time to check labels\n-            \/\/ Must re-fetch PR after running the command, the command might have updated the PR\n-            var updatedPR = pr.repository().pullRequest(pr.id());\n@@ -208,1 +205,4 @@\n-            if (!pr.labels().contains(\"integrated\")) {\n+            if (!bot.isAutoLabelled(pr)) {\n+                \/\/ When all commands are processed, it's time to check labels\n+                \/\/ Must re-fetch PR after running the command, the command might have updated the PR\n+                var updatedPR = pr.repository().pullRequest(pr.id());\n@@ -211,1 +211,0 @@\n-                log.info(\"Skip updating labels in integrated PR\");\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CommandWorkItem.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -118,1 +118,1 @@\n-        if (bot.currentLabels().containsKey(pr.headHash())) {\n+        if (bot.isAutoLabelled(pr)) {\n@@ -121,0 +121,1 @@\n+\n@@ -122,0 +123,1 @@\n+            bot.setAutoLabelled(pr);\n@@ -132,0 +134,9 @@\n+            bot.setAutoLabelled(pr);\n+            return List.of();\n+        }\n+\n+        \/\/ If the PR already has one of the allowed labels, that is also considered to override automatic labelling\n+        var existingAllowed = new HashSet<>(pr.labels());\n+        existingAllowed.retainAll(bot.labelConfiguration().allowed());\n+        if (!existingAllowed.isEmpty()) {\n+            bot.setAutoLabelled(pr);\n@@ -159,2 +170,1 @@\n-\n-            bot.currentLabels().put(pr.headHash(), Boolean.TRUE);\n+            bot.setAutoLabelled(pr);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/LabelerWorkItem.java","additions":13,"deletions":3,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import org.openjdk.skara.host.*;\n+import org.openjdk.skara.host.HostUser;\n@@ -31,1 +31,0 @@\n-import org.openjdk.skara.vcs.Hash;\n@@ -37,1 +36,1 @@\n-import java.util.concurrent.*;\n+import java.util.concurrent.ConcurrentHashMap;\n@@ -62,1 +61,1 @@\n-    private final ConcurrentMap<Hash, Boolean> currentLabels;\n+    private final Set<String> autoLabelled;\n@@ -104,1 +103,1 @@\n-        currentLabels = new ConcurrentHashMap<>();\n+        autoLabelled = new HashSet<>();\n@@ -261,4 +260,0 @@\n-    ConcurrentMap<Hash, Boolean> currentLabels() {\n-        return currentLabels;\n-    }\n-\n@@ -307,0 +302,12 @@\n+\n+    public boolean isAutoLabelled(PullRequest pr) {\n+        synchronized (autoLabelled) {\n+            return autoLabelled.contains(pr.id());\n+        }\n+    }\n+\n+    public void setAutoLabelled(PullRequest pr) {\n+        synchronized (autoLabelled) {\n+            autoLabelled.add(pr.id());\n+        }\n+    }\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBot.java","additions":16,"deletions":9,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-    void simple(TestInfo testInfo) throws IOException {\n+    void noMatch(TestInfo testInfo) throws IOException {\n@@ -79,0 +79,32 @@\n+        }\n+    }\n+\n+    @Test\n+    void match(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+\n+            var labelConfiguration = LabelConfigurationJson.builder()\n+                                                           .addMatchers(\"test1\", List.of(Pattern.compile(\"a.txt\")))\n+                                                           .addMatchers(\"test2\", List.of(Pattern.compile(\"b.txt\")))\n+                                                           .build();\n+            var censusBuilder = credentials.getCensusBuilder()\n+                                           .addAuthor(author.forge().currentUser().id())\n+                                           .addReviewer(reviewer.forge().currentUser().id());\n+            var labelBot = PullRequestBot.newBuilder()\n+                                         .repo(author)\n+                                         .censusRepo(censusBuilder.build())\n+                                         .labelConfiguration(labelConfiguration)\n+                                         .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path();\n+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"refs\/heads\/edit\", true);\n@@ -86,9 +118,1 @@\n-            \/\/ Make sure that the push registered\n-            var lastHeadHash = pr.headHash();\n-            var refreshCount = 0;\n-            do {\n-                pr = author.pullRequest(pr.id());\n-                if (refreshCount++ > 100) {\n-                    fail(\"The PR did not update after the new push\");\n-                }\n-            } while (pr.headHash().equals(lastHeadHash));\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"This is a pull request\");\n@@ -99,0 +123,28 @@\n+        }\n+    }\n+\n+    @Test\n+    void initialLabelCommand(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+\n+            var labelConfiguration = LabelConfigurationJson.builder()\n+                                                           .addMatchers(\"test1\", List.of(Pattern.compile(\"a.txt\")))\n+                                                           .addMatchers(\"test2\", List.of(Pattern.compile(\"b.txt\")))\n+                                                           .build();\n+            var censusBuilder = credentials.getCensusBuilder()\n+                                           .addAuthor(author.forge().currentUser().id())\n+                                           .addReviewer(reviewer.forge().currentUser().id());\n+            var labelBot = PullRequestBot.newBuilder()\n+                                         .repo(author)\n+                                         .censusRepo(censusBuilder.build())\n+                                         .labelConfiguration(labelConfiguration)\n+                                         .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path();\n+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n@@ -100,17 +152,17 @@\n-            var fileB = localRepoFolder.resolve(\"b.txt\");\n-            Files.writeString(fileB, \"Hello\");\n-            localRepo.add(fileB);\n-            var hashB = localRepo.commit(\"test2\", \"test\", \"test@test\");\n-            localRepo.push(hashB, author.url(), \"edit\");\n-\n-            \/\/ Make sure that the push registered\n-            lastHeadHash = pr.headHash();\n-            refreshCount = 0;\n-            do {\n-                pr = author.pullRequest(pr.id());\n-                if (refreshCount++ > 100) {\n-                    fail(\"The PR did not update after the new push\");\n-                }\n-            } while (pr.headHash().equals(lastHeadHash));\n-\n-            \/\/ Check the status - there should now be a test2 label\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"refs\/heads\/edit\", true);\n+\n+            var fileA = localRepoFolder.resolve(\"a.txt\");\n+            Files.writeString(fileA, \"Hello\");\n+            localRepo.add(fileA);\n+            var hashA = localRepo.commit(\"test1\", \"test\", \"test@test\");\n+            localRepo.push(hashA, author.url(), \"edit\");\n+\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"This is a pull request\");\n+\n+            \/\/ Issue a manual label command\n+            var reviewerPr = reviewer.pullRequest(pr.id());\n+            reviewerPr.addComment(\"\/label add test2\");\n+\n+            \/\/ Check the status - there should still only be a test2 label\n@@ -118,17 +170,46 @@\n-            assertEquals(Set.of(\"rfr\", \"test1\", \"test2\"), new HashSet<>(pr.labels()));\n-\n-            localRepo.remove(fileA);\n-            var hashNoA = localRepo.commit(\"test2\", \"test\", \"test@test\");\n-            localRepo.push(hashNoA, author.url(), \"edit\");\n-\n-            \/\/ Make sure that the push registered\n-            lastHeadHash = pr.headHash();\n-            refreshCount = 0;\n-            do {\n-                pr = author.pullRequest(pr.id());\n-                if (refreshCount++ > 100) {\n-                    fail(\"The PR did not update after the new push\");\n-                }\n-            } while (pr.headHash().equals(lastHeadHash));\n-\n-            \/\/ Check the status - the test1 label should be gone\n+            assertEquals(Set.of(\"rfr\", \"test2\"), new HashSet<>(pr.labels()));\n+        }\n+    }\n+\n+    @Test\n+    void initialLabel(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+\n+            var labelConfiguration = LabelConfigurationJson.builder()\n+                                                           .addMatchers(\"test1\", List.of(Pattern.compile(\"a.txt\")))\n+                                                           .addMatchers(\"test2\", List.of(Pattern.compile(\"b.txt\")))\n+                                                           .build();\n+            var censusBuilder = credentials.getCensusBuilder()\n+                                           .addAuthor(author.forge().currentUser().id())\n+                                           .addReviewer(reviewer.forge().currentUser().id());\n+            var labelBot = PullRequestBot.newBuilder()\n+                                         .repo(author)\n+                                         .censusRepo(censusBuilder.build())\n+                                         .labelConfiguration(labelConfiguration)\n+                                         .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path();\n+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"refs\/heads\/edit\", true);\n+\n+            var fileA = localRepoFolder.resolve(\"a.txt\");\n+            Files.writeString(fileA, \"Hello\");\n+            localRepo.add(fileA);\n+            var hashA = localRepo.commit(\"test1\", \"test\", \"test@test\");\n+            localRepo.push(hashA, author.url(), \"edit\");\n+\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"This is a pull request\");\n+\n+            \/\/ Manually set a label\n+            pr.addLabel(\"test2\");\n+\n+            \/\/ Check the status - there should still only be a test2 label\n@@ -139,0 +220,47 @@\n+\n+    @Test\n+    void initialUnmatchedLabel(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+\n+            var labelConfiguration = LabelConfigurationJson.builder()\n+                                                           .addMatchers(\"test1\", List.of(Pattern.compile(\"a.txt\")))\n+                                                           .addMatchers(\"test2\", List.of(Pattern.compile(\"b.txt\")))\n+                                                           .build();\n+            var censusBuilder = credentials.getCensusBuilder()\n+                                           .addAuthor(author.forge().currentUser().id())\n+                                           .addReviewer(reviewer.forge().currentUser().id());\n+            var labelBot = PullRequestBot.newBuilder()\n+                                         .repo(author)\n+                                         .censusRepo(censusBuilder.build())\n+                                         .labelConfiguration(labelConfiguration)\n+                                         .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path();\n+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"refs\/heads\/edit\", true);\n+\n+            var fileA = localRepoFolder.resolve(\"a.txt\");\n+            Files.writeString(fileA, \"Hello\");\n+            localRepo.add(fileA);\n+            var hashA = localRepo.commit(\"test1\", \"test\", \"test@test\");\n+            localRepo.push(hashA, author.url(), \"edit\");\n+\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"This is a pull request\");\n+\n+            \/\/ Manually set a label that isn't in the set of automatic ones\n+            pr.addLabel(\"test42\");\n+\n+            \/\/ Check the status - the test1 label should have been added\n+            TestBotRunner.runPeriodicItems(labelBot);\n+            assertEquals(Set.of(\"rfr\", \"test1\", \"test42\"), new HashSet<>(pr.labels()));\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/LabelerTests.java","additions":172,"deletions":44,"binary":false,"changes":216,"status":"modified"}]}