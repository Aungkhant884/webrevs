{"files":[{"patch":"@@ -31,0 +31,2 @@\n+    requires java.xml;\n+    requires java.net.http;\n","filename":"bots\/censussync\/src\/main\/java\/module-info.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,2 +26,0 @@\n-import org.openjdk.skara.vcs.*;\n-import org.openjdk.skara.vcs.openjdk.convert.Mark;\n@@ -29,1 +27,0 @@\n-import java.util.*;\n@@ -31,1 +28,1 @@\n-import java.nio.file.Path;\n+import java.util.*;\n@@ -47,4 +44,14 @@\n-            var from = configuration.repository(sync.get(\"from\").asString());\n-            var to = configuration.repository(sync.get(\"to\").asString());\n-            var version = sync.get(\"version\").asInt();\n-            bots.add(new CensusSyncBot(from, to, version));\n+            switch (sync.get(\"method\").asString()) {\n+                case \"downgrade\" -> {\n+                    var from = configuration.repository(sync.get(\"from\").asString());\n+                    var to = configuration.repository(sync.get(\"to\").asString());\n+                    var version = sync.get(\"version\").asInt();\n+                    bots.add(new CensusSyncDowngradeBot(from, to, version));\n+                }\n+                case \"upgrade\" -> {\n+                    var from = URI.create(sync.get(\"from\").asString());\n+                    var to = configuration.repository(sync.get(\"to\").asString());\n+                    var version = sync.get(\"version\").asInt();\n+                    bots.add(new CensusSyncUpgradeBot(from, to, version));\n+                }\n+            }\n","filename":"bots\/censussync\/src\/main\/java\/org\/openjdk\/skara\/bots\/censussync\/CensusSyncBotFactory.java","additions":15,"deletions":8,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -30,2 +30,0 @@\n-import org.openjdk.skara.vcs.openjdk.convert.*;\n-import org.openjdk.skara.storage.StorageBuilder;\n@@ -35,1 +33,0 @@\n-import java.util.stream.Collectors;\n@@ -37,3 +34,0 @@\n-import java.nio.charset.StandardCharsets;\n-import java.net.URI;\n-import java.net.URLEncoder;\n@@ -44,1 +38,1 @@\n-public class CensusSyncBot implements Bot, WorkItem {\n+public class CensusSyncDowngradeBot implements Bot, WorkItem {\n@@ -51,1 +45,1 @@\n-    CensusSyncBot(HostedRepository from, HostedRepository to, int version) {\n+    CensusSyncDowngradeBot(HostedRepository from, HostedRepository to, int version) {\n@@ -64,1 +58,1 @@\n-        if (!(other instanceof CensusSyncBot)) {\n+        if (!(other instanceof CensusSyncDowngradeBot)) {\n@@ -67,1 +61,1 @@\n-        var o = (CensusSyncBot) other;\n+        var o = (CensusSyncDowngradeBot) other;\n@@ -73,1 +67,1 @@\n-        return \"CensusSyncBot(\" + from.name() + \"->\" + to.name() + \"@\" + version + \")\";\n+        return \"CensusSyncDowngradeBot(\" + from.name() + \"->\" + to.name() + \"@\" + version + \")\";\n","filename":"bots\/censussync\/src\/main\/java\/org\/openjdk\/skara\/bots\/censussync\/CensusSyncDowngradeBot.java","additions":5,"deletions":11,"binary":false,"changes":16,"previous_filename":"bots\/censussync\/src\/main\/java\/org\/openjdk\/skara\/bots\/censussync\/CensusSyncBot.java","status":"renamed"},{"patch":"@@ -0,0 +1,269 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.skara.bots.censussync;\n+\n+import org.openjdk.skara.bot.*;\n+import org.openjdk.skara.census.Census;\n+import org.openjdk.skara.forge.HostedRepository;\n+import org.openjdk.skara.network.RestRequest;\n+import org.openjdk.skara.vcs.*;\n+import org.w3c.dom.Element;\n+\n+import java.io.*;\n+import java.net.URI;\n+import java.net.http.*;\n+import java.nio.file.*;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.*;\n+import java.util.logging.Logger;\n+\n+public class CensusSyncUpgradeBot implements Bot, WorkItem {\n+    private static final Logger log = Logger.getLogger(\"org.openjdk.skara.bots\");;\n+    private final URI from;\n+    private final HostedRepository to;\n+    private final int version;\n+    private final RestRequest request;\n+\n+    private String lastCensus = \"\";\n+\n+    CensusSyncUpgradeBot(URI from, HostedRepository to, int version) {\n+        this.from = from;\n+        this.to = to;\n+        this.version = version;\n+\n+        request = new RestRequest(from);\n+    }\n+\n+    @Override\n+    public boolean concurrentWith(WorkItem other) {\n+        if (!(other instanceof CensusSyncUpgradeBot)) {\n+            return true;\n+        }\n+        var o = (CensusSyncUpgradeBot) other;\n+        return !o.to.equals(to);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"CensusSyncUpgradeBot(\" + from + \"->\" + to.name() + \"@\" + version + \")\";\n+    }\n+\n+    @Override\n+    public List<WorkItem> getPeriodicItems() {\n+        return List.of(this);\n+    }\n+\n+    private static Path download(Path root, URI uri) throws IOException, InterruptedException {\n+        var tmpFile = Files.createTempFile(root, \"census\", \".xml\");\n+        var client = HttpClient.newHttpClient();\n+        var request = HttpRequest.newBuilder()\n+                                 .uri(uri)\n+                                 .build();\n+        var response = client.send(request, HttpResponse.BodyHandlers.ofFile(tmpFile));\n+        if (response.statusCode() != 200) {\n+            throw new RuntimeException(\"Failed to download census file: \" + response.statusCode());\n+        }\n+        return tmpFile;\n+    }\n+\n+    private static PrintWriter newPrintWriter(Path p) throws IOException {\n+        return new PrintWriter(Files.newBufferedWriter(p));\n+    }\n+\n+    private static String escape(String s) {\n+        return s.replace(\"&\", \"&amp;\").replace(\"<\", \"&lt;\").replace(\">\", \"&gt;\");\n+    }\n+\n+    private static List<Path> syncVersion(Element census, Path to) throws IOException {\n+        var date = ZonedDateTime.parse(XML.attribute(census, \"time\"));\n+        var timestamp = date.toInstant();\n+        var filename = to.resolve(\"version.xml\");\n+        try (var file = newPrintWriter(filename)) {\n+            file.println(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\");\n+            file.format(\"<version format=\\\"1\\\" timestamp=\\\"%s\\\" \/>%n\", timestamp.toString());\n+        }\n+        return List.of(filename);\n+    }\n+\n+    private static List<Path> syncContributors(Element census, Path to) throws IOException {\n+        var filename = to.resolve(\"contributors.xml\");\n+        try (var file = newPrintWriter(filename)) {\n+            file.println(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\");\n+            file.println(\"<contributors>\");\n+            for (var person : XML.children(census, \"person\")) {\n+                var username = XML.attribute(person, \"name\");\n+                var fullName = XML.child(person, \"full-name\").getTextContent();\n+                file.format(\"    <contributor username=\\\"%s\\\" full-name=\\\"%s\\\" \/>%n\",\n+                            username, fullName);\n+            }\n+            file.println(\"<\/contributors>\");\n+        }\n+        return List.of(filename);\n+    }\n+\n+    private static List<Path> syncGroups(Element census, Path to) throws IOException {\n+        var dir = to.resolve(\"groups\");\n+        var ret = new ArrayList<Path>();\n+        for (var group : XML.children(census, \"group\")) {\n+            Files.createDirectories(dir);\n+\n+            String lead = null;\n+            var members = new ArrayList<String>();\n+            for (var person : XML.children(group, \"person\")) {\n+                if (XML.hasAttribute(person, \"role\")) {\n+                    var role = XML.attribute(person, \"role\");\n+                    if (!role.equals(\"lead\")) {\n+                        throw new IOException(\"Unexpected role: \" + role);\n+                    }\n+                    lead = XML.attribute(person, \"ref\");\n+                } else {\n+                    members.add(XML.attribute(person, \"ref\"));\n+                }\n+            }\n+\n+            var name = XML.attribute(group, \"name\");\n+            var fullName = XML.child(group, \"full-name\").getTextContent();\n+            var filename = dir.resolve(name + \".xml\");\n+            try (var file = newPrintWriter(filename)) {\n+                file.format(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>%n\");\n+                file.format(\"<group name=\\\"%s\\\" full-name=\\\"%s\\\">%n\", name, escape(fullName));\n+                file.format(\"    <lead username=\\\"%s\\\" \/>%n\", lead);\n+                for (var member : members) {\n+                    file.format(\"    <member username=\\\"%s\\\" \/>%n\", member);\n+                }\n+\n+                file.format(\"<\/group>%n\");\n+            }\n+            ret.add(filename);\n+        }\n+        return ret;\n+    }\n+\n+    private static List<Path> syncProjects(Element census, Path to) throws IOException {\n+        var dir = to.resolve(\"projects\");\n+        var ret = new ArrayList<Path>();\n+        for (var project : XML.children(census, \"project\")) {\n+            Files.createDirectories(dir);\n+\n+            String lead = null;\n+            var committers = new ArrayList<String>();\n+            var reviewers = new ArrayList<String>();\n+            var authors = new ArrayList<String>();\n+\n+            var name = XML.attribute(project, \"name\");\n+\n+            for (var person : XML.children(project, \"person\")) {\n+                var role = XML.attribute(person, \"role\");\n+                var username = XML.attribute(person, \"ref\");\n+                switch (role) {\n+                    case \"lead\":\n+                        lead = username;\n+                        break;\n+                    case \"reviewer\":\n+                        reviewers.add(username);\n+                        break;\n+                    case \"committer\":\n+                        committers.add(username);\n+                        break;\n+                    case \"author\":\n+                        authors.add(username);\n+                        break;\n+                    default:\n+                        if (name.equals(\"openjfx\") && (username.equals(\"dwookey\") || username.equals(\"jpereda\"))) {\n+                            authors.add(username);\n+                        } else {\n+                            throw new IOException(\"Unexpected role '\" + role +\n+                                                          \"' for user '\" + username +\n+                                                          \"' in project '\" + name + \"'\");\n+                        }\n+                }\n+            }\n+\n+            var fullName = XML.child(project, \"full-name\").getTextContent();\n+            var sponsor = XML.attribute(XML.child(project, \"sponsor\"), \"ref\");\n+            var filename = dir.resolve(name + \".xml\");\n+            try (var file = newPrintWriter(filename)) {\n+                file.format(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>%n\");\n+                file.format(\"<project name=\\\"%s\\\" full-name=\\\"%s\\\" sponsor=\\\"%s\\\">%n\", name, escape(fullName), sponsor);\n+                file.format(\"    <lead username=\\\"%s\\\" since=\\\"0\\\" \/>%n\", lead);\n+\n+                for (var reviewer : reviewers) {\n+                    file.format(\"    <reviewer username=\\\"%s\\\" since=\\\"0\\\" \/>%n\", reviewer);\n+                }\n+                for (var committer : committers) {\n+                    file.format(\"    <committer username=\\\"%s\\\" since=\\\"0\\\" \/>%n\", committer);\n+                }\n+                for (var author : authors) {\n+                    file.format(\"    <author username=\\\"%s\\\" since=\\\"0\\\" \/>%n\", author);\n+                }\n+\n+                file.format(\"<\/project>%n\");\n+            }\n+            ret.add(filename);\n+        }\n+        return ret;\n+    }\n+\n+    private static List<Path> sync(String from, Path to) throws IOException {\n+        var document = XML.parse(from);\n+        var census = XML.child(document, \"census\");\n+        var ret = new ArrayList<Path>();\n+\n+        ret.addAll(syncVersion(census, to));\n+        ret.addAll(syncContributors(census, to));\n+        ret.addAll(syncGroups(census, to));\n+        ret.addAll(syncProjects(census, to));\n+\n+        return ret;\n+    }\n+\n+    @Override\n+    public Collection<WorkItem> run(Path scratch) {\n+        try {\n+            var currentCensus = request.get().executeUnparsed();\n+            if (currentCensus.equals(lastCensus)) {\n+                log.fine(\"No census changes detected\");\n+                return List.of();\n+            }\n+\n+            var toDir = scratch.resolve(\"to.git\");\n+            var toRepo = Repository.materialize(toDir, to.url(), Branch.defaultFor(VCS.GIT).name());\n+\n+            var updatedFiles = sync(currentCensus, toDir);\n+            if (!toRepo.isClean()) {\n+                toRepo.add(updatedFiles);\n+                var head = toRepo.commit(\"Updated census\", \"duke\", \"duke@openjdk.org\");\n+                toRepo.push(head, to.url(), Branch.defaultFor(VCS.GIT).name(), false);\n+            } else {\n+                log.info(\"New census data did not result in any changes\");\n+            }\n+\n+            lastCensus = currentCensus;\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+        return List.of();\n+    }\n+}\n","filename":"bots\/censussync\/src\/main\/java\/org\/openjdk\/skara\/bots\/censussync\/CensusSyncUpgradeBot.java","additions":269,"deletions":0,"binary":false,"changes":269,"status":"added"},{"patch":"@@ -0,0 +1,82 @@\n+\/\/ Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+\n+package org.openjdk.skara.bots.censussync;\n+\n+import org.w3c.dom.*;\n+import org.xml.sax.*;\n+\n+import javax.xml.parsers.*;\n+import java.io.*;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.*;\n+import java.util.*;\n+\n+class XML {\n+    static Document parse(String p) throws IOException {\n+        try {\n+            var factory = DocumentBuilderFactory.newInstance();\n+            var builder = factory.newDocumentBuilder();\n+            return builder.parse(new InputSource(new ByteArrayInputStream(p.getBytes(StandardCharsets.UTF_8))));\n+        } catch (ParserConfigurationException | SAXException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    static List<Element> children(Element element, String name) {\n+        var result = new ArrayList<Element>();\n+\n+        var nodes = element.getChildNodes();\n+        for (int i = 0; i < nodes.getLength(); i++) {\n+            var node = nodes.item(i);\n+            if (node.getNodeType() == Node.ELEMENT_NODE) {\n+                Element child = (Element) node;\n+                if (child.getTagName().equals(name)) {\n+                    result.add(child);\n+                }\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    static List<Element> children(Document document, String name) {\n+        var result = new ArrayList<Element>();\n+\n+        var nodes = document.getElementsByTagName(name);\n+        for (int i = 0; i < nodes.getLength(); i++) {\n+            var node = nodes.item(i);\n+            if (node.getNodeType() == Node.ELEMENT_NODE) {\n+                result.add((Element) node);\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    private static Element single(List<Element> elements) {\n+        if (elements.size() > 1) {\n+            throw new IllegalArgumentException(\"Too many children with name\");\n+        }\n+\n+        return elements.isEmpty() ? null : elements.get(0);\n+    }\n+\n+    static Element child(Element element, String name) {\n+        var elements = children(element, name);\n+        return single(elements);\n+    }\n+\n+    static Element child(Document document, String name) {\n+        var elements = children(document, name);\n+        return single(elements);\n+    }\n+\n+    static String attribute(Element element, String name) {\n+        return element.getAttribute(name);\n+    }\n+\n+    static boolean hasAttribute(Element element, String name) {\n+        return element.hasAttribute(name);\n+    }\n+}\n","filename":"bots\/censussync\/src\/main\/java\/org\/openjdk\/skara\/bots\/censussync\/XML.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"}]}