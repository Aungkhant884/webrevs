{"files":[{"patch":"@@ -0,0 +1,202 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.cli;\n+\n+import org.openjdk.skara.args.*;\n+import org.openjdk.skara.forge.Forge;\n+import org.openjdk.skara.host.*;\n+import org.openjdk.skara.vcs.Repository;\n+import org.openjdk.skara.proxy.HttpProxy;\n+import org.openjdk.skara.version.Version;\n+\n+import java.io.*;\n+import java.net.URI;\n+import java.nio.file.*;\n+import java.nio.charset.StandardCharsets;\n+import java.util.*;\n+import java.util.function.Supplier;\n+import java.util.logging.Level;\n+import java.time.format.*;\n+\n+public class GitCommitComments {\n+    private static void exit(String fmt, Object...args) {\n+        System.err.println(String.format(fmt, args));\n+        System.exit(1);\n+    }\n+\n+    private static <T> Supplier<T> die(String fmt, Object... args) {\n+        return () -> {\n+            exit(fmt, args);\n+            return null;\n+        };\n+    }\n+\n+    private static void sleep(int ms) {\n+        try {\n+            Thread.sleep(ms);\n+        } catch (InterruptedException e) {\n+            \/\/ do nothing\n+        }\n+    }\n+\n+    private static String getOption(String name, Arguments arguments) {\n+        if (arguments.contains(name)) {\n+            return arguments.get(name).asString();\n+        }\n+\n+        return gitConfig(\"cc.\" + name);\n+    }\n+\n+    private static boolean getSwitch(String name, String subsection, Arguments arguments) {\n+        if (arguments.contains(name)) {\n+            return true;\n+        }\n+\n+        if (subsection != null && !subsection.isEmpty()) {\n+            var subsectionSpecific = gitConfig(\"fork.\" + subsection + \".\" + name);\n+            if (subsectionSpecific != null) {\n+                return subsectionSpecific.toLowerCase().equals(\"true\");\n+            }\n+        }\n+\n+        var sectionSpecific = gitConfig(\"cc.\" + name);\n+        return sectionSpecific != null && sectionSpecific.toLowerCase().equals(\"true\");\n+    }\n+\n+    private static String gitConfig(String key) {\n+        try {\n+            var pb = new ProcessBuilder(\"git\", \"config\", key);\n+            pb.redirectOutput(ProcessBuilder.Redirect.PIPE);\n+            pb.redirectError(ProcessBuilder.Redirect.DISCARD);\n+            var p = pb.start();\n+\n+            var output = new String(p.getInputStream().readAllBytes(), StandardCharsets.UTF_8);\n+            var res = p.waitFor();\n+            if (res != 0) {\n+                return null;\n+            }\n+\n+            return output == null ? null : output.replace(\"\\n\", \"\");\n+        } catch (InterruptedException e) {\n+            return null;\n+        } catch (IOException e) {\n+            return null;\n+        }\n+    }\n+\n+    public static void main(String[] args) throws IOException, InterruptedException {\n+        var flags = List.of(\n+            Option.shortcut(\"u\")\n+                  .fullname(\"username\")\n+                  .describe(\"NAME\")\n+                  .helptext(\"Username on host\")\n+                  .optional(),\n+            Switch.shortcut(\"\")\n+                  .fullname(\"verbose\")\n+                  .helptext(\"Turn on verbose output\")\n+                  .optional(),\n+            Switch.shortcut(\"\")\n+                  .fullname(\"debug\")\n+                  .helptext(\"Turn on debugging output\")\n+                  .optional(),\n+            Switch.shortcut(\"\")\n+                  .fullname(\"version\")\n+                  .helptext(\"Print the version of this tool\")\n+                  .optional()\n+        );\n+\n+        var inputs = List.of(\n+            Input.position(0)\n+                 .describe(\"URI\")\n+                 .singular()\n+                 .required()\n+        );\n+\n+        var parser = new ArgumentParser(\"git-cc\", flags, inputs);\n+        var arguments = parser.parse(args);\n+\n+        if (arguments.contains(\"version\")) {\n+            System.out.println(\"git-cc version: \" + Version.fromManifest().orElse(\"unknown\"));\n+            System.exit(0);\n+        }\n+\n+        if (arguments.contains(\"verbose\") || arguments.contains(\"debug\")) {\n+            var level = arguments.contains(\"debug\") ? Level.FINER : Level.FINE;\n+            Logging.setup(level);\n+        }\n+\n+        HttpProxy.setup();\n+\n+        URI uri = null;\n+        if (arguments.at(0).isPresent()) {\n+            var arg = arguments.at(0).asString();\n+            var argURI = URI.create(arg);\n+            uri = argURI.getScheme() == null ?\n+                URI.create(\"https:\/\/\" + argURI.getHost() + argURI.getPath()) :\n+                argURI;\n+        } else {\n+            exit(\"error: must supply URI\");\n+        }\n+\n+        if (uri == null) {\n+            exit(\"error: not a valid URI: \" + uri);\n+        }\n+\n+        var webURI = Remote.toWebURI(uri.toString());\n+        var token = System.getenv(\"GIT_TOKEN\");\n+        var username = getOption(\"username\", arguments);\n+        var credentials = GitCredentials.fill(webURI.getHost(), webURI.getPath(), username, token, webURI.getScheme());\n+\n+        if (credentials.password() == null) {\n+            exit(\"error: no personal access token found, use git-credentials or the environment variable GIT_TOKEN\");\n+        }\n+        if (credentials.username() == null) {\n+            exit(\"error: no username for \" + webURI.getHost() + \" found, use git-credentials or the flag --username\");\n+        }\n+\n+        var host = Forge.from(webURI, new Credential(credentials.username(), credentials.password()));\n+        if (host.isEmpty()) {\n+            exit(\"error: could not connect to host \" + webURI.getHost());\n+        }\n+\n+        var repositoryPath = webURI.getPath().substring(1);\n+\n+        if (repositoryPath.endsWith(\"\/\")) {\n+            repositoryPath =\n+                    repositoryPath.substring(0, repositoryPath.length() - 1);\n+        }\n+\n+        var hostedRepo = host.get().repository(repositoryPath).orElseThrow(() ->\n+            new IOException(\"Could not find repository at \" + webURI.toString())\n+        );\n+\n+        var commitComments = hostedRepo.recentCommitComments();\n+        for (var comment : commitComments) {\n+            System.out.println(\"Hash: \" + comment.commit().hex());\n+            System.out.println(\"Author: \" + comment.author().username());\n+            System.out.println(\"Date: \" + comment.createdAt().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss +0000\")));\n+            System.out.println(\"\");\n+            System.out.println(comment.body());\n+        }\n+    }\n+}\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/GitCommitComments.java","additions":202,"deletions":0,"binary":false,"changes":202,"status":"added"},{"patch":"@@ -51,1 +51,4 @@\n-                       .main(IssueRedecorate::main)\n+                       .main(IssueRedecorate::main),\n+                Command.name(\"commit-comments\")\n+                       .helptext(\"Lists recent commit comments for a repository\")\n+                       .main(GitCommitComments::main)\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/SkaraDebug.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}