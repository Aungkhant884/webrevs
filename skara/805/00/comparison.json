{"files":[{"patch":"@@ -227,5 +227,0 @@\n-    @Override\n-    public void visit(BlacklistIssue issue) {\n-        log.fine(\"ignored: blacklisted commit\");\n-    }\n-\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestCheckIssueVisitor.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -91,10 +91,0 @@\n-            Option.shortcut(\"\")\n-                  .fullname(\"whitelist\")\n-                  .describe(\"FILE\")\n-                  .helptext(\"Use the specified whitelist (default: .jcheck\/whitelist.json)\")\n-                  .optional(),\n-            Option.shortcut(\"\")\n-                  .fullname(\"blacklist\")\n-                  .describe(\"FILE\")\n-                  .helptext(\"Use the specified blacklist (default: .jcheck\/blacklist.json)\")\n-                  .optional(),\n@@ -213,29 +203,0 @@\n-        var whitelistOption = getOption(\"whitelist\", arguments);\n-        if (whitelistOption == null) {\n-            whitelistOption = \".jcheck\/whitelist.json\";\n-        }\n-        var whitelistFile = Path.of(whitelistOption);\n-        var whitelist = new HashMap<String, Set<Hash>>();\n-        if (Files.exists(whitelistFile)) {\n-            var json = JSON.parse(Files.readString(whitelistFile));\n-            for (var field : json.fields()) {\n-                var check = field.name();\n-                var hashes = field.value().stream().map(JSONValue::asString).map(Hash::new).collect(Collectors.toSet());\n-                whitelist.put(check, hashes);\n-            }\n-        }\n-\n-        var blacklistOption = getOption(\"blacklist\", arguments);\n-        if (blacklistOption == null) {\n-            blacklistOption = \".jcheck\/blacklist.json\";\n-        }\n-        var blacklistFile = Path.of(blacklistOption);\n-        var blacklist = new HashSet<Hash>();\n-        if (Files.exists(blacklistFile)) {\n-            var json = JSON.parse(Files.readString(blacklistFile));\n-            json.get(\"commits\").stream()\n-                               .map(JSONValue::asString)\n-                               .map(Hash::new)\n-                               .forEach(blacklist::add);\n-        }\n-\n@@ -272,1 +233,1 @@\n-            try (var errors = JCheck.check(repo, census, commitMessageParser, range, whitelist, blacklist)) {\n+            try (var errors = JCheck.check(repo, census, commitMessageParser, range)) {\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/GitJCheck.java","additions":1,"deletions":40,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -293,7 +293,0 @@\n-    public void visit(BlacklistIssue i) {\n-        if (!ignore.contains(i.check().name())) {\n-            println(i, \"commit is blacklisted\");\n-            hasDisplayedErrors = true;\n-        }\n-    }\n-\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/JCheckCLIVisitor.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1,61 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.skara.jcheck;\n-\n-import org.openjdk.skara.vcs.Commit;\n-import org.openjdk.skara.vcs.Hash;\n-import org.openjdk.skara.vcs.openjdk.CommitMessage;\n-\n-import java.util.Iterator;\n-import java.util.Set;\n-import java.util.logging.Logger;\n-\n-public class BlacklistCheck extends CommitCheck {\n-    private final Logger log = Logger.getLogger(\"org.openjdk.skara.jcheck.blacklist\");\n-    private final Set<Hash> blacklist;\n-\n-    BlacklistCheck(Set<Hash> blacklist) {\n-        this.blacklist = blacklist;\n-    }\n-\n-    @Override\n-    Iterator<Issue> check(Commit commit, CommitMessage message, JCheckConfiguration conf) {\n-        if (blacklist.contains(commit.hash())) {\n-            log.finer(\"issue: commit is on blacklist\");\n-            var metadata = CommitIssue.metadata(commit, message, conf, this);\n-            return iterator(new BlacklistIssue(metadata));\n-        }\n-\n-        return iterator();\n-    }\n-\n-    @Override\n-    public String name() {\n-        return \"blacklist\";\n-    }\n-\n-    @Override\n-    public String description() {\n-        return \"Change should not be on the blacklist\";\n-    }\n-}\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/BlacklistCheck.java","additions":0,"deletions":61,"binary":false,"changes":61,"status":"deleted"},{"patch":"@@ -1,35 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.skara.jcheck;\n-\n-public class BlacklistIssue extends CommitIssue {\n-    BlacklistIssue(CommitIssue.Metadata metadata) {\n-        super(metadata);\n-    }\n-\n-    @Override\n-    public void accept(IssueVisitor v) {\n-        v.visit(this);\n-    }\n-}\n-\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/BlacklistIssue.java","additions":0,"deletions":35,"binary":false,"changes":35,"status":"deleted"},{"patch":"@@ -44,1 +44,0 @@\n-    void visit(BlacklistIssue issue);\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/IssueVisitor.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n-    private final Map<String, Set<Hash>> whitelist;\n@@ -56,2 +55,0 @@\n-           Map<String, Set<Hash>> whitelist,\n-           Set<Hash> blacklist,\n@@ -64,1 +61,0 @@\n-        this.whitelist = whitelist;\n@@ -81,2 +77,1 @@\n-            new ProblemListsCheck(repository),\n-            new BlacklistCheck(blacklist)\n+            new ProblemListsCheck(repository)\n@@ -127,5 +122,0 @@\n-            var skip = whitelist.get(c.name());\n-            if (skip != null && skip.contains(commit.hash())) {\n-                log.finer(\"Commit check '\" + c.name() + \"' is whitelisted for \" + commit.hash().hex());\n-                return Collections.emptyIterator();\n-            }\n@@ -220,2 +210,0 @@\n-                                Map<String, Set<Hash>> whitelist,\n-                                Set<Hash> blacklist,\n@@ -232,1 +220,1 @@\n-        var jcheck = new JCheck(repository, census, parser, revisionRange, allowedBranches, allowedTags, whitelist, blacklist, additionalConfiguration, configuration);\n+        var jcheck = new JCheck(repository, census, parser, revisionRange, allowedBranches, allowedTags, additionalConfiguration, configuration);\n@@ -248,1 +236,1 @@\n-        return check(repository, census, parser, branchRegex, tagRegex, repository.range(toCheck), Map.of(), Set.of(), List.of(), configuration);\n+        return check(repository, census, parser, branchRegex, tagRegex, repository.range(toCheck), List.of(), configuration);\n@@ -254,3 +242,1 @@\n-                               String revisionRange,\n-                               Map<String, Set<Hash>> whitelist,\n-                               Set<Hash> blacklist) throws IOException {\n+                               String revisionRange) throws IOException {\n@@ -270,1 +256,1 @@\n-        return check(repository, census, parser, branchRegex, tagRegex, revisionRange, whitelist, blacklist, List.of(), null);\n+        return check(repository, census, parser, branchRegex, tagRegex, revisionRange, List.of(), null);\n@@ -280,2 +266,0 @@\n-                                new HashMap<String, Set<Hash>>(),\n-                                new HashSet<Hash>(),\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/JCheck.java","additions":5,"deletions":21,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-        var error = \"error=blacklist,author,committer,reviewers,merge,issues,executable,symlink\";\n+        var error = \"error=author,committer,reviewers,merge,issues,executable,symlink\";\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/JCheckConfiguration.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,89 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.skara.jcheck;\n-\n-import org.openjdk.skara.vcs.*;\n-import org.openjdk.skara.vcs.openjdk.CommitMessage;\n-import org.openjdk.skara.vcs.openjdk.CommitMessageParsers;\n-\n-import org.junit.jupiter.api.Test;\n-import static org.junit.jupiter.api.Assertions.*;\n-\n-import java.util.*;\n-import java.time.ZonedDateTime;\n-\n-class BlacklistCheckTests {\n-    private static final JCheckConfiguration conf = JCheckConfiguration.parse(List.of(\n-        \"[general]\",\n-        \"project = test\",\n-        \"[checks]\",\n-        \"error = blacklist\"\n-    ));\n-\n-    private static Commit commit(Hash hash) {\n-        var author = new Author(\"Foo\", \"foo@bar.org\");\n-        var parents = List.of(new Hash(\"12345789012345789012345678901234567890\"));\n-        var authored = ZonedDateTime.now();\n-        var message = List.of(\"Initial commit\");\n-        var metadata = new CommitMetadata(hash, parents, author, authored, author, authored, message);\n-        return new Commit(metadata, List.of());\n-    }\n-\n-    private static CommitMessage message(Commit c) {\n-        return CommitMessageParsers.v1.parse(c);\n-    }\n-\n-    private List<Issue> toList(Iterator<Issue> i) {\n-        var list = new ArrayList<Issue>();\n-        while (i.hasNext()) {\n-            list.add(i.next());\n-        }\n-        return list;\n-    }\n-\n-    @Test\n-    void commitNotOnBlacklistShouldPass() {\n-        var hash = new Hash(\"0123456789012345678901234567890123456789\");\n-        var commit = commit(hash);\n-        var check = new BlacklistCheck(Set.of());\n-        var issues = toList(check.check(commit, message(commit), conf));\n-        assertEquals(0, issues.size());\n-    }\n-\n-    @Test\n-    void commitOnBlacklistShouldFail() {\n-        var hash = new Hash(\"0123456789012345678901234567890123456789\");\n-        var commit = commit(hash);\n-        var message = message(commit);\n-        var check = new BlacklistCheck(Set.of(hash));\n-        var issues = toList(check.check(commit, message, conf));\n-\n-        assertEquals(1, issues.size());\n-        assertTrue(issues.get(0) instanceof BlacklistIssue);\n-        var issue = (BlacklistIssue) issues.get(0);\n-        assertEquals(commit, issue.commit());\n-        assertEquals(message, issue.message());\n-        assertEquals(check, issue.check());\n-        assertEquals(Severity.ERROR, issue.severity());\n-    }\n-}\n","filename":"jcheck\/src\/test\/java\/org\/openjdk\/skara\/jcheck\/BlacklistCheckTests.java","additions":0,"deletions":89,"binary":false,"changes":89,"status":"deleted"},{"patch":"@@ -230,5 +230,0 @@\n-        @Override\n-        public void visit(BlacklistIssue e) {\n-            issues.add(e);\n-        }\n-\n@@ -303,1 +298,1 @@\n-            try (var issues = JCheck.check(repo, census, CommitMessageParsers.v1, first.hex() + \"..\" + second.hex(), Map.of(), Set.of())) {\n+            try (var issues = JCheck.check(repo, census, CommitMessageParsers.v1, first.hex() + \"..\" + second.hex())) {\n@@ -336,1 +331,1 @@\n-            try (var issues = JCheck.check(repo, census, CommitMessageParsers.v1, range, Map.of(), Set.of())) {\n+            try (var issues = JCheck.check(repo, census, CommitMessageParsers.v1, range)) {\n","filename":"jcheck\/src\/test\/java\/org\/openjdk\/skara\/jcheck\/JCheckTests.java","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -123,2 +123,0 @@\n-    (b'',  b'whitelist', b'', b'Use specified whitelist (default: .jcheck\/whitelist.json)'),\n-    (b'',  b'blacklist', b'', b'Use specified blacklist (default: .jcheck\/blacklist.json)'),\n","filename":"skara.py","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}