{"files":[{"patch":"@@ -49,2 +49,0 @@\n-    private ZonedDateTime lastFullUpdate;\n-\n@@ -69,31 +67,0 @@\n-    private boolean isOfInterest(PullRequest pr) {\n-        var labels = new HashSet<>(pr.labelNames());\n-        var branchExists = pr.repository().branches().stream()\n-                            .map(HostedBranch::name)\n-                            .anyMatch(name -> name.equals(PreIntegrations.preIntegrateBranch(pr)));\n-        if (!(labels.contains(\"rfr\") || labels.contains(\"integrated\") || branchExists)) {\n-            log.fine(\"PR is not yet ready - needs either 'rfr' or 'integrated' label\");\n-            return false;\n-        }\n-\n-        var comments = pr.comments();\n-        for (var readyComment : readyComments.entrySet()) {\n-            var commentFound = false;\n-            for (var comment : comments) {\n-                if (comment.author().username().equals(readyComment.getKey())) {\n-                    var matcher = readyComment.getValue().matcher(comment.body());\n-                    if (matcher.find()) {\n-                        commentFound = true;\n-                        break;\n-                    }\n-                }\n-            }\n-            if (!commentFound) {\n-                log.fine(\"PR is not yet ready - missing ready comment from '\" + readyComment.getKey() +\n-                                 \"containing '\" + readyComment.getValue().pattern() + \"'\");\n-                return false;\n-            }\n-        }\n-        return true;\n-    }\n-\n@@ -123,7 +90,6 @@\n-                if (isOfInterest(pr)) {\n-                    ret.add(new PullRequestWorkItem(pr,\n-                            prStateStorageBuilder,\n-                            prListeners,\n-                            e -> poller.retryPullRequest(pr),\n-                            integratorId));\n-                }\n+                ret.add(new PullRequestWorkItem(pr,\n+                        prStateStorageBuilder,\n+                        prListeners,\n+                        e -> poller.retryPullRequest(pr),\n+                        integratorId,\n+                        readyComments));\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/NotifyBot.java","additions":6,"deletions":40,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -30,0 +30,3 @@\n+import org.openjdk.skara.bots.notify.prbranch.PullRequestBranchNotifier;\n+import org.openjdk.skara.forge.HostedBranch;\n+import org.openjdk.skara.forge.PreIntegrations;\n@@ -49,0 +52,1 @@\n+    private final Map<String, Pattern> readyComments;\n@@ -50,1 +54,3 @@\n-    PullRequestWorkItem(PullRequest pr, StorageBuilder<PullRequestState> prStateStorageBuilder, List<PullRequestListener> listeners, Consumer<RuntimeException> errorHandler, String integratorId) {\n+    PullRequestWorkItem(PullRequest pr, StorageBuilder<PullRequestState> prStateStorageBuilder,\n+            List<PullRequestListener> listeners, Consumer<RuntimeException> errorHandler,\n+            String integratorId, Map<String, Pattern> readyComments) {\n@@ -56,0 +62,1 @@\n+        this.readyComments = readyComments;\n@@ -186,0 +193,36 @@\n+    private boolean isOfInterest(PullRequest pr) {\n+        var labels = new HashSet<>(pr.labelNames());\n+        if (!(labels.contains(\"rfr\") || labels.contains(\"integrated\"))) {\n+            \/\/ If the PullRequestBranchNotifier is configured, check for the existence of\n+            \/\/ a pre-integration branch as that may need to be removed by the listener\n+            \/\/ even if none of the labels match.\n+            var prBranchListenerExists = listeners.stream()\n+                    .anyMatch(l -> l instanceof PullRequestBranchNotifier);\n+            var branchExists = prBranchListenerExists && pr.repository().branchHash(PreIntegrations.preIntegrateBranch(pr)).isPresent();\n+            if (!branchExists) {\n+                log.fine(\"PR is not yet ready - needs either 'rfr' or 'integrated' label, or a pre-integration branch present\");\n+                return false;\n+            }\n+        }\n+\n+        var comments = pr.comments();\n+        for (var readyComment : readyComments.entrySet()) {\n+            var commentFound = false;\n+            for (var comment : comments) {\n+                if (comment.author().username().equals(readyComment.getKey())) {\n+                    var matcher = readyComment.getValue().matcher(comment.body());\n+                    if (matcher.find()) {\n+                        commentFound = true;\n+                        break;\n+                    }\n+                }\n+            }\n+            if (!commentFound) {\n+                log.fine(\"PR is not yet ready - missing ready comment from '\" + readyComment.getKey() +\n+                        \"containing '\" + readyComment.getValue().pattern() + \"'\");\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n@@ -188,0 +231,3 @@\n+        if (!isOfInterest(pr)) {\n+            return List.of();\n+        }\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/PullRequestWorkItem.java","additions":47,"deletions":1,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -68,3 +68,1 @@\n-        var branchExists = pr.repository().branches().stream()\n-                         .map(HostedBranch::name)\n-                         .anyMatch(name -> name.equals(branch));\n+        var branchExists = pr.repository().branchHash(branch).isPresent();\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/prbranch\/PullRequestBranchNotifier.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -725,1 +725,1 @@\n-            var blankHistory = repo.branchHash(\"history\");\n+            var blankHistory = repo.branchHash(\"history\").orElseThrow();\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifierTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -157,2 +157,2 @@\n-    public Hash branchHash(String ref) {\n-        return null;\n+    public Optional<Hash> branchHash(String ref) {\n+        return Optional.empty();\n","filename":"bots\/tester\/src\/test\/java\/org\/openjdk\/skara\/bots\/tester\/InMemoryHostedRepository.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -90,1 +90,1 @@\n-    Hash branchHash(String ref);\n+    Optional<Hash> branchHash(String ref);\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/HostedRepository.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -740,1 +740,1 @@\n-        var targetHash = repository.branchHash(targetRef());\n+        var targetHash = repository.branchHash(targetRef()).orElseThrow();\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubPullRequest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -296,3 +296,8 @@\n-    public Hash branchHash(String ref) {\n-        var branch = request.get(\"branches\/\" + ref).execute();\n-        return new Hash(branch.get(\"commit\").get(\"sha\").asString());\n+    public Optional<Hash> branchHash(String ref) {\n+        var branch = request.get(\"branches\/\" + ref)\n+                .onError(r -> r.statusCode() == 404 ? Optional.of(JSON.object().put(\"NOT_FOUND\", true)) : Optional.empty())\n+                .execute();\n+        if (branch.contains(\"NOT_FOUND\")) {\n+            return Optional.empty();\n+        }\n+        return Optional.of(new Hash(branch.get(\"commit\").get(\"sha\").asString()));\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubRepository.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -817,1 +817,1 @@\n-        var targetHash = repository.branchHash(targetRef());\n+        var targetHash = repository.branchHash(targetRef()).orElseThrow();\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabMergeRequest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -334,3 +334,8 @@\n-    public Hash branchHash(String ref) {\n-        var branch = request.get(\"repository\/branches\/\" + ref).execute();\n-        return new Hash(branch.get(\"commit\").get(\"id\").asString());\n+    public Optional<Hash> branchHash(String ref) {\n+        var branch = request.get(\"repository\/branches\/\" + ref)\n+                .onError(r -> r.statusCode() == 404 ? Optional.of(JSON.object().put(\"NOT_FOUND\", true)) : Optional.empty())\n+                .execute();\n+        if (branch.contains(\"NOT_FOUND\")) {\n+            return Optional.empty();\n+        }\n+        return Optional.of(new Hash(branch.get(\"commit\").get(\"id\").asString()));\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabRepository.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -233,1 +233,1 @@\n-    public Hash branchHash(String ref) {\n+    public Optional<Hash> branchHash(String ref) {\n@@ -235,2 +235,1 @@\n-            var hash = localRepository.resolve(ref).orElseThrow();\n-            return hash;\n+            return localRepository.resolve(ref);\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestHostedRepository.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -261,1 +261,1 @@\n-            var baseHash = targetLocalRepository.mergeBase(sourceHash, targetRepository.branchHash(targetRef()));\n+            var baseHash = targetLocalRepository.mergeBase(sourceHash, targetRepository.branchHash(targetRef()).orElseThrow());\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestPullRequest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}