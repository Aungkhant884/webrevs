{"files":[{"patch":"@@ -61,1 +61,7 @@\n-                       ZonedDateTime maxUpdatedAt, Instant afterQuery, List<PullRequest> result) {}\n+                       ZonedDateTime maxUpdatedAt, Instant afterQuery, List<PullRequest> result,\n+                       \/*\n+                        * When enough time has passed since the last time we returned results, applying\n+                        * negative padding to the updatedAt query parameter is no longer needed. This\n+                        * is indicated using this boolean.\n+                        *\/\n+                       boolean negativePaddingNeeded) {}\n@@ -65,7 +71,0 @@\n-    \/**\n-     * When enough time has passed since the last time we returned results, applying\n-     * negative padding to the updatedAt query parameter is no longer needed. This\n-     * is indicated using this boolean.\n-     *\/\n-    private boolean negativePaddingNeeded = true;\n-\n@@ -113,5 +112,1 @@\n-        var withRetries = addRetries(filtered);\n-\n-        var result = processQuarantined(withRetries);\n-\n-        \/\/ If nothing is to be returned. Update the paddingNeeded state if enough time\n+        \/\/ If nothing was left after filtering. Update the paddingNeeded state if enough time\n@@ -119,4 +114,10 @@\n-        if (result.isEmpty()) {\n-            if (prev != null && prev.afterQuery.isBefore(beforeQuery.minus(negativeQueryPadding)\n-                    .minus(positiveQueryPadding))) {\n-                negativePaddingNeeded = false;\n+        boolean negativePaddingNeeded = true;\n+        if (filtered.isEmpty()) {\n+            if (prev != null) {\n+                \/\/ The afterQuery value that we save should be the time when we last\n+                \/\/ found something after filtering.\n+                afterQuery = prev.afterQuery;\n+                if (prev.afterQuery.isBefore(beforeQuery.minus(negativeQueryPadding)\n+                        .minus(positiveQueryPadding))) {\n+                    negativePaddingNeeded = false;\n+                }\n@@ -124,2 +125,0 @@\n-        } else {\n-            negativePaddingNeeded = true;\n@@ -128,0 +127,4 @@\n+        var withRetries = addRetries(filtered);\n+\n+        var result = processQuarantined(withRetries);\n+\n@@ -129,1 +132,1 @@\n-        current = new QueryResult(pullRequestMap, comparisonSnapshots, maxUpdatedAt, afterQuery, result);\n+        current = new QueryResult(pullRequestMap, comparisonSnapshots, maxUpdatedAt, afterQuery, result, negativePaddingNeeded);\n@@ -201,1 +204,1 @@\n-            var queryUpdatedAt = negativePaddingNeeded\n+            var queryUpdatedAt = prev.negativePaddingNeeded\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/PullRequestPoller.java","additions":24,"deletions":21,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -261,0 +261,5 @@\n+\n+    @Override\n+    public Duration timeStampQueryPrecision() {\n+        return Duration.ofSeconds(1);\n+    }\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabHost.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -212,0 +212,1 @@\n+            assertEquals(pr2.id(), prs.get(0).id());\n@@ -216,0 +217,1 @@\n+            assertEquals(pr2.id(), prs.get(0).id());\n@@ -321,0 +323,6 @@\n+\n+            \/\/ The same should happen again until we call lastBatchHandled()\n+            prs = prPoller.updatedPullRequests();\n+            assertEquals(0, prs.size());\n+            \/\/ The query should still return pr3\n+            assertTrue(prPoller.getCurrentQueryResult().pullRequests().containsKey(pr3.id()));\n@@ -330,0 +338,19 @@\n+\n+            \/\/ The same should happen again until we call lastBatchHandled()\n+            prs = prPoller.updatedPullRequests();\n+            assertEquals(1, prs.size());\n+            assertEquals(pr4.id(), prs.get(0).id());\n+            assertFalse(prPoller.getCurrentQueryResult().pullRequests().containsKey(pr3.id()));\n+            prPoller.lastBatchHandled();\n+\n+            \/\/ Since we got a result, positive padding should be disabled again.\n+            prs = prPoller.updatedPullRequests();\n+            assertEquals(0, prs.size());\n+            assertEquals(1, prPoller.getCurrentQueryResult().pullRequests().size());\n+            assertTrue(prPoller.getCurrentQueryResult().pullRequests().containsKey(pr4.id()));\n+\n+            \/\/ The same should happen again until we call lastBatchHandled()\n+            prs = prPoller.updatedPullRequests();\n+            assertEquals(0, prs.size());\n+            assertEquals(1, prPoller.getCurrentQueryResult().pullRequests().size());\n+            assertTrue(prPoller.getCurrentQueryResult().pullRequests().containsKey(pr4.id()));\n","filename":"forge\/src\/test\/java\/org\/openjdk\/skara\/forge\/PullRequestPollerTests.java","additions":27,"deletions":0,"binary":false,"changes":27,"status":"modified"}]}