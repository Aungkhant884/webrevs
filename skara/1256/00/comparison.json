{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,3 +55,3 @@\n-            Command.name(\"approve\")\n-                    .helptext(\"approve a pull request\")\n-                    .main(GitPrApprove::main),\n+            Command.name(\"review\")\n+                    .helptext(\"review a pull request\")\n+                    .main(GitPrReview::main),\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/GitPr.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1,85 +0,0 @@\n-\/*\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.skara.cli.pr;\n-\n-import org.openjdk.skara.args.*;\n-import org.openjdk.skara.forge.Review;\n-\n-import static org.openjdk.skara.cli.pr.Utils.*;\n-\n-import java.io.IOException;\n-import java.util.List;\n-\n-public class GitPrApprove {\n-    static final List<Flag> flags = List.of(\n-        Option.shortcut(\"u\")\n-              .fullname(\"username\")\n-              .describe(\"NAME\")\n-              .helptext(\"Username on host\")\n-              .optional(),\n-        Option.shortcut(\"r\")\n-              .fullname(\"remote\")\n-              .describe(\"NAME\")\n-              .helptext(\"Name of remote, defaults to 'origin'\")\n-              .optional(),\n-        Option.shortcut(\"m\")\n-              .fullname(\"message\")\n-              .describe(\"TEXT\")\n-              .helptext(\"Message to author as part of approval (e.g. \\\"Looks good!\\\")\")\n-              .optional(),\n-        Switch.shortcut(\"\")\n-              .fullname(\"verbose\")\n-              .helptext(\"Turn on verbose output\")\n-              .optional(),\n-        Switch.shortcut(\"\")\n-              .fullname(\"debug\")\n-              .helptext(\"Turn on debugging output\")\n-              .optional(),\n-        Switch.shortcut(\"\")\n-              .fullname(\"version\")\n-              .helptext(\"Print the version of this tool\")\n-              .optional()\n-    );\n-\n-    static final List<Input> inputs = List.of(\n-        Input.position(0)\n-             .describe(\"ID\")\n-             .singular()\n-             .optional()\n-    );\n-\n-    public static void main(String[] args) throws IOException {\n-        var parser = new ArgumentParser(\"git-pr\", flags, inputs);\n-        var arguments = parse(parser, args);\n-        var repo = getRepo();\n-        var uri = getURI(repo, arguments);\n-        var host = getForge(uri, repo, arguments);\n-        var id = pullRequestIdArgument(repo, arguments);\n-        var pr = getPullRequest(uri, repo, host, id);\n-\n-        var message = arguments.contains(\"message\") ?\n-            arguments.get(\"message\").asString() :\n-            null;\n-        pr.addReview(Review.Verdict.APPROVED, message);\n-    }\n-}\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/pr\/GitPrApprove.java","additions":0,"deletions":85,"binary":false,"changes":85,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import java.util.function.Function;\n@@ -67,1 +66,1 @@\n-        commands.put(\"approve\", Pair.of(GitPrApprove.inputs, GitPrApprove.flags));\n+        commands.put(\"review\", Pair.of(GitPrReview.inputs, GitPrReview.flags));\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/pr\/GitPrHelp.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,124 @@\n+\/*\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.cli.pr;\n+\n+import org.openjdk.skara.args.*;\n+import org.openjdk.skara.forge.Review;\n+\n+import static org.openjdk.skara.cli.pr.Utils.*;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+public class GitPrReview {\n+    static final List<Flag> flags = List.of(\n+        Option.shortcut(\"u\")\n+              .fullname(\"username\")\n+              .describe(\"NAME\")\n+              .helptext(\"Username on host\")\n+              .optional(),\n+        Option.shortcut(\"r\")\n+              .fullname(\"remote\")\n+              .describe(\"NAME\")\n+              .helptext(\"Name of remote, defaults to 'origin'\")\n+              .optional(),\n+        Option.shortcut(\"m\")\n+              .fullname(\"message\")\n+              .describe(\"TEXT\")\n+              .helptext(\"Message to author as part of review (e.g. \\\"Looks good!\\\")\")\n+              .optional(),\n+        Option.shortcut(\"t\")\n+              .fullname(\"type\")\n+              .describe(\"TEXT\")\n+              .helptext(\"Select the review type: 'approve' or 'request-changes' or 'comment'\")\n+              .required(),\n+        Switch.shortcut(\"\")\n+              .fullname(\"verbose\")\n+              .helptext(\"Turn on verbose output\")\n+              .optional(),\n+        Switch.shortcut(\"\")\n+              .fullname(\"debug\")\n+              .helptext(\"Turn on debugging output\")\n+              .optional(),\n+        Switch.shortcut(\"\")\n+              .fullname(\"version\")\n+              .helptext(\"Print the version of this tool\")\n+              .optional()\n+    );\n+\n+    static final List<Input> inputs = List.of(\n+        Input.position(0)\n+             .describe(\"ID\")\n+             .singular()\n+             .optional()\n+    );\n+\n+    public static void main(String[] args) throws IOException {\n+        var parser = new ArgumentParser(\"git-pr\", flags, inputs);\n+        var arguments = parse(parser, args);\n+        var repo = getRepo();\n+        var uri = getURI(repo, arguments);\n+        var host = getForge(uri, repo, arguments);\n+        var id = pullRequestIdArgument(repo, arguments);\n+        var pr = getPullRequest(uri, repo, host, id);\n+\n+        var message = arguments.contains(\"message\") ?\n+            arguments.get(\"message\").asString() :\n+            null;\n+        var type = arguments.get(\"type\").asString();\n+        checkType(type, parser);\n+        if (\"approve\".equals(type)) {\n+            pr.addReview(Review.Verdict.APPROVED, message);\n+        } else if (\"request-changes\".equals(type)) {\n+            checkMessage(message, type, parser);\n+            pr.addReview(Review.Verdict.DISAPPROVED, message);\n+        } else if (\"comment\".equals(type)) {\n+            checkMessage(message, type, parser);\n+            pr.addReview(Review.Verdict.NONE, message);\n+        }\n+    }\n+\n+    \/**\n+     * The message can't be null if the type is `request-change` or `comment`.\n+     *\/\n+    public static void checkMessage(String message, String type, ArgumentParser parser) {\n+        if (message == null) {\n+            System.err.println(\"error: the option 'message' missed. Need to provide the 'message' if the 'type' is '\" + type + \"'.\");\n+            parser.showUsage();\n+            System.exit(1);\n+        }\n+    }\n+\n+    \/**\n+     * The type need to be `approve` or `request-change` or `comment`.\n+     *\/\n+    public static void checkType(String type, ArgumentParser parser) {\n+        if (\"approve\".equals(type) || \"request-changes\".equals(type) || \"comment\".equals(type)) {\n+            return;\n+        }\n+        System.err.println(\"error: incorrect review 'type': '\" + type\n+                + \"'. Supported review types:  \\\"approve\\\", \\\"request-changes\\\" or \\\"comment\\\".\");\n+        parser.showUsage();\n+        System.exit(1);\n+    }\n+}\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/pr\/GitPrReview.java","additions":124,"deletions":0,"binary":false,"changes":124,"status":"added"}]}