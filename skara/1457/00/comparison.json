{"files":[{"patch":"@@ -72,0 +72,1 @@\n+    private final boolean requiresReviewForBackport;\n@@ -77,1 +78,1 @@\n-                     CensusInstance censusInstance, boolean ignoreStaleReviews, Set<String> integrators) throws IOException {\n+                     CensusInstance censusInstance, boolean ignoreStaleReviews, Set<String> integrators, boolean requiresReviewForBackport) throws IOException {\n@@ -89,0 +90,1 @@\n+        this.requiresReviewForBackport = requiresReviewForBackport;\n@@ -99,2 +101,3 @@\n-                        boolean ignoreStaleReviews, Set<String> integrators) throws IOException {\n-        var run = new CheckRun(workItem, pr, localRepo, comments, allReviews, activeReviews, labels, censusInstance, ignoreStaleReviews, integrators);\n+                        boolean ignoreStaleReviews, Set<String> integrators, boolean requiresReviewForBackport) throws IOException {\n+        var run = new CheckRun(workItem, pr, localRepo, comments, allReviews, activeReviews, labels, censusInstance,\n+                ignoreStaleReviews, integrators, requiresReviewForBackport);\n@@ -517,2 +520,2 @@\n-    private String getChecksList(PullRequestCheckIssueVisitor visitor, boolean isCleanBackport, Map<String, Boolean> additionalProgresses) {\n-        var checks = isCleanBackport ? visitor.getReadyForReviewChecks() : visitor.getChecks();\n+    private String getChecksList(PullRequestCheckIssueVisitor visitor, boolean noNeedReview, Map<String, Boolean> additionalProgresses) {\n+        var checks = noNeedReview ? visitor.getReadyForReviewChecks() : visitor.getChecks();\n@@ -610,1 +613,1 @@\n-                                    List<String> integrationBlockers, boolean isCleanBackport) {\n+                                    List<String> integrationBlockers, boolean noNeedReview) {\n@@ -614,1 +617,1 @@\n-        progressBody.append(getChecksList(visitor, isCleanBackport, additionalProgresses));\n+        progressBody.append(getChecksList(visitor, noNeedReview, additionalProgresses));\n@@ -1157,0 +1160,2 @@\n+            var noNeedReview = isCleanBackport && !requiresReviewForBackport;\n+\n@@ -1158,1 +1163,1 @@\n-            var statusMessage = getStatusMessage(visitor, additionalErrors, additionalProgresses, integrationBlockers, isCleanBackport);\n+            var statusMessage = getStatusMessage(visitor, additionalErrors, additionalProgresses, integrationBlockers, noNeedReview);\n@@ -1169,2 +1174,2 @@\n-            if (isCleanBackport) {\n-                \/\/ Reviews are not needed for clean backports\n+            if (noNeedReview) {\n+                \/\/ Reviews are not needed for clean backports if this repo is not configured with requiresReviewForBackport enabled\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":15,"deletions":10,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -410,1 +410,2 @@\n-                var expiresAt = CheckRun.execute(this, pr, localRepo, comments, allReviews, activeReviews, labels, census, bot.ignoreStaleReviews(), bot.integrators());\n+                var expiresAt = CheckRun.execute(this, pr, localRepo, comments, allReviews,\n+                        activeReviews, labels, census, bot.ignoreStaleReviews(), bot.integrators(), bot.requiresReviewForBackport());\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckWorkItem.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -67,0 +67,1 @@\n+    private final boolean requiresReviewForBackport;\n@@ -78,1 +79,2 @@\n-                   Set<String> integrators, Set<Integer> excludeCommitCommentsFrom, boolean enableCsr, boolean enableJep) {\n+                   Set<String> integrators, Set<Integer> excludeCommitCommentsFrom, boolean enableCsr, boolean enableJep,\n+                   boolean requiresReviewForBackport) {\n@@ -103,1 +105,1 @@\n-\n+        this.requiresReviewForBackport = requiresReviewForBackport;\n@@ -265,0 +267,4 @@\n+    public boolean requiresReviewForBackport() {\n+        return requiresReviewForBackport;\n+    }\n+\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBot.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -58,0 +58,1 @@\n+    private boolean requiresReviewForBackport = false;\n@@ -182,0 +183,5 @@\n+    public PullRequestBotBuilder requiresReviewForBackport(boolean requiresReviewForBackport) {\n+        this.requiresReviewForBackport = requiresReviewForBackport;\n+        return this;\n+    }\n+\n@@ -188,1 +194,2 @@\n-                                  confOverrideRef, censusLink, forks, integrators, excludeCommitCommentsFrom, enableCsr, enableJep);\n+                                  confOverrideRef, censusLink, forks, integrators, excludeCommitCommentsFrom,\n+                                  enableCsr, enableJep, requiresReviewForBackport);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBotBuilder.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -174,0 +174,3 @@\n+            if (repo.value().contains(\"requiresReviewForBackport\")) {\n+                botBuilder.requiresReviewForBackport(repo.value().get(\"requiresReviewForBackport\").asBoolean());\n+            }\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBotFactory.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1676,0 +1676,102 @@\n+                var m = pattern.matcher(line);\n+                if (m.matches()) {\n+                    hex = m.group(1);\n+                    break;\n+                }\n+            }\n+            assertNotNull(hex);\n+            assertEquals(40, hex.length());\n+            localRepo.checkout(localRepo.defaultBranch());\n+            localRepo.pull(author.url().toString(), \"master\", false);\n+            var commit = localRepo.lookup(new Hash(hex)).orElseThrow();\n+\n+            var message = CommitMessageParsers.v1.parse(commit);\n+            assertEquals(1, message.issues().size());\n+            assertEquals(\"An issue\", message.issues().get(0).description());\n+            assertEquals(List.of(\"integrationreviewer3\"), message.reviewers());\n+            assertEquals(Optional.of(releaseHash), message.original());\n+            assertEquals(List.of(), message.contributors());\n+            assertEquals(List.of(), message.summaries());\n+            assertEquals(List.of(), message.additional());\n+        }\n+    }\n+\n+    @Test\n+    void cleanBackportRequiresReview(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+\n+            var author = credentials.getHostedRepository();\n+            var integrator = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var issues = credentials.getIssueProject();\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addCommitter(author.forge().currentUser().id())\n+                    .addReviewer(integrator.forge().currentUser().id())\n+                    .addReviewer(reviewer.forge().currentUser().id());\n+            var bot = PullRequestBot.newBuilder()\n+                    .repo(integrator)\n+                    .censusRepo(censusBuilder.build())\n+                    .issueProject(issues)\n+                    .requiresReviewForBackport(true)\n+                    .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            var releaseBranch = localRepo.branch(masterHash, \"release\");\n+            localRepo.checkout(releaseBranch);\n+            var newFile = localRepo.root().resolve(\"a_new_file.txt\");\n+            Files.writeString(newFile, \"hello\");\n+            localRepo.add(newFile);\n+            var issue1 = credentials.createIssue(issues, \"An issue\");\n+            var issue1Number = issue1.id().split(\"-\")[1];\n+            var originalMessage = issue1Number + \": An issue\\n\" +\n+                    \"\\n\" +\n+                    \"Reviewed-by: integrationreviewer2\";\n+            var releaseHash = localRepo.commit(originalMessage, \"integrationcommitter1\", \"integrationcommitter1@openjdk.org\");\n+            localRepo.push(releaseHash, author.url(), \"refs\/heads\/release\", true);\n+\n+            \/\/ \"backport\" the new file to the master branch\n+            localRepo.checkout(localRepo.defaultBranch());\n+            var editBranch = localRepo.branch(masterHash, \"edit\");\n+            localRepo.checkout(editBranch);\n+            var newFile2 = localRepo.root().resolve(\"a_new_file.txt\");\n+            Files.writeString(newFile2, \"hello\");\n+            localRepo.add(newFile2);\n+            var editHash = localRepo.commit(\"Backport\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(editHash, author.url(), \"refs\/heads\/edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"Backport \" + releaseHash.hex());\n+\n+            \/\/ The bot should reply with a backport message and that the PR is not ready\n+            TestBotRunner.runPeriodicItems(bot);\n+            var backportComment = pr.comments().get(0).body();\n+            assertTrue(backportComment.contains(\"This backport pull request has now been updated with issue\"));\n+            assertTrue(backportComment.contains(\"<!-- backport \" + releaseHash.hex() + \" -->\"));\n+            assertEquals(issue1Number + \": An issue\", pr.store().title());\n+            assertTrue(pr.store().labelNames().contains(\"rfr\"));\n+            assertTrue(pr.store().labelNames().contains(\"clean\"));\n+            assertTrue(pr.store().labelNames().contains(\"backport\"));\n+            assertTrue(pr.store().body().contains(\"Change must be properly reviewed\"));\n+\n+            \/\/ Approve this pr as a reviewer\n+            var approvalPr = reviewer.pullRequest(pr.id());\n+            approvalPr.addReview(Review.Verdict.APPROVED, \"Approved\");\n+            TestBotRunner.runPeriodicItems(bot);\n+            assertTrue(pr.store().labelNames().contains(\"ready\"));\n+\n+            \/\/ Integrate\n+            author.pullRequest(pr.id());\n+            pr.addComment(\"\/integrate\");\n+            TestBotRunner.runPeriodicItems(bot);\n+\n+            \/\/ Find the commit\n+            assertLastCommentContains(pr, \"Pushed as commit\");\n+\n+            String hex = null;\n+            var comment = pr.comments().get(pr.comments().size() - 1);\n+            var lines = comment.body().split(\"\\n\");\n+            var pattern = Pattern.compile(\".* Pushed as commit ([0-9a-z]{40}).*\");\n+            for (var line : lines) {\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/BackportTests.java","additions":102,"deletions":0,"binary":false,"changes":102,"status":"modified"},{"patch":"@@ -80,1 +80,2 @@\n-                          ]\n+                          ],\n+                          \"requiresReviewForBackport\": true\n@@ -123,0 +124,1 @@\n+            assertTrue(pullRequestBot1.requiresReviewForBackport());\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBotFactoryTest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}