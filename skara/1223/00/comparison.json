{"files":[{"patch":"@@ -179,1 +179,1 @@\n-                    pending.put(item, Optional.empty());\n+                    addPending(item, null);\n@@ -211,1 +211,1 @@\n-                active.remove(item);\n+                done(item);\n@@ -232,4 +232,2 @@\n-                        pending.remove(candidate);\n-                        RunnableWorkItem runnableWorkItem = new RunnableWorkItem(candidate);\n-                        executor.submit(runnableWorkItem);\n-                        active.put(candidate, runnableWorkItem);\n+                        removePending(candidate);\n+                        submit(candidate);\n@@ -253,0 +251,10 @@\n+    \/**\n+     * Gauge that tracks the number of active WorkItems for each kind\n+     *\/\n+    private final Gauge.WithTwoLabels activeGauge =\n+            Gauge.name(\"skara_runner_active\").labels(\"bot\", \"work_item\").register();\n+    \/**\n+     * Gauge that tracks the number of pending WorkItems for each kind\n+     *\/\n+    private final Gauge.WithTwoLabels pendingGauge =\n+            Gauge.name(\"skara_runner_pending\").labels(\"bot\", \"work_item\").register();\n@@ -266,1 +274,1 @@\n-                            pending.remove(pendingItem);\n+                            removePending(pendingItem);\n@@ -272,1 +280,1 @@\n-                    pending.put(item, Optional.of(activeItem));\n+                    addPending(item, activeItem);\n@@ -277,3 +285,1 @@\n-            RunnableWorkItem runnableWorkItem = new RunnableWorkItem(item);\n-            executor.submit(runnableWorkItem);\n-            active.put(item, runnableWorkItem);\n+            submit(item);\n@@ -283,0 +289,36 @@\n+    \/**\n+     * Called to add a WorkItem to the pending queue\n+     * @param item Item to queue\n+     * @param activeItem Optional active item that this item is waiting for\n+     *\/\n+    private void addPending(WorkItem item, WorkItem activeItem) {\n+        pending.put(item, Optional.ofNullable(activeItem));\n+        pendingGauge.labels(item.botName(), item.workItemName()).inc();\n+    }\n+\n+    \/**\n+     * Called to remove an item from the pending queue.\n+     *\/\n+    private void removePending(WorkItem item) {\n+        pending.remove(item);\n+        pendingGauge.labels(item.botName(), item.workItemName()).dec();\n+    }\n+\n+    \/**\n+     * Called to submit a WorkItem for execution\n+     *\/\n+    private void submit(WorkItem item) {\n+        RunnableWorkItem runnableWorkItem = new RunnableWorkItem(item);\n+        executor.submit(runnableWorkItem);\n+        active.put(item, runnableWorkItem);\n+        activeGauge.labels(item.botName(), item.workItemName()).inc();\n+    }\n+\n+    \/**\n+     * Called when a WorkItem is done executing\n+     *\/\n+    private void done(WorkItem item) {\n+        active.remove(item);\n+        activeGauge.labels(item.botName(), item.workItemName()).dec();\n+    }\n+\n","filename":"bot\/src\/main\/java\/org\/openjdk\/skara\/bot\/BotRunner.java","additions":53,"deletions":11,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-        return !repo.webUrl().equals(((CSRBot) other).repo.webUrl());\n+        return !repo.isSame(((CSRBot) other).repo);\n","filename":"bots\/csr\/src\/main\/java\/org\/openjdk\/skara\/bots\/csr\/CSRBot.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-        if (!(other instanceof CommitCommandWorkItem)) {\n+        if (!(other instanceof CommitCommandWorkItem otherItem)) {\n@@ -87,2 +87,1 @@\n-        CommitCommandWorkItem otherItem = (CommitCommandWorkItem) other;\n-        if (!bot.repo().webUrl().equals(otherItem.bot.repo().webUrl())) {\n+        if (!bot.repo().isSame(otherItem.bot.repo())) {\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CommitCommandWorkItem.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -52,1 +52,7 @@\n-        return true;\n+        if (!(other instanceof CommitCommentsWorkItem otherItem)) {\n+            return true;\n+        }\n+        if (!repo.isSame(otherItem.repo)) {\n+            return true;\n+        }\n+        return false;\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CommitCommentsWorkItem.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -134,0 +134,7 @@\n+\n+    \/**\n+     * Returns true if this HostedRepository represents the same repo as the other.\n+     *\/\n+    default boolean isSame(HostedRepository other) {\n+        return name().equals(other.name()) && forge().name().equals(other.forge().name());\n+    }\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/HostedRepository.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -171,3 +171,1 @@\n-        return id().equals(other.id())\n-                && repository().name().equals(other.repository().name())\n-                && repository().forge().name().equals(other.repository().forge().name());\n+        return id().equals(other.id()) && repository().isSame(other.repository());\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/PullRequest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"}]}