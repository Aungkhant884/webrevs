{"files":[{"patch":"@@ -34,0 +34,13 @@\n+\/**\n+ * The TestInfoBot copies 'checks' from the source repository of a PR to the\n+ * PR itself. In GitHub, these checks are usually workflow\/action runs which\n+ * users may have activated on their personal forks. By copying them to a PR,\n+ * reviewers can easily see the status of the last workflow runs directly in\n+ * the PR.\n+ * <p>\n+ * The bot polls for work using the standard PullRequestPoller, so will\n+ * process any updated PR. Depending on the outcome of this processing, the\n+ * TestInfoBotWorkItem calls back to the bot with a re-check request which\n+ * causes the bot to submit that PR again after the specified amount of time,\n+ * or earlier if another change the PR has been detected.\n+ *\/\n@@ -36,3 +49,1 @@\n-    private final Map<String, Instant> expirations = new ConcurrentHashMap<>();\n-\n-    private static final Logger log = Logger.getLogger(\"org.openjdk.skara.bots\");\n+    private final PullRequestPoller poller;\n@@ -42,4 +53,1 @@\n-    }\n-\n-    private String pullRequestToKey(PullRequest pr) {\n-        return pr.id() + \"#\" + pr.headHash().hex();\n+        this.poller = new PullRequestPoller(repo, true);\n@@ -50,18 +58,6 @@\n-        var prs = repo.pullRequestsAfter(ZonedDateTime.now().minus(Duration.ofDays(1)));\n-        var ret = new ArrayList<WorkItem>();\n-        for (var pr : prs) {\n-            if (pr.sourceRepository().isEmpty()) {\n-                continue;\n-            }\n-\n-            var expirationKey = pullRequestToKey(pr);\n-            if (expirations.containsKey(expirationKey)) {\n-                var expiresAt = expirations.get(expirationKey);\n-                if (expiresAt.isAfter(Instant.now())) {\n-                    continue;\n-                }\n-            }\n-\n-            ret.add(new TestInfoBotWorkItem(pr, expiresIn -> expirations.put(expirationKey, Instant.now().plus(expiresIn))));\n-        }\n-        return ret;\n+        var prs = poller.updatedPullRequests();\n+        return prs.stream()\n+                .filter(pr -> pr.sourceRepository().isPresent())\n+                .map(pr -> (WorkItem) new TestInfoBotWorkItem(pr,\n+                        recheckIn -> poller.retryPullRequest(pr, Instant.now().plus(recheckIn))))\n+                .toList();\n","filename":"bots\/testinfo\/src\/main\/java\/org\/openjdk\/skara\/bots\/testinfo\/TestInfoBot.java","additions":21,"deletions":25,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -36,1 +36,4 @@\n-    private final Consumer<Duration> expiresIn;\n+    \/\/ This is a callback to the bot telling it that this PR needs a recheck after the\n+    \/\/ specified duration. If this isn't called, then the PR will only be rechecked if\n+    \/\/ it is updated by someone else.\n+    private final Consumer<Duration> recheckIn;\n@@ -39,1 +42,1 @@\n-    TestInfoBotWorkItem(PullRequest pr, Consumer<Duration> expiresIn) {\n+    TestInfoBotWorkItem(PullRequest pr, Consumer<Duration> recheckIn) {\n@@ -41,1 +44,1 @@\n-        this.expiresIn = expiresIn;\n+        this.recheckIn = recheckIn;\n@@ -84,1 +87,5 @@\n-        var sourceRepo = pr.sourceRepository().get();\n+        Optional<HostedRepository> optionalSourceRepository = pr.sourceRepository();\n+        if (optionalSourceRepository.isEmpty()) {\n+            return List.of();\n+        }\n+        var sourceRepo = optionalSourceRepository.get();\n@@ -93,1 +100,6 @@\n-                expiresIn.accept(Duration.ofMinutes(2));\n+            }\n+            \/\/ It's pretty unlikely that a user suddenly enables workflows. I think we\n+            \/\/ can be pretty lax with automatically discovering this. Touching the PR\n+            \/\/ will always trigger an immediate recheck anyway.\n+            if (pr.isOpen()) {\n+                recheckIn.accept(Duration.ofMinutes(30));\n@@ -100,1 +112,2 @@\n-                \/\/ No test related checks found, they may not have started yet, so we'll keep looking\n+                \/\/ No test related checks found, they may not have started yet, so we'll keep\n+                \/\/ looking as long as the PR is open.\n@@ -102,1 +115,3 @@\n-                expiresIn.accept(Duration.ofMinutes(2));\n+                if (pr.isOpen()) {\n+                    recheckIn.accept(Duration.ofMinutes(2));\n+                }\n@@ -104,1 +119,15 @@\n-                expiresIn.accept(TestResults.expiresIn(sourceChecks).orElse(Duration.ofMinutes(30)));\n+                Optional<Duration> expiresIn = TestResults.expiresIn(sourceChecks);\n+                if (expiresIn.isPresent()) {\n+                    \/\/ Workflow is currently running, recheck often to update, but revert\n+                    \/\/ to longer recheck intervals if the PR hasn't been updated in the\n+                    \/\/ last 24h and is still open.\n+                    if (pr.updatedAt().isAfter(ZonedDateTime.now().minus(Duration.ofDays(1)))) {\n+                        recheckIn.accept(expiresIn.get());\n+                    } else if (pr.isOpen()) {\n+                        recheckIn.accept(Duration.ofMinutes(30));\n+                    }\n+                } else if (pr.isOpen()) {\n+                    \/\/ All current checks are finished, as long as PR is open, keep rechecking\n+                    \/\/ at regular, but much longer intervals.\n+                    recheckIn.accept(Duration.ofMinutes(30));\n+                }\n","filename":"bots\/testinfo\/src\/main\/java\/org\/openjdk\/skara\/bots\/testinfo\/TestInfoBotWorkItem.java","additions":37,"deletions":8,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+import java.util.List;\n@@ -6,0 +7,1 @@\n+import org.openjdk.skara.test.TestHost;\n@@ -23,0 +25,1 @@\n+        var testHost = TestHost.createNew(List.of());\n@@ -24,2 +27,2 @@\n-                .addHostedRepository(\"repo1\", new TestHostedRepository(\"repo1\"))\n-                .addHostedRepository(\"repo2\", new TestHostedRepository(\"repo2\"))\n+                .addHostedRepository(\"repo1\", new TestHostedRepository(testHost, \"repo1\"))\n+                .addHostedRepository(\"repo2\", new TestHostedRepository(testHost, \"repo2\"))\n","filename":"bots\/testinfo\/src\/test\/java\/org\/openjdk\/skara\/bots\/testinfo\/TestInfoBotFactoryTest.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-            var author = credentials.getHostedRepository();\n+            var author = (TestHostedRepository) credentials.getHostedRepository();\n@@ -50,1 +50,1 @@\n-            \/\/ Make a draft PR where we can add some checks\n+            \/\/ Add some checks to the repository\n@@ -53,1 +53,0 @@\n-            var draftPr = credentials.createPullRequest(author, \"master\", \"preedit\", \"This is a pull request\", true);\n@@ -55,2 +54,1 @@\n-            draftPr.createCheck(check1.build());\n-            draftPr.updateCheck(check1.complete(true).build());\n+            author.createCheck(check1.complete(true).build());\n@@ -58,2 +56,1 @@\n-            draftPr.createCheck(check2.build());\n-            draftPr.updateCheck(check2.complete(false).build());\n+            author.createCheck(check2.complete(false).build());\n@@ -61,2 +58,1 @@\n-            draftPr.createCheck(check3.build());\n-            draftPr.updateCheck(check3.details(URI.create(\"https:\/\/www.example.com\")).complete(false).build());\n+            author.createCheck(check3.details(URI.create(\"https:\/\/www.example.com\")).complete(false).build());\n@@ -64,2 +60,1 @@\n-            draftPr.createCheck(check4.build());\n-            draftPr.updateCheck(check4.details(URI.create(\"https:\/\/www.example.com\")).build());\n+            author.createCheck(check4.details(URI.create(\"https:\/\/www.example.com\")).build());\n@@ -67,1 +62,1 @@\n-            \/\/ Now make an actual PR\n+            \/\/ Now make a PR\n@@ -95,1 +90,1 @@\n-            var author = credentials.getHostedRepository();\n+            var author = (TestHostedRepository) credentials.getHostedRepository();\n@@ -104,1 +99,1 @@\n-            \/\/ Make a draft PR where we can add some checks\n+            \/\/ Add a check to the repository\n@@ -107,1 +102,0 @@\n-            var draftPr1 = credentials.createPullRequest(author, \"master\", \"preedit\", \"This is a pull request\", true);\n@@ -109,2 +103,1 @@\n-            draftPr1.createCheck(check1.build());\n-            draftPr1.updateCheck(check1.complete(true).build());\n+            author.createCheck(check1.complete(true).build());\n@@ -126,1 +119,0 @@\n-            var draftPr2 = credentials.createPullRequest(author, \"master\", \"preedit\", \"This is a pull request\", true);\n@@ -128,2 +120,1 @@\n-            draftPr2.createCheck(check2.build());\n-            draftPr2.updateCheck(check2.complete(false).build());\n+            author.createCheck(check2.complete(false).build());\n","filename":"bots\/testinfo\/src\/test\/java\/org\/openjdk\/skara\/bots\/testinfo\/TestInfoTests.java","additions":11,"deletions":20,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+    private final Set<Check> checks = new HashSet<>();\n@@ -312,3 +313,11 @@\n-        return host.getPullRequests(this).stream()\n-                   .flatMap(testPr -> testPr.checks(hash).values().stream())\n-                   .collect(Collectors.toList());\n+        return checks.stream()\n+                .filter(check -> check.hash().equals(hash))\n+                .toList();\n+    }\n+\n+    public void createCheck(Check check) {\n+        var existing = checks.stream()\n+                .filter(c -> c.name().equals(check.name()))\n+                .findAny();\n+        existing.ifPresent(checks::remove);\n+        checks.add(check);\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestHostedRepository.java","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"}]}