{"files":[{"patch":"@@ -132,1 +132,1 @@\n-        \/\/ If the current labels matches at least two members of a group, use the group instead\n+        \/\/ If the current labels matches at least two members of a group, use the group\n@@ -140,1 +140,0 @@\n-                        ret.removeAll(group.getValue());\n@@ -146,0 +145,9 @@\n+\n+        \/\/ Finally remove all group members for any group that has been matched (note that a group can\n+        \/\/ also have individual rules and be matched in the first step).\n+        for (var group : groups.entrySet()) {\n+            if (ret.contains(group.getKey())) {\n+                ret.removeAll(group.getValue());\n+            }\n+        }\n+\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/LabelConfigurationJson.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -62,0 +62,16 @@\n+\n+    @Test\n+    void groupAndSingle() {\n+        var config = LabelConfigurationJson.builder()\n+                                           .addMatchers(\"1\", List.of(Pattern.compile(\"cpp$\")))\n+                                           .addMatchers(\"both\", List.of(Pattern.compile(\"hpp$\")))\n+                                           .addGroup(\"both\", List.of(\"1\", \"2\"))\n+                                           .build();\n+\n+        assertEquals(Set.of(\"1\", \"both\"), config.allowed());\n+\n+        assertEquals(Set.of(\"1\"), config.label(Set.of(Path.of(\"a.cpp\"))));\n+        assertEquals(Set.of(\"both\"), config.label(Set.of(Path.of(\"a.hpp\"))));\n+        assertEquals(Set.of(\"both\"), config.label(Set.of(Path.of(\"a.cpp\"), Path.of(\"a.hpp\"))));\n+\n+    }\n","filename":"forge\/src\/test\/java\/org\/openjdk\/skara\/forge\/LabelConfigurationTests.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"}]}