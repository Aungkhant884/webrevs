{"files":[{"patch":"@@ -224,1 +224,15 @@\n-                localStorage.push(hash, remote, storageRef);\n+                var retryCount = 0;\n+                while (true) {\n+                    try {\n+                        localStorage.push(hash, remote, storageRef);\n+                        break;\n+                    } catch (IOException e) {\n+                        retryCount++;\n+                        if (retryCount > 5) {\n+                            throw e;\n+                        }\n+                        var updated = localStorage.fetch(remote, storageRef);\n+                        localStorage.rebase(updated, author.fullName().orElseThrow(), author.address());\n+                        hash = localStorage.head();\n+                    }\n+                }\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/WebrevStorage.java","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+import org.openjdk.skara.forge.HostedRepository;\n@@ -27,1 +28,1 @@\n-import org.openjdk.skara.vcs.Repository;\n+import org.openjdk.skara.vcs.*;\n@@ -31,1 +32,2 @@\n-import java.io.IOException;\n+import java.io.*;\n+import java.nio.charset.StandardCharsets;\n@@ -33,0 +35,1 @@\n+import java.util.UUID;\n@@ -133,0 +136,92 @@\n+\n+    private static class InterceptingHash extends Hash {\n+        private final Path generatorPath;\n+        private final Path scratchPath;\n+        private final HostedRepository archive;\n+        private final String ref;\n+\n+        private boolean hasIntercepted = false;\n+\n+        public InterceptingHash(String hex, Path generatorPath, Path scratchPath, HostedRepository archive, String ref) {\n+            super(hex);\n+\n+            this.generatorPath = generatorPath;\n+            this.scratchPath = scratchPath;\n+            this.archive = archive;\n+            this.ref = ref;\n+        }\n+\n+        @Override\n+        public String hex() {\n+            if (Files.exists(generatorPath)) {\n+                if (hasIntercepted) {\n+                    return super.hex();\n+                }\n+\n+                try {\n+                    var repo = Repository.materialize(scratchPath, archive.url(), ref);\n+                    Files.writeString(repo.root().resolve(\"intercept.txt\"), UUID.randomUUID().toString(), StandardCharsets.UTF_8);\n+                    repo.add(repo.root().resolve(\"intercept.txt\"));\n+                    var commit = repo.commit(\"Concurrent unrelated commit\", \"duke\", \"duke@openjdk.org\");\n+                    repo.push(commit, archive.url(), ref);\n+                    hasIntercepted = true;\n+                } catch (IOException e) {\n+                    throw new UncheckedIOException(e);\n+                }\n+                System.out.println(\"Pushing an unrelated commit to the archive repo\");\n+            } else {\n+                hasIntercepted = false;\n+            }\n+            return super.hex();\n+        }\n+    }\n+\n+    @Test\n+    void retryConcurrentPush(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory();\n+             var webrevServer = new TestWebrevServer()) {\n+            var author = credentials.getHostedRepository();\n+            var archive = credentials.getHostedRepository();\n+\n+            \/\/ Populate the projects repository\n+            var reviewFile = Path.of(\"reviewfile.txt\");\n+            var repoFolder = tempFolder.path().resolve(\"repo\");\n+            var localRepo = CheckableRepository.init(repoFolder, author.repositoryType(), reviewFile);\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+            localRepo.push(masterHash, archive.url(), \"webrev\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"edit\", true);\n+            var pr = credentials.createPullRequest(archive, \"master\", \"edit\", \"This is a pull request\");\n+            pr.addLabel(\"rfr\");\n+            pr.setBody(\"This is now ready\");\n+\n+            var from = EmailAddress.from(\"test\", \"test@test.mail\");\n+            var storage = new WebrevStorage(archive, \"webrev\", Path.of(\"test\"),\n+                                            webrevServer.uri(), from);\n+\n+            var prFolder = tempFolder.path().resolve(\"pr\");\n+            var prRepo = Repository.materialize(prFolder, pr.repository().url(), \"edit\");\n+            var scratchFolder = tempFolder.path().resolve(\"scratch\");\n+            var generatorProgressMarker = scratchFolder.resolve(\"test\/\" + pr.id() + \"\/00\/nanoduke.ico\");\n+            var generator = storage.generator(pr, prRepo, scratchFolder);\n+\n+            \/\/ Commit something during generation\n+            var interceptFolder = tempFolder.path().resolve(\"intercept\");\n+            var interceptEditHash = new InterceptingHash(editHash.hex(),\n+                                                         generatorProgressMarker,\n+                                                         interceptFolder, archive, \"webrev\");\n+            generator.generate(masterHash, interceptEditHash, \"00\", WebrevDescription.Type.FULL);\n+\n+            \/\/ Update the local repository and check that the webrev has been generated\n+            var archiveRepo = Repository.materialize(repoFolder, archive.url(), \"webrev\");\n+            assertTrue(Files.exists(repoFolder.resolve(\"test\/\" + pr.id() + \"\/00\/index.html\")));\n+\n+            \/\/ The intercepting commit should be present in the history\n+            assertTrue(archiveRepo.commitMetadata().stream()\n+                                  .anyMatch(cm -> cm.message().get(0).equals(\"Concurrent unrelated commit\")));\n+        }\n+    }\n","filename":"bots\/mlbridge\/src\/test\/java\/org\/openjdk\/skara\/bots\/mlbridge\/WebrevStorageTests.java","additions":97,"deletions":2,"binary":false,"changes":99,"status":"modified"}]}