{"files":[{"patch":"@@ -270,12 +270,0 @@\n-\n-                        var related = Backports.findBackports(issue, true);\n-                        var allIssues = new ArrayList<Issue>();\n-                        allIssues.add(issue);\n-                        allIssues.addAll(related);\n-\n-                        var duplicates = Backports.releaseStreamDuplicates(allIssues);\n-                        for (var i : duplicates) {\n-                            if (!i.labels().contains(\"hgupdate-sync\")) {\n-                                i.addLabel(\"hgupdate-sync\");\n-                            }\n-                        }\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifier.java","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -874,52 +874,0 @@\n-\n-    @Test\n-    void testSyncLabels(TestInfo testInfo) throws IOException {\n-        try (var credentials = new HostCredentials(testInfo);\n-             var tempFolder = new TemporaryDirectory()) {\n-            var repo = credentials.getHostedRepository();\n-            var repoFolder = tempFolder.path().resolve(\"repo\");\n-            var localRepo = CheckableRepository.init(repoFolder, repo.repositoryType());\n-            credentials.commitLock(localRepo);\n-            localRepo.pushAll(repo.url());\n-\n-            var storageFolder = tempFolder.path().resolve(\"storage\");\n-            var issueProject = credentials.getIssueProject();\n-            var jbsNotifierConfig = JSON.object().put(\"fixversions\", JSON.object().put(\"master\", \"8u192\"));\n-            var notifyBot = testBotBuilder(repo, issueProject, storageFolder, jbsNotifierConfig).create(\"notify\", JSON.object());\n-\n-            \/\/ Initialize database\n-            TestBotRunner.runPeriodicItems(notifyBot);\n-\n-            var issue1 = credentials.createIssue(issueProject, \"Issue 1\");\n-            issue1.setProperty(\"issuetype\", JSON.of(\"Bug\"));\n-            issue1.setState(RESOLVED);\n-\n-            var issue2 = credentials.createIssue(issueProject, \"Issue 2\");\n-            issue2.setProperty(\"fixVersions\", JSON.array().add(JSON.of(\"8u162\")));\n-            issue2.setProperty(\"issuetype\", JSON.of(\"Backport\"));\n-            issue2.setState(RESOLVED);\n-            issue1.addLink(Link.create(issue2, \"backported by\").build());\n-\n-            var issue3 = credentials.createIssue(issueProject, \"Issue 3\");\n-            issue3.setProperty(\"fixVersions\", JSON.array().add(JSON.of(\"10\")));\n-            issue3.setProperty(\"issuetype\", JSON.of(\"Backport\"));\n-            issue3.setState(RESOLVED);\n-            issue1.addLink(Link.create(issue3, \"backported by\").build());\n-\n-            var issue4 = credentials.createIssue(issueProject, \"Issue 4\");\n-            issue4.setProperty(\"fixVersions\", JSON.array().add(JSON.of(\"11\")));\n-            issue4.setProperty(\"issuetype\", JSON.of(\"Backport\"));\n-            issue4.setState(RESOLVED);\n-            issue1.addLink(Link.create(issue4, \"backported by\").build());\n-\n-            \/\/ Mention one of the issues\n-            var commit = CheckableRepository.appendAndCommit(localRepo, \"Hello there\", issue1.id() + \": A fix\");\n-            localRepo.push(commit, repo.url(), \"master\");\n-            TestBotRunner.runPeriodicItems(notifyBot);\n-\n-            assertEquals(List.of(\"hgupdate-sync\"), issue1.labels());\n-            assertEquals(List.of(), issue2.labels());\n-            assertEquals(List.of(), issue3.labels());\n-            assertEquals(List.of(\"hgupdate-sync\"), issue4.labels());\n-        }\n-    }\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifierTests.java","additions":0,"deletions":52,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-        opens 'org.openjdk.skara.bots.testinfo' to 'org.junit.platform.commons'\n+        opens 'org.openjdk.skara.bots.synclabel' to 'org.junit.platform.commons'\n","filename":"bots\/synclabel\/build.gradle","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-            ret.add(new SyncLabelBotCheckWorkItem(issueProject, issue.id()));\n+            ret.add(new SyncLabelBotFindMainIssueWorkItem(issueProject, issue.id()));\n","filename":"bots\/synclabel\/src\/main\/java\/org\/openjdk\/skara\/bots\/synclabel\/SyncLabelBot.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-    private final String issueId;\n+    private final String mainIssueId;\n@@ -38,1 +38,1 @@\n-    SyncLabelBotCheckWorkItem(IssueProject issueProject, String issueId) {\n+    SyncLabelBotCheckWorkItem(IssueProject issueProject, String mainIssueId) {\n@@ -40,1 +40,1 @@\n-        this.issueId = issueId;\n+        this.mainIssueId = mainIssueId;\n@@ -49,1 +49,1 @@\n-        return !o.issueId.equals(issueId);\n+        return !o.mainIssueId.equals(mainIssueId);\n@@ -54,1 +54,1 @@\n-        return \"SyncLabelBotCheckWorkItem@\" + issueId;\n+        return \"SyncLabelBotCheckWorkItem@\" + mainIssueId;\n@@ -59,2 +59,1 @@\n-        var ret = new ArrayList<WorkItem>();\n-        var issue = issueProject.issue(issueId);\n+        var issue = issueProject.issue(mainIssueId);\n@@ -62,1 +61,1 @@\n-            log.severe(\"Issue \" + issueId + \" is no longer present!\");\n+            log.severe(\"Issue \" + mainIssueId + \" is no longer present!\");\n@@ -79,1 +78,0 @@\n-                    ret.add(new SyncLabelBotLabelWorkItem(i, SyncLabelBotLabelWorkItem.LabelAction.ADD));\n@@ -81,0 +79,1 @@\n+                    i.addLabel(\"hgupdate-sync\");\n@@ -84,1 +83,0 @@\n-                    ret.add(new SyncLabelBotLabelWorkItem(i, SyncLabelBotLabelWorkItem.LabelAction.REMOVE));\n@@ -86,0 +84,1 @@\n+                    i.removeLabel(\"hgupdate-sync\");\n@@ -92,1 +91,1 @@\n-        return ret;\n+        return List.of();\n","filename":"bots\/synclabel\/src\/main\/java\/org\/openjdk\/skara\/bots\/synclabel\/SyncLabelBotCheckWorkItem.java","additions":10,"deletions":11,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bots.synclabel;\n+\n+import org.openjdk.skara.bot.WorkItem;\n+import org.openjdk.skara.issuetracker.IssueProject;\n+import org.openjdk.skara.jbs.Backports;\n+\n+import java.nio.file.Path;\n+import java.util.*;\n+import java.util.logging.Logger;\n+\n+public class SyncLabelBotFindMainIssueWorkItem implements WorkItem {\n+    private final IssueProject issueProject;\n+    private final String issueId;\n+    private static final Logger log = Logger.getLogger(\"org.openjdk.skara.bots\");\n+\n+    SyncLabelBotFindMainIssueWorkItem(IssueProject issueProject, String issueId) {\n+        this.issueProject = issueProject;\n+        this.issueId = issueId;\n+    }\n+\n+    @Override\n+    public boolean concurrentWith(WorkItem other) {\n+        if (!(other instanceof SyncLabelBotFindMainIssueWorkItem)) {\n+            return true;\n+        }\n+        var o = (SyncLabelBotFindMainIssueWorkItem) other;\n+        return !o.issueId.equals(issueId);\n+    }\n+\n+    @Override\n+    public Collection<WorkItem> run(Path scratchPath) {\n+        var issue = issueProject.issue(issueId);\n+        if (issue.isEmpty()) {\n+            log.severe(\"Issue \" + issueId + \" is no longer present!\");\n+            return List.of();\n+        }\n+\n+        var primary = Backports.findMainIssue(issue.get());\n+        if (primary.isEmpty()) {\n+            log.info(\"No main issue found for \" + issue.get().id());\n+            return List.of();\n+        }\n+\n+        return List.of(new SyncLabelBotCheckWorkItem(issueProject, primary.get().id()));\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"SyncLabelBotFindMainIssueWorkItem@\" + issueId;\n+    }\n+\n+}\n","filename":"bots\/synclabel\/src\/main\/java\/org\/openjdk\/skara\/bots\/synclabel\/SyncLabelBotFindMainIssueWorkItem.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"},{"patch":"@@ -1,69 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.skara.bots.synclabel;\n-\n-import org.openjdk.skara.bot.WorkItem;\n-import org.openjdk.skara.issuetracker.Issue;\n-\n-import java.nio.file.Path;\n-import java.util.*;\n-import java.util.logging.Logger;\n-\n-public class SyncLabelBotLabelWorkItem implements WorkItem {\n-    private final Issue issue;\n-    private final LabelAction labelAction;\n-    private static final Logger log = Logger.getLogger(\"org.openjdk.skara.bots\");\n-\n-    enum LabelAction {\n-        ADD,\n-        REMOVE\n-    }\n-\n-    SyncLabelBotLabelWorkItem(Issue issue, LabelAction labelAction) {\n-        this.issue = issue;\n-        this.labelAction = labelAction;\n-    }\n-\n-    @Override\n-    public boolean concurrentWith(WorkItem other) {\n-        if (!(other instanceof SyncLabelBotLabelWorkItem)) {\n-            return true;\n-        }\n-        var o = (SyncLabelBotLabelWorkItem) other;\n-        return !o.issue.webUrl().equals(issue.webUrl());\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return \"SyncLabelBotLabelWorkItem@\" + issue.project().name() + \"#\" + issue.id();\n-    }\n-\n-    @Override\n-    public Collection<WorkItem> run(Path scratch) {\n-        switch (labelAction) {\n-            case ADD -> log.severe(\"Adding hgupdate-sync label to \" + issue.id());\n-            case REMOVE -> log.severe(\"Removing hgupdate-sync label from \" + issue.id());\n-        }\n-        return List.of();\n-    }\n-}\n","filename":"bots\/synclabel\/src\/main\/java\/org\/openjdk\/skara\/bots\/synclabel\/SyncLabelBotLabelWorkItem.java","additions":0,"deletions":69,"binary":false,"changes":69,"status":"deleted"},{"patch":"@@ -0,0 +1,144 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bots.synclabel;\n+\n+import org.junit.jupiter.api.*;\n+import org.openjdk.skara.issuetracker.*;\n+import org.openjdk.skara.json.JSON;\n+import org.openjdk.skara.test.*;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.openjdk.skara.issuetracker.Issue.State.RESOLVED;\n+\n+public class SyncLabelBotTests {\n+    private TestBotFactory testBotBuilder(IssueProject issueProject, Path storagePath) {\n+        return TestBotFactory.newBuilder()\n+                             .addIssueProject(issueProject.name(), issueProject)\n+                             .storagePath(storagePath)\n+                             .addConfiguration(\"issueprojects\", JSON.array()\n+                                                                    .add(issueProject.name()))\n+                             .build();\n+    }\n+\n+    @Test\n+    void testAddLabel(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var storageFolder = tempFolder.path().resolve(\"storage\");\n+            var issueProject = credentials.getIssueProject();\n+            var syncLabelBot = testBotBuilder(issueProject, storageFolder).create(\"synclabel\", JSON.object());\n+\n+            var issue1 = credentials.createIssue(issueProject, \"Issue 1\");\n+            issue1.setProperty(\"fixVersions\", JSON.array().add(JSON.of(\"8u182\")));\n+            issue1.setProperty(\"issuetype\", JSON.of(\"Bug\"));\n+            issue1.setState(RESOLVED);\n+            TestBotRunner.runPeriodicItems(syncLabelBot);\n+            assertEquals(List.of(), issue1.labels());\n+\n+            var issue2 = credentials.createIssue(issueProject, \"Issue 2\");\n+            issue2.setProperty(\"fixVersions\", JSON.array().add(JSON.of(\"8u162\")));\n+            issue2.setProperty(\"issuetype\", JSON.of(\"Backport\"));\n+            issue2.setState(RESOLVED);\n+            issue1.addLink(Link.create(issue2, \"backported by\").build());\n+            TestBotRunner.runPeriodicItems(syncLabelBot);\n+            assertEquals(List.of(\"hgupdate-sync\"), issue1.labels());\n+\n+            var issue3 = credentials.createIssue(issueProject, \"Issue 3\");\n+            issue3.setProperty(\"fixVersions\", JSON.array().add(JSON.of(\"10\")));\n+            issue3.setProperty(\"issuetype\", JSON.of(\"Backport\"));\n+            issue3.setState(RESOLVED);\n+            issue1.addLink(Link.create(issue3, \"backported by\").build());\n+            TestBotRunner.runPeriodicItems(syncLabelBot);\n+            assertEquals(List.of(), issue3.labels());\n+\n+            var issue4 = credentials.createIssue(issueProject, \"Issue 4\");\n+            issue4.setProperty(\"fixVersions\", JSON.array().add(JSON.of(\"11\")));\n+            issue4.setProperty(\"issuetype\", JSON.of(\"Backport\"));\n+            issue4.setState(RESOLVED);\n+            issue1.addLink(Link.create(issue4, \"backported by\").build());\n+            TestBotRunner.runPeriodicItems(syncLabelBot);\n+            assertEquals(List.of(\"hgupdate-sync\"), issue1.labels());\n+            assertEquals(List.of(), issue2.labels());\n+            assertEquals(List.of(), issue3.labels());\n+            assertEquals(List.of(\"hgupdate-sync\"), issue4.labels());\n+\n+            \/\/ Ensure it is stable\n+            TestBotRunner.runPeriodicItems(syncLabelBot);\n+            assertEquals(List.of(\"hgupdate-sync\"), issue1.labels());\n+            assertEquals(List.of(), issue2.labels());\n+            assertEquals(List.of(), issue3.labels());\n+            assertEquals(List.of(\"hgupdate-sync\"), issue4.labels());\n+        }\n+    }\n+\n+    @Test\n+    void testRemoveLabel(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var storageFolder = tempFolder.path().resolve(\"storage\");\n+            var issueProject = credentials.getIssueProject();\n+            var syncLabelBot = testBotBuilder(issueProject, storageFolder).create(\"synclabel\", JSON.object());\n+\n+            var issue1 = credentials.createIssue(issueProject, \"Issue 1\");\n+            issue1.setProperty(\"fixVersions\", JSON.array().add(JSON.of(\"8u182\")));\n+            issue1.setProperty(\"issuetype\", JSON.of(\"Bug\"));\n+            issue1.setState(RESOLVED);\n+            var issue2 = credentials.createIssue(issueProject, \"Issue 2\");\n+            issue2.setProperty(\"fixVersions\", JSON.array().add(JSON.of(\"8u162\")));\n+            issue2.setProperty(\"issuetype\", JSON.of(\"Backport\"));\n+            issue2.setState(RESOLVED);\n+            issue1.addLink(Link.create(issue2, \"backported by\").build());\n+            var issue3 = credentials.createIssue(issueProject, \"Issue 3\");\n+            issue3.setProperty(\"fixVersions\", JSON.array().add(JSON.of(\"10\")));\n+            issue3.setProperty(\"issuetype\", JSON.of(\"Backport\"));\n+            issue3.setState(RESOLVED);\n+            issue1.addLink(Link.create(issue3, \"backported by\").build());\n+            var issue4 = credentials.createIssue(issueProject, \"Issue 4\");\n+            issue4.setProperty(\"fixVersions\", JSON.array().add(JSON.of(\"11\")));\n+            issue4.setProperty(\"issuetype\", JSON.of(\"Backport\"));\n+            issue4.setState(RESOLVED);\n+            issue1.addLink(Link.create(issue4, \"backported by\").build());\n+\n+            \/\/ First correct them\n+            TestBotRunner.runPeriodicItems(syncLabelBot);\n+            assertEquals(List.of(\"hgupdate-sync\"), issue1.labels());\n+            assertEquals(List.of(), issue2.labels());\n+            assertEquals(List.of(), issue3.labels());\n+            assertEquals(List.of(\"hgupdate-sync\"), issue4.labels());\n+\n+            \/\/ Intentionally mislabel\n+            issue2.addLabel(\"hgupdate-sync\");\n+\n+            \/\/ They should be restored\n+            TestBotRunner.runPeriodicItems(syncLabelBot);\n+            assertEquals(List.of(\"hgupdate-sync\"), issue1.labels());\n+            assertEquals(List.of(), issue2.labels());\n+            assertEquals(List.of(), issue3.labels());\n+            assertEquals(List.of(\"hgupdate-sync\"), issue4.labels());\n+        }\n+    }\n+}\n","filename":"bots\/synclabel\/src\/test\/java\/org\/openjdk\/skara\/bots\/synclabel\/SyncLabelBotTests.java","additions":144,"deletions":0,"binary":false,"changes":144,"status":"added"},{"patch":"@@ -27,1 +27,1 @@\n-import org.openjdk.skara.host.*;\n+import org.openjdk.skara.host.HostUser;\n@@ -34,2 +34,2 @@\n-import java.nio.file.*;\n-import java.net.URI;\n+import java.nio.file.Files;\n+import java.time.ZonedDateTime;\n@@ -221,0 +221,9 @@\n+\n+    List<TestIssue> getIssues(TestIssueProject issueProject, ZonedDateTime updatedAfter) {\n+        return data.issues.entrySet().stream()\n+                          .sorted(Map.Entry.comparingByKey())\n+                          .map(issue -> getIssue(issueProject, issue.getKey()))\n+                          .filter(i -> i.updatedAt().isAfter(updatedAfter))\n+                          .collect(Collectors.toList());\n+    }\n+\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestHost.java","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-        return new ArrayList<>(host.getIssues(this));\n+        return new ArrayList<>(host.getIssues(this, updatedAfter));\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestIssueProject.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}