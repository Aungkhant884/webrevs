{"files":[{"patch":"@@ -40,0 +40,1 @@\n+import java.util.concurrent.ConcurrentHashMap;\n@@ -47,0 +48,4 @@\n+    private final ZonedDateTime instantiated;\n+    private ZonedDateTime until;\n+\n+    private static final ConcurrentHashMap<String, ConcurrentHashMap<String, Hash>> projectsToTitleToHashes = new ConcurrentHashMap<>();\n@@ -73,0 +78,4 @@\n+        instantiated = ZonedDateTime.now();\n+        until = instantiated;\n+\n+        projectsToTitleToHashes.putIfAbsent(projectName, new ConcurrentHashMap<>());\n@@ -334,10 +343,3 @@\n-        var result = request.get(\"search\")\n-                            .param(\"scope\", \"commits\")\n-                            .param(\"search\", commitTitle)\n-                            .execute()\n-                            .stream()\n-                            .filter(o -> o.get(\"title\").asString().equals(commitTitle))\n-                            .map(o -> new Hash(o.get(\"id\").asString()))\n-                            .collect(Collectors.toList());\n-        if (result.isEmpty()) {\n-            throw new IllegalArgumentException(\"No commit with title: \" + commitTitle);\n+        var commitTitlesToHashes = projectsToTitleToHashes.get(projectName);\n+        if (commitTitlesToHashes.containsKey(commitTitle)) {\n+            return commitTitlesToHashes.get(commitTitle);\n@@ -345,16 +347,36 @@\n-        if (result.size() > 1) {\n-            var filtered = result.stream()\n-                                 .flatMap(hash -> commitComments(hash).stream()\n-                                                                      .filter(c -> c.body().equals(commentBody))\n-                                                                      .filter(c -> c.createdAt().equals(commentCreatedAt))\n-                                                                      .filter(c -> c.author().equals(author)))\n-                                 .map(c -> c.commit())\n-                                 .collect(Collectors.toList());\n-            if (filtered.isEmpty()) {\n-                throw new IllegalStateException(\"No commit with title '\" + commitTitle +\n-                                                \"' and comment '\" + commentBody + \"'\");\n-            }\n-            if (filtered.size() > 1) {\n-                var hashes = filtered.stream().map(Hash::hex).collect(Collectors.toList());\n-                throw new IllegalStateException(\"Multiple commits with identical comment '\" + commentBody + \"': \"\n-                                                 + String.join(\",\", hashes));\n+\n+        \/\/ Update with most recent commits\n+        request.get(\"repository\/commits\")\n+               .param(\"since\", instantiated.format(DateTimeFormatter.ISO_DATE_TIME))\n+               .execute()\n+               .stream()\n+               .forEach(o -> {\n+                   var hash = new Hash(o.get(\"id\").asString());\n+                   var title = o.get(\"title\").asString();\n+                   commitTitlesToHashes.put(title, hash);\n+               });\n+\n+        \/\/ Update lazily 12 months at a time\n+        if (until != null) {\n+            var since = until.minusMonths(12);\n+            for (var i = 0; i < 100; i++) {\n+                var commits = request.get(\"repository\/commits\")\n+                                     .param(\"since\", since.format(DateTimeFormatter.ISO_DATE_TIME))\n+                                     .param(\"until\", until.format(DateTimeFormatter.ISO_DATE_TIME))\n+                                     .execute()\n+                                     .asArray();\n+                until = since;\n+                since = until.minusMonths(12);\n+\n+                if (commits.size() == 0) {\n+                    until = null;\n+                    break;\n+                }\n+                for (var commit : commits) {\n+                   var hash = new Hash(commit.get(\"id\").asString());\n+                   var title = commit.get(\"title\").asString();\n+                   commitTitlesToHashes.put(title, hash);\n+                }\n+                if (commitTitlesToHashes.containsKey(commitTitle)) {\n+                    return commitTitlesToHashes.get(commitTitle);\n+                }\n@@ -362,1 +384,0 @@\n-            return filtered.get(0);\n@@ -364,1 +385,2 @@\n-        return result.get(0);\n+\n+        throw new RuntimeException(\"Could not find commit with title: '\" + commitTitle + \"' for project \" + projectName);\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabRepository.java","additions":50,"deletions":28,"binary":false,"changes":78,"status":"modified"}]}