{"files":[{"patch":"@@ -31,0 +31,1 @@\n+import org.openjdk.skara.vcs.Branch;\n@@ -201,1 +202,1 @@\n-            ret.ref = ret.repository.repositoryType() == VCS.GIT ? \"master\" : \"default\";\n+            ret.ref = Branch.defaultFor(ret.repository.repositoryType()).name();\n","filename":"bot\/src\/main\/java\/org\/openjdk\/skara\/bot\/BotRunnerConfiguration.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -85,1 +85,1 @@\n-            var fromRepo = Repository.materialize(fromDir, from.url(), \"master\");\n+            var fromRepo = Repository.materialize(fromDir, from.url(), Branch.defaultFor(VCS.GIT).name());\n@@ -94,1 +94,1 @@\n-            var toRepo = Repository.materialize(toDir, to.url(), \"master\");\n+            var toRepo = Repository.materialize(toDir, to.url(), Branch.defaultFor(VCS.GIT).name());\n@@ -138,1 +138,1 @@\n-            toRepo.push(head, to.url(), \"master\", false);\n+            toRepo.push(head, to.url(), Branch.defaultFor(VCS.GIT).name(), false);\n","filename":"bots\/censussync\/src\/main\/java\/org\/openjdk\/skara\/bots\/censussync\/CensusSyncBot.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,2 +27,1 @@\n-import org.openjdk.skara.vcs.Author;\n-import org.openjdk.skara.vcs.Hash;\n+import org.openjdk.skara.vcs.*;\n@@ -88,1 +87,1 @@\n-            .remoteRepository(repo, \"master\", user.name(), user.email(), \"Updated marks for \" + name)\n+            .remoteRepository(repo, Branch.defaultFor(VCS.GIT).name(), user.name(), user.email(), \"Updated marks for \" + name)\n","filename":"bots\/checkout\/src\/main\/java\/org\/openjdk\/skara\/bots\/checkout\/MarkStorage.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -25,0 +25,2 @@\n+import org.openjdk.skara.vcs.Branch;\n+import org.openjdk.skara.vcs.VCS;\n@@ -38,1 +40,1 @@\n-    private String archiveRef = \"master\";\n+    private String archiveRef = Branch.defaultFor(VCS.GIT).name();\n@@ -40,1 +42,1 @@\n-    private String censusRef = \"master\";\n+    private String censusRef = Branch.defaultFor(VCS.GIT).name();\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/MailingListBridgeBotBuilder.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -25,0 +25,2 @@\n+import org.openjdk.skara.vcs.Branch;\n+import org.openjdk.skara.vcs.VCS;\n@@ -84,1 +86,1 @@\n-            var branchPattern = Pattern.compile(\"^master$\");\n+            var branchPattern = Pattern.compile(\"^\" + Branch.defaultFor(VCS.GIT).name() + \"$\");\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/NotifyBotFactory.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -698,0 +698,1 @@\n+        var defaultBranch = Branch.defaultFor(VCS.GIT);\n@@ -703,1 +704,1 @@\n-                      \" [OpenJDK organization](https:\/\/github.com\/openjdk) (for example `Merge jdk:master`).\\n\" +\n+                      \" [OpenJDK organization](https:\/\/github.com\/openjdk) (for example `Merge jdk:\" + defaultBranch + \"`).\\n\" +\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,0 +25,2 @@\n+import org.openjdk.skara.vcs.Branch;\n+import org.openjdk.skara.vcs.VCS;\n@@ -35,1 +37,1 @@\n-    private String censusRef = \"master\";\n+    private String censusRef = Branch.defaultFor(VCS.GIT).name();\n@@ -48,1 +50,1 @@\n-    private String confOverrideRef = \"master\";\n+    private String confOverrideRef = Branch.defaultFor(VCS.GIT).name();\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBotBuilder.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-import org.openjdk.skara.vcs.Repository;\n+import org.openjdk.skara.vcs.*;\n@@ -98,1 +98,1 @@\n-                var censusRepo = Repository.materialize(censusDir, censusRemote.url(), \"master\");\n+                var censusRepo = Repository.materialize(censusDir, censusRemote.url(), Branch.defaultFor(VCS.GIT).name());\n@@ -101,1 +101,1 @@\n-                var jcheckConf = repo.fileContents(\".jcheck\/conf\", \"master\");\n+                var jcheckConf = repo.fileContents(\".jcheck\/conf\", Branch.defaultFor(VCS.GIT).name());\n","filename":"bots\/tester\/src\/main\/java\/org\/openjdk\/skara\/bots\/tester\/TestBot.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-                             .map(b -> b.equals(\"master\") ? \"default\" : b)\n+                             .map(b -> b.equals(Branch.defaultFor(VCS.GIT).name()) ? Branch.defaultFor(VCS.HG).name() : b)\n@@ -228,1 +228,1 @@\n-            verifyFiles(hg, branch, git, branch.equals(\"default\") ? \"master\" : branch);\n+            verifyFiles(hg, branch, git, branch.equals(Branch.defaultFor(VCS.HG).name()) ? Branch.defaultFor(VCS.GIT).name() : branch);\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/debug\/GitVerifyImport.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -92,1 +92,1 @@\n-            var converter = new GitToHgConverter(new Branch(\"master\"));\n+            var converter = new GitToHgConverter(Branch.defaultFor(VCS.GIT));\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/debug\/HgOpenJDKImport.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-              .helptext(\"Name of target branch, defaults to 'master'\")\n+              .helptext(\"Name of target branch, defaults to '\" + Branch.defaultFor(VCS.GIT) + \"'\")\n@@ -108,1 +108,1 @@\n-        var rules = skaraRemoteRepo.fileContents(\"config\/mailinglist\/rules\/jdk.json\", \"master\");\n+        var rules = skaraRemoteRepo.fileContents(\"config\/mailinglist\/rules\/jdk.json\", Branch.defaultFor(VCS.GIT).name());\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/pr\/GitPrCreate.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-            \/\/ Only valid option now is a repository - we default the ref to \"master\"\n+            \/\/ Only valid option now is a repository - use default ref\n@@ -81,1 +81,1 @@\n-            ref = \"master\";\n+            ref = Branch.defaultFor(VCS.GIT).name();\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/PullRequestUtils.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -261,1 +261,1 @@\n-        var master = repository.resolve(repository.defaultBranch().name());\n+        var defaultHead = repository.resolve(repository.defaultBranch().name());\n@@ -264,2 +264,2 @@\n-        var conf = master.isPresent() ?\n-            parseConfiguration(repository, master.get(), List.of()) :\n+        var conf = defaultHead.isPresent() ?\n+            parseConfiguration(repository, defaultHead.get(), List.of()) :\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/JCheck.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -169,3 +169,4 @@\n-        var master = r.resolve(\"master\")\n-                      .orElseThrow(() -> new IOException(\"Cannot resolve 'master' branch\"));\n-        return from(r, master, Path.of(\".jcheck\", \"conf\"));\n+        var defaultBranch = r.defaultBranch();\n+        var defaultHead = r.resolve(defaultBranch)\n+                      .orElseThrow(() -> new IOException(\"Cannot resolve '\" + defaultBranch + \"' branch\"));\n+        return from(r, defaultHead, Path.of(\".jcheck\", \"conf\"));\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/JCheckConfiguration.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -224,1 +224,1 @@\n-            localRepository.push(hash, repository.url(), \"master\", true);\n+            localRepository.push(hash, repository.url(), Branch.defaultFor(VCS.GIT).name(), true);\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/CensusBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,0 +26,3 @@\n+    private static final Branch defaultGit = new Branch(\"master\");\n+    private static final Branch defaultHg = new Branch(\"default\");\n+\n@@ -36,0 +39,10 @@\n+    public static Branch defaultFor(VCS vcs) {\n+        if (vcs == VCS.GIT) {\n+            return defaultGit;\n+        }\n+        if (vcs == VCS.HG) {\n+            return defaultHg;\n+        }\n+        throw new IllegalArgumentException(\"Unsupported VCS: \" + vcs);\n+    }\n+\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/Branch.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -897,1 +897,1 @@\n-                return new Branch(\"master\");\n+                return Branch.defaultFor(VCS.GIT);\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/git\/GitRepository.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-        this(new Branch(\"master\"));\n+        this(Branch.defaultFor(VCS.GIT));\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/openjdk\/convert\/GitToHgConverter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -139,2 +139,2 @@\n-        if (branch.name().equals(\"default\")) {\n-            return new Branch(\"master\");\n+        if (branch.equals(Branch.defaultFor(VCS.HG))) {\n+            return Branch.defaultFor(VCS.GIT);\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/openjdk\/convert\/HgToGitConverter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}