{"files":[{"patch":"@@ -1338,1 +1338,1 @@\n-                    newLabels, pr.targetRef(), pr.isDraft(), pr.targetRefJCheckConf()), workItem.getIssueMetadata(updatedBody), expiresIn);\n+                    newLabels, pr.targetRef(), pr.isDraft()), workItem.getIssueMetadata(updatedBody), expiresIn);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -108,1 +108,1 @@\n-                       List<Review> reviews, Set<String> labels, String targetRef, boolean isDraft, String jcheckConfInTargetRef) {\n+                       List<Review> reviews, Set<String> labels, String targetRef, boolean isDraft) {\n@@ -138,2 +138,2 @@\n-            digest.update(jcheckConfInTargetRef.getBytes(StandardCharsets.UTF_8));\n-            digest.update(isDraft ? (byte)0 : (byte)1);\n+            digest.update(censusInstance.configuration().rawJCheckConf().getBytes(StandardCharsets.UTF_8));\n+            digest.update(isDraft ? (byte) 0 : (byte) 1);\n@@ -228,1 +228,1 @@\n-                            labels, pr.targetRef(), pr.isDraft(), pr.targetRefJCheckConf());\n+                            labels, pr.targetRef(), pr.isDraft());\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckWorkItem.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-import java.util.stream.Collectors;\n@@ -80,0 +79,1 @@\n+    private final Map<String, Set<String>> targetRefPRMap = new HashMap<>();\n@@ -171,0 +171,13 @@\n+            \/\/ Update targetRefPRMap\n+            for (var pr : prs) {\n+                var targetRef = pr.targetRef();\n+                var prId = pr.id();\n+                if (pr.isOpen()) {\n+                    targetRefPRMap.computeIfAbsent(targetRef, key -> new HashSet<>()).add(prId);\n+                } else {\n+                    if (targetRefPRMap.containsKey(targetRef)) {\n+                        targetRefPRMap.get(targetRef).remove(prId);\n+                    }\n+                }\n+            }\n+\n@@ -185,4 +198,3 @@\n-        \/\/ Get all branches except 'pr' branch\n-        var allTargetRefs = remoteRepo.branches().stream()\n-                .map(HostedBranch::name)\n-                .filter(name -> !name.startsWith(\"pr\/\"))\n+        \/\/ If there is any pr targets on the ref, then the bot needs to check whether the .jcheck\/conf updated in this ref\n+        var allTargetRefs = targetRefPRMap.keySet().stream()\n+                .filter(key -> !targetRefPRMap.get(key).isEmpty())\n@@ -190,1 +202,0 @@\n-        \/\/ Check if .jcheck\/conf updated in each target ref\n@@ -197,4 +208,4 @@\n-            if (!jCheckConfMap.containsKey(targetRef) || !jCheckConfMap.get(targetRef).equals(currConf)) {\n-                ret.addAll(remoteRepo.openPullRequests().stream()\n-                        .filter(pullRequest -> pullRequest.targetRef().equals(targetRef))\n-                        .toList());\n+            if (!jCheckConfMap.containsKey(targetRef)) {\n+                jCheckConfMap.put(targetRef, currConf);\n+            } else if (!jCheckConfMap.get(targetRef).equals(currConf)) {\n+                ret.addAll(remoteRepo.openPullRequestsTargetsSpecificRef(targetRef));\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBot.java","additions":21,"deletions":10,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -282,0 +282,5 @@\n+\n+    @Override\n+    public List<PullRequest> openPullRequestsTargetsSpecificRef(String targetRef) {\n+        return null;\n+    }\n","filename":"bots\/tester\/src\/test\/java\/org\/openjdk\/skara\/bots\/tester\/InMemoryHostedRepository.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -370,5 +370,0 @@\n-\n-    @Override\n-    public String targetRefJCheckConf() {\n-        return null;\n-    }\n","filename":"bots\/tester\/src\/test\/java\/org\/openjdk\/skara\/bots\/tester\/InMemoryPullRequest.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -222,0 +222,5 @@\n+\n+    \/**\n+     * Returns a list of open pull requests which targets at the specific ref\n+     *\/\n+    List<PullRequest> openPullRequestsTargetsSpecificRef(String targetRef);\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/HostedRepository.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -268,6 +268,0 @@\n-\n-    \/**\n-     * Returns .jcheck\/conf in the target ref of this pull request\n-     * @return\n-     *\/\n-    String targetRefJCheckConf();\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/PullRequest.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -311,0 +311,5 @@\n+\n+    @Override\n+    public List<PullRequest> openPullRequestsTargetsSpecificRef(String targetRef) {\n+        throw new UnsupportedOperationException();\n+    }\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/bitbucket\/BitbucketRepository.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -48,1 +48,0 @@\n-    private String targetRefJCheckConf;\n@@ -843,8 +842,0 @@\n-\n-    @Override\n-    public String targetRefJCheckConf() {\n-        if (targetRefJCheckConf == null) {\n-            targetRefJCheckConf = repository.fileContents(\".jcheck\/conf\", targetRef()).orElse(\"\");\n-        }\n-        return targetRefJCheckConf;\n-    }\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubPullRequest.java","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -749,0 +749,10 @@\n+\n+    @Override\n+    public List<PullRequest> openPullRequestsTargetsSpecificRef(String targetRef) {\n+        return request.get(\"pulls\")\n+                .param(\"state\", \"open\")\n+                .param(\"base\", targetRef)\n+                .execute().asArray().stream()\n+                .map(jsonValue -> new GitHubPullRequest(this, jsonValue, request))\n+                .collect(Collectors.toList());\n+    }\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubRepository.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -53,1 +53,0 @@\n-    private String targetRefJCheckConf;\n@@ -951,8 +950,0 @@\n-\n-    @Override\n-    public String targetRefJCheckConf() {\n-        if (targetRefJCheckConf == null) {\n-            targetRefJCheckConf = repository.fileContents(\".jcheck\/conf\", targetRef()).orElse(\"\");\n-        }\n-        return targetRefJCheckConf;\n-    }\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabMergeRequest.java","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -851,0 +851,12 @@\n+\n+    @Override\n+    public List<PullRequest> openPullRequestsTargetsSpecificRef(String targetRef) {\n+        return request.get(\"merge_requests\")\n+                .param(\"state\", \"opened\")\n+                .param(\"target_branch\", targetRef)\n+                .execute().stream()\n+                .filter(this::hasHeadHash)\n+                .map(this::refetchMergeRequest)\n+                .map(value -> new GitLabMergeRequest(this, gitLabHost, value, request))\n+                .collect(Collectors.toList());\n+    }\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabRepository.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+    private String rawJCheckConf;\n@@ -38,1 +39,1 @@\n-    private JCheckConfiguration(INI ini) {\n+    private JCheckConfiguration(INI ini, String rawConf) {\n@@ -46,0 +47,1 @@\n+        rawJCheckConf = rawConf;\n@@ -64,0 +66,4 @@\n+    public String rawJCheckConf() {\n+        return rawJCheckConf;\n+    }\n+\n@@ -152,0 +158,1 @@\n+        var rawConf = String.join(\"\", lines);\n@@ -155,1 +162,1 @@\n-            return new JCheckConfiguration(convert(ini));\n+            return new JCheckConfiguration(convert(ini), rawConf);\n@@ -157,1 +164,1 @@\n-        return new JCheckConfiguration(ini);\n+        return new JCheckConfiguration(ini, rawConf);\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/JCheckConfiguration.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -461,0 +461,8 @@\n+\n+    @Override\n+    public List<PullRequest> openPullRequestsTargetsSpecificRef(String targetRef) {\n+        return host.getPullRequests(this).stream()\n+                .filter(pr -> pr.state().equals(Issue.State.OPEN))\n+                .filter(pr -> pr.targetRef.equals(targetRef))\n+                .collect(Collectors.toList());\n+    }\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestHostedRepository.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -55,1 +55,0 @@\n-    private String targetRefJCheckConf;\n@@ -359,8 +358,0 @@\n-\n-    @Override\n-    public String targetRefJCheckConf() {\n-        if (targetRefJCheckConf == null) {\n-            targetRefJCheckConf = targetRepository.fileContents(\".jcheck\/conf\", targetRef()).orElse(\"\");\n-        }\n-        return targetRefJCheckConf;\n-    }\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestPullRequest.java","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"}]}