{"files":[{"patch":"@@ -1338,1 +1338,1 @@\n-                                                newLabels, pr.targetRef(), pr.isDraft()), workItem.getIssueMetadata(updatedBody), expiresIn);\n+                    newLabels, pr.targetRef(), pr.isDraft()), workItem.getIssueMetadata(updatedBody), expiresIn);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -138,1 +138,2 @@\n-            digest.update(isDraft ? (byte)0 : (byte)1);\n+            digest.update(censusInstance.configuration().rawJCheckConf().getBytes(StandardCharsets.UTF_8));\n+            digest.update(isDraft ? (byte) 0 : (byte) 1);\n@@ -226,1 +227,2 @@\n-                    var currPRMetadata = getPRMetadata(censusInstance, pr.title(), pr.body(), comments, reviews, labels, pr.targetRef(), pr.isDraft());\n+                    var currPRMetadata = getPRMetadata(censusInstance, pr.title(), pr.body(), comments, reviews,\n+                            labels, pr.targetRef(), pr.isDraft());\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckWorkItem.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -78,0 +78,2 @@\n+    private final Map<String, String> jCheckConfMap = new HashMap<>();\n+    private final Map<String, Set<String>> targetRefPRMap = new HashMap<>();\n@@ -168,0 +170,21 @@\n+\n+            \/\/ Update targetRefPRMap\n+            for (var pr : prs) {\n+                var targetRef = pr.targetRef();\n+                var prId = pr.id();\n+                if (pr.isOpen()) {\n+                    targetRefPRMap.computeIfAbsent(targetRef, key -> new HashSet<>()).add(prId);\n+                } else {\n+                    if (targetRefPRMap.containsKey(targetRef)) {\n+                        targetRefPRMap.get(targetRef).remove(prId);\n+                    }\n+                }\n+            }\n+\n+            var jCheckConfUpdateRelatedPRs = getJCheckConfUpdateRelatedPRs();\n+            \/\/ Filter out duplicate prs\n+            var filteredPrs = jCheckConfUpdateRelatedPRs.stream()\n+                    .filter(pullRequest -> prs.stream()\n+                            .noneMatch(pr -> pr.isSame(pullRequest)))\n+                    .toList();\n+            workItems.addAll(getPullRequestWorkItems(filteredPrs));\n@@ -173,0 +196,22 @@\n+    private List<PullRequest> getJCheckConfUpdateRelatedPRs() {\n+        var ret = new ArrayList<PullRequest>();\n+        \/\/ If there is any pr targets on the ref, then the bot needs to check whether the .jcheck\/conf updated in this ref\n+        var allTargetRefs = targetRefPRMap.keySet().stream()\n+                .filter(key -> !targetRefPRMap.get(key).isEmpty())\n+                .toList();\n+        for (var targetRef : allTargetRefs) {\n+            var currConfOpt = remoteRepo.fileContents(\".jcheck\/conf\", targetRef);\n+            if (currConfOpt.isEmpty()) {\n+                continue;\n+            }\n+            var currConf = currConfOpt.get();\n+            if (!jCheckConfMap.containsKey(targetRef)) {\n+                jCheckConfMap.put(targetRef, currConf);\n+            } else if (!jCheckConfMap.get(targetRef).equals(currConf)) {\n+                ret.addAll(remoteRepo.openPullRequestsWithTargetRef(targetRef));\n+                jCheckConfMap.put(targetRef, currConf);\n+            }\n+        }\n+        return ret;\n+    }\n+\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBot.java","additions":45,"deletions":0,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -2996,0 +2996,56 @@\n+\n+    @Test\n+    void targetJCheckConfUpdate(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addAuthor(author.forge().currentUser().id())\n+                    .addReviewer(reviewer.forge().currentUser().id());\n+            var seedFolder = tempFolder.path().resolve(\"seed\");\n+            var prBot = PullRequestBot.newBuilder()\n+                    .repo(author)\n+                    .censusRepo(censusBuilder.build())\n+                    .censusLink(\"https:\/\/census.com\/{{contributor}}-profile\")\n+                    .seedStorage(seedFolder)\n+                    .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.authenticatedUrl(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.authenticatedUrl(), \"refs\/heads\/edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"This is a pull request\");\n+\n+            \/\/ Check the status\n+            TestBotRunner.runPeriodicItems(prBot);\n+\n+            assertTrue(pr.store().body().contains(\"1 review required\"));\n+\n+            \/\/ Run it again\n+            TestBotRunner.runPeriodicItems(prBot);\n+\n+            \/\/Make a change to .jcheck\/conf in target branch\n+            localRepo.checkout(localRepo.defaultBranch());\n+            var defaultConf = Files.readString(localRepo.root().resolve(\".jcheck\/conf\"), StandardCharsets.UTF_8);\n+            var newConf = defaultConf.replace(\"reviewers=1\", \"reviewers=2\");\n+            Files.writeString(localRepo.root().resolve(\".jcheck\/conf\"), newConf, StandardCharsets.UTF_8);\n+            localRepo.add(localRepo.root().resolve(\".jcheck\/conf\"));\n+            var confHash = localRepo.commit(\"set reviewers=2\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(confHash, author.authenticatedUrl(), \"master\", true);\n+\n+            TestBotRunner.runPeriodicItems(prBot);\n+\n+            assertTrue(pr.store().body().contains(\"2 reviews required\"));\n+\n+            \/\/ Run it again\n+            TestBotRunner.runPeriodicItems(prBot);\n+\n+            TestBotRunner.runPeriodicItems(prBot);\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CheckTests.java","additions":56,"deletions":0,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -282,0 +282,5 @@\n+\n+    @Override\n+    public List<PullRequest> openPullRequestsWithTargetRef(String targetRef) {\n+        return null;\n+    }\n","filename":"bots\/tester\/src\/test\/java\/org\/openjdk\/skara\/bots\/tester\/InMemoryHostedRepository.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -222,0 +222,5 @@\n+\n+    \/**\n+     * Returns a list of open pull requests which targets at the specific ref\n+     *\/\n+    List<PullRequest> openPullRequestsWithTargetRef(String targetRef);\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/HostedRepository.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -311,0 +311,5 @@\n+\n+    @Override\n+    public List<PullRequest> openPullRequestsWithTargetRef(String targetRef) {\n+        throw new UnsupportedOperationException();\n+    }\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/bitbucket\/BitbucketRepository.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -749,0 +749,10 @@\n+\n+    @Override\n+    public List<PullRequest> openPullRequestsWithTargetRef(String targetRef) {\n+        return request.get(\"pulls\")\n+                .param(\"state\", \"open\")\n+                .param(\"base\", targetRef)\n+                .execute().asArray().stream()\n+                .map(jsonValue -> new GitHubPullRequest(this, jsonValue, request))\n+                .collect(Collectors.toList());\n+    }\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubRepository.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -851,0 +851,12 @@\n+\n+    @Override\n+    public List<PullRequest> openPullRequestsWithTargetRef(String targetRef) {\n+        return request.get(\"merge_requests\")\n+                .param(\"state\", \"opened\")\n+                .param(\"target_branch\", targetRef)\n+                .execute().stream()\n+                .filter(this::hasHeadHash)\n+                .map(this::refetchMergeRequest)\n+                .map(value -> new GitLabMergeRequest(this, gitLabHost, value, request))\n+                .collect(Collectors.toList());\n+    }\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabRepository.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,1 @@\n+    private String rawJCheckConf;\n@@ -38,1 +39,1 @@\n-    private JCheckConfiguration(INI ini) {\n+    private JCheckConfiguration(INI ini, String rawConf) {\n@@ -46,0 +47,1 @@\n+        rawJCheckConf = rawConf;\n@@ -64,0 +66,4 @@\n+    public String rawJCheckConf() {\n+        return rawJCheckConf;\n+    }\n+\n@@ -152,0 +158,1 @@\n+        var rawConf = String.join(\"\\n\", lines);\n@@ -155,1 +162,1 @@\n-            return new JCheckConfiguration(convert(ini));\n+            return new JCheckConfiguration(convert(ini), rawConf);\n@@ -157,1 +164,1 @@\n-        return new JCheckConfiguration(ini);\n+        return new JCheckConfiguration(ini, rawConf);\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/JCheckConfiguration.java","additions":11,"deletions":4,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -461,0 +461,8 @@\n+\n+    @Override\n+    public List<PullRequest> openPullRequestsWithTargetRef(String targetRef) {\n+        return host.getPullRequests(this).stream()\n+                .filter(pr -> pr.state().equals(Issue.State.OPEN))\n+                .filter(pr -> pr.targetRef.equals(targetRef))\n+                .collect(Collectors.toList());\n+    }\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestHostedRepository.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"}]}