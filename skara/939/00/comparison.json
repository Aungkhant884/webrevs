{"files":[{"patch":"@@ -677,0 +677,2 @@\n+                    \" ⚠️ Marking a PR as reviewed using the emoji buttons is deprecated and will not be supported in the near future. \" +\n+                    \"Please use the `Approve` button instead!\\n\\n\" +\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-        \/\/ Find all reviews without a comment\n+        \/\/ Find all reviews without a body and a comment\n@@ -53,0 +53,4 @@\n+            if (review.body().isPresent()) {\n+                \/\/ Ignore these\n+                continue;\n+            }\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/ReviewTracker.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -35,1 +35,2 @@\n-import java.time.ZonedDateTime;\n+import java.time.*;\n+import java.time.temporal.ChronoUnit;\n@@ -107,1 +108,24 @@\n-        return request.get(\"award_emoji\").execute().stream()\n+        var approvals = request.get(\"notes\").execute().stream()\n+                      .map(JSONValue::asObject)\n+                      .filter(obj -> obj.get(\"system\").asBoolean())\n+                      .filter(obj -> obj.get(\"body\").contains(\"approved this merge request\"))\n+                      .map(obj -> {\n+                          var reviewerObj = obj.get(\"author\").asObject();\n+                          var reviewer = HostUser.create(reviewerObj.get(\"id\").asInt(),\n+                                                         reviewerObj.get(\"username\").asString(),\n+                                                         reviewerObj.get(\"name\").asString());\n+                          var verdict = obj.get(\"body\").contains(\"unapproved\") ? Review.Verdict.NONE : Review.Verdict.APPROVED;\n+                          var createdAt = ZonedDateTime.parse(obj.get(\"created_at\").asString());\n+\n+                          \/\/ Find the latest commit that isn't created after our review\n+                          var hash = commits.get(0).hash;\n+                          for (var cd : commits) {\n+                              if (createdAt.isAfter(cd.date)) {\n+                                  hash = cd.hash;\n+                              }\n+                          }\n+                          var id = obj.get(\"id\").asInt();\n+                          return new Review(createdAt, reviewer, verdict, hash, id, \"\");\n+                      });\n+\n+        var awardApprovals = request.get(\"award_emoji\").execute().stream()\n@@ -138,2 +162,5 @@\n-                      })\n-                      .collect(Collectors.toList());\n+                      });\n+\n+        return Stream.concat(approvals, awardApprovals)\n+                     .sorted(Comparator.comparing(review -> review.createdAt().truncatedTo(ChronoUnit.MINUTES)))\n+                     .collect(Collectors.toList());\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabMergeRequest.java","additions":31,"deletions":4,"binary":false,"changes":35,"status":"modified"}]}