{"files":[{"patch":"@@ -30,0 +30,1 @@\n+import java.io.*;\n@@ -31,0 +32,2 @@\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.*;\n@@ -33,0 +36,1 @@\n+import java.util.regex.Pattern;\n@@ -46,0 +50,27 @@\n+    private void configureSshKey(String userName, String hostName, String sshKey) {\n+        var cfgPath = Path.of(System.getProperty(\"user.home\"), \".ssh\");\n+        var cfgFile = cfgPath.resolve(\"config\");\n+        var existing = \"\";\n+        try {\n+            existing = Files.readString(cfgFile, StandardCharsets.UTF_8);\n+        } catch (IOException ignored) {\n+        }\n+\n+        var userHost = userName + \".\" + hostName;\n+        var existingBlock = Pattern.compile(\"^Match host \" + Pattern.quote(userHost) + \"(?:\\\\R[ \\\\t]+.*)+\", Pattern.MULTILINE);\n+        var existingMatcher = existingBlock.matcher(existing);\n+        var filtered = existingMatcher.replaceAll(\"\");\n+        var result = \"Match host \" + userHost + \"\\n\" +\n+                \"  Hostname \" + hostName + \"\\n\" +\n+                \"  PreferredAuthentications publickey\\n\" +\n+                \"  StrictHostKeyChecking no\\n\" +\n+                \"  IdentityFile \" + sshKey + \"\\n\" +\n+                \"\\n\";\n+\n+        try {\n+            Files.writeString(cfgFile, result + filtered.strip() + \"\\n\", StandardCharsets.UTF_8);\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n@@ -59,0 +90,5 @@\n+        var useSsh = false;\n+        if (configuration != null && configuration.contains(\"sshkey\") && credential != null) {\n+            configureSshKey(credential.username(), uri.getHost(), configuration.get(\"sshkey\").asString());\n+            useSsh = true;\n+        }\n@@ -60,1 +96,1 @@\n-            return new GitLabHost(name, uri, credential, groups);\n+            return new GitLabHost(name, uri, useSsh, credential, groups);\n@@ -62,1 +98,1 @@\n-            return new GitLabHost(name, uri, groups);\n+            return new GitLabHost(name, uri, useSsh, groups);\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabForgeFactory.java","additions":38,"deletions":2,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import org.openjdk.skara.vcs.*;\n+import org.openjdk.skara.vcs.Hash;\n@@ -34,1 +34,0 @@\n-import java.nio.file.Path;\n@@ -36,1 +35,0 @@\n-import java.util.stream.Collectors;\n@@ -38,1 +36,1 @@\n-import java.time.ZonedDateTime;\n+import java.util.stream.Collectors;\n@@ -43,0 +41,1 @@\n+    private final boolean useSsh;\n@@ -50,1 +49,1 @@\n-    GitLabHost(String name, URI uri, Credential pat, Set<String> groups) {\n+    GitLabHost(String name, URI uri, boolean useSsh, Credential pat, Set<String> groups) {\n@@ -53,0 +52,1 @@\n+        this.useSsh = useSsh;\n@@ -62,1 +62,1 @@\n-    GitLabHost(String name, URI uri, Set<String> groups) {\n+    GitLabHost(String name, URI uri, boolean useSsh, Set<String> groups) {\n@@ -65,0 +65,1 @@\n+        this.useSsh = useSsh;\n@@ -78,0 +79,4 @@\n+    boolean useSsh() {\n+        return useSsh;\n+    }\n+\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabHost.java","additions":11,"deletions":6,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-import org.openjdk.skara.host.HostUser;\n@@ -27,0 +26,1 @@\n+import org.openjdk.skara.host.HostUser;\n@@ -37,1 +37,1 @@\n-import java.util.function.Supplier;\n+import java.util.concurrent.ConcurrentHashMap;\n@@ -40,1 +40,0 @@\n-import java.util.concurrent.ConcurrentHashMap;\n@@ -176,5 +175,9 @@\n-        var builder = URIBuilder\n-                .base(gitLabHost.getUri())\n-                .setPath(\"\/\" + projectName + \".git\");\n-        gitLabHost.getPat().ifPresent(pat -> builder.setAuthentication(pat.username() + \":\" + pat.password()));\n-        return builder.build();\n+        if (gitLabHost.useSsh()) {\n+            return URI.create(\"ssh:\/\/git@\" + gitLabHost.getPat().orElseThrow().username() + \".\" + gitLabHost.getUri().getHost() + \":\" + projectName + \".git\");\n+        } else {\n+            var builder = URIBuilder\n+                    .base(gitLabHost.getUri())\n+                    .setPath(\"\/\" + projectName + \".git\");\n+            gitLabHost.getPat().ifPresent(pat -> builder.setAuthentication(pat.username() + \":\" + pat.password()));\n+            return builder.build();\n+        }\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabRepository.java","additions":11,"deletions":8,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -485,1 +485,1 @@\n-        cmd.add(uri.toString());\n+        cmd.add(decodeUri(uri));\n@@ -495,1 +495,1 @@\n-        var cmd = new ArrayList<>(List.of(\"git\", \"fetch\", \"--recurse-submodules=on-demand\", \"--prune\", uri.toString()));\n+        var cmd = new ArrayList<>(List.of(\"git\", \"fetch\", \"--recurse-submodules=on-demand\", \"--prune\", decodeUri(uri)));\n@@ -569,1 +569,1 @@\n-        try (var p = capture(\"git\", \"push\", \"--mirror\", uri.toString())) {\n+        try (var p = capture(\"git\", \"push\", \"--mirror\", decodeUri(uri))) {\n@@ -582,1 +582,1 @@\n-        try (var p = capture(\"git\", \"push\", uri.toString(), refspec)) {\n+        try (var p = capture(\"git\", \"push\", decodeUri(uri), refspec)) {\n@@ -1347,0 +1347,8 @@\n+    private static String decodeUri(URI from) {\n+        if (from.getScheme().equals(\"ssh\")) {\n+            return from.toString().substring(6);\n+        } else {\n+            return from.toString();\n+        }\n+    }\n+\n@@ -1359,1 +1367,1 @@\n-        cmd.addAll(List.of(from.toString(), to.toString()));\n+        cmd.addAll(List.of(decodeUri(from), to.toString()));\n@@ -1368,1 +1376,1 @@\n-        try (var p = capture(cwd, \"git\", \"clone\", \"--mirror\", from.toString(), to.toString())) {\n+        try (var p = capture(cwd, \"git\", \"clone\", \"--mirror\", decodeUri(from), to.toString())) {\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/git\/GitRepository.java","additions":14,"deletions":6,"binary":false,"changes":20,"status":"modified"}]}