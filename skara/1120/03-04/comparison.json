{"files":[{"patch":"@@ -36,0 +36,1 @@\n+    requires java.net.http;\n","filename":"bots\/cli\/src\/main\/java\/module-info.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-import org.openjdk.skara.network.RestRequest;\n@@ -29,1 +28,0 @@\n-import java.io.*;\n@@ -31,0 +29,1 @@\n+import java.net.http.*;\n@@ -34,0 +33,1 @@\n+import java.util.concurrent.Future;\n@@ -37,0 +37,4 @@\n+\/**\n+ * Handles logging to logstash. Be careful not to call anything that creates new\n+ * log records from this class as that can cause infinite recursion.\n+ *\/\n@@ -38,1 +42,2 @@\n-    private final RestRequest endpoint;\n+    private final URI endpoint;\n+    private final HttpClient httpClient;\n@@ -40,2 +45,2 @@\n-    private final Logger log = Logger.getLogger(\"org.openjdk.skara.bots.cli\");\n-\n+    \/\/ Optionally store all futures for testing purposes\n+    private Collection<Future<HttpResponse<Void>>> futures;\n@@ -52,1 +57,5 @@\n-        this.endpoint = new RestRequest(endpoint);\n+        this.endpoint = endpoint;\n+        this.httpClient = HttpClient.newBuilder()\n+                .followRedirects(HttpClient.Redirect.NORMAL)\n+                .connectTimeout(Duration.ofSeconds(30))\n+                .build();\n@@ -74,6 +83,5 @@\n-        try {\n-            var query = JSON.object();\n-            query.put(\"@timestamp\", dateTimeFormatter.format(time));\n-            query.put(\"level\", level.getName());\n-            query.put(\"level_value\", level.intValue());\n-            query.put(\"message\", message);\n+        var query = JSON.object();\n+        query.put(\"@timestamp\", dateTimeFormatter.format(time));\n+        query.put(\"level\", level.getName());\n+        query.put(\"level_value\", level.intValue());\n+        query.put(\"message\", message);\n@@ -81,3 +89,3 @@\n-            for (var entry : LogContextMap.entrySet()) {\n-                query.put(entry.getKey(), entry.getValue());\n-            }\n+        for (var entry : LogContextMap.entrySet()) {\n+            query.put(entry.getKey(), entry.getValue());\n+        }\n@@ -85,3 +93,3 @@\n-            for (var extraField : extraFields.entrySet()) {\n-                query.put(extraField.getKey(), extraField.getValue());\n-            }\n+        for (var extraField : extraFields.entrySet()) {\n+            query.put(extraField.getKey(), extraField.getValue());\n+        }\n@@ -89,6 +97,8 @@\n-            endpoint.post(\"\/\")\n-                    .body(query)\n-                    .executeUnparsed();\n-        } catch (RuntimeException | IOException e) {\n-            log.warning(\"Exception during logstash publishing: \" + e.getMessage());\n-            log.throwing(\"BotSlackHandler\", \"publish\", e);\n+        var httpRequest = HttpRequest.newBuilder()\n+                .uri(endpoint)\n+                .header(\"Content-Type\", \"application\/json\")\n+                .POST(HttpRequest.BodyPublishers.ofString(query.toString()))\n+                .build();\n+        var future = httpClient.sendAsync(httpRequest, HttpResponse.BodyHandlers.discarding());\n+        if (futures != null) {\n+            futures.add(future);\n@@ -121,0 +131,4 @@\n+\n+    void setFuturesCollection(Collection<Future<HttpResponse<Void>>> futures) {\n+        this.futures = futures;\n+    }\n","filename":"bots\/cli\/src\/main\/java\/org\/openjdk\/skara\/bots\/cli\/BotLogstashHandler.java","additions":38,"deletions":24,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-import org.junit.jupiter.api.*;\n+import org.junit.jupiter.api.Test;\n@@ -28,2 +28,7 @@\n-import java.util.logging.*;\n-import java.util.stream.Collectors;\n+import java.net.http.HttpResponse;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n+import java.util.logging.Level;\n+import java.util.logging.LogRecord;\n@@ -34,0 +39,1 @@\n+\n@@ -35,1 +41,1 @@\n-    void simple() throws IOException {\n+    void simple() throws IOException, ExecutionException, InterruptedException {\n@@ -38,0 +44,3 @@\n+            var futures = new ArrayList<Future<HttpResponse<Void>>>();\n+            handler.setFuturesCollection(futures);\n+\n@@ -41,0 +50,4 @@\n+            for (Future<HttpResponse<Void>> future : futures) {\n+                future.get();\n+            }\n+\n@@ -49,1 +62,1 @@\n-    void simpleTask() throws IOException {\n+    void simpleTask() throws IOException, ExecutionException, InterruptedException {\n@@ -52,0 +65,2 @@\n+            var futures = new ArrayList<Future<HttpResponse<Void>>>();\n+            handler.setFuturesCollection(futures);\n@@ -59,0 +74,4 @@\n+            for (Future<HttpResponse<Void>> future : futures) {\n+                future.get();\n+            }\n+\n@@ -60,0 +79,4 @@\n+            \/\/ The async message sending means we may get results in any order. Sort on the\n+            \/\/ timestamp to get the actual order.\n+            requests.sort(Comparator.comparing(r -> r.get(\"@timestamp\").toString()));\n+\n@@ -74,1 +97,1 @@\n-    void extraField() throws IOException {\n+    void extraField() throws IOException, ExecutionException, InterruptedException {\n@@ -77,0 +100,3 @@\n+            var futures = new ArrayList<Future<HttpResponse<Void>>>();\n+            handler.setFuturesCollection(futures);\n+\n@@ -83,0 +109,4 @@\n+            for (Future<HttpResponse<Void>> future : futures) {\n+                future.get();\n+            }\n+\n@@ -92,1 +122,1 @@\n-    void extraFieldTask() throws IOException {\n+    void extraFieldTask() throws IOException, ExecutionException, InterruptedException {\n@@ -95,0 +125,3 @@\n+            var futures = new ArrayList<Future<HttpResponse<Void>>>();\n+            handler.setFuturesCollection(futures);\n+\n@@ -107,0 +140,4 @@\n+            for (Future<HttpResponse<Void>> future : futures) {\n+                future.get();\n+            }\n+\n@@ -108,0 +145,4 @@\n+            \/\/ The async message sending means we may get results in any order. Sort on the\n+            \/\/ timestamp to get the actual order.\n+            requests.sort(Comparator.comparing(r -> r.get(\"@timestamp\").toString()));\n+\n","filename":"bots\/cli\/src\/test\/java\/org\/openjdk\/skara\/bots\/cli\/BotLogstashHandlerTests.java","additions":48,"deletions":7,"binary":false,"changes":55,"status":"modified"}]}