{"files":[{"patch":"@@ -123,0 +123,2 @@\n+    List<CommitMetadata> follow(Path path) throws IOException;\n+    List<CommitMetadata> follow(Path path, Hash base, Hash head) throws IOException;\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/ReadOnlyRepository.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -221,16 +221,1 @@\n-        var p = start(args);\n-        var reader = new UnixStreamReader(p.getInputStream());\n-        var result = new ArrayList<CommitMetadata>();\n-\n-        var line = reader.readLine();\n-        while (line != null) {\n-            if (!line.startsWith(\"commit\")) {\n-                throw new IOException(\"Unexpected line: \" + line);\n-            }\n-\n-            result.add(GitCommitMetadata.read(reader));\n-            line = reader.readLine();\n-        }\n-\n-        await(p);\n-        return result;\n+        return readMetadata(args, \"commit \");\n@@ -294,0 +279,43 @@\n+    private List<CommitMetadata> readMetadata(List<String> cmd, String delimiter) throws IOException {\n+        var p = start(cmd);\n+        var reader = new UnixStreamReader(p.getInputStream());\n+        var result = new ArrayList<CommitMetadata>();\n+\n+        var line = reader.readLine();\n+        while (line != null) {\n+            if (!line.startsWith(delimiter)) {\n+                throw new IOException(\"Unexpected line: \" + line);\n+            }\n+\n+            result.add(GitCommitMetadata.read(reader));\n+            line = reader.readLine();\n+        }\n+\n+        await(p);\n+        return result;\n+    }\n+\n+    @Override\n+    public List<CommitMetadata> follow(Path path) throws IOException {\n+        return follow(path, null, null);\n+    }\n+\n+    @Override\n+    public List<CommitMetadata> follow(Path path, Hash from, Hash to) throws IOException {\n+        var delimiter = \"#@!_-=&\";\n+        var cmd = new ArrayList<String>();\n+        cmd.addAll(List.of(\"git\", \"log\",\n+                                  \"--follow\",\n+                                  \"--format=\" + delimiter + \"\\n\" + GitCommitMetadata.FORMAT,\n+                                  \"--topo-order\",\n+                                  \"--no-abbrev\",\n+                                  \"--no-color\"));\n+        if (from != null && to != null) {\n+            cmd.add(from.hex() + \"..\" + to.hex());\n+        }\n+        cmd.add(\"--\");\n+        cmd.add(path.toString());\n+        return readMetadata(cmd, delimiter);\n+    }\n+\n+\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/git\/GitRepository.java","additions":44,"deletions":16,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -285,12 +285,1 @@\n-        var p = start(cmd);\n-        var reader = new UnixStreamReader(p.getInputStream());\n-        var result = new ArrayList<CommitMetadata>();\n-\n-        var line = reader.readLine();\n-        while (line != null) {\n-            result.add(HgCommitMetadata.read(reader));\n-            line = reader.readLine();\n-        }\n-\n-        await(p);\n-        return result;\n+        return readMetadata(cmd);\n@@ -339,0 +328,32 @@\n+    @Override\n+    public List<CommitMetadata> follow(Path path) throws IOException {\n+        return follow(path, null, null);\n+    }\n+\n+    private List<CommitMetadata> readMetadata(List<String> cmd) throws IOException {\n+        var p = start(cmd);\n+        var reader = new UnixStreamReader(p.getInputStream());\n+        var result = new ArrayList<CommitMetadata>();\n+\n+        var line = reader.readLine();\n+        while (line != null) {\n+            result.add(HgCommitMetadata.read(reader));\n+            line = reader.readLine();\n+        }\n+\n+        await(p);\n+        return result;\n+    }\n+\n+    @Override\n+    public List<CommitMetadata> follow(Path path, Hash from, Hash to) throws IOException {\n+        var cmd = new ArrayList<String>();\n+        cmd.addAll(List.of(\"hg\", \"log\", \"--follow\", \"--template\", HgCommitMetadata.TEMPLATE));\n+        if (from != null && to != null) {\n+            cmd.add(\"--rev\");\n+            cmd.add(from.hex() + \"..\" + to.hex() + \" - \" + from.hex());\n+        }\n+        cmd.add(path.toString());\n+        return readMetadata(cmd);\n+    }\n+\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/hg\/HgRepository.java","additions":33,"deletions":12,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -2618,0 +2618,26 @@\n+\n+    @ParameterizedTest\n+    @EnumSource(VCS.class)\n+    void testFollow(VCS vcs) throws IOException {\n+        try (var dir = new TemporaryDirectory()) {\n+            var r = Repository.init(dir.path(), vcs);\n+\n+            var readme = dir.path().resolve(\"README\");\n+            Files.write(readme, List.of(\"Hello, readme!\"));\n+\n+            r.add(readme);\n+            var first = r.commit(\"Add README\", \"duke\", \"duke@openjdk.java.net\");\n+\n+            var readme2 = dir.path().resolve(\"README2\");\n+            r.move(readme, readme2);\n+            var second = r.commit(\"Move README to README2\", \"duke\", \"duke@openjdk.java.net\");\n+\n+            Files.write(readme2, List.of(\"Hello, readme2!\"));\n+            r.add(readme2);\n+            var third = r.commit(\"Update README2\", \"duke\", \"duke@openjdk.java.net\");\n+\n+            var commits = r.follow(readme2);\n+            var hashes = commits.stream().map(CommitMetadata::hash).collect(Collectors.toList());\n+            assertEquals(List.of(third, second, first), hashes);\n+        }\n+    }\n","filename":"vcs\/src\/test\/java\/org\/openjdk\/skara\/vcs\/RepositoryTests.java","additions":26,"deletions":0,"binary":false,"changes":26,"status":"modified"}]}