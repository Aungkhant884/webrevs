{"files":[{"patch":"@@ -25,0 +25,1 @@\n+import java.util.regex.Pattern;\n@@ -48,1 +49,1 @@\n-    private final List<Branch> branches;\n+    private final List<Pattern> branchPatterns;\n@@ -53,1 +54,1 @@\n-        this(storage, from, to, List.of(), false);\n+        this(storage, from, to, List.of(), true);\n@@ -56,1 +57,1 @@\n-    MirrorBot(Path storage, HostedRepository from, HostedRepository to, List<Branch> branches,\n+    MirrorBot(Path storage, HostedRepository from, HostedRepository to, List<Pattern> branchPatterns,\n@@ -61,2 +62,2 @@\n-        this.branches = branches;\n-        this.shouldMirrorEverything = branches.isEmpty();\n+        this.branchPatterns = branchPatterns;\n+        this.shouldMirrorEverything = branchPatterns.isEmpty();\n@@ -87,5 +88,1 @@\n-                if (shouldMirrorEverything) {\n-                    repo = Repository.mirror(from.url(), dir);\n-                } else {\n-                    repo = Repository.clone(to.url(), dir);\n-                }\n+                repo = Repository.mirror(from.url(), dir);\n@@ -99,0 +96,2 @@\n+            log.info(\"Pulling \" + from.name());\n+            repo.fetchAll(from.url(), includeTags);\n@@ -100,3 +99,0 @@\n-                log.info(\"Pulling \" + from.name());\n-                \/\/ Tags are always included when mirroring everything\n-                repo.fetchAll(from.url(), true);\n@@ -106,0 +102,1 @@\n+                var branches = repo.branches();\n@@ -107,2 +104,8 @@\n-                    var fetchHead = repo.fetch(from.url(), branch.name(), includeTags);\n-                    repo.push(fetchHead, to.url(), branch.name(), false, includeTags);\n+                    if (branchPatterns.stream().anyMatch(p -> p.matcher(branch.name()).matches())) {\n+                        var hash = repo.resolve(branch);\n+                        if (hash.isPresent()) {\n+                            repo.push(hash.get(), to.url(), branch.name(), true, includeTags);\n+                        } else {\n+                            log.severe(\"Branch \" + branch + \" not found in repo \" + repo);\n+                        }\n+                    }\n@@ -121,3 +124,3 @@\n-        if (!branches.isEmpty()) {\n-            var branchNames = branches.stream().map(Branch::name).collect(Collectors.toList());\n-            name += \" (\" + String.join(\",\", branchNames) + \")\";\n+        if (!branchPatterns.isEmpty()) {\n+            var branchPatterns = this.branchPatterns.stream().map(Pattern::toString).collect(Collectors.toList());\n+            name += \" (\" + String.join(\",\", branchPatterns) + \")\";\n","filename":"bots\/mirror\/src\/main\/java\/org\/openjdk\/skara\/bots\/mirror\/MirrorBot.java","additions":21,"deletions":18,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import java.util.regex.Pattern;\n@@ -26,0 +27,1 @@\n+import org.openjdk.skara.json.JSONValue;\n@@ -61,5 +63,18 @@\n-            var branchNames = repo.contains(\"branches\")?\n-                repo.get(\"branches\").asString().split(\",\") : new String[0];\n-            var branches = Arrays.stream(branchNames)\n-                                 .map(Branch::new)\n-                                 .collect(Collectors.toList());\n+            List<Pattern> branchPatterns;\n+            if (repo.contains(\"branches\")) {\n+                \/\/ Accept both an array of regex patterns as well as a single comma separated\n+                \/\/ string for backwards compatibility\n+                var branchesElement = repo.get(\"branches\");\n+                if (branchesElement.isArray()) {\n+                    branchPatterns = branchesElement.asArray().stream()\n+                            .map(JSONValue::asString)\n+                            .map(Pattern::compile)\n+                            .toList();\n+                } else {\n+                    branchPatterns = Arrays.stream(repo.get(\"branches\").asString().split(\",\"))\n+                            .map(Pattern::compile)\n+                            .toList();\n+                }\n+            } else {\n+                branchPatterns = List.of();\n+            }\n@@ -67,1 +82,1 @@\n-            var includeTags = repo.contains(\"tags\") && repo.get(\"tags\").asBoolean();\n+            var includeTags = branchPatterns.isEmpty() || (repo.contains(\"tags\") && repo.get(\"tags\").asBoolean());\n@@ -70,1 +85,1 @@\n-            bots.add(new MirrorBot(storage, fromRepo, toRepo, branches, includeTags));\n+            bots.add(new MirrorBot(storage, fromRepo, toRepo, branchPatterns, includeTags));\n","filename":"bots\/mirror\/src\/main\/java\/org\/openjdk\/skara\/bots\/mirror\/MirrorBotFactory.java","additions":22,"deletions":7,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import java.util.regex.Pattern;\n@@ -216,1 +217,1 @@\n-            var bot = new MirrorBot(storage, fromHostedRepo, toHostedRepo, List.of(new Branch(\"master\")), true);\n+            var bot = new MirrorBot(storage, fromHostedRepo, toHostedRepo, List.of(Pattern.compile(\"master\")), true);\n@@ -236,0 +237,11 @@\n+\n+            \/\/ Change a tag and go again\n+            Files.writeString(newFile, \"Hello world again\\n\", StandardOpenOption.APPEND);\n+            fromLocalRepo.add(newFile);\n+            var secondHash = fromLocalRepo.commit(\"An additional commit\", \"duke\", \"duke@openjdk.org\");\n+            var firstTag = fromLocalRepo.tag(secondHash, \"first\", \"add first tag again\", \"duke\", \"duk@openjdk.org\", null, true);\n+\n+            TestBotRunner.runPeriodicItems(bot);\n+            toTags = toLocalRepo.tags();\n+            assertEquals(3, toTags.size());\n+            assertEquals(fromLocalRepo.annotate(firstTag), toLocalRepo.annotate(firstTag), \"First tag not correctly mirrored\");\n@@ -273,1 +285,1 @@\n-            var bot = new MirrorBot(storage, fromHostedRepo, toHostedRepo, List.of(new Branch(\"master\")), false);\n+            var bot = new MirrorBot(storage, fromHostedRepo, toHostedRepo, List.of(Pattern.compile(\"master\")), false);\n@@ -382,1 +394,1 @@\n-            var bot = new MirrorBot(storage, fromHostedRepo, toHostedRepo, List.of(new Branch(\"master\")), false);\n+            var bot = new MirrorBot(storage, fromHostedRepo, toHostedRepo, List.of(Pattern.compile(\"master\")), false);\n@@ -391,0 +403,48 @@\n+\n+    @Test\n+    void mirrorSelectedBranchPattern(TestInfo testInfo) throws IOException {\n+        try (var temp = new TemporaryDirectory()) {\n+            var host = TestHost.createNew(List.of(HostUser.create(0, \"duke\", \"J. Duke\")));\n+\n+            var fromDir = temp.path().resolve(\"from.git\");\n+            var fromLocalRepo = TestableRepository.init(fromDir, VCS.GIT);\n+            var fromHostedRepo = new TestHostedRepository(host, \"test\", fromLocalRepo);\n+\n+            var toDir = temp.path().resolve(\"to.git\");\n+            var toLocalRepo = TestableRepository.init(toDir, VCS.GIT);\n+            var gitConfig = toDir.resolve(\".git\").resolve(\"config\");\n+            Files.write(gitConfig, List.of(\"[receive]\", \"denyCurrentBranch = ignore\"),\n+                    StandardOpenOption.APPEND);\n+            var toHostedRepo = new TestHostedRepository(host, \"test-mirror\", toLocalRepo);\n+\n+            var newFile = fromDir.resolve(\"this-file-cannot-exist.txt\");\n+            Files.writeString(newFile, \"Hello world\\n\");\n+            fromLocalRepo.add(newFile);\n+            var first = fromLocalRepo.commit(\"An additional commit\", \"duke\", \"duke@openjdk.org\");\n+            var featureBranch = fromLocalRepo.branch(first, \"feature\");\n+            fromLocalRepo.checkout(featureBranch, false);\n+            assertEquals(Optional.of(featureBranch), fromLocalRepo.currentBranch());\n+\n+            Files.writeString(newFile, \"Hello again\\n\", StandardOpenOption.APPEND);\n+            fromLocalRepo.add(newFile);\n+            var second = fromLocalRepo.commit(\"An additional commit\", \"duke\", \"duke@openjdk.org\");\n+\n+            assertEquals(Optional.of(first), fromLocalRepo.resolve(\"master\"));\n+            assertEquals(Optional.of(second), fromLocalRepo.resolve(\"feature\"));\n+\n+            var fromCommits = fromLocalRepo.commits().asList();\n+            assertEquals(2, fromCommits.size());\n+\n+            var toCommits = toLocalRepo.commits().asList();\n+            assertEquals(0, toCommits.size());\n+\n+            var storage = temp.path().resolve(\"storage\");\n+            var bot = new MirrorBot(storage, fromHostedRepo, toHostedRepo, List.of(Pattern.compile(\"f.*\")), false);\n+            TestBotRunner.runPeriodicItems(bot);\n+\n+            toCommits = toLocalRepo.commits().asList();\n+            assertEquals(2, toCommits.size());\n+            assertEquals(second, toCommits.get(0).hash());\n+            assertEquals(List.of(new Branch(\"feature\")), toLocalRepo.branches());\n+        }\n+    }\n","filename":"bots\/mirror\/src\/test\/java\/org\/openjdk\/skara\/bots\/mirror\/MirrorBotTests.java","additions":63,"deletions":3,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -597,0 +597,3 @@\n+            if (force) {\n+                cmd.add(\"--force\");\n+            }\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/git\/GitRepository.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}