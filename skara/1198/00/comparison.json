{"files":[{"patch":"@@ -343,4 +343,5 @@\n-    private String getChecksList(PullRequestCheckIssueVisitor visitor) {\n-        return visitor.getChecks().entrySet().stream()\n-                      .map(entry -> \"- [\" + (entry.getValue() ? \"x\" : \" \") + \"] \" + entry.getKey())\n-                      .collect(Collectors.joining(\"\\n\"));\n+    private String getChecksList(PullRequestCheckIssueVisitor visitor, boolean isCleanBackport) {\n+        var checks = isCleanBackport ? visitor.getReadyForReviewChecks() : visitor.getChecks();\n+        return checks.entrySet().stream()\n+                .map(entry -> \"- [\" + (entry.getValue() ? \"x\" : \" \") + \"] \" + entry.getKey())\n+                .collect(Collectors.joining(\"\\n\"));\n@@ -420,1 +421,2 @@\n-                                    List<String> additionalErrors, List<String> integrationBlockers) {\n+                                    List<String> additionalErrors, List<String> integrationBlockers,\n+                                    boolean isCleanBackport) {\n@@ -424,1 +426,1 @@\n-        progressBody.append(getChecksList(visitor));\n+        progressBody.append(getChecksList(visitor, isCleanBackport));\n@@ -920,1 +922,1 @@\n-            var statusMessage = getStatusMessage(comments, activeReviews, visitor, additionalErrors, integrationBlockers);\n+            var statusMessage = getStatusMessage(comments, activeReviews, visitor, additionalErrors, integrationBlockers, isCleanBackport);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -78,0 +78,7 @@\n+    Map<String, Boolean> getReadyForReviewChecks() {\n+        return enabledChecks.stream()\n+                            .filter(check -> displayedChecks.contains(check.getClass()))\n+                            .filter(check -> !(check instanceof ReviewersCheck))\n+                            .collect(Collectors.toMap(Check::description,\n+                                                      check -> !failedChecks.containsKey(check.getClass())));\n+    }\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestCheckIssueVisitor.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import org.openjdk.skara.jcheck.ReviewersCheck;\n@@ -580,0 +581,1 @@\n+            assertFalse(pr.body().contains(ReviewersCheck.DESCRIPTION), \"Reviewer requirement found in pr body\");\n@@ -720,0 +722,1 @@\n+            assertTrue(pr.body().contains(ReviewersCheck.DESCRIPTION), \"Reviewer requirement not found in pr body\");\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/BackportTests.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+    public static final String DESCRIPTION = \"Change must be properly reviewed\";\n@@ -172,1 +173,1 @@\n-        return \"Change must be properly reviewed\";\n+        return DESCRIPTION;\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/ReviewersCheck.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}