{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import org.openjdk.skara.issuetracker.IssueTracker;\n@@ -47,1 +48,1 @@\n-     * Configuration-specific name mapped to a IssueProject.\n+     * Configuration-specific name mapped to an IssueProject.\n@@ -53,0 +54,7 @@\n+    \/**\n+     * Configuration-specific name mapped to an IssueTracker.\n+     * @param name\n+     * @return\n+     *\/\n+    IssueTracker issueTracker(String name);\n+\n","filename":"bot\/src\/main\/java\/org\/openjdk\/skara\/bot\/BotConfiguration.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -269,0 +269,8 @@\n+            @Override\n+            public IssueTracker issueTracker(String name) {\n+                if (!issueHosts.containsKey(name)) {\n+                    throw new RuntimeException(\"Couldn't find issue tracker with name: \" + name);\n+                }\n+                return issueHosts.get(name);\n+            }\n+\n","filename":"bot\/src\/main\/java\/org\/openjdk\/skara\/bot\/BotRunnerConfiguration.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -262,0 +262,4 @@\n+    @Override\n+    public void removeCollaborator(HostUser user) {\n+    }\n+\n","filename":"bots\/tester\/src\/test\/java\/org\/openjdk\/skara\/bots\/tester\/InMemoryHostedRepository.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -172,0 +172,1 @@\n+    void removeCollaborator(HostUser user);\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/HostedRepository.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -288,0 +288,5 @@\n+    @Override\n+    public void removeCollaborator(HostUser user) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/bitbucket\/BitbucketRepository.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -679,0 +679,5 @@\n+    @Override\n+    public void removeCollaborator(HostUser user) {\n+        request.delete(\"collaborators\/\" + user.username()).execute();\n+    }\n+\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubRepository.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -808,0 +808,7 @@\n+    @Override\n+    public void removeCollaborator(HostUser user) {\n+        request.delete(\"members\/\" + user.id())\n+                .header(\"Content-Type\", \"application\/json\")\n+                .execute();\n+    }\n+\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabRepository.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -367,0 +367,16 @@\n+\n+    \/**\n+     * Expects:\n+     * github.collaborators.repository: Github repository where user has admin access\n+     * github.collaborators.user: User not currently a collaborator in repository\n+     *\/\n+    @Test\n+    void addRemoveCollaborator() {\n+        var gitHubRepo = githubHost.repository(settings.getProperty(\"github.collaborators.repository\")).orElseThrow();\n+        var userName = settings.getProperty(\"github.collaborators.user\");\n+        var user = gitHubRepo.forge().user(userName).orElseThrow();\n+        gitHubRepo.addCollaborator(user, false);\n+        \/\/ On Github, the user has to accept an invitation before becoming a collaborator\n+        \/\/ so we cannot verify automatically here.\n+        gitHubRepo.removeCollaborator(user);\n+    }\n","filename":"forge\/src\/test\/java\/org\/openjdk\/skara\/forge\/github\/GitHubRestApiTests.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -305,0 +305,44 @@\n+\n+    \/**\n+     * Expects:\n+     * github.collaborators.repository: Github repository where user has admin access\n+     * github.collaborators.user: User not currently a collaborator in repository\n+     *\/\n+    @Test\n+    void addRemoveCollaborator() {\n+        var gitLabRepo = gitLabHost.repository(settings.getProperty(\"gitlab.collaborators.repository\")).orElseThrow();\n+        var userName = settings.getProperty(\"gitlab.collaborators.user\");\n+        var user = gitLabRepo.forge().user(userName).orElseThrow();\n+        gitLabRepo.addCollaborator(user, false);\n+        {\n+            var collaborators = gitLabRepo.collaborators();\n+            var collaborator = collaborators.stream()\n+                    .filter(c -> c.user().username().equals(userName))\n+                    .findAny().orElseThrow();\n+            assertFalse(collaborator.canPush());\n+        }\n+        gitLabRepo.removeCollaborator(user);\n+        {\n+            var collaborators = gitLabRepo.collaborators();\n+            var collaborator = collaborators.stream()\n+                    .filter(c -> c.user().username().equals(userName))\n+                    .findAny();\n+            assertTrue(collaborator.isEmpty());\n+        }\n+        gitLabRepo.addCollaborator(user, true);\n+        {\n+            var collaborators = gitLabRepo.collaborators();\n+            var collaborator = collaborators.stream()\n+                    .filter(c -> c.user().username().equals(userName))\n+                    .findAny().orElseThrow();\n+            assertTrue(collaborator.canPush());\n+        }\n+        gitLabRepo.removeCollaborator(user);\n+        {\n+            var collaborators = gitLabRepo.collaborators();\n+            var collaborator = collaborators.stream()\n+                    .filter(c -> c.user().username().equals(userName))\n+                    .findAny();\n+            assertTrue(collaborator.isEmpty());\n+        }\n+    }\n","filename":"forge\/src\/test\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabRestApiTest.java","additions":44,"deletions":0,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+    private boolean active;\n@@ -42,0 +43,1 @@\n+        private boolean active = true;\n@@ -69,0 +71,5 @@\n+        public Builder active(boolean active) {\n+            this.active = active;\n+            return this;\n+        }\n+\n@@ -75,1 +82,1 @@\n-            return new HostUser(id, username, fullName, email, supplier);\n+            return new HostUser(id, username, fullName, email, active, supplier);\n@@ -79,1 +86,1 @@\n-    private HostUser(String id, String username, String fullName, String email, Supplier<HostUser> supplier) {\n+    private HostUser(String id, String username, String fullName, String email, boolean active, Supplier<HostUser> supplier) {\n@@ -84,0 +91,1 @@\n+        this.active = active;\n@@ -96,0 +104,4 @@\n+    public static HostUser create(String id, String username, String fullName, boolean active) {\n+        return builder().id(id).username(username).fullName(fullName).active(active).build();\n+    }\n+\n@@ -127,0 +139,1 @@\n+        active = result.active;\n@@ -158,0 +171,4 @@\n+    public boolean active() {\n+        return active;\n+    }\n+\n","filename":"host\/src\/main\/java\/org\/openjdk\/skara\/host\/HostUser.java","additions":20,"deletions":3,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -0,0 +1,44 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.issuetracker;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import org.openjdk.skara.host.HostUser;\n+\n+\/**\n+ * Tracks and caches users active state in an IssueTracker. Caching should be thread safe.\n+ *\/\n+public class ActiveUserTracker {\n+\n+    private final IssueTracker issueTracker;\n+    private final Map<String, Boolean> userActiveMap = new ConcurrentHashMap<>();\n+\n+    public ActiveUserTracker(IssueTracker issueTracker) {\n+        this.issueTracker = issueTracker;\n+    }\n+\n+    public boolean isUserActive(String userName) {\n+        return userActiveMap.computeIfAbsent(userName, (u) -> issueTracker.user(u).map(HostUser::active).orElse(false));\n+    }\n+}\n","filename":"issuetracker\/src\/main\/java\/org\/openjdk\/skara\/issuetracker\/ActiveUserTracker.java","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -126,2 +126,3 @@\n-                                   data.get(\"name\").asString(),\n-                                   data.get(\"displayName\").asString());\n+                data.get(\"name\").asString(),\n+                data.get(\"displayName\").asString(),\n+                data.get(\"active\").asBoolean());\n@@ -136,5 +137,6 @@\n-                                  .id(data.get(\"name\").asString())\n-                                  .username(data.get(\"name\").asString())\n-                                  .fullName(data.get(\"displayName\").asString())\n-                                  .email(data.get(\"emailAddress\").asString())\n-                                  .build();\n+                    .id(data.get(\"name\").asString())\n+                    .username(data.get(\"name\").asString())\n+                    .fullName(data.get(\"displayName\").asString())\n+                    .active(data.get(\"active\").asBoolean())\n+                    .email(data.get(\"emailAddress\").asString())\n+                    .build();\n","filename":"issuetracker\/src\/main\/java\/org\/openjdk\/skara\/issuetracker\/jira\/JiraHost.java","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -25,0 +25,2 @@\n+import java.net.URI;\n+import org.junit.jupiter.api.BeforeEach;\n@@ -28,0 +30,1 @@\n+import org.openjdk.skara.issuetracker.IssueTracker;\n@@ -33,0 +36,1 @@\n+import java.util.Properties;\n@@ -34,3 +38,1 @@\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertNotEquals;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -46,0 +48,19 @@\n+    private URI jiraUri;\n+    private Properties settings;\n+\n+    @BeforeEach\n+    void setupJira() throws IOException {\n+        HttpProxy.setup();\n+        settings = ManualTestSettings.loadManualTestSettings();\n+        jiraUri = URIBuilder.base(settings.getProperty(\"jira.uri\")).build();\n+    }\n+\n+    private IssueTracker authenticatedJiraHost() {\n+        var pat = settings.getProperty(\"jira.pat\");\n+        return new JiraIssueTrackerFactory().createWithPat(jiraUri, \"Bearer \" + pat);\n+    }\n+\n+    private IssueTracker jiraHost() {\n+        return new JiraIssueTrackerFactory().create(jiraUri, null, null);\n+    }\n+\n@@ -47,3 +68,2 @@\n-    void testJepIssue() throws IOException {\n-        var uri = URIBuilder.base(\"https:\/\/bugs.openjdk.org\").build();\n-        var jiraHost = new JiraIssueTrackerFactory().create(uri, null, null);\n+    void testJepIssue() {\n+        var jiraHost = jiraHost();\n@@ -71,8 +91,4 @@\n-    void test() throws IOException {\n-        var settings = ManualTestSettings.loadManualTestSettings();\n-        var jiraUri = settings.getProperty(\"jira-uri\");\n-        var cookie = settings.getProperty(\"jira-cookie\");\n-        var projectId = settings.getProperty(\"jira-project-id\");\n-        var issueId = settings.getProperty(\"jira-issue-id\");\n-        var uri = URIBuilder.base(jiraUri).build();\n-        var jiraHost = new JiraIssueTrackerFactory().create(uri, cookie);\n+    void testClosingIssue() {\n+        var projectId = settings.getProperty(\"jira.project\");\n+        var issueId = settings.getProperty(\"jira.issue\");\n+        var jiraHost = authenticatedJiraHost();\n@@ -80,2 +96,1 @@\n-        var jiraIssueOpt = jiraProject.issue(issueId);\n-        var jiraIssue = jiraIssueOpt.get();\n+        var jiraIssue = jiraProject.issue(issueId).orElseThrow();\n@@ -84,2 +99,2 @@\n-        var jiraIssueOpt2 = jiraProject.issue(issueId);\n-        assertEquals(Issue.State.CLOSED, jiraIssueOpt2.get().state());\n+        var jiraIssue2 = jiraProject.issue(issueId).orElseThrow();\n+        assertEquals(Issue.State.CLOSED, jiraIssue2.state());\n@@ -89,3 +104,1 @@\n-    void testEquals() throws IOException {\n-        HttpProxy.setup();\n-        var uri = URIBuilder.base(\"https:\/\/bugs.openjdk.org\").build();\n+    void testIssueEquals() throws IOException {\n@@ -93,1 +106,0 @@\n-        var pat = settings.getProperty(\"jira.pat\");\n@@ -96,1 +108,1 @@\n-        var jiraHost = new JiraIssueTrackerFactory().createWithPat(uri, \"Bearer \" + pat);\n+        var jiraHost = authenticatedJiraHost();\n@@ -104,0 +116,12 @@\n+\n+    @Test\n+    void testUserActive() {\n+        var jiraHost = authenticatedJiraHost();\n+        var activeUserId = settings.getProperty(\"jira.user.active\");\n+        var activeUser = jiraHost.user(activeUserId).orElseThrow();\n+        assertTrue(activeUser.active());\n+\n+        var inactiveUserId = settings.getProperty(\"jira.user.inactive\");\n+        var inactiveUser = jiraHost.user(inactiveUserId).orElseThrow();\n+        assertFalse(inactiveUser.active());\n+    }\n","filename":"issuetracker\/src\/test\/java\/org\/openjdk\/skara\/issuetracker\/jira\/JiraProjectTests.java","additions":47,"deletions":23,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -46,10 +46,1 @@\n-    private static class User {\n-        final String forgeId;\n-        final String name;\n-        final String fullName;\n-\n-        User(String forgeId, String name, String fullName) {\n-            this.forgeId = forgeId;\n-            this.name = name;\n-            this.fullName = fullName;\n-        }\n+    public record User(String forgeId, String name, String fullName) {\n@@ -189,0 +180,4 @@\n+    public User user(String forgeId) {\n+        return users.get(forgeId);\n+    }\n+\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/CensusBuilder.java","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import org.openjdk.skara.issuetracker.IssueTracker;\n@@ -36,0 +37,1 @@\n+    private final Map<String, IssueTracker> issueTrackers;\n@@ -40,1 +42,2 @@\n-    private TestBotFactory(Map<String, HostedRepository> hostedRepositories, Map<String, IssueProject> issueProjects,\n+    private TestBotFactory(Map<String, HostedRepository> hostedRepositories,\n+            Map<String, IssueTracker> issueTrackers, Map<String, IssueProject> issueProjects,\n@@ -43,0 +46,1 @@\n+        this.issueTrackers = Collections.unmodifiableMap(issueTrackers);\n@@ -54,0 +58,1 @@\n+        private final Map<String, IssueTracker> issueTrackers = new HashMap<>();\n@@ -66,0 +71,5 @@\n+        public TestBotFactoryBuilder addIssueTracker(String name, IssueTracker issueTracker) {\n+            issueTrackers.put(name, issueTracker);\n+            return this;\n+        }\n+\n@@ -82,1 +92,1 @@\n-            return new TestBotFactory(hostedRepositories, issueProjects, storagePath, defaultConfiguration);\n+            return new TestBotFactory(hostedRepositories, issueTrackers, issueProjects, storagePath, defaultConfiguration);\n@@ -121,0 +131,8 @@\n+            @Override\n+            public IssueTracker issueTracker(String name) {\n+                if (!issueTrackers.containsKey(name)) {\n+                    throw new RuntimeException(\"Unknown issue tracker: \" + name);\n+                }\n+                return issueTrackers.get(name);\n+            }\n+\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestBotFactory.java","additions":21,"deletions":3,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -331,0 +331,10 @@\n+\n+    \/**\n+     * Test method to update the active state of an existing user\n+     *\/\n+    public void setUserActive(String user, boolean active) {\n+        var currentUser = user(user).orElseThrow();\n+        data.users.remove(currentUser);\n+        var newUser = HostUser.create(currentUser.id(), currentUser.username(), currentUser.fullName(), active);\n+        data.users.add(newUser);\n+    }\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestHost.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -427,0 +427,8 @@\n+    @Override\n+    public void removeCollaborator(HostUser user) {\n+        var toRemove = collaborators.stream()\n+                .filter(c -> c.user().equals(user))\n+                .toList();\n+        toRemove.forEach(collaborators::remove);\n+    }\n+\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestHostedRepository.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"}]}