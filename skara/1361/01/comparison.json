{"files":[{"patch":"@@ -208,0 +208,1 @@\n+            var start = Instant.now();\n@@ -210,1 +211,1 @@\n-                var submittedDuration = Duration.between(createTime, Instant.now());\n+                var submittedDuration = Duration.between(createTime, start);\n@@ -213,1 +214,2 @@\n-                        + \" after being submitted for \" + submittedDuration, TaskPhases.BEGIN);\n+                        + \" after being submitted for \" + submittedDuration,\n+                        new Object[]{TaskPhases.BEGIN, submittedDuration});\n@@ -233,1 +235,6 @@\n-                    log.log(Level.FINE, \"Item \" + item + \" is now done\", TaskPhases.END);\n+                    var duration = Duration.between(start, Instant.now());\n+                    log.log(Level.FINE, \"Item \" + item + \" is now done after \" + duration,\n+                            new Object[]{TaskPhases.END, duration});\n+                }\n+                if (followUpItems != null) {\n+                    followUpItems.forEach(BotRunner.this::submitOrSchedule);\n@@ -235,4 +242,0 @@\n-            }\n-            if (followUpItems != null) {\n-                followUpItems.forEach(BotRunner.this::submitOrSchedule);\n-            }\n@@ -240,19 +243,20 @@\n-            synchronized (executor) {\n-                scratchPaths.addLast(scratchPath);\n-                done(item);\n-\n-                \/\/ Some of the pending items may now be eligible for execution\n-                var candidateItems = pending.entrySet().stream()\n-                        .filter(e -> e.getValue().isEmpty() || !active.containsKey(e.getValue().get()))\n-                        .map(Map.Entry::getKey)\n-                        .toList();\n-\n-                \/\/ Try the candidates against the current active set\n-                for (var candidate : candidateItems) {\n-                    boolean maySubmit = true;\n-                    for (var activeItem : active.keySet()) {\n-                        if (!activeItem.concurrentWith(candidate.item)) {\n-                            \/\/ Still can't run this candidate, leave it pending\n-                            log.finer(\"Cannot submit candidate \" + candidate + \" - not concurrent with \" + activeItem);\n-                            maySubmit = false;\n-                            break;\n+                synchronized (executor) {\n+                    scratchPaths.addLast(scratchPath);\n+                    done(item);\n+\n+                    \/\/ Some of the pending items may now be eligible for execution\n+                    var candidateItems = pending.entrySet().stream()\n+                            .filter(e -> e.getValue().isEmpty() || !active.containsKey(e.getValue().get()))\n+                            .map(Map.Entry::getKey)\n+                            .toList();\n+\n+                    \/\/ Try the candidates against the current active set\n+                    for (var candidate : candidateItems) {\n+                        boolean maySubmit = true;\n+                        for (var activeItem : active.keySet()) {\n+                            if (!activeItem.concurrentWith(candidate.item)) {\n+                                \/\/ Still can't run this candidate, leave it pending\n+                                log.finer(\"Cannot submit candidate \" + candidate + \" - not concurrent with \" + activeItem);\n+                                maySubmit = false;\n+                                break;\n+                            }\n@@ -260,1 +264,0 @@\n-                    }\n@@ -262,8 +265,9 @@\n-                    if (maySubmit) {\n-                        removePending(candidate);\n-                        submit(candidate.item);\n-                        var timeSinceCreation = Duration.between(candidate.createTime, Instant.now());\n-                        PENDING_TIME_GAUGE.labels(candidate.item.botName(), candidate.item.workItemName())\n-                                .set(timeSinceCreation.toMillis() \/ 1_000.0);\n-                        log.fine(\"Submitting candidate: \" + candidate.item\n-                                + \" after being pending for \" + timeSinceCreation);\n+                        if (maySubmit) {\n+                            removePending(candidate);\n+                            submit(candidate.item);\n+                            var timeSinceCreation = Duration.between(candidate.createTime, Instant.now());\n+                            PENDING_TIME_GAUGE.labels(candidate.item.botName(), candidate.item.workItemName())\n+                                    .set(timeSinceCreation.toMillis() \/ 1_000.0);\n+                            log.log(Level.FINE, \"Submitting item \" + candidate.item\n+                                    + \" after being pending for \" + timeSinceCreation, timeSinceCreation);\n+                        }\n@@ -321,0 +325,1 @@\n+                    log.fine(\"Adding pending item \" + item);\n@@ -325,1 +330,1 @@\n-\n+            log.fine(\"Submitting item \" + item);\n@@ -451,1 +456,1 @@\n-            log.log(Level.FINE, \"Starting of checking for periodic items\", TaskPhases.BEGIN);\n+            log.log(Level.FINE, \"Start of checking for periodic items\", TaskPhases.BEGIN);\n@@ -456,1 +461,1 @@\n-                        log.fine(\"Starting of checking for periodic items for \" + bot.toString());\n+                        log.fine(\"Start of checking for periodic items for \" + bot);\n@@ -458,1 +463,0 @@\n-                        PERIODIC_CHECK_TIME.labels(bot.name()).inc(Duration.between(botStart, Instant.now()).toMillis() \/ 1_000.0);\n@@ -462,0 +466,3 @@\n+                        var duration = Duration.between(botStart, Instant.now());\n+                        log.log(Level.FINE, \"Checking for periodic items for \" + bot + \" took \" + duration, duration);\n+                        PERIODIC_CHECK_TIME.labels(bot.name()).inc(duration.toMillis() \/ 1_000.0);\n@@ -471,2 +478,4 @@\n-                log.log(Level.FINE, \"Done checking periodic items\", TaskPhases.END);\n-                PERIODIC_CHECK_TIME_GAUGE.set(Duration.between(start, Instant.now()).toMillis() \/ 1_000.0);\n+                var duration = Duration.between(start, Instant.now());\n+                log.log(Level.FINE, \"Checking periodic items took \" + duration,\n+                        new Object[]{TaskPhases.END, duration});\n+                PERIODIC_CHECK_TIME_GAUGE.set(duration.toMillis() \/ 1_000.0);\n","filename":"bot\/src\/main\/java\/org\/openjdk\/skara\/bot\/BotRunner.java","additions":50,"deletions":41,"binary":false,"changes":91,"status":"modified"},{"patch":"@@ -59,4 +59,1 @@\n-        if (record.getParameters().length != 1) {\n-            return false;\n-        }\n-        return marker.equals(record.getParameters()[0]);\n+        return Arrays.asList(record.getParameters()).contains(marker);\n","filename":"bot\/src\/main\/java\/org\/openjdk\/skara\/bot\/BotTaskAggregationHandler.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -116,0 +116,9 @@\n+        var parameters = record.getParameters();\n+        if (parameters != null) {\n+            for (var parameter : parameters) {\n+                if (parameter instanceof Duration duration) {\n+                    query.put(\"duration\", duration.toMillis());\n+                }\n+            }\n+        }\n+\n","filename":"bots\/cli\/src\/main\/java\/org\/openjdk\/skara\/bots\/cli\/BotLogstashHandler.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -105,1 +105,0 @@\n-            log.fine(\"Scheduling: \" + issueWorkItem);\n","filename":"bots\/csr\/src\/main\/java\/org\/openjdk\/skara\/bots\/csr\/CSRIssueBot.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -83,2 +83,1 @@\n-            var pullRequestWorkItem = new PullRequestWorkItem(repo, pr.id(), project);\n-            log.fine(\"Scheduling: \" + pullRequestWorkItem);\n+            var pullRequestWorkItem = new PullRequestWorkItem(repo, pr.id(), project, pr.updatedAt());\n","filename":"bots\/csr\/src\/main\/java\/org\/openjdk\/skara\/bots\/csr\/CSRPullRequestBot.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -86,1 +86,3 @@\n-                .map(pr -> new PullRequestWorkItem(pr.repository(), pr.id(), csrIssue.project()))\n+                \/\/ This will mix time stamps from the IssueTracker and the Forge hosting PRs, but it's the\n+                \/\/ best we can do.\n+                .map(pr -> new PullRequestWorkItem(pr.repository(), pr.id(), csrIssue.project(), csrIssue.updatedAt()))\n@@ -88,1 +90,0 @@\n-        ret.forEach(item -> log.fine(\"Scheduling: \" + item.toString() + \" due to update in \" + csrIssue.id()));\n","filename":"bots\/csr\/src\/main\/java\/org\/openjdk\/skara\/bots\/csr\/IssueWorkItem.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,0 +26,2 @@\n+import java.time.Duration;\n+import java.time.ZonedDateTime;\n@@ -29,0 +31,1 @@\n+import java.util.logging.Level;\n@@ -53,0 +56,6 @@\n+    \/**\n+     * The updatedAt timestamp of the external entity that triggered this WorkItem,\n+     * which would be either a PR or a CSR Issue. Used for tracking reaction legacy\n+     * of the bot through logging.\n+     *\/\n+    private final ZonedDateTime triggerUpdatedAt;\n@@ -54,1 +63,2 @@\n-    public PullRequestWorkItem(HostedRepository repository, String prId, IssueProject project) {\n+    public PullRequestWorkItem(HostedRepository repository, String prId, IssueProject project,\n+            ZonedDateTime triggerUpdatedAt) {\n@@ -58,0 +68,1 @@\n+        this.triggerUpdatedAt = triggerUpdatedAt;\n@@ -171,0 +182,1 @@\n+            logLatency();\n@@ -181,0 +193,1 @@\n+            logLatency();\n@@ -191,0 +204,1 @@\n+            logLatency();\n@@ -207,0 +221,1 @@\n+            logLatency();\n@@ -220,0 +235,1 @@\n+        logLatency();\n@@ -223,0 +239,8 @@\n+    private void logLatency() {\n+        if (log.isLoggable(Level.INFO)) {\n+            var updatedPr = repository.pullRequest(prId);\n+            var latency = Duration.between(triggerUpdatedAt, updatedPr.updatedAt());\n+            log.log(Level.INFO, \"Time from trigger to CSR state updated in PR \" + latency, latency);\n+        }\n+    }\n+\n","filename":"bots\/csr\/src\/main\/java\/org\/openjdk\/skara\/bots\/csr\/PullRequestWorkItem.java","additions":25,"deletions":1,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import java.util.logging.Level;\n@@ -406,0 +407,4 @@\n+            \/\/ Mixing forge time and local time for the latency is not ideal, but the best\n+            \/\/ we can do here.\n+            var latency = Duration.between(pr.updatedAt(), ZonedDateTime.now());\n+            log.log(Level.INFO, \"Time from PR updated to emails sent \" + latency, latency);\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/ArchiveWorkItem.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -25,0 +25,3 @@\n+import java.time.Duration;\n+import java.time.ZonedDateTime;\n+import java.util.logging.Level;\n@@ -90,0 +93,3 @@\n+            \/\/ Timestamp from email and a local date is the best we can do for latency here\n+            var latency = Duration.between(message.date(), ZonedDateTime.now());\n+            log.log(Level.INFO, \"Time from message date to posting comment \" + latency, latency);\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/CommentPosterWorkItem.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -127,0 +127,1 @@\n+        log.info(\"Found \" + bridgeCandidates.size() + \" candidates for comments\");\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/MailingListArchiveReaderBot.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-    private final Logger log = Logger.getLogger(\"org.openjdk.skara.bots\");;\n+    private final Logger log = Logger.getLogger(\"org.openjdk.skara.bots\");\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/NotifyBot.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,0 +25,4 @@\n+import java.time.Duration;\n+import java.time.ZonedDateTime;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n@@ -39,0 +43,1 @@\n+    private final Logger log = Logger.getLogger(\"org.openjdk.skara.bots.notify\");\n@@ -248,0 +253,4 @@\n+        \/\/ This is mixing timestamps from the forge and the local host, which may not produce\n+        \/\/ very accurate latencies, but it's the best we can do for this bot.\n+        var latency = Duration.between(pr.updatedAt(), ZonedDateTime.now());\n+        log.log(Level.INFO, \"Time from PR updated to notifications done \" + latency, latency);\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/PullRequestWorkItem.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -25,0 +25,2 @@\n+import java.time.Duration;\n+import java.time.ZonedDateTime;\n@@ -154,0 +156,8 @@\n+                    if (log.isLoggable(Level.INFO)) {\n+                        var now = ZonedDateTime.now();\n+                        for (Commit commit : commits) {\n+                            var latency = Duration.between(commit.metadata().committed(), now);\n+                            log.log(Level.INFO, \"Time from committed to notified for \" + commit.hash()\n+                                    + \" on branch \" + ref + \" \" + latency, latency);\n+                        }\n+                    }\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/RepositoryWorkItem.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -88,0 +88,1 @@\n+            log.info(\"Posting commit comment on \" + hash);\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/comment\/CommitCommentNotifier.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -196,0 +196,1 @@\n+                    log.info(\"Resolving issue \" + issue.id());\n@@ -225,0 +226,1 @@\n+            log.info(\"Adding review link to issue \" + realIssue.get().id());\n@@ -228,0 +230,1 @@\n+        log.info(\"Adding review link comment to issue \" + realIssue.get().id());\n@@ -239,0 +242,1 @@\n+        log.info(\"Removing review links from issue \" + realIssue.get().id());\n@@ -289,0 +293,1 @@\n+                                log.info(\"Creating new backport for \" + issue.id() + \" with fixVersion \" + requestedVersion);\n@@ -291,0 +296,2 @@\n+                                log.info(\"Found existing backport for \" + issue.id() + \" and requested fixVersion \"\n+                                        + requestedVersion + \" \" + existing.get().id());\n@@ -308,0 +315,1 @@\n+                    log.info(\"Resolving issue \" + issue.id());\n@@ -313,0 +321,1 @@\n+                                log.info(\"Setting assignee for issue \" + issue.id() + \" to \" + assignee.get());\n@@ -325,0 +334,1 @@\n+                                log.info(\"Setting resolved in build for \" + issue.id() + \" to \" + buildName);\n@@ -330,0 +340,1 @@\n+                        log.info(\"Setting fixVersion for \" + issue.id() + \" to \" + requestedVersion);\n@@ -417,0 +428,1 @@\n+                            log.info(\"Setting resolved in build for \" + issue.id() + \" to \" + newBuild);\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifier.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -212,0 +212,3 @@\n+            log.info(\"Sending email for commits \" + String.join(\" \",\n+                    commits.stream().map(Commit::hash).map(Hash::toString).toList())\n+                    + \" on branch \" + branch + \" to \" + recipient);\n@@ -281,0 +284,3 @@\n+        log.info(\"Sending email for commits \" + String.join(\" \",\n+                commits.stream().map(Commit::hash).map(Hash::toString).toList())\n+                + \" for tag \" + tag + \" to \" + recipient);\n@@ -314,0 +320,2 @@\n+        log.info(\"Sending email for commit \" + commit\n+                + \" for tag \" + tag + \" to \" + recipient);\n@@ -372,0 +380,1 @@\n+        log.info(\"Sending email for new branch \" + branch + \" to \" + recipient);\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/mailinglist\/MailingListNotifier.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -58,1 +58,3 @@\n-            seedRepo.push(pr.headHash(), pr.repository().url(), PreIntegrations.preIntegrateBranch(pr), true);\n+            String branch = PreIntegrations.preIntegrateBranch(pr);\n+            log.info(\"Creating new pull request pre-integration branch \" + branch);\n+            seedRepo.push(pr.headHash(), pr.repository().url(), branch, true);\n@@ -65,0 +67,1 @@\n+        String branch = PreIntegrations.preIntegrateBranch(pr);\n@@ -67,1 +70,1 @@\n-                         .anyMatch(name -> name.equals(PreIntegrations.preIntegrateBranch(pr)));\n+                         .anyMatch(name -> name.equals(branch));\n@@ -69,1 +72,1 @@\n-            log.info(\"Pull request pre-integration branch \" + PreIntegrations.preIntegrateBranch(pr) + \" doesn't exist on remote - ignoring\");\n+            log.info(\"Pull request pre-integration branch \" + branch + \" doesn't exist on remote - ignoring\");\n@@ -72,1 +75,2 @@\n-        pr.repository().deleteBranch(PreIntegrations.preIntegrateBranch(pr));\n+        log.info(\"Deleting pull request pre-integration branch \" + branch);\n+        pr.repository().deleteBranch(branch);\n@@ -88,0 +92,1 @@\n+                log.info(\"Posting retargeted comment on PR \" + pr.id());\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/prbranch\/PullRequestBranchNotifier.java","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -381,0 +381,1 @@\n+            log.info(\"Adding label clean\");\n@@ -392,0 +393,1 @@\n+            log.info(\"Removing label clean\");\n@@ -735,0 +737,1 @@\n+        log.info(\"Updating PR body\");\n@@ -757,0 +760,1 @@\n+            log.info(\"Posting review message for \" + added.getKey().id());\n@@ -942,0 +946,1 @@\n+                log.info(\"Adding merge ready comment\");\n@@ -944,0 +949,1 @@\n+                log.info(\"Updating merge ready comment\");\n@@ -946,2 +952,3 @@\n-        } else {\n-            existing.ifPresent(comment -> pr.updateComment(comment.id(), getMergeNoLongerReadyComment()));\n+        } else if (existing.isPresent()) {\n+            log.info(\"Updating merge ready comment as no longer ready\");\n+            pr.updateComment(existing.get().id(), getMergeNoLongerReadyComment());\n@@ -979,0 +986,1 @@\n+        log.info(\"Adding source branch warning comment\");\n@@ -1000,0 +1008,1 @@\n+        log.info(\"Adding merge conflict comment\");\n@@ -1018,0 +1027,1 @@\n+        log.info(\"Adding merge commit warning comment\");\n@@ -1158,0 +1168,1 @@\n+                log.info(\"Adding label \" + newLabel);\n@@ -1163,0 +1174,1 @@\n+                log.info(\"Removing label \" + oldLabel);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import java.util.logging.Level;\n@@ -53,2 +54,2 @@\n-    CheckWorkItem(PullRequestBot bot, String prId, Consumer<RuntimeException> errorHandler) {\n-        super(bot, prId, errorHandler);\n+    CheckWorkItem(PullRequestBot bot, String prId, Consumer<RuntimeException> errorHandler, ZonedDateTime prUpdatedAt) {\n+        super(bot, prId, errorHandler, prUpdatedAt);\n@@ -239,1 +240,1 @@\n-                return List.of(new PullRequestCommandWorkItem(bot, prId, errorHandler));\n+                return List.of(new PullRequestCommandWorkItem(bot, prId, errorHandler, prUpdatedAt));\n@@ -303,1 +304,1 @@\n-                    return List.of(new CheckWorkItem(bot, prId, errorHandler));\n+                    return List.of(new CheckWorkItem(bot, prId, errorHandler, prUpdatedAt));\n@@ -340,1 +341,1 @@\n-                pr.addComment(text);\n+                var comment = pr.addComment(text);\n@@ -342,1 +343,2 @@\n-                return List.of(new CheckWorkItem(bot, prId, errorHandler));\n+                logLatency(\"Time from PR updated to backport comment posted \", comment.createdAt(), log);\n+                return List.of(new CheckWorkItem(bot, prId, errorHandler, prUpdatedAt));\n@@ -347,1 +349,3 @@\n-                return List.of(new CheckWorkItem(bot, prId, errorHandler));\n+                var updatedPr = bot.repo().pullRequest(prId);\n+                logLatency(\"Time from PR updated to title corrected \", updatedPr.updatedAt(), log);\n+                return List.of(new CheckWorkItem(bot, prId, errorHandler, prUpdatedAt));\n@@ -354,0 +358,9 @@\n+                if (log.isLoggable(Level.INFO)) {\n+                    \/\/ Log latency from the original updatedAt of the PR when this WorkItem\n+                    \/\/ was triggered to when it was just updated by the CheckRun.execute above.\n+                    \/\/ Both timestamps are taken from the PR data so they originate from the\n+                    \/\/ same clock (on the forge). Guard this with isLoggable since we need to\n+                    \/\/ re-fetch the PR data from the forge.\n+                    var updatedPr = bot.repo().pullRequest(prId);\n+                    logLatency(\"Time from PR updated to CheckRun done \", updatedPr.updatedAt(), log);\n+                }\n@@ -364,1 +377,5 @@\n-            pr.addComment(\"\/integrate\\n\" + PullRequestCommandWorkItem.VALID_BOT_COMMAND_MARKER);\n+            var comment = pr.addComment(\"\/integrate\\n\" + PullRequestCommandWorkItem.VALID_BOT_COMMAND_MARKER);\n+            var autoAdded = pr.labelAddedAt(\"auto\").orElseThrow();\n+            var readyAdded = pr.labelAddedAt(\"ready\").orElseThrow();\n+            var latency = Duration.between(autoAdded.isBefore(readyAdded) ? autoAdded : readyAdded, comment.createdAt());\n+            log.log(Level.INFO, \"Time from labels added to \/integrate posted \" + latency, latency);\n@@ -367,1 +384,1 @@\n-        return List.of(new PullRequestCommandWorkItem(bot, prId, errorHandler));\n+        return List.of(new PullRequestCommandWorkItem(bot, prId, errorHandler, prUpdatedAt));\n@@ -378,1 +395,2 @@\n-            pr.addComment(text);\n+            var comment = pr.addComment(text);\n+            logLatency(\"Time from PR updated to check error posted \", comment.createdAt(), log);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckWorkItem.java","additions":28,"deletions":10,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import java.time.ZonedDateTime;\n@@ -103,1 +104,1 @@\n-    static List<CommandInvocation> extractCommands(String text, String baseId, HostUser user) {\n+    static List<CommandInvocation> extractCommands(String text, String baseId, HostUser user, ZonedDateTime createdAt) {\n@@ -113,1 +114,2 @@\n-                    ret.add(new CommandInvocation(formatId(baseId, subId++), user, multiLineHandler, multiLineCommand, String.join(\"\\n\", multiLineBuffer)));\n+                    ret.add(new CommandInvocation(formatId(baseId, subId++), user, multiLineHandler, multiLineCommand,\n+                            String.join(\"\\n\", multiLineBuffer), createdAt));\n@@ -126,1 +128,2 @@\n-                    ret.add(new CommandInvocation(formatId(baseId, subId++), user, handler, command, commandMatcher.group(2)));\n+                    ret.add(new CommandInvocation(formatId(baseId, subId++), user, handler, command,\n+                            commandMatcher.group(2), createdAt));\n@@ -135,1 +138,2 @@\n-            ret.add(new CommandInvocation(formatId(baseId, subId), user, multiLineHandler, multiLineCommand, String.join(\"\\n\", multiLineBuffer)));\n+            ret.add(new CommandInvocation(formatId(baseId, subId), user, multiLineHandler,\n+                    multiLineCommand, String.join(\"\\n\", multiLineBuffer), createdAt));\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CommandExtractor.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import java.time.ZonedDateTime;\n@@ -26,1 +27,0 @@\n-import org.openjdk.skara.issuetracker.Comment;\n@@ -36,0 +36,1 @@\n+    private final ZonedDateTime createdAt;\n@@ -37,1 +38,1 @@\n-    CommandInvocation(String id, HostUser user, CommandHandler handler, String name, String args) {\n+    CommandInvocation(String id, HostUser user, CommandHandler handler, String name, String args, ZonedDateTime createdAt) {\n@@ -43,0 +44,1 @@\n+        this.createdAt = createdAt;\n@@ -64,0 +66,4 @@\n+\n+    ZonedDateTime createdAt() {\n+        return createdAt;\n+    }\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CommandInvocation.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-                                                       commitComment.id(), commitComment.author());\n+                commitComment.id(), commitComment.author(), commitComment.createdAt());\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CommitCommandWorkItem.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import java.time.ZonedDateTime;\n@@ -39,2 +40,3 @@\n-    LabelerWorkItem(PullRequestBot bot, String prId, Consumer<RuntimeException> errorHandler) {\n-        super(bot, prId, errorHandler);\n+    LabelerWorkItem(PullRequestBot bot, String prId, Consumer<RuntimeException> errorHandler,\n+            ZonedDateTime prUpdatedAt) {\n+        super(bot, prId, errorHandler, prUpdatedAt);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/LabelerWorkItem.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -172,1 +172,1 @@\n-                    ret.add(new CheckWorkItem(this, pr.id(), e -> updateCache.invalidate(pr)));\n+                    ret.add(new CheckWorkItem(this, pr.id(), e -> updateCache.invalidate(pr), pr.updatedAt()));\n@@ -175,1 +175,1 @@\n-                    ret.add(new PullRequestCommandWorkItem(this, pr.id(), e -> updateCache.invalidate(pr)));\n+                    ret.add(new PullRequestCommandWorkItem(this, pr.id(), e -> updateCache.invalidate(pr), pr.updatedAt()));\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBot.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -25,0 +25,3 @@\n+import java.time.Duration;\n+import java.time.ZonedDateTime;\n+import java.util.logging.Level;\n@@ -27,1 +30,0 @@\n-import org.openjdk.skara.host.HostUser;\n@@ -46,2 +48,3 @@\n-    PullRequestCommandWorkItem(PullRequestBot bot, String prId, Consumer<RuntimeException> errorHandler) {\n-        super(bot, prId, errorHandler);\n+    PullRequestCommandWorkItem(PullRequestBot bot, String prId, Consumer<RuntimeException> errorHandler,\n+            ZonedDateTime prUpdatedAt) {\n+        super(bot, prId, errorHandler, prUpdatedAt);\n@@ -74,1 +77,1 @@\n-        return Stream.concat(CommandExtractor.extractCommands(body, \"body\", pr.author()).stream(),\n+        return Stream.concat(CommandExtractor.extractCommands(body, \"body\", pr.author(), pr.createdAt()).stream(),\n@@ -77,1 +80,1 @@\n-                                .flatMap(c -> CommandExtractor.extractCommands(c.body(), c.id(), c.author()).stream()))\n+                                .flatMap(c -> CommandExtractor.extractCommands(c.body(), c.id(), c.author(), c.createdAt()).stream()))\n@@ -153,1 +156,3 @@\n-                    pr.addComment(writer.toString());\n+                    var newComment = pr.addComment(writer.toString());\n+                    var latency = Duration.between(command.createdAt(), newComment.createdAt());\n+                    log.log(Level.INFO, \"Time from command '\" + command.name() + \"' to reply \" + latency, latency);\n@@ -168,1 +173,3 @@\n-        pr.addComment(writer.toString());\n+        var newComment = pr.addComment(writer.toString());\n+        var latency = Duration.between(command.createdAt(), newComment.createdAt());\n+        log.log(Level.INFO, \"Time from command '\" + command.name() + \"' to reply \" + latency, latency);\n@@ -183,1 +190,1 @@\n-                return List.of(new LabelerWorkItem(bot, prId, errorHandler));\n+                return List.of(new LabelerWorkItem(bot, prId, errorHandler, prUpdatedAt));\n@@ -203,1 +210,1 @@\n-            return List.of(new CheckWorkItem(bot, prId, errorHandler));\n+            return List.of(new CheckWorkItem(bot, prId, errorHandler, prUpdatedAt));\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestCommandWorkItem.java","additions":16,"deletions":9,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -26,0 +26,2 @@\n+import java.time.Duration;\n+import java.time.ZonedDateTime;\n@@ -27,0 +29,2 @@\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n@@ -36,0 +40,9 @@\n+    \/**\n+     * The updatedAt timestamp of the PR that triggered this WorkItem at the\n+     * time it was triggered. Used for tracking reaction latency of the bot\n+     * through logging. This is the best estimated value, which is the last\n+     * updatedAt value when the bot finds the PR. This value is propagated\n+     * through chains of WorkItems, as the complete chain is considered to have\n+     * been triggered by the same PR update.\n+     *\/\n+    final ZonedDateTime prUpdatedAt;\n@@ -38,1 +51,2 @@\n-    PullRequestWorkItem(PullRequestBot bot, String prId, Consumer<RuntimeException> errorHandler) {\n+    PullRequestWorkItem(PullRequestBot bot, String prId, Consumer<RuntimeException> errorHandler,\n+            ZonedDateTime prUpdatedAt) {\n@@ -42,0 +56,1 @@\n+        this.prUpdatedAt = prUpdatedAt;\n@@ -80,0 +95,12 @@\n+\n+    \/**\n+     * Logs a latency message. Meant to be used right before returning from prRun(),\n+     * if it makes sense to log a message at that point.\n+     * @param message Message to be logged, will get latency string added to it.\n+     * @param endTime The end time to use to calculate latency\n+     * @param log The logger to log to\n+     *\/\n+    protected void logLatency(String message, ZonedDateTime endTime, Logger log) {\n+        var latency = Duration.between(prUpdatedAt, endTime);\n+        log.log(Level.INFO, message + latency, latency);\n+    }\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestWorkItem.java","additions":28,"deletions":1,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import java.util.logging.Level;\n@@ -203,1 +204,1 @@\n-            try (var ignored = new LockWithTimeout(authLock)){\n+            try (var ignored = new LockWithTimeout(authLock)) {\n@@ -205,0 +206,1 @@\n+                var before = Instant.now();\n@@ -206,0 +208,2 @@\n+                var duration = Duration.between(before, Instant.now());\n+                log.log(Level.FINE, \"Calling GET \" + finalRequest.uri().toString() + \" took \" + duration, duration);\n@@ -234,1 +238,5 @@\n-                return client.send(finalRequest, HttpResponse.BodyHandlers.ofString());\n+                var before = Instant.now();\n+                var response = client.send(finalRequest, HttpResponse.BodyHandlers.ofString());\n+                var duration = Duration.between(before, Instant.now());\n+                log.log(Level.FINE, \"Calling \" + finalRequest.method() + \" \" + finalRequest.uri().toString() + \" took \" + duration, duration);\n+                return response;\n","filename":"network\/src\/main\/java\/org\/openjdk\/skara\/network\/RestRequestCache.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import java.util.logging.Level;\n@@ -49,0 +50,1 @@\n+    private Instant startTime;\n@@ -132,1 +134,1 @@\n-        log.fine(\"Executing '\" + cmd + \"'\");\n+        log.finer(\"Executing '\" + cmd + \"'\");\n@@ -136,0 +138,1 @@\n+        startTime = Instant.now();\n@@ -141,0 +144,2 @@\n+        var duration = Duration.between(startTime, Instant.now());\n+        log.log(Level.FINE, \"Executing '\" + String.join(\" \", processBuilder.command()) + \" took \" + duration, duration);\n","filename":"process\/src\/main\/java\/org\/openjdk\/skara\/process\/Execution.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"}]}