{"files":[{"patch":"@@ -78,3 +78,20 @@\n-                log.finer(\"issue: the JBS issue \" + issue.toString() + \" has been used in multiple commits\");\n-                var uniqueHashes = new ArrayList<>(new HashSet<>(hashes));\n-                issues.add(new DuplicateIssuesIssue(issue, uniqueHashes, metadata));\n+                \/\/ Check if any of the found hashes is an ancestor of the current commit\n+                var ancestorHashes = new ArrayList<Hash>();\n+                for (var hash : hashes) {\n+                    if (hash.equals(commit.hash())) {\n+                        ancestorHashes.add(hash);\n+                    } else {\n+                        try {\n+                            if (repo.isAncestor(hash, commit.hash())) {\n+                                ancestorHashes.add(hash);\n+                            }\n+                        } catch (IOException e) {\n+                            throw new UncheckedIOException(e);\n+                        }\n+                    }\n+                }\n+                if (ancestorHashes.size() > 1) {\n+                    log.finer(\"issue: the JBS issue \" + issue.toString() + \" has been used in multiple commits\");\n+                    var uniqueHashes = new ArrayList<>(new HashSet<>(hashes));\n+                    issues.add(new DuplicateIssuesIssue(issue, uniqueHashes, metadata));\n+                }\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/DuplicateIssuesCheck.java","additions":20,"deletions":3,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -146,0 +146,28 @@\n+\n+    @Test\n+    void duplicatedIssuesInSeparateBranchesShouldPass() throws IOException {\n+        try (var dir = new TemporaryDirectory()) {\n+            var r = TestableRepository.init(dir.path(), VCS.GIT);\n+\n+            var readme = dir.path().resolve(\"README\");\n+            Files.write(readme, List.of(\"Hello, world!\"));\n+            r.add(readme);\n+            var first = r.commit(\"1: Added README and .jcheck\/conf\", \"duke\", \"duke@openjdk.java.net\");\n+\n+            Files.write(readme, List.of(\"One more line\"), WRITE, APPEND);\n+            r.add(readme);\n+            var second = r.commit(\"2: Modified README\", \"duke\", \"duke@openjdk.java.net\");\n+\n+            var myBranch = r.branch(first, \"myBranch\");\n+            r.checkout(myBranch);\n+\n+            Files.write(readme, List.of(\"Another line\"), WRITE, APPEND);\n+            r.add(readme);\n+            var third = r.commit(\"2: Modified README\", \"duke\", \"duke@openjdk.java.net\");\n+            var check = new DuplicateIssuesCheck(r);\n+\n+            var commit = r.lookup(third).orElseThrow();\n+            var issues = toList(check.check(commit, message(commit), conf(), null));\n+            assertEquals(List.of(), issues);\n+        }\n+    }\n","filename":"jcheck\/src\/test\/java\/org\/openjdk\/skara\/jcheck\/DuplicateIssuesCheckTests.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"modified"}]}