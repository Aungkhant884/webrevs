{"files":[{"patch":"@@ -51,0 +51,2 @@\n+    private static final Pattern PRE_INTEGRATE_BRANCH_PATTERN = Pattern.compile(\"pr\/(\\\\d+)\");\n+\n@@ -58,1 +60,1 @@\n-        var targetRef = pr.targetRef();\n+        var targetRef = realTargetRef(pr);\n@@ -64,1 +66,1 @@\n-            reply.println(\"Changes to branch \" + pr.targetRef() + \" do not require maintainer approval\");\n+            reply.println(\"Changes to branch \" + targetRef + \" do not require maintainer approval\");\n@@ -173,0 +175,11 @@\n+\n+    public static String realTargetRef(PullRequest pr) {\n+        var targetRef = pr.targetRef();\n+        var matcher = PRE_INTEGRATE_BRANCH_PATTERN.matcher(targetRef);\n+        if (!matcher.matches()) {\n+            return targetRef;\n+        }\n+        String id = matcher.group(1);\n+        var dependentPR = pr.repository().pullRequest(id);\n+        return realTargetRef(dependentPR);\n+    }\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/ApprovalCommand.java","additions":15,"deletions":2,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-        var targetRef = pr.targetRef();\n+        var targetRef = ApprovalCommand.realTargetRef(pr);\n@@ -68,1 +68,1 @@\n-            reply.println(\"Changes to branch \" + pr.targetRef() + \" do not require maintainer approval\");\n+            reply.println(\"Changes to branch \" + targetRef + \" do not require maintainer approval\");\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/ApproveCommand.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -79,0 +79,1 @@\n+    private final String realTargetRef;\n@@ -107,0 +108,1 @@\n+        realTargetRef = ApprovalCommand.realTargetRef(pr);\n@@ -713,1 +715,0 @@\n-                                String targetRef = pr.targetRef();\n@@ -715,1 +716,1 @@\n-                                if (labels.contains(approval.rejectedLabel(targetRef))) {\n+                                if (labels.contains(approval.rejectedLabel(realTargetRef))) {\n@@ -717,1 +718,1 @@\n-                                } else if (labels.contains(approval.approvedLabel(targetRef))) {\n+                                } else if (labels.contains(approval.approvedLabel(realTargetRef))) {\n@@ -719,1 +720,1 @@\n-                                } else if (labels.contains(approval.requestedLabel(targetRef))) {\n+                                } else if (labels.contains(approval.requestedLabel(realTargetRef))) {\n@@ -1521,1 +1522,1 @@\n-        return approval != null && approval.needsApproval(pr.targetRef());\n+        return approval != null && approval.needsApproval(realTargetRef);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -3060,0 +3060,60 @@\n+\n+    @Test\n+    void maintainerApprovalWithDependentPR(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var bot = credentials.getHostedRepository();\n+            var issueProject = credentials.getIssueProject();\n+            var issue = issueProject.createIssue(\"This is an issue\", List.of(), Map.of());\n+            issue.setProperty(\"issuetype\", JSON.of(\"Bug\"));\n+            issue.setProperty(\"priority\", JSON.of(\"4\"));\n+            var issue2 = issueProject.createIssue(\"This is an issue2\", List.of(), Map.of());\n+            issue2.setProperty(\"issuetype\", JSON.of(\"Bug\"));\n+            issue2.setProperty(\"priority\", JSON.of(\"4\"));\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addReviewer(reviewer.forge().currentUser().id())\n+                    .addCommitter(author.forge().currentUser().id());\n+            Map<String, List<PRRecord>> issuePRMap = new HashMap<>();\n+            Approval approval = new Approval(\"\", \"-critical-request\", \"-critical-approved\",\n+                    \"-critical-rejected\", \"https:\/\/example.com\");\n+            approval.addBranchPrefix(Pattern.compile(\"jdk20.0.1\"), \"CPU23_04\");\n+            approval.addBranchPrefix(Pattern.compile(\"jdk20.0.2\"), \"CPU23_05\");\n+\n+            var prBot = PullRequestBot.newBuilder()\n+                    .repo(bot)\n+                    .issueProject(issueProject)\n+                    .censusRepo(censusBuilder.build())\n+                    .issuePRMap(issuePRMap)\n+                    .approval(approval)\n+                    .integrators(Set.of(reviewer.forge().currentUser().username()))\n+                    .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.authenticatedUrl(), \"jdk20.0.1\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.authenticatedUrl(), \"edit\", true);\n+\n+            var pr = credentials.createPullRequest(author, \"jdk20.0.1\", \"edit\", issue.id() + \": This is an issue\");\n+\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertFalse(pr.store().labelNames().contains(\"ready\"));\n+\n+            localRepo.push(editHash, author.authenticatedUrl(), PreIntegrations.preIntegrateBranch(pr), true);\n+\n+            var followUp = CheckableRepository.appendAndCommit(localRepo, \"Follow-up work\", \"Follow-up change\");\n+            localRepo.push(followUp, author.authenticatedUrl(), \"followup\", true);\n+            var followUpPr = credentials.createPullRequest(author, PreIntegrations.preIntegrateBranch(pr), \"followup\", issue2.id());\n+            TestBotRunner.runPeriodicItems(prBot);\n+\n+            assertTrue(followUpPr.store().body().contains(\"needs maintainer approval\"));\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CheckTests.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"modified"}]}