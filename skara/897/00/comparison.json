{"files":[{"patch":"@@ -44,0 +44,20 @@\n+        var extendedHeaders = List.of(\n+            \"old mode \",\n+            \"new mode \",\n+            \"deleted file mode \",\n+            \"new file mode \",\n+            \"copy from \",\n+            \"copy to \",\n+            \"rename from \",\n+            \"rename to \",\n+            \"similarity index \",\n+            \"dissimilarity index \",\n+            \"index \"\n+        );\n+        while (i < lines.size()) {\n+            var line = lines.get(i);\n+            if (extendedHeaders.stream().noneMatch(h -> line.startsWith(h))) {\n+                break;\n+            }\n+            i++;\n+        }\n@@ -68,2 +88,4 @@\n-            var hunkLines = lines.subList(i, nextHeader);\n-            hunks.addAll(parseSingleFileDiff(sourceRange, targetRange, hunkLines));\n+            var hunkLines = lines.subList(i + 1, nextHeader);\n+            if (!hunkLines.isEmpty()) {\n+                hunks.addAll(parseSingleFileDiff(sourceRange, targetRange, hunkLines));\n+            }\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/UnifiedDiffParser.java","additions":24,"deletions":2,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -0,0 +1,401 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.vcs;\n+\n+import java.util.List;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class UnifiedDiffParserTests {\n+    @Test\n+    public void simple() {\n+        var diff1 =\n+            \"diff --git a\/bots\/tester\/src\/test\/java\/org\/openjdk\/skara\/bots\/tester\/inmemoryhostedrepository.java b\/bots\/tester\/src\/test\/java\/org\/openjdk\/skara\/bots\/tester\/inmemoryhostedrepository.java\\n\" +\n+            \"index 883d3f51..bff21edd 100644\\n\" +\n+            \"--- a\/bots\/tester\/src\/test\/java\/org\/openjdk\/skara\/bots\/tester\/inmemoryhostedrepository.java\\n\" +\n+            \"+++ b\/bots\/tester\/src\/test\/java\/org\/openjdk\/skara\/bots\/tester\/inmemoryhostedrepository.java\\n\" +\n+            \"@@ -169,4 +169,9 @@ public void addcommitcomment(hash commit, string body) {\\n\" +\n+            \"     public list<check> allchecks(hash hash) {\\n\" +\n+            \"         return list.of();\\n\" +\n+            \"     }\\n\" +\n+            \"+\\n\" +\n+            \"+    @override\\n\" +\n+            \"+    public list<commitcomment> recentcommitcomments() {\\n\" +\n+            \"+        return list.of();\\n\" +\n+            \"+    }\\n\" +\n+            \" }\\n\";\n+\n+        var diff2 =\n+            \"diff --git a\/forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/commitcomment.java b\/forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/commitcomment.java\\n\" +\n+            \"index 5d9139c9..16eda547 100644\\n\" +\n+            \"--- a\/forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/commitcomment.java\\n\" +\n+            \"+++ b\/forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/commitcomment.java\\n\" +\n+            \"@@ -29,9 +29,11 @@\\n\" +\n+            \" import java.nio.file.path;\\n\" +\n+            \" import java.time.zoneddatetime;\\n\" +\n+            \" import java.util.*;\\n\" +\n+            \"+import java.util.function.supplier;\\n\" +\n+            \" \\n\" +\n+            \" public class commitcomment extends comment {\\n\" +\n+            \"-    private final hash commit;\\n\" +\n+            \"+    private hash commit;\\n\" +\n+            \"+    private final supplier<hash> commitsupplier;\\n\" +\n+            \"     private final path path;\\n\" +\n+            \"     private final int line;\\n\" +\n+            \" \\n\" +\n+            \"@@ -39,6 +41,16 @@ public commitcomment(hash commit, path path, int line, string id, string body, h\\n\" +\n+            \"         super(id, body, author, createdat, updatedat);\\n\" +\n+            \" \\n\" +\n+            \"         this.commit = commit;\\n\" +\n+            \"+        this.commitsupplier = null;\\n\" +\n+            \"+        this.path = path;\\n\" +\n+            \"+        this.line = line;\\n\" +\n+            \"+    }\\n\" +\n+            \"+\\n\" +\n+            \"+    public commitcomment(supplier<hash> commitsupplier, path path, int line, string id, string body, hostuser author, zoneddatetime createdat, zoneddatetime updatedat) {\\n\" +\n+            \"+        super(id, body, author, createdat, updatedat);\\n\" +\n+            \"+\\n\" +\n+            \"+        this.commit = null;\\n\" +\n+            \"+        this.commitsupplier = commitsupplier;\\n\" +\n+            \"         this.path = path;\\n\" +\n+            \"         this.line = line;\\n\" +\n+            \"     }\\n\" +\n+            \"@@ -47,6 +59,9 @@ public commitcomment(hash commit, path path, int line, string id, string body, h\\n\" +\n+            \"      * returns the hash of the commit.\\n\" +\n+            \"      *\/\\n\" +\n+            \"     public hash commit() {\\n\" +\n+            \"+        if (commit == null) {\\n\" +\n+            \"+            commit = commitsupplier.get();\\n\" +\n+            \"+        }\\n\" +\n+            \"         return commit;\\n\" +\n+            \"     }\\n\" +\n+            \" \\n\";\n+\n+        var diff3 =\n+            \"diff --git a\/forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/hostedrepository.java b\/forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/hostedrepository.java\\n\" +\n+            \"index e9f711a1..8a612523 100644\\n\" +\n+            \"--- a\/forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/hostedrepository.java\\n\" +\n+            \"+++ b\/forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/hostedrepository.java\\n\" +\n+            \"@@ -68,6 +68,7 @@ pullrequest createpullrequest(hostedrepository target,\\n\" +\n+            \"     hash branchhash(string ref);\\n\" +\n+            \"     list<hostedbranch> branches();\\n\" +\n+            \"     list<commitcomment> commitcomments(hash hash);\\n\" +\n+            \"+    list<commitcomment> recentcommitcomments();\\n\" +\n+            \"     void addcommitcomment(hash hash, string body);\\n\" +\n+            \"     optional<commitmetadata> commitmetadata(hash hash);\\n\" +\n+            \"     list<check> allchecks(hash hash);\\n\";\n+\n+        var diff4 =\n+            \"diff --git a\/forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/githubhost.java b\/forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/githubhost.java\\n\" +\n+            \"index bc11a4b3..2c29a5e9 100644\\n\" +\n+            \"--- a\/forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/githubhost.java\\n\" +\n+            \"+++ b\/forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/githubhost.java\\n\" +\n+            \"@@ -199,10 +199,21 @@ hostuser parseuserfield(jsonvalue json) {\\n\" +\n+            \"     }\\n\" +\n+            \" \\n\" +\n+            \"     hostuser parseuserobject(jsonvalue json) {\\n\" +\n+            \"+        return hostuser(json.get(\\\"id\\\").asint(), json.get(\\\"login\\\").asstring());\\n\" +\n+            \"+    }\\n\" +\n+            \"+\\n\" +\n+            \"+    hostuser hostuser(int id, string username) {\\n\" +\n+            \"+        return hostuser.builder()\\n\" +\n+            \"+                       .id(id)\\n\" +\n+            \"+                       .username(username)\\n\" +\n+            \"+                       .supplier(() -> user(username).orelsethrow())\\n\" +\n+            \"+                       .build();\\n\" +\n+            \"+    }\\n\" +\n+            \"+\\n\" +\n+            \"+    hostuser hostuser(string username) {\\n\" +\n+            \"         return hostuser.builder()\\n\" +\n+            \"-                       .id(json.get(\\\"id\\\").asint())\\n\" +\n+            \"-                       .username(json.get(\\\"login\\\").asstring())\\n\" +\n+            \"-                       .supplier(() -> user(json.get(\\\"login\\\").asstring()).orelsethrow())\\n\" +\n+            \"+                       .username(username)\\n\" +\n+            \"+                       .supplier(() -> user(username).orelsethrow())\\n\" +\n+            \"                        .build();\\n\" +\n+            \"     }\\n\" +\n+            \" \\n\" +\n+            \"@@ -269,10 +280,10 @@ jsonobject runsearch(string category, string query) {\\n\" +\n+            \"             return optional.empty();\\n\" +\n+            \"         }\\n\" +\n+            \" \\n\" +\n+            \"-        return optional.of(ashostuser(details.asobject()));\\n\" +\n+            \"+        return optional.of(tohostuser(details.asobject()));\\n\" +\n+            \"     }\\n\" +\n+            \" \\n\" +\n+            \"-    private static hostuser ashostuser(jsonobject details) {\\n\" +\n+            \"+    private hostuser tohostuser(jsonobject details) {\\n\" +\n+            \"         \/\/ always present\\n\" +\n+            \"         var login = details.get(\\\"login\\\").asstring();\\n\" +\n+            \"         var id = details.get(\\\"id\\\").asint();\\n\" +\n+            \"@@ -302,7 +313,7 @@ public hostuser currentuser() {\\n\" +\n+            \"                 \/\/ on windows always return \\\"personalaccesstoken\\\" as username.\\n\" +\n+            \"                 \/\/ query github for the username instead.\\n\" +\n+            \"                 var details = request.get(\\\"user\\\").execute().asobject();\\n\" +\n+            \"-                currentuser = ashostuser(details);\\n\" +\n+            \"+                currentuser = tohostuser(details);\\n\" +\n+            \"             } else {\\n\" +\n+            \"                 throw new illegalstateexception(\\\"no credentials present\\\");\\n\" +\n+            \"             }\\n\";\n+\n+        var diff5 =\n+            \"diff --git a\/forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/githubrepository.java b\/forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/githubrepository.java\\n\" +\n+            \"index 7198f13d..08769f62 100644\\n\" +\n+            \"--- a\/forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/githubrepository.java\\n\" +\n+            \"+++ b\/forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/githubrepository.java\\n\" +\n+            \"@@ -268,29 +268,80 @@ public hash branchhash(string ref) {\\n\" +\n+            \"                        .collect(collectors.tolist());\\n\" +\n+            \"     }\\n\" +\n+            \" \\n\" +\n+            \"+    private commitcomment tocommitcomment(jsonvalue o) {\\n\" +\n+            \"+        var hash = new hash(o.get(\\\"commit_id\\\").asstring());\\n\" +\n+            \"+        var line = o.get(\\\"line\\\").isnull()? -1 : o.get(\\\"line\\\").asint();\\n\" +\n+            \"+        var path = o.get(\\\"path\\\").isnull()? null : path.of(o.get(\\\"path\\\").asstring());\\n\" +\n+            \"+        return new commitcomment(hash,\\n\" +\n+            \"+                                 path,\\n\" +\n+            \"+                                 line,\\n\" +\n+            \"+                                 o.get(\\\"id\\\").tostring(),\\n\" +\n+            \"+                                 o.get(\\\"body\\\").asstring(),\\n\" +\n+            \"+                                 githubhost.parseuserfield(o),\\n\" +\n+            \"+                                 zoneddatetime.parse(o.get(\\\"created_at\\\").asstring()),\\n\" +\n+            \"+                                 zoneddatetime.parse(o.get(\\\"updated_at\\\").asstring()));\\n\" +\n+            \"+    }\\n\" +\n+            \"+\\n\" +\n+            \"     @override\\n\" +\n+            \"     public list<commitcomment> commitcomments(hash hash) {\\n\" +\n+            \"         return request.get(\\\"commits\/\\\" + hash.hex() + \\\"\/comments\\\")\\n\" +\n+            \"                       .execute()\\n\" +\n+            \"                       .stream()\\n\" +\n+            \"-                      .map(jsonvalue::asobject)\\n\" +\n+            \"-                      .map(o -> {\\n\" +\n+            \"-                           var line = o.get(\\\"line\\\").isnull()? -1 : o.get(\\\"line\\\").asint();\\n\" +\n+            \"-                           var path = o.get(\\\"path\\\").isnull()? null : path.of(o.get(\\\"path\\\").asstring());\\n\" +\n+            \"-                           return new commitcomment(hash,\\n\" +\n+            \"-                                                    path,\\n\" +\n+            \"-                                                    line,\\n\" +\n+            \"-                                                    o.get(\\\"id\\\").tostring(),\\n\" +\n+            \"-                                                    o.get(\\\"body\\\").asstring(),\\n\" +\n+            \"-                                                    githubhost.parseuserfield(o),\\n\" +\n+            \"-                                                    zoneddatetime.parse(o.get(\\\"created_at\\\").asstring()),\\n\" +\n+            \"-                                                    zoneddatetime.parse(o.get(\\\"updated_at\\\").asstring()));\\n\" +\n+            \"-\\n\" +\n+            \"-\\n\" +\n+            \"-                      })\\n\" +\n+            \"+                      .map(this::tocommitcomment)\\n\" +\n+            \"                       .collect(collectors.tolist());\\n\" +\n+            \"     }\\n\" +\n+            \" \\n\" +\n+            \"+    @override\\n\" +\n+            \"+    public list<commitcomment> recentcommitcomments() {\\n\" +\n+            \"+        var parts = name().split(\\\"\/\\\");\\n\" +\n+            \"+        var owner = parts[0];\\n\" +\n+            \"+        var name = parts[1];\\n\" +\n+            \"+\\n\" +\n+            \"+        var data = githubhost.graphql()\\n\" +\n+            \"+                             .post()\\n\" +\n+            \"+                             .body(json.object().put(\\\"query\\\", query))\\n\" +\n+            \"+                             .execute()\\n\" +\n+            \"+                             .get(\\\"data\\\");\\n\" +\n+            \"+        return data.get(\\\"repository\\\")\\n\" +\n+            \"+                   .get(\\\"commitcomments\\\")\\n\" +\n+            \"+                   .get(\\\"nodes\\\")\\n\" +\n+            \"+                   .stream()\\n\" +\n+            \"+                   .map(o -> {\\n\" +\n+            \"+                       var hash = new hash(o.get(\\\"commit\\\").get(\\\"oid\\\").asstring());\\n\" +\n+            \"+                       var createdat = zoneddatetime.parse(o.get(\\\"createdat\\\").asstring());\\n\" +\n+            \"+                       var updatedat = zoneddatetime.parse(o.get(\\\"updatedat\\\").asstring());\\n\" +\n+            \"+                       var id = o.get(\\\"databaseid\\\").asstring();\\n\" +\n+            \"+                       var body = o.get(\\\"body\\\").asstring();\\n\" +\n+            \"+                       var user = githubhost.hostuser(o.get(\\\"login\\\").asstring());\\n\" +\n+            \"+                       return new commitcomment(hash,\\n\" +\n+            \"+                                                null,\\n\" +\n+            \"+                                                -1,\\n\" +\n+            \"+                                                id,\\n\" +\n+            \"+                                                body,\\n\" +\n+            \"+                                                user,\\n\" +\n+            \"+                                                createdat,\\n\" +\n+            \"+                                                updatedat);\\n\" +\n+            \"+                   })\\n\" +\n+            \"+                   .collect(collectors.tolist());\\n\" +\n+            \"+    }\\n\" +\n+            \"+\\n\" +\n+            \"     @override\\n\" +\n+            \"     public void addcommitcomment(hash hash, string body) {\\n\" +\n+            \"         var query = json.object().put(\\\"body\\\", body);\\n\";\n+\n+        var diff6 =\n+            \"diff --git a\/forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/gitlabrepository.java b\/forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/gitlabrepository.java\\n\" +\n+            \"index 80c78f6c..7bfb45bf 100644\\n\" +\n+            \"--- a\/forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/gitlabrepository.java\\n\" +\n+            \"+++ b\/forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/gitlabrepository.java\\n\" +\n+            \"@@ -22,6 +22,7 @@\\n\" +\n+            \"  *\/\\n\" +\n+            \" package org.openjdk.skara.forge.gitlab;\\n\" +\n+            \" \\n\" +\n+            \"+import org.openjdk.skara.host.hostuser;\\n\" +\n+            \" import org.openjdk.skara.forge.*;\\n\" +\n+            \" import org.openjdk.skara.json.*;\\n\" +\n+            \" import org.openjdk.skara.network.*;\\n\" +\n+            \"@@ -33,6 +34,7 @@\\n\" +\n+            \" import java.time.*;\\n\" +\n+            \" import java.time.format.datetimeformatter;\\n\" +\n+            \" import java.util.*;\\n\" +\n+            \"+import java.util.function.supplier;\\n\" +\n+            \" import java.util.regex.pattern;\\n\" +\n+            \" import java.util.stream.collectors;\\n\" +\n+            \" \\n\" +\n+            \"@@ -290,27 +292,90 @@ public hash branchhash(string ref) {\\n\" +\n+            \"                        .collect(collectors.tolist());\\n\" +\n+            \"     }\\n\" +\n+            \" \\n\" +\n+            \"+    private commitcomment tocommitcomment(hash hash, jsonvalue o) {\\n\" +\n+            \"+       var line = o.get(\\\"line\\\").isnull()? -1 : o.get(\\\"line\\\").asint();\\n\" +\n+            \"+       var path = o.get(\\\"path\\\").isnull()? null : path.of(o.get(\\\"path\\\").asstring());\\n\" +\n+            \"+       \/\/ gitlab does not offer updated_at for commit comments\\n\" +\n+            \"+       var createdat = zoneddatetime.parse(o.get(\\\"created_at\\\").asstring());\\n\" +\n+            \"+       \/\/ gitlab does not offer an id for commit comments\\n\" +\n+            \"+       var id = \\\"\\\";\\n\" +\n+            \"+       return new commitcomment(hash,\\n\" +\n+            \"+                                path,\\n\" +\n+            \"+                                line,\\n\" +\n+            \"+                                id,\\n\" +\n+            \"+                                o.get(\\\"note\\\").asstring(),\\n\" +\n+            \"+                                gitlabhost.parseauthorfield(o),\\n\" +\n+            \"+                                createdat,\\n\" +\n+            \"+                                createdat);\\n\" +\n+            \"+    }\\n\" +\n+            \"+\\n\" +\n+            \"     @override\\n\" +\n+            \"     public list<commitcomment> commitcomments(hash hash) {\\n\" +\n+            \"         return request.get(\\\"repository\/commits\/\\\" + hash.hex() + \\\"\/comments\\\")\\n\" +\n+            \"                       .execute()\\n\" +\n+            \"                       .stream()\\n\" +\n+            \"-                      .map(jsonvalue::asobject)\\n\" +\n+            \"+                      .map(o -> tocommitcomment(hash, o))\\n\" +\n+            \"+                      .collect(collectors.tolist());\\n\" +\n+            \"+    }\\n\" +\n+            \"+\\n\" +\n+            \"+    private hash commitwithcomment(string committitle,\\n\" +\n+            \"+                                   string commentbody,\\n\" +\n+            \"+                                   zoneddatetime commentcreatedat,\\n\" +\n+            \"+                                   hostuser author) {\\n\" +\n+            \"+        var result = request.get(\\\"search\\\")\\n\" +\n+            \"+                            .param(\\\"scope\\\", \\\"commits\\\")\\n\" +\n+            \"+                            .param(\\\"search\\\", committitle)\\n\" +\n+            \"+                            .execute()\\n\" +\n+            \"+                            .stream()\\n\" +\n+            \"+                            .filter(o -> o.get(\\\"title\\\").asstring().equals(committitle))\\n\" +\n+            \"+                            .map(o -> new hash(o.get(\\\"id\\\").asstring()))\\n\" +\n+            \"+                            .collect(collectors.tolist());\\n\" +\n+            \"+        if (result.isempty()) {\\n\" +\n+            \"+            throw new illegalargumentexception(\\\"no commit with title: \\\" + committitle);\\n\" +\n+            \"+        }\\n\" +\n+            \"+        if (result.size() > 1) {\\n\" +\n+            \"+            var filtered = result.stream()\\n\" +\n+            \"+                                 .flatmap(hash -> commitcomments(hash).stream()\\n\" +\n+            \"+                                                                      .filter(c -> c.body().equals(commentbody))\\n\" +\n+            \"+                                                                      .filter(c -> c.createdat().equals(commentcreatedat))\\n\" +\n+            \"+                                                                      .filter(c -> c.author().equals(author)))\\n\" +\n+            \"+                                 .map(c -> c.commit())\\n\" +\n+            \"+                                 .collect(collectors.tolist());\\n\" +\n+            \"+            if (filtered.isempty()) {\\n\" +\n+            \"+                throw new illegalstateexception(\\\"no commit with title '\\\" + committitle +\\n\" +\n+            \"+                                                \\\"' and comment '\\\" + commentbody + \\\"'\\\");\\n\" +\n+            \"+            }\\n\" +\n+            \"+            if (filtered.size() > 1) {\\n\" +\n+            \"+                var hashes = filtered.stream().map(hash::hex).collect(collectors.tolist());\\n\" +\n+            \"+                throw new illegalstateexception(\\\"multiple commits with identical comment '\\\" + commentbody + \\\"': \\\"\\n\" +\n+            \"+                                                 + string.join(\\\",\\\", hashes));\\n\" +\n+            \"+            }\\n\" +\n+            \"+            return filtered.get(0);\\n\" +\n+            \"+        }\\n\" +\n+            \"+        return result.get(0);\\n\" +\n+            \"+    }\\n\" +\n+            \"+\\n\" +\n+            \"+    @override\\n\" +\n+            \"+    public list<commitcomment> recentcommitcomments() {\\n\" +\n+            \"+        var twodaysago = zoneddatetime.now().minusdays(2);\\n\" +\n+            \"+        var formatter = datetimeformatter.ofpattern(\\\"yyyy-mm-dd\\\");\\n\" +\n+            \"+        return request.get(\\\"events\\\")\\n\" +\n+            \"+                      .param(\\\"after\\\", twodaysago.format(formatter))\\n\" +\n+            \"+                      .execute()\\n\" +\n+            \"+                      .stream()\\n\" +\n+            \"+                      .filter(o -> o.contains(\\\"note\\\") &&\\n\" +\n+            \"+                                   o.get(\\\"note\\\").contains(\\\"noteable_type\\\") &&\\n\" +\n+            \"+                                   o.get(\\\"note\\\").get(\\\"noteable_type\\\").asstring().equals(\\\"commit\\\"))\\n\" +\n+            \"                       .map(o -> {\\n\" +\n+            \"-                           var line = o.get(\\\"line\\\").isnull()? -1 : o.get(\\\"line\\\").asint();\\n\" +\n+            \"-                           var path = o.get(\\\"path\\\").isnull()? null : path.of(o.get(\\\"path\\\").asstring());\\n\" +\n+            \"-                           \/\/ gitlab does not offer updated_at for commit comments\\n\" +\n+            \"-                           var createdat = zoneddatetime.parse(o.get(\\\"created_at\\\").asstring());\\n\" +\n+            \"-                           \/\/ gitlab does not offer an id for commit comments\\n\" +\n+            \"-                           var id = \\\"\\\";\\n\" +\n+            \"-                           return new commitcomment(hash,\\n\" +\n+            \"-                                                    path,\\n\" +\n+            \"-                                                    line,\\n\" +\n+            \"-                                                    id,\\n\" +\n+            \"-                                                    o.get(\\\"note\\\").asstring(),\\n\" +\n+            \"-                                                    gitlabhost.parseauthorfield(o),\\n\" +\n+            \"-                                                    createdat,\\n\" +\n+            \"-                                                    createdat);\\n\" +\n+            \"+                          var createdat = zoneddatetime.parse(o.get(\\\"note\\\").get(\\\"created_at\\\").asstring());\\n\" +\n+            \"+                          var body = o.get(\\\"note\\\").get(\\\"body\\\").asstring();\\n\" +\n+            \"+                          var user = gitlabhost.parseauthorfield(o);\\n\" +\n+            \"+                          var id = o.get(\\\"note\\\").get(\\\"id\\\").asstring();\\n\" +\n+            \"+                          supplier<hash> hash = () -> commitwithcomment(o.get(\\\"target_title\\\").asstring(),\\n\" +\n+            \"+                                                                        body,\\n\" +\n+            \"+                                                                        createdAt,\\n\" +\n+            \"+                                                                        user);\\n\" +\n+            \"+                          return new CommitComment(hash, null, -1, id, body, user, createdAt, createdAt);\\n\" +\n+            \"                       })\\n\" +\n+            \"                       .collect(Collectors.toList());\\n\" +\n+            \"     }\\n\";\n+\n+        var diff7 =\n+            \"diff --git a\/test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestHostedRepository.java b\/test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestHostedRepository.java\\n\" +\n+            \"index 489f49ef..e777f0f8 100644\\n\" +\n+            \"--- a\/test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestHostedRepository.java\\n\" +\n+            \"+++ b\/test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestHostedRepository.java\\n\" +\n+            \"@@ -211,6 +211,14 @@ public Hash branchHash(String ref) {\\n\" +\n+            \"         return commitComments.get(hash);\\n\" +\n+            \"     }\\n\" +\n+            \" \\n\" +\n+            \"+    @Override\\n\" +\n+            \"+    public List<CommitComment> recentCommitComments() {\\n\" +\n+            \"+        return commitComments.values()\\n\" +\n+            \"+                             .stream()\\n\" +\n+            \"+                             .flatMap(e -> e.stream())\\n\" +\n+            \"+                             .collect(Collectors.toList());\\n\" +\n+            \"+    }\\n\" +\n+            \"+\\n\" +\n+            \"     @Override\\n\" +\n+            \"     public void addCommitComment(Hash hash, String body) {\\n\" +\n+            \"         var id = nextCommitCommentId;\";\n+\n+        for (var diff : List.of(diff1, diff2, diff3, diff4, diff5, diff6, diff7)) {\n+            var hunks = UnifiedDiffParser.parseSingleFileDiff(diff.split(\"\\n\"));\n+            assertFalse(hunks.isEmpty());\n+        }\n+    }\n+}\n","filename":"vcs\/src\/test\/java\/org\/openjdk\/skara\/vcs\/UnifiedDiffParserTests.java","additions":401,"deletions":0,"binary":false,"changes":401,"status":"added"}]}