{"files":[{"patch":"@@ -249,1 +249,1 @@\n-                               () -> ArchiveMessages.composeReplyFooter(pr));\n+                               () -> ArchiveMessages.composeReplyFooter(pr, comment, null, null));\n@@ -265,1 +265,1 @@\n-                               () -> ArchiveMessages.composeReplyFooter(pr));\n+                               () -> ArchiveMessages.composeReplyFooter(pr, null, reviewComment, null));\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/ArchiveItem.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -308,0 +308,14 @@\n+    static String composeReplyFooter(PullRequest pr, Comment comment, ReviewComment reviewComment, Review review) {\n+        var footer = new StringBuilder();\n+        if (comment != null) {\n+            footer.append(\"PR Comment: \" + pr.commentUrl(comment).toString());\n+        }\n+        if (reviewComment != null) {\n+            footer.append(\"PR Review Comment: \" + pr.reviewCommentUrl(reviewComment).toString());\n+        }\n+        if (review != null) {\n+            footer.append(\"PR Review: \" + pr.reviewUrl(review).toString());\n+        }\n+        return footer.toString();\n+    }\n+\n@@ -445,1 +459,1 @@\n-        result.append(composeReplyFooter(pr));\n+        result.append(composeReplyFooter(pr, null, null, review));\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/ArchiveMessages.java","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -357,0 +357,3 @@\n+                if (!footer.isEmpty() && !newFooterFragments.isEmpty()) {\n+                    footer.append(\"\\n\");\n+                }\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/ReviewArchive.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -246,0 +246,1 @@\n+            assertTrue(archiveContains(archiveFolder.path(), \"hosted.git\/pr\/1\/comment\/3\"));\n@@ -252,0 +253,1 @@\n+            assertTrue(conversations.get(0).allMessages().get(1).body().contains(\"hosted.git\/pr\/1\/comment\/3\"));\n@@ -273,1 +275,2 @@\n-            assertTrue(conversations.get(0).allMessages().get(2).body().contains(\"This is a comment ðŸ˜„\"));\n+            assertTrue(conversations.get(0).allMessages().get(2).body().contains(\"This is another comment\"));\n+            assertTrue(conversations.get(0).allMessages().get(2).body().contains(\"hosted.git\/pr\/1\/comment\/5\"));\n@@ -822,0 +825,3 @@\n+            assertTrue(conversations.get(0).allMessages().get(1).body().contains(\"hosted.git\/pr\/1\/reviewComment\/0\"));\n+            assertTrue(conversations.get(0).allMessages().get(2).body().contains(\"hosted.git\/pr\/1\/reviewComment\/2\"));\n+\n@@ -916,0 +922,4 @@\n+            assertTrue(reviewReply.body().contains(\"hosted.git\/pr\/1\/reviewComment\/0\"), reviewReply.body());\n+            assertTrue(reviewReply.body().contains(\"hosted.git\/pr\/1\/reviewComment\/1\"), reviewReply.body());\n+            assertTrue(reviewReply.body().contains(\"hosted.git\/pr\/1\/reviewComment\/2\"), reviewReply.body());\n+            assertTrue(reviewReply.body().contains(\"hosted.git\/pr\/1\/reviewComment\/3\"), reviewReply.body());\n@@ -2297,0 +2307,9 @@\n+            listServer.processIncoming();\n+            listServer.processIncoming();\n+            listServer.processIncoming();\n+            var mailmanServer = MailingListServerFactory.createMailmanServer(listServer.getArchive(), listServer.getSMTP(), Duration.ZERO);\n+            var mailmanList = mailmanServer.getListReader(listAddress.address());\n+            var conversations = mailmanList.conversations(Duration.ofDays(1));\n+            assertTrue(conversations.get(0).allMessages().get(1).body().contains(\"hosted.git\/pr\/1\/review\/0\"));\n+            assertTrue(conversations.get(0).allMessages().get(2).body().contains(\"hosted.git\/pr\/1\/review\/1\"));\n+\n","filename":"bots\/mlbridge\/src\/test\/java\/org\/openjdk\/skara\/bots\/mlbridge\/MailingListBridgeBotTests.java","additions":20,"deletions":1,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -209,0 +209,15 @@\n+    @Override\n+    public URI commentUrl(Comment comment) {\n+        return null;\n+    }\n+\n+    @Override\n+    public URI reviewCommentUrl(ReviewComment reviewComment) {\n+        return null;\n+    }\n+\n+    @Override\n+    public URI reviewUrl(Review review) {\n+        return null;\n+    }\n+\n","filename":"bots\/tester\/src\/test\/java\/org\/openjdk\/skara\/bots\/tester\/InMemoryPullRequest.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -159,0 +159,6 @@\n+    URI commentUrl(Comment comment);\n+\n+    URI reviewCommentUrl(ReviewComment reviewComment);\n+\n+    URI reviewUrl(Review review);\n+\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/PullRequest.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -527,0 +527,15 @@\n+    @Override\n+    public URI commentUrl(Comment comment) {\n+        return URIBuilder.base(webUrl()).appendPath(\"#issuecomment-\" + comment.id()).build();\n+    }\n+\n+    @Override\n+    public URI reviewCommentUrl(ReviewComment reviewComment) {\n+        return URIBuilder.base(webUrl()).appendPath(\"#discussion_r\" + reviewComment.id()).build();\n+    }\n+\n+    @Override\n+    public URI reviewUrl(Review review) {\n+        return URIBuilder.base(webUrl()).appendPath(\"#pullrequestreview-\" + review.id()).build();\n+    }\n+\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubPullRequest.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -629,0 +629,15 @@\n+    @Override\n+    public URI commentUrl(Comment comment) {\n+        return URIBuilder.base(webUrl()).appendPath(\"#note_\" + comment.id()).build();\n+    }\n+\n+    @Override\n+    public URI reviewCommentUrl(ReviewComment reviewComment) {\n+        return URIBuilder.base(webUrl()).appendPath(\"#note_\" + reviewComment.id()).build();\n+    }\n+\n+    @Override\n+    public URI reviewUrl(Review review) {\n+        return URIBuilder.base(webUrl()).appendPath(\"#note_\" + review.id()).build();\n+    }\n+\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabMergeRequest.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import org.openjdk.skara.json.JSON;\n@@ -234,0 +235,27 @@\n+\n+    @Test\n+    void test() {\n+        var username = settings.getProperty(\"github.user\");\n+        var token = settings.getProperty(\"github.pat\");\n+        var credential = new Credential(username, token);\n+        var uri = URIBuilder.base(GITHUB_REST_URI).build();\n+        var configuration = JSON.object().put(\"weburl\", JSON.object().put(\"pattern\", \"^https:\/\/github.com\/openjdk\/(.*)$\").put(\"replacement\", \"https:\/\/git.openjdk.org\/$1\"));\n+        var githubHost = new GitHubForgeFactory().create(uri, credential, configuration);\n+\n+        var githubRepoOpt = githubHost.repository(\"openjdk\/playground\");\n+        assumeTrue(githubRepoOpt.isPresent());\n+        var githubRepo = githubRepoOpt.get();\n+        var pr = githubRepo.pullRequest(\"129\");\n+\n+        var labelComment = pr.comments().stream()\n+                .filter(comment -> comment.body().contains(\"The following label will be automatically applied to this pull request:\"))\n+                .findFirst()\n+                .get();\n+        assertEquals(\"https:\/\/git.openjdk.org\/playground\/pull\/129#issuecomment-1426703897\", pr.commentUrl(labelComment).toString());\n+\n+        var reviewComment = pr.reviewComments().get(0);\n+        assertEquals(\"https:\/\/git.openjdk.org\/playground\/pull\/129#discussion_r1108931186\", pr.reviewCommentUrl(reviewComment).toString());\n+\n+        var review = pr.reviews().get(0);\n+        assertEquals(\"https:\/\/git.openjdk.org\/playground\/pull\/129#pullrequestreview-1302142525\", pr.reviewUrl(review).toString());\n+    }\n","filename":"forge\/src\/test\/java\/org\/openjdk\/skara\/forge\/github\/GitHubRestApiTests.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -257,0 +257,22 @@\n+\n+    @Test\n+    void testHtmlUrl() throws IOException {\n+        var settings = ManualTestSettings.loadManualTestSettings();\n+        var username = settings.getProperty(\"gitlab.user\");\n+        var token = settings.getProperty(\"gitlab.pat\");\n+        var credential = new Credential(username, token);\n+        var uri = URIBuilder.base(settings.getProperty(\"gitlab.uri\")).build();\n+        var gitLabHost = new GitLabHost(\"gitlab\", uri, false, credential, Set.of());\n+        var gitLabRepo = gitLabHost.repository(settings.getProperty(\"gitlab.repository\")).orElseThrow();\n+        var gitLabMergeRequest = gitLabRepo.pullRequest(settings.getProperty(\"gitlab.merge.request.id\"));\n+\n+        System.out.println(gitLabMergeRequest.webUrl());\n+        var comment = gitLabMergeRequest.comments().get(0);\n+        assertEquals(settings.getProperty(\"comment_html_url\"), gitLabMergeRequest.commentUrl(comment).toString());\n+\n+        var reviewComment = gitLabMergeRequest.reviewComments().get(0);\n+        assertEquals(settings.getProperty(\"reviewComment_html_url\"), gitLabMergeRequest.reviewCommentUrl(reviewComment).toString());\n+\n+        var review = gitLabMergeRequest.reviews().get(0);\n+        assertEquals(settings.getProperty(\"review_html_url\"), gitLabMergeRequest.reviewUrl(review).toString());\n+    }\n","filename":"forge\/src\/test\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabRestApiTest.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+import org.openjdk.skara.issuetracker.Comment;\n@@ -209,0 +210,15 @@\n+    @Override\n+    public URI commentUrl(Comment comment) {\n+        return URIBuilder.base(webUrl()).appendPath(\"\/comment\/\" + comment.id()).build();\n+    }\n+\n+    @Override\n+    public URI reviewCommentUrl(ReviewComment reviewComment) {\n+        return URIBuilder.base(webUrl()).appendPath(\"\/reviewComment\/\" + reviewComment.id()).build();\n+    }\n+\n+    @Override\n+    public URI reviewUrl(Review review) {\n+        return URIBuilder.base(webUrl()).appendPath(\"\/review\/\" + review.id()).build();\n+    }\n+\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestPullRequest.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"}]}