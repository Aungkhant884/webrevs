{"files":[{"patch":"@@ -249,1 +249,1 @@\n-                               () -> ArchiveMessages.composeReplyFooter(pr));\n+                               () -> ArchiveMessages.composeReplyFooter(pr, comment, null, null));\n@@ -265,1 +265,1 @@\n-                               () -> ArchiveMessages.composeReplyFooter(pr));\n+                               () -> ArchiveMessages.composeReplyFooter(pr, null, reviewComment, null));\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/ArchiveItem.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -308,0 +308,14 @@\n+    static String composeReplyFooter(PullRequest pr, Comment comment, ReviewComment reviewComment, Review review) {\n+        var footer = new StringBuilder();\n+        if (comment != null) {\n+            footer.append(\"Comment: \" + pr.commentUrl(comment).toString());\n+        }\n+        if (reviewComment != null) {\n+            footer.append(\"ReviewComment: \" + pr.reviewCommentUrl(reviewComment).toString());\n+        }\n+        if (review != null) {\n+            footer.append(\"Review: \" + pr.reviewUrl(review).toString());\n+        }\n+        return footer.toString();\n+    }\n+\n@@ -379,5 +393,1 @@\n-        StringBuilder commentText = new StringBuilder(filterCommentsAndCommands(comment.body()));\n-        if (comment.htmlUrl().isPresent()) {\n-            commentText.append(\"\\n\").append(\"Link: \").append(comment.htmlUrl().get());\n-        }\n-        return commentText.toString();\n+        return filterCommentsAndCommands(comment.body());\n@@ -412,3 +422,0 @@\n-        if (reviewComment.htmlUrl().isPresent()) {\n-            body.append(\"\\n\").append(\"Link: \").append(reviewComment.htmlUrl().get());\n-        }\n@@ -436,1 +443,0 @@\n-        StringBuilder reviewText = new StringBuilder();\n@@ -438,1 +444,1 @@\n-            reviewText.append(filterCommentsAndCommands(review.body().get()));\n+            return filterCommentsAndCommands(review.body().get());\n@@ -440,4 +446,1 @@\n-            reviewText.append(composeReviewVerdict(review, hostUserToUsername, hostUserToRole));\n-        }\n-        if (review.htmlUrl().isPresent()) {\n-            reviewText.append(\"\\n\").append(\"Link: \").append(review.htmlUrl().get());\n+            return composeReviewVerdict(review, hostUserToUsername, hostUserToRole);\n@@ -445,1 +448,0 @@\n-        return reviewText.toString();\n@@ -457,1 +459,1 @@\n-        result.append(composeReplyFooter(pr));\n+        result.append(composeReplyFooter(pr, null, null, review));\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/ArchiveMessages.java","additions":18,"deletions":16,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -358,0 +358,3 @@\n+                if (!newFooterFragments.isEmpty()) {\n+                    footer.append(\"\\n\");\n+                }\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/ReviewArchive.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -234,1 +234,1 @@\n-            pr.addComment(\"This is a comment :smile:\", \"https:\/\/test.test.com\/comment1\");\n+            pr.addComment(\"This is a comment :smile:\");\n@@ -245,1 +245,0 @@\n-            assertTrue(archiveContains(archiveFolder.path(), \"Link: https:\/\/test.test.com\/comment1\"));\n@@ -247,0 +246,1 @@\n+            assertTrue(archiveContains(archiveFolder.path(), \"hosted.git\/pr\/1\/comment\/3\"));\n@@ -253,0 +253,1 @@\n+            assertTrue(conversations.get(0).allMessages().get(1).body().contains(\"hosted.git\/pr\/1\/comment\/3\"));\n@@ -256,1 +257,1 @@\n-            pr.addComment(\"@\" + pr.author().username() +\" This is another comment\", \"https:\/\/test.test.com\/comment2\");\n+            pr.addComment(\"@\" + pr.author().username() +\" This is another comment\");\n@@ -265,1 +266,0 @@\n-            assertTrue(archiveContains(archiveFolder.path(), \"Link: https:\/\/test.test.com\/comment2\"));\n@@ -275,4 +275,2 @@\n-            assertTrue(conversations.get(0).allMessages().get(1).body().contains(\"This is a comment ðŸ˜„\"));\n-            assertTrue(conversations.get(0).allMessages().get(1).body().contains(\"Link: https:\/\/test.test.com\/comment1\"));\n-            assertTrue(conversations.get(0).allMessages().get(2).body().contains(\"This is another\"));\n-            assertTrue(conversations.get(0).allMessages().get(2).body().contains(\"Link: https:\/\/test.test.com\/comment2\"));\n+            assertTrue(conversations.get(0).allMessages().get(2).body().contains(\"This is another comment\"));\n+            assertTrue(conversations.get(0).allMessages().get(2).body().contains(\"hosted.git\/pr\/1\/comment\/5\"));\n@@ -785,1 +783,1 @@\n-            var comment = pr.addReviewComment(masterHash, editHash, reviewFile.toString(), 2, \"Review comment\", \"https:\/\/test.test.com\/reviewComment1\");\n+            var comment = pr.addReviewComment(masterHash, editHash, reviewFile.toString(), 2, \"Review comment\");\n@@ -800,1 +798,0 @@\n-            assertTrue(archiveContains(archiveFolder.path(), \"Link: https:\/\/test.test.com\/reviewComment1\"));\n@@ -812,1 +809,0 @@\n-            assertTrue(conversations.get(0).allMessages().get(1).body().contains(\"Link: https:\/\/test.test.com\/reviewComment1\"));\n@@ -815,1 +811,1 @@\n-            pr.addReviewCommentReply(comment, \"This is a review reply\", \"https:\/\/test.test.com\/reviewComment2\");\n+            pr.addReviewCommentReply(comment, \"This is a review reply\");\n@@ -823,1 +819,0 @@\n-            assertTrue(archiveContains(archiveFolder.path(), \"Link: https:\/\/test.test.com\/reviewComment2\"));\n@@ -830,0 +825,3 @@\n+            assertTrue(conversations.get(0).allMessages().get(1).body().contains(\"hosted.git\/pr\/1\/reviewComment\/0\"));\n+            assertTrue(conversations.get(0).allMessages().get(2).body().contains(\"hosted.git\/pr\/1\/reviewComment\/2\"));\n+\n@@ -834,1 +832,0 @@\n-            assertTrue(conversations.get(0).allMessages().get(2).body().contains(\"Link: https:\/\/test.test.com\/reviewComment2\"));\n@@ -895,4 +892,4 @@\n-            var first = pr.addReviewComment(masterHash, editHash, reviewFile.toString(), 2, \"Review comment\", \"https:\/\/test.test.com\/reviewComment1\");\n-            var second = pr.addReviewComment(masterHash, editHash, reviewFile.toString(), 2, \"Another review comment\", \"https:\/\/test.test.com\/reviewComment2\");\n-            pr.addReviewComment(masterHash, editHash, reviewFile.toString(), 2, \"Further review comment\", \"https:\/\/test.test.com\/reviewComment3\");\n-            pr.addReviewComment(masterHash, editHash, reviewFile.toString(), 2, \"Final review comment\", \"https:\/\/test.test.com\/reviewComment4\");\n+            var first = pr.addReviewComment(masterHash, editHash, reviewFile.toString(), 2, \"Review comment\");\n+            var second = pr.addReviewComment(masterHash, editHash, reviewFile.toString(), 2, \"Another review comment\");\n+            pr.addReviewComment(masterHash, editHash, reviewFile.toString(), 2, \"Further review comment\");\n+            pr.addReviewComment(masterHash, editHash, reviewFile.toString(), 2, \"Final review comment\");\n@@ -923,4 +920,6 @@\n-            assertTrue(reviewReply.body().contains(\"Review comment\\nLink: https:\/\/test.test.com\/reviewComment1\\n\\n\"), reviewReply.body());\n-            assertTrue(reviewReply.body().contains(\"Another review comment\\nLink: https:\/\/test.test.com\/reviewComment2\\n\\n\"), reviewReply.body());\n-            assertTrue(reviewReply.body().contains(\"Link: https:\/\/test.test.com\/reviewComment3\"), reviewReply.body());\n-            assertTrue(reviewReply.body().contains(\"Link: https:\/\/test.test.com\/reviewComment4\"), reviewReply.body());\n+            assertTrue(reviewReply.body().contains(\"Review comment\\n\\n\"), reviewReply.body());\n+            assertTrue(reviewReply.body().contains(\"Another review comment\"), reviewReply.body());\n+            assertTrue(reviewReply.body().contains(\"hosted.git\/pr\/1\/reviewComment\/0\"), reviewReply.body());\n+            assertTrue(reviewReply.body().contains(\"hosted.git\/pr\/1\/reviewComment\/1\"), reviewReply.body());\n+            assertTrue(reviewReply.body().contains(\"hosted.git\/pr\/1\/reviewComment\/2\"), reviewReply.body());\n+            assertTrue(reviewReply.body().contains(\"hosted.git\/pr\/1\/reviewComment\/3\"), reviewReply.body());\n@@ -2284,2 +2283,2 @@\n-            var reviewedPr = (TestPullRequest)reviewer.pullRequest(pr.id());\n-            reviewedPr.addReview(Review.Verdict.DISAPPROVED, \"Reason 1\", \"https:\/\/test.test.com\/review1\");\n+            var reviewedPr = reviewer.pullRequest(pr.id());\n+            reviewedPr.addReview(Review.Verdict.DISAPPROVED, \"Reason 1\");\n@@ -2295,1 +2294,0 @@\n-            assertEquals(1, archiveContainsCount(archiveFolder.path(), \"Link: https:\/\/test.test.com\/review1\"));\n@@ -2298,1 +2296,1 @@\n-            reviewedPr.addReview(Review.Verdict.APPROVED, \"Reason 2\", \"https:\/\/test.test.com\/review2\");\n+            reviewedPr.addReview(Review.Verdict.APPROVED, \"Reason 2\");\n@@ -2308,1 +2306,0 @@\n-            assertEquals(1, archiveContainsCount(archiveFolder.path(), \"Link: https:\/\/test.test.com\/review2\"));\n@@ -2316,2 +2313,2 @@\n-            assertTrue(conversations.get(0).allMessages().get(1).body().contains(\"Reason 1\\nLink: https:\/\/test.test.com\/review1\"));\n-            assertTrue(conversations.get(0).allMessages().get(2).body().contains(\"Reason 2\\nLink: https:\/\/test.test.com\/review2\"));\n+            assertTrue(conversations.get(0).allMessages().get(1).body().contains(\"hosted.git\/pr\/1\/review\/0\"));\n+            assertTrue(conversations.get(0).allMessages().get(2).body().contains(\"hosted.git\/pr\/1\/review\/1\"));\n","filename":"bots\/mlbridge\/src\/test\/java\/org\/openjdk\/skara\/bots\/mlbridge\/MailingListBridgeBotTests.java","additions":26,"deletions":29,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -209,0 +209,15 @@\n+    @Override\n+    public URI commentUrl(Comment comment) {\n+        return null;\n+    }\n+\n+    @Override\n+    public URI reviewCommentUrl(ReviewComment reviewComment) {\n+        return null;\n+    }\n+\n+    @Override\n+    public URI reviewUrl(Review review) {\n+        return null;\n+    }\n+\n","filename":"bots\/tester\/src\/test\/java\/org\/openjdk\/skara\/bots\/tester\/InMemoryPullRequest.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -159,0 +159,6 @@\n+    URI commentUrl(Comment comment);\n+\n+    URI reviewCommentUrl(ReviewComment reviewComment);\n+\n+    URI reviewUrl(Review review);\n+\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/PullRequest.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -40,1 +40,0 @@\n-    private final Optional<String> htmlUrl;\n@@ -51,13 +50,0 @@\n-        this.htmlUrl = Optional.empty();\n-    }\n-\n-    public Review(ZonedDateTime createdAt, HostUser reviewer, Verdict verdict, Hash hash, int id, String body,\n-                  String targetRef, String htmlUrl) {\n-        this.createdAt = createdAt;\n-        this.reviewer = reviewer;\n-        this.verdict = verdict;\n-        this.hash = hash;\n-        this.id = id;\n-        this.body = body;\n-        this.targetRef = targetRef;\n-        this.htmlUrl = Optional.of(htmlUrl);\n@@ -102,4 +88,0 @@\n-    public Optional<String> htmlUrl() {\n-        return htmlUrl;\n-    }\n-\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/Review.java","additions":0,"deletions":18,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -49,10 +49,0 @@\n-    public ReviewComment(ReviewComment parent, String threadId, Hash hash, String path, int line, String id, String body, HostUser author, ZonedDateTime createdAt, ZonedDateTime updatedAt, String htmlUrl) {\n-        super(id, body, author, createdAt, updatedAt, htmlUrl);\n-\n-        this.parent = parent;\n-        this.threadId = threadId;\n-        this.hash = hash;\n-        this.path = path;\n-        this.line = line;\n-    }\n-\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/ReviewComment.java","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -112,2 +112,1 @@\n-                                 var htmlUrl = obj.get(\"html_url\").asString();\n-                                 return new Review(createdAt, reviewer, verdict, hash, id, body, currentTargetRef, htmlUrl);\n+                                 return new Review(createdAt, reviewer, verdict, hash, id, body, currentTargetRef);\n@@ -234,2 +233,1 @@\n-                                        ZonedDateTime.parse(reviewJson.get(\"updated_at\").asString()),\n-                                        reviewJson.get(\"html_url\").asString());\n+                                        ZonedDateTime.parse(reviewJson.get(\"updated_at\").asString()));\n@@ -347,2 +345,1 @@\n-                              ZonedDateTime.parse(comment.get(\"updated_at\").asString()),\n-                              comment.get(\"html_url\").asString());\n+                              ZonedDateTime.parse(comment.get(\"updated_at\").asString()));\n@@ -530,0 +527,15 @@\n+    @Override\n+    public URI commentUrl(Comment comment) {\n+        return URIBuilder.base(webUrl()).appendPath(\"#issuecomment-\" + comment.id()).build();\n+    }\n+\n+    @Override\n+    public URI reviewCommentUrl(ReviewComment reviewComment) {\n+        return URIBuilder.base(webUrl()).appendPath(\"#discussion_r\" + reviewComment.id()).build();\n+    }\n+\n+    @Override\n+    public URI reviewUrl(Review review) {\n+        return URIBuilder.base(webUrl()).appendPath(\"#pullrequestreview-\" + review.id()).build();\n+    }\n+\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubPullRequest.java","additions":18,"deletions":6,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -140,2 +140,1 @@\n-                                   return new Review(createdAt, reviewer, verdict, hash, id, \"\", currentTargetRef,\n-                                           generateHtmlUrl(obj));\n+                                   return new Review(createdAt, reviewer, verdict, hash, id, \"\", currentTargetRef);\n@@ -147,4 +146,0 @@\n-    private String generateHtmlUrl(JSONValue note) {\n-        return json.get(\"web_url\").asString() + \"#note_\" + note.get(\"id\").toString();\n-    }\n-\n@@ -249,3 +244,1 @@\n-                                        ZonedDateTime.parse(note.get(\"updated_at\").asString()),\n-                                        generateHtmlUrl(note)\n-                                 );\n+                                        ZonedDateTime.parse(note.get(\"updated_at\").asString()));\n@@ -386,2 +379,1 @@\n-                              ZonedDateTime.parse(comment.get(\"updated_at\").asString()),\n-                              generateHtmlUrl(comment));\n+                              ZonedDateTime.parse(comment.get(\"updated_at\").asString()));\n@@ -637,0 +629,15 @@\n+    @Override\n+    public URI commentUrl(Comment comment) {\n+        return URIBuilder.base(webUrl()).appendPath(\"#note_\" + comment.id()).build();\n+    }\n+\n+    @Override\n+    public URI reviewCommentUrl(ReviewComment reviewComment) {\n+        return URIBuilder.base(webUrl()).appendPath(\"#note_\" + reviewComment.id()).build();\n+    }\n+\n+    @Override\n+    public URI reviewUrl(Review review) {\n+        return URIBuilder.base(webUrl()).appendPath(\"#note_\" + review.id()).build();\n+    }\n+\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabMergeRequest.java","additions":18,"deletions":11,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import org.openjdk.skara.json.JSON;\n@@ -236,1 +237,8 @@\n-    void testHtmlUrl() {\n+    void test() {\n+        var username = settings.getProperty(\"github.user\");\n+        var token = settings.getProperty(\"github.pat\");\n+        var credential = new Credential(username, token);\n+        var uri = URIBuilder.base(GITHUB_REST_URI).build();\n+        var configuration = JSON.object().put(\"weburl\", JSON.object().put(\"pattern\", \"^https:\/\/github.com\/openjdk\/(.*)$\").put(\"replacement\", \"https:\/\/git.openjdk.org\/$1\"));\n+        var githubHost = new GitHubForgeFactory().create(uri, credential, configuration);\n+\n@@ -246,1 +254,1 @@\n-        assertEquals(\"https:\/\/github.com\/openjdk\/playground\/pull\/129#issuecomment-1426703897\", labelComment.htmlUrl().get());\n+        assertEquals(\"https:\/\/git.openjdk.org\/playground\/pull\/129#issuecomment-1426703897\", pr.commentUrl(labelComment).toString());\n@@ -249,1 +257,1 @@\n-        assertEquals(\"https:\/\/github.com\/openjdk\/playground\/pull\/129#discussion_r1108931186\", reviewComment.htmlUrl().get());\n+        assertEquals(\"https:\/\/git.openjdk.org\/playground\/pull\/129#discussion_r1108931186\", pr.reviewCommentUrl(reviewComment).toString());\n@@ -252,1 +260,1 @@\n-        assertEquals(\"https:\/\/github.com\/openjdk\/playground\/pull\/129#pullrequestreview-1302142525\", review.htmlUrl().get());\n+        assertEquals(\"https:\/\/git.openjdk.org\/playground\/pull\/129#pullrequestreview-1302142525\", pr.reviewUrl(review).toString());\n","filename":"forge\/src\/test\/java\/org\/openjdk\/skara\/forge\/github\/GitHubRestApiTests.java","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-\n@@ -270,0 +269,1 @@\n+        System.out.println(gitLabMergeRequest.webUrl());\n@@ -271,1 +271,1 @@\n-        assertEquals(settings.getProperty(\"comment_html_url\"), comment.htmlUrl().get());\n+        assertEquals(settings.getProperty(\"comment_html_url\"), gitLabMergeRequest.commentUrl(comment).toString());\n@@ -274,1 +274,1 @@\n-        assertEquals(settings.getProperty(\"reviewComment_html_url\"), reviewComment.htmlUrl().get());\n+        assertEquals(settings.getProperty(\"reviewComment_html_url\"), gitLabMergeRequest.reviewCommentUrl(reviewComment).toString());\n@@ -277,1 +277,1 @@\n-        assertEquals(settings.getProperty(\"review_html_url\"), review.htmlUrl().get());\n+        assertEquals(settings.getProperty(\"review_html_url\"), gitLabMergeRequest.reviewUrl(review).toString());\n","filename":"forge\/src\/test\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabRestApiTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import java.util.Optional;\n@@ -37,1 +36,0 @@\n-    private final Optional<String> htmlUrl;\n@@ -45,10 +43,0 @@\n-        this.htmlUrl = Optional.empty();\n-    }\n-\n-    public Comment(String id, String body, HostUser author, ZonedDateTime createdAt, ZonedDateTime updatedAt, String htmlUrl) {\n-        this.id = id;\n-        this.body = body;\n-        this.author = author;\n-        this.createdAt = createdAt;\n-        this.updatedAt = updatedAt;\n-        this.htmlUrl = Optional.of(htmlUrl);\n@@ -77,4 +65,0 @@\n-    public Optional<String> htmlUrl() {\n-        return htmlUrl;\n-    }\n-\n","filename":"issuetracker\/src\/main\/java\/org\/openjdk\/skara\/issuetracker\/Comment.java","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -123,15 +123,0 @@\n-    public Comment addComment(String body, String htmlUrl) {\n-        List<Comment> comments = store.comments();\n-        var size = comments.size();\n-        var lastId = size > 0 ? comments.get(size - 1).id() : null;\n-        var comment = new Comment(String.valueOf(lastId != null ? Integer.parseInt(lastId) + 1 : 0),\n-                body,\n-                user,\n-                ZonedDateTime.now(),\n-                ZonedDateTime.now(),\n-                htmlUrl);\n-        store.comments().add(comment);\n-        store.setLastUpdate(ZonedDateTime.now());\n-        return comment;\n-    }\n-\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestIssue.java","additions":0,"deletions":15,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+import org.openjdk.skara.issuetracker.Comment;\n@@ -105,15 +106,0 @@\n-    public void addReview(Review.Verdict verdict, String body, String htmlUrl) {\n-        try {\n-            var review = new Review(ZonedDateTime.now(), user,\n-                    verdict, targetRepository.localRepository().resolve(store().sourceRef()).orElseThrow(),\n-                    store().reviews().size(),\n-                    body, targetRef, htmlUrl);\n-\n-            store().reviews().add(review);\n-            store().setLastUpdate(ZonedDateTime.now());\n-\n-        } catch (IOException e) {\n-            throw new UncheckedIOException(e);\n-        }\n-    }\n-\n@@ -135,9 +121,0 @@\n-    public ReviewComment addReviewComment(Hash base, Hash hash, String path, int line, String body, String htmlUrl) {\n-        var id = String.valueOf(store().reviewComments().size());\n-        var comment = new ReviewComment(null, id,\n-                hash, path, line, id, body, user, ZonedDateTime.now(), ZonedDateTime.now(), htmlUrl);\n-        store().reviewComments().add(comment);\n-        store().setLastUpdate(ZonedDateTime.now());\n-        return comment;\n-    }\n-\n@@ -157,12 +134,0 @@\n-    public ReviewComment addReviewCommentReply(ReviewComment parent, String body, String htmlUrl) {\n-        if (parent.parent().isPresent()) {\n-            throw new RuntimeException(\"Can only reply to top-level review comments\");\n-        }\n-        var comment = new ReviewComment(parent, parent.threadId(), parent.hash().orElseThrow(), parent.path(),\n-                parent.line(), String.valueOf(store().reviewComments().size()), body, user,\n-                ZonedDateTime.now(), ZonedDateTime.now(), htmlUrl);\n-        store().reviewComments().add(comment);\n-        store().setLastUpdate(ZonedDateTime.now());\n-        return comment;\n-    }\n-\n@@ -245,0 +210,15 @@\n+    @Override\n+    public URI commentUrl(Comment comment) {\n+        return URIBuilder.base(webUrl()).appendPath(\"\/comment\/\" + comment.id()).build();\n+    }\n+\n+    @Override\n+    public URI reviewCommentUrl(ReviewComment reviewComment) {\n+        return URIBuilder.base(webUrl()).appendPath(\"\/reviewComment\/\" + reviewComment.id()).build();\n+    }\n+\n+    @Override\n+    public URI reviewUrl(Review review) {\n+        return URIBuilder.base(webUrl()).appendPath(\"\/review\/\" + review.id()).build();\n+    }\n+\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestPullRequest.java","additions":16,"deletions":36,"binary":false,"changes":52,"status":"modified"}]}