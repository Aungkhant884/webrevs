{"files":[{"patch":"@@ -379,1 +379,5 @@\n-        return filterCommentsAndCommands(comment.body());\n+        StringBuilder commentText = new StringBuilder(filterCommentsAndCommands(comment.body()));\n+        if (comment.htmlUrl().isPresent()) {\n+            commentText.append(\"\\n\").append(\"Link: \").append(comment.htmlUrl().get());\n+        }\n+        return commentText.toString();\n@@ -408,0 +412,3 @@\n+        if (reviewComment.htmlUrl().isPresent()) {\n+            body.append(\"\\n\").append(\"Link: \").append(reviewComment.htmlUrl().get());\n+        }\n@@ -429,0 +436,1 @@\n+        StringBuilder reviewText = new StringBuilder();\n@@ -430,1 +438,1 @@\n-            return filterCommentsAndCommands(review.body().get());\n+            reviewText.append(filterCommentsAndCommands(review.body().get()));\n@@ -432,1 +440,4 @@\n-            return composeReviewVerdict(review, hostUserToUsername, hostUserToRole);\n+            reviewText.append(composeReviewVerdict(review, hostUserToUsername, hostUserToRole));\n+        }\n+        if (review.htmlUrl().isPresent()) {\n+            reviewText.append(\"\\n\").append(\"Link: \").append(review.htmlUrl().get());\n@@ -434,0 +445,1 @@\n+        return reviewText.toString();\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/ArchiveMessages.java","additions":15,"deletions":3,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -234,1 +234,1 @@\n-            pr.addComment(\"This is a comment :smile:\");\n+            pr.addComment(\"This is a comment :smile:\", \"https:\/\/test.test.com\/comment1\");\n@@ -245,0 +245,1 @@\n+            assertTrue(archiveContains(archiveFolder.path(), \"Link: https:\/\/test.test.com\/comment1\"));\n@@ -255,1 +256,1 @@\n-            pr.addComment(\"@\" + pr.author().username() +\" This is another comment\");\n+            pr.addComment(\"@\" + pr.author().username() +\" This is another comment\", \"https:\/\/test.test.com\/comment2\");\n@@ -264,0 +265,1 @@\n+            assertTrue(archiveContains(archiveFolder.path(), \"Link: https:\/\/test.test.com\/comment2\"));\n@@ -273,1 +275,4 @@\n-            assertTrue(conversations.get(0).allMessages().get(2).body().contains(\"This is a comment ðŸ˜„\"));\n+            assertTrue(conversations.get(0).allMessages().get(1).body().contains(\"This is a comment ðŸ˜„\"));\n+            assertTrue(conversations.get(0).allMessages().get(1).body().contains(\"Link: https:\/\/test.test.com\/comment1\"));\n+            assertTrue(conversations.get(0).allMessages().get(2).body().contains(\"This is another\"));\n+            assertTrue(conversations.get(0).allMessages().get(2).body().contains(\"Link: https:\/\/test.test.com\/comment2\"));\n@@ -780,1 +785,1 @@\n-            var comment = pr.addReviewComment(masterHash, editHash, reviewFile.toString(), 2, \"Review comment\");\n+            var comment = pr.addReviewComment(masterHash, editHash, reviewFile.toString(), 2, \"Review comment\", \"https:\/\/test.test.com\/reviewComment1\");\n@@ -795,0 +800,1 @@\n+            assertTrue(archiveContains(archiveFolder.path(), \"Link: https:\/\/test.test.com\/reviewComment1\"));\n@@ -806,0 +812,1 @@\n+            assertTrue(conversations.get(0).allMessages().get(1).body().contains(\"Link: https:\/\/test.test.com\/reviewComment1\"));\n@@ -808,1 +815,1 @@\n-            pr.addReviewCommentReply(comment, \"This is a review reply\");\n+            pr.addReviewCommentReply(comment, \"This is a review reply\", \"https:\/\/test.test.com\/reviewComment2\");\n@@ -816,0 +823,1 @@\n+            assertTrue(archiveContains(archiveFolder.path(), \"Link: https:\/\/test.test.com\/reviewComment2\"));\n@@ -826,0 +834,1 @@\n+            assertTrue(conversations.get(0).allMessages().get(2).body().contains(\"Link: https:\/\/test.test.com\/reviewComment2\"));\n@@ -886,4 +895,4 @@\n-            var first = pr.addReviewComment(masterHash, editHash, reviewFile.toString(), 2, \"Review comment\");\n-            var second = pr.addReviewComment(masterHash, editHash, reviewFile.toString(), 2, \"Another review comment\");\n-            pr.addReviewComment(masterHash, editHash, reviewFile.toString(), 2, \"Further review comment\");\n-            pr.addReviewComment(masterHash, editHash, reviewFile.toString(), 2, \"Final review comment\");\n+            var first = pr.addReviewComment(masterHash, editHash, reviewFile.toString(), 2, \"Review comment\", \"https:\/\/test.test.com\/reviewComment1\");\n+            var second = pr.addReviewComment(masterHash, editHash, reviewFile.toString(), 2, \"Another review comment\", \"https:\/\/test.test.com\/reviewComment2\");\n+            pr.addReviewComment(masterHash, editHash, reviewFile.toString(), 2, \"Further review comment\", \"https:\/\/test.test.com\/reviewComment3\");\n+            pr.addReviewComment(masterHash, editHash, reviewFile.toString(), 2, \"Final review comment\", \"https:\/\/test.test.com\/reviewComment4\");\n@@ -914,2 +923,4 @@\n-            assertTrue(reviewReply.body().contains(\"Review comment\\n\\n\"), reviewReply.body());\n-            assertTrue(reviewReply.body().contains(\"Another review comment\"), reviewReply.body());\n+            assertTrue(reviewReply.body().contains(\"Review comment\\nLink: https:\/\/test.test.com\/reviewComment1\\n\\n\"), reviewReply.body());\n+            assertTrue(reviewReply.body().contains(\"Another review comment\\nLink: https:\/\/test.test.com\/reviewComment2\\n\\n\"), reviewReply.body());\n+            assertTrue(reviewReply.body().contains(\"Link: https:\/\/test.test.com\/reviewComment3\"), reviewReply.body());\n+            assertTrue(reviewReply.body().contains(\"Link: https:\/\/test.test.com\/reviewComment4\"), reviewReply.body());\n@@ -2273,2 +2284,2 @@\n-            var reviewedPr = reviewer.pullRequest(pr.id());\n-            reviewedPr.addReview(Review.Verdict.DISAPPROVED, \"Reason 1\");\n+            var reviewedPr = (TestPullRequest)reviewer.pullRequest(pr.id());\n+            reviewedPr.addReview(Review.Verdict.DISAPPROVED, \"Reason 1\", \"https:\/\/test.test.com\/review1\");\n@@ -2284,0 +2295,1 @@\n+            assertEquals(1, archiveContainsCount(archiveFolder.path(), \"Link: https:\/\/test.test.com\/review1\"));\n@@ -2286,1 +2298,1 @@\n-            reviewedPr.addReview(Review.Verdict.APPROVED, \"Reason 2\");\n+            reviewedPr.addReview(Review.Verdict.APPROVED, \"Reason 2\", \"https:\/\/test.test.com\/review2\");\n@@ -2296,0 +2308,10 @@\n+            assertEquals(1, archiveContainsCount(archiveFolder.path(), \"Link: https:\/\/test.test.com\/review2\"));\n+\n+            listServer.processIncoming();\n+            listServer.processIncoming();\n+            listServer.processIncoming();\n+            var mailmanServer = MailingListServerFactory.createMailmanServer(listServer.getArchive(), listServer.getSMTP(), Duration.ZERO);\n+            var mailmanList = mailmanServer.getListReader(listAddress.address());\n+            var conversations = mailmanList.conversations(Duration.ofDays(1));\n+            assertTrue(conversations.get(0).allMessages().get(1).body().contains(\"Reason 1\\nLink: https:\/\/test.test.com\/review1\"));\n+            assertTrue(conversations.get(0).allMessages().get(2).body().contains(\"Reason 2\\nLink: https:\/\/test.test.com\/review2\"));\n","filename":"bots\/mlbridge\/src\/test\/java\/org\/openjdk\/skara\/bots\/mlbridge\/MailingListBridgeBotTests.java","additions":36,"deletions":14,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+    private final Optional<String> htmlUrl;\n@@ -50,0 +51,13 @@\n+        this.htmlUrl = Optional.empty();\n+    }\n+\n+    public Review(ZonedDateTime createdAt, HostUser reviewer, Verdict verdict, Hash hash, int id, String body,\n+                  String targetRef, String htmlUrl) {\n+        this.createdAt = createdAt;\n+        this.reviewer = reviewer;\n+        this.verdict = verdict;\n+        this.hash = hash;\n+        this.id = id;\n+        this.body = body;\n+        this.targetRef = targetRef;\n+        this.htmlUrl = Optional.of(htmlUrl);\n@@ -88,0 +102,4 @@\n+    public Optional<String> htmlUrl() {\n+        return htmlUrl;\n+    }\n+\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/Review.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -49,0 +49,10 @@\n+    public ReviewComment(ReviewComment parent, String threadId, Hash hash, String path, int line, String id, String body, HostUser author, ZonedDateTime createdAt, ZonedDateTime updatedAt, String htmlUrl) {\n+        super(id, body, author, createdAt, updatedAt, htmlUrl);\n+\n+        this.parent = parent;\n+        this.threadId = threadId;\n+        this.hash = hash;\n+        this.path = path;\n+        this.line = line;\n+    }\n+\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/ReviewComment.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -112,1 +112,2 @@\n-                                 return new Review(createdAt, reviewer, verdict, hash, id, body, currentTargetRef);\n+                                 var htmlUrl = obj.get(\"html_url\").asString();\n+                                 return new Review(createdAt, reviewer, verdict, hash, id, body, currentTargetRef, htmlUrl);\n@@ -233,1 +234,2 @@\n-                                        ZonedDateTime.parse(reviewJson.get(\"updated_at\").asString()));\n+                                        ZonedDateTime.parse(reviewJson.get(\"updated_at\").asString()),\n+                                        reviewJson.get(\"html_url\").asString());\n@@ -345,1 +347,2 @@\n-                              ZonedDateTime.parse(comment.get(\"updated_at\").asString()));\n+                              ZonedDateTime.parse(comment.get(\"updated_at\").asString()),\n+                              comment.get(\"html_url\").asString());\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubPullRequest.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -140,1 +140,2 @@\n-                                   return new Review(createdAt, reviewer, verdict, hash, id, \"\", currentTargetRef);\n+                                   return new Review(createdAt, reviewer, verdict, hash, id, \"\", currentTargetRef,\n+                                           generateHtmlUrl(obj));\n@@ -146,0 +147,4 @@\n+    private String generateHtmlUrl(JSONValue note) {\n+        return json.get(\"web_url\").asString() + \"#note_\" + note.get(\"id\").toString();\n+    }\n+\n@@ -244,1 +249,3 @@\n-                                        ZonedDateTime.parse(note.get(\"updated_at\").asString()));\n+                                        ZonedDateTime.parse(note.get(\"updated_at\").asString()),\n+                                        generateHtmlUrl(note)\n+                                 );\n@@ -379,1 +386,2 @@\n-                              ZonedDateTime.parse(comment.get(\"updated_at\").asString()));\n+                              ZonedDateTime.parse(comment.get(\"updated_at\").asString()),\n+                              generateHtmlUrl(comment));\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabMergeRequest.java","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -234,0 +234,20 @@\n+\n+    @Test\n+    void testHtmlUrl() {\n+        var githubRepoOpt = githubHost.repository(\"openjdk\/playground\");\n+        assumeTrue(githubRepoOpt.isPresent());\n+        var githubRepo = githubRepoOpt.get();\n+        var pr = githubRepo.pullRequest(\"129\");\n+\n+        var labelComment = pr.comments().stream()\n+                .filter(comment -> comment.body().contains(\"The following label will be automatically applied to this pull request:\"))\n+                .findFirst()\n+                .get();\n+        assertEquals(\"https:\/\/github.com\/openjdk\/playground\/pull\/129#issuecomment-1426703897\", labelComment.htmlUrl().get());\n+\n+        var reviewComment = pr.reviewComments().get(0);\n+        assertEquals(\"https:\/\/github.com\/openjdk\/playground\/pull\/129#discussion_r1108931186\", reviewComment.htmlUrl().get());\n+\n+        var review = pr.reviews().get(0);\n+        assertEquals(\"https:\/\/github.com\/openjdk\/playground\/pull\/129#pullrequestreview-1302142525\", review.htmlUrl().get());\n+    }\n","filename":"forge\/src\/test\/java\/org\/openjdk\/skara\/forge\/github\/GitHubRestApiTests.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+\n@@ -257,0 +258,21 @@\n+\n+    @Test\n+    void testHtmlUrl() throws IOException {\n+        var settings = ManualTestSettings.loadManualTestSettings();\n+        var username = settings.getProperty(\"gitlab.user\");\n+        var token = settings.getProperty(\"gitlab.pat\");\n+        var credential = new Credential(username, token);\n+        var uri = URIBuilder.base(settings.getProperty(\"gitlab.uri\")).build();\n+        var gitLabHost = new GitLabHost(\"gitlab\", uri, false, credential, Set.of());\n+        var gitLabRepo = gitLabHost.repository(settings.getProperty(\"gitlab.repository\")).orElseThrow();\n+        var gitLabMergeRequest = gitLabRepo.pullRequest(settings.getProperty(\"gitlab.merge.request.id\"));\n+\n+        var comment = gitLabMergeRequest.comments().get(0);\n+        assertEquals(settings.getProperty(\"comment_html_url\"), comment.htmlUrl().get());\n+\n+        var reviewComment = gitLabMergeRequest.reviewComments().get(0);\n+        assertEquals(settings.getProperty(\"reviewComment_html_url\"), reviewComment.htmlUrl().get());\n+\n+        var review = gitLabMergeRequest.reviews().get(0);\n+        assertEquals(settings.getProperty(\"review_html_url\"), review.htmlUrl().get());\n+    }\n","filename":"forge\/src\/test\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabRestApiTest.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.util.Optional;\n@@ -36,0 +37,1 @@\n+    private final Optional<String> htmlUrl;\n@@ -43,0 +45,10 @@\n+        this.htmlUrl = Optional.empty();\n+    }\n+\n+    public Comment(String id, String body, HostUser author, ZonedDateTime createdAt, ZonedDateTime updatedAt, String htmlUrl) {\n+        this.id = id;\n+        this.body = body;\n+        this.author = author;\n+        this.createdAt = createdAt;\n+        this.updatedAt = updatedAt;\n+        this.htmlUrl = Optional.of(htmlUrl);\n@@ -65,0 +77,4 @@\n+    public Optional<String> htmlUrl() {\n+        return htmlUrl;\n+    }\n+\n","filename":"issuetracker\/src\/main\/java\/org\/openjdk\/skara\/issuetracker\/Comment.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -123,0 +123,15 @@\n+    public Comment addComment(String body, String htmlUrl) {\n+        List<Comment> comments = store.comments();\n+        var size = comments.size();\n+        var lastId = size > 0 ? comments.get(size - 1).id() : null;\n+        var comment = new Comment(String.valueOf(lastId != null ? Integer.parseInt(lastId) + 1 : 0),\n+                body,\n+                user,\n+                ZonedDateTime.now(),\n+                ZonedDateTime.now(),\n+                htmlUrl);\n+        store.comments().add(comment);\n+        store.setLastUpdate(ZonedDateTime.now());\n+        return comment;\n+    }\n+\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestIssue.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -105,0 +105,15 @@\n+    public void addReview(Review.Verdict verdict, String body, String htmlUrl) {\n+        try {\n+            var review = new Review(ZonedDateTime.now(), user,\n+                    verdict, targetRepository.localRepository().resolve(store().sourceRef()).orElseThrow(),\n+                    store().reviews().size(),\n+                    body, targetRef, htmlUrl);\n+\n+            store().reviews().add(review);\n+            store().setLastUpdate(ZonedDateTime.now());\n+\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n@@ -120,0 +135,9 @@\n+    public ReviewComment addReviewComment(Hash base, Hash hash, String path, int line, String body, String htmlUrl) {\n+        var id = String.valueOf(store().reviewComments().size());\n+        var comment = new ReviewComment(null, id,\n+                hash, path, line, id, body, user, ZonedDateTime.now(), ZonedDateTime.now(), htmlUrl);\n+        store().reviewComments().add(comment);\n+        store().setLastUpdate(ZonedDateTime.now());\n+        return comment;\n+    }\n+\n@@ -133,0 +157,12 @@\n+    public ReviewComment addReviewCommentReply(ReviewComment parent, String body, String htmlUrl) {\n+        if (parent.parent().isPresent()) {\n+            throw new RuntimeException(\"Can only reply to top-level review comments\");\n+        }\n+        var comment = new ReviewComment(parent, parent.threadId(), parent.hash().orElseThrow(), parent.path(),\n+                parent.line(), String.valueOf(store().reviewComments().size()), body, user,\n+                ZonedDateTime.now(), ZonedDateTime.now(), htmlUrl);\n+        store().reviewComments().add(comment);\n+        store().setLastUpdate(ZonedDateTime.now());\n+        return comment;\n+    }\n+\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestPullRequest.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"modified"}]}