{"files":[{"patch":"@@ -47,1 +47,1 @@\n-                 * `\/jep <issue-id>`\n+                 * `\/jep <jep-id>|<issue-id>`\n@@ -53,1 +53,1 @@\n-\n+                 * `\/jep 123`\n@@ -61,3 +61,2 @@\n-                The project prefix (`JDK-` in the above examples) is optional if you use an issue ID.\n-                The issue type in that case must be `JEP`.\n-                The `JEP-` or `jep-` prefix is required if you instead provide a JEP ID.\n+                The prefix (i.e. `JDK-`, `JEP-` or `jep-`) is optional. If the argument is given without prefix, \\\n+                it will be tried first as a JEP ID and second as an issue ID. The issue type must be `JEP`.\n@@ -68,3 +67,4 @@\n-        Optional<Issue> jbsIssue;\n-        if (args.startsWith(\"jep-\") || args.startsWith(\"JEP-\") || args.startsWith(\"Jep-\")) {\n-            \/\/ Handle the JEP ID\n+        Optional<Issue> jbsIssue = Optional.empty();\n+        var upperArgs = args.toUpperCase();\n+        if (upperArgs.startsWith(\"JEP-\")) {\n+            \/\/ Handle the JEP ID with `JEP` prefix\n@@ -73,2 +73,11 @@\n-            \/\/ Handle the issue ID\n-            jbsIssue = bot.issueProject().issue(args);\n+            if (!upperArgs.startsWith(bot.issueProject().name().toUpperCase())) {\n+                \/\/ Handle the raw JEP ID without `JEP` prefix and project prefix. If the JEP has the same ID\n+                \/\/ as any issue, the bot firstly parse the ID as JEP instead of general issue.\n+                \/\/ For example, if we have a `JEP-12345` (its issue ID is not `JDK-12345`) and an issue `JDK-12345`,\n+                \/\/ when typing `\/jep 12345`, the bot firstly parses it as `JEP-12345` instead of `JDK-12345`.\n+                jbsIssue = bot.issueProject().jepIssue(args);\n+            }\n+            if (jbsIssue.isEmpty()) {\n+                \/\/ Handle the issue ID\n+                jbsIssue = bot.issueProject().issue(args);\n+            }\n@@ -83,1 +92,1 @@\n-            reply.println(\"only the pull request author and [Reviewers](https:\/\/openjdk.java.net\/bylaws#reviewer) are allowed to use the `jep` command.\");\n+            reply.println(\"Only the pull request author and [Reviewers](https:\/\/openjdk.java.net\/bylaws#reviewer) are allowed to use the `jep` command.\");\n@@ -134,1 +143,1 @@\n-            reply.println(\"the JEP for this pull request, [JEP-\" + jepNumber + \"](\" + jbsIssue.webUrl() + \"), has already been targeted.\");\n+            reply.println(\"The JEP for this pull request, [JEP-\" + jepNumber + \"](\" + jbsIssue.webUrl() + \"), has already been targeted.\");\n@@ -140,1 +149,1 @@\n-            reply.println(\"this pull request will not be integrated until the [JEP-\" + jepNumber\n+            reply.println(\"This pull request will not be integrated until the [JEP-\" + jepNumber\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/JEPCommand.java","additions":22,"deletions":13,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-            assertLastCommentContains(pr, \"this pull request will not be integrated until the [JEP-\");\n+            assertLastCommentContains(pr, \"This pull request will not be integrated until the [JEP-\");\n@@ -105,1 +105,1 @@\n-            assertLastCommentContains(pr, \"this pull request will not be integrated until the [JEP-\");\n+            assertLastCommentContains(pr, \"This pull request will not be integrated until the [JEP-\");\n@@ -124,1 +124,20 @@\n-            assertLastCommentContains(pr, \"this pull request will not be integrated until the [JEP-\");\n+            assertLastCommentContains(pr, \"This pull request will not be integrated until the [JEP-\");\n+            assertLastCommentContains(pr, \"has been targeted.\");\n+            assertTrue(pr.body().contains(\"- [ ] Change requires a JEP request to be targeted\"));\n+\n+            \/\/ Not require jep\n+            prAsReviewer.addComment(\"\/jep unneeded\");\n+\n+            \/\/ Verify the behavior\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertFalse(pr.labelNames().contains(JEPCommand.JEP_LABEL));\n+            assertLastCommentContains(pr, \"determined that the JEP request is not needed for this pull request.\");\n+            assertFalse(pr.body().contains(\"Change requires a JEP request to be targeted\"));\n+\n+            \/\/ Require jep with strange jep prefix\n+            pr.addComment(\"\/jep jEP-123\");\n+\n+            \/\/ Verify the behavior\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertTrue(pr.labelNames().contains(JEPCommand.JEP_LABEL));\n+            assertLastCommentContains(pr, \"This pull request will not be integrated until the [JEP-\");\n@@ -143,1 +162,1 @@\n-            assertLastCommentContains(pr, \"the JEP for this pull request, [JEP-\");\n+            assertLastCommentContains(pr, \"The JEP for this pull request, [JEP-\");\n@@ -162,1 +181,1 @@\n-            assertLastCommentContains(pr, \"the JEP for this pull request, [JEP-\");\n+            assertLastCommentContains(pr, \"The JEP for this pull request, [JEP-\");\n@@ -165,0 +184,19 @@\n+\n+            \/\/ Not require jep\n+            prAsReviewer.addComment(\"\/jep unneeded\");\n+\n+            \/\/ Verify the behavior\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertFalse(pr.labelNames().contains(JEPCommand.JEP_LABEL));\n+            assertLastCommentContains(pr, \"determined that the JEP request is not needed for this pull request.\");\n+            assertFalse(pr.body().contains(\"Change requires a JEP request to be targeted\"));\n+\n+            \/\/ Require jep with right JEP ID without prefix\n+            pr.addComment(\"\/jep 123\");\n+\n+            \/\/ Verify the behavior\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertTrue(pr.labelNames().contains(JEPCommand.JEP_LABEL));\n+            assertLastCommentContains(pr, \"This pull request will not be integrated until the [JEP-\");\n+            assertLastCommentContains(pr, \"has been targeted.\");\n+            assertTrue(pr.body().contains(\"- [ ] Change requires a JEP request to be targeted\"));\n@@ -211,1 +249,1 @@\n-            assertLastCommentContains(pr, \"only the pull request author and [Reviewers]\" +\n+            assertLastCommentContains(pr, \"Only the pull request author and [Reviewers]\" +\n@@ -220,1 +258,1 @@\n-            assertLastCommentContains(pr, \"this pull request will not be integrated until the [JEP-\");\n+            assertLastCommentContains(pr, \"This pull request will not be integrated until the [JEP-\");\n@@ -230,1 +268,1 @@\n-            assertLastCommentContains(pr, \"this pull request will not be integrated until the [JEP-\");\n+            assertLastCommentContains(pr, \"This pull request will not be integrated until the [JEP-\");\n@@ -240,1 +278,1 @@\n-            assertLastCommentContains(pr, \"only the pull request author and [Reviewers]\" +\n+            assertLastCommentContains(pr, \"Only the pull request author and [Reviewers]\" +\n@@ -295,0 +333,3 @@\n+            \/\/ Test the symbol `\\` of the text block\n+            assertLastCommentContains(pr, \"The prefix (i.e. `JDK-`, `JEP-` or `jep-`) is optional. If the argument is given without prefix, \"\n+                    + \"it will be tried first as a JEP ID and second as an issue ID. The issue type must be `JEP`.\");\n@@ -306,0 +347,3 @@\n+            \/\/ Test the symbol `\\` of the text block\n+            assertLastCommentContains(pr, \"The prefix (i.e. `JDK-`, `JEP-` or `jep-`) is optional. If the argument is given without prefix, \"\n+                    + \"it will be tried first as a JEP ID and second as an issue ID. The issue type must be `JEP`.\");\n@@ -318,2 +362,2 @@\n-            \/\/ Require jep with wrong jep prefix\n-            pr.addComment(\"\/jep jEP-123\");\n+            \/\/ Require jep with wrong jep id without prefix\n+            pr.addComment(\"\/jep 1\");\n@@ -325,1 +369,1 @@\n-            assertLastCommentContains(pr, \"The JEP issue was not found. Please make sure you have entered it correctly.\");\n+            assertLastCommentContains(pr, \"The issue `TEST-1` is not a JEP. Please make sure you have entered it correctly.\");\n@@ -357,10 +401,0 @@\n-\n-            \/\/ Require jep with wrong issue type\n-            pr.addComment(\"\/jep 1\");\n-\n-            \/\/ Verify the behavior\n-            TestBotRunner.runPeriodicItems(prBot);\n-            assertFalse(pr.labelNames().contains(JEPCommand.JEP_LABEL));\n-            assertEquals(17, pr.comments().size());\n-            assertLastCommentContains(pr, \"The issue `TEST-1` is not a JEP. Please make sure you have entered it correctly.\");\n-            assertFalse(pr.body().contains(\"Change requires a JEP request to be targeted\"));\n@@ -414,1 +448,1 @@\n-                assertLastCommentContains(pr, \"this pull request will not be integrated until the [JEP-\");\n+                assertLastCommentContains(pr, \"This pull request will not be integrated until the [JEP-\");\n@@ -425,1 +459,1 @@\n-                assertLastCommentContains(pr, \"the JEP for this pull request, [JEP-\");\n+                assertLastCommentContains(pr, \"The JEP for this pull request, [JEP-\");\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/JEPCommandTests.java","additions":58,"deletions":24,"binary":false,"changes":82,"status":"modified"}]}