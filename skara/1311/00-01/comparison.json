{"files":[{"patch":"@@ -53,1 +53,1 @@\n-\n+                 * `\/jep 123`\n@@ -58,1 +58,0 @@\n-                 * `\/jep 123`\n@@ -62,4 +61,2 @@\n-                The prefix (`JDK-`, `JEP-` or `jep-` in the above examples) is optional.\n-                The bot firstly treats the ID without prefix as a JEP ID.\n-                If not found, the bot then treats the ID without prefix as an issue ID.\n-                The issue type in any case must be `JEP`.\n+                The prefix (i.e. `JDK-`, `JEP-` or `jep-`) is optional. If the argument is given without prefix, \\\n+                it will be tried first as a JEP ID and second as an issue ID. The issue type must be `JEP`.\n@@ -99,1 +96,1 @@\n-            reply.println(\"only the pull request author and [Reviewers](https:\/\/openjdk.java.net\/bylaws#reviewer) are allowed to use the `jep` command.\");\n+            reply.println(\"Only the pull request author and [Reviewers](https:\/\/openjdk.java.net\/bylaws#reviewer) are allowed to use the `jep` command.\");\n@@ -150,1 +147,1 @@\n-            reply.println(\"the JEP for this pull request, [JEP-\" + jepNumber + \"](\" + jbsIssue.webUrl() + \"), has already been targeted.\");\n+            reply.println(\"The JEP for this pull request, [JEP-\" + jepNumber + \"](\" + jbsIssue.webUrl() + \"), has already been targeted.\");\n@@ -156,1 +153,1 @@\n-            reply.println(\"this pull request will not be integrated until the [JEP-\" + jepNumber\n+            reply.println(\"This pull request will not be integrated until the [JEP-\" + jepNumber\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/JEPCommand.java","additions":6,"deletions":9,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-            assertLastCommentContains(pr, \"this pull request will not be integrated until the [JEP-\");\n+            assertLastCommentContains(pr, \"This pull request will not be integrated until the [JEP-\");\n@@ -105,1 +105,1 @@\n-            assertLastCommentContains(pr, \"this pull request will not be integrated until the [JEP-\");\n+            assertLastCommentContains(pr, \"This pull request will not be integrated until the [JEP-\");\n@@ -124,1 +124,1 @@\n-            assertLastCommentContains(pr, \"this pull request will not be integrated until the [JEP-\");\n+            assertLastCommentContains(pr, \"This pull request will not be integrated until the [JEP-\");\n@@ -143,1 +143,1 @@\n-            assertLastCommentContains(pr, \"this pull request will not be integrated until the [JEP-\");\n+            assertLastCommentContains(pr, \"This pull request will not be integrated until the [JEP-\");\n@@ -162,1 +162,1 @@\n-            assertLastCommentContains(pr, \"the JEP for this pull request, [JEP-\");\n+            assertLastCommentContains(pr, \"The JEP for this pull request, [JEP-\");\n@@ -183,1 +183,1 @@\n-            assertLastCommentContains(pr, \"the JEP for this pull request, [JEP-\");\n+            assertLastCommentContains(pr, \"The JEP for this pull request, [JEP-\");\n@@ -202,1 +202,1 @@\n-            assertLastCommentContains(pr, \"this pull request will not be integrated until the [JEP-\");\n+            assertLastCommentContains(pr, \"This pull request will not be integrated until the [JEP-\");\n@@ -251,1 +251,1 @@\n-            assertLastCommentContains(pr, \"only the pull request author and [Reviewers]\" +\n+            assertLastCommentContains(pr, \"Only the pull request author and [Reviewers]\" +\n@@ -260,1 +260,1 @@\n-            assertLastCommentContains(pr, \"this pull request will not be integrated until the [JEP-\");\n+            assertLastCommentContains(pr, \"This pull request will not be integrated until the [JEP-\");\n@@ -270,1 +270,1 @@\n-            assertLastCommentContains(pr, \"this pull request will not be integrated until the [JEP-\");\n+            assertLastCommentContains(pr, \"This pull request will not be integrated until the [JEP-\");\n@@ -280,1 +280,1 @@\n-            assertLastCommentContains(pr, \"only the pull request author and [Reviewers]\" +\n+            assertLastCommentContains(pr, \"Only the pull request author and [Reviewers]\" +\n@@ -335,0 +335,3 @@\n+            \/\/ Test the symbol `\\` of the text block\n+            assertLastCommentContains(pr, \"The prefix (i.e. `JDK-`, `JEP-` or `jep-`) is optional. If the argument is given without prefix, \"\n+                    + \"it will be tried first as a JEP ID and second as an issue ID. The issue type must be `JEP`.\");\n@@ -346,0 +349,3 @@\n+            \/\/ Test the symbol `\\` of the text block\n+            assertLastCommentContains(pr, \"The prefix (i.e. `JDK-`, `JEP-` or `jep-`) is optional. If the argument is given without prefix, \"\n+                    + \"it will be tried first as a JEP ID and second as an issue ID. The issue type must be `JEP`.\");\n@@ -446,1 +452,1 @@\n-                assertLastCommentContains(pr, \"this pull request will not be integrated until the [JEP-\");\n+                assertLastCommentContains(pr, \"This pull request will not be integrated until the [JEP-\");\n@@ -457,1 +463,1 @@\n-                assertLastCommentContains(pr, \"the JEP for this pull request, [JEP-\");\n+                assertLastCommentContains(pr, \"The JEP for this pull request, [JEP-\");\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/JEPCommandTests.java","additions":19,"deletions":13,"binary":false,"changes":32,"status":"modified"}]}