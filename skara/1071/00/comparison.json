{"files":[{"patch":"@@ -313,0 +313,4 @@\n+        if (pr.labels().contains(\"auto\") && pr.labels().contains(\"ready\") && !pr.labels().contains(\"sponsor\")) {\n+            pr.addComment(\"\/integrate\\n\" + PullRequestCommandWorkItem.VALID_BOT_COMMAND_MARKER);\n+        }\n+\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckWorkItem.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -43,0 +43,4 @@\n+    private void showHelp(PrintWriter reply) {\n+        reply.println(\"usage: `\/integrate [auto|manual|<hash>]`\");\n+    }\n+\n@@ -63,1 +67,1 @@\n-        if (!command.user().equals(pr.author())) {\n+        if (!command.user().equals(pr.author()) && !command.user().equals(pr.repository().forge().currentUser())) {\n@@ -78,0 +82,30 @@\n+        Hash targetHash = null;\n+        if (!command.args().isEmpty()) {\n+            var args = command.args().split(\" \");\n+            if (args.length != 1) {\n+                showHelp(reply);\n+                return;\n+            }\n+\n+            var arg = args[0].trim();\n+            if (arg.equals(\"auto\")) {\n+                pr.addLabel(\"auto\");\n+                reply.println(\"This pull request will be automatically integrated when it is ready\");\n+                return;\n+            } else if (arg.equals(\"manual\")) {\n+                if (pr.labels().contains(\"auto\")) {\n+                    pr.removeLabel(\"auto\");\n+                }\n+                reply.println(\"This pull request will have to be integrated manually using the \"+\n+                              \"[\/integrate](https:\/\/wiki.openjdk.java.net\/display\/SKARA\/Pull+Request+Commands#PullRequestCommands-\/integrate) pull request command.\");\n+                return;\n+            } else {\n+                \/\/ Validate the target hash if requested\n+                targetHash = new Hash(arg);\n+                if (!targetHash.isValid()) {\n+                    reply.println(\"The given argument, `\" + arg + \"`, is not a valid hash.\");\n+                    return;\n+                }\n+            }\n+        }\n+\n@@ -112,10 +146,5 @@\n-            \/\/ Validate the target hash if requested\n-            var rebaseMessage = new StringWriter();\n-            if (!command.args().isBlank()) {\n-                var wantedHash = new Hash(command.args());\n-                if (!PullRequestUtils.targetHash(pr, localRepo).equals(wantedHash)) {\n-                    reply.print(\"The head of the target branch is no longer at the requested hash \" + wantedHash);\n-                    reply.println(\" - it has moved to \" + PullRequestUtils.targetHash(pr, localRepo) + \". Aborting integration.\");\n-                    return;\n-                }\n-            };\n+            if (targetHash != null && !PullRequestUtils.targetHash(pr, localRepo).equals(targetHash)) {\n+                reply.print(\"The head of the target branch is no longer at the requested hash \" + targetHash);\n+                reply.println(\" - it has moved to \" + PullRequestUtils.targetHash(pr, localRepo) + \". Aborting integration.\");\n+                return;\n+            }\n@@ -124,0 +153,1 @@\n+            var rebaseMessage = new StringWriter();\n@@ -204,0 +234,5 @@\n+\n+    @Override\n+    public boolean allowedInBody() {\n+        return true;\n+    }\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/IntegrateCommand.java","additions":46,"deletions":11,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n-    private static final String selfCommandMarker = \"<!-- Valid self-command -->\";\n@@ -62,0 +61,2 @@\n+    public static final String VALID_BOT_COMMAND_MARKER = \"<!-- Valid self-command -->\";\n+\n@@ -119,1 +120,1 @@\n-                                                .filter(comment -> !comment.author().equals(self) || comment.body().endsWith(selfCommandMarker))\n+                                                .filter(comment -> !comment.author().equals(self) || comment.body().endsWith(VALID_BOT_COMMAND_MARKER))\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestCommandWorkItem.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-import java.util.Set;\n+import java.util.*;\n@@ -825,0 +825,276 @@\n+\n+    @Test\n+    void invalidHash(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory();\n+             var pushedFolder = new TemporaryDirectory()) {\n+\n+            var author = credentials.getHostedRepository();\n+            var integrator = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var censusBuilder = credentials.getCensusBuilder()\n+                                           .addCommitter(author.forge().currentUser().id())\n+                                           .addReviewer(integrator.forge().currentUser().id())\n+                                           .addReviewer(reviewer.forge().currentUser().id());\n+            var mergeBot = PullRequestBot.newBuilder().repo(integrator).censusRepo(censusBuilder.build()).build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"refs\/heads\/edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"This is a pull request\");\n+\n+            \/\/ Approve it as another user\n+            var approvalPr = integrator.pullRequest(pr.id());\n+            approvalPr.addReview(Review.Verdict.APPROVED, \"Approved\");\n+\n+            \/\/ The bot should reply with integration message\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+            var integrateComments = pr.comments()\n+                                      .stream()\n+                                      .filter(c -> c.body().contains(\"To integrate this PR with the above commit message to the `master` branch\"))\n+                                      .filter(c -> c.body().contains(\"If you prefer to avoid any potential automatic rebasing\"))\n+                                      .count();\n+            assertEquals(1, integrateComments);\n+\n+            \/\/ Attempt a merge (the bot should only process the first one)\n+            pr.addComment(\"\/integrate a3987asdf\");\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+\n+            \/\/ The bot should reply with an error message\n+            var pushed = pr.comments().stream()\n+                           .filter(comment -> comment.body().contains(\"is not a valid hash\"))\n+                           .count();\n+            assertEquals(1, pushed);\n+\n+            \/\/ Ready label should remain\n+            assertTrue(pr.labels().contains(\"ready\"));\n+        }\n+    }\n+\n+    @Test\n+    void integrateAutoInBody(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory();\n+             var pushedFolder = new TemporaryDirectory()) {\n+\n+            var author = credentials.getHostedRepository();\n+            var integrator = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var censusBuilder = credentials.getCensusBuilder()\n+                                           .addCommitter(author.forge().currentUser().id())\n+                                           .addReviewer(integrator.forge().currentUser().id())\n+                                           .addReviewer(reviewer.forge().currentUser().id());\n+            var mergeBot = PullRequestBot.newBuilder().repo(integrator).censusRepo(censusBuilder.build()).build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR with auto integration\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"refs\/heads\/edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"PR Title\", List.of(\"\/integrate auto\"));\n+\n+            \/\/ The bot should add the auto label and reply\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+            var integrateComments = pr.comments()\n+                                      .stream()\n+                                      .filter(c -> c.body().contains(\"This pull request will be automatically integrated\"))\n+                                      .count();\n+            assertEquals(1, integrateComments);\n+            assertTrue(pr.labels().contains(\"auto\"));\n+\n+            \/\/ Approve it as another user\n+            var approvalPr = integrator.pullRequest(pr.id());\n+            approvalPr.addReview(Review.Verdict.APPROVED, \"Approved\");\n+\n+            \/\/ The bot should post the \/integrate command and push\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+            var pushed = pr.comments().stream()\n+                           .filter(comment -> comment.body().contains(\"Pushed as commit\"))\n+                           .count();\n+            assertEquals(1, pushed);\n+\n+            \/\/ The change should now be present on the master branch\n+            var pushedRepo = Repository.materialize(pushedFolder.path(), author.url(), \"master\");\n+            assertTrue(CheckableRepository.hasBeenEdited(pushedRepo));\n+\n+            var headHash = pushedRepo.resolve(\"HEAD\").orElseThrow();\n+            var headCommit = pushedRepo.commits(headHash.hex() + \"^..\" + headHash.hex()).asList().get(0);\n+\n+            \/\/ Author and committer should be the same\n+            assertEquals(\"Generated Committer 1\", headCommit.author().name());\n+            assertEquals(\"integrationcommitter1@openjdk.java.net\", headCommit.author().email());\n+            assertEquals(\"Generated Committer 1\", headCommit.committer().name());\n+            assertEquals(\"integrationcommitter1@openjdk.java.net\", headCommit.committer().email());\n+            assertTrue(pr.labels().contains(\"integrated\"));\n+\n+            \/\/ Ready label should have been removed\n+            assertFalse(pr.labels().contains(\"ready\"));\n+        }\n+    }\n+\n+    @Test\n+    void integrateAutoInComment(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory();\n+             var pushedFolder = new TemporaryDirectory()) {\n+\n+            var author = credentials.getHostedRepository();\n+            var integrator = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var censusBuilder = credentials.getCensusBuilder()\n+                                           .addCommitter(author.forge().currentUser().id())\n+                                           .addReviewer(integrator.forge().currentUser().id())\n+                                           .addReviewer(reviewer.forge().currentUser().id());\n+            var mergeBot = PullRequestBot.newBuilder().repo(integrator).censusRepo(censusBuilder.build()).build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR with auto integration\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"refs\/heads\/edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"PR Title\");\n+\n+            \/\/ The bot should add the auto label and reply\n+            pr.addComment(\"\/integrate auto\");\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+            var integrateComments = pr.comments()\n+                                      .stream()\n+                                      .filter(c -> c.body().contains(\"This pull request will be automatically integrated\"))\n+                                      .count();\n+            assertEquals(1, integrateComments);\n+            assertTrue(pr.labels().contains(\"auto\"));\n+\n+            \/\/ Approve it as another user\n+            var approvalPr = integrator.pullRequest(pr.id());\n+            approvalPr.addReview(Review.Verdict.APPROVED, \"Approved\");\n+\n+            \/\/ The bot should post the \/integrate command and push\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+            var pushed = pr.comments().stream()\n+                           .filter(comment -> comment.body().contains(\"Pushed as commit\"))\n+                           .count();\n+            assertEquals(1, pushed);\n+\n+            \/\/ The change should now be present on the master branch\n+            var pushedRepo = Repository.materialize(pushedFolder.path(), author.url(), \"master\");\n+            assertTrue(CheckableRepository.hasBeenEdited(pushedRepo));\n+\n+            var headHash = pushedRepo.resolve(\"HEAD\").orElseThrow();\n+            var headCommit = pushedRepo.commits(headHash.hex() + \"^..\" + headHash.hex()).asList().get(0);\n+\n+            \/\/ Author and committer should be the same\n+            assertEquals(\"Generated Committer 1\", headCommit.author().name());\n+            assertEquals(\"integrationcommitter1@openjdk.java.net\", headCommit.author().email());\n+            assertEquals(\"Generated Committer 1\", headCommit.committer().name());\n+            assertEquals(\"integrationcommitter1@openjdk.java.net\", headCommit.committer().email());\n+            assertTrue(pr.labels().contains(\"integrated\"));\n+\n+            \/\/ Ready label should have been removed\n+            assertFalse(pr.labels().contains(\"ready\"));\n+        }\n+    }\n+\n+    @Test\n+    void manualIntegration(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory();\n+             var pushedFolder = new TemporaryDirectory()) {\n+\n+            var author = credentials.getHostedRepository();\n+            var integrator = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var censusBuilder = credentials.getCensusBuilder()\n+                                           .addCommitter(author.forge().currentUser().id())\n+                                           .addReviewer(integrator.forge().currentUser().id())\n+                                           .addReviewer(reviewer.forge().currentUser().id());\n+            var mergeBot = PullRequestBot.newBuilder().repo(integrator).censusRepo(censusBuilder.build()).build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR with auto integration\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"refs\/heads\/edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"PR Title\", List.of(\"\/integrate auto\"));\n+\n+            \/\/ The bot should add the auto label and reply\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+            var integrateComments = pr.comments()\n+                                      .stream()\n+                                      .filter(c -> c.body().contains(\"This pull request will be automatically integrated\"))\n+                                      .count();\n+            assertEquals(1, integrateComments);\n+            assertTrue(pr.labels().contains(\"auto\"));\n+\n+            \/\/ Make a comment to integrate manually\n+            pr.addComment(\"\/integrate manual\");\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+\n+            \/\/ The bot should reply with that the PR will have to be manually integrated\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+            var replies = pr.comments().stream()\n+                           .filter(comment -> comment.body().contains(\"This pull request will have to be integrated manually\"))\n+                           .count();\n+            assertEquals(1, replies);\n+\n+            \/\/ The \"auto\" label should have been removed\n+            assertFalse(pr.labels().contains(\"auto\"));\n+\n+            \/\/ Approve it as another user\n+            var approvalPr = integrator.pullRequest(pr.id());\n+            approvalPr.addReview(Review.Verdict.APPROVED, \"Approved\");\n+\n+            \/\/ The bot should reply with integration message\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+            integrateComments = pr.comments()\n+                                  .stream()\n+                                  .filter(c -> c.body().contains(\"To integrate this PR with the above commit message to the `master` branch\"))\n+                                  .filter(c -> c.body().contains(\"If you prefer to avoid any potential automatic rebasing\"))\n+                                  .count();\n+            assertEquals(1, integrateComments);\n+\n+            \/\/ Issue the \/integrate command\n+            pr.addComment(\"\/integrate\");\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+\n+            \/\/ The bot should reply with an ok message\n+            var pushed = pr.comments().stream()\n+                           .filter(comment -> comment.body().contains(\"Pushed as commit\"))\n+                           .count();\n+            assertEquals(1, pushed);\n+\n+            \/\/ The change should now be present on the master branch\n+            var pushedRepo = Repository.materialize(pushedFolder.path(), author.url(), \"master\");\n+            assertTrue(CheckableRepository.hasBeenEdited(pushedRepo));\n+\n+            var headHash = pushedRepo.resolve(\"HEAD\").orElseThrow();\n+            var headCommit = pushedRepo.commits(headHash.hex() + \"^..\" + headHash.hex()).asList().get(0);\n+\n+            \/\/ Author and committer should be the same\n+            assertEquals(\"Generated Committer 1\", headCommit.author().name());\n+            assertEquals(\"integrationcommitter1@openjdk.java.net\", headCommit.author().email());\n+            assertEquals(\"Generated Committer 1\", headCommit.committer().name());\n+            assertEquals(\"integrationcommitter1@openjdk.java.net\", headCommit.committer().email());\n+            assertTrue(pr.labels().contains(\"integrated\"));\n+\n+            \/\/ Ready label should have been removed\n+            assertFalse(pr.labels().contains(\"ready\"));\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/IntegrateTests.java","additions":277,"deletions":1,"binary":false,"changes":278,"status":"modified"},{"patch":"@@ -706,0 +706,63 @@\n+\n+    @Test\n+    void sponsorAutoIntegration(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var integrator = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                                           .addReviewer(reviewer.forge().currentUser().id());\n+            var mergeBot = PullRequestBot.newBuilder().repo(integrator).censusRepo(censusBuilder.build()).build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var authorFullName = author.forge().currentUser().fullName();\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, \"This is a new line\", \"Append commit\", authorFullName, \"ta@none.none\");\n+            localRepo.push(editHash, author.url(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"This is a pull request\");\n+\n+            \/\/ Flag it as ready for integration automatically\n+            pr.addComment(\"\/integrate auto\");\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+\n+            \/\/ Bot should have replied\n+            var replies = pr.comments().stream()\n+                          .filter(comment -> comment.body().contains(\"will be automatically integrated\"))\n+                          .count();\n+            assertEquals(1, replies);\n+\n+            \/\/ Approve it as another user\n+            var approvalPr = reviewer.pullRequest(pr.id());\n+            approvalPr.addReview(Review.Verdict.APPROVED, \"Approved\");\n+\n+            \/\/ Let the bot see it\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+\n+            \/\/ Bot should have marked the PR as ready for sponsor\n+            var ready = pr.comments().stream()\n+                          .filter(comment -> comment.body().contains(\"now ready to be sponsored\"))\n+                          .filter(comment -> comment.body().contains(\"at version \" + editHash.hex()))\n+                          .count();\n+            assertEquals(1, ready);\n+            assertTrue(pr.labels().contains(\"sponsor\"));\n+\n+            \/\/ Reviewer now sponsor\n+            var reviewerPr = reviewer.pullRequest(pr.id());\n+            reviewerPr.addComment(\"\/sponsor\");\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+\n+            \/\/ The bot should have pushed the commit\n+            var pushed = pr.comments().stream()\n+                           .filter(comment -> comment.body().contains(\"Pushed as commit\"))\n+                           .count();\n+            assertEquals(1, pushed);\n+        }\n+    }\n+\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/SponsorTests.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -67,0 +67,4 @@\n+\n+    public boolean isValid() {\n+        return hex.toLowerCase().matches(\"[a-f0-9]{40}\");\n+    }\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/Hash.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"}]}