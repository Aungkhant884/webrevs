{"files":[{"patch":"@@ -1,58 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.skara.bots.pr;\n-\n-import org.openjdk.skara.forge.PullRequest;\n-import org.openjdk.skara.issuetracker.Comment;\n-\n-import java.io.PrintWriter;\n-import java.nio.file.Path;\n-import java.util.List;\n-\n-public class AllowCommand implements CommandHandler {\n-    @Override\n-    public void handle(PullRequestBot bot, PullRequest pr, CensusInstance censusInstance, Path scratchPath, CommandInvocation command, List<Comment> allComments, PrintWriter reply) {\n-        var botUser = pr.repository().forge().currentUser();\n-        var vetoers = Veto.vetoers(botUser, allComments);\n-\n-        if (!vetoers.contains(command.user().id())) {\n-            reply.println(\"You have not rejected this change\");\n-            return;\n-        }\n-\n-        reply.print(\"You have removed your rejection from this change. \");\n-        if (vetoers.size() == 1) {\n-            reply.println(\"It is now allowed to be integrated again!\");\n-            pr.removeLabel(\"rejected\");\n-        } else {\n-            reply.println(\"However, it still remains blocked by other rejections.\");\n-        }\n-\n-        reply.println(Veto.removeVeto(command.user()));\n-    }\n-\n-    @Override\n-    public String description() {\n-        return \"flag a PR as allowed to be integrated\";\n-    }\n-}\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/AllowCommand.java","additions":0,"deletions":58,"binary":false,"changes":58,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-import org.openjdk.skara.forge.HostedCommit;\n@@ -28,2 +27,0 @@\n-import org.openjdk.skara.vcs.*;\n-import org.openjdk.skara.vcs.openjdk.CommitMessageParsers;\n@@ -32,2 +29,0 @@\n-import java.io.IOException;\n-import java.io.UncheckedIOException;\n@@ -35,1 +30,0 @@\n-import java.util.ArrayList;\n@@ -37,2 +31,0 @@\n-import java.util.stream.Collectors;\n-import java.time.format.DateTimeFormatter;\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CleanCommand.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-import org.openjdk.skara.forge.HostedCommit;\n@@ -29,2 +28,0 @@\n-import org.openjdk.skara.vcs.*;\n-import org.openjdk.skara.vcs.openjdk.CommitMessageParsers;\n@@ -33,2 +30,0 @@\n-import java.io.IOException;\n-import java.io.UncheckedIOException;\n@@ -36,1 +31,0 @@\n-import java.util.ArrayList;\n@@ -38,2 +32,0 @@\n-import java.util.stream.Collectors;\n-import java.time.format.DateTimeFormatter;\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/OpenCommand.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1,69 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.skara.bots.pr;\n-\n-import org.openjdk.skara.forge.PullRequest;\n-import org.openjdk.skara.issuetracker.Comment;\n-\n-import java.io.PrintWriter;\n-import java.nio.file.Path;\n-import java.util.List;\n-\n-public class RejectCommand implements CommandHandler {\n-    @Override\n-    public void handle(PullRequestBot bot, PullRequest pr, CensusInstance censusInstance, Path scratchPath, CommandInvocation command, List<Comment> allComments, PrintWriter reply) {\n-        if (pr.author().equals(command.user())) {\n-            reply.println(\"You can't reject your own changes.\");\n-            return;\n-        }\n-        if (!censusInstance.isReviewer(command.user())) {\n-            reply.println(\"Only [Reviewers](https:\/\/openjdk.java.net\/bylaws#reviewer) are allowed to reject changes.\");\n-            return;\n-        }\n-\n-        var botUser = pr.repository().forge().currentUser();\n-        var vetoers = Veto.vetoers(botUser, allComments);\n-\n-        if (vetoers.contains(command.user().id())) {\n-            reply.println(\"You have already rejected this change.\");\n-            return;\n-        }\n-\n-        \/\/ Notify the author as well\n-        reply.print(\"@\" + pr.author().username() + \" \");\n-\n-        reply.println(\"This change cannot be integrated while the rejection is in place. To lift the rejection, \");\n-        reply.println(\"issue an allow command: `\/allow`\");\n-\n-        reply.println(Veto.addVeto(command.user()));\n-\n-        if (vetoers.isEmpty()) {\n-            pr.addLabel(\"rejected\");\n-        }\n-    }\n-\n-    @Override\n-    public String description() {\n-        return \"flag the PR as not allowed to be integrated\";\n-    }\n-}\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/RejectCommand.java","additions":0,"deletions":69,"binary":false,"changes":69,"status":"deleted"},{"patch":"@@ -1,66 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.skara.bots.pr;\n-\n-import org.openjdk.skara.host.*;\n-import org.openjdk.skara.issuetracker.Comment;\n-\n-import java.util.*;\n-import java.util.regex.Pattern;\n-import java.util.stream.Collectors;\n-\n-class Veto {\n-    private final static String vetoReplyMarker = \"<!-- Veto marker (%s) -->\";\n-    private final static Pattern vetoReplyPattern = Pattern.compile(\"<!-- Veto marker \\\\((\\\\S+)\\\\) -->\");\n-    private final static String approvalReplyMarker = \"<!-- Approval marker (%s) -->\";\n-    private final static Pattern approvalReplyPattern = Pattern.compile(\"<!-- Approval marker \\\\((\\\\S+)\\\\) -->\");\n-\n-    static String addVeto(HostUser vetoer) {\n-        return String.format(vetoReplyMarker, vetoer.id());\n-    }\n-\n-    static String removeVeto(HostUser vetoer) {\n-        return String.format(approvalReplyMarker, vetoer.id());\n-    }\n-\n-    static Set<String> vetoers(HostUser botUser, List<Comment> allComments) {\n-        var vetoers = new HashSet<String>();\n-        var botComments = allComments.stream()\n-                .filter(comment -> comment.author().equals((botUser)))\n-                .collect(Collectors.toList());\n-\n-        for (var comment : botComments) {\n-            var vetoReplyMatcher = vetoReplyPattern.matcher(comment.body());\n-            if (vetoReplyMatcher.find()) {\n-                vetoers.add(vetoReplyMatcher.group(1));\n-                continue;\n-            }\n-            var approvalReplyMatcher = approvalReplyPattern.matcher(comment.body());\n-            if (approvalReplyMatcher.find()) {\n-                vetoers.remove(approvalReplyMatcher.group(1));\n-            }\n-        }\n-\n-        return vetoers;\n-    }\n-}\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/Veto.java","additions":0,"deletions":66,"binary":false,"changes":66,"status":"deleted"},{"patch":"@@ -1,289 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.skara.bots.pr;\n-\n-import org.openjdk.skara.forge.Review;\n-import org.openjdk.skara.host.*;\n-import org.openjdk.skara.issuetracker.Comment;\n-import org.openjdk.skara.test.*;\n-\n-import org.junit.jupiter.api.*;\n-\n-import java.io.IOException;\n-import java.time.ZonedDateTime;\n-import java.util.*;\n-\n-import static org.junit.jupiter.api.Assertions.*;\n-\n-class VetoTests {\n-    private static HostUser createUser(int id) {\n-        return HostUser.create(id,\n-                               String.format(\"noname_%d\", id),\n-                               String.format(\"No Name %d\", id));\n-    }\n-\n-    private static class Comments {\n-        private final List<Comment> comments = new ArrayList<>();\n-\n-        void add(String body) {\n-            var comment = new Comment(\"0\",\n-                                      body,\n-                                      createUser(0),\n-                                      ZonedDateTime.now(),\n-                                      ZonedDateTime.now());\n-            comments.add(comment);\n-        }\n-\n-        List<Comment> get() {\n-            return new ArrayList<>(comments);\n-        }\n-    }\n-\n-\n-    @Test\n-    void simpleVeto() {\n-        var comments = new Comments();\n-        comments.add(Veto.addVeto(createUser(123)));\n-        assertEquals(Set.of(\"123\"), Veto.vetoers(createUser(0), comments.get()));\n-    }\n-\n-    @Test\n-    void multipleVetoes() {\n-        var comments = new Comments();\n-        comments.add(Veto.addVeto(createUser(123)));\n-        comments.add(Veto.addVeto(createUser(456)));\n-        assertEquals(Set.of(\"123\", \"456\"), Veto.vetoers(createUser(0), comments.get()));\n-    }\n-\n-    @Test\n-    void removedVeto() {\n-        var comments = new Comments();\n-        comments.add(Veto.addVeto(createUser(123)));\n-        comments.add(Veto.addVeto(createUser(456)));\n-        comments.add(Veto.removeVeto(createUser(123)));\n-        assertEquals(Set.of(\"456\"), Veto.vetoers(createUser(0), comments.get()));\n-    }\n-\n-    @Test\n-    @Disabled\n-    void selfVeto(TestInfo testInfo) throws IOException {\n-        try (var credentials = new HostCredentials(testInfo);\n-             var tempFolder = new TemporaryDirectory()) {\n-            var author = credentials.getHostedRepository();\n-            var integrator = credentials.getHostedRepository();\n-\n-            var censusBuilder = credentials.getCensusBuilder()\n-                                           .addCommitter(author.forge().currentUser().id());\n-            var prBot = PullRequestBot.newBuilder().repo(integrator).censusRepo(censusBuilder.build()).build();\n-\n-            \/\/ Populate the projects repository\n-            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n-            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n-            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n-            localRepo.push(masterHash, author.url(), \"master\", true);\n-\n-            \/\/ Make a change with a corresponding PR\n-            var editHash = CheckableRepository.appendAndCommit(localRepo);\n-            localRepo.push(editHash, author.url(), \"edit\", true);\n-            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"This is a pull request\");\n-\n-            \/\/ Issue an invalid command\n-            pr.addComment(\"\/reject\");\n-            TestBotRunner.runPeriodicItems(prBot);\n-\n-            \/\/ The bot should reply with an error message\n-            var error = pr.comments().stream()\n-                          .filter(comment -> comment.body().contains(\"reject your own changes\"))\n-                          .count();\n-            assertEquals(1, error);\n-        }\n-    }\n-\n-    @Test\n-    @Disabled\n-    void mayNotVeto(TestInfo testInfo) throws IOException {\n-        try (var credentials = new HostCredentials(testInfo);\n-             var tempFolder = new TemporaryDirectory()) {\n-            var author = credentials.getHostedRepository();\n-            var integrator = credentials.getHostedRepository();\n-            var vetoer = credentials.getHostedRepository();\n-\n-            var censusBuilder = credentials.getCensusBuilder()\n-                                           .addCommitter(author.forge().currentUser().id())\n-                                           .addCommitter(vetoer.forge().currentUser().id());\n-            var prBot = PullRequestBot.newBuilder().repo(integrator).censusRepo(censusBuilder.build()).build();\n-\n-            \/\/ Populate the projects repository\n-            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n-            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n-            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n-            localRepo.push(masterHash, author.url(), \"master\", true);\n-\n-            \/\/ Make a change with a corresponding PR\n-            var editHash = CheckableRepository.appendAndCommit(localRepo);\n-            localRepo.push(editHash, author.url(), \"edit\", true);\n-            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"This is a pull request\");\n-\n-            \/\/ Try to veto as a non committer\n-            var vetoPr = vetoer.pullRequest(pr.id());\n-            vetoPr.addComment(\"\/reject\");\n-            TestBotRunner.runPeriodicItems(prBot);\n-\n-            \/\/ The bot should reply with an error message\n-            var error = pr.comments().stream()\n-                          .filter(comment -> comment.body().contains(\"are allowed to reject\"))\n-                          .count();\n-            assertEquals(1, error);\n-        }\n-    }\n-\n-    @Test\n-    @Disabled\n-    void vetoAndMerge(TestInfo testInfo) throws IOException {\n-        try (var credentials = new HostCredentials(testInfo);\n-             var tempFolder = new TemporaryDirectory()) {\n-            var author = credentials.getHostedRepository();\n-            var integrator = credentials.getHostedRepository();\n-            var vetoer = credentials.getHostedRepository();\n-\n-            var censusBuilder = credentials.getCensusBuilder()\n-                                           .addCommitter(author.forge().currentUser().id())\n-                                           .addReviewer(vetoer.forge().currentUser().id());\n-\n-            var prBot = PullRequestBot.newBuilder().repo(integrator).censusRepo(censusBuilder.build()).build();\n-\n-            \/\/ Populate the projects repository\n-            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n-            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n-            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n-            localRepo.push(masterHash, author.url(), \"master\", true);\n-\n-            \/\/ Make a change with a corresponding PR\n-            var editHash = CheckableRepository.appendAndCommit(localRepo);\n-            localRepo.push(editHash, author.url(), \"edit\", true);\n-            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"This is a pull request\");\n-\n-            \/\/ Place a veto\n-            var vetoPr = vetoer.pullRequest(pr.id());\n-            vetoPr.addReview(Review.Verdict.APPROVED, \"Approved\");\n-            vetoPr.addComment(\"\/reject\");\n-            TestBotRunner.runPeriodicItems(prBot);\n-\n-            \/\/ The bot should acknowledge\n-            var ack = pr.comments().stream()\n-                        .filter(comment -> comment.body().contains(\"cannot be integrated\"))\n-                        .count();\n-            assertEquals(1, ack);\n-\n-            \/\/ Now try to integrate\n-            pr.addComment(\"\/integrate\");\n-            TestBotRunner.runPeriodicItems(prBot);\n-\n-            \/\/ There should be another error message\n-            var error = pr.comments().stream()\n-                          .filter(comment -> comment.body().contains(\"change is currently blocked\"))\n-                          .count();\n-            assertEquals(1, error);\n-\n-            \/\/ Now drop the veto\n-            vetoPr.addComment(\"\/allow\");\n-            TestBotRunner.runPeriodicItems(prBot);\n-\n-            \/\/ There should be an acknowledgement\n-            var approve = pr.comments().stream()\n-                            .filter(comment -> comment.body().contains(\"now allowed to be integrated\"))\n-                            .count();\n-            assertEquals(1, approve);\n-\n-            \/\/ Now try to integrate\n-            pr.addComment(\"\/integrate\");\n-            TestBotRunner.runPeriodicItems(prBot);\n-\n-            \/\/ The bot should reply with an ok message\n-            var pushed = pr.comments().stream()\n-                           .filter(comment -> comment.body().contains(\"Pushed as commit\"))\n-                           .count();\n-            assertEquals(1, pushed);\n-        }\n-    }\n-\n-    @Test\n-    @Disabled\n-    void vetoAndSponsor(TestInfo testInfo) throws IOException {\n-        try (var credentials = new HostCredentials(testInfo);\n-             var tempFolder = new TemporaryDirectory()) {\n-            var author = credentials.getHostedRepository();\n-            var integrator = credentials.getHostedRepository();\n-            var vetoer = credentials.getHostedRepository();\n-\n-            var censusBuilder = credentials.getCensusBuilder()\n-                                           .addAuthor(author.forge().currentUser().id())\n-                                           .addReviewer(vetoer.forge().currentUser().id());\n-\n-            var prBot = PullRequestBot.newBuilder().repo(integrator).censusRepo(censusBuilder.build()).build();\n-\n-            \/\/ Populate the projects repository\n-            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n-            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n-            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n-            localRepo.push(masterHash, author.url(), \"master\", true);\n-\n-            \/\/ Make a change with a corresponding PR\n-            var editHash = CheckableRepository.appendAndCommit(localRepo);\n-            localRepo.push(editHash, author.url(), \"edit\", true);\n-            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"This is a pull request\");\n-\n-            \/\/ Place a veto\n-            var vetoPr = vetoer.pullRequest(pr.id());\n-            vetoPr.addReview(Review.Verdict.APPROVED, \"Approved\");\n-            vetoPr.addComment(\"\/reject\");\n-            TestBotRunner.runPeriodicItems(prBot);\n-\n-            \/\/ The bot should acknowledge\n-            var ack = pr.comments().stream()\n-                        .filter(comment -> comment.body().contains(\"cannot be integrated\"))\n-                        .count();\n-            assertEquals(1, ack);\n-\n-            \/\/ Author makes the PR ready for sponsoring\n-            pr.addComment(\"\/integrate\");\n-            TestBotRunner.runPeriodicItems(prBot);\n-\n-            \/\/ The bot should acknowledge\n-            var ready = pr.comments().stream()\n-                          .filter(comment -> comment.body().contains(\"sponsor\"))\n-                          .filter(comment -> comment.body().contains(\"your change\"))\n-                          .count();\n-            assertEquals(1, ready);\n-\n-            vetoPr.addComment(\"\/sponsor\");\n-            TestBotRunner.runPeriodicItems(prBot);\n-\n-            \/\/ There should be another error message\n-            var error = pr.comments().stream()\n-                          .filter(comment -> comment.body().contains(\"change is currently blocked\"))\n-                          .count();\n-            assertEquals(1, error);\n-        }\n-    }\n-}\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/VetoTests.java","additions":0,"deletions":289,"binary":false,"changes":289,"status":"deleted"}]}