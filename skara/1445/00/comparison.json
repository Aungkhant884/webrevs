{"files":[{"patch":"@@ -82,0 +82,3 @@\n+    record BranchSecurity(Pattern branch, String securityId) {}\n+    private final List<BranchSecurity> defaultSecurity;\n+\n@@ -92,1 +95,1 @@\n-                  boolean tagMatchPrefix) {\n+                  boolean tagMatchPrefix, List<BranchSecurity> defaultSecurity) {\n@@ -113,0 +116,1 @@\n+        this.defaultSecurity = defaultSecurity;\n@@ -304,1 +308,1 @@\n-                                issue = jbsBackport.createBackport(issue, requestedVersion, username.orElse(null));\n+                                issue = jbsBackport.createBackport(issue, requestedVersion, username.orElse(null), defaultSecurity(branch));\n@@ -373,0 +377,8 @@\n+    private String defaultSecurity(Branch branch) {\n+        return defaultSecurity.stream()\n+                .filter(branchSecurity -> branchSecurity.branch.matcher(branch.name()).matches())\n+                .map(BranchSecurity::securityId)\n+                .findFirst()\n+                .orElse(null);\n+    }\n+\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifier.java","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+    private List<IssueNotifier.BranchSecurity> defaultSecurity = List.of();\n@@ -155,0 +156,5 @@\n+    public IssueNotifierBuilder defaultSecurity(List<IssueNotifier.BranchSecurity> defaultSecurity) {\n+        this.defaultSecurity = defaultSecurity;\n+        return this;\n+    }\n+\n@@ -168,1 +174,1 @@\n-                resolve, tagIgnoreOpt, tagMatchPrefix);\n+                resolve, tagIgnoreOpt, tagMatchPrefix, defaultSecurity);\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifierBuilder.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -144,0 +144,7 @@\n+        if (notifierConfiguration.contains(\"defaultsecurity\")) {\n+            var defaultSecurity = notifierConfiguration.get(\"defaultsecurity\").fields().stream()\n+                    .map(e -> new IssueNotifier.BranchSecurity(Pattern.compile(e.name()), e.value().asString()))\n+                    .toList();\n+            builder.defaultSecurity(defaultSecurity);\n+        }\n+\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifierFactory.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-    private Issue createBackportIssue(Issue primary) {\n+    private Issue createBackportIssue(Issue primary, String fixVersion, String defaultSecurity) {\n@@ -55,0 +55,4 @@\n+        finalProperties.put(\"fixVersion\", JSON.of(fixVersion));\n+        if (!primary.properties().containsKey(\"security\") && defaultSecurity != null) {\n+            finalProperties.put(\"security\", JSON.of(defaultSecurity));\n+        }\n@@ -64,1 +68,1 @@\n-    public Issue createBackport(Issue primary, String fixVersion, String assignee) {\n+    public Issue createBackport(Issue primary, String fixVersion, String assignee, String defaultSecurity) {\n@@ -69,1 +73,1 @@\n-                return createBackportIssue(primary);\n+                return createBackportIssue(primary, fixVersion, defaultSecurity);\n@@ -81,0 +85,2 @@\n+        } else if (defaultSecurity != null) {\n+            request.body(\"level\", defaultSecurity);\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/JbsBackport.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-                                                                                          .put(\"branches\", \"master|other\")\n+                                                                                          .put(\"branches\", \"master|other|other2\")\n@@ -1719,0 +1719,93 @@\n+        }\n+    }\n+\n+    @Test\n+    void testIssueBackportDefaultSecurity(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var repo = credentials.getHostedRepository();\n+            var repoFolder = tempFolder.path().resolve(\"repo\");\n+            var localRepo = CheckableRepository.init(repoFolder, repo.repositoryType(), Path.of(\"appendable.txt\"), Set.of(), null);\n+            credentials.commitLock(localRepo);\n+            localRepo.pushAll(repo.url());\n+            \/\/ Initialize other branches\n+            var initialHead = localRepo.head();\n+            localRepo.push(initialHead, repo.url(), \"other\");\n+            localRepo.push(initialHead, repo.url(), \"other2\");\n+\n+            var storageFolder = tempFolder.path().resolve(\"storage\");\n+            var issueProject = credentials.getIssueProject();\n+            var jbsNotifierConfig = JSON.object()\n+                    .put(\"fixversions\", JSON.object()\n+                            .put(\".*aster\", \"20.0.2\")\n+                            .put(\"other\", \"20.0.1\")\n+                            .put(\"other2\", \"19.0.2\"))\n+                    .put(\"defaultsecurity\", JSON.object()\n+                            .put(\"othe.*\", \"100\"));\n+\n+            var notifyBot = testBotBuilder(repo, issueProject, storageFolder, jbsNotifierConfig).create(\"notify\", JSON.object());\n+\n+            \/\/ Initialize history\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ Create an issue and commit a fix\n+            var issue = issueProject.createIssue(\"This is an issue\", List.of(\"Indeed\"),\n+                    Map.of(\"issuetype\", JSON.of(\"Enhancement\"),\n+                            SUBCOMPONENT, JSON.of(\"java.io\"),\n+                            RESOLVED_IN_BUILD, JSON.of(\"b07\")\n+                    ));\n+            var level = issue.properties().get(\"security\");\n+            issue.setProperty(\"fixVersions\", JSON.array().add(\"21\"));\n+            issue.setProperty(\"priority\", JSON.of(\"1\"));\n+\n+            var authorEmailAddress = issueProject.issueTracker().currentUser().username() + \"@openjdk.org\";\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, \"Another line\", issue.id() + \": Fix that issue\", \"Duke\", authorEmailAddress);\n+            localRepo.push(editHash, repo.url(), \"master\");\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            {\n+                \/\/ The fixVersion should not have been updated\n+                var updatedIssue = issueProject.issue(issue.id()).orElseThrow();\n+                assertEquals(Set.of(\"21\"), fixVersions(updatedIssue));\n+                assertEquals(OPEN, updatedIssue.state());\n+                assertEquals(List.of(), updatedIssue.assignees());\n+\n+                \/\/ There should be a link\n+                var links = updatedIssue.links();\n+                assertEquals(1, links.size());\n+                var link = links.get(0);\n+                var backport = link.issue().orElseThrow();\n+\n+                \/\/ The backport issue should have a correct fixVersion and no security\n+                assertEquals(Set.of(\"20.0.2\"), fixVersions(backport));\n+                assertNull(backport.properties().get(\"security\"));\n+            }\n+\n+            \/\/ Push the fix to other branch\n+            localRepo.push(editHash, repo.url(), \"other\");\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            {\n+                \/\/ Find the new backport\n+                var updatedIssue = issueProject.issue(issue.id()).orElseThrow();\n+                var links = updatedIssue.links();\n+                assertEquals(2, links.size());\n+                var backport = links.get(1).issue().orElseThrow();\n+\n+                \/\/ The backport issue should have a correct fixVersion and security\n+                assertEquals(Set.of(\"20.0.1\"), fixVersions(backport));\n+                assertEquals(\"100\", backport.properties().get(\"security\").asString());\n+            }\n+\n+            \/\/ Set security on the original issue\n+            issue.setProperty(\"security\", JSON.of(\"200\"));\n+            \/\/ Push to another branch\n+            localRepo.push(editHash, repo.url(), \"other2\");\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            {\n+                \/\/ Find the new backport\n+                var updatedIssue = issueProject.issue(issue.id()).orElseThrow();\n+                var links = updatedIssue.links();\n+                assertEquals(3, links.size());\n+                var backport = links.get(2).issue().orElseThrow();\n@@ -1720,3 +1813,3 @@\n-            \/\/ If the parent issue has a security level (can be configured when running a test manually) it should be propagated\n-            if (level != null) {\n-                assertEquals(level.asString(), backport.properties().get(\"security\").asString());\n+                \/\/ The backport issue should have a correct fixVersion and security\n+                assertEquals(Set.of(\"19.0.2\"), fixVersions(backport));\n+                assertEquals(\"200\", backport.properties().get(\"security\").asString());\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifierTests.java","additions":97,"deletions":4,"binary":false,"changes":101,"status":"modified"},{"patch":"@@ -283,1 +283,2 @@\n-            case \"priority\":\n+            case \"priority\": \/\/ fall-through\n+            case \"security\":\n","filename":"issuetracker\/src\/main\/java\/org\/openjdk\/skara\/issuetracker\/jira\/JiraProject.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}