{"files":[{"patch":"@@ -32,1 +32,0 @@\n-import java.util.function.Supplier;\n@@ -36,1 +35,0 @@\n-    private final Supplier<Hash> commitSupplier;\n@@ -44,10 +42,0 @@\n-        this.commitSupplier = null;\n-        this.path = path;\n-        this.line = line;\n-    }\n-\n-    public CommitComment(Supplier<Hash> commitSupplier, Path path, int line, String id, String body, HostUser author, ZonedDateTime createdAt, ZonedDateTime updatedAt) {\n-        super(id, body, author, createdAt, updatedAt);\n-\n-        this.commit = null;\n-        this.commitSupplier = commitSupplier;\n@@ -62,3 +50,0 @@\n-        if (commit == null) {\n-            commit = commitSupplier.get();\n-        }\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/CommitComment.java","additions":0,"deletions":15,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -49,1 +49,0 @@\n-    private ZonedDateTime until;\n@@ -51,1 +50,3 @@\n-    private static final ConcurrentHashMap<String, ConcurrentHashMap<String, Hash>> projectsToTitleToHashes = new ConcurrentHashMap<>();\n+    private static final ZonedDateTime EPOCH = ZonedDateTime.ofInstant(Instant.EPOCH, ZoneOffset.UTC);\n+    private static final ConcurrentHashMap<String, ConcurrentHashMap<String, ConcurrentHashMap<Hash, Boolean>>> projectsToTitleToHashes = new ConcurrentHashMap<>();\n+    private static final ConcurrentHashMap<String, ZonedDateTime> lastCommitUpdates = new ConcurrentHashMap<>();\n@@ -79,1 +80,0 @@\n-        until = instantiated;\n@@ -82,0 +82,1 @@\n+        lastCommitUpdates.putIfAbsent(projectName, EPOCH);\n@@ -339,4 +340,1 @@\n-    private Hash commitWithComment(String commitTitle,\n-                                   String commentBody,\n-                                   ZonedDateTime commentCreatedAt,\n-                                   HostUser author) {\n+    private Set<Hash> commitsWithTitle(String commitTitle, ZonedDateTime now) {\n@@ -344,3 +342,1 @@\n-        if (commitTitlesToHashes.containsKey(commitTitle)) {\n-            return commitTitlesToHashes.get(commitTitle);\n-        }\n+        var lastUpdated = lastCommitUpdates.get(projectName);\n@@ -348,13 +344,3 @@\n-        \/\/ Update with most recent commits\n-        request.get(\"repository\/commits\")\n-               .param(\"since\", instantiated.format(DateTimeFormatter.ISO_DATE_TIME))\n-               .execute()\n-               .stream()\n-               .forEach(o -> {\n-                   var hash = new Hash(o.get(\"id\").asString());\n-                   var title = o.get(\"title\").asString();\n-                   commitTitlesToHashes.put(title, hash);\n-               });\n-\n-        \/\/ Update lazily 12 months at a time\n-        if (until != null) {\n+        if (lastUpdated == EPOCH) {\n+            \/\/ Fetch all commits one year at a time\n+            var until = now;\n@@ -372,1 +358,0 @@\n-                    until = null;\n@@ -375,0 +360,1 @@\n+\n@@ -378,1 +364,6 @@\n-                   commitTitlesToHashes.put(title, hash);\n+                   var empty = new ConcurrentHashMap<Hash, Boolean>();\n+                   var existing = commitTitlesToHashes.putIfAbsent(title, empty);\n+                   if (existing == null) {\n+                       existing = empty;\n+                   }\n+                   existing.put(hash, true);\n@@ -380,2 +371,35 @@\n-                if (commitTitlesToHashes.containsKey(commitTitle)) {\n-                    return commitTitlesToHashes.get(commitTitle);\n+            }\n+\n+            lastCommitUpdates.put(projectName, now);\n+        }\n+\n+        \/\/ Update with most recent commits\n+        var lastUpdate = lastCommitUpdates.get(projectName);\n+        if (lastUpdate.isBefore(now)) {\n+            request.get(\"repository\/commits\")\n+                   .param(\"since\", lastUpdate.format(DateTimeFormatter.ISO_DATE_TIME))\n+                   .execute()\n+                   .stream()\n+                   .forEach(o -> {\n+                       var hash = new Hash(o.get(\"id\").asString());\n+                       var title = o.get(\"title\").asString();\n+                       var empty = new ConcurrentHashMap<Hash, Boolean>();\n+                       var existing = commitTitlesToHashes.putIfAbsent(title, empty);\n+                       if (existing == null) {\n+                           existing = empty;\n+                       }\n+                       existing.put(hash, true);\n+                   });\n+            lastCommitUpdates.put(projectName, now);\n+        }\n+\n+        if (commitTitlesToHashes.containsKey(commitTitle)) {\n+            return commitTitlesToHashes.get(commitTitle).keySet();\n+        }\n+\n+        if (commitTitle.endsWith(\"...\")) {\n+            var candidates = new HashSet<Hash>();\n+            var prefix = commitTitle.substring(0, commitTitle.length() - \"...\".length());\n+            for (var title : commitTitlesToHashes.keySet()) {\n+                if (title.startsWith(prefix)) {\n+                    candidates.addAll(commitTitlesToHashes.get(title).keySet());\n@@ -384,0 +408,1 @@\n+            return candidates;\n@@ -386,1 +411,23 @@\n-        throw new RuntimeException(\"Could not find commit with title: '\" + commitTitle + \"' for project \" + projectName);\n+        return Set.of();\n+    }\n+\n+    private Hash commitWithComment(String commitTitle,\n+                                   ZonedDateTime commentCreatedAt,\n+                                   HostUser author,\n+                                   ZonedDateTime now) {\n+        var candidates = commitsWithTitle(commitTitle, now);\n+        if (candidates.size() == 1) {\n+            return candidates.iterator().next();\n+        }\n+\n+        for (var candidate : candidates) {\n+            var comments = commitComments(candidate);\n+            for (var comment : comments) {\n+                if (comment.createdAt().equals(commentCreatedAt) &&\n+                    comment.author().equals(author)) {\n+                    return candidate;\n+                }\n+            }\n+        }\n+\n+        throw new RuntimeException(\"Did not find commit with title \" + commitTitle + \" for repository \" + projectName);\n@@ -393,1 +440,1 @@\n-        return request.get(\"events\")\n+        var notes = request.get(\"events\")\n@@ -400,11 +447,0 @@\n-                      .map(o -> {\n-                          var createdAt = ZonedDateTime.parse(o.get(\"note\").get(\"created_at\").asString());\n-                          var body = o.get(\"note\").get(\"body\").asString();\n-                          var user = gitLabHost.parseAuthorField(o);\n-                          var id = o.get(\"note\").get(\"id\").asInt();\n-                          Supplier<Hash> hash = () -> commitWithComment(o.get(\"target_title\").asString(),\n-                                                                        body,\n-                                                                        createdAt,\n-                                                                        user);\n-                          return new CommitComment(hash, null, -1, String.valueOf(id), body, user, createdAt, createdAt);\n-                      })\n@@ -412,0 +448,15 @@\n+\n+        var now = ZonedDateTime.now();\n+        return notes.stream()\n+                    .map(o -> {\n+                        var createdAt = ZonedDateTime.parse(o.get(\"note\").get(\"created_at\").asString());\n+                        var body = o.get(\"note\").get(\"body\").asString();\n+                        var user = gitLabHost.parseAuthorField(o);\n+                        var id = o.get(\"note\").get(\"id\").asInt();\n+                        var hash = commitWithComment(o.get(\"target_title\").asString(),\n+                                                     createdAt,\n+                                                     user,\n+                                                     now);\n+                        return new CommitComment(hash, null, -1, String.valueOf(id), body, user, createdAt, createdAt);\n+                    })\n+                    .collect(Collectors.toList());\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabRepository.java","additions":91,"deletions":40,"binary":false,"changes":131,"status":"modified"}]}