{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,0 +60,5 @@\n+    @Override\n+    public Optional<HostUser> userById(String id) {\n+        return Optional.empty();\n+    }\n+\n@@ -74,0 +79,14 @@\n+\n+    @Override\n+    public List<HostUser> groupMembers(String group) {\n+        return null;\n+    }\n+\n+    @Override\n+    public void addGroupMember(String group, HostUser user) {\n+    }\n+\n+    @Override\n+    public MemberState groupMemberState(String group, HostUser user) {\n+        return null;\n+    }\n","filename":"bots\/tester\/src\/test\/java\/org\/openjdk\/skara\/bots\/tester\/InMemoryHost.java","additions":20,"deletions":1,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -92,0 +92,5 @@\n+    @Override\n+    public String group() {\n+        return null;\n+    }\n+\n@@ -248,0 +253,5 @@\n+    @Override\n+    public List<Collaborator> collaborators() {\n+        return List.of();\n+    }\n+\n","filename":"bots\/tester\/src\/test\/java\/org\/openjdk\/skara\/bots\/tester\/InMemoryHostedRepository.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,32 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.forge;\n+\n+import org.openjdk.skara.host.HostUser;\n+\n+\/**\n+ * A repository collaborator is a user and a set of permissions, currently only\n+ * 'canPush'.\n+ *\/\n+public record Collaborator(HostUser user, boolean canPush) {\n+}\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/Collaborator.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,0 +57,20 @@\n+    \/**\n+     * Get user by numeric ID\n+     *\/\n+    Optional<HostUser> userById(String id);\n+\n+    \/**\n+     * List users that are members of a group\n+     *\/\n+    List<HostUser> groupMembers(String group);\n+\n+    \/**\n+     * Gets the membership state for a user in a group\n+     *\/\n+    MemberState groupMemberState(String group, HostUser user);\n+\n+    \/**\n+     * Adds a user to a group\n+     *\/\n+    void addGroupMember(String group, HostUser user);\n+\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/Forge.java","additions":21,"deletions":1,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -76,0 +76,5 @@\n+\n+    \/**\n+     * The group\/org name where this repo belongs\n+     *\/\n+    String group();\n@@ -165,0 +170,1 @@\n+    List<Collaborator> collaborators();\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/HostedRepository.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,32 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.forge;\n+\n+\/**\n+ * Forge group member states\n+ *\/\n+public enum MemberState {\n+    ACTIVE,\n+    PENDING,\n+    MISSING\n+}\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/MemberState.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"added"},{"patch":"@@ -26,0 +26,1 @@\n+import java.util.List;\n@@ -30,0 +31,1 @@\n+import org.openjdk.skara.forge.MemberState;\n@@ -94,0 +96,5 @@\n+    @Override\n+    public Optional<HostUser> userById(String username) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n@@ -108,0 +115,15 @@\n+\n+    @Override\n+    public List<HostUser> groupMembers(String group) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public void addGroupMember(String group, HostUser user) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public MemberState groupMemberState(String group, HostUser user) {\n+        throw new UnsupportedOperationException();\n+    }\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/bitbucket\/BitbucketHost.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import org.openjdk.skara.forge.Collaborator;\n@@ -109,0 +110,5 @@\n+    @Override\n+    public String group() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n@@ -272,0 +278,5 @@\n+    @Override\n+    public List<Collaborator> collaborators() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/bitbucket\/BitbucketRepository.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -335,1 +335,57 @@\n-    private HostUser toHostUser(JSONObject details) {\n+    @Override\n+    public Optional<HostUser> userById(String id) {\n+        var details = request.get(\"user\/\" + id)\n+                .onError(r -> Optional.of(JSON.of()))\n+                .execute();\n+        if (details.isNull()) {\n+            return Optional.empty();\n+        }\n+\n+        return Optional.of(toHostUser(details.asObject()));\n+    }\n+\n+    \/**\n+     * Gets all members of a GitHub organization.\n+     *\/\n+    @Override\n+    public List<HostUser> groupMembers(String group) {\n+        var result = request.get(\"orgs\/\" + group + \"\/members\").execute();\n+        return result.stream().map(o -> toHostUser(o.asObject())).toList();\n+    }\n+\n+    \/**\n+     * Gets the membership state of a user in a GitHub organization. Since\n+     * member invitations need to be accepted by the user, it can be either\n+     * PENDING or ACTIVE. If the user isn't a member, the state is MISSING.\n+     *\/\n+    @Override\n+    public MemberState groupMemberState(String group, HostUser user) {\n+        var result = request.get(\"orgs\/\" + group + \"\/memberships\/\" + user.username())\n+                .onError(r -> r.statusCode() == 404 ? Optional.of(JSON.object().put(\"state\", \"missing\")) : Optional.empty())\n+                .execute();\n+        var state = result.get(\"state\").asString();\n+        return switch (state) {\n+            case \"active\" -> MemberState.ACTIVE;\n+            case \"pending\" -> MemberState.PENDING;\n+            case \"missing\" -> MemberState.MISSING;\n+            default -> throw new IllegalStateException(\"Unknown state: \" + state);\n+        };\n+    }\n+\n+    \/**\n+     * Adds a user to a GitHub organization. This will put the user as PENDING\n+     * and an invitation is sent to the user. When accepted, the user becomes\n+     * ACTIVE.\n+     *\/\n+    @Override\n+    public void addGroupMember(String group, HostUser user) {\n+        request.put(\"orgs\/\" + group + \"\/memberships\/\" + user.username())\n+                .body(\"role\", \"member\")\n+                .execute();\n+    }\n+\n+    \/**\n+     * Generate a HostUser object from the json snippet. Depending on the source,\n+     * not all fields may be present.\n+     *\/\n+    static HostUser toHostUser(JSONObject details) {\n@@ -339,6 +395,3 @@\n-\n-        var name = details.get(\"name\").asString();\n-        if (name == null) {\n-            name = login;\n-        }\n-        var email = details.get(\"email\").asString();\n+        \/\/ Sometimes present\n+        var name = details.contains(\"name\") ? details.get(\"name\").asString() : login;\n+        var email = details.contains(\"email\") ? details.get(\"email\").asString() : null;\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubHost.java","additions":61,"deletions":8,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -216,0 +216,5 @@\n+    @Override\n+    public String group() {\n+        return repository.split(\"\/\")[0];\n+    }\n+\n@@ -655,0 +660,10 @@\n+    @Override\n+    public List<Collaborator> collaborators() {\n+        var result = request.get(\"collaborators\")\n+                .param(\"affiliation\", \"direct\")\n+                .execute();\n+        return result.stream()\n+                .map(o -> new Collaborator(GitHubHost.toHostUser(o.asObject()), o.get(\"permissions\").get(\"push\").asBoolean()))\n+                .toList();\n+    }\n+\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubRepository.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -182,0 +182,14 @@\n+    @Override\n+    public Optional<HostUser> userById(String id) {\n+        var details = request.get(\"users\/\" + id)\n+                .onError(r -> Optional.of(JSON.of()))\n+                .execute();\n+\n+        if (details.isNull()) {\n+            return Optional.empty();\n+        }\n+\n+        return Optional.of(parseAuthorObject(details.asObject()));\n+    }\n+\n+\n@@ -266,0 +280,15 @@\n+\n+    @Override\n+    public List<HostUser> groupMembers(String group) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public void addGroupMember(String group, HostUser user) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public MemberState groupMemberState(String group, HostUser user) {\n+        throw new UnsupportedOperationException();\n+    }\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabHost.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -237,0 +237,5 @@\n+    @Override\n+    public String group() {\n+        return projectName.split(\"\/\")[0];\n+    }\n+\n@@ -786,0 +791,8 @@\n+    @Override\n+    public List<Collaborator> collaborators() {\n+        var result = request.get(\"members\").execute();\n+        return result.stream()\n+                .map(o -> new Collaborator(gitLabHost.parseAuthorObject(o.asObject()), o.get(\"access_level\").asInt() >= 30))\n+                .toList();\n+    }\n+\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabRepository.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import org.openjdk.skara.forge.MemberState;\n@@ -45,1 +46,1 @@\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -47,1 +48,0 @@\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -308,0 +308,59 @@\n+\n+    @Test\n+    void testCollaborators() {\n+        var gitHubRepo = githubHost.repository(settings.getProperty(\"github.repository\")).orElseThrow();\n+        var collaborators = gitHubRepo.collaborators();\n+        assertNotNull(collaborators);\n+    }\n+\n+    @Test\n+    void testGetUser() {\n+        var userName = settings.getProperty(\"github.user\");\n+        var userByName = githubHost.user(userName).orElseThrow();\n+        var userById = githubHost.userById(userByName.id()).orElseThrow();\n+        assertEquals(userByName, userById);\n+    }\n+\n+    \/**\n+     * Expects\n+     * github.group: Name of GitHub organization with at least one member\n+     *\/\n+    @Test\n+    void testGroupMembers() {\n+        var groupName = settings.getProperty(\"github.group\");\n+        var membersList = githubHost.groupMembers(groupName);\n+        assertNotNull(membersList);\n+        assertNotEquals(0, membersList.size());\n+    }\n+\n+    \/**\n+     * Expects:\n+     * github.group: Name of GitHub organization\n+     * github.group.member: Name of user which is a member of the organization\n+     * github.group.notmember: Name of user which is not a member of the organization\n+     *\/\n+    @Test\n+    void testGroupMemberState() {\n+        var groupName = settings.getProperty(\"github.group\");\n+        var memberName = settings.getProperty(\"github.group.member\");\n+        var notMemberName = settings.getProperty(\"github.group.notmember\");\n+        var member = githubHost.user(memberName).orElseThrow();\n+        var notMember = githubHost.user(notMemberName).orElseThrow();\n+        assertEquals(MemberState.ACTIVE, githubHost.groupMemberState(groupName, member));\n+        assertEquals(MemberState.MISSING, githubHost.groupMemberState(groupName, notMember));\n+    }\n+\n+    \/**\n+     * Expects:\n+     * github.group: Name of GitHub organization\n+     * github.group.user: Name of user which may or may not be a member already,\n+     *                    but cannot be an owner\n+     *\/\n+    @Test\n+    void testAddGroupMember() {\n+        var groupName = settings.getProperty(\"github.group\");\n+        var userName = settings.getProperty(\"github.group.user\");\n+        var user = githubHost.user(userName).orElseThrow();\n+        githubHost.addGroupMember(groupName, user);\n+        assertNotEquals(MemberState.MISSING, githubHost.groupMemberState(groupName, user));\n+    }\n","filename":"forge\/src\/test\/java\/org\/openjdk\/skara\/forge\/github\/GitHubRestApiTests.java","additions":61,"deletions":2,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.util.Properties;\n@@ -28,0 +29,1 @@\n+import org.junit.jupiter.api.BeforeEach;\n@@ -52,3 +54,6 @@\n-    @Test\n-    void testReviews() throws IOException {\n-        var settings = ManualTestSettings.loadManualTestSettings();\n+    private GitLabHost gitLabHost;\n+    private Properties settings;\n+\n+    @BeforeEach\n+    void setupGitLab() throws IOException {\n+        settings = ManualTestSettings.loadManualTestSettings();\n@@ -59,1 +64,5 @@\n-        var gitLabHost = new GitLabHost(\"gitlab\", uri, false, credential, List.of());\n+        gitLabHost = new GitLabHost(\"gitlab\", uri, false, credential, List.of());\n+    }\n+\n+    @Test\n+    void testReviews() {\n@@ -69,7 +78,1 @@\n-    void testFilesUrl() throws IOException {\n-        var settings = ManualTestSettings.loadManualTestSettings();\n-        var username = settings.getProperty(\"gitlab.user\");\n-        var token = settings.getProperty(\"gitlab.pat\");\n-        var credential = new Credential(username, token);\n-        var uri = URIBuilder.base(settings.getProperty(\"gitlab.uri\")).build();\n-        var gitLabHost = new GitLabHost(\"gitlab\", uri, false, credential, List.of());\n+    void testFilesUrl() {\n@@ -89,7 +92,1 @@\n-    void testLabels() throws IOException {\n-        var settings = ManualTestSettings.loadManualTestSettings();\n-        var username = settings.getProperty(\"gitlab.user\");\n-        var token = settings.getProperty(\"gitlab.pat\");\n-        var credential = new Credential(username, token);\n-        var uri = URIBuilder.base(settings.getProperty(\"gitlab.uri\")).build();\n-        var gitLabHost = new GitLabHost(\"gitlab\", uri, false, credential, List.of());\n+    void testLabels() {\n@@ -119,7 +116,1 @@\n-    void testOversizeComment() throws IOException {\n-        var settings = ManualTestSettings.loadManualTestSettings();\n-        var username = settings.getProperty(\"gitlab.user\");\n-        var token = settings.getProperty(\"gitlab.pat\");\n-        var credential = new Credential(username, token);\n-        var uri = URIBuilder.base(settings.getProperty(\"gitlab.uri\")).build();\n-        var gitLabHost = new GitLabHost(\"gitlab\", uri, false, credential, List.of());\n+    void testOversizeComment() {\n@@ -141,7 +132,1 @@\n-    void fileContentsNonExisting() throws IOException {\n-        var settings = ManualTestSettings.loadManualTestSettings();\n-        var username = settings.getProperty(\"gitlab.user\");\n-        var token = settings.getProperty(\"gitlab.pat\");\n-        var credential = new Credential(username, token);\n-        var uri = URIBuilder.base(settings.getProperty(\"gitlab.uri\")).build();\n-        var gitLabHost = new GitLabHost(\"gitlab\", uri, false, credential, List.of());\n+    void fileContentsNonExisting() {\n@@ -157,7 +142,1 @@\n-    void writeFileContents() throws IOException {\n-        var settings = ManualTestSettings.loadManualTestSettings();\n-        var username = settings.getProperty(\"gitlab.user\");\n-        var token = settings.getProperty(\"gitlab.pat\");\n-        var credential = new Credential(username, token);\n-        var uri = URIBuilder.base(settings.getProperty(\"gitlab.uri\")).build();\n-        var gitLabHost = new GitLabHost(\"gitlab\", uri, false, credential, List.of());\n+    void writeFileContents() {\n@@ -199,6 +178,0 @@\n-        var settings = ManualTestSettings.loadManualTestSettings();\n-        var username = settings.getProperty(\"gitlab.user\");\n-        var token = settings.getProperty(\"gitlab.pat\");\n-        var credential = new Credential(username, token);\n-        var uri = URIBuilder.base(settings.getProperty(\"gitlab.uri\")).build();\n-        var gitLabHost = new GitLabHost(\"gitlab\", uri, false, credential, List.of());\n@@ -227,7 +200,1 @@\n-    void testLastMarkedAsDraftTime() throws IOException {\n-        var settings = ManualTestSettings.loadManualTestSettings();\n-        var username = settings.getProperty(\"gitlab.user\");\n-        var token = settings.getProperty(\"gitlab.pat\");\n-        var credential = new Credential(username, token);\n-        var uri = URIBuilder.base(settings.getProperty(\"gitlab.uri\")).build();\n-        var gitLabHost = new GitLabHost(\"gitlab\", uri, false, credential, List.of());\n+    void testLastMarkedAsDraftTime() {\n@@ -238,1 +205,1 @@\n-        assertEquals(\"2023-02-11T08:43:52.408Z\", lastMarkedAsDraftTime.get().toString());\n+        assertEquals(\"2023-02-11T08:43:52.408Z\", lastMarkedAsDraftTime.orElseThrow().toString());\n@@ -242,7 +209,1 @@\n-    void testDraftMR() throws IOException {\n-        var settings = ManualTestSettings.loadManualTestSettings();\n-        var username = settings.getProperty(\"gitlab.user\");\n-        var token = settings.getProperty(\"gitlab.pat\");\n-        var credential = new Credential(username, token);\n-        var uri = URIBuilder.base(settings.getProperty(\"gitlab.uri\")).build();\n-        var gitLabHost = new GitLabHost(\"gitlab\", uri, false, credential, List.of());\n+    void testDraftMR() {\n@@ -263,7 +224,1 @@\n-    void testHtmlUrl() throws IOException {\n-        var settings = ManualTestSettings.loadManualTestSettings();\n-        var username = settings.getProperty(\"gitlab.user\");\n-        var token = settings.getProperty(\"gitlab.pat\");\n-        var credential = new Credential(username, token);\n-        var uri = URIBuilder.base(settings.getProperty(\"gitlab.uri\")).build();\n-        var gitLabHost = new GitLabHost(\"gitlab\", uri, false, credential, List.of());\n+    void testHtmlUrl() {\n@@ -284,7 +239,1 @@\n-    void testDeleteDeployKey() throws IOException {\n-        var settings = ManualTestSettings.loadManualTestSettings();\n-        var username = settings.getProperty(\"gitlab.user\");\n-        var token = settings.getProperty(\"gitlab.pat\");\n-        var credential = new Credential(username, token);\n-        var uri = URIBuilder.base(settings.getProperty(\"gitlab.uri\")).build();\n-        var gitLabHost = new GitLabHost(\"gitlab\", uri, false, credential, List.of());\n+    void testDeleteDeployKey() {\n@@ -292,1 +241,0 @@\n-\n@@ -297,7 +245,1 @@\n-    void testDeployKeyTitles() throws IOException {\n-        var settings = ManualTestSettings.loadManualTestSettings();\n-        var username = settings.getProperty(\"gitlab.user\");\n-        var token = settings.getProperty(\"gitlab.pat\");\n-        var credential = new Credential(username, token);\n-        var uri = URIBuilder.base(settings.getProperty(\"gitlab.uri\")).build();\n-        var gitLabHost = new GitLabHost(\"gitlab\", uri, false, credential, List.of());\n+    void testDeployKeyTitles() {\n@@ -305,1 +247,0 @@\n-\n@@ -311,7 +252,1 @@\n-    void testBackportCleanIgnoreCopyRight() throws IOException {\n-        var settings = ManualTestSettings.loadManualTestSettings();\n-        var username = settings.getProperty(\"gitlab.user\");\n-        var token = settings.getProperty(\"gitlab.pat\");\n-        var credential = new Credential(username, token);\n-        var uri = URIBuilder.base(settings.getProperty(\"gitlab.uri\")).build();\n-        var gitLabHost = new GitLabHost(\"gitlab\", uri, false, credential, List.of(settings.getProperty(\"gitlab.group\").split(\",\")));\n+    void testBackportCleanIgnoreCopyRight() {\n@@ -322,1 +257,1 @@\n-        var backportDiff = commit.get().parentDiffs().get(0);\n+        var backportDiff = commit.orElseThrow().parentDiffs().get(0);\n@@ -329,7 +264,1 @@\n-    void testCommitComments() throws IOException {\n-        var settings = ManualTestSettings.loadManualTestSettings();\n-        var username = settings.getProperty(\"gitlab.user\");\n-        var token = settings.getProperty(\"gitlab.pat\");\n-        var credential = new Credential(username, token);\n-        var uri = URIBuilder.base(settings.getProperty(\"gitlab.uri\")).build();\n-        var gitLabHost = new GitLabHost(\"gitlab\", uri, false, credential, List.of());\n+    void testCommitComments() {\n@@ -346,6 +275,0 @@\n-        var settings = ManualTestSettings.loadManualTestSettings();\n-        var username = settings.getProperty(\"gitlab.user\");\n-        var token = settings.getProperty(\"gitlab.pat\");\n-        var credential = new Credential(username, token);\n-        var uri = URIBuilder.base(settings.getProperty(\"gitlab.uri\")).build();\n-        var gitLabHost = new GitLabHost(\"gitlab\", uri, false, credential, List.of());\n@@ -363,7 +286,1 @@\n-    void testDefaultBranchName() throws IOException {\n-        var settings = ManualTestSettings.loadManualTestSettings();\n-        var username = settings.getProperty(\"gitlab.user\");\n-        var token = settings.getProperty(\"gitlab.pat\");\n-        var credential = new Credential(username, token);\n-        var uri = URIBuilder.base(settings.getProperty(\"gitlab.uri\")).build();\n-        var gitLabHost = new GitLabHost(\"gitlab\", uri, false, credential, List.of());\n+    void testDefaultBranchName() {\n@@ -371,1 +288,0 @@\n-\n@@ -374,0 +290,15 @@\n+\n+    @Test\n+    void testGetUser() {\n+        var userName = settings.getProperty(\"gitlab.user\");\n+        var userByName = gitLabHost.user(userName).orElseThrow();\n+        var userById = gitLabHost.userById(userByName.id()).orElseThrow();\n+        assertEquals(userByName, userById);\n+    }\n+\n+    @Test\n+    void testCollaborators() {\n+        var gitLabRepo = gitLabHost.repository(settings.getProperty(\"gitlab.repository\")).orElseThrow();\n+        var collaborators = gitLabRepo.collaborators();\n+        assertNotNull(collaborators);\n+    }\n","filename":"forge\/src\/test\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabRestApiTest.java","additions":43,"deletions":112,"binary":false,"changes":155,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,8 @@\n+\/**\n+ * Generates a valid census repository for use in tests. The possible structure\n+ * is limited compared to a real census. A default user with forge ID 0 is always\n+ * present as \"lead\" in the default group 'main' and default project 'test'.\n+ * <p>\n+ * Users can be added either directly to the default project with a given role, or\n+ * as just generic users without any project roles.\n+ *\/\n@@ -36,1 +44,1 @@\n-    private final Logger log;\n+    private static final Logger log = Logger.getLogger(\"org.openjdk.skara.test.utils\");;\n@@ -39,1 +47,1 @@\n-        final String platformId;\n+        final String forgeId;\n@@ -42,1 +50,0 @@\n-        final String role;\n@@ -44,2 +51,2 @@\n-        User(String platformId, String name, String fullName, String role) {\n-            this.platformId = platformId;\n+        User(String forgeId, String name, String fullName) {\n+            this.forgeId = forgeId;\n@@ -48,1 +55,0 @@\n-            this.role = role;\n@@ -52,5 +58,19 @@\n-    private User lead;\n-    private List<User> authors = new ArrayList<>();\n-    private List<User> committers = new ArrayList<>();\n-    private List<User> reviewers = new ArrayList<>();\n-    private int userIndex;\n+    private final Map<String, User> users = new HashMap<>();\n+    private int userIndex = 1;\n+\n+    private static class Project {\n+        private User lead;\n+        private final List<User> authors = new ArrayList<>();\n+        private final List<User> committers = new ArrayList<>();\n+        private final List<User> reviewers = new ArrayList<>();\n+    }\n+    private final Project defaultProject;\n+    private final Map<String, Project> projects = new HashMap<>();\n+\n+    private static class Group {\n+        private User lead;\n+        private final List<User> members = new ArrayList<>();\n+    }\n+    private final Group defaultGroup;\n+    private final Map<String, Group> groups = new HashMap<>();\n+\n@@ -58,1 +78,6 @@\n-    static CensusBuilder create(String namespace) {\n+    \/**\n+     * Creates a basic CensusBuilder with an implicit default project named\n+     * \"test\", a default group named \"main\" and a default user with lead role\n+     * in both of those.\n+     *\/\n+    public static CensusBuilder create(String namespace) {\n@@ -64,1 +89,0 @@\n-        userIndex = 1;\n@@ -66,2 +90,10 @@\n-        log = Logger.getLogger(\"org.openjdk.skara.test.utils\");\n-        lead = new User(\"0\", \"integrationlead\", \"Generated Lead\", \"lead\");\n+        defaultProject = new Project();\n+        projects.put(\"test\", defaultProject);\n+\n+        defaultGroup = new Group();\n+        groups.put(\"main\", defaultGroup);\n+\n+        var lead = new User(\"0\", \"integrationlead\", \"Generated Lead\");\n+        users.put(lead.forgeId, lead);\n+        defaultProject.lead = lead;\n+        defaultGroup.lead = lead;\n@@ -70,6 +102,7 @@\n-    public CensusBuilder addAuthor(String id) {\n-        authors.add(new User(id,\n-                             \"integrationauthor\" + userIndex,\n-                             \"Generated Author \" + userIndex,\n-                             \"author\"));\n-        userIndex++;\n+    \/**\n+     * Creates new user and adds it to the default group and as author in the\n+     * default project.\n+     *\/\n+    public CensusBuilder addAuthor(String forgeId) {\n+        var user = createUser(forgeId, \"integrationauthor\", \"Generated Author\");\n+        defaultProject.authors.add(user);\n@@ -79,5 +112,26 @@\n-    public CensusBuilder addCommitter(String id) {\n-        committers.add(new User(id,\n-                                \"integrationcommitter\" + userIndex,\n-                                \"Generated Committer \" + userIndex,\n-                                \"committer\"));\n+    \/**\n+     * Creates new user and adds it to the default group and as committer in the\n+     * default project.\n+     *\/\n+    public CensusBuilder addCommitter(String forgeId) {\n+        var user = createUser(forgeId, \"integrationcommitter\", \"Generated Committer\");\n+        defaultProject.committers.add(user);\n+        return this;\n+    }\n+\n+    \/**\n+     * Creates new user and adds it to the default group and as reviewer in the\n+     * default project.\n+     *\/\n+    public CensusBuilder addReviewer(String forgeId) {\n+        var user = createUser(forgeId, \"integrationreviewer\", \"Generated Reviewer\");\n+        defaultProject.reviewers.add(user);\n+        return this;\n+    }\n+\n+    \/**\n+     * Creates new user with custom names and adds it to the default group, but\n+     * not to any project.\n+     *\/\n+    public CensusBuilder addUser(String forgeId, String name, String fullName) {\n+        var user = new User(forgeId, name, fullName);\n@@ -85,0 +139,2 @@\n+        users.put(forgeId, user);\n+        defaultGroup.members.add(user);\n@@ -88,5 +144,2 @@\n-    public CensusBuilder addReviewer(String id) {\n-        reviewers.add(new User(id,\n-                               \"integrationreviewer\" + userIndex,\n-                               \"Generated Reviewer \" + userIndex,\n-                               \"reviewer\"));\n+    private User createUser(String forgeId, String baseName, String baseFullName) {\n+        var user = new User(forgeId, baseName + userIndex, baseFullName + \" \" + userIndex);\n@@ -94,0 +147,39 @@\n+        users.put(forgeId, user);\n+        defaultGroup.members.add(user);\n+        return user;\n+    }\n+\n+    \/**\n+     * Adds existing user to project as author\n+     *\/\n+    public CensusBuilder addAuthor(String forgeId, String project) {\n+        var user = users.get(forgeId);\n+        projects.get(project).authors.add(user);\n+        return this;\n+    }\n+\n+    \/**\n+     * Adds existing user to project as committer\n+     *\/\n+    public CensusBuilder addCommitter(String forgeId, String project) {\n+        var user = users.get(forgeId);\n+        projects.get(project).committers.add(user);\n+        return this;\n+    }\n+\n+    \/**\n+     * Adds existing user to project as reviewer\n+     *\/\n+    public CensusBuilder addReviewer(String forgeId, String project) {\n+        var user = users.get(forgeId);\n+        projects.get(project).reviewers.add(user);\n+        return this;\n+    }\n+\n+    \/**\n+     * Adds a new project with the existing user set as lead\n+     *\/\n+    public CensusBuilder addProject(String name, String leadForgeId) {\n+        Project project = new Project();\n+        project.lead = users.get(leadForgeId);\n+        projects.put(name, project);\n@@ -106,1 +198,1 @@\n-    private void writeMember(PrintWriter writer, User user) {\n+    private void writeMember(PrintWriter writer, User user, String role) {\n@@ -108,5 +200,1 @@\n-        if (user.role.equals(\"lead\")) {\n-            writer.print(\"lead\");\n-        } else {\n-            writer.print(\"member\");\n-        }\n+        writer.print(role);\n@@ -119,1 +207,1 @@\n-    private void writeRole(PrintWriter writer, User user) {\n+    private void writeRole(PrintWriter writer, User user, String role) {\n@@ -121,1 +209,1 @@\n-        writer.print(user.role);\n+        writer.print(role);\n@@ -130,1 +218,1 @@\n-        writer.print(user.platformId);\n+        writer.print(user.forgeId);\n@@ -142,6 +230,1 @@\n-\n-            writeContributor(writer, lead);\n-            authors.forEach(user -> writeContributor(writer, user));\n-            committers.forEach(user -> writeContributor(writer, user));\n-            reviewers.forEach(user -> writeContributor(writer, user));\n-\n+            users.values().forEach(user -> writeContributor(writer, user));\n@@ -155,10 +238,10 @@\n-        try (var writer = new PrintWriter(new FileWriter(groupFolder.resolve(\"main.xml\").toFile()))) {\n-            writer.println(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\");\n-            writer.println(\"<group name=\\\"main\\\" full-name=\\\"Main project\\\">\");\n-\n-            writeMember(writer, lead);\n-            authors.forEach(user -> writeMember(writer, user));\n-            committers.forEach(user -> writeMember(writer, user));\n-            reviewers.forEach(user -> writeMember(writer, user));\n-\n-            writer.println(\"<\/group>\");\n+        for (var groupEntry : groups.entrySet()) {\n+            var name = groupEntry.getKey();\n+            var group = groupEntry.getValue();\n+            try (var writer = new PrintWriter(new FileWriter(groupFolder.resolve(name + \".xml\").toFile()))) {\n+                writer.println(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\");\n+                writer.println(\"<group name=\\\"\" + name + \"\\\" full-name=\\\"\" + name + \" group\\\">\");\n+                writeMember(writer, group.lead, \"lead\");\n+                group.members.forEach(user -> writeMember(writer, user, \"member\"));\n+                writer.println(\"<\/group>\");\n+            }\n@@ -171,10 +254,12 @@\n-        try (var writer = new PrintWriter(new FileWriter(projectFolder.resolve(\"test.xml\").toFile()))) {\n-            writer.println(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\");\n-            writer.println(\"<project name=\\\"test\\\" full-name=\\\"Test Project\\\" sponsor=\\\"main\\\">\");\n-\n-            writeRole(writer, lead);\n-            authors.forEach(user -> writeRole(writer, user));\n-            committers.forEach(user -> writeRole(writer, user));\n-            reviewers.forEach(user -> writeRole(writer, user));\n-\n-            writer.println(\"<\/project>\");\n+        for (var projectEntry : projects.entrySet()) {\n+            String name = projectEntry.getKey();\n+            var project = projectEntry.getValue();\n+            try (var writer = new PrintWriter(new FileWriter(projectFolder.resolve(name + \".xml\").toFile()))) {\n+                writer.println(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\");\n+                writer.println(\"<project name=\\\"\" + name + \"\\\" full-name=\\\"\" + name + \" Project\\\" sponsor=\\\"main\\\">\");\n+                writeRole(writer, project.lead, \"lead\");\n+                project.authors.forEach(user -> writeRole(writer, user, \"author\"));\n+                project.committers.forEach(user -> writeRole(writer, user, \"committer\"));\n+                project.reviewers.forEach(user -> writeRole(writer, user, \"reviewer\"));\n+                writer.println(\"<\/project>\");\n+            }\n@@ -190,6 +275,1 @@\n-\n-            writeMapping(writer, lead);\n-            authors.forEach(user -> writeMapping(writer, user));\n-            committers.forEach(user -> writeMapping(writer, user));\n-            reviewers.forEach(user -> writeMapping(writer, user));\n-\n+            users.values().forEach(user -> writeMapping(writer, user));\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/CensusBuilder.java","additions":153,"deletions":73,"binary":false,"changes":226,"status":"modified"},{"patch":"@@ -73,0 +73,3 @@\n+    \/\/ Map of org to map of user to MemberState\n+    private final Map<String, Map<String, MemberState>> organizationMembers = new HashMap<>();\n+\n@@ -166,0 +169,7 @@\n+    @Override\n+    public Optional<HostUser> userById(String id) {\n+        return data.users.stream()\n+                .filter(user -> user.id().equals(id))\n+                .findAny();\n+    }\n+\n@@ -296,0 +306,25 @@\n+\n+    @Override\n+    public List<HostUser> groupMembers(String group) {\n+        return organizationMembers.getOrDefault(group, Map.of()).keySet().stream()\n+                .map(u -> user(u).orElseThrow())\n+                .toList();\n+    }\n+\n+    @Override\n+    public void addGroupMember(String group, HostUser user) {\n+        organizationMembers.putIfAbsent(group, new HashMap<>());\n+        organizationMembers.get(group).put(user.username(), MemberState.PENDING);\n+    }\n+\n+    \/**\n+     * Test method to update an existing org member to active status\n+     *\/\n+    public void confirmGroupMember(String group, String user) {\n+        organizationMembers.get(group).put(user, MemberState.ACTIVE);\n+    }\n+\n+    @Override\n+    public MemberState groupMemberState(String group, HostUser user) {\n+        return organizationMembers.getOrDefault(group, Map.of()).getOrDefault(user.username(), MemberState.MISSING);\n+    }\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestHost.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -50,2 +50,2 @@\n-    private Map<String, Boolean> collaborators = new HashMap<>();\n-    private List<Label> labels = new ArrayList<>();\n+    private final List<Collaborator> collaborators = new ArrayList<>();\n+    private final List<Label> labels = new ArrayList<>();\n@@ -54,1 +54,2 @@\n-    private Map<String, ZonedDateTime> deployKeys = new HashMap<>();\n+    private final Map<String, ZonedDateTime> deployKeys = new HashMap<>();\n+    private String namespace = \"test\";\n@@ -163,0 +164,9 @@\n+    @Override\n+    public String group() {\n+        if (projectName.contains(\"\/\")) {\n+            return projectName.split(\"\/\")[0];\n+        } else {\n+            return \"\";\n+        }\n+    }\n+\n@@ -240,1 +250,8 @@\n-        return \"test\";\n+        return namespace;\n+    }\n+\n+    \/**\n+     * Allow tests to user a different namespace\n+     *\/\n+    public void setNamespace(String namespace) {\n+        this.namespace = namespace;\n@@ -400,0 +417,5 @@\n+    @Override\n+    public List<Collaborator> collaborators() {\n+        return collaborators;\n+    }\n+\n@@ -402,1 +424,1 @@\n-        collaborators.put(user.username(), canPush);\n+        collaborators.add(new Collaborator(user, canPush));\n@@ -407,1 +429,5 @@\n-        return collaborators.getOrDefault(user.username(), false);\n+        return collaborators.stream()\n+                .filter(c -> c.user().equals(user))\n+                .findFirst()\n+                .map(Collaborator::canPush)\n+                .orElse(false);\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestHostedRepository.java","additions":32,"deletions":6,"binary":false,"changes":38,"status":"modified"}]}