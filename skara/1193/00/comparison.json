{"files":[{"patch":"@@ -211,0 +211,6 @@\n+        \/\/ Filter for tags that appear in non pr-branches\n+        var branches = repository.branches();\n+        newTags = newTags.stream()\n+                .filter(tag -> tagInNonPrBranch(tag, branches, localRepo))\n+                .toList();\n+\n@@ -298,0 +304,16 @@\n+    private boolean tagInNonPrBranch(Tag tag, List<HostedBranch> branches, Repository localRepository) {\n+        try {\n+            for (var branch : branches) {\n+                if (!PreIntegrations.isPreintegrationBranch(branch.name())) {\n+                    var hash = localRepository.resolve(tag).orElseThrow();\n+                    if (localRepository.isAncestor(hash, branch.hash())) {\n+                        return true;\n+                    }\n+                }\n+            }\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+        return false;\n+    }\n+\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/RepositoryWorkItem.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -0,0 +1,101 @@\n+package org.openjdk.skara.bots.notify;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInfo;\n+import org.openjdk.skara.forge.HostedRepository;\n+import org.openjdk.skara.test.*;\n+import org.openjdk.skara.vcs.*;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.openjdk.skara.bots.notify.TestUtils.createBranchStorage;\n+import static org.openjdk.skara.bots.notify.TestUtils.createTagStorage;\n+\n+public class RepositoryWorkItemTests {\n+\n+    private static class TestNotifier implements RepositoryListener {\n+\n+        private final List<Tag> newTags = new ArrayList<>();\n+\n+        @Override\n+        public void onNewTagCommit(HostedRepository repository, Repository localRepository,\n+                                   Path scratchPath, Commit commit, Tag tag, Tag.Annotated annotation) {\n+            newTags.add(tag);\n+        }\n+\n+        @Override\n+        public String name() {\n+            return \"test\";\n+        }\n+\n+        @Override\n+        public boolean idempotent() {\n+            return true;\n+        }\n+    }\n+\n+    \/**\n+     * Tests that the NotifierBot skips notifying on tags that only show up in\n+     * pr branches.\n+     *\/\n+    @Test\n+    void filterTagsInNonPrBranches(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var repo = credentials.getHostedRepository();\n+            var repoFolder = tempFolder.path().resolve(\"repo\");\n+            var localRepo = CheckableRepository.init(repoFolder, repo.repositoryType());\n+            credentials.commitLock(localRepo);\n+            localRepo.pushAll(repo.url());\n+\n+            var tagStorage = createTagStorage(repo);\n+            var branchStorage = createBranchStorage(repo);\n+            var storageFolder = tempFolder.path().resolve(\"storage\");\n+\n+            var notifyBot = NotifyBot.newBuilder()\n+                    .repository(repo)\n+                    .storagePath(storageFolder)\n+                    .branches(Pattern.compile(\"master\"))\n+                    .tagStorageBuilder(tagStorage)\n+                    .branchStorageBuilder(branchStorage)\n+                    .integratorId(repo.forge().currentUser().id())\n+                    .build();\n+            var testNotifier = new TestNotifier();\n+            notifyBot.registerRepositoryListener(testNotifier);\n+\n+            \/\/ Create an initial tag to start history tracking. The notifier will never notify the first tag\n+            var masterHash = localRepo.head();\n+            localRepo.tag(masterHash, \"initial-tag\", \"Tagging initial tag\", \"testauthor\", \"ta@none.none\");\n+            localRepo.push(masterHash, repo.url(), \"master\", false, true);\n+\n+            \/\/ Run bot to initialize notification history\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ Create a \"pr\"-branch with a commit in it and tag that commit\n+            var prBranchHash = CheckableRepository.appendAndCommit(localRepo, \"Another line\", \"Change in pr branch\");\n+            localRepo.tag(prBranchHash, \"pr-tag\", \"Tagging change in pr branch\", \"testauthor\", \"ta@none.none\");\n+            localRepo.push(prBranchHash, repo.url(), \"pr\/4711\", false, true);\n+\n+            \/\/ Run the bot and verify that notifier is not called\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+            assertTrue(testNotifier.newTags.isEmpty(), \"Notifier called on pr branch: \" + testNotifier.newTags);\n+\n+            \/\/ Create a commit in master branch and tag it\n+            localRepo.checkout(masterHash);\n+            var masterTaggedHash = CheckableRepository.appendAndCommit(localRepo, \"Master line\", \"Change in master branch\");\n+            localRepo.tag(masterTaggedHash, \"master-tag\", \"Tagging change in master branch\", \"testauthor\", \"ta@none.none\");\n+            localRepo.push(masterTaggedHash, repo.url(), \"master\", false, true);\n+\n+            \/\/ Run the bot and verify that notifier is called for master branch\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+            assertEquals(testNotifier.newTags.size(), 1, \"Notifier not called on master branch: \" + testNotifier.newTags);\n+            assertEquals(\"master-tag\", testNotifier.newTags.get(0).name(), \"Notified wrong tag\");\n+        }\n+    }\n+}\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/RepositoryWorkItemTests.java","additions":101,"deletions":0,"binary":false,"changes":101,"status":"added"}]}