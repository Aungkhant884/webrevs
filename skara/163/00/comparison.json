{"files":[{"patch":"@@ -38,1 +38,2 @@\n-                                CommitterConfiguration.DEFAULT);\n+                                CommitterConfiguration.DEFAULT,\n+                                IssuesConfiguration.DEFAULT);\n@@ -46,0 +47,1 @@\n+    private final IssuesConfiguration issues;\n@@ -52,1 +54,2 @@\n-                        CommitterConfiguration committer) {\n+                        CommitterConfiguration committer,\n+                        IssuesConfiguration issues) {\n@@ -59,0 +62,1 @@\n+        this.issues = issues;\n@@ -103,0 +107,4 @@\n+    public IssuesConfiguration issues() {\n+        return issues;\n+    }\n+\n@@ -119,0 +127,1 @@\n+        var issues = IssuesConfiguration.parse(s.subsection(IssuesConfiguration.name()));\n@@ -120,1 +129,1 @@\n-        return new ChecksConfiguration(error, warning, whitespace, reviewers, merge, committer);\n+        return new ChecksConfiguration(error, warning, whitespace, reviewers, merge, committer, issues);\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/ChecksConfiguration.java","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import java.util.regex.Pattern;\n@@ -45,0 +46,1 @@\n+        var metadata = CommitIssue.metadata(commit, message, conf, this);\n@@ -46,2 +48,1 @@\n-            var metadata = CommitIssue.metadata(commit, message, conf, this);\n-            log.finer(\"isuse: no reference to a JBS issue\");\n+            log.finer(\"issue: no reference to a JBS issue\");\n@@ -51,0 +52,7 @@\n+        var pattern = Pattern.compile(conf.checks().issues().pattern());\n+        for (var issue : message.issues()) {\n+            if (!pattern.matcher(issue.toString()).matches()) {\n+                return iterator(new IssuesIssue(metadata));\n+            }\n+        }\n+\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/IssuesCheck.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.jcheck;\n+\n+import org.openjdk.skara.ini.Section;\n+\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+public class IssuesConfiguration {\n+    static final IssuesConfiguration DEFAULT =\n+        new IssuesConfiguration(\"^(([A-Z][A-Z0-9]+-)?[0-9]+): (\\\\S.*)$\");\n+\n+    private final String pattern;\n+\n+    IssuesConfiguration(String pattern) {\n+        this.pattern = pattern;\n+    }\n+\n+    public String pattern() {\n+        return pattern;\n+    }\n+\n+    static String name() {\n+        return \"issues\";\n+    }\n+\n+    static IssuesConfiguration parse(Section s) {\n+        if (s == null) {\n+            return DEFAULT;\n+        }\n+\n+        var pattern = s.get(\"pattern\", DEFAULT.pattern());\n+        return new IssuesConfiguration(pattern);\n+    }\n+}\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/IssuesConfiguration.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"},{"patch":"@@ -128,0 +128,3 @@\n+        config.add(\"[checks \\\"issues\\\"]\");\n+        config.add(\"pattern=^([124-8][0-9]{6}): (\\\\S.*)$\");\n+\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/JCheckConfiguration.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+    \/\/ Default issue pattern: optional prefix followed by 1 or more digits\n@@ -51,0 +52,16 @@\n+    \/\/ Issue pattern with a required prefix\n+    private static final List<String> CONFIGURATION2 = List.of(\n+        \"[general]\",\n+        \"project = test\",\n+        \"[checks]\",\n+        \"error = issues\",\n+        \"[checks \\\"issues\\\"]\",\n+        \"pattern = ^(PROJ-[1-9][0-9]+): (\\\\S.*)$\"\n+    );\n+\n+    \/\/ Default issue pattern for legacy conf: 7 digit starting with [124-8]\n+    private static final List<String> CONFIGURATION3 = List.of(\n+        \"project=jdk\",\n+        \"bugids=dup\"\n+    );\n+\n@@ -55,0 +72,8 @@\n+\n+    private static JCheckConfiguration conf2() {\n+        return JCheckConfiguration.parse(CONFIGURATION2);\n+    }\n+\n+    private static JCheckConfiguration conf3() {\n+        return JCheckConfiguration.parse(CONFIGURATION3);\n+    }\n@@ -94,1 +119,1 @@\n-        var commit = commit(List.of(\"0123457: A bug\"));\n+        var commit = commit(List.of(\"1234570: A bug\"));\n@@ -102,1 +127,1 @@\n-        var commit = commit(List.of(\"0123457: A bug\", \"12345678: Another bug\"));\n+        var commit = commit(List.of(\"1234570: A bug\", \"1234567: Another bug\"));\n@@ -108,0 +133,212 @@\n+\n+    @Test\n+    void issueWithLeadingZeroShouldPass() {\n+        var commit = commit(List.of(\"0123456: A bug\"));\n+        var message = message(commit);\n+        var check = new IssuesCheck(utils);\n+        var issues = toList(check.check(commit, message, conf()));\n+\n+        assertEquals(0, issues.size());\n+    }\n+\n+    @Test\n+    void issueWithTooFewDigitsShouldPass() {\n+        var commit = commit(List.of(\"123456: A bug\"));\n+        var message = message(commit);\n+        var check = new IssuesCheck(utils);\n+        var issues = toList(check.check(commit, message, conf()));\n+\n+        assertEquals(0, issues.size());\n+    }\n+\n+    @Test\n+    void issueWithTooManyDigitsShouldPass() {\n+        var commit = commit(List.of(\"12345678: A bug\"));\n+        var message = message(commit);\n+        var check = new IssuesCheck(utils);\n+        var issues = toList(check.check(commit, message, conf()));\n+\n+        assertEquals(0, issues.size());\n+    }\n+\n+    @Test\n+    void issueWithPrefixShouldPass() {\n+        var commit = commit(List.of(\"JDK-7654321: A bug\"));\n+        var message = message(commit);\n+        var check = new IssuesCheck(utils);\n+        var issues = toList(check.check(commit, message, conf()));\n+\n+        assertEquals(0, issues.size());\n+    }\n+\n+    @Test\n+    void issueWithPrefixConf2ShouldPass() {\n+        var commit = commit(List.of(\"PROJ-1234567: A bug\"));\n+        var message = message(commit);\n+        var check = new IssuesCheck(utils);\n+        var issues = toList(check.check(commit, message, conf2()));\n+\n+        assertEquals(0, issues.size());\n+    }\n+\n+    @Test\n+    void issueWithoutPrefixConf2ShouldFail() {\n+        var commit = commit(List.of(\"1234567: A bug\"));\n+        var message = message(commit);\n+        var check = new IssuesCheck(utils);\n+        var issues = toList(check.check(commit, message, conf2()));\n+\n+        assertEquals(1, issues.size());\n+        assertTrue(issues.get(0) instanceof IssuesIssue);\n+        var issue = (IssuesIssue) issues.get(0);\n+        assertEquals(commit, issue.commit());\n+        assertEquals(message, issue.message());\n+        assertEquals(Severity.ERROR, issue.severity());\n+        assertEquals(check.getClass(), issue.check().getClass());\n+    }\n+\n+    @Test\n+    void issueWithBadPrefixConf2ShouldFail() {\n+        var commit = commit(List.of(\"JDK-1234567: A bug\"));\n+        var message = message(commit);\n+        var check = new IssuesCheck(utils);\n+        var issues = toList(check.check(commit, message, conf2()));\n+\n+        assertEquals(1, issues.size());\n+        assertTrue(issues.get(0) instanceof IssuesIssue);\n+        var issue = (IssuesIssue) issues.get(0);\n+        assertEquals(commit, issue.commit());\n+        assertEquals(message, issue.message());\n+        assertEquals(Severity.ERROR, issue.severity());\n+        assertEquals(check.getClass(), issue.check().getClass());\n+    }\n+\n+    @Test\n+    void singleIssueReferenceConf3ShouldPass() {\n+        var commit = commit(List.of(\"1234570: A bug\"));\n+        var check = new IssuesCheck(utils);\n+        var issues = toList(check.check(commit, message(commit), conf3()));\n+        assertEquals(0, issues.size());\n+    }\n+\n+    @Test\n+    void multipleIssueReferencesConf3ShouldPass() {\n+        var commit = commit(List.of(\"1234570: A bug\", \"1234567: Another bug\"));\n+        var message = message(commit);\n+        var check = new IssuesCheck(utils);\n+        var issues = toList(check.check(commit, message, conf3()));\n+        assertEquals(0, issues.size());\n+    }\n+\n+    @Test\n+    void issueWithLeadingZeroConf3ShouldFail() {\n+        var commit = commit(List.of(\"0123456: A bug\"));\n+        var message = message(commit);\n+        var check = new IssuesCheck(utils);\n+        var issues = toList(check.check(commit, message, conf3()));\n+\n+        assertEquals(1, issues.size());\n+        assertTrue(issues.get(0) instanceof IssuesIssue);\n+        var issue = (IssuesIssue) issues.get(0);\n+        assertEquals(commit, issue.commit());\n+        assertEquals(message, issue.message());\n+        assertEquals(Severity.ERROR, issue.severity());\n+        assertEquals(check.getClass(), issue.check().getClass());\n+    }\n+\n+    @Test\n+    void issueWithLeadingNineConf3ShouldFail() {\n+        var commit = commit(List.of(\"9876543: A bug\"));\n+        var message = message(commit);\n+        var check = new IssuesCheck(utils);\n+        var issues = toList(check.check(commit, message, conf3()));\n+\n+        assertEquals(1, issues.size());\n+        assertTrue(issues.get(0) instanceof IssuesIssue);\n+        var issue = (IssuesIssue) issues.get(0);\n+        assertEquals(commit, issue.commit());\n+        assertEquals(message, issue.message());\n+        assertEquals(Severity.ERROR, issue.severity());\n+        assertEquals(check.getClass(), issue.check().getClass());\n+    }\n+\n+    @Test\n+    void issueWithTooFewDigitsConf3ShouldFail() {\n+        var commit = commit(List.of(\"123456: A bug\"));\n+        var message = message(commit);\n+        var check = new IssuesCheck(utils);\n+        var issues = toList(check.check(commit, message, conf3()));\n+\n+        assertEquals(1, issues.size());\n+        assertTrue(issues.get(0) instanceof IssuesIssue);\n+        var issue = (IssuesIssue) issues.get(0);\n+        assertEquals(commit, issue.commit());\n+        assertEquals(message, issue.message());\n+        assertEquals(Severity.ERROR, issue.severity());\n+        assertEquals(check.getClass(), issue.check().getClass());\n+    }\n+\n+    @Test\n+    void issueWithTooManyDigitsConf3ShouldFail() {\n+        var commit = commit(List.of(\"12345678: A bug\"));\n+        var message = message(commit);\n+        var check = new IssuesCheck(utils);\n+        var issues = toList(check.check(commit, message, conf3()));\n+\n+        assertEquals(1, issues.size());\n+        assertTrue(issues.get(0) instanceof IssuesIssue);\n+        var issue = (IssuesIssue) issues.get(0);\n+        assertEquals(commit, issue.commit());\n+        assertEquals(message, issue.message());\n+        assertEquals(Severity.ERROR, issue.severity());\n+        assertEquals(check.getClass(), issue.check().getClass());\n+    }\n+\n+    @Test\n+    void issueWithPrefixConf3ShouldFail() {\n+        var commit = commit(List.of(\"JDK-7654321: A bug\"));\n+        var message = message(commit);\n+        var check = new IssuesCheck(utils);\n+        var issues = toList(check.check(commit, message, conf3()));\n+\n+        assertEquals(1, issues.size());\n+        assertTrue(issues.get(0) instanceof IssuesIssue);\n+        var issue = (IssuesIssue) issues.get(0);\n+        assertEquals(commit, issue.commit());\n+        assertEquals(message, issue.message());\n+        assertEquals(Severity.ERROR, issue.severity());\n+        assertEquals(check.getClass(), issue.check().getClass());\n+    }\n+\n+    @Test\n+    void multipleIssueReferencesFirstBadConf3ShouldFail() {\n+        var commit = commit(List.of(\"12345: A bug\", \"1234567: Another bug\"));\n+        var message = message(commit);\n+        var check = new IssuesCheck(utils);\n+        var issues = toList(check.check(commit, message, conf3()));\n+\n+        assertEquals(1, issues.size());\n+        assertTrue(issues.get(0) instanceof IssuesIssue);\n+        var issue = (IssuesIssue) issues.get(0);\n+        assertEquals(commit, issue.commit());\n+        assertEquals(message, issue.message());\n+        assertEquals(Severity.ERROR, issue.severity());\n+        assertEquals(check.getClass(), issue.check().getClass());\n+    }\n+\n+    @Test\n+    void multipleIssueReferencesLastBadConf3ShouldFail() {\n+        var commit = commit(List.of(\"1234567: A bug\", \"012: Another bug\"));\n+        var message = message(commit);\n+        var check = new IssuesCheck(utils);\n+        var issues = toList(check.check(commit, message, conf3()));\n+\n+        assertEquals(1, issues.size());\n+        assertTrue(issues.get(0) instanceof IssuesIssue);\n+        var issue = (IssuesIssue) issues.get(0);\n+        assertEquals(commit, issue.commit());\n+        assertEquals(message, issue.message());\n+        assertEquals(Severity.ERROR, issue.severity());\n+        assertEquals(check.getClass(), issue.check().getClass());\n+    }\n+\n","filename":"jcheck\/src\/test\/java\/org\/openjdk\/skara\/jcheck\/IssuesCheckTests.java","additions":239,"deletions":2,"binary":false,"changes":241,"status":"modified"}]}