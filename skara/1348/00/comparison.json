{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,1 @@\n-    private static Repository initialize(HostedRepository repo, String ref, Path folder) {\n+    static CensusInstance create(HostedRepository censusRepo, String censusRef, String namespaceName) {\n@@ -44,1 +44,2 @@\n-            return Repository.materialize(folder, repo.url(), \"+\" + ref + \":\" + \"issue_census_\" + repo.name());\n+            var namespace = Census.parseNamespace(censusRepo, censusRef, namespaceName);\n+            return new CensusInstance(namespace);\n@@ -46,32 +47,1 @@\n-            throw new RuntimeException(\"Failed to retrieve census to \" + folder, e);\n-        }\n-    }\n-\n-    private static Namespace namespace(Census census, String hostNamespace) {\n-        var namespace = census.namespace(hostNamespace);\n-        if (namespace == null) {\n-            throw new RuntimeException(\"Namespace not found in census: \" + hostNamespace);\n-        }\n-\n-        return namespace;\n-    }\n-\n-    static CensusInstance create(HostedRepository censusRepo, String censusRef, Path folder, String namespace) {\n-        var repoName = censusRepo.url().getHost() + \"\/\" + censusRepo.name();\n-        var repoFolder = folder.resolve(URLEncoder.encode(repoName, StandardCharsets.UTF_8));\n-        try {\n-            var localRepo = Repository.get(repoFolder)\n-                                      .or(() -> Optional.of(initialize(censusRepo, censusRef, repoFolder)))\n-                                      .orElseThrow();\n-            var hash = localRepo.fetch(censusRepo.url(), censusRef, false);\n-            localRepo.checkout(hash, true);\n-        } catch (IOException e) {\n-            initialize(censusRepo, censusRef, repoFolder);\n-        }\n-\n-        try {\n-            var census = Census.parse(repoFolder);\n-            var ns = namespace(census, namespace);\n-            return new CensusInstance(ns);\n-        } catch (IOException e) {\n-            throw new UncheckedIOException(\"Cannot parse census at \" + repoFolder, e);\n+            throw new UncheckedIOException(\"Cannot parse census namespace from \" + censusRepo.name(), e);\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/CensusInstance.java","additions":5,"deletions":35,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -81,0 +81,3 @@\n+    \/\/ Lazy loaded\n+    private CensusInstance census = null;\n+\n@@ -111,0 +114,7 @@\n+    private CensusInstance getCensus() {\n+        if (census == null) {\n+            census = CensusInstance.create(censusRepository, censusRef, namespace);\n+        }\n+        return census;\n+    }\n+\n@@ -115,2 +125,1 @@\n-        var censusInstance = CensusInstance.create(censusRepository, censusRef, scratchPath, namespace);\n-        var ns = censusInstance.namespace();\n+        var ns = getCensus().namespace();\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifier.java","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -522,1 +522,1 @@\n-            var allReviewers = PullRequestUtils.reviewerNames(reviews, namespace);\n+            var allReviewers = CheckablePullRequest.reviewerNames(reviews, namespace);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-        var reviewers = PullRequestUtils.reviewerNames(eligibleReviews, namespace);\n+        var reviewers = reviewerNames(eligibleReviews, namespace);\n@@ -74,1 +74,1 @@\n-            var allReviewers = PullRequestUtils.reviewerNames(activeReviews, namespace);\n+            var allReviewers = reviewerNames(activeReviews, namespace);\n@@ -298,0 +298,8 @@\n+\n+    public static Set<String> reviewerNames(List<Review> reviews, Namespace namespace) {\n+        return reviews.stream()\n+                .map(review -> namespace.get(review.reviewer().id()))\n+                .filter(Objects::nonNull)\n+                .map(Contributor::username)\n+                .collect(Collectors.toCollection(LinkedHashSet::new));\n+    }\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckablePullRequest.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -95,1 +95,1 @@\n-        var authenticatedReviewers = PullRequestUtils.reviewerNames(pr.reviews(), namespace);\n+        var authenticatedReviewers = CheckablePullRequest.reviewerNames(pr.reviews(), namespace);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/ReviewerCommand.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,2 @@\n+        requires 'org.openjdk.skara.test'\n+        requires 'org.openjdk.skara.vcs'\n@@ -34,0 +36,6 @@\n+    implementation project(':forge')\n+    implementation project(':issuetracker')\n+    implementation project(':host')\n+\n+    testImplementation project(':test')\n+    testImplementation project(':vcs')\n","filename":"census\/build.gradle","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,1 @@\n+    requires static org.openjdk.skara.forge;\n","filename":"census\/src\/main\/java\/module-info.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+import org.openjdk.skara.forge.HostedRepository;\n@@ -215,0 +216,19 @@\n+\n+    \/**\n+     * Initializes a single Namespace directly from a hosted repository. This works\n+     * because the files needed to populate a single namespace are statically known.\n+     * A full Census needs to discover files by listing them, which makes\n+     * initialization from a remote repository inconvenient.\n+     *\n+     * @param repository HostedRepository to initialize from\n+     * @param ref The reference in the repository to get data from\n+     * @param name Name of namespace to initialize\n+     * @return Just the named Namespace from the Census hosted in the repository\n+     *\/\n+    public static Namespace parseNamespace(HostedRepository repository, String ref, String name) throws IOException {\n+        log.finer(\"Parsing namespace from repository \" + repository.name());\n+        var contributorsData = repository.fileContents(\"contributors.xml\", ref);\n+        var contributors = Contributors.parse(contributorsData);\n+        var namespaceData = repository.fileContents(\"namespaces\/\" + name + \".xml\", ref);\n+        return Namespace.parse(namespaceData, contributors);\n+    }\n","filename":"census\/src\/main\/java\/org\/openjdk\/skara\/census\/Census.java","additions":21,"deletions":1,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,2 @@\n+import org.w3c.dom.Document;\n+\n@@ -35,1 +37,2 @@\n-        var result = new ArrayList<Contributor>();\n+        return parse(XML.parse(p));\n+    }\n@@ -37,1 +40,6 @@\n-        var document = XML.parse(p);\n+    static Map<String, Contributor> parse(String s) throws IOException {\n+        return parse(XML.parse(s));\n+    }\n+\n+    private static Map<String, Contributor> parse(Document document) {\n+        var result = new ArrayList<Contributor>();\n","filename":"census\/src\/main\/java\/org\/openjdk\/skara\/census\/Contributors.java","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import org.w3c.dom.Document;\n@@ -61,0 +62,9 @@\n+        return parse(document, contributors);\n+    }\n+\n+    static Namespace parse(String s, Map<String, Contributor> contributors) throws IOException {\n+        var document = XML.parse(s);\n+        return parse(document, contributors);\n+    }\n+\n+    private static Namespace parse(Document document, Map<String, Contributor> contributors) throws IOException {\n","filename":"census\/src\/main\/java\/org\/openjdk\/skara\/census\/Namespace.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,4 @@\n+import org.junit.jupiter.api.TestInfo;\n+import org.openjdk.skara.test.HostCredentials;\n+import org.openjdk.skara.test.TemporaryDirectory;\n+import org.openjdk.skara.vcs.Repository;\n@@ -178,0 +182,50 @@\n+\n+    @Test\n+    void parseNamespace(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var censusRepo = credentials.getHostedRepository();\n+\n+            var repoPath = tempFolder.path().resolve(\"census\");\n+            var localRepo = Repository.init(repoPath, censusRepo.repositoryType());\n+\n+            var namespacesDir = repoPath.resolve(\"namespaces\");\n+            Files.createDirectories(namespacesDir);\n+\n+            var namespaceFile = namespacesDir.resolve(\"aspace.xml\");\n+            var namespaceContent = List.of(\n+                    \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\",\n+                    \"<namespace name=\\\"aspace\\\">\",\n+                    \"    <user id=\\\"1234567\\\" census=\\\"user1\\\" \/>\",\n+                    \"    <user id=\\\"2345678\\\" census=\\\"user2\\\" \/>\",\n+                    \"<\/namespace>\");\n+            Files.write(namespaceFile, namespaceContent);\n+            localRepo.add(namespaceFile);\n+\n+            var contributorsFile = repoPath.resolve(\"contributors.xml\");\n+            var contributorsContent = List.of(\n+                    \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\",\n+                    \"<contributors>\",\n+                    \"    <contributor username=\\\"user1\\\" full-name=\\\"User One\\\" \/>\",\n+                    \"    <contributor username=\\\"user2\\\" full-name=\\\"User Two\\\" \/>\",\n+                    \"    <contributor username=\\\"user3\\\" full-name=\\\"User Three\\\" \/>\",\n+                    \"    <contributor username=\\\"user4\\\" full-name=\\\"User Four\\\" \/>\",\n+                    \"<\/contributors>\");\n+            Files.write(contributorsFile, contributorsContent);\n+            localRepo.add(contributorsFile);\n+\n+            var masterHash = localRepo.commit(\"Add namespace and contributors\", \"testauthor\", \"ta@none.none\");\n+\n+            localRepo.push(masterHash, censusRepo.url(), \"censusref\", true);\n+\n+            var namespace = Census.parseNamespace(censusRepo, \"censusref\", \"aspace\");\n+\n+            var c1 = new Contributor(\"user1\", \"User One\");\n+            var c2 = new Contributor(\"user2\", \"User Two\");\n+            assertEquals(\"aspace\", namespace.name());\n+            assertEquals(c1, namespace.get(\"1234567\"));\n+            assertEquals(c2, namespace.get(\"2345678\"));\n+            assertEquals(\"1234567\", namespace.get(c1));\n+            assertEquals(\"2345678\", namespace.get(c2));\n+        }\n+    }\n","filename":"census\/src\/test\/java\/org\/openjdk\/skara\/census\/CensusTests.java","additions":55,"deletions":1,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,0 @@\n-    implementation project(':census')\n","filename":"forge\/build.gradle","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-    requires org.openjdk.skara.census;\n","filename":"forge\/src\/main\/java\/module-info.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-import org.openjdk.skara.census.*;\n@@ -203,8 +202,0 @@\n-    public static Set<String> reviewerNames(List<Review> reviews, Namespace namespace) {\n-        return reviews.stream()\n-                      .map(review -> namespace.get(review.reviewer().id()))\n-                      .filter(Objects::nonNull)\n-                      .map(Contributor::username)\n-                      .collect(Collectors.toCollection(LinkedHashSet::new));\n-    }\n-\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/PullRequestUtils.java","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-        requires 'jdk.httpserver'\n@@ -35,8 +34,0 @@\n-    implementation project(':vcs')\n-    implementation project(':census')\n-    implementation project(':json')\n-    implementation project(':ini')\n-    implementation project(':process')\n-    implementation project(':email')\n-    implementation project(':network')\n-\n","filename":"host\/build.gradle","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,10 +24,0 @@\n-    requires org.openjdk.skara.vcs;\n-    requires org.openjdk.skara.census;\n-    requires org.openjdk.skara.json;\n-    requires org.openjdk.skara.ini;\n-    requires org.openjdk.skara.process;\n-    requires org.openjdk.skara.email;\n-    requires org.openjdk.skara.network;\n-    requires java.net.http;\n-    requires java.logging;\n-\n","filename":"host\/src\/main\/java\/module-info.java","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-    implementation project(':census')\n","filename":"issuetracker\/build.gradle","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-    requires org.openjdk.skara.census;\n","filename":"issuetracker\/src\/main\/java\/module-info.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}