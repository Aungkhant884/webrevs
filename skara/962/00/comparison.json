{"files":[{"patch":"@@ -54,0 +54,1 @@\n+    implementation project(':bots:testinfo')\n@@ -89,1 +90,2 @@\n-                   'org.openjdk.skara.bots.censussync']\n+                   'org.openjdk.skara.bots.censussync',\n+                   'org.openjdk.skara.bots.testinfo']\n","filename":"bots\/cli\/build.gradle","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -420,23 +420,0 @@\n-        if (pr.sourceRepository().isPresent()) {\n-            var sourceRepo = pr.sourceRepository().get();\n-            var checks = sourceRepo.allChecks(pr.headHash());\n-\n-            var resultSummary = TestResults.summarize(checks);\n-            if (resultSummary.isPresent()) {\n-                progressBody.append(resultSummary.get());\n-                var expiration = TestResults.expiresIn(checks);\n-                expiration.ifPresent(this::setExpiration);\n-            } else {\n-                try {\n-                    var headCommit = localRepo.commitMetadata(pr.headHash());\n-                    if (headCommit.isPresent()) {\n-                        \/\/ If the commit is recent, perhaps test results will appear soon\n-                        if (headCommit.get().committed().isAfter(ZonedDateTime.now().minus(Duration.ofDays(1)))) {\n-                            setExpiration(Duration.ofMinutes(10));\n-                        }\n-                    }\n-                } catch (IOException ignored) {\n-                }\n-            }\n-        }\n-\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":0,"deletions":23,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -1,183 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.skara.bots.pr;\n-\n-import org.openjdk.skara.forge.*;\n-\n-import java.time.*;\n-import java.util.*;\n-import java.util.function.Function;\n-import java.util.stream.Collectors;\n-\n-public class TestResults {\n-    private static String platformFromName(String checkName) {\n-        var checkFlavorStart = checkName.indexOf(\"(\");\n-        if (checkFlavorStart > 0) {\n-            return checkName.substring(0, checkFlavorStart - 1).strip();\n-        } else {\n-            return checkName.strip();\n-        }\n-    }\n-\n-    private static String flavorFromName(String checkName) {\n-        var checkFlavorStart = checkName.indexOf(\"(\");\n-        var checkFlavorEnd = checkName.lastIndexOf(\")\");\n-        if (checkFlavorStart > 0 && checkFlavorEnd > checkFlavorStart) {\n-            var flavor = checkName.substring(checkFlavorStart + 1, checkFlavorEnd).strip().toLowerCase();\n-            for (int i = 1; i < 10; ++i) {\n-                if (flavor.contains(\"tier\" + i)) {\n-                    return \"Test (tier\" + i + \")\";\n-                }\n-            }\n-            if (flavor.contains(\"build\")) {\n-                return \"Build\";\n-            }\n-        }\n-        \/\/ Fallback value\n-        return \"Build \/ test\";\n-    }\n-\n-    private static boolean ignoredCheck(String checkName) {\n-        var lcName = checkName.toLowerCase();\n-        return lcName.contains(\"jcheck\") || lcName.contains(\"prerequisites\") || lcName.contains(\"post-process\");\n-    }\n-\n-    \/\/ Retain only the latest when there are multiple checks with the same name\n-    private static Collection<Check> latestChecks(List<Check> checks) {\n-        var latestChecks = checks.stream()\n-                                 .filter(check -> !ignoredCheck(check.name()))\n-                                 .filter(check -> check.status() != CheckStatus.CANCELLED)\n-                                 .sorted(Comparator.comparing(Check::startedAt, ZonedDateTime::compareTo))\n-                                 .collect(Collectors.toMap(Check::name, Function.identity(), (a, b) -> b, LinkedHashMap::new));\n-        return latestChecks.values();\n-    }\n-\n-    static Optional<String> summarize(List<Check> checks) {\n-        var latestChecks = latestChecks(checks);\n-        if (latestChecks.isEmpty()) {\n-            return Optional.empty();\n-        }\n-\n-        var platforms = latestChecks.stream()\n-                                    .map(check -> platformFromName(check.name()))\n-                                    .collect(Collectors.toCollection(TreeSet::new));\n-        var flavors = latestChecks.stream()\n-                                  .map(check -> flavorFromName(check.name()))\n-                                  .collect(Collectors.toCollection(TreeSet::new));\n-        if (platforms.isEmpty() || flavors.isEmpty()) {\n-            return Optional.empty();\n-        }\n-\n-        var platformFlavors = latestChecks.stream()\n-                                          .collect(Collectors.groupingBy(check -> platformFromName(check.name()))).entrySet().stream()\n-                                          .collect(Collectors.toMap(Map.Entry::getKey,\n-                                                                    entry -> entry.getValue().stream()\n-                                                                                  .collect(Collectors.groupingBy(check -> flavorFromName(check.name())))));\n-\n-        var resultsBody = new StringBuilder();\n-        resultsBody.append(\"\\n\\n### Testing\\n\\n\");\n-        resultsBody.append(\"|     |\");\n-        platforms.forEach(platform -> resultsBody.append(\" \").append(platform).append(\" |\"));\n-        resultsBody.append(\"\\n| --- |\");\n-        platforms.forEach(platform -> resultsBody.append(\" ----- |\"));\n-        for (var flavor : flavors) {\n-            resultsBody.append(\"\\n| \").append(flavor).append(\" |\");\n-            for (var platform : platforms) {\n-                var platformChecks = platformFlavors.get(platform);\n-                var flavorChecks = platformChecks.get(flavor);\n-                if (flavorChecks != null) {\n-                    int failureCount = 0;\n-                    int pendingCount = 0;\n-                    int successCount = 0;\n-                    for (var check : flavorChecks) {\n-                        switch (check.status()) {\n-                            case IN_PROGRESS:\n-                                pendingCount++;\n-                                break;\n-                            case FAILURE:\n-                                failureCount++;\n-                                break;\n-                            case SUCCESS:\n-                                successCount++;\n-                                break;\n-                        }\n-                    }\n-                    int total = failureCount + pendingCount + successCount;\n-                    if (failureCount > 0) {\n-                        resultsBody.append(\" ❌\");\n-                        resultsBody.append(\" (\").append(failureCount).append(\"\/\").append(total).append(\" failed) |\");\n-                    } else if (pendingCount > 0) {\n-                        resultsBody.append(\" ⏳\");\n-                        resultsBody.append(\" (\").append(pendingCount).append(\"\/\").append(total).append(\" running) |\");\n-                    } else {\n-                        resultsBody.append(\" ✔️\");\n-                        resultsBody.append(\" (\").append(successCount).append(\"\/\").append(total).append(\" passed) |\");\n-                    }\n-\n-                } else {\n-                    resultsBody.append(\"    | \");\n-                }\n-            }\n-        }\n-\n-        var failedChecks = latestChecks.stream()\n-                                       .filter(check -> check.status() == CheckStatus.FAILURE)\n-                                       .sorted(Comparator.comparing(Check::name))\n-                                       .collect(Collectors.toList());\n-        if (!failedChecks.isEmpty()) {\n-            resultsBody.append(\"\\n\\n**Failed test task\");\n-            if (failedChecks.size() > 1) {\n-                resultsBody.append(\"s\");\n-            }\n-            resultsBody.append(\"**\");\n-            for (var failedCheck : failedChecks) {\n-                resultsBody.append(\"\\n- \");\n-                if (failedCheck.details().isPresent()) {\n-                    resultsBody.append(\"[\");\n-                    resultsBody.append(failedCheck.name());\n-                    resultsBody.append(\"](\");\n-                    resultsBody.append(failedCheck.details().get().toString());\n-                    resultsBody.append(\")\");\n-                } else {\n-                    resultsBody.append(\"`\");\n-                    resultsBody.append(failedCheck.name());\n-                    resultsBody.append(\"`\");\n-                }\n-            }\n-        }\n-\n-        return Optional.of(resultsBody.toString());\n-    }\n-\n-    static Optional<Duration> expiresIn(List<Check> checks) {\n-        var latestChecks = latestChecks(checks);\n-        var needRefresh = latestChecks.stream()\n-                                      .filter(check -> check.status() == CheckStatus.IN_PROGRESS)\n-                                      .findAny();\n-        if (needRefresh.isPresent()) {\n-            return Optional.of(Duration.ofMinutes(5));\n-        } else {\n-            return Optional.empty();\n-        }\n-    }\n-}\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/TestResults.java","additions":0,"deletions":183,"binary":false,"changes":183,"status":"deleted"},{"patch":"@@ -31,1 +31,0 @@\n-import java.net.URI;\n@@ -1757,49 +1756,0 @@\n-\n-    @Test\n-    void preSubmitInSummary(TestInfo testInfo) throws IOException {\n-        try (var credentials = new HostCredentials(testInfo);\n-             var tempFolder = new TemporaryDirectory()) {\n-            var author = credentials.getHostedRepository();\n-            var reviewer = credentials.getHostedRepository();\n-            var issues = credentials.getIssueProject();\n-\n-            var censusBuilder = credentials.getCensusBuilder()\n-                                           .addAuthor(author.forge().currentUser().id())\n-                                           .addReviewer(reviewer.forge().currentUser().id());\n-            var checkBot = PullRequestBot.newBuilder().repo(author).censusRepo(censusBuilder.build()).issueProject(issues).build();\n-\n-            \/\/ Populate the projects repository\n-            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType(), Path.of(\"appendable.txt\"),\n-                                                     Set.of(\"issues\"), null);\n-            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n-            localRepo.push(masterHash, author.url(), \"master\", true);\n-\n-            \/\/ Make a draft PR where we can add some checks\n-            var editHash = CheckableRepository.appendAndCommit(localRepo);\n-            localRepo.push(editHash, author.url(), \"preedit\", true);\n-            var draftPr = credentials.createPullRequest(author, \"master\", \"preedit\", \"This is a pull request\", true);\n-            var check1 = CheckBuilder.create(\"ps1\", editHash).title(\"PS1\");\n-            draftPr.createCheck(check1.build());\n-            draftPr.updateCheck(check1.complete(true).build());\n-            var check2 = CheckBuilder.create(\"ps2\", editHash).title(\"PS2\");\n-            draftPr.createCheck(check2.build());\n-            draftPr.updateCheck(check2.complete(false).build());\n-            var check3 = CheckBuilder.create(\"ps3\", editHash).title(\"PS3\");\n-            draftPr.createCheck(check3.build());\n-            draftPr.updateCheck(check3.details(URI.create(\"https:\/\/www.example.com\")).complete(false).build());\n-\n-            \/\/ Now make an actual PR\n-            localRepo.push(editHash, author.url(), \"edit\", true);\n-            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"This is a pull request\");\n-\n-            \/\/ Check the status\n-            TestBotRunner.runPeriodicItems(checkBot);\n-\n-            \/\/ The body should contain the issue title\n-            assertTrue(pr.body().contains(\"Testing\"));\n-            assertTrue(pr.body().contains(\"|     | ps1 | ps2 | ps3 |\"));\n-            assertTrue(pr.body().contains(\"**Failed test tasks**\"));\n-            assertTrue(pr.body().contains(\"- [ps3](https:\/\/www.example.com)\"));\n-            assertTrue(pr.body().contains(\"- `ps2`\"));\n-        }\n-    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CheckTests.java","additions":0,"deletions":50,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -1,211 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.skara.bots.pr;\n-\n-import org.junit.jupiter.api.Test;\n-import org.openjdk.skara.forge.*;\n-import org.openjdk.skara.vcs.Hash;\n-\n-import java.net.URI;\n-import java.util.List;\n-\n-import static org.junit.jupiter.api.Assertions.*;\n-\n-public class TestResultsTests {\n-    @Test\n-    void simple() {\n-        var check = CheckBuilder.create(\"Test\", Hash.zero())\n-                                .complete(true)\n-                                .build();\n-        var summary = TestResults.summarize(List.of(check));\n-        assertEquals(\"### Testing\\n\" +\n-                             \"\\n\" +\n-                             \"|     | Test |\\n\" +\n-                             \"| --- | ----- |\\n\" +\n-                             \"| Build \/ test | ✔️ (1\/1 passed) |\", summary.get().strip());\n-        assertTrue(TestResults.expiresIn(List.of(check)).isEmpty());\n-    }\n-\n-    @Test\n-    void multiPlatform() {\n-        var check1 = CheckBuilder.create(\"Linux x64 (test)\", Hash.zero())\n-                                 .complete(true)\n-                                 .build();\n-        var check2 = CheckBuilder.create(\"Windows x64 (test)\", Hash.zero())\n-                                 .complete(true)\n-                                 .build();\n-        var summary = TestResults.summarize(List.of(check1, check2));\n-        assertEquals(\"### Testing\\n\" +\n-                             \"\\n\" +\n-                             \"|     | Linux x64 | Windows x64 |\\n\" +\n-                             \"| --- | ----- | ----- |\\n\" +\n-                             \"| Build \/ test | ✔️ (1\/1 passed) | ✔️ (1\/1 passed) |\", summary.get().strip());\n-    }\n-\n-    @Test\n-    void multiFlavor() {\n-        var check1 = CheckBuilder.create(\"Linux x64 (Build)\", Hash.zero())\n-                                 .complete(true)\n-                                 .build();\n-        var check2 = CheckBuilder.create(\"Linux x64 (Test tier1)\", Hash.zero())\n-                                 .complete(true)\n-                                 .build();\n-        var summary = TestResults.summarize(List.of(check1, check2));\n-        assertEquals(\"### Testing\\n\" +\n-                             \"\\n\" +\n-                             \"|     | Linux x64 |\\n\" +\n-                             \"| --- | ----- |\\n\" +\n-                             \"| Build | ✔️ (1\/1 passed) |\\n\" +\n-                             \"| Test (tier1) | ✔️ (1\/1 passed) |\", summary.get().strip());\n-    }\n-\n-    @Test\n-    void multiEverything() {\n-        var check1 = CheckBuilder.create(\"Linux x64 (Build)\", Hash.zero())\n-                                 .complete(true)\n-                                 .build();\n-        var check2 = CheckBuilder.create(\"Linux x64 (Test tier1)\", Hash.zero())\n-                                 .complete(true)\n-                                 .build();\n-        var check3 = CheckBuilder.create(\"Windows x64 (Build)\", Hash.zero())\n-                                 .complete(true)\n-                                 .build();\n-        var check4 = CheckBuilder.create(\"Windows x64 (Test tier1)\", Hash.zero())\n-                                 .complete(true)\n-                                 .build();\n-        var summary = TestResults.summarize(List.of(check1, check2, check3, check4));\n-        assertEquals(\"### Testing\\n\" +\n-                             \"\\n\" +\n-                             \"|     | Linux x64 | Windows x64 |\\n\" +\n-                             \"| --- | ----- | ----- |\\n\" +\n-                             \"| Build | ✔️ (1\/1 passed) | ✔️ (1\/1 passed) |\\n\" +\n-                             \"| Test (tier1) | ✔️ (1\/1 passed) | ✔️ (1\/1 passed) |\", summary.get().strip());\n-    }\n-\n-    @Test\n-    void sparse() {\n-        var check1 = CheckBuilder.create(\"Linux x64 (Build)\", Hash.zero())\n-                                 .complete(true)\n-                                 .build();\n-        var check2 = CheckBuilder.create(\"Linux x64 (Test tier1)\", Hash.zero())\n-                                 .complete(true)\n-                                 .build();\n-        var check3 = CheckBuilder.create(\"Windows x64 (Build)\", Hash.zero())\n-                                 .complete(true)\n-                                 .build();\n-        var check4 = CheckBuilder.create(\"macOS x64 (Build)\", Hash.zero())\n-                                 .complete(true)\n-                                 .build();\n-        var summary = TestResults.summarize(List.of(check1, check2, check3, check4));\n-        assertEquals(\"### Testing\\n\" +\n-                             \"\\n\" +\n-                             \"|     | Linux x64 | Windows x64 | macOS x64 |\\n\" +\n-                             \"| --- | ----- | ----- | ----- |\\n\" +\n-                             \"| Build | ✔️ (1\/1 passed) | ✔️ (1\/1 passed) | ✔️ (1\/1 passed) |\\n\" +\n-                             \"| Test (tier1) | ✔️ (1\/1 passed) |    |     |\", summary.get().strip());\n-    }\n-\n-    @Test\n-    void failure() {\n-        var check1 = CheckBuilder.create(\"Linux x64 (test)\", Hash.zero())\n-                                 .complete(true)\n-                                 .build();\n-        var check2 = CheckBuilder.create(\"Windows x64 (test)\", Hash.zero())\n-                                 .complete(false)\n-                                 .details(URI.create(\"www.example.com\"))\n-                                 .build();\n-        var summary = TestResults.summarize(List.of(check1, check2));\n-        assertEquals(\"### Testing\\n\" +\n-                             \"\\n\" +\n-                             \"|     | Linux x64 | Windows x64 |\\n\" +\n-                             \"| --- | ----- | ----- |\\n\" +\n-                             \"| Build \/ test | ✔️ (1\/1 passed) | ❌ (1\/1 failed) |\\n\" +\n-                             \"\\n\" +\n-                             \"**Failed test task**\\n\" +\n-                             \"- [Windows x64 (test)](www.example.com)\", summary.get().strip());\n-    }\n-\n-    @Test\n-    void inProgress() {\n-        var check1 = CheckBuilder.create(\"Linux x64 (test)\", Hash.zero())\n-                                 .complete(true)\n-                                 .build();\n-        var check2 = CheckBuilder.create(\"Windows x64 (test)\", Hash.zero())\n-                                 .build();\n-        var summary = TestResults.summarize(List.of(check1, check2));\n-        assertEquals(\"### Testing\\n\" +\n-                             \"\\n\" +\n-                             \"|     | Linux x64 | Windows x64 |\\n\" +\n-                             \"| --- | ----- | ----- |\\n\" +\n-                             \"| Build \/ test | ✔️ (1\/1 passed) | ⏳ (1\/1 running) |\", summary.get().strip());\n-        assertTrue(TestResults.expiresIn(List.of(check1, check2)).isPresent());\n-    }\n-\n-    @Test\n-    void ignored() {\n-        var check1 = CheckBuilder.create(\"jcheck\", Hash.zero())\n-                                 .complete(true)\n-                                 .build();\n-        var check2 = CheckBuilder.create(\"Prerequisites\", Hash.zero())\n-                                 .build();\n-        var summary = TestResults.summarize(List.of(check1, check2));\n-        assertTrue(summary.isEmpty());\n-    }\n-\n-    @Test\n-    void ignoredAndCancelled() {\n-        var check1 = CheckBuilder.create(\"Prerequisites\", Hash.zero())\n-                                 .complete(true)\n-                                 .build();\n-        var check2 = CheckBuilder.create(\"Post-process artifacts\", Hash.zero())\n-                                 .build();\n-        var check3 = CheckBuilder.create(\"Linux x64\", Hash.zero())\n-                                 .cancel()\n-                                 .build();\n-        var summary = TestResults.summarize(List.of(check1, check2, check3));\n-        assertTrue(summary.isEmpty());\n-    }\n-\n-    @Test\n-    void mixed() {\n-        var check1 = CheckBuilder.create(\"Linux x64 (Build)\", Hash.zero())\n-                                 .complete(true)\n-                                 .build();\n-        var check2 = CheckBuilder.create(\"Linux x64 (Test tier1)\", Hash.zero())\n-                                 .complete(true)\n-                                 .build();\n-        var check3 = CheckBuilder.create(\"Prerequisites\", Hash.zero())\n-                                 .complete(true)\n-                                 .build();\n-        var check4 = CheckBuilder.create(\"Post-process\", Hash.zero())\n-                                 .complete(true)\n-                                 .build();\n-        var summary = TestResults.summarize(List.of(check1, check2, check3, check4));\n-        assertEquals(\"### Testing\\n\" +\n-                             \"\\n\" +\n-                             \"|     | Linux x64 |\\n\" +\n-                             \"| --- | ----- |\\n\" +\n-                             \"| Build | ✔️ (1\/1 passed) |\\n\" +\n-                             \"| Test (tier1) | ✔️ (1\/1 passed) |\", summary.get().strip());\n-    }\n-}\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/TestResultsTests.java","additions":0,"deletions":211,"binary":false,"changes":211,"status":"deleted"},{"patch":"@@ -25,1 +25,1 @@\n-    name = 'org.openjdk.skara.bots.censussync'\n+    name = 'org.openjdk.skara.bots.testinfo'\n@@ -29,1 +29,1 @@\n-        opens 'org.openjdk.skara.bots.censussync' to 'org.junit.platform.commons'\n+        opens 'org.openjdk.skara.bots.testinfo' to 'org.junit.platform.commons'\n","filename":"bots\/testinfo\/build.gradle","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"bots\/censussync\/build.gradle","status":"copied"},{"patch":"@@ -23,1 +23,1 @@\n-module org.openjdk.skara.bots.censussync {\n+module org.openjdk.skara.bots.testinfo {\n@@ -32,1 +32,1 @@\n-    provides org.openjdk.skara.bot.BotFactory with org.openjdk.skara.bots.censussync.CensusSyncBotFactory;\n+    provides org.openjdk.skara.bot.BotFactory with org.openjdk.skara.bots.testinfo.TestInfoBotFactory;\n","filename":"bots\/testinfo\/src\/main\/java\/module-info.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"bots\/censussync\/src\/main\/java\/module-info.java","status":"copied"},{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.skara.bots.testinfo;\n+\n+import org.openjdk.skara.bot.*;\n+import org.openjdk.skara.forge.HostedRepository;\n+\n+import java.time.*;\n+import java.util.*;\n+import java.util.logging.Logger;\n+\n+public class TestInfoBot implements Bot {\n+    private final HostedRepository repo;\n+    private final Map<String, Instant> expirations = new HashMap<>();\n+\n+    private static final Logger log = Logger.getLogger(\"org.openjdk.skara.bots\");;\n+\n+    TestInfoBot(HostedRepository repo) {\n+        this.repo = repo;\n+    }\n+\n+    @Override\n+    public List<WorkItem> getPeriodicItems() {\n+        var prs = repo.pullRequests(ZonedDateTime.now().minus(Duration.ofDays(1)));\n+        var ret = new ArrayList<WorkItem>();\n+        for (var pr : prs) {\n+            if (pr.sourceRepository().isEmpty()) {\n+                continue;\n+            }\n+            if (expirations.containsKey(pr.id())) {\n+                var expiresAt = expirations.get(pr.id());\n+                if (expiresAt.isAfter(Instant.now())) {\n+                    continue;\n+                }\n+            }\n+\n+            var sourceRepo = pr.sourceRepository().get();\n+            var checks = sourceRepo.allChecks(pr.headHash());\n+            var summarizedChecks = TestResults.summarize(checks);\n+\n+            if (summarizedChecks.isEmpty()) {\n+                \/\/ No test related checks found, they may not have started yet, so we'll keep looking\n+                expirations.put(pr.id(), Instant.now().plus(Duration.ofMinutes(5)));\n+                continue;\n+            } else {\n+                expirations.put(pr.id(), Instant.now().plus(TestResults.expiresIn(checks).orElse(Duration.ofDays(1000))));\n+            }\n+\n+            \/\/ Time to refresh test info\n+            ret.add(new TestInfoBotWorkItem(pr, summarizedChecks));\n+        }\n+        return ret;\n+    }\n+}\n","filename":"bots\/testinfo\/src\/main\/java\/org\/openjdk\/skara\/bots\/testinfo\/TestInfoBot.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"},{"patch":"@@ -0,0 +1,47 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bots.testinfo;\n+\n+import org.openjdk.skara.bot.*;\n+\n+import java.util.*;\n+import java.util.logging.Logger;\n+\n+public class TestInfoBotFactory implements BotFactory {\n+    private static final Logger log = Logger.getLogger(\"org.openjdk.skara.bots\");\n+\n+    @Override\n+    public String name() {\n+        return \"testinfo\";\n+    }\n+\n+    @Override\n+    public List<Bot> create(BotConfiguration configuration) {\n+        var bots = new ArrayList<Bot>();\n+        var specific = configuration.specific();\n+        for (var repo : specific.get(\"repositories\").asArray()) {\n+            bots.add(new TestInfoBot(configuration.repository(repo.asString())));\n+        }\n+        return bots;\n+    }\n+}\n","filename":"bots\/testinfo\/src\/main\/java\/org\/openjdk\/skara\/bots\/testinfo\/TestInfoBotFactory.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bots.testinfo;\n+\n+import org.openjdk.skara.bot.WorkItem;\n+import org.openjdk.skara.forge.*;\n+\n+import java.nio.file.Path;\n+import java.util.*;\n+\n+public class TestInfoBotWorkItem implements WorkItem {\n+    private final PullRequest pr;\n+    private final List<Check> summarizedChecks;\n+\n+    TestInfoBotWorkItem(PullRequest pr, List<Check> summarizedChecks) {\n+        this.pr = pr;\n+        this.summarizedChecks = summarizedChecks;\n+    }\n+\n+    @Override\n+    public boolean concurrentWith(WorkItem other) {\n+        if (!(other instanceof TestInfoBotWorkItem)) {\n+            return true;\n+        }\n+        var o = (TestInfoBotWorkItem) other;\n+        return !o.pr.webUrl().equals(pr.webUrl());\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"TestInfoBotWorkItem@\" + pr.repository().name() + \"#\" + pr.id();\n+    }\n+\n+    @Override\n+    public Collection<WorkItem> run(Path scratch) {\n+        var existing = pr.checks(pr.headHash());\n+        for (var check : summarizedChecks) {\n+            if (!existing.containsKey(check.name())) {\n+                pr.createCheck(check);\n+            }\n+            pr.updateCheck(check);\n+        }\n+\n+        return List.of();\n+    }\n+}\n","filename":"bots\/testinfo\/src\/main\/java\/org\/openjdk\/skara\/bots\/testinfo\/TestInfoBotWorkItem.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"},{"patch":"@@ -0,0 +1,170 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bots.testinfo;\n+\n+import org.openjdk.skara.forge.*;\n+\n+import java.time.*;\n+import java.util.*;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+public class TestResults {\n+    private static String platformFromName(String checkName) {\n+        var checkFlavorStart = checkName.indexOf(\"(\");\n+        if (checkFlavorStart > 0) {\n+            return checkName.substring(0, checkFlavorStart - 1).strip();\n+        } else {\n+            return checkName.strip();\n+        }\n+    }\n+\n+    private static String flavorFromName(String checkName) {\n+        var checkFlavorStart = checkName.indexOf(\"(\");\n+        var checkFlavorEnd = checkName.lastIndexOf(\")\");\n+        if (checkFlavorStart > 0 && checkFlavorEnd > checkFlavorStart) {\n+            var flavor = checkName.substring(checkFlavorStart + 1, checkFlavorEnd).strip().toLowerCase();\n+            for (int i = 1; i < 10; ++i) {\n+                if (flavor.contains(\"tier\" + i)) {\n+                    return \"Test (tier\" + i + \")\";\n+                }\n+            }\n+            if (flavor.contains(\"build\")) {\n+                return \"Build\";\n+            }\n+        }\n+        \/\/ Fallback value\n+        return \"Build \/ test\";\n+    }\n+\n+    private static boolean ignoredCheck(String checkName) {\n+        var lcName = checkName.toLowerCase();\n+        return lcName.contains(\"jcheck\") || lcName.contains(\"prerequisites\") || lcName.contains(\"post-process\");\n+    }\n+\n+    \/\/ Retain only the latest when there are multiple checks with the same name\n+    private static Collection<Check> latestChecks(List<Check> checks) {\n+        var latestChecks = checks.stream()\n+                                 .filter(check -> !ignoredCheck(check.name()))\n+                                 .filter(check -> check.status() != CheckStatus.CANCELLED)\n+                                 .sorted(Comparator.comparing(Check::startedAt, ZonedDateTime::compareTo))\n+                                 .collect(Collectors.toMap(Check::name, Function.identity(), (a, b) -> b, LinkedHashMap::new));\n+        return latestChecks.values();\n+    }\n+\n+    static List<Check> summarize(List<Check> checks) {\n+        var latestChecks = latestChecks(checks);\n+        if (latestChecks.isEmpty()) {\n+            return List.of();\n+        }\n+\n+        var hash = latestChecks.stream().findAny().orElseThrow().hash();\n+        var platforms = latestChecks.stream()\n+                                    .map(check -> platformFromName(check.name()))\n+                                    .collect(Collectors.toCollection(TreeSet::new));\n+        var flavors = latestChecks.stream()\n+                                  .map(check -> flavorFromName(check.name()))\n+                                  .collect(Collectors.toCollection(TreeSet::new));\n+        if (platforms.isEmpty() || flavors.isEmpty()) {\n+            return List.of();\n+        }\n+\n+        var platformFlavors = latestChecks.stream()\n+                                          .collect(Collectors.groupingBy(check -> platformFromName(check.name()))).entrySet().stream()\n+                                          .collect(Collectors.toMap(Map.Entry::getKey,\n+                                                                    entry -> entry.getValue().stream()\n+                                                                                  .collect(Collectors.groupingBy(check -> flavorFromName(check.name())))));\n+\n+        var ret = new ArrayList<Check>();\n+        for (var flavor : flavors) {\n+            for (var platform : platforms) {\n+                var platformChecks = platformFlavors.get(platform);\n+                var flavorChecks = platformChecks.get(flavor);\n+                if (flavorChecks != null) {\n+                    int failureCount = 0;\n+                    int pendingCount = 0;\n+                    int successCount = 0;\n+                    var checkDetails = new ArrayList<String>();\n+                    String checkIcon = \"\";\n+                    for (var check : flavorChecks) {\n+                        switch (check.status()) {\n+                            case IN_PROGRESS:\n+                                checkIcon = \"⏳ \";\n+                                pendingCount++;\n+                                break;\n+                            case FAILURE:\n+                                checkIcon = \"❌ \";\n+                                failureCount++;\n+                                break;\n+                            case SUCCESS:\n+                                checkIcon = \"✔️ \";\n+                                successCount++;\n+                                break;\n+                        }\n+                        var checkTitle = check.details().isPresent() ? \"[\" + check.name() + \"](\" + check.details().get() + \")\" : check.name();\n+                        checkDetails.add(checkIcon + checkTitle);\n+                    }\n+                    var checkBuilder = CheckBuilder.create(platform + \" - \" + flavor, hash);\n+                    checkBuilder.summary(String.join(\"\\n\", checkDetails));\n+                    int total = failureCount + pendingCount + successCount;\n+                    \/\/ Report aggregate counts for successful \/ still running tests\n+                    if (pendingCount > 0) {\n+                        checkBuilder.title(pendingCount + \"\/\" + total + \" running\");\n+                        ret.add(checkBuilder.build());\n+                    } else if (successCount > 0) {\n+                        checkBuilder.title(successCount + \"\/\" + total + \" passed\");\n+                        checkBuilder.complete(true);\n+                        ret.add(checkBuilder.build());\n+                    }\n+                }\n+            }\n+        }\n+\n+        var failedChecks = latestChecks.stream()\n+                                       .filter(check -> check.status() == CheckStatus.FAILURE)\n+                                       .sorted(Comparator.comparing(Check::name))\n+                                       .collect(Collectors.toList());\n+        for (var check : failedChecks) {\n+            var checkBuilder = CheckBuilder.create(check.name(), hash);\n+            checkBuilder.title(\"Failure\");\n+            checkBuilder.summary(\"A failing check run was found\");\n+            check.details().ifPresent(checkBuilder::details);\n+            checkBuilder.complete(false);\n+            ret.add(checkBuilder.build());\n+        }\n+\n+        return ret;\n+    }\n+\n+    static Optional<Duration> expiresIn(List<Check> checks) {\n+        var latestChecks = latestChecks(checks);\n+        var needRefresh = latestChecks.stream()\n+                                      .filter(check -> check.status() == CheckStatus.IN_PROGRESS)\n+                                      .findAny();\n+        if (needRefresh.isPresent()) {\n+            return Optional.of(Duration.ofMinutes(2));\n+        } else {\n+            return Optional.empty();\n+        }\n+    }\n+}\n","filename":"bots\/testinfo\/src\/main\/java\/org\/openjdk\/skara\/bots\/testinfo\/TestResults.java","additions":170,"deletions":0,"binary":false,"changes":170,"status":"added"},{"patch":"@@ -0,0 +1,68 @@\n+package org.openjdk.skara.bots.testinfo;\n+\n+import org.junit.jupiter.api.*;\n+import org.openjdk.skara.forge.CheckBuilder;\n+import org.openjdk.skara.test.*;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.Path;\n+import java.util.Set;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+\n+public class TestInfoTests {\n+    @Test\n+    void simple(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var issues = credentials.getIssueProject();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                                           .addAuthor(author.forge().currentUser().id())\n+                                           .addReviewer(reviewer.forge().currentUser().id());\n+            var checkBot = new TestInfoBot(author);\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType(), Path.of(\"appendable.txt\"),\n+                                                     Set.of(\"issues\"), null);\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Make a draft PR where we can add some checks\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"preedit\", true);\n+            var draftPr = credentials.createPullRequest(author, \"master\", \"preedit\", \"This is a pull request\", true);\n+            var check1 = CheckBuilder.create(\"ps1\", editHash).title(\"PS1\");\n+            draftPr.createCheck(check1.build());\n+            draftPr.updateCheck(check1.complete(true).build());\n+            var check2 = CheckBuilder.create(\"ps2\", editHash).title(\"PS2\");\n+            draftPr.createCheck(check2.build());\n+            draftPr.updateCheck(check2.complete(false).build());\n+            var check3 = CheckBuilder.create(\"ps3\", editHash).title(\"PS3\");\n+            draftPr.createCheck(check3.build());\n+            draftPr.updateCheck(check3.details(URI.create(\"https:\/\/www.example.com\")).complete(false).build());\n+\n+            \/\/ Now make an actual PR\n+            localRepo.push(editHash, author.url(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"This is a pull request\");\n+\n+            \/\/ Check the status\n+            TestBotRunner.runPeriodicItems(checkBot);\n+\n+            \/\/ Passing jobs are summarized\n+            assertEquals(3, pr.checks(editHash).size());\n+            assertEquals(\"1\/1 passed\", pr.checks(editHash).get(\"ps1 - Build \/ test\").title().orElseThrow());\n+            assertEquals(\"✔️ ps1\", pr.checks(editHash).get(\"ps1 - Build \/ test\").summary().orElseThrow());\n+\n+            \/\/ Failing jobs are reported individually\n+            assertEquals(\"Failure\", pr.checks(editHash).get(\"ps2\").title().orElseThrow());\n+            assertNull(pr.checks(editHash).get(\"ps2\").details().orElse(null));\n+            assertEquals(\"Failure\", pr.checks(editHash).get(\"ps3\").title().orElseThrow());\n+            assertEquals(URI.create(\"https:\/\/www.example.com\"), pr.checks(editHash).get(\"ps3\").details().orElseThrow());\n+        }\n+    }\n+}\n","filename":"bots\/testinfo\/src\/test\/java\/org\/openjdk\/skara\/bots\/testinfo\/TestInfoTests.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"},{"patch":"@@ -0,0 +1,197 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bots.testinfo;\n+\n+import org.junit.jupiter.api.Test;\n+import org.openjdk.skara.forge.*;\n+import org.openjdk.skara.vcs.Hash;\n+\n+import java.net.URI;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class TestResultsTests {\n+    private Set<String> checkAsString(List<Check> checks) {\n+        return checks.stream()\n+                     .map(check -> check.status() + \"##\" + check.name() + \"##\" + check.title().orElse(\"\") + \"##\" + check.summary().orElse(\"\"))\n+                     .collect(Collectors.toSet());\n+    }\n+\n+    @Test\n+    void simple() {\n+        var check = CheckBuilder.create(\"Test\", Hash.zero())\n+                                .complete(true)\n+                                .build();\n+        var summary = TestResults.summarize(List.of(check));\n+        assertEquals(Set.of(\"SUCCESS##Test - Build \/ test##1\/1 passed##✔️ Test\"), checkAsString(summary));\n+        assertTrue(TestResults.expiresIn(List.of(check)).isEmpty());\n+    }\n+\n+    @Test\n+    void multiPlatform() {\n+        var check1 = CheckBuilder.create(\"Linux x64 (test)\", Hash.zero())\n+                                 .complete(true)\n+                                 .build();\n+        var check2 = CheckBuilder.create(\"Windows x64 (test)\", Hash.zero())\n+                                 .complete(true)\n+                                 .build();\n+        var summary = TestResults.summarize(List.of(check1, check2));\n+        assertEquals(Set.of(\"SUCCESS##Linux x64 - Build \/ test##1\/1 passed##✔️ Linux x64 (test)\",\n+                            \"SUCCESS##Windows x64 - Build \/ test##1\/1 passed##✔️ Windows x64 (test)\"),\n+                     checkAsString(summary));\n+    }\n+\n+    @Test\n+    void multiFlavor() {\n+        var check1 = CheckBuilder.create(\"Linux x64 (Build)\", Hash.zero())\n+                                 .complete(true)\n+                                 .build();\n+        var check2 = CheckBuilder.create(\"Linux x64 (Test tier1)\", Hash.zero())\n+                                 .complete(true)\n+                                 .build();\n+        var summary = TestResults.summarize(List.of(check1, check2));\n+        assertEquals(Set.of(\"SUCCESS##Linux x64 - Build##1\/1 passed##✔️ Linux x64 (Build)\",\n+                            \"SUCCESS##Linux x64 - Test (tier1)##1\/1 passed##✔️ Linux x64 (Test tier1)\"),\n+                     checkAsString(summary));\n+    }\n+\n+    @Test\n+    void multiEverything() {\n+        var check1 = CheckBuilder.create(\"Linux x64 (Build)\", Hash.zero())\n+                                 .complete(true)\n+                                 .build();\n+        var check2 = CheckBuilder.create(\"Linux x64 (Test tier1)\", Hash.zero())\n+                                 .complete(true)\n+                                 .build();\n+        var check3 = CheckBuilder.create(\"Windows x64 (Build)\", Hash.zero())\n+                                 .complete(true)\n+                                 .build();\n+        var check4 = CheckBuilder.create(\"Windows x64 (Test tier1)\", Hash.zero())\n+                                 .complete(true)\n+                                 .build();\n+        var summary = TestResults.summarize(List.of(check1, check2, check3, check4));\n+        assertEquals(Set.of(\"SUCCESS##Linux x64 - Build##1\/1 passed##✔️ Linux x64 (Build)\",\n+                            \"SUCCESS##Windows x64 - Test (tier1)##1\/1 passed##✔️ Windows x64 (Test tier1)\",\n+                            \"SUCCESS##Linux x64 - Test (tier1)##1\/1 passed##✔️ Linux x64 (Test tier1)\",\n+                            \"SUCCESS##Windows x64 - Build##1\/1 passed##✔️ Windows x64 (Build)\"),\n+                     checkAsString(summary));\n+    }\n+\n+    @Test\n+    void sparse() {\n+        var check1 = CheckBuilder.create(\"Linux x64 (Build)\", Hash.zero())\n+                                 .complete(true)\n+                                 .build();\n+        var check2 = CheckBuilder.create(\"Linux x64 (Test tier1)\", Hash.zero())\n+                                 .complete(true)\n+                                 .build();\n+        var check3 = CheckBuilder.create(\"Windows x64 (Build)\", Hash.zero())\n+                                 .complete(true)\n+                                 .build();\n+        var check4 = CheckBuilder.create(\"macOS x64 (Build)\", Hash.zero())\n+                                 .complete(true)\n+                                 .build();\n+        var summary = TestResults.summarize(List.of(check1, check2, check3, check4));\n+        assertEquals(Set.of(\"SUCCESS##Linux x64 - Build##1\/1 passed##✔️ Linux x64 (Build)\",\n+                            \"SUCCESS##Linux x64 - Test (tier1)##1\/1 passed##✔️ Linux x64 (Test tier1)\",\n+                            \"SUCCESS##macOS x64 - Build##1\/1 passed##✔️ macOS x64 (Build)\",\n+                            \"SUCCESS##Windows x64 - Build##1\/1 passed##✔️ Windows x64 (Build)\"),\n+                     checkAsString(summary));\n+    }\n+\n+    @Test\n+    void failure() {\n+        var check1 = CheckBuilder.create(\"Linux x64 (test)\", Hash.zero())\n+                                 .complete(true)\n+                                 .build();\n+        var check2 = CheckBuilder.create(\"Windows x64 (test)\", Hash.zero())\n+                                 .complete(false)\n+                                 .details(URI.create(\"www.example.com\"))\n+                                 .build();\n+        var summary = TestResults.summarize(List.of(check1, check2));\n+        assertEquals(Set.of(\"SUCCESS##Linux x64 - Build \/ test##1\/1 passed##✔️ Linux x64 (test)\",\n+                            \"FAILURE##Windows x64 (test)##Failure##A failing check run was found\"),\n+                     checkAsString(summary));\n+    }\n+\n+    @Test\n+    void inProgress() {\n+        var check1 = CheckBuilder.create(\"Linux x64 (test)\", Hash.zero())\n+                                 .complete(true)\n+                                 .build();\n+        var check2 = CheckBuilder.create(\"Windows x64 (test)\", Hash.zero())\n+                                 .build();\n+        var summary = TestResults.summarize(List.of(check1, check2));\n+        assertEquals(Set.of(\"SUCCESS##Linux x64 - Build \/ test##1\/1 passed##✔️ Linux x64 (test)\",\n+                            \"IN_PROGRESS##Windows x64 - Build \/ test##1\/1 running##⏳ Windows x64 (test)\"),\n+                     checkAsString(summary));\n+        assertTrue(TestResults.expiresIn(List.of(check1, check2)).isPresent());\n+    }\n+\n+    @Test\n+    void ignored() {\n+        var check1 = CheckBuilder.create(\"jcheck\", Hash.zero())\n+                                 .complete(true)\n+                                 .build();\n+        var check2 = CheckBuilder.create(\"Prerequisites\", Hash.zero())\n+                                 .build();\n+        var summary = TestResults.summarize(List.of(check1, check2));\n+        assertTrue(summary.isEmpty());\n+    }\n+\n+    @Test\n+    void ignoredAndCancelled() {\n+        var check1 = CheckBuilder.create(\"Prerequisites\", Hash.zero())\n+                                 .complete(true)\n+                                 .build();\n+        var check2 = CheckBuilder.create(\"Post-process artifacts\", Hash.zero())\n+                                 .build();\n+        var check3 = CheckBuilder.create(\"Linux x64\", Hash.zero())\n+                                 .cancel()\n+                                 .build();\n+        var summary = TestResults.summarize(List.of(check1, check2, check3));\n+        assertTrue(summary.isEmpty());\n+    }\n+\n+    @Test\n+    void mixed() {\n+        var check1 = CheckBuilder.create(\"Linux x64 (Build)\", Hash.zero())\n+                                 .complete(true)\n+                                 .build();\n+        var check2 = CheckBuilder.create(\"Linux x64 (Test tier1)\", Hash.zero())\n+                                 .complete(true)\n+                                 .build();\n+        var check3 = CheckBuilder.create(\"Prerequisites\", Hash.zero())\n+                                 .complete(true)\n+                                 .build();\n+        var check4 = CheckBuilder.create(\"Post-process\", Hash.zero())\n+                                 .complete(true)\n+                                 .build();\n+        var summary = TestResults.summarize(List.of(check1, check2, check3, check4));\n+        assertEquals(Set.of(\"SUCCESS##Linux x64 - Test (tier1)##1\/1 passed##✔️ Linux x64 (Test tier1)\",\n+                            \"SUCCESS##Linux x64 - Build##1\/1 passed##✔️ Linux x64 (Build)\"), checkAsString(summary));\n+    }\n+}\n","filename":"bots\/testinfo\/src\/test\/java\/org\/openjdk\/skara\/bots\/testinfo\/TestResultsTests.java","additions":197,"deletions":0,"binary":false,"changes":197,"status":"added"},{"patch":"@@ -63,0 +63,1 @@\n+include 'bots:testinfo'\n","filename":"settings.gradle","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}