{"files":[{"patch":"@@ -127,1 +127,1 @@\n-                    var checkBuilder = CheckBuilder.create(platform + \" - \" + flavor, hash);\n+                    var checkBuilder = CheckBuilder.create(\"Pre-submit tests - \" + platform + \" - \" + flavor, hash);\n@@ -129,0 +129,10 @@\n+                    var firstStartedAt = flavorChecks.stream()\n+                                                     .map(Check::startedAt)\n+                                                     .min(ZonedDateTime::compareTo);\n+                    firstStartedAt.ifPresent(checkBuilder::startedAt);\n+\n+                    var lastCompletedAt = flavorChecks.stream()\n+                                                      .map(Check::completedAt)\n+                                                      .filter(Optional::isPresent)\n+                                                      .map(Optional::get)\n+                                                      .max(ZonedDateTime::compareTo);\n@@ -130,1 +140,0 @@\n-                    \/\/ Report aggregate counts for successful \/ still running tests\n@@ -134,0 +143,4 @@\n+                    } else if (failureCount > 0) {\n+                        checkBuilder.title(failureCount + \"\/\" + total + \" failed\");\n+                        lastCompletedAt.ifPresentOrElse(ca -> checkBuilder.complete(false, ca), () -> checkBuilder.complete(false));\n+                        ret.add(checkBuilder.build());\n@@ -136,1 +149,1 @@\n-                        checkBuilder.complete(true);\n+                        lastCompletedAt.ifPresentOrElse(ca -> checkBuilder.complete(true, ca), () -> checkBuilder.complete(true));\n@@ -143,13 +156,0 @@\n-        var failedChecks = latestChecks.stream()\n-                                       .filter(check -> check.status() == CheckStatus.FAILURE)\n-                                       .sorted(Comparator.comparing(Check::name))\n-                                       .collect(Collectors.toList());\n-        for (var check : failedChecks) {\n-            var checkBuilder = CheckBuilder.create(check.name(), hash);\n-            checkBuilder.title(\"Failure\");\n-            checkBuilder.summary(\"A failing check run was found\");\n-            check.details().ifPresent(checkBuilder::details);\n-            checkBuilder.complete(false);\n-            ret.add(checkBuilder.build());\n-        }\n-\n","filename":"bots\/testinfo\/src\/main\/java\/org\/openjdk\/skara\/bots\/testinfo\/TestResults.java","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n-import org.openjdk.skara.forge.CheckBuilder;\n+import org.openjdk.skara.forge.*;\n@@ -13,1 +13,0 @@\n-import static org.junit.jupiter.api.Assertions.assertNull;\n@@ -48,0 +47,3 @@\n+            var check4 = CheckBuilder.create(\"ps4\", editHash).title(\"PS4\");\n+            draftPr.createCheck(check4.build());\n+            draftPr.updateCheck(check4.details(URI.create(\"https:\/\/www.example.com\")).build());\n@@ -56,10 +58,14 @@\n-            \/\/ Passing jobs are summarized\n-            assertEquals(3, pr.checks(editHash).size());\n-            assertEquals(\"1\/1 passed\", pr.checks(editHash).get(\"ps1 - Build \/ test\").title().orElseThrow());\n-            assertEquals(\"✔️ ps1\", pr.checks(editHash).get(\"ps1 - Build \/ test\").summary().orElseThrow());\n-\n-            \/\/ Failing jobs are reported individually\n-            assertEquals(\"Failure\", pr.checks(editHash).get(\"ps2\").title().orElseThrow());\n-            assertNull(pr.checks(editHash).get(\"ps2\").details().orElse(null));\n-            assertEquals(\"Failure\", pr.checks(editHash).get(\"ps3\").title().orElseThrow());\n-            assertEquals(URI.create(\"https:\/\/www.example.com\"), pr.checks(editHash).get(\"ps3\").details().orElseThrow());\n+            \/\/ Verify summarized checks\n+            assertEquals(4, pr.checks(editHash).size());\n+            assertEquals(\"1\/1 passed\", pr.checks(editHash).get(\"Pre-submit tests - ps1 - Build \/ test\").title().orElseThrow());\n+            assertEquals(\"✔️ ps1\", pr.checks(editHash).get(\"Pre-submit tests - ps1 - Build \/ test\").summary().orElseThrow());\n+            assertEquals(CheckStatus.SUCCESS, pr.checks(editHash).get(\"Pre-submit tests - ps1 - Build \/ test\").status());\n+            assertEquals(\"1\/1 failed\", pr.checks(editHash).get(\"Pre-submit tests - ps2 - Build \/ test\").title().orElseThrow());\n+            assertEquals(\"❌ ps2\", pr.checks(editHash).get(\"Pre-submit tests - ps2 - Build \/ test\").summary().orElseThrow());\n+            assertEquals(CheckStatus.FAILURE, pr.checks(editHash).get(\"Pre-submit tests - ps2 - Build \/ test\").status());\n+            assertEquals(\"1\/1 failed\", pr.checks(editHash).get(\"Pre-submit tests - ps3 - Build \/ test\").title().orElseThrow());\n+            assertEquals(\"❌ [ps3](https:\/\/www.example.com)\", pr.checks(editHash).get(\"Pre-submit tests - ps3 - Build \/ test\").summary().orElseThrow());\n+            assertEquals(CheckStatus.FAILURE, pr.checks(editHash).get(\"Pre-submit tests - ps3 - Build \/ test\").status());\n+            assertEquals(\"1\/1 running\", pr.checks(editHash).get(\"Pre-submit tests - ps4 - Build \/ test\").title().orElseThrow());\n+            assertEquals(\"⏳ [ps4](https:\/\/www.example.com)\", pr.checks(editHash).get(\"Pre-submit tests - ps4 - Build \/ test\").summary().orElseThrow());\n+            assertEquals(CheckStatus.IN_PROGRESS, pr.checks(editHash).get(\"Pre-submit tests - ps4 - Build \/ test\").status());\n","filename":"bots\/testinfo\/src\/test\/java\/org\/openjdk\/skara\/bots\/testinfo\/TestInfoTests.java","additions":18,"deletions":12,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+import java.time.*;\n+import java.time.format.DateTimeFormatter;\n@@ -37,0 +39,2 @@\n+    private static final ZonedDateTime baseStartedAt = ZonedDateTime.parse(\"2020-11-26T11:00:00+01:00\", DateTimeFormatter.ISO_ZONED_DATE_TIME);\n+\n@@ -39,1 +43,6 @@\n-                     .map(check -> check.status() + \"##\" + check.name() + \"##\" + check.title().orElse(\"\") + \"##\" + check.summary().orElse(\"\"))\n+                     .map(check -> check.status() + \"##\" +\n+                             check.name().substring(19) + \"##\" +\n+                             check.title().orElse(\"\") + \"##\" +\n+                             check.summary().orElse(\"\") + \"##\" +\n+                             Duration.between(baseStartedAt, check.startedAt()).getSeconds() + \"##\" +\n+                             Duration.between(baseStartedAt, check.completedAt().orElse(baseStartedAt)).getSeconds())\n@@ -46,1 +55,2 @@\n-                                .complete(true)\n+                                .startedAt(baseStartedAt)\n+                                .complete(true, baseStartedAt.plus(Duration.ofSeconds(10)))\n@@ -49,1 +59,1 @@\n-        assertEquals(Set.of(\"SUCCESS##Test - Build \/ test##1\/1 passed##✔️ Test\"), checkAsString(summary));\n+        assertEquals(Set.of(\"SUCCESS##Test - Build \/ test##1\/1 passed##✔️ Test##0##10\"), checkAsString(summary));\n@@ -56,1 +66,2 @@\n-                                 .complete(true)\n+                                 .startedAt(baseStartedAt)\n+                                 .complete(true, baseStartedAt.plus(Duration.ofSeconds(10)))\n@@ -59,1 +70,2 @@\n-                                 .complete(true)\n+                                 .startedAt(baseStartedAt)\n+                                 .complete(true, baseStartedAt.plus(Duration.ofSeconds(10)))\n@@ -62,2 +74,2 @@\n-        assertEquals(Set.of(\"SUCCESS##Linux x64 - Build \/ test##1\/1 passed##✔️ Linux x64 (test)\",\n-                            \"SUCCESS##Windows x64 - Build \/ test##1\/1 passed##✔️ Windows x64 (test)\"),\n+        assertEquals(Set.of(\"SUCCESS##Linux x64 - Build \/ test##1\/1 passed##✔️ Linux x64 (test)##0##10\",\n+                            \"SUCCESS##Windows x64 - Build \/ test##1\/1 passed##✔️ Windows x64 (test)##0##10\"),\n@@ -70,1 +82,2 @@\n-                                 .complete(true)\n+                                 .startedAt(baseStartedAt)\n+                                 .complete(true, baseStartedAt.plus(Duration.ofSeconds(10)))\n@@ -73,1 +86,2 @@\n-                                 .complete(true)\n+                                 .startedAt(baseStartedAt)\n+                                 .complete(true, baseStartedAt.plus(Duration.ofSeconds(10)))\n@@ -76,2 +90,2 @@\n-        assertEquals(Set.of(\"SUCCESS##Linux x64 - Build##1\/1 passed##✔️ Linux x64 (Build)\",\n-                            \"SUCCESS##Linux x64 - Test (tier1)##1\/1 passed##✔️ Linux x64 (Test tier1)\"),\n+        assertEquals(Set.of(\"SUCCESS##Linux x64 - Build##1\/1 passed##✔️ Linux x64 (Build)##0##10\",\n+                            \"SUCCESS##Linux x64 - Test (tier1)##1\/1 passed##✔️ Linux x64 (Test tier1)##0##10\"),\n@@ -84,1 +98,2 @@\n-                                 .complete(true)\n+                                 .startedAt(baseStartedAt)\n+                                 .complete(true, baseStartedAt.plus(Duration.ofSeconds(10)))\n@@ -87,1 +102,2 @@\n-                                 .complete(true)\n+                                 .startedAt(baseStartedAt)\n+                                 .complete(true, baseStartedAt.plus(Duration.ofSeconds(10)))\n@@ -90,1 +106,2 @@\n-                                 .complete(true)\n+                                 .startedAt(baseStartedAt)\n+                                 .complete(true, baseStartedAt.plus(Duration.ofSeconds(10)))\n@@ -93,1 +110,2 @@\n-                                 .complete(true)\n+                                 .startedAt(baseStartedAt)\n+                                 .complete(true, baseStartedAt.plus(Duration.ofSeconds(10)))\n@@ -96,4 +114,4 @@\n-        assertEquals(Set.of(\"SUCCESS##Linux x64 - Build##1\/1 passed##✔️ Linux x64 (Build)\",\n-                            \"SUCCESS##Windows x64 - Test (tier1)##1\/1 passed##✔️ Windows x64 (Test tier1)\",\n-                            \"SUCCESS##Linux x64 - Test (tier1)##1\/1 passed##✔️ Linux x64 (Test tier1)\",\n-                            \"SUCCESS##Windows x64 - Build##1\/1 passed##✔️ Windows x64 (Build)\"),\n+        assertEquals(Set.of(\"SUCCESS##Linux x64 - Build##1\/1 passed##✔️ Linux x64 (Build)##0##10\",\n+                            \"SUCCESS##Windows x64 - Test (tier1)##1\/1 passed##✔️ Windows x64 (Test tier1)##0##10\",\n+                            \"SUCCESS##Linux x64 - Test (tier1)##1\/1 passed##✔️ Linux x64 (Test tier1)##0##10\",\n+                            \"SUCCESS##Windows x64 - Build##1\/1 passed##✔️ Windows x64 (Build)##0##10\"),\n@@ -106,1 +124,2 @@\n-                                 .complete(true)\n+                                 .startedAt(baseStartedAt)\n+                                 .complete(true, baseStartedAt.plus(Duration.ofSeconds(10)))\n@@ -109,1 +128,2 @@\n-                                 .complete(true)\n+                                 .startedAt(baseStartedAt)\n+                                 .complete(true, baseStartedAt.plus(Duration.ofSeconds(10)))\n@@ -112,1 +132,2 @@\n-                                 .complete(true)\n+                                 .startedAt(baseStartedAt)\n+                                 .complete(true, baseStartedAt.plus(Duration.ofSeconds(10)))\n@@ -115,1 +136,2 @@\n-                                 .complete(true)\n+                                 .startedAt(baseStartedAt)\n+                                 .complete(true, baseStartedAt.plus(Duration.ofSeconds(10)))\n@@ -118,4 +140,4 @@\n-        assertEquals(Set.of(\"SUCCESS##Linux x64 - Build##1\/1 passed##✔️ Linux x64 (Build)\",\n-                            \"SUCCESS##Linux x64 - Test (tier1)##1\/1 passed##✔️ Linux x64 (Test tier1)\",\n-                            \"SUCCESS##macOS x64 - Build##1\/1 passed##✔️ macOS x64 (Build)\",\n-                            \"SUCCESS##Windows x64 - Build##1\/1 passed##✔️ Windows x64 (Build)\"),\n+        assertEquals(Set.of(\"SUCCESS##Linux x64 - Build##1\/1 passed##✔️ Linux x64 (Build)##0##10\",\n+                            \"SUCCESS##Linux x64 - Test (tier1)##1\/1 passed##✔️ Linux x64 (Test tier1)##0##10\",\n+                            \"SUCCESS##macOS x64 - Build##1\/1 passed##✔️ macOS x64 (Build)##0##10\",\n+                            \"SUCCESS##Windows x64 - Build##1\/1 passed##✔️ Windows x64 (Build)##0##10\"),\n@@ -128,1 +150,2 @@\n-                                 .complete(true)\n+                                 .startedAt(baseStartedAt)\n+                                 .complete(true, baseStartedAt.plus(Duration.ofSeconds(10)))\n@@ -131,1 +154,2 @@\n-                                 .complete(false)\n+                                 .startedAt(baseStartedAt)\n+                                 .complete(false, baseStartedAt.plus(Duration.ofSeconds(10)))\n@@ -135,2 +159,2 @@\n-        assertEquals(Set.of(\"SUCCESS##Linux x64 - Build \/ test##1\/1 passed##✔️ Linux x64 (test)\",\n-                            \"FAILURE##Windows x64 (test)##Failure##A failing check run was found\"),\n+        assertEquals(Set.of(\"SUCCESS##Linux x64 - Build \/ test##1\/1 passed##✔️ Linux x64 (test)##0##10\",\n+                            \"FAILURE##Windows x64 - Build \/ test##1\/1 failed##❌ [Windows x64 (test)](www.example.com)##0##10\"),\n@@ -143,1 +167,2 @@\n-                                 .complete(true)\n+                                 .startedAt(baseStartedAt)\n+                                 .complete(true, baseStartedAt.plus(Duration.ofSeconds(10)))\n@@ -146,0 +171,1 @@\n+                                 .startedAt(baseStartedAt)\n@@ -148,2 +174,2 @@\n-        assertEquals(Set.of(\"SUCCESS##Linux x64 - Build \/ test##1\/1 passed##✔️ Linux x64 (test)\",\n-                            \"IN_PROGRESS##Windows x64 - Build \/ test##1\/1 running##⏳ Windows x64 (test)\"),\n+        assertEquals(Set.of(\"SUCCESS##Linux x64 - Build \/ test##1\/1 passed##✔️ Linux x64 (test)##0##10\",\n+                            \"IN_PROGRESS##Windows x64 - Build \/ test##1\/1 running##⏳ Windows x64 (test)##0##0\"),\n@@ -182,1 +208,2 @@\n-                                 .complete(true)\n+                                 .startedAt(baseStartedAt)\n+                                 .complete(true, baseStartedAt.plus(Duration.ofSeconds(10)))\n@@ -185,1 +212,2 @@\n-                                 .complete(true)\n+                                 .startedAt(baseStartedAt)\n+                                 .complete(true, baseStartedAt.plus(Duration.ofSeconds(10)))\n@@ -188,1 +216,2 @@\n-                                 .complete(true)\n+                                 .startedAt(baseStartedAt)\n+                                 .complete(true, baseStartedAt.plus(Duration.ofSeconds(10)))\n@@ -191,1 +220,25 @@\n-                                 .complete(true)\n+                                 .startedAt(baseStartedAt)\n+                                 .complete(true, baseStartedAt.plus(Duration.ofSeconds(10)))\n+                                 .build();\n+        var summary = TestResults.summarize(List.of(check1, check2, check3, check4));\n+        assertEquals(Set.of(\"SUCCESS##Linux x64 - Test (tier1)##1\/1 passed##✔️ Linux x64 (Test tier1)##0##10\",\n+                            \"SUCCESS##Linux x64 - Build##1\/1 passed##✔️ Linux x64 (Build)##0##10\"), checkAsString(summary));\n+    }\n+\n+    @Test\n+    void durations() {\n+        var check1 = CheckBuilder.create(\"Linux x64 (build release)\", Hash.zero())\n+                                 .startedAt(baseStartedAt)\n+                                 .complete(true, baseStartedAt.plus(Duration.ofSeconds(400)))\n+                                 .build();\n+        var check2 = CheckBuilder.create(\"Linux x64 (build debug)\", Hash.zero())\n+                                 .startedAt(baseStartedAt.plus(Duration.ofSeconds(60)))\n+                                 .complete(true, baseStartedAt.plus(Duration.ofSeconds(120)))\n+                                 .build();\n+        var check3 = CheckBuilder.create(\"Windows x64 (Build release)\", Hash.zero())\n+                                 .startedAt(baseStartedAt.plus(Duration.ofSeconds(10)))\n+                                 .complete(true, baseStartedAt.plus(Duration.ofSeconds(20)))\n+                                 .build();\n+        var check4 = CheckBuilder.create(\"Windows x64 (Build debug)\", Hash.zero())\n+                                 .startedAt(baseStartedAt.plus(Duration.ofSeconds(15)))\n+                                 .complete(true, baseStartedAt.plus(Duration.ofSeconds(200)))\n@@ -194,2 +247,5 @@\n-        assertEquals(Set.of(\"SUCCESS##Linux x64 - Test (tier1)##1\/1 passed##✔️ Linux x64 (Test tier1)\",\n-                            \"SUCCESS##Linux x64 - Build##1\/1 passed##✔️ Linux x64 (Build)\"), checkAsString(summary));\n+        assertEquals(Set.of(\"SUCCESS##Windows x64 - Build##2\/2 passed##✔️ Windows x64 (Build release)\\n\" +\n+                                    \"✔️ Windows x64 (Build debug)##10##200\",\n+                            \"SUCCESS##Linux x64 - Build##2\/2 passed##✔️ Linux x64 (build release)\\n\" +\n+                                    \"✔️ Linux x64 (build debug)##0##400\"),\n+                     checkAsString(summary));\n","filename":"bots\/testinfo\/src\/test\/java\/org\/openjdk\/skara\/bots\/testinfo\/TestResultsTests.java","additions":96,"deletions":40,"binary":false,"changes":136,"status":"modified"}]}