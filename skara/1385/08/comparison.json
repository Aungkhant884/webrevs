{"files":[{"patch":"@@ -66,0 +66,2 @@\n+    private static final int NEW_REPOSITORY_COMMIT_THRESHOLD = 5;\n+\n@@ -367,3 +369,14 @@\n-                    for (var listener : listeners) {\n-                        log.info(\"Resetting mark for branch '\" + ref.name() + \"' for listener '\" + listener.name() + \"'\");\n-                        history.setBranchHash(new Branch(ref.name()), listener.name(), ref.hash());\n+                    if (localRepo.commitCount() <= NEW_REPOSITORY_COMMIT_THRESHOLD) {\n+                        log.info(\"This is a new repo, starting notifications from the very first commit\");\n+                        for (var listener : listeners) {\n+                            log.info(\"Resetting mark for branch '\" + ref.name() + \"' for listener '\" + listener.name() + \"'\");\n+                            \/\/ Initialize the mark for the branches with special Git empty tree hash to trigger notifications on all existing commits.\n+                            history.setBranchHash(new Branch(ref.name()), listener.name(), localRepo.initialHash());\n+                        }\n+                    } else {\n+                        log.info(\"This is an existing repo with history, starting notifications from commits after \" + ref.hash());\n+                        for (var listener : listeners) {\n+                            log.info(\"Resetting mark for branch '\" + ref.name() + \"' for listener '\" + listener.name() + \"'\");\n+                            \/\/ Initialize the mark for the branches with the current HEAD hash. Notifications will start on future commits.\n+                            history.setBranchHash(new Branch(ref.name()), listener.name(), ref.hash());\n+                        }\n@@ -371,2 +384,0 @@\n-                } else {\n-                    errors.addAll(handleRef(localRepo, history, ref, knownRefs, scratchPath));\n@@ -374,0 +385,1 @@\n+                errors.addAll(handleRef(localRepo, history, ref, knownRefs, scratchPath));\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/RepositoryWorkItem.java","additions":17,"deletions":5,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -138,2 +138,2 @@\n-            assertEquals(1, idempotent.updateCount);\n-            assertEquals(1, nonIdempotent.updateCount);\n+            assertEquals(2, idempotent.updateCount);\n+            assertEquals(2, nonIdempotent.updateCount);\n@@ -149,2 +149,2 @@\n-            assertEquals(2, idempotent.updateCount);\n-            assertEquals(2, nonIdempotent.updateCount);\n+            assertEquals(3, idempotent.updateCount);\n+            assertEquals(3, nonIdempotent.updateCount);\n@@ -155,2 +155,2 @@\n-            assertEquals(3, idempotent.updateCount);\n-            assertEquals(2, nonIdempotent.updateCount);\n+            assertEquals(4, idempotent.updateCount);\n+            assertEquals(3, nonIdempotent.updateCount);\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/UpdaterTests.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-            assertEquals(List.of(), findJsonFiles(jsonFolder, \"\"));\n+            assertEquals(1, findJsonFiles(jsonFolder, \"\").size());\n@@ -84,1 +84,1 @@\n-            assertEquals(1, jsonFiles.size());\n+            assertEquals(2, jsonFiles.size());\n@@ -86,0 +86,3 @@\n+            if (JSON.parse(jsonData).asArray().size() != 1) {\n+                jsonData = Files.readString(jsonFiles.get(1), StandardCharsets.UTF_8);\n+            }\n@@ -127,1 +130,1 @@\n-            assertEquals(List.of(), findJsonFiles(jsonFolder, \"\"));\n+            assertEquals(1, findJsonFiles(jsonFolder, \"\").size());\n@@ -138,1 +141,1 @@\n-            assertEquals(3, jsonFiles.size());\n+            assertEquals(4, jsonFiles.size());\n@@ -145,0 +148,3 @@\n+                    if (json.asArray().get(0).get(\"issue\").asArray().size() == 0) {\n+                        continue;\n+                    }\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/json\/JsonNotifierTests.java","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import org.openjdk.skara.mailinglist.Conversation;\n@@ -36,0 +37,1 @@\n+import java.util.stream.Stream;\n@@ -82,1 +84,1 @@\n-            \/\/ No mail should be sent on the first run as there is no history\n+            \/\/ One mail should be sent on first commit\n@@ -84,1 +86,1 @@\n-            assertThrows(RuntimeException.class, () -> listServer.processIncoming(Duration.ofMillis(1)));\n+            listServer.processIncoming();\n@@ -92,1 +94,3 @@\n-            var email = conversations.get(0).first();\n+            conversations.sort(Comparator.comparing(conversation -> conversation.first().subject()));\n+            \/\/ get the latest email\n+            var email = conversations.get(1).first();\n@@ -152,1 +156,1 @@\n-            \/\/ No mail should be sent on the first run as there is no history\n+            \/\/ One mail should be sent on first commit\n@@ -154,1 +158,1 @@\n-            assertThrows(RuntimeException.class, () -> listServer.processIncoming(Duration.ofMillis(1)));\n+            listServer.processIncoming();\n@@ -167,0 +171,2 @@\n+            conversations.sort(Comparator.comparing(conversation -> conversation.first().subject()));\n+            \/\/ get the latest email\n@@ -168,0 +174,3 @@\n+            if (email.body().contains(\"Initial commit\")) {\n+                email = conversations.get(1).first();\n+            }\n@@ -224,1 +233,1 @@\n-            \/\/ No mail should be sent on the first run as there is no history\n+            \/\/ One mail should be sent on first commit\n@@ -226,1 +235,1 @@\n-            assertThrows(RuntimeException.class, () -> listServer.processIncoming(Duration.ofMillis(1)));\n+            listServer.processIncoming();\n@@ -245,1 +254,3 @@\n-            var email = conversations.get(0).first();\n+            conversations.sort(Comparator.comparing(conversation -> conversation.first().subject()));\n+            \/\/ get the latest email\n+            var email = conversations.get(1).first();\n@@ -302,1 +313,1 @@\n-            \/\/ No mail should be sent on the first run as there is no history\n+            \/\/ One mail should be sent on first commit\n@@ -304,1 +315,1 @@\n-            assertThrows(RuntimeException.class, () -> listServer.processIncoming(Duration.ofMillis(1)));\n+            listServer.processIncoming();\n@@ -314,1 +325,3 @@\n-            var email = conversations.get(0).first();\n+            conversations.sort(Comparator.comparing(conversation -> conversation.first().subject()));\n+            \/\/ get the latest email\n+            var email = conversations.get(1).first();\n@@ -369,1 +382,1 @@\n-            \/\/ No mail should be sent on the first run as there is no history\n+            \/\/ Two mails should be sent on first commit\n@@ -371,1 +384,2 @@\n-            assertThrows(RuntimeException.class, () -> listServer.processIncoming(Duration.ofMillis(1)));\n+            listServer.processIncoming();\n+            listServer.processIncoming();\n@@ -382,1 +396,6 @@\n-            var email = conversations.get(0).first();\n+            conversations.sort(Comparator.comparing(conversation -> conversation.first().subject()));\n+            \/\/ get the latest email\n+            var email = conversations.get(1).first();\n+            if (email.body().contains(\"Initial commit\")) {\n+                email = conversations.get(2).first();\n+            }\n@@ -472,1 +491,1 @@\n-            \/\/ No mail should be sent on the first run as there is no history\n+            \/\/ Two mails should be sent on first commit\n@@ -474,1 +493,2 @@\n-            assertThrows(RuntimeException.class, () -> listServer.processIncoming(Duration.ofMillis(1)));\n+            listServer.processIncoming();\n+            listServer.processIncoming();\n@@ -502,5 +522,3 @@\n-            assertEquals(2, conversations.size());\n-            var secondEmail = conversations.get(0).first();\n-            if (secondEmail.subject().contains(\"RFR\")) {\n-                secondEmail = conversations.get(1).first();\n-            }\n+            assertEquals(4, conversations.size());\n+            conversations.sort(Comparator.comparing(conversation -> conversation.first().subject()));\n+            var secondEmail = conversations.get(2).first();\n@@ -551,1 +569,1 @@\n-            \/\/ No mail should be sent on the first run as there is no history\n+            \/\/ One mail should be sent on first commit\n@@ -553,1 +571,1 @@\n-            assertThrows(RuntimeException.class, () -> listServer.processIncoming(Duration.ofMillis(1)));\n+            listServer.processIncoming();\n@@ -588,1 +606,1 @@\n-            assertEquals(2, conversations.size());\n+            assertEquals(3, conversations.size());\n@@ -591,1 +609,1 @@\n-            var pushConversation = conversations.get(1);\n+            var pushConversation = conversations.get(2);\n@@ -642,1 +660,1 @@\n-            \/\/ No mail should be sent on the first run as there is no history\n+            \/\/ One mail should be sent on first commit\n@@ -644,1 +662,1 @@\n-            assertThrows(RuntimeException.class, () -> listServer.processIncoming(Duration.ofMillis(1)));\n+            listServer.processIncoming();\n@@ -684,1 +702,1 @@\n-            assertEquals(2, conversations.size());\n+            assertEquals(3, conversations.size());\n@@ -687,1 +705,0 @@\n-            var pushConversation = conversations.get(1);\n@@ -690,1 +707,4 @@\n-            var pushEmail = pushConversation.first();\n+            var pushEmail = conversations.get(1).first();\n+            if (pushEmail.body().contains(\"Initial commit\")) {\n+                pushEmail = conversations.get(2).first();\n+            }\n@@ -740,1 +760,1 @@\n-            \/\/ No mail should be sent on the first run as there is no history\n+            \/\/ Two mails should be sent on first commit\n@@ -742,1 +762,2 @@\n-            assertThrows(RuntimeException.class, () -> listServer.processIncoming(Duration.ofMillis(1)));\n+            listServer.processIncoming();\n+            listServer.processIncoming();\n@@ -769,1 +790,2 @@\n-            assertEquals(1, conversations.size());\n+            conversations.sort(Comparator.comparing(conversation -> conversation.first().subject()));\n+            assertEquals(3, conversations.size());\n@@ -782,1 +804,1 @@\n-            assertEquals(2, conversations.size());\n+            assertEquals(4, conversations.size());\n@@ -784,1 +806,1 @@\n-            var pushConversation = conversations.get(1);\n+            var pushConversation = conversations.get(2);\n@@ -843,1 +865,1 @@\n-            \/\/ No mail should be sent on the first run as there is no history\n+            \/\/ One mail should be sent on first commit\n@@ -845,1 +867,1 @@\n-            assertThrows(RuntimeException.class, () -> listServer.processIncoming(Duration.ofMillis(1)));\n+            listServer.processIncoming();\n@@ -866,1 +888,1 @@\n-            assertEquals(4, conversations.size());\n+            assertEquals(5, conversations.size());\n@@ -902,1 +924,5 @@\n-                } else {\n+                } else if(email.subject().equals(\"git: test: 2 new changesets\")){\n+                    assertTrue(email.body().contains(\"Initial commit\"));\n+                    assertTrue(email.body().contains(\"Lock\"));\n+                }\n+                else {\n@@ -962,1 +988,1 @@\n-            \/\/ No mail should be sent on the first run as there is no history\n+            \/\/ One mail should be sent on first commit\n@@ -964,1 +990,1 @@\n-            assertThrows(RuntimeException.class, () -> listServer.processIncoming(Duration.ofMillis(1)));\n+            listServer.processIncoming();\n@@ -985,1 +1011,1 @@\n-            assertEquals(4, conversations.size());\n+            assertEquals(5, conversations.size());\n@@ -997,0 +1023,2 @@\n+                } else if(email.subject().equals(\"git: test: 2 new changesets\")){\n+                    assertEquals(EmailAddress.from(\"test\", \"test@test.test\"), email.author());\n@@ -1047,1 +1075,1 @@\n-            \/\/ No mail should be sent on the first run as there is no history\n+            \/\/ One mail should be sent on first commit\n@@ -1049,1 +1077,1 @@\n-            assertThrows(RuntimeException.class, () -> listServer.processIncoming(Duration.ofMillis(1)));\n+            listServer.processIncoming();\n@@ -1058,1 +1086,2 @@\n-            var email = conversations.get(0).first();\n+            conversations.sort(Comparator.comparing(conversation -> conversation.first().subject()));\n+            var email = conversations.get(1).first();\n@@ -1076,4 +1105,3 @@\n-            var newConversation = mailmanList.conversations(Duration.ofDays(1)).stream()\n-                                             .filter(c -> !c.equals(conversations.get(0)))\n-                                             .findFirst().orElseThrow();\n-            email = newConversation.first();\n+            conversations = mailmanList.conversations(Duration.ofDays(1));\n+            conversations.sort(Comparator.comparing(conversation -> conversation.first().subject()));\n+            email = conversations.get(2).first();\n@@ -1129,1 +1157,1 @@\n-            \/\/ No mail should be sent on the first run as there is no history\n+            \/\/ One mail should be sent on first commit\n@@ -1131,1 +1159,1 @@\n-            assertThrows(RuntimeException.class, () -> listServer.processIncoming(Duration.ofMillis(1)));\n+            listServer.processIncoming();\n@@ -1142,1 +1170,1 @@\n-            assertEquals(1, conversations.size());\n+            assertEquals(2, conversations.size());\n@@ -1151,1 +1179,80 @@\n-            assertEquals(2, conversations.size());\n+            assertEquals(3, conversations.size());\n+        }\n+    }\n+\n+    @Test\n+    void testMailingListWithExistingRepo(TestInfo testInfo) throws IOException {\n+        try (var listServer = new TestMailmanServer();\n+             var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var repo = credentials.getHostedRepository();\n+            var repoFolder = tempFolder.path().resolve(\"repo\");\n+            var localRepo = CheckableRepository.init(repoFolder, repo.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            credentials.commitLock(localRepo);\n+            localRepo.pushAll(repo.url());\n+\n+            var listAddress = EmailAddress.parse(listServer.createList(\"test\"));\n+            var mailmanServer = MailingListServerFactory.createMailmanServer(listServer.getArchive(), listServer.getSMTP(), Duration.ZERO);\n+            var mailmanList = mailmanServer.getListReader(listAddress.address());\n+            var tagStorage = createTagStorage(repo);\n+            var branchStorage = createBranchStorage(repo);\n+            var prStateStorage = createPullRequestStateStorage(repo);\n+            var storageFolder = tempFolder.path().resolve(\"storage\");\n+\n+            var sender = EmailAddress.from(\"duke\", \"duke@duke.duke\");\n+            var notifyBot = NotifyBot.newBuilder()\n+                    .repository(repo)\n+                    .storagePath(storageFolder)\n+                    .branches(Pattern.compile(\"master\"))\n+                    .tagStorageBuilder(tagStorage)\n+                    .branchStorageBuilder(branchStorage)\n+                    .prStateStorageBuilder(prStateStorage)\n+                    .build();\n+            var updater = MailingListNotifier.newBuilder()\n+                    .server(mailmanServer)\n+                    .recipient(listAddress)\n+                    .sender(sender)\n+                    .reportNewTags(false)\n+                    .reportNewBranches(false)\n+                    .reportNewBuilds(false)\n+                    .headers(Map.of(\"extra1\", \"value1\", \"extra2\", \"value2\"))\n+                    .allowedAuthorDomains(Pattern.compile(\"none\"))\n+                    .build();\n+            updater.attachTo(notifyBot);\n+\n+            CheckableRepository.appendAndCommit(localRepo,\"commit1\", \"commit1\");\n+            CheckableRepository.appendAndCommit(localRepo,\"commit2\", \"commit2\");\n+            var updateHash = CheckableRepository.appendAndCommit(localRepo,\"commit3\", \"commit3\");\n+            localRepo.push(updateHash,repo.url(),\"master\");\n+\n+            \/\/ No mail should be sent on first commit because it has a long history(commit count > 5)\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+            assertThrows(RuntimeException.class, () -> listServer.processIncoming());\n+\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, \"Another line\", \"23456789: More fixes\");\n+            localRepo.push(editHash, repo.url(), \"master\");\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+            listServer.processIncoming();\n+\n+            var conversations = mailmanList.conversations(Duration.ofDays(1));\n+            conversations.sort(Comparator.comparing(conversation -> conversation.first().subject()));\n+            \/\/ get the latest email\n+            var email = conversations.get(0).first();\n+            assertEquals(listAddress, email.sender());\n+            assertEquals(sender, email.author());\n+            assertEquals(email.recipients(), List.of(listAddress));\n+            assertTrue(email.subject().contains(\": 23456789: More fixes\"));\n+            assertFalse(email.subject().contains(\"master\"));\n+            assertTrue(email.body().contains(\"Changeset: \" + editHash.abbreviate()));\n+            assertTrue(email.body().contains(\"23456789: More fixes\"));\n+            assertFalse(email.body().contains(\"Committer\"));\n+            assertFalse(email.body().contains(masterHash.abbreviate()));\n+            assertTrue(email.hasHeader(\"extra1\"));\n+            assertEquals(\"value1\", email.headerValue(\"extra1\"));\n+            assertTrue(email.hasHeader(\"extra2\"));\n+            assertEquals(\"value2\", email.headerValue(\"extra2\"));\n+            assertTrue(email.hasHeader(\"X-Git-URL\"));\n+            assertEquals(repo.webUrl().toString(), email.headerValue(\"X-Git-URL\"));\n+            assertTrue(email.hasHeader(\"X-Git-Changeset\"));\n+            assertEquals(editHash.hex(), email.headerValue(\"X-Git-Changeset\"));\n@@ -1154,0 +1261,1 @@\n+\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/mailinglist\/MailingListNotifierTests.java","additions":161,"deletions":53,"binary":false,"changes":214,"status":"modified"},{"patch":"@@ -340,0 +340,10 @@\n+\n+    @Override\n+    public int commitCount() throws IOException {\n+        return 0;\n+    }\n+\n+    @Override\n+    public Hash initialHash() {\n+        return null;\n+    }\n","filename":"jcheck\/src\/test\/java\/org\/openjdk\/skara\/jcheck\/TestRepository.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -170,0 +170,7 @@\n+\n+    int commitCount() throws IOException;\n+\n+    \/**\n+     * Returns the special hash that references the virtual commit before the first real commit in a repository.\n+     *\/\n+    Hash initialHash();\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/ReadOnlyRepository.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1650,0 +1650,12 @@\n+\n+    @Override\n+    public int commitCount() throws IOException {\n+        try (var p = capture(\"git\", \"rev-list\", \"--all\", \"--count\")) {\n+            return Integer.parseInt(await(p).stdout().get(0));\n+        }\n+    }\n+\n+    @Override\n+    public Hash initialHash() {\n+        return EMPTY_TREE;\n+    }\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/git\/GitRepository.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -53,0 +53,2 @@\n+    private static final Hash NULL_REVISION = new Hash(\"0\".repeat(40));\n+\n@@ -1497,0 +1499,12 @@\n+\n+    @Override\n+    public int commitCount() throws IOException {\n+        try (var p = capture(\"hg\", \"id\", \"--num\", \"--rev\", \"tip\")) {\n+            return Integer.parseInt(await(p).stdout().get(0)) + 1;\n+        }\n+    }\n+\n+    @Override\n+    public Hash initialHash() {\n+        return NULL_REVISION;\n+    }\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/hg\/HgRepository.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"}]}