{"files":[{"patch":"@@ -66,0 +66,2 @@\n+    private static final String INITIAL_GIT_HASH = \"4b825dc642cb6eb9a060e54bf8d69288fbee4904\";\n+\n@@ -369,1 +371,3 @@\n-                        history.setBranchHash(new Branch(ref.name()), listener.name(), ref.hash());\n+                        \/\/ Initial the hash for the branches in the first commit, so that the branches will not be treated as 'new'\n+                        \/\/ and the first commit will be treated as 'update', so we will get notifications\n+                        history.setBranchHash(new Branch(ref.name()), listener.name(), new Hash(INITIAL_GIT_HASH));\n@@ -371,2 +375,0 @@\n-                } else {\n-                    errors.addAll(handleRef(localRepo, history, ref, knownRefs, scratchPath));\n@@ -374,0 +376,1 @@\n+                errors.addAll(handleRef(localRepo, history, ref, knownRefs, scratchPath));\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/RepositoryWorkItem.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -138,2 +138,2 @@\n-            assertEquals(1, idempotent.updateCount);\n-            assertEquals(1, nonIdempotent.updateCount);\n+            assertEquals(2, idempotent.updateCount);\n+            assertEquals(2, nonIdempotent.updateCount);\n@@ -149,2 +149,2 @@\n-            assertEquals(2, idempotent.updateCount);\n-            assertEquals(2, nonIdempotent.updateCount);\n+            assertEquals(3, idempotent.updateCount);\n+            assertEquals(3, nonIdempotent.updateCount);\n@@ -155,2 +155,2 @@\n-            assertEquals(3, idempotent.updateCount);\n-            assertEquals(2, nonIdempotent.updateCount);\n+            assertEquals(4, idempotent.updateCount);\n+            assertEquals(3, nonIdempotent.updateCount);\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/UpdaterTests.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-            assertEquals(List.of(), findJsonFiles(jsonFolder, \"\"));\n+            assertEquals(1, findJsonFiles(jsonFolder, \"\").size());\n@@ -84,1 +84,1 @@\n-            assertEquals(1, jsonFiles.size());\n+            assertEquals(2, jsonFiles.size());\n@@ -86,0 +86,3 @@\n+            if (JSON.parse(jsonData).asArray().size() != 1) {\n+                jsonData = Files.readString(jsonFiles.get(1), StandardCharsets.UTF_8);\n+            }\n@@ -127,1 +130,1 @@\n-            assertEquals(List.of(), findJsonFiles(jsonFolder, \"\"));\n+            assertEquals(1, findJsonFiles(jsonFolder, \"\").size());\n@@ -138,1 +141,1 @@\n-            assertEquals(3, jsonFiles.size());\n+            assertEquals(4, jsonFiles.size());\n@@ -145,0 +148,3 @@\n+                    if (json.asArray().get(0).get(\"issue\").asArray().size() == 0) {\n+                        continue;\n+                    }\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/json\/JsonNotifierTests.java","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import org.openjdk.skara.mailinglist.Conversation;\n@@ -36,0 +37,1 @@\n+import java.util.stream.Stream;\n@@ -82,1 +84,1 @@\n-            \/\/ No mail should be sent on the first run as there is no history\n+            \/\/ One mail should be sent on first commit\n@@ -84,1 +86,1 @@\n-            assertThrows(RuntimeException.class, () -> listServer.processIncoming(Duration.ofMillis(1)));\n+            listServer.processIncoming();\n@@ -92,1 +94,3 @@\n-            var email = conversations.get(0).first();\n+            conversations.sort(Comparator.comparing(conversation -> conversation.first().subject()));\n+            \/\/ get the latest email\n+            var email = conversations.get(1).first();\n@@ -152,1 +156,1 @@\n-            \/\/ No mail should be sent on the first run as there is no history\n+            \/\/ One mail should be sent on first commit\n@@ -154,1 +158,1 @@\n-            assertThrows(RuntimeException.class, () -> listServer.processIncoming(Duration.ofMillis(1)));\n+            listServer.processIncoming();\n@@ -167,0 +171,2 @@\n+            conversations.sort(Comparator.comparing(conversation -> conversation.first().subject()));\n+            \/\/ get the latest email\n@@ -168,0 +174,3 @@\n+            if (email.body().contains(\"Initial commit\")) {\n+                email = conversations.get(1).first();\n+            }\n@@ -224,1 +233,1 @@\n-            \/\/ No mail should be sent on the first run as there is no history\n+            \/\/ One mail should be sent on first commit\n@@ -226,1 +235,1 @@\n-            assertThrows(RuntimeException.class, () -> listServer.processIncoming(Duration.ofMillis(1)));\n+            listServer.processIncoming();\n@@ -245,1 +254,3 @@\n-            var email = conversations.get(0).first();\n+            conversations.sort(Comparator.comparing(conversation -> conversation.first().subject()));\n+            \/\/ get the latest email\n+            var email = conversations.get(1).first();\n@@ -302,1 +313,1 @@\n-            \/\/ No mail should be sent on the first run as there is no history\n+            \/\/ One mail should be sent on first commit\n@@ -304,1 +315,1 @@\n-            assertThrows(RuntimeException.class, () -> listServer.processIncoming(Duration.ofMillis(1)));\n+            listServer.processIncoming();\n@@ -314,1 +325,3 @@\n-            var email = conversations.get(0).first();\n+            conversations.sort(Comparator.comparing(conversation -> conversation.first().subject()));\n+            \/\/ get the latest email\n+            var email = conversations.get(1).first();\n@@ -369,1 +382,1 @@\n-            \/\/ No mail should be sent on the first run as there is no history\n+            \/\/ Two mails should be sent on first commit\n@@ -371,1 +384,2 @@\n-            assertThrows(RuntimeException.class, () -> listServer.processIncoming(Duration.ofMillis(1)));\n+            listServer.processIncoming();\n+            listServer.processIncoming();\n@@ -382,1 +396,6 @@\n-            var email = conversations.get(0).first();\n+            conversations.sort(Comparator.comparing(conversation -> conversation.first().subject()));\n+            \/\/ get the latest email\n+            var email = conversations.get(1).first();\n+            if (email.body().contains(\"Initial commit\")) {\n+                email = conversations.get(2).first();\n+            }\n@@ -472,1 +491,1 @@\n-            \/\/ No mail should be sent on the first run as there is no history\n+            \/\/ Two mails should be sent on first commit\n@@ -474,1 +493,2 @@\n-            assertThrows(RuntimeException.class, () -> listServer.processIncoming(Duration.ofMillis(1)));\n+            listServer.processIncoming();\n+            listServer.processIncoming();\n@@ -502,5 +522,3 @@\n-            assertEquals(2, conversations.size());\n-            var secondEmail = conversations.get(0).first();\n-            if (secondEmail.subject().contains(\"RFR\")) {\n-                secondEmail = conversations.get(1).first();\n-            }\n+            assertEquals(4, conversations.size());\n+            conversations.sort(Comparator.comparing(conversation -> conversation.first().subject()));\n+            var secondEmail = conversations.get(2).first();\n@@ -551,1 +569,1 @@\n-            \/\/ No mail should be sent on the first run as there is no history\n+            \/\/ One mail should be sent on first commit\n@@ -553,1 +571,1 @@\n-            assertThrows(RuntimeException.class, () -> listServer.processIncoming(Duration.ofMillis(1)));\n+            listServer.processIncoming();\n@@ -588,1 +606,1 @@\n-            assertEquals(2, conversations.size());\n+            assertEquals(3, conversations.size());\n@@ -591,1 +609,1 @@\n-            var pushConversation = conversations.get(1);\n+            var pushConversation = conversations.get(2);\n@@ -642,1 +660,1 @@\n-            \/\/ No mail should be sent on the first run as there is no history\n+            \/\/ One mail should be sent on first commit\n@@ -644,1 +662,1 @@\n-            assertThrows(RuntimeException.class, () -> listServer.processIncoming(Duration.ofMillis(1)));\n+            listServer.processIncoming();\n@@ -684,1 +702,1 @@\n-            assertEquals(2, conversations.size());\n+            assertEquals(3, conversations.size());\n@@ -687,1 +705,0 @@\n-            var pushConversation = conversations.get(1);\n@@ -690,1 +707,4 @@\n-            var pushEmail = pushConversation.first();\n+            var pushEmail = conversations.get(1).first();\n+            if (pushEmail.body().contains(\"Initial commit\")) {\n+                pushEmail = conversations.get(2).first();\n+            }\n@@ -740,1 +760,1 @@\n-            \/\/ No mail should be sent on the first run as there is no history\n+            \/\/ Two mails should be sent on first commit\n@@ -742,1 +762,2 @@\n-            assertThrows(RuntimeException.class, () -> listServer.processIncoming(Duration.ofMillis(1)));\n+            listServer.processIncoming();\n+            listServer.processIncoming();\n@@ -769,1 +790,2 @@\n-            assertEquals(1, conversations.size());\n+            conversations.sort(Comparator.comparing(conversation -> conversation.first().subject()));\n+            assertEquals(3, conversations.size());\n@@ -782,1 +804,1 @@\n-            assertEquals(2, conversations.size());\n+            assertEquals(4, conversations.size());\n@@ -784,1 +806,1 @@\n-            var pushConversation = conversations.get(1);\n+            var pushConversation = conversations.get(2);\n@@ -843,1 +865,1 @@\n-            \/\/ No mail should be sent on the first run as there is no history\n+            \/\/ One mail should be sent on first commit\n@@ -845,1 +867,1 @@\n-            assertThrows(RuntimeException.class, () -> listServer.processIncoming(Duration.ofMillis(1)));\n+            listServer.processIncoming();\n@@ -866,1 +888,1 @@\n-            assertEquals(4, conversations.size());\n+            assertEquals(5, conversations.size());\n@@ -902,1 +924,5 @@\n-                } else {\n+                } else if(email.subject().equals(\"git: test: 2 new changesets\")){\n+                    assertTrue(email.body().contains(\"Initial commit\"));\n+                    assertTrue(email.body().contains(\"Lock\"));\n+                }\n+                else {\n@@ -962,1 +988,1 @@\n-            \/\/ No mail should be sent on the first run as there is no history\n+            \/\/ One mail should be sent on first commit\n@@ -964,1 +990,1 @@\n-            assertThrows(RuntimeException.class, () -> listServer.processIncoming(Duration.ofMillis(1)));\n+            listServer.processIncoming();\n@@ -985,1 +1011,1 @@\n-            assertEquals(4, conversations.size());\n+            assertEquals(5, conversations.size());\n@@ -997,0 +1023,2 @@\n+                } else if(email.subject().equals(\"git: test: 2 new changesets\")){\n+                    assertEquals(EmailAddress.from(\"test\", \"test@test.test\"), email.author());\n@@ -1047,1 +1075,1 @@\n-            \/\/ No mail should be sent on the first run as there is no history\n+            \/\/ One mail should be sent on first commit\n@@ -1049,1 +1077,1 @@\n-            assertThrows(RuntimeException.class, () -> listServer.processIncoming(Duration.ofMillis(1)));\n+            listServer.processIncoming();\n@@ -1058,1 +1086,2 @@\n-            var email = conversations.get(0).first();\n+            conversations.sort(Comparator.comparing(conversation -> conversation.first().subject()));\n+            var email = conversations.get(1).first();\n@@ -1076,4 +1105,3 @@\n-            var newConversation = mailmanList.conversations(Duration.ofDays(1)).stream()\n-                                             .filter(c -> !c.equals(conversations.get(0)))\n-                                             .findFirst().orElseThrow();\n-            email = newConversation.first();\n+            conversations = mailmanList.conversations(Duration.ofDays(1));\n+            conversations.sort(Comparator.comparing(conversation -> conversation.first().subject()));\n+            email = conversations.get(2).first();\n@@ -1129,1 +1157,1 @@\n-            \/\/ No mail should be sent on the first run as there is no history\n+            \/\/ One mail should be sent on first commit\n@@ -1131,1 +1159,1 @@\n-            assertThrows(RuntimeException.class, () -> listServer.processIncoming(Duration.ofMillis(1)));\n+            listServer.processIncoming();\n@@ -1142,1 +1170,1 @@\n-            assertEquals(1, conversations.size());\n+            assertEquals(2, conversations.size());\n@@ -1151,1 +1179,1 @@\n-            assertEquals(2, conversations.size());\n+            assertEquals(3, conversations.size());\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/mailinglist\/MailingListNotifierTests.java","additions":81,"deletions":53,"binary":false,"changes":134,"status":"modified"}]}