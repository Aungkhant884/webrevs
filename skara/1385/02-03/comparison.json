{"files":[{"patch":"@@ -40,0 +40,2 @@\n+import static org.openjdk.skara.vcs.git.GitRepository.EMPTY_TREE;\n+\n@@ -66,3 +68,1 @@\n-    private static final String INITIAL_GIT_HASH = \"4b825dc642cb6eb9a060e54bf8d69288fbee4904\";\n-\n-    private static final int THRESHOLD = 5;\n+    private static final int NEW_REPOSITORY_COMMIT_THRESHOLD = 5;\n@@ -368,1 +368,0 @@\n-            int existingCommits = localRepo.getExistingCommits();\n@@ -372,1 +371,2 @@\n-                    if (existingCommits <= THRESHOLD) {\n+                    int existingCommits = localRepo.commitCount();\n+                    if (existingCommits <= NEW_REPOSITORY_COMMIT_THRESHOLD) {\n@@ -374,1 +374,1 @@\n-                        log.info(\"This is a new repo\");\n+                        log.info(\"This is a new repo, starting notifications from the very first commit\");\n@@ -377,3 +377,2 @@\n-                            \/\/ Initial the hash for the branches in the first commit, so that the branches will not be treated as 'new'\n-                            \/\/ and the first commit will be treated as 'update', so we will get notifications\n-                            history.setBranchHash(new Branch(ref.name()), listener.name(), new Hash(INITIAL_GIT_HASH));\n+                            \/\/ Initialize the mark for the branches with special Git empty tree hash to trigger notifications on all existing commits.\n+                            history.setBranchHash(new Branch(ref.name()), listener.name(), EMPTY_TREE);\n@@ -383,1 +382,1 @@\n-                        log.info(\"This is an existing repo with history\");\n+                        log.info(\"This is an existing repo with history, starting notifications from commits after \" + ref.hash());\n@@ -386,2 +385,1 @@\n-                            \/\/ Initial the hash for the branches in the first commit, so that the branches will not be treated as 'new'\n-                            \/\/ and the first commit will be treated as 'update', so we will get notifications\n+                            \/\/ Initialize the mark for the branches with the current HEAD hash. Notifications will start on future commits.\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/RepositoryWorkItem.java","additions":10,"deletions":12,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -1229,1 +1229,1 @@\n-            \/\/ No mail should be sent on first commit because it has a long history(commit times > 5)\n+            \/\/ No mail should be sent on first commit because it has a long history(commit count > 5)\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/mailinglist\/MailingListNotifierTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -170,0 +170,2 @@\n+\n+    int commitCount() throws IOException;\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/ReadOnlyRepository.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -300,2 +300,0 @@\n-\n-    int getExistingCommits() throws IOException;\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/Repository.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-    private static final Hash EMPTY_TREE = new Hash(\"4b825dc642cb6eb9a060e54bf8d69288fbee4904\");\n+    public static final Hash EMPTY_TREE = new Hash(\"4b825dc642cb6eb9a060e54bf8d69288fbee4904\");\n@@ -1652,1 +1652,1 @@\n-    public int getExistingCommits() throws IOException {\n+    public int commitCount() throws IOException {\n@@ -1654,1 +1654,1 @@\n-            return Integer.valueOf(await(p).stdout().get(0));\n+            return Integer.parseInt(await(p).stdout().get(0));\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/git\/GitRepository.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1499,3 +1499,4 @@\n-    public int getExistingCommits() throws IOException {\n-        \/\/TODO:: implement it later, return 10 here so that it will maintain the previous behavior\n-        return 10;\n+    public int commitCount() throws IOException {\n+        try (var p = capture(\"hg\", \"id\", \"--num\", \"--rev\",\"tip\")) {\n+            return Integer.parseInt(await(p).stdout().get(0)) + 1;\n+        }\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/hg\/HgRepository.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"}]}