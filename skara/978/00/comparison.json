{"files":[{"patch":"@@ -108,21 +108,22 @@\n-                      .map(JSONValue::asObject)\n-                      .filter(obj -> obj.get(\"system\").asBoolean())\n-                      .filter(obj -> obj.get(\"body\").asString().contains(\"approved this merge request\"))\n-                      .map(obj -> {\n-                          var reviewerObj = obj.get(\"author\").asObject();\n-                          var reviewer = HostUser.create(reviewerObj.get(\"id\").asInt(),\n-                                                         reviewerObj.get(\"username\").asString(),\n-                                                         reviewerObj.get(\"name\").asString());\n-                          var verdict = obj.get(\"body\").asString().contains(\"unapproved\") ? Review.Verdict.NONE : Review.Verdict.APPROVED;\n-                          var createdAt = ZonedDateTime.parse(obj.get(\"created_at\").asString());\n-\n-                          \/\/ Find the latest commit that isn't created after our review\n-                          var hash = commits.get(0).hash;\n-                          for (var cd : commits) {\n-                              if (createdAt.isAfter(cd.date)) {\n-                                  hash = cd.hash;\n-                              }\n-                          }\n-                          var id = obj.get(\"id\").asInt();\n-                          return new Review(createdAt, reviewer, verdict, hash, id, \"\");\n-                      });\n+                               .map(JSONValue::asObject)\n+                               .filter(obj -> obj.get(\"system\").asBoolean())\n+                               .filter(obj -> obj.get(\"body\").asString().contains(\"approved this merge request\"))\n+                               .sorted(Comparator.comparing(obj -> ZonedDateTime.parse(obj.get(\"created_at\").asString())))\n+                               .map(obj -> {\n+                                   var reviewerObj = obj.get(\"author\").asObject();\n+                                   var reviewer = HostUser.create(reviewerObj.get(\"id\").asInt(),\n+                                                                  reviewerObj.get(\"username\").asString(),\n+                                                                  reviewerObj.get(\"name\").asString());\n+                                   var verdict = obj.get(\"body\").asString().contains(\"unapproved\") ? Review.Verdict.NONE : Review.Verdict.APPROVED;\n+                                   var createdAt = ZonedDateTime.parse(obj.get(\"created_at\").asString());\n+\n+                                   \/\/ Find the latest commit that isn't created after our review\n+                                   var hash = commits.get(0).hash;\n+                                   for (var cd : commits) {\n+                                       if (createdAt.isAfter(cd.date)) {\n+                                           hash = cd.hash;\n+                                       }\n+                                   }\n+                                   var id = obj.get(\"id\").asInt();\n+                                   return new Review(createdAt, reviewer, verdict, hash, id, \"\");\n+                               });\n@@ -131,31 +132,32 @@\n-                      .map(JSONValue::asObject)\n-                      .filter(obj -> obj.get(\"name\").asString().equals(\"thumbsup\") ||\n-                              obj.get(\"name\").asString().equals(\"thumbsdown\") ||\n-                              obj.get(\"name\").asString().equals(\"question\"))\n-                      .map(obj -> {\n-                          var reviewer = repository.forge().user(obj.get(\"user\").get(\"username\").asString());\n-                          Review.Verdict verdict;\n-                          switch (obj.get(\"name\").asString()) {\n-                              case \"thumbsup\":\n-                                  verdict = Review.Verdict.APPROVED;\n-                                  break;\n-                              case \"thumbsdown\":\n-                                  verdict = Review.Verdict.DISAPPROVED;\n-                                  break;\n-                              default:\n-                                  verdict = Review.Verdict.NONE;\n-                                  break;\n-                          }\n-\n-                          var createdAt = ZonedDateTime.parse(obj.get(\"updated_at\").asString());\n-\n-                          \/\/ Find the latest commit that isn't created after our review\n-                          var hash = commits.get(0).hash;\n-                          for (var cd : commits) {\n-                              if (createdAt.isAfter(cd.date)) {\n-                                  hash = cd.hash;\n-                              }\n-                          }\n-                          var id = obj.get(\"id\").asInt();\n-                          return new Review(createdAt, reviewer.get(), verdict, hash, id, null);\n-                      });\n+                                    .map(JSONValue::asObject)\n+                                    .filter(obj -> obj.get(\"name\").asString().equals(\"thumbsup\") ||\n+                                            obj.get(\"name\").asString().equals(\"thumbsdown\") ||\n+                                            obj.get(\"name\").asString().equals(\"question\"))\n+                                    .sorted(Comparator.comparing(obj -> ZonedDateTime.parse(obj.get(\"updated_at\").asString())))\n+                                    .map(obj -> {\n+                                        var reviewer = repository.forge().user(obj.get(\"user\").get(\"username\").asString());\n+                                        Review.Verdict verdict;\n+                                        switch (obj.get(\"name\").asString()) {\n+                                            case \"thumbsup\":\n+                                                verdict = Review.Verdict.APPROVED;\n+                                                break;\n+                                            case \"thumbsdown\":\n+                                                verdict = Review.Verdict.DISAPPROVED;\n+                                                break;\n+                                            default:\n+                                                verdict = Review.Verdict.NONE;\n+                                                break;\n+                                        }\n+\n+                                        var createdAt = ZonedDateTime.parse(obj.get(\"updated_at\").asString());\n+\n+                                        \/\/ Find the latest commit that isn't created after our review\n+                                        var hash = commits.get(0).hash;\n+                                        for (var cd : commits) {\n+                                            if (createdAt.isAfter(cd.date)) {\n+                                                hash = cd.hash;\n+                                            }\n+                                        }\n+                                        var id = obj.get(\"id\").asInt();\n+                                        return new Review(createdAt, reviewer.get(), verdict, hash, id, null);\n+                                    });\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabMergeRequest.java","additions":54,"deletions":52,"binary":false,"changes":106,"status":"modified"}]}