{"files":[{"patch":"@@ -46,1 +46,0 @@\n-    private final String integrationCommand = \"\/integrate\\n<!-- Valid self-command -->\";\n@@ -324,36 +323,0 @@\n-\n-                        if (pr.labelNames().contains(\"ready\") && !pr.labelNames().contains(\"sponsor\")) {\n-                            var comments = pr.comments();\n-                            var integrateComments =\n-                                comments.stream()\n-                                        .filter(c -> c.author().equals(currentUser))\n-                                        .filter(c -> c.body().equals(integrationCommand))\n-                                        .collect(Collectors.toList());\n-                            if (integrateComments.isEmpty()) {\n-                                pr.addComment(integrationCommand);\n-                            } else {\n-                                var lastIntegrateComment = integrateComments.get(integrateComments.size() - 1);\n-                                var id = lastIntegrateComment.id();\n-                                var botUserId = \"43336822\";\n-                                var replyMarker = \"<!-- Jmerge command reply message (\" + id + \") -->\";\n-                                var replies = comments.stream()\n-                                                      .filter(c -> c.author().id().equals(botUserId))\n-                                                      .filter(c -> c.body().startsWith(replyMarker))\n-                                                      .collect(Collectors.toList());\n-                                if (replies.isEmpty()) {\n-                                    \/\/ No reply yet, just wait\n-                                } else {\n-                                    \/\/ Got a reply and the \"sponsor\" label is not present, check for error\n-                                    \/\/ and if we should add the `\/integrate` command again\n-                                    var lastReply = replies.get(replies.size() - 1);\n-                                    var lines = lastReply.body().split(\"\\n\");\n-                                    var errorPrefix = \"@openjdk-bot Your integration request cannot be fulfilled at this time\";\n-                                    if (lines.length > 1 && lines[1].startsWith(errorPrefix)) {\n-                                        \/\/ Try again\n-                                        pr.addComment(integrationCommand);\n-                                    }\n-                                    \/\/ Other reply, potentially due to rebase issue, just\n-                                    \/\/ wait for the labeler to add appropriate labels.\n-                                }\n-                            }\n-                        }\n@@ -620,0 +583,2 @@\n+                    message.add(\"\");\n+                    message.add(\"\/integrate auto\");\n","filename":"bots\/merge\/src\/main\/java\/org\/openjdk\/skara\/bots\/merge\/MergeBot.java","additions":2,"deletions":37,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -572,95 +572,0 @@\n-    @Test\n-    void resolvedMergeConflictShouldResultInIntegrateCommand(TestInfo testInfo) throws IOException {\n-        try (var temp = new TemporaryDirectory()) {\n-            var host = TestHost.createNew(List.of(HostUser.create(0, \"duke\", \"J. Duke\")));\n-\n-            var fromDir = temp.path().resolve(\"from.git\");\n-            var fromLocalRepo = TestableRepository.init(fromDir, VCS.GIT);\n-            var fromHostedRepo = new TestHostedRepository(host, \"test\", fromLocalRepo);\n-\n-            var toDir = temp.path().resolve(\"to.git\");\n-            var toLocalRepo = TestableRepository.init(toDir, VCS.GIT);\n-            var toGitConfig = toDir.resolve(\".git\").resolve(\"config\");\n-            Files.write(toGitConfig, List.of(\"[receive]\", \"denyCurrentBranch = ignore\"),\n-                        StandardOpenOption.APPEND);\n-            var toHostedRepo = new TestHostedRepository(host, \"test-mirror\", toLocalRepo);\n-\n-            var forkDir = temp.path().resolve(\"fork.git\");\n-            var forkLocalRepo = TestableRepository.init(forkDir, VCS.GIT);\n-            var forkGitConfig = forkDir.resolve(\".git\").resolve(\"config\");\n-            Files.write(forkGitConfig, List.of(\"[receive]\", \"denyCurrentBranch = ignore\"),\n-                        StandardOpenOption.APPEND);\n-            var toFork = new TestHostedRepository(host, \"test-mirror-fork\", forkLocalRepo);\n-\n-            var now = ZonedDateTime.now();\n-            var fromFileA = fromDir.resolve(\"a.txt\");\n-            Files.writeString(fromFileA, \"Hello A\\n\");\n-            fromLocalRepo.add(fromFileA);\n-            var fromHashA = fromLocalRepo.commit(\"Adding a.txt\", \"duke\", \"duke@openjdk.org\", now);\n-            var fromCommits = fromLocalRepo.commits().asList();\n-            assertEquals(1, fromCommits.size());\n-            assertEquals(fromHashA, fromCommits.get(0).hash());\n-\n-            var toFileA = toDir.resolve(\"a.txt\");\n-            Files.writeString(toFileA, \"Hello A\\n\");\n-            toLocalRepo.add(toFileA);\n-            var toHashA = toLocalRepo.commit(\"Adding a.txt\", \"duke\", \"duke@openjdk.org\", now);\n-            var toCommits = toLocalRepo.commits().asList();\n-            assertEquals(1, toCommits.size());\n-            assertEquals(toHashA, toCommits.get(0).hash());\n-            assertEquals(fromHashA, toHashA);\n-\n-            var fromFileB = fromDir.resolve(\"b.txt\");\n-            Files.writeString(fromFileB, \"Hello B1\\n\");\n-            fromLocalRepo.add(fromFileB);\n-            var fromHashB = fromLocalRepo.commit(\"Adding b1.txt\", \"duke\", \"duke@openjdk.org\", now);\n-\n-            var toFileB = toDir.resolve(\"b.txt\");\n-            Files.writeString(toFileB, \"Hello B2\\n\");\n-            toLocalRepo.add(toFileB);\n-            var toHashB = toLocalRepo.commit(\"Adding b2.txt\", \"duke\", \"duke@openjdk.org\", now);\n-\n-            var storage = temp.path().resolve(\"storage\");\n-            var master = new Branch(\"master\");\n-            var specs = List.of(new MergeBot.Spec(fromHostedRepo, master, master));\n-            var bot = new MergeBot(storage, toHostedRepo, toFork, specs);\n-            TestBotRunner.runPeriodicItems(bot);\n-            TestBotRunner.runPeriodicItems(bot);\n-\n-            toCommits = toLocalRepo.commits().asList();\n-            assertEquals(2, toCommits.size());\n-            var toHashes = toCommits.stream().map(Commit::hash).collect(Collectors.toSet());\n-            assertTrue(toHashes.contains(toHashA));\n-            assertTrue(toHashes.contains(toHashB));\n-\n-            var pullRequests = toHostedRepo.pullRequests();\n-            assertEquals(1, pullRequests.size());\n-            var pr = pullRequests.get(0);\n-            assertEquals(\"Merge test:master\", pr.title());\n-            assertTrue(pr.labelNames().contains(\"failed-auto-merge\"));\n-            assertTrue(forkLocalRepo.branches().contains(new Branch(\"master\")));\n-            assertTrue(forkLocalRepo.branches().contains(new Branch(\"2\")));\n-\n-            \/\/ Bot should do nothing as long as PR is presnt\n-            TestBotRunner.runPeriodicItems(bot);\n-            pullRequests = toHostedRepo.pullRequests();\n-            assertEquals(1, pullRequests.size());\n-            pr = pullRequests.get(0);\n-\n-            \/\/ Simulate that the merge-conflict has been resolved by adding the \"ready\" label\n-            pr.addLabel(\"ready\");\n-            TestBotRunner.runPeriodicItems(bot);\n-            pullRequests = toHostedRepo.pullRequests();\n-            assertEquals(1, pullRequests.size());\n-\n-            pr = pullRequests.get(0);\n-            var numComments = pr.comments().size();\n-            var lastComment = pr.comments().get(pr.comments().size() - 1);\n-            assertEquals(\"\/integrate\\n<!-- Valid self-command -->\", lastComment.body());\n-\n-            \/\/ Running the bot again should not result in another comment\n-            TestBotRunner.runPeriodicItems(bot);\n-            assertEquals(numComments, toHostedRepo.pullRequests().size());\n-        }\n-    }\n-\n","filename":"bots\/merge\/src\/test\/java\/org\/openjdk\/skara\/bots\/merge\/MergeBotTests.java","additions":0,"deletions":95,"binary":false,"changes":95,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-        if (readyHash.isEmpty()) {\n+        if (!pr.labelNames().contains(\"auto\") && readyHash.isEmpty()) {\n@@ -62,1 +62,1 @@\n-        if (!pr.headHash().equals(acceptedHash)) {\n+        if (!pr.labelNames().contains(\"auto\") && !pr.headHash().equals(acceptedHash)) {\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/SponsorCommand.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}