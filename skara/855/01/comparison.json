{"files":[{"patch":"@@ -34,1 +34,0 @@\n-import java.util.*;\n@@ -36,0 +35,1 @@\n+import java.util.*;\n@@ -373,1 +373,0 @@\n-\n@@ -393,0 +392,8 @@\n+        if (pr.sourceRepository().isPresent()) {\n+            var sourceRepo = pr.sourceRepository().get();\n+            var checks = sourceRepo.allChecks(pr.headHash());\n+\n+            var resultSummary = TestResults.summarize(checks);\n+            resultSummary.ifPresent(progressBody::append);\n+        }\n+\n@@ -544,1 +551,1 @@\n-                message.append(\"\/CONTRIBUTING.md) for more details.\");\n+                message.append(\"\/CONTRIBUTING.md) for details.\");\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,165 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bots.pr;\n+\n+import org.openjdk.skara.forge.*;\n+\n+import java.time.ZonedDateTime;\n+import java.util.*;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+public class TestResults {\n+    private static String platformFromName(String checkName) {\n+        var checkFlavorStart = checkName.indexOf(\"(\");\n+        if (checkFlavorStart > 0) {\n+            return checkName.substring(0, checkFlavorStart - 1).strip();\n+        } else {\n+            return checkName.strip();\n+        }\n+    }\n+\n+    private static String flavorFromName(String checkName) {\n+        var checkFlavorStart = checkName.indexOf(\"(\");\n+        var checkFlavorEnd = checkName.lastIndexOf(\")\");\n+        if (checkFlavorStart > 0 && checkFlavorEnd > checkFlavorStart) {\n+            var flavor = checkName.substring(checkFlavorStart + 1, checkFlavorEnd).strip().toLowerCase();\n+            for (int i = 1; i < 10; ++i) {\n+                if (flavor.contains(\"tier\" + i)) {\n+                    return \"Test (tier\" + i + \")\";\n+                }\n+            }\n+            if (flavor.contains(\"build\")) {\n+                return \"Build\";\n+            }\n+        }\n+        \/\/ Fallback value\n+        return \"Build \/ test\";\n+    }\n+\n+    private static boolean ignoredCheck(String checkName) {\n+        var lcName = checkName.toLowerCase();\n+        return lcName.contains(\"jcheck\") || lcName.contains(\"prerequisites\") || lcName.contains(\"post-process\");\n+    }\n+\n+    static Optional<String> summarize(List<Check> checks) {\n+        \/\/ Retain only the latest when there are multiple checks with the same name\n+        var latestChecks = checks.stream()\n+                                 .filter(check -> !ignoredCheck(check.name()))\n+                                 .sorted(Comparator.comparing(Check::startedAt, ZonedDateTime::compareTo))\n+                                 .collect(Collectors.toMap(Check::name, Function.identity(), (a, b) -> b, LinkedHashMap::new));\n+        if (latestChecks.isEmpty()) {\n+            return Optional.empty();\n+        }\n+\n+        var platforms = latestChecks.values().stream()\n+                                    .map(check -> platformFromName(check.name()))\n+                                    .collect(Collectors.toCollection(TreeSet::new));\n+        var flavors = latestChecks.values().stream()\n+                                  .map(check -> flavorFromName(check.name()))\n+                                  .collect(Collectors.toCollection(TreeSet::new));\n+        if (platforms.isEmpty() || flavors.isEmpty()) {\n+            return Optional.empty();\n+        }\n+\n+        var platformFlavors = latestChecks.values().stream()\n+                                          .collect(Collectors.groupingBy(check -> platformFromName(check.name()))).entrySet().stream()\n+                                          .collect(Collectors.toMap(Map.Entry::getKey,\n+                                                                    entry -> entry.getValue().stream()\n+                                                                                  .collect(Collectors.groupingBy(check -> flavorFromName(check.name())))));\n+\n+        var resultsBody = new StringBuilder();\n+        resultsBody.append(\"\\n\\n### Successful test tasks\\n\\n\");\n+        resultsBody.append(\"|     |\");\n+        platforms.forEach(platform -> resultsBody.append(\" \").append(platform).append(\" |\"));\n+        resultsBody.append(\"\\n| --- |\");\n+        platforms.forEach(platform -> resultsBody.append(\" ----- |\"));\n+        for (var flavor : flavors) {\n+            resultsBody.append(\"\\n| \").append(flavor).append(\" |\");\n+            for (var platform : platforms) {\n+                var platformChecks = platformFlavors.get(platform);\n+                var flavorChecks = platformChecks.get(flavor);\n+                if (flavorChecks != null) {\n+                    int failureCount = 0;\n+                    int pendingCount = 0;\n+                    int successCount = 0;\n+                    for (var check : flavorChecks) {\n+                        switch (check.status()) {\n+                            case IN_PROGRESS:\n+                                pendingCount++;\n+                                break;\n+                            case FAILURE:\n+                                failureCount++;\n+                                break;\n+                            case SUCCESS:\n+                                successCount++;\n+                                break;\n+                        }\n+                    }\n+                    int total = failureCount + pendingCount + successCount;\n+                    if (failureCount > 0) {\n+                        resultsBody.append(\" ❌\");\n+                        resultsBody.append(\" (\").append(failureCount).append(\"\/\").append(total).append(\" failed) |\");\n+                    } else if (pendingCount > 0) {\n+                        resultsBody.append(\" ⏳\");\n+                        resultsBody.append(\" (\").append(pendingCount).append(\"\/\").append(total).append(\" in progress) |\");\n+                    } else {\n+                        resultsBody.append(\" ✔️\");\n+                        resultsBody.append(\" (\").append(successCount).append(\"\/\").append(total).append(\" passed) |\");\n+                    }\n+\n+                } else {\n+                    resultsBody.append(\"    | \");\n+                }\n+            }\n+        }\n+\n+        var failedChecks = latestChecks.values().stream()\n+                                       .filter(check -> check.status() == CheckStatus.FAILURE)\n+                                       .sorted(Comparator.comparing(Check::name))\n+                                       .collect(Collectors.toList());\n+        if (!failedChecks.isEmpty()) {\n+            resultsBody.append(\"\\n\\n**Failed test task\");\n+            if (failedChecks.size() > 1) {\n+                resultsBody.append(\"s\");\n+            }\n+            resultsBody.append(\"**\");\n+            for (var failedCheck : failedChecks) {\n+                resultsBody.append(\"\\n- \");\n+                if (failedCheck.details().isPresent()) {\n+                    resultsBody.append(\"[\");\n+                    resultsBody.append(failedCheck.name());\n+                    resultsBody.append(\"](\");\n+                    resultsBody.append(failedCheck.details().get().toString());\n+                    resultsBody.append(\")\");\n+                } else {\n+                    resultsBody.append(\"`\");\n+                    resultsBody.append(failedCheck.name());\n+                    resultsBody.append(\"`\");\n+                }\n+            }\n+        }\n+\n+        return Optional.of(resultsBody.toString());\n+    }\n+}\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/TestResults.java","additions":165,"deletions":0,"binary":false,"changes":165,"status":"added"},{"patch":"@@ -31,0 +31,1 @@\n+import java.net.URI;\n@@ -1684,0 +1685,49 @@\n+\n+    @Test\n+    void preSubmitInSummary(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var issues = credentials.getIssueProject();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                                           .addAuthor(author.forge().currentUser().id())\n+                                           .addReviewer(reviewer.forge().currentUser().id());\n+            var checkBot = PullRequestBot.newBuilder().repo(author).censusRepo(censusBuilder.build()).issueProject(issues).build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType(), Path.of(\"appendable.txt\"),\n+                                                     Set.of(\"issues\"), null);\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Make a draft PR where we can add some checks\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"preedit\", true);\n+            var draftPr = credentials.createPullRequest(author, \"master\", \"preedit\", \"This is a pull request\", true);\n+            var check1 = CheckBuilder.create(\"ps1\", editHash).title(\"PS1\");\n+            draftPr.createCheck(check1.build());\n+            draftPr.updateCheck(check1.complete(true).build());\n+            var check2 = CheckBuilder.create(\"ps2\", editHash).title(\"PS2\");\n+            draftPr.createCheck(check2.build());\n+            draftPr.updateCheck(check2.complete(false).build());\n+            var check3 = CheckBuilder.create(\"ps3\", editHash).title(\"PS3\");\n+            draftPr.createCheck(check3.build());\n+            draftPr.updateCheck(check3.details(URI.create(\"https:\/\/www.example.com\")).complete(false).build());\n+\n+            \/\/ Now make an actual PR\n+            localRepo.push(editHash, author.url(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"This is a pull request\");\n+\n+            \/\/ Check the status\n+            TestBotRunner.runPeriodicItems(checkBot);\n+\n+            \/\/ The body should contain the issue title\n+            assertTrue(pr.body().contains(\"Successful test task\"));\n+            assertTrue(pr.body().contains(\"|     | ps1 | ps2 | ps3 |\"));\n+            assertTrue(pr.body().contains(\"**Failed test tasks**\"));\n+            assertTrue(pr.body().contains(\"- [ps3](https:\/\/www.example.com)\"));\n+            assertTrue(pr.body().contains(\"- `ps2`\"));\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CheckTests.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -0,0 +1,195 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bots.pr;\n+\n+import org.junit.jupiter.api.Test;\n+import org.openjdk.skara.forge.*;\n+import org.openjdk.skara.vcs.Hash;\n+\n+import java.net.URI;\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class TestResultsTests {\n+    @Test\n+    void simple() {\n+        var check = CheckBuilder.create(\"Test\", Hash.zero())\n+                                .complete(true)\n+                                .build();\n+        var summary = TestResults.summarize(List.of(check));\n+        assertEquals(\"### Successful test tasks\\n\" +\n+                             \"\\n\" +\n+                             \"|     | Test |\\n\" +\n+                             \"| --- | ----- |\\n\" +\n+                             \"| Build \/ test | ✔️ (1\/1 passed) |\", summary.get().strip());\n+    }\n+\n+    @Test\n+    void multiPlatform() {\n+        var check1 = CheckBuilder.create(\"Linux x64 (test)\", Hash.zero())\n+                                 .complete(true)\n+                                 .build();\n+        var check2 = CheckBuilder.create(\"Windows x64 (test)\", Hash.zero())\n+                                 .complete(true)\n+                                 .build();\n+        var summary = TestResults.summarize(List.of(check1, check2));\n+        assertEquals(\"### Successful test tasks\\n\" +\n+                             \"\\n\" +\n+                             \"|     | Linux x64 | Windows x64 |\\n\" +\n+                             \"| --- | ----- | ----- |\\n\" +\n+                             \"| Build \/ test | ✔️ (1\/1 passed) | ✔️ (1\/1 passed) |\", summary.get().strip());\n+    }\n+\n+    @Test\n+    void multiFlavor() {\n+        var check1 = CheckBuilder.create(\"Linux x64 (Build)\", Hash.zero())\n+                                 .complete(true)\n+                                 .build();\n+        var check2 = CheckBuilder.create(\"Linux x64 (Test tier1)\", Hash.zero())\n+                                 .complete(true)\n+                                 .build();\n+        var summary = TestResults.summarize(List.of(check1, check2));\n+        assertEquals(\"### Successful test tasks\\n\" +\n+                             \"\\n\" +\n+                             \"|     | Linux x64 |\\n\" +\n+                             \"| --- | ----- |\\n\" +\n+                             \"| Build | ✔️ (1\/1 passed) |\\n\" +\n+                             \"| Test (tier1) | ✔️ (1\/1 passed) |\", summary.get().strip());\n+    }\n+\n+    @Test\n+    void multiEverything() {\n+        var check1 = CheckBuilder.create(\"Linux x64 (Build)\", Hash.zero())\n+                                 .complete(true)\n+                                 .build();\n+        var check2 = CheckBuilder.create(\"Linux x64 (Test tier1)\", Hash.zero())\n+                                 .complete(true)\n+                                 .build();\n+        var check3 = CheckBuilder.create(\"Windows x64 (Build)\", Hash.zero())\n+                                 .complete(true)\n+                                 .build();\n+        var check4 = CheckBuilder.create(\"Windows x64 (Test tier1)\", Hash.zero())\n+                                 .complete(true)\n+                                 .build();\n+        var summary = TestResults.summarize(List.of(check1, check2, check3, check4));\n+        assertEquals(\"### Successful test tasks\\n\" +\n+                             \"\\n\" +\n+                             \"|     | Linux x64 | Windows x64 |\\n\" +\n+                             \"| --- | ----- | ----- |\\n\" +\n+                             \"| Build | ✔️ (1\/1 passed) | ✔️ (1\/1 passed) |\\n\" +\n+                             \"| Test (tier1) | ✔️ (1\/1 passed) | ✔️ (1\/1 passed) |\", summary.get().strip());\n+    }\n+\n+    @Test\n+    void sparse() {\n+        var check1 = CheckBuilder.create(\"Linux x64 (Build)\", Hash.zero())\n+                                 .complete(true)\n+                                 .build();\n+        var check2 = CheckBuilder.create(\"Linux x64 (Test tier1)\", Hash.zero())\n+                                 .complete(true)\n+                                 .build();\n+        var check3 = CheckBuilder.create(\"Windows x64 (Build)\", Hash.zero())\n+                                 .complete(true)\n+                                 .build();\n+        var check4 = CheckBuilder.create(\"macOS x64 (Build)\", Hash.zero())\n+                                 .complete(true)\n+                                 .build();\n+        var summary = TestResults.summarize(List.of(check1, check2, check3, check4));\n+        assertEquals(\"### Successful test tasks\\n\" +\n+                             \"\\n\" +\n+                             \"|     | Linux x64 | Windows x64 | macOS x64 |\\n\" +\n+                             \"| --- | ----- | ----- | ----- |\\n\" +\n+                             \"| Build | ✔️ (1\/1 passed) | ✔️ (1\/1 passed) | ✔️ (1\/1 passed) |\\n\" +\n+                             \"| Test (tier1) | ✔️ (1\/1 passed) |    |     |\", summary.get().strip());\n+    }\n+\n+    @Test\n+    void failure() {\n+        var check1 = CheckBuilder.create(\"Linux x64 (test)\", Hash.zero())\n+                                 .complete(true)\n+                                 .build();\n+        var check2 = CheckBuilder.create(\"Windows x64 (test)\", Hash.zero())\n+                                 .complete(false)\n+                                 .details(URI.create(\"www.example.com\"))\n+                                 .build();\n+        var summary = TestResults.summarize(List.of(check1, check2));\n+        assertEquals(\"### Successful test tasks\\n\" +\n+                             \"\\n\" +\n+                             \"|     | Linux x64 | Windows x64 |\\n\" +\n+                             \"| --- | ----- | ----- |\\n\" +\n+                             \"| Build \/ test | ✔️ (1\/1 passed) | ❌ (1\/1 failed) |\\n\" +\n+                             \"\\n\" +\n+                             \"**Failed test task**\\n\" +\n+                             \"- [Windows x64 (test)](www.example.com)\", summary.get().strip());\n+    }\n+\n+    @Test\n+    void inProgress() {\n+        var check1 = CheckBuilder.create(\"Linux x64 (test)\", Hash.zero())\n+                                 .complete(true)\n+                                 .build();\n+        var check2 = CheckBuilder.create(\"Windows x64 (test)\", Hash.zero())\n+                                 .build();\n+        var summary = TestResults.summarize(List.of(check1, check2));\n+        assertEquals(\"### Successful test tasks\\n\" +\n+                             \"\\n\" +\n+                             \"|     | Linux x64 | Windows x64 |\\n\" +\n+                             \"| --- | ----- | ----- |\\n\" +\n+                             \"| Build \/ test | ✔️ (1\/1 passed) | ⏳ (1\/1 in progress) |\", summary.get().strip());\n+    }\n+\n+    @Test\n+    void ignored() {\n+        var check1 = CheckBuilder.create(\"jcheck\", Hash.zero())\n+                                 .complete(true)\n+                                 .build();\n+        var check2 = CheckBuilder.create(\"Prerequisites\", Hash.zero())\n+                                 .build();\n+        var summary = TestResults.summarize(List.of(check1, check2));\n+        assertTrue(summary.isEmpty());\n+    }\n+\n+    @Test\n+    void mixed() {\n+        var check1 = CheckBuilder.create(\"Linux x64 (Build)\", Hash.zero())\n+                                 .complete(true)\n+                                 .build();\n+        var check2 = CheckBuilder.create(\"Linux x64 (Test tier1)\", Hash.zero())\n+                                 .complete(true)\n+                                 .build();\n+        var check3 = CheckBuilder.create(\"Prerequisites\", Hash.zero())\n+                                 .complete(true)\n+                                 .build();\n+        var check4 = CheckBuilder.create(\"Post-process\", Hash.zero())\n+                                 .complete(true)\n+                                 .build();\n+        var summary = TestResults.summarize(List.of(check1, check2, check3, check4));\n+        assertEquals(\"### Successful test tasks\\n\" +\n+                             \"\\n\" +\n+                             \"|     | Linux x64 |\\n\" +\n+                             \"| --- | ----- |\\n\" +\n+                             \"| Build | ✔️ (1\/1 passed) |\\n\" +\n+                             \"| Test (tier1) | ✔️ (1\/1 passed) |\", summary.get().strip());\n+    }\n+}\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/TestResultsTests.java","additions":195,"deletions":0,"binary":false,"changes":195,"status":"added"},{"patch":"@@ -167,0 +167,5 @@\n+\n+    @Override\n+    public List<Check> allChecks(Hash hash) {\n+        return List.of();\n+    }\n","filename":"bots\/tester\/src\/test\/java\/org\/openjdk\/skara\/bots\/tester\/InMemoryHostedRepository.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.net.URI;\n@@ -40,0 +41,1 @@\n+    private final URI details;\n@@ -41,1 +43,2 @@\n-    Check(String name, Hash hash, CheckStatus status, ZonedDateTime startedAt, ZonedDateTime completedAt, String metadata, String title, String summary, List<CheckAnnotation> annotations) {\n+    Check(String name, Hash hash, CheckStatus status, ZonedDateTime startedAt, ZonedDateTime completedAt,\n+          String metadata, String title, String summary, List<CheckAnnotation> annotations, URI details) {\n@@ -51,0 +54,1 @@\n+        this.details = details;\n@@ -88,0 +92,4 @@\n+\n+    public Optional<URI> details() {\n+        return Optional.ofNullable(details);\n+    }\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/Check.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.net.URI;\n@@ -31,1 +32,0 @@\n-\n@@ -42,0 +42,1 @@\n+    private URI details;\n@@ -127,0 +128,5 @@\n+    public CheckBuilder details(URI details) {\n+        this.details = details;\n+        return this;\n+    }\n+\n@@ -128,1 +134,1 @@\n-        return new Check(name, hash, status, startedAt, completedAt, metadata, title, summary, annotations);\n+        return new Check(name, hash, status, startedAt, completedAt, metadata, title, summary, annotations, details);\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/CheckBuilder.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -73,0 +73,1 @@\n+    List<Check> allChecks(Hash hash);\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/HostedRepository.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -398,0 +398,3 @@\n+                            if (c.contains(\"details_url\")) {\n+                                checkBuilder.details(URI.create(c.get(\"details_url\").asString()));\n+                            }\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubPullRequest.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -315,0 +315,50 @@\n+\n+    @Override\n+    public List<Check> allChecks(Hash hash) {\n+        var checks = request.get(\"commits\/\" + hash.hex() + \"\/check-runs\").execute();\n+\n+        return checks.get(\"check_runs\").stream()\n+                     .map(c -> {\n+                         var checkBuilder = CheckBuilder.create(c.get(\"name\").asString(), new Hash(c.get(\"head_sha\").asString()));\n+                         checkBuilder.startedAt(ZonedDateTime.parse(c.get(\"started_at\").asString()));\n+\n+                         var completed = c.get(\"status\").asString().equals(\"completed\");\n+                         if (completed) {\n+                             var conclusion = c.get(\"conclusion\").asString();\n+                             var completedAt = ZonedDateTime.parse(c.get(\"completed_at\").asString());\n+                             switch (conclusion) {\n+                                 case \"cancelled\":\n+                                     checkBuilder.cancel(completedAt);\n+                                     break;\n+                                 case \"success\":\n+                                     checkBuilder.complete(true, completedAt);\n+                                     break;\n+                                 case \"failure\":\n+                                     \/\/ fallthrough\n+                                 case \"neutral\":\n+                                     checkBuilder.complete(false, completedAt);\n+                                     break;\n+                                 default:\n+                                     throw new IllegalStateException(\"Unexpected conclusion: \" + conclusion);\n+                             }\n+                         }\n+                         if (c.contains(\"external_id\")) {\n+                             checkBuilder.metadata(c.get(\"external_id\").asString());\n+                         }\n+                         if (c.contains(\"output\")) {\n+                             var output = c.get(\"output\").asObject();\n+                             if (output.contains(\"title\")) {\n+                                 checkBuilder.title(output.get(\"title\").asString());\n+                             }\n+                             if (output.contains(\"summary\")) {\n+                                 checkBuilder.summary(output.get(\"summary\").asString());\n+                             }\n+                         }\n+                         if (c.contains(\"details_url\")) {\n+                             checkBuilder.details(URI.create(c.get(\"details_url\").asString()));\n+                         }\n+\n+                         return checkBuilder.build(); }\n+                     )\n+                     .collect(Collectors.toList());\n+    }\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubRepository.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -347,0 +347,5 @@\n+\n+    @Override\n+    public List<Check> allChecks(Hash hash) {\n+        return List.of();\n+    }\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabRepository.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -236,0 +236,9 @@\n+    @Override\n+    public List<Check> allChecks(Hash hash) {\n+        return host.getPullRequests(this).stream()\n+                   .map(pr -> (TestPullRequest)pr)\n+                   .flatMap(testPr -> testPr.data.checks.stream())\n+                   .filter(check -> check.hash().equals(hash))\n+                   .collect(Collectors.toList());\n+    }\n+\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestHostedRepository.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-    private final PullRequestData data;\n+    final PullRequestData data;\n@@ -173,1 +173,1 @@\n-                                  .filter(c -> check.name().equals(check.name()))\n+                                  .filter(c -> c.name().equals(check.name()))\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestPullRequest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}