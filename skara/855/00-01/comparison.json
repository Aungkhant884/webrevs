{"files":[{"patch":"@@ -34,1 +34,0 @@\n-import java.util.*;\n@@ -36,1 +35,1 @@\n-import java.util.function.Function;\n+import java.util.*;\n@@ -374,48 +373,0 @@\n-    private List<String> preSubmitResults() {\n-        var ret = new ArrayList<String>();\n-\n-        if (pr.sourceRepository().isEmpty()) {\n-            return ret;\n-        }\n-\n-        var sourceRepo = pr.sourceRepository().get();\n-        var checks = sourceRepo.allChecks(pr.headHash());\n-        var successCount = 0;\n-        var inProgressCount = 0;\n-\n-        \/\/ Retain only the latest when there are multiple checks with the same name\n-        var latestChecks = checks.stream()\n-                                 .filter(check -> !check.name().equals(\"jcheck\"))\n-                                 .sorted(Comparator.comparing(Check::startedAt, ZonedDateTime::compareTo))\n-                                 .collect(Collectors.toMap(Check::name, Function.identity(), (a, b) -> b, LinkedHashMap::new));\n-\n-        for (var check : latestChecks.values()) {\n-            switch (check.status()) {\n-                case SUCCESS:\n-                    successCount++;\n-                    break;\n-                case IN_PROGRESS:\n-                    inProgressCount++;\n-                    break;\n-                case CANCELLED:\n-                    break;\n-                case FAILURE:\n-                    if (check.details().isPresent()) {\n-                        ret.add(\"⚠️ The job [\" + check.name() + \"](\" + check.details().get().toString() + \") failed.\");\n-                    } else {\n-                        ret.add(\"⚠️ The job `\" + check.name() + \"` failed.\");\n-                    }\n-                    break;\n-            }\n-        }\n-\n-        if (inProgressCount > 0) {\n-            ret.add(0, \"⏳ \" + inProgressCount + \" job\" + (inProgressCount > 1 ? \"s\" : \"\") + \" still in progress...\");\n-        }\n-        if (successCount > 0) {\n-            ret.add(0, \"✅ \" + successCount + \" job\" + (successCount > 1 ? \"s\" : \"\") + \" completed successfully!\");\n-        }\n-\n-        return ret;\n-    }\n-\n@@ -441,8 +392,3 @@\n-        var preSubmitResults = preSubmitResults();\n-        if (!preSubmitResults.isEmpty()) {\n-            progressBody.append(\"\\n\\n### Pre-submit test result\");\n-            if (preSubmitResults.size() > 1) {\n-                progressBody.append(\"s\");\n-            }\n-            progressBody.append(\"\\n\");\n-            progressBody.append(String.join(\"\\n\", preSubmitResults));\n+        if (pr.sourceRepository().isPresent()) {\n+            var sourceRepo = pr.sourceRepository().get();\n+            var checks = sourceRepo.allChecks(pr.headHash());\n@@ -450,0 +396,2 @@\n+            var resultSummary = TestResults.summarize(checks);\n+            resultSummary.ifPresent(progressBody::append);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":6,"deletions":58,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -0,0 +1,165 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bots.pr;\n+\n+import org.openjdk.skara.forge.*;\n+\n+import java.time.ZonedDateTime;\n+import java.util.*;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+public class TestResults {\n+    private static String platformFromName(String checkName) {\n+        var checkFlavorStart = checkName.indexOf(\"(\");\n+        if (checkFlavorStart > 0) {\n+            return checkName.substring(0, checkFlavorStart - 1).strip();\n+        } else {\n+            return checkName.strip();\n+        }\n+    }\n+\n+    private static String flavorFromName(String checkName) {\n+        var checkFlavorStart = checkName.indexOf(\"(\");\n+        var checkFlavorEnd = checkName.lastIndexOf(\")\");\n+        if (checkFlavorStart > 0 && checkFlavorEnd > checkFlavorStart) {\n+            var flavor = checkName.substring(checkFlavorStart + 1, checkFlavorEnd).strip().toLowerCase();\n+            for (int i = 1; i < 10; ++i) {\n+                if (flavor.contains(\"tier\" + i)) {\n+                    return \"Test (tier\" + i + \")\";\n+                }\n+            }\n+            if (flavor.contains(\"build\")) {\n+                return \"Build\";\n+            }\n+        }\n+        \/\/ Fallback value\n+        return \"Build \/ test\";\n+    }\n+\n+    private static boolean ignoredCheck(String checkName) {\n+        var lcName = checkName.toLowerCase();\n+        return lcName.contains(\"jcheck\") || lcName.contains(\"prerequisites\") || lcName.contains(\"post-process\");\n+    }\n+\n+    static Optional<String> summarize(List<Check> checks) {\n+        \/\/ Retain only the latest when there are multiple checks with the same name\n+        var latestChecks = checks.stream()\n+                                 .filter(check -> !ignoredCheck(check.name()))\n+                                 .sorted(Comparator.comparing(Check::startedAt, ZonedDateTime::compareTo))\n+                                 .collect(Collectors.toMap(Check::name, Function.identity(), (a, b) -> b, LinkedHashMap::new));\n+        if (latestChecks.isEmpty()) {\n+            return Optional.empty();\n+        }\n+\n+        var platforms = latestChecks.values().stream()\n+                                    .map(check -> platformFromName(check.name()))\n+                                    .collect(Collectors.toCollection(TreeSet::new));\n+        var flavors = latestChecks.values().stream()\n+                                  .map(check -> flavorFromName(check.name()))\n+                                  .collect(Collectors.toCollection(TreeSet::new));\n+        if (platforms.isEmpty() || flavors.isEmpty()) {\n+            return Optional.empty();\n+        }\n+\n+        var platformFlavors = latestChecks.values().stream()\n+                                          .collect(Collectors.groupingBy(check -> platformFromName(check.name()))).entrySet().stream()\n+                                          .collect(Collectors.toMap(Map.Entry::getKey,\n+                                                                    entry -> entry.getValue().stream()\n+                                                                                  .collect(Collectors.groupingBy(check -> flavorFromName(check.name())))));\n+\n+        var resultsBody = new StringBuilder();\n+        resultsBody.append(\"\\n\\n### Successful test tasks\\n\\n\");\n+        resultsBody.append(\"|     |\");\n+        platforms.forEach(platform -> resultsBody.append(\" \").append(platform).append(\" |\"));\n+        resultsBody.append(\"\\n| --- |\");\n+        platforms.forEach(platform -> resultsBody.append(\" ----- |\"));\n+        for (var flavor : flavors) {\n+            resultsBody.append(\"\\n| \").append(flavor).append(\" |\");\n+            for (var platform : platforms) {\n+                var platformChecks = platformFlavors.get(platform);\n+                var flavorChecks = platformChecks.get(flavor);\n+                if (flavorChecks != null) {\n+                    int failureCount = 0;\n+                    int pendingCount = 0;\n+                    int successCount = 0;\n+                    for (var check : flavorChecks) {\n+                        switch (check.status()) {\n+                            case IN_PROGRESS:\n+                                pendingCount++;\n+                                break;\n+                            case FAILURE:\n+                                failureCount++;\n+                                break;\n+                            case SUCCESS:\n+                                successCount++;\n+                                break;\n+                        }\n+                    }\n+                    int total = failureCount + pendingCount + successCount;\n+                    if (failureCount > 0) {\n+                        resultsBody.append(\" ❌\");\n+                        resultsBody.append(\" (\").append(failureCount).append(\"\/\").append(total).append(\" failed) |\");\n+                    } else if (pendingCount > 0) {\n+                        resultsBody.append(\" ⏳\");\n+                        resultsBody.append(\" (\").append(pendingCount).append(\"\/\").append(total).append(\" in progress) |\");\n+                    } else {\n+                        resultsBody.append(\" ✔️\");\n+                        resultsBody.append(\" (\").append(successCount).append(\"\/\").append(total).append(\" passed) |\");\n+                    }\n+\n+                } else {\n+                    resultsBody.append(\"    | \");\n+                }\n+            }\n+        }\n+\n+        var failedChecks = latestChecks.values().stream()\n+                                       .filter(check -> check.status() == CheckStatus.FAILURE)\n+                                       .sorted(Comparator.comparing(Check::name))\n+                                       .collect(Collectors.toList());\n+        if (!failedChecks.isEmpty()) {\n+            resultsBody.append(\"\\n\\n**Failed test task\");\n+            if (failedChecks.size() > 1) {\n+                resultsBody.append(\"s\");\n+            }\n+            resultsBody.append(\"**\");\n+            for (var failedCheck : failedChecks) {\n+                resultsBody.append(\"\\n- \");\n+                if (failedCheck.details().isPresent()) {\n+                    resultsBody.append(\"[\");\n+                    resultsBody.append(failedCheck.name());\n+                    resultsBody.append(\"](\");\n+                    resultsBody.append(failedCheck.details().get().toString());\n+                    resultsBody.append(\")\");\n+                } else {\n+                    resultsBody.append(\"`\");\n+                    resultsBody.append(failedCheck.name());\n+                    resultsBody.append(\"`\");\n+                }\n+            }\n+        }\n+\n+        return Optional.of(resultsBody.toString());\n+    }\n+}\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/TestResults.java","additions":165,"deletions":0,"binary":false,"changes":165,"status":"added"},{"patch":"@@ -1727,4 +1727,5 @@\n-            assertTrue(pr.body().contains(\"Pre-submit test results\"));\n-            assertTrue(pr.body().contains(\"1 job completed successfully\"));\n-            assertTrue(pr.body().contains(\"The job [ps3](https:\/\/www.example.com) failed\"));\n-            assertTrue(pr.body().contains(\"The job `ps2` failed\"));\n+            assertTrue(pr.body().contains(\"Successful test task\"));\n+            assertTrue(pr.body().contains(\"|     | ps1 | ps2 | ps3 |\"));\n+            assertTrue(pr.body().contains(\"**Failed test tasks**\"));\n+            assertTrue(pr.body().contains(\"- [ps3](https:\/\/www.example.com)\"));\n+            assertTrue(pr.body().contains(\"- `ps2`\"));\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CheckTests.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,195 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bots.pr;\n+\n+import org.junit.jupiter.api.Test;\n+import org.openjdk.skara.forge.*;\n+import org.openjdk.skara.vcs.Hash;\n+\n+import java.net.URI;\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class TestResultsTests {\n+    @Test\n+    void simple() {\n+        var check = CheckBuilder.create(\"Test\", Hash.zero())\n+                                .complete(true)\n+                                .build();\n+        var summary = TestResults.summarize(List.of(check));\n+        assertEquals(\"### Successful test tasks\\n\" +\n+                             \"\\n\" +\n+                             \"|     | Test |\\n\" +\n+                             \"| --- | ----- |\\n\" +\n+                             \"| Build \/ test | ✔️ (1\/1 passed) |\", summary.get().strip());\n+    }\n+\n+    @Test\n+    void multiPlatform() {\n+        var check1 = CheckBuilder.create(\"Linux x64 (test)\", Hash.zero())\n+                                 .complete(true)\n+                                 .build();\n+        var check2 = CheckBuilder.create(\"Windows x64 (test)\", Hash.zero())\n+                                 .complete(true)\n+                                 .build();\n+        var summary = TestResults.summarize(List.of(check1, check2));\n+        assertEquals(\"### Successful test tasks\\n\" +\n+                             \"\\n\" +\n+                             \"|     | Linux x64 | Windows x64 |\\n\" +\n+                             \"| --- | ----- | ----- |\\n\" +\n+                             \"| Build \/ test | ✔️ (1\/1 passed) | ✔️ (1\/1 passed) |\", summary.get().strip());\n+    }\n+\n+    @Test\n+    void multiFlavor() {\n+        var check1 = CheckBuilder.create(\"Linux x64 (Build)\", Hash.zero())\n+                                 .complete(true)\n+                                 .build();\n+        var check2 = CheckBuilder.create(\"Linux x64 (Test tier1)\", Hash.zero())\n+                                 .complete(true)\n+                                 .build();\n+        var summary = TestResults.summarize(List.of(check1, check2));\n+        assertEquals(\"### Successful test tasks\\n\" +\n+                             \"\\n\" +\n+                             \"|     | Linux x64 |\\n\" +\n+                             \"| --- | ----- |\\n\" +\n+                             \"| Build | ✔️ (1\/1 passed) |\\n\" +\n+                             \"| Test (tier1) | ✔️ (1\/1 passed) |\", summary.get().strip());\n+    }\n+\n+    @Test\n+    void multiEverything() {\n+        var check1 = CheckBuilder.create(\"Linux x64 (Build)\", Hash.zero())\n+                                 .complete(true)\n+                                 .build();\n+        var check2 = CheckBuilder.create(\"Linux x64 (Test tier1)\", Hash.zero())\n+                                 .complete(true)\n+                                 .build();\n+        var check3 = CheckBuilder.create(\"Windows x64 (Build)\", Hash.zero())\n+                                 .complete(true)\n+                                 .build();\n+        var check4 = CheckBuilder.create(\"Windows x64 (Test tier1)\", Hash.zero())\n+                                 .complete(true)\n+                                 .build();\n+        var summary = TestResults.summarize(List.of(check1, check2, check3, check4));\n+        assertEquals(\"### Successful test tasks\\n\" +\n+                             \"\\n\" +\n+                             \"|     | Linux x64 | Windows x64 |\\n\" +\n+                             \"| --- | ----- | ----- |\\n\" +\n+                             \"| Build | ✔️ (1\/1 passed) | ✔️ (1\/1 passed) |\\n\" +\n+                             \"| Test (tier1) | ✔️ (1\/1 passed) | ✔️ (1\/1 passed) |\", summary.get().strip());\n+    }\n+\n+    @Test\n+    void sparse() {\n+        var check1 = CheckBuilder.create(\"Linux x64 (Build)\", Hash.zero())\n+                                 .complete(true)\n+                                 .build();\n+        var check2 = CheckBuilder.create(\"Linux x64 (Test tier1)\", Hash.zero())\n+                                 .complete(true)\n+                                 .build();\n+        var check3 = CheckBuilder.create(\"Windows x64 (Build)\", Hash.zero())\n+                                 .complete(true)\n+                                 .build();\n+        var check4 = CheckBuilder.create(\"macOS x64 (Build)\", Hash.zero())\n+                                 .complete(true)\n+                                 .build();\n+        var summary = TestResults.summarize(List.of(check1, check2, check3, check4));\n+        assertEquals(\"### Successful test tasks\\n\" +\n+                             \"\\n\" +\n+                             \"|     | Linux x64 | Windows x64 | macOS x64 |\\n\" +\n+                             \"| --- | ----- | ----- | ----- |\\n\" +\n+                             \"| Build | ✔️ (1\/1 passed) | ✔️ (1\/1 passed) | ✔️ (1\/1 passed) |\\n\" +\n+                             \"| Test (tier1) | ✔️ (1\/1 passed) |    |     |\", summary.get().strip());\n+    }\n+\n+    @Test\n+    void failure() {\n+        var check1 = CheckBuilder.create(\"Linux x64 (test)\", Hash.zero())\n+                                 .complete(true)\n+                                 .build();\n+        var check2 = CheckBuilder.create(\"Windows x64 (test)\", Hash.zero())\n+                                 .complete(false)\n+                                 .details(URI.create(\"www.example.com\"))\n+                                 .build();\n+        var summary = TestResults.summarize(List.of(check1, check2));\n+        assertEquals(\"### Successful test tasks\\n\" +\n+                             \"\\n\" +\n+                             \"|     | Linux x64 | Windows x64 |\\n\" +\n+                             \"| --- | ----- | ----- |\\n\" +\n+                             \"| Build \/ test | ✔️ (1\/1 passed) | ❌ (1\/1 failed) |\\n\" +\n+                             \"\\n\" +\n+                             \"**Failed test task**\\n\" +\n+                             \"- [Windows x64 (test)](www.example.com)\", summary.get().strip());\n+    }\n+\n+    @Test\n+    void inProgress() {\n+        var check1 = CheckBuilder.create(\"Linux x64 (test)\", Hash.zero())\n+                                 .complete(true)\n+                                 .build();\n+        var check2 = CheckBuilder.create(\"Windows x64 (test)\", Hash.zero())\n+                                 .build();\n+        var summary = TestResults.summarize(List.of(check1, check2));\n+        assertEquals(\"### Successful test tasks\\n\" +\n+                             \"\\n\" +\n+                             \"|     | Linux x64 | Windows x64 |\\n\" +\n+                             \"| --- | ----- | ----- |\\n\" +\n+                             \"| Build \/ test | ✔️ (1\/1 passed) | ⏳ (1\/1 in progress) |\", summary.get().strip());\n+    }\n+\n+    @Test\n+    void ignored() {\n+        var check1 = CheckBuilder.create(\"jcheck\", Hash.zero())\n+                                 .complete(true)\n+                                 .build();\n+        var check2 = CheckBuilder.create(\"Prerequisites\", Hash.zero())\n+                                 .build();\n+        var summary = TestResults.summarize(List.of(check1, check2));\n+        assertTrue(summary.isEmpty());\n+    }\n+\n+    @Test\n+    void mixed() {\n+        var check1 = CheckBuilder.create(\"Linux x64 (Build)\", Hash.zero())\n+                                 .complete(true)\n+                                 .build();\n+        var check2 = CheckBuilder.create(\"Linux x64 (Test tier1)\", Hash.zero())\n+                                 .complete(true)\n+                                 .build();\n+        var check3 = CheckBuilder.create(\"Prerequisites\", Hash.zero())\n+                                 .complete(true)\n+                                 .build();\n+        var check4 = CheckBuilder.create(\"Post-process\", Hash.zero())\n+                                 .complete(true)\n+                                 .build();\n+        var summary = TestResults.summarize(List.of(check1, check2, check3, check4));\n+        assertEquals(\"### Successful test tasks\\n\" +\n+                             \"\\n\" +\n+                             \"|     | Linux x64 |\\n\" +\n+                             \"| --- | ----- |\\n\" +\n+                             \"| Build | ✔️ (1\/1 passed) |\\n\" +\n+                             \"| Test (tier1) | ✔️ (1\/1 passed) |\", summary.get().strip());\n+    }\n+}\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/TestResultsTests.java","additions":195,"deletions":0,"binary":false,"changes":195,"status":"added"}]}