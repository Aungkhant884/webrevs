{"files":[{"patch":"@@ -36,0 +36,1 @@\n+import java.util.function.Function;\n@@ -373,0 +374,47 @@\n+    private List<String> preSubmitResults() {\n+        var ret = new ArrayList<String>();\n+\n+        if (pr.sourceRepository().isEmpty()) {\n+            return ret;\n+        }\n+\n+        var sourceRepo = pr.sourceRepository().get();\n+        var checks = sourceRepo.allChecks(pr.headHash());\n+        var successCount = 0;\n+        var inProgressCount = 0;\n+\n+        \/\/ Retain only the latest when there are multiple checks with the same name\n+        var latestChecks = checks.stream()\n+                                 .filter(check -> !check.name().equals(\"jcheck\"))\n+                                 .sorted(Comparator.comparing(Check::startedAt, ZonedDateTime::compareTo))\n+                                 .collect(Collectors.toMap(Check::name, Function.identity(), (a, b) -> b, LinkedHashMap::new));\n+\n+        for (var check : latestChecks.values()) {\n+            switch (check.status()) {\n+                case SUCCESS:\n+                    successCount++;\n+                    break;\n+                case IN_PROGRESS:\n+                    inProgressCount++;\n+                    break;\n+                case CANCELLED:\n+                    break;\n+                case FAILURE:\n+                    if (check.details().isPresent()) {\n+                        ret.add(\"⚠️ The job [\" + check.name() + \"](\" + check.details().get().toString() + \") failed.\");\n+                    } else {\n+                        ret.add(\"⚠️ The job `\" + check.name() + \"` failed.\");\n+                    }\n+                    break;\n+            }\n+        }\n+\n+        if (inProgressCount > 0) {\n+            ret.add(0, \"⏳ \" + inProgressCount + \" job\" + (inProgressCount > 1 ? \"s\" : \"\") + \" still in progress...\");\n+        }\n+        if (successCount > 0) {\n+            ret.add(0, \"✅ \" + successCount + \" job\" + (successCount > 1 ? \"s\" : \"\") + \" completed successfully!\");\n+        }\n+\n+        return ret;\n+    }\n@@ -393,0 +441,11 @@\n+        var preSubmitResults = preSubmitResults();\n+        if (!preSubmitResults.isEmpty()) {\n+            progressBody.append(\"\\n\\n### Pre-submit test result\");\n+            if (preSubmitResults.size() > 1) {\n+                progressBody.append(\"s\");\n+            }\n+            progressBody.append(\"\\n\");\n+            progressBody.append(String.join(\"\\n\", preSubmitResults));\n+\n+        }\n+\n@@ -544,1 +603,1 @@\n-                message.append(\"\/CONTRIBUTING.md) for more details.\");\n+                message.append(\"\/CONTRIBUTING.md) for details.\");\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":60,"deletions":1,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.net.URI;\n@@ -1684,0 +1685,48 @@\n+\n+    @Test\n+    void preSubmitInSummary(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var issues = credentials.getIssueProject();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                                           .addAuthor(author.forge().currentUser().id())\n+                                           .addReviewer(reviewer.forge().currentUser().id());\n+            var checkBot = PullRequestBot.newBuilder().repo(author).censusRepo(censusBuilder.build()).issueProject(issues).build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType(), Path.of(\"appendable.txt\"),\n+                                                     Set.of(\"issues\"), null);\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Make a draft PR where we can add some checks\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"preedit\", true);\n+            var draftPr = credentials.createPullRequest(author, \"master\", \"preedit\", \"This is a pull request\", true);\n+            var check1 = CheckBuilder.create(\"ps1\", editHash).title(\"PS1\");\n+            draftPr.createCheck(check1.build());\n+            draftPr.updateCheck(check1.complete(true).build());\n+            var check2 = CheckBuilder.create(\"ps2\", editHash).title(\"PS2\");\n+            draftPr.createCheck(check2.build());\n+            draftPr.updateCheck(check2.complete(false).build());\n+            var check3 = CheckBuilder.create(\"ps3\", editHash).title(\"PS3\");\n+            draftPr.createCheck(check3.build());\n+            draftPr.updateCheck(check3.details(URI.create(\"https:\/\/www.example.com\")).complete(false).build());\n+\n+            \/\/ Now make an actual PR\n+            localRepo.push(editHash, author.url(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"This is a pull request\");\n+\n+            \/\/ Check the status\n+            TestBotRunner.runPeriodicItems(checkBot);\n+\n+            \/\/ The body should contain the issue title\n+            assertTrue(pr.body().contains(\"Pre-submit test results\"));\n+            assertTrue(pr.body().contains(\"1 job completed successfully\"));\n+            assertTrue(pr.body().contains(\"The job [ps3](https:\/\/www.example.com) failed\"));\n+            assertTrue(pr.body().contains(\"The job `ps2` failed\"));\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CheckTests.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -167,0 +167,5 @@\n+\n+    @Override\n+    public List<Check> allChecks(Hash hash) {\n+        return List.of();\n+    }\n","filename":"bots\/tester\/src\/test\/java\/org\/openjdk\/skara\/bots\/tester\/InMemoryHostedRepository.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.net.URI;\n@@ -40,0 +41,1 @@\n+    private final URI details;\n@@ -41,1 +43,2 @@\n-    Check(String name, Hash hash, CheckStatus status, ZonedDateTime startedAt, ZonedDateTime completedAt, String metadata, String title, String summary, List<CheckAnnotation> annotations) {\n+    Check(String name, Hash hash, CheckStatus status, ZonedDateTime startedAt, ZonedDateTime completedAt,\n+          String metadata, String title, String summary, List<CheckAnnotation> annotations, URI details) {\n@@ -51,0 +54,1 @@\n+        this.details = details;\n@@ -88,0 +92,4 @@\n+\n+    public Optional<URI> details() {\n+        return Optional.ofNullable(details);\n+    }\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/Check.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.net.URI;\n@@ -31,1 +32,0 @@\n-\n@@ -42,0 +42,1 @@\n+    private URI details;\n@@ -127,0 +128,5 @@\n+    public CheckBuilder details(URI details) {\n+        this.details = details;\n+        return this;\n+    }\n+\n@@ -128,1 +134,1 @@\n-        return new Check(name, hash, status, startedAt, completedAt, metadata, title, summary, annotations);\n+        return new Check(name, hash, status, startedAt, completedAt, metadata, title, summary, annotations, details);\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/CheckBuilder.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -73,0 +73,1 @@\n+    List<Check> allChecks(Hash hash);\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/HostedRepository.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -398,0 +398,3 @@\n+                            if (c.contains(\"details_url\")) {\n+                                checkBuilder.details(URI.create(c.get(\"details_url\").asString()));\n+                            }\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubPullRequest.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -315,0 +315,50 @@\n+\n+    @Override\n+    public List<Check> allChecks(Hash hash) {\n+        var checks = request.get(\"commits\/\" + hash.hex() + \"\/check-runs\").execute();\n+\n+        return checks.get(\"check_runs\").stream()\n+                     .map(c -> {\n+                         var checkBuilder = CheckBuilder.create(c.get(\"name\").asString(), new Hash(c.get(\"head_sha\").asString()));\n+                         checkBuilder.startedAt(ZonedDateTime.parse(c.get(\"started_at\").asString()));\n+\n+                         var completed = c.get(\"status\").asString().equals(\"completed\");\n+                         if (completed) {\n+                             var conclusion = c.get(\"conclusion\").asString();\n+                             var completedAt = ZonedDateTime.parse(c.get(\"completed_at\").asString());\n+                             switch (conclusion) {\n+                                 case \"cancelled\":\n+                                     checkBuilder.cancel(completedAt);\n+                                     break;\n+                                 case \"success\":\n+                                     checkBuilder.complete(true, completedAt);\n+                                     break;\n+                                 case \"failure\":\n+                                     \/\/ fallthrough\n+                                 case \"neutral\":\n+                                     checkBuilder.complete(false, completedAt);\n+                                     break;\n+                                 default:\n+                                     throw new IllegalStateException(\"Unexpected conclusion: \" + conclusion);\n+                             }\n+                         }\n+                         if (c.contains(\"external_id\")) {\n+                             checkBuilder.metadata(c.get(\"external_id\").asString());\n+                         }\n+                         if (c.contains(\"output\")) {\n+                             var output = c.get(\"output\").asObject();\n+                             if (output.contains(\"title\")) {\n+                                 checkBuilder.title(output.get(\"title\").asString());\n+                             }\n+                             if (output.contains(\"summary\")) {\n+                                 checkBuilder.summary(output.get(\"summary\").asString());\n+                             }\n+                         }\n+                         if (c.contains(\"details_url\")) {\n+                             checkBuilder.details(URI.create(c.get(\"details_url\").asString()));\n+                         }\n+\n+                         return checkBuilder.build(); }\n+                     )\n+                     .collect(Collectors.toList());\n+    }\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubRepository.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -347,0 +347,5 @@\n+\n+    @Override\n+    public List<Check> allChecks(Hash hash) {\n+        return List.of();\n+    }\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabRepository.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -236,0 +236,9 @@\n+    @Override\n+    public List<Check> allChecks(Hash hash) {\n+        return host.getPullRequests(this).stream()\n+                   .map(pr -> (TestPullRequest)pr)\n+                   .flatMap(testPr -> testPr.data.checks.stream())\n+                   .filter(check -> check.hash().equals(hash))\n+                   .collect(Collectors.toList());\n+    }\n+\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestHostedRepository.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-    private final PullRequestData data;\n+    final PullRequestData data;\n@@ -173,1 +173,1 @@\n-                                  .filter(c -> check.name().equals(check.name()))\n+                                  .filter(c -> c.name().equals(check.name()))\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestPullRequest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}