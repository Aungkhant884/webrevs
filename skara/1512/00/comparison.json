{"files":[{"patch":"@@ -35,0 +35,1 @@\n+    public static final String TEMPORARY_ISSUE_FAILURE_MARKER = \"<!-- temporary issue failure -->\";\n","filename":"bots\/common\/src\/main\/java\/org\/openjdk\/skara\/bots\/common\/PullRequestConstants.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,0 +54,1 @@\n+    implementation project(':bots:common')\n","filename":"bots\/notify\/build.gradle","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+    requires org.openjdk.skara.bots.common;\n","filename":"bots\/notify\/src\/main\/java\/module-info.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import org.openjdk.skara.forge.HostedBranch;\n@@ -45,0 +44,2 @@\n+import static org.openjdk.skara.bots.common.PullRequestConstants.*;\n+\n@@ -234,0 +235,4 @@\n+        if (pr.body().contains(TEMPORARY_ISSUE_FAILURE_MARKER)) {\n+            log.warning(\"Found temporary issue failure, the notifiers will be stopped until the temporary issue failure resolved.\");\n+            return List.of();\n+        }\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/PullRequestWorkItem.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -50,0 +50,2 @@\n+import static org.openjdk.skara.bots.common.PullRequestConstants.*;\n+\n@@ -2118,0 +2120,75 @@\n+\n+    @Test\n+    void testFailedIssue(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var repo = credentials.getHostedRepository();\n+            var repoFolder = tempFolder.path().resolve(\"repo\");\n+            var localRepo = CheckableRepository.init(repoFolder, repo.repositoryType());\n+            credentials.commitLock(localRepo);\n+            localRepo.pushAll(repo.authenticatedUrl());\n+\n+            var tagStorage = createTagStorage(repo);\n+            var branchStorage = createBranchStorage(repo);\n+            var prStateStorage = createPullRequestStateStorage(repo);\n+            var storageFolder = tempFolder.path().resolve(\"storage\");\n+\n+            var issueProject = credentials.getIssueProject();\n+            var reviewIcon = URI.create(\"http:\/\/www.example.com\/review.png\");\n+            var notifyBot = NotifyBot.newBuilder()\n+                    .repository(repo)\n+                    .storagePath(storageFolder)\n+                    .branches(Pattern.compile(\"master\"))\n+                    .tagStorageBuilder(tagStorage)\n+                    .branchStorageBuilder(branchStorage)\n+                    .prStateStorageBuilder(prStateStorage)\n+                    .integratorId(repo.forge().currentUser().id())\n+                    .build();\n+            var updater = IssueNotifier.newBuilder()\n+                    .issueProject(issueProject)\n+                    .reviewIcon(reviewIcon)\n+                    .commitLink(false)\n+                    .build();\n+            \/\/ Register a RepositoryListener to make history initialize on the first run\n+            notifyBot.registerRepositoryListener(new NullRepositoryListener());\n+            updater.attachTo(notifyBot);\n+\n+            \/\/ Initialize history\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ Save the state\n+            var historyState = localRepo.fetch(repo.authenticatedUrl(), \"history\");\n+\n+            \/\/ Create an issue and commit a fix\n+            var issue = issueProject.createIssue(\"This is an issue\", List.of(\"Indeed\"), Map.of(\"issuetype\", JSON.of(\"Enhancement\")));\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, \"Another line\", issue.id() + \": Fix that issue\");\n+            localRepo.push(editHash, repo.authenticatedUrl(), \"master\");\n+            var pr = credentials.createPullRequest(repo, \"master\", \"master\", issue.id() + \": Fix that issue\");\n+            pr.setBody(\"\\n\\n### Issue\\n * \" + \"⚠️ Temporary failure when trying to retrieve information on issue `\" + issue.id() + \"`.\" + TEMPORARY_ISSUE_FAILURE_MARKER);\n+            pr.addLabel(\"rfr\");\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ There should not be any links in the issue\n+            var links = issue.links();\n+            assertEquals(0, links.size());\n+\n+            \/\/Resolve the temporary issue failure\n+            pr.setBody(\"\\n\\n### Issue\\n * [\" + issue.id() + \"](http:\/\/www.test.test\/): The issue\");\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+            links = issue.links();\n+            assertEquals(1, links.size());\n+            var link = links.get(0);\n+            assertEquals(reviewIcon, link.iconUrl().orElseThrow());\n+            assertEquals(\"Review\", link.title().orElseThrow());\n+            assertEquals(pr.webUrl(), link.uri().orElseThrow());\n+\n+            \/\/ Wipe the history\n+            localRepo.push(historyState, repo.authenticatedUrl(), \"history\", true);\n+\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ There should be no new links\n+            var updatedIssue = issueProject.issue(issue.id()).orElseThrow();\n+            assertEquals(1, updatedIssue.links().size());\n+        }\n+    }\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifierTests.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -720,0 +720,1 @@\n+                        progressBody.append(TEMPORARY_ISSUE_FAILURE_MARKER);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}