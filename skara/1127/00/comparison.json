{"files":[{"patch":"@@ -29,0 +29,2 @@\n+import java.nio.file.Path;\n+\n@@ -30,1 +32,1 @@\n-    default void onNewIssue(PullRequest pr, Issue issue) {\n+    default void onNewIssue(PullRequest pr, Path scratchPath, Issue issue) {\n@@ -32,1 +34,1 @@\n-    default void onRemovedIssue(PullRequest pr, Issue issue) {\n+    default void onRemovedIssue(PullRequest pr, Path scratchPath, Issue issue) {\n@@ -34,1 +36,1 @@\n-    default void onNewPullRequest(PullRequest pr) {\n+    default void onNewPullRequest(PullRequest pr, Path scratchPath) {\n@@ -36,1 +38,1 @@\n-    default void onIntegratedPullRequest(PullRequest pr, Hash hash) {\n+    default void onIntegratedPullRequest(PullRequest pr, Path scratchPath, Hash hash) {\n@@ -38,1 +40,1 @@\n-    default void onHeadChange(PullRequest pr, Hash oldHead) {\n+    default void onHeadChange(PullRequest pr, Path scratchPath, Hash oldHead) {\n@@ -40,1 +42,1 @@\n-    default void onStateChange(PullRequest pr, org.openjdk.skara.issuetracker.Issue.State oldState) {\n+    default void onStateChange(PullRequest pr, Path scratchPath, org.openjdk.skara.issuetracker.Issue.State oldState) {\n@@ -42,0 +44,1 @@\n+    String name();\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/PullRequestListener.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -172,2 +172,2 @@\n-    private void notifyNewIssue(String issueId) {\n-        listeners.forEach(c -> c.onNewIssue(pr, new Issue(issueId, \"\")));\n+    private void notifyNewIssue(String issueId, Path scratchPath) {\n+        listeners.forEach(c -> c.onNewIssue(pr, scratchPath.resolve(c.name()), new Issue(issueId, \"\")));\n@@ -176,2 +176,2 @@\n-    private void notifyRemovedIssue(String issueId) {\n-        listeners.forEach(c -> c.onRemovedIssue(pr, new Issue(issueId, \"\")));\n+    private void notifyRemovedIssue(String issueId, Path scratchPath) {\n+        listeners.forEach(c -> c.onRemovedIssue(pr, scratchPath.resolve(c.name()), new Issue(issueId, \"\")));\n@@ -180,2 +180,2 @@\n-    private void notifyNewPr(PullRequest pr) {\n-        listeners.forEach(c -> c.onNewPullRequest(pr));\n+    private void notifyNewPr(PullRequest pr, Path scratchPath) {\n+        listeners.forEach(c -> c.onNewPullRequest(pr, scratchPath.resolve(c.name())));\n@@ -184,2 +184,2 @@\n-    private void notifyIntegratedPr(PullRequest pr, Hash hash) {\n-        listeners.forEach(c -> c.onIntegratedPullRequest(pr, hash));\n+    private void notifyIntegratedPr(PullRequest pr, Hash hash, Path scratchPath) {\n+        listeners.forEach(c -> c.onIntegratedPullRequest(pr, scratchPath.resolve(c.name()), hash));\n@@ -188,2 +188,2 @@\n-    private void notifyHeadChange(PullRequest pr, Hash oldHead) {\n-        listeners.forEach(c -> c.onHeadChange(pr, oldHead));\n+    private void notifyHeadChange(PullRequest pr, Hash oldHead, Path scratchPath) {\n+        listeners.forEach(c -> c.onHeadChange(pr, scratchPath.resolve(c.name()), oldHead));\n@@ -192,2 +192,2 @@\n-    private void notifyStateChange(org.openjdk.skara.issuetracker.Issue.State oldState) {\n-        listeners.forEach(c -> c.onStateChange(pr, oldState));\n+    private void notifyStateChange(org.openjdk.skara.issuetracker.Issue.State oldState, Path scratchPath) {\n+        listeners.forEach(c -> c.onStateChange(pr, scratchPath.resolve(c.name()), oldState));\n@@ -199,0 +199,1 @@\n+        var listenerScratchPath = scratchPath.resolve(\"notify\").resolve(\"listener\");\n@@ -238,1 +239,1 @@\n-                        .forEach(this::notifyRemovedIssue);\n+                        .forEach(issue -> notifyRemovedIssue(issue, listenerScratchPath));\n@@ -241,1 +242,1 @@\n-                  .forEach(this::notifyNewIssue);\n+                  .forEach(issue -> notifyNewIssue(issue, listenerScratchPath));\n@@ -244,1 +245,1 @@\n-                notifyHeadChange(pr, storedState.get().head());\n+                notifyHeadChange(pr, storedState.get().head(), listenerScratchPath);\n@@ -248,1 +249,1 @@\n-                notifyIntegratedPr(pr, state.commitId().get());\n+                notifyIntegratedPr(pr, state.commitId().get(), listenerScratchPath);\n@@ -251,1 +252,1 @@\n-                notifyStateChange(storedState.get().state());\n+                notifyStateChange(storedState.get().state(), scratchPath);\n@@ -254,2 +255,2 @@\n-            notifyNewPr(pr);\n-            issues.forEach(this::notifyNewIssue);\n+            notifyNewPr(pr, listenerScratchPath);\n+            issues.forEach(issue -> notifyNewIssue(issue, listenerScratchPath));\n@@ -257,1 +258,1 @@\n-                notifyIntegratedPr(pr, state.commitId().get());\n+                notifyIntegratedPr(pr, state.commitId().get(), listenerScratchPath);\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/PullRequestWorkItem.java","additions":21,"deletions":20,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.nio.file.Path;\n@@ -32,1 +33,1 @@\n-    default void onNewCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch branch) throws NonRetriableException {\n+    default void onNewCommits(HostedRepository repository, Repository localRepository, Path scratchPath, List<Commit> commits, Branch branch) throws NonRetriableException {\n@@ -34,1 +35,1 @@\n-    default void onNewOpenJDKTagCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, OpenJDKTag tag, Tag.Annotated annotated) throws NonRetriableException {\n+    default void onNewOpenJDKTagCommits(HostedRepository repository, Repository localRepository, Path scratchPath, List<Commit> commits, OpenJDKTag tag, Tag.Annotated annotated) throws NonRetriableException {\n@@ -36,1 +37,1 @@\n-    default void onNewTagCommit(HostedRepository repository, Repository localRepository, Commit commit, Tag tag, Tag.Annotated annotation) throws NonRetriableException {\n+    default void onNewTagCommit(HostedRepository repository, Repository localRepository, Path scratchPath, Commit commit, Tag tag, Tag.Annotated annotation) throws NonRetriableException {\n@@ -38,1 +39,1 @@\n-    default void onNewBranch(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch parent, Branch branch) throws NonRetriableException {\n+    default void onNewBranch(HostedRepository repository, Repository localRepository, Path scratchPath, List<Commit> commits, Branch parent, Branch branch) throws NonRetriableException {\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/RepositoryListener.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-    private void handleNewRef(Repository localRepo, Reference ref, Collection<Reference> allRefs, RepositoryListener listener) throws NonRetriableException {\n+    private void handleNewRef(Repository localRepo, Reference ref, Collection<Reference> allRefs, RepositoryListener listener, Path scratchPath) throws NonRetriableException {\n@@ -87,1 +87,1 @@\n-        listener.onNewBranch(repository, localRepo, bestParentCommits, parent, branch);\n+        listener.onNewBranch(repository, localRepo, scratchPath, bestParentCommits, parent, branch);\n@@ -90,1 +90,1 @@\n-    private void handleUpdatedRef(Repository localRepo, Reference ref, List<Commit> commits, RepositoryListener listener) throws NonRetriableException {\n+    private void handleUpdatedRef(Repository localRepo, Reference ref, List<Commit> commits, RepositoryListener listener, Path scratchPath) throws NonRetriableException {\n@@ -92,1 +92,1 @@\n-        listener.onNewCommits(repository, localRepo, commits, branch);\n+        listener.onNewCommits(repository, localRepo, scratchPath, commits, branch);\n@@ -95,1 +95,1 @@\n-    private List<Throwable> handleRef(Repository localRepo, UpdateHistory history, Reference ref, Collection<Reference> allRefs) throws IOException {\n+    private List<Throwable> handleRef(Repository localRepo, UpdateHistory history, Reference ref, Collection<Reference> allRefs, Path scratchPath) throws IOException {\n@@ -104,1 +104,1 @@\n-                    handleNewRef(localRepo, ref, allRefs, listener);\n+                    handleNewRef(localRepo, ref, allRefs, listener, scratchPath.resolve(listener.name()));\n@@ -127,1 +127,1 @@\n-                    handleUpdatedRef(localRepo, ref, commits, listener);\n+                    handleUpdatedRef(localRepo, ref, commits, listener, scratchPath.resolve(listener.name()));\n@@ -156,1 +156,1 @@\n-    private List<Throwable> handleTags(Repository localRepo, UpdateHistory history, RepositoryListener listener) throws IOException {\n+    private List<Throwable> handleTags(Repository localRepo, UpdateHistory history, RepositoryListener listener, Path scratchPath) throws IOException {\n@@ -213,1 +213,1 @@\n-                listener.onNewOpenJDKTagCommits(repository, localRepo, commits, tag, annotation.orElse(null));\n+                listener.onNewOpenJDKTagCommits(repository, localRepo, scratchPath, commits, tag, annotation.orElse(null));\n@@ -235,1 +235,1 @@\n-                listener.onNewTagCommit(repository, localRepo, commit.get(), tag, annotation.orElse(null));\n+                listener.onNewTagCommit(repository, localRepo, scratchPath, commit.get(), tag, annotation.orElse(null));\n@@ -263,0 +263,1 @@\n+        var notifierScratchPath = scratchPath.resolve(\"notify\").resolve(\"notifier\");\n@@ -276,1 +277,1 @@\n-                errors.addAll(handleTags(localRepo, history, listener));\n+                errors.addAll(handleTags(localRepo, history, listener, notifierScratchPath.resolve(listener.name())));\n@@ -288,1 +289,1 @@\n-                    errors.addAll(handleRef(localRepo, history, ref, knownRefs));\n+                    errors.addAll(handleRef(localRepo, history, ref, knownRefs, scratchPath));\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/RepositoryWorkItem.java","additions":13,"deletions":12,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.nio.file.Path;\n@@ -57,1 +58,1 @@\n-    public void onIntegratedPullRequest(PullRequest pr, Hash hash)  {\n+    public void onIntegratedPullRequest(PullRequest pr, Path scratchPath, Hash hash)  {\n@@ -81,0 +82,5 @@\n+\n+    @Override\n+    public String name() {\n+        return \"commitcomment\";\n+    }\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/comment\/CommitCommentNotifier.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,84 @@\n+\/*\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bots.notify.issue;\n+\n+import org.openjdk.skara.census.*;\n+import org.openjdk.skara.forge.HostedRepository;\n+import org.openjdk.skara.vcs.Repository;\n+\n+import java.io.*;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Path;\n+import java.util.Optional;\n+\n+class CensusInstance {\n+    private final Namespace namespace;\n+\n+    private CensusInstance(Namespace namespace) {\n+        this.namespace = namespace;\n+    }\n+\n+    private static Repository initialize(HostedRepository repo, String ref, Path folder) {\n+        try {\n+            return Repository.materialize(folder, repo.url(), \"+\" + ref + \":\" + \"issue_census_\" + repo.name());\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Failed to retrieve census to \" + folder, e);\n+        }\n+    }\n+\n+    private static Namespace namespace(Census census, String hostNamespace) {\n+        var namespace = census.namespace(hostNamespace);\n+        if (namespace == null) {\n+            throw new RuntimeException(\"Namespace not found in census: \" + hostNamespace);\n+        }\n+\n+        return namespace;\n+    }\n+\n+    static CensusInstance create(HostedRepository censusRepo, String censusRef, Path folder, String namespace) {\n+        var repoName = censusRepo.url().getHost() + \"\/\" + censusRepo.name();\n+        var repoFolder = folder.resolve(URLEncoder.encode(repoName, StandardCharsets.UTF_8));\n+        try {\n+            var localRepo = Repository.get(repoFolder)\n+                                      .or(() -> Optional.of(initialize(censusRepo, censusRef, repoFolder)))\n+                                      .orElseThrow();\n+            var hash = localRepo.fetch(censusRepo.url(), censusRef, false);\n+            localRepo.checkout(hash, true);\n+        } catch (IOException e) {\n+            initialize(censusRepo, censusRef, repoFolder);\n+        }\n+\n+        try {\n+            var census = Census.parse(repoFolder);\n+            var ns = namespace(census, namespace);\n+            return new CensusInstance(ns);\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(\"Cannot parse census at \" + repoFolder, e);\n+        }\n+    }\n+\n+    Namespace namespace() {\n+        return namespace;\n+    }\n+}\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/CensusInstance.java","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"},{"patch":"@@ -53,0 +53,3 @@\n+    private final HostedRepository censusRepository;\n+    private final String censusRef;\n+    private final String namespace;\n@@ -58,1 +61,1 @@\n-                  String buildName) {\n+                  String buildName, HostedRepository censusRepository, String censusRef, String namespace) {\n@@ -69,0 +72,3 @@\n+        this.censusRepository = censusRepository;\n+        this.censusRef = censusRef;\n+        this.namespace = namespace;\n@@ -75,1 +81,15 @@\n-    private Optional<String> findIssueUsername(Commit commit) {\n+    private Optional<String> findCensusUser(String user, Path scratchPath) {\n+        if (censusRepository == null) {\n+            return Optional.empty();\n+        }\n+        var censusInstance = CensusInstance.create(censusRepository, censusRef, scratchPath, namespace);\n+        var ns = censusInstance.namespace();\n+        for (var entry : ns.entries()) {\n+            if (entry.getValue().username().equals(user)) {\n+                return Optional.of(entry.getKey());\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    private Optional<String> findIssueUsername(Commit commit, Path scratchPath) {\n@@ -77,1 +97,1 @@\n-        if (authorEmail.domain().equals(\"openjdk.org\")) {\n+        if (authorEmail.domain().equals(namespace)) {\n@@ -80,1 +100,1 @@\n-            var user = issueProject.findUser(authorEmail.address());\n+            var user = findCensusUser(authorEmail.localPart(), scratchPath);\n@@ -82,1 +102,1 @@\n-                return Optional.of(user.get().username());\n+                return user;\n@@ -90,1 +110,1 @@\n-            var user = issueProject.findUser(committerEmail.address());\n+            var user = findCensusUser(committerEmail.localPart(), scratchPath);\n@@ -92,1 +112,1 @@\n-                return Optional.of(user.get().username());\n+                return user;\n@@ -109,1 +129,1 @@\n-    public void onIntegratedPullRequest(PullRequest pr, Hash hash)  {\n+    public void onIntegratedPullRequest(PullRequest pr, Path scratchPath, Hash hash)  {\n@@ -140,1 +160,1 @@\n-                        var username = findIssueUsername(commit);\n+                        var username = findIssueUsername(commit, scratchPath);\n@@ -152,1 +172,1 @@\n-    public void onNewIssue(PullRequest pr, org.openjdk.skara.vcs.openjdk.Issue issue) {\n+    public void onNewIssue(PullRequest pr, Path scratchPath, org.openjdk.skara.vcs.openjdk.Issue issue) {\n@@ -172,1 +192,1 @@\n-    public void onRemovedIssue(PullRequest pr, org.openjdk.skara.vcs.openjdk.Issue issue) {\n+    public void onRemovedIssue(PullRequest pr, Path scratchPath, org.openjdk.skara.vcs.openjdk.Issue issue) {\n@@ -184,1 +204,1 @@\n-    public void onNewCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch branch) {\n+    public void onNewCommits(HostedRepository repository, Repository localRepository, Path scratchPath, List<Commit> commits, Branch branch) {\n@@ -188,1 +208,1 @@\n-            var username = findIssueUsername(commit);\n+            var username = findIssueUsername(commit, scratchPath);\n@@ -277,1 +297,1 @@\n-    public void onNewOpenJDKTagCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, OpenJDKTag tag, Tag.Annotated annotated) throws NonRetriableException {\n+    public void onNewOpenJDKTagCommits(HostedRepository repository, Repository localRepository, Path scratchPath, List<Commit> commits, OpenJDKTag tag, Tag.Annotated annotated) throws NonRetriableException {\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifier.java","additions":34,"deletions":14,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import org.openjdk.skara.forge.HostedRepository;\n@@ -41,0 +42,3 @@\n+    private HostedRepository censusRepository = null;\n+    private String censusRef = null;\n+    private String namespace = \"openjdk.org\";\n@@ -93,0 +97,15 @@\n+    public IssueNotifierBuilder censusRepository(HostedRepository censusRepository) {\n+        this.censusRepository = censusRepository;\n+        return this;\n+    }\n+\n+    public IssueNotifierBuilder censusRef(String censusRef) {\n+        this.censusRef = censusRef;\n+        return this;\n+    }\n+\n+    public IssueNotifierBuilder namespace(String namespace) {\n+        this.namespace = namespace;\n+        return this;\n+    }\n+\n@@ -96,1 +115,2 @@\n-                                 setFixVersion, fixVersions, jbsBackport, prOnly, buildName);\n+                                 setFixVersion, fixVersions, jbsBackport, prOnly, buildName,\n+                                 censusRepository, censusRef, namespace);\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifierBuilder.java","additions":21,"deletions":1,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -91,0 +91,8 @@\n+        if (notifierConfiguration.contains(\"census\")) {\n+            builder.censusRepository(botConfiguration.repository(notifierConfiguration.get(\"census\").asString()));\n+            builder.censusRef(botConfiguration.repositoryRef(notifierConfiguration.get(\"census\").asString()));\n+        }\n+        if (notifierConfiguration.contains(\"namespace\")) {\n+            builder.namespace(notifierConfiguration.get(\"namespace\").asString());\n+        }\n+\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifierFactory.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -85,1 +85,1 @@\n-    public void onNewCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch branch) throws NonRetriableException {\n+    public void onNewCommits(HostedRepository repository, Repository localRepository, Path scratchPath, List<Commit> commits, Branch branch) throws NonRetriableException {\n@@ -97,1 +97,1 @@\n-    public void onNewOpenJDKTagCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, OpenJDKTag tag, Tag.Annotated annotation) throws NonRetriableException {\n+    public void onNewOpenJDKTagCommits(HostedRepository repository, Repository localRepository, Path scratchPath, List<Commit> commits, OpenJDKTag tag, Tag.Annotated annotation) throws NonRetriableException {\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/json\/JsonNotifier.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.nio.file.Path;\n@@ -232,1 +233,1 @@\n-    public void onNewCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch branch) throws NonRetriableException {\n+    public void onNewCommits(HostedRepository repository, Repository localRepository, Path scratchPath, List<Commit> commits, Branch branch) throws NonRetriableException {\n@@ -240,1 +241,1 @@\n-    public void onNewOpenJDKTagCommits(HostedRepository repository, Repository localRepository, List<Commit> commits, OpenJDKTag tag, Tag.Annotated annotation) throws NonRetriableException {\n+    public void onNewOpenJDKTagCommits(HostedRepository repository, Repository localRepository, Path scratchPath, List<Commit> commits, OpenJDKTag tag, Tag.Annotated annotation) throws NonRetriableException {\n@@ -245,1 +246,1 @@\n-            onNewTagCommit(repository, localRepository, commits.get(commits.size() - 1), tag.tag(), annotation);\n+            onNewTagCommit(repository, localRepository, scratchPath, commits.get(commits.size() - 1), tag.tag(), annotation);\n@@ -288,1 +289,1 @@\n-    public void onNewTagCommit(HostedRepository repository, Repository localRepository, Commit commit, Tag tag, Tag.Annotated annotation) throws NonRetriableException {\n+    public void onNewTagCommit(HostedRepository repository, Repository localRepository, Path scratchPath, Commit commit, Tag tag, Tag.Annotated annotation) throws NonRetriableException {\n@@ -340,1 +341,1 @@\n-    public void onNewBranch(HostedRepository repository, Repository localRepository, List<Commit> commits, Branch parent, Branch branch) throws NonRetriableException {\n+    public void onNewBranch(HostedRepository repository, Repository localRepository, Path scratchPath, List<Commit> commits, Branch parent, Branch branch) throws NonRetriableException {\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/mailinglist\/MailingListNotifier.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-    public void onNewPullRequest(PullRequest pr) {\n+    public void onNewPullRequest(PullRequest pr, Path scratchPath) {\n@@ -77,1 +77,1 @@\n-    public void onStateChange(PullRequest pr, Issue.State oldState) {\n+    public void onStateChange(PullRequest pr, Path scratchPath, Issue.State oldState) {\n@@ -87,1 +87,6 @@\n-    public void onHeadChange(PullRequest pr, Hash oldHead) {\n+    public String name() {\n+        return \"pullrequestbranch\";\n+    }\n+\n+    @Override\n+    public void onHeadChange(PullRequest pr, Path scratchPath, Hash oldHead) {\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/prbranch\/PullRequestBranchNotifier.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import java.nio.file.Path;\n@@ -56,1 +57,1 @@\n-    public void onNewPullRequest(PullRequest pr) {\n+    public void onNewPullRequest(PullRequest pr, Path scratchPath) {\n@@ -76,1 +77,1 @@\n-                             List<Commit> commits,\n+                             Path scratchPath, List<Commit> commits,\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/slack\/SlackNotifier.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import org.openjdk.skara.storage.StorageBuilder;\n@@ -34,0 +33,1 @@\n+import java.nio.file.Path;\n@@ -53,2 +53,2 @@\n-        public void onNewCommits(HostedRepository repository, Repository localRepository, List<Commit> commits,\n-                                  Branch branch) throws NonRetriableException {\n+        public void onNewCommits(HostedRepository repository, Repository localRepository, Path scratchPath, List<Commit> commits,\n+                                 Branch branch) throws NonRetriableException {\n@@ -67,1 +67,1 @@\n-         List<Commit> commits, OpenJDKTag tag, Tag.Annotated annotated) {\n+                                           Path scratchPath, List<Commit> commits, OpenJDKTag tag, Tag.Annotated annotated) {\n@@ -72,2 +72,2 @@\n-        public void onNewTagCommit(HostedRepository repository, Repository localRepository, Commit commit, Tag tag,\n-         Tag.Annotated annotation) {\n+        public void onNewTagCommit(HostedRepository repository, Repository localRepository, Path scratchPath, Commit commit, Tag tag,\n+                                   Tag.Annotated annotation) {\n@@ -78,2 +78,2 @@\n-        public void onNewBranch(HostedRepository repository, Repository localRepository, List<Commit> commits,\n-         Branch parent, Branch branch) {\n+        public void onNewBranch(HostedRepository repository, Repository localRepository, Path scratchPath, List<Commit> commits,\n+                                Branch parent, Branch branch) {\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/UpdaterTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-    private TestBotFactory testBotBuilder(HostedRepository hostedRepository, IssueProject issueProject, Path storagePath, JSONObject notifierConfig) throws IOException {\n+    private TestBotFactory.TestBotFactoryBuilder testBotBuilderFactory(HostedRepository hostedRepository, IssueProject issueProject, Path storagePath, JSONObject notifierConfig) throws IOException {\n@@ -77,2 +77,5 @@\n-                                                                                          .put(\"issue\", notifierConfig)))\n-                             .build();\n+                                                                                          .put(\"issue\", notifierConfig)));\n+    }\n+\n+    private TestBotFactory testBotBuilder(HostedRepository hostedRepository, IssueProject issueProject, Path storagePath, JSONObject notifierConfig) throws IOException {\n+        return testBotBuilderFactory(hostedRepository, issueProject, storagePath, notifierConfig).build();\n@@ -372,0 +375,67 @@\n+    @Test\n+    void testMultipleIssues(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+\n+            var repo = credentials.getHostedRepository();\n+            var repoFolder = tempFolder.path().resolve(\"repo\");\n+            var localRepo = CheckableRepository.init(repoFolder, repo.repositoryType());\n+            credentials.commitLock(localRepo);\n+            localRepo.pushAll(repo.url());\n+\n+            var issueProject = credentials.getIssueProject();\n+            var storageFolder = tempFolder.path().resolve(\"storage\");\n+            var jbsNotifierConfig = JSON.object().put(\"fixversions\", JSON.object())\n+                                        .put(\"buildname\", \"team\");\n+            var notifyBot = testBotBuilder(repo, issueProject, storageFolder, jbsNotifierConfig).create(\"notify\", JSON.object());\n+\n+            \/\/ Initialize history\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ Create an issue and commit a fix\n+            var authorEmailAddress = issueProject.issueTracker().currentUser().username() + \"@openjdk.org\";\n+            var issue1 = issueProject.createIssue(\"This is an issue\", List.of(\"Indeed\"), Map.of(\"issuetype\", JSON.of(\"Enhancement\")));\n+            var issue2 = issueProject.createIssue(\"This is another issue\", List.of(\"Indeed\"), Map.of(\"issuetype\", JSON.of(\"Enhancement\")));\n+            var issue3 = issueProject.createIssue(\"This is yet another issue\", List.of(\"Indeed\"), Map.of(\"issuetype\", JSON.of(\"Enhancement\")));\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, \"Another line\",\n+                                                               issue1.id() + \": Fix that issue\\n\" +\n+                                                                       issue1.id() + \": Fix that issue\\n\" +\n+                                                                       issue2.id() + \": And fix the other issue\\n\" +\n+                                                                       issue3.id() + \": As well as this one\\n\",\n+                                                               \"Duke\", authorEmailAddress);\n+            localRepo.push(editHash, repo.url(), \"master\");\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ The changeset should be reflected in a comment\n+            var updatedIssue1 = issueProject.issue(issue1.id()).orElseThrow();\n+            var updatedIssue2 = issueProject.issue(issue2.id()).orElseThrow();\n+            var updatedIssue3 = issueProject.issue(issue3.id()).orElseThrow();\n+\n+            var comments1 = updatedIssue1.comments();\n+            assertEquals(1, comments1.size());\n+            var comment1 = comments1.get(0);\n+            assertTrue(comment1.body().contains(editHash.abbreviate()));\n+            var comments2 = updatedIssue2.comments();\n+            assertEquals(1, comments2.size());\n+            var comment2 = comments2.get(0);\n+            assertTrue(comment2.body().contains(editHash.abbreviate()));\n+            var comments3 = updatedIssue3.comments();\n+            assertEquals(1, comments3.size());\n+            var comment3 = comments3.get(0);\n+            assertTrue(comment3.body().contains(editHash.abbreviate()));\n+\n+            \/\/ As well as a fixVersion and a resolved in build\n+            assertEquals(Set.of(\"0.1\"), fixVersions(updatedIssue1));\n+            assertEquals(\"team\", updatedIssue1.properties().get(\"customfield_10006\").asString());\n+            assertEquals(Set.of(\"0.1\"), fixVersions(updatedIssue2));\n+            assertEquals(\"team\", updatedIssue2.properties().get(\"customfield_10006\").asString());\n+\n+            \/\/ The issue should be assigned and resolved\n+            assertEquals(RESOLVED, updatedIssue1.state());\n+            assertEquals(List.of(issueProject.issueTracker().currentUser()), updatedIssue1.assignees());\n+            assertEquals(RESOLVED, updatedIssue2.state());\n+            assertEquals(List.of(issueProject.issueTracker().currentUser()), updatedIssue2.assignees());\n+        }\n+    }\n+\n@@ -792,0 +862,3 @@\n+            var censusBuilder = credentials.getCensusBuilder()\n+                                           .addReviewer(issueProject.issueTracker().currentUser().username());\n+\n@@ -793,2 +866,6 @@\n-            var jbsNotifierConfig = JSON.object().put(\"fixversions\", JSON.object());\n-            var notifyBot = testBotBuilder(repo, issueProject, storageFolder, jbsNotifierConfig).create(\"notify\", JSON.object());\n+            var jbsNotifierConfig = JSON.object().put(\"fixversions\", JSON.object())\n+                                        .put(\"census\", JSON.of(\"census:master\"))\n+                                        .put(\"namespace\", \"test\");\n+            var notifyBotFactory = testBotBuilderFactory(repo, issueProject, storageFolder, jbsNotifierConfig);\n+            notifyBotFactory.addHostedRepository(\"census\", censusBuilder.build());\n+            var notifyBot = notifyBotFactory.build().create(\"notify\", JSON.object());\n@@ -800,1 +877,1 @@\n-            var authorEmailAddress = issueProject.issueTracker().currentUser().email().orElse(issueProject.issueTracker().currentUser().username() + \"@otherjdk.org\");\n+            var authorEmailAddress = \"integrationreviewer1@otherjdk.org\";\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifierTests.java","additions":83,"deletions":6,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-import org.openjdk.skara.host.HostUser;\n@@ -40,1 +39,0 @@\n-    Optional<HostUser> findUser(String findBy);\n","filename":"issuetracker\/src\/main\/java\/org\/openjdk\/skara\/issuetracker\/IssueProject.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-import org.openjdk.skara.host.HostUser;\n@@ -471,27 +470,0 @@\n-\n-    @Override\n-    public Optional<HostUser> findUser(String findBy) {\n-        var user = request.get(\"user\/search\")\n-                          .param(\"username\", findBy)\n-                          .onError(r -> r.statusCode() == 404 ? Optional.of(JSON.object().put(\"NOT_FOUND\", true)) : Optional.empty())\n-                          .execute();\n-        if (!user.isArray()) {\n-            return Optional.empty();\n-        }\n-        if (user.asArray().size() == 0) {\n-            log.info(\"No results returned for user query: \" + findBy);\n-            return Optional.empty();\n-        }\n-        if (user.asArray().size() > 1) {\n-            log.severe(\"Multiple results returned for user query: \" + findBy);\n-            return Optional.empty();\n-        }\n-        var data = user.asArray().get(0);\n-        var hostUser = HostUser.builder()\n-                              .id(data.get(\"name\").asString())\n-                              .username(data.get(\"name\").asString())\n-                              .fullName(data.get(\"displayName\").asString())\n-                              .email(data.get(\"emailAddress\").asString())\n-                              .build();\n-        return Optional.of(hostUser);\n-    }\n","filename":"issuetracker\/src\/main\/java\/org\/openjdk\/skara\/issuetracker\/jira\/JiraProject.java","additions":0,"deletions":28,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-import org.openjdk.skara.email.EmailAddress;\n@@ -139,8 +138,0 @@\n-    Optional<HostUser> findUser(String findBy) {\n-        var findByLocalPart = EmailAddress.parse(findBy).localPart();\n-        return data.users.stream()\n-                         .filter(user -> user.username().equals(findBy) ||\n-                                 user.username().equals(findByLocalPart))\n-                         .findAny();\n-    }\n-\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestHost.java","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-import org.openjdk.skara.host.HostUser;\n@@ -85,5 +84,0 @@\n-\n-    @Override\n-    public Optional<HostUser> findUser(String findBy) {\n-        return host.findUser(findBy);\n-    }\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestIssueProject.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"}]}