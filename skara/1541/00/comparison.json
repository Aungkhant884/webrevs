{"files":[{"patch":"@@ -304,1 +304,1 @@\n-                newLabels.remove(\"jep\");\n+                newLabels.remove(JEP_LABEL);\n@@ -307,1 +307,1 @@\n-                newLabels.add(\"jep\");\n+                newLabels.add(JEP_LABEL);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -136,1 +136,1 @@\n-        var jepNumber = jbsIssue.properties().get(JEP_NUMBER).asString();\n+        var jepNumber = jbsIssue.properties().containsKey(JEP_NUMBER) ? jbsIssue.properties().get(JEP_NUMBER).asString() : \"NotAllocated\";\n@@ -139,1 +139,1 @@\n-            \"Completed\".equals(issueStatus) || (\"Closed\".equals(issueStatus) && resolution.isPresent() && \"Delivered\".equals(resolution.get()))) {\n+                \"Completed\".equals(issueStatus) || (\"Closed\".equals(issueStatus) && resolution.isPresent() && \"Delivered\".equals(resolution.get()))) {\n@@ -146,2 +146,7 @@\n-            reply.println(\"This pull request will not be integrated until the [JEP-\" + jepNumber\n-                    + \"](\" + jbsIssue.webUrl() + \")\" + \" has been targeted.\");\n+            if (jepNumber.equals(\"NotAllocated\")) {\n+                reply.println(\"This pull request will not be integrated until the [\" + jbsIssue.id()\n+                        + \"](\" + jbsIssue.webUrl() + \")\" + \" has been targeted.\");\n+            } else {\n+                reply.println(\"This pull request will not be integrated until the [JEP-\" + jepNumber\n+                        + \"](\" + jbsIssue.webUrl() + \")\" + \" has been targeted.\");\n+            }\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/JEPCommand.java","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -542,0 +542,52 @@\n+\n+    @Test\n+    void testWithoutJEPNumber(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var bot = credentials.getHostedRepository();\n+            var issueProject = credentials.getIssueProject();\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addAuthor(author.forge().currentUser().id());\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType(),\n+                    Path.of(\"appendable.txt\"), Set.of(\"issues\"), null);\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.authenticatedUrl(), \"master\", true);\n+\n+            var mainIssue = issueProject.createIssue(\"The main issue\", List.of(\"main\"), Map.of(\"issuetype\", JSON.of(\"Bug\")));\n+            var jepIssue = issueProject.createIssue(\"The jep issue\", List.of(\"Jep body\"),\n+                    Map.of(\"issuetype\", JSON.of(\"JEP\"), \"status\", JSON.object().put(\"name\", \"Submitted\")));\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.authenticatedUrl(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", mainIssue.id() + \": \" + mainIssue.title());\n+\n+            \/\/ Test the PR bot with jep\n+            Map<String, List<PRRecord>> issuePRMap = new HashMap<>();\n+            var prBot = PullRequestBot.newBuilder()\n+                    .repo(bot)\n+                    .issueProject(issueProject)\n+                    .enableJep(true)\n+                    .censusRepo(censusBuilder.build())\n+                    .issuePRMap(issuePRMap)\n+                    .build();\n+            var issueBot = new IssueBot(issueProject, List.of(author), Map.of(bot.name(), prBot), issuePRMap);\n+\n+            pr.addComment(\"\/jep TEST-2\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            TestBotRunner.runPeriodicItems(issueBot);\n+            assertTrue(pr.store().labelNames().contains(JEP_LABEL));\n+            assertLastCommentContains(pr, \"pull request will not be integrated until the\");\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a JEP request to be targeted\"));\n+\n+            \/\/ Make the jep issue Targeted\n+            jepIssue.setProperty(\"status\", JSON.object().put(\"name\", \"Targeted\"));\n+            jepIssue.setProperty(JEP_NUMBER, JSON.of(\"123\"));\n+            TestBotRunner.runPeriodicItems(issueBot);\n+            assertFalse(pr.store().labelNames().contains(JEP_LABEL));\n+            assertTrue(pr.store().body().contains(\"- [x] Change requires a JEP request to be targeted\"));\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/JEPCommandTests.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"modified"}]}