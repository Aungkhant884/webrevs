{"files":[{"patch":"@@ -59,1 +59,1 @@\n-            localRepo.merge(pr.targetHash());\n+            localRepo.merge(PullRequestUtils.targetHash(pr, localRepo));\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/ArchiveItem.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -161,1 +161,1 @@\n-            } else if (localRepo.isAncestor(pr.headHash(), pr.targetHash())) {\n+            } else if (localRepo.isAncestor(pr.headHash(), PullRequestUtils.targetHash(pr, localRepo))) {\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/ReviewArchive.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import org.openjdk.skara.vcs.Hash;\n@@ -34,1 +33,1 @@\n-import java.nio.file.*;\n+import java.nio.file.Path;\n@@ -70,3 +69,3 @@\n-    private static JCheckConfiguration configuration(HostedRepositoryPool hostedRepositoryPool, HostedRepository remoteRepo, String name, Hash hash) throws IOException {\n-        var confFile = hostedRepositoryPool.lines(remoteRepo, Path.of(name), hash).orElseThrow(\n-                () -> new IOException(\"Failed to read jcheck configuration from \" + name + \":\" + hash.hex()));\n+    private static JCheckConfiguration configuration(HostedRepositoryPool hostedRepositoryPool, HostedRepository remoteRepo, String name, String ref) throws IOException {\n+        var confFile = hostedRepositoryPool.lines(remoteRepo, Path.of(name), ref).orElseThrow(\n+                () -> new IOException(\"Failed to read jcheck configuration from \" + name + \":\" + ref));\n@@ -79,1 +78,1 @@\n-        return create(hostedRepositoryPool, censusRepo, censusRef, folder, pr.repository(), pr.targetHash(),\n+        return create(hostedRepositoryPool, censusRepo, censusRef, folder, pr.repository(), pr.targetRef(),\n@@ -84,1 +83,1 @@\n-                                 HostedRepository censusRepo, String censusRef, Path folder, HostedRepository repository, Hash hash,\n+                                 HostedRepository censusRepo, String censusRef, Path folder, HostedRepository repository, String ref,\n@@ -97,1 +96,1 @@\n-                configuration = configuration(hostedRepositoryPool, repository, \".jcheck\/conf\", hash);\n+                configuration = configuration(hostedRepositoryPool, repository, \".jcheck\/conf\", ref);\n@@ -99,1 +98,0 @@\n-                var confOverrideHash = confOverrideRepo.branchHash(confOverrideRef);\n@@ -103,1 +101,1 @@\n-                                              confOverrideHash);\n+                                              confOverrideRef);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CensusInstance.java","additions":8,"deletions":10,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -700,1 +700,1 @@\n-                !localRepo.files(pr.targetHash(), Path.of(\"CONTRIBUTING.md\")).isEmpty();\n+                !localRepo.files(PullRequestUtils.targetHash(pr, localRepo), Path.of(\"CONTRIBUTING.md\")).isEmpty();\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -155,1 +155,1 @@\n-        var checks = JCheck.checksFor(localRepo, pr.targetHash());\n+        var checks = JCheck.checksFor(localRepo, PullRequestUtils.targetHash(pr, localRepo));\n@@ -164,1 +164,1 @@\n-            conf = JCheck.parseConfiguration(localRepo, pr.targetHash(), additionalConfiguration);\n+            conf = JCheck.parseConfiguration(localRepo, PullRequestUtils.targetHash(pr, localRepo), additionalConfiguration);\n@@ -167,1 +167,1 @@\n-            throw new RuntimeException(\"Failed to parse jcheck configuration at: \" + pr.targetHash() + \" with extra: \" + additionalConfiguration);\n+            throw new RuntimeException(\"Failed to parse jcheck configuration at: \" + PullRequestUtils.targetHash(pr, localRepo) + \" with extra: \" + additionalConfiguration);\n@@ -183,2 +183,2 @@\n-            var updatedBase = localRepo.mergeBase(pr.targetHash(), commitHash);\n-            return localRepo.commitMetadata(updatedBase, pr.targetHash());\n+            var updatedBase = localRepo.mergeBase(PullRequestUtils.targetHash(pr, localRepo), commitHash);\n+            return localRepo.commitMetadata(updatedBase, PullRequestUtils.targetHash(pr, localRepo));\n@@ -209,1 +209,1 @@\n-                    var baseHash = localRepo.mergeBase(pr.targetHash(), pr.headHash());\n+                    var baseHash = localRepo.mergeBase(PullRequestUtils.targetHash(pr, localRepo), pr.headHash());\n@@ -222,1 +222,1 @@\n-                    localRepo.merge(pr.targetHash());\n+                    localRepo.merge(PullRequestUtils.targetHash(pr, localRepo));\n@@ -226,1 +226,1 @@\n-                    localRepo.rebase(pr.targetHash(), \"duke\", \"duke@openjdk.org\");\n+                    localRepo.rebase(PullRequestUtils.targetHash(pr, localRepo), \"duke\", \"duke@openjdk.org\");\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckablePullRequest.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import org.openjdk.skara.vcs.Hash;\n@@ -150,1 +149,1 @@\n-                                           scratchPath.resolve(\"census\"), bot.repo(), commit.hash(),\n+                                           scratchPath.resolve(\"census\"), bot.repo(), commit.hash().hex(),\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CommitCommandWorkItem.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -116,1 +116,1 @@\n-                if (!pr.targetHash().equals(wantedHash)) {\n+                if (!PullRequestUtils.targetHash(pr, localRepo).equals(wantedHash)) {\n@@ -118,1 +118,1 @@\n-                    reply.println(\" - it has moved to \" + pr.targetHash() + \". Aborting integration.\");\n+                    reply.println(\" - it has moved to \" + PullRequestUtils.targetHash(pr, localRepo) + \". Aborting integration.\");\n@@ -166,1 +166,1 @@\n-            if (!localHash.equals(pr.targetHash())) {\n+            if (!localHash.equals(PullRequestUtils.targetHash(pr, localRepo))) {\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/IntegrateCommand.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -100,1 +100,1 @@\n-                if (!pr.targetHash().equals(wantedHash)) {\n+                if (!PullRequestUtils.targetHash(pr, localRepo).equals(wantedHash)) {\n@@ -102,1 +102,1 @@\n-                    reply.println(\" - it has moved to \" + pr.targetHash() + \". Aborting integration.\");\n+                    reply.println(\" - it has moved to \" + PullRequestUtils.targetHash(pr, localRepo) + \". Aborting integration.\");\n@@ -139,1 +139,1 @@\n-            if (!localHash.equals(pr.targetHash())) {\n+            if (!localHash.equals(PullRequestUtils.targetHash(pr, localRepo))) {\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/SponsorCommand.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -113,5 +113,0 @@\n-    @Override\n-    public Hash targetHash() {\n-        return null;\n-    }\n-\n","filename":"bots\/tester\/src\/test\/java\/org\/openjdk\/skara\/bots\/tester\/InMemoryPullRequest.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -210,1 +210,1 @@\n-    public Optional<List<String>> lines(HostedRepository hostedRepository, Path p, Hash hash) throws IOException {\n+    public Optional<List<String>> lines(HostedRepository hostedRepository, Path p, String ref) throws IOException {\n@@ -213,1 +213,2 @@\n-        if (!seedRepo.contains(hash)) {\n+        var hash = seedRepo.resolve(ref);\n+        if (hash.isEmpty()) {\n@@ -216,0 +217,1 @@\n+            hash = seedRepo.resolve(ref);\n@@ -217,1 +219,2 @@\n-        return seedRepo.lines(p, hash);\n+        var finalHash = hash.orElseThrow(() -> new IllegalArgumentException(\"Unknown ref: \" + ref));\n+        return seedRepo.lines(p, finalHash);\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/HostedRepositoryPool.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -112,6 +112,0 @@\n-    \/**\n-     * Returns the current head of the ref the request is intended to be merged into.\n-     * @return\n-     *\/\n-    Hash targetHash();\n-\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/PullRequest.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-                                committer.name(), committer.email(), ZonedDateTime.now(), List.of(pr.targetHash()), localRepo.tree(finalHead));\n+                                committer.name(), committer.email(), ZonedDateTime.now(), List.of(targetHash(pr, localRepo)), localRepo.tree(finalHead));\n@@ -116,1 +116,1 @@\n-            localRepo.mergeBase(pr.targetHash(), sourceHead);\n+            localRepo.mergeBase(targetHash(pr, localRepo), sourceHead);\n@@ -136,1 +136,1 @@\n-        var parents = List.of(localRepo.mergeBase(pr.targetHash(), finalHead), sourceHash);\n+        var parents = List.of(localRepo.mergeBase(targetHash(pr, localRepo), finalHead), sourceHash);\n@@ -142,0 +142,4 @@\n+    public static Hash targetHash(PullRequest pr, Repository localRepo) throws IOException {\n+        return localRepo.resolve(\"prutils_targetref\").orElseThrow(() -> new IllegalStateException(\"Must materialize PR first\"));\n+    }\n+\n@@ -164,1 +168,1 @@\n-        return localRepo.mergeBase(pr.targetHash(), pr.headHash());\n+        return localRepo.mergeBase(targetHash(pr, localRepo), pr.headHash());\n@@ -193,1 +197,1 @@\n-            if (!localRepo.mergeBase(pr.targetHash(), mergeParent).equals(mergeParent)) {\n+            if (!localRepo.mergeBase(targetHash(pr, localRepo), mergeParent).equals(mergeParent)) {\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/PullRequestUtils.java","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -49,1 +49,0 @@\n-    private Hash targetHash = null;\n@@ -298,13 +297,1 @@\n-        var targetRef = json.get(\"base\").get(\"ref\").asString();\n-        if (targetHash == null) {\n-            \/\/ Read this value before returning, to ensure that future fetches of this ref contains the hash\n-            targetHash = repository.branchHash(targetRef);\n-        }\n-        return targetRef;\n-    }\n-\n-    @Override\n-    public Hash targetHash() {\n-        \/\/ Ensure that the field is populated\n-        targetRef();\n-        return targetHash;\n+        return json.get(\"base\").get(\"ref\").asString();\n@@ -723,1 +710,2 @@\n-        return repository.toDiff(targetHash(), headHash(), files);\n+        var targetHash = repository.branchHash(targetRef());\n+        return repository.toDiff(targetHash, headHash(), files);\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubPullRequest.java","additions":3,"deletions":15,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -48,1 +48,0 @@\n-    private Hash targetHash = null;\n@@ -303,4 +302,0 @@\n-        if (targetHash == null) {\n-            \/\/ Read this value before returning, to ensure that future fetches of this ref contains the hash\n-            targetHash = repository.branchHash(targetRef);\n-        }\n@@ -310,7 +305,0 @@\n-    @Override\n-    public Hash targetHash() {\n-        \/\/ Ensure that the field is populated\n-        targetRef();\n-        return targetHash;\n-    }\n-\n@@ -758,1 +746,2 @@\n-        return repository.toDiff(targetHash(), headHash(), changes.get(\"changes\"));\n+        var targetHash = repository.branchHash(targetRef());\n+        return repository.toDiff(targetHash, headHash(), changes.get(\"changes\"));\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabMergeRequest.java","additions":2,"deletions":13,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -163,5 +163,0 @@\n-    @Override\n-    public Hash targetHash() {\n-        return targetRepository.branchHash(data.targetRef);\n-    }\n-\n@@ -250,0 +245,1 @@\n+            var targetHash = targetRepository.branchHash(targetRef());\n@@ -254,1 +250,1 @@\n-                return targetLocalRepository.diff(targetHash(), headHash());\n+                return targetLocalRepository.diff(targetHash, headHash());\n@@ -258,1 +254,1 @@\n-                return targetLocalRepository.diff(targetHash(), fetchHead);\n+                return targetLocalRepository.diff(targetHash, fetchHead);\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestPullRequest.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"}]}