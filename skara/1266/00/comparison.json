{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -144,1 +144,1 @@\n-    private final Pattern issuePattern = Pattern.compile(\"^(?: \\\\* )?\\\\[(\\\\S+)]\\\\(.*\\\\): .*$\", Pattern.MULTILINE);\n+    private final Pattern issuePattern = Pattern.compile(\"^(?: \\\\* )?\\\\[(\\\\S+)]\\\\(.*\\\\): (.*$)\", Pattern.MULTILINE);\n@@ -153,0 +153,1 @@\n+                           .filter(mr -> !mr.group(2).endsWith(\" (**CSR**)\"))\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/PullRequestWorkItem.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -223,6 +223,5 @@\n-        var writer = new StringWriter();\n-        var printer = new PrintWriter(writer);\n-        printer.println(pullRequestTip + \"\\n\");\n-        printer.println(\"URL: \" + pr.webUrl().toString());\n-        printer.println(\"Date: \" + pr.createdAt().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss +0000\")));\n-        return writer.toString();\n+        var builder = new StringBuilder();\n+        builder.append(pullRequestTip).append(\"\\n\");\n+        builder.append(\"URL: \").append(pr.webUrl().toString()).append(\"\\n\");\n+        builder.append(\"Date: \").append(pr.createdAt().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss +0000\")));\n+        return builder.toString();\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifier.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -347,0 +347,61 @@\n+    @Test\n+    void testCsrIssue(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+\n+            var repo = credentials.getHostedRepository();\n+            var repoFolder = tempFolder.path().resolve(\"repo\");\n+            var localRepo = CheckableRepository.init(repoFolder, repo.repositoryType());\n+            credentials.commitLock(localRepo);\n+            localRepo.pushAll(repo.url());\n+\n+            var issueProject = credentials.getIssueProject();\n+            var storageFolder = tempFolder.path().resolve(\"storage\");\n+            var notifyBot = testBotBuilder(repo, issueProject, storageFolder, JSON.object()).create(\"notify\", JSON.object());\n+\n+            \/\/ Initialize history\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ Create an issue and its csr issue.\n+            var authorEmailAddress = issueProject.issueTracker().currentUser().username() + \"@openjdk.org\";\n+            var issue = issueProject.createIssue(\"This is an issue\", List.of(\"Indeed\"), Map.of(\"issuetype\", JSON.of(\"Enhancement\")));\n+            var csrIssue = issueProject.createIssue(\"This is a csr issue\", List.of(\"Indeed\"), Map.of(\"issuetype\", JSON.of(\"CSR\")));\n+            issue.addLink(Link.create(csrIssue, \"csr for\").build());\n+\n+            \/\/ Push a commit and create a pull request\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, \"Another line\",\n+                            issue.id() + \": This is an issue\\n\", \"Duke\", authorEmailAddress);\n+            localRepo.push(editHash, repo.url(), \"master\");\n+            var pr = credentials.createPullRequest(repo, \"edit\", \"master\", issue.id() + \": This is an issue\");\n+            pr.setBody(\"\\n\\n### Issues\\n\" +\n+                    \" * [\" + issue.id() + \"](http:\/\/www.test.test\/): This is an issue\\n\" +\n+                    \" * [\" + csrIssue.id() + \"](http:\/\/www.test2.test\/): This is a csr issue (**CSR**)\");\n+            pr.addLabel(\"rfr\");\n+            pr.addComment(\"This is now ready\");\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ Get the issues.\n+            var updatedIssue = issueProject.issue(issue.id()).orElseThrow();\n+            var updatedCsrIssue = issueProject.issue(csrIssue.id()).orElseThrow();\n+\n+            \/\/ Non-csr issue should have the PR link and PR comment.\n+            var issueLinks = updatedIssue.links();\n+            assertEquals(2, issueLinks.size());\n+            assertEquals(\"csr for\", issueLinks.get(0).relationship().orElseThrow());\n+            assertEquals(pr.webUrl(), issueLinks.get(1).uri().orElseThrow());\n+\n+            var issueComments = updatedIssue.comments();\n+            assertEquals(1, issueComments.size());\n+            assertTrue(issueComments.get(0).body().contains(pullRequestTip));\n+            assertTrue(issueComments.get(0).body().contains(pr.webUrl().toString()));\n+\n+            \/\/ csr issue shouldn't have the PR link or PR comment.\n+            var csrIssueLinks = updatedCsrIssue.links();\n+            assertEquals(1, csrIssueLinks.size());\n+            assertEquals(\"csr for\", issueLinks.get(0).relationship().orElseThrow());\n+\n+            var csrIssueComments = updatedCsrIssue.comments();\n+            assertEquals(0, csrIssueComments.size());\n+        }\n+    }\n+\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifierTests.java","additions":61,"deletions":0,"binary":false,"changes":61,"status":"modified"}]}