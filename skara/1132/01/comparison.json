{"files":[{"patch":"@@ -86,1 +86,1 @@\n-                    log.severe(\"Exception during item execution (\" + item + \"): \" + e.getMessage());\n+                    log.log(Level.SEVERE, \"Exception during item execution (\" + item + \"): \" + e.getMessage(), e);\n@@ -88,1 +88,0 @@\n-                    log.throwing(item.toString(), \"run\", e);\n@@ -171,2 +170,1 @@\n-                        log.warning(\"Exception during queue drain\");\n-                        log.throwing(\"BotRunner\", \"drain\", e);\n+                        log.log(Level.WARNING, \"Exception during queue drain\", e);\n@@ -191,2 +189,1 @@\n-                log.warning(\"Exception during queue drain\");\n-                log.throwing(\"BotRunner\", \"drain\", e);\n+                log.log(Level.WARNING, \"Exception during queue drain\", e);\n@@ -234,2 +231,1 @@\n-                log.severe(\"Exception during periodic item checking: \" + e.getMessage());\n-                log.throwing(\"BotRunner\", \"checkPeriodicItems\", e);\n+                log.log(Level.SEVERE, \"Exception during periodic item checking: \" + e.getMessage(), e);\n@@ -270,2 +266,1 @@\n-                log.severe(\"Exception during rest request processing: \" + e.getMessage());\n-                log.throwing(\"BotRunner\", \"processRestRequest\", e);\n+                log.log(Level.SEVERE, \"Exception during rest request processing: \" + e.getMessage(), e);\n@@ -292,2 +287,1 @@\n-                log.warning(\"Failed to create RestReceiver\");\n-                log.throwing(\"BotRunner\", \"run\", e);\n+                log.log(Level.WARNING, \"Failed to create RestReceiver\", e);\n","filename":"bot\/src\/main\/java\/org\/openjdk\/skara\/bot\/BotRunner.java","additions":6,"deletions":12,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -95,2 +95,1 @@\n-            log.severe(\"Exception during task notification posting: \" + e.getMessage());\n-            log.throwing(\"BotTaskAggregationHandler\", \"publish\", e);\n+            log.log(Level.SEVERE, \"Exception during task notification posting: \" + e.getMessage(), e);\n","filename":"bot\/src\/main\/java\/org\/openjdk\/skara\/bot\/BotTaskAggregationHandler.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import java.util.logging.Level;\n@@ -56,2 +57,1 @@\n-                log.warning(\"Failed to parse incoming request: \" + input);\n-                log.throwing(\"RestReceiver\", \"Handler\", e);\n+                log.log(Level.WARNING, \"Failed to parse incoming request: \" + input, e);\n","filename":"bot\/src\/main\/java\/org\/openjdk\/skara\/bot\/RestReceiver.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n@@ -82,27 +84,0 @@\n-    private void publishToLogstash(Instant time, Level level, String message, Map<String, String> extraFields) {\n-        var query = JSON.object();\n-        query.put(\"@timestamp\", dateTimeFormatter.format(time));\n-        query.put(\"level\", level.getName());\n-        query.put(\"level_value\", level.intValue());\n-        query.put(\"message\", message);\n-\n-        for (var entry : LogContextMap.entrySet()) {\n-            query.put(entry.getKey(), entry.getValue());\n-        }\n-\n-        for (var extraField : extraFields.entrySet()) {\n-            query.put(extraField.getKey(), extraField.getValue());\n-        }\n-\n-        var httpRequest = HttpRequest.newBuilder()\n-                .uri(endpoint)\n-                .header(\"Content-Type\", \"application\/json\")\n-                .POST(HttpRequest.BodyPublishers.ofString(query.toString()))\n-                .build();\n-        var future = httpClient.sendAsync(httpRequest, HttpResponse.BodyHandlers.discarding());\n-        \/\/ Save futures in optional collection when running tests.\n-        if (futures != null) {\n-            futures.add(future);\n-        }\n-    }\n-\n@@ -130,1 +105,36 @@\n-        publishToLogstash(record.getInstant(), record.getLevel(), record.getMessage(), getExtraFields(record));\n+        Level level = record.getLevel();\n+        var query = JSON.object();\n+        query.put(\"@timestamp\", dateTimeFormatter.format(record.getInstant()));\n+        query.put(\"level\", level.getName());\n+        query.put(\"level_value\", level.intValue());\n+        query.put(\"message\", record.getMessage());\n+\n+        if (record.getLoggerName() != null) {\n+            query.put(\"logger_name\", record.getLoggerName());\n+        }\n+\n+        if (record.getThrown() != null) {\n+            var writer = new StringWriter();\n+            var printer = new PrintWriter(writer);\n+            record.getThrown().printStackTrace(printer);\n+            query.put(\"stack_trace\", writer.toString());\n+        }\n+\n+        for (var entry : LogContextMap.entrySet()) {\n+            query.put(entry.getKey(), entry.getValue());\n+        }\n+\n+        for (var extraField : getExtraFields(record).entrySet()) {\n+            query.put(extraField.getKey(), extraField.getValue());\n+        }\n+\n+        var httpRequest = HttpRequest.newBuilder()\n+                .uri(endpoint)\n+                .header(\"Content-Type\", \"application\/json\")\n+                .POST(HttpRequest.BodyPublishers.ofString(query.toString()))\n+                .build();\n+        var future = httpClient.sendAsync(httpRequest, HttpResponse.BodyHandlers.discarding());\n+        \/\/ Save futures in optional collection when running tests.\n+        if (futures != null) {\n+            futures.add(future);\n+        }\n","filename":"bots\/cli\/src\/main\/java\/org\/openjdk\/skara\/bots\/cli\/BotLogstashHandler.java","additions":38,"deletions":28,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -103,2 +103,1 @@\n-            log.warning(\"Exception during slack notification posting: \" + e.getMessage());\n-            log.throwing(\"BotSlackHandler\", \"publish\", e);\n+            log.log(Level.WARNING, \"Exception during slack notification posting: \" + e.getMessage(), e);\n","filename":"bots\/cli\/src\/main\/java\/org\/openjdk\/skara\/bots\/cli\/BotSlackHandler.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+            record.setLoggerName(\"my.logger\");\n@@ -56,2 +57,3 @@\n-            assertTrue(requests.get(0).get(\"message\").asString().contains(\"Hello\"));\n-            assertTrue(requests.get(0).get(\"level\").asString().contains(Level.INFO.getName()));\n+            assertEquals(\"Hello\", requests.get(0).get(\"message\").asString());\n+            assertEquals(Level.INFO.getName(), requests.get(0).get(\"level\").asString());\n+            assertEquals(\"my.logger\", requests.get(0).get(\"logger_name\").asString());\n","filename":"bots\/cli\/src\/test\/java\/org\/openjdk\/skara\/bots\/cli\/BotLogstashHandlerTests.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.util.logging.Level;\n@@ -131,2 +132,1 @@\n-                        log.severe(\"Failed to push to \" + destination.url());\n-                        log.throwing(\"JBridgeBot\", \"run\", e);\n+                        log.log(Level.SEVERE, \"Failed to push to \" + destination.url(), e);\n","filename":"bots\/hgbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/hgbridge\/JBridgeBot.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -293,1 +293,1 @@\n-                errors.forEach(error -> log.throwing(\"RepositoryWorkItem\", \"run\", error));\n+                errors.forEach(error -> log.log(Level.WARNING, error.getMessage(), error));\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/RepositoryWorkItem.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.util.logging.Level;\n@@ -217,2 +218,1 @@\n-            log.severe(\"An error occurred during integration (\" + pr.webUrl() + \"): \" + e.getMessage());\n-            log.throwing(\"IntegrateCommand\", \"handle\", e);\n+            log.log(Level.SEVERE, \"An error occurred during integration (\" + pr.webUrl() + \"): \" + e.getMessage(), e);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/IntegrateCommand.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.util.logging.Level;\n@@ -159,2 +160,1 @@\n-            log.severe(\"An error occurred during sponsored integration (\" + pr.webUrl() + \"): \" + e.getMessage());\n-            log.throwing(\"SponsorCommand\", \"handle\", e);\n+            log.log(Level.SEVERE, \"An error occurred during sponsored integration (\" + pr.webUrl() + \"): \" + e.getMessage(), e);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/SponsorCommand.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.util.logging.Level;\n@@ -71,2 +72,1 @@\n-            log.info(\"Could not retrieve test jobs for PR: \" + desc);\n-            log.throwing(\"TestBot\", \"getPeriodicItems\", e);\n+            log.log(Level.INFO, \"Could not retrieve test jobs for PR: \" + desc, e);\n","filename":"bots\/tester\/src\/main\/java\/org\/openjdk\/skara\/bots\/tester\/TestUpdateNeededWorkItem.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import java.util.logging.Level;\n@@ -124,2 +125,1 @@\n-                    log.severe(\"Failed to preserve old clone at \" + path);\n-                    log.throwing(\"HostedRepositoryInstance\", \"preserveOldClone\", e);\n+                    log.log(Level.SEVERE, \"Failed to preserve old clone at \" + path, e);\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/HostedRepositoryPool.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.util.logging.Level;\n@@ -76,2 +77,1 @@\n-                        log.warning(\"Materialization into existing local repository failed\");\n-                        log.throwing(\"HostedRepositoryStorage\", \"tryMaterialize\", e2);\n+                        log.log(Level.WARNING, \"Materialization into existing local repository failed\", e2);\n","filename":"storage\/src\/main\/java\/org\/openjdk\/skara\/storage\/HostedRepositoryStorage.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}