{"files":[{"patch":"@@ -85,1 +85,1 @@\n-    private Execution capture(Path cwd, Map<String, String> env, List<String> cmd) {\n+    private static Execution capture(Path cwd, Map<String, String> env, List<String> cmd) {\n@@ -93,1 +93,1 @@\n-    private static Execution capture(Path cwd, String... cmd) {\n+    public static Execution capture(Path cwd, String... cmd) {\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/git\/GitRepository.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,8 @@\n+    public final static Map<String, String> NO_CONFIG_ENV = Map.of(\n+            \"HGRCPATH\", \"\",\n+            \"HGPLAIN\", \"\",\n+            \"HGEDITOR\", \"\",\n+            \"EDITOR\", \"\",\n+            \"VISUAL\", \"\"\n+    );\n+\n@@ -57,2 +65,1 @@\n-        pb.environment().put(\"HGRCPATH\", \"\");\n-        pb.environment().put(\"HGPLAIN\", \"\");\n+        pb.environment().putAll(NO_CONFIG_ENV);\n@@ -89,1 +96,1 @@\n-    private static Execution capture(Path cwd, String... cmd) {\n+    public static Execution capture(Path cwd, String... cmd) {\n@@ -91,2 +98,1 @@\n-                      .environ(\"HGRCPATH\", \"\")\n-                      .environ(\"HGPLAIN\", \"\")\n+                      .environMap(NO_CONFIG_ENV)\n@@ -592,2 +598,1 @@\n-        pb.environment().put(\"HGRCPATH\", \"\");\n-        pb.environment().put(\"HGPLAIN\", \"\");\n+        pb.environment().putAll(NO_CONFIG_ENV);\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/hg\/HgRepository.java","additions":13,"deletions":8,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import org.openjdk.skara.vcs.hg.HgRepository;\n@@ -2185,0 +2186,36 @@\n+    @ParameterizedTest\n+    @EnumSource(VCS.class)\n+    void testNoConfig(VCS vcs) throws IOException, InterruptedException {\n+        \/\/ Verify that our method of disabling configuration works\n+        try (var dir = new TemporaryDirectory()) {\n+            switch (vcs) {\n+                case GIT -> {\n+                    var gitRepo = new GitRepository(dir.path()).init();\n+                    var configResult = GitRepository.capture(dir.path(),\n+                            \"git\", \"config\", \"--list\").await();\n+                    assertEquals(configResult.status(), 0);\n+\n+                    \/\/ We can't get a list of all settings except local, so compare all with local only\n+                    var localConfigResult = GitRepository.capture(dir.path(),\n+                            \"git\", \"config\", \"--list\", \"--local\").await();\n+                    assertEquals(localConfigResult.status(), 0);\n+                    assertEquals(localConfigResult.stdout(), configResult.stdout());\n+                }\n+\n+                case HG -> {\n+                    var hgRepo = new HgRepository(dir.path()).init();\n+                    var settingsResult = HgRepository.capture(dir.path(),\n+                            \"hg\", \"config\").await();\n+                    assertEquals(settingsResult.status(), 0);\n+\n+                    \/\/ There's no way to stop hg from picking up ui.editor or repo settings,\n+                    \/\/ nor to print only them, so hard-code these settings.\n+                    var filteredSettings = settingsResult.stdout().stream().filter(\n+                            s -> !(s.startsWith(\"bundle.mainreporoot=\") || s.startsWith(\"ui.editor=\"))\n+                    ).toArray();\n+                    assertTrue(filteredSettings.length == 0);\n+                }\n+            }\n+        }\n+    }\n+\n","filename":"vcs\/src\/test\/java\/org\/openjdk\/skara\/vcs\/RepositoryTests.java","additions":37,"deletions":0,"binary":false,"changes":37,"status":"modified"}]}