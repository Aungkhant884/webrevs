{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -70,0 +70,7 @@\n+        public Description environ(Map<String, String> keyValueMap) {\n+            if (keyValueMap != null) {\n+                getCurrentProcessBuilderSetup().environment.putAll(keyValueMap);\n+            }\n+            return this;\n+        }\n+\n","filename":"process\/src\/main\/java\/org\/openjdk\/skara\/process\/Process.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -333,1 +333,1 @@\n-    public HostedRepository getHostedRepository() {\n+    public HostedRepository getHostedRepository() throws IOException {\n@@ -337,0 +337,1 @@\n+        var retryCount = 0;\n@@ -343,0 +344,3 @@\n+                if (retryCount > 3) {\n+                    throw e;\n+                }\n@@ -345,0 +349,1 @@\n+                    retryCount++;\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/HostCredentials.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -84,0 +84,1 @@\n+        pb.environment().putAll(GitRepository.NO_CONFIG_ENV);\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/git\/GitCommits.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,0 +41,6 @@\n+    public final static Map<String, String> NO_CONFIG_ENV = Map.of(\n+            \"HOME\", \"\/this-does-not-exist-and-if-you-create-it-you-are-in-trouble\",\n+            \"XDG_CONFIG_HOME\", \"\/this-does-not-exist-and-if-you-create-it-you-are-in-trouble\",\n+            \"GIT_CONFIG_NOSYSTEM\", \"true\"\n+    );\n+\n@@ -54,0 +60,1 @@\n+        pb.environment().putAll(NO_CONFIG_ENV);\n@@ -78,0 +85,4 @@\n+    private static Execution capture(Path cwd, Map<String, String> env, List<String> cmd) {\n+        return capture(cwd, env, cmd.toArray(new String[0]));\n+    }\n+\n@@ -82,1 +93,5 @@\n-    private static Execution capture(Path cwd, String... cmd) {\n+    public static Execution capture(Path cwd, String... cmd) {\n+        return capture(cwd, NO_CONFIG_ENV, cmd);\n+    }\n+\n+    private static Execution capture(Path cwd, Map<String, String> env, String... cmd) {\n@@ -85,0 +100,1 @@\n+                      .environ(env)\n@@ -721,0 +737,1 @@\n+                         .environ(NO_CONFIG_ENV)\n@@ -756,0 +773,1 @@\n+                .environ(NO_CONFIG_ENV)\n@@ -808,0 +826,1 @@\n+                         .environ(NO_CONFIG_ENV)\n@@ -822,0 +841,1 @@\n+                         .environ(NO_CONFIG_ENV)\n@@ -881,0 +901,1 @@\n+                            .environ(NO_CONFIG_ENV)\n@@ -1136,1 +1157,2 @@\n-        try (var p = capture(\"git\", \"config\", key)) {\n+        \/\/ We must explicitly do this *with* the user's .gitconfig, so override NO_CONFIG_ENV\n+        try (var p = capture(dir, Collections.emptyMap(), \"git\", \"config\", key)) {\n@@ -1534,1 +1556,2 @@\n-        try (var p = capture(cmd)) {\n+        \/\/ We must explicitly do this *with* the user's .gitconfig, so override NO_CONFIG_ENV\n+        try (var p = capture(dir, Collections.emptyMap(), cmd)) {\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/git\/GitRepository.java","additions":27,"deletions":4,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,8 @@\n+    public final static Map<String, String> NO_CONFIG_ENV = Map.of(\n+            \"HGRCPATH\", \"\",\n+            \"HGPLAIN\", \"\",\n+            \"HGEDITOR\", \"\",\n+            \"EDITOR\", \"\",\n+            \"VISUAL\", \"\"\n+    );\n+\n@@ -57,2 +65,1 @@\n-        pb.environment().put(\"HGRCPATH\", \"\");\n-        pb.environment().put(\"HGPLAIN\", \"\");\n+        pb.environment().putAll(NO_CONFIG_ENV);\n@@ -89,1 +96,1 @@\n-    private static Execution capture(Path cwd, String... cmd) {\n+    public static Execution capture(Path cwd, String... cmd) {\n@@ -91,2 +98,1 @@\n-                      .environ(\"HGRCPATH\", \"\")\n-                      .environ(\"HGPLAIN\", \"\")\n+                      .environ(NO_CONFIG_ENV)\n@@ -592,2 +598,1 @@\n-        pb.environment().put(\"HGRCPATH\", \"\");\n-        pb.environment().put(\"HGPLAIN\", \"\");\n+        pb.environment().putAll(NO_CONFIG_ENV);\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/hg\/HgRepository.java","additions":13,"deletions":8,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,2 @@\n+import org.openjdk.skara.vcs.git.GitRepository;\n+import org.openjdk.skara.vcs.hg.HgRepository;\n@@ -1656,0 +1658,1 @@\n+            pb.environment().putAll(GitRepository.NO_CONFIG_ENV);\n@@ -1689,0 +1692,1 @@\n+            pb.environment().putAll(GitRepository.NO_CONFIG_ENV);\n@@ -2182,0 +2186,36 @@\n+    @ParameterizedTest\n+    @EnumSource(VCS.class)\n+    void testNoConfig(VCS vcs) throws IOException, InterruptedException {\n+        \/\/ Verify that our method of disabling configuration works\n+        try (var dir = new TemporaryDirectory()) {\n+            switch (vcs) {\n+                case GIT -> {\n+                    var gitRepo = new GitRepository(dir.path()).init();\n+                    var configResult = GitRepository.capture(dir.path(),\n+                            \"git\", \"config\", \"--list\").await();\n+                    assertEquals(configResult.status(), 0);\n+\n+                    \/\/ We can't get a list of all settings except local, so compare all with local only\n+                    var localConfigResult = GitRepository.capture(dir.path(),\n+                            \"git\", \"config\", \"--list\", \"--local\").await();\n+                    assertEquals(localConfigResult.status(), 0);\n+                    assertEquals(localConfigResult.stdout(), configResult.stdout());\n+                }\n+\n+                case HG -> {\n+                    var hgRepo = new HgRepository(dir.path()).init();\n+                    var settingsResult = HgRepository.capture(dir.path(),\n+                            \"hg\", \"config\").await();\n+                    assertEquals(settingsResult.status(), 0);\n+\n+                    \/\/ There's no way to stop hg from picking up ui.editor or repo settings,\n+                    \/\/ nor to print only them, so hard-code these settings.\n+                    var filteredSettings = settingsResult.stdout().stream().filter(\n+                            s -> !(s.startsWith(\"bundle.mainreporoot=\") || s.startsWith(\"ui.editor=\"))\n+                    ).toArray();\n+                    assertTrue(filteredSettings.length == 0);\n+                }\n+            }\n+        }\n+    }\n+\n@@ -2451,0 +2491,1 @@\n+            pb.environment().putAll(GitRepository.NO_CONFIG_ENV);\n","filename":"vcs\/src\/test\/java\/org\/openjdk\/skara\/vcs\/RepositoryTests.java","additions":42,"deletions":1,"binary":false,"changes":43,"status":"modified"}]}