{"files":[{"patch":"@@ -35,6 +35,0 @@\n-    protected static final String FORCE_PUSH_MARKER = \"<!-- force-push suggestion -->\";\n-    protected static final String FORCE_PUSH_SUGGESTION= \"\"\"\n-            Please do not rebase or force-push to an active PR as it invalidates existing review comments. \\\n-            All changes will be squashed into a single commit automatically when integrating. \\\n-            See [OpenJDK Developers’ Guide](https:\/\/openjdk.org\/guide\/#working-with-pull-requests) for more information.\n-            \"\"\";\n@@ -140,14 +134,0 @@\n-        var lastForcePushTime = pr.lastForcePushTime();\n-        if (lastForcePushTime.isPresent()) {\n-            var lastForcePushSuggestion = pr.comments().stream()\n-                    .filter(comment -> comment.body().contains(FORCE_PUSH_MARKER))\n-                    .reduce((a, b) -> b);\n-            if (lastForcePushSuggestion.isEmpty() || lastForcePushSuggestion.get().createdAt().isBefore(lastForcePushTime.get())) {\n-                log.info(\"Found force-push for \" + describe(pr) + \", adding force-push suggestion\");\n-                pr.addComment(\"@\" + pr.author().username() + \" \" + FORCE_PUSH_SUGGESTION + FORCE_PUSH_MARKER);\n-            }\n-        }\n-    }\n-\n-    private String describe(PullRequest pr) {\n-        return pr.repository().name() + \"#\" + pr.id();\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/prbranch\/PullRequestBranchNotifier.java","additions":0,"deletions":20,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -37,2 +37,0 @@\n-import static org.openjdk.skara.bots.notify.prbranch.PullRequestBranchNotifier.FORCE_PUSH_MARKER;\n-import static org.openjdk.skara.bots.notify.prbranch.PullRequestBranchNotifier.FORCE_PUSH_SUGGESTION;\n@@ -315,87 +313,0 @@\n-\n-    @Test\n-    void testForcePush(TestInfo testInfo) throws IOException {\n-        try (var credentials = new HostCredentials(testInfo);\n-             var tempFolder = new TemporaryDirectory()) {\n-            var repo = credentials.getHostedRepository();\n-            var repoFolder = tempFolder.path().resolve(\"repo\");\n-            var localRepo = CheckableRepository.init(repoFolder, repo.repositoryType());\n-            var storageFolder = tempFolder.path().resolve(\"storage\");\n-            var notifyBot = testBotBuilder(repo, storageFolder).create(\"notify\", JSON.object());\n-\n-            \/\/ Create a PR\n-            var editHash = CheckableRepository.appendAndCommit(localRepo, \"Another line\");\n-            localRepo.push(editHash, repo.url(), \"source\", true);\n-            var pr = credentials.createPullRequest(repo, \"master\", \"source\", \"This is a PR\", false);\n-            pr.addLabel(\"rfr\");\n-            pr.addComment(\"initial\");\n-            TestBotRunner.runPeriodicItems(notifyBot);\n-\n-            \/\/ The PR shouldn't have the force-push suggestion comment\n-            assertEquals(1, pr.comments().size());\n-            var lastComment = pr.comments().get(pr.comments().size() - 1);\n-            assertTrue(lastComment.body().contains(\"initial\"));\n-            assertFalse(lastComment.body().contains(FORCE_PUSH_MARKER));\n-            assertFalse(lastComment.body().contains(FORCE_PUSH_SUGGESTION));\n-\n-            \/\/ Normally push.\n-            var updatedHash = CheckableRepository.appendAndCommit(localRepo, \"Normally push\");\n-            localRepo.push(updatedHash, repo.url(), \"source\", false);\n-            pr.addComment(\"Normally push\");\n-            TestBotRunner.runPeriodicItems(notifyBot);\n-\n-            \/\/ The PR shouldn't have the force-push suggestion comment.\n-            assertEquals(2, pr.comments().size());\n-            lastComment = pr.comments().get(pr.comments().size() - 1);\n-            assertTrue(lastComment.body().contains(\"Normally push\"));\n-            assertFalse(lastComment.body().contains(FORCE_PUSH_MARKER));\n-            assertFalse(lastComment.body().contains(FORCE_PUSH_SUGGESTION));\n-\n-            \/\/ Simulate force-push.\n-            updatedHash = CheckableRepository.appendAndCommit(localRepo, \"test force-push\");\n-            localRepo.checkout(editHash);\n-            localRepo.squash(updatedHash);\n-            var forcePushHash = localRepo.commit(\"test force-push\", \"duke\", \"duke@openjdk.org\");\n-            localRepo.push(forcePushHash, repo.url(), \"source\", true);\n-            pr.setLastForcePushTime(ZonedDateTime.now());\n-            pr.addComment(\"Force-push\");\n-            TestBotRunner.runPeriodicItems(notifyBot);\n-\n-            \/\/ The last comment of the PR should be the force-push suggestion comment.\n-            assertEquals(4, pr.comments().size());\n-            lastComment = pr.comments().get(pr.comments().size() - 1);\n-            assertFalse(lastComment.body().contains(\"Force-push\"));\n-            assertTrue(lastComment.body().contains(FORCE_PUSH_MARKER));\n-            assertTrue(lastComment.body().contains(FORCE_PUSH_SUGGESTION));\n-\n-            \/\/ Normally push again.\n-            updatedHash = CheckableRepository.appendAndCommit(localRepo, \"Normally push\");\n-            localRepo.push(updatedHash, repo.url(), \"source\", false);\n-            pr.addComment(\"Normally push again\");\n-            TestBotRunner.runPeriodicItems(notifyBot);\n-\n-            \/\/ The last comment of the PR shouldn't be the force-push suggestion comment.\n-            assertEquals(5, pr.comments().size());\n-            lastComment = pr.comments().get(pr.comments().size() - 1);\n-            assertTrue(lastComment.body().contains(\"Normally push again\"));\n-            assertFalse(lastComment.body().contains(FORCE_PUSH_MARKER));\n-            assertFalse(lastComment.body().contains(FORCE_PUSH_SUGGESTION));\n-\n-            \/\/ Simulate force-push again.\n-            updatedHash = CheckableRepository.appendAndCommit(localRepo, \"test force-push again\");\n-            localRepo.checkout(editHash);\n-            localRepo.squash(updatedHash);\n-            forcePushHash = localRepo.commit(\"test force-push again\", \"duke\", \"duke@openjdk.org\");\n-            localRepo.push(forcePushHash, repo.url(), \"source\", true);\n-            pr.setLastForcePushTime(ZonedDateTime.now());\n-            pr.addComment(\"Force-push again\");\n-            TestBotRunner.runPeriodicItems(notifyBot);\n-\n-            \/\/ The last comment of the PR should be the force-push suggestion comment.\n-            assertEquals(7, pr.comments().size());\n-            lastComment = pr.comments().get(pr.comments().size() - 1);\n-            assertFalse(lastComment.body().contains(\"Force-push again\"));\n-            assertTrue(lastComment.body().contains(FORCE_PUSH_MARKER));\n-            assertTrue(lastComment.body().contains(FORCE_PUSH_SUGGESTION));\n-        }\n-    }\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/prbranch\/PullRequestBranchNotifierTests.java","additions":0,"deletions":89,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -54,0 +54,7 @@\n+    protected static final String FORCE_PUSH_MARKER = \"<!-- force-push suggestion -->\";\n+    protected static final String FORCE_PUSH_SUGGESTION= \"\"\"\n+            Please do not rebase or force-push to an active PR as it invalidates existing review comments. \\\n+            All changes will be squashed into a single commit automatically when integrating. \\\n+            See [OpenJDK Developers’ Guide](https:\/\/openjdk.org\/guide\/#working-with-pull-requests) for more information.\n+            \"\"\";\n+\n@@ -385,0 +392,14 @@\n+            \/\/ Check force push\n+            if (!pr.isDraft()) {\n+                var lastForcePushTime = pr.lastForcePushTime();\n+                if (lastForcePushTime.isPresent()) {\n+                    var lastForcePushSuggestion = comments.stream()\n+                            .filter(comment -> comment.body().contains(FORCE_PUSH_MARKER))\n+                            .reduce((a, b) -> b);\n+                    if (lastForcePushSuggestion.isEmpty() || lastForcePushSuggestion.get().createdAt().isBefore(lastForcePushTime.get())) {\n+                        log.info(\"Found force-push for \" + pr.repository().name() + \"#\" + pr.id() + \", adding force-push suggestion\");\n+                        pr.addComment(\"@\" + pr.author().username() + \" \" + FORCE_PUSH_SUGGESTION + FORCE_PUSH_MARKER);\n+                    }\n+                }\n+            }\n+\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckWorkItem.java","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -41,0 +41,2 @@\n+import static org.openjdk.skara.bots.pr.CheckWorkItem.FORCE_PUSH_MARKER;\n+import static org.openjdk.skara.bots.pr.CheckWorkItem.FORCE_PUSH_SUGGESTION;\n@@ -2618,0 +2620,130 @@\n+\n+    @Test\n+    void testForcePush(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addAuthor(author.forge().currentUser().id())\n+                    .addReviewer(reviewer.forge().currentUser().id());\n+            var seedFolder = tempFolder.path().resolve(\"seed\");\n+            var checkBot = PullRequestBot.newBuilder()\n+                    .repo(author)\n+                    .censusRepo(censusBuilder.build())\n+                    .censusLink(\"https:\/\/census.com\/{{contributor}}-profile\")\n+                    .seedStorage(seedFolder)\n+                    .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"refs\/heads\/edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"This is a pull request\");\n+            pr.addComment(\"initial\");\n+            TestBotRunner.runPeriodicItems(checkBot);\n+\n+            \/\/ The PR shouldn't have the force-push suggestion comment\n+            assertEquals(1, pr.comments().size());\n+            var lastComment = pr.comments().get(pr.comments().size() - 1);\n+            assertTrue(lastComment.body().contains(\"initial\"));\n+            assertFalse(lastComment.body().contains(FORCE_PUSH_MARKER));\n+            assertFalse(lastComment.body().contains(FORCE_PUSH_SUGGESTION));\n+\n+            \/\/ Normally push.\n+            var updatedHash = CheckableRepository.appendAndCommit(localRepo, \"Normally push\");\n+            localRepo.push(updatedHash, author.url(), \"edit\", false);\n+            pr.addComment(\"Normally push\");\n+            TestBotRunner.runPeriodicItems(checkBot);\n+\n+            \/\/ The PR shouldn't have the force-push suggestion comment.\n+            assertEquals(2, pr.comments().size());\n+            lastComment = pr.comments().get(pr.comments().size() - 1);\n+            assertTrue(lastComment.body().contains(\"Normally push\"));\n+            assertFalse(lastComment.body().contains(FORCE_PUSH_MARKER));\n+            assertFalse(lastComment.body().contains(FORCE_PUSH_SUGGESTION));\n+\n+            \/\/ Simulate force-push.\n+            updatedHash = CheckableRepository.appendAndCommit(localRepo, \"test force-push\");\n+            localRepo.checkout(editHash);\n+            localRepo.squash(updatedHash);\n+            var forcePushHash = localRepo.commit(\"test force-push\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(forcePushHash, author.url(), \"edit\", true);\n+            pr.addComment(\"Force-push\");\n+            pr.setLastForcePushTime(ZonedDateTime.now());\n+            TestBotRunner.runPeriodicItems(checkBot);\n+\n+            \/\/ The last comment of the PR should be the force-push suggestion comment.\n+            assertEquals(4, pr.comments().size());\n+            lastComment = pr.comments().get(pr.comments().size() - 1);\n+            assertFalse(lastComment.body().contains(\"Force-push\"));\n+            assertTrue(lastComment.body().contains(FORCE_PUSH_MARKER));\n+            assertTrue(lastComment.body().contains(FORCE_PUSH_SUGGESTION));\n+\n+            \/\/ Convert pr to draft\n+            pr.store().setDraft(true);\n+\n+            \/\/ Normally push again.\n+            updatedHash = CheckableRepository.appendAndCommit(localRepo, \"Normally push\");\n+            localRepo.push(updatedHash, author.url(), \"edit\", false);\n+            pr.addComment(\"Normally push in draft\");\n+            TestBotRunner.runPeriodicItems(checkBot);\n+\n+            \/\/ The last comment of the PR shouldn't be the force-push suggestion comment.\n+            assertEquals(5, pr.comments().size());\n+            lastComment = pr.comments().get(pr.comments().size() - 1);\n+            assertTrue(lastComment.body().contains(\"Normally push in draft\"));\n+            assertFalse(lastComment.body().contains(FORCE_PUSH_MARKER));\n+            assertFalse(lastComment.body().contains(FORCE_PUSH_SUGGESTION));\n+\n+            \/\/ Simulate force-push in draft.\n+            updatedHash = CheckableRepository.appendAndCommit(localRepo, \"test force-push in draft\");\n+            localRepo.checkout(editHash);\n+            localRepo.squash(updatedHash);\n+            forcePushHash = localRepo.commit(\"test force-push in draft\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(forcePushHash, author.url(), \"edit\", true);\n+            pr.setLastForcePushTime(ZonedDateTime.now());\n+            pr.addComment(\"Force-push in draft\");\n+            TestBotRunner.runPeriodicItems(checkBot);\n+\n+            \/\/ The last comment of the PR should not be the force-push suggestion comment.\n+            assertEquals(6, pr.comments().size());\n+            lastComment = pr.comments().get(pr.comments().size() - 1);\n+            assertTrue(lastComment.body().contains(\"Force-push in draft\"));\n+            assertFalse(lastComment.body().contains(FORCE_PUSH_MARKER));\n+            assertFalse(lastComment.body().contains(FORCE_PUSH_SUGGESTION));\n+\n+            \/\/ Convert pr to ready\n+            pr.store().setDraft(false);\n+\n+            \/\/ Nothing should happen\n+            TestBotRunner.runPeriodicItems(checkBot);\n+            assertEquals(6, pr.comments().size());\n+            lastComment = pr.comments().get(pr.comments().size() - 1);\n+            assertTrue(lastComment.body().contains(\"Force-push in draft\"));\n+            assertFalse(lastComment.body().contains(FORCE_PUSH_MARKER));\n+            assertFalse(lastComment.body().contains(FORCE_PUSH_SUGGESTION));\n+\n+            \/\/ Force-push again\n+            updatedHash = CheckableRepository.appendAndCommit(localRepo, \"force-push again\");\n+            localRepo.checkout(editHash);\n+            localRepo.squash(updatedHash);\n+            forcePushHash = localRepo.commit(\"test force-push again\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(forcePushHash, author.url(), \"edit\", true);\n+            pr.setLastForcePushTime(ZonedDateTime.now());\n+            pr.addComment(\"Force-push again\");\n+            TestBotRunner.runPeriodicItems(checkBot);\n+\n+            \/\/ The last comment of the PR should be the force-push suggestion comment.\n+            assertEquals(8, pr.comments().size());\n+            lastComment = pr.comments().get(pr.comments().size() - 1);\n+            assertFalse(lastComment.body().contains(\"Force-push\"));\n+            assertTrue(lastComment.body().contains(FORCE_PUSH_MARKER));\n+            assertTrue(lastComment.body().contains(FORCE_PUSH_SUGGESTION));\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CheckTests.java","additions":132,"deletions":0,"binary":false,"changes":132,"status":"modified"},{"patch":"@@ -184,2 +184,2 @@\n-     * Get the last force-push time. If there is no force-push in pull request\n-     * or the restful api doesn't support force-push, return empty.\n+     * Return the last time something was force pushed while not in draft state.\n+     * If there is no force-push in pull request or the restful api doesn't support force-push, return empty.\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/PullRequest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -768,8 +768,10 @@\n-        return request.get(\"issues\/\" + json.get(\"number\").toString() + \"\/timeline\")\n-                      .execute()\n-                      .stream()\n-                      .map(JSONValue::asObject)\n-                      .filter(obj -> obj.contains(\"event\"))\n-                      .filter(obj -> obj.get(\"event\").asString().equals(\"head_ref_force_pushed\"))\n-                      .reduce((a, b) -> b)\n-                      .map(obj -> ZonedDateTime.parse(obj.get(\"created_at\").asString()));\n+        var timelineJSON = request.get(\"issues\/\" + json.get(\"number\").toString() + \"\/timeline\")\n+                .execute();\n+        return timelineJSON\n+                .stream()\n+                .map(JSONValue::asObject)\n+                .filter(obj -> obj.contains(\"event\"))\n+                .filter(obj -> obj.get(\"event\").asString().equals(\"head_ref_force_pushed\"))\n+                .filter(obj -> ZonedDateTime.parse(obj.get(\"created_at\").asString()).isAfter(lastMarkedAsReadyTime(timelineJSON)))\n+                .reduce((a, b) -> b)\n+                .map(obj -> ZonedDateTime.parse(obj.get(\"created_at\").asString()));\n@@ -798,0 +800,15 @@\n+\n+    private ZonedDateTime lastMarkedAsReadyTime(JSONValue timelineJSON) {\n+        ZonedDateTime readyTime = createdAt();\n+        Optional<ZonedDateTime> latestTime = timelineJSON\n+                .stream()\n+                .map(JSONValue::asObject)\n+                .filter(obj -> obj.contains(\"event\"))\n+                .filter(obj -> obj.get(\"event\").asString().equals(\"ready_for_review\"))\n+                .reduce((a, b) -> b)\n+                .map(obj -> ZonedDateTime.parse(obj.get(\"created_at\").asString()));\n+        if (latestTime.isPresent()) {\n+            readyTime = latestTime.get();\n+        }\n+        return readyTime;\n+    }\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubPullRequest.java","additions":25,"deletions":8,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+import java.util.Optional;\n@@ -151,0 +152,11 @@\n+\n+    @Test\n+    void testForcePushTimeWhenPRInDraft() {\n+        var testRepoOpt = githubHost.repository(\"openjdk\/playground\");\n+        assumeTrue(testRepoOpt.isPresent());\n+        var testRepo = testRepoOpt.get();\n+        var testPr = (GitHubPullRequest) testRepo.pullRequest(\"107\");\n+\n+        \/\/ Won't get the force push time when if the force push is during draft period\n+        assertEquals(Optional.empty(), testPr.lastForcePushTime());\n+    }\n","filename":"forge\/src\/test\/java\/org\/openjdk\/skara\/forge\/github\/GitHubRestApiTests.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -275,1 +275,4 @@\n-        return Optional.ofNullable(store().lastForcePushTime());\n+        if (store().lastForcePushTime() != null && store().lastForcePushTime().isAfter(store().lastMarkedAsReadyTime())) {\n+            return Optional.ofNullable(store().lastForcePushTime());\n+        }\n+        return Optional.empty();\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestPullRequest.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -50,0 +50,2 @@\n+    private ZonedDateTime lastMarkedAsReadyTime;\n+\n@@ -57,0 +59,3 @@\n+        if (!draft) {\n+            lastMarkedAsReadyTime = ZonedDateTime.now();\n+        }\n@@ -127,0 +132,3 @@\n+        if (!draft) {\n+            lastMarkedAsReadyTime = ZonedDateTime.now();\n+        }\n@@ -132,0 +140,4 @@\n+\n+    public ZonedDateTime lastMarkedAsReadyTime() {\n+        return lastMarkedAsReadyTime;\n+    }\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestPullRequestStore.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"}]}