{"files":[{"patch":"@@ -132,0 +132,7 @@\n+        \/\/ The role name of the configuration should be changed to the official role name.\n+        var formatLimits = new LinkedHashMap<String, Integer>();\n+        formatLimits.put(\"[Lead%s](%s#project-lead)\", updatedLimits.get(\"lead\"));\n+        formatLimits.put(\"[Reviewer%s](%s#reviewer)\", updatedLimits.get(\"reviewers\"));\n+        formatLimits.put(\"[Committer%s](%s#committer)\", updatedLimits.get(\"committers\"));\n+        formatLimits.put(\"[Author%s](%s#author)\", updatedLimits.get(\"authors\"));\n+        formatLimits.put(\"[Contributor%s](%s#contributor)\", updatedLimits.get(\"contributors\"));\n@@ -134,1 +141,1 @@\n-        var totalRequired = updatedLimits.values().stream().mapToInt(Integer::intValue).sum();\n+        var totalRequired = formatLimits.values().stream().mapToInt(Integer::intValue).sum();\n@@ -139,1 +146,1 @@\n-        var nonZeroDescriptions = updatedLimits.entrySet().stream()\n+        var nonZeroDescriptions = formatLimits.entrySet().stream()\n@@ -141,1 +148,1 @@\n-                .map(entry -> entry.getValue() + \" of role \" + entry.getKey())\n+                .map(entry -> entry.getValue() + \" \" + String.format(entry.getKey(), entry.getValue() > 1 ? \"s\" : \"\", \"http:\/\/openjdk.java.net\/bylaws\"))\n@@ -144,1 +151,1 @@\n-            reply.print(\" (with \" + String.join(\", \", nonZeroDescriptions) + \")\");\n+            reply.print(\" (with at least \" + String.join(\", \", nonZeroDescriptions) + \")\");\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/ReviewersCommand.java","additions":11,"deletions":4,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -42,2 +42,4 @@\n-    private static final String reviewersCommandFinallyOutput = \"The total number of required reviews for this PR \" +\n-            \"(including the jcheck configuration and the last \/reviewers command) is now set to \";\n+    private static final String REVIEWERS_COMMENT_TEMPLATE = \"The total number of required reviews for this PR \" +\n+            \"(including the jcheck configuration and the last \/reviewers command) is now set to %d (with at least %s).\";\n+    private static final String ZERO_REVIEWER_COMMENT = \"The total number of required reviews for this PR \" +\n+            \"(including the jcheck configuration and the last \/reviewers command) is now set to 0.\";\n@@ -46,1 +48,1 @@\n-    private static final String ZERO_REVIEW_PROGRESS = \"Change must be properly reviewed (no reviews required)\";\n+    private static final String ZERO_REVIEW_PROGRESS = \"Change must be properly reviewed (no review required)\";\n@@ -81,1 +83,1 @@\n-            assertTrue(reviewerPr.body().contains(String.format(REVIEW_PROGRESS_TEMPLATE, 1, \"\", \"1 reviewer\")));\n+            assertTrue(reviewerPr.body().contains(getReviewersExpectedProgress(0, 1, 0, 0, 0)));\n@@ -89,1 +91,1 @@\n-            assertTrue(reviewerPr.body().contains(String.format(REVIEW_PROGRESS_TEMPLATE, 1, \"\", \"1 reviewer\")));\n+            assertTrue(reviewerPr.body().contains(getReviewersExpectedProgress(0, 1, 0, 0, 0)));\n@@ -95,1 +97,1 @@\n-            assertTrue(reviewerPr.body().contains(String.format(REVIEW_PROGRESS_TEMPLATE, 1, \"\", \"1 reviewer\")));\n+            assertTrue(reviewerPr.body().contains(getReviewersExpectedProgress(0, 1, 0, 0, 0)));\n@@ -101,1 +103,1 @@\n-            assertTrue(reviewerPr.body().contains(String.format(REVIEW_PROGRESS_TEMPLATE, 1, \"\", \"1 reviewer\")));\n+            assertTrue(reviewerPr.body().contains(getReviewersExpectedProgress(0, 1, 0, 0, 0)));\n@@ -107,1 +109,1 @@\n-            assertTrue(reviewerPr.body().contains(String.format(REVIEW_PROGRESS_TEMPLATE, 1, \"\", \"1 reviewer\")));\n+            assertTrue(reviewerPr.body().contains(getReviewersExpectedProgress(0, 1, 0, 0, 0)));\n@@ -114,2 +116,2 @@\n-            assertLastCommentContains(reviewerPr, reviewersCommandFinallyOutput + \"2 (with 1 of role reviewers, 1 of role authors).\");\n-            assertTrue(reviewerPr.body().contains(String.format(REVIEW_PROGRESS_TEMPLATE, 2, \"s\", \"1 reviewer, 1 author\")));\n+            assertLastCommentContains(reviewerPr, getReviewersExpectedComment(0, 1, 0, 1, 0));\n+            assertTrue(reviewerPr.body().contains(getReviewersExpectedProgress(0, 1, 0, 1, 0)));\n@@ -122,2 +124,2 @@\n-            assertLastCommentContains(reviewerPr, reviewersCommandFinallyOutput + \"2 (with 1 of role reviewers, 1 of role committers).\");\n-            assertTrue(reviewerPr.body().contains(String.format(REVIEW_PROGRESS_TEMPLATE, 2, \"s\", \"1 reviewer, 1 committer\")));\n+            assertLastCommentContains(reviewerPr, getReviewersExpectedComment(0, 1, 1, 0, 0));\n+            assertTrue(reviewerPr.body().contains(getReviewersExpectedProgress(0, 1, 1, 0, 0)));\n@@ -130,2 +132,2 @@\n-            assertLastCommentContains(reviewerPr, reviewersCommandFinallyOutput + \"2 (with 2 of role reviewers).\");\n-            assertTrue(reviewerPr.body().contains(String.format(REVIEW_PROGRESS_TEMPLATE, 2, \"s\", \"2 reviewers\")));\n+            assertLastCommentContains(reviewerPr, getReviewersExpectedComment(0, 2, 0, 0, 0));\n+            assertTrue(reviewerPr.body().contains(getReviewersExpectedProgress(0, 2, 0, 0, 0)));\n@@ -141,1 +143,1 @@\n-            assertTrue(updatedPr.body().contains(String.format(REVIEW_PROGRESS_TEMPLATE, 2, \"s\", \"2 reviewers\")));\n+            assertTrue(reviewerPr.body().contains(getReviewersExpectedProgress(0, 2, 0, 0, 0)));\n@@ -151,1 +153,1 @@\n-            assertTrue(updatedPr.body().contains(String.format(REVIEW_PROGRESS_TEMPLATE, 1, \"\", \"1 reviewer\")));\n+            assertTrue(reviewerPr.body().contains(getReviewersExpectedProgress(0, 1, 0, 0, 0)));\n@@ -157,2 +159,2 @@\n-            assertLastCommentContains(reviewerPr, reviewersCommandFinallyOutput + \"1 (with 1 of role lead).\");\n-            assertTrue(reviewerPr.body().contains(String.format(REVIEW_PROGRESS_TEMPLATE, 1, \"\", \"1 lead\")));\n+            assertLastCommentContains(reviewerPr, getReviewersExpectedComment(1, 0, 0, 0, 0));\n+            assertTrue(reviewerPr.body().contains(getReviewersExpectedProgress(1, 0, 0, 0, 0)));\n@@ -168,2 +170,2 @@\n-            assertLastCommentContains(reviewerPr, reviewersCommandFinallyOutput + \"1 (with 1 of role reviewers).\");\n-            assertTrue(reviewerPr.body().contains(String.format(REVIEW_PROGRESS_TEMPLATE, 1, \"\", \"1 reviewer\")));\n+            assertLastCommentContains(reviewerPr, getReviewersExpectedComment(0, 1, 0, 0, 0));\n+            assertTrue(reviewerPr.body().contains(getReviewersExpectedProgress(0, 1, 0, 0, 0)));\n@@ -209,2 +211,2 @@\n-            assertLastCommentContains(reviewerPr, reviewersCommandFinallyOutput + \"2 (with 1 of role reviewers, 1 of role authors).\");\n-            assertTrue(reviewerPr.body().contains(String.format(REVIEW_PROGRESS_TEMPLATE, 2, \"s\", \"1 reviewer, 1 author\")));\n+            assertLastCommentContains(reviewerPr, getReviewersExpectedComment(0, 1, 0, 1, 0));\n+            assertTrue(reviewerPr.body().contains(getReviewersExpectedProgress(0, 1, 0, 1, 0)));\n@@ -221,1 +223,1 @@\n-            assertTrue(reviewerPr.body().contains(String.format(REVIEW_PROGRESS_TEMPLATE, 2, \"s\", \"1 reviewer, 1 author\")));\n+            assertTrue(reviewerPr.body().contains(getReviewersExpectedProgress(0, 1, 0, 1, 0)));\n@@ -226,1 +228,1 @@\n-            assertTrue(reviewerPr.body().contains(String.format(REVIEW_PROGRESS_TEMPLATE, 1, \"\", \"1 reviewer\")));\n+            assertTrue(reviewerPr.body().contains(getReviewersExpectedProgress(0, 1, 0, 0, 0)));\n@@ -232,1 +234,1 @@\n-            assertTrue(reviewerPr.body().contains(String.format(REVIEW_PROGRESS_TEMPLATE, 1, \"\", \"1 reviewer\")));\n+            assertTrue(reviewerPr.body().contains(getReviewersExpectedProgress(0, 1, 0, 0, 0)));\n@@ -267,1 +269,1 @@\n-            assertTrue(reviewerPr.body().contains(String.format(REVIEW_PROGRESS_TEMPLATE, 1, \"\", \"1 reviewer\")));\n+            assertTrue(reviewerPr.body().contains(getReviewersExpectedProgress(0, 1, 0, 0, 0)));\n@@ -273,1 +275,1 @@\n-            assertTrue(reviewerPr.body().contains(String.format(REVIEW_PROGRESS_TEMPLATE, 1, \"\", \"1 reviewer\")));\n+            assertTrue(reviewerPr.body().contains(getReviewersExpectedProgress(0, 1, 0, 0, 0)));\n@@ -280,2 +282,2 @@\n-            assertLastCommentContains(reviewerPr, reviewersCommandFinallyOutput + \"2 (with 1 of role reviewers, 1 of role authors).\");\n-            assertTrue(reviewerPr.body().contains(String.format(REVIEW_PROGRESS_TEMPLATE, 2, \"s\", \"1 reviewer, 1 author\")));\n+            assertLastCommentContains(reviewerPr, getReviewersExpectedComment(0, 1, 0, 1, 0));\n+            assertTrue(reviewerPr.body().contains(getReviewersExpectedProgress(0, 1, 0, 1, 0)));\n@@ -287,1 +289,1 @@\n-            assertTrue(reviewerPr.body().contains(String.format(REVIEW_PROGRESS_TEMPLATE, 2, \"s\", \"1 reviewer, 1 author\")));\n+            assertTrue(reviewerPr.body().contains(getReviewersExpectedProgress(0, 1, 0, 1, 0)));\n@@ -292,1 +294,1 @@\n-            assertTrue(reviewerPr.body().contains(String.format(REVIEW_PROGRESS_TEMPLATE, 1, \"\", \"1 reviewer\")));\n+            assertTrue(reviewerPr.body().contains(getReviewersExpectedProgress(0, 1, 0, 0, 0)));\n@@ -298,1 +300,1 @@\n-            assertTrue(reviewerPr.body().contains(String.format(REVIEW_PROGRESS_TEMPLATE, 1, \"\", \"1 reviewer\")));\n+            assertTrue(reviewerPr.body().contains(getReviewersExpectedProgress(0, 1, 0, 0, 0)));\n@@ -332,2 +334,2 @@\n-            assertLastCommentContains(authorPR, reviewersCommandFinallyOutput + \"2 (with 1 of role reviewers, 1 of role authors).\");\n-            assertTrue(authorPR.body().contains(String.format(REVIEW_PROGRESS_TEMPLATE, 2, \"s\", \"1 reviewer, 1 author\")));\n+            assertLastCommentContains(authorPR, getReviewersExpectedComment(0, 1, 0, 1, 0));\n+            assertTrue(authorPR.body().contains(getReviewersExpectedProgress(0, 1, 0, 1, 0)));\n@@ -369,2 +371,2 @@\n-            assertLastCommentContains(authorPR, reviewersCommandFinallyOutput + \"2 (with 1 of role reviewers, 1 of role authors).\");\n-            assertTrue(authorPR.body().contains(String.format(REVIEW_PROGRESS_TEMPLATE, 2, \"s\", \"1 reviewer, 1 author\")));\n+            assertLastCommentContains(authorPR, getReviewersExpectedComment(0, 1, 0, 1, 0));\n+            assertTrue(authorPR.body().contains(getReviewersExpectedProgress(0, 1, 0, 1, 0)));\n@@ -375,1 +377,1 @@\n-            assertTrue(authorPR.body().contains(String.format(REVIEW_PROGRESS_TEMPLATE, 2, \"s\", \"1 reviewer, 1 author\")));\n+            assertTrue(authorPR.body().contains(getReviewersExpectedProgress(0, 1, 0, 1, 0)));\n@@ -381,2 +383,2 @@\n-            assertLastCommentContains(reviewerPr, reviewersCommandFinallyOutput + \"1 (with 1 of role reviewers).\");\n-            assertTrue(reviewerPr.body().contains(String.format(REVIEW_PROGRESS_TEMPLATE, 1, \"\", \"1 reviewer\")));\n+            assertLastCommentContains(reviewerPr, getReviewersExpectedComment(0, 1, 0, 0, 0));\n+            assertTrue(reviewerPr.body().contains(getReviewersExpectedProgress(0, 1, 0, 0, 0)));\n@@ -412,2 +414,2 @@\n-            assertLastCommentContains(authorPR, reviewersCommandFinallyOutput + \"2 (with 1 of role reviewers, 1 of role authors).\");\n-            assertTrue(authorPR.body().contains(String.format(REVIEW_PROGRESS_TEMPLATE, 2, \"s\", \"1 reviewer, 1 author\")));\n+            assertLastCommentContains(authorPR, getReviewersExpectedComment(0, 1, 0, 1, 0));\n+            assertTrue(authorPR.body().contains(getReviewersExpectedProgress(0, 1, 0, 1, 0)));\n@@ -462,1 +464,0 @@\n-                var totalNum = Math.max(i, 5);\n@@ -465,2 +466,2 @@\n-                        getReviewersExpectedComment(totalNum, 1, 1, 1, 1, contributorNum),\n-                        getReviewersExpectedProgress(totalNum, 1, 1, 1, 1, contributorNum));\n+                        getReviewersExpectedComment(1, 1, 1, 1, contributorNum),\n+                        getReviewersExpectedProgress(1, 1, 1, 1, contributorNum));\n@@ -471,1 +472,0 @@\n-                var totalNum = Math.max(i, 5);\n@@ -475,2 +475,2 @@\n-                        getReviewersExpectedComment(totalNum, 1, 1, 1, authorNum, contributorNum),\n-                        getReviewersExpectedProgress(totalNum, 1, 1, 1, authorNum, contributorNum));\n+                        getReviewersExpectedComment(1, 1, 1, authorNum, contributorNum),\n+                        getReviewersExpectedProgress(1, 1, 1, authorNum, contributorNum));\n@@ -481,1 +481,0 @@\n-                var totalNum = Math.max(i, 5);\n@@ -486,2 +485,2 @@\n-                        getReviewersExpectedComment(totalNum, 1, 1, committerNum, authorNum, contributorNum),\n-                        getReviewersExpectedProgress(totalNum, 1, 1, committerNum, authorNum, contributorNum));\n+                        getReviewersExpectedComment(1, 1, committerNum, authorNum, contributorNum),\n+                        getReviewersExpectedProgress(1, 1, committerNum, authorNum, contributorNum));\n@@ -492,1 +491,0 @@\n-                var totalNum = Math.max(i, 5);\n@@ -498,3 +496,2 @@\n-                        getReviewersExpectedComment(totalNum, 1, reviewerNum, committerNum, authorNum, contributorNum),\n-                        getReviewersExpectedProgress(totalNum, 1, reviewerNum, committerNum, authorNum, contributorNum));\n-\n+                        getReviewersExpectedComment(1, reviewerNum, committerNum, authorNum, contributorNum),\n+                        getReviewersExpectedProgress(1, reviewerNum, committerNum, authorNum, contributorNum));\n@@ -505,2 +502,2 @@\n-                    getReviewersExpectedComment(5, 1, 1, 1, 1, 1),\n-                    getReviewersExpectedProgress(5, 1, 1, 1, 1, 1));\n+                    getReviewersExpectedComment(1, 1, 1, 1, 1),\n+                    getReviewersExpectedProgress(1, 1, 1, 1, 1));\n@@ -517,24 +514,2 @@\n-    private String getReviewersExpectedComment(int totalNum, int leadNum, int reviewerNum, int committerNum, int authorNum, int contributorNum) {\n-        StringBuilder builder = new StringBuilder();\n-        builder.append(reviewersCommandFinallyOutput);\n-        builder.append(totalNum);\n-        if (leadNum == 0 && reviewerNum == 0 && committerNum == 0 && authorNum == 0 && contributorNum == 0) {\n-            builder.append(\".\");\n-            return builder.toString();\n-        }\n-        builder.append(\" (with\");\n-        var list = new ArrayList<String>();\n-        var map = new LinkedHashMap<String, Integer>();\n-        map.put(\"lead\", leadNum);\n-        map.put(\"reviewers\", reviewerNum);\n-        map.put(\"committers\", committerNum);\n-        map.put(\"authors\", authorNum);\n-        map.put(\"contributors\", contributorNum);\n-        for (var entry : map.entrySet()) {\n-            if (entry.getValue() > 0) {\n-                list.add(\" \" + entry.getValue() + \" of role \" + entry.getKey());\n-            }\n-        }\n-        builder.append(String.join(\",\", list));\n-        builder.append(\").\");\n-        return builder.toString();\n+    private String getReviewersExpectedComment(int leadNum, int reviewerNum, int committerNum, int authorNum, int contributorNum) {\n+        return constructFromTemplate(REVIEWERS_COMMENT_TEMPLATE, ZERO_REVIEWER_COMMENT, leadNum, reviewerNum, committerNum, authorNum, contributorNum);\n@@ -543,1 +518,9 @@\n-    private String getReviewersExpectedProgress(int totalNum, int leadNum, int reviewerNum, int committerNum, int authorNum, int contributorNum) {\n+    private String getReviewersExpectedProgress(int leadNum, int reviewerNum, int committerNum, int authorNum, int contributorNum) {\n+        return constructFromTemplate(REVIEW_PROGRESS_TEMPLATE, ZERO_REVIEW_PROGRESS, leadNum, reviewerNum, committerNum, authorNum, contributorNum);\n+    }\n+\n+    private String constructFromTemplate(String template, String zeroTemplate, int leadNum, int reviewerNum, int committerNum, int authorNum, int contributorNum) {\n+        var totalNum = leadNum + reviewerNum + committerNum + authorNum + contributorNum;\n+        if (totalNum == 0) {\n+            return zeroTemplate;\n+        }\n@@ -546,5 +529,5 @@\n-        reviewRequirementMap.put(\"lead\", leadNum);\n-        reviewRequirementMap.put(\"reviewer\", reviewerNum);\n-        reviewRequirementMap.put(\"committer\", committerNum);\n-        reviewRequirementMap.put(\"author\", authorNum);\n-        reviewRequirementMap.put(\"contributor\", contributorNum);\n+        reviewRequirementMap.put(\"[Lead%s](%s#project-lead)\", leadNum);\n+        reviewRequirementMap.put(\"[Reviewer%s](%s#reviewer)\", reviewerNum);\n+        reviewRequirementMap.put(\"[Committer%s](%s#committer)\", committerNum);\n+        reviewRequirementMap.put(\"[Author%s](%s#author)\", authorNum);\n+        reviewRequirementMap.put(\"[Contributor%s](%s#contributor)\", contributorNum);\n@@ -554,1 +537,1 @@\n-                requireList.add(requirementNum+ \" \" + reviewRequirement.getKey() + (requirementNum > 1 ? \"s\" : \"\"));\n+                requireList.add(requirementNum + \" \" + String.format(reviewRequirement.getKey(), requirementNum > 1 ? \"s\" : \"\", \"http:\/\/openjdk.java.net\/bylaws\"));\n@@ -557,2 +540,2 @@\n-        if (totalNum == 0) {\n-            return ZERO_REVIEW_PROGRESS;\n+        if (template.equals(REVIEW_PROGRESS_TEMPLATE)) {\n+            return String.format(template, totalNum, totalNum > 1 ? \"s\" : \"\", String.join(\", \", requireList));\n@@ -560,1 +543,1 @@\n-            return String.format(REVIEW_PROGRESS_TEMPLATE, totalNum, totalNum > 1 ? \"s\" : \"\", String.join(\", \", requireList));\n+            return String.format(template, totalNum, String.join(\", \", requireList));\n@@ -607,1 +590,1 @@\n-            assertTrue(authorPR.body().contains(ZERO_REVIEW_PROGRESS));\n+            assertTrue(reviewerPr.body().contains(getReviewersExpectedProgress(0, 0, 0, 0, 0)));\n@@ -611,1 +594,1 @@\n-            assertTrue(authorPR.body().contains(String.format(REVIEW_PROGRESS_TEMPLATE, 2, \"s\", \"2 reviewers\")));\n+            assertTrue(reviewerPr.body().contains(getReviewersExpectedProgress(0, 2, 0, 0, 0)));\n@@ -615,1 +598,1 @@\n-            assertTrue(reviewerPr.body().contains(ZERO_REVIEW_PROGRESS));\n+            assertTrue(reviewerPr.body().contains(getReviewersExpectedProgress(0, 0, 0, 0, 0)));\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/ReviewersTests.java","additions":76,"deletions":93,"binary":false,"changes":169,"status":"modified"},{"patch":"@@ -88,5 +88,5 @@\n-        reviewRequirementMap.put(\"lead\", lead);\n-        reviewRequirementMap.put(\"reviewer\", reviewers);\n-        reviewRequirementMap.put(\"committer\", committers);\n-        reviewRequirementMap.put(\"author\", authors);\n-        reviewRequirementMap.put(\"contributor\", contributors);\n+        reviewRequirementMap.put(\"[Lead%s](%s#project-lead)\", lead);\n+        reviewRequirementMap.put(\"[Reviewer%s](%s#reviewer)\", reviewers);\n+        reviewRequirementMap.put(\"[Committer%s](%s#committer)\", committers);\n+        reviewRequirementMap.put(\"[Author%s](%s#author)\", authors);\n+        reviewRequirementMap.put(\"[Contributor%s](%s#contributor)\", contributors);\n@@ -97,1 +97,1 @@\n-                requireList.add(requirementNum + \" \" + reviewRequirement.getKey() + (requirementNum > 1 ? \"s\" : \"\"));\n+                requireList.add(requirementNum + \" \" + String.format(reviewRequirement.getKey(), requirementNum > 1 ? \"s\" : \"\", \"http:\/\/openjdk.java.net\/bylaws\"));\n@@ -101,1 +101,1 @@\n-            reviewRequirements = \"no reviews required\";\n+            reviewRequirements = \"no review required\";\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/ReviewersConfiguration.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import java.util.LinkedHashMap;\n@@ -563,2 +564,0 @@\n-        \/\/ no review required.\n-        var noReview = \"no reviews required\";\n@@ -567,5 +566,1 @@\n-        assertEquals(noReview, JCheckConfiguration.parse(conf).checks().reviewers().getReviewRequirements());\n-\n-        \/\/ review required template.\n-        var hasReview = \"%d review required, with at least %s\";\n-        var hasReviews = \"%d reviews required, with at least %s\";\n+        assertEquals(constructReviewRequirement(0, 0, 0, 0, 0), JCheckConfiguration.parse(conf).checks().reviewers().getReviewRequirements());\n@@ -576,1 +571,1 @@\n-        assertEquals(String.format(hasReview, 1, \"1 reviewer\"),\n+        assertEquals(constructReviewRequirement(0, 1, 0, 0, 0),\n@@ -581,1 +576,1 @@\n-        assertEquals(String.format(hasReview, 1, \"1 committer\"),\n+        assertEquals(constructReviewRequirement(0, 0, 1, 0, 0),\n@@ -588,1 +583,1 @@\n-        assertEquals(String.format(hasReviews, 2, \"1 reviewer, 1 committer\"),\n+        assertEquals(constructReviewRequirement(0, 1, 1, 0, 0),\n@@ -593,1 +588,1 @@\n-        assertEquals(String.format(hasReviews, 2, \"2 reviewers\"),\n+        assertEquals(constructReviewRequirement(0, 2, 0, 0, 0),\n@@ -601,1 +596,1 @@\n-        assertEquals(String.format(hasReviews, 3, \"1 reviewer, 1 committer, 1 author\"),\n+        assertEquals(constructReviewRequirement(0, 1, 1, 1, 0),\n@@ -607,1 +602,1 @@\n-        assertEquals(String.format(hasReviews, 3, \"1 reviewer, 2 committers\"),\n+        assertEquals(constructReviewRequirement(0, 1, 2, 0, 0),\n@@ -612,1 +607,1 @@\n-        assertEquals(String.format(hasReviews, 3, \"3 committers\"),\n+        assertEquals(constructReviewRequirement(0, 0, 3, 0, 0),\n@@ -621,1 +616,1 @@\n-        assertEquals(String.format(hasReviews, 4, \"1 reviewer, 1 committer, 1 author, 1 contributor\"),\n+        assertEquals(constructReviewRequirement(0, 1, 1, 1, 1),\n@@ -628,1 +623,1 @@\n-        assertEquals(String.format(hasReviews, 4, \"1 reviewer, 1 committer, 2 authors\"),\n+        assertEquals(constructReviewRequirement(0, 1, 1, 2, 0),\n@@ -634,1 +629,1 @@\n-        assertEquals(String.format(hasReviews, 4, \"1 reviewer, 3 authors\"),\n+        assertEquals(constructReviewRequirement(0, 1, 0, 3, 0),\n@@ -639,1 +634,1 @@\n-        assertEquals(String.format(hasReviews, 4, \"4 authors\"),\n+        assertEquals(constructReviewRequirement(0, 0, 0, 4, 0),\n@@ -649,1 +644,1 @@\n-        assertEquals(String.format(hasReviews, 5, \"1 lead, 1 reviewer, 1 committer, 1 author, 1 contributor\"),\n+        assertEquals(constructReviewRequirement(1, 1, 1, 1, 1),\n@@ -657,1 +652,1 @@\n-        assertEquals(String.format(hasReviews, 5, \"1 reviewer, 1 committer, 1 author, 2 contributors\"),\n+        assertEquals(constructReviewRequirement(0, 1, 1, 1, 2),\n@@ -664,1 +659,1 @@\n-        assertEquals(String.format(hasReviews, 5, \"1 reviewer, 1 committer, 3 contributors\"),\n+        assertEquals(constructReviewRequirement(0, 1, 1, 0, 3),\n@@ -670,1 +665,1 @@\n-        assertEquals(String.format(hasReviews, 5, \"1 reviewer, 4 contributors\"),\n+        assertEquals(constructReviewRequirement(0, 1, 0, 0, 4),\n@@ -675,1 +670,1 @@\n-        assertEquals(String.format(hasReviews, 5, \"5 contributors\"),\n+        assertEquals(constructReviewRequirement(0, 0, 0, 0, 5),\n@@ -678,0 +673,26 @@\n+\n+    private String constructReviewRequirement(int leadNum, int reviewerNum, int committerNum, int authorNum, int contributorNum) {\n+        \/\/ no review required.\n+        var noReview = \"no review required\";\n+        \/\/ review required template.\n+        var hasReview = \"%d review%s required, with at least %s\";\n+        var totalNum = leadNum + reviewerNum + committerNum + authorNum + contributorNum;\n+        if (totalNum == 0) {\n+            return noReview;\n+        }\n+        var requireList = new ArrayList<String>();\n+        var reviewRequirementMap = new LinkedHashMap<String, Integer>();\n+        reviewRequirementMap.put(\"[Lead%s](%s#project-lead)\", leadNum);\n+        reviewRequirementMap.put(\"[Reviewer%s](%s#reviewer)\", reviewerNum);\n+        reviewRequirementMap.put(\"[Committer%s](%s#committer)\", committerNum);\n+        reviewRequirementMap.put(\"[Author%s](%s#author)\", authorNum);\n+        reviewRequirementMap.put(\"[Contributor%s](%s#contributor)\", contributorNum);\n+        for (var reviewRequirement : reviewRequirementMap.entrySet()) {\n+            var requirementNum = reviewRequirement.getValue();\n+            if (requirementNum > 0) {\n+                requireList.add(requirementNum+ \" \" + String.format(reviewRequirement.getKey(), requirementNum > 1 ? \"s\" : \"\", \"http:\/\/openjdk.java.net\/bylaws\"));\n+            }\n+        }\n+        return String.format(hasReview, totalNum, totalNum > 1 ? \"s\" : \"\", String.join(\", \", requireList));\n+    }\n+\n","filename":"jcheck\/src\/test\/java\/org\/openjdk\/skara\/jcheck\/ReviewersCheckTests.java","additions":44,"deletions":23,"binary":false,"changes":67,"status":"modified"}]}