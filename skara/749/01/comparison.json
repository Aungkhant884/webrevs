{"files":[{"patch":"@@ -216,1 +216,2 @@\n-            return List.of();\n+            \/\/ When all commands are processed, it's time to check labels\n+            return List.of(new LabelerWorkItem(bot, pr, errorHandler));\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CommandWorkItem.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -52,9 +52,0 @@\n-    private Set<String> automaticLabels(PullRequestBot bot, PullRequest pr, Path scratchPath) throws IOException {\n-        var path = scratchPath.resolve(\"pr\").resolve(\"labelcommand\").resolve(pr.repository().name());\n-        var seedPath = bot.seedStorage().orElse(scratchPath.resolve(\"seeds\"));\n-        var hostedRepositoryPool = new HostedRepositoryPool(seedPath);\n-        var localRepo = PullRequestUtils.materialize(hostedRepositoryPool, pr, path);\n-        var files = PullRequestUtils.changedFiles(pr, localRepo);\n-        return bot.labelConfiguration().fromChanges(files);\n-    }\n-\n@@ -91,0 +82,1 @@\n+                    reply.println(LabelTracker.addLabelMarker(label));\n@@ -97,13 +89,7 @@\n-            try {\n-                var automaticLabels = automaticLabels(bot, pr, scratchPath);\n-                for (var label : labels) {\n-                    if (currentLabels.contains(label)) {\n-                        if (automaticLabels.contains(label)) {\n-                            reply.println(\"The `\" + label + \"` label was automatically added and cannot be removed.\");\n-                        } else {\n-                            pr.removeLabel(label);\n-                            reply.println(\"The `\" + label + \"` label was successfully removed.\");\n-                        }\n-                    } else {\n-                        reply.println(\"The `\" + label + \"` label was not set.\");\n-                    }\n+            for (var label : labels) {\n+                if (currentLabels.contains(label)) {\n+                    pr.removeLabel(label);\n+                    reply.println(LabelTracker.removeLabelMarker(label));\n+                    reply.println(\"The `\" + label + \"` label was successfully removed.\");\n+                } else {\n+                    reply.println(\"The `\" + label + \"` label was not set.\");\n@@ -111,2 +97,0 @@\n-            } catch (IOException e) {\n-                reply.println(\"An error occurred when trying to check automatically added labels\");\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/LabelCommand.java","additions":8,"deletions":24,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -90,1 +90,2 @@\n-        \/\/ If the current labels matches at least two members of a group, the group is also included\n+        var ret = new HashSet<>(labels);\n+        \/\/ If the current labels matches at least two members of a group, use the group instead\n@@ -94,1 +95,1 @@\n-                if (labels.contains(groupEntry)) {\n+                if (ret.contains(groupEntry)) {\n@@ -97,1 +98,2 @@\n-                        labels.add(group.getKey());\n+                        ret.add(group.getKey());\n+                        ret.removeAll(group.getValue());\n@@ -103,2 +105,1 @@\n-\n-        return labels;\n+        return ret;\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/LabelConfiguration.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,88 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bots.pr;\n+\n+import org.openjdk.skara.host.HostUser;\n+import org.openjdk.skara.issuetracker.Comment;\n+\n+import java.util.*;\n+import java.util.regex.*;\n+import java.util.stream.Collectors;\n+\n+public class LabelTracker {\n+    private final static String addMarker = \"<!-- added label: '%s' -->\";\n+    private final static String removeMarker = \"<!-- removed label: '%s' -->\";\n+    private final static Pattern labelMarkerPattern = Pattern.compile(\"<!-- (added|removed) label: '(.*?)' -->\");\n+\n+    static String addLabelMarker(String label) {\n+        return String.format(addMarker, label);\n+    }\n+\n+    static String removeLabelMarker(String label) {\n+        return String.format(removeMarker, label);\n+    }\n+\n+    \/\/ Return all manually added labels, but filter any explicitly removed ones\n+    static Set<String> currentAdded(HostUser botUser, List<Comment> comments) {\n+        var labelActions = comments.stream()\n+                .filter(comment -> comment.author().equals(botUser))\n+                .flatMap(comment -> comment.body().lines())\n+                .map(labelMarkerPattern::matcher)\n+                .filter(Matcher::find)\n+                .collect(Collectors.toList());\n+\n+        var ret = new HashSet<String>();\n+        for (var actionMatch : labelActions) {\n+            var action = actionMatch.group(1);\n+            if (action.equals(\"added\")) {\n+                ret.add(actionMatch.group(2));\n+            } else {\n+                ret.remove(actionMatch.group(2));\n+            }\n+        }\n+\n+        return Collections.unmodifiableSet(ret);\n+    }\n+\n+    \/\/ Return all manually removed labels, but filter any explicitly added ones\n+    static Set<String> currentRemoved(HostUser botUser, List<Comment> comments) {\n+        var labelActions = comments.stream()\n+                                   .filter(comment -> comment.author().equals(botUser))\n+                                   .flatMap(comment -> comment.body().lines())\n+                                   .map(labelMarkerPattern::matcher)\n+                                   .filter(Matcher::find)\n+                                   .collect(Collectors.toList());\n+\n+        var ret = new HashSet<String>();\n+        for (var actionMatch : labelActions) {\n+            var action = actionMatch.group(1);\n+            if (action.equals(\"removed\")) {\n+                ret.add(actionMatch.group(2));\n+            } else {\n+                ret.remove(actionMatch.group(2));\n+            }\n+        }\n+\n+        return Collections.unmodifiableSet(ret);\n+    }\n+}\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/LabelTracker.java","additions":88,"deletions":0,"binary":false,"changes":88,"status":"added"},{"patch":"@@ -65,1 +65,11 @@\n-            \/\/ Add all labels not already set\n+            var comments = pr.comments();\n+            var manuallyAdded = LabelTracker.currentAdded(pr.repository().forge().currentUser(), comments);\n+            var manuallyRemoved = LabelTracker.currentRemoved(pr.repository().forge().currentUser(), comments);\n+\n+            \/\/ If a manual label command has been issued before we have done any labeling,\n+            \/\/ that is considered to be a request to override any automatic labelling\n+            if (bot.currentLabels().isEmpty() && !(manuallyAdded.isEmpty() && manuallyRemoved.isEmpty())) {\n+                return List.of();\n+            }\n+\n+            \/\/ Add all labels not already set that are not manually removed\n@@ -68,0 +78,1 @@\n+                     .filter(label -> !manuallyRemoved.contains(label))\n@@ -70,1 +81,1 @@\n-            \/\/ Remove set labels no longer present\n+            \/\/ Remove set labels no longer present unless it has been manually added\n@@ -73,0 +84,1 @@\n+                         .filter(label -> !manuallyAdded.contains(label))\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/LabelerWorkItem.java","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -122,1 +122,0 @@\n-                ret.add(new LabelerWorkItem(this, pr, e -> updateCache.invalidate(pr)));\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBot.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-        assertEquals(Set.of(\"1\", \"2\", \"both\"), config.fromChanges(Set.of(Path.of(\"a.cpp\"), Path.of(\"a.hpp\"))));\n+        assertEquals(Set.of(\"both\"), config.fromChanges(Set.of(Path.of(\"a.cpp\"), Path.of(\"a.hpp\"))));\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/LabelConfigurationTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -128,1 +128,1 @@\n-    void removeAutoApplied(TestInfo testInfo) throws IOException {\n+    void adjustAutoApplied(TestInfo testInfo) throws IOException {\n@@ -168,1 +168,1 @@\n-            assertLastCommentContains(pr, \"The `2` label was automatically added and cannot be removed.\");\n+            assertLastCommentContains(pr, \"The `2` label was successfully removed.\");\n@@ -176,1 +176,1 @@\n-            \/\/ The bot should have applied more labels automatically\n+            \/\/ The bot should have applied more labels automatically (but not the manually removed)\n@@ -178,1 +178,7 @@\n-            assertEquals(Set.of(\"1\", \"2\", \"group\", \"rfr\"), new HashSet<>(pr.labels()));\n+            assertEquals(Set.of(\"group\", \"rfr\"), new HashSet<>(pr.labels()));\n+\n+            \/\/ Remove one of these as well\n+            pr.addComment(\"\/label remove group\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertLastCommentContains(pr, \"The `group` label was successfully removed.\");\n+            assertEquals(Set.of(\"rfr\"), new HashSet<>(pr.labels()));\n@@ -180,2 +186,2 @@\n-            \/\/ It will refuse to remove these as well\n-            pr.addComment(\"\/label remove group, 1\");\n+            \/\/ Adding them back again is fine\n+            pr.addComment(\"\/label add group 1\");\n@@ -183,2 +189,61 @@\n-            assertLastCommentContains(pr, \"The `1` label was automatically added and cannot be removed.\");\n-            assertLastCommentContains(pr, \"The `group` label was automatically added and cannot be removed.\");\n+            assertLastCommentContains(pr, \"The `group` label was successfully added.\");\n+            assertLastCommentContains(pr, \"The `1` label was successfully added.\");\n+            assertEquals(Set.of(\"1\", \"group\", \"rfr\"), new HashSet<>(pr.labels()));\n+        }\n+    }\n+\n+    @Test\n+    void overrideAutoApplied(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var integrator = credentials.getHostedRepository();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                                           .addReviewer(integrator.forge().currentUser().id())\n+                                           .addCommitter(author.forge().currentUser().id());\n+            var labelConfiguration = LabelConfiguration.newBuilder()\n+                                                       .addMatchers(\"1\", List.of(Pattern.compile(\"cpp$\")))\n+                                                       .addMatchers(\"2\", List.of(Pattern.compile(\"hpp$\")))\n+                                                       .addGroup(\"group\", List.of(\"1\", \"2\"))\n+                                                       .addExtra(\"extra\")\n+                                                       .build();\n+            var prBot = PullRequestBot.newBuilder()\n+                                      .repo(integrator)\n+                                      .censusRepo(censusBuilder.build())\n+                                      .labelConfiguration(labelConfiguration)\n+                                      .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType(), Path.of(\"test.hpp\"));\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"123: This is a pull request\");\n+            pr.setBody(\"\/cc 1\");\n+\n+            \/\/ The bot will not add any label automatically\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertEquals(Set.of(\"1\", \"rfr\"), new HashSet<>(pr.labels()));\n+\n+            \/\/ Add another file to trigger a group match\n+            Files.writeString(localRepoFolder.resolve(\"test.cpp\"), \"Hello there\");\n+            localRepo.add(Path.of(\"test.cpp\"));\n+            editHash = localRepo.commit(\"Another one\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(editHash, author.url(), \"edit\");\n+\n+            \/\/ The bot will still not do any automatic labelling\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertEquals(Set.of(\"1\", \"rfr\"), new HashSet<>(pr.labels()));\n+\n+            \/\/ Adding manually is still fine\n+            pr.addComment(\"\/label add group 2\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertLastCommentContains(pr, \"The `group` label was successfully added.\");\n+            assertLastCommentContains(pr, \"The `2` label was successfully added.\");\n+            assertEquals(Set.of(\"1\", \"2\", \"group\", \"rfr\"), new HashSet<>(pr.labels()));\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/LabelTests.java","additions":73,"deletions":8,"binary":false,"changes":81,"status":"modified"}]}