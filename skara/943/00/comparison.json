{"files":[{"patch":"@@ -590,0 +590,6 @@\n+                            if (iss.get().state() != org.openjdk.skara.issuetracker.Issue.State.OPEN) {\n+                                if (!pr.labels().contains(\"backport\")) {\n+                                    progressBody.append(\" ⚠️ Issue is not open.\");\n+                                }\n+                                continue;\n+                            }\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -142,4 +142,0 @@\n-                if (validatedIssue.get().state() != org.openjdk.skara.issuetracker.Issue.State.OPEN) {\n-                    reply.println(\"The issue [\" + validatedIssue.get().id() + \"](\" + validatedIssue.get().webUrl() + \") isn't open - make sure you have selected the correct issue.\");\n-                    continue;\n-                }\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/IssueCommand.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -388,0 +388,71 @@\n+    @Test\n+    void closedIssue(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var integrator = credentials.getHostedRepository();\n+            var issues = credentials.getIssueProject();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                                           .addAuthor(author.forge().currentUser().id());\n+            var prBot = PullRequestBot.newBuilder().repo(integrator).censusRepo(censusBuilder.build()).issueProject(issues).build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"edit\", true);\n+            var issue1 = issues.createIssue(\"First\", List.of(\"Hello\"), Map.of());\n+            issue1.setState(Issue.State.RESOLVED);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\",\n+                                                   issue1.id() + \": This is a pull request\");\n+\n+            \/\/ First check\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertTrue(pr.body().contains(issue1.id()));\n+            assertTrue(pr.body().contains(\"First\"));\n+            assertTrue(pr.body().contains(\"## Issue\\n\"));\n+            assertTrue(pr.body().contains(\"Issue is not open\"));\n+        }\n+    }\n+\n+    @Test\n+    void closedIssueBackport(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var integrator = credentials.getHostedRepository();\n+            var issues = credentials.getIssueProject();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                                           .addAuthor(author.forge().currentUser().id());\n+            var prBot = PullRequestBot.newBuilder().repo(integrator).censusRepo(censusBuilder.build()).issueProject(issues).build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"edit\", true);\n+            var issue1 = issues.createIssue(\"First\", List.of(\"Hello\"), Map.of());\n+            issue1.setState(Issue.State.RESOLVED);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\",\n+                                                   issue1.id() + \": This is a pull request\");\n+            pr.addLabel(\"backport\");\n+\n+            \/\/ First check\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertTrue(pr.body().contains(issue1.id()));\n+            assertTrue(pr.body().contains(\"First\"));\n+            assertTrue(pr.body().contains(\"## Issue\\n\"));\n+            assertFalse(pr.body().contains(\"Issue is not open\"));\n+        }\n+    }\n+\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/IssueTests.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"modified"}]}