{"files":[{"patch":"@@ -37,1 +37,11 @@\n-    private final Logger log = Logger.getLogger(\"org.openjdk.skara.vcs.openjdk.convert\");\n+    private final static Logger log = Logger.getLogger(\"org.openjdk.skara.vcs.openjdk.convert\");\n+    private final Branch branch;\n+    private final List<Mark> marks = new ArrayList<Mark>();\n+\n+    public GitToHgConverter() {\n+        this(new Branch(\"master\"));\n+    }\n+\n+    public GitToHgConverter(Branch branch) {\n+        this.branch = branch;\n+    }\n@@ -108,4 +118,0 @@\n-    private void applyPatches(ReadOnlyRepository gitRepo, Path gitRoot, Repository hgRepo, Path hgRoot, List<Patch> patches, Hash to) throws IOException {\n-        apply(gitRepo, gitRoot, hgRepo, hgRoot, patches.stream().map(StatusEntry::new).collect(Collectors.toList()), to);\n-    }\n-\n@@ -157,9 +163,11 @@\n-    private boolean changesHgTags(Commit c) {\n-        for (var diff : c.parentDiffs()) {\n-            for (var patch : diff.patches()) {\n-                var status = patch.status();\n-                if ((status.isModified() || status.isAdded()) &&\n-                    patch.target().path().orElseThrow().toString().equals(\".hgtags\")) {\n-                    return true;\n-                }\n-            }\n+    private boolean changesHgTags(List<StatusEntry> status) {\n+        var hgtags = Optional.of(Path.of(\".hgtags\"));\n+        return status.stream()\n+                     .filter(e -> e.status().isModified() || e.status().isAdded())\n+                     .anyMatch(e -> e.target().path().equals(hgtags));\n+    }\n+\n+    private Hash hgHashFor(Map<Hash, Hash> gitToHg, Hash gitHash) {\n+        var hgHash = gitToHg.get(gitHash);\n+        if (hgHash == null) {\n+            throw new IllegalArgumentException(\"No known hg hash for git hash: \" + gitHash.hex());\n@@ -167,0 +175,2 @@\n+        return hgHash;\n+    }\n@@ -168,1 +178,30 @@\n-        return false;\n+    private void convertTags(Repository hgRepo, ReadOnlyRepository gitRepo, Map<Hash, Hash> gitToHg) throws IOException {\n+        var gitTags = new TreeSet<String>();\n+        for (var tag : gitRepo.tags()) {\n+            gitTags.add(tag.name());\n+        }\n+        var hgTags = new TreeSet<String>();\n+        for (var tag : hgRepo.tags()) {\n+            hgTags.add(tag.name());\n+        }\n+        var missing = new TreeSet<String>(gitTags);\n+        missing.removeAll(hgTags);\n+        for (var name : missing) {\n+            var gitHash = gitRepo.resolve(name).orElseThrow(() ->\n+                    new IOException(\"Cannot resolve known tag \" + name)\n+            );\n+            var hgHash = gitToHg.get(gitHash);\n+            var annotated = gitRepo.annotate(new Tag(name));\n+            if (annotated.isPresent()) {\n+                var msg = annotated.get().message();\n+                var user = username(annotated.get().author());\n+                var date = annotated.get().date();\n+                hgRepo.tag(hgHash, name, msg, user, null, date);\n+            } else {\n+                hgRepo.tag(hgHash, name, \"Added tag \" + name + \" for \" + hgHash.abbreviate(), \"duke\", null, null);\n+            }\n+            var hgTagCommitHash = hgRepo.head();\n+            var last = marks.get(marks.size() - 1);\n+            var newMark = new Mark(last.key(), last.hg(), last.git(), hgTagCommitHash);\n+            marks.set(marks.size() - 1, newMark);\n+        }\n@@ -171,5 +210,4 @@\n-    private List<Hash> convert(Commits commits,\n-                               Repository hgRepo,\n-                               ReadOnlyRepository gitRepo,\n-                               Map<Hash, Hash> gitToHg,\n-                               Map<Hash, Hash> hgToGit) throws IOException {\n+    private void convert(List<CommitMetadata> commits,\n+                         Repository hgRepo,\n+                         ReadOnlyRepository gitRepo,\n+                         Map<Hash, Hash> gitToHg) throws IOException {\n@@ -178,1 +216,1 @@\n-        var hgHashes = new ArrayList<Hash>();\n+\n@@ -180,1 +218,1 @@\n-            log.fine(\"Converting: \" + commit.hash().hex());\n+            log.fine(\"Converting Git hash: \" + commit.hash().hex());\n@@ -182,2 +220,2 @@\n-            var hgParent0 = gitToHg.get(parents.get(0));\n-            var patches0 = commit.parentDiffs().get(0).patches();\n+            var gitParent0 = parents.get(0);\n+            var status0 = gitRepo.status(gitParent0, commit.hash());\n@@ -186,1 +224,1 @@\n-                applyPatches(gitRepo, gitRoot, hgRepo, hgRoot, patches0, commit.hash());\n+                apply(gitRepo, gitRoot, hgRepo, hgRoot, status0, commit.hash());\n@@ -188,0 +226,2 @@\n+                var hgParent0 = hgHashFor(gitToHg, gitParent0);\n+                log.fine(\"Parent 0:\" + hgParent0.hex());\n@@ -189,1 +229,1 @@\n-                applyPatches(gitRepo, gitRoot, hgRepo, hgRoot, patches0, commit.hash());\n+                apply(gitRepo, gitRoot, hgRepo, hgRoot, status0, commit.hash());\n@@ -191,0 +231,2 @@\n+                var hgParent0 = hgHashFor(gitToHg, gitParent0);\n+                log.fine(\"Parent 0:\" + hgParent0.hex());\n@@ -193,2 +235,3 @@\n-                var hgParent1 = gitToHg.get(parents.get(1));\n-                hgRepo.merge(hgParent1, \":local\");\n+                var hgParent1 = hgHashFor(gitToHg, parents.get(1));\n+                log.fine(\"Parent 1:\" + hgParent1.hex());\n+                hgRepo.merge(hgParent1, \":local\", Repository.FastForward.DISABLE);\n@@ -196,0 +239,1 @@\n+                hgRepo.deleteUntrackedFiles();\n@@ -197,2 +241,1 @@\n-                var changes = gitRepo.status(parents.get(0), commit.hash());\n-                apply(gitRepo, gitRoot, hgRepo, hgRoot, changes, commit.hash());\n+                apply(gitRepo, gitRoot, hgRepo, hgRoot, status0, commit.hash());\n@@ -200,1 +243,1 @@\n-                throw new IllegalStateException(\"More than two parents is not supported\");\n+                throw new IllegalStateException(\"Merging more than two parents is not supported in Mercurial\");\n@@ -203,1 +246,1 @@\n-            if (changesHgTags(commit)) {\n+            if (changesHgTags(status0)) {\n@@ -219,0 +262,2 @@\n+            var date = commit.authored();\n+            log.finer(\"Date: \" + date);\n@@ -221,1 +266,1 @@\n-            if (parents.size() == 1 && patches0.isEmpty()) {\n+            if (parents.size() == 1 && status0.isEmpty()) {\n@@ -224,1 +269,1 @@\n-                hgRepo.commit(hgMessage, hgAuthor, null, commit.authored());\n+                hgRepo.commit(hgMessage, hgAuthor, null, date);\n@@ -228,4 +273,1 @@\n-                hgHash = hgRepo.commit(hgMessage,\n-                                       hgAuthor,\n-                                       null,\n-                                       commit.authored());\n+                hgHash = hgRepo.commit(hgMessage, hgAuthor, null, date);\n@@ -234,0 +276,2 @@\n+\n+            marks.add(new Mark(marks.size() + 1, hgHash, commit.hash()));\n@@ -235,2 +279,0 @@\n-            hgToGit.put(hgHash, commit.hash());\n-            hgHashes.add(hgHash);\n@@ -239,5 +281,1 @@\n-        return hgHashes;\n-    }\n-\n-    private List<Mark> createMarks(List<Hash> hgHashes, Map<Hash, Hash> gitToHg, Map<Hash, Hash> hgToGit) {\n-        return createMarks(List.of(), hgHashes, gitToHg, hgToGit);\n+        convertTags(hgRepo, gitRepo, gitToHg);\n@@ -246,11 +284,1 @@\n-    private List<Mark> createMarks(List<Mark> old, List<Hash> hgHashes, Map<Hash, Hash> gitToHg, Map<Hash, Hash> hgToGit) {\n-        var marks = new ArrayList<Mark>(old);\n-        for (var i = 0; i < hgHashes.size(); i++) {\n-            var hgHash = hgHashes.get(i);\n-            var gitHash = hgToGit.get(hgHash);\n-            if (gitHash == null) {\n-                throw new IllegalStateException(\"No git hash for hg hash \" + hgHash.hex());\n-            }\n-            var key = old.size() + i + 1;\n-            marks.add(new Mark(key, hgHash, hgToGit.get(hgHash)));\n-        }\n+    public List<Mark> marks() {\n@@ -261,0 +289,4 @@\n+        return convert(gitRepo, hgRepo, List.of());\n+    }\n+\n+    public List<Mark> convert(ReadOnlyRepository gitRepo, Repository hgRepo, List<Mark> oldMarks) throws IOException {\n@@ -262,4 +294,7 @@\n-        var hgToGit = new HashMap<Hash, Hash>();\n-        try (var commits = gitRepo.commits(true)) {\n-            var hgHashes = convert(commits, hgRepo, gitRepo, gitToHg, hgToGit);\n-            return createMarks(hgHashes, gitToHg, hgToGit);\n+        for (var mark : oldMarks) {\n+            if (mark.tag().isPresent()) {\n+                gitToHg.put(mark.git(), mark.tag().get());\n+            } else {\n+                gitToHg.put(mark.git(), mark.hg());\n+            }\n+            marks.add(mark);\n@@ -267,0 +302,9 @@\n+        var gitCommits = gitRepo.commitMetadata(branch.name(), true);\n+        var converted = oldMarks.stream()\n+                                .map(Mark::git)\n+                                .collect(Collectors.toSet());\n+        var notConverted = gitCommits.stream()\n+                                     .filter(c -> !converted.contains(c.hash()))\n+                                     .collect(Collectors.toList());\n+        convert(notConverted, hgRepo, gitRepo, gitToHg);\n+        return marks;\n@@ -271,1 +315,0 @@\n-        var hgToGit = new HashMap<Hash, Hash>();\n@@ -273,2 +316,6 @@\n-            gitToHg.put(mark.git(), mark.hg());\n-            hgToGit.put(mark.hg(), mark.git());\n+            if (mark.tag().isPresent()) {\n+                gitToHg.put(mark.git(), mark.tag().get());\n+            } else {\n+                gitToHg.put(mark.git(), mark.hg());\n+            }\n+            marks.add(mark);\n@@ -277,6 +324,7 @@\n-        var head = gitRepo.head();\n-        var fetchHead = gitRepo.fetch(source, \"master:refs\/remotes\/origin\/master\");\n-        try (var commits = gitRepo.commits(head.toString() + \"..\" + fetchHead.toString(), true)) {\n-            var hgHashes = convert(commits, hgRepo, gitRepo, gitToHg, hgToGit);\n-            return createMarks(oldMarks, hgHashes, gitToHg, hgToGit);\n-        }\n+        gitRepo.checkout(branch);\n+        var oldHead = gitRepo.head();\n+        gitRepo.pull(source.toString(), branch.name());\n+        var newHead = gitRepo.head();\n+        var commits = gitRepo.commitMetadata(gitRepo.rangeInclusive(oldHead, newHead), true);\n+        convert(commits, hgRepo, gitRepo, gitToHg);\n+        return marks;\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/openjdk\/convert\/GitToHgConverter.java","additions":117,"deletions":69,"binary":false,"changes":186,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.util.Optional;\n@@ -33,0 +34,1 @@\n+    private final Hash tag;\n@@ -41,0 +43,11 @@\n+        this.tag = null;\n+    }\n+\n+    public Mark(int key, Hash hg, Hash git, Hash tag) {\n+        if (key == 0) {\n+            throw new IllegalArgumentException(\"A mark cannot be 0\");\n+        }\n+        this.key = key;\n+        this.hg = hg;\n+        this.git = git;\n+        this.tag = tag;\n@@ -55,0 +68,4 @@\n+    public Optional<Hash> tag() {\n+        return Optional.ofNullable(tag);\n+    }\n+\n@@ -62,1 +79,1 @@\n-        return Objects.hash(key, hg, git);\n+        return Objects.hash(key, hg, git, tag);\n@@ -75,1 +92,2 @@\n-                   Objects.equals(git, m.git);\n+                   Objects.equals(git, m.git) &&\n+                   Objects.equals(tag, m.tag);\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/openjdk\/convert\/Mark.java","additions":20,"deletions":2,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import org.openjdk.skara.vcs.openjdk.convert.Mark;\n@@ -30,0 +31,1 @@\n+import org.junit.jupiter.api.Disabled;\n@@ -33,0 +35,1 @@\n+import java.nio.file.Path;\n@@ -35,0 +38,3 @@\n+import java.net.URI;\n+import java.util.stream.Collectors;\n+import java.time.ZonedDateTime;\n@@ -39,1 +45,2 @@\n-    void assertCommitEquals(Commit gitCommit, Commit hgCommit) {\n+    void assertCommitEquals(ReadOnlyRepository gitRepo, Commit gitCommit, ReadOnlyRepository hgRepo, Commit hgCommit) throws IOException {\n+        System.out.println(\"git commit: \" + gitCommit.hash() + \", hg commit: \" + hgCommit.hash());\n@@ -45,38 +52,5 @@\n-        var hgDiffs = hgCommit.parentDiffs();\n-        var gitDiffs = gitCommit.parentDiffs();\n-        assertEquals(gitDiffs.size(), hgDiffs.size());\n-\n-        for (var i = 0; i < gitDiffs.size(); i++) {\n-            var hgDiff = hgDiffs.get(i);\n-            var gitDiff = gitDiffs.get(i);\n-\n-            var hgPatches = hgDiff.patches();\n-            var gitPatches = gitDiff.patches();\n-\n-            assertEquals(gitPatches.size(), hgPatches.size());\n-\n-            for (var j = 0; j < gitPatches.size(); j++) {\n-                var hgPatch = hgPatches.get(j);\n-                var gitPatch = gitPatches.get(j);\n-\n-                assertEquals(gitPatch.source().path(), hgPatch.source().path());\n-                assertEquals(gitPatch.source().type(), hgPatch.source().type());\n-\n-                assertEquals(gitPatch.target().path(), hgPatch.target().path());\n-                assertEquals(gitPatch.target().type(), hgPatch.target().type());\n-\n-                assertEquals(gitPatch.status(), hgPatch.status());\n-                assertEquals(gitPatch.isBinary(), hgPatch.isBinary());\n-                assertEquals(gitPatch.isTextual(), hgPatch.isTextual());\n-\n-                if (gitPatch.isTextual()) {\n-                    var hgHunks = hgPatch.asTextualPatch().hunks();\n-                    var gitHunks = gitPatch.asTextualPatch().hunks();\n-                    assertEquals(gitHunks.size(), hgHunks.size());\n-\n-                    for (var k = 0; k < gitHunks.size(); k++) {\n-                        var hgHunk = hgHunks.get(k);\n-                        var gitHunk = gitHunks.get(k);\n-\n-                        assertEquals(gitHunk.source().range(), hgHunk.source().range());\n-                        assertEquals(gitHunk.source().lines(), hgHunk.source().lines());\n+        var gitFiles = gitRepo.files(gitCommit.hash());\n+        var gitFileToHash = new HashMap<Path, Hash>();\n+        for (var entry : gitFiles) {\n+            gitFileToHash.put(entry.path(), entry.hash());\n+        }\n@@ -84,2 +58,5 @@\n-                        assertEquals(gitHunk.target().range(), hgHunk.target().range());\n-                        assertEquals(gitHunk.target().lines(), hgHunk.target().lines());\n+        var hgFiles = hgRepo.files(hgCommit.hash());\n+        var hgFileToHash = new HashMap<Path, Hash>();\n+        for (var entry : hgFiles) {\n+            hgFileToHash.put(entry.path(), entry.hash());\n+        }\n@@ -87,7 +64,6 @@\n-                        var hgStats = hgHunk.stats();\n-                        var gitStats = gitHunk.stats();\n-                        assertEquals(gitStats.added(), hgStats.added());\n-                        assertEquals(gitStats.removed(), hgStats.removed());\n-                        assertEquals(gitStats.modified(), hgStats.modified());\n-                    }\n-                }\n+        var hgtags = Path.of(\".hgtags\");\n+        assertEquals(gitFiles.size(), hgFiles.size());\n+        for (var entry : gitFiles) {\n+            var path = entry.path();\n+            if (path.equals(hgtags)) {\n+                continue;\n@@ -95,0 +71,3 @@\n+            var gitHash = gitFileToHash.get(path);\n+            var hgHash = hgFileToHash.get(path);\n+            assertEquals(gitHash, hgHash, \"filename: \" + path);\n@@ -98,3 +77,16 @@\n-    void assertReposEquals(ReadOnlyRepository gitRepo, ReadOnlyRepository hgRepo) throws IOException {\n-        assertEquals(gitRepo.branches().size(), hgRepo.branches().size());\n-        assertEquals(gitRepo.tags().size() + 1, hgRepo.tags().size()); \/\/ hg alwayas has 'tip' tag\n+    void assertReposEquals(List<Mark> marks, ReadOnlyRepository gitRepo, ReadOnlyRepository hgRepo) throws IOException {\n+        var gitTagNames = gitRepo.tags().stream().map(Tag::name).collect(Collectors.toSet());\n+        gitTagNames.add(\"tip\"); \/\/ hg always has \"tip\" tag\n+        var hgTagNames = hgRepo.tags().stream().map(Tag::name).collect(Collectors.toSet());\n+        assertEquals(gitTagNames, hgTagNames);\n+\n+        var gitCommits = gitRepo.commits(\"master\").asList();\n+\n+        var gitHashes = new HashSet<Hash>();\n+        for (var commit : gitCommits) {\n+            gitHashes.add(commit.hash());\n+        }\n+        for (var mark : marks) {\n+            gitHashes.remove(mark.git());\n+        }\n+        assertEquals(Set.of(), gitHashes);\n@@ -102,1 +94,0 @@\n-        var gitCommits = gitRepo.commits().asList();\n@@ -104,1 +95,2 @@\n-        assertEquals(gitCommits.size(), hgCommits.size());\n+        assertTrue(hgCommits.size() >= gitCommits.size(), hgCommits.size() + \" < \" + gitCommits.size());\n+        assertEquals(gitCommits.size(), marks.size());\n@@ -106,2 +98,10 @@\n-        for (var i = 0; i < gitCommits.size(); i++) {\n-            assertCommitEquals(gitCommits.get(i), hgCommits.get(i));\n+        var gitHashToCommit = new HashMap<Hash, Commit>();\n+        for (var commit : gitCommits) {\n+            gitHashToCommit.put(commit.hash(), commit);\n+        }\n+        var hgHashToCommit = new HashMap<Hash, Commit>();\n+        for (var commit : hgCommits) {\n+            hgHashToCommit.put(commit.hash(), commit);\n+        }\n+        for (var mark : marks) {\n+            assertCommitEquals(gitRepo, gitHashToCommit.get(mark.git()), hgRepo, hgHashToCommit.get(mark.hg()));\n@@ -124,1 +124,1 @@\n-            converter.convert(gitRepo, hgRepo);\n+            var marks = converter.convert(gitRepo, hgRepo);\n@@ -138,1 +138,1 @@\n-            assertReposEquals(gitRepo, hgRepo);\n+            assertReposEquals(marks, gitRepo, hgRepo);\n@@ -156,1 +156,1 @@\n-            converter.convert(gitRepo, hgRepo);\n+            var marks = converter.convert(gitRepo, hgRepo);\n@@ -165,1 +165,1 @@\n-            assertReposEquals(gitRepo, hgRepo);\n+            assertReposEquals(marks, gitRepo, hgRepo);\n@@ -186,1 +186,1 @@\n-            converter.convert(gitRepo, hgRepo);\n+            var marks = converter.convert(gitRepo, hgRepo);\n@@ -200,1 +200,1 @@\n-            assertReposEquals(gitRepo, hgRepo);\n+            assertReposEquals(marks, gitRepo, hgRepo);\n@@ -221,1 +221,1 @@\n-            converter.convert(gitRepo, hgRepo);\n+            var marks = converter.convert(gitRepo, hgRepo);\n@@ -235,1 +235,1 @@\n-            assertReposEquals(gitRepo, hgRepo);\n+            assertReposEquals(marks, gitRepo, hgRepo);\n@@ -254,1 +254,1 @@\n-            converter.convert(gitRepo, hgRepo);\n+            var marks = converter.convert(gitRepo, hgRepo);\n@@ -263,1 +263,1 @@\n-            assertReposEquals(gitRepo, hgRepo);\n+            assertReposEquals(marks, gitRepo, hgRepo);\n@@ -286,1 +286,1 @@\n-            converter.convert(gitRepo, hgRepo);\n+            var marks = converter.convert(gitRepo, hgRepo);\n@@ -297,1 +297,1 @@\n-            assertReposEquals(gitRepo, hgRepo);\n+            assertReposEquals(marks, gitRepo, hgRepo);\n@@ -327,1 +327,1 @@\n-            gitRepo.checkout(third, false);\n+            gitRepo.checkout(gitRepo.defaultBranch(), false);\n@@ -333,2 +333,2 @@\n-            converter.convert(gitRepo, hgRepo);\n-            assertReposEquals(gitRepo, hgRepo);\n+            var marks = converter.convert(gitRepo, hgRepo);\n+            assertReposEquals(marks, gitRepo, hgRepo);\n@@ -364,1 +364,1 @@\n-            gitRepo.checkout(third, false);\n+            gitRepo.checkout(gitRepo.defaultBranch(), false);\n@@ -372,2 +372,2 @@\n-            converter.convert(gitRepo, hgRepo);\n-            assertReposEquals(gitRepo, hgRepo);\n+            var marks = converter.convert(gitRepo, hgRepo);\n+            assertReposEquals(marks, gitRepo, hgRepo);\n@@ -403,1 +403,1 @@\n-            gitRepo.checkout(third, false);\n+            gitRepo.checkout(gitRepo.defaultBranch(), false);\n@@ -411,2 +411,13 @@\n-            converter.convert(gitRepo, hgRepo);\n-            assertReposEquals(gitRepo, hgRepo);\n+            var marks = converter.convert(gitRepo, hgRepo);\n+            assertReposEquals(marks, gitRepo, hgRepo);\n+        }\n+    }\n+\n+    private void cloneAndConvertAndVerify(String repo) throws IOException {\n+        try (var hgRoot = new TemporaryDirectory(false);\n+             var gitRoot = new TemporaryDirectory(false)) {\n+            var gitRepo = Repository.clone(URI.create(\"https:\/\/git.openjdk.java.net\/\" + repo + \".git\"), gitRoot.path());\n+            var hgRepo = Repository.init(hgRoot.path(), VCS.HG);\n+            var converter = new GitToHgConverter(new Branch(\"master\"));\n+            var marks = converter.convert(gitRepo, hgRepo);\n+            assertReposEquals(marks, gitRepo, hgRepo);\n@@ -415,0 +426,94 @@\n+\n+    @Test\n+    void convertGitTag() throws IOException {\n+        try (var hgRoot = new TemporaryDirectory(false);\n+             var gitRoot = new TemporaryDirectory(false)) {\n+            var gitRepo = Repository.init(gitRoot.path(), VCS.GIT);\n+            var readme = gitRoot.path().resolve(\"README.md\");\n+\n+            Files.writeString(readme, \"First line\\n\");\n+            gitRepo.add(readme);\n+            gitRepo.commit(\"First line\", \"Foo Bar\", \"foo@openjdk.java.net\");\n+\n+            Files.writeString(readme, \"Second line\\n\", StandardOpenOption.APPEND);\n+            gitRepo.add(readme);\n+            var second = gitRepo.commit(\"Second line\", \"Foo Bar\", \"foo@openjdk.java.net\");\n+            var tagDate = ZonedDateTime.parse(\"2020-08-24T11:30:32+02:00\");\n+            var tag = gitRepo.tag(second, \"1.0\", \"Added tag 1.0\", \"Foo Bar\", \"foo@openjdk.java.net\", tagDate);\n+\n+            var hgRepo = Repository.init(hgRoot.path(), VCS.HG);\n+            var converter = new GitToHgConverter();\n+            var marks = converter.convert(gitRepo, hgRepo);\n+            var lastMark = marks.get(marks.size() - 1);\n+            assertEquals(second, lastMark.git());\n+            assertTrue(lastMark.tag().isPresent());\n+\n+            Files.writeString(readme, \"Third line\\n\");\n+            gitRepo.add(readme);\n+            gitRepo.commit(\"Third line\", \"Foo Bar\", \"foo@openjdk.java.net\");\n+\n+            converter = new GitToHgConverter();\n+            var newMarks = converter.convert(gitRepo, hgRepo, marks);\n+            var hgCommits = hgRepo.commitMetadata(true);\n+            assertEquals(4, hgCommits.size());\n+            assertEquals(List.of(\"First line\"), hgCommits.get(0).message());\n+            assertEquals(List.of(\"Second line\"), hgCommits.get(1).message());\n+            assertEquals(List.of(\"Added tag 1.0\"), hgCommits.get(2).message());\n+            assertEquals(List.of(\"Third line\"), hgCommits.get(3).message());\n+            assertEquals(List.of(new Tag(\"tip\"), new Tag(\"1.0\")), hgRepo.tags());\n+\n+            var annotated = hgRepo.annotate(new Tag(\"1.0\"));\n+            assertTrue(annotated.isPresent());\n+            assertEquals(\"foo\", annotated.get().author().name());\n+            assertEquals(tagDate, annotated.get().date());\n+            assertEquals(\"Added tag 1.0\", annotated.get().message());\n+        }\n+    }\n+\n+    @Disabled(\"Depends on internet connection\")\n+    @Test\n+    void convertDefpath() throws IOException {\n+        cloneAndConvertAndVerify(\"defpath\");\n+    }\n+\n+    @Disabled(\"Depends on internet connection\")\n+    @Test\n+    void convertTrees() throws IOException {\n+        cloneAndConvertAndVerify(\"trees\");\n+    }\n+\n+    @Disabled(\"Depends on internet connection\")\n+    @Test\n+    void convertWebrev() throws IOException {\n+        cloneAndConvertAndVerify(\"webrev\");\n+    }\n+\n+    @Disabled(\"Depends on internet connection\")\n+    @Test\n+    void convertAsmtools() throws IOException {\n+        cloneAndConvertAndVerify(\"asmtools\");\n+    }\n+\n+    @Disabled(\"Depends on internet connection\")\n+    @Test\n+    void convertJcov() throws IOException {\n+        cloneAndConvertAndVerify(\"jcov\");\n+    }\n+\n+    @Disabled(\"Depends on internet connection\")\n+    @Test\n+    void convertJtharness() throws IOException {\n+        cloneAndConvertAndVerify(\"jtharness\");\n+    }\n+\n+    @Disabled(\"Depends on internet connection\")\n+    @Test\n+    void convertJtreg() throws IOException {\n+        cloneAndConvertAndVerify(\"jtreg\");\n+    }\n+\n+    @Disabled(\"Depends on internet connection\")\n+    @Test\n+    void convertJmc() throws IOException {\n+        cloneAndConvertAndVerify(\"jmc\");\n+    }\n","filename":"vcs\/src\/test\/java\/org\/openjdk\/skara\/vcs\/openjdk\/converter\/GitToHgConverterTests.java","additions":181,"deletions":76,"binary":false,"changes":257,"status":"modified"}]}