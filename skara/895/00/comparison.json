{"files":[{"patch":"@@ -29,1 +29,1 @@\n-import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.*;\n@@ -72,2 +72,2 @@\n-    private final Map<String, Lock> authLocks = new HashMap<>();\n-    private final Map<String, Instant> lastUpdates = new ConcurrentHashMap<>();\n+    private final ConcurrentHashMap<String, Lock> authLocks = new ConcurrentHashMap<>();\n+    private final ConcurrentHashMap<String, Instant> lastUpdates = new ConcurrentHashMap<>();\n@@ -76,0 +76,24 @@\n+    private static class LockWithTimeout implements AutoCloseable {\n+        private final Lock lock;\n+\n+        LockWithTimeout(Lock lock) {\n+            this.lock = lock;\n+            while (true) {\n+                try {\n+                    var locked = lock.tryLock(10, TimeUnit.MINUTES);\n+                    if (!locked) {\n+                        System.out.println(\"Unable to grab lock in 10 minutes - exiting...\");\n+                        System.exit(1);\n+                    }\n+                    return;\n+                } catch (InterruptedException ignored) {\n+                }\n+            }\n+        }\n+\n+        @Override\n+        public void close() {\n+            lock.unlock();\n+        }\n+    }\n+\n@@ -91,5 +115,1 @@\n-        synchronized (authLocks) {\n-            if (!authLocks.containsKey(authId)) {\n-                authLocks.put(authId, new ReentrantLock());\n-            }\n-        }\n+        authLocks.computeIfAbsent(authId, id -> new ReentrantLock());\n@@ -110,1 +130,1 @@\n-            try {\n+            try (var ignored = new LockWithTimeout(authLock)){\n@@ -112,1 +132,0 @@\n-                authLock.lock();\n@@ -114,2 +133,0 @@\n-            } finally {\n-                authLock.unlock();\n@@ -130,2 +147,1 @@\n-            try {\n-                authLock.lock();\n+            try (var ignored = new LockWithTimeout(authLock)) {\n@@ -134,2 +150,0 @@\n-            } finally {\n-                authLock.unlock();\n@@ -145,2 +159,1 @@\n-            try {\n-                authLock.lock();\n+            try (var ignored = new LockWithTimeout(authLock)) {\n@@ -148,2 +161,0 @@\n-            } finally {\n-                authLock.unlock();\n","filename":"network\/src\/main\/java\/org\/openjdk\/skara\/network\/RestRequestCache.java","additions":31,"deletions":20,"binary":false,"changes":51,"status":"modified"}]}