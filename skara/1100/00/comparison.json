{"files":[{"patch":"@@ -86,0 +86,1 @@\n+            PreIntegrations.retargetDependencies(pr);\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/prbranch\/PullRequestBranchNotifier.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -179,0 +179,47 @@\n+\n+    @Test\n+    void retarget(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+\n+            var repo = credentials.getHostedRepository();\n+            var repoFolder = tempFolder.path().resolve(\"repo\");\n+            var localRepo = CheckableRepository.init(repoFolder, repo.repositoryType());\n+            credentials.commitLock(localRepo);\n+            localRepo.pushAll(repo.url());\n+\n+            var storageFolder = tempFolder.path().resolve(\"storage\");\n+            var notifyBot = testBotBuilder(repo, storageFolder).create(\"notify\", JSON.object());\n+\n+            \/\/ Initialize history\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ Create a PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, \"Another line\");\n+            localRepo.push(editHash, repo.url(), \"source\", true);\n+            var pr = credentials.createPullRequest(repo, \"master\", \"source\", \"This is a PR\", false);\n+            pr.addLabel(\"rfr\");\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ The target repo should now contain the new branch\n+            var hash = localRepo.fetch(repo.url(), PreIntegrations.preIntegrateBranch(pr));\n+            assertEquals(editHash, hash);\n+\n+            \/\/ Create follow-up work\n+            var followUp = CheckableRepository.appendAndCommit(localRepo, \"Follow-up work\", \"Follow-up change\");\n+            localRepo.push(followUp, repo.url(), \"followup\", true);\n+            var followUpPr = credentials.createPullRequest(repo, PreIntegrations.preIntegrateBranch(pr), \"followup\", \"This is another pull request\");\n+            assertEquals(PreIntegrations.preIntegrateBranch(pr), followUpPr.targetRef());\n+\n+            \/\/ Close the PR\n+            pr.setState(Issue.State.CLOSED);\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ The target repo should no longer contain the branch\n+            assertThrows(IOException.class, () -> localRepo.fetch(repo.url(), PreIntegrations.preIntegrateBranch(pr)));\n+\n+            \/\/ The follow-up PR should have been retargeted\n+            followUpPr = repo.pullRequest(followUpPr.id());\n+            assertEquals(\"master\", followUpPr.targetRef());\n+        }\n+    }\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/prbranch\/PullRequestBranchNotifierTests.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -223,5 +223,0 @@\n-\n-        \/\/ Additional cleanup outside of the integration lock\n-        if (success) {\n-            PreIntegrations.retargetDependencies(pr);\n-        }\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/IntegrateCommand.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -112,0 +112,3 @@\n+            \/\/ The notifier will now retarget the follow up PR, simulate this\n+            followUpPr.setTargetRef(\"master\");\n+\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/PreIntegrateTests.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}