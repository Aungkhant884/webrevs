{"files":[{"patch":"@@ -26,0 +26,1 @@\n+import org.openjdk.skara.issuetracker.Issue;\n@@ -65,6 +66,9 @@\n-        var allIssues = Stream.concat(Stream.of(issue.get()), Backports.findBackports(issue.get(), true).stream())\n-                              .filter(i -> !i.labelNames().contains(\"hgupdate-sync-ignore\"))\n-                              .filter(i -> Backports.mainFixVersion(i).isPresent())\n-                              .filter(i -> bot.inspect().matcher(Backports.mainFixVersion(i).get().raw()).matches())\n-                              .filter(i -> !bot.ignore().matcher(Backports.mainFixVersion(i).get().raw()).matches())\n-                              .collect(Collectors.toList());\n+        var allIssues = Stream.concat(\n+                        Stream.of(issue.get())\n+                                .filter(Issue::isFixed),\n+                        Backports.findBackports(issue.get(), true).stream())\n+                .filter(i -> !i.labelNames().contains(\"hgupdate-sync-ignore\"))\n+                .filter(i -> Backports.mainFixVersion(i).isPresent())\n+                .filter(i -> bot.inspect().matcher(Backports.mainFixVersion(i).get().raw()).matches())\n+                .filter(i -> !bot.ignore().matcher(Backports.mainFixVersion(i).get().raw()).matches())\n+                .collect(Collectors.toList());\n","filename":"bots\/synclabel\/src\/main\/java\/org\/openjdk\/skara\/bots\/synclabel\/SyncLabelBotUpdateLabelWorkItem.java","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import org.openjdk.skara.json.JSONObject;\n@@ -388,0 +389,33 @@\n+\n+    @Test\n+    void testMainIssueNotFixed(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var storageFolder = tempFolder.path().resolve(\"storage\");\n+            var issueProject = credentials.getIssueProject();\n+            var syncLabelBot = testBotBuilder(issueProject, storageFolder).create(\"synclabel\", JSON.object());\n+\n+            var issue1 = credentials.createIssue(issueProject, \"Issue 1\");\n+            issue1.setProperty(\"fixVersions\", JSON.array().add(JSON.of(\"9.0.1\")));\n+            issue1.setProperty(\"issuetype\", JSON.of(\"Bug\"));\n+            issue1.setState(RESOLVED);\n+            issue1.setProperty(\"resolution\", JSON.object().put(\"name\", JSON.of(\"Won't Fix\")));\n+\n+            var issue2 = credentials.createIssue(issueProject, \"Issue 2\");\n+            issue2.setProperty(\"fixVersions\", JSON.array().add(JSON.of(\"9.0.2\")));\n+            issue2.setProperty(\"issuetype\", JSON.of(\"Backport\"));\n+            issue2.setState(RESOLVED);\n+            issue1.addLink(Link.create(issue2, \"backported by\").build());\n+\n+            var issue3 = credentials.createIssue(issueProject, \"Issue 3\");\n+            issue3.setProperty(\"fixVersions\", JSON.array().add(JSON.of(\"9.0.3\")));\n+            issue3.setProperty(\"issuetype\", JSON.of(\"Backport\"));\n+            issue3.setState(RESOLVED);\n+            issue1.addLink(Link.create(issue3, \"backported by\").build());\n+\n+            TestBotRunner.runPeriodicItems(syncLabelBot);\n+            assertEquals(List.of(), issue1.labelNames());\n+            assertEquals(List.of(), issue2.labelNames());\n+            assertEquals(List.of(\"hgupdate-sync\"), issue3.labelNames());\n+        }\n+    }\n","filename":"bots\/synclabel\/src\/test\/java\/org\/openjdk\/skara\/bots\/synclabel\/SyncLabelBotTests.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -226,20 +226,0 @@\n-    private static boolean isFixed(Issue issue) {\n-        if (issue.state() == Issue.State.OPEN) {\n-            return false;\n-        }\n-        var resolution = issue.properties().get(\"resolution\");\n-        if (resolution == null || resolution.isNull()) {\n-            return false;\n-        }\n-        var name = resolution.get(\"name\");\n-        if (name == null || name.isNull()) {\n-            return false;\n-        }\n-\n-        if (!name.asString().equals(\"Fixed\")) {\n-            return false;\n-        }\n-\n-        return true;\n-    }\n-\n@@ -253,1 +233,1 @@\n-                    .filter(i -> !fixedOnly || isFixed(i))\n+                    .filter(i -> !fixedOnly || i.isFixed())\n","filename":"jbs\/src\/main\/java\/org\/openjdk\/skara\/jbs\/Backports.java","additions":1,"deletions":21,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -161,1 +161,18 @@\n-        data.properties.put(\"resolution\", JSON.object().put(\"name\", JSON.of(\"Fixed\")));\n+        if (state == State.RESOLVED || state == State.CLOSED) {\n+            data.properties.put(\"resolution\", JSON.object().put(\"name\", JSON.of(\"Fixed\")));\n+        }\n+    }\n+\n+    \/**\n+     * This implementation mimics the JiraIssue definition of isFixed and is\n+     * needed to test handling of backports.\n+     *\/\n+    @Override\n+    public boolean isFixed() {\n+        if (isResolved() || isClosed()) {\n+            var resolution = data.properties.get(\"resolution\");\n+            if (!resolution.isNull()) {\n+                return \"Fixed\".equals(resolution.get(\"name\").asString());\n+            }\n+        }\n+        return false;\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestIssue.java","additions":18,"deletions":1,"binary":false,"changes":19,"status":"modified"}]}