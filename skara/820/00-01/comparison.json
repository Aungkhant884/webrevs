{"files":[{"patch":"@@ -4,0 +4,1 @@\n+import org.openjdk.skara.issuetracker.Comment;\n@@ -13,0 +14,1 @@\n+    private final Comment comment;\n@@ -14,1 +16,1 @@\n-    CommandInvocation(String id, HostUser user, CommandHandler handler, String name, String args) {\n+    CommandInvocation(String id, HostUser user, CommandHandler handler, String name, String args, Comment comment) {\n@@ -20,0 +22,1 @@\n+        this.comment = comment;\n@@ -41,0 +44,12 @@\n+\n+    Optional<Comment> comment() {\n+        return Optional.ofNullable(comment);\n+    }\n+\n+    boolean isInBody() {\n+        return comment == null;\n+    }\n+\n+    boolean isInComment() {\n+        return comment != null;\n+    }\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CommandInvocation.java","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -121,1 +121,1 @@\n-    private List<CommandInvocation> extractCommands(String text, String baseId, HostUser user) {\n+    private List<CommandInvocation> extractCommands(String text, String baseId, HostUser user, Comment c) {\n@@ -131,1 +131,1 @@\n-                    ret.add(new CommandInvocation(formatId(baseId, subId++), user, multiLineHandler, multiLineCommand, String.join(\"\\n\", multiLineBuffer)));\n+                    ret.add(new CommandInvocation(formatId(baseId, subId++), user, multiLineHandler, multiLineCommand, String.join(\"\\n\", multiLineBuffer), c));\n@@ -147,1 +147,1 @@\n-                    ret.add(new CommandInvocation(formatId(baseId, subId++), user, handler, command, commandMatcher.group(2)));\n+                    ret.add(new CommandInvocation(formatId(baseId, subId++), user, handler, command, commandMatcher.group(2), c));\n@@ -156,1 +156,1 @@\n-            ret.add(new CommandInvocation(formatId(baseId, subId), user, multiLineHandler, multiLineCommand, String.join(\"\\n\", multiLineBuffer)));\n+            ret.add(new CommandInvocation(formatId(baseId, subId), user, multiLineHandler, multiLineCommand, String.join(\"\\n\", multiLineBuffer), c));\n@@ -163,1 +163,1 @@\n-        var allCommands = Stream.concat(extractCommands(pr.body(), \"body\", pr.author()).stream(),\n+        var allCommands = Stream.concat(extractCommands(pr.body(), \"body\", pr.author(), null).stream(),\n@@ -166,1 +166,1 @@\n-                                                .flatMap(c -> extractCommands(c.body(), c.id(), c.author()).stream()))\n+                                                .flatMap(c -> extractCommands(c.body(), c.id(), c.author(), c).stream()))\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CommandWorkItem.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-            \"author\", \"author\",\n+            \"author\", \"authors\",\n@@ -50,0 +50,25 @@\n+    private static boolean roleIsLower(String updated, String existing) {\n+        if (existing.equals(\"lead\")) {\n+            return !updated.equals(\"lead\");\n+        }\n+        if (existing.equals(\"reviewers\")) {\n+            return !updated.equals(\"lead\") &&\n+                   !updated.equals(\"reviewers\");\n+        }\n+        if (existing.equals(\"committers\")) {\n+            return !updated.equals(\"lead\") &&\n+                   !updated.equals(\"reviewers\") &&\n+                   !updated.equals(\"committers\");\n+        }\n+        if (existing.equals(\"authors\")) {\n+            return !updated.equals(\"lead\") &&\n+                   !updated.equals(\"reviewers\") &&\n+                   !updated.equals(\"committers\") &&\n+                   !updated.equals(\"authors\");\n+        }\n+        if (existing.equals(\"contributors\")) {\n+            return false;\n+        }\n+        throw new IllegalArgumentException(\"Unexpected existing role: \" + existing);\n+    }\n+\n@@ -86,0 +111,19 @@\n+        if (pr.author().equals(command.user()) && !censusInstance.isReviewer(command.user())) {\n+            var user = pr.repository().forge().currentUser();\n+\n+            \/\/ If the command is in the PR body there cannot be any previous commands\n+            if (!command.isInBody()) {\n+                var previous = ReviewersTracker.additionalRequiredReviewers(user, allComments, command.comment().get());\n+                if (previous.isPresent()) {\n+                    if (roleIsLower(role, previous.get().role())) {\n+                        reply.println(\"Cannot lower the role for additional reviewers\");\n+                        return;\n+                    }\n+                    if (numReviewers < previous.get().number()) {\n+                        reply.println(\"Cannot decrease the number of required reviewers\");\n+                        return;\n+                    }\n+                }\n+            }\n+        }\n+\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/ReviewersCommand.java","additions":45,"deletions":1,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -102,0 +102,4 @@\n+        return additionalRequiredReviewers(botUser, comments, null);\n+    }\n+\n+    static Optional<AdditionalRequiredReviewers> additionalRequiredReviewers(HostUser botUser, List<Comment> comments, Comment exclude) {\n@@ -105,0 +109,1 @@\n+                                       .filter(comment -> exclude == null || !comment.id().equals(exclude.id()))\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/ReviewersTracker.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -285,1 +285,48 @@\n-            assertLastCommentContains(authorPR,\"The number of required reviews for this PR is now set to 2 (with at least 1 of role reviewers).\");\n+            assertLastCommentContains(authorPR, \"The number of required reviews for this PR is now set to 2 (with at least 1 of role reviewers).\");\n+        }\n+    }\n+\n+    @Test\n+    void prAuthorShouldNotBeAllowedToDecrease(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var integrator = credentials.getHostedRepository();\n+            var bot = credentials.getHostedRepository();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                                           .addReviewer(integrator.forge().currentUser().id())\n+                                           .addAuthor(author.forge().currentUser().id());\n+            var prBot = PullRequestBot.newBuilder().repo(bot).censusRepo(censusBuilder.build()).build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"123: This is a pull request\");\n+\n+            var authorPR = author.pullRequest(pr.id());\n+\n+            \/\/ The author deems that two reviewers are required\n+            authorPR.addComment(\"\/reviewers 2\");\n+\n+            \/\/ The bot should reply with a success message\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertLastCommentContains(authorPR, \"The number of required reviews for this PR is now set to 2 (with at least 1 of role reviewers).\");\n+\n+            \/\/ The author should not be allowed to decrease even its own \/reviewers command\n+            authorPR.addComment(\"\/reviewers 1\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertLastCommentContains(authorPR, \"Cannot decrease the number of required reviewers\");\n+\n+            \/\/ Reviewer should be allowed to decrease\n+            var reviewerPr = integrator.pullRequest(pr.id());\n+            reviewerPr.addComment(\"\/reviewers 1\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertLastCommentContains(authorPR, \"The number of required reviews for this PR is now set to 1\");\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/ReviewersTests.java","additions":48,"deletions":1,"binary":false,"changes":49,"status":"modified"}]}