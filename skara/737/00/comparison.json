{"files":[{"patch":"@@ -42,1 +42,1 @@\n-                       .main(GitOpenJDKImport::main),\n+                       .main(HgOpenJDKImport::main),\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/SkaraDebug.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import org.openjdk.skara.vcs.openjdk.convert.Mark;\n@@ -33,1 +34,1 @@\n-import java.util.List;\n+import java.util.*;\n@@ -91,10 +92,32 @@\n-            var converter = new GitToHgConverter();\n-            var marks = converter.convert(gitRepo, hgRepo);\n-\n-            var hgCommits = hgRepo.root().resolve(\".hg\").resolve(\"shamap\");\n-            try (var writer = Files.newBufferedWriter(hgCommits)) {\n-                for (var mark : marks) {\n-                    writer.write(mark.git().hex());\n-                    writer.write(\" \");\n-                    writer.write(mark.hg().hex());\n-                    writer.newLine();\n+            var converter = new GitToHgConverter(new Branch(\"master\"));\n+            try {\n+                var shamap = hgRepo.root().resolve(\".hg\").resolve(\"shamap\");\n+                var marks = new ArrayList<Mark>();\n+                if (Files.exists(shamap)) {\n+                    var lines = Files.readAllLines(shamap);\n+                    for (var i = 0; i < lines.size(); i++) {\n+                        var line = lines.get(i);\n+                        var parts = line.split(\" \");\n+                        var key = i + 1;\n+                        if (parts.length == 2) {\n+                            marks.add(new Mark(key, new Hash(parts[1]), new Hash(parts[0])));\n+                        } else if (parts.length == 3) {\n+                            marks.add(new Mark(key, new Hash(parts[1]), new Hash(parts[0]), new Hash(parts[2])));\n+                        } else {\n+                            throw new IllegalStateException(\"Unexpected line at row \" + i + \": \" + line);\n+                        }\n+                    }\n+                }\n+                converter.convert(gitRepo, hgRepo, marks);\n+            } finally {\n+                var marks = converter.marks();\n+                if (!marks.isEmpty()) {\n+                    var shamap = hgRepo.root().resolve(\".hg\").resolve(\"shamap\");\n+                    try (var writer = Files.newBufferedWriter(shamap)) {\n+                        for (var mark : marks) {\n+                            writer.write(mark.git().hex());\n+                            writer.write(\" \");\n+                            writer.write(mark.hg().hex());\n+                            writer.newLine();\n+                        }\n+                    }\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/debug\/HgOpenJDKImport.java","additions":34,"deletions":11,"binary":false,"changes":45,"status":"modified"}]}