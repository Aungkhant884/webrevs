{"files":[{"patch":"@@ -1925,0 +1925,110 @@\n+\n+    @Test\n+    void cleanBackportWithCopyrightUpdate(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory(false)) {\n+\n+            var author = credentials.getHostedRepository();\n+            var integrator = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var issues = credentials.getIssueProject();\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addCommitter(author.forge().currentUser().id())\n+                    .addReviewer(integrator.forge().currentUser().id())\n+                    .addReviewer(reviewer.forge().currentUser().id());\n+            var bot = PullRequestBot.newBuilder()\n+                    .repo(integrator)\n+                    .censusRepo(censusBuilder.build())\n+                    .issueProject(issues)\n+                    .issuePRMap(new HashMap<>())\n+                    .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+\n+            \/\/ Initialize master branch\n+            var newFile = localRepo.root().resolve(\"a_new_file.txt\");\n+            Files.writeString(newFile, \"\"\"\n+                    \/*\n+                     * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+                     * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+                     *\/\n+                     Line1\n+                     Line2\n+                     \"\"\");\n+            localRepo.add(newFile);\n+            var updateHash = localRepo.commit(\"initial\", \"Test\", \"test@test.test\");\n+            localRepo.push(updateHash, author.authenticatedUrl(), \"master\", true);\n+\n+            \/\/ Initialize release branch\n+            var releaseBranch = localRepo.branch(masterHash, \"release\");\n+            localRepo.checkout(releaseBranch);\n+            newFile = localRepo.root().resolve(\"a_new_file.txt\");\n+            Files.writeString(newFile, \"\"\"\n+                    \/*\n+                     * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+                     * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+                     *\/\n+                     Line1\n+                     Line2\n+                     \"\"\");\n+            localRepo.add(newFile);\n+            var releaseHash = localRepo.commit(\"initial\", \"Test\", \"test@test.test\");\n+            localRepo.push(releaseHash, author.authenticatedUrl(), \"refs\/heads\/release\", true);\n+\n+            \/\/ Update release branch\n+            newFile = localRepo.root().resolve(\"a_new_file.txt\");\n+            Files.writeString(newFile, \"\"\"\n+                    \/*\n+                     * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+                     * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+                     *\/\n+                     Line1\n+                     Line2\n+                     Line3\n+                     \"\"\");\n+            localRepo.add(newFile);\n+            var issue1 = credentials.createIssue(issues, \"An issue\");\n+            var issue1Number = issue1.id().split(\"-\")[1];\n+            var originalMessage = issue1Number + \": An issue\\n\" +\n+                    \"\\n\" +\n+                    \"Reviewed-by: integrationreviewer2\";\n+            var updateReleaseHash = localRepo.commit(originalMessage, \"integrationcommitter1\", \"integrationcommitter1@openjdk.org\");\n+            localRepo.push(updateReleaseHash, author.authenticatedUrl(), \"refs\/heads\/release\", true);\n+\n+\n+            \/\/ \"backport\" the new file to the master branch\n+            localRepo.checkout(localRepo.defaultBranch());\n+            var editBranch = localRepo.branch(updateHash, \"edit\");\n+            localRepo.checkout(editBranch);\n+            var newFile2 = localRepo.root().resolve(\"a_new_file.txt\");\n+            Files.writeString(newFile, \"\"\"\n+                    \/*\n+                     * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+                     * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+                     *\/\n+                     Line1\n+                     Line2\n+                     Line3\n+                     \"\"\");\n+            localRepo.add(newFile2);\n+            var editHash = localRepo.commit(\"Backport\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(editHash, author.authenticatedUrl(), \"refs\/heads\/edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"Backport \" + updateReleaseHash.hex(), List.of());\n+\n+            \/\/ The bot should reply with a backport message\n+            TestBotRunner.runPeriodicItems(bot);\n+            var comments = pr.comments();\n+            var backportComment = comments.get(0).body();\n+            assertTrue(backportComment.contains(\"This backport pull request has now been updated with issue\"));\n+            assertTrue(backportComment.contains(\"<!-- backport \" + updateReleaseHash.hex() + \" -->\"));\n+            assertEquals(issue1Number + \": An issue\", pr.store().title());\n+            assertTrue(pr.store().labelNames().contains(\"backport\"));\n+            assertFalse(pr.store().body().contains(ReviewersCheck.DESCRIPTION), \"Reviewer requirement found in pr body\");\n+            assertFalse(pr.store().body().contains(CheckRun.MSG_EMPTY_BODY), \"Body not empty requirement found in pr body\");\n+\n+            \/\/ The bot should have added the \"clean\" label\n+            assertTrue(pr.store().labelNames().contains(\"clean\"));\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/BackportTests.java","additions":110,"deletions":0,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,2 +25,0 @@\n-import java.io.*;\n-import java.nio.file.*;\n@@ -31,0 +29,6 @@\n+\n+    private static final Pattern COPYRIGHT_PATTERN = Pattern.compile(\"\"\"\n+            -(.)*Copyright \\\\(c\\\\) (?:\\\\d|\\\\s|,)* Oracle and\/or its affiliates\\\\. All rights reserved\\\\.\n+            \\\\+(.)*Copyright \\\\(c\\\\) (?:\\\\d|\\\\s|,)* Oracle and\/or its affiliates\\\\. All rights reserved\\\\.\n+            \"\"\");\n+\n@@ -67,5 +71,0 @@\n-        Pattern copyrightPattern = Pattern.compile(\"\"\"\n-                -(.)*Copyright \\\\(c\\\\) (?:\\\\d|\\\\s|,)* Oracle and\/or its affiliates\\\\. All rights reserved\\\\.\n-                \\\\+(.)*Copyright \\\\(c\\\\) (?:\\\\d|\\\\s|,)* Oracle and\/or its affiliates\\\\. All rights reserved\\\\.\n-                \"\"\");\n-\n@@ -74,1 +73,1 @@\n-                .filter(hunk -> !copyrightPattern.matcher(hunk.toString()).find())\n+                .filter(hunk -> !COPYRIGHT_PATTERN.matcher(hunk.toString()).find())\n@@ -78,1 +77,1 @@\n-                .filter(hunk -> !copyrightPattern.matcher(hunk.toString()).find())\n+                .filter(hunk -> !COPYRIGHT_PATTERN.matcher(hunk.toString()).find())\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/DiffComparator.java","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"}]}