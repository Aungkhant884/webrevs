{"files":[{"patch":"@@ -277,0 +277,5 @@\n+\n+    @Override\n+    public List<String> getExpiredDeployKeys(Duration age) {\n+        return List.of();\n+    }\n","filename":"bots\/tester\/src\/test\/java\/org\/openjdk\/skara\/bots\/tester\/InMemoryHostedRepository.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -217,0 +217,5 @@\n+\n+    \/**\n+     * Return the titles of expired deploy keys which are older than 'age' in this repository\n+     *\/\n+    List<String> getExpiredDeployKeys(Duration age);\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/HostedRepository.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -744,0 +744,36 @@\n+\n+    @Override\n+    public List<String> getExpiredDeployKeys(Duration age) {\n+        var parts = name().split(\"\/\");\n+        var owner = parts[0];\n+        var name = parts[1];\n+\n+        var query = String.join(\"\\n\", List.of(\n+                \"{\",\n+                \"  repository(owner: \\\"\" + owner + \"\\\", name: \\\"\" + name + \"\\\") {\",\n+                \"    deployKeys(first: 100) {\",\n+                \"      edges {\",\n+                \"       node{\",\n+                \"           id\",\n+                \"           title\",\n+                \"           createdAt\",\n+                \"           }\",\n+                \"      }\",\n+                \"    }\",\n+                \"  }\",\n+                \"}\"\n+        ));\n+\n+        var data = gitHubHost.graphQL()\n+                .post()\n+                .body(JSON.object().put(\"query\", query))\n+                \/\/ This is a single point graphql query so shouldn't need to be limited to once a second\n+                .skipLimiter(true)\n+                .execute()\n+                .get(\"data\");\n+        return data.get(\"repository\").get(\"deployKeys\").get(\"edges\").stream()\n+                .filter(key -> ZonedDateTime.parse(key.get(\"node\").get(\"createdAt\").asString())\n+                        .isBefore(ZonedDateTime.now().minus(age)))\n+                .map(key -> key.get(\"node\").get(\"title\").asString())\n+                .toList();\n+    }\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubRepository.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -846,0 +846,10 @@\n+\n+    @Override\n+    public List<String> getExpiredDeployKeys(Duration age) {\n+        return request.get(\"deploy_keys\").execute()\n+                .stream()\n+                .filter(key -> ZonedDateTime.parse(key.get(\"created_at\").asString())\n+                        .isBefore(ZonedDateTime.now().minus(age)))\n+                .map(key -> key.get(\"title\").asString())\n+                .toList();\n+    }\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabRepository.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -271,0 +271,10 @@\n+\n+    @Test\n+    void testGetExpiredDeployKeys() {\n+        var githubRepoOpt = githubHost.repository(\"zhaosongzs\/Test\");\n+        assumeTrue(githubRepoOpt.isPresent());\n+        var githubRepo = githubRepoOpt.get();\n+        var expiredDeployKeys = githubRepo.getExpiredDeployKeys(Duration.ofMinutes(5));\n+        assertTrue(expiredDeployKeys.contains(\"Test1\"));\n+        assertTrue(expiredDeployKeys.contains(\"Test2\"));\n+    }\n","filename":"forge\/src\/test\/java\/org\/openjdk\/skara\/forge\/github\/GitHubRestApiTests.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -293,0 +293,14 @@\n+\n+    @Test\n+    void testGetExpiredDeployKeys() throws IOException {\n+        var settings = ManualTestSettings.loadManualTestSettings();\n+        var username = settings.getProperty(\"gitlab.user\");\n+        var token = settings.getProperty(\"gitlab.pat\");\n+        var credential = new Credential(username, token);\n+        var uri = URIBuilder.base(settings.getProperty(\"gitlab.uri\")).build();\n+        var gitLabHost = new GitLabHost(\"gitlab\", uri, false, credential, Set.of());\n+        var gitLabRepo = gitLabHost.repository(settings.getProperty(\"gitlab.repository\")).orElseThrow();\n+\n+        var expiredDeployKeys = gitLabRepo.getExpiredDeployKeys(Duration.ofMinutes(5));\n+        assertTrue(expiredDeployKeys.contains(\"test1\"));\n+    }\n","filename":"forge\/src\/test\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabRestApiTest.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-    private Map<Integer, ZonedDateTime> deployKeys = new HashMap<>();\n+    private Map<String, ZonedDateTime> deployKeys = new HashMap<>();\n@@ -449,2 +449,11 @@\n-    public void addDeployKeys(int id, ZonedDateTime createTime) {\n-        deployKeys.put(id, createTime);\n+    @Override\n+    public List<String> getExpiredDeployKeys(Duration age) {\n+        return deployKeys.entrySet()\n+                .stream()\n+                .filter(entry -> entry.getValue().isBefore(ZonedDateTime.now().minus(age)))\n+                .map(Map.Entry::getKey)\n+                .toList();\n+    }\n+\n+    public void addDeployKeys(String title, ZonedDateTime createTime) {\n+        deployKeys.put(title, createTime);\n@@ -453,1 +462,1 @@\n-    public Map<Integer, ZonedDateTime> deployKeys() {\n+    public Map<String, ZonedDateTime> deployKeys() {\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestHostedRepository.java","additions":13,"deletions":4,"binary":false,"changes":17,"status":"modified"}]}