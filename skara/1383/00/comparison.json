{"files":[{"patch":"@@ -503,9 +503,14 @@\n-                                   var hash = review.hash();\n-                                   if (hash.isPresent()) {\n-                                       if (!hash.get().equals(pr.headHash())) {\n-                                           if (ignoreStaleReviews) {\n-                                               entry += \" 🔄 Re-review required (review applies to [\" + hash.get().abbreviate()\n-                                                     + \"](\" + pr.filesUrl(hash.get()) + \"))\";\n-                                           } else {\n-                                               entry += \" ⚠️ Review applies to [\" + hash.get().abbreviate()\n-                                                       + \"](\" + pr.filesUrl(hash.get()) + \")\";\n+                                   if (!review.targetRef().equals(pr.targetRef())) {\n+                                       entry += \" 🔄 Re-review required (review applies to pull request targeting [\" + review.targetRef()\n+                                               + \"](\" + pr.repository().webUrl(new Branch(review.targetRef())) + \"))\";\n+                                   } else {\n+                                       var hash = review.hash();\n+                                       if (hash.isPresent()) {\n+                                           if (!hash.get().equals(pr.headHash())) {\n+                                               if (ignoreStaleReviews) {\n+                                                   entry += \" 🔄 Re-review required (review applies to [\" + hash.get().abbreviate()\n+                                                           + \"](\" + pr.filesUrl(hash.get()) + \"))\";\n+                                               } else {\n+                                                   entry += \" ⚠️ Review applies to [\" + hash.get().abbreviate()\n+                                                           + \"](\" + pr.filesUrl(hash.get()) + \")\";\n+                                               }\n@@ -513,0 +518,2 @@\n+                                       } else {\n+                                           entry += \" 🔄 Re-review required (review applies to a commit that is no longer present)\";\n@@ -514,2 +521,0 @@\n-                                   } else {\n-                                       entry += \" 🔄 Re-review required (review applies to a commit that is no longer present)\";\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":16,"deletions":11,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -80,1 +80,2 @@\n-                                        .map(review -> encodeReviewer(review.reviewer(), censusInstance) + review.hash().orElseThrow().hex())\n+                                        .map(review -> encodeReviewer(review.reviewer(), censusInstance) + review.targetRef()\n+                                                + review.hash().orElseThrow().hex())\n@@ -234,1 +235,1 @@\n-        var activeReviews = CheckablePullRequest.filterActiveReviews(allReviews);\n+        var activeReviews = CheckablePullRequest.filterActiveReviews(allReviews, pr.targetRef());\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckWorkItem.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -66,0 +66,1 @@\n+                                           .filter(review -> review.targetRef().equals(pr.targetRef()))\n@@ -129,2 +130,3 @@\n-     * The Review list is in chronological order, the latest one from a particular reviewer is the\n-     * one that is \"active\".\n+     * The latest one from a particular reviewer is the one that is \"active\".\n+     * Always prefer reviews with the same targetRef as the pull request\n+     * currently has.\n@@ -132,1 +134,1 @@\n-    static List<Review> filterActiveReviews(List<Review> allReviews) {\n+    static List<Review> filterActiveReviews(List<Review> allReviews, String targetRef) {\n@@ -135,1 +137,14 @@\n-            reviewPerUser.put(review.reviewer(), review);\n+            if (reviewPerUser.containsKey(review.reviewer())) {\n+                var prevReview = reviewPerUser.get(review.reviewer());\n+                var prevReviewCorrectTarget = prevReview.targetRef().equals(targetRef);\n+                var reviewCorrectTarget = review.targetRef().equals(targetRef);\n+                var reviewNewer = prevReview.createdAt().isBefore(review.createdAt());\n+\n+                if ((prevReviewCorrectTarget && reviewCorrectTarget && reviewNewer)\n+                        || (!prevReviewCorrectTarget && !reviewCorrectTarget && reviewNewer)\n+                        || (!prevReviewCorrectTarget && reviewCorrectTarget)) {\n+                    reviewPerUser.put(review.reviewer(), review);\n+                }\n+            } else {\n+                reviewPerUser.put(review.reviewer(), review);\n+            }\n@@ -137,1 +152,1 @@\n-        return new ArrayList<>(reviewPerUser.values());\n+        return List.copyOf(reviewPerUser.values());\n@@ -163,1 +178,1 @@\n-        var activeReviews = filterActiveReviews(pr.reviews());\n+        var activeReviews = filterActiveReviews(pr.reviews(), pr.targetRef());\n@@ -169,1 +184,1 @@\n-        var activeReviews = filterActiveReviews(pr.reviews());\n+        var activeReviews = filterActiveReviews(pr.reviews(), pr.targetRef());\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckablePullRequest.java","additions":22,"deletions":7,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -1512,0 +1512,35 @@\n+\n+            \/\/ Approve again\n+            approvalPr.addReview(Review.Verdict.APPROVED, \"Approved again\");\n+\n+            \/\/ Change the target ref of the PR\n+            localRepo.push(masterHash, author.url(), \"other-branch\", true);\n+            pr.setTargetRef(\"other-branch\");\n+\n+            \/\/ Check the status again\n+            TestBotRunner.runPeriodicItems(checkBot);\n+\n+            \/\/ The PR should no longer be ready, as the review is stale\n+            assertFalse(pr.store().labelNames().contains(\"ready\"));\n+            assertTrue(pr.store().labelNames().contains(\"rfr\"));\n+            assertTrue(pr.store().body().contains(\"Re-review required\"));\n+\n+            \/\/ Approve yet again\n+            approvalPr.addReview(Review.Verdict.APPROVED, \"Approved again\");\n+\n+            \/\/ Check the status again\n+            TestBotRunner.runPeriodicItems(checkBot);\n+\n+            \/\/ The PR should be flagged as ready\n+            assertTrue(pr.store().labelNames().contains(\"ready\"));\n+            assertFalse(pr.store().body().contains(\"Re-review required\"));\n+\n+            \/\/ Change target ref back to the original branch\n+            pr.setTargetRef(\"master\");\n+\n+            \/\/ Check the status again\n+            TestBotRunner.runPeriodicItems(checkBot);\n+\n+            \/\/ The PR should be flagged as ready, since the old review with that target is now valid again\n+            assertTrue(pr.store().labelNames().contains(\"ready\"));\n+            assertFalse(pr.store().body().contains(\"Re-review required\"));\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CheckTests.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -340,0 +340,5 @@\n+\n+    @Override\n+    public List<RefChange> targetRefChanges() {\n+        return List.of();\n+    }\n","filename":"bots\/tester\/src\/test\/java\/org\/openjdk\/skara\/bots\/tester\/InMemoryPullRequest.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-     * List of reviews, in descending chronological order.\n+     * List of reviews.\n@@ -115,0 +115,6 @@\n+    \/**\n+     * Returns a list of all targetRef change events.\n+     * @return\n+     *\/\n+    List<RefChange> targetRefChanges();\n+\n@@ -209,0 +215,30 @@\n+\n+    \/**\n+     * Helper method for implementations of this interface. Creates a new list\n+     * of Review objects with the targetRef field updated to match the target\n+     * ref change events. Ideally this method should have been part of a common\n+     * super class, but there isn't one.\n+     *\/\n+    static List<Review> calculateReviewTargetRefs(List<Review> reviews, List<RefChange> events) {\n+        if (events.isEmpty()) {\n+            return reviews;\n+        }\n+        var sortedEvents = events.stream()\n+                .sorted(Comparator.comparing(RefChange::createdAt))\n+                .toList();\n+        var lastTargetRef = sortedEvents.get(events.size() - 1).curRefName();\n+        return reviews.stream().map(orig -> {\n+                    for (var event : sortedEvents) {\n+                        if (event.createdAt().isAfter(orig.createdAt())\n+                                && !PreIntegrations.isPreintegrationBranch(event.prevRefName())) {\n+                            return new Review(orig, event.prevRefName());\n+                        }\n+                    }\n+                    if (orig.targetRef().equals(lastTargetRef)) {\n+                        return orig;\n+                    } else {\n+                        return new Review(orig, lastTargetRef);\n+                    }\n+                })\n+                .toList();\n+    }\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/PullRequest.java","additions":37,"deletions":1,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -0,0 +1,6 @@\n+package org.openjdk.skara.forge;\n+\n+import java.time.ZonedDateTime;\n+\n+public record RefChange(String prevRefName, String curRefName, ZonedDateTime createdAt) {\n+}\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/RefChange.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"added"},{"patch":"@@ -25,0 +25,1 @@\n+import java.util.Objects;\n@@ -38,0 +39,1 @@\n+    private final String targetRef;\n@@ -39,1 +41,2 @@\n-    public Review(ZonedDateTime createdAt, HostUser reviewer, Verdict verdict, Hash hash, int id, String body) {\n+    public Review(ZonedDateTime createdAt, HostUser reviewer, Verdict verdict, Hash hash, int id, String body,\n+            String targetRef) {\n@@ -46,0 +49,11 @@\n+        this.targetRef = targetRef;\n+    }\n+\n+    public Review(Review other, String targetRef) {\n+        this.createdAt = other.createdAt;\n+        this.reviewer = other.reviewer;\n+        this.verdict = other.verdict;\n+        this.hash = other.hash;\n+        this.id = other.id;\n+        this.body = other.body;\n+        this.targetRef = targetRef;\n@@ -76,0 +90,4 @@\n+    public String targetRef() {\n+        return targetRef;\n+    }\n+\n@@ -81,0 +99,24 @@\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        Review review;\n+        review = (Review) o;\n+        return id == review.id &&\n+                Objects.equals(createdAt, review.createdAt) &&\n+                Objects.equals(reviewer, review.reviewer) &&\n+                verdict == review.verdict &&\n+                Objects.equals(hash, review.hash) &&\n+                Objects.equals(body, review.body) &&\n+                Objects.equals(targetRef, review.targetRef);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(createdAt, reviewer, verdict, hash, id, body, targetRef);\n+    }\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/Review.java","additions":43,"deletions":1,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-import java.util.function.Function;\n@@ -85,0 +84,1 @@\n+        var currentTargetRef = targetRef();\n@@ -110,1 +110,1 @@\n-                                 return new Review(createdAt, reviewer, verdict, hash, id, body);\n+                                 return new Review(createdAt, reviewer, verdict, hash, id, body, currentTargetRef);\n@@ -114,4 +114,3 @@\n-        \/\/ The base ref cannot change for repos only using a single branch\n-        if (!repository.multipleBranches()) {\n-            return reviews;\n-        }\n+        var targetRefChanges = targetRefChanges();\n+        return PullRequest.calculateReviewTargetRefs(reviews, targetRefChanges);\n+    }\n@@ -119,0 +118,2 @@\n+    @Override\n+    public List<RefChange> targetRefChanges() {\n@@ -142,17 +143,9 @@\n-                       .post()\n-                       .body(JSON.object().put(\"query\", query))\n-                       .execute()\n-                       .get(\"data\");\n-        var lastBaseRefChange = data.get(\"repository\").get(\"pullRequest\").get(\"timelineItems\").get(\"nodes\").stream()\n-                                    .map(JSONValue::asObject)\n-                                    .filter(obj -> !PreIntegrations.isPreintegrationBranch(obj.get(\"currentRefName\").asString()))\n-                                    .filter(obj -> !PreIntegrations.isPreintegrationBranch(obj.get(\"previousRefName\").asString()))\n-                                    .map(obj -> ZonedDateTime.parse(obj.get(\"createdAt\").asString()))\n-                                    .max(Comparator.comparing(Function.identity()));\n-        if (lastBaseRefChange.isPresent()) {\n-            reviews = reviews.stream()\n-                             .filter(r -> r.createdAt().isAfter(lastBaseRefChange.get()))\n-                             .collect(Collectors.toList());;\n-        }\n-\n-        return reviews;\n+                .post()\n+                .body(JSON.object().put(\"query\", query))\n+                .execute()\n+                .get(\"data\");\n+        return data.get(\"repository\").get(\"pullRequest\").get(\"timelineItems\").get(\"nodes\").stream()\n+                .map(JSONValue::asObject)\n+                .map(obj -> new RefChange(obj.get(\"previousRefName\").asString(), obj.get(\"currentRefName\").asString(),\n+                        ZonedDateTime.parse(obj.get(\"createdAt\").asString())))\n+                .toList();\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubPullRequest.java","additions":16,"deletions":23,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import java.util.regex.Matcher;\n@@ -111,1 +112,3 @@\n-        var approvals = request.get(\"notes\").execute().stream()\n+        var currentTargetRef = targetRef();\n+        var notes = request.get(\"notes\").execute();\n+        var reviews = notes.stream()\n@@ -114,0 +117,1 @@\n+                               \/\/ This matches both approved and unapproved notes\n@@ -131,1 +135,1 @@\n-                                   return new Review(createdAt, reviewer, verdict, hash, id, \"\");\n+                                   return new Review(createdAt, reviewer, verdict, hash, id, \"\", currentTargetRef);\n@@ -133,1 +137,24 @@\n-        return approvals;\n+        var targetRefChanges = targetRefChanges(notes);\n+        return PullRequest.calculateReviewTargetRefs(reviews, targetRefChanges);\n+    }\n+\n+    private static final Pattern REF_CHANGES_PATTERN = Pattern.compile(\"changed target branch from `(.*)` to `(.*)`\");\n+    private List<RefChange> targetRefChanges(JSONValue notes) {\n+        return notes.stream()\n+                .map(JSONValue::asObject)\n+                .filter(obj -> obj.get(\"system\").asBoolean())\n+                .map(obj -> {\n+                    var matcher = REF_CHANGES_PATTERN.matcher(obj.get(\"body\").asString());\n+                    if (matcher.matches()) {\n+                        return new RefChange(matcher.group(1), matcher.group(2), ZonedDateTime.parse(obj.get(\"created_at\").asString()));\n+                    } else {\n+                        return null;\n+                    }\n+                })\n+                .filter(Objects::nonNull)\n+                .toList();\n+    }\n+\n+    @Override\n+    public List<RefChange> targetRefChanges() {\n+        return targetRefChanges(request.get(\"notes\").execute());\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabMergeRequest.java","additions":30,"deletions":3,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -0,0 +1,82 @@\n+package org.openjdk.skara.forge;\n+\n+import java.time.Duration;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class PullRequestTests {\n+\n+    @Test\n+    void calculateReviewTargetRefsSimple() {\n+        assertEquals(List.of(), PullRequest.calculateReviewTargetRefs(List.of(), List.of()));\n+        var review1 = newReview(ZonedDateTime.now(), 1, \"master\");\n+        assertEquals(List.of(review1), PullRequest.calculateReviewTargetRefs(List.of(review1), List.of()));\n+    }\n+\n+    @Test\n+    void calculateReviewTargetRefs2Changes() {\n+        var now = ZonedDateTime.now();\n+\n+        var refChange1 = new RefChange(\"first\", \"second\", now.minus(Duration.ofMinutes(4)));\n+        var refChange2 = new RefChange(\"second\", \"third\", now.minus(Duration.ofMinutes(2)));\n+\n+        var review1 = newReview(now.minus(Duration.ofMinutes(5)), 1, \"third\");\n+        var review2 = newReview(now.minus(Duration.ofMinutes(3)), 2, \"third\");\n+        var review3 = newReview(now.minus(Duration.ofMinutes(1)), 3, \"third\");\n+\n+        var reviews = PullRequest.calculateReviewTargetRefs(List.of(review1, review2, review3), List.of(refChange2, refChange1));\n+\n+        assertEquals(3, reviews.size());\n+        assertEquals(\"first\", reviews.get(0).targetRef());\n+        assertEquals(\"second\", reviews.get(1).targetRef());\n+        assertEquals(\"third\", reviews.get(2).targetRef());\n+    }\n+\n+    @Test\n+    void calculateReviewTargetRefsPreIntegrationBranch() {\n+        var now = ZonedDateTime.now();\n+\n+        var refChange1 = new RefChange(\"first\", \"pr\/4711\", now.minus(Duration.ofMinutes(4)));\n+        var refChange2 = new RefChange(\"pr\/4711\", \"third\", now.minus(Duration.ofMinutes(2)));\n+\n+        var review1 = newReview(now.minus(Duration.ofMinutes(5)), 1, \"\");\n+        var review2 = newReview(now.minus(Duration.ofMinutes(3)), 2, \"\");\n+        var review3 = newReview(now.minus(Duration.ofMinutes(1)), 3, \"third\");\n+\n+        var reviews = PullRequest.calculateReviewTargetRefs(List.of(review1, review2, review3), List.of(refChange1, refChange2));\n+\n+        assertEquals(3, reviews.size());\n+        assertEquals(\"first\", reviews.get(0).targetRef());\n+        assertEquals(\"third\", reviews.get(1).targetRef());\n+        assertEquals(\"third\", reviews.get(2).targetRef());\n+    }\n+\n+    @Test\n+    void calculateReviewTargetRefsPreIntegrationBranchLast() {\n+        var now = ZonedDateTime.now();\n+\n+        var refChange1 = new RefChange(\"first\", \"pr\/4711\", now.minus(Duration.ofMinutes(4)));\n+        var refChange2 = new RefChange(\"pr\/4711\", \"pr\/4712\", now.minus(Duration.ofMinutes(2)));\n+\n+        var review1 = newReview(now.minus(Duration.ofMinutes(5)), 1, \"\");\n+        var review2 = newReview(now.minus(Duration.ofMinutes(3)), 2, \"foo\");\n+        var review3 = newReview(now.minus(Duration.ofMinutes(1)), 3, \"pr\/4712\");\n+\n+        var reviews = PullRequest.calculateReviewTargetRefs(List.of(review1, review2, review3), List.of(refChange1, refChange2));\n+\n+        assertEquals(3, reviews.size());\n+        assertEquals(\"first\", reviews.get(0).targetRef());\n+        assertEquals(\"pr\/4712\", reviews.get(1).targetRef());\n+        assertEquals(\"pr\/4712\", reviews.get(2).targetRef());\n+    }\n+\n+    \/**\n+     * Creates a new review with just the relevant fields.\n+     *\/\n+    private Review newReview(ZonedDateTime createdAt, int id, String targetRef) {\n+        return new Review(createdAt, null, Review.Verdict.APPROVED, null, id, null, targetRef);\n+    }\n+}\n","filename":"forge\/src\/test\/java\/org\/openjdk\/skara\/forge\/PullRequestTests.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"},{"patch":"@@ -86,1 +86,1 @@\n-        return new ArrayList<>(store().reviews());\n+        return PullRequest.calculateReviewTargetRefs(store().reviews(), targetRefChanges());\n@@ -95,1 +95,1 @@\n-                                    body);\n+                                    body, targetRef);\n@@ -163,0 +163,5 @@\n+    @Override\n+    public List<RefChange> targetRefChanges() {\n+        return store().targetRefChanges();\n+    }\n+\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestPullRequest.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import org.openjdk.skara.issuetracker.IssueProject;\n@@ -49,0 +48,1 @@\n+    private final List<RefChange> targetRefChanges = new ArrayList<>();\n@@ -113,0 +113,1 @@\n+        targetRefChanges.add(new RefChange(this.targetRef, targetRef, ZonedDateTime.now()));\n@@ -116,0 +117,4 @@\n+    public List<RefChange> targetRefChanges() {\n+        return targetRefChanges;\n+    }\n+\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestPullRequestStore.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"}]}