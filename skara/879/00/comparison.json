{"files":[{"patch":"@@ -71,1 +71,1 @@\n-    public Optional<HostedCommitMetadata> search(Hash hash) {\n+    public Optional<HostedCommit> search(Hash hash) {\n","filename":"bots\/tester\/src\/test\/java\/org\/openjdk\/skara\/bots\/tester\/InMemoryHost.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-    Optional<HostedCommitMetadata> search(Hash hash);\n+    Optional<HostedCommit> search(Hash hash);\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/Forge.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,112 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.forge;\n+\n+import org.openjdk.skara.vcs.*;\n+\n+import java.net.URI;\n+import java.util.*;\n+import java.time.*;\n+import java.time.format.*;\n+\n+public class HostedCommit {\n+    private final CommitMetadata metadata;\n+    private final List<Diff> parentDiffs;\n+    private final URI url;\n+\n+    public HostedCommit(CommitMetadata metadata, List<Diff> parentDiffs, URI url) {\n+        this.metadata = metadata;\n+        this.parentDiffs = parentDiffs;\n+        this.url = url;\n+    }\n+\n+    public Hash hash() {\n+        return metadata.hash();\n+    }\n+\n+    public Author author() {\n+        return metadata.author();\n+    }\n+\n+    public Author committer() {\n+        return metadata.committer();\n+    }\n+\n+    public List<String> message() {\n+        return metadata.message();\n+    }\n+\n+    public List<Hash> parents() {\n+        return metadata.parents();\n+    }\n+\n+    public ZonedDateTime authored() {\n+        return metadata.authored();\n+    }\n+\n+    public ZonedDateTime committed() {\n+        return metadata.committed();\n+    }\n+\n+    public boolean isInitialCommit() {\n+        return metadata.isInitialCommit();\n+    }\n+\n+    public boolean isMerge() {\n+        return metadata.isMerge();\n+    }\n+\n+    public int numParents() {\n+        return metadata.numParents();\n+    }\n+\n+    public List<Diff> parentDiffs() {\n+        return parentDiffs;\n+    }\n+\n+    public URI url() {\n+        return url;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return url.toString();\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(metadata, url);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (!(o instanceof HostedCommit)) {\n+            return false;\n+        }\n+\n+        var other = (HostedCommit) o;\n+        return Objects.equals(metadata, other.metadata) &&\n+               Objects.equals(parentDiffs, other.parentDiffs) &&\n+               Objects.equals(url, other.url);\n+    }\n+}\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/HostedCommit.java","additions":112,"deletions":0,"binary":false,"changes":112,"status":"added"},{"patch":"@@ -1,105 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.skara.forge;\n-\n-import org.openjdk.skara.vcs.*;\n-\n-import java.net.URI;\n-import java.util.*;\n-import java.time.*;\n-import java.time.format.*;\n-\n-public class HostedCommitMetadata {\n-    private final CommitMetadata metadata;\n-    private final URI url;\n-\n-    public HostedCommitMetadata(CommitMetadata metadata, URI url) {\n-        this.metadata = metadata;\n-        this.url = url;\n-    }\n-\n-    public Hash hash() {\n-        return metadata.hash();\n-    }\n-\n-    public Author author() {\n-        return metadata.author();\n-    }\n-\n-    public Author committer() {\n-        return metadata.committer();\n-    }\n-\n-    public List<String> message() {\n-        return metadata.message();\n-    }\n-\n-    public List<Hash> parents() {\n-        return metadata.parents();\n-    }\n-\n-    public ZonedDateTime authored() {\n-        return metadata.authored();\n-    }\n-\n-    public ZonedDateTime committed() {\n-        return metadata.committed();\n-    }\n-\n-    public boolean isInitialCommit() {\n-        return metadata.isInitialCommit();\n-    }\n-\n-    public boolean isMerge() {\n-        return metadata.isMerge();\n-    }\n-\n-    public int numParents() {\n-        return metadata.numParents();\n-    }\n-\n-    public URI url() {\n-        return url;\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return url.toString();\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        return Objects.hash(metadata, url);\n-    }\n-\n-    @Override\n-    public boolean equals(Object o) {\n-        if (!(o instanceof HostedCommitMetadata)) {\n-            return false;\n-        }\n-\n-        var other = (HostedCommitMetadata) o;\n-        return Objects.equals(metadata, other.metadata) &&\n-               Objects.equals(url, other.url);\n-    }\n-}\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/HostedCommitMetadata.java","additions":0,"deletions":105,"binary":false,"changes":105,"status":"deleted"},{"patch":"@@ -34,0 +34,1 @@\n+import java.nio.file.Path;\n@@ -349,0 +350,22 @@\n+    Diff toDiff(Hash from, Hash to, JSONValue files) {\n+        var patches = new ArrayList<Patch>();\n+\n+        for (var file : files.asArray()) {\n+            var status = Status.from(file.get(\"status\").asString().toUpperCase().charAt(0));\n+            var targetPath = Path.of(file.get(\"filename\").asString());\n+            var sourcePath = status.isRenamed() || status.isCopied() ?\n+                Path.of(file.get(\"previous_filename\").asString()) :\n+                targetPath;\n+            var filetype = FileType.fromOctal(\"100644\");\n+\n+            var diff = file.get(\"patch\").asString().split(\"\\n\");\n+            var hunks = UnifiedDiffParser.parseSingleFileDiff(diff);\n+\n+            patches.add(new TextualPatch(sourcePath, filetype, Hash.zero(),\n+                                         targetPath, filetype, Hash.zero(),\n+                                         status, hunks));\n+        }\n+\n+        return new Diff(from, to, patches);\n+    }\n+\n@@ -350,1 +373,1 @@\n-    public Optional<HostedCommitMetadata> search(Hash hash) {\n+    public Optional<HostedCommit> search(Hash hash) {\n@@ -362,0 +385,1 @@\n+        var diff = toDiff(metadata.parents().get(0), hash, first.get(\"files\"));\n@@ -363,1 +387,1 @@\n-        return Optional.of(new HostedCommitMetadata(metadata, url));\n+        return Optional.of(new HostedCommit(metadata, List.of(diff), url));\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubHost.java","additions":26,"deletions":2,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import java.nio.file.Path;\n@@ -236,0 +237,30 @@\n+    Diff toDiff(Hash from, Hash to, JSONValue o) {\n+        var patches = new ArrayList<Patch>();\n+\n+        for (var file : o.asArray()) {\n+            var sourcePath = Path.of(file.get(\"old_path\").asString());\n+            var sourceFileType = FileType.fromOctal(file.get(\"a_mode\").asString());\n+\n+            var targetPath = Path.of(file.get(\"new_path\").asString());\n+            var targetFileType = FileType.fromOctal(file.get(\"b_mode\").asString());\n+\n+            var status = Status.from('M');\n+            if (file.get(\"new_file\").asBoolean()) {\n+                status = Status.from('A');\n+            } else if (file.get(\"renamed_file\").asBoolean()) {\n+                status = Status.from('R');\n+            } else if (file.get(\"deleted_file\").asBoolean()) {\n+                status = Status.from('D');\n+            }\n+\n+            var diff = file.get(\"diff\").asString().split(\"\\n\");\n+            var hunks = UnifiedDiffParser.parseSingleFileDiff(diff);\n+\n+            patches.add(new TextualPatch(sourcePath, sourceFileType, Hash.zero(),\n+                                         targetPath, targetFileType, Hash.zero(),\n+                                         status, hunks));\n+        }\n+\n+        return new Diff(from, to, patches);\n+    }\n+\n@@ -237,1 +268,1 @@\n-    public Optional<HostedCommitMetadata> search(Hash hash) {\n+    public Optional<HostedCommit> search(Hash hash) {\n@@ -252,1 +283,8 @@\n-                    return Optional.of(new HostedCommitMetadata(metadata, url));\n+                    var diff = request.get(\"projects\/\" + project + \"\/repository\/commits\/\" + hex + \"\/diff\")\n+                                   .onError(r -> Optional.of(JSON.of()))\n+                                   .execute();\n+                    var parentDiffs = new ArrayList<Diff>();\n+                    if (!diff.isNull()) {\n+                        parentDiffs.add(toDiff(metadata.parents().get(0), hash, diff));\n+                    }\n+                    return Optional.of(new HostedCommit(metadata, parentDiffs, url));\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabHost.java","additions":40,"deletions":2,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -158,1 +158,1 @@\n-    public Optional<HostedCommitMetadata> search(Hash hash) {\n+    public Optional<HostedCommit> search(Hash hash) {\n@@ -165,1 +165,1 @@\n-                    return Optional.of(new HostedCommitMetadata(commit.get().metadata(), url));\n+                    return Optional.of(new HostedCommit(commit.get().metadata(), commit.get().parentDiffs(), url));\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestHost.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}