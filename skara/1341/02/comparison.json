{"files":[{"patch":"@@ -27,1 +27,0 @@\n-import org.openjdk.skara.issuetracker.Comment;\n@@ -54,2 +53,0 @@\n-    private final static Pattern pushedPattern = Pattern.compile(\"Pushed as commit ([a-f0-9]{40})\\\\.\");\n-\n@@ -57,12 +54,1 @@\n-        if (pr.labelNames().contains(\"integrated\")) {\n-            return pr.comments().stream()\n-                     .filter(comment -> comment.author().id().equals(integratorId))\n-                     .map(Comment::body)\n-                     .map(pushedPattern::matcher)\n-                     .filter(Matcher::find)\n-                     .map(m -> m.group(1))\n-                     .map(Hash::new)\n-                     .findAny()\n-                     .orElse(null);\n-        }\n-        return null;\n+        return integratorId != null ? pr.findIntegratedCommitHash(List.of(integratorId)).orElse(null) : null;\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/PullRequestWorkItem.java","additions":1,"deletions":15,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+import org.openjdk.skara.forge.PullRequest;\n@@ -55,2 +56,3 @@\n-    public boolean allowedInPullRequest() {\n-        return false;\n+    public void handle(PullRequestBot bot, PullRequest pr, CensusInstance censusInstance, Path scratchPath,\n+                CommandInvocation command, List<Comment> allComments, PrintWriter reply) {\n+        reply.println(\"The command `backport` can not be used in a pull request that has not yet been integrated.\");\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/BackportCommand.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,3 @@\n+import org.openjdk.skara.forge.HostedCommit;\n+import org.openjdk.skara.forge.PullRequest;\n+import org.openjdk.skara.issuetracker.Comment;\n@@ -27,0 +30,2 @@\n+import java.io.PrintWriter;\n+import java.nio.file.Path;\n@@ -29,0 +34,1 @@\n+import java.util.stream.Stream;\n@@ -41,1 +47,57 @@\n-    static List<CommandInvocation> extractCommands(Map<String, CommandHandler> commandHandlers, String text, String baseId, HostUser user) {\n+    private static final Map<String, CommandHandler> commandHandlers = Map.ofEntries(\n+            Map.entry(\"help\", new HelpCommand()),\n+            Map.entry(\"integrate\", new IntegrateCommand()),\n+            Map.entry(\"sponsor\", new SponsorCommand()),\n+            Map.entry(\"contributor\", new ContributorCommand()),\n+            Map.entry(\"summary\", new SummaryCommand()),\n+            Map.entry(\"issue\", new IssueCommand()),\n+            Map.entry(\"solves\", new IssueCommand(\"solves\")),\n+            Map.entry(\"reviewers\", new ReviewersCommand()),\n+            Map.entry(\"csr\", new CSRCommand()),\n+            Map.entry(\"jep\", new JEPCommand()),\n+            Map.entry(\"reviewer\", new ReviewerCommand()),\n+            Map.entry(\"label\", new LabelCommand()),\n+            Map.entry(\"cc\", new LabelCommand(\"cc\")),\n+            Map.entry(\"clean\", new CleanCommand()),\n+            Map.entry(\"open\", new OpenCommand()),\n+            Map.entry(\"backport\", new BackportCommand()),\n+            Map.entry(\"tag\", new TagCommand())\n+    );\n+\n+    static class HelpCommand implements CommandHandler {\n+        @Override\n+        public void handle(PullRequestBot bot, PullRequest pr, CensusInstance censusInstance, Path scratchPath, CommandInvocation command, List<Comment> allComments, PrintWriter reply) {\n+            reply.println(\"Available commands:\");\n+            Stream.concat(\n+                    commandHandlers.entrySet().stream()\n+                            .filter(entry -> entry.getValue().allowedInPullRequest())\n+                            .map(entry -> entry.getKey() + \" - \" + entry.getValue().description()),\n+                    bot.externalPullRequestCommands().entrySet().stream()\n+                            .map(entry -> entry.getKey() + \" - \" + entry.getValue())\n+            ).sorted().forEachOrdered(c -> reply.println(\" * \" + c));\n+        }\n+\n+        @Override\n+        public void handle(PullRequestBot bot, HostedCommit hash, CensusInstance censusInstance, Path scratchPath, CommandInvocation command, List<Comment> allComments, PrintWriter reply) {\n+            reply.println(\"Available commands:\");\n+            Stream.concat(\n+                    commandHandlers.entrySet().stream()\n+                            .filter(entry -> entry.getValue().allowedInCommit())\n+                            .map(entry -> entry.getKey() + \" - \" + entry.getValue().description()),\n+                    bot.externalCommitCommands().entrySet().stream()\n+                            .map(entry -> entry.getKey() + \" - \" + entry.getValue())\n+            ).sorted().forEachOrdered(c -> reply.println(\" * \" + c));\n+        }\n+\n+        @Override\n+        public String description() {\n+            return \"shows this text\";\n+        }\n+\n+        @Override\n+        public boolean allowedInCommit() {\n+            return true;\n+        }\n+    }\n+\n+    static List<CommandInvocation> extractCommands(String text, String baseId, HostUser user) {\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CommandExtractor.java","additions":64,"deletions":2,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,29 +47,0 @@\n-    private static final Map<String, CommandHandler> commandHandlers = Map.ofEntries(\n-            Map.entry(\"help\", new HelpCommand()),\n-            Map.entry(\"backport\", new BackportCommand()),\n-            Map.entry(\"tag\", new TagCommand())\n-    );\n-\n-    static class HelpCommand implements CommandHandler {\n-        @Override\n-        public void handle(PullRequestBot bot, HostedCommit commit, CensusInstance censusInstance, Path scratchPath, CommandInvocation command, List<Comment> allComments, PrintWriter reply) {\n-            reply.println(\"Available commands:\");\n-            Stream.concat(\n-                    commandHandlers.entrySet().stream()\n-                                   .map(entry -> entry.getKey() + \" - \" + entry.getValue().description()),\n-                    bot.externalCommitCommands().entrySet().stream()\n-                       .map(entry -> entry.getKey() + \" - \" + entry.getValue())\n-            ).sorted().forEachOrdered(c -> reply.println(\" * \" + c));\n-        }\n-\n-        @Override\n-        public String description() {\n-            return \"shows this text\";\n-        }\n-\n-        @Override\n-        public boolean allowedInCommit() {\n-            return true;\n-        }\n-    }\n-\n@@ -98,1 +69,1 @@\n-        var command = CommandExtractor.extractCommands(commandHandlers, commitComment.body(),\n+        var command = CommandExtractor.extractCommands(commitComment.body(),\n@@ -147,0 +118,1 @@\n+\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CommitCommandWorkItem.java","additions":3,"deletions":31,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import org.openjdk.skara.vcs.Hash;\n@@ -43,19 +42,0 @@\n-    private final static Pattern pushedPattern = Pattern.compile(\"Pushed as commit ([a-f0-9]{40})\\\\.\");\n-\n-    private static final Map<String, CommandHandler> commandHandlers = Map.ofEntries(\n-            Map.entry(\"help\", new HelpCommand()),\n-            Map.entry(\"integrate\", new IntegrateCommand()),\n-            Map.entry(\"sponsor\", new SponsorCommand()),\n-            Map.entry(\"contributor\", new ContributorCommand()),\n-            Map.entry(\"summary\", new SummaryCommand()),\n-            Map.entry(\"issue\", new IssueCommand()),\n-            Map.entry(\"solves\", new IssueCommand(\"solves\")),\n-            Map.entry(\"reviewers\", new ReviewersCommand()),\n-            Map.entry(\"csr\", new CSRCommand()),\n-            Map.entry(\"jep\", new JEPCommand()),\n-            Map.entry(\"reviewer\", new ReviewerCommand()),\n-            Map.entry(\"label\", new LabelCommand()),\n-            Map.entry(\"cc\", new LabelCommand(\"cc\")),\n-            Map.entry(\"clean\", new CleanCommand()),\n-            Map.entry(\"open\", new OpenCommand())\n-    );\n@@ -65,36 +45,0 @@\n-    static class HelpCommand implements CommandHandler {\n-        @Override\n-        public void handle(PullRequestBot bot, PullRequest pr, CensusInstance censusInstance, Path scratchPath, CommandInvocation command, List<Comment> allComments, PrintWriter reply) {\n-            reply.println(\"Available commands:\");\n-            Stream.concat(\n-                    commandHandlers.entrySet().stream()\n-                                   .filter(entry -> entry.getValue().allowedInPullRequest())\n-                                   .map(entry -> entry.getKey() + \" - \" + entry.getValue().description()),\n-                    bot.externalPullRequestCommands().entrySet().stream()\n-                                          .map(entry -> entry.getKey() + \" - \" + entry.getValue())\n-            ).sorted().forEachOrdered(c -> reply.println(\" * \" + c));\n-        }\n-\n-        @Override\n-        public void handle(PullRequestBot bot, HostedCommit hash, CensusInstance censusInstance, Path scratchPath, CommandInvocation command, List<Comment> allComments, PrintWriter reply) {\n-            reply.println(\"Available commands:\");\n-            Stream.concat(\n-                    commandHandlers.entrySet().stream()\n-                                   .filter(entry -> entry.getValue().allowedInCommit())\n-                                   .map(entry -> entry.getKey() + \" - \" + entry.getValue().description()),\n-                    bot.externalPullRequestCommands().entrySet().stream()\n-                       .map(entry -> entry.getKey() + \" - \" + entry.getValue())\n-            ).sorted().forEachOrdered(c -> reply.println(\" * \" + c));\n-        }\n-\n-        @Override\n-        public String description() {\n-            return \"shows this text\";\n-        }\n-\n-        @Override\n-        public boolean allowedInCommit() {\n-            return true;\n-        }\n-    }\n-\n@@ -120,1 +64,1 @@\n-        var allCommands = Stream.concat(CommandExtractor.extractCommands(commandHandlers, body, \"body\", pr.author()).stream(),\n+        var allCommands = Stream.concat(CommandExtractor.extractCommands(body, \"body\", pr.author()).stream(),\n@@ -123,1 +67,1 @@\n-                                                .flatMap(c -> CommandExtractor.extractCommands(commandHandlers, c.body(), c.id(), c.author()).stream()))\n+                                                .flatMap(c -> CommandExtractor.extractCommands(c.body(), c.id(), c.author()).stream()))\n@@ -139,11 +83,0 @@\n-    private Optional<Hash> resultingCommitHash(List<Comment> allComments) {\n-        return allComments.stream()\n-                 .filter(comment -> comment.author().id().equals(pr.repository().forge().currentUser().id()))\n-                 .map(Comment::body)\n-                 .map(pushedPattern::matcher)\n-                 .filter(Matcher::find)\n-                 .map(m -> m.group(1))\n-                 .map(Hash::new)\n-                 .findAny();\n-    }\n-\n@@ -187,1 +120,1 @@\n-                    var hash = resultingCommitHash(allComments);\n+                    var hash = pr.findIntegratedCommitHash();\n@@ -192,0 +125,3 @@\n+                        \/\/ FIXME the argument `isCommit` is true here, which means the PR already has the `integrated` label\n+                        \/\/  and has the integrated commit hash, so this branch would never be run.\n+                        \/\/  Maybe this branch could be removed. And this branch can not be tested now.\n@@ -215,1 +151,1 @@\n-                    printer.println(\"` can only be used in a pull request that has not yet been integrated.\");\n+                    printer.println(\"` can not be used in pull requests.\");\n@@ -258,1 +194,1 @@\n-        if (!pr.labelNames().contains(\"integrated\") || resultingCommitHash(comments).isEmpty()) {\n+        if (!pr.labelNames().contains(\"integrated\") || pr.findIntegratedCommitHash().isEmpty()) {\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestCommandWorkItem.java","additions":8,"deletions":72,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -72,0 +72,7 @@\n+            \/\/ Add a command which is only valid in pull request\n+            author.addCommitComment(editHash, \"\/issue 12\");\n+            TestBotRunner.runPeriodicItems(bot);\n+\n+            replies = author.commitComments(editHash);\n+            CommitCommandAsserts.assertLastCommentContains(replies, \"The command `issue` can only be used in pull requests.\");\n+\n@@ -77,1 +84,1 @@\n-            CommitCommandAsserts.assertLastCommentContains(replies, \"Unknown\");\n+            CommitCommandAsserts.assertLastCommentContains(replies, \"Unknown command `hello` - for a list of valid commands use `\/help`.\");\n@@ -98,0 +105,1 @@\n+                                    .forks(Map.of(\"jdk17u-dev\", credentials.getHostedRepository()))\n@@ -110,0 +118,6 @@\n+            \/\/ Add a `backport` command\n+            pr.addComment(\"\/backport jdk17u-dev\");\n+            TestBotRunner.runPeriodicItems(bot);\n+            \/\/ The `backport` command is invalid because the pull request is not integrated.\n+            PullRequestAsserts.assertLastCommentContains(pr, \"The command `backport` can not be used in a pull request that has not yet been integrated.\");\n+\n@@ -122,0 +136,7 @@\n+            \/\/ Add a `backport` command\n+            pr.addComment(\"\/backport jdk17u-dev\");\n+            TestBotRunner.runPeriodicItems(bot);\n+            \/\/ The `backport` command is valid.\n+            PullRequestAsserts.assertLastCommentContains(pr, \"Could **not** automatically backport\");\n+            PullRequestAsserts.assertLastCommentContains(pr, \"To manually resolve these conflicts\");\n+\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CommitCommandTests.java","additions":23,"deletions":2,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,0 +59,5 @@\n+            \/\/ Issue a commit command\n+            pr.addComment(\"\/tag\");\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+            PullRequestAsserts.assertLastCommentContains(pr, \"The command `tag` can not be used in pull requests.\");\n+\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestCommandTests.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -335,0 +335,5 @@\n+\n+    @Override\n+    public Optional<Hash> findIntegratedCommitHash() {\n+        return Optional.empty();\n+    }\n","filename":"bots\/tester\/src\/test\/java\/org\/openjdk\/skara\/bots\/tester\/InMemoryPullRequest.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -25,0 +25,3 @@\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import org.openjdk.skara.issuetracker.Comment;\n@@ -179,0 +182,20 @@\n+\n+    \/**\n+     * Return the commit hash if the pull request was integrated.\n+     *\/\n+    Optional<Hash> findIntegratedCommitHash();\n+\n+    default Optional<Hash> findIntegratedCommitHash(List<String> userIds) {\n+        Pattern pushedPattern = Pattern.compile(\"Pushed as commit ([a-f0-9]{40})\\\\.\");\n+        if (labelNames().contains(\"integrated\")) {\n+            return comments().stream()\n+                    .filter(comment -> userIds.contains(comment.author().id()))\n+                    .map(Comment::body)\n+                    .map(pushedPattern::matcher)\n+                    .filter(Matcher::find)\n+                    .map(m -> m.group(1))\n+                    .map(Hash::new)\n+                    .findAny();\n+        }\n+        return Optional.empty();\n+    }\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/PullRequest.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -780,0 +780,5 @@\n+\n+    @Override\n+    public Optional<Hash> findIntegratedCommitHash() {\n+        return findIntegratedCommitHash(List.of(repository.forge().currentUser().id()));\n+    }\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubPullRequest.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -861,0 +861,5 @@\n+\n+    @Override\n+    public Optional<Hash> findIntegratedCommitHash() {\n+        return findIntegratedCommitHash(List.of(repository.forge().currentUser().id()));\n+    }\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabMergeRequest.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import java.util.List;\n@@ -108,0 +109,23 @@\n+\n+    @Test\n+    void testFindIntegratedCommitHash() {\n+        var playgroundRepoOpt = githubHost.repository(\"openjdk\/playground\");\n+        assumeTrue(playgroundRepoOpt.isPresent());\n+        var playgroundRepo = playgroundRepoOpt.get();\n+        var playgroundPr = playgroundRepo.pullRequest(\"96\");\n+        var playgroundHashOpt = playgroundPr.findIntegratedCommitHash();\n+        assertTrue(playgroundHashOpt.isEmpty());\n+        \/\/ `43336822` is the id of the `openjdk` bot(a GitHub App).\n+        playgroundHashOpt = playgroundPr.findIntegratedCommitHash(List.of(\"43336822\"));\n+        assertTrue(playgroundHashOpt.isEmpty());\n+\n+        var jdkRepoOpt = githubHost.repository(\"openjdk\/jdk\");\n+        assumeTrue(jdkRepoOpt.isPresent());\n+        var jdkRepo = jdkRepoOpt.get();\n+        var jdkPr = jdkRepo.pullRequest(\"8648\");\n+        var jdkHashOpt = jdkPr.findIntegratedCommitHash();\n+        assertTrue(jdkHashOpt.isEmpty());\n+        \/\/ `43336822` is the id of the `openjdk` bot(a GitHub App).\n+        jdkHashOpt = jdkPr.findIntegratedCommitHash(List.of(\"43336822\"));\n+        assertTrue(jdkHashOpt.isPresent());\n+    }\n","filename":"forge\/src\/test\/java\/org\/openjdk\/skara\/forge\/github\/GitHubRestApiTests.java","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -274,0 +274,5 @@\n+\n+    @Override\n+    public Optional<Hash> findIntegratedCommitHash() {\n+        return findIntegratedCommitHash(List.of(repository().forge().currentUser().id()));\n+    }\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestPullRequest.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}