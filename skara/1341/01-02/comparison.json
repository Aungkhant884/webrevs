{"files":[{"patch":"@@ -53,0 +53,4 @@\n+    private Hash resultingCommitHash() {\n+        return integratorId != null ? pr.findIntegratedCommitHash(List.of(integratorId)).orElse(null) : null;\n+    }\n+\n@@ -187,1 +191,1 @@\n-        var commit = integratorId != null ? pr.findIntegratedCommitHash(List.of(integratorId)).orElse(null) : null;\n+        var commit = resultingCommitHash();\n@@ -202,1 +206,1 @@\n-                var hash = integratorId != null ? pr.findIntegratedCommitHash(List.of(integratorId)).orElse(null) : null;\n+                var hash = resultingCommitHash();\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/PullRequestWorkItem.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -25,0 +25,3 @@\n+import org.openjdk.skara.forge.HostedCommit;\n+import org.openjdk.skara.forge.PullRequest;\n+import org.openjdk.skara.issuetracker.Comment;\n@@ -27,0 +30,2 @@\n+import java.io.PrintWriter;\n+import java.nio.file.Path;\n@@ -29,0 +34,1 @@\n+import java.util.stream.Stream;\n@@ -41,1 +47,57 @@\n-    static List<CommandInvocation> extractCommands(boolean commitCommandFirst, String text, String baseId, HostUser user) {\n+    private static final Map<String, CommandHandler> commandHandlers = Map.ofEntries(\n+            Map.entry(\"help\", new HelpCommand()),\n+            Map.entry(\"integrate\", new IntegrateCommand()),\n+            Map.entry(\"sponsor\", new SponsorCommand()),\n+            Map.entry(\"contributor\", new ContributorCommand()),\n+            Map.entry(\"summary\", new SummaryCommand()),\n+            Map.entry(\"issue\", new IssueCommand()),\n+            Map.entry(\"solves\", new IssueCommand(\"solves\")),\n+            Map.entry(\"reviewers\", new ReviewersCommand()),\n+            Map.entry(\"csr\", new CSRCommand()),\n+            Map.entry(\"jep\", new JEPCommand()),\n+            Map.entry(\"reviewer\", new ReviewerCommand()),\n+            Map.entry(\"label\", new LabelCommand()),\n+            Map.entry(\"cc\", new LabelCommand(\"cc\")),\n+            Map.entry(\"clean\", new CleanCommand()),\n+            Map.entry(\"open\", new OpenCommand()),\n+            Map.entry(\"backport\", new BackportCommand()),\n+            Map.entry(\"tag\", new TagCommand())\n+    );\n+\n+    static class HelpCommand implements CommandHandler {\n+        @Override\n+        public void handle(PullRequestBot bot, PullRequest pr, CensusInstance censusInstance, Path scratchPath, CommandInvocation command, List<Comment> allComments, PrintWriter reply) {\n+            reply.println(\"Available commands:\");\n+            Stream.concat(\n+                    commandHandlers.entrySet().stream()\n+                            .filter(entry -> entry.getValue().allowedInPullRequest())\n+                            .map(entry -> entry.getKey() + \" - \" + entry.getValue().description()),\n+                    bot.externalPullRequestCommands().entrySet().stream()\n+                            .map(entry -> entry.getKey() + \" - \" + entry.getValue())\n+            ).sorted().forEachOrdered(c -> reply.println(\" * \" + c));\n+        }\n+\n+        @Override\n+        public void handle(PullRequestBot bot, HostedCommit hash, CensusInstance censusInstance, Path scratchPath, CommandInvocation command, List<Comment> allComments, PrintWriter reply) {\n+            reply.println(\"Available commands:\");\n+            Stream.concat(\n+                    commandHandlers.entrySet().stream()\n+                            .filter(entry -> entry.getValue().allowedInCommit())\n+                            .map(entry -> entry.getKey() + \" - \" + entry.getValue().description()),\n+                    bot.externalCommitCommands().entrySet().stream()\n+                            .map(entry -> entry.getKey() + \" - \" + entry.getValue())\n+            ).sorted().forEachOrdered(c -> reply.println(\" * \" + c));\n+        }\n+\n+        @Override\n+        public String description() {\n+            return \"shows this text\";\n+        }\n+\n+        @Override\n+        public boolean allowedInCommit() {\n+            return true;\n+        }\n+    }\n+\n+    static List<CommandInvocation> extractCommands(String text, String baseId, HostUser user) {\n@@ -55,4 +117,1 @@\n-                var handler = commitCommandFirst ? CommitCommandWorkItem.commandHandlers.get(command) : PullRequestCommandWorkItem.commandHandlers.get(command);\n-                if (handler == null) {\n-                    handler = commitCommandFirst ? PullRequestCommandWorkItem.commandHandlers.get(command) : CommitCommandWorkItem.commandHandlers.get(command);\n-                }\n+                var handler = commandHandlers.get(command);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CommandExtractor.java","additions":64,"deletions":5,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -47,29 +47,0 @@\n-    static final Map<String, CommandHandler> commandHandlers = Map.ofEntries(\n-            Map.entry(\"help\", new HelpCommand()),\n-            Map.entry(\"backport\", new BackportCommand()),\n-            Map.entry(\"tag\", new TagCommand())\n-    );\n-\n-    static class HelpCommand implements CommandHandler {\n-        @Override\n-        public void handle(PullRequestBot bot, HostedCommit commit, CensusInstance censusInstance, Path scratchPath, CommandInvocation command, List<Comment> allComments, PrintWriter reply) {\n-            reply.println(\"Available commands:\");\n-            Stream.concat(\n-                    commandHandlers.entrySet().stream()\n-                                   .map(entry -> entry.getKey() + \" - \" + entry.getValue().description()),\n-                    bot.externalCommitCommands().entrySet().stream()\n-                       .map(entry -> entry.getKey() + \" - \" + entry.getValue())\n-            ).sorted().forEachOrdered(c -> reply.println(\" * \" + c));\n-        }\n-\n-        @Override\n-        public String description() {\n-            return \"shows this text\";\n-        }\n-\n-        @Override\n-        public boolean allowedInCommit() {\n-            return true;\n-        }\n-    }\n-\n@@ -98,1 +69,1 @@\n-        var command = CommandExtractor.extractCommands(true, commitComment.body(),\n+        var command = CommandExtractor.extractCommands(commitComment.body(),\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CommitCommandWorkItem.java","additions":1,"deletions":30,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -43,18 +43,0 @@\n-    static final Map<String, CommandHandler> commandHandlers = Map.ofEntries(\n-            Map.entry(\"help\", new HelpCommand()),\n-            Map.entry(\"integrate\", new IntegrateCommand()),\n-            Map.entry(\"sponsor\", new SponsorCommand()),\n-            Map.entry(\"contributor\", new ContributorCommand()),\n-            Map.entry(\"summary\", new SummaryCommand()),\n-            Map.entry(\"issue\", new IssueCommand()),\n-            Map.entry(\"solves\", new IssueCommand(\"solves\")),\n-            Map.entry(\"reviewers\", new ReviewersCommand()),\n-            Map.entry(\"csr\", new CSRCommand()),\n-            Map.entry(\"jep\", new JEPCommand()),\n-            Map.entry(\"reviewer\", new ReviewerCommand()),\n-            Map.entry(\"label\", new LabelCommand()),\n-            Map.entry(\"cc\", new LabelCommand(\"cc\")),\n-            Map.entry(\"clean\", new CleanCommand()),\n-            Map.entry(\"open\", new OpenCommand())\n-    );\n-\n@@ -63,36 +45,0 @@\n-    static class HelpCommand implements CommandHandler {\n-        @Override\n-        public void handle(PullRequestBot bot, PullRequest pr, CensusInstance censusInstance, Path scratchPath, CommandInvocation command, List<Comment> allComments, PrintWriter reply) {\n-            reply.println(\"Available commands:\");\n-            Stream.concat(\n-                    commandHandlers.entrySet().stream()\n-                                   .filter(entry -> entry.getValue().allowedInPullRequest())\n-                                   .map(entry -> entry.getKey() + \" - \" + entry.getValue().description()),\n-                    bot.externalPullRequestCommands().entrySet().stream()\n-                                          .map(entry -> entry.getKey() + \" - \" + entry.getValue())\n-            ).sorted().forEachOrdered(c -> reply.println(\" * \" + c));\n-        }\n-\n-        @Override\n-        public void handle(PullRequestBot bot, HostedCommit hash, CensusInstance censusInstance, Path scratchPath, CommandInvocation command, List<Comment> allComments, PrintWriter reply) {\n-            reply.println(\"Available commands:\");\n-            Stream.concat(\n-                    commandHandlers.entrySet().stream()\n-                                   .filter(entry -> entry.getValue().allowedInCommit())\n-                                   .map(entry -> entry.getKey() + \" - \" + entry.getValue().description()),\n-                    bot.externalPullRequestCommands().entrySet().stream()\n-                       .map(entry -> entry.getKey() + \" - \" + entry.getValue())\n-            ).sorted().forEachOrdered(c -> reply.println(\" * \" + c));\n-        }\n-\n-        @Override\n-        public String description() {\n-            return \"shows this text\";\n-        }\n-\n-        @Override\n-        public boolean allowedInCommit() {\n-            return true;\n-        }\n-    }\n-\n@@ -118,1 +64,1 @@\n-        var allCommands = Stream.concat(CommandExtractor.extractCommands(false, body, \"body\", pr.author()).stream(),\n+        var allCommands = Stream.concat(CommandExtractor.extractCommands(body, \"body\", pr.author()).stream(),\n@@ -121,1 +67,1 @@\n-                                                .flatMap(c -> CommandExtractor.extractCommands(false, c.body(), c.id(), c.author()).stream()))\n+                                                .flatMap(c -> CommandExtractor.extractCommands(c.body(), c.id(), c.author()).stream()))\n@@ -205,1 +151,1 @@\n-                    printer.println(\"` can not be used in pull requests. Please try to use this command on the commit.\");\n+                    printer.println(\"` can not be used in pull requests.\");\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestCommandWorkItem.java","additions":3,"deletions":57,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-            PullRequestAsserts.assertLastCommentContains(pr, \"The command `tag` can not be used in pull requests. Please try to use this command on the commit.\");\n+            PullRequestAsserts.assertLastCommentContains(pr, \"The command `tag` can not be used in pull requests.\");\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestCommandTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}