{"files":[{"patch":"@@ -809,0 +809,9 @@\n+    \/**\n+     * Check if either a is an ancestor of b, or b is an ancestor of a.\n+     * @return true if a and b are related\n+     *\/\n+    private boolean isRelated(Hash a, Hash b) throws IOException {\n+        var base = mergeBase(a, b);\n+        return base.equals(a) || base.equals(b);\n+    }\n+\n@@ -1082,1 +1091,1 @@\n-            if (isAncestor(head, other)) {\n+            if (isRelated(head, other)) {\n@@ -1090,0 +1099,2 @@\n+            } else if (isAncestor(other, head)) {\n+                return;\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/hg\/HgRepository.java","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -416,0 +416,66 @@\n+    \/**\n+     * Test converting a merge commit where the first parent is an ancestor of the second parent\n+     *\/\n+    @Test\n+    void convertMergeOfDescendant() throws IOException {\n+        try (var hgRoot = new TemporaryDirectory();\n+             var gitRoot = new TemporaryDirectory()) {\n+            var gitRepo = TestableRepository.init(gitRoot.path(), VCS.GIT);\n+            var readme = gitRoot.path().resolve(\"README.md\");\n+\n+            Files.writeString(readme, \"First line\");\n+            gitRepo.add(readme);\n+            var first = gitRepo.commit(\"First line\", \"Foo Bar\", \"foo@openjdk.org\");\n+\n+            var otherBranch = gitRepo.branch(first, \"other\");\n+            gitRepo.checkout(otherBranch);\n+\n+            Files.writeString(readme, \"Second line\\n\", StandardOpenOption.APPEND);\n+            gitRepo.add(readme);\n+            gitRepo.commit(\"Second line on other branch\", \"Foo Bar\", \"foo@openjdk.org\");\n+\n+            gitRepo.checkout(gitRepo.defaultBranch(), false);\n+\n+            gitRepo.merge(otherBranch, Repository.FastForward.DISABLE);\n+            gitRepo.commit(\"Merge\", \"Foo Bar\", \"foo@openjdk.org\");\n+\n+            var hgRepo = TestableRepository.init(hgRoot.path(), VCS.HG);\n+            var converter = new GitToHgConverter();\n+            var marks = converter.convert(gitRepo, hgRepo);\n+            assertReposEquals(marks, gitRepo, hgRepo);\n+        }\n+    }\n+\n+    \/**\n+     * Test converting a merge commit where the second parent is an ancestor of the first parent\n+     *\/\n+    @Test\n+    void convertMergeOfAncestor() throws IOException {\n+        try (var hgRoot = new TemporaryDirectory();\n+             var gitRoot = new TemporaryDirectory()) {\n+            var gitRepo = TestableRepository.init(gitRoot.path(), VCS.GIT);\n+            var readme = gitRoot.path().resolve(\"README.md\");\n+\n+            Files.writeString(readme, \"First line\");\n+            gitRepo.add(readme);\n+            var first = gitRepo.commit(\"First line\", \"Foo Bar\", \"foo@openjdk.org\");\n+\n+            var otherBranch = gitRepo.branch(first, \"other\");\n+            gitRepo.checkout(otherBranch);\n+\n+            Files.writeString(readme, \"Second line\\n\", StandardOpenOption.APPEND);\n+            gitRepo.add(readme);\n+            var otherBranchHead = gitRepo.commit(\"Second line on other branch\", \"Foo Bar\", \"foo@openjdk.org\");\n+\n+            var merge = gitRepo.commit(\"Merge\", \"Foo Bar\", \"foo@openjdk.org\", null, \"Foo Bar\", \"\" +\n+                    \"foo@openjdk.org\", null, List.of(otherBranchHead, first), gitRepo.tree(otherBranchHead));\n+            gitRepo.checkout(gitRepo.defaultBranch());\n+            gitRepo.reset(merge, true);\n+\n+            var hgRepo = TestableRepository.init(hgRoot.path(), VCS.HG);\n+            var converter = new GitToHgConverter();\n+            var marks = converter.convert(gitRepo, hgRepo);\n+            assertReposEquals(marks, gitRepo, hgRepo);\n+        }\n+    }\n+\n","filename":"vcs\/src\/test\/java\/org\/openjdk\/skara\/vcs\/openjdk\/converter\/GitToHgConverterTests.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"modified"}]}