{"files":[{"patch":"@@ -30,1 +30,1 @@\n-import java.nio.file.Path;\n+import java.nio.file.*;\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CommitCommandWorkItem.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,2 @@\n-import org.openjdk.skara.forge.HostedRepository;\n+import org.openjdk.skara.forge.*;\n+import org.openjdk.skara.vcs.*;\n@@ -28,1 +29,2 @@\n-import java.nio.file.Path;\n+import java.io.*;\n+import java.nio.file.*;\n@@ -51,0 +53,8 @@\n+    private boolean isAncestor(ReadOnlyRepository repo, Hash ancestor, Hash descendant) {\n+        try {\n+            return repo.isAncestor(ancestor, descendant);\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n@@ -55,8 +65,1 @@\n-        return repo.recentCommitComments()\n-                   .stream()\n-                   .filter(cc -> !processed.containsKey(cc.id()))\n-                   .map(cc -> {\n-                       processed.put(cc.id(), true);\n-                       return new CommitCommandWorkItem(bot, cc, e -> processed.remove(cc.id()));\n-                   })\n-                   .collect(Collectors.toList());\n+        var commitComments = repo.recentCommitComments();\n@@ -64,0 +67,30 @@\n+        try {\n+            var seedPath = bot.seedStorage().orElse(scratchPath.resolve(\"seeds\"));\n+            var hostedRepositoryPool = new HostedRepositoryPool(seedPath);\n+            var localRepoDir = scratchPath.resolve(bot.repo().name());\n+            Files.createDirectories(localRepoDir);\n+            var localRepo = hostedRepositoryPool.materialize(bot.repo(), localRepoDir);\n+            var remoteBranches = bot.repo().branches()\n+                                           .stream()\n+                                           .filter(b -> !b.name().startsWith(\"pr\/\"))\n+                                           .collect(Collectors.toList());\n+            for (var branch : remoteBranches) {\n+                localRepo.fetch(bot.repo().url(), branch.name());\n+            }\n+            return commitComments.stream()\n+                                 .filter(cc -> !processed.containsKey(cc.id()))\n+                                 .filter(cc -> remoteBranches.stream()\n+                                                             .anyMatch(b -> isAncestor(localRepo, cc.commit(), b.hash())))\n+                                 .map(cc -> {\n+                                     processed.put(cc.id(), true);\n+                                     return new CommitCommandWorkItem(bot, cc, e -> processed.remove(cc.id()));\n+                                 })\n+                                 .collect(Collectors.toList());\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"CommitCommentsWorkItem@\" + repo.name();\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CommitCommentsWorkItem.java","additions":43,"deletions":10,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import org.openjdk.skara.vcs.Hash;\n@@ -32,0 +33,2 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n@@ -124,0 +127,40 @@\n+\n+    @Test\n+    void commitNotItRepository(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                                           .addAuthor(author.forge().currentUser().id())\n+                                           .addReviewer(reviewer.forge().currentUser().id());\n+            var seedFolder = tempFolder.path().resolve(\"seed\");\n+            var bot = PullRequestBot.newBuilder()\n+                                    .repo(author)\n+                                    .censusRepo(censusBuilder.build())\n+                                    .censusLink(\"https:\/\/census.com\/{{contributor}}-profile\")\n+                                    .seedStorage(seedFolder)\n+                                    .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Make a change directly on master\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"master\");\n+\n+            \/\/ Make a commit only present in pr branch\n+            var prHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(prHash, author.url(), \"pr\/1\", true);\n+\n+            \/\/ Add a help command to commit in pr branch\n+            var comment = author.addCommitComment(prHash, \"\/help\");\n+            TestBotRunner.runPeriodicItems(bot);\n+\n+            \/\/ Verify that the bot did *not* reply\n+            assertEquals(List.of(comment), author.commitComments(prHash));\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CommitCommandTests.java","additions":43,"deletions":0,"binary":false,"changes":43,"status":"modified"}]}