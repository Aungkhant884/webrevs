{"files":[{"patch":"@@ -77,8 +77,5 @@\n-            if (allowStale) {\n-                try {\n-                    var lastFetch = Files.getLastModifiedTime(seed.resolve(\"FETCH_HEAD\"));\n-                    if (lastFetch.toInstant().isAfter(Instant.now().minus(Duration.ofMinutes(1)))) {\n-                        log.info(\"Seed should be up to date, skipping fetch\");\n-                        return;\n-                    }\n-                } catch (IOException ignored) {\n+            try {\n+                var lastFetch = Files.getLastModifiedTime(seed.resolve(\"FETCH_HEAD\"));\n+                if (lastFetch.toInstant().isAfter(Instant.now().minus(Duration.ofMinutes(1)))) {\n+                    log.info(\"Seed should be up to date, skipping fetch\");\n+                    return;\n@@ -86,3 +83,1 @@\n-                log.info(\"Seed is potentially stale, time to fetch the latest upstream changes\");\n-            } else {\n-                log.info(\"Fetching latest upstream changes into the seed\");\n+            } catch (IOException ignored) {\n@@ -91,0 +86,1 @@\n+                log.info(\"Seed is potentially stale, time to fetch the latest upstream changes\");\n@@ -163,2 +159,1 @@\n-            var preserveUnchecked = hostedRepositoryInstance.seed.resolveSibling(\n-                    hostedRepositoryInstance.seed.getFileName().toString() + \"-unchecked-\" + UUID.randomUUID());\n+            var preserveUnchecked = path.resolveSibling(hostedRepositoryInstance.seed.getFileName().toString() + \"-unchecked-\" + UUID.randomUUID());\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/HostedRepositoryPool.java","additions":8,"deletions":13,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.forge;\n+\n+import org.junit.jupiter.api.*;\n+import org.openjdk.skara.test.*;\n+import org.openjdk.skara.vcs.*;\n+\n+import java.io.IOException;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class HostedRepositoryPoolTests {\n+    @Test\n+    void simple(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var sourceFolder = new TemporaryDirectory();\n+             var seedFolder = new TemporaryDirectory();\n+             var cloneFolder = new TemporaryDirectory()) {\n+            var source = credentials.getHostedRepository();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(sourceFolder.path(), source.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, source.url(), \"master\", true);\n+\n+            \/\/ Push something else\n+            var hash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(hash, source.url(), \"master\");\n+\n+            var pool = new HostedRepositoryPool(seedFolder.path());\n+            var clone = pool.checkout(source, hash.hex(), cloneFolder.path());\n+            assertTrue(CheckableRepository.hasBeenEdited(clone));\n+        }\n+    }\n+\n+    @Test\n+    void emptyExisting(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var sourceFolder = new TemporaryDirectory();\n+             var seedFolder = new TemporaryDirectory();\n+             var cloneFolder = new TemporaryDirectory()) {\n+            var source = credentials.getHostedRepository();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(sourceFolder.path(), source.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, source.url(), \"master\", true);\n+\n+            var pool = new HostedRepositoryPool(seedFolder.path());\n+            var empty = Repository.init(cloneFolder.path(), VCS.GIT);\n+            assertThrows(IOException.class, () -> empty.checkout(new Branch(\"master\"), true));\n+            var clone = pool.checkout(source, \"master\", cloneFolder.path());\n+            assertFalse(CheckableRepository.hasBeenEdited(clone));\n+        }\n+    }\n+}\n","filename":"forge\/src\/test\/java\/org\/openjdk\/skara\/forge\/HostedRepositoryPoolTests.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"}]}