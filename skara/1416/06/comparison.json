{"files":[{"patch":"@@ -748,3 +748,11 @@\n-        \/\/ TODO? Retrieve the body again here to lower the chance of concurrent updates\n-        log.info(\"Updating PR body\");\n-        pr.setBody(newBody);\n+        \/\/ Retrieve the body again here to lower the chance of concurrent updates\n+        var latestPR = pr.repository().pullRequest(pr.id());\n+        if (description.equals(latestPR.body())) {\n+            log.info(\"Updating PR body\");\n+            pr.setBody(newBody);\n+        } else {\n+            \/\/ The modification should trigger another round of checks, so\n+            \/\/ no need to force a retry by throwing a RuntimeException.\n+            log.info(\"PR body has been modified, won't update PR body this time\");\n+            return description;\n+        }\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2750,0 +2750,51 @@\n+\n+    @Test\n+    void testLatestBody(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addAuthor(author.forge().currentUser().id())\n+                    .addReviewer(reviewer.forge().currentUser().id());\n+            var seedFolder = tempFolder.path().resolve(\"seed\");\n+            var checkBot = PullRequestBot.newBuilder()\n+                    .repo(author)\n+                    .censusRepo(censusBuilder.build())\n+                    .censusLink(\"https:\/\/census.com\/{{contributor}}-profile\")\n+                    .seedStorage(seedFolder)\n+                    .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"refs\/heads\/edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"This is a pull request\");\n+\n+            CheckWorkItem checkWorkItem = (CheckWorkItem) checkBot.getPeriodicItems().get(1);\n+            checkWorkItem.pr = author.pullRequest(pr.id());\n+            \/\/ Update PR body right now\n+            pr.store().setBody(\"It's a new Body\");\n+            try (var scratchFolder = new TemporaryDirectory()) {\n+                checkWorkItem.prRun(scratchFolder.path());\n+            }\n+            \/\/ PR body should not be updated by Bot\n+            assertEquals(\"It's a new Body\", pr.store().body());\n+\n+            checkWorkItem = (CheckWorkItem) checkBot.getPeriodicItems().get(1);\n+            checkWorkItem.pr = author.pullRequest(pr.id());\n+            try (var scratchFolder = new TemporaryDirectory()) {\n+                checkWorkItem.prRun(scratchFolder.path());\n+            }\n+            \/\/ PR body should be updated by Bot\n+            assertTrue(pr.store().body().contains(\"It's a new Body\"));\n+            assertTrue(pr.store().body().contains(\"Progress\"));\n+            assertTrue(pr.store().body().contains(\"<!-- Anything below this marker will be automatically updated\"));\n+            assertTrue(pr.store().body().contains(\"Reviewing\"));\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CheckTests.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"}]}