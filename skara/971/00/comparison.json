{"files":[{"patch":"@@ -25,0 +25,1 @@\n+import javax.net.ssl.SSLSession;\n@@ -26,0 +27,1 @@\n+import java.net.URI;\n@@ -100,0 +102,50 @@\n+    private static class CachedHttpResponse<T> implements HttpResponse<T> {\n+        private final HttpResponse<T> original;\n+        private final HttpResponse<T> fromRequest;\n+\n+        CachedHttpResponse(HttpResponse<T> original, HttpResponse<T> fromRequest) {\n+            this.original = original;\n+            this.fromRequest = fromRequest;\n+        }\n+\n+        @Override\n+        public int statusCode() {\n+            return original.statusCode();\n+        }\n+\n+        @Override\n+        public HttpRequest request() {\n+            return fromRequest.request();\n+        }\n+\n+        @Override\n+        public Optional<HttpResponse<T>> previousResponse() {\n+            return fromRequest.previousResponse();\n+        }\n+\n+        @Override\n+        public HttpHeaders headers() {\n+            return fromRequest.headers();\n+        }\n+\n+        @Override\n+        public T body() {\n+            return original.body();\n+        }\n+\n+        @Override\n+        public Optional<SSLSession> sslSession() {\n+            return fromRequest.sslSession();\n+        }\n+\n+        @Override\n+        public URI uri() {\n+            return fromRequest.uri();\n+        }\n+\n+        @Override\n+        public HttpClient.Version version() {\n+            return fromRequest.version();\n+        }\n+    }\n+\n@@ -136,1 +188,1 @@\n-                return cached;\n+                return new CachedHttpResponse<>(cached, response);\n","filename":"network\/src\/main\/java\/org\/openjdk\/skara\/network\/RestRequestCache.java","additions":53,"deletions":1,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import java.util.stream.*;\n@@ -42,1 +43,1 @@\n-    private final List<String> responses;\n+    private List<String> responses;\n@@ -150,0 +151,5 @@\n+    void addPage(String responsePage) {\n+        this.responses = Stream.concat(responses.stream(), List.of(responsePage).stream())\n+                               .collect(Collectors.toList());\n+    }\n+\n@@ -277,1 +283,32 @@\n-}\n+\n+    @Test\n+    void cachedPagination() throws IOException {\n+        var page1 = \"[ { \\\"a\\\": 1 } ]\";\n+        var page2 = \"[ { \\\"b\\\": 2 } ]\";\n+        try (var receiver = new RestReceiver(List.of(page1))) {\n+            var request = new RestRequest(receiver.getEndpoint());\n+            var result = request.get(\"\/test\").execute();\n+            assertEquals(1, result.asArray().size());\n+            assertEquals(1, result.asArray().get(0).get(\"a\").asInt());\n+            assertFalse(receiver.usedCached());\n+\n+            var anotherRequest = new RestRequest(receiver.getEndpoint());\n+            var anotherResult = anotherRequest.get(\"\/test\").execute();\n+            assertEquals(1, anotherResult.asArray().size());\n+            assertEquals(1, anotherResult.asArray().get(0).get(\"a\").asInt());\n+            assertTrue(receiver.usedCached());\n+\n+            receiver.addPage(page2);\n+            var pagedRequest = new RestRequest(receiver.getEndpoint());\n+            var pagedResult = pagedRequest.get(\"\/test\").execute();\n+            assertEquals(2, pagedResult.asArray().size());\n+            assertEquals(1, pagedResult.asArray().get(0).get(\"a\").asInt());\n+            assertFalse(receiver.usedCached());\n+\n+            var anotherPagedRequest = new RestRequest(receiver.getEndpoint());\n+            var anotherPagedResult = anotherPagedRequest.get(\"\/test\").execute();\n+            assertEquals(2, anotherPagedResult.asArray().size());\n+            assertEquals(1, anotherPagedResult.asArray().get(0).get(\"a\").asInt());\n+            assertTrue(receiver.usedCached());\n+        }\n+    }}\n","filename":"network\/src\/test\/java\/org\/openjdk\/skara\/network\/RestRequestTests.java","additions":39,"deletions":2,"binary":false,"changes":41,"status":"modified"}]}