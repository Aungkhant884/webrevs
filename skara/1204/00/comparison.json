{"files":[{"patch":"@@ -80,1 +80,1 @@\n-        var repoName = parts[0].replace(\"http:\/\/\", \"\")\n+        var repoNameArg = parts[0].replace(\"http:\/\/\", \"\")\n@@ -83,7 +83,11 @@\n-        var currentRepoName = bot.repo().name();\n-        if (!currentRepoName.equals(repoName) && !repoName.contains(\"\/\")) {\n-            var group = bot.repo().name().split(\"\/\")[0];\n-            repoName = group + \"\/\" + repoName;\n-        }\n-\n-        var potentialTargetRepo = forge.repository(repoName);\n+        \/\/ If the arg is given with a namespace prefix, look for an exact match,\n+        \/\/ otherwise cut off the namespace prefix before comparing with the forks\n+        \/\/ config.\n+        var includesNamespace = repoNameArg.contains(\"\/\");\n+        var repoName = bot.forks().keySet().stream()\n+                .filter(s -> includesNamespace\n+                        ? s.equals(repoNameArg)\n+                        : s.substring(s.indexOf(\"\/\") + 1).equals(repoNameArg))\n+                .findAny();\n+\n+        var potentialTargetRepo = repoName.flatMap(forge::repository);\n@@ -91,3 +95,4 @@\n-            reply.println(\"@\" + username + \" the target repository `\" + repoName + \"` does not exist. \");\n-            reply.print(\"List of valid repositories: \");\n-            reply.println(String.join(\", \", bot.forkRepoNames()));\n+            reply.println(\"@\" + username + \" the target repository `\" + repoNameArg + \"` is not a valid target for backports. \");\n+            reply.print(\"List of valid target repositories: \");\n+            reply.println(String.join(\", \", bot.forks().keySet().stream().sorted().toList()) + \".\");\n+            reply.println(\"Supplying the organization\/group prefix is optional.\");\n@@ -97,0 +102,1 @@\n+        var fork = bot.forks().get(targetRepo.name());\n@@ -108,8 +114,0 @@\n-            var optionalFork = bot.writeableForkOf(targetRepo);\n-            if (optionalFork.isEmpty()) {\n-                reply.print(\"@\" + username + \" [\" + repoName + \"](\" + targetRepo.webUrl() + \") is not a valid target for backports. \");\n-                reply.print(\"List of valid repositories: \");\n-                reply.println(String.join(\", \", bot.forkRepoNames()));\n-                return;\n-            }\n-            var fork = optionalFork.get();\n@@ -121,1 +119,1 @@\n-                                              .resolve(repoName)\n+                                              .resolve(targetRepo.name())\n@@ -182,1 +180,1 @@\n-                      \"[\" + currentRepoName + \"](\" + bot.repo().webUrl() + \") repository.\");\n+                      \"[\" + bot.repo().name() + \"](\" + bot.repo().webUrl() + \") repository.\");\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/BackportCommand.java","additions":19,"deletions":21,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -281,5 +281,1 @@\n-        var fork = forks.get(upstream.name());\n-        if (fork == null) {\n-            return Optional.empty();\n-        }\n-        return Optional.of(fork);\n+        return Optional.ofNullable(forks.get(upstream.name()));\n@@ -288,7 +284,2 @@\n-    \/**\n-     * Returns a list of all repo names that have a fork configured for them\n-     *\/\n-    List<String> forkRepoNames() {\n-        return forks.keySet().stream()\n-                .map(k -> k.substring(k.lastIndexOf('\/') + 1))\n-                .toList();\n+    public Map<String, HostedRepository> forks() {\n+        return forks;\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBot.java","additions":3,"deletions":12,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -97,1 +97,1 @@\n-                                    .forks(Map.of(author.name(), author))\n+                                    .forks(Map.of(author.name(), author, \"foobar\/other-repo\", author))\n@@ -110,1 +110,1 @@\n-            author.addCommitComment(editHash, \"\/backport non-existing-repo\");\n+            author.addCommitComment(editHash, \"\/backport foobar\/non-existing-repo\");\n@@ -117,2 +117,2 @@\n-            assertTrue(botReply.body().contains(\"does not exist\"));\n-            assertTrue(botReply.body().contains(\"List of valid repositories: test\"));\n+            assertTrue(botReply.body().contains(\"is not a valid target for backports\"));\n+            assertTrue(botReply.body().contains(\"List of valid target repositories: foobar\/other-repo, test\"));\n@@ -159,1 +159,1 @@\n-            assertTrue(botReply.body().contains(\"List of valid repositories: other-repo\"));\n+            assertTrue(botReply.body().contains(\"List of valid target repositories: foobar\/other-repo\"));\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/BackportCommitCommandTests.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -58,0 +58,4 @@\n+\n+    \/**\n+     * The full name of the repository, including any namespace\/group\/organization prefix\n+     *\/\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/HostedRepository.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"}]}