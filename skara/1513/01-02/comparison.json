{"files":[{"patch":"@@ -32,0 +32,2 @@\n+import java.nio.file.Files;\n+import java.nio.file.StandardOpenOption;\n@@ -410,0 +412,90 @@\n+\n+    @Test\n+    void testDomain(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var integrator = credentials.getHostedRepository();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addReviewer(integrator.forge().currentUser().id())\n+                    .addCommitter(author.forge().currentUser().id());\n+\n+            var prBot = PullRequestBot.newBuilder().repo(integrator).censusRepo(censusBuilder.build()).build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());\n+            var checkConf = localRepoFolder.resolve(\".jcheck\/conf\");\n+            Files.writeString(checkConf, \"[census]\\n\" +\n+                    \"version=0\\n\" +\n+                    \"domain=test.com\", StandardOpenOption.APPEND);\n+            localRepo.add(checkConf);\n+            localRepo.commit(\"modify .jcheck\/conf\", \"testauthor\", \"ta@none.none\");\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.authenticatedUrl(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.authenticatedUrl(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"This is a pull request\");\n+\n+            \/\/ Issue an invalid command\n+            pr.addComment(\"\/contributor hello\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+\n+            \/\/ The bot should reply with an error message\n+            assertLastCommentContains(pr, \"Syntax\");\n+\n+            \/\/ Add a contributor\n+            pr.addComment(\"\/contributor add integrationcommitter2\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+\n+            \/\/ The bot should reply with a success message\n+            assertLastCommentContains(pr, \"successfully added\");\n+            assertLastCommentContains(pr, \"<integrationcommitter2@test.com>\");\n+\n+            \/\/ Approve it as another user\n+            var approvalPr = integrator.pullRequest(pr.id());\n+            approvalPr.addReview(Review.Verdict.APPROVED, \"Approved\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            TestBotRunner.runPeriodicItems(prBot);\n+\n+            \/\/ The commit message preview should contain the contributor\n+            var creditLine = pr.comments().stream()\n+                    .flatMap(comment -> comment.body().lines())\n+                    .filter(line -> line.contains(\"Generated Committer 2 <integrationcommitter2@test.com>\"))\n+                    .filter(line -> line.contains(\"Co-authored-by\"))\n+                    .findAny()\n+                    .orElseThrow();\n+            assertEquals(\"Co-authored-by: Generated Committer 2 <integrationcommitter2@test.com>\", creditLine);\n+\n+            var pushed = pr.comments().stream()\n+                    .filter(comment -> comment.body().contains(\"change now passes all *automated*\"))\n+                    .count();\n+            assertEquals(1, pushed);\n+\n+            \/\/ Integrate\n+            pr.addComment(\"\/integrate\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+\n+            \/\/ The bot should reply with an ok message\n+            assertLastCommentContains(pr, \"Pushed as commit\");\n+\n+            \/\/ The change should now be present on the master branch\n+            var pushedFolder = tempFolder.path().resolve(\"pushed\");\n+            var pushedRepo = Repository.materialize(pushedFolder, author.authenticatedUrl(), \"master\");\n+            assertTrue(CheckableRepository.hasBeenEdited(pushedRepo));\n+\n+            var headHash = pushedRepo.resolve(\"HEAD\").orElseThrow();\n+            var headCommit = pushedRepo.commits(headHash.hex() + \"^..\" + headHash.hex()).asList().get(0);\n+\n+            \/\/ The contributor should be credited\n+            creditLine = headCommit.message().stream()\n+                    .filter(line -> line.contains(\"Generated Committer 2 <integrationcommitter2@test.com>\"))\n+                    .findAny()\n+                    .orElseThrow();\n+            assertEquals(\"Co-authored-by: Generated Committer 2 <integrationcommitter2@test.com>\", creditLine);\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/ContributorTests.java","additions":92,"deletions":0,"binary":false,"changes":92,"status":"modified"}]}