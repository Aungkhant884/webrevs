{"files":[{"patch":"@@ -372,5 +372,14 @@\n-            body.append(reviewComment.path()).append(\" line \").append(reviewComment.line()).append(\":\\n\\n\");\n-            try {\n-                var contents = pr.repository().fileContents(reviewComment.path(), reviewComment.hash().hex()).lines().collect(Collectors.toList());\n-                for (int i = Math.max(0, reviewComment.line() - 3); i < Math.min(contents.size(), reviewComment.line()); ++i) {\n-                    body.append(\"> \").append(i + 1).append(\": \").append(contents.get(i)).append(\"\\n\");\n+            body.append(reviewComment.path());\n+            if (reviewComment.line() > 0) {\n+                body.append(\" line \").append(reviewComment.line());\n+            }\n+            body.append(\":\\n\\n\");\n+            if (reviewComment.line() > 0) {\n+                try {\n+                    var contents = pr.repository().fileContents(reviewComment.path(), reviewComment.hash().hex()).lines().collect(Collectors.toList());\n+                    for (int i = Math.max(0, reviewComment.line() - 3); i < Math.min(contents.size(), reviewComment.line()); ++i) {\n+                        body.append(\"> \").append(i + 1).append(\": \").append(contents.get(i)).append(\"\\n\");\n+                    }\n+                    body.append(\"\\n\");\n+                } catch (RuntimeException e) {\n+                    body.append(\"> (failed to retrieve contents of file, check the PR for context)\\n\");\n@@ -378,3 +387,0 @@\n-                body.append(\"\\n\");\n-            } catch (RuntimeException e) {\n-                body.append(\"> (failed to retrieve contents of file, check the PR for context)\\n\");\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/ArchiveMessages.java","additions":14,"deletions":8,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -794,1 +794,1 @@\n-            assertTrue(archiveContains(archiveFolder.path(), reviewFile.toString()));\n+            assertTrue(archiveContains(archiveFolder.path(), reviewFile + \" line 2:\"));\n@@ -824,0 +824,10 @@\n+\n+            \/\/ Add a file comment (on line 0)\n+            var fileComment = pr.addReviewComment(masterHash, editHash, reviewFile.toString(), 0, \"File review comment\");\n+            TestBotRunner.runPeriodicItems(mlBot);\n+            listServer.processIncoming();\n+\n+            \/\/ The archive should contain the additional comment\n+            Repository.materialize(archiveFolder.path(), archive.url(), \"master\");\n+            assertTrue(archiveContains(archiveFolder.path(), \"File review comment\"));\n+            assertTrue(archiveContains(archiveFolder.path(), reviewFile + \":\"));\n","filename":"bots\/mlbridge\/src\/test\/java\/org\/openjdk\/skara\/bots\/mlbridge\/MailingListBridgeBotTests.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -213,5 +213,13 @@\n-        \/\/ Is the comment on the old or the new version of the file?\n-        if (note.get(\"position\").get(\"new_line\").isNull()) {\n-            line = note.get(\"position\").get(\"old_line\").asInt();\n-            path = note.get(\"position\").get(\"old_path\").asString();\n-            hash = new Hash(note.get(\"position\").get(\"start_sha\").asString());\n+        var position = note.get(\"position\");\n+        \/\/ Is this a line comment?\n+        if (position.get(\"new_line\") != null) {\n+            \/\/ Is the comment on the old or the new version of the file?\n+            if (position.get(\"new_line\").isNull()) {\n+                line = position.get(\"old_line\").asInt();\n+                path = position.get(\"old_path\").asString();\n+                hash = new Hash(position.get(\"start_sha\").asString());\n+            } else {\n+                line = position.get(\"new_line\").asInt();\n+                path = position.get(\"new_path\").asString();\n+                hash = new Hash(position.get(\"head_sha\").asString());\n+            }\n@@ -219,3 +227,5 @@\n-            line = note.get(\"position\").get(\"new_line\").asInt();\n-            path = note.get(\"position\").get(\"new_path\").asString();\n-            hash = new Hash(note.get(\"position\").get(\"head_sha\").asString());\n+            \/\/ This comment does not have a line. Gitlab seems to only allow file comments\n+            \/\/ on the new file\n+            line = 0;\n+            path = position.get(\"new_path\").asString();\n+            hash = new Hash(position.get(\"head_sha\").asString());\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabMergeRequest.java","additions":18,"deletions":8,"binary":false,"changes":26,"status":"modified"}]}