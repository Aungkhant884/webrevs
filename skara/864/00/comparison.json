{"files":[{"patch":"@@ -65,0 +65,2 @@\n+    private Duration expiresIn;\n+\n@@ -184,0 +186,7 @@\n+    private void setExpiration(Duration expiresIn) {\n+        \/\/ Use the shortest expiration\n+        if (this.expiresIn == null || this.expiresIn.compareTo(expiresIn) > 0) {\n+            this.expiresIn = expiresIn;\n+        }\n+    }\n+\n@@ -201,2 +210,2 @@\n-                            ret.add(\"Title mismatch between PR and JBS for issue \" + issueString +\n-                                            ExpirationTracker.expiresAfterMarker(Duration.ofMinutes(1)));\n+                            ret.add(\"Title mismatch between PR and JBS for issue \" + issueString);\n+                            setExpiration(Duration.ofMinutes(1));\n@@ -205,2 +214,2 @@\n-                        log.warning(\"Failed to retrieve information on issue \" + currentIssue.id() +\n-                                            ExpirationTracker.expiresAfterMarker(Duration.ofMinutes(10)));\n+                        log.warning(\"Failed to retrieve information on issue \" + currentIssue.id());\n+                        setExpiration(Duration.ofMinutes(10));\n@@ -209,2 +218,2 @@\n-                    log.warning(\"Temporary failure when trying to retrieve information on issue \" + currentIssue.id() +\n-                                        ExpirationTracker.expiresAfterMarker(Duration.ofMinutes(30)));\n+                    log.warning(\"Temporary failure when trying to retrieve information on issue \" + currentIssue.id());\n+                    setExpiration(Duration.ofMinutes(30));\n@@ -400,1 +409,5 @@\n-            resultSummary.ifPresent(progressBody::append);\n+            if (resultSummary.isPresent()) {\n+                progressBody.append(resultSummary.get());\n+                var expiration = TestResults.expiresIn(checks);\n+                expiration.ifPresent(this::setExpiration);\n+            }\n@@ -440,0 +453,1 @@\n+                                setExpiration(Duration.ofMinutes(1));\n@@ -441,1 +455,0 @@\n-                            progressBody.append(ExpirationTracker.expiresAfterMarker(Duration.ofMinutes(1)));\n@@ -447,1 +460,1 @@\n-                            progressBody.append(ExpirationTracker.expiresAfterMarker(Duration.ofMinutes(10)));\n+                            setExpiration(Duration.ofMinutes(10));\n@@ -454,1 +467,1 @@\n-                        progressBody.append(ExpirationTracker.expiresAfterMarker(Duration.ofMinutes(30)));\n+                        setExpiration(Duration.ofMinutes(30));\n@@ -895,1 +908,2 @@\n-            var metadata = workItem.getMetadata(censusInstance, title, updatedBody, pr.comments(), activeReviews, newLabels, pr.isDraft());\n+            var metadata = workItem.getMetadata(censusInstance, title, updatedBody, pr.comments(), activeReviews,\n+                                                newLabels, pr.isDraft(), expiresIn);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":25,"deletions":11,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-                       List<Review> reviews, Set<String> labels, boolean isDraft) {\n+                       List<Review> reviews, Set<String> labels, boolean isDraft, Duration expiresIn) {\n@@ -69,5 +69,0 @@\n-            var hasExpired = ExpirationTracker.hasExpired(body);\n-            if (hasExpired) {\n-                return String.valueOf(Math.random());\n-            }\n-\n@@ -95,1 +90,5 @@\n-            return Base64.getUrlEncoder().encodeToString(digest.digest());\n+            var ret = Base64.getUrlEncoder().encodeToString(digest.digest());\n+            if (expiresIn != null) {\n+                ret += \":\" + Instant.now().plus(expiresIn).getEpochSecond();\n+            }\n+            return ret;\n@@ -103,1 +102,1 @@\n-        var metadata = getMetadata(censusInstance, pr.title(), pr.body(), comments, reviews, labels, pr.isDraft());\n+        var metadata = getMetadata(censusInstance, pr.title(), pr.body(), comments, reviews, labels, pr.isDraft(), null);\n@@ -118,7 +117,15 @@\n-                if (check.metadata().isPresent() && check.metadata().get().equals(metadata)) {\n-                    log.finer(\"No activity since last check, not checking again\");\n-                    return true;\n-                } else {\n-                    log.info(\"PR updated after last check, checking again\");\n-                    if (check.metadata().isPresent() && (!check.metadata().get().equals(metadata))) {\n-                        log.fine(\"Previous metadata: \" + check.metadata().get() + \" - current: \" + metadata);\n+                if (check.metadata().isPresent()) {\n+                    var previousMetadata = check.metadata().get();\n+                    if (previousMetadata.contains(\":\")) {\n+                        var splitIndex = previousMetadata.lastIndexOf(\":\");\n+                        var stableMetadata = previousMetadata.substring(0, splitIndex);\n+                        var expiresAt = Instant.ofEpochSecond(Long.parseLong(previousMetadata.substring(splitIndex + 1)));\n+                        if (stableMetadata.equals(metadata) && expiresAt.isAfter(Instant.now())) {\n+                            log.finer(\"Metadata with expiration time is still valid, not checking again\");\n+                            return true;\n+                        }\n+                    } else {\n+                        if (previousMetadata.equals(metadata)) {\n+                            log.finer(\"No activity since last check, not checking again\");\n+                            return true;\n+                        }\n@@ -127,0 +134,4 @@\n+                log.info(\"PR updated after last check, checking again\");\n+                if (check.metadata().isPresent() && (!check.metadata().get().equals(metadata))) {\n+                    log.fine(\"Previous metadata: \" + check.metadata().get() + \" - current: \" + metadata);\n+                }\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckWorkItem.java","additions":26,"deletions":15,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -1,51 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.skara.bots.pr;\n-\n-import java.time.*;\n-import java.time.format.DateTimeFormatter;\n-import java.util.regex.*;\n-\n-public class ExpirationTracker {\n-    private static final String expirationMarker = \"<!-- Data expires at: '%s' -->\";\n-    private static final Pattern expirationPattern = Pattern.compile(\"<!-- Data expires at: '(.*?)' -->\", Pattern.MULTILINE);\n-\n-    static String expiresAfterMarker(Duration expiresAfter) {\n-        return String.format(expirationMarker, ZonedDateTime.now().plus(expiresAfter).format(DateTimeFormatter.ISO_ZONED_DATE_TIME));\n-    }\n-\n-    static boolean hasExpired(String textWithMarkers) {\n-        var earliestExpiration = textWithMarkers.lines()\n-                                                .map(expirationPattern::matcher)\n-                                                .filter(Matcher::find)\n-                                                .map(matcher -> matcher.group(1))\n-                                                .sorted()\n-                                                .findFirst();\n-        if (earliestExpiration.isEmpty()) {\n-            return false;\n-        }\n-\n-        var expiresAt = ZonedDateTime.parse(earliestExpiration.get(), DateTimeFormatter.ISO_ZONED_DATE_TIME);\n-        return expiresAt.isBefore(ZonedDateTime.now());\n-    }\n-}\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/ExpirationTracker.java","additions":0,"deletions":51,"binary":false,"changes":51,"status":"deleted"},{"patch":"@@ -135,0 +135,21 @@\n+    private boolean checkHasExpired(PullRequest pr) {\n+        var hash = pr.headHash();\n+        var currentChecks = pr.checks(hash);\n+\n+        if (currentChecks.containsKey(\"jcheck\")) {\n+            var check = currentChecks.get(\"jcheck\");\n+            if (check.metadata().isPresent()) {\n+                var metadata = check.metadata().get();\n+                if (metadata.contains(\":\")) {\n+                    var expirationString = metadata.substring(metadata.lastIndexOf(\":\") + 1);\n+                    var expiresAt = Instant.ofEpochSecond(Long.parseLong(expirationString));\n+                    if (expiresAt.isBefore(Instant.now())) {\n+                        log.info(\"Check metadata has expired (expired at: \" + expiresAt + \")\");\n+                        return true;\n+                    }\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n@@ -139,1 +160,1 @@\n-            if (ExpirationTracker.hasExpired(pr.body()) || updateCache.needsUpdate(pr, Duration.ofMinutes(5))) {\n+            if (updateCache.needsUpdate(pr, Duration.ofMinutes(5)) || checkHasExpired(pr)) {\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBot.java","additions":22,"deletions":1,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -65,2 +65,2 @@\n-    static Optional<String> summarize(List<Check> checks) {\n-        \/\/ Retain only the latest when there are multiple checks with the same name\n+    \/\/ Retain only the latest when there are multiple checks with the same name\n+    private static Collection<Check> latestChecks(List<Check> checks) {\n@@ -71,0 +71,5 @@\n+        return latestChecks.values();\n+    }\n+\n+    static Optional<String> summarize(List<Check> checks) {\n+        var latestChecks = latestChecks(checks);\n@@ -75,1 +80,1 @@\n-        var platforms = latestChecks.values().stream()\n+        var platforms = latestChecks.stream()\n@@ -78,1 +83,1 @@\n-        var flavors = latestChecks.values().stream()\n+        var flavors = latestChecks.stream()\n@@ -85,1 +90,1 @@\n-        var platformFlavors = latestChecks.values().stream()\n+        var platformFlavors = latestChecks.stream()\n@@ -137,1 +142,1 @@\n-        var failedChecks = latestChecks.values().stream()\n+        var failedChecks = latestChecks.stream()\n@@ -163,3 +168,8 @@\n-        var needRefresh = latestChecks.values().stream()\n-                .filter(check -> check.status() == CheckStatus.IN_PROGRESS)\n-                .findAny();\n+        return Optional.of(resultsBody.toString());\n+    }\n+\n+    static Optional<Duration> expiresIn(List<Check> checks) {\n+        var latestChecks = latestChecks(checks);\n+        var needRefresh = latestChecks.stream()\n+                                      .filter(check -> check.status() == CheckStatus.IN_PROGRESS)\n+                                      .findAny();\n@@ -167,2 +177,3 @@\n-            resultsBody.append(\"\\n\");\n-            resultsBody.append(ExpirationTracker.expiresAfterMarker(Duration.ofSeconds(30)));\n+            return Optional.of(Duration.ofSeconds(30));\n+        } else {\n+            return Optional.empty();\n@@ -170,2 +181,0 @@\n-\n-        return Optional.of(resultsBody.toString());\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/TestResults.java","additions":22,"deletions":13,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -988,0 +988,77 @@\n+    @Test\n+    void issueInSummaryExternalUpdate(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var issues = credentials.getIssueProject();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                                           .addAuthor(author.forge().currentUser().id())\n+                                           .addReviewer(reviewer.forge().currentUser().id());\n+            var checkBot = PullRequestBot.newBuilder().repo(author).censusRepo(censusBuilder.build()).issueProject(issues).build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType(), Path.of(\"appendable.txt\"),\n+                                                     Set.of(\"issues\"), null);\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            var issue1 = issues.createIssue(\"My first issue\", List.of(\"Hello\"), Map.of());\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", issue1.id() + \": This is a pull request\");\n+\n+            \/\/ Check the status\n+            TestBotRunner.runPeriodicItems(checkBot);\n+\n+            \/\/ The check should be successful\n+            var checks = pr.checks(editHash);\n+            assertEquals(1, checks.size());\n+            var check = checks.get(\"jcheck\");\n+            assertEquals(CheckStatus.SUCCESS, check.status());\n+\n+            \/\/ And the body should contain the issue title\n+            assertTrue(pr.body().contains(\"My first issue\"));\n+\n+            \/\/ Change the issue\n+            var issue2 = issues.createIssue(\"My second issue\", List.of(\"Body\"), Map.of());\n+            pr.setTitle(issue2.id() + \": This is a pull request\");\n+\n+            \/\/ Check the status again\n+            TestBotRunner.runPeriodicItems(checkBot);\n+\n+            \/\/ The body should contain the updated issue title\n+            assertFalse(pr.body().contains(\"My first issue\"));\n+            assertTrue(pr.body().contains(\"My second issue\"));\n+\n+            \/\/ The PR title does not match the issue title\n+            assertTrue(pr.body().contains(\"Title mismatch\"));\n+            assertTrue(pr.body().contains(\"Integration blocker\"));\n+\n+            \/\/ Correct it\n+            issue2.setTitle(\"This is a pull request\");\n+\n+            \/\/ Check the status again - it should still not match due to caching\n+            TestBotRunner.runPeriodicItems(checkBot);\n+            assertTrue(pr.body().contains(\"Title mismatch\"));\n+            assertTrue(pr.body().contains(\"Integration blocker\"));\n+\n+            \/\/ Ensure the check cache expires\n+            var currentCheck = pr.checks(editHash).get(\"jcheck\");\n+            assertTrue(currentCheck.metadata().orElseThrow().contains(\":\"));\n+            var outdatedMeta = currentCheck.metadata().orElseThrow().replaceAll(\":\\\\d+\", \":100\");\n+            var updatedCheck = CheckBuilder.from(currentCheck)\n+                                           .metadata(outdatedMeta)\n+                                           .build();\n+            pr.updateCheck(updatedCheck);\n+\n+            \/\/ Check the status again - now it should be fine\n+            TestBotRunner.runPeriodicItems(checkBot);\n+            assertFalse(pr.body().contains(\"Title mismatch\"));\n+            assertFalse(pr.body().contains(\"Integration blocker\"));\n+        }\n+    }\n+\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CheckTests.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -1,60 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.skara.bots.pr;\n-\n-import org.junit.jupiter.api.Test;\n-\n-import java.time.Duration;\n-\n-import static org.junit.jupiter.api.Assertions.*;\n-\n-public class ExpirationTrackerTests {\n-    @Test\n-    void valid() {\n-        var text = \"This is a text. \" + ExpirationTracker.expiresAfterMarker(Duration.ofHours(10)) + \". Indeed.\";\n-        assertFalse(ExpirationTracker.hasExpired(text));\n-    }\n-\n-    @Test\n-    void expired() throws InterruptedException {\n-        var text = \"This is a text. \" + ExpirationTracker.expiresAfterMarker(Duration.ofMillis(1)) + \". Indeed.\";\n-        Thread.sleep(10);\n-        assertTrue(ExpirationTracker.hasExpired(text));\n-    }\n-\n-    @Test\n-    void multipleValid() {\n-        var text = \"This is a text. \" + ExpirationTracker.expiresAfterMarker(Duration.ofHours(10)) + \". Indeed.\" +\n-                \"\\n\" + ExpirationTracker.expiresAfterMarker(Duration.ofDays(2));\n-        assertFalse(ExpirationTracker.hasExpired(text));\n-    }\n-\n-    @Test\n-    void mixed() throws InterruptedException {\n-        var text = ExpirationTracker.expiresAfterMarker(Duration.ofDays(3)) + \"\\n\" +\n-                \"This is a text. \" + ExpirationTracker.expiresAfterMarker(Duration.ofMillis(1)) + \". Indeed.\" +\n-                \"\\n\" + ExpirationTracker.expiresAfterMarker(Duration.ofDays(2));\n-        Thread.sleep(10);\n-        assertTrue(ExpirationTracker.hasExpired(text));\n-    }\n-}\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/ExpirationTrackerTests.java","additions":0,"deletions":60,"binary":false,"changes":60,"status":"deleted"},{"patch":"@@ -46,0 +46,1 @@\n+        assertTrue(TestResults.expiresIn(List.of(check)).isEmpty());\n@@ -155,1 +156,1 @@\n-        assertTrue(summary.get().strip().startsWith(\"### Testing\\n\" +\n+        assertEquals(\"### Testing\\n\" +\n@@ -159,2 +160,2 @@\n-                             \"| Build \/ test | ✔️ (1\/1 passed) | ⏳ (1\/1 running) |\"));\n-        assertTrue(summary.get().strip().contains(\"<!-- Data expires\"));\n+                             \"| Build \/ test | ✔️ (1\/1 passed) | ⏳ (1\/1 running) |\", summary.get().strip());\n+        assertTrue(TestResults.expiresIn(List.of(check1, check2)).isPresent());\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/TestResultsTests.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"}]}