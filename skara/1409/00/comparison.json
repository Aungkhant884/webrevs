{"files":[{"patch":"@@ -88,1 +88,1 @@\n-        if (pr.state() == Issue.State.CLOSED) {\n+        if (pr.state() != Issue.State.OPEN) {\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/prbranch\/PullRequestBranchNotifier.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -165,1 +165,1 @@\n-            markIntegratedAndClosed(pr, prepushHash.get(), reply);\n+            markIntegratedAndMerged(bot, pr, scratchPath, prepushHash.get(), reply);\n@@ -244,1 +244,1 @@\n-                markIntegratedAndClosed(pr, amendedHash, reply);\n+                markIntegratedAndMerged(bot, pr, scratchPath, amendedHash, reply);\n@@ -328,1 +328,1 @@\n-    static void markIntegratedAndClosed(PullRequest pr, Hash hash, PrintWriter reply) {\n+    static void markIntegratedAndMerged(PullRequestBot bot, PullRequest pr, Path scratchPath, Hash hash, PrintWriter reply) {\n@@ -331,0 +331,16 @@\n+        try {\n+            Repository repository = new HostedRepositoryPool(bot.seedStorage().orElse(scratchPath.resolve(\"seeds\")))\n+                    .seedRepository(pr.repository(), false);\n+\n+            \/\/ Waste not, want not, the pre-integration branch is marked for destruction anyway\n+            \/\/ once integrated, reset it back to the state it was in before the pull request\n+            \/\/ was made so we can merge into it to trick version control to marking it as merged\n+            repository.fetch(pr.repository().url(), pr.sourceRef());\n+\n+            \/\/ Not the proper way to use the Hash object, but it is the most convenient...\n+            repository.push(new Hash(pr.sourceRef()), pr.repository().url(),\n+                    PreIntegrations.preIntegrateBranch(pr), true);\n+        } catch (IOException exception) {\n+            throw new UncheckedIOException(exception);\n+        }\n+        pr.setTargetRef(PreIntegrations.preIntegrateBranch(pr));\n@@ -332,1 +348,1 @@\n-        pr.setState(PullRequest.State.CLOSED);\n+        pr.setState(PullRequest.State.RESOLVED);\n@@ -343,1 +359,1 @@\n-        reply.println(\":bulb: You may see a message that your pull request was closed with unmerged commits. This can be safely ignored.\");\n+        reply.println(\":bulb: You may see a message that your pull request was closed with unmerged commits or merged into a different branch. This can be safely ignored.\");\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/IntegrateCommand.java","additions":21,"deletions":5,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-            markIntegratedAndClosed(pr, prePushHash.get(), reply);\n+            IntegrateCommand.markIntegratedAndMerged(bot, pr, scratchPath, prePushHash.get(), reply);\n@@ -134,1 +134,1 @@\n-                markIntegratedAndClosed(pr, amendedHash, reply);\n+                IntegrateCommand.markIntegratedAndMerged(bot, pr, scratchPath, amendedHash, reply);\n@@ -147,4 +147,0 @@\n-    private void markIntegratedAndClosed(PullRequest pr, Hash amendedHash, PrintWriter reply) {\n-        IntegrateCommand.markIntegratedAndClosed(pr, amendedHash, reply);\n-    }\n-\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/SponsorCommand.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -48,0 +48,14 @@\n+        String targetRef = pr.targetRef();\n+\n+        \/\/ This Pull Request has had its target branch set to its own pre-integration\n+        \/\/ branch, likely for the purpose of marking it as merged. Find the branch it\n+        \/\/ was actually tracking before proceeding.\n+        if (targetRef.equals(dependentRef)) {\n+            int i = pr.targetRefChanges().size() - 1;\n+            ReferenceChange change = pr.targetRefChanges().get(i);\n+            if (change.to().equals(dependentRef)) {\n+                targetRef = change.from();\n+            } else {\n+                throw new IllegalStateException(\"Change of target ref to own pre-integration branch is not the final one!\");\n+            }\n+        }\n@@ -52,1 +66,1 @@\n-                candidate.setTargetRef(pr.targetRef());\n+                candidate.setTargetRef(targetRef);\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/PreIntegrations.java","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -87,1 +87,1 @@\n-        var reviews = request.get(\"pulls\/\" + json.get(\"number\").toString() + \"\/reviews\").execute().stream()\n+        var reviews = request.get(\"pulls\/\" + this.id() + \"\/reviews\").execute().stream()\n@@ -175,1 +175,1 @@\n-        request.post(\"pulls\/\" + json.get(\"number\").toString() + \"\/reviews\")\n+        request.post(\"pulls\/\" + this.id() + \"\/reviews\")\n@@ -182,1 +182,1 @@\n-        request.put(\"pulls\/\" + json.get(\"number\").toString() + \"\/reviews\/\" + id)\n+        request.put(\"pulls\/\" + this.id() + \"\/reviews\/\" + id)\n@@ -243,1 +243,1 @@\n-        var response = request.post(\"pulls\/\" + json.get(\"number\").toString() + \"\/comments\")\n+        var response = request.post(\"pulls\/\" + this.id() + \"\/comments\")\n@@ -254,1 +254,1 @@\n-        var response = request.post(\"pulls\/\" + json.get(\"number\").toString() + \"\/comments\")\n+        var response = request.post(\"pulls\/\" + this.id() + \"\/comments\")\n@@ -263,1 +263,1 @@\n-        var reviewComments = request.get(\"pulls\/\" + json.get(\"number\").toString() + \"\/comments\").execute().stream()\n+        var reviewComments = request.get(\"pulls\/\" + this.id() + \"\/comments\").execute().stream()\n@@ -317,1 +317,1 @@\n-        request.patch(\"pulls\/\" + json.get(\"number\").toString())\n+        request.patch(\"pulls\/\" + this.id())\n@@ -333,1 +333,1 @@\n-        request.patch(\"pulls\/\" + json.get(\"number\").toString())\n+        request.patch(\"pulls\/\" + this.id())\n@@ -349,1 +349,1 @@\n-        return request.get(\"issues\/\" + json.get(\"number\").toString() + \"\/comments\").execute().stream()\n+        return request.get(\"issues\/\" + this.id() + \"\/comments\").execute().stream()\n@@ -357,1 +357,1 @@\n-        var comment = request.post(\"issues\/\" + json.get(\"number\").toString() + \"\/comments\")\n+        var comment = request.post(\"issues\/\" + this.id() + \"\/comments\")\n@@ -401,2 +401,12 @@\n-        if (json.get(\"state\").asString().equals(\"open\")) {\n-            return State.OPEN;\n+        return json.get(\"merged\").asBoolean() ? State.RESOLVED :\n+            (json.get(\"state\").asString().equals(\"open\") ? State.OPEN : State.CLOSED);\n+    }\n+\n+    @Override\n+    public void setState(State state) {\n+        if (state == State.RESOLVED) {\n+            request.put(\"pulls\/\" + this.id() + \"\/merge\").execute();\n+        } else {\n+            request.patch(\"pulls\/\" + this.id())\n+                   .body(\"state\", state == State.OPEN ? \"open\" : \"closed\")\n+                   .execute();\n@@ -404,1 +414,0 @@\n-        return State.CLOSED;\n@@ -530,7 +539,0 @@\n-    @Override\n-    public void setState(State state) {\n-        request.patch(\"pulls\/\" + json.get(\"number\").toString())\n-               .body(\"state\", state != State.OPEN ? \"closed\" : \"open\")\n-               .execute();\n-    }\n-\n@@ -541,1 +543,1 @@\n-        request.post(\"issues\/\" + json.get(\"number\").toString() + \"\/labels\")\n+        request.post(\"issues\/\" + this.id() + \"\/labels\")\n@@ -549,1 +551,1 @@\n-        request.delete(\"issues\/\" + json.get(\"number\").toString() + \"\/labels\/\" + label)\n+        request.delete(\"issues\/\" + this.id() + \"\/labels\/\" + label)\n@@ -567,1 +569,1 @@\n-        var newLabels = request.put(\"issues\/\" + json.get(\"number\").toString() + \"\/labels\")\n+        var newLabels = request.put(\"issues\/\" + this.id() + \"\/labels\")\n@@ -579,1 +581,1 @@\n-            labels = request.get(\"issues\/\" + json.get(\"number\").toString() + \"\/labels\").execute().stream()\n+            labels = request.get(\"issues\/\" + this.id() + \"\/labels\").execute().stream()\n@@ -624,1 +626,1 @@\n-        request.patch(\"issues\/\" + json.get(\"number\").toString()).body(param).execute();\n+        request.patch(\"issues\/\" + this.id()).body(param).execute();\n@@ -711,1 +713,1 @@\n-        return request.get(\"issues\/\" + json.get(\"number\").toString() + \"\/timeline\")\n+        return request.get(\"issues\/\" + this.id() + \"\/timeline\")\n@@ -724,1 +726,1 @@\n-        request.patch(\"pulls\/\" + json.get(\"number\").toString())\n+        request.patch(\"pulls\/\" + this.id())\n@@ -737,1 +739,1 @@\n-        var files = request.get(\"pulls\/\" + json.get(\"number\").toString() + \"\/files\")\n+        var files = request.get(\"pulls\/\" + this.id() + \"\/files\")\n@@ -750,1 +752,1 @@\n-        return request.get(\"issues\/\" + json.get(\"number\").toString() + \"\/timeline\")\n+        return request.get(\"issues\/\" + this.id() + \"\/timeline\")\n@@ -768,1 +770,1 @@\n-        return request.get(\"issues\/\" + json.get(\"number\").toString() + \"\/timeline\")\n+        return request.get(\"issues\/\" + this.id() + \"\/timeline\")\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubPullRequest.java","additions":32,"deletions":30,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -445,0 +445,7 @@\n+    @Override\n+    public void setState(State state) {\n+        request.put(\"\")\n+               .body(\"state_event\", state != State.OPEN ? \"close\" : \"reopen\")\n+               .execute();\n+    }\n+\n@@ -641,7 +648,0 @@\n-    @Override\n-    public void setState(State state) {\n-        request.put(\"\")\n-               .body(\"state_event\", state != State.OPEN ? \"close\" : \"reopen\")\n-               .execute();\n-    }\n-\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabMergeRequest.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -604,0 +604,4 @@\n+        \/\/ Specify what destination ref to update with what source object.\n+        \/\/ The format of a <refspec> parameter is an optional plus +, followed by\n+        \/\/ the source object, followed by a colon :, followed by the destination ref\n+        \/\/ https:\/\/git-scm.com\/docs\/git-push\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/git\/GitRepository.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"}]}