{"files":[{"patch":"@@ -174,4 +174,0 @@\n-    @Override\n-    public void merge(MergeMethod method) {\n-    }\n-\n@@ -183,4 +179,0 @@\n-    @Override\n-    public void setState(State state) {\n-    }\n-\n@@ -222,0 +214,4 @@\n+    @Override\n+    public void setState(State state) {\n+    }\n+\n","filename":"bots\/tester\/src\/test\/java\/org\/openjdk\/skara\/bots\/tester\/InMemoryPullRequest.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -174,8 +174,0 @@\n-    enum MergeMethod {\n-        MERGE,\n-        SQUASH,\n-        REBASE\n-    }\n-\n-    void merge(MergeMethod method);\n-\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/PullRequest.java","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -399,9 +399,0 @@\n-    @Override\n-    public void merge(MergeMethod method) {\n-        final String string = method == MergeMethod.REBASE ? \"rebase\" :\n-                             (method == MergeMethod.SQUASH ? \"squash\" : \"merge\");\n-        request.put(\"pulls\/\" + this.id() + \"\/merge\")\n-               .body(\"merge_method\", string)\n-               .execute();\n-    }\n-\n@@ -417,1 +408,19 @@\n-            merge(MergeMethod.SQUASH);\n+\n+           \/*\n+            *\n+            * SKARA-1663: Implement State.RESOLVED as a squash merge, until GitHub\n+            * allows for marking a Pull Request as merged in the future.\n+            *\n+            * If a method for actual merging is required, the following implementation\n+            * will suffice for the different types of merges GitHub allows for:\n+            *\n+            * request.put(\"pulls\/\" + this.id() + \"\/merge\").body(\"merge_method\", \"merge\")\n+            *        .execute();\n+            *\n+            * Where \"merge_method\" can be set to one of: \"rebase\", \"squash\", or \"merge\"\n+            *\n+            *\/\n+\n+            request.put(\"pulls\/\" + this.id() + \"\/merge\")\n+                   .body(\"merge_method\", \"squash\")\n+                   .execute();\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubPullRequest.java","additions":19,"deletions":10,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -437,12 +437,0 @@\n-    @Override\n-    public void merge(MergeMethod method) {\n-        if (method == MergeMethod.REBASE) {\n-            request.put(\"rebase\")\n-                   .execute();\n-        } else {\n-            request.put(\"merge\")\n-                   .body(\"squash\", method == MergeMethod.SQUASH ? \"true\" : \"false\")\n-                   .execute();\n-        }\n-    }\n-\n@@ -459,1 +447,20 @@\n-            merge(MergeMethod.SQUASH);\n+\n+            \/*\n+             *\n+             * SKARA-1663: Implement State.RESOLVED as a squash merge, until GitLab\n+             * allows for marking a Pull Request as merged in the future.\n+             *\n+             * If a method for actual merging is required, the following implementations\n+             * will suffice for the different types of merges GitLab allows for:\n+             *\n+             * (In order of merge methods: Rebase, Merge, and Squash)\n+             *\n+             * request.put(\"rebase\").execute();\n+             * request.put(\"merge\").body(JSON.object().put(\"squash\", false)).execute();\n+             * request.put(\"merge\").body(JSON.object().put(\"squash\", true)).execute();\n+             *\n+             *\/\n+\n+            request.put(\"merge\")\n+                   .body(JSON.object().put(\"squash\", true))\n+                   .execute();\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabMergeRequest.java","additions":20,"deletions":13,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-import org.openjdk.skara.forge.PullRequest.MergeMethod;\n@@ -245,4 +244,0 @@\n-    @Override\n-    public void merge(MergeMethod method) {\n-    }\n-\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestPullRequest.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"}]}