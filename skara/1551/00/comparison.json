{"files":[{"patch":"@@ -476,2 +476,5 @@\n-        if (fixVersion.equals(tagVersion)) {\n-            return true;\n+        \/\/ If the fix version has an opt string, check if it should be ignored, otherwise\n+        \/\/ return false if it's not equal.\n+        if (fixVersion.opt().isPresent() && !tagIgnoreOpt.contains(fixVersion.opt().get())\n+                && !fixVersion.opt().equals(tagVersion.opt())) {\n+            return false;\n@@ -479,11 +482,3 @@\n-        \/\/ If the fix version has an opt string that should be ignored, compare just the version\n-        \/\/ component parts.\n-        if (fixVersion.opt().isPresent()) {\n-            if (tagIgnoreOpt.contains(fixVersion.opt().get())\n-                    && fixVersion.components().equals(tagVersion.components())) {\n-                return true;\n-            }\n-            \/\/ If the opt strings shouldn't be ignored, break early if they aren't matching\n-            if (!fixVersion.opt().equals(tagVersion.opt())) {\n-                return false;\n-            }\n+        \/\/ At this point, if all the components are equal, we have a match\n+        if (fixVersion.components().equals(tagVersion.components())) {\n+            return true;\n@@ -491,1 +486,3 @@\n-\n+        \/\/ The fixVersion may have a prefix consisting of only lower case letters in the\n+        \/\/ first component that is not present in the tagVersion.\n+        \/\/ e.g. 'openjdk8u342' vs '8u342'\n@@ -493,2 +490,0 @@\n-            \/\/ The fixVersion may have a prefix in the first component that is not present\n-            \/\/ in the tagVersion. e.g. 'openjdk8u342' vs '8u342'\n@@ -502,1 +497,1 @@\n-                \/\/ Check if the first fixVersion component has a prefix consisting of only lower case letters\n+                \/\/ Check if the first fixVersion component without the prefix matches\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifier.java","additions":12,"deletions":17,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -983,0 +983,46 @@\n+    @Test\n+    void testTagIgnorePrefixAndOpt(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+\n+            var repo = credentials.getHostedRepository();\n+            var repoFolder = tempFolder.path().resolve(\"repo\");\n+            var localRepo = CheckableRepository.init(repoFolder, repo.repositoryType());\n+            credentials.commitLock(localRepo);\n+            localRepo.pushAll(repo.authenticatedUrl());\n+\n+            var issueProject = credentials.getIssueProject();\n+            var storageFolder = tempFolder.path().resolve(\"storage\");\n+            var jbsNotifierConfig = JSON.object().put(\"fixversions\", JSON.object()\n+                            .put(\"master\", \"foo16-bar\"))\n+                    .put(\"buildname\", \"team\")\n+                    .put(\"tag\", JSON.object().put(\"ignoreopt\", JSON.array().add(\"bar\")));\n+            var notifyBot = testBotBuilder(repo, issueProject, storageFolder, jbsNotifierConfig).create(\"notify\", JSON.object());\n+\n+            \/\/ Initialize history\n+            var current = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(current, repo.authenticatedUrl(), \"other\");\n+            localRepo.tag(current, \"jdk-16+9\", \"First tag\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(new Branch(repo.authenticatedUrl().toString()), \"--tags\", false);\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ Create an issue and commit a fix\n+            var authorEmailAddress = issueProject.issueTracker().currentUser().username() + \"@openjdk.org\";\n+            var issue = issueProject.createIssue(\"This is an issue\", List.of(\"Indeed\"), Map.of(\"issuetype\", JSON.of(\"Enhancement\")));\n+            issue.setProperty(\"fixVersions\", JSON.of(\"foo16-bar\"));\n+            issue.setState(RESOLVED);\n+            issue.setProperty(RESOLVED_IN_BUILD, JSON.of(\"master\"));\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, \"Another line\", issue.id() + \": Fix that issue\", \"Duke\", authorEmailAddress);\n+            localRepo.push(editHash, repo.authenticatedUrl(), \"master\");\n+\n+            \/\/ Tag it\n+            localRepo.tag(editHash, \"16+1\", \"Second tag\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(new Branch(repo.authenticatedUrl().toString()), \"--tags\", false);\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ The build should now be updated\n+            var updatedIssue = issueProject.issue(issue.id()).orElseThrow();\n+            assertEquals(\"b01\", updatedIssue.properties().get(RESOLVED_IN_BUILD).asString());\n+        }\n+    }\n+\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifierTests.java","additions":46,"deletions":0,"binary":false,"changes":46,"status":"modified"}]}