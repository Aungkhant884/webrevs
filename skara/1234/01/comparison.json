{"files":[{"patch":"@@ -50,0 +50,1 @@\n+    private final Map<String, List<String>> altFixVersions;\n@@ -60,2 +61,3 @@\n-            boolean setFixVersion, Map<String, String> fixVersions, JbsBackport jbsBackport, boolean prOnly,\n-                  String buildName, HostedRepository censusRepository, String censusRef, String namespace) {\n+                  boolean setFixVersion, Map<String, String> fixVersions, Map<String, List<String>> altFixVersions,\n+                  JbsBackport jbsBackport, boolean prOnly, String buildName, HostedRepository censusRepository,\n+                  String censusRef, String namespace) {\n@@ -69,0 +71,1 @@\n+        this.altFixVersions = altFixVersions;\n@@ -248,4 +251,5 @@\n-                        var fixVersion = JdkVersion.parse(requestedVersion).orElseThrow();\n-                        var existing = Backports.findIssue(issue, fixVersion);\n-                        if (existing.isEmpty()) {\n-                            issue = jbsBackport.createBackport(issue, requestedVersion, username.orElse(null));\n+                        var altFixedVersionIssue = findAltFixedVersionIssue(issue, branch);\n+                        if (altFixedVersionIssue.isPresent()) {\n+                            log.info(\"Found an already fixed backport \" + altFixedVersionIssue.get().id() + \" for \" + issue.id()\n+                                    + \" with fixVersion \" + Backports.mainFixVersion(altFixedVersionIssue.get()).orElseThrow());\n+                            return;\n@@ -253,1 +257,7 @@\n-                            issue = existing.get();\n+                            var fixVersion = JdkVersion.parse(requestedVersion).orElseThrow();\n+                            var existing = Backports.findIssue(issue, fixVersion);\n+                            if (existing.isEmpty()) {\n+                                issue = jbsBackport.createBackport(issue, requestedVersion, username.orElse(null));\n+                            } else {\n+                                issue = existing.get();\n+                            }\n@@ -298,0 +308,15 @@\n+    private Optional<Issue> findAltFixedVersionIssue(Issue issue, Branch branch) {\n+        if (altFixVersions != null) {\n+            for (var altFixVersionString : altFixVersions.getOrDefault(branch.name(), List.of())) {\n+                var altFixVersion = JdkVersion.parse(altFixVersionString).orElseThrow();\n+                var backport = Backports.findIssue(issue, altFixVersion);\n+                if (backport.isPresent()) {\n+                    if (backport.get().isResolved()) {\n+                        return backport;\n+                    }\n+                }\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifier.java","additions":32,"deletions":7,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import java.util.Map;\n+import java.util.*;\n@@ -39,0 +39,1 @@\n+    private Map<String, List<String>> altFixVersions = null;\n@@ -82,0 +83,5 @@\n+    public IssueNotifierBuilder altFixVersions(Map<String, List<String>> altFixVersions) {\n+        this.altFixVersions = altFixVersions;\n+        return this;\n+    }\n+\n@@ -115,1 +121,1 @@\n-                                 setFixVersion, fixVersions, jbsBackport, prOnly, buildName,\n+                                 setFixVersion, fixVersions, altFixVersions, jbsBackport, prOnly, buildName,\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifierBuilder.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import org.openjdk.skara.json.JSONValue;\n@@ -70,0 +71,7 @@\n+        if (notifierConfiguration.contains(\"altfixversions\")) {\n+            builder.altFixVersions(notifierConfiguration.get(\"altfixversions\").fields().stream()\n+                    .collect(Collectors.toMap(JSONObject.Field::name,\n+                            f -> f.value().asArray().stream()\n+                                    .map(JSONValue::asString)\n+                                    .toList())));\n+        }\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifierFactory.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1118,1 +1118,1 @@\n-    void testIssuePoolOpenVersion(TestInfo testInfo) throws IOException {\n+    void testIssueBackport(TestInfo testInfo) throws IOException {\n@@ -1129,1 +1129,1 @@\n-            var jbsNotifierConfig = JSON.object().put(\"fixversions\", JSON.object().put(\"master\", \"12.0.1\"));\n+            var jbsNotifierConfig = JSON.object().put(\"fixversions\", JSON.object().put(\"master\", \"12.0.2\"));\n@@ -1136,2 +1136,9 @@\n-            var issue = issueProject.createIssue(\"This is an issue\", List.of(\"Indeed\"), Map.of(\"issuetype\", JSON.of(\"Enhancement\")));\n-            issue.setProperty(\"fixVersions\", JSON.array().add(\"12-pool\").add(\"tbd_major\").add(\"unknown\"));\n+            var issue = issueProject.createIssue(\"This is an issue\", List.of(\"Indeed\"),\n+                                                 Map.of(\"issuetype\", JSON.of(\"Enhancement\"),\n+                                                        \"customfield_10008\", JSON.of(\"java.io\")\n+                                                 ));\n+            var level = issue.properties().get(\"security\");\n+            issue.setProperty(\"fixVersions\", JSON.array().add(\"13.0.1\"));\n+            issue.setProperty(\"priority\", JSON.of(\"1\"));\n+            issue.addLabel(\"test\");\n+            issue.addLabel(\"temporary\");\n@@ -1139,1 +1146,2 @@\n-            var editHash = CheckableRepository.appendAndCommit(localRepo, \"Another line\", issue.id() + \": Fix that issue\");\n+            var authorEmailAddress = issueProject.issueTracker().currentUser().username() + \"@openjdk.org\";\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, \"Another line\", issue.id() + \": Fix that issue\", \"Duke\", authorEmailAddress);\n@@ -1143,2 +1151,28 @@\n-            \/\/ The fixVersion should have been updated\n-            assertEquals(Set.of(\"12.0.1\"), fixVersions(issue));\n+            \/\/ The fixVersion should not have been updated\n+            var updatedIssue = issueProject.issue(issue.id()).orElseThrow();\n+            assertEquals(Set.of(\"13.0.1\"), fixVersions(updatedIssue));\n+            assertEquals(OPEN, updatedIssue.state());\n+            assertEquals(List.of(), updatedIssue.assignees());\n+\n+            \/\/ There should be a link\n+            var links = updatedIssue.links();\n+            assertEquals(1, links.size());\n+            var link = links.get(0);\n+            var backport = link.issue().orElseThrow();\n+\n+            \/\/ The backport issue should have a correct fixVersion and assignee\n+            assertEquals(Set.of(\"12.0.2\"), fixVersions(backport));\n+            assertEquals(RESOLVED, backport.state());\n+            assertEquals(List.of(issueProject.issueTracker().currentUser()), backport.assignees());\n+\n+            \/\/ Custom properties should also propagate\n+            assertEquals(\"1\", backport.properties().get(\"priority\").asString());\n+            assertEquals(\"java.io\", backport.properties().get(\"customfield_10008\").asString());\n+\n+            \/\/ Labels should not\n+            assertEquals(0, backport.labelNames().size());\n+\n+            \/\/ If the parent issue has a security level (can be configured when running a test manually) it should be propagated\n+            if (level != null) {\n+                assertEquals(level.asString(), backport.properties().get(\"security\").asString());\n+            }\n@@ -1149,1 +1183,1 @@\n-    void testIssueBackport(TestInfo testInfo) throws IOException {\n+    void testAltFixVersionsNoMatch(TestInfo testInfo) throws IOException {\n@@ -1160,1 +1194,2 @@\n-            var jbsNotifierConfig = JSON.object().put(\"fixversions\", JSON.object().put(\"master\", \"12.0.2\"));\n+            var jbsNotifierConfig = JSON.object().put(\"fixversions\", JSON.object().put(\"master\", \"jdk-cpu\"));\n+            jbsNotifierConfig.put(\"altfixversions\", JSON.object().put(\"master\", JSON.array().add(\"18\")));\n@@ -1168,8 +1203,3 @@\n-                                                 Map.of(\"issuetype\", JSON.of(\"Enhancement\"),\n-                                                        \"customfield_10008\", JSON.of(\"java.io\")\n-                                                 ));\n-            var level = issue.properties().get(\"security\");\n-            issue.setProperty(\"fixVersions\", JSON.array().add(\"13.0.1\"));\n-            issue.setProperty(\"priority\", JSON.of(\"1\"));\n-            issue.addLabel(\"test\");\n-            issue.addLabel(\"temporary\");\n+                    Map.of(\"issuetype\", JSON.of(\"Enhancement\")));\n+            issue.setProperty(\"fixVersions\", JSON.array().add(\"17\"));\n+            issue.setState(RESOLVED);\n@@ -1184,2 +1214,2 @@\n-            assertEquals(Set.of(\"13.0.1\"), fixVersions(updatedIssue));\n-            assertEquals(OPEN, updatedIssue.state());\n+            assertEquals(Set.of(\"17\"), fixVersions(updatedIssue));\n+            assertEquals(RESOLVED, updatedIssue.state());\n@@ -1195,1 +1225,1 @@\n-            assertEquals(Set.of(\"12.0.2\"), fixVersions(backport));\n+            assertEquals(Set.of(\"jdk-cpu\"), fixVersions(backport));\n@@ -1199,3 +1229,2 @@\n-            \/\/ Custom properties should also propagate\n-            assertEquals(\"1\", backport.properties().get(\"priority\").asString());\n-            assertEquals(\"java.io\", backport.properties().get(\"customfield_10008\").asString());\n+        }\n+    }\n@@ -1203,2 +1232,9 @@\n-            \/\/ Labels should not\n-            assertEquals(0, backport.labelNames().size());\n+    @Test\n+    void testAltFixVersionsMatch(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var repo = credentials.getHostedRepository();\n+            var repoFolder = tempFolder.path().resolve(\"repo\");\n+            var localRepo = CheckableRepository.init(repoFolder, repo.repositoryType(), Path.of(\"appendable.txt\"), Set.of(), null);\n+            credentials.commitLock(localRepo);\n+            localRepo.pushAll(repo.url());\n@@ -1206,4 +1242,30 @@\n-            \/\/ If the parent issue has a security level (can be configured when running a test manually) it should be propagated\n-            if (level != null) {\n-                assertEquals(level.asString(), backport.properties().get(\"security\").asString());\n-            }\n+            var storageFolder = tempFolder.path().resolve(\"storage\");\n+            var issueProject = credentials.getIssueProject();\n+            var jbsNotifierConfig = JSON.object().put(\"fixversions\", JSON.object().put(\"master\", \"jdk-cpu\"));\n+            jbsNotifierConfig.put(\"altfixversions\", JSON.object().put(\"master\", JSON.array().add(\"18\")));\n+            var notifyBot = testBotBuilder(repo, issueProject, storageFolder, jbsNotifierConfig).create(\"notify\", JSON.object());\n+\n+            \/\/ Initialize history\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ Create an issue and commit a fix\n+            var issue = issueProject.createIssue(\"This is an issue\", List.of(\"Indeed\"),\n+                    Map.of(\"issuetype\", JSON.of(\"Enhancement\")));\n+            issue.setProperty(\"fixVersions\", JSON.array().add(\"18\"));\n+            issue.setState(RESOLVED);\n+\n+            var authorEmailAddress = issueProject.issueTracker().currentUser().username() + \"@openjdk.org\";\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, \"Another line\", issue.id() + \": Fix that issue\", \"Duke\", authorEmailAddress);\n+            localRepo.push(editHash, repo.url(), \"master\");\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ The fixVersion should not have been updated\n+            var updatedIssue = issueProject.issue(issue.id()).orElseThrow();\n+            assertEquals(Set.of(\"18\"), fixVersions(updatedIssue));\n+            assertEquals(RESOLVED, updatedIssue.state());\n+            assertEquals(List.of(), updatedIssue.assignees());\n+            assertEquals(0, updatedIssue.comments().size());\n+\n+            \/\/ There should be no link\n+            var links = updatedIssue.links();\n+            assertEquals(0, links.size());\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifierTests.java","additions":91,"deletions":29,"binary":false,"changes":120,"status":"modified"},{"patch":"@@ -257,1 +257,1 @@\n-    private static final Pattern featureFamilyPattern = Pattern.compile(\"^([^\\\\d]*)(\\\\d+)$\");\n+    private static final Pattern featureFamilyPattern = Pattern.compile(\"^([^\\\\d]*)(\\\\d*)$\");\n@@ -386,1 +386,2 @@\n-            var numericFeature = Integer.parseInt(featureVersion);\n+            if (featureVersion.length() > 0) {\n+                var numericFeature = Integer.parseInt(featureVersion);\n@@ -388,2 +389,3 @@\n-            if (numericFeature >= 9 && version.interim().isPresent() && !version.interim().get().equals(\"0\")) {\n-                return true;\n+                if (numericFeature >= 9 && version.interim().isPresent() && !version.interim().get().equals(\"0\")) {\n+                    return true;\n+                }\n","filename":"jbs\/src\/main\/java\/org\/openjdk\/skara\/jbs\/Backports.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -86,1 +86,0 @@\n-            var prefixMatcher = prefixPattern.matcher(raw);\n@@ -88,4 +87,9 @@\n-            if (prefixMatcher.matches()) {\n-                prefix = prefixMatcher.group(1);\n-                raw = prefixMatcher.group(2);\n-            }\n+            if (\"jdk\".equals(raw) && \"cpu\".equals(optional)) {\n+                \/\/ Special case of jdk-cpu. This symbolic version has no set numbers\n+                finalComponents.add(\"jdk\");\n+            } else {\n+                var prefixMatcher = prefixPattern.matcher(raw);\n+                if (prefixMatcher.matches()) {\n+                    prefix = prefixMatcher.group(1);\n+                    raw = prefixMatcher.group(2);\n+                }\n@@ -93,1 +97,1 @@\n-            finalComponents.addAll(Arrays.asList(raw.split(\"\\\\.\")));\n+                finalComponents.addAll(Arrays.asList(raw.split(\"\\\\.\")));\n@@ -95,2 +99,7 @@\n-            \/\/ All components except the optional one must be numeric\n-            finalComponents.forEach(Integer::parseUnsignedInt);\n+                \/\/ All components except the optional one must be numeric\n+                finalComponents.forEach(Integer::parseUnsignedInt);\n+\n+                if (prefix != null) {\n+                    finalComponents.set(0, prefix + finalComponents.get(0));\n+                }\n+            }\n@@ -102,4 +111,0 @@\n-\n-            if (prefix != null) {\n-                finalComponents.set(0, prefix + finalComponents.get(0));\n-            }\n","filename":"jbs\/src\/main\/java\/org\/openjdk\/skara\/jbs\/JdkVersion.java","additions":17,"deletions":12,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -815,0 +815,14 @@\n+    \/**\n+     * Verify that the special jdk-cpu version does not ever get labeled.\n+     *\/\n+    @Test\n+    void cpu(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo)) {\n+            var backports = new BackportManager(credentials, \"17\");\n+            backports.assertLabeled();\n+\n+            backports.addBackports(\"16\", \"16.0.2\", \"jdk-cpu\");\n+            backports.assertLabeled(\"16.0.2\", \"17\");\n+        }\n+    }\n+\n","filename":"jbs\/src\/test\/java\/org\/openjdk\/skara\/jbs\/BackportsTests.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -87,0 +88,7 @@\n+    @Test\n+    void jdkCpu() {\n+        var jdkCpu = from(\"jdk-cpu\");\n+        assertEquals(List.of(\"jdk\"), jdkCpu.components());\n+        assertEquals(\"cpu\", jdkCpu.opt().orElseThrow());\n+    }\n+\n@@ -115,0 +123,7 @@\n+    @Test\n+    void jdkCpuOrder() {\n+        assertTrue(from(\"16\").compareTo(from(\"jdk-cpu\")) < 0);\n+        assertTrue(from(\"16.0.2\").compareTo(from(\"jdk-cpu\")) < 0);\n+        assertTrue(from(\"17\").compareTo(from(\"jdk-cpu\")) < 0);\n+    }\n+\n","filename":"jbs\/src\/test\/java\/org\/openjdk\/skara\/jbs\/JdkVersionTests.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"}]}