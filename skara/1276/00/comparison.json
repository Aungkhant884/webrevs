{"files":[{"patch":"@@ -60,0 +60,3 @@\n+    \/\/ If true, use the version found in .jcheck\/conf in the HEAD revision instead of the\n+    \/\/ current commit when resolving fixVersion for a new commit.\n+    private final boolean useHeadVersion;\n@@ -68,1 +71,1 @@\n-                  String censusRef, String namespace) {\n+                  String censusRef, String namespace, boolean useHeadVersion) {\n@@ -83,0 +86,1 @@\n+        this.useHeadVersion = useHeadVersion;\n@@ -419,1 +423,2 @@\n-                var conf = localRepository.lines(Path.of(\".jcheck\/conf\"), commit.hash());\n+                var hash = (useHeadVersion ? localRepository.resolve(branch).orElseThrow() : commit.hash());\n+                var conf = localRepository.lines(Path.of(\".jcheck\/conf\"), hash);\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifier.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+    private boolean useHeadVersion = false;\n@@ -118,0 +119,5 @@\n+    public IssueNotifierBuilder useHeadVersion(boolean useHeadVersion) {\n+        this.useHeadVersion = useHeadVersion;\n+        return this;\n+    }\n+\n@@ -122,1 +128,1 @@\n-                                 censusRepository, censusRef, namespace);\n+                                 censusRepository, censusRef, namespace, useHeadVersion);\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifierBuilder.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -107,0 +107,4 @@\n+        if (notifierConfiguration.contains(\"headversion\")) {\n+            builder.useHeadVersion(notifierConfiguration.get(\"headversion\").asBoolean());\n+        }\n+\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifierFactory.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1082,0 +1082,64 @@\n+    @Test\n+    void testIssueHeadVersion(TestInfo testInfo) throws IOException {\n+        headVersionHelper(testInfo, true);\n+    }\n+    @Test\n+    void testIssueHeadVersionFalse(TestInfo testInfo) throws IOException {\n+        headVersionHelper(testInfo, false);\n+    }\n+\n+    private void headVersionHelper(TestInfo testInfo, boolean useHeadVersion) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var repo = credentials.getHostedRepository();\n+            var repoFolder = tempFolder.path().resolve(\"repo\");\n+            var localRepo = CheckableRepository.init(repoFolder, repo.repositoryType(), Path.of(\"appendable.txt\"), Set.of(), \"1\");\n+            credentials.commitLock(localRepo);\n+            localRepo.pushAll(repo.url());\n+            var baseHash = localRepo.resolve(\"HEAD\").orElseThrow();\n+\n+            var storageFolder = tempFolder.path().resolve(\"storage\");\n+            var issueProject = credentials.getIssueProject();\n+            var jbsNotifierConfig = JSON.object()\n+                    .put(\"fixversions\", JSON.object())\n+                    .put(\"headversion\", JSON.of(useHeadVersion));\n+            var notifyBot = testBotBuilder(repo, issueProject, storageFolder, jbsNotifierConfig).create(\"notify\", JSON.object());\n+\n+            \/\/ Initialize history\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ Create an issue and commit a fix\n+            var issue = issueProject.createIssue(\"This is an issue\", List.of(\"Indeed\"), Map.of(\"issuetype\", JSON.of(\"Enhancement\")));\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, \"Another line\", issue.id() + \": Fix that issue\");\n+\n+            \/\/ Update the fix version in a change parallel to the fix and then merge them together\n+            localRepo.checkout(baseHash);\n+            var jcheckConfFile = repoFolder.resolve(\".jcheck\/conf\");\n+            var jcheckConfContents = Files.readAllLines(jcheckConfFile).stream()\n+                    .map(l -> l.startsWith(\"version=\") ? \"version=2\" : l)\n+                    .toList();\n+            Files.write(jcheckConfFile, jcheckConfContents);\n+            localRepo.add(jcheckConfFile);\n+            var newVersionHash = localRepo.commit(\"Update fixversion\", \"testauthor\", \"ta@none.none\");\n+            localRepo.checkout(new Branch(\"master\"));\n+            localRepo.merge(newVersionHash);\n+            var mergeHash = localRepo.commit(\"Merge\", \"testauthor\", \"ta@none.none\");\n+            localRepo.push(mergeHash, repo.url(), \"master\");\n+\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ The changeset should be reflected in a comment\n+            var comments = issue.comments();\n+            assertEquals(1, comments.size());\n+            var comment = comments.get(0);\n+            assertTrue(comment.body().contains(editHash.toString()));\n+\n+            \/\/ The fixVersion should be 1 or 2 depending useHeadVersion\n+            if (useHeadVersion) {\n+                assertEquals(Set.of(\"2\"), fixVersions(issue));\n+            } else {\n+                assertEquals(Set.of(\"1\"), fixVersions(issue));\n+            }\n+        }\n+    }\n+\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifierTests.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"modified"}]}