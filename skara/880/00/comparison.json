{"files":[{"patch":"@@ -137,1 +137,0 @@\n-                        localRepoInstance.fetchAll();\n@@ -156,0 +155,1 @@\n+        var remote = allowStale ? hostedRepositoryInstance.seed.toUri() : hostedRepository.url();\n@@ -157,1 +157,3 @@\n-            localClone.checkout(new Branch(ref), true);\n+            log.info(\"Updating local repository from: \" + remote);\n+            var refHash = localClone.fetch(remote, \"+\" + ref + \":hostedrepositorypool\");\n+            localClone.checkout(refHash, true);\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/HostedRepositoryPool.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -77,0 +77,52 @@\n+\n+    @Test\n+    void partialExisting(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var sourceFolder = new TemporaryDirectory();\n+             var seedFolder = new TemporaryDirectory();\n+             var cloneFolder = new TemporaryDirectory()) {\n+            var source = credentials.getHostedRepository();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(sourceFolder.path(), source.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, source.url(), \"master\", true);\n+\n+            var pool = new HostedRepositoryPool(seedFolder.path());\n+            var clone = pool.checkout(source, \"master\", cloneFolder.path());\n+            assertFalse(CheckableRepository.hasBeenEdited(clone));\n+\n+            \/\/ Push something else\n+            var hash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(hash, source.url(), \"master\");\n+\n+            var updatedClone = pool.checkout(source, \"master\", cloneFolder.path());\n+            assertTrue(CheckableRepository.hasBeenEdited(updatedClone));\n+        }\n+    }\n+\n+    @Test\n+    void partialExistingAllowStale(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var sourceFolder = new TemporaryDirectory();\n+             var seedFolder = new TemporaryDirectory();\n+             var cloneFolder = new TemporaryDirectory()) {\n+            var source = credentials.getHostedRepository();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(sourceFolder.path(), source.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, source.url(), \"master\", true);\n+\n+            var pool = new HostedRepositoryPool(seedFolder.path());\n+            var clone = pool.checkout(source, \"master\", cloneFolder.path());\n+            assertFalse(CheckableRepository.hasBeenEdited(clone));\n+\n+            \/\/ Push something else\n+            var hash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(hash, source.url(), \"master\");\n+\n+            var updatedClone = pool.checkoutAllowStale(source, \"master\", cloneFolder.path());\n+            assertFalse(CheckableRepository.hasBeenEdited(updatedClone));\n+        }\n+    }\n","filename":"forge\/src\/test\/java\/org\/openjdk\/skara\/forge\/HostedRepositoryPoolTests.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"modified"}]}