{"files":[{"patch":"@@ -218,1 +218,2 @@\n-        return new ArchiveItem(parent, \"cn\", pr.updatedAt(), pr.updatedAt(), pr.author(), Map.of(\"PR-Closed-Notice\", \"0\"),\n+        var closedBy = pr.closedBy().orElseThrow(() -> new RuntimeException(\"PR is not closed by anyone: \" + pr.id()));\n+        return new ArchiveItem(parent, \"cn\", pr.updatedAt(), pr.updatedAt(), closedBy, Map.of(\"PR-Closed-Notice\", \"0\"),\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/ArchiveItem.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -188,0 +188,4 @@\n+        if (bot.ignoredUsers().contains(originalAuthor.username())) {\n+            return bot.emailAddress();\n+        }\n+\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/ArchiveWorkItem.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -641,2 +641,3 @@\n-            \/\/ Close it\n-            pr.setState(Issue.State.CLOSED);\n+            \/\/ Close it (as a separate user)\n+            var closerPr = ignored.pullRequest(pr.id());\n+            closerPr.setState(Issue.State.CLOSED);\n@@ -658,0 +659,5 @@\n+\n+            \/\/ The closer should be the bot account - not the PR creator nor the closer\n+            assertEquals(2, archiveContainsCount(archiveFolder.path(), Pattern.quote(\"From: test+2+user2 at openjdk.java.net (User Number 2)\")));\n+            assertEquals(1, archiveContainsCount(archiveFolder.path(), Pattern.quote(\"From: test at test.mail (test)\")));\n+            assertEquals(0, archiveContainsCount(archiveFolder.path(), Pattern.quote(\"From: test+3+user3 at openjdk.java.net (User Number 3)\")));\n","filename":"bots\/mlbridge\/src\/test\/java\/org\/openjdk\/skara\/bots\/mlbridge\/MailingListBridgeBotTests.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -307,0 +307,5 @@\n+\n+    @Override\n+    public Optional<HostUser> closedBy() {\n+        return Optional.empty();\n+    }\n","filename":"bots\/tester\/src\/test\/java\/org\/openjdk\/skara\/bots\/tester\/InMemoryPullRequest.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -705,0 +705,16 @@\n+\n+    @Override\n+    public Optional<HostUser> closedBy() {\n+        if (!isClosed()) {\n+            return Optional.empty();\n+        }\n+\n+        return request.get(\"issues\/\" + json.get(\"number\").toString() + \"\/timeline\")\n+                      .execute()\n+                      .stream()\n+                      .map(JSONValue::asObject)\n+                      .filter(obj -> obj.contains(\"event\"))\n+                      .filter(obj -> obj.get(\"event\").asString().equals(\"closed\"))\n+                      .reduce((a, b) -> b)\n+                      .map(e -> host.parseUserObject(e.get(\"actor\")));\n+    }\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubPullRequest.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -774,0 +774,9 @@\n+\n+    @Override\n+    public Optional<HostUser> closedBy() {\n+        if (!isClosed()) {\n+            return Optional.empty();\n+        }\n+\n+        return Optional.of(host.parseAuthorObject(json.get(\"closed_by\").asObject()));\n+    }\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabMergeRequest.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -118,0 +118,12 @@\n+    default boolean isOpen() {\n+        return state() == State.OPEN;\n+    }\n+\n+    default boolean isClosed() {\n+        return state() == State.CLOSED;\n+    }\n+\n+    default boolean isResolved() {\n+        return state() == State.RESOLVED;\n+    }\n+\n@@ -176,0 +188,2 @@\n+\n+    Optional<HostUser> closedBy();\n","filename":"issuetracker\/src\/main\/java\/org\/openjdk\/skara\/issuetracker\/Issue.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -542,0 +542,5 @@\n+\n+    @Override\n+    public Optional<HostUser> closedBy() {\n+        throw new RuntimeException(\"Not implemented yet\");\n+    }\n","filename":"issuetracker\/src\/main\/java\/org\/openjdk\/skara\/issuetracker\/jira\/JiraIssue.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+    HostUser closedBy = null;\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/IssueData.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -150,0 +150,1 @@\n+        data.closedBy = user;\n@@ -248,0 +249,5 @@\n+\n+    @Override\n+    public Optional<HostUser> closedBy() {\n+        return isClosed() ? Optional.of(data.closedBy) : Optional.empty();\n+    }\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestIssue.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}