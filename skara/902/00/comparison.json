{"files":[{"patch":"@@ -28,0 +28,1 @@\n+import java.net.URI;\n@@ -47,1 +48,1 @@\n-            this.seed = seedStorage.resolve(hostedRepository.name());\n+            this.seed = seedStorage.resolve(hostedRepository.name() + (hostedRepository.repositoryType() == VCS.GIT ? \".git\" : \"\"));\n@@ -61,0 +62,5 @@\n+        private URI seedUri() {\n+            var uri = seed.toUri().toString().replaceAll(\".git[\/\\\\\\\\]$\", \".git\");\n+            return URI.create(uri);\n+        }\n+\n@@ -83,0 +89,2 @@\n+                    } else {\n+                        log.info(\"Seed is potentially stale, time to fetch the latest upstream changes\");\n@@ -87,6 +95,15 @@\n-            try {\n-                log.info(\"Seed is potentially stale, time to fetch the latest upstream changes\");\n-                seedRepo.fetch(hostedRepository.url(), \"+*:*\", true);\n-            } catch (IOException e) {\n-                if (!allowStale) {\n-                    throw e;\n+            IOException lastException = null;\n+            for (int counter = 0; counter < 5; counter++) {\n+                try {\n+                    seedRepo.fetch(hostedRepository.url(), \"+*:*\", true);\n+                } catch (IOException e) {\n+                    if (!allowStale) {\n+                        lastException = e;\n+                        try {\n+                            Thread.sleep(Duration.ofSeconds(1).toMillis());\n+                        } catch (InterruptedException ignored) {\n+                        }\n+                    } else {\n+                        log.info(\"Failed to refresh seed - ignoring\");\n+                        return;\n+                    }\n@@ -95,0 +112,4 @@\n+            if (lastException != null) {\n+                log.info(\"Failed to refresh stale seed - giving up\");\n+                throw lastException;\n+            }\n@@ -103,3 +124,4 @@\n-            refreshSeed(allowStale);\n-            log.info(\"Using seed folder \" + seed + \" when cloning into \" + path);\n-            return Repository.clone(hostedRepository.url(), path, false, seed);\n+            refreshSeed(true);\n+            var remote = allowStale ? seedUri() : hostedRepository.url();\n+            log.info(\"Using seed folder \" + seed + \" when cloning into \" + path + \" from \" + remote);\n+            return Repository.clone(remote, path, false, seed);\n@@ -137,1 +159,0 @@\n-                        refreshSeed(allowStale);\n@@ -156,2 +177,4 @@\n-        var localClone = hostedRepositoryInstance.materializeClone(path, allowStale);\n-        var remote = allowStale ? hostedRepositoryInstance.seed.toUri() : hostedRepository.url();\n+        var localClone = hostedRepositoryInstance.materializeClone(path, true);\n+        var remote = allowStale ? hostedRepositoryInstance.seedUri() : hostedRepository.url();\n+        log.info(\"Updating local repository from: \" + remote);\n+        var refHash = localClone.fetch(remote, \"+\" + ref + \":hostedrepositorypool\");\n@@ -159,2 +182,0 @@\n-            log.info(\"Updating local repository from: \" + remote);\n-            var refHash = localClone.fetch(remote, \"+\" + ref + \":hostedrepositorypool\");\n@@ -166,1 +187,1 @@\n-            localClone = hostedRepositoryInstance.materializeClone(path, allowStale);\n+            localClone = hostedRepositoryInstance.materializeClone(path, false);\n@@ -196,1 +217,1 @@\n-        return hostedRepositoryInstance.seedRepository(false);\n+        return hostedRepositoryInstance.seedRepository(allowStale);\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/HostedRepositoryPool.java","additions":38,"deletions":17,"binary":false,"changes":55,"status":"modified"}]}