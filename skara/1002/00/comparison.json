{"files":[{"patch":"@@ -52,0 +52,1 @@\n+    implementation project(':jbs')\n","filename":"bots\/notify\/build.gradle","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+    requires org.openjdk.skara.jbs;\n","filename":"bots\/notify\/src\/main\/java\/module-info.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import org.openjdk.skara.issuetracker.*;\n@@ -30,0 +29,2 @@\n+import org.openjdk.skara.issuetracker.*;\n+import org.openjdk.skara.jbs.*;\n@@ -269,1 +270,12 @@\n-                        Backports.labelReleaseStreamDuplicates(issue, \"hgupdate-sync\");\n+\n+                        var related = Backports.findBackports(issue, true);\n+                        var allIssues = new ArrayList<Issue>();\n+                        allIssues.add(issue);\n+                        allIssues.addAll(related);\n+\n+                        var duplicates = Backports.releaseStreamDuplicates(allIssues);\n+                        for (var i : duplicates) {\n+                            if (!i.labels().contains(\"hgupdate-sync\")) {\n+                                i.addLabel(\"hgupdate-sync\");\n+                            }\n+                        }\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifier.java","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -52,0 +52,1 @@\n+    implementation project(':jbs')\n","filename":"cli\/build.gradle","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+    requires org.openjdk.skara.jbs;\n","filename":"cli\/src\/main\/java\/module-info.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -48,1 +48,4 @@\n-                       .main(GitMlRules::main)\n+                       .main(GitMlRules::main),\n+                Command.name(\"issue-redecorate\")\n+                       .helptext(\"reapplies the hgupdate-sync label to the given ussue\")\n+                       .main(IssueRedecorate::main)\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/SkaraDebug.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,109 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.cli.debug;\n+\n+import org.openjdk.skara.args.*;\n+import org.openjdk.skara.issuetracker.*;\n+import org.openjdk.skara.jbs.*;\n+import org.openjdk.skara.version.Version;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.*;\n+\n+public class IssueRedecorate {\n+    static final List<Flag> flags = List.of(\n+            Switch.shortcut(\"u\")\n+                  .fullname(\"url\")\n+                  .helptext(\"Alternative JBS URL (defaults to https:\/\/bugs.openjdk.java.net)\")\n+                  .optional(),\n+            Switch.shortcut(\"\")\n+                  .fullname(\"version\")\n+                  .helptext(\"Print the version of this tool\")\n+                  .optional());\n+\n+    static final List<Input> inputs = List.of(\n+            Input.position(0)\n+                 .describe(\"issue ID\")\n+                 .singular()\n+                 .required()\n+            );\n+\n+    public static void main(String[] args) throws IOException {\n+        var parser = new ArgumentParser(\"git issue-redecorate\", flags, inputs);\n+        var arguments = parser.parse(args);\n+\n+        if (arguments.contains(\"version\")) {\n+            System.out.println(\"git-issue-redecorate version: \" + Version.fromManifest().orElse(\"unknown\"));\n+            System.exit(0);\n+        }\n+\n+        IssueTracker issueTracker = null;\n+        var issueTrackerURI = URI.create(arguments.get(\"url\").orString(\"https:\/\/bugs.openjdk.java.net\"));\n+        var issueTrackerFactories = IssueTrackerFactory.getIssueTrackerFactories();\n+        for (var issueTrackerFactory : issueTrackerFactories) {\n+            var tracker = issueTrackerFactory.create(issueTrackerURI, null, null);\n+            if (tracker.isValid()) {\n+                issueTracker = tracker;\n+            }\n+        }\n+        if (issueTracker == null) {\n+            System.out.println(\"Failed to create an issue tracker instance for \" + issueTrackerURI);\n+            System.exit(1);\n+        }\n+\n+        var issueProject = issueTracker.project(\"JDK\");\n+        org.openjdk.skara.issuetracker.Issue issue = issueProject.issue(arguments.at(0).asString()).orElseThrow();\n+\n+        var mainIssue = Backports.findMainIssue(issue);\n+        if (mainIssue.isEmpty()) {\n+            System.out.println(\"No corresponding main issue found\");\n+            System.exit(0);\n+        }\n+        System.out.println(\"Looking at \" + arguments.at(0).asString() + \" - main issue is \" + mainIssue.get().id());\n+\n+        var related = Backports.findBackports(mainIssue.get(), true);\n+        var allIssues = new ArrayList<Issue>();\n+        allIssues.add(mainIssue.get());\n+        allIssues.addAll(related);\n+\n+        var needsLabel = new HashSet<>(Backports.releaseStreamDuplicates(allIssues));\n+        for (var i : allIssues) {\n+            var version = Backports.mainFixVersion(i);\n+            var versionString = version.map(JdkVersion::raw).orElse(\"no fix version\");\n+            if (needsLabel.contains(i)) {\n+                if (i.labels().contains(\"hgupdate-sync\")) {\n+                    System.out.println(\"✔️ \" + i.id() + \" (\" + versionString + \") - already labeled\");\n+                } else {\n+                    System.out.println(\"⏳ \" + i.id() + \" (\" + versionString + \") - needs to be labeled\");\n+                }\n+            } else {\n+                if (i.labels().contains(\"hgupdate-sync\")) {\n+                    System.out.println(\"❌ \" + i.id() + \" (\" + versionString + \") - labeled incorrectly\");\n+                } else {\n+                    System.out.println(\"✔️ \" + i.id() + \" (\" + versionString + \") - not labeled\");\n+                }\n+            }\n+        }\n+    }\n+}\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/debug\/IssueRedecorate.java","additions":109,"deletions":0,"binary":false,"changes":109,"status":"added"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+module {\n+    name = 'org.openjdk.skara.jbs'\n+    test {\n+        requires 'org.junit.jupiter.api'\n+        opens 'org.openjdk.skara.jbs' to 'org.junit.platform.commons'\n+    }\n+}\n+\n+dependencies {\n+    implementation project(':host')\n+    implementation project(':issuetracker')\n+    implementation project(':json')\n+\n+    testImplementation project(':test')\n+}\n+\n+publishing {\n+    publications {\n+        args(MavenPublication) {\n+            from components.java\n+        }\n+    }\n+}\n","filename":"jbs\/build.gradle","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"},{"patch":"@@ -0,0 +1,31 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+module org.openjdk.skara.jbs {\n+    requires java.net.http;\n+    requires java.logging;\n+\n+    requires org.openjdk.skara.issuetracker;\n+    requires org.openjdk.skara.json;\n+\n+    exports org.openjdk.skara.jbs;\n+}\n","filename":"jbs\/src\/main\/java\/module-info.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"@@ -23,1 +23,1 @@\n-package org.openjdk.skara.bots.notify.issue;\n+package org.openjdk.skara.jbs;\n@@ -64,1 +64,1 @@\n-    static Optional<JdkVersion> mainFixVersion(Issue issue) {\n+    public static Optional<JdkVersion> mainFixVersion(Issue issue) {\n@@ -86,1 +86,1 @@\n-    static Optional<Issue> findMainIssue(Issue issue) {\n+    public static Optional<Issue> findMainIssue(Issue issue) {\n@@ -162,1 +162,1 @@\n-    static Optional<Issue> findIssue(Issue primary, JdkVersion fixVersion) {\n+    public static Optional<Issue> findIssue(Issue primary, JdkVersion fixVersion) {\n@@ -194,1 +194,1 @@\n-    static List<Issue> findBackports(Issue primary, boolean resolvedOnly) {\n+    public static List<Issue> findBackports(Issue primary, boolean resolvedOnly) {\n@@ -298,4 +298,2 @@\n-     * Applies a label to later releases in a release stream.\n-     *\n-     * The label should not be applied to the first release in a specific stream where a fix ships. I.e.\n-     * it should only be applied to issues in any given stream if the fix version of the issue *is not* the first\n+     * Returns release stream duplicate issue. I.e.\n+     * it will contain issues in any given stream if the fix version of the issue *is not* the first\n@@ -304,2 +302,1 @@\n-     * @param issue\n-     * @param label\n+     * @param related\n@@ -307,10 +304,2 @@\n-    static void labelReleaseStreamDuplicates(Issue issue, String label) {\n-        var mainIssue = Backports.findMainIssue(issue);\n-        if (mainIssue.isEmpty()) {\n-            return;\n-        }\n-        var related = Backports.findBackports(mainIssue.get(), true);\n-\n-        var allIssues = new ArrayList<Issue>();\n-        allIssues.add(mainIssue.get());\n-        allIssues.addAll(related);\n+    public static List<Issue> releaseStreamDuplicates(List<Issue> related) {\n+        var ret = new ArrayList<Issue>();\n@@ -318,1 +307,1 @@\n-        for (var streamIssues : groupByReleaseStream(allIssues)) {\n+        for (var streamIssues : groupByReleaseStream(related)) {\n@@ -327,5 +316,1 @@\n-                for (var i : rest) {\n-                    if (!i.labels().contains(label)) {\n-                        i.addLabel(label);\n-                    }\n-                }\n+                ret.addAll(rest);\n@@ -334,0 +319,2 @@\n+\n+        return ret;\n","filename":"jbs\/src\/main\/java\/org\/openjdk\/skara\/jbs\/Backports.java","additions":14,"deletions":27,"binary":false,"changes":41,"previous_filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/Backports.java","status":"renamed"},{"patch":"@@ -23,1 +23,1 @@\n-package org.openjdk.skara.bots.notify.issue;\n+package org.openjdk.skara.jbs;\n","filename":"jbs\/src\/main\/java\/org\/openjdk\/skara\/jbs\/BuildCompare.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/BuildCompare.java","status":"renamed"},{"patch":"@@ -23,1 +23,1 @@\n-package org.openjdk.skara.bots.notify.issue;\n+package org.openjdk.skara.jbs;\n@@ -144,0 +144,4 @@\n+    public String raw() {\n+        return raw;\n+    }\n+\n","filename":"jbs\/src\/main\/java\/org\/openjdk\/skara\/jbs\/JdkVersion.java","additions":5,"deletions":1,"binary":false,"changes":6,"previous_filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/JdkVersion.java","status":"renamed"},{"patch":"@@ -23,1 +23,1 @@\n-package org.openjdk.skara.bots.notify.issue;\n+package org.openjdk.skara.jbs;\n@@ -32,0 +32,1 @@\n+import java.util.stream.Collectors;\n@@ -223,2 +224,8 @@\n-            Backports.labelReleaseStreamDuplicates(issues.get(0), \"hgupdate-sync\");\n-\n+            var related = Backports.findBackports(issues.get(0), true);\n+            var allIssues = new ArrayList<Issue>();\n+            allIssues.add(issues.get(0));\n+            allIssues.addAll(related);\n+            var labeledIssues = Backports.releaseStreamDuplicates(allIssues)\n+                                         .stream()\n+                                         .map(issue -> issue.properties().get(\"fixVersions\").get(0).asString())\n+                                         .collect(Collectors.toSet());\n@@ -226,7 +233,0 @@\n-            var labeledIssues = new HashSet<String>();\n-            for (var issue : issues) {\n-                var version = issue.properties().get(\"fixVersions\").get(0).asString();\n-                if (issue.labels().contains(\"hgupdate-sync\")) {\n-                    labeledIssues.add(version);\n-                }\n-            }\n@@ -237,9 +237,11 @@\n-            Backports.labelReleaseStreamDuplicates(issues.get(0), \"hgupdate-sync\");\n-\n-            var labels = new HashSet<>(Arrays.asList(labeledVersions));\n-            var unLabeledIssues = new HashSet<String>();\n-            for (var issue : issues) {\n-                var version = issue.properties().get(\"fixVersions\").get(0).asString();\n-                if (!issue.labels().contains(\"hgupdate-sync\")) {\n-                    unLabeledIssues.add(version);\n-                }\n+            var related = Backports.findBackports(issues.get(0), true);\n+            var allIssues = new ArrayList<Issue>();\n+            allIssues.add(issues.get(0));\n+            allIssues.addAll(related);\n+            var labeledIssues = Backports.releaseStreamDuplicates(allIssues)\n+                                         .stream()\n+                                         .map(issue -> issue.properties().get(\"fixVersions\").get(0).asString())\n+                                         .collect(Collectors.toSet());\n+            var unLabeledIssues = new HashSet<>();\n+            for (var issue : allIssues) {\n+                unLabeledIssues.add(issue.properties().get(\"fixVersions\").get(0).asString());\n@@ -247,0 +249,2 @@\n+            unLabeledIssues.removeAll(labeledIssues);\n+            var labels = new HashSet<>(Arrays.asList(labeledVersions));\n","filename":"jbs\/src\/test\/java\/org\/openjdk\/skara\/jbs\/BackportsTests.java","additions":23,"deletions":19,"binary":false,"changes":42,"previous_filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/BackportsTests.java","status":"renamed"},{"patch":"@@ -23,1 +23,1 @@\n-package org.openjdk.skara.bots.notify.issue;\n+package org.openjdk.skara.jbs;\n@@ -27,1 +27,2 @@\n-import static org.junit.jupiter.api.Assertions.*;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n","filename":"jbs\/src\/test\/java\/org\/openjdk\/skara\/jbs\/BuildCompareTests.java","additions":3,"deletions":2,"binary":false,"changes":5,"previous_filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/BuildCompareTests.java","status":"renamed"},{"patch":"@@ -23,1 +23,1 @@\n-package org.openjdk.skara.bots.notify.issue;\n+package org.openjdk.skara.jbs;\n","filename":"jbs\/src\/test\/java\/org\/openjdk\/skara\/jbs\/JdkVersionTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/JdkVersionTests.java","status":"renamed"},{"patch":"@@ -48,0 +48,1 @@\n+include 'jbs'\n","filename":"settings.gradle","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}