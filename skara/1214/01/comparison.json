{"files":[{"patch":"@@ -254,1 +254,1 @@\n-                        if (pendingItem.getKey().getClass().equals(item.getClass()) && !pendingItem.getKey().concurrentWith(item)) {\n+                        if (item.replaces(pendingItem.getKey())) {\n","filename":"bot\/src\/main\/java\/org\/openjdk\/skara\/bot\/BotRunner.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,0 +36,9 @@\n+    \/**\n+     * Returns true if this item should replace the other item in the queue. By default\n+     * this is true if both items are of the same type, and cannot run concurrently with\n+     * each other. In some cases we need a more specific condition.\n+     *\/\n+    default boolean replaces(WorkItem other) {\n+        return this.getClass().equals(other.getClass()) && !concurrentWith(other);\n+    }\n+\n","filename":"bot\/src\/main\/java\/org\/openjdk\/skara\/bot\/WorkItem.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-        return \"ArchiveReaderWorkItem@\" + list;\n+        return \"ArchiveReaderWorkItem@\" + bot.repository().name();\n@@ -58,0 +58,11 @@\n+    \/**\n+     * An ArchiveReaderWorkItem can't run concurrently with another item that shares the same\n+     * MailingListReader, but it only replaces an item that acts on the same repository.\n+     *\/\n+    @Override\n+    public boolean replaces(WorkItem other) {\n+        return !concurrentWith(other)\n+                && (other instanceof ArchiveReaderWorkItem archiveReaderWorkItem)\n+                && bot.repository().name().equals(archiveReaderWorkItem.bot.repository().name());\n+    }\n+\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/ArchiveReaderWorkItem.java","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-    private final EmailAddress archivePoster;\n@@ -40,1 +39,1 @@\n-    private final Set<HostedRepository> repositories;\n+    private final HostedRepository repository;\n@@ -48,2 +47,1 @@\n-    MailingListArchiveReaderBot(EmailAddress archivePoster, MailingListReader list, Set<HostedRepository> repositories) {\n-        this.archivePoster = archivePoster;\n+    MailingListArchiveReaderBot(MailingListReader list, HostedRepository repository) {\n@@ -51,1 +49,5 @@\n-        this.repositories = repositories;\n+        this.repository = repository;\n+    }\n+\n+    public HostedRepository repository() {\n+        return repository;\n@@ -106,4 +108,1 @@\n-            var foundPr = repositories.stream()\n-                                      .map(repository -> repository.parsePullRequestUrl(prLink))\n-                                      .filter(Optional::isPresent)\n-                                      .map(Optional::get).findAny();\n+            var foundPr = repository.parsePullRequestUrl(prLink);\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/MailingListArchiveReaderBot.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import org.openjdk.skara.forge.HostedRepository;\n+import org.openjdk.skara.mailinglist.MailingListReader;\n@@ -92,2 +92,0 @@\n-        var allRepositories = new HashSet<HostedRepository>();\n-\n@@ -104,0 +102,2 @@\n+        var mailingListReaderMap = new HashMap<List<String>, MailingListReader>();\n+\n@@ -106,0 +106,1 @@\n+            var hostedRepository = configuration.repository(repo);\n@@ -123,1 +124,5 @@\n-                var bot = new MailingListArchiveReaderBot(from, mailmanServer.getListReader(listsForReading.toArray(new String[0])), allRepositories);\n+\n+                if (!mailingListReaderMap.containsKey(listsForReading)) {\n+                    mailingListReaderMap.put(listsForReading, mailmanServer.getListReader(listsForReading.toArray(new String[0])));\n+                }\n+                var bot = new MailingListArchiveReaderBot(mailingListReaderMap.get(listsForReading), hostedRepository);\n@@ -140,1 +145,1 @@\n-                                                 .repo(configuration.repository(repo))\n+                                                 .repo(hostedRepository)\n@@ -172,2 +177,0 @@\n-\n-            allRepositories.add(configuration.repository(repo));\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/MailingListBridgeBotFactory.java","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -91,1 +91,1 @@\n-            var readerBot = new MailingListArchiveReaderBot(from, mailmanList, Set.of(archive));\n+            var readerBot = new MailingListArchiveReaderBot(mailmanList, archive);\n@@ -167,1 +167,1 @@\n-            var readerBot = new MailingListArchiveReaderBot(from, mailmanList, Set.of(archive));\n+            var readerBot = new MailingListArchiveReaderBot(mailmanList, archive);\n@@ -200,1 +200,1 @@\n-            var newReaderBot = new MailingListArchiveReaderBot(from, mailmanList, Set.of(archive));\n+            var newReaderBot = new MailingListArchiveReaderBot(mailmanList, archive);\n@@ -243,1 +243,1 @@\n-            var readerBot = new MailingListArchiveReaderBot(from, mailmanList, Set.of(archive));\n+            var readerBot = new MailingListArchiveReaderBot(mailmanList, archive);\n@@ -321,6 +321,0 @@\n-            \/\/ The mailing list as well\n-            var mailmanServer = MailingListServerFactory.createMailmanServer(listServer.getArchive(), listServer.getSMTP(),\n-                    Duration.ZERO);\n-            var mailmanList = mailmanServer.getListReader(listAddress.address());\n-            var readerBot = new MailingListArchiveReaderBot(from, mailmanList, Set.of(archive));\n-\n","filename":"bots\/mlbridge\/src\/test\/java\/org\/openjdk\/skara\/bots\/mlbridge\/MailingListArchiveReaderBotTests.java","additions":4,"deletions":10,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -92,25 +92,19 @@\n-        var outOfOrder = new ArrayList<Email>();\n-        var lastOutOfOrderCount = -1;\n-        while (outOfOrder.size() != lastOutOfOrderCount) {\n-            lastOutOfOrderCount = outOfOrder.size();\n-            outOfOrder.clear();\n-\n-            for (var email : emails) {\n-                if (email.hasHeader(\"In-Reply-To\")) {\n-                    var inReplyToMatcher = inReplyToPattern.matcher(email.headerValue(\"In-Reply-To\"));\n-                    if (!inReplyToMatcher.find()) {\n-                        log.info(\"Cannot parse In-Reply-To header: \" + email.headerValue(\"In-Reply-To\"));\n-                        continue;\n-                    }\n-                    var inReplyTo = EmailAddress.from(inReplyToMatcher.group(1));\n-                    if (!idToMail.containsKey(inReplyTo)) {\n-                        log.info(\"Can't find parent: \" + inReplyTo + \" - discarding\");\n-                        continue;\n-                    }\n-                    var parent = idToMail.get(inReplyTo);\n-                    if (!idToConversation.containsKey(inReplyTo)) {\n-                        outOfOrder.add(email);\n-                    } else {\n-                        var conversation = idToConversation.get(inReplyTo);\n-                        conversation.addReply(parent, email);\n-                        idToConversation.put(email.id(), conversation);\n+        var unhandledEmails = emails;\n+        var lastUnhandledCount = 0;\n+        while (unhandledEmails.size() != lastUnhandledCount) {\n+            lastUnhandledCount = unhandledEmails.size();\n+            var emailsToCheck = unhandledEmails;\n+            unhandledEmails = new ArrayList<>();\n+\n+            for (var email : emailsToCheck) {\n+                if (!idToConversation.containsKey(email.id())) {\n+                    EmailAddress inReplyTo = findInReplyTo(idToMail, email);\n+                    if (inReplyTo != null) {\n+                        if (!idToConversation.containsKey(inReplyTo)) {\n+                            unhandledEmails.add(email);\n+                        } else {\n+                            var conversation = idToConversation.get(inReplyTo);\n+                            var parent = idToMail.get(inReplyTo);\n+                            conversation.addReply(parent, email);\n+                            idToConversation.put(email.id(), conversation);\n+                        }\n@@ -121,3 +115,3 @@\n-        if (!outOfOrder.isEmpty()) {\n-            log.info(\"Out of order remaining: \" + outOfOrder.size());\n-            outOfOrder.forEach(oo -> log.info(\"  \" + oo.id()));\n+        if (!unhandledEmails.isEmpty()) {\n+            log.info(\"Out of order remaining: \" + unhandledEmails.size());\n+            unhandledEmails.forEach(oo -> log.info(\"  \" + oo.id()));\n@@ -131,0 +125,30 @@\n+    private static EmailAddress findInReplyTo(Map<EmailAddress, Email> idToMail, Email email) {\n+        if (email.hasHeader(\"In-Reply-To\")) {\n+            var inReplyToMatcher = inReplyToPattern.matcher(email.headerValue(\"In-Reply-To\"));\n+            if (!inReplyToMatcher.find()) {\n+                log.info(\"Cannot parse In-Reply-To header: \" + email.headerValue(\"In-Reply-To\"));\n+            } else {\n+                var inReplyTo = EmailAddress.from(inReplyToMatcher.group(1));\n+                if (idToMail.containsKey(inReplyTo)) {\n+                    return inReplyTo;\n+                }\n+            }\n+        }\n+        if (email.hasHeader(\"References\")) {\n+            var references = email.headerValue(\"References\");\n+            var referenceList = Arrays.asList(references.split(\"\\\\s+\"));\n+            Collections.reverse(referenceList);\n+            for (String reference : referenceList) {\n+                var referenceMatcher = inReplyToPattern.matcher(reference);\n+                if (referenceMatcher.find()) {\n+                    var referenceAddress = EmailAddress.from(referenceMatcher.group(1));\n+                    if (idToMail.containsKey(referenceAddress)) {\n+                        return referenceAddress;\n+                    }\n+                }\n+            }\n+        }\n+        log.info(\"Can't find parent for: \" + email.id() + \" - discarding\");\n+        return null;\n+    }\n+\n","filename":"mailinglist\/src\/main\/java\/org\/openjdk\/skara\/mailinglist\/Mbox.java","additions":52,"deletions":28,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -381,0 +381,39 @@\n+\n+    \/**\n+     * Tests that fallback on References field works when In-Reply-To points to a non\n+     * existing email.\n+     *\/\n+    @Test\n+    void middleMessageMissing() throws IOException {\n+        try (var folder = new TemporaryDirectory()) {\n+            var rawMbox1 = folder.path().resolve(\"test1.mbox\");\n+            Files.writeString(rawMbox1, \"\"\"\n+                                      From test at example.com  Wed Aug 21 17:22:50 2019\n+                                      From: test at example.com (test at example.com)\n+                                      Date: Wed, 21 Aug 2019 17:22:50 +0000\n+                                      Subject: this is a test\n+                                      Message-ID: <abc123@example.com>\n+\n+                                      First message\n+\n+                                      From test3 at example.com  Wed Aug 21 17:42:50 2019\n+                                      From: test3 at example.com (test3 at example.com)\n+                                      Date: Wed, 21 Aug 2019 17:42:50 +0000\n+                                      Subject: Re: this is a test\n+                                      In-Reply-To: <def456@example.com>\n+                                      References: <foo999@example.com>\n+                                        <abc123@example.com>\n+                                        <def456@example.com>\n+                                      Message-ID: <ghi789@example.com>\n+\n+                                      Third message\n+                                      \"\"\",\n+                    StandardCharsets.UTF_8);\n+            var mbox = MailingListServerFactory.createMboxFileServer(folder.path());\n+            var list = mbox.getListReader(\"test1\");\n+            var conversations = list.conversations(Duration.ofDays(365 * 100));\n+            assertEquals(1, conversations.size());\n+            var conversation = conversations.get(0);\n+            assertEquals(2, conversation.allMessages().size());\n+        }\n+    }\n","filename":"mailinglist\/src\/test\/java\/org\/openjdk\/skara\/mailinglist\/MboxTests.java","additions":39,"deletions":0,"binary":false,"changes":39,"status":"modified"}]}