{"files":[{"patch":"@@ -133,1 +133,1 @@\n-    void executeChecks(Hash localHash, CensusInstance censusInstance, PullRequestCheckIssueVisitor visitor, List<String> additionalConfiguration) throws Exception {\n+    void executeChecks(Hash localHash, CensusInstance censusInstance, PullRequestCheckIssueVisitor visitor, List<String> additionalConfiguration) throws IOException {\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckablePullRequest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.time.Duration;\n@@ -88,1 +89,10 @@\n-        try {\n+        try (var integrationLock = IntegrationLock.create(pr, Duration.ofMinutes(10))) {\n+            if (!integrationLock.isLocked()) {\n+                log.severe(\"Unable to acquire the integration lock for \" + pr.webUrl());\n+                reply.print(\"Unable to acquire the integration lock; aborting integration. The error has been logged and will be investigated.\");\n+                return;\n+            }\n+\n+            \/\/ Now that we have the integration lock, refresh the PR metadata\n+            pr = pr.repository().pullRequest(pr.id());\n+\n@@ -152,1 +162,2 @@\n-        } catch (Exception e) {\n+        } catch (IOException | CommitFailure e) {\n+            log.severe(\"An error occurred during integration (\" + pr.webUrl() + \"): \" + e.getMessage());\n@@ -154,1 +165,3 @@\n-            reply.println(\"An error occurred during final integration jcheck. No push attempt will be made.\");\n+            reply.println(\"An unexpected error occurred during integration. No push attempt will be made. \" +\n+                                  \"The error has been logged and will be investigated. It is possible that this error \" +\n+                                  \"is caused by a transient issue; feel free to retry the operation.\");\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/IntegrateCommand.java","additions":16,"deletions":3,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bots.pr;\n+\n+import org.openjdk.skara.forge.PullRequest;\n+\n+import java.time.Duration;\n+import java.util.concurrent.*;\n+\n+public class IntegrationLock implements AutoCloseable {\n+    private static final ConcurrentHashMap<String, Semaphore> pendingIntegrations = new ConcurrentHashMap<>();\n+\n+    static IntegrationLock create(PullRequest pr, Duration timeout) {\n+        var repoName = pr.repository().webUrl().toString();\n+        var repoPending = pendingIntegrations.computeIfAbsent(repoName, key -> new Semaphore(1));\n+        try {\n+            var locked = repoPending.tryAcquire(timeout.toMillis(), TimeUnit.MILLISECONDS);\n+            return new IntegrationLock(locked ? repoPending : null);\n+        } catch (InterruptedException e) {\n+            return new IntegrationLock(null);\n+        }\n+    }\n+\n+    private final Semaphore semaphore;\n+\n+    private IntegrationLock(Semaphore semaphore) {\n+        this.semaphore = semaphore;\n+    }\n+\n+    @Override\n+    public void close() {\n+        if (semaphore != null) {\n+            semaphore.release();\n+        }\n+    }\n+\n+    public boolean isLocked() {\n+        return semaphore != null;\n+    }\n+}\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/IntegrationLock.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"},{"patch":"@@ -31,0 +31,1 @@\n+import java.time.Duration;\n@@ -73,1 +74,10 @@\n-        try {\n+        try (var integrationLock = IntegrationLock.create(pr, Duration.ofMinutes(10))) {\n+            if (!integrationLock.isLocked()) {\n+                log.severe(\"Unable to acquire the integration lock during sponsoring for \" + pr.webUrl());\n+                reply.print(\"Unable to acquire the integration lock; aborting sponsored integration. The error has been logged and will be investigated.\");\n+                return;\n+            }\n+\n+            \/\/ Now that we have the integration lock, refresh the PR metadata\n+            pr = pr.repository().pullRequest(pr.id());\n+\n@@ -127,1 +137,2 @@\n-        } catch (Exception e) {\n+        } catch (IOException | CommitFailure e) {\n+            log.severe(\"An error occurred during sponsored integration (\" + pr.webUrl() + \"): \" + e.getMessage());\n@@ -129,1 +140,3 @@\n-            reply.println(\"An error occurred during sponsored integration. No push attempt will be made.\");\n+            reply.println(\"An unexpected error occurred during sponsored integration. No push attempt will be made. \" +\n+                                  \"The error has been logged and will be investigated. It is possible that this error \" +\n+                                  \"is caused by a transient issue; feel free to retry the operation.\");\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/SponsorCommand.java","additions":16,"deletions":3,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -0,0 +1,61 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bots.pr;\n+\n+import org.junit.jupiter.api.*;\n+import org.openjdk.skara.test.*;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class IntegrationLockTests {\n+    @Test\n+    void simple(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"refs\/heads\/edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"This is a pull request\");\n+\n+            var l1 = IntegrationLock.create(pr, Duration.ofSeconds(10));\n+            assertTrue(l1.isLocked());\n+\n+            var l2 = IntegrationLock.create(pr, Duration.ofMillis(100));\n+            assertFalse(l2.isLocked());\n+\n+            l1.close();\n+            var l3 = IntegrationLock.create(pr, Duration.ofSeconds(10));\n+            assertTrue(l3.isLocked());\n+        }\n+    }\n+}\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/IntegrationLockTests.java","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"}]}