{"files":[{"patch":"@@ -25,0 +25,1 @@\n+import java.time.Duration;\n@@ -37,0 +38,1 @@\n+import org.openjdk.skara.issuetracker.IssuePoller;\n@@ -45,2 +47,0 @@\n-    private final Logger log = Logger.getLogger(\"org.openjdk.skara.bots.csr\");\n-\n@@ -49,6 +49,1 @@\n-    \/\/ Keeps track of updatedAt timestamps from the previous call to getPeriodicItems,\n-    \/\/ so we can avoid re-evaluating issues that are returned again without any actual\n-    \/\/ update.\n-    private Map<String, ZonedDateTime> issueUpdatedAt = new HashMap<>();\n-    \/\/ The last found updatedAt from any issue.\n-    private ZonedDateTime lastUpdatedAt;\n+    private final IssuePoller poller;\n@@ -59,0 +54,13 @@\n+        \/\/ The CSRPullRequestBot will initially evaluate all active PRs so there\n+        \/\/ is no need to look at any issues older than the start time of the bot\n+        \/\/ here. A padding of 10 minutes for the initial query should cover any\n+        \/\/ potential time difference between local and remote, as well as timing\n+        \/\/ issues between the first run of each bot, without the risk of\n+        \/\/ returning excessive amounts of Issues in the first run.\n+        this.poller = new IssuePoller(issueProject, Duration.ofMinutes(10)) {\n+            \/\/ Only query for CSR issues in this poller.\n+            @Override\n+            protected List<Issue> queryIssues(IssueProject issueProject, ZonedDateTime updatedAfter) {\n+                return issueProject.csrIssues(updatedAfter);\n+            }\n+        };\n@@ -68,41 +76,6 @@\n-        var ret = new ArrayList<WorkItem>();\n-        \/\/ In the very first round, we just find the last updated issue to\n-        \/\/ initialize lastUpdatedAt. There is no need for reacting to any CSR\n-        \/\/ issue update before that, as the CSRPullRequestBot will go through\n-        \/\/ every open PR at startup anyway.\n-        if (lastUpdatedAt == null) {\n-            var lastUpdatedIssue = issueProject.lastUpdatedIssue();\n-            if (lastUpdatedIssue.isPresent()) {\n-                Issue issue = lastUpdatedIssue.get();\n-                lastUpdatedAt = issue.updatedAt();\n-                issueUpdatedAt.put(issue.id(), issue.updatedAt());\n-                log.fine(\"Setting lastUpdatedAt from last updated issue \" + issue.id() + \" updated at \" + lastUpdatedAt);\n-            } else {\n-                \/\/ If no previous issue was found, initiate lastUpdatedAt to something far\n-                \/\/ enough back so that we are guaranteed to find any new CSR issues going\n-                \/\/ forward.\n-                lastUpdatedAt = ZonedDateTime.ofInstant(Instant.EPOCH, ZoneId.systemDefault());\n-                log.warning(\"No CSR issue found, setting lastUpdatedAt to \" + lastUpdatedAt);\n-            }\n-            return ret;\n-        }\n-\n-        var newIssuesUpdatedAt = new HashMap<String, ZonedDateTime>();\n-        var issues = issueProject.csrIssues(lastUpdatedAt);\n-        for (var issue : issues) {\n-            newIssuesUpdatedAt.put(issue.id(), issue.updatedAt());\n-            \/\/ Update the lastUpdatedAt value with the highest found value for next call\n-            if (issue.updatedAt().isAfter(lastUpdatedAt)) {\n-                lastUpdatedAt = issue.updatedAt();\n-            }\n-            var lastUpdate = issueUpdatedAt.get(issue.id());\n-            if (lastUpdate != null) {\n-                if (!issue.updatedAt().isAfter(lastUpdate)) {\n-                    continue;\n-                }\n-            }\n-            var issueWorkItem = new IssueWorkItem(this, issue);\n-            ret.add(issueWorkItem);\n-        }\n-        issueUpdatedAt = newIssuesUpdatedAt;\n-        return ret;\n+        var issues = poller.updatedIssues();\n+        var items = issues.stream()\n+                .map(i -> (WorkItem) new IssueWorkItem(this, i, e -> poller.retryIssue(i)))\n+                .toList();\n+        poller.lastBatchHandled();\n+        return items;\n","filename":"bots\/csr\/src\/main\/java\/org\/openjdk\/skara\/bots\/csr\/CSRIssueBot.java","additions":22,"deletions":49,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import org.openjdk.skara.forge.PullRequestPoller;\n@@ -40,1 +41,0 @@\n-    private final Logger log = Logger.getLogger(\"org.openjdk.skara.bots.csr\");\n@@ -43,9 +43,1 @@\n-    \/\/ Keeps track of updatedAt timestamps from the previous call to getPeriodicItems,\n-    \/\/ so we can avoid re-evaluating PRs that are returned again without any actual\n-    \/\/ update. This is needed because timestamp based searches aren't exact enough\n-    \/\/ to avoid sometimes receiving the same items multiple times.\n-    private Map<String, ZonedDateTime> prsUpdatedAt = new HashMap<>();\n-    \/\/ The last found updateAt in any returned PR. Used for limiting results on the\n-    \/\/ next call to the hosted repo. Should only contain timestamps originating\n-    \/\/ from the remote repo to avoid problems with mismatched clocks.\n-    private ZonedDateTime lastUpdatedAt;\n+    private final PullRequestPoller poller;\n@@ -56,0 +48,1 @@\n+        this.poller = new PullRequestPoller(repo, false);\n@@ -66,5 +59,2 @@\n-        log.info(\"Fetching all open pull requests for \" + repo.name());\n-        Map<String, ZonedDateTime> newPrsUpdatedAt = new HashMap<>();\n-        \/\/ On the first run we have to re-evaluate all open PRs, after that, only\n-        \/\/ looking at PRs that have been updated should be enough.\n-        var prs = lastUpdatedAt != null ? repo.openPullRequestsAfter(lastUpdatedAt) : repo.openPullRequests();\n+\n+        var prs = poller.updatedPullRequests();\n@@ -72,12 +62,2 @@\n-            newPrsUpdatedAt.put(pr.id(), pr.updatedAt());\n-            \/\/ Update lastUpdatedAt with the last found updatedAt for the next call\n-            if (lastUpdatedAt == null || pr.updatedAt().isAfter(lastUpdatedAt)) {\n-                lastUpdatedAt = pr.updatedAt();\n-            }\n-            var lastUpdate = prsUpdatedAt.get(pr.id());\n-            if (lastUpdate != null) {\n-                if (!pr.updatedAt().isAfter(lastUpdate)) {\n-                    continue;\n-                }\n-            }\n-            var pullRequestWorkItem = new PullRequestWorkItem(repo, pr.id(), project, pr.updatedAt());\n+            var pullRequestWorkItem = new PullRequestWorkItem(repo, pr.id(), project, pr.updatedAt(),\n+                    e -> poller.retryPullRequest(pr));\n@@ -86,1 +66,1 @@\n-        prsUpdatedAt = newPrsUpdatedAt;\n+        poller.lastBatchHandled();\n","filename":"bots\/csr\/src\/main\/java\/org\/openjdk\/skara\/bots\/csr\/CSRPullRequestBot.java","additions":8,"deletions":28,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import java.util.function.Consumer;\n@@ -48,0 +49,1 @@\n+    private final Consumer<RuntimeException> errorHandler;\n@@ -49,1 +51,1 @@\n-    public IssueWorkItem(CSRIssueBot bot, Issue csrIssue) {\n+    public IssueWorkItem(CSRIssueBot bot, Issue csrIssue, Consumer<RuntimeException> errorHandler) {\n@@ -52,0 +54,1 @@\n+        this.errorHandler = errorHandler;\n@@ -101,1 +104,1 @@\n-                .map(pr -> new PullRequestWorkItem(pr.repository(), pr.id(), csrIssue.project(), csrIssue.updatedAt()))\n+                .map(pr -> new PullRequestWorkItem(pr.repository(), pr.id(), csrIssue.project(), csrIssue.updatedAt(), errorHandler))\n@@ -115,0 +118,5 @@\n+\n+    @Override\n+    public void handleRuntimeException(RuntimeException e) {\n+        errorHandler.accept(e);\n+    }\n","filename":"bots\/csr\/src\/main\/java\/org\/openjdk\/skara\/bots\/csr\/IssueWorkItem.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.util.function.Consumer;\n@@ -56,0 +57,1 @@\n+    private final Consumer<RuntimeException> errorHandler;\n@@ -64,1 +66,1 @@\n-            ZonedDateTime triggerUpdatedAt) {\n+            ZonedDateTime triggerUpdatedAt, Consumer<RuntimeException> errorHandler) {\n@@ -69,0 +71,1 @@\n+        this.errorHandler = errorHandler;\n@@ -256,0 +259,4 @@\n+\n+    public final void handleRuntimeException(RuntimeException e) {\n+        errorHandler.accept(e);\n+    }\n","filename":"bots\/csr\/src\/main\/java\/org\/openjdk\/skara\/bots\/csr\/PullRequestWorkItem.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+import java.util.List;\n@@ -32,0 +33,1 @@\n+        var testHost = TestHost.createNew(List.of());\n@@ -33,5 +35,5 @@\n-                .addHostedRepository(\"repo1\", new TestHostedRepository(\"repo1\"))\n-                .addHostedRepository(\"repo2\", new TestHostedRepository(\"repo2\"))\n-                .addHostedRepository(\"repo3\", new TestHostedRepository(\"repo3\"))\n-                .addIssueProject(\"test_bugs\/TEST\", new TestIssueProject(null, \"TEST\"))\n-                .addIssueProject(\"test_bugs\/TEST2\", new TestIssueProject(null, \"TEST2\"))\n+                .addHostedRepository(\"repo1\", new TestHostedRepository(testHost, \"repo1\"))\n+                .addHostedRepository(\"repo2\", new TestHostedRepository(testHost, \"repo2\"))\n+                .addHostedRepository(\"repo3\", new TestHostedRepository(testHost, \"repo3\"))\n+                .addIssueProject(\"test_bugs\/TEST\", new TestIssueProject(testHost, \"TEST\"))\n+                .addIssueProject(\"test_bugs\/TEST2\", new TestIssueProject(testHost, \"TEST2\"))\n","filename":"bots\/csr\/src\/test\/java\/org\/openjdk\/skara\/bots\/csr\/CSRBotFactoryTest.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -53,1 +53,0 @@\n-    private final PullRequestUpdateCache updateCache;\n@@ -59,1 +58,1 @@\n-    private final CooldownQuarantine cooldownQuarantine;\n+    private final PullRequestPoller poller;\n@@ -63,2 +62,0 @@\n-    private ZonedDateTime lastPartialUpdate;\n-    private ZonedDateTime lastFullUpdate;\n@@ -100,2 +97,1 @@\n-        updateCache = new PullRequestUpdateCache();\n-        cooldownQuarantine = new CooldownQuarantine();\n+        poller = new PullRequestPoller(codeRepo, true);\n@@ -208,25 +204,7 @@\n-        List<PullRequest> prs;\n-\n-        if (lastFullUpdate == null || lastFullUpdate.isBefore(ZonedDateTime.now().minus(Duration.ofMinutes(10)))) {\n-            lastFullUpdate = ZonedDateTime.now();\n-            lastPartialUpdate = lastFullUpdate;\n-            log.info(\"Fetching all open pull requests for \" + codeRepo.name());\n-            prs = codeRepo.openPullRequests();\n-        } else {\n-            log.info(\"Fetching recently updated pull requests (open and closed) for \" + codeRepo.name());\n-            prs = codeRepo.pullRequestsAfter(ZonedDateTime.now().minus(Duration.ofDays(14)));\n-            lastPartialUpdate = ZonedDateTime.now();\n-        }\n-\n-        for (var pr : prs) {\n-            var quarantineStatus = cooldownQuarantine.status(pr);\n-            if (quarantineStatus == CooldownQuarantine.Status.IN_QUARANTINE) {\n-                continue;\n-            }\n-            if ((quarantineStatus == CooldownQuarantine.Status.JUST_RELEASED) ||\n-                    (quarantineStatus == CooldownQuarantine.Status.NOT_IN_QUARANTINE && updateCache.needsUpdate(pr))) {\n-                ret.add(new ArchiveWorkItem(pr, this,\n-                                            e -> updateCache.invalidate(pr),\n-                                            r -> cooldownQuarantine.updateQuarantineEnd(pr, r)));\n-            }\n-        }\n+        List<PullRequest> prs = poller.updatedPullRequests();\n+        prs.stream()\n+                .map(pr -> new ArchiveWorkItem(pr, this,\n+                        e -> poller.retryPullRequest(pr),\n+                        r -> poller.quarantinePullRequest(pr, r)))\n+                .forEach(ret::add);\n+        poller.lastBatchHandled();\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/MailingListBridgeBot.java","additions":9,"deletions":31,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -8,0 +8,1 @@\n+import org.openjdk.skara.test.TestHost;\n@@ -121,0 +122,1 @@\n+            var testHost = TestHost.createNew(List.of());\n@@ -122,5 +124,5 @@\n-                    .addHostedRepository(\"repo1\", new TestHostedRepository(\"repo1\"))\n-                    .addHostedRepository(\"repo2\", new TestHostedRepository(\"repo2\"))\n-                    .addHostedRepository(\"repo3\", new TestHostedRepository(\"repo3\"))\n-                    .addHostedRepository(\"repo4\", new TestHostedRepository(\"repo4\"))\n-                    .addHostedRepository(\"repo5\", new TestHostedRepository(\"repo5\"))\n+                    .addHostedRepository(\"repo1\", new TestHostedRepository(testHost, \"repo1\"))\n+                    .addHostedRepository(\"repo2\", new TestHostedRepository(testHost, \"repo2\"))\n+                    .addHostedRepository(\"repo3\", new TestHostedRepository(testHost, \"repo3\"))\n+                    .addHostedRepository(\"repo4\", new TestHostedRepository(testHost, \"repo4\"))\n+                    .addHostedRepository(\"repo5\", new TestHostedRepository(testHost, \"repo5\"))\n","filename":"bots\/mlbridge\/src\/test\/java\/org\/openjdk\/skara\/bots\/mlbridge\/MailingListBridgeBotFactoryTest.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -45,1 +45,0 @@\n-    private final PullRequestUpdateCache updateCache;\n@@ -48,0 +47,1 @@\n+    private final PullRequestPoller poller;\n@@ -60,1 +60,0 @@\n-        this.updateCache = new PullRequestUpdateCache();\n@@ -63,0 +62,1 @@\n+        this.poller = new PullRequestPoller(repository, true);\n@@ -117,2 +117,1 @@\n-        var ret = new LinkedList<WorkItem>();\n-        List<PullRequest> prs;\n+        var ret = new ArrayList<WorkItem>();\n@@ -121,10 +120,0 @@\n-            \/\/ Fetch all open pull requests periodically, and just the recently updated ones in between\n-            if (lastFullUpdate == null || lastFullUpdate.isBefore(ZonedDateTime.now().minus(Duration.ofMinutes(10)))) {\n-                lastFullUpdate = ZonedDateTime.now();\n-                log.info(\"Fetching all open pull requests\");\n-                prs = repository.openPullRequests();\n-            } else {\n-                log.info(\"Fetching recently updated pull requests (open and closed)\");\n-                prs = repository.pullRequestsAfter(ZonedDateTime.now().minus(Duration.ofDays(14)));\n-            }\n-\n@@ -132,0 +121,1 @@\n+            List<PullRequest> prs = poller.updatedPullRequests();\n@@ -133,4 +123,1 @@\n-                if (updateCache.needsUpdate(pr)) {\n-                    if (!isOfInterest(pr)) {\n-                        continue;\n-                    }\n+                if (isOfInterest(pr)) {\n@@ -140,1 +127,1 @@\n-                            e -> updateCache.invalidate(pr),\n+                            e -> poller.retryPullRequest(pr),\n@@ -144,0 +131,1 @@\n+            poller.lastBatchHandled();\n@@ -166,2 +154,0 @@\n-\n-\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/NotifyBot.java","additions":7,"deletions":21,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -107,0 +107,1 @@\n+            var testHost = TestHost.createNew(List.of());\n@@ -109,3 +110,3 @@\n-                    .addHostedRepository(\"repo1\", new TestHostedRepository(\"repo1\"))\n-                    .addHostedRepository(\"repo2\", new TestHostedRepository(\"repo2\"))\n-                    .addIssueProject(\"test_bugs\/TEST\", new TestIssueProject(TestHost.createNew(List.of()), \"TEST\"))\n+                    .addHostedRepository(\"repo1\", new TestHostedRepository(testHost, \"repo1\"))\n+                    .addHostedRepository(\"repo2\", new TestHostedRepository(testHost, \"repo2\"))\n+                    .addIssueProject(\"test_bugs\/TEST\", new TestIssueProject(testHost, \"TEST\"))\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/NotifyBotFactoryTest.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"}]}