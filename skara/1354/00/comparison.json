{"files":[{"patch":"@@ -362,1 +362,2 @@\n-        if (pr.labelNames().contains(\"auto\") && pr.labelNames().contains(\"ready\") && !pr.labelNames().contains(\"sponsor\")) {\n+        if (pr.labelNames().contains(\"auto\") && pr.labelNames().contains(\"ready\")\n+                && !pr.labelNames().contains(\"sponsor\") && !unhandledIntegrateCommand(comments)) {\n@@ -392,0 +393,12 @@\n+    \/**\n+     * Looks through comments for any \/integrate command that has not yet been handled.\n+     * Used to avoid double posting \/integrate\n+     *\/\n+    private boolean unhandledIntegrateCommand(List<Comment> comments) {\n+        var allCommands = PullRequestCommandWorkItem.findAllCommands(pr, comments);\n+        var handled = PullRequestCommandWorkItem.findHandledCommands(pr, comments);\n+        return allCommands.stream()\n+                .filter(ci -> ci.name().equals(\"integrate\"))\n+                .anyMatch(ci -> !handled.contains(ci.id()));\n+    }\n+\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckWorkItem.java","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import org.openjdk.skara.host.HostUser;\n@@ -62,15 +63,2 @@\n-        var self = pr.repository().forge().currentUser();\n-        var body = PullRequestBody.parse(pr).bodyText();\n-        var allCommands = Stream.concat(CommandExtractor.extractCommands(body, \"body\", pr.author()).stream(),\n-                                        comments.stream()\n-                                                .filter(comment -> !comment.author().equals(self) || comment.body().endsWith(VALID_BOT_COMMAND_MARKER))\n-                                                .flatMap(c -> CommandExtractor.extractCommands(c.body(), c.id(), c.author()).stream()))\n-                                .collect(Collectors.toList());\n-\n-        var handled = comments.stream()\n-                              .filter(comment -> comment.author().equals(self))\n-                              .map(comment -> commandReplyPattern.matcher(comment.body()))\n-                              .filter(Matcher::find)\n-                              .map(matcher -> matcher.group(1))\n-                              .collect(Collectors.toSet());\n-\n+        var allCommands = findAllCommands(pr, comments);\n+        var handled = findHandledCommands(pr, comments);\n@@ -83,0 +71,20 @@\n+    static List<CommandInvocation> findAllCommands(PullRequest pr, List<Comment> comments) {\n+        var self = pr.repository().forge().currentUser();\n+        var body = PullRequestBody.parse(pr).bodyText();\n+        return Stream.concat(CommandExtractor.extractCommands(body, \"body\", pr.author()).stream(),\n+                        comments.stream()\n+                                .filter(comment -> !comment.author().equals(self) || comment.body().endsWith(VALID_BOT_COMMAND_MARKER))\n+                                .flatMap(c -> CommandExtractor.extractCommands(c.body(), c.id(), c.author()).stream()))\n+                .collect(Collectors.toList());\n+    }\n+\n+    static Set<String> findHandledCommands(PullRequest pr, List<Comment> comments) {\n+        var self = pr.repository().forge().currentUser();\n+        return comments.stream()\n+                .filter(comment -> comment.author().equals(self))\n+                .map(comment -> commandReplyPattern.matcher(comment.body()))\n+                .filter(Matcher::find)\n+                .map(matcher -> matcher.group(1))\n+                .collect(Collectors.toSet());\n+    }\n+\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestCommandWorkItem.java","additions":23,"deletions":15,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -57,2 +57,6 @@\n-        if (!pr.labelNames().contains(\"auto\") && readyHash.isEmpty()) {\n-            reply.println(\"The change author (@\" + pr.author().username() + \") must issue an `integrate` command before the integration can be sponsored.\");\n+        if (readyHash.isEmpty()) {\n+            if (!pr.labelNames().contains(\"auto\")) {\n+                reply.println(\"The change author (@\" + pr.author().username() + \") must issue an `integrate` command before the integration can be sponsored.\");\n+            } else {\n+                reply.println(\"The PR is not yet marked as ready to be sponsored. Please try again when it is.\");\n+            }\n@@ -62,4 +66,8 @@\n-        var acceptedHash = readyHash.orElseThrow();\n-        if (!pr.labelNames().contains(\"auto\") && !pr.headHash().equals(acceptedHash)) {\n-            reply.print(\"The PR has been updated since the change author (@\" + pr.author().username() + \") \");\n-            reply.println(\"issued the `integrate` command - the author must perform this command again.\");\n+        var acceptedHash = readyHash.get();\n+        if (!pr.headHash().equals(acceptedHash)) {\n+            if (!pr.labelNames().contains(\"auto\")) {\n+                reply.print(\"The PR has been updated since the change author (@\" + pr.author().username() + \") \");\n+                reply.println(\"issued the `integrate` command - the author must perform this command again.\");\n+            } else {\n+                reply.print(\"The PR is not yet marked as ready to be sponsored. Please try again when it is.\");\n+            }\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/SponsorCommand.java","additions":14,"deletions":6,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -774,0 +774,67 @@\n+    @Test\n+    void sponsorAutoIntegrationOutOfOrder(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var integrator = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addReviewer(reviewer.forge().currentUser().id());\n+            var mergeBot = PullRequestBot.newBuilder().repo(integrator).censusRepo(censusBuilder.build()).build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var authorFullName = author.forge().currentUser().fullName();\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, \"This is a new line\", \"Append commit\", authorFullName, \"ta@none.none\");\n+            localRepo.push(editHash, author.url(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"This is a pull request\");\n+\n+            \/\/ Approve it as another user\n+            var approvalPr = reviewer.pullRequest(pr.id());\n+            approvalPr.addReview(Review.Verdict.APPROVED, \"Approved\");\n+\n+            \/\/ Flag it as ready for integration automatically\n+            pr.addComment(\"\/integrate auto\");\n+            \/\/ Reviewer now sponsor a bit too early\n+            var reviewerPr = reviewer.pullRequest(pr.id());\n+            reviewerPr.addComment(\"\/sponsor\");\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+\n+            \/\/ Bot should have replied\n+            var replies = pr.comments().stream()\n+                    .filter(comment -> comment.body().contains(\"will be automatically integrated\"))\n+                    .count();\n+            assertEquals(1, replies);\n+\n+            \/\/ Bot should have replied that sponsoring wasn't yet possible\n+            var sponsorReply = pr.comments().stream()\n+                    .filter(comment -> comment.body().contains(\"The PR is not yet marked as ready to be sponsored\"))\n+                    .count();\n+            assertEquals(1, sponsorReply);\n+\n+            \/\/ Bot should have marked the PR as ready for sponsor\n+            var ready = pr.comments().stream()\n+                    .filter(comment -> comment.body().contains(\"now ready to be sponsored\"))\n+                    .filter(comment -> comment.body().contains(\"at version \" + editHash.hex()))\n+                    .count();\n+            assertEquals(1, ready);\n+\n+            \/\/ Try sponsor again\n+            reviewerPr.addComment(\"\/sponsor\");\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+\n+            \/\/ The bot should have pushed the commit\n+            var pushed = pr.comments().stream()\n+                    .filter(comment -> comment.body().contains(\"Pushed as commit\"))\n+                    .count();\n+            assertEquals(1, pushed);\n+        }\n+    }\n+\n+\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/SponsorTests.java","additions":67,"deletions":0,"binary":false,"changes":67,"status":"modified"}]}