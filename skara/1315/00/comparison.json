{"files":[{"patch":"@@ -417,3 +417,1 @@\n-                    \/\/ Ignore the opt string when comparing versions for match as the fixVersion can\n-                    \/\/ have a suffix such as \"-oracle\" that isn't reflected in tags.\n-                    if (tagVersion.isPresent() && fixVersion.components().equals(tagVersion.get().components())) {\n+                    if (tagVersion.isPresent() && tagVersionMatchesFixVersion(fixVersion, tagVersion.get())) {\n@@ -435,0 +433,21 @@\n+    private boolean tagVersionMatchesFixVersion(JdkVersion fixVersion, JdkVersion tagVersion) {\n+        \/\/ Ignore the opt string when comparing versions for match as the fixVersion can\n+        \/\/ have a suffix such as \"-oracle\" that isn't reflected in tags.\n+        if (fixVersion.components().equals(tagVersion.components())) {\n+            return true;\n+        }\n+        \/\/ The fixVersion may have a prefix in the first component that is not present\n+        \/\/ in the tagVersion. e.g. 'openjdk8u342' vs '8u342'\n+        var fixComponents = fixVersion.components();\n+        var tagComponents = tagVersion.components();\n+        \/\/ Check that the rest of the components are equal\n+        if (fixComponents.size() > 0 && fixComponents.size() == tagComponents.size()\n+                && fixComponents.subList(1, fixComponents.size()).equals(tagComponents.subList(1, tagComponents.size()))) {\n+            var fixFirst = fixComponents.get(0);\n+            var tagFirst = tagComponents.get(0);\n+            \/\/ Check if the first fixVersion component has a prefix consisting of only lower case letters\n+            return fixFirst.matches(\"[a-z]+\" + tagFirst);\n+        }\n+        return false;\n+    }\n+\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifier.java","additions":22,"deletions":3,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -966,0 +966,90 @@\n+    @Test\n+    void testIssueBuildAfterTagOpenjdk8u(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+\n+            var repo = credentials.getHostedRepository();\n+            var repoFolder = tempFolder.path().resolve(\"repo\");\n+            var localRepo = CheckableRepository.init(repoFolder, repo.repositoryType());\n+            credentials.commitLock(localRepo);\n+            localRepo.pushAll(repo.url());\n+\n+            var issueProject = credentials.getIssueProject();\n+            var storageFolder = tempFolder.path().resolve(\"storage\");\n+            var jbsNotifierConfig = JSON.object().put(\"fixversions\", JSON.object()\n+                            .put(\"master\", \"openjdk8u352\")\n+                            .put(\"other\", \"openjdk8u342\"))\n+                    .put(\"buildname\", \"team\");\n+            var notifyBot = testBotBuilder(repo, issueProject, storageFolder, jbsNotifierConfig).create(\"notify\", JSON.object());\n+\n+            \/\/ Initialize history\n+            var current = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(current, repo.url(), \"other\");\n+            localRepo.tag(current, \"jdk8u342-b00\", \"First tag\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.tag(current, \"jdk9u352-b00\", \"First unrelated tag\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(new Branch(repo.url().toString()), \"--tags\", false);\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ Create an issue and commit a fix\n+            var authorEmailAddress = issueProject.issueTracker().currentUser().username() + \"@openjdk.org\";\n+            var issue = issueProject.createIssue(\"This is an issue\", List.of(\"Indeed\"), Map.of(\"issuetype\", JSON.of(\"Enhancement\")));\n+            issue.setProperty(\"fixVersions\", JSON.of(\"openjdk8u352\"));\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, \"Another line\", issue.id() + \": Fix that issue\", \"Duke\", authorEmailAddress);\n+            localRepo.push(editHash, repo.url(), \"master\");\n+            localRepo.push(editHash, repo.url(), \"other\");\n+            \/\/ Add an extra branch that is not configured with any fixVersion\n+            localRepo.push(editHash, repo.url(), \"extra\");\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ The changeset should be reflected in a comment in the issue and in a new backport\n+            var updatedIssue = issueProject.issue(issue.id()).orElseThrow();\n+            var backportIssue = updatedIssue.links().get(0).issue().orElseThrow();\n+\n+            var comments = updatedIssue.comments();\n+            assertEquals(1, comments.size());\n+            var comment = comments.get(0);\n+            assertTrue(comment.body().contains(editHash.toString()));\n+\n+            var backportComments = backportIssue.comments();\n+            assertEquals(1, backportComments.size());\n+            var backportComment = backportComments.get(0);\n+            assertTrue(backportComment.body().contains(editHash.toString()));\n+\n+            \/\/ As well as a fixVersion and a resolved in build\n+            assertEquals(Set.of(\"openjdk8u352\"), fixVersions(updatedIssue));\n+            assertEquals(\"team\", updatedIssue.properties().get(RESOLVED_IN_BUILD).asString());\n+            assertEquals(Set.of(\"openjdk8u342\"), fixVersions(backportIssue));\n+            assertEquals(\"team\", backportIssue.properties().get(RESOLVED_IN_BUILD).asString());\n+\n+            \/\/ The issue should be assigned and resolved\n+            assertEquals(RESOLVED, updatedIssue.state());\n+            assertEquals(List.of(issueProject.issueTracker().currentUser()), updatedIssue.assignees());\n+            assertEquals(RESOLVED, backportIssue.state());\n+            assertEquals(List.of(issueProject.issueTracker().currentUser()), backportIssue.assignees());\n+\n+            \/\/ Tag it\n+            localRepo.tag(editHash, \"jdk8u342-b01\", \"Second tag\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(new Branch(repo.url().toString()), \"--tags\", false);\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ The build should now be updated\n+            updatedIssue = issueProject.issue(issue.id()).orElseThrow();\n+            backportIssue = issueProject.issue(backportIssue.id()).orElseThrow();\n+            assertEquals(\"b01\", backportIssue.properties().get(RESOLVED_IN_BUILD).asString());\n+            \/\/ But not in the update backport\n+            assertEquals(\"team\", updatedIssue.properties().get(RESOLVED_IN_BUILD).asString());\n+\n+            \/\/ Tag it with an unrelated tag\n+            localRepo.tag(editHash, \"jdk9u352-b01\", \"Second tag\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(new Branch(repo.url().toString()), \"--tags\", false);\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ The build should not change\n+            updatedIssue = issueProject.issue(issue.id()).orElseThrow();\n+            backportIssue = issueProject.issue(backportIssue.id()).orElseThrow();\n+            assertEquals(\"b01\", backportIssue.properties().get(RESOLVED_IN_BUILD).asString());\n+            \/\/ But not in the update backport\n+            assertEquals(\"team\", updatedIssue.properties().get(RESOLVED_IN_BUILD).asString());\n+        }\n+    }\n+\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifierTests.java","additions":90,"deletions":0,"binary":false,"changes":90,"status":"modified"}]}