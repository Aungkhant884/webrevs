{"files":[{"patch":"@@ -122,4 +122,23 @@\n-     * Return true if the issue's fixVersionList is a match for fixVersion, using \"-pool\" or \"-open\".\n-     *\n-     * If fixVersion has a major release of <N>, it matches the fixVersionList has an\n-     * <N>-pool or <N>-open entry and all other entries are scratch values.\n+     * If fixVersion has a major release of <N>, and opt string of <opt> it matches if\n+     * the fixVersionList has an <N>-pool-<opt> entry.\n+     *\/\n+    private static boolean matchOptPoolVersion(Issue issue, JdkVersion fixVersion) {\n+        var majorVersion = fixVersion.feature();\n+        if (fixVersion.opt().isPresent()) {\n+            var poolSuffix = \"-pool-\" + fixVersion.opt().get();\n+            var poolVersion = JdkVersion.parse(majorVersion + poolSuffix);\n+            \/\/ fixVersion may be something that doesn't parse into a valid pool version\n+            if (poolVersion.isPresent()) {\n+                var mainVersion = mainFixVersion(issue);\n+                if (mainVersion.isEmpty()) {\n+                    return false;\n+                }\n+                return mainVersion.get().equals(poolVersion.get());\n+            }\n+        }\n+        return false;\n+    }\n+\n+    \/**\n+     * If fixVersion has a major release of <N>, it matches if the fixVersionList has an\n+     * <N>-pool entry.\n@@ -130,5 +149,7 @@\n-        var openVersion = JdkVersion.parse(majorVersion + \"-open\");\n-\n-        var mainVersion = mainFixVersion(issue);\n-        if (mainVersion.isEmpty()) {\n-            return false;\n+        \/\/ fixVersion may be something that doesn't parse into a valid pool version\n+        if (poolVersion.isPresent()) {\n+            var mainVersion = mainFixVersion(issue);\n+            if (mainVersion.isEmpty()) {\n+                return false;\n+            }\n+            return mainVersion.get().equals(poolVersion.get());\n@@ -136,1 +157,1 @@\n-        return mainVersion.get().equals(poolVersion.orElseThrow()) || mainVersion.get().equals(openVersion.orElseThrow());\n+        return false;\n@@ -154,2 +175,2 @@\n-     * If the main issue       has a matching <N>-pool\/open fixVersion, use it.\n-     * If an existing Backport has a matching <N>-pool\/open fixVersion, use it.\n+     * If the main issue       has a matching <N>-pool fixVersion, use it.\n+     * If an existing Backport has a matching <N>-pool fixVersion, use it.\n@@ -175,0 +196,8 @@\n+        var matchingOptPoolVersionIssue = candidates.stream()\n+                .filter(i -> matchOptPoolVersion(i, fixVersion))\n+                .findFirst();\n+        if (matchingOptPoolVersionIssue.isPresent()) {\n+            log.fine(\"Issue \" + matchingOptPoolVersionIssue.get().id() + \" has a matching opt pool version\");\n+            return matchingOptPoolVersionIssue;\n+        }\n+\n","filename":"jbs\/src\/main\/java\/org\/openjdk\/skara\/jbs\/Backports.java","additions":41,"deletions":12,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -78,1 +78,3 @@\n-            var optionalStart = raw.lastIndexOf(\"-\");\n+            \/\/ The input strings here never contain a $PRE string, but the $OPT string\n+            \/\/ may contain '-' so matching on first '-' is necessary.\n+            var optionalStart = raw.indexOf(\"-\");\n","filename":"jbs\/src\/main\/java\/org\/openjdk\/skara\/jbs\/JdkVersion.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -157,0 +157,3 @@\n+            var backportFoo = credentials.createIssue(issueProject, \"Backport Foo\");\n+            backportFoo.setProperty(\"issuetype\", JSON.of(\"Backport\"));\n+            issue.addLink(Link.create(backportFoo, \"backported by\").build());\n@@ -160,0 +163,1 @@\n+            backportFoo.setProperty(\"fixVersions\", JSON.array().add(\"12-pool-foo\"));\n@@ -162,0 +166,1 @@\n+            assertEquals(backportFoo, Backports.findIssue(issue, JdkVersion.parse(\"12.2-foo\").orElseThrow()).orElseThrow());\n@@ -163,0 +168,1 @@\n+            assertEquals(issue, Backports.findIssue(issue, JdkVersion.parse(\"11.1-foo\").orElseThrow()).orElseThrow());\n","filename":"jbs\/src\/test\/java\/org\/openjdk\/skara\/jbs\/BackportsTests.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -52,0 +52,3 @@\n+        var fooVersion = from(\"11.0.12-foo-bar\");\n+        assertEquals(List.of(\"11\", \"0\", \"12\"), fooVersion.components());\n+        assertEquals(\"foo-bar\", fooVersion.opt().orElseThrow());\n","filename":"jbs\/src\/test\/java\/org\/openjdk\/skara\/jbs\/JdkVersionTests.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}