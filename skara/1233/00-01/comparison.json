{"files":[{"patch":"@@ -122,6 +122,2 @@\n-     * Return true if the issue's fixVersionList is a match for fixVersion, using \"-pool[-<opt>]\".\n-     * If the fixVersion has an opt string, then the pool record needs to have the same opt\n-     * string suffix.\n-     *\n-     * If fixVersion has a major release of <N>, it matches the fixVersionList has an\n-     * <N>-pool entry and all other entries are scratch values.\n+     * If fixVersion has a major release of <N>, and opt string of <opt> it matches if\n+     * the fixVersionList has an <N>-pool-<opt> entry.\n@@ -129,1 +125,1 @@\n-    private static boolean matchPoolVersion(Issue issue, JdkVersion fixVersion) {\n+    private static boolean matchOptPoolVersion(Issue issue, JdkVersion fixVersion) {\n@@ -131,2 +127,14 @@\n-        var poolSuffix = fixVersion.opt().map((o) -> \"-pool-\" + o).orElse(\"-pool\");\n-        var poolVersion = JdkVersion.parse(majorVersion + poolSuffix);\n+        if (fixVersion.opt().isPresent()) {\n+            var poolSuffix = \"-pool-\" + fixVersion.opt().get();\n+            var poolVersion = JdkVersion.parse(majorVersion + poolSuffix);\n+            \/\/ fixVersion may be something that doesn't parse into a valid pool version\n+            if (poolVersion.isPresent()) {\n+                var mainVersion = mainFixVersion(issue);\n+                if (mainVersion.isEmpty()) {\n+                    return false;\n+                }\n+                return mainVersion.get().equals(poolVersion.get());\n+            }\n+        }\n+        return false;\n+    }\n@@ -134,3 +142,14 @@\n-        var mainVersion = mainFixVersion(issue);\n-        if (mainVersion.isEmpty()) {\n-            return false;\n+    \/**\n+     * If fixVersion has a major release of <N>, it matches if the fixVersionList has an\n+     * <N>-pool entry.\n+     *\/\n+    private static boolean matchPoolVersion(Issue issue, JdkVersion fixVersion) {\n+        var majorVersion = fixVersion.feature();\n+        var poolVersion = JdkVersion.parse(majorVersion + \"-pool\");\n+        \/\/ fixVersion may be something that doesn't parse into a valid pool version\n+        if (poolVersion.isPresent()) {\n+            var mainVersion = mainFixVersion(issue);\n+            if (mainVersion.isEmpty()) {\n+                return false;\n+            }\n+            return mainVersion.get().equals(poolVersion.get());\n@@ -138,1 +157,1 @@\n-        return mainVersion.get().equals(poolVersion.orElseThrow());\n+        return false;\n@@ -177,0 +196,8 @@\n+        var matchingOptPoolVersionIssue = candidates.stream()\n+                .filter(i -> matchOptPoolVersion(i, fixVersion))\n+                .findFirst();\n+        if (matchingOptPoolVersionIssue.isPresent()) {\n+            log.fine(\"Issue \" + matchingOptPoolVersionIssue.get().id() + \" has a matching opt pool version\");\n+            return matchingOptPoolVersionIssue;\n+        }\n+\n","filename":"jbs\/src\/main\/java\/org\/openjdk\/skara\/jbs\/Backports.java","additions":40,"deletions":13,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -168,1 +168,1 @@\n-            assertEquals(Optional.empty(), Backports.findIssue(issue, JdkVersion.parse(\"11.1-foo\").orElseThrow()));\n+            assertEquals(issue, Backports.findIssue(issue, JdkVersion.parse(\"11.1-foo\").orElseThrow()).orElseThrow());\n","filename":"jbs\/src\/test\/java\/org\/openjdk\/skara\/jbs\/BackportsTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}