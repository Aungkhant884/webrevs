{"files":[{"patch":"@@ -31,1 +31,1 @@\n-import java.util.Collection;\n+import java.util.*;\n@@ -65,2 +65,0 @@\n-        var commitComments = repo.recentCommitComments();\n-\n@@ -80,0 +78,13 @@\n+\n+            var commitTitleToCommits = new HashMap<String, Set<Hash>>();\n+            for (var commit : localRepo.commitMetadata()) {\n+                var title = commit.message().get(0);\n+                if (commitTitleToCommits.containsKey(title)) {\n+                    commitTitleToCommits.get(title).add(commit.hash());\n+                } else {\n+                    var set = new HashSet<Hash>();\n+                    set.add(commit.hash());\n+                    commitTitleToCommits.put(title, set);\n+                }\n+            }\n+            var commitComments = repo.recentCommitComments(commitTitleToCommits);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CommitCommentsWorkItem.java","additions":14,"deletions":3,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-    public List<CommitComment> recentCommitComments() {\n+    public List<CommitComment> recentCommitComments(Map<String, Set<Hash>> commitTitleToCommits) {\n","filename":"bots\/tester\/src\/test\/java\/org\/openjdk\/skara\/bots\/tester\/InMemoryHostedRepository.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -73,1 +73,4 @@\n-    List<CommitComment> recentCommitComments();\n+    default List<CommitComment> recentCommitComments() {\n+        return recentCommitComments(Map.of());\n+    }\n+    List<CommitComment> recentCommitComments(Map<String, Set<Hash>> commitTitleToCommits);\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/HostedRepository.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -295,1 +295,1 @@\n-    public List<CommitComment> recentCommitComments() {\n+    public List<CommitComment> recentCommitComments(Map<String, Set<Hash>> commitTitleToCommits) {\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubRepository.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -340,56 +340,1 @@\n-    private Set<Hash> commitsWithTitle(String commitTitle, ZonedDateTime now) {\n-        var commitTitlesToHashes = projectsToTitleToHashes.get(projectName);\n-        var lastUpdated = lastCommitUpdates.get(projectName);\n-\n-        if (lastUpdated == EPOCH) {\n-            \/\/ Fetch all commits one year at a time\n-            var until = now;\n-            var since = until.minusMonths(12);\n-            for (var i = 0; i < 100; i++) {\n-                var commits = request.get(\"repository\/commits\")\n-                                     .param(\"since\", since.format(DateTimeFormatter.ISO_DATE_TIME))\n-                                     .param(\"until\", until.format(DateTimeFormatter.ISO_DATE_TIME))\n-                                     .execute()\n-                                     .asArray();\n-                until = since;\n-                since = until.minusMonths(12);\n-\n-                if (commits.size() == 0) {\n-                    break;\n-                }\n-\n-                for (var commit : commits) {\n-                   var hash = new Hash(commit.get(\"id\").asString());\n-                   var title = commit.get(\"title\").asString();\n-                   var empty = new ConcurrentHashMap<Hash, Boolean>();\n-                   var existing = commitTitlesToHashes.putIfAbsent(title, empty);\n-                   if (existing == null) {\n-                       existing = empty;\n-                   }\n-                   existing.put(hash, true);\n-                }\n-            }\n-\n-            lastCommitUpdates.put(projectName, now);\n-        }\n-\n-        \/\/ Update with most recent commits\n-        var lastUpdate = lastCommitUpdates.get(projectName);\n-        if (lastUpdate.isBefore(now)) {\n-            request.get(\"repository\/commits\")\n-                   .param(\"since\", lastUpdate.format(DateTimeFormatter.ISO_DATE_TIME))\n-                   .execute()\n-                   .stream()\n-                   .forEach(o -> {\n-                       var hash = new Hash(o.get(\"id\").asString());\n-                       var title = o.get(\"title\").asString();\n-                       var empty = new ConcurrentHashMap<Hash, Boolean>();\n-                       var existing = commitTitlesToHashes.putIfAbsent(title, empty);\n-                       if (existing == null) {\n-                           existing = empty;\n-                       }\n-                       existing.put(hash, true);\n-                   });\n-            lastCommitUpdates.put(projectName, now);\n-        }\n-\n+    private Set<Hash> commitsWithTitle(String commitTitle, Map<String, Set<Hash>> commitTitlesToHashes) {\n@@ -397,1 +342,1 @@\n-            return commitTitlesToHashes.get(commitTitle).keySet();\n+            return commitTitlesToHashes.get(commitTitle);\n@@ -405,1 +350,1 @@\n-                    candidates.addAll(commitTitlesToHashes.get(title).keySet());\n+                    candidates.addAll(commitTitlesToHashes.get(title));\n@@ -417,2 +362,2 @@\n-                                   ZonedDateTime now) {\n-        var candidates = commitsWithTitle(commitTitle, now);\n+                                   Map<String, Set<Hash>> commitTitleToCommits) {\n+        var candidates = commitsWithTitle(commitTitle, commitTitleToCommits);\n@@ -437,1 +382,1 @@\n-    public List<CommitComment> recentCommitComments() {\n+    public List<CommitComment> recentCommitComments(Map<String, Set<Hash>> commitTitleToCommits) {\n@@ -449,1 +394,15 @@\n-        var now = ZonedDateTime.now();\n+        \/\/ Fetch eventual new commits\n+        var commits = request.get(\"repository\/commits\")\n+                             .param(\"since\", ZonedDateTime.now().minusHours(1).format(DateTimeFormatter.ISO_DATE_TIME))\n+                             .execute()\n+                             .asArray();\n+        for (var commit : commits) {\n+            var hash = new Hash(commit.get(\"id\").asString());\n+            var title = commit.get(\"title\").asString();\n+            if (commitTitleToCommits.containsKey(title)) {\n+                commitTitleToCommits.get(title).add(hash);\n+            } else {\n+                commitTitleToCommits.put(title, Set.of(hash));\n+            }\n+        }\n+\n@@ -459,1 +418,1 @@\n-                                                     now);\n+                                                     commitTitleToCommits);\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabRepository.java","additions":22,"deletions":63,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -213,1 +213,1 @@\n-    public List<CommitComment> recentCommitComments() {\n+    public List<CommitComment> recentCommitComments(Map<String, Set<Hash>> commitTitleToCommits) {\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestHostedRepository.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}