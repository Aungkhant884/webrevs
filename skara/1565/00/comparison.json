{"files":[{"patch":"@@ -25,1 +25,0 @@\n-import org.openjdk.skara.bots.common.SolvesTracker;\n@@ -28,1 +27,0 @@\n-import org.openjdk.skara.vcs.openjdk.Issue;\n@@ -31,1 +29,0 @@\n-import java.util.ArrayList;\n@@ -33,1 +30,0 @@\n-import java.util.Optional;\n@@ -37,0 +33,1 @@\n+import static org.openjdk.skara.bots.pr.ApproveCommand.getIssues;\n@@ -78,2 +75,2 @@\n-        var issueOpt = getIssue(issueId, pr, allComments, reply);\n-        if (issueOpt.isEmpty()) {\n+        var issues = getIssues(issueId, pr, allComments, reply);\n+        if (issues.isEmpty()) {\n@@ -82,22 +79,7 @@\n-        var issue = issueOpt.get();\n-\n-        if (issue.project().isPresent() && !issue.project().get().equalsIgnoreCase(issueProject.name())) {\n-            reply.println(\"Approval can only be requested for issues in the \" + issueProject.name() + \" project.\");\n-            return;\n-        }\n-\n-        var issueTrackerIssueOpt = issueProject.issue(issue.shortId());\n-        if (issueTrackerIssueOpt.isEmpty()) {\n-            reply.println(\"Can not find \" + issue.id() + \" in the \" + issueProject.name() + \" project.\");\n-            return;\n-        }\n-        var issueTrackerIssue = issueTrackerIssueOpt.get();\n-        var requestLabel = approval.requestedLabel(targetRef);\n-        var approvedLabel = approval.approvedLabel(targetRef);\n-        var rejectedLabel = approval.rejectedLabel(targetRef);\n-        var prefix = \"[\" + requestLabel + \"]\";\n-        var comments = issueTrackerIssue.comments();\n-        var existingComment = comments.stream()\n-                .filter(comment -> comment.author().equals(issueProject.issueTracker().currentUser()))\n-                .filter(comment -> comment.body().startsWith(prefix))\n-                .findFirst();\n+        reply.println();\n+        for (var issue : issues) {\n+            reply.print(issue.id() + \": \");\n+            if (issue.project().isPresent() && !issue.project().get().equalsIgnoreCase(issueProject.name())) {\n+                reply.println(\"Approval can only be requested for issues in the \" + issueProject.name() + \" project.\");\n+                continue;\n+            }\n@@ -105,8 +87,4 @@\n-        var labels = issueTrackerIssue.labelNames();\n-        if (option.equals(\"cancel\")) {\n-            if (labels.contains(approvedLabel) || labels.contains(rejectedLabel)) {\n-                reply.println(\"The request has already been handled by a maintainer and can no longer be canceled.\");\n-            } else {\n-                issueTrackerIssue.removeLabel(requestLabel);\n-                existingComment.ifPresent(issueTrackerIssue::removeComment);\n-                reply.println(\"The approval request has been cancelled successfully.\");\n+            var issueTrackerIssueOpt = issueProject.issue(issue.shortId());\n+            if (issueTrackerIssueOpt.isEmpty()) {\n+                reply.println(\"Can not find \" + issue.id() + \" in the \" + issueProject.name() + \" project.\");\n+                continue;\n@@ -114,11 +92,34 @@\n-        } else if (option.equals(\"request\")) {\n-            if (labels.contains(approvedLabel)) {\n-                reply.println(\"Approval has already been requested and approved.\");\n-            } else if (labels.contains(rejectedLabel)) {\n-                reply.println(\"Approval has already been requested and rejected.\");\n-            } else {\n-                var messageToPost = prefix + \" Approval Request from \" + command.user().fullName() + \"\\n\" + message.trim();\n-                if (existingComment.isPresent()) {\n-                    if (!existingComment.get().body().equals(messageToPost)) {\n-                        Comment comment = issueTrackerIssue.updateComment(existingComment.get().id(), messageToPost);\n-                        reply.println(\"The approval [request](\" + issueTrackerIssue.commentUrl(comment) + \") has been updated successfully.\");\n+            var issueTrackerIssue = issueTrackerIssueOpt.get();\n+            var requestLabel = approval.requestedLabel(targetRef);\n+            var approvedLabel = approval.approvedLabel(targetRef);\n+            var rejectedLabel = approval.rejectedLabel(targetRef);\n+            var prefix = \"[\" + requestLabel + \"]\";\n+            var comments = issueTrackerIssue.comments();\n+            var existingComment = comments.stream()\n+                    .filter(comment -> comment.author().equals(issueProject.issueTracker().currentUser()))\n+                    .filter(comment -> comment.body().startsWith(prefix))\n+                    .findFirst();\n+\n+            var labels = issueTrackerIssue.labelNames();\n+            if (option.equals(\"cancel\")) {\n+                if (labels.contains(approvedLabel) || labels.contains(rejectedLabel)) {\n+                    reply.println(\"The request has already been handled by a maintainer and can no longer be canceled.\");\n+                } else {\n+                    issueTrackerIssue.removeLabel(requestLabel);\n+                    existingComment.ifPresent(issueTrackerIssue::removeComment);\n+                    reply.println(\"The approval request has been cancelled successfully.\");\n+                }\n+            } else if (option.equals(\"request\")) {\n+                if (labels.contains(approvedLabel)) {\n+                    reply.println(\"Approval has already been requested and approved.\");\n+                } else if (labels.contains(rejectedLabel)) {\n+                    reply.println(\"Approval has already been requested and rejected.\");\n+                } else {\n+                    var messageToPost = prefix + \" Approval Request from \" + command.user().fullName() + \"\\n\" + message.trim();\n+                    if (existingComment.isPresent()) {\n+                        if (!existingComment.get().body().equals(messageToPost)) {\n+                            Comment comment = issueTrackerIssue.updateComment(existingComment.get().id(), messageToPost);\n+                            reply.println(\"The approval [request](\" + issueTrackerIssue.commentUrl(comment) + \") has been updated successfully.\");\n+                        } else {\n+                            reply.println(\"The approval [request](\" + issueTrackerIssue.commentUrl(existingComment.get()) + \") was already up to date.\");\n+                        }\n@@ -126,1 +127,2 @@\n-                        reply.println(\"The approval [request](\" + issueTrackerIssue.commentUrl(existingComment.get()) + \") was already up to date.\");\n+                        Comment comment = issueTrackerIssue.addComment(messageToPost);\n+                        reply.println(\"The approval [request](\" + issueTrackerIssue.commentUrl(comment) + \") has been created successfully.\");\n@@ -128,3 +130,1 @@\n-                } else {\n-                    Comment comment = issueTrackerIssue.addComment(messageToPost);\n-                    reply.println(\"The approval [request](\" + issueTrackerIssue.commentUrl(comment) + \") has been created successfully.\");\n+                    issueTrackerIssue.addLabel(requestLabel);\n@@ -132,23 +132,0 @@\n-                issueTrackerIssue.addLabel(requestLabel);\n-            }\n-        }\n-    }\n-\n-    private Optional<Issue> getIssue(String issueId, PullRequest pr, List<Comment> allComments, PrintWriter reply) {\n-        var titleIssue = Issue.fromStringRelaxed(pr.title());\n-        var issues = new ArrayList<String>();\n-        titleIssue.ifPresent(value -> issues.add(value.shortId()));\n-        issues.addAll(SolvesTracker.currentSolved(pr.repository().forge().currentUser(), allComments, pr.title())\n-                .stream()\n-                .map(Issue::shortId)\n-                .toList());\n-        \/\/ If there is only one issue associated with the pr, then the user don't need to specify the issueID in command\n-        if (issueId == null) {\n-            if (issues.size() == 1) {\n-                issueId = issues.get(0);\n-            } else if (issues.size() == 0) {\n-                reply.println(\"There is no issue associated with this pull request.\");\n-                return Optional.empty();\n-            } else {\n-                reply.println(\"There are multiple issues associated with this pull request, you need to request approval for each one individually.\");\n-                return Optional.empty();\n@@ -157,6 +134,0 @@\n-        Issue issue = new Issue(issueId, null);\n-        if (!issues.contains(issue.shortId())) {\n-            reply.println(\"Approval can only be requested for issues that this pull request solves.\");\n-            return Optional.empty();\n-        }\n-        return Optional.of(issue);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/ApprovalCommand.java","additions":51,"deletions":80,"binary":false,"changes":131,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-import java.util.Optional;\n@@ -121,1 +120,1 @@\n-    private List<Issue> getIssues(String issueId, PullRequest pr, List<Comment> allComments, PrintWriter reply) {\n+    public static List<Issue> getIssues(String issueId, PullRequest pr, List<Comment> allComments, PrintWriter reply) {\n@@ -136,1 +135,1 @@\n-                reply.println(\"You can only handle approval requests for issues that this pull request solves.\");\n+                reply.println(issueId + \" is not associated with this pull request.\");\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/ApproveCommand.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -222,2 +222,1 @@\n-            pr.addComment(\"\/approval 1 request my reason\");\n-            pr.addComment(\"\/approval 2 request my reason\");\n+            pr.addComment(\"\/approval request my reason\");\n@@ -226,1 +225,19 @@\n-            assertLastCommentContains(pr, \"The approval [request](http:\/\/localhost\/project\/testTEST-2?focusedCommentId=0) has been created successfully.\");\n+            assertLastCommentContains(pr, \"1: The approval [request](http:\/\/localhost\/project\/testTEST-1?focusedCommentId=0) has been created successfully.\");\n+            assertLastCommentContains(pr, \"2: The approval [request](http:\/\/localhost\/project\/testTEST-2?focusedCommentId=0) has been created successfully.\");\n+\n+            pr.addComment(\"\/approval cancel\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            TestBotRunner.runPeriodicItems(issueBot);\n+            assertLastCommentContains(pr, \"1: The approval request has been cancelled successfully.\");\n+            assertLastCommentContains(pr, \"2: The approval request has been cancelled successfully.\");\n+\n+            pr.addComment(\"\/approval 1 request my reason for 1\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            TestBotRunner.runPeriodicItems(issueBot);\n+            assertLastCommentContains(pr, \"1: The approval [request](http:\/\/localhost\/project\/testTEST-1?focusedCommentId=0) has been created successfully.\");\n+\n+            pr.addComment(\"\/approval request my reason\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            TestBotRunner.runPeriodicItems(issueBot);\n+            assertLastCommentContains(pr, \"1: The approval [request](http:\/\/localhost\/project\/testTEST-1?focusedCommentId=0) has been updated successfully.\");\n+            assertLastCommentContains(pr, \"2: The approval [request](http:\/\/localhost\/project\/testTEST-2?focusedCommentId=0) has been created successfully.\");\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/ApprovalAndApproveCommandTests.java","additions":20,"deletions":3,"binary":false,"changes":23,"status":"modified"}]}