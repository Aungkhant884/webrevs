{"files":[{"patch":"@@ -29,1 +29,0 @@\n-import org.openjdk.skara.vcs.Repository;\n@@ -34,1 +33,1 @@\n-import java.nio.file.Path;\n+import java.nio.file.*;\n@@ -36,1 +35,0 @@\n-import java.util.stream.Collectors;\n@@ -51,8 +49,0 @@\n-    private static Repository initialize(HostedRepository repo, String ref, Path folder) {\n-        try {\n-            return Repository.materialize(folder, repo.url(), \"+\" + ref + \":pr_census_\" + repo.name());\n-        } catch (IOException e) {\n-            throw new RuntimeException(\"Failed to retrieve census to \" + folder, e);\n-        }\n-    }\n-\n@@ -79,3 +69,7 @@\n-    private static JCheckConfiguration configuration(HostedRepository remoteRepo, String name, String ref) {\n-        var confFile = remoteRepo.fileContents(name, ref);\n-        return JCheckConfiguration.parse(confFile.lines().collect(Collectors.toList()));\n+    private static JCheckConfiguration configuration(HostedRepositoryPool hostedRepositoryPool, HostedRepository remoteRepo, String name, String ref, Path folder) throws IOException {\n+        var repoName = remoteRepo.url().getHost() + \"\/\" + remoteRepo.name();\n+        var repoFolder = folder.resolve(URLEncoder.encode(repoName, StandardCharsets.UTF_8));\n+        hostedRepositoryPool.checkoutAllowStale(remoteRepo, ref, repoFolder);\n+\n+        var confFile = Files.readAllLines(repoFolder.resolve(name));\n+        return JCheckConfiguration.parse(confFile);\n@@ -84,1 +78,1 @@\n-    static CensusInstance create(HostedRepository censusRepo, String censusRef, Path folder, PullRequest pr,\n+    static CensusInstance create(HostedRepositoryPool hostedRepositoryPool, HostedRepository censusRepo, String censusRef, Path folder, PullRequest pr,\n@@ -89,5 +83,1 @@\n-            var localRepo = Repository.get(repoFolder)\n-                                      .or(() -> Optional.of(initialize(censusRepo, censusRef, repoFolder)))\n-                                      .orElseThrow();\n-            var hash = localRepo.fetch(censusRepo.url(), censusRef, false);\n-            localRepo.checkout(hash, true);\n+            hostedRepositoryPool.checkoutAllowStale(censusRepo, censusRef, repoFolder);\n@@ -95,1 +85,1 @@\n-            initialize(censusRepo, censusRef, repoFolder);\n+            throw new UncheckedIOException(\"Cannot materialize census to \" + repoFolder, e);\n@@ -101,1 +91,1 @@\n-                configuration = configuration(pr.repository(), \".jcheck\/conf\", pr.targetRef());\n+                configuration = configuration(hostedRepositoryPool, pr.repository(), \".jcheck\/conf\", pr.targetRef(), folder);\n@@ -103,1 +93,1 @@\n-                configuration = configuration(confOverrideRepo, confOverrideName, confOverrideRef);\n+                configuration = configuration(hostedRepositoryPool, confOverrideRepo, confOverrideName, confOverrideRef, folder);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CensusInstance.java","additions":13,"deletions":23,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -178,1 +178,4 @@\n-        var census = CensusInstance.create(bot.censusRepo(), bot.censusRef(), scratchPath.resolve(\"census\"), pr,\n+        var seedPath = bot.seedStorage().orElse(scratchPath.resolve(\"seeds\"));\n+        var hostedRepositoryPool = new HostedRepositoryPool(seedPath);\n+\n+        var census = CensusInstance.create(hostedRepositoryPool, bot.censusRepo(), bot.censusRef(), scratchPath.resolve(\"census\"), pr,\n@@ -247,2 +250,0 @@\n-                var seedPath = bot.seedStorage().orElse(scratchPath.resolve(\"seeds\"));\n-                var hostedRepositoryPool = new HostedRepositoryPool(seedPath);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckWorkItem.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -26,2 +26,1 @@\n-import org.openjdk.skara.forge.PullRequest;\n-import org.openjdk.skara.forge.PullRequestBody;\n+import org.openjdk.skara.forge.*;\n@@ -225,1 +224,4 @@\n-        var census = CensusInstance.create(bot.censusRepo(), bot.censusRef(), scratchPath.resolve(\"census\"), pr,\n+        var seedPath = bot.seedStorage().orElse(scratchPath.resolve(\"seeds\"));\n+        var hostedRepositoryPool = new HostedRepositoryPool(seedPath);\n+\n+        var census = CensusInstance.create(hostedRepositoryPool, bot.censusRepo(), bot.censusRef(), scratchPath.resolve(\"census\"), pr,\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CommandWorkItem.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+            var seedFolder = tempFolder.path().resolve(\"seed\");\n@@ -57,0 +58,1 @@\n+                                         .seedStorage(seedFolder)\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CheckTests.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.time.*;\n@@ -60,1 +61,1 @@\n-        private void initializeSeed() throws IOException {\n+        private void refreshSeed(boolean allowStale) throws IOException {\n@@ -68,0 +69,1 @@\n+                    return;\n@@ -73,0 +75,22 @@\n+\n+            var seedRepo = Repository.get(seed).orElseThrow(() -> new IOException(\"Existing seed is corrupt?\"));\n+            if (allowStale) {\n+                try {\n+                    var lastFetch = Files.getLastModifiedTime(seed.resolve(\"FETCH_HEAD\"));\n+                    if (lastFetch.toInstant().isAfter(Instant.now().minus(Duration.ofMinutes(1)))) {\n+                        log.info(\"Seed should be up to date, skipping fetch\");\n+                        return;\n+                    }\n+                } catch (IOException ignored) {\n+                }\n+                log.info(\"Seed is potentially stale, time to fetch the latest upstream changes\");\n+            } else {\n+                log.info(\"Fetching latest upstream changes into the seed\");\n+            }\n+            try {\n+                seedRepo.fetchAll();\n+            } catch (IOException e) {\n+                if (!allowStale) {\n+                    throw e;\n+                }\n+            }\n@@ -75,2 +99,2 @@\n-        private Repository cloneSeeded(Path path) throws IOException {\n-            initializeSeed();\n+        private Repository cloneSeeded(Path path, boolean allowStale) throws IOException {\n+            refreshSeed(allowStale);\n@@ -98,1 +122,1 @@\n-        private Repository materializeClone(Path path) throws IOException {\n+        private Repository materializeClone(Path path, boolean allowStale) throws IOException {\n@@ -102,1 +126,1 @@\n-                return cloneSeeded(path);\n+                return cloneSeeded(path, allowStale);\n@@ -107,1 +131,1 @@\n-                    return cloneSeeded(path);\n+                    return cloneSeeded(path, allowStale);\n@@ -110,0 +134,1 @@\n+                        refreshSeed(allowStale);\n@@ -111,0 +136,1 @@\n+                        localRepoInstance.fetchAll();\n@@ -114,1 +140,1 @@\n-                        return cloneSeeded(path);\n+                        return cloneSeeded(path, allowStale);\n@@ -123,1 +149,1 @@\n-        return hostedRepositoryInstance.materializeClone(path);\n+        return hostedRepositoryInstance.materializeClone(path, false);\n@@ -126,24 +152,1 @@\n-    private static class NewClone {\n-        private final Repository repository;\n-        private final Hash fetchHead;\n-\n-        NewClone(Repository repository, Hash fetchHead) {\n-            this.repository = repository;\n-            this.fetchHead = fetchHead;\n-        }\n-\n-        Repository repository() {\n-            return repository;\n-        }\n-\n-        Hash fetchHead() {\n-            return fetchHead;\n-        }\n-    }\n-\n-    private NewClone fetchRef(HostedRepository hostedRepository, Repository repository, String ref) throws IOException {\n-        var fetchHead = repository.fetch(hostedRepository.url(), \"+\" + ref + \":hostedrepositorypool\");\n-        return new NewClone(repository, fetchHead);\n-    }\n-\n-    public Repository checkout(HostedRepository hostedRepository, String ref, Path path) throws IOException {\n+    private Repository checkout(HostedRepository hostedRepository, String ref, Path path, boolean allowStale) throws IOException {\n@@ -151,2 +154,1 @@\n-        var clone = fetchRef(hostedRepository, hostedRepositoryInstance.materializeClone(path), ref);\n-        var localRepo = clone.repository();\n+        var localClone = hostedRepositoryInstance.materializeClone(path, allowStale);\n@@ -154,1 +156,1 @@\n-            localRepo.checkout(clone.fetchHead(), true);\n+            localClone.checkout(new Branch(ref), true);\n@@ -159,4 +161,3 @@\n-            Files.move(localRepo.root(), preserveUnchecked);\n-            clone = fetchRef(hostedRepository, hostedRepositoryInstance.cloneSeeded(path), ref);\n-            localRepo = clone.repository();\n-            localRepo.checkout(clone.fetchHead(), true);\n+            Files.move(localClone.root(), preserveUnchecked);\n+            localClone = hostedRepositoryInstance.materializeClone(path, allowStale);\n+            localClone.checkout(new Branch(ref), true);\n@@ -164,1 +165,9 @@\n-        return localRepo;\n+        return localClone;\n+    }\n+\n+    public Repository checkout(HostedRepository hostedRepository, String ref, Path path) throws IOException {\n+        return checkout(hostedRepository, ref, path, false);\n+    }\n+\n+    public Repository checkoutAllowStale(HostedRepository hostedRepository, String ref, Path path) throws IOException {\n+        return checkout(hostedRepository, ref, path, true);\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/HostedRepositoryPool.java","additions":49,"deletions":40,"binary":false,"changes":89,"status":"modified"}]}