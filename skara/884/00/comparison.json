{"files":[{"patch":"@@ -138,6 +138,9 @@\n-        for (var role : missing.keySet()) {\n-            int required = requirements.get(role);\n-            int n = missing.get(role);\n-            if (n > 0) {\n-                log.finer(\"issue: too few reviewers with role \" + role + \" found\");\n-                return iterator(new TooFewReviewersIssue(required - n, required, role, metadata));\n+        var isBackport = message.original().isPresent();\n+        if (!isBackport || conf.checks().reviewers().shouldCheckBackports()) {\n+            for (var role : missing.keySet()) {\n+                int required = requirements.get(role);\n+                int n = missing.get(role);\n+                if (n > 0) {\n+                    log.finer(\"issue: too few reviewers with role \" + role + \" found\");\n+                    return iterator(new TooFewReviewersIssue(required - n, required, role, metadata));\n+                }\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/ReviewersCheck.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-    static final ReviewersConfiguration DEFAULT = new ReviewersConfiguration(0, 1, 0, 0, 0, List.of(\"duke\"));\n+    static final ReviewersConfiguration DEFAULT = new ReviewersConfiguration(0, 1, 0, 0, 0, List.of(\"duke\"), false);\n@@ -39,0 +39,1 @@\n+    private final boolean shouldCheckBackports;\n@@ -40,1 +41,1 @@\n-    ReviewersConfiguration(int lead, int reviewers, int committers, int authors, int contributors, List<String> ignore) {\n+    ReviewersConfiguration(int lead, int reviewers, int committers, int authors, int contributors, List<String> ignore, boolean shouldCheckBackports) {\n@@ -47,0 +48,1 @@\n+        this.shouldCheckBackports = shouldCheckBackports;\n@@ -73,0 +75,4 @@\n+    public boolean shouldCheckBackports() {\n+        return shouldCheckBackports;\n+    }\n+\n@@ -118,0 +124,1 @@\n+        var shouldCheckBackports = s.get(\"backports\", \"ignore\").equals(\"check\");\n@@ -119,1 +126,1 @@\n-        return new ReviewersConfiguration(lead, reviewers, committers, authors, contributors, ignore);\n+        return new ReviewersConfiguration(lead, reviewers, committers, authors, contributors, ignore, shouldCheckBackports);\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/ReviewersConfiguration.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import org.openjdk.skara.vcs.openjdk.CommitMessageFormatters;\n@@ -102,0 +103,4 @@\n+        return commit(author, reviewers, null);\n+    }\n+\n+    private static Commit commit(Author author, List<String> reviewers, Hash original) {\n@@ -105,4 +110,5 @@\n-        var message = new ArrayList<String>();\n-        message.addAll(List.of(\"Initial commit\"));\n-        if (!reviewers.isEmpty()) {\n-            message.addAll(List.of(\"\", \"Reviewed-by: \" + String.join(\", \", reviewers)));\n+\n+        var message = CommitMessage.title(\"Initial commit\");\n+        message.reviewers(reviewers);\n+        if (original != null) {\n+            message.original(original);\n@@ -110,1 +116,2 @@\n-        var metadata = new CommitMetadata(hash, parents, author, authored, author, authored, message);\n+        var desc = message.format(CommitMessageFormatters.v1);\n+        var metadata = new CommitMetadata(hash, parents, author, authored, author, authored, desc);\n@@ -511,0 +518,42 @@\n+\n+    @Test\n+    void backportCommitWithoutReviewersIsFine() throws IOException {\n+        var original = new Hash(\"0123456789012345678901234567890123456789\");\n+        var commit = commit(new Author(\"user\", \"user@host.org\"), List.of(), original);\n+        var check = new ReviewersCheck(utils);\n+        var issues = toList(check.check(commit, message(commit), conf(1), census()));\n+        assertEquals(List.of(), issues);\n+    }\n+\n+    @Test\n+    void backportCommitWithoutReviewersWithIgnoredCheckIsFine() throws IOException {\n+        var conf = new ArrayList<>(CONFIGURATION);\n+        conf.add(\"reviewers = 1\");\n+        conf.add(\"backports = ignore\");\n+        var original = new Hash(\"0123456789012345678901234567890123456789\");\n+        var commit = commit(new Author(\"user\", \"user@host.org\"), List.of(), original);\n+        var check = new ReviewersCheck(utils);\n+        var issues = toList(check.check(commit, message(commit), JCheckConfiguration.parse(conf), census()));\n+        assertEquals(List.of(), issues);\n+    }\n+\n+    @Test\n+    void backportCommitWithoutReviewersWithStrictCheckingIsError() throws IOException {\n+        var conf = new ArrayList<>(CONFIGURATION);\n+        conf.add(\"reviewers = 1\");\n+        conf.add(\"backports = check\");\n+        var original = new Hash(\"0123456789012345678901234567890123456789\");\n+        var commit = commit(new Author(\"user\", \"user@host.org\"), List.of(), original);\n+        var check = new ReviewersCheck(utils);\n+        var issues = toList(check.check(commit, message(commit), JCheckConfiguration.parse(conf), census()));\n+\n+        assertEquals(1, issues.size());\n+        assertTrue(issues.get(0) instanceof TooFewReviewersIssue);\n+        var issue = (TooFewReviewersIssue) issues.get(0);\n+        assertEquals(0, issue.numActual());\n+        assertEquals(1, issue.numRequired());\n+        assertEquals(\"reviewer\", issue.role());\n+        assertEquals(commit, issue.commit());\n+        assertEquals(Severity.ERROR, issue.severity());\n+        assertEquals(check, issue.check());\n+    }\n","filename":"jcheck\/src\/test\/java\/org\/openjdk\/skara\/jcheck\/ReviewersCheckTests.java","additions":54,"deletions":5,"binary":false,"changes":59,"status":"modified"}]}