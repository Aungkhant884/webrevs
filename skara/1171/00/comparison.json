{"files":[{"patch":"@@ -34,0 +34,2 @@\n+    requires java.management;\n+    requires jdk.management;\n","filename":"bot\/src\/main\/java\/module-info.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import org.openjdk.skara.metrics.Counter;\n+import org.openjdk.skara.metrics.*;\n@@ -37,0 +37,2 @@\n+import java.lang.management.ManagementFactory;\n+import com.sun.management.ThreadMXBean;\n@@ -62,0 +64,7 @@\n+        private static final Gauge.WithTwoLabels CPU_TIME_GAUGE =\n+            Gauge.name(\"skara_runner_cpu_time\").labels(\"bot\", \"work-item\").register();\n+        private static final Gauge.WithTwoLabels USER_TIME_GAUGE =\n+            Gauge.name(\"skara_runner_user_time\").labels(\"bot\", \"work-item\").register();\n+        private static final Gauge.WithTwoLabels ALLOCATED_BYTES_GAUGE =\n+            Gauge.name(\"skara_runner_allocated_bytes\").labels(\"bot\", \"work-item\").register();\n+\n@@ -72,0 +81,50 @@\n+        private static Optional<ThreadMXBean> getThreadMXBean() {\n+            var bean = ManagementFactory.getThreadMXBean();\n+            return bean instanceof ThreadMXBean ?\n+                Optional.of((ThreadMXBean) bean) : Optional.empty();\n+        }\n+\n+        private static void enableThreadCpuTime() {\n+            var bean = getThreadMXBean();\n+            if (bean.get().isCurrentThreadCpuTimeSupported() && !bean.get().isThreadCpuTimeEnabled()) {\n+                bean.get().setThreadCpuTimeEnabled(true);\n+            }\n+        }\n+\n+        private static long getCurrentThreadCpuTime() {\n+            var bean = getThreadMXBean();\n+            if (bean.isEmpty()) {\n+                return -1L;\n+            }\n+            return bean.get().isCurrentThreadCpuTimeSupported()?\n+                bean.get().getCurrentThreadCpuTime() :\n+                -1L;\n+        }\n+\n+        private static long getCurrentThreadUserTime() {\n+            var bean = getThreadMXBean();\n+            if (bean.isEmpty()) {\n+                return -1L;\n+            }\n+            return bean.get().isCurrentThreadCpuTimeSupported()?\n+                bean.get().getCurrentThreadUserTime() :\n+                -1L;\n+        }\n+\n+        private static long getCurrentThreadAllocatedBytes() {\n+            var bean = getThreadMXBean();\n+            if (bean.isEmpty()) {\n+                return -1L;\n+            }\n+\n+            if (!bean.get().isThreadAllocatedMemorySupported()) {\n+                return -1L;\n+            }\n+\n+            if (!bean.get().isThreadAllocatedMemoryEnabled()) {\n+                bean.get().setThreadAllocatedMemoryEnabled(true);\n+            }\n+\n+            return bean.get().getCurrentThreadAllocatedBytes();\n+        }\n+\n@@ -74,0 +133,34 @@\n+            enableThreadCpuTime();\n+            long startCpuTimeNs = getCurrentThreadCpuTime();\n+            long startUserTimeNs = getCurrentThreadUserTime();\n+            long startAllocatedBytes = getCurrentThreadAllocatedBytes();\n+\n+            try {\n+                runMeasured();\n+            } finally {\n+                long stopCpuTimeNs = getCurrentThreadCpuTime();\n+                long stopUserTimeNs = getCurrentThreadUserTime();\n+                long stopAllocatedBytes = getCurrentThreadAllocatedBytes();\n+\n+                var cpuTimeNs = (startCpuTimeNs == -1L && stopCpuTimeNs == -1L)?\n+                    -1L : stopCpuTimeNs - startCpuTimeNs;\n+                var userTimeNs = (startUserTimeNs == -1L && stopUserTimeNs == -1L)?\n+                    -1L : stopUserTimeNs - startUserTimeNs;\n+                var allocatedBytes = (startAllocatedBytes == -1L && stopAllocatedBytes == -1L)?\n+                    -1L : stopAllocatedBytes - startAllocatedBytes;\n+\n+                if (cpuTimeNs != -1L) {\n+                    double cpuTimeSeconds = cpuTimeNs \/ 1_000_000.0;\n+                    CPU_TIME_GAUGE.labels(item.botName(), item.workItemName()).set(cpuTimeSeconds);\n+                }\n+                if (userTimeNs != -1L) {\n+                    double userTimeSeconds = userTimeNs \/ 1_000_000.0;\n+                    USER_TIME_GAUGE.labels(item.botName(), item.workItemName()).set(userTimeSeconds);\n+                }\n+                if (allocatedBytes != -1L) {\n+                    ALLOCATED_BYTES_GAUGE.labels(item.botName(), item.workItemName()).set(allocatedBytes);\n+                }\n+            }\n+        }\n+\n+        private void runMeasured() {\n","filename":"bot\/src\/main\/java\/org\/openjdk\/skara\/bot\/BotRunner.java","additions":94,"deletions":1,"binary":false,"changes":95,"status":"modified"}]}