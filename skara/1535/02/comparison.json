{"files":[{"patch":"@@ -40,1 +40,0 @@\n-    implementation project(':bots:jep')\n","filename":"bots\/cli\/build.gradle","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-     * This method will parse issues from Pull Request Body and filters out JEP and CSR issues\n+     * Parses issues from a pull request body and filters out JEP and CSR issues\n@@ -61,0 +61,17 @@\n+\n+    \/**\n+     * Parses issues from a pull request body.\n+     *\n+     * @param body The pull request body\n+     * @return Set of issue ids\n+     *\/\n+    public static Set<String> parseAllIssues(String body) {\n+        var issuesBlockMatcher = issuesBlockPattern.matcher(body);\n+        if (!issuesBlockMatcher.find()) {\n+            return Set.of();\n+        }\n+        var issueMatcher = issuePattern.matcher(issuesBlockMatcher.group(1));\n+        return issueMatcher.results()\n+                .map(mo -> mo.group(1))\n+                .collect(Collectors.toSet());\n+    }\n","filename":"bots\/common\/src\/main\/java\/org\/openjdk\/skara\/bots\/common\/BotUtils.java","additions":18,"deletions":1,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -1,48 +0,0 @@\n-\/*\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-module {\n-    name = 'org.openjdk.skara.bots.jep'\n-    test {\n-        requires 'org.junit.jupiter.api'\n-        requires 'org.openjdk.skara.test'\n-        opens 'org.openjdk.skara.bots.jep' to 'org.junit.platform.commons'\n-    }\n-}\n-\n-dependencies {\n-    implementation project(':host')\n-    implementation project(':bot')\n-    implementation project(':forge')\n-    implementation project(':issuetracker')\n-    implementation project(':census')\n-    implementation project(':ci')\n-    implementation project(':json')\n-    implementation project(':vcs')\n-    implementation project(':metrics')\n-    implementation project(':bots:common')\n-    implementation project(':jbs')\n-    implementation project(':jcheck')\n-\n-    testImplementation project(':test')\n-}\n","filename":"bots\/jep\/build.gradle","additions":0,"deletions":48,"binary":false,"changes":48,"status":"deleted"},{"patch":"@@ -1,35 +0,0 @@\n-\/*\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-module org.openjdk.skara.bots.jep {\n-    requires org.openjdk.skara.bot;\n-    requires org.openjdk.skara.vcs;\n-    requires org.openjdk.skara.forge;\n-    requires org.openjdk.skara.issuetracker;\n-    requires java.logging;\n-    requires org.openjdk.skara.bots.common;\n-    requires org.openjdk.skara.jcheck;\n-    requires org.openjdk.skara.jbs;\n-\n-    provides org.openjdk.skara.bot.BotFactory with org.openjdk.skara.bots.jep.JEPBotFactory;\n-}\n","filename":"bots\/jep\/src\/main\/java\/module-info.java","additions":0,"deletions":35,"binary":false,"changes":35,"status":"deleted"},{"patch":"@@ -1,157 +0,0 @@\n-\/*\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package org.openjdk.skara.bots.jep;\n-\n-import org.openjdk.skara.bot.Bot;\n-import org.openjdk.skara.bot.WorkItem;\n-import org.openjdk.skara.forge.HostedRepository;\n-import org.openjdk.skara.forge.PullRequest;\n-import org.openjdk.skara.issuetracker.IssueProject;\n-\n-import java.nio.file.Path;\n-import java.util.Collection;\n-import java.util.List;\n-import java.util.logging.Logger;\n-import java.util.regex.Matcher;\n-\n-import static org.openjdk.skara.bots.jep.JEPBotFactory.NAME;\n-import static org.openjdk.skara.bots.common.PullRequestConstants.*;\n-\n-public class JEPBot implements Bot, WorkItem {\n-    private final Logger log = Logger.getLogger(\"org.openjdk.skara.bots\");\n-    private final HostedRepository repo;\n-    private final IssueProject issueProject;\n-\n-    JEPBot(HostedRepository repo, IssueProject issueProject) {\n-        this.repo = repo;\n-        this.issueProject = issueProject;\n-    }\n-\n-    @Override\n-    public boolean concurrentWith(WorkItem other) {\n-        if (!(other instanceof JEPBot otherBot)) {\n-            return true;\n-        }\n-        return !repo.isSame(otherBot.repo);\n-    }\n-\n-    @Override\n-    public Collection<WorkItem> run(Path scratchPath) {\n-        var prs = repo.openPullRequests();\n-        for (var pr : prs) {\n-            var jepComment = pr.comments().stream()\n-                    .filter(comment -> comment.author().equals(pr.repository().forge().currentUser()))\n-                    .flatMap(comment -> comment.body().lines())\n-                    .map(JEP_MARKER_PATTERN::matcher)\n-                    .filter(Matcher::find)\n-                    .reduce((first, second) -> second)\n-                    .orElse(null);\n-            if (jepComment == null) {\n-                log.fine(\"No jep command found in comment for \" + describe(pr));\n-                if (pr.labelNames().contains(JEP_LABEL)) {\n-                    log.info(\"Removing JEP label from \" + describe(pr));\n-                    pr.removeLabel(JEP_LABEL);\n-                }\n-                continue;\n-            }\n-\n-            var issueId = jepComment.group(2);\n-            if (\"unneeded\".equals(issueId)) {\n-                log.info(\"Found `\/jep unneeded` command for \" + describe(pr));\n-                if (pr.labelNames().contains(JEP_LABEL)) {\n-                    log.info(\"Removing JEP label from \" + describe(pr));\n-                    pr.removeLabel(JEP_LABEL);\n-                }\n-                continue;\n-            }\n-\n-            var issueOpt = issueProject.issue(issueId);\n-            if (issueOpt.isEmpty()) {\n-                log.severe(\"The issue `\" + issueId + \"` for \" + describe(pr) + \" doesn't exist.\");\n-                continue;\n-            }\n-            var issue = issueOpt.get();\n-\n-            var issueType = issue.properties().get(\"issuetype\");\n-            if (issueType == null || !\"JEP\".equals(issueType.asString())) {\n-                log.severe(\"The issue `\" + issue.id() + \"` for \" + describe(pr) + \" is not a JEP.\");\n-                continue;\n-            }\n-\n-            var issueStatus = issue.properties().get(\"status\").get(\"name\").asString();\n-            var resolution = issue.properties().get(\"resolution\");\n-            String resolutionName = \"\";\n-            if (resolution != null && !resolution.isNull() &&\n-                    resolution.get(\"name\") != null && !resolution.get(\"name\").isNull()) {\n-                resolutionName = resolution.get(\"name\").asString();\n-            }\n-\n-            var hasTargeted = \"Targeted\".equals(issueStatus) ||\n-                    \"Integrated\".equals(issueStatus) ||\n-                    \"Completed\".equals(issueStatus) ||\n-                    (\"Closed\".equals(issueStatus) && \"Delivered\".equals(resolutionName));\n-            if (hasTargeted && pr.labelNames().contains(JEP_LABEL)) {\n-                log.info(\"JEP issue \" + issue.id() + \" found in state \" + issueStatus + \", removing JEP label from \" + describe(pr));\n-                pr.removeLabel(JEP_LABEL);\n-            } else if (!hasTargeted && !pr.labelNames().contains(JEP_LABEL)) {\n-                log.info(\"JEP issue \" + issue.id() + \" found in state \" + issueStatus + \", adding JEP label to \" + describe(pr));\n-                pr.addLabel(JEP_LABEL);\n-            }\n-        }\n-        return List.of();\n-    }\n-\n-    private String describe(PullRequest pr) {\n-        return repo.name() + \"#\" + pr.id();\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return \"JEPBot@\" + repo.name();\n-    }\n-\n-    @Override\n-    public String botName() {\n-        return name();\n-    }\n-\n-    @Override\n-    public String workItemName() {\n-        return name();\n-    }\n-\n-    @Override\n-    public List<WorkItem> getPeriodicItems() {\n-        return List.of(this);\n-    }\n-\n-    @Override\n-    public String name() {\n-        return NAME;\n-    }\n-\n-    public IssueProject getIssueProject() {\n-        return issueProject;\n-    }\n-}\n","filename":"bots\/jep\/src\/main\/java\/org\/openjdk\/skara\/bots\/jep\/JEPBot.java","additions":0,"deletions":157,"binary":false,"changes":157,"status":"deleted"},{"patch":"@@ -1,55 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package org.openjdk.skara.bots.jep;\n-\n-import org.openjdk.skara.bot.Bot;\n-import org.openjdk.skara.bot.BotConfiguration;\n-import org.openjdk.skara.bot.BotFactory;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.logging.Logger;\n-\n-public class JEPBotFactory implements BotFactory {\n-    private final Logger log = Logger.getLogger(\"org.openjdk.skara.bots\");;\n-    static final String NAME = \"jep\";\n-\n-    @Override\n-    public String name() {\n-        return NAME;\n-    }\n-\n-    @Override\n-    public List<Bot> create(BotConfiguration configuration) {\n-        var ret = new ArrayList<Bot>();\n-        var specific = configuration.specific();\n-        for (var project : specific.get(\"projects\").asArray()) {\n-            var repo = configuration.repository(project.get(\"repository\").asString());\n-            var issueProject = configuration.issueProject(project.get(\"issues\").asString());\n-            log.info(\"Setting up jep bot for \" + repo.name());\n-            ret.add(new JEPBot(repo, issueProject));\n-        }\n-        return ret;\n-    }\n-}\n","filename":"bots\/jep\/src\/main\/java\/org\/openjdk\/skara\/bots\/jep\/JEPBotFactory.java","additions":0,"deletions":55,"binary":false,"changes":55,"status":"deleted"},{"patch":"@@ -1,70 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.skara.bots.jep;\n-\n-import org.junit.jupiter.api.Test;\n-import org.openjdk.skara.json.JWCC;\n-import org.openjdk.skara.test.TestBotFactory;\n-import org.openjdk.skara.test.TestHostedRepository;\n-import org.openjdk.skara.test.TestIssueProject;\n-\n-import static org.junit.jupiter.api.Assertions.*;\n-\n-class JEPBotFactoryTest {\n-    @Test\n-    public void testCreate() {\n-        String jsonString = \"\"\"\n-                {\n-                  \"projects\": [\n-                    {\n-                      \"repository\": \"repo1\",\n-                      \"issues\": \"test_bugs\/TEST\"\n-                    },\n-                    {\n-                      \"repository\": \"repo2\",\n-                      \"issues\": \"test_bugs\/TEST\"\n-                    }\n-                  ]\n-                }\n-                \"\"\";\n-        var jsonConfig = JWCC.parse(jsonString).asObject();\n-\n-        var testBotFactory = TestBotFactory.newBuilder()\n-                .addHostedRepository(\"repo1\", new TestHostedRepository(\"repo1\"))\n-                .addHostedRepository(\"repo2\", new TestHostedRepository(\"repo2\"))\n-                .addIssueProject(\"test_bugs\/TEST\", new TestIssueProject(null, \"TEST\"))\n-                .build();\n-\n-        var bots = testBotFactory.createBots(JEPBotFactory.NAME, jsonConfig);\n-        \/\/ A JEPBot for every configured project\n-        assertEquals(2, bots.size());\n-\n-        JEPBot jepBot1 = (JEPBot) bots.get(0);\n-        assertEquals(\"JEPBot@repo1\", jepBot1.toString());\n-        assertEquals(\"TEST\", jepBot1.getIssueProject().name());\n-\n-        JEPBot jepBot2 = (JEPBot) bots.get(1);\n-        assertEquals(\"JEPBot@repo2\", jepBot2.toString());\n-        assertEquals(\"TEST\", jepBot2.getIssueProject().name());\n-    }\n-}\n\\ No newline at end of file\n","filename":"bots\/jep\/src\/test\/java\/org\/openjdk\/skara\/bots\/jep\/JEPBotFactoryTest.java","additions":0,"deletions":70,"binary":false,"changes":70,"status":"deleted"},{"patch":"@@ -1,250 +0,0 @@\n-\/*\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.skara.bots.jep;\n-\n-import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.TestInfo;\n-import org.openjdk.skara.issuetracker.IssueTrackerIssue;\n-import org.openjdk.skara.json.JSON;\n-import org.openjdk.skara.test.CheckableRepository;\n-import org.openjdk.skara.test.HostCredentials;\n-import org.openjdk.skara.test.TemporaryDirectory;\n-import org.openjdk.skara.test.TestBotRunner;\n-\n-import java.io.IOException;\n-import java.nio.file.Path;\n-import java.util.*;\n-\n-import static org.junit.jupiter.api.Assertions.*;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n-import static org.openjdk.skara.issuetracker.jira.JiraProject.JEP_NUMBER;\n-import static org.openjdk.skara.bots.common.PullRequestConstants.*;\n-\n-public class JEPBotTests {\n-\n-    @Test\n-    void testJepIssueStatus(TestInfo testInfo) throws IOException {\n-        try (var credentials = new HostCredentials(testInfo);\n-             var tempFolder = new TemporaryDirectory()) {\n-            var repo = credentials.getHostedRepository();\n-            var issueProject = credentials.getIssueProject();\n-            var jepBot = new JEPBot(repo, issueProject);\n-\n-            \/\/ Populate the projects repository\n-            var localRepo = CheckableRepository.init(tempFolder.path(), repo.repositoryType(),\n-                    Path.of(\"appendable.txt\"), Set.of(\"issues\"), null);\n-            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n-            localRepo.push(masterHash, repo.authenticatedUrl(), \"master\", true);\n-\n-            var mainIssue = issueProject.createIssue(\"The main issue\", List.of(\"main\"), Map.of(\"issuetype\", JSON.of(\"Bug\")));\n-            List<IssueTrackerIssue> issueLists = new ArrayList<>();\n-            var statusList = List.of(\"Draft\", \"Submitted\", \"Candidate\", \"Proposed to Target\",\n-                    \"Proposed to Drop\", \"Closed\", \"Targeted\", \"Integrated\", \"Completed\");\n-            for (int i = 1; i <= 9; i++) {\n-                issueLists.add(issueProject.createIssue(statusList.get(i - 1) + \" jep\", List.of(\"Jep body\"), Map.of(\"issuetype\", JSON.of(\"JEP\"),\n-                        \"status\", JSON.object().put(\"name\", statusList.get(i - 1)), JEP_NUMBER, JSON.of(String.valueOf(i)))));\n-            }\n-            issueLists.add(issueProject.createIssue(\"The jep issue\", List.of(\"Jep body\"),\n-                    Map.of(\"issuetype\", JSON.of(\"JEP\"), \"status\", JSON.object().put(\"name\", \"Closed\"),\n-                            \"resolution\", JSON.object().put(\"name\", \"Delivered\"), JEP_NUMBER, JSON.of(\"10\"))));\n-\n-            \/\/ Make a change with a corresponding PR\n-            var editHash = CheckableRepository.appendAndCommit(localRepo);\n-            localRepo.push(editHash, repo.authenticatedUrl(), \"edit\", true);\n-            var pr = credentials.createPullRequest(repo, \"master\", \"edit\", mainIssue.id() + \": \" + mainIssue.title());\n-\n-            \/\/ PR should not have the `jep` label at first\n-            TestBotRunner.runPeriodicItems(jepBot);\n-            assertFalse(pr.store().labelNames().contains(JEP_LABEL));\n-\n-            \/\/ Test draft\/submitted\/candidate\/proposedToTarget\/proposedToDrop\/closedWithoutDelivered JEPs\n-            for (int i = 1; i <= 6; i++) {\n-                pr.addComment(String.format(JEP_MARKER, i, issueLists.get(i - 1).id(), issueLists.get(i - 1).title()));\n-                pr.removeLabel(JEP_LABEL);\n-                TestBotRunner.runPeriodicItems(jepBot);\n-                assertTrue(pr.store().labelNames().contains(JEP_LABEL));\n-            }\n-\n-            \/\/ PR should have the `jep` label\n-            TestBotRunner.runPeriodicItems(jepBot);\n-            assertTrue(pr.store().labelNames().contains(JEP_LABEL));\n-            \/\/ Remove the `jep` label for the following test\n-            pr.removeLabel(JEP_LABEL);\n-\n-            \/\/ Test targeted\/integrated\/completed\/closedWithDelivered JEPs\n-            for (int i = 7; i <= 10; i++) {\n-                pr.addComment(String.format(JEP_MARKER, i, issueLists.get(i - 1).id(), issueLists.get(i - 1).title()));\n-                pr.addLabel(JEP_LABEL);\n-                TestBotRunner.runPeriodicItems(jepBot);\n-                assertFalse(pr.store().labelNames().contains(JEP_LABEL));\n-            }\n-        }\n-    }\n-\n-    @Test\n-    void testJepCommentNotExist(TestInfo testInfo) throws IOException {\n-        try (var credentials = new HostCredentials(testInfo);\n-             var tempFolder = new TemporaryDirectory()) {\n-            var repo = credentials.getHostedRepository();\n-            var issueProject = credentials.getIssueProject();\n-            var jepBot = new JEPBot(repo, issueProject);\n-\n-            \/\/ Populate the projects repository\n-            var localRepo = CheckableRepository.init(tempFolder.path(), repo.repositoryType(),\n-                    Path.of(\"appendable.txt\"), Set.of(\"issues\"), null);\n-            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n-            localRepo.push(masterHash, repo.authenticatedUrl(), \"master\", true);\n-\n-            var mainIssue = issueProject.createIssue(\"The main issue\", List.of(\"main\"), Map.of(\"issuetype\", JSON.of(\"Bug\")));\n-            issueProject.createIssue(\"Demo jep\", List.of(\"Jep body\"), Map.of(\"issuetype\", JSON.of(\"JEP\"),\n-                        \"status\", JSON.object().put(\"name\", \"Targeted\"), JEP_NUMBER, JSON.of(\"1\")));\n-\n-            \/\/ Make a change with a corresponding PR\n-            var editHash = CheckableRepository.appendAndCommit(localRepo);\n-            localRepo.push(editHash, repo.authenticatedUrl(), \"edit\", true);\n-            var pr = credentials.createPullRequest(repo, \"master\", \"edit\", mainIssue.id() + \": \" + mainIssue.title());\n-\n-            \/\/ PR should not have the `jep` label at first\n-            TestBotRunner.runPeriodicItems(jepBot);\n-            assertFalse(pr.store().labelNames().contains(JEP_LABEL));\n-\n-            \/\/ Add the `jep` label and don't add the jep comment\n-            pr.addLabel(JEP_LABEL);\n-            assertTrue(pr.store().labelNames().contains(JEP_LABEL));\n-\n-            TestBotRunner.runPeriodicItems(jepBot);\n-            assertFalse(pr.store().labelNames().contains(JEP_LABEL));\n-        }\n-    }\n-\n-    @Test\n-    void testJepUnneeded(TestInfo testInfo) throws IOException {\n-        try (var credentials = new HostCredentials(testInfo);\n-             var tempFolder = new TemporaryDirectory()) {\n-            var repo = credentials.getHostedRepository();\n-            var issueProject = credentials.getIssueProject();\n-            var jepBot = new JEPBot(repo, issueProject);\n-\n-            \/\/ Populate the projects repository\n-            var localRepo = CheckableRepository.init(tempFolder.path(), repo.repositoryType(),\n-                    Path.of(\"appendable.txt\"), Set.of(\"issues\"), null);\n-            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n-            localRepo.push(masterHash, repo.authenticatedUrl(), \"master\", true);\n-\n-            var mainIssue = issueProject.createIssue(\"The main issue\", List.of(\"main\"), Map.of(\"issuetype\", JSON.of(\"Bug\")));\n-            issueProject.createIssue(\"Demo jep\", List.of(\"Jep body\"), Map.of(\"issuetype\", JSON.of(\"JEP\"),\n-                    \"status\", JSON.object().put(\"name\", \"Targeted\"), JEP_NUMBER, JSON.of(\"1\")));\n-\n-            \/\/ Make a change with a corresponding PR\n-            var editHash = CheckableRepository.appendAndCommit(localRepo);\n-            localRepo.push(editHash, repo.authenticatedUrl(), \"edit\", true);\n-            var pr = credentials.createPullRequest(repo, \"master\", \"edit\", mainIssue.id() + \": \" + mainIssue.title());\n-\n-            \/\/ PR should not have the `jep` label at first\n-            TestBotRunner.runPeriodicItems(jepBot);\n-            assertFalse(pr.store().labelNames().contains(JEP_LABEL));\n-\n-            \/\/ Add the `jep` label and add the jep unneeded comment\n-            pr.addComment(String.format(JEP_MARKER, \"unneeded\", \"unneeded\", \"unneeded\"));\n-            pr.addLabel(JEP_LABEL);\n-            assertTrue(pr.store().labelNames().contains(JEP_LABEL));\n-\n-            TestBotRunner.runPeriodicItems(jepBot);\n-            assertFalse(pr.store().labelNames().contains(JEP_LABEL));\n-        }\n-    }\n-\n-    @Test\n-    void testIssueNotExist(TestInfo testInfo) throws IOException {\n-        try (var credentials = new HostCredentials(testInfo);\n-             var tempFolder = new TemporaryDirectory()) {\n-            var repo = credentials.getHostedRepository();\n-            var issueProject = credentials.getIssueProject();\n-            var jepBot = new JEPBot(repo, issueProject);\n-\n-            \/\/ Populate the projects repository\n-            var localRepo = CheckableRepository.init(tempFolder.path(), repo.repositoryType(),\n-                    Path.of(\"appendable.txt\"), Set.of(\"issues\"), null);\n-            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n-            localRepo.push(masterHash, repo.authenticatedUrl(), \"master\", true);\n-\n-            var mainIssue = issueProject.createIssue(\"The main issue\", List.of(\"main\"), Map.of(\"issuetype\", JSON.of(\"Bug\")));\n-            issueProject.createIssue(\"Demo jep\", List.of(\"Jep body\"), Map.of(\"issuetype\", JSON.of(\"JEP\"),\n-                    \"status\", JSON.object().put(\"name\", \"Targeted\"), JEP_NUMBER, JSON.of(\"1\")));\n-\n-            \/\/ Make a change with a corresponding PR\n-            var editHash = CheckableRepository.appendAndCommit(localRepo);\n-            localRepo.push(editHash, repo.authenticatedUrl(), \"edit\", true);\n-            var pr = credentials.createPullRequest(repo, \"master\", \"edit\", mainIssue.id() + \": \" + mainIssue.title());\n-\n-            \/\/ PR should not have the `jep` label at first\n-            TestBotRunner.runPeriodicItems(jepBot);\n-            assertFalse(pr.store().labelNames().contains(JEP_LABEL));\n-\n-            \/\/ Add the `jep` label and add the non-existing jep comment\n-            pr.addComment(String.format(JEP_MARKER, \"100\", \"TEST-100\", \"Demo jep\"));\n-            pr.addLabel(JEP_LABEL);\n-            assertTrue(pr.store().labelNames().contains(JEP_LABEL));\n-\n-            TestBotRunner.runPeriodicItems(jepBot);\n-            assertTrue(pr.store().labelNames().contains(JEP_LABEL));\n-        }\n-    }\n-\n-    @Test\n-    void testErrorIssueType(TestInfo testInfo) throws IOException {\n-        try (var credentials = new HostCredentials(testInfo);\n-             var tempFolder = new TemporaryDirectory()) {\n-            var repo = credentials.getHostedRepository();\n-            var issueProject = credentials.getIssueProject();\n-            var jepBot = new JEPBot(repo, issueProject);\n-\n-            \/\/ Populate the projects repository\n-            var localRepo = CheckableRepository.init(tempFolder.path(), repo.repositoryType(),\n-                    Path.of(\"appendable.txt\"), Set.of(\"issues\"), null);\n-            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n-            localRepo.push(masterHash, repo.authenticatedUrl(), \"master\", true);\n-\n-            var mainIssue = issueProject.createIssue(\"The main issue\", List.of(\"main\"), Map.of(\"issuetype\", JSON.of(\"Bug\")));\n-            issueProject.createIssue(\"Demo jep\", List.of(\"Jep body\"), Map.of(\"issuetype\", JSON.of(\"Enhancement\"),\n-                    \"status\", JSON.object().put(\"name\", \"Targeted\"), JEP_NUMBER, JSON.of(\"1\")));\n-\n-            \/\/ Make a change with a corresponding PR\n-            var editHash = CheckableRepository.appendAndCommit(localRepo);\n-            localRepo.push(editHash, repo.authenticatedUrl(), \"edit\", true);\n-            var pr = credentials.createPullRequest(repo, \"master\", \"edit\", mainIssue.id() + \": \" + mainIssue.title());\n-\n-            \/\/ PR should not have the `jep` label at first\n-            TestBotRunner.runPeriodicItems(jepBot);\n-            assertFalse(pr.store().labelNames().contains(JEP_LABEL));\n-\n-            \/\/ Add the `jep` label and add the wrong type issue comment\n-            pr.addComment(String.format(JEP_MARKER, \"1\", \"TEST-2\", \"Demo jep\"));\n-            pr.addLabel(JEP_LABEL);\n-            assertTrue(pr.store().labelNames().contains(JEP_LABEL));\n-\n-            TestBotRunner.runPeriodicItems(jepBot);\n-            assertTrue(pr.store().labelNames().contains(JEP_LABEL));\n-        }\n-    }\n-}\n","filename":"bots\/jep\/src\/test\/java\/org\/openjdk\/skara\/bots\/jep\/JEPBotTests.java","additions":0,"deletions":250,"binary":false,"changes":250,"status":"deleted"},{"patch":"@@ -126,1 +126,5 @@\n-    private List<Issue> issues() {\n+    \/**\n+     * Builds a map of all associated regular issues, from Issue to IssueTrackerIssue\n+     * if found. The map is ordered to support consistent presentation order.\n+     *\/\n+    private Map<Issue, Optional<IssueTrackerIssue>> regularIssuesMap() {\n@@ -132,10 +136,17 @@\n-            return issues;\n-        }\n-        return List.of();\n-    }\n-\n-    private List<Issue> issuesWithCSRAndJEP(List<Issue> issues, List<IssueTrackerIssue> csrIssueTrackerIssues) {\n-        if (!issues.isEmpty()) {\n-            issues.addAll(getCsrIssues(csrIssueTrackerIssues));\n-            getJepIssue().ifPresent(issues::add);\n-            return issues;\n+            var issueProject = issueProject();\n+            var map = new LinkedHashMap<Issue, Optional<IssueTrackerIssue>>();\n+            if (issueProject != null) {\n+                issues.forEach(i -> {\n+                    var issueTrackerIssue = issueProject.issue(i.shortId());\n+                    if (issueTrackerIssue.isEmpty()) {\n+                        log.info(\"Failed to retrieve issue \" + i.id());\n+                        setExpiration(Duration.ofMinutes(10));\n+                    }\n+                    map.put(i, issueTrackerIssue);\n+                });\n+            } else {\n+                issues.forEach(i -> {\n+                    map.put(i, Optional.empty());\n+                });\n+            }\n+            return map;\n@@ -143,1 +154,1 @@\n-        return List.of();\n+        return Map.of();\n@@ -147,2 +158,1 @@\n-     * Get the csr issue map, key is the main issue and value is the csr issue.\n-     * Note: The type of csr issue is 'org.openjdk.skara.issuetracker.Issue'.\n+     * Constructs a map from main issue ID to CSR issue.\n@@ -150,6 +160,2 @@\n-    private Map<Issue, IssueTrackerIssue> getCsrIssueTrackerIssues(List<Issue> issues, JdkVersion version) {\n-        var issueProject = issueProject();\n-        var csrIssueMap = new HashMap<Issue, IssueTrackerIssue>();\n-        if (issueProject == null) {\n-            return Map.of();\n-        }\n+    private Map<String, IssueTrackerIssue> issueToCsrMap(Map<Issue, Optional<IssueTrackerIssue>> regularIssuesMap, JdkVersion version) {\n+        var csrIssueMap = new HashMap<String, IssueTrackerIssue>();\n@@ -159,4 +165,4 @@\n-        for (var issue : issues) {\n-            var jbsIssueOpt = issueProject.issue(issue.shortId());\n-            if (jbsIssueOpt.isEmpty()) {\n-                continue;\n+        for (var issue : regularIssuesMap.values()) {\n+            if (issue.isPresent()) {\n+                var csrIssue = Backports.findCsr(issue.get(), version);\n+                csrIssue.ifPresent(csr -> csrIssueMap.put(issue.get().id(), csr));\n@@ -164,2 +170,0 @@\n-            var csrOptional = Backports.findCsr(jbsIssueOpt.get(), version);\n-            csrOptional.ifPresent(csr -> csrIssueMap.put(issue, csr));\n@@ -171,1 +175,1 @@\n-     * Get the csr issue. Note: this `Issue` is not the issue in module `issuetracker`.\n+     * Gets the JEP issue from the IssueProject if there is one\n@@ -173,13 +177,5 @@\n-    private List<Issue> getCsrIssues(List<IssueTrackerIssue> csrIssueTrackerIssues) {\n-\n-        return csrIssueTrackerIssues.stream()\n-                .map(perIssue -> Issue.fromStringRelaxed(perIssue.id() + \": \" + perIssue.title()))\n-                .filter(Optional::isPresent)\n-                .map(Optional::get)\n-                .toList();\n-    }\n-\n-    private Optional<Issue> getJepIssue() {\n-        var comment = getJepComment();\n-        if (comment.isPresent()) {\n-            return Issue.fromStringRelaxed(comment.get().group(2) + \": \" + comment.get().group(3));\n+    private Optional<IssueTrackerIssue> jepIssue() {\n+        var issueProject = issueProject();\n+        if (issueProject != null) {\n+            var comment = findJepComment();\n+            return comment.flatMap(c -> issueProject.issue(c.group(2)));\n@@ -190,2 +186,2 @@\n-    private Optional<Matcher> getJepComment() {\n-        var jepComment = pr.comments().stream()\n+    private Optional<Matcher> findJepComment() {\n+        var jepComment = comments.stream()\n@@ -196,9 +192,6 @@\n-                .reduce((first, second) -> second)\n-                .orElse(null);\n-        if (jepComment == null) {\n-            return Optional.empty();\n-        }\n-\n-        var issueId = jepComment.group(2);\n-        if (\"unneeded\".equals(issueId)) {\n-            return  Optional.empty();\n+                .reduce((first, second) -> second);\n+        if (jepComment.isPresent()) {\n+            var issueId = jepComment.get().group(2);\n+            if (\"unneeded\".equals(issueId)) {\n+                return Optional.empty();\n+            }\n@@ -206,2 +199,1 @@\n-\n-        return Optional.of(jepComment);\n+        return jepComment;\n@@ -258,4 +250,4 @@\n-            var resolution = csr.properties().get(\"resolution\");\n-            if (resolution != null && !resolution.isNull()) {\n-                var name = resolution.get(\"name\");\n-                if (name != null && !name.isNull() && name.asString().equals(\"Withdrawn\")) {\n+            var resolution = csr.resolution();\n+            if (resolution.isPresent()) {\n+                var name = resolution.get();\n+                if (name.equals(\"Withdrawn\")) {\n@@ -274,1 +266,2 @@\n-    private Map<String, Boolean> botSpecificProgresses(List<IssueTrackerIssue> csrIssueTrackerIssues, JdkVersion version) {\n+    private Map<String, Boolean> botSpecificProgresses(List<IssueTrackerIssue> csrIssueTrackerIssues,\n+            IssueTrackerIssue jepIssue, JdkVersion version) {\n@@ -291,7 +284,2 @@\n-            var resolution = csrIssue.properties().get(\"resolution\");\n-            if (resolution == null || resolution.isNull()) {\n-                ret.put(generateCSRProgressMessage(csrIssue), false);\n-                continue;\n-            }\n-            var name = resolution.get(\"name\");\n-            if (name == null || name.isNull()) {\n+            var resolution = csrIssue.resolution();\n+            if (resolution.isEmpty()) {\n@@ -301,1 +289,1 @@\n-            if (!name.asString().equals(\"Approved\")) {\n+            if (!resolution.get().equals(\"Approved\")) {\n@@ -308,7 +296,14 @@\n-\n-        if (pr.labelNames().contains(\"jep\")) {\n-            ret.put(\"Change requires a JEP request to be targeted\", false);\n-        } else {\n-            var comment = getJepComment();\n-            if (comment.isPresent()) {\n-                ret.put(\"Change requires a JEP request to be targeted\", true);\n+        if (jepIssue != null) {\n+            var jepIssueStatus = jepIssue.status();\n+            var jepResolution = jepIssue.resolution();\n+            var jepHasTargeted = \"Targeted\".equals(jepIssueStatus) ||\n+                    \"Integrated\".equals(jepIssueStatus) ||\n+                    \"Completed\".equals(jepIssueStatus) ||\n+                    (\"Closed\".equals(jepIssueStatus) && jepResolution.isPresent() && \"Delivered\".equals(jepResolution.get()));\n+            ret.put(\"Change requires a JEP request to be targeted\", jepHasTargeted);\n+            if (jepHasTargeted && newLabels.contains(\"jep\")) {\n+                log.info(\"JEP issue \" + jepIssue.id() + \" found in state \" + jepIssueStatus + \", removing JEP label from \" + describe(pr));\n+                newLabels.remove(\"jep\");\n+            } else if (!jepHasTargeted && !newLabels.contains(\"jep\")) {\n+                log.info(\"JEP issue \" + jepIssue.id() + \" found in state \" + jepIssueStatus + \", adding JEP label to \" + describe(pr));\n+                newLabels.add(\"jep\");\n@@ -331,1 +326,1 @@\n-    private List<String> botSpecificIntegrationBlockers(List<Issue> issues) {\n+    private List<String> botSpecificIntegrationBlockers(Map<Issue, Optional<IssueTrackerIssue>> issues) {\n@@ -336,1 +331,3 @@\n-            for (var currentIssue : issues) {\n+            for (var issueEntry : issues.entrySet()) {\n+                var issue = issueEntry.getKey();\n+                var issueTrackerIssue = issueEntry.getValue();\n@@ -338,4 +335,3 @@\n-                    var iss = issueProject.issue(currentIssue.shortId());\n-                    if (iss.isPresent()) {\n-                        if (!relaxedEquals(iss.get().title(), currentIssue.description())) {\n-                            var issueString = \"[\" + iss.get().id() + \"](\" + iss.get().webUrl() + \")\";\n+                    if (issueTrackerIssue.isPresent()) {\n+                        if (!relaxedEquals(issueTrackerIssue.get().title(), issue.description())) {\n+                            var issueString = \"[\" + issueTrackerIssue.get().id() + \"](\" + issueTrackerIssue.get().webUrl() + \")\";\n@@ -346,1 +342,1 @@\n-                        var properties = iss.get().properties();\n+                        var properties = issueTrackerIssue.get().properties();\n@@ -348,1 +344,1 @@\n-                            var issueString = \"[\" + iss.get().id() + \"](\" + iss.get().webUrl() + \")\";\n+                            var issueString = \"[\" + issueTrackerIssue.get().id() + \"](\" + issueTrackerIssue.get().webUrl() + \")\";\n@@ -359,1 +355,1 @@\n-                        ret.add(\"Failed to retrieve information on issue `\" + currentIssue.id() +\n+                        ret.add(\"Failed to retrieve information on issue `\" + issue.id() +\n@@ -364,1 +360,1 @@\n-                    ret.add(\"Failed to retrieve information on issue `\" + currentIssue.id() +\n+                    ret.add(\"Failed to retrieve information on issue `\" + issue.id() +\n@@ -630,2 +626,4 @@\n-                                    List<String> additionalErrors, Map<String, Boolean> additionalProgresses,\n-                                    List<String> integrationBlockers, boolean reviewNeeded, List<Issue> allIssues) {\n+            List<String> additionalErrors, Map<String, Boolean> additionalProgresses,\n+            List<String> integrationBlockers, boolean reviewNeeded,\n+            Map<Issue, Optional<IssueTrackerIssue>> regularIssuesMap,\n+            IssueTrackerIssue jepIssue, Collection<IssueTrackerIssue> csrIssues) {\n@@ -661,1 +659,1 @@\n-        if (issueProject != null && !allIssues.isEmpty()) {\n+        if (issueProject != null && !regularIssuesMap.isEmpty()) {\n@@ -663,1 +661,1 @@\n-            if (allIssues.size() > 1) {\n+            if (regularIssuesMap.size() + csrIssues.size() > 1 || jepIssue != null) {\n@@ -667,1 +665,2 @@\n-            for (var currentIssue : allIssues) {\n+            for (var issueEntry : regularIssuesMap.entrySet()) {\n+                var issue = issueEntry.getKey();\n@@ -669,1 +668,1 @@\n-                if (currentIssue.project().isPresent() && !currentIssue.project().get().equals(issueProject.name())) {\n+                if (issue.project().isPresent() && !issue.project().get().equals(issueProject.name())) {\n@@ -671,1 +670,1 @@\n-                    progressBody.append(currentIssue.id());\n+                    progressBody.append(issue.id());\n@@ -676,28 +675,12 @@\n-                    try {\n-                        var iss = issueProject.issue(currentIssue.shortId());\n-                        if (iss.isPresent()) {\n-                            progressBody.append(\"[\");\n-                            progressBody.append(iss.get().id());\n-                            progressBody.append(\"](\");\n-                            progressBody.append(iss.get().webUrl());\n-                            progressBody.append(\"): \");\n-                            progressBody.append(BotUtils.escape(iss.get().title()));\n-                            var issueType = iss.get().properties().get(\"issuetype\");\n-                            if (issueType != null) {\n-                                if (\"CSR\".equals(issueType.asString())) {\n-                                    progressBody.append(\" (**CSR**)\");\n-                                    if (isWithdrawnCSR(iss.get())) {\n-                                        progressBody.append(\" (Withdrawn)\");\n-                                    }\n-                                } else if (\"JEP\".equals(issueType.asString())) {\n-                                    progressBody.append(\" (**JEP**)\");\n-                                } else {\n-                                    progressBody.append(\" (**\" + issueType.asString() + \"**\");\n-                                    var issuePriority = iss.get().properties().get(\"priority\");\n-                                    if (issuePriority == null) {\n-                                        progressBody.append(\")\");\n-                                    } else {\n-                                        progressBody.append(\" - P\" + issuePriority.asString() + \")\");\n-                                    }\n-                                    currentIssues.add(iss.get().id());\n-                                }\n+                    var issueTrackerIssue = issueEntry.getValue();\n+                    if (issueTrackerIssue.isPresent()) {\n+                        currentIssues.add(issueTrackerIssue.get().id());\n+                        formatIssue(progressBody, issueTrackerIssue.get());\n+                        var issueType = issueTrackerIssue.get().properties().get(\"issuetype\");\n+                        if (issueType != null) {\n+                            progressBody.append(\" (**\").append(issueType.asString()).append(\"**\");\n+                            var issuePriority = issueTrackerIssue.get().properties().get(\"priority\");\n+                            if (issuePriority == null) {\n+                                progressBody.append(\")\");\n+                            } else {\n+                                progressBody.append(\" - P\").append(issuePriority.asString()).append(\")\");\n@@ -705,15 +688,15 @@\n-                            if (!relaxedEquals(iss.get().title(), currentIssue.description())) {\n-                                progressBody.append(\" ⚠️ Title mismatch between PR and JBS.\");\n-                                setExpiration(Duration.ofMinutes(10));\n-                            }\n-                            if (!iss.get().isOpen()) {\n-                                if (!pr.labelNames().contains(\"backport\") &&\n-                                        (issueType == null || !List.of(\"CSR\", \"JEP\").contains(issueType.asString()))) {\n-                                    if (iss.get().isFixed()) {\n-                                        progressBody.append(\" ⚠️ Issue is already resolved. \" +\n-                                                \"Consider making this a \\\"backport pull request\\\" by setting \" +\n-                                                \"the PR title to `Backport <hash>` with the hash of the original commit. \" +\n-                                                \"See [Backports](https:\/\/wiki.openjdk.org\/display\/SKARA\/Backports).\");\n-                                    } else {\n-                                        progressBody.append(\" ⚠️ Issue is not open.\");\n-                                    }\n+                        }\n+                        if (!relaxedEquals(issueTrackerIssue.get().title(), issue.description())) {\n+                            progressBody.append(\" ⚠️ Title mismatch between PR and JBS.\");\n+                            setExpiration(Duration.ofMinutes(10));\n+                        }\n+                        if (!issueTrackerIssue.get().isOpen()) {\n+                            if (!pr.labelNames().contains(\"backport\") &&\n+                                    (issueType == null || !List.of(\"CSR\", \"JEP\").contains(issueType.asString()))) {\n+                                if (issueTrackerIssue.get().isFixed()) {\n+                                    progressBody.append(\" ⚠️ Issue is already resolved. \" +\n+                                            \"Consider making this a \\\"backport pull request\\\" by setting \" +\n+                                            \"the PR title to `Backport <hash>` with the hash of the original commit. \" +\n+                                            \"See [Backports](https:\/\/wiki.openjdk.org\/display\/SKARA\/Backports).\");\n+                                } else {\n+                                    progressBody.append(\" ⚠️ Issue is not open.\");\n@@ -722,5 +705,0 @@\n-                        } else {\n-                            progressBody.append(\"⚠️ Failed to retrieve information on issue `\");\n-                            progressBody.append(currentIssue.id());\n-                            progressBody.append(\"`.\");\n-                            setExpiration(Duration.ofMinutes(10));\n@@ -728,3 +706,3 @@\n-                    } catch (RuntimeException e) {\n-                        progressBody.append(\"⚠️ Temporary failure when trying to retrieve information on issue `\");\n-                        progressBody.append(currentIssue.id());\n+                    } else {\n+                        progressBody.append(\"⚠️ Failed to retrieve information on issue `\");\n+                        progressBody.append(issue.id());\n@@ -732,2 +710,0 @@\n-                        progressBody.append(TEMPORARY_ISSUE_FAILURE_MARKER);\n-                        setExpiration(Duration.ofMinutes(30));\n@@ -738,0 +714,14 @@\n+            if (jepIssue != null) {\n+                currentIssues.add(jepIssue.id());\n+                progressBody.append(\" * \");\n+                formatIssue(progressBody, jepIssue);\n+                progressBody.append(\" (**JEP**)\");\n+            }\n+            for (var csrIssue : csrIssues) {\n+                progressBody.append(\" * \");\n+                formatIssue(progressBody, csrIssue);\n+                progressBody.append(\" (**CSR**)\");\n+                if (isWithdrawnCSR(csrIssue)) {\n+                    progressBody.append(\" (Withdrawn)\");\n+                }\n+            }\n@@ -743,1 +733,1 @@\n-            var previousIssues = BotUtils.parseIssues(pr.body());\n+            var previousIssues = BotUtils.parseAllIssues(pr.body());\n@@ -781,0 +771,9 @@\n+    private static void formatIssue(StringBuilder progressBody, IssueTrackerIssue issueTrackerIssue) {\n+        progressBody.append(\"[\");\n+        progressBody.append(issueTrackerIssue.id());\n+        progressBody.append(\"](\");\n+        progressBody.append(issueTrackerIssue.webUrl());\n+        progressBody.append(\"): \");\n+        progressBody.append(BotUtils.escape(issueTrackerIssue.title()));\n+    }\n+\n@@ -863,8 +862,0 @@\n-    private String verdictToString(Review.Verdict verdict) {\n-        return switch (verdict) {\n-            case APPROVED -> \"changes are approved\";\n-            case DISAPPROVED -> \"more changes needed\";\n-            case NONE -> \"comment added\";\n-        };\n-    }\n-\n@@ -1192,1 +1183,1 @@\n-                                .map(e -> e.append(\" (in commit \" + hash.hex() + \")\"))\n+                                .map(e -> e.append(\" (in commit \").append(hash.hex()).append(\")\"))\n@@ -1258,3 +1249,4 @@\n-            var issues = issues();\n-            var csrIssueTrackerIssueMap = getCsrIssueTrackerIssues(issues, version);\n-            var csrIssueTrackerIssues = csrIssueTrackerIssueMap.values().stream().toList();\n+            var regularIssuesMap = regularIssuesMap();\n+            var jepIssue = jepIssue().orElse(null);\n+            var issueToCsrMap = issueToCsrMap(regularIssuesMap, version);\n+            var csrIssues = issueToCsrMap.values().stream().toList();\n@@ -1262,1 +1254,1 @@\n-                additionalProgresses = botSpecificProgresses(csrIssueTrackerIssues, version);\n+                additionalProgresses = botSpecificProgresses(csrIssues, jepIssue, version);\n@@ -1266,1 +1258,1 @@\n-            updateCSRLabel(issues, version, csrIssueTrackerIssueMap);\n+            updateCSRLabel(version, issueToCsrMap);\n@@ -1271,1 +1263,1 @@\n-            var integrationBlockers = botSpecificIntegrationBlockers(issues);\n+            var integrationBlockers = botSpecificIntegrationBlockers(regularIssuesMap);\n@@ -1280,1 +1272,2 @@\n-            var statusMessage = getStatusMessage(visitor, additionalErrors, additionalProgresses, integrationBlockers, reviewNeeded, issuesWithCSRAndJEP(issues, csrIssueTrackerIssues));\n+            var statusMessage = getStatusMessage(visitor, additionalErrors, additionalProgresses, integrationBlockers,\n+                    reviewNeeded, regularIssuesMap, jepIssue, issueToCsrMap.values());\n@@ -1381,2 +1374,2 @@\n-    private void updateCSRLabel(List<Issue> issues, JdkVersion version, Map<Issue, IssueTrackerIssue> csrIssueTrackerIssueMap) {\n-        if (issues.isEmpty()) {\n+    private void updateCSRLabel(JdkVersion version, Map<String, IssueTrackerIssue> csrIssueTrackerIssueMap) {\n+        if (csrIssueTrackerIssueMap.isEmpty()) {\n@@ -1391,1 +1384,0 @@\n-        boolean existingCSR = false;\n@@ -1400,16 +1392,3 @@\n-        for (var issue : issues) {\n-            var jbsIssueOpt = issueProject.issue(issue.shortId());\n-            if (jbsIssueOpt.isEmpty()) {\n-                \/\/ An issue could not be found, so the csr label cannot be removed\n-                notExistingUnresolvedCSR = false;\n-                var issueId = issue.project().isEmpty() ? (issueProject.name() + \"-\" + issue.id()) : issue.id();\n-                log.info(issueId + \" for \" + describe(pr) + \" not found\");\n-                continue;\n-            }\n-\n-            var csr = csrIssueTrackerIssueMap.get(issue);\n-            if (csr == null) {\n-                log.info(\"No CSR found for issue \" + jbsIssueOpt.get().id() + \" for \" + describe(pr) + \" with fixVersion \" + version.raw());\n-                continue;\n-            }\n-            existingCSR = true;\n+        for (var csrEntry : csrIssueTrackerIssueMap.entrySet()) {\n+            var mainIssueId = csrEntry.getKey();\n+            var csr = csrEntry.getValue();\n@@ -1417,1 +1396,1 @@\n-            log.info(\"Found CSR \" + csr.id() + \" for issue \" + jbsIssueOpt.get().id() + \" for \" + describe(pr));\n+            log.info(\"Found CSR \" + csr.id() + \" for issue \" + mainIssueId + \" for \" + describe(pr));\n@@ -1419,2 +1398,2 @@\n-            var resolution = csr.properties().get(\"resolution\");\n-            if (resolution == null || resolution.isNull()) {\n+            var resolutionOpt = csr.resolution();\n+            if (resolutionOpt.isEmpty()) {\n@@ -1431,11 +1410,1 @@\n-            var name = resolution.get(\"name\");\n-            if (name == null || name.isNull()) {\n-                notExistingUnresolvedCSR = false;\n-                if (!pr.labelNames().contains(CSR_LABEL)) {\n-                    log.info(\"CSR issue resolution name is null for csr issue \" + csr.id() + \" for \" + describe(pr) + \", adding the CSR label\");\n-                    newLabels.add(CSR_LABEL);\n-                } else {\n-                    log.info(\"CSR issue resolution name is null for csr issue \" + csr.id() + \" for \" + describe(pr) + \", not removing the CSR label\");\n-                }\n-                continue;\n-            }\n+            var resolution = resolutionOpt.get();\n@@ -1454,2 +1423,2 @@\n-            if (!name.asString().equals(\"Approved\")) {\n-                if (name.asString().equals(\"Withdrawn\")) {\n+            if (!resolution.equals(\"Approved\")) {\n+                if (resolution.equals(\"Withdrawn\")) {\n@@ -1473,1 +1442,1 @@\n-        if (notExistingUnresolvedCSR && existingCSR && (!isCSRNeeded(pr.comments()) || existingApprovedCSR) && pr.labelNames().contains(CSR_LABEL)) {\n+        if (notExistingUnresolvedCSR && (!isCSRNeeded(pr.comments()) || existingApprovedCSR) && pr.labelNames().contains(CSR_LABEL)) {\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":165,"deletions":196,"binary":false,"changes":361,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-import org.openjdk.skara.issuetracker.Issue;\n@@ -153,3 +152,3 @@\n-            var issueIds = BotUtils.parseIssues(prBody);\n-            var sortedIssueIds = issueIds.stream().sorted().toList();\n-            var issues = sortedIssueIds.stream()\n+            var issueIds = BotUtils.parseAllIssues(prBody);\n+            var issuesData = issueIds.stream()\n+                    .sorted()\n@@ -159,7 +158,12 @@\n-                    .toList();\n-            String ids = issues.stream().map(Issue::id).collect(Collectors.joining());\n-            String priorities = issues.stream()\n-                    .map(issue -> issue.properties().get(\"priority\") == null ? \"\" : issue.properties().get(\"priority\").asString())\n-                    .collect(Collectors.joining());\n-            String types = issues.stream()\n-                    .map(issue -> issue.properties().get(\"issueType\") == null ? \"\" : issue.properties().get(\"issueType\").asString())\n+                    .map(issue -> {\n+                        var issueData = new StringBuilder();\n+                        issueData.append(issue.id());\n+                        issueData.append(issue.status());\n+                        issue.resolution().ifPresent(issueData::append);\n+                        var properties = issue.properties();\n+                        if (properties != null) {\n+                            issueData.append(properties.get(\"priority\").asString());\n+                            issueData.append(properties.get(\"issuetype\").asString());\n+                        }\n+                        return issueData;\n+                    })\n@@ -169,3 +173,1 @@\n-            digest.update(ids.strip().getBytes(StandardCharsets.UTF_8));\n-            digest.update(priorities.strip().getBytes(StandardCharsets.UTF_8));\n-            digest.update(types.strip().getBytes(StandardCharsets.UTF_8));\n+            digest.update(issuesData.getBytes(StandardCharsets.UTF_8));\n@@ -328,1 +330,1 @@\n-            var issueIds = BotUtils.parseIssues(pr.body());\n+            var issueIds = BotUtils.parseAllIssues(pr.body());\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckWorkItem.java","additions":17,"deletions":15,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-public class IssueBot implements Bot {\n+class IssueBot implements Bot {\n@@ -49,1 +49,1 @@\n-    public IssueBot(IssueProject issueProject, List<HostedRepository> repositories, Map<String, PullRequestBot> pullRequestBotMap,\n+    IssueBot(IssueProject issueProject, List<HostedRepository> repositories, Map<String, PullRequestBot> pullRequestBotMap,\n@@ -68,1 +68,1 @@\n-                            return issueType != null && !\"CSR\".equals(issueType.asString()) && !\"JEP\".equals(issueType.asString());\n+                            return issueType != null && !\"CSR\".equals(issueType.asString());\n@@ -83,1 +83,1 @@\n-        log.info(\"Found \" + issues.size() + \" updated issues(exclude CSR and JEP issues)\");\n+        log.info(\"Found \" + issues.size() + \" updated issues(exclude CSR issues)\");\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/IssueBot.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -132,7 +132,2 @@\n-        var issueStatus = jbsIssue.properties().get(\"status\").get(\"name\").asString();\n-        var resolution = jbsIssue.properties().get(\"resolution\");\n-        String resolutionName = \"\";\n-        if (resolution != null && !resolution.isNull() &&\n-                resolution.get(\"name\") != null && !resolution.get(\"name\").isNull()) {\n-            resolutionName = resolution.get(\"name\").asString();\n-        }\n+        var issueStatus = jbsIssue.status();\n+        var resolution = jbsIssue.resolution();\n@@ -144,1 +139,1 @@\n-            \"Completed\".equals(issueStatus) || (\"Closed\".equals(issueStatus) && \"Delivered\".equals(resolutionName))) {\n+            \"Completed\".equals(issueStatus) || (\"Closed\".equals(issueStatus) && resolution.isPresent() && \"Delivered\".equals(resolution.get()))) {\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/JEPCommand.java","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -300,1 +300,1 @@\n-            var csr = issues.createIssue(\"This is an CSR with null resolution\", List.of(),\n+            var csr = issues.createIssue(\"This is a CSR with null resolution\", List.of(),\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CSRBotTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1136,1 +1136,1 @@\n-            var checkBot = PullRequestBot.newBuilder()\n+            var prBot = PullRequestBot.newBuilder()\n@@ -1143,0 +1143,3 @@\n+            HashMap<String, PullRequestBot> pullRequestBotMap = new HashMap<>();\n+            pullRequestBotMap.put(bot.name(), prBot);\n+            var issueBot = new IssueBot(issueProject, List.of(bot), pullRequestBotMap, issuePRMap);\n@@ -1160,1 +1163,1 @@\n-            TestBotRunner.runPeriodicItems(checkBot);\n+            TestBotRunner.runPeriodicItems(prBot);\n@@ -1165,0 +1168,4 @@\n+            assertFalse(pr.store().labelNames().contains(\"jep\"));\n+\n+            \/\/ Run IssueBot once to initialize state for updated issues queries\n+            TestBotRunner.runPeriodicItems(issueBot);\n@@ -1170,1 +1177,1 @@\n-            TestBotRunner.runPeriodicItems(checkBot);\n+            TestBotRunner.runPeriodicItems(prBot);\n@@ -1174,0 +1181,1 @@\n+            assertTrue(pr.store().labelNames().contains(\"jep\"));\n@@ -1176,2 +1184,0 @@\n-            \/\/ This step is not necessary, because the JEPBot is not actually running\n-            \/\/ in this test case. But it is good to keep it to show the logic.\n@@ -1180,7 +1186,0 @@\n-            \/\/ Simulate the JEPBot to remove the `jep` label when the jep issue has been targeted.\n-            jepIssue.removeLabel(\"jep\");\n-\n-            \/\/ Push a commit to trigger the check which can update the PR body.\n-            var newHash = CheckableRepository.appendAndCommit(localRepo);\n-            localRepo.push(newHash, author.authenticatedUrl(), \"edit\", false);\n-\n@@ -1188,1 +1187,1 @@\n-            TestBotRunner.runPeriodicItems(checkBot);\n+            TestBotRunner.runPeriodicItems(issueBot);\n@@ -1192,0 +1191,1 @@\n+            assertFalse(pr.store().labelNames().contains(\"jep\"));\n@@ -1193,1 +1193,2 @@\n-            \/\/ Set the state of the jep issue to `Closed`.\n+            \/\/ Set the state of the jep issue to `Closed` without a resolution, this\n+            \/\/ should re-add the label but keep the JEP issue in the list\n@@ -1196,7 +1197,1 @@\n-\n-            \/\/ Push a commit to trigger the check which can update the PR body.\n-            newHash = CheckableRepository.appendAndCommit(localRepo);\n-            localRepo.push(newHash, author.authenticatedUrl(), \"edit\", false);\n-\n-            \/\/ PR should have two issues even though the jep issue has been Closed\n-            TestBotRunner.runPeriodicItems(checkBot);\n+            TestBotRunner.runPeriodicItems(issueBot);\n@@ -1206,0 +1201,1 @@\n+            assertTrue(pr.store().labelNames().contains(\"jep\"));\n@@ -1208,0 +1204,10 @@\n+\n+            \/\/ Set the resolution to Delivered, this should remove the label\n+            \/\/ PR should have two issues even though the jep issue has been Closed\n+            jepIssue.setProperty(\"resolution\", JSON.object().put(\"name\", \"Delivered\"));\n+\n+            TestBotRunner.runPeriodicItems(issueBot);\n+            assertTrue(pr.store().body().contains(\"### Issues\"));\n+            assertTrue(pr.store().body().contains(\"The main issue\"));\n+            assertTrue(pr.store().body().contains(\"The jep issue (**JEP**)\"));\n+            assertFalse(pr.store().labelNames().contains(\"jep\"));\n@@ -1792,0 +1798,1 @@\n+            var issuePRMap = new HashMap<String, List<PRRecord>>();\n@@ -1793,4 +1800,5 @@\n-                                         .repo(author)\n-                                         .censusRepo(censusBuilder.build())\n-                                         .issueProject(issues)\n-                                         .build();\n+                    .repo(author)\n+                    .issuePRMap(issuePRMap)\n+                    .censusRepo(censusBuilder.build())\n+                    .issueProject(issues)\n+                    .build();\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CheckTests.java","additions":33,"deletions":25,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -282,1 +282,1 @@\n-            assertTrue(pr.store().body().contains(\"This is an issue (**Bug**)\"));\n+            assertTrue(pr.store().body().contains(\"This is an issue (**Bug** - P3)\"));\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/IssueBotTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import java.util.Optional;\n@@ -45,0 +46,11 @@\n+\n+    \/**\n+     * @return The raw status name string from the issue tracker\n+     *\/\n+    String status();\n+\n+    \/**\n+     * @return The raw resolution name string from the issue tracker, or empty\n+     * if it hasn't been set.\n+     *\/\n+    Optional<String> resolution();\n","filename":"issuetracker\/src\/main\/java\/org\/openjdk\/skara\/issuetracker\/IssueTrackerIssue.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -193,0 +193,17 @@\n+    @Override\n+    public String status() {\n+        return json.get(\"fields\").get(\"status\").get(\"name\").asString();\n+    }\n+\n+    @Override\n+    public Optional<String> resolution() {\n+        var resolution = json.get(\"fields\").get(\"resolution\");\n+        if (resolution != null && !resolution.isNull()) {\n+            var name = resolution.get(\"name\");\n+            if (name != null && !name.isNull()) {\n+                return Optional.of(resolution.get(\"name\").asString());\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n","filename":"issuetracker\/src\/main\/java\/org\/openjdk\/skara\/issuetracker\/jira\/JiraIssue.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -254,0 +254,1 @@\n+            case \"status\": \/\/ fall-through\n","filename":"issuetracker\/src\/main\/java\/org\/openjdk\/skara\/issuetracker\/jira\/JiraProject.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -56,2 +56,2 @@\n-        assertEquals(\"Closed\", closedJep.properties().get(\"status\").get(\"name\").asString());\n-        assertEquals(\"Delivered\", closedJep.properties().get(\"resolution\").get(\"name\").asString());\n+        assertEquals(\"Closed\", closedJep.status());\n+        assertEquals(\"Delivered\", closedJep.resolution().orElseThrow());\n","filename":"issuetracker\/src\/test\/java\/org\/openjdk\/skara\/issuetracker\/jira\/JiraProjectTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -63,1 +63,0 @@\n-include 'bots:jep'\n","filename":"settings.gradle","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.util.Optional;\n@@ -63,0 +64,17 @@\n+    @Override\n+    public String status() {\n+        return store().properties().get(\"status\").get(\"name\").asString();\n+    }\n+\n+    @Override\n+    public Optional<String> resolution() {\n+        var resolution = store().properties().get(\"resolution\");\n+        if (resolution != null && !resolution.isNull()) {\n+            var name = resolution.get(\"name\");\n+            if (name != null && !name.isNull()) {\n+                return Optional.of(resolution.get(\"name\").asString());\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n@@ -70,4 +88,1 @@\n-            var resolution = store().properties().get(\"resolution\");\n-            if (!resolution.isNull()) {\n-                return \"Fixed\".equals(resolution.get(\"name\").asString());\n-            }\n+            return resolution().map(r -> r.equals(\"Fixed\")).orElse(Boolean.FALSE);\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestIssueTrackerIssue.java","additions":19,"deletions":4,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -25,0 +25,4 @@\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n@@ -26,1 +30,4 @@\n-import org.openjdk.skara.issuetracker.*;\n+import org.openjdk.skara.issuetracker.Issue;\n+import org.openjdk.skara.issuetracker.IssueProject;\n+import org.openjdk.skara.issuetracker.Link;\n+import org.openjdk.skara.json.JSON;\n@@ -29,2 +36,0 @@\n-import java.util.*;\n-\n@@ -42,0 +47,4 @@\n+        \/\/ Set defaults for some expected mandatory fields\n+        this.properties.put(\"status\", JSON.object().put(\"name\", JSON.of(\"New\")));\n+        this.properties.put(\"priority\", JSON.of(\"3\"));\n+        this.properties.put(\"issuetype\", JSON.of(\"Bug\"));\n@@ -47,0 +56,25 @@\n+    \/**\n+     * Use the underlying status of the issue for state to better mimic JiraIssue\n+     *\/\n+    @Override\n+    public Issue.State state() {\n+        return switch (properties().get(\"status\").get(\"name\").asString()) {\n+            case \"Closed\" -> Issue.State.CLOSED;\n+            case \"Resolved\" -> Issue.State.RESOLVED;\n+            default -> Issue.State.OPEN;\n+        };\n+    }\n+\n+    \/**\n+     * Use the underlying status of the issue for state to better mimic JiraIssue\n+     *\/\n+    @Override\n+    public void setState(Issue.State state) {\n+        var newStatus = switch (state) {\n+            case CLOSED -> \"Closed\";\n+            case RESOLVED -> \"Resolved\";\n+            default -> \"Open\";\n+        };\n+        properties().put(\"status\", JSON.object().put(\"name\", JSON.of(newStatus)));\n+    }\n+\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestIssueTrackerIssueStore.java","additions":37,"deletions":3,"binary":false,"changes":40,"status":"modified"}]}