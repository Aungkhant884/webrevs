{"files":[{"patch":"@@ -188,0 +188,4 @@\n+    public List<CommitMetadata> commitMetadataFor(List<Branch> branches) throws IOException {\n+        return List.of();\n+    }\n+\n","filename":"jcheck\/src\/test\/java\/org\/openjdk\/skara\/jcheck\/TestRepository.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -73,0 +73,4 @@\n+\n+    \/\/ Can't overload on both List<Path> and List<Branch>\n+    List<CommitMetadata> commitMetadataFor(List<Branch> branches) throws IOException;\n+\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/ReadOnlyRepository.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -257,0 +257,13 @@\n+    @Override\n+    public List<CommitMetadata> commitMetadataFor(List<Branch> branches) throws IOException {\n+        var args = new ArrayList<String>();\n+        args.addAll(List.of(\"git\", \"rev-list\",\n+                                   \"--format=\" + GitCommitMetadata.FORMAT,\n+                                   \"--topo-order\",\n+                                   \"--no-abbrev\",\n+                                   \"--no-color\"));\n+        args.addAll(branches.stream().map(Branch::name).collect(Collectors.toList()));\n+        args.add(\"--\");\n+        return readMetadata(args, \"commit \");\n+    }\n+\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/git\/GitRepository.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -310,0 +310,5 @@\n+    @Override\n+    public List<CommitMetadata> commitMetadataFor(List<Branch> branches) throws IOException {\n+        throw new RuntimeException(\"Not implemented yet\");\n+    }\n+\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/hg\/HgRepository.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2936,0 +2936,45 @@\n+\n+    @Test\n+    void testCommitMetadataWithBranchesWithGit() throws IOException {\n+        try (var dir = new TemporaryDirectory()) {\n+            var r = Repository.init(dir.path(), VCS.GIT);\n+\n+            var readme = dir.path().resolve(\"README\");\n+            Files.write(readme, List.of(\"Hello, world!\"));\n+            r.add(readme);\n+            var first = r.commit(\"Added README\", \"duke\", \"duke@openjdk.java.net\");\n+\n+            var b1 = r.branch(first, \"b1\");\n+            r.checkout(b1);\n+            Files.write(readme, List.of(\"One more line\"), WRITE, APPEND);\n+            r.add(readme);\n+            var second = r.commit(\"Modified README\", \"duke\", \"duke@openjdk.java.net\");\n+\n+            r.checkout(r.defaultBranch());\n+            var b2 = r.branch(first, \"b2\");\n+            r.checkout(b2);\n+            Files.write(readme, List.of(\"An additional line\"), WRITE, APPEND);\n+            r.add(readme);\n+            var third = r.commit(\"Additional line added to README\", \"duke\", \"duke@openjdk.java.net\");\n+\n+            var metadata = r.commitMetadataFor(List.of(r.defaultBranch()));\n+            assertEquals(1, metadata.size());\n+            assertEquals(first, metadata.get(0).hash());\n+\n+            metadata = r.commitMetadataFor(List.of(r.defaultBranch(), b1));\n+            assertEquals(2, metadata.size());\n+            assertEquals(second, metadata.get(0).hash());\n+            assertEquals(first, metadata.get(1).hash());\n+\n+            metadata = r.commitMetadataFor(List.of(r.defaultBranch(), b2));\n+            assertEquals(2, metadata.size());\n+            assertEquals(third, metadata.get(0).hash());\n+            assertEquals(first, metadata.get(1).hash());\n+\n+            metadata = r.commitMetadataFor(List.of(r.defaultBranch(), b1, b2));\n+            assertEquals(3, metadata.size());\n+            assertEquals(second, metadata.get(0).hash());\n+            assertEquals(third, metadata.get(1).hash());\n+            assertEquals(first, metadata.get(2).hash());\n+        }\n+    }\n","filename":"vcs\/src\/test\/java\/org\/openjdk\/skara\/vcs\/RepositoryTests.java","additions":45,"deletions":0,"binary":false,"changes":45,"status":"modified"}]}