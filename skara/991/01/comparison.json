{"files":[{"patch":"@@ -257,0 +257,10 @@\n+    private static Optional<String> composeDependsOn(PullRequest pr) {\n+        var dependsId = PreIntegrations.dependentPullRequestId(pr);\n+        if (dependsId.isEmpty()) {\n+            return Optional.empty();\n+        }\n+\n+        var dependsPr = pr.repository().pullRequest(dependsId.get());\n+        return Optional.of(\"Depends on: \" + dependsPr.webUrl());\n+    }\n+\n@@ -266,1 +276,3 @@\n-        return \"Commit messages:\\n\" +\n+\n+        return composeDependsOn(pr).map(line -> line + \"\\n\\n\").orElse(\"\") +\n+                \"Commit messages:\\n\" +\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/ArchiveMessages.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-    private Optional<String> archiveContents(Path archive) {\n+    private Optional<String> archiveContents(Path archive, String prId) {\n@@ -52,1 +52,3 @@\n-            var mbox = Files.find(archive, 50, (path, attrs) -> path.toString().endsWith(\".mbox\")).findAny();\n+            var mbox = Files.find(archive, 50, (path, attrs) -> path.toString().endsWith(\".mbox\"))\n+                            .filter(path -> path.getFileName().toString().contains(prId))\n+                            .findAny();\n@@ -64,1 +66,5 @@\n-        return archiveContainsCount(archive, text) > 0;\n+        return archiveContains(archive, text, \"\");\n+    }\n+\n+    private boolean archiveContains(Path archive, String text, String prId) {\n+        return archiveContainsCount(archive, text, prId) > 0;\n@@ -68,1 +74,5 @@\n-        var lines = archiveContents(archive);\n+        return archiveContainsCount(archive, text, \"\");\n+    }\n+\n+    private int archiveContainsCount(Path archive, String text, String prId) {\n+        var lines = archiveContents(archive, prId);\n@@ -990,1 +1000,1 @@\n-            var archiveText = archiveContents(archiveFolder.path()).orElseThrow();\n+            var archiveText = archiveContents(archiveFolder.path(), \"\").orElseThrow();\n@@ -3198,0 +3208,72 @@\n+\n+    @Test\n+    void dependent(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory();\n+             var archiveFolder = new TemporaryDirectory();\n+             var listServer = new TestMailmanServer();\n+             var webrevServer = new TestWebrevServer()) {\n+            var author = credentials.getHostedRepository();\n+            var archive = credentials.getHostedRepository();\n+            var listAddress = EmailAddress.parse(listServer.createList(\"test\"));\n+            var censusBuilder = credentials.getCensusBuilder()\n+                                           .addAuthor(author.forge().currentUser().id());\n+            var from = EmailAddress.from(\"test\", \"test@test.mail\");\n+            var mlBot = MailingListBridgeBot.newBuilder()\n+                                            .from(from)\n+                                            .repo(author)\n+                                            .archive(archive)\n+                                            .censusRepo(censusBuilder.build())\n+                                            .lists(List.of(new MailingListConfiguration(listAddress, Set.of())))\n+                                            .listArchive(listServer.getArchive())\n+                                            .smtpServer(listServer.getSMTP())\n+                                            .webrevStorageHTMLRepository(archive)\n+                                            .webrevStorageRef(\"webrev\")\n+                                            .webrevStorageBase(Path.of(\"test\"))\n+                                            .webrevStorageBaseUri(webrevServer.uri())\n+                                            .issueTracker(URIBuilder.base(\"http:\/\/issues.test\/browse\/\").build())\n+                                            .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+            localRepo.push(masterHash, archive.url(), \"webrev\", true);\n+\n+            \/\/ Create a separate change\n+            var depHash = CheckableRepository.appendAndCommit(localRepo, \"A simple change\");\n+            localRepo.push(depHash, author.url(), \"dep\", true);\n+            var depPr = credentials.createPullRequest(archive, \"master\", \"dep\", \"The first pr\");\n+\n+            \/\/ Simulate the pr dependency notifier creating the corresponding branch\n+            localRepo.push(depHash, author.url(), \"pr\/\" + depPr.id(), true);\n+\n+            \/\/ Run an archive pass\n+            TestBotRunner.runPeriodicItems(mlBot);\n+            listServer.processIncoming();\n+\n+            \/\/ Make a change with a corresponding PR\n+            localRepo.checkout(masterHash, true);\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, \"A simple change\",\n+                                                               \"Change msg\\n\\nWith several lines\");\n+            localRepo.push(editHash, author.url(), \"edit\", true);\n+            var pr = credentials.createPullRequest(archive, \"pr\/\" + depPr.id(), \"edit\", \"1234: This is a pull request\");\n+            pr.setBody(\"This is a PR\");\n+\n+            \/\/ Run an archive pass\n+            TestBotRunner.runPeriodicItems(mlBot);\n+            listServer.processIncoming();\n+\n+            pr.addComment(\"Looks good!\");\n+            TestBotRunner.runPeriodicItems(mlBot);\n+            listServer.processIncoming();\n+\n+            \/\/ Check the archive\n+            Repository.materialize(archiveFolder.path(), archive.url(), \"master\");\n+            assertTrue(archiveContains(archiveFolder.path(), \"Subject: RFR: \"), pr.id());\n+            assertTrue(archiveContains(archiveFolder.path(), \"Subject: Re: RFR: \", pr.id()));\n+\n+            assertTrue(archiveContains(archiveFolder.path(), \"Depends on:\", pr.id()));\n+            assertFalse(archiveContains(archiveFolder.path(), \"Depends on:\", depPr.id()));\n+        }\n+    }\n","filename":"bots\/mlbridge\/src\/test\/java\/org\/openjdk\/skara\/bots\/mlbridge\/MailingListBridgeBotTests.java","additions":87,"deletions":5,"binary":false,"changes":92,"status":"modified"}]}