{"files":[{"patch":"@@ -48,1 +48,3 @@\n-    tag;\n+    tag,\n+    approval(true),\n+    approve;\n","filename":"bots\/common\/src\/main\/java\/org\/openjdk\/skara\/bots\/common\/CommandNameEnum.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+    public static final String APPROVAL_LABEL = \"approval\";\n","filename":"bots\/common\/src\/main\/java\/org\/openjdk\/skara\/bots\/common\/PullRequestConstants.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,173 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bots.pr;\n+\n+import org.openjdk.skara.bots.common.SolvesTracker;\n+import org.openjdk.skara.forge.PullRequest;\n+import org.openjdk.skara.issuetracker.Comment;\n+import org.openjdk.skara.vcs.openjdk.Issue;\n+\n+import java.io.PrintWriter;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.regex.Pattern;\n+\n+import static org.openjdk.skara.bots.common.CommandNameEnum.approval;\n+\n+public class ApprovalCommand implements CommandHandler {\n+    @Override\n+    public String description() {\n+        return \"request for maintainer's approval\";\n+    }\n+\n+    @Override\n+    public String name() {\n+        return approval.name();\n+    }\n+\n+    private static final Pattern APPROVAL_ARG_PATTERN = Pattern.compile(\"(([A-Za-z]+-)?[0-9]+)? ?(request|cancel)(.*?)?\", Pattern.MULTILINE | Pattern.DOTALL);\n+\n+    @Override\n+    public void handle(PullRequestBot bot, PullRequest pr, CensusInstance censusInstance, ScratchArea scratchArea, CommandInvocation command, List<Comment> allComments, PrintWriter reply) {\n+        if (!command.user().equals(pr.author())) {\n+            reply.println(\"Only the author (@\" + pr.author().username() + \") is allowed to issue the `\/approval` command.\");\n+            return;\n+        }\n+        var approval = bot.approval();\n+        var targetRef = pr.targetRef();\n+        if (approval == null) {\n+            reply.println(\"Changes in this repository do not require maintainer approval.\");\n+            return;\n+        }\n+        if (!approval.needsApproval(targetRef)) {\n+            reply.println(\"Changes to branch \" + pr.targetRef() + \" do not require maintainer approval\");\n+            return;\n+        }\n+        var argMatcher = APPROVAL_ARG_PATTERN.matcher(command.args());\n+        if (!argMatcher.matches()) {\n+            showHelp(reply);\n+            return;\n+        }\n+\n+        var issueProject = bot.issueProject();\n+        String issueId = argMatcher.group(1);\n+        String option = argMatcher.group(3);\n+        String message = argMatcher.group(4);\n+\n+        var issueOpt = getIssue(issueId, pr, allComments, reply);\n+        if (issueOpt.isEmpty()) {\n+            return;\n+        }\n+        var issue = issueOpt.get();\n+\n+        if (issue.project().isPresent() && !issue.project().get().equalsIgnoreCase(issueProject.name())) {\n+            reply.println(\"Approval can only be requested for issues in the \" + issueProject.name() + \" project.\");\n+            return;\n+        }\n+\n+        var issueTrackerIssueOpt = issueProject.issue(issue.shortId());\n+        if (issueTrackerIssueOpt.isEmpty()) {\n+            reply.println(\"Can not find \" + issue.id() + \" in the \" + issueProject.name() + \" project.\");\n+            return;\n+        }\n+        var issueTrackerIssue = issueTrackerIssueOpt.get();\n+        var requestLabel = approval.requestedLabel(targetRef);\n+        var approvedLabel = approval.approvedLabel(targetRef);\n+        var rejectedLabel = approval.rejectedLabel(targetRef);\n+        var prefix = \"[\" + requestLabel + \"]\";\n+        var comments = issueTrackerIssue.comments();\n+        var existingComment = comments.stream()\n+                .filter(comment -> comment.author().equals(issueProject.issueTracker().currentUser()))\n+                .filter(comment -> comment.body().startsWith(prefix))\n+                .findFirst();\n+\n+        var labels = issueTrackerIssue.labelNames();\n+        if (option.equals(\"cancel\")) {\n+            if (labels.contains(approvedLabel) || labels.contains(rejectedLabel)) {\n+                reply.println(\"The request has already been handled by a maintainer and can no longer be canceled.\");\n+            } else {\n+                issueTrackerIssue.removeLabel(requestLabel);\n+                existingComment.ifPresent(issueTrackerIssue::removeComment);\n+                reply.println(\"The approval request has been cancelled successfully.\");\n+            }\n+        } else if (option.equals(\"request\")) {\n+            if (labels.contains(approvedLabel)) {\n+                reply.println(\"Approval has already been requested and approved.\");\n+            } else if (labels.contains(rejectedLabel)) {\n+                reply.println(\"Approval has already been requested and rejected.\");\n+            } else {\n+                var messageToPost = prefix + \" Approval Request from \" + command.user().fullName() + \"\\n\" + message.trim();\n+                if (existingComment.isPresent()) {\n+                    if (!existingComment.get().body().equals(messageToPost)) {\n+                        Comment comment = issueTrackerIssue.updateComment(existingComment.get().id(), messageToPost);\n+                        reply.println(\"The approval [request](\" + issueTrackerIssue.commentUrl(comment) + \") has been updated successfully.\");\n+                    } else {\n+                        reply.println(\"The approval [request](\" + issueTrackerIssue.commentUrl(existingComment.get()) + \") was already up to date.\");\n+                    }\n+                } else {\n+                    Comment comment = issueTrackerIssue.addComment(messageToPost);\n+                    reply.println(\"The approval [request](\" + issueTrackerIssue.commentUrl(comment) + \") has been created successfully.\");\n+                }\n+                issueTrackerIssue.addLabel(requestLabel);\n+            }\n+        }\n+    }\n+\n+    private Optional<Issue> getIssue(String issueId, PullRequest pr, List<Comment> allComments, PrintWriter reply) {\n+        var titleIssue = Issue.fromStringRelaxed(pr.title());\n+        var issues = new ArrayList<String>();\n+        titleIssue.ifPresent(value -> issues.add(value.shortId()));\n+        issues.addAll(SolvesTracker.currentSolved(pr.repository().forge().currentUser(), allComments, pr.title())\n+                .stream()\n+                .map(Issue::shortId)\n+                .toList());\n+        \/\/ If there is only one issue associated with the pr, then the user don't need to specify the issueID in command\n+        if (issueId == null) {\n+            if (issues.size() == 1) {\n+                issueId = issues.get(0);\n+            } else if (issues.size() == 0) {\n+                reply.println(\"There is no issue associated with this pull request.\");\n+                return Optional.empty();\n+            } else {\n+                reply.println(\"There are multiple issues associated with this pull request, you need to request approval for each one individually.\");\n+                return Optional.empty();\n+            }\n+        }\n+        Issue issue = new Issue(issueId, null);\n+        if (!issues.contains(issue.shortId())) {\n+            reply.println(\"Approval can only be requested for issues that this pull request solves.\");\n+            return Optional.empty();\n+        }\n+        return Optional.of(issue);\n+    }\n+\n+    @Override\n+    public boolean multiLine() {\n+        return true;\n+    }\n+\n+    private void showHelp(PrintWriter reply) {\n+        reply.println(\"usage: `\/approval [<id>] (request|cancel) [<text>]`\");\n+    }\n+}\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/ApprovalCommand.java","additions":173,"deletions":0,"binary":false,"changes":173,"status":"added"},{"patch":"@@ -0,0 +1,149 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bots.pr;\n+\n+import org.openjdk.skara.bots.common.SolvesTracker;\n+import org.openjdk.skara.forge.PullRequest;\n+import org.openjdk.skara.issuetracker.Comment;\n+import org.openjdk.skara.vcs.openjdk.Issue;\n+\n+import java.io.PrintWriter;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.regex.Pattern;\n+\n+public class ApproveCommand implements CommandHandler {\n+\n+    private static final Pattern APPROVE_ARG_PATTERN = Pattern.compile(\"(([A-Za-z]+-)?[0-9]+)? ?(yes|no)\");\n+\n+    @Override\n+    public String description() {\n+        return null;\n+    }\n+\n+    @Override\n+    public String name() {\n+        return null;\n+    }\n+\n+    private void showHelp(PrintWriter reply) {\n+        reply.println(\"usage: `\/approve [<id>] (yes|no)`\");\n+    }\n+\n+    @Override\n+    public void handle(PullRequestBot bot, PullRequest pr, CensusInstance censusInstance, ScratchArea scratchArea, CommandInvocation command, List<Comment> allComments, PrintWriter reply) {\n+        if (!bot.integrators().contains(command.user().username())) {\n+            reply.println(\"Only integrators for this repository are allowed to issue the `\/approve` command.\");\n+        }\n+\n+        var approval = bot.approval();\n+        var targetRef = pr.targetRef();\n+        if (approval == null) {\n+            reply.println(\"Changes in this repository do not require maintainer approval.\");\n+            return;\n+        }\n+        if (!approval.needsApproval(targetRef)) {\n+            reply.println(\"Changes to branch \" + pr.targetRef() + \" do not require maintainer approval\");\n+            return;\n+        }\n+        var argMatcher = APPROVE_ARG_PATTERN.matcher(command.args());\n+        if (!argMatcher.matches()) {\n+            showHelp(reply);\n+            return;\n+        }\n+        var issueProject = bot.issueProject();\n+        String issueId = argMatcher.group(1);\n+        String option = argMatcher.group(3);\n+\n+        var issues = getIssues(issueId, pr, allComments, reply);\n+        if (issues.isEmpty()) {\n+            return;\n+        }\n+        reply.println();\n+        for (var issue : issues) {\n+            reply.print(issue.id() + \": \");\n+            if (issue.project().isPresent() && !issue.project().get().equalsIgnoreCase(issueProject.name())) {\n+                reply.println(\"Can only approve issues in the \" + issueProject.name() + \" project.\");\n+                continue;\n+            }\n+\n+            var issueTrackerIssueOpt = issueProject.issue(issue.shortId());\n+            if (issueTrackerIssueOpt.isEmpty()) {\n+                reply.println(\"Can not find \" + issue.id() + \" in the \" + issueProject.name() + \" project.\");\n+                continue;\n+            }\n+\n+            var issueTrackerIssue = issueTrackerIssueOpt.get();\n+            var approvedLabel = approval.approvedLabel(targetRef);\n+            var rejectedLabel = approval.rejectedLabel(targetRef);\n+            var requestLabel = approval.requestedLabel(targetRef);\n+            var labels = issueTrackerIssue.labelNames();\n+\n+            if (!labels.contains(requestLabel)) {\n+                reply.println(\"There is no maintainer approval request for this issue.\");\n+                continue;\n+            }\n+\n+            if (option.equals(\"yes\")) {\n+                issueTrackerIssue.removeLabel(rejectedLabel);\n+                issueTrackerIssue.addLabel(approvedLabel);\n+                reply.println(\"The approval request has been approved.\");\n+            } else if (option.equals(\"no\")) {\n+                issueTrackerIssue.removeLabel(approvedLabel);\n+                issueTrackerIssue.addLabel(rejectedLabel);\n+                reply.println(\"The approval request has been rejected.\");\n+            }\n+        }\n+    }\n+\n+    private List<Issue> getIssues(String issueId, PullRequest pr, List<Comment> allComments, PrintWriter reply) {\n+        var titleIssue = Issue.fromStringRelaxed(pr.title());\n+        var issueIds = new ArrayList<String>();\n+        titleIssue.ifPresent(value -> issueIds.add(value.shortId()));\n+        List<Issue> ret = new ArrayList<>();\n+        issueIds.addAll(SolvesTracker.currentSolved(pr.repository().forge().currentUser(), allComments, pr.title())\n+                .stream()\n+                .map(Issue::shortId)\n+                .toList());\n+\n+        if (issueId != null) {\n+            var issue = new Issue(issueId, null);\n+            if (issueIds.contains(issue.shortId())) {\n+                ret.add(issue);\n+            } else {\n+                reply.println(\"You can only handle approval requests for issues that this pull request solves.\");\n+            }\n+            \/\/ If issueId is not specified, then handle all the issues associated with this pull request\n+        } else {\n+            if (issueIds.size() == 0) {\n+                reply.println(\"There is no issue associated with this pull request.\");\n+            } else {\n+                ret.addAll(issueIds.stream()\n+                        .map(id -> new Issue(id, null))\n+                        .toList());\n+            }\n+        }\n+        return ret;\n+    }\n+}\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/ApproveCommand.java","additions":149,"deletions":0,"binary":false,"changes":149,"status":"added"},{"patch":"@@ -681,0 +681,3 @@\n+\n+            var requestPresent = false;\n+\n@@ -712,0 +715,1 @@\n+                                    requestPresent = true;\n@@ -744,0 +748,6 @@\n+\n+            if (requestPresent) {\n+                newLabels.add(APPROVAL_LABEL);\n+            } else {\n+                newLabels.remove(APPROVAL_LABEL);\n+            }\n@@ -1334,1 +1344,1 @@\n-                    postApprovalNeededComment(additionalProgresses);\n+                    postApprovalNeededComment();\n@@ -1513,1 +1523,1 @@\n-    private void postApprovalNeededComment(Map<String, Boolean> additionalProgresses) {\n+    private void postApprovalNeededComment() {\n@@ -1519,1 +1529,4 @@\n-                \" This change is now ready for you to apply for maintainer [approval](\" + approval.documentLink() + \").\" +\n+                \" This change is now ready for you to apply for maintainer [approval](\" + approval.documentLink() + \"). \" +\n+                \"This can be done directly in each associated issue or by using the \" +\n+                \"[\/approval](https:\/\/wiki.openjdk.org\/display\/SKARA\/Pull+Request+Commands#PullRequestCommands-\/approval) \" +\n+                \"command.\" +\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":16,"deletions":3,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+\n@@ -65,1 +66,3 @@\n-            Map.entry(tag.name(), new TagCommand())\n+            Map.entry(tag.name(), new TagCommand()),\n+            Map.entry(approval.name(), new ApprovalCommand()),\n+            Map.entry(approve.name(), new ApproveCommand())\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CommandExtractor.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,251 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bots.pr;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInfo;\n+import org.openjdk.skara.forge.Review;\n+import org.openjdk.skara.json.JSON;\n+import org.openjdk.skara.test.CheckableRepository;\n+import org.openjdk.skara.test.HostCredentials;\n+import org.openjdk.skara.test.TemporaryDirectory;\n+import org.openjdk.skara.test.TestBotRunner;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.openjdk.skara.bots.common.PullRequestConstants.APPROVAL_LABEL;\n+import static org.openjdk.skara.bots.pr.PullRequestAsserts.assertLastCommentContains;\n+\n+public class ApprovalAndApproveCommandTests {\n+    @Test\n+    void simple(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var bot = credentials.getHostedRepository();\n+            var issueProject = credentials.getIssueProject();\n+            var issue = issueProject.createIssue(\"This is an issue\", List.of(), Map.of());\n+            issue.setProperty(\"issuetype\", JSON.of(\"Bug\"));\n+            issue.setProperty(\"priority\", JSON.of(\"4\"));\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addReviewer(reviewer.forge().currentUser().id())\n+                    .addCommitter(author.forge().currentUser().id());\n+            Map<String, List<PRRecord>> issuePRMap = new HashMap<>();\n+            Approval approval = new Approval(\"\", \"-critical-request\", \"-critical-approved\",\n+                    \"-critical-rejected\", \"https:\/\/example.com\");\n+            approval.addBranchPrefix(Pattern.compile(\"jdk20.0.1\"), \"CPU23_04\");\n+            approval.addBranchPrefix(Pattern.compile(\"jdk20.0.2\"), \"CPU23_05\");\n+\n+            var prBot = PullRequestBot.newBuilder()\n+                    .repo(bot)\n+                    .issueProject(issueProject)\n+                    .censusRepo(censusBuilder.build())\n+                    .issuePRMap(issuePRMap)\n+                    .approval(approval)\n+                    .integrators(Set.of(reviewer.forge().currentUser().username()))\n+                    .build();\n+            var issueBot = new IssueBot(issueProject, List.of(author), Map.of(bot.name(), prBot), issuePRMap);\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.authenticatedUrl(), \"jdk20.0.1\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.authenticatedUrl(), \"edit\", true);\n+\n+            var pr = credentials.createPullRequest(author, \"jdk20.0.1\", \"edit\", issue.id() + \": This is an issue\");\n+\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertFalse(pr.store().labelNames().contains(\"ready\"));\n+\n+            pr.addComment(\"\/approval\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertLastCommentContains(pr, \"usage: `\/approval [<id>] (request|cancel) [<text>]`\");\n+            assertFalse(pr.store().labelNames().contains(APPROVAL_LABEL));\n+\n+            pr.addComment(\"\/approval JDK-1 request\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertLastCommentContains(pr, \"Approval can only be requested for issues in the TEST project.\");\n+            assertFalse(pr.store().labelNames().contains(APPROVAL_LABEL));\n+\n+            pr.addComment(\"\/approval request My reason line1\\nMy reason line2\\nMy reason line3\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertLastCommentContains(pr, \"The approval [request](http:\/\/localhost\/project\/testTEST-1?focusedCommentId=0) has been created successfully.\");\n+            TestBotRunner.runPeriodicItems(issueBot);\n+            assertTrue(pr.store().labelNames().contains(APPROVAL_LABEL));\n+\n+            pr.addComment(\"\/approval cancel\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertLastCommentContains(pr, \"The approval request has been cancelled successfully.\");\n+            TestBotRunner.runPeriodicItems(issueBot);\n+            assertFalse(pr.store().labelNames().contains(APPROVAL_LABEL));\n+\n+            pr.addComment(\"\/approval 1 request\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertLastCommentContains(pr, \"The approval [request](http:\/\/localhost\/project\/testTEST-1?focusedCommentId=0) has been created successfully.\");\n+            TestBotRunner.runPeriodicItems(issueBot);\n+            assertTrue(pr.store().labelNames().contains(APPROVAL_LABEL));\n+\n+            pr.addComment(\"\/approval 1 request new reason line1\\nnew reason line2\\nnew reason line3\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertLastCommentContains(pr, \"The approval [request](http:\/\/localhost\/project\/testTEST-1?focusedCommentId=0) has been updated successfully.\");\n+            TestBotRunner.runPeriodicItems(issueBot);\n+            assertTrue(issue.comments().stream().anyMatch(comment -> comment.body().contains(\"new reason\")));\n+\n+            pr.addComment(\"\/approval 1 request new reason line1\\nnew reason line2\\nnew reason line3\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertLastCommentContains(pr, \"The approval [request](http:\/\/localhost\/project\/testTEST-1?focusedCommentId=0) was already up to date.\");\n+\n+            var reviewerPr = reviewer.pullRequest(pr.id());\n+            reviewerPr.addReview(Review.Verdict.APPROVED, \"LGTM\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertFalse(pr.store().labelNames().contains(\"ready\"));\n+\n+            reviewerPr.addComment(\"\/approve yes\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertLastCommentContains(pr, \"1: The approval request has been approved.\");\n+\n+            reviewerPr.addComment(\"\/approve 1 yes\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertLastCommentContains(pr, \"1: The approval request has been approved.\");\n+            assertTrue(pr.store().labelNames().contains(APPROVAL_LABEL));\n+            assertFalse(pr.store().labelNames().contains(\"ready\"));\n+\n+            TestBotRunner.runPeriodicItems(issueBot);\n+            assertFalse(pr.store().labelNames().contains(APPROVAL_LABEL));\n+            assertTrue(pr.store().labelNames().contains(\"ready\"));\n+\n+            pr.addComment(\"\/approval cancel cancel it\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertLastCommentContains(pr, \"The request has already been handled by a maintainer and can no longer be canceled.\");\n+        }\n+    }\n+\n+    @Test\n+    void multipleIssues(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var bot = credentials.getHostedRepository();\n+            var issueProject = credentials.getIssueProject();\n+            var issue1 = issueProject.createIssue(\"This is an issue\", List.of(), Map.of());\n+            issue1.setProperty(\"issuetype\", JSON.of(\"Bug\"));\n+            issue1.setProperty(\"priority\", JSON.of(\"4\"));\n+            var issue2 = issueProject.createIssue(\"This is an issue 2\", List.of(), Map.of());\n+            issue1.setProperty(\"issuetype\", JSON.of(\"Bug\"));\n+            issue1.setProperty(\"priority\", JSON.of(\"2\"));\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addReviewer(reviewer.forge().currentUser().id())\n+                    .addCommitter(author.forge().currentUser().id());\n+            Map<String, List<PRRecord>> issuePRMap = new HashMap<>();\n+            Approval approval = new Approval(\"\", \"-critical-request\", \"-critical-approved\",\n+                    \"-critical-rejected\", \"https:\/\/example.com\");\n+            approval.addBranchPrefix(Pattern.compile(\"jdk20.0.1\"), \"CPU23_04\");\n+            approval.addBranchPrefix(Pattern.compile(\"jdk20.0.2\"), \"CPU23_05\");\n+\n+            var prBot = PullRequestBot.newBuilder()\n+                    .repo(bot)\n+                    .issueProject(issueProject)\n+                    .censusRepo(censusBuilder.build())\n+                    .issuePRMap(issuePRMap)\n+                    .approval(approval)\n+                    .integrators(Set.of(reviewer.forge().currentUser().username()))\n+                    .build();\n+            var issueBot = new IssueBot(issueProject, List.of(author), Map.of(bot.name(), prBot), issuePRMap);\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.authenticatedUrl(), \"jdk20.0.1\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.authenticatedUrl(), \"edit\", true);\n+\n+            var pr = credentials.createPullRequest(author, \"jdk20.0.1\", \"edit\", issue1.id() + \": This is an issue\");\n+\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertFalse(pr.store().labelNames().contains(\"ready\"));\n+\n+            pr.addComment(\"\/issue \" + issue2.id());\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertLastCommentContains(pr, \"Adding additional issue to issue list: `2: This is an issue 2`.\");\n+\n+            var reviewerPr = reviewer.pullRequest(pr.id());\n+            reviewerPr.addReview(Review.Verdict.APPROVED, \"LGTM\");\n+            reviewerPr.addComment(\"\/approve yes\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertLastCommentContains(pr, \"1: There is no maintainer approval request for this issue.\");\n+            assertLastCommentContains(pr, \"2: There is no maintainer approval request for this issue.\");\n+\n+            reviewerPr.addComment(\"\/approve JDK-1 yes\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertLastCommentContains(pr, \"JDK-1: Can only approve issues in the TEST project.\");\n+\n+            pr.addComment(\"\/approval 1 request my reason\");\n+            pr.addComment(\"\/approval 2 request my reason\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            TestBotRunner.runPeriodicItems(issueBot);\n+            assertLastCommentContains(pr, \"The approval [request](http:\/\/localhost\/project\/testTEST-2?focusedCommentId=0) has been created successfully.\");\n+\n+            reviewerPr.addComment(\"\/approve 1 no\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            TestBotRunner.runPeriodicItems(issueBot);\n+            assertLastCommentContains(pr, \"1: The approval request has been rejected.\");\n+\n+            reviewerPr.addComment(\"\/approve no\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            TestBotRunner.runPeriodicItems(issueBot);\n+            assertLastCommentContains(pr, \"1: The approval request has been rejected.\");\n+            assertLastCommentContains(pr, \"2: The approval request has been rejected.\");\n+\n+            reviewerPr.addComment(\"\/approve 1 yes\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            TestBotRunner.runPeriodicItems(issueBot);\n+            assertLastCommentContains(pr, \"1: The approval request has been approved.\");\n+\n+            reviewerPr.addComment(\"\/approve yes\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertLastCommentContains(pr, \"1: The approval request has been approved.\");\n+            assertLastCommentContains(pr, \"2: The approval request has been approved.\");\n+            TestBotRunner.runPeriodicItems(issueBot);\n+            assertTrue(pr.labelNames().contains(\"ready\"));\n+        }\n+    }\n+}\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/ApprovalAndApproveCommandTests.java","additions":251,"deletions":0,"binary":false,"changes":251,"status":"added"},{"patch":"@@ -34,1 +34,2 @@\n-        Approval approval = new Approval(\"\", \"jdk17u-fix-request\", \"jdk17u-fix-yes\", \"jdk17u-fix-no\", \"https:\/\/example.com\");\n+        Approval approval = new Approval(\"\", \"jdk17u-fix-request\", \"jdk17u-fix-yes\",\n+                \"jdk17u-fix-no\", \"https:\/\/example.com\");\n@@ -41,1 +42,2 @@\n-        approval = new Approval(\"jdk17u-fix-\", \"request\", \"yes\", \"no\", \"https:\/\/example.com\");\n+        approval = new Approval(\"jdk17u-fix-\", \"request\", \"yes\", \"no\",\n+                \"https:\/\/example.com\");\n@@ -47,1 +49,2 @@\n-        approval = new Approval(\"\", \"-critical-request\", \"-critical-approved\", \"-critical-rejected\", \"https:\/\/example.com\");\n+        approval = new Approval(\"\", \"-critical-request\", \"-critical-approved\",\n+                \"-critical-rejected\", \"https:\/\/example.com\");\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/ApprovalTests.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -320,1 +320,2 @@\n-                    .approval(new Approval(\"\", \"jdk17u-fix-request\", \"jdk17u-fix-yes\", \"jdk17u-fix-no\", \"https:\/\/example.com\"))\n+                    .approval(new Approval(\"\", \"jdk17u-fix-request\", \"jdk17u-fix-yes\",\n+                            \"jdk17u-fix-no\", \"https:\/\/example.com\"))\n@@ -366,1 +367,2 @@\n-            Approval approval = new Approval(\"\", \"-critical-request\", \"-critical-approved\", \"-critical-rejected\", \"https:\/\/example.com\");\n+            Approval approval = new Approval(\"\", \"-critical-request\", \"-critical-approved\",\n+                    \"-critical-rejected\", \"https:\/\/example.com\");\n@@ -408,1 +410,5 @@\n-            assertEquals(\"⚠️  @user1 This change is now ready for you to apply for maintainer [approval](https:\/\/example.com).<!-- PullRequestBot approval needed comment -->\", pr.store().comments().get(1).body());\n+            assertEquals(\"⚠️  @user1 This change is now ready for you to apply for maintainer [approval](https:\/\/example.com). \" +\n+                            \"This can be done directly in each associated issue or by using the \" +\n+                            \"[\/approval](https:\/\/wiki.openjdk.org\/display\/SKARA\/Pull+Request+Commands#PullRequestCommands-\/approval) command.\" +\n+                            \"<!-- PullRequestBot approval needed comment -->\"\n+                    , pr.store().comments().get(1).body());\n@@ -417,1 +423,6 @@\n-            assertEquals(\"⚠️  @user1 This change is now ready for you to apply for maintainer [approval](https:\/\/example.com).<!-- PullRequestBot approval needed comment -->\", pr.store().comments().get(1).body());\n+            assertTrue(pr.store().body().contains(\"[TEST-1](http:\/\/localhost\/project\/testTEST-1) needs maintainer approval\"));\n+            assertEquals(\"⚠️  @user1 This change is now ready for you to apply for maintainer [approval](https:\/\/example.com). \" +\n+                            \"This can be done directly in each associated issue or by using the \" +\n+                            \"[\/approval](https:\/\/wiki.openjdk.org\/display\/SKARA\/Pull+Request+Commands#PullRequestCommands-\/approval) command.\" +\n+                            \"<!-- PullRequestBot approval needed comment -->\"\n+                    , pr.store().comments().get(1).body());\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/IssueBotTests.java","additions":15,"deletions":4,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -159,2 +159,0 @@\n-    URI commentUrl(Comment comment);\n-\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/PullRequest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -210,0 +210,2 @@\n+\n+    URI commentUrl(Comment comment);\n","filename":"issuetracker\/src\/main\/java\/org\/openjdk\/skara\/issuetracker\/Issue.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -171,0 +171,5 @@\n+    @Override\n+    public URI commentUrl(Comment comment) {\n+        return URIBuilder.base(webUrl()).appendPath(\"?focusedCommentId=\" + comment.id()).build();\n+    }\n+\n","filename":"issuetracker\/src\/main\/java\/org\/openjdk\/skara\/issuetracker\/jira\/JiraIssue.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -143,0 +143,5 @@\n+    @Override\n+    public URI commentUrl(Comment comment) {\n+        return URIBuilder.base(webUrl()).appendPath(\"?focusedCommentId=\" + comment.id()).build();\n+    }\n+\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestIssue.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}