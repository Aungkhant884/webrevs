{"files":[{"patch":"@@ -35,1 +35,0 @@\n-    private final String commandLink;\n@@ -38,1 +37,1 @@\n-    public Approval(String prefix, String request, String approved, String rejected, String documentLink, String commandLink) {\n+    public Approval(String prefix, String request, String approved, String rejected, String documentLink) {\n@@ -45,1 +44,0 @@\n-        this.commandLink = commandLink;\n@@ -68,4 +66,0 @@\n-    public String commandLink() {\n-        return commandLink;\n-    }\n-\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/Approval.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -59,2 +59,6 @@\n-        if (approval == null || !approval.needsApproval(targetRef)) {\n-            reply.println(\"No need to apply for maintainer approval!\");\n+        if (approval == null) {\n+            reply.println(\"Changes in this repository do not require maintainer approval.\");\n+            return;\n+        }\n+        if (!approval.needsApproval(targetRef)) {\n+            reply.println(\"Changes to branch \" + pr.targetRef() + \" do not require maintainer approval\");\n@@ -81,1 +85,1 @@\n-            reply.print(\"Can only request approval for issues in \" + issueProject.name() + \"!\");\n+            reply.println(\"Approval can only be request for issues in the \" + issueProject.name() + \" project.\");\n@@ -87,1 +91,1 @@\n-            reply.print(\"Can not find \" + issue.id() + \" in \" + issueProject.name() + \".\");\n+            reply.println(\"Can not find \" + issue.id() + \" in the \" + issueProject.name() + \" project.\");\n@@ -98,1 +102,1 @@\n-                .filter(comment -> comment.body().contains(prefix))\n+                .filter(comment -> comment.body().startsWith(prefix))\n@@ -104,1 +108,1 @@\n-                reply.print(\"The request has been processed by maintainer! Could not cancel the request now.\");\n+                reply.println(\"The request has already been handled by a maintainer and can no longer be canceled.\");\n@@ -108,1 +112,1 @@\n-                reply.print(\"The request has already been cancelled successfully!\");\n+                reply.println(\"The approval request has been cancelled successfully.\");\n@@ -112,1 +116,1 @@\n-                reply.print(\"The request has been approved by maintainer!\");\n+                reply.println(\"Approval has already been requested and approved.\");\n@@ -114,1 +118,1 @@\n-                reply.print(\"The request has been rejected by maintainer!\");\n+                reply.println(\"Approval has already been requested and rejected.\");\n@@ -116,2 +120,1 @@\n-                issueTrackerIssue.addLabel(requestLabel);\n-                var messageToPost = prefix + \":Maintainer Approval Request from \" + command.user().fullName() + \"\\n\" + message.trim();\n+                var messageToPost = prefix + \" Approval Request from \" + command.user().fullName() + \"\\n\" + message.trim();\n@@ -120,4 +123,4 @@\n-                        issueTrackerIssue.updateComment(existingComment.get().id(), messageToPost);\n-                        reply.print(\"The maintainer approval request has been updated successfully! Please wait for maintainers to process this request.\");\n-                    } else{\n-                        reply.print(\"The maintainer approval request is already up to date. Please wait for maintainers to process this request.\");\n+                        Comment comment = issueTrackerIssue.updateComment(existingComment.get().id(), messageToPost);\n+                        reply.println(\"The approval [request](\" + issueTrackerIssue.commentUrl(comment) + \") has been updated successfully.\");\n+                    } else {\n+                        reply.println(\"The approval request was already up to date.\");\n@@ -126,2 +129,2 @@\n-                    issueTrackerIssue.addComment(messageToPost);\n-                    reply.print(\"The maintainer approval request has been created successfully! Please wait for maintainers to process this request.\");\n+                    Comment comment = issueTrackerIssue.addComment(messageToPost);\n+                    reply.println(\"The approval [request](\" + issueTrackerIssue.commentUrl(comment) + \") has been created successfully.\");\n@@ -129,0 +132,1 @@\n+                issueTrackerIssue.addLabel(requestLabel);\n@@ -133,1 +137,1 @@\n-    static Optional<Issue> getIssue(String issueId, PullRequest pr, List<Comment> allComments, PrintWriter reply) {\n+    private Optional<Issue> getIssue(String issueId, PullRequest pr, List<Comment> allComments, PrintWriter reply) {\n@@ -146,1 +150,1 @@\n-                reply.print(\"There is no issue associated with this pull request.\");\n+                reply.println(\"There is no issue associated with this pull request.\");\n@@ -149,1 +153,1 @@\n-                reply.print(\"There are multiple issues associated with this pull request. Please specify an issue ID in your command.\");\n+                reply.println(\"There are multiple issues associated with this pull request, you need to request approval for each one individually.\");\n@@ -155,1 +159,1 @@\n-            reply.print(\"Can only request approval for issues that this pr solves.\");\n+            reply.println(\"Approval can only be requested for issues that this pull request solves.\");\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/ApprovalCommand.java","additions":25,"deletions":21,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import org.openjdk.skara.bots.common.SolvesTracker;\n@@ -27,0 +28,1 @@\n+import org.openjdk.skara.vcs.openjdk.Issue;\n@@ -29,0 +31,1 @@\n+import java.util.ArrayList;\n@@ -30,0 +33,1 @@\n+import java.util.Optional;\n@@ -53,1 +57,1 @@\n-            reply.println(\"Only integrators of this repo are allowed to issue the `\/approve` command.\");\n+            reply.println(\"Only integrators for this repository are allowed to issue the `\/approve` command.\");\n@@ -58,2 +62,6 @@\n-        if (approval == null || !approval.needsApproval(targetRef)) {\n-            reply.println(\"This target branch doesn't need maintainer approval.\");\n+        if (approval == null) {\n+            reply.println(\"Changes in this repository do not require maintainer approval.\");\n+            return;\n+        }\n+        if (!approval.needsApproval(targetRef)) {\n+            reply.println(\"Changes to branch \" + pr.targetRef() + \" do not require maintainer approval\");\n@@ -71,2 +79,2 @@\n-        var issueOpt = ApprovalCommand.getIssue(issueId, pr, allComments, reply);\n-        if (issueOpt.isEmpty()) {\n+        var issues = getIssues(issueId, pr, allComments, reply);\n+        if (issues.isEmpty()) {\n@@ -75,1 +83,7 @@\n-        var issue = issueOpt.get();\n+        reply.println();\n+        for (var issue : issues) {\n+            reply.print(issue.id() + \": \");\n+            if (issue.project().isPresent() && !issue.project().get().equalsIgnoreCase(issueProject.name())) {\n+                reply.println(\"Can only approve issues in the \" + issueProject.name() + \" project.\");\n+                continue;\n+            }\n@@ -77,4 +91,5 @@\n-        if (issue.project().isPresent() && !issue.project().get().equalsIgnoreCase(issueProject.name())) {\n-            reply.print(\"Can only approve issues in \" + issueProject.name() + \"!\");\n-            return;\n-        }\n+            var issueTrackerIssueOpt = issueProject.issue(issue.shortId());\n+            if (issueTrackerIssueOpt.isEmpty()) {\n+                reply.println(\"Can not find \" + issue.id() + \" in the \" + issueProject.name() + \" project.\");\n+                continue;\n+            }\n@@ -82,4 +97,20 @@\n-        var issueTrackerIssueOpt = issueProject.issue(issue.shortId());\n-        if (issueTrackerIssueOpt.isEmpty()) {\n-            reply.print(\"Can not find \" + issue.id() + \" in \" + issueProject.name() + \".\");\n-            return;\n+            var issueTrackerIssue = issueTrackerIssueOpt.get();\n+            var approvedLabel = approval.approvedLabel(targetRef);\n+            var rejectedLabel = approval.rejectedLabel(targetRef);\n+            var requestLabel = approval.requestedLabel(targetRef);\n+            var labels = issueTrackerIssue.labelNames();\n+\n+            if (!labels.contains(requestLabel)) {\n+                reply.println(\"There is no maintainer approval request for this issue.\");\n+                continue;\n+            }\n+\n+            if (option.equals(\"yes\")) {\n+                issueTrackerIssue.removeLabel(rejectedLabel);\n+                issueTrackerIssue.addLabel(approvedLabel);\n+                reply.println(\"The approval request has been approved.\");\n+            } else if (option.equals(\"no\")) {\n+                issueTrackerIssue.removeLabel(approvedLabel);\n+                issueTrackerIssue.addLabel(rejectedLabel);\n+                reply.println(\"The approval request has been rejected.\");\n+            }\n@@ -87,12 +118,28 @@\n-        var issueTrackerIssue = issueTrackerIssueOpt.get();\n-        var approvedLabel = approval.approvedLabel(targetRef);\n-        var rejectedLabel = approval.rejectedLabel(targetRef);\n-\n-        if (option.equals(\"yes\")) {\n-            issueTrackerIssue.removeLabel(rejectedLabel);\n-            issueTrackerIssue.addLabel(approvedLabel);\n-            reply.print(\"The maintainer approval request has been approved!\");\n-        } else if (option.equals(\"no\")) {\n-            issueTrackerIssue.removeLabel(approvedLabel);\n-            issueTrackerIssue.addLabel(rejectedLabel);\n-            reply.print(\"The maintainer approval request has been rejected!\");\n+    }\n+\n+    private List<Issue> getIssues(String issueId, PullRequest pr, List<Comment> allComments, PrintWriter reply) {\n+        var titleIssue = Issue.fromStringRelaxed(pr.title());\n+        var issueIds = new ArrayList<String>();\n+        titleIssue.ifPresent(value -> issueIds.add(value.shortId()));\n+        List<Issue> ret = new ArrayList<>();\n+        issueIds.addAll(SolvesTracker.currentSolved(pr.repository().forge().currentUser(), allComments, pr.title())\n+                .stream()\n+                .map(Issue::shortId)\n+                .toList());\n+\n+        if (issueId != null) {\n+            var issue = new Issue(issueId, null);\n+            if (issueIds.contains(issue.shortId())) {\n+                ret.add(issue);\n+            } else {\n+                reply.println(\"You can only handle approval request in issues that this pull request solves.\");\n+            }\n+            \/\/ If issueId is not specified, then handle all the issues associated with this pull request\n+        } else {\n+            if (issueIds.size() == 0) {\n+                reply.println(\"There is no issue associated with this pull request.\");\n+            } else {\n+                ret.addAll(issueIds.stream()\n+                        .map(id -> new Issue(id, null))\n+                        .toList());\n+            }\n@@ -100,0 +147,1 @@\n+        return ret;\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/ApproveCommand.java","additions":74,"deletions":26,"binary":false,"changes":100,"status":"modified"},{"patch":"@@ -1526,2 +1526,4 @@\n-                \" This change is now ready for you to apply for maintainer [approval](\" + approval.documentLink() + \").\\n\" +\n-                \"To learn how to apply for approval using the Skara command, please refer to this [link](\" + approval.commandLink() + \").\" +\n+                \" This change is now ready for you to apply for maintainer [approval](\" + approval.documentLink() + \"). \" +\n+                \"This can be done directly in each associated issue or by using the \" +\n+                \"[\/approval](https:\/\/wiki.openjdk.org\/display\/SKARA\/Pull+Request+Commands#PullRequestCommands-\/approval) \" +\n+                \"command\" +\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -234,2 +234,1 @@\n-                String commandLink = approvalJSON.get(\"commandLink\").asString();\n-                Approval approval = new Approval(prefix, request, approved, rejected, documentLink, commandLink);\n+                Approval approval = new Approval(prefix, request, approved, rejected, documentLink);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBotFactory.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-                    \"-critical-rejected\", \"https:\/\/example.com\", \"https:\/\/command.com\");\n+                    \"-critical-rejected\", \"https:\/\/example.com\");\n@@ -100,1 +100,1 @@\n-            assertLastCommentContains(pr, \"Can only request approval for issues in TEST!\");\n+            assertLastCommentContains(pr, \"Approval can only be request for issues in the TEST project.\");\n@@ -105,1 +105,13 @@\n-            assertLastCommentContains(pr, \"The maintainer approval request has been created successfully! Please wait for maintainers to process this request.\");\n+            assertLastCommentContains(pr, \"The approval [request](http:\/\/localhost\/project\/testTEST-1?focusedCommentId=0) has been created successfully.\");\n+            TestBotRunner.runPeriodicItems(issueBot);\n+            assertTrue(pr.store().labelNames().contains(APPROVAL_LABEL));\n+\n+            pr.addComment(\"\/approval cancel\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertLastCommentContains(pr, \"The approval request has been cancelled successfully.\");\n+            TestBotRunner.runPeriodicItems(issueBot);\n+            assertFalse(pr.store().labelNames().contains(APPROVAL_LABEL));\n+\n+            pr.addComment(\"\/approval 1 request\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertLastCommentContains(pr, \"The approval [request](http:\/\/localhost\/project\/testTEST-1?focusedCommentId=0) has been created successfully.\");\n@@ -111,1 +123,1 @@\n-            assertLastCommentContains(pr, \"The maintainer approval request has been updated successfully! Please wait for maintainers to process this request.\");\n+            assertLastCommentContains(pr, \"The approval [request](http:\/\/localhost\/project\/testTEST-1?focusedCommentId=0) has been updated successfully.\");\n@@ -115,0 +127,4 @@\n+            pr.addComment(\"\/approval 1 request new reason line1\\nnew reason line2\\nnew reason line3\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertLastCommentContains(pr, \"The approval request was already up to date.\");\n+\n@@ -122,1 +138,1 @@\n-            assertLastCommentContains(pr, \"The maintainer approval request has been approved!\");\n+            assertLastCommentContains(pr, \"1: The approval request has been approved.\");\n@@ -126,1 +142,1 @@\n-            assertLastCommentContains(pr, \"The maintainer approval request has been approved!\");\n+            assertLastCommentContains(pr, \"1: The approval request has been approved.\");\n@@ -136,1 +152,97 @@\n-            assertLastCommentContains(pr, \"The request has been processed by maintainer! Could not cancel the request now.\");\n+            assertLastCommentContains(pr, \"The request has already been handled by a maintainer and can no longer be canceled.\");\n+        }\n+    }\n+\n+    @Test\n+    void multipleIssues(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var bot = credentials.getHostedRepository();\n+            var issueProject = credentials.getIssueProject();\n+            var issue1 = issueProject.createIssue(\"This is an issue\", List.of(), Map.of());\n+            issue1.setProperty(\"issuetype\", JSON.of(\"Bug\"));\n+            issue1.setProperty(\"priority\", JSON.of(\"4\"));\n+            var issue2 = issueProject.createIssue(\"This is an issue 2\", List.of(), Map.of());\n+            issue1.setProperty(\"issuetype\", JSON.of(\"Bug\"));\n+            issue1.setProperty(\"priority\", JSON.of(\"2\"));\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addReviewer(reviewer.forge().currentUser().id())\n+                    .addCommitter(author.forge().currentUser().id());\n+            Map<String, List<PRRecord>> issuePRMap = new HashMap<>();\n+            Approval approval = new Approval(\"\", \"-critical-request\", \"-critical-approved\",\n+                    \"-critical-rejected\", \"https:\/\/example.com\");\n+            approval.addBranchPrefix(Pattern.compile(\"jdk20.0.1\"), \"CPU23_04\");\n+            approval.addBranchPrefix(Pattern.compile(\"jdk20.0.2\"), \"CPU23_05\");\n+\n+            var prBot = PullRequestBot.newBuilder()\n+                    .repo(bot)\n+                    .issueProject(issueProject)\n+                    .censusRepo(censusBuilder.build())\n+                    .issuePRMap(issuePRMap)\n+                    .approval(approval)\n+                    .integrators(Set.of(reviewer.forge().currentUser().username()))\n+                    .build();\n+            var issueBot = new IssueBot(issueProject, List.of(author), Map.of(bot.name(), prBot), issuePRMap);\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.authenticatedUrl(), \"jdk20.0.1\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.authenticatedUrl(), \"edit\", true);\n+\n+            var pr = credentials.createPullRequest(author, \"jdk20.0.1\", \"edit\", issue1.id() + \": This is an issue\");\n+\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertFalse(pr.store().labelNames().contains(\"ready\"));\n+\n+            pr.addComment(\"\/issue \" + issue2.id());\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertLastCommentContains(pr, \"Adding additional issue to issue list: `2: This is an issue 2`.\");\n+\n+            var reviewerPr = reviewer.pullRequest(pr.id());\n+            reviewerPr.addReview(Review.Verdict.APPROVED, \"LGTM\");\n+            reviewerPr.addComment(\"\/approve yes\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertLastCommentContains(pr, \"1: There is no maintainer approval request for this issue.\");\n+            assertLastCommentContains(pr, \"2: There is no maintainer approval request for this issue.\");\n+\n+            reviewerPr.addComment(\"\/approve JDK-1 yes\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertLastCommentContains(pr, \"JDK-1: Can only approve issues in the TEST project.\");\n+\n+            pr.addComment(\"\/approval 1 request my reason\");\n+            pr.addComment(\"\/approval 2 request my reason\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            TestBotRunner.runPeriodicItems(issueBot);\n+            assertLastCommentContains(pr, \"The approval [request](http:\/\/localhost\/project\/testTEST-2?focusedCommentId=0) has been created successfully.\");\n+\n+            reviewerPr.addComment(\"\/approve 1 no\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            TestBotRunner.runPeriodicItems(issueBot);\n+            assertLastCommentContains(pr, \"1: The approval request has been rejected.\");\n+\n+            reviewerPr.addComment(\"\/approve no\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            TestBotRunner.runPeriodicItems(issueBot);\n+            assertLastCommentContains(pr, \"1: The approval request has been rejected.\");\n+            assertLastCommentContains(pr, \"2: The approval request has been rejected.\");\n+\n+            reviewerPr.addComment(\"\/approve 1 yes\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            TestBotRunner.runPeriodicItems(issueBot);\n+            assertLastCommentContains(pr, \"1: The approval request has been approved.\");\n+\n+            reviewerPr.addComment(\"\/approve yes\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertLastCommentContains(pr, \"1: The approval request has been approved.\");\n+            assertLastCommentContains(pr, \"2: The approval request has been approved.\");\n+            TestBotRunner.runPeriodicItems(issueBot);\n+            assertTrue(pr.labelNames().contains(\"ready\"));\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/ApprovalAndApproveCommandTests.java","additions":119,"deletions":7,"binary":false,"changes":126,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-                \"jdk17u-fix-no\", \"https:\/\/example.com\", \"https:\/\/command.com\");\n+                \"jdk17u-fix-no\", \"https:\/\/example.com\");\n@@ -43,1 +43,1 @@\n-                \"https:\/\/example.com\", \"https:\/\/command.com\");\n+                \"https:\/\/example.com\");\n@@ -50,1 +50,1 @@\n-                \"-critical-rejected\", \"https:\/\/example.com\", \"https:\/\/command.com\");\n+                \"-critical-rejected\", \"https:\/\/example.com\");\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/ApprovalTests.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -321,1 +321,1 @@\n-                            \"jdk17u-fix-no\", \"https:\/\/example.com\", \"https:\/\/command.com\"))\n+                            \"jdk17u-fix-no\", \"https:\/\/example.com\"))\n@@ -368,1 +368,1 @@\n-                    \"-critical-rejected\", \"https:\/\/example.com\", \"https:\/\/command.com\");\n+                    \"-critical-rejected\", \"https:\/\/example.com\");\n@@ -410,2 +410,4 @@\n-            assertEquals(\"⚠️  @user1 This change is now ready for you to apply for maintainer [approval](https:\/\/example.com).\" +\n-                            \"\\nTo learn how to apply for approval using the Skara command, please refer to this [link](https:\/\/command.com).<!-- PullRequestBot approval needed comment -->\"\n+            assertEquals(\"⚠️  @user1 This change is now ready for you to apply for maintainer [approval](https:\/\/example.com). \" +\n+                            \"This can be done directly in each associated issue or by using the \" +\n+                            \"[\/approval](https:\/\/wiki.openjdk.org\/display\/SKARA\/Pull+Request+Commands#PullRequestCommands-\/approval) command\" +\n+                            \"<!-- PullRequestBot approval needed comment -->\"\n@@ -421,2 +423,5 @@\n-            assertEquals(\"⚠️  @user1 This change is now ready for you to apply for maintainer [approval](https:\/\/example.com).\" +\n-                            \"\\nTo learn how to apply for approval using the Skara command, please refer to this [link](https:\/\/command.com).<!-- PullRequestBot approval needed comment -->\"\n+            assertTrue(pr.store().body().contains(\"[TEST-1](http:\/\/localhost\/project\/testTEST-1) needs maintainer approval\"));\n+            assertEquals(\"⚠️  @user1 This change is now ready for you to apply for maintainer [approval](https:\/\/example.com). \" +\n+                            \"This can be done directly in each associated issue or by using the \" +\n+                            \"[\/approval](https:\/\/wiki.openjdk.org\/display\/SKARA\/Pull+Request+Commands#PullRequestCommands-\/approval) command\" +\n+                            \"<!-- PullRequestBot approval needed comment -->\"\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/IssueBotTests.java","additions":11,"deletions":6,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -152,1 +152,0 @@\n-                            \"commandLink\": \"https:\/\/command.com\"\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBotFactoryTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -159,2 +159,0 @@\n-    URI commentUrl(Comment comment);\n-\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/PullRequest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -210,0 +210,2 @@\n+\n+    URI commentUrl(Comment comment);\n","filename":"issuetracker\/src\/main\/java\/org\/openjdk\/skara\/issuetracker\/Issue.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -171,0 +171,5 @@\n+    @Override\n+    public URI commentUrl(Comment comment) {\n+        return URIBuilder.base(webUrl()).appendPath(\"?focusedCommentId=\" + comment.id()).build();\n+    }\n+\n","filename":"issuetracker\/src\/main\/java\/org\/openjdk\/skara\/issuetracker\/jira\/JiraIssue.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -143,0 +143,5 @@\n+    @Override\n+    public URI commentUrl(Comment comment) {\n+        return URIBuilder.base(webUrl()).appendPath(\"?focusedCommentId=\" + comment.id()).build();\n+    }\n+\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestIssue.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}