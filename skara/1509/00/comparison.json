{"files":[{"patch":"@@ -42,1 +42,1 @@\n-    private final static Pattern futureUpdatePattern = Pattern.compile(\"((openjdk)?[1-9][0-9]*u)(-([a-z0-9]+))?$\");\n+    private final static Pattern futureUpdatePattern = Pattern.compile(\"(([a-z])*[1-9][0-9]*u)(-([a-z0-9]+))?$\");\n@@ -91,3 +91,3 @@\n-            if (\"jdk\".equals(raw) && \"cpu\".equals(optional)) {\n-                \/\/ Special case of jdk-cpu. This symbolic version has no set numbers\n-                finalComponents.add(\"jdk\");\n+            if (\"cpu\".equals(optional) && raw.matches(\"[a-z]+\")) {\n+                \/\/ Special case of *-cpu. This symbolic version has no set numbers\n+                finalComponents.add(raw);\n","filename":"jbs\/src\/main\/java\/org\/openjdk\/skara\/jbs\/JdkVersion.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -88,0 +88,3 @@\n+        var jfx20uCpu = from(\"jfx20u-cpu\");\n+        assertEquals(List.of(\"jfx20u\"), jfx20uCpu.components());\n+        assertEquals(\"cpu\", jfx20uCpu.opt().orElseThrow());\n@@ -97,0 +100,7 @@\n+    @Test\n+    void jfxCpu() {\n+        var jfxCpu = from(\"jfx-cpu\");\n+        assertEquals(List.of(\"jfx\"), jfxCpu.components());\n+        assertEquals(\"cpu\", jfxCpu.opt().orElseThrow());\n+    }\n+\n@@ -136,1 +146,0 @@\n-        assertEquals(Optional.empty(), JdkVersion.parse(\"foobar7u\"));\n","filename":"jbs\/src\/test\/java\/org\/openjdk\/skara\/jbs\/JdkVersionTests.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"}]}