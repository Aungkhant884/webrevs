{"files":[{"patch":"@@ -46,1 +46,1 @@\n-    private final Pattern metadataComments = Pattern.compile(\"<!-- (?:(add|remove) (?:contributor|reviewer))|(?:summary: ')|(?:solves: ')|(?:additional required reviewers)|(?:jep: ')|(?:csr: ')\");\n+    private final Pattern metadataComments = Pattern.compile(\"<!-- (?:backport)|(?:(add|remove) (?:contributor|reviewer))|(?:summary: ')|(?:solves: ')|(?:additional required reviewers)|(?:jep: ')|(?:csr: ')\");\n@@ -57,1 +57,0 @@\n-\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckWorkItem.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1579,0 +1579,119 @@\n+\n+    @Test\n+    void updateOriginalHashFromWrongToCorrect(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+\n+            var author = credentials.getHostedRepository();\n+            var integrator = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var issues = credentials.getIssueProject();\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addCommitter(author.forge().currentUser().id())\n+                    .addReviewer(integrator.forge().currentUser().id())\n+                    .addReviewer(reviewer.forge().currentUser().id());\n+            var bot = PullRequestBot.newBuilder()\n+                    .repo(integrator)\n+                    .censusRepo(censusBuilder.build())\n+                    .issueProject(issues)\n+                    .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            var releaseBranch = localRepo.branch(masterHash, \"release\");\n+            localRepo.checkout(releaseBranch);\n+            var newFile = localRepo.root().resolve(\"a_new_file.txt\");\n+            Files.writeString(newFile, \"hello\");\n+            localRepo.add(newFile);\n+            var issue1 = credentials.createIssue(issues, \"An issue\");\n+            var issue1Number = issue1.id().split(\"-\")[1];\n+            var originalMessage = issue1Number + \": An issue\\n\" +\n+                    \"\\n\" +\n+                    \"Reviewed-by: integrationreviewer2\";\n+            var releaseHash = localRepo.commit(originalMessage, \"integrationcommitter1\", \"integrationcommitter1@openjdk.org\");\n+            localRepo.push(releaseHash, author.url(), \"refs\/heads\/release\", true);\n+\n+            var newFileSZ = localRepo.root().resolve(\"a_new_file2.txt\");\n+            Files.writeString(newFileSZ, \"hello2\");\n+            localRepo.add(newFileSZ);\n+            var releaseHash2 =localRepo.commit(originalMessage, \"integrationcommitter1\", \"integrationcommitter1@openjdk.org\");\n+            localRepo.push(releaseHash2, author.url(), \"refs\/heads\/release\", true);\n+\n+\n+            \/\/ \"backport\" the new file to the master branch\n+            localRepo.checkout(localRepo.defaultBranch());\n+            var editBranch = localRepo.branch(masterHash, \"edit\");\n+            localRepo.checkout(editBranch);\n+            var newFile2 = localRepo.root().resolve(\"a_new_file.txt\");\n+            Files.writeString(newFile2, \"hello\");\n+            localRepo.add(newFile2);\n+            var editHash = localRepo.commit(\"Backport\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(editHash, author.url(), \"refs\/heads\/edit\", true);\n+            \/\/ create a pr with wrong hash\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"Backport \" + releaseHash2.hex());\n+\n+            \/\/ The bot should reply with a backport message\n+            TestBotRunner.runPeriodicItems(bot);\n+            var backportComment = pr.comments().get(0).body();\n+            assertTrue(backportComment.contains(\"This backport pull request has now been updated with issue\"));\n+            assertTrue(backportComment.contains(\"<!-- backport \" + releaseHash2.hex() + \" -->\"));\n+            assertEquals(issue1Number + \": An issue\", pr.store().title());\n+            assertTrue(pr.store().labelNames().contains(\"backport\"));\n+            \/\/ The pr must not contain clean label\n+            assertFalse(pr.store().labelNames().contains(\"clean\"));\n+\n+            \/\/ correct the Backport original commit Hash\n+            pr.setTitle(\"Backport \"+releaseHash.hex());\n+            TestBotRunner.runPeriodicItems(bot);\n+            var backportComment2 = pr.comments().get(1).body();\n+            assertTrue(backportComment2.contains(\"This backport pull request has now been updated with issue\"));\n+            assertTrue(backportComment2.contains(\"<!-- backport \" + releaseHash.hex() + \" -->\"));\n+            assertEquals(issue1Number + \": An issue\", pr.store().title());\n+            assertTrue(pr.store().labelNames().contains(\"backport\"));\n+            \/\/ The pr must contain clean label\n+            assertTrue(pr.store().labelNames().contains(\"clean\"));\n+\n+            \/\/ Approve PR and re-run bot\n+            var prAsReviewer = reviewer.pullRequest(pr.id());\n+            prAsReviewer.addReview(Review.Verdict.APPROVED, \"Looks good\");\n+            TestBotRunner.runPeriodicItems(bot);\n+            assertLastCommentContains(pr, \"This change now passes all *automated* pre-integration checks\");\n+\n+            \/\/ Integrate\n+            author.pullRequest(pr.id());\n+            pr.addComment(\"\/integrate\");\n+            TestBotRunner.runPeriodicItems(bot);\n+\n+            \/\/ Find the commit\n+            assertLastCommentContains(pr, \"Pushed as commit\");\n+\n+            String hex = null;\n+            var comment = pr.comments().get(pr.comments().size() - 1);\n+            var lines = comment.body().split(\"\\n\");\n+            var pattern = Pattern.compile(\".* Pushed as commit ([0-9a-z]{40}).*\");\n+            for (var line : lines) {\n+                var m = pattern.matcher(line);\n+                if (m.matches()) {\n+                    hex = m.group(1);\n+                    break;\n+                }\n+            }\n+            assertNotNull(hex);\n+            assertEquals(40, hex.length());\n+            localRepo.checkout(localRepo.defaultBranch());\n+            localRepo.pull(author.url().toString(), \"master\", false);\n+            var commit = localRepo.lookup(new Hash(hex)).orElseThrow();\n+\n+            var message = CommitMessageParsers.v1.parse(commit);\n+            assertEquals(1, message.issues().size());\n+            assertEquals(\"An issue\", message.issues().get(0).description());\n+            assertEquals(List.of(\"integrationreviewer3\"), message.reviewers());\n+            assertEquals(Optional.of(releaseHash), message.original());\n+            assertEquals(List.of(), message.contributors());\n+            assertEquals(List.of(), message.summaries());\n+            assertEquals(List.of(), message.additional());\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/BackportTests.java","additions":119,"deletions":0,"binary":false,"changes":119,"status":"modified"}]}