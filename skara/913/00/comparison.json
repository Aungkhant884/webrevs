{"files":[{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bots.pr;\n+\n+import org.openjdk.skara.host.HostUser;\n+\n+import java.util.*;\n+import java.util.regex.Pattern;\n+\n+public class CommandExtractor {\n+    private static final Pattern commandPattern = Pattern.compile(\"^\\\\s*\/([A-Za-z]+)(?:\\\\s+(.*))?\");\n+\n+    private static String formatId(String baseId, int subId) {\n+        if (subId > 0) {\n+            return String.format(\"%s:%d\", baseId, subId);\n+        } else {\n+            return baseId;\n+        }\n+    }\n+\n+    static List<CommandInvocation> extractCommands(Map<String, CommandHandler> commandHandlers, String text, String baseId, HostUser user) {\n+        var ret = new ArrayList<CommandInvocation>();\n+        CommandHandler multiLineHandler = null;\n+        List<String> multiLineBuffer = null;\n+        String multiLineCommand = null;\n+        int subId = 0;\n+        for (var line : text.split(\"\\\\R\")) {\n+            var commandMatcher = commandPattern.matcher(line);\n+            if (commandMatcher.matches()) {\n+                if (multiLineHandler != null) {\n+                    ret.add(new CommandInvocation(formatId(baseId, subId++), user, multiLineHandler, multiLineCommand, String.join(\"\\n\", multiLineBuffer)));\n+                    multiLineHandler = null;\n+                }\n+                var command = commandMatcher.group(1).toLowerCase();\n+                var handler = commandHandlers.get(command);\n+                if (handler != null && handler.multiLine()) {\n+                    multiLineHandler = handler;\n+                    multiLineBuffer = new ArrayList<>();\n+                    if (commandMatcher.group(2) != null) {\n+                        multiLineBuffer.add(commandMatcher.group(2));\n+                    }\n+                    multiLineCommand = command;\n+                } else {\n+                    ret.add(new CommandInvocation(formatId(baseId, subId++), user, handler, command, commandMatcher.group(2)));\n+                }\n+            } else {\n+                if (multiLineHandler != null) {\n+                    multiLineBuffer.add(line);\n+                }\n+            }\n+        }\n+        if (multiLineHandler != null) {\n+            ret.add(new CommandInvocation(formatId(baseId, subId), user, multiLineHandler, multiLineCommand, String.join(\"\\n\", multiLineBuffer)));\n+        }\n+        return ret;\n+    }\n+\n+}\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CommandExtractor.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"},{"patch":"@@ -27,0 +27,1 @@\n+import org.openjdk.skara.vcs.*;\n@@ -33,1 +34,0 @@\n-    void handle(PullRequestBot bot, PullRequest pr, CensusInstance censusInstance, Path scratchPath, CommandInvocation command, List<Comment> allComments, PrintWriter reply);\n@@ -36,0 +36,6 @@\n+    default void handle(PullRequestBot bot, PullRequest pr, CensusInstance censusInstance, Path scratchPath, CommandInvocation command, List<Comment> allComments, PrintWriter reply)\n+    {\n+    }\n+    default void handleCommit(PullRequestBot bot, Hash hash, Path scratchPath, CommandInvocation command, List<Comment> allComments, PrintWriter reply) {\n+    }\n+\n@@ -42,0 +48,6 @@\n+    default boolean allowedInCommit() {\n+        return false;\n+    }\n+    default boolean allowedInPullRequest() {\n+        return true;\n+    }\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CommandHandler.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -27,2 +27,2 @@\n-import org.openjdk.skara.host.HostUser;\n-import org.openjdk.skara.issuetracker.Comment;\n+import org.openjdk.skara.issuetracker.*;\n+import org.openjdk.skara.vcs.Hash;\n@@ -41,1 +41,0 @@\n-    private static final Pattern commandPattern = Pattern.compile(\"^\\\\s*\/([A-Za-z]+)(?:\\\\s+(.*))?\");\n@@ -45,0 +44,1 @@\n+    private final static Pattern pushedPattern = Pattern.compile(\"Pushed as commit ([a-f0-9]{40})\\\\.\");\n@@ -67,0 +67,1 @@\n+                                   .filter(entry -> entry.getValue().allowedInPullRequest())\n@@ -73,0 +74,12 @@\n+        @Override\n+        public void handleCommit(PullRequestBot bot, Hash hash, Path scratchPath, CommandInvocation command, List<Comment> allComments, PrintWriter reply) {\n+            reply.println(\"Available commands:\");\n+            Stream.concat(\n+                    commandHandlers.entrySet().stream()\n+                                   .filter(entry -> entry.getValue().allowedInCommit())\n+                                   .map(entry -> entry.getKey() + \" - \" + entry.getValue().description()),\n+                    bot.externalCommands().entrySet().stream()\n+                       .map(entry -> entry.getKey() + \" - \" + entry.getValue())\n+            ).sorted().forEachOrdered(c -> reply.println(\" * \" + c));\n+        }\n+\n@@ -77,0 +90,5 @@\n+\n+        @Override\n+        public boolean allowedInCommit() {\n+            return true;\n+        }\n@@ -83,26 +101,0 @@\n-    private List<AbstractMap.SimpleEntry<String, Comment>> findCommandComments(List<Comment> comments) {\n-        var self = pr.repository().forge().currentUser();\n-        var handled = comments.stream()\n-                              .filter(comment -> comment.author().equals(self))\n-                              .map(comment -> commandReplyPattern.matcher(comment.body()))\n-                              .filter(Matcher::find)\n-                              .map(matcher -> matcher.group(1))\n-                              .collect(Collectors.toSet());\n-\n-        return comments.stream()\n-                       .filter(comment -> !comment.author().equals(self) || comment.body().endsWith(selfCommandMarker))\n-                       .map(comment -> new AbstractMap.SimpleEntry<>(comment, commandPattern.matcher(comment.body())))\n-                       .filter(entry -> entry.getValue().find())\n-                       .filter(entry -> !handled.contains(entry.getKey().id()))\n-                       .map(entry -> new AbstractMap.SimpleEntry<>(entry.getValue().group(1), entry.getKey()))\n-                       .collect(Collectors.toList());\n-    }\n-\n-    private String formatId(String baseId, int subId) {\n-        if (subId > 0) {\n-            return String.format(\"%s:%d\", baseId, subId);\n-        } else {\n-            return baseId;\n-        }\n-    }\n-\n@@ -121,40 +113,0 @@\n-    private List<CommandInvocation> extractCommands(String text, String baseId, HostUser user) {\n-        var ret = new ArrayList<CommandInvocation>();\n-        CommandHandler multiLineHandler = null;\n-        List<String> multiLineBuffer = null;\n-        String multiLineCommand = null;\n-        int subId = 0;\n-        for (var line : text.split(\"\\\\R\")) {\n-            var commandMatcher = commandPattern.matcher(line);\n-            if (commandMatcher.matches()) {\n-                if (multiLineHandler != null) {\n-                    ret.add(new CommandInvocation(formatId(baseId, subId++), user, multiLineHandler, multiLineCommand, String.join(\"\\n\", multiLineBuffer)));\n-                    multiLineHandler = null;\n-                }\n-                var command = commandMatcher.group(1).toLowerCase();\n-                var handler = commandHandlers.get(command);\n-                if (handler != null && baseId.equals(\"body\") && !handler.allowedInBody()) {\n-                    handler = new InvalidBodyCommandHandler();\n-                }\n-                if (handler != null && handler.multiLine()) {\n-                    multiLineHandler = handler;\n-                    multiLineBuffer = new ArrayList<>();\n-                    if (commandMatcher.group(2) != null) {\n-                        multiLineBuffer.add(commandMatcher.group(2));\n-                    }\n-                    multiLineCommand = command;\n-                } else {\n-                    ret.add(new CommandInvocation(formatId(baseId, subId++), user, handler, command, commandMatcher.group(2)));\n-                }\n-            } else {\n-                if (multiLineHandler != null) {\n-                    multiLineBuffer.add(line);\n-                }\n-            }\n-        }\n-        if (multiLineHandler != null) {\n-            ret.add(new CommandInvocation(formatId(baseId, subId), user, multiLineHandler, multiLineCommand, String.join(\"\\n\", multiLineBuffer)));\n-        }\n-        return ret;\n-    }\n-\n@@ -164,1 +116,1 @@\n-        var allCommands = Stream.concat(extractCommands(body, \"body\", pr.author()).stream(),\n+        var allCommands = Stream.concat(CommandExtractor.extractCommands(commandHandlers, body, \"body\", pr.author()).stream(),\n@@ -167,1 +119,1 @@\n-                                                .flatMap(c -> extractCommands(c.body(), c.id(), c.author()).stream()))\n+                                                .flatMap(c -> CommandExtractor.extractCommands(commandHandlers, c.body(), c.id(), c.author()).stream()))\n@@ -183,1 +135,13 @@\n-    private void processCommand(PullRequest pr, CensusInstance censusInstance, Path scratchPath, CommandInvocation command, List<Comment> allComments) {\n+    private Optional<Hash> resultingCommitHash(List<Comment> allComments) {\n+        return allComments.stream()\n+                 .filter(comment -> comment.author().id().equals(pr.repository().forge().currentUser().id()))\n+                 .map(Comment::body)\n+                 .map(pushedPattern::matcher)\n+                 .filter(Matcher::find)\n+                 .map(m -> m.group(1))\n+                 .map(Hash::new)\n+                 .findAny();\n+    }\n+\n+    private void processCommand(PullRequest pr, CensusInstance censusInstance, Path scratchPath, CommandInvocation command, List<Comment> allComments,\n+                                boolean isCommit) {\n@@ -194,1 +158,27 @@\n-            handler.get().handle(bot, pr, censusInstance, scratchPath, command, allComments, printer);\n+            if (isCommit) {\n+                if (handler.get().allowedInCommit()) {\n+                    var hash = resultingCommitHash(allComments);\n+                    if (hash.isPresent()) {\n+                        handler.get().handleCommit(bot, hash.get(), scratchPath, command, allComments, printer);\n+                    } else {\n+                        printer.print(\"The command `\");\n+                        printer.print(command.name());\n+                        printer.println(\"` can only be used in a pull request that has been integrated.\");\n+                    }\n+                } else {\n+                    printer.print(\"The command `\");\n+                    printer.print(command.name());\n+                    printer.println(\"` can only be used in open pull requests.\");\n+                }\n+            } else {\n+                if (handler.get().allowedInPullRequest()) {\n+                    if (command.id().startsWith(\"body\") && !handler.get().allowedInBody()) {\n+                        handler = Optional.of(new CommandWorkItem.InvalidBodyCommandHandler());\n+                    }\n+                    handler.get().handle(bot, pr, censusInstance, scratchPath, command, allComments, printer);\n+                } else {\n+                    printer.print(\"The command `\");\n+                    printer.print(command.name());\n+                    printer.println(\"` can only be used in a pull request that has not yet been integrated.\");\n+                }\n+            }\n@@ -208,5 +198,0 @@\n-        if (pr.labels().contains(\"integrated\")) {\n-            log.info(\"Skip checking for commands in integrated PR\");\n-            return List.of();\n-        }\n-\n@@ -215,0 +200,1 @@\n+\n@@ -221,1 +207,6 @@\n-            return List.of(new LabelerWorkItem(bot, updatedPR, errorHandler));\n+            if (!pr.labels().contains(\"integrated\")) {\n+                return List.of(new LabelerWorkItem(bot, updatedPR, errorHandler));\n+            } else {\n+                log.info(\"Skip updating labels in integrated PR\");\n+                return List.of();\n+            }\n@@ -231,1 +222,0 @@\n-        processCommand(pr, census, scratchPath.resolve(\"pr\").resolve(\"command\"), command, comments);\n@@ -233,2 +223,4 @@\n-        \/\/ Must re-fetch PR after running the command, the command might have updated the PR\n-        var updatedPR = pr.repository().pullRequest(pr.id());\n+        if (!pr.labels().contains(\"integrated\")) {\n+            processCommand(pr, census, scratchPath.resolve(\"pr\").resolve(\"command\"), command, comments, false);\n+            \/\/ Must re-fetch PR after running the command, the command might have updated the PR\n+            var updatedPR = pr.repository().pullRequest(pr.id());\n@@ -236,2 +228,6 @@\n-        \/\/ Run another check to reflect potential changes from commands\n-        return List.of(new CheckWorkItem(bot, updatedPR, errorHandler));\n+            \/\/ Run another check to reflect potential changes from commands\n+            return List.of(new CheckWorkItem(bot, updatedPR, errorHandler));\n+        } else {\n+            processCommand(pr, census, scratchPath.resolve(\"pr\").resolve(\"command\"), command, comments, true);\n+            return List.of();\n+        }\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CommandWorkItem.java","additions":80,"deletions":84,"binary":false,"changes":164,"status":"modified"},{"patch":"@@ -0,0 +1,156 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bots.pr;\n+\n+import org.openjdk.skara.bot.WorkItem;\n+import org.openjdk.skara.forge.*;\n+import org.openjdk.skara.issuetracker.Comment;\n+import org.openjdk.skara.vcs.Hash;\n+\n+import java.io.*;\n+import java.nio.file.Path;\n+import java.util.*;\n+import java.util.logging.Logger;\n+import java.util.regex.*;\n+import java.util.stream.*;\n+\n+public class CommitCommandWorkItem implements WorkItem {\n+    private final PullRequestBot bot;\n+    private final CommitComment commitComment;\n+\n+    private static final String commandReplyMarker = \"<!-- Jmerge command reply message (%s) -->\";\n+    private static final Pattern commandReplyPattern = Pattern.compile(\"<!-- Jmerge command reply message \\\\((\\\\S+)\\\\) -->\");\n+\n+    private static final Logger log = Logger.getLogger(\"org.openjdk.skara.bots.pr\");\n+\n+    private static final Map<String, CommandHandler> commandHandlers = Map.ofEntries(\n+            Map.entry(\"help\", new HelpCommand())\n+    );\n+\n+    static class HelpCommand implements CommandHandler {\n+        @Override\n+        public void handleCommit(PullRequestBot bot, Hash hash, Path scratchPath, CommandInvocation command, List<Comment> allComments, PrintWriter reply) {\n+            reply.println(\"Available commands:\");\n+            Stream.concat(\n+                    commandHandlers.entrySet().stream()\n+                                   .map(entry -> entry.getKey() + \" - \" + entry.getValue().description()),\n+                    bot.externalCommands().entrySet().stream()\n+                       .map(entry -> entry.getKey() + \" - \" + entry.getValue())\n+            ).sorted().forEachOrdered(c -> reply.println(\" * \" + c));\n+        }\n+\n+        @Override\n+        public String description() {\n+            return \"shows this text\";\n+        }\n+\n+        @Override\n+        public boolean allowedInCommit() {\n+            return true;\n+        }\n+    }\n+\n+    CommitCommandWorkItem(PullRequestBot bot, CommitComment commitComment) {\n+        this.bot = bot;\n+        this.commitComment = commitComment;\n+    }\n+\n+    @Override\n+    public boolean concurrentWith(WorkItem other) {\n+        if (!(other instanceof CommitCommandWorkItem)) {\n+            return true;\n+        }\n+        CommitCommandWorkItem otherItem = (CommitCommandWorkItem) other;\n+        if (!bot.repo().webUrl().equals(otherItem.bot.repo().webUrl())) {\n+            return true;\n+        }\n+        if (!commitComment.commit().equals(otherItem.commitComment.commit())) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    private Optional<CommandInvocation> nextCommand(List<CommitComment> allComments) {\n+        var self = bot.repo().forge().currentUser();\n+        var command = CommandExtractor.extractCommands(commandHandlers, commitComment.body(),\n+                                                       commitComment.id(), commitComment.author());\n+        if (command.isEmpty()) {\n+            return Optional.empty();\n+        }\n+\n+        var handled = allComments.stream()\n+                              .filter(c -> c.author().equals(self))\n+                              .map(c -> commandReplyPattern.matcher(c.body()))\n+                              .filter(Matcher::find)\n+                              .map(matcher -> matcher.group(1))\n+                              .collect(Collectors.toSet());\n+\n+        if (handled.contains(commitComment.id())) {\n+            return Optional.empty();\n+        } else {\n+            return Optional.of(command.get(0));\n+        }\n+    }\n+\n+    private void processCommand(Path scratchPath, CommandInvocation command, List<CommitComment> allComments) {\n+        var writer = new StringWriter();\n+        var printer = new PrintWriter(writer);\n+\n+        printer.println(String.format(commandReplyMarker, command.id()));\n+\n+        var handler = command.handler();\n+        if (handler.isPresent()) {\n+            if (handler.get().allowedInCommit()) {\n+                var comments = allComments.stream()\n+                                          .map(cc -> (Comment)cc)\n+                                          .collect(Collectors.toList());\n+                handler.get().handleCommit(bot, commitComment.commit(), scratchPath, command, comments, printer);\n+            } else {\n+                printer.print(\"The command `\");\n+                printer.print(command.name());\n+                printer.println(\"` can only be used in pull requests.\");\n+            }\n+        } else {\n+            printer.print(\"Unknown command `\");\n+            printer.print(command.name());\n+            printer.println(\"` - for a list of valid commands use `\/help`.\");\n+        }\n+\n+        bot.repo().addCommitComment(commitComment.commit(), writer.toString());\n+    }\n+    @Override\n+    public Collection<WorkItem> run(Path scratchPath) {\n+        log.info(\"Looking for commit comment commands\");\n+\n+        var allComments = bot.repo().commitComments(commitComment.commit());\n+        var nextCommand = nextCommand(allComments);\n+\n+        if (nextCommand.isEmpty()) {\n+            log.info(\"No new commit comments found, stopping further processing\");\n+        } else {\n+            processCommand(scratchPath, nextCommand.get(), allComments);\n+        }\n+\n+        return List.of();\n+    }\n+}\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CommitCommandWorkItem.java","additions":156,"deletions":0,"binary":false,"changes":156,"status":"added"},{"patch":"@@ -28,0 +28,1 @@\n+import org.openjdk.skara.host.*;\n@@ -39,0 +40,1 @@\n+import java.util.stream.Collectors;\n@@ -60,0 +62,1 @@\n+    private final Set<String> commitCommandUsers;\n@@ -66,0 +69,1 @@\n+    private final Set<String> processedCommitComments;\n@@ -74,1 +78,1 @@\n-                   String confOverrideRef, String censusLink) {\n+                   String confOverrideRef, String censusLink, List<HostUser> commitCommandUsers) {\n@@ -95,0 +99,4 @@\n+        this.commitCommandUsers = commitCommandUsers.stream()\n+                                                    .map(HostUser::id)\n+                                                    .collect(Collectors.toSet());\n+\n@@ -101,0 +109,1 @@\n+        processedCommitComments = new HashSet<>();\n@@ -150,1 +159,1 @@\n-    private List<WorkItem> getWorkItems(List<PullRequest> pullRequests) {\n+    private List<WorkItem> getWorkItems(List<PullRequest> pullRequests, List<CommitComment> commitComments) {\n@@ -154,3 +163,0 @@\n-            if (pr.state() != Issue.State.OPEN) {\n-                continue;\n-            }\n@@ -161,2 +167,6 @@\n-\n-                ret.add(new CheckWorkItem(this, pr, e -> updateCache.invalidate(pr)));\n+                if (pr.state() == Issue.State.OPEN) {\n+                    ret.add(new CheckWorkItem(this, pr, e -> updateCache.invalidate(pr)));\n+                } else {\n+                    \/\/ Closed PR's do not need to be checked\n+                    ret.add(new CommandWorkItem(this, pr, e -> updateCache.invalidate(pr)));\n+                }\n@@ -166,0 +176,4 @@\n+        for (var commitComment : commitComments) {\n+            ret.add(new CommitCommandWorkItem(this, commitComment));\n+        }\n+\n@@ -172,0 +186,1 @@\n+        List<CommitComment> commitComments = List.of();\n@@ -182,0 +197,11 @@\n+        if (!commitCommandUsers.isEmpty()) {\n+            commitComments = remoteRepo.recentCommitComments().stream()\n+                                       .filter(cc -> !processedCommitComments.contains(cc.id()))\n+                                       .filter(cc -> commitCommandUsers.contains(cc.author().id()))\n+                                       .collect(Collectors.toList());\n+            if (!commitComments.isEmpty()) {\n+                processedCommitComments.addAll(commitComments.stream()\n+                                                             .map(Comment::id)\n+                                                             .collect(Collectors.toList()));\n+            }\n+        }\n@@ -183,1 +209,1 @@\n-        return getWorkItems(prs);\n+        return getWorkItems(prs, commitComments);\n@@ -193,1 +219,5 @@\n-        return getWorkItems(webHook.get().updatedPullRequests());\n+        return getWorkItems(webHook.get().updatedPullRequests(), List.of());\n+    }\n+\n+    HostedRepository repo() {\n+        return remoteRepo;\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBot.java","additions":39,"deletions":9,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import org.openjdk.skara.host.HostUser;\n@@ -54,0 +55,1 @@\n+    private List<HostUser> commitCommandUsers = List.of();\n@@ -153,0 +155,5 @@\n+    public PullRequestBotBuilder commitCommandUsers(List<HostUser> commitCommandUsers) {\n+        this.commitCommandUsers = commitCommandUsers;\n+        return this;\n+    }\n+\n@@ -158,1 +165,1 @@\n-                                  confOverrideRef, censusLink);\n+                                  confOverrideRef, censusLink, commitCommandUsers);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBotBuilder.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import org.openjdk.skara.host.HostUser;\n@@ -140,0 +141,8 @@\n+            if (repo.value().contains(\"commitcommanders\")) {\n+                var allowed = repo.value().get(\"commitcommanders\").stream()\n+                                  .map(JSONValue::asString)\n+                                  .map(s -> HostUser.builder().id(s).build())\n+                                  .collect(Collectors.toList());\n+                botBuilder.commitCommandUsers(allowed);\n+            }\n+\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBotFactory.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,37 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bots.pr;\n+\n+import org.openjdk.skara.forge.CommitComment;\n+\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class CommitCommandAsserts {\n+    public static void assertLastCommentContains(List<CommitComment> comments, String contains) {\n+        assertTrue(!comments.isEmpty());\n+        var lastComment = comments.get(comments.size() - 1);\n+        assertTrue(lastComment.body().contains(contains), lastComment.body());\n+    }\n+}\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CommitCommandAsserts.java","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"},{"patch":"@@ -0,0 +1,126 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bots.pr;\n+\n+import org.junit.jupiter.api.*;\n+import org.openjdk.skara.issuetracker.Issue;\n+import org.openjdk.skara.test.*;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+public class CommitCommandTests {\n+    @Test\n+    void simple(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                                           .addAuthor(author.forge().currentUser().id())\n+                                           .addReviewer(reviewer.forge().currentUser().id());\n+            var seedFolder = tempFolder.path().resolve(\"seed\");\n+            var bot = PullRequestBot.newBuilder()\n+                                    .repo(author)\n+                                    .censusRepo(censusBuilder.build())\n+                                    .censusLink(\"https:\/\/census.com\/{{contributor}}-profile\")\n+                                    .seedStorage(seedFolder)\n+                                    .commitCommandUsers(List.of(author.forge().currentUser()))\n+                                    .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Make a change directly on master\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"master\");\n+\n+            \/\/ Add a help command\n+            author.addCommitComment(editHash, \"\/help\");\n+            TestBotRunner.runPeriodicItems(bot);\n+\n+            \/\/ Look at the reply\n+            var replies = author.commitComments(editHash);\n+            CommitCommandAsserts.assertLastCommentContains(replies, \"Available commands\");\n+\n+            \/\/ Try an invalid one\n+            author.addCommitComment(editHash, \"\/hello\");\n+            TestBotRunner.runPeriodicItems(bot);\n+\n+            replies = author.commitComments(editHash);\n+            CommitCommandAsserts.assertLastCommentContains(replies, \"Unknown\");\n+        }\n+    }\n+\n+    @Test\n+    void simplePullRequest(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var botRepo = credentials.getHostedRepository();\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                                           .addAuthor(author.forge().currentUser().id())\n+                                           .addReviewer(reviewer.forge().currentUser().id());\n+            var seedFolder = tempFolder.path().resolve(\"seed\");\n+            var bot = PullRequestBot.newBuilder()\n+                                    .repo(botRepo)\n+                                    .censusRepo(censusBuilder.build())\n+                                    .censusLink(\"https:\/\/census.com\/{{contributor}}-profile\")\n+                                    .seedStorage(seedFolder)\n+                                    .commitCommandUsers(List.of(author.forge().currentUser()))\n+                                    .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"refs\/heads\/edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"This is a pull request\");\n+\n+            \/\/ Simulate an integration\n+            var botPr = botRepo.pullRequest(pr.id());\n+            localRepo.push(editHash, author.url(), \"master\");\n+            botPr.addComment(\"Pushed as commit \" + editHash.hex() + \".\");\n+            botPr.addLabel(\"integrated\");\n+            botPr.setState(Issue.State.CLOSED);\n+\n+            \/\/ Add a help command\n+            pr.addComment(\"\/help\");\n+            TestBotRunner.runPeriodicItems(bot);\n+            PullRequestAsserts.assertLastCommentContains(pr, \"Available commands\");\n+\n+            \/\/ Try an unavailable one\n+            pr.addComment(\"\/integrate\");\n+            TestBotRunner.runPeriodicItems(bot);\n+            PullRequestAsserts.assertLastCommentContains(pr, \"can only be used in open pull requests\");\n+        }\n+    }\n+}\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CommitCommandTests.java","additions":126,"deletions":0,"binary":false,"changes":126,"status":"added"},{"patch":"@@ -52,1 +52,1 @@\n-        commitComments = new HashMap<Hash, List<CommitComment>>();\n+        commitComments = new HashMap<>();\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestHostedRepository.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}