{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import java.net.*;\n@@ -36,0 +37,2 @@\n+import com.sun.net.httpserver.*;\n+\n@@ -199,1 +202,0 @@\n-    private final Logger log;\n@@ -202,0 +204,2 @@\n+    private static final Logger log = Logger.getLogger(\"org.openjdk.skara.bot\");\n+\n@@ -217,1 +221,0 @@\n-        log = Logger.getLogger(\"org.openjdk.skara.bot\");\n@@ -254,1 +257,1 @@\n-    private void processRestRequest(JSONValue request) {\n+    void processWebhook(JSONValue request) {\n@@ -281,3 +284,3 @@\n-        RestReceiver restReceiver = null;\n-        if (config.restReceiverPort().isPresent()) {\n-            log.info(\"Listening for webhooks on port: \" + config.restReceiverPort().get());\n+        HttpServer server = null;\n+        var serverConfig = config.httpServer(this);\n+        if (serverConfig.isPresent()) {\n@@ -285,1 +288,8 @@\n-                restReceiver = new RestReceiver(config.restReceiverPort().get(), this::processRestRequest);\n+                var port = serverConfig.get().port();\n+                var address = new InetSocketAddress(port);\n+                server = HttpServer.create(address, 0);\n+                server.setExecutor(null);\n+                for (var context : serverConfig.get().contexts()) {\n+                    server.createContext(context.path(), context.handler());\n+                }\n+                server.start();\n@@ -287,1 +297,1 @@\n-                log.log(Level.WARNING, \"Failed to create RestReceiver\", e);\n+                log.log(Level.WARNING, \"Failed to create HTTP server\", e);\n@@ -302,2 +312,2 @@\n-        if (restReceiver != null) {\n-            restReceiver.close();\n+        if (server != null) {\n+            server.stop(0);\n","filename":"bot\/src\/main\/java\/org\/openjdk\/skara\/bot\/BotRunner.java","additions":21,"deletions":11,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+import java.util.function.BiFunction;\n@@ -42,0 +43,2 @@\n+import com.sun.net.httpserver.HttpHandler;\n+\n@@ -348,2 +351,38 @@\n-    Optional<Integer> restReceiverPort() {\n-        if (!config.contains(\"webhooks\")) {\n+    static class HttpContextConfiguration {\n+        private final String path;\n+        private final HttpHandler handler;\n+\n+        private HttpContextConfiguration(String path, HttpHandler handler) {\n+            this.path = path;\n+            this.handler = handler;\n+        }\n+\n+        String path() {\n+            return path;\n+        }\n+\n+        HttpHandler handler() {\n+            return handler;\n+        }\n+    }\n+\n+    static class HttpServerConfiguration {\n+        private final int port;\n+        private final List<HttpContextConfiguration> contexts;\n+\n+        private HttpServerConfiguration(int port, List<HttpContextConfiguration> contexts) {\n+            this.port = port;\n+            this.contexts = contexts;\n+        }\n+\n+        int port() {\n+            return port;\n+        }\n+\n+        List<HttpContextConfiguration> contexts() {\n+            return contexts;\n+        }\n+    }\n+\n+    Optional<HttpServerConfiguration> httpServer(BotRunner runner) {\n+        if (!config.contains(\"http-server\")) {\n@@ -352,1 +391,19 @@\n-        return Optional.of(config.get(\"webhooks\").get(\"port\").asInt());\n+\n+        Map<String, BiFunction<BotRunner, JSONObject, HttpHandler>> factories = Map.of(\n+            WebhookHandler.name(), WebhookHandler::create\n+        );\n+        var contexts = new ArrayList<HttpContextConfiguration>();\n+        var port = config.get(\"http-server\").get(\"port\").asInt();\n+        for (var field : config.get(\"http-server\").fields()) {\n+            if (field.name().startsWith(\"\/\")) {\n+                var path = field.name();\n+                var type = field.value().get(\"type\").asString();\n+                if (!factories.containsKey(type)) {\n+                    throw new RuntimeException(\"Unknown kind of HTTP handler: \" + type);\n+                }\n+                var handler = factories.get(type).apply(runner, field.value().asObject());\n+                contexts.add(new HttpContextConfiguration(path, handler));\n+            }\n+        }\n+\n+        return Optional.of(new HttpServerConfiguration(port, contexts));\n","filename":"bot\/src\/main\/java\/org\/openjdk\/skara\/bot\/BotRunnerConfiguration.java","additions":60,"deletions":3,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import java.net.*;\n@@ -31,1 +30,0 @@\n-import java.util.function.Consumer;\n@@ -35,4 +33,3 @@\n-class RestReceiver {\n-    private final HttpServer server;\n-    private final Consumer<JSONValue> consumer;\n-    private final Logger log = Logger.getLogger(\"org.openjdk.skara.bot\");\n+class WebhookHandler implements HttpHandler {\n+    private final static Logger log = Logger.getLogger(\"org.openjdk.skara.bot\");\n+    private final BotRunner runner;\n@@ -40,5 +37,3 @@\n-    class Handler implements HttpHandler {\n-\n-        @Override\n-        public void handle(HttpExchange exchange) throws IOException {\n-            var input = new String(exchange.getRequestBody().readAllBytes(), StandardCharsets.UTF_8);\n+    private WebhookHandler(BotRunner runner) {\n+        this.runner = runner;\n+    }\n@@ -46,6 +41,3 @@\n-            \/\/ Reply immediately\n-            var response = \"{}\";\n-            exchange.sendResponseHeaders(200, response.length());\n-            OutputStream outputStream = exchange.getResponseBody();\n-            outputStream.write(response.getBytes());\n-            outputStream.close();\n+    @Override\n+    public void handle(HttpExchange exchange) throws IOException {\n+        var input = new String(exchange.getRequestBody().readAllBytes(), StandardCharsets.UTF_8);\n@@ -53,6 +45,8 @@\n-            try {\n-                var parsedInput = JSON.parse(input);\n-                consumer.accept(parsedInput);\n-            } catch (RuntimeException e) {\n-                log.log(Level.WARNING, \"Failed to parse incoming request: \" + input, e);\n-            }\n+        JSONValue json = null;\n+        try {\n+            json = JSON.parse(input);\n+        } catch (Exception e) {\n+            log.log(Level.WARNING, \"Failed to parse incoming request: \" + input, e);\n+            exchange.sendResponseHeaders(400, 0);\n+            exchange.getResponseBody().close();\n+            return;\n@@ -60,0 +54,9 @@\n+\n+        \/\/ Reply immediately\n+        var response = \"{}\";\n+        exchange.sendResponseHeaders(200, response.length());\n+        var output = exchange.getResponseBody();\n+        output.write(response.getBytes(StandardCharsets.UTF_8));\n+        output.close();\n+\n+        runner.processWebhook(json);\n@@ -62,8 +65,2 @@\n-    RestReceiver(int port, Consumer<JSONValue> consumer) throws IOException\n-    {\n-        this.consumer = consumer;\n-        InetSocketAddress address = new InetSocketAddress(port);\n-        server = HttpServer.create(address, 0);\n-        server.createContext(\"\/\", new Handler());\n-        server.setExecutor(null);\n-        server.start();\n+    static String name() {\n+        return \"webhook\";\n@@ -72,2 +69,2 @@\n-    void close() {\n-        server.stop(0);\n+    static WebhookHandler create(BotRunner runner, JSONObject configuration) {\n+        return new WebhookHandler(runner);\n","filename":"bot\/src\/main\/java\/org\/openjdk\/skara\/bot\/WebhookHandler.java","additions":31,"deletions":34,"binary":false,"changes":65,"status":"modified"}]}