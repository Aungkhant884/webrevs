{"files":[{"patch":"@@ -112,1 +112,1 @@\n-            return JSON.parse(Files.readString(jsonFile, StandardCharsets.UTF_8)).asObject();\n+            return JWCC.parse(Files.readString(jsonFile, StandardCharsets.UTF_8)).asObject();\n","filename":"bots\/cli\/src\/main\/java\/org\/openjdk\/skara\/bots\/cli\/BotLauncher.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,2 @@\n+    private final boolean allowComments;\n+    private final boolean allowTrailingCommas;\n@@ -32,0 +34,6 @@\n+        this(false, false);\n+    }\n+\n+    JSONParser(boolean allowComments, boolean allowTrailingCommas) {\n+        this.allowComments = allowComments;\n+        this.allowTrailingCommas = allowTrailingCommas;\n@@ -42,0 +50,6 @@\n+    private Optional<Character> next() {\n+        var nextPos = pos + 1;\n+        return nextPos < input.length() ?\n+            Optional.of(input.charAt(nextPos)) : Optional.empty();\n+    }\n+\n@@ -240,1 +254,5 @@\n-        consumeWhitespace();\n+        if (allowComments) {\n+            consumeCommentsAndWhitespace();\n+        } else {\n+            consumeWhitespace();\n+        }\n@@ -250,0 +268,7 @@\n+                if (allowTrailingCommas) {\n+                    if (allowComments) {\n+                        consumeCommentsAndWhitespace();\n+                    } else {\n+                        consumeWhitespace();\n+                    }\n+                }\n@@ -271,1 +296,5 @@\n-        consumeWhitespace();\n+        if (allowComments) {\n+            consumeCommentsAndWhitespace();\n+        } else {\n+            consumeWhitespace();\n+        }\n@@ -291,0 +320,7 @@\n+                if (allowTrailingCommas) {\n+                    if (allowComments) {\n+                        consumeCommentsAndWhitespace();\n+                    } else {\n+                        consumeWhitespace();\n+                    }\n+                }\n@@ -343,0 +379,35 @@\n+    private void consumeCommentsAndWhitespace() {\n+        while (hasInput() && (isWhitespace(current()) || isComment())) {\n+            consumeWhitespace();\n+            consumeComment();\n+        }\n+    }\n+\n+    private boolean isComment() {\n+        return hasInput() &&\n+               current() == '\/' &&\n+               (next().equals(Optional.of('*')) || next().equals(Optional.of('\/')));\n+    }\n+\n+    private void consumeComment() {\n+        if (isComment()) {\n+            advance();\n+            if (current() == '\/') {\n+                advance();\n+                while (hasInput() && current() != '\\n') {\n+                    advance();\n+                }\n+            } else {\n+                advance();\n+                while (hasInput()) {\n+                    if (current() == '*' && next().equals(Optional.of('\/'))) {\n+                        advance();\n+                        advance();\n+                        break;\n+                    }\n+                    advance();\n+                }\n+            }\n+        }\n+    }\n+\n@@ -352,1 +423,5 @@\n-        consumeWhitespace();\n+        if (allowComments) {\n+            consumeCommentsAndWhitespace();\n+        } else {\n+            consumeWhitespace();\n+        }\n@@ -372,1 +447,5 @@\n-        consumeWhitespace();\n+        if (allowComments) {\n+            consumeCommentsAndWhitespace();\n+        } else {\n+            consumeWhitespace();\n+        }\n","filename":"json\/src\/main\/java\/org\/openjdk\/skara\/json\/JSONParser.java","additions":84,"deletions":5,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -0,0 +1,36 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.json;\n+\n+\/**\n+ * JWCC is JSON With Commas and Comments. In addition to supporting all of JSON\n+ * JWCC also supports trailing commas and comments. Comments can be either\n+ * until single-line or multi-line.\n+ *\n+ * Comments are stripped and are not present in the parsed result.\n+ *\/\n+public class JWCC {\n+    public static JSONValue parse(String s) {\n+        return new JSONParser(true, true).parse(s);\n+    }\n+}\n","filename":"json\/src\/main\/java\/org\/openjdk\/skara\/json\/JWCC.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -0,0 +1,222 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.json;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.*;\n+import java.util.stream.*;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class JWCCTests {\n+    @Test\n+    public void testSingleLineComment() {\n+        var text = \"\"\"\n+                   \/\/ this is a comment before the object\n+                   { \/\/ this is a comment after opening brace\n+                     \"foo\": \"bar\" \/\/ this is a comment after field\n+                   } \/\/ this is a comment after closening brace\n+                   \/\/ this is a comment after the object\n+                   \"\"\";\n+        var json = JWCC.parse(text);\n+        assertEquals(\"bar\", json.get(\"foo\").asString());\n+    }\n+\n+    @Test\n+    public void testSingleLineCommentAfterKey() {\n+        var text = \"\"\"\n+                   {\n+                     \"foo\": \/\/ comment\n+                         \"bar\"\n+                   }\n+                   \"\"\";\n+        var json = JWCC.parse(text);\n+        assertEquals(\"bar\", json.get(\"foo\").asString());\n+    }\n+\n+    @Test\n+    public void testSingleLineCommentAfterKeyWithoutValue() {\n+        var text = \"\"\"\n+                   {\n+                     \"foo\": \/\/ comment\n+                   }\n+                   \"\"\";\n+        assertThrows(IllegalStateException.class, () -> {\n+            JWCC.parse(text);\n+        });\n+    }\n+\n+    @Test\n+    public void testInlineComment() {\n+        var text = \"\"\"\n+                   \/*\n+                    * This is a multi-line comment\n+                    *\n+                    *\/\n+                   \/*\n+                    * This is another multi-line comment with JSON in it\n+                    {\n+                      \"foo\": 17\n+                    }\n+                    *\/\n+                   \/* small comment *\/ { \/* another\n+                   multi-line *\/\n+                     \/* before *\/ \"foo\" \/* a comment *\/ : \/* another comment *\/ \"bar\" \/* so many comments *\/\n+                   } \/* after *\/\n+                   \/*\n+                    * A final multi-line\n+                    *\/\n+                   \"\"\";\n+        var json = JWCC.parse(text);\n+        assertEquals(\"bar\", json.get(\"foo\").asString());\n+    }\n+\n+    @Test\n+    public void testInlineAndLineComment() {\n+        var text = \"\"\"\n+                   \/*\n+                    * This is a multi-line comment\n+                    * \/\/ with a line comment inside it\n+                    *\/\n+                   \/*\n+                    * This is another multi-line comment with JSON in it\n+                    {\n+                      \"foo\": 17\n+                    }\n+                    *\/\n+                   \/* small comment *\/ { \/\/ until end-of-line with closing brace }\n+                     \/* before *\/ \"foo\" \/* a comment *\/ : \/* another comment *\/ \"bar\" \/\/\/\/\/\/\/ end-of-line\n+                   } \/* after *\/ \/\/ end-of-line \/* with in-line *\/\n+                   \/*\n+                    * A final multi-line\n+                    *\/\n+                    \/\/ A final singe-line\n+                   \"\"\";\n+        var json = JWCC.parse(text);\n+        assertEquals(\"bar\", json.get(\"foo\").asString());\n+    }\n+\n+    @Test\n+    public void testInlineAndLineCommentWithArray() {\n+        var text = \"\"\"\n+                   \/*\n+                    * This is a multi-line comment\n+                    * \/\/ with a line comment inside it\n+                    *\/\n+                   \/*\n+                    * This is another multi-line comment with JSON in it\n+                    {\n+                      \"foo\": 17\n+                    }\n+                    *\/\n+                   \/* small comment *\/ [ \/\/ until end-of-line with closing brace }\n+                     \/* before *\/ \"foo\" \/* a comment *\/ , \/* another comment *\/ \"bar\" \/\/\/\/\/\/\/ end-of-line\n+                   ] \/* after *\/ \/\/ end-of-line \/* with in-line *\/\n+                   \/*\n+                    * A final multi-line\n+                    *\/\n+                    \/\/ A final singe-line\n+                   \"\"\";\n+        var json = JWCC.parse(text);\n+        assertEquals(\"foo\", json.get(0).asString());\n+        assertEquals(\"bar\", json.get(1).asString());\n+        assertEquals(2, json.asArray().size());\n+    }\n+\n+    @Test\n+    public void testTrailingComma() {\n+        var text = \"\"\"\n+                   {\n+                       \"a\": 1,\n+                       \"b\": 2,\n+                   }\n+                   \"\"\";\n+        var json = JWCC.parse(text);\n+        assertEquals(1, json.get(\"a\").asInt());\n+        assertEquals(2, json.get(\"b\").asInt());\n+    }\n+\n+    @Test\n+    public void testTrailingCommaWithLineComment() {\n+        var text = \"\"\"\n+                   {\n+                       \"a\": 1, \/\/ a comment\n+                       \"b\": 2, \/\/ another comment\n+                   }\n+                   \"\"\";\n+        var json = JWCC.parse(text);\n+        assertEquals(1, json.get(\"a\").asInt());\n+        assertEquals(2, json.get(\"b\").asInt());\n+    }\n+\n+    @Test\n+    public void testTrailingCommaWithInLineComment() {\n+        var text = \"\"\"\n+                   {\n+                       \"a\": 1, \/* an in-line *\/\n+                       \"b\": 2, \/* another in-line *\/\n+                   }\n+                   \"\"\";\n+        var json = JWCC.parse(text);\n+        assertEquals(1, json.get(\"a\").asInt());\n+        assertEquals(2, json.get(\"b\").asInt());\n+    }\n+\n+    @Test\n+    public void testTrailingOnSameLine() {\n+        var text = \"\"\"\n+                   {\n+                       \"a\": 1, \"b\": 2, \/* in-line *\/ \"c\": 3,\n+                   }\n+                   \"\"\";\n+        var json = JWCC.parse(text);\n+        assertEquals(1, json.get(\"a\").asInt());\n+        assertEquals(2, json.get(\"b\").asInt());\n+        assertEquals(3, json.get(\"c\").asInt());\n+    }\n+\n+    @Test\n+    public void testTrailingWithArray() {\n+        var text = \"\"\"\n+                   [\n+                       \"a\",\n+                   ]\n+                   \"\"\";\n+        var json = JWCC.parse(text);\n+        assertEquals(\"a\", json.get(0).asString());\n+    }\n+\n+    @Test\n+    public void testTrailingWithMultipleArray() {\n+        var text = \"\"\"\n+                   [\n+                       \"a\",\n+                       \"b\",\n+                   ]\n+                   \"\"\";\n+        var json = JWCC.parse(text);\n+        assertEquals(\"a\", json.get(0).asString());\n+        assertEquals(\"b\", json.get(1).asString());\n+    }\n+}\n","filename":"json\/src\/test\/java\/org\/openjdk\/skara\/json\/JWCCTests.java","additions":222,"deletions":0,"binary":false,"changes":222,"status":"added"}]}