{"files":[{"patch":"@@ -173,3 +173,0 @@\n-        var headHash = pr.headHash();\n-        var originalCommits = localRepo.commitMetadata(baseHash, headHash);\n-\n@@ -185,0 +182,35 @@\n+    private Map<String, String> blockingIntegrationLabels() {\n+        return Map.of(\"rejected\", \"The change is currently blocked from integration by a rejection.\",\n+                      \"csr\", \"The change requires a CSR request to be approved.\");\n+    }\n+\n+    private List<String> botSpecificIntegrationBlockers() {\n+        var ret = new ArrayList<String>();\n+\n+        var issues = issues();\n+        var issueProject = issueProject();\n+        if (issueProject != null) {\n+            for (var currentIssue : issues) {\n+                try {\n+                    var iss = issueProject.issue(currentIssue.shortId());\n+                    if (iss.isPresent()) {\n+                        if (!relaxedEquals(iss.get().title(), currentIssue.description())) {\n+                            var issueString = \"[\" + iss.get().id() + \"](\" + iss.get().webUrl() + \")\";\n+                            ret.add(\"Title mismatch between PR and JBS for issue \" + issueString);\n+                        }\n+                    } else {\n+                        log.warning(\"Failed to retrieve information on issue \" + currentIssue.id());\n+                    }\n+                } catch (RuntimeException e) {\n+                    log.warning(\"Temporary failure when trying to retrieve information on issue \" + currentIssue.id());\n+                }\n+            }\n+        }\n+\n+        labels.stream()\n+              .filter(l -> blockingIntegrationLabels().containsKey(l))\n+              .forEach(l -> ret.add(blockingIntegrationLabels().get(l)));\n+\n+        return ret;\n+    }\n+\n@@ -269,1 +301,1 @@\n-    private String getAdditionalErrorsList(List<String> additionalErrors) {\n+    private String warningListToText(List<String> additionalErrors) {\n@@ -340,1 +372,2 @@\n-    private String getStatusMessage(List<Comment> comments, List<Review> reviews, PullRequestCheckIssueVisitor visitor, List<String> additionalErrors) {\n+    private String getStatusMessage(List<Comment> comments, List<Review> reviews, PullRequestCheckIssueVisitor visitor,\n+                                    List<String> additionalErrors, List<String> integrationBlockers) {\n@@ -355,1 +388,10 @@\n-            progressBody.append(getAdditionalErrorsList(allAdditionalErrors));\n+            progressBody.append(warningListToText(allAdditionalErrors));\n+        }\n+\n+        if (!integrationBlockers.isEmpty()) {\n+            progressBody.append(\"\\n\\n### Integration blocker\");\n+            if (integrationBlockers.size() > 1) {\n+                progressBody.append(\"s\");\n+            }\n+            progressBody.append(\"\\n\");\n+            progressBody.append(warningListToText(integrationBlockers));\n@@ -727,0 +769,2 @@\n+            var integrationBlockers = botSpecificIntegrationBlockers();\n+\n@@ -728,1 +772,1 @@\n-            var statusMessage = getStatusMessage(comments, activeReviews, visitor, additionalErrors);\n+            var statusMessage = getStatusMessage(comments, activeReviews, visitor, additionalErrors, integrationBlockers);\n@@ -742,1 +786,1 @@\n-                                      labels.stream().noneMatch(l -> workItem.bot.blockingReadyLabels().contains(l));\n+                                      integrationBlockers.isEmpty();\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":52,"deletions":8,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -81,5 +81,3 @@\n-        for (var blocker : bot.blockingIntegrationLabels().entrySet()) {\n-            if (labels.contains(blocker.getKey())) {\n-                reply.println(blocker.getValue());\n-                return;\n-            }\n+        if (!labels.contains(\"ready\")) {\n+            reply.println(\"This PR has not yet been marked as ready for integration.\");\n+            return;\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/IntegrateCommand.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -175,16 +175,0 @@\n-    Set<String> blockingReadyLabels() {\n-        return Set.of(\"csr\");\n-    }\n-\n-    Map<String, String> blockingIntegrationLabels() {\n-        return Map.of(\"rejected\", \"The change is currently blocked from integration by a rejection.\");\n-    }\n-\n-    Set<String> readyLabels() {\n-        return readyLabels;\n-    }\n-\n-    Map<String, Pattern> readyComments() {\n-        return readyComments;\n-    }\n-\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBot.java","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -63,5 +63,3 @@\n-        for (var blocker : bot.blockingIntegrationLabels().entrySet()) {\n-            if (labels.contains(blocker.getKey())) {\n-                reply.println(blocker.getValue());\n-                return;\n-            }\n+        if (!labels.contains(\"ready\")) {\n+            reply.println(\"This PR has not yet been marked as ready for integration.\");\n+            return;\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/SponsorCommand.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import org.junit.jupiter.api.*;\n@@ -26,5 +27,1 @@\n-import org.openjdk.skara.issuetracker.Comment;\n-import org.openjdk.skara.issuetracker.Link;\n-import org.openjdk.skara.issuetracker.Issue;\n-import org.openjdk.skara.test.*;\n-import org.openjdk.skara.vcs.Repository;\n+import org.openjdk.skara.issuetracker.*;\n@@ -32,2 +29,1 @@\n-\n-import org.junit.jupiter.api.*;\n+import org.openjdk.skara.test.*;\n@@ -530,0 +526,3 @@\n+\n+            \/\/ The body should contain a note about why\n+            assertTrue(pr.body().contains(\"change requires a CSR request to be approved\"));\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CSRTests.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -938,0 +938,1 @@\n+            assertTrue(pr.body().contains(\"Integration blocker\"));\n@@ -945,0 +946,1 @@\n+            assertFalse(pr.body().contains(\"Integration blocker\"));\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CheckTests.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import org.junit.jupiter.api.*;\n@@ -26,1 +27,0 @@\n-import org.openjdk.skara.issuetracker.Comment;\n@@ -30,2 +30,0 @@\n-import org.junit.jupiter.api.*;\n-\n@@ -36,1 +34,0 @@\n-import java.util.stream.Collectors;\n@@ -238,5 +235,1 @@\n-            var error = pr.comments().stream()\n-                          .filter(comment -> comment.body().contains(\"integration request cannot be fulfilled at this time\"))\n-                          .filter(comment -> comment.body().contains(\"failed the final jcheck\"))\n-                          .count();\n-            assertEquals(1, error, pr.comments().stream().map(Comment::body).collect(Collectors.joining(\"\\n---\\n\")));\n+            assertLastCommentContains(pr, \"PR has not yet been marked as ready for integration\");\n@@ -642,0 +635,7 @@\n+            \/\/ Trigger a new check run\n+            pr.setBody(pr.body() + \" recheck\");\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+\n+            \/\/ The bot should reply with an error message\n+            assertLastCommentContains(pr, \"this pull request can not be integrated\");\n+\n@@ -647,5 +647,2 @@\n-            var error = pr.comments().stream()\n-                          .filter(comment -> comment.body().contains(\"It was not possible to rebase your changes automatically.\"))\n-                          .filter(comment -> comment.body().contains(\"Please merge `master`\"))\n-                          .count();\n-            assertEquals(1, error);\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+            assertLastCommentContains(pr, \"PR has not yet been marked as ready for integration\");\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/IntegrateTests.java","additions":11,"deletions":14,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -182,1 +182,1 @@\n-            assertLastCommentContains(reviewerPr,\"Too few reviewers with at least role author found (have 0, need at least 1)\");\n+            assertLastCommentContains(reviewerPr,\"PR has not yet been marked as ready for integration\");\n@@ -242,1 +242,1 @@\n-            assertLastCommentContains(reviewerPr,\"Too few reviewers with at least role author found (have 0, need at least 1)\");\n+            assertLastCommentContains(reviewerPr,\"PR has not yet been marked as ready for integration\");\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/ReviewersTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -526,5 +526,1 @@\n-            var error = pr.comments().stream()\n-                          .filter(comment -> comment.body().contains(\"integration request cannot be fulfilled at this time\"))\n-                          .filter(comment -> comment.body().contains(\"failed the final jcheck\"))\n-                          .count();\n-            assertEquals(1, error);\n+            assertLastCommentContains(pr, \"PR has not yet been marked as ready for integration\");\n@@ -603,0 +599,7 @@\n+            \/\/ Trigger a new check run\n+            pr.setBody(pr.body() + \" recheck\");\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+\n+            \/\/ The bot should reply with an error message\n+            assertLastCommentContains(pr, \"this pull request can not be integrated\");\n+\n@@ -606,1 +609,0 @@\n-            TestBotRunner.runPeriodicItems(mergeBot);\n@@ -609,5 +611,2 @@\n-            var error = pr.comments().stream()\n-                          .filter(comment -> comment.body().contains(\"It was not possible to rebase your changes automatically.\"))\n-                          .filter(comment -> comment.body().contains(\"Please merge `master`\"))\n-                          .count();\n-            assertEquals(1, error);\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+            assertLastCommentContains(pr, \"PR has not yet been marked as ready for integration\");\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/SponsorTests.java","additions":10,"deletions":11,"binary":false,"changes":21,"status":"modified"}]}