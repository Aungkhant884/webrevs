{"files":[{"patch":"@@ -228,1 +228,1 @@\n-                        var fixVersion = JdkVersion.parse(requestedVersion);\n+                        var fixVersion = JdkVersion.parse(requestedVersion).orElseThrow();\n@@ -348,1 +348,1 @@\n-                var fixVersion = JdkVersion.parse(requestedVersion);\n+                var fixVersion = JdkVersion.parse(requestedVersion).orElseThrow();\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifier.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-            return Optional.of(JdkVersion.parse(versionString.get(0), issue.properties().get(\"customfield_10006\").get(\"value\").asString()));\n+            return JdkVersion.parse(versionString.get(0), issue.properties().get(\"customfield_10006\").get(\"value\").asString());\n@@ -79,1 +79,1 @@\n-            return Optional.of(JdkVersion.parse(versionString.get(0)));\n+            return JdkVersion.parse(versionString.get(0));\n@@ -136,1 +136,1 @@\n-        return mainVersion.get().equals(poolVersion) || mainVersion.get().equals(openVersion);\n+        return mainVersion.get().equals(poolVersion.orElseThrow()) || mainVersion.get().equals(openVersion.orElseThrow());\n","filename":"jbs\/src\/main\/java\/org\/openjdk\/skara\/jbs\/Backports.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-    private final static Pattern hsxVersionPattern = Pattern.compile(\"(hs[1-9][0-9]{1,2})(\\\\\\\\.([0-9]{1,3}))?$\");\n+    private final static Pattern hsxVersionPattern = Pattern.compile(\"(hs[1-9][0-9]{1,2})(\\\\.([0-9]{1,3}))?$\");\n@@ -39,0 +39,1 @@\n+    private final static Pattern fxVersionPattern = Pattern.compile(\"(openjfx[1-9][0-9]?)(u([0-9]{1,3}))?$\");\n@@ -46,1 +47,1 @@\n-        for (var legacyPattern : List.of(jdkVersionPattern, hsxVersionPattern, embVersionPattern, ojVersionPattern)) {\n+        for (var legacyPattern : List.of(jdkVersionPattern, hsxVersionPattern, embVersionPattern, ojVersionPattern, fxVersionPattern)) {\n@@ -67,0 +68,4 @@\n+\n+            \/\/ All components except the optional one must be numeric\n+            finalComponents.forEach(Integer::parseUnsignedInt);\n+\n@@ -73,5 +78,0 @@\n-        \/\/ Never leave a trailing 'u' in the major version\n-        if (finalComponents.get(0).endsWith(\"u\")) {\n-            finalComponents.set(0, finalComponents.get(0).substring(0, finalComponents.get(0).length() - 1));\n-        }\n-\n@@ -95,2 +95,6 @@\n-    public static JdkVersion parse(String raw) {\n-        return new JdkVersion(raw, null);\n+    public static Optional<JdkVersion> parse(String raw) {\n+        try {\n+            return Optional.of(new JdkVersion(raw, null));\n+        } catch (NumberFormatException e) {\n+            return Optional.empty();\n+        }\n@@ -99,2 +103,6 @@\n-    public static JdkVersion parse(String raw, String build) {\n-        return new JdkVersion(raw, build);\n+    public static Optional<JdkVersion> parse(String raw, String build) {\n+        try {\n+            return Optional.of(new JdkVersion(raw, build));\n+        } catch (NumberFormatException e) {\n+            return Optional.empty();\n+        }\n","filename":"jbs\/src\/main\/java\/org\/openjdk\/skara\/jbs\/JdkVersion.java","additions":19,"deletions":11,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -160,3 +160,3 @@\n-            assertEquals(issue, Backports.findIssue(issue, JdkVersion.parse(\"11.1\")).orElseThrow());\n-            assertEquals(backport, Backports.findIssue(issue, JdkVersion.parse(\"12.2\")).orElseThrow());\n-            assertEquals(Optional.empty(), Backports.findIssue(issue, JdkVersion.parse(\"13.3\")));\n+            assertEquals(issue, Backports.findIssue(issue, JdkVersion.parse(\"11.1\").orElseThrow()).orElseThrow());\n+            assertEquals(backport, Backports.findIssue(issue, JdkVersion.parse(\"12.2\").orElseThrow()).orElseThrow());\n+            assertEquals(Optional.empty(), Backports.findIssue(issue, JdkVersion.parse(\"13.3\").orElseThrow()));\n@@ -165,1 +165,1 @@\n-            assertEquals(issue, Backports.findIssue(issue, JdkVersion.parse(\"11.1\")).orElseThrow());\n+            assertEquals(issue, Backports.findIssue(issue, JdkVersion.parse(\"11.1\").orElseThrow()).orElseThrow());\n@@ -169,2 +169,2 @@\n-            assertEquals(issue, Backports.findIssue(issue, JdkVersion.parse(\"12.2\")).orElseThrow());\n-            assertEquals(backport, Backports.findIssue(issue, JdkVersion.parse(\"11.1\")).orElseThrow());\n+            assertEquals(issue, Backports.findIssue(issue, JdkVersion.parse(\"12.2\").orElseThrow()).orElseThrow());\n+            assertEquals(backport, Backports.findIssue(issue, JdkVersion.parse(\"11.1\").orElseThrow()).orElseThrow());\n@@ -174,3 +174,3 @@\n-            assertEquals(issue, Backports.findIssue(issue, JdkVersion.parse(\"12.2\")).orElseThrow());\n-            assertEquals(backport, Backports.findIssue(issue, JdkVersion.parse(\"11.1\")).orElseThrow());\n-            assertEquals(Optional.empty(), Backports.findIssue(issue, JdkVersion.parse(\"13.3\")));\n+            assertEquals(issue, Backports.findIssue(issue, JdkVersion.parse(\"12.2\").orElseThrow()).orElseThrow());\n+            assertEquals(backport, Backports.findIssue(issue, JdkVersion.parse(\"11.1\").orElseThrow()).orElseThrow());\n+            assertEquals(Optional.empty(), Backports.findIssue(issue, JdkVersion.parse(\"13.3\").orElseThrow()));\n@@ -467,0 +467,11 @@\n+\n+    @Test\n+    void labelTest8242283(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo)) {\n+            var backports = new BackportManager(credentials, \"15\");\n+            backports.assertLabeled();\n+\n+            backports.addBackports(\"14.0.2\", \"14u-cpu\", \"11.0.9-oracle\", \"11.0.9\");\n+            backports.assertLabeled();\n+        }\n+    }\n","filename":"jbs\/src\/test\/java\/org\/openjdk\/skara\/jbs\/BackportsTests.java","additions":20,"deletions":9,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import java.util.List;\n+import java.util.*;\n@@ -32,0 +32,4 @@\n+    private JdkVersion from(String raw) {\n+        return JdkVersion.parse(raw).orElseThrow();\n+    }\n+\n@@ -34,6 +38,6 @@\n-        assertEquals(List.of(\"8\"), JdkVersion.parse(\"8\").components());\n-        assertEquals(List.of(\"9\", \"0\", \"4\"), JdkVersion.parse(\"9.0.4\").components());\n-        assertEquals(List.of(\"10\", \"0\", \"2\"), JdkVersion.parse(\"10.0.2\").components());\n-        assertEquals(List.of(\"11\"), JdkVersion.parse(\"11\").components());\n-        assertEquals(List.of(\"11\", \"0\", \"3\"), JdkVersion.parse(\"11.0.3\").components());\n-        assertEquals(List.of(\"12\", \"0\", \"2\"), JdkVersion.parse(\"12.0.2\").components());\n+        assertEquals(List.of(\"8\"), from(\"8\").components());\n+        assertEquals(List.of(\"9\", \"0\", \"4\"), from(\"9.0.4\").components());\n+        assertEquals(List.of(\"10\", \"0\", \"2\"), from(\"10.0.2\").components());\n+        assertEquals(List.of(\"11\"), from(\"11\").components());\n+        assertEquals(List.of(\"11\", \"0\", \"3\"), from(\"11.0.3\").components());\n+        assertEquals(List.of(\"12\", \"0\", \"2\"), from(\"12.0.2\").components());\n@@ -44,8 +48,4 @@\n-        assertEquals(List.of(\"11\", \"0\", \"2\", \"0\", \"1\"), JdkVersion.parse(\"11.0.2.0.1-oracle\").components());\n-        assertEquals(\"oracle\", JdkVersion.parse(\"11.0.2.0.1-oracle\").opt().orElseThrow());\n-        assertEquals(List.of(\"11\", \"0\", \"3\"), JdkVersion.parse(\"11.0.3-oracle\").components());\n-        assertEquals(\"oracle\", JdkVersion.parse(\"11.0.3-oracle\").opt().orElseThrow());\n-        assertEquals(List.of(\"12\"), JdkVersion.parse(\"12u-cpu\").components());\n-        assertEquals(\"cpu\", JdkVersion.parse(\"12u-cpu\").opt().orElseThrow());\n-        assertEquals(List.of(\"13\"), JdkVersion.parse(\"13u-open\").components());\n-        assertEquals(\"open\", JdkVersion.parse(\"13u-open\").opt().orElseThrow());\n+        assertEquals(List.of(\"11\", \"0\", \"2\", \"0\", \"1\"), from(\"11.0.2.0.1-oracle\").components());\n+        assertEquals(\"oracle\", from(\"11.0.2.0.1-oracle\").opt().orElseThrow());\n+        assertEquals(List.of(\"11\", \"0\", \"3\"), from(\"11.0.3-oracle\").components());\n+        assertEquals(\"oracle\", from(\"11.0.3-oracle\").opt().orElseThrow());\n@@ -56,10 +56,10 @@\n-        assertEquals(List.of(\"5.0\", \"45\"), JdkVersion.parse(\"5.0u45\").components());\n-        assertEquals(List.of(\"6\", \"201\"), JdkVersion.parse(\"6u201\").components());\n-        assertEquals(List.of(\"7\", \"40\"), JdkVersion.parse(\"7u40\").components());\n-        assertEquals(List.of(\"8\", \"211\"), JdkVersion.parse(\"8u211\").components());\n-        assertEquals(List.of(\"emb-8\", \"171\"), JdkVersion.parse(\"emb-8u171\").components());\n-        assertEquals(List.of(\"hs22\", \"4\"), JdkVersion.parse(\"hs22.4\").components());\n-        assertEquals(List.of(\"hs23\"), JdkVersion.parse(\"hs23\").components());\n-        assertEquals(List.of(\"openjdk7\"), JdkVersion.parse(\"openjdk7u\").components());\n-        assertEquals(List.of(\"openjdk8\"), JdkVersion.parse(\"openjdk8\").components());\n-        assertEquals(List.of(\"openjdk8\", \"211\"), JdkVersion.parse(\"openjdk8u211\").components());\n+        assertEquals(List.of(\"5.0\", \"45\"), from(\"5.0u45\").components());\n+        assertEquals(List.of(\"6\", \"201\"), from(\"6u201\").components());\n+        assertEquals(List.of(\"7\", \"40\"), from(\"7u40\").components());\n+        assertEquals(List.of(\"8\", \"211\"), from(\"8u211\").components());\n+        assertEquals(List.of(\"emb-8\", \"171\"), from(\"emb-8u171\").components());\n+        assertEquals(List.of(\"hs22\", \"4\"), from(\"hs22.4\").components());\n+        assertEquals(List.of(\"hs23\"), from(\"hs23\").components());\n+        assertEquals(List.of(\"openjdk7\"), from(\"openjdk7\").components());\n+        assertEquals(List.of(\"openjdk8\"), from(\"openjdk8\").components());\n+        assertEquals(List.of(\"openjdk8\", \"211\"), from(\"openjdk8u211\").components());\n@@ -70,3 +70,3 @@\n-        assertEquals(0, JdkVersion.parse(\"5.0u45\").compareTo(JdkVersion.parse(\"5.0u45\")));\n-        assertEquals(0, JdkVersion.parse(\"11.0.3\").compareTo(JdkVersion.parse(\"11.0.3\")));\n-        assertEquals(0, JdkVersion.parse(\"11.0.2.0.1-oracle\").compareTo(JdkVersion.parse(\"11.0.2.0.1-oracle\")));\n+        assertEquals(0, from(\"5.0u45\").compareTo(from(\"5.0u45\")));\n+        assertEquals(0, from(\"11.0.3\").compareTo(from(\"11.0.3\")));\n+        assertEquals(0, from(\"11.0.2.0.1-oracle\").compareTo(from(\"11.0.2.0.1-oracle\")));\n@@ -74,2 +74,2 @@\n-        assertEquals(1, JdkVersion.parse(\"6u201\").compareTo(JdkVersion.parse(\"5.0u45\")));\n-        assertEquals(-1, JdkVersion.parse(\"5.0u45\").compareTo(JdkVersion.parse(\"6u201\")));\n+        assertEquals(1, from(\"6u201\").compareTo(from(\"5.0u45\")));\n+        assertEquals(-1, from(\"5.0u45\").compareTo(from(\"6u201\")));\n@@ -77,2 +77,2 @@\n-        assertEquals(-1, JdkVersion.parse(\"11.0.2.0.1\").compareTo(JdkVersion.parse(\"11.0.2.0.1-oracle\")));\n-        assertEquals(1, JdkVersion.parse(\"11.0.2.0.1-oracle\").compareTo(JdkVersion.parse(\"11.0.2.0.1\")));\n+        assertEquals(-1, from(\"11.0.2.0.1\").compareTo(from(\"11.0.2.0.1-oracle\")));\n+        assertEquals(1, from(\"11.0.2.0.1-oracle\").compareTo(from(\"11.0.2.0.1\")));\n@@ -80,6 +80,6 @@\n-        assertEquals(-1, JdkVersion.parse(\"9.0.4\").compareTo(JdkVersion.parse(\"10.0.2\")));\n-        assertEquals(-1, JdkVersion.parse(\"11\").compareTo(JdkVersion.parse(\"11.0.3\")));\n-        assertEquals(-1, JdkVersion.parse(\"emb-8u171\").compareTo(JdkVersion.parse(\"emb-8u175\")));\n-        assertEquals(-1, JdkVersion.parse(\"emb-8u71\").compareTo(JdkVersion.parse(\"emb-8u170\")));\n-        assertEquals(-1, JdkVersion.parse(\"openjdk7u\").compareTo(JdkVersion.parse(\"openjdk7u42\")));\n-        assertEquals(-1, JdkVersion.parse(\"hs22.4\").compareTo(JdkVersion.parse(\"hs23\")));\n+        assertEquals(-1, from(\"9.0.4\").compareTo(from(\"10.0.2\")));\n+        assertEquals(-1, from(\"11\").compareTo(from(\"11.0.3\")));\n+        assertEquals(-1, from(\"emb-8u171\").compareTo(from(\"emb-8u175\")));\n+        assertEquals(-1, from(\"emb-8u71\").compareTo(from(\"emb-8u170\")));\n+        assertEquals(-1, from(\"openjdk7\").compareTo(from(\"openjdk7u42\")));\n+        assertEquals(-1, from(\"hs22.4\").compareTo(from(\"hs23\")));\n@@ -90,2 +90,4 @@\n-        assertEquals(\"bla\", JdkVersion.parse(\"bla\").feature());\n-        assertEquals(\"\", JdkVersion.parse(\"\").feature());\n+        assertEquals(Optional.empty(), JdkVersion.parse(\"bla\"));\n+        assertEquals(Optional.empty(), JdkVersion.parse(\"\"));\n+        assertEquals(Optional.empty(), JdkVersion.parse(\"12u-cpu\"));\n+        assertEquals(Optional.empty(), JdkVersion.parse(\"13u-open\"));\n","filename":"jbs\/src\/test\/java\/org\/openjdk\/skara\/jbs\/JdkVersionTests.java","additions":42,"deletions":40,"binary":false,"changes":82,"status":"modified"}]}