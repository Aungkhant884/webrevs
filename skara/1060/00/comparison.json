{"files":[{"patch":"@@ -158,1 +158,1 @@\n-                          .filter(tag -> !history.hasTag(tag, listener.name()))\n+                          .filter(tag -> !history.hasTag(tag, listener.name()) || history.shouldRetryTagUpdate(tag, listener.name()))\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/RepositoryWorkItem.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,2 @@\n-import java.nio.file.Path;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.*;\n@@ -40,1 +41,2 @@\n-import static org.junit.jupiter.api.Assertions.*;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -42,1 +44,2 @@\n-import static org.openjdk.skara.issuetracker.Issue.State.*;\n+import static org.openjdk.skara.issuetracker.Issue.State.OPEN;\n+import static org.openjdk.skara.issuetracker.Issue.State.RESOLVED;\n@@ -588,0 +591,94 @@\n+    @Test\n+    void testIssueRetryTag(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+\n+            var repo = credentials.getHostedRepository();\n+            var repoFolder = tempFolder.path().resolve(\"repo\");\n+            var localRepo = CheckableRepository.init(repoFolder, repo.repositoryType());\n+            credentials.commitLock(localRepo);\n+            localRepo.pushAll(repo.url());\n+\n+            var issueProject = credentials.getIssueProject();\n+            var storageFolder = tempFolder.path().resolve(\"storage\");\n+            var jbsNotifierConfig = JSON.object().put(\"fixversions\", JSON.object())\n+                                        .put(\"buildname\", \"team\");\n+            var notifyBot = testBotBuilder(repo, issueProject, storageFolder, jbsNotifierConfig).create(\"notify\", JSON.object());\n+\n+            \/\/ Initialize history\n+            var current = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.tag(current, \"jdk-16+9\", \"First tag\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(new Branch(repo.url().toString()), \"--tags\", false);\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ Create an issue and commit a fix\n+            var authorEmailAddress = issueProject.issueTracker().currentUser().username() + \"@openjdk.org\";\n+            var issue = issueProject.createIssue(\"This is an issue\", List.of(\"Indeed\"), Map.of(\"issuetype\", JSON.of(\"Enhancement\")));\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, \"Another line\", issue.id() + \": Fix that issue\", \"Duke\", authorEmailAddress);\n+            localRepo.push(editHash, repo.url(), \"master\");\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ The changeset should be reflected in a comment\n+            var updatedIssue = issueProject.issue(issue.id()).orElseThrow();\n+\n+            var comments = updatedIssue.comments();\n+            assertEquals(1, comments.size());\n+            var comment = comments.get(0);\n+            assertTrue(comment.body().contains(editHash.abbreviate()));\n+\n+            \/\/ As well as a fixVersion and a resolved in build\n+            assertEquals(Set.of(\"0.1\"), fixVersions(updatedIssue));\n+            assertEquals(\"team\", updatedIssue.properties().get(\"customfield_10006\").asString());\n+\n+            \/\/ The issue should be assigned and resolved\n+            assertEquals(RESOLVED, updatedIssue.state());\n+            assertEquals(List.of(issueProject.issueTracker().currentUser()), updatedIssue.assignees());\n+\n+            \/\/ Tag it\n+            localRepo.tag(editHash, \"jdk-16+110\", \"Second tag\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(new Branch(repo.url().toString()), \"--tags\", false);\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ The build should now be updated\n+            updatedIssue = issueProject.issue(issue.id()).orElseThrow();\n+            assertEquals(\"b110\", updatedIssue.properties().get(\"customfield_10006\").asString());\n+\n+            \/\/ Tag it again\n+            localRepo.tag(editHash, \"jdk-16+10\", \"Third tag\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(new Branch(repo.url().toString()), \"--tags\", false);\n+\n+            \/\/ Claim that it is already processed\n+            localRepo.fetch(repo.url(), \"+history:history\");\n+            localRepo.checkout(new Branch(\"history\"), true);\n+            var historyFile = repoFolder.resolve(\"test.tags.txt\");\n+            var processed = new ArrayList<>(Files.readAllLines(historyFile, StandardCharsets.UTF_8));\n+            processed.add(\"jdk-16+10 issue done\");\n+            Files.writeString(historyFile, String.join(\"\\n\", processed), StandardCharsets.UTF_8);\n+            localRepo.add(historyFile);\n+            var updatedHash = localRepo.commit(\"Marking jdk-16+10 as done\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(updatedHash, repo.url(), \"history\");\n+\n+            \/\/ Now let the notifier see it\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ The build should not have been updated\n+            updatedIssue = issueProject.issue(issue.id()).orElseThrow();\n+            assertEquals(\"b110\", updatedIssue.properties().get(\"customfield_10006\").asString());\n+\n+            \/\/ Flag it as in need of retry\n+            processed.remove(processed.size() - 1);\n+            processed.add(\"jdk-16+10 issue retry\");\n+            Files.writeString(repoFolder.resolve(\"test.tags.txt\"), String.join(\"\\n\", processed), StandardCharsets.UTF_8);\n+            localRepo.add(historyFile);\n+            var retryHash = localRepo.commit(\"Marking jdk-16+10 as needing retry\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(retryHash, repo.url(), \"history\");\n+\n+            \/\/ Now let the notifier see it\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ The build should have been updated by the retry\n+            updatedIssue = issueProject.issue(issue.id()).orElseThrow();\n+            assertEquals(\"b10\", updatedIssue.properties().get(\"customfield_10006\").asString());\n+        }\n+    }\n+\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifierTests.java","additions":100,"deletions":3,"binary":false,"changes":103,"status":"modified"}]}