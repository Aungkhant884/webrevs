{"files":[{"patch":"@@ -41,0 +41,1 @@\n+    implementation project(':metrics')\n","filename":"bot\/build.gradle","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"","filename":"bot\/src\/main\/java\/org\/openjdk\/skara\/bot\/WebhookHandler.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"bot\/src\/main\/java\/org\/openjdk\/skara\/bot\/RestReceiver.java","status":"renamed"},{"patch":"@@ -43,0 +43,1 @@\n+    implementation project(':metrics')\n","filename":"bots\/bridgekeeper\/build.gradle","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+    implementation project(':metrics')\n","filename":"bots\/censussync\/build.gradle","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+    implementation project(':metrics')\n","filename":"bots\/checkout\/build.gradle","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -71,0 +71,1 @@\n+    implementation project(':metrics')\n","filename":"bots\/cli\/build.gradle","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+    implementation project(':metrics')\n","filename":"bots\/csr\/build.gradle","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+    implementation project(':metrics')\n","filename":"bots\/forward\/build.gradle","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+    implementation project(':metrics')\n","filename":"bots\/hgbridge\/build.gradle","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+    implementation project(':metrics')\n","filename":"bots\/merge\/build.gradle","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+    implementation project(':metrics')\n","filename":"bots\/mirror\/build.gradle","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+    implementation project(':metrics')\n","filename":"bots\/mlbridge\/build.gradle","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+    implementation project(':metrics')\n","filename":"bots\/notify\/build.gradle","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+    implementation project(':metrics')\n","filename":"bots\/pr\/build.gradle","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+    implementation project(':metrics')\n","filename":"bots\/submit\/build.gradle","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+    implementation project(':metrics')\n","filename":"bots\/synclabel\/build.gradle","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+    implementation project(':metrics')\n","filename":"bots\/tester\/build.gradle","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+    implementation project(':metrics')\n","filename":"bots\/testinfo\/build.gradle","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+    implementation project(':metrics')\n","filename":"bots\/topological\/build.gradle","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,38 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+module {\n+    name = 'org.openjdk.skara.metrics'\n+    test {\n+        requires 'org.junit.jupiter.api'\n+        opens 'org.openjdk.skara.metrics' to 'org.junit.platform.commons'\n+    }\n+}\n+\n+publishing {\n+    publications {\n+        metrics(MavenPublication) {\n+            from components.java\n+        }\n+    }\n+}\n","filename":"metrics\/build.gradle","additions":38,"deletions":0,"binary":false,"changes":38,"status":"added"},{"patch":"@@ -23,3 +23,2 @@\n-module org.openjdk.skara.xml {\n-    requires java.xml;\n-    exports org.openjdk.skara.xml;\n+module org.openjdk.skara.metrics {\n+    exports org.openjdk.skara.metrics;\n@@ -27,0 +26,1 @@\n+\n","filename":"metrics\/src\/main\/java\/module-info.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"xml\/src\/main\/java\/module-info.java","status":"copied"},{"patch":"@@ -23,3 +23,6 @@\n-module org.openjdk.skara.xml {\n-    requires java.xml;\n-    exports org.openjdk.skara.xml;\n+package org.openjdk.skara.metrics;\n+\n+import java.util.List;\n+\n+public interface Collector {\n+    List<Metric> collect();\n","filename":"metrics\/src\/main\/java\/org\/openjdk\/skara\/metrics\/Collector.java","additions":6,"deletions":3,"binary":false,"changes":9,"previous_filename":"xml\/src\/main\/java\/module-info.java","status":"copied"},{"patch":"@@ -0,0 +1,52 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.metrics;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+public final class CollectorRegistry {\n+    private static final CollectorRegistry DEFAULT = new CollectorRegistry();\n+    private final ConcurrentLinkedQueue<Collector> collectors = new ConcurrentLinkedQueue<>();\n+\n+    public void register(Collector c) {\n+        collectors.add(c);\n+    }\n+\n+    public void unregister(Collector c) {\n+        collectors.remove(c);\n+    }\n+\n+    public List<Metric> scrape() {\n+        var result = new ArrayList<Metric>();\n+        for (var collector : collectors) {\n+            result.addAll(collector.collect());\n+        }\n+        return result;\n+    }\n+\n+    public static CollectorRegistry defaultRegistry() {\n+        return DEFAULT;\n+    }\n+}\n","filename":"metrics\/src\/main\/java\/org\/openjdk\/skara\/metrics\/CollectorRegistry.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"},{"patch":"@@ -0,0 +1,291 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.metrics;\n+\n+import java.util.*;\n+import java.util.concurrent.atomic.DoubleAdder;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+public final class Counter implements Collector {\n+    public final static class Builder {\n+        public final static class WithOneLabel {\n+            private final String name;\n+            private final String label;\n+\n+            WithOneLabel(String name, String label) {\n+                this.name = name;\n+                this.label = label;\n+            }\n+\n+            public Counter.WithOneLabel register() {\n+                return register(CollectorRegistry.defaultRegistry());\n+            }\n+\n+            public Counter.WithOneLabel register(CollectorRegistry registry) {\n+                var counter = new Counter.WithOneLabel(name, label);\n+                registry.register(counter);\n+                return counter;\n+            }\n+        }\n+\n+        public final static class WithTwoLabels {\n+            private final String name;\n+            private final String label1;\n+            private final String label2;\n+\n+            WithTwoLabels(String name, String label1, String label2) {\n+                this.name = name;\n+                this.label1 = label1;\n+                this.label2 = label2;\n+            }\n+\n+            public Counter.WithTwoLabels register() {\n+                return register(CollectorRegistry.defaultRegistry());\n+            }\n+\n+            public Counter.WithTwoLabels register(CollectorRegistry registry) {\n+                var counter = new Counter.WithTwoLabels(name, label1, label2);\n+                registry.register(counter);\n+                return counter;\n+            }\n+        }\n+\n+        public final static class WithThreeLabels {\n+            private final String name;\n+            private final String label1;\n+            private final String label2;\n+            private final String label3;\n+\n+            WithThreeLabels(String name, String label1, String label2, String label3) {\n+                this.name = name;\n+                this.label1 = label1;\n+                this.label2 = label2;\n+                this.label3 = label3;\n+            }\n+\n+            public Counter.WithThreeLabels register() {\n+                return register(CollectorRegistry.defaultRegistry());\n+            }\n+\n+            public Counter.WithThreeLabels register(CollectorRegistry registry) {\n+                var counter = new Counter.WithThreeLabels(name, label1, label2, label3);\n+                registry.register(counter);\n+                return counter;\n+            }\n+        }\n+\n+        private final String name;\n+\n+        Builder(String name) {\n+            this.name = name;\n+        }\n+\n+        public Counter register() {\n+            return register(CollectorRegistry.defaultRegistry());\n+        }\n+\n+        public Counter register(CollectorRegistry registry) {\n+            var counter = new Counter(name);\n+            registry.register(counter);\n+            return counter;\n+        }\n+\n+        public Builder.WithOneLabel labels(String label) {\n+            return new Builder.WithOneLabel(name, label);\n+        }\n+\n+        public Builder.WithTwoLabels labels(String label1, String label2) {\n+            return new Builder.WithTwoLabels(name, label1, label2);\n+        }\n+\n+        public Builder.WithThreeLabels labels(String label1, String label2, String label3) {\n+            return new Builder.WithThreeLabels(name, label1, label2, label3);\n+        }\n+    }\n+\n+    public static final class Incrementer {\n+        private final DoubleAdder adder;\n+        private final Runnable resetter;\n+\n+        Incrementer(DoubleAdder adder, Runnable resetter) {\n+            this.adder = adder;\n+            this.resetter = resetter;\n+        }\n+\n+        public void inc() {\n+            inc(1);\n+        }\n+\n+        public void inc(double d) {\n+            adder.add(d);\n+        }\n+\n+        public void reset() {\n+            resetter.run();\n+        }\n+    }\n+\n+    private final String name;\n+    private volatile DoubleAdder value;\n+\n+    Counter(String name) {\n+        this.name = name;\n+        this.value = new DoubleAdder();\n+    }\n+\n+    public static Counter.Builder name(String name) {\n+        return new Counter.Builder(name);\n+    }\n+\n+    public void inc() {\n+        inc(1);\n+    }\n+\n+    public void inc(double d) {\n+        value.add(d);\n+    }\n+\n+    public void reset() {\n+        value = new DoubleAdder();\n+    }\n+\n+    @Override\n+    public List<Metric> collect() {\n+        return List.of(new Metric(Metric.Type.COUNTER, name, List.of(), value.sum()));\n+    }\n+\n+    public static final class WithOneLabel implements Collector {\n+        private final String name;\n+        private final String label;\n+        private final ConcurrentHashMap<String, DoubleAdder> value;\n+\n+        public WithOneLabel(String name, String label) {\n+            this.name = name;\n+            this.label = label;\n+            this.value = new ConcurrentHashMap<>();\n+        }\n+\n+        public Incrementer labels(String labelValue) {\n+            var adder = new DoubleAdder();\n+            var existing = value.putIfAbsent(labelValue, adder);\n+            if (existing == null) {\n+                existing = adder;\n+            }\n+            return new Incrementer(existing, () -> {\n+                value.put(labelValue, new DoubleAdder());\n+            });\n+        }\n+\n+        @Override\n+        public List<Metric> collect() {\n+            var metrics = new ArrayList<Metric>();\n+            for (var key : value.keySet()) {\n+                var l = new Metric.Label(label, key);\n+                var d = value.get(key);\n+                metrics.add(new Metric(Metric.Type.COUNTER, name, List.of(l), d.sum()));\n+            }\n+            return metrics;\n+        }\n+    }\n+\n+    public static final class WithTwoLabels implements Collector {\n+        private final String name;\n+        private final String label1;\n+        private final String label2;\n+        private final ConcurrentHashMap<List<String>, DoubleAdder> value;\n+\n+        public WithTwoLabels(String name, String label1, String label2) {\n+            this.name = name;\n+            this.label1 = label1;\n+            this.label2 = label2;\n+            this.value = new ConcurrentHashMap<>();\n+        }\n+\n+        public Incrementer labels(String labelValue1, String labelValue2) {\n+            var adder = new DoubleAdder();\n+            var key = List.of(labelValue1, labelValue2);\n+            var existing = value.putIfAbsent(key, adder);\n+            if (existing == null) {\n+                existing = adder;\n+            }\n+            return new Incrementer(existing, () -> {\n+                value.put(key, new DoubleAdder());\n+            });\n+        }\n+\n+        @Override\n+        public List<Metric> collect() {\n+            var metrics = new ArrayList<Metric>();\n+            for (var values : value.keySet()) {\n+                var labels =\n+                    List.of(new Metric.Label(label1, values.get(0)),\n+                            new Metric.Label(label2, values.get(1)));\n+                var d = value.get(values);\n+                metrics.add(new Metric(Metric.Type.COUNTER, name, labels, d.sum()));\n+            }\n+            return metrics;\n+        }\n+    }\n+\n+    public static final class WithThreeLabels implements Collector {\n+        private final String name;\n+        private final String label1;\n+        private final String label2;\n+        private final String label3;\n+        private final ConcurrentHashMap<List<String>, DoubleAdder> value;\n+\n+        public WithThreeLabels(String name, String label1, String label2, String label3) {\n+            this.name = name;\n+            this.label1 = label1;\n+            this.label2 = label2;\n+            this.label3 = label3;\n+            this.value = new ConcurrentHashMap<>();\n+        }\n+\n+        public Incrementer labels(String labelValue1, String labelValue2, String labelValue3) {\n+            var adder = new DoubleAdder();\n+            var key = List.of(labelValue1, labelValue2, labelValue3);\n+            var existing = value.putIfAbsent(key, adder);\n+            if (existing == null) {\n+                existing = adder;\n+            }\n+            return new Incrementer(existing, () -> {\n+                value.put(key, new DoubleAdder());\n+            });\n+        }\n+\n+        @Override\n+        public List<Metric> collect() {\n+            var metrics = new ArrayList<Metric>();\n+            for (var values : value.keySet()) {\n+                var labels =\n+                    List.of(new Metric.Label(label1, values.get(0)),\n+                            new Metric.Label(label2, values.get(1)),\n+                            new Metric.Label(label3, values.get(2)));\n+                var d = value.get(values);\n+                metrics.add(new Metric(Metric.Type.COUNTER, name, labels, d.sum()));\n+            }\n+            return metrics;\n+        }\n+    }\n+}\n","filename":"metrics\/src\/main\/java\/org\/openjdk\/skara\/metrics\/Counter.java","additions":291,"deletions":0,"binary":false,"changes":291,"status":"added"},{"patch":"@@ -0,0 +1,325 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.metrics;\n+\n+import java.time.ZonedDateTime;\n+import java.util.*;\n+import java.util.function.Consumer;\n+import java.util.concurrent.atomic.DoubleAdder;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+public final class Gauge implements Collector {\n+    public final static class Builder {\n+        public final static class WithOneLabel {\n+            private final String name;\n+            private final String label;\n+\n+            WithOneLabel(String name, String label) {\n+                this.name = name;\n+                this.label = label;\n+            }\n+\n+            public Gauge.WithOneLabel register() {\n+                return register(CollectorRegistry.defaultRegistry());\n+            }\n+\n+            public Gauge.WithOneLabel register(CollectorRegistry registry) {\n+                var gauge = new Gauge.WithOneLabel(name, label);\n+                registry.register(gauge);\n+                return gauge;\n+            }\n+        }\n+\n+        public final static class WithTwoLabels {\n+            private final String name;\n+            private final String label1;\n+            private final String label2;\n+\n+            WithTwoLabels(String name, String label1, String label2) {\n+                this.name = name;\n+                this.label1 = label1;\n+                this.label2 = label2;\n+            }\n+\n+            public Gauge.WithTwoLabels register() {\n+                return register(CollectorRegistry.defaultRegistry());\n+            }\n+\n+            public Gauge.WithTwoLabels register(CollectorRegistry registry) {\n+                var gauge = new Gauge.WithTwoLabels(name, label1, label2);\n+                registry.register(gauge);\n+                return gauge;\n+            }\n+        }\n+\n+        public final static class WithThreeLabels {\n+            private final String name;\n+            private final String label1;\n+            private final String label2;\n+            private final String label3;\n+\n+            WithThreeLabels(String name, String label1, String label2, String label3) {\n+                this.name = name;\n+                this.label1 = label1;\n+                this.label2 = label2;\n+                this.label3 = label3;\n+            }\n+\n+            public Gauge.WithThreeLabels register() {\n+                return register(CollectorRegistry.defaultRegistry());\n+            }\n+\n+            public Gauge.WithThreeLabels register(CollectorRegistry registry) {\n+                var gauge = new Gauge.WithThreeLabels(name, label1, label2, label3);\n+                registry.register(gauge);\n+                return gauge;\n+            }\n+        }\n+\n+        private final String name;\n+\n+        Builder(String name) {\n+            this.name = name;\n+        }\n+\n+        public Gauge register() {\n+            return register(CollectorRegistry.defaultRegistry());\n+        }\n+\n+        public Gauge register(CollectorRegistry registry) {\n+            var gauge = new Gauge(name);\n+            registry.register(gauge);\n+            return gauge;\n+        }\n+\n+        public Builder.WithOneLabel labels(String label) {\n+            return new Builder.WithOneLabel(name, label);\n+        }\n+\n+        public Builder.WithTwoLabels labels(String label1, String label2) {\n+            return new Builder.WithTwoLabels(name, label1, label2);\n+        }\n+\n+        public Builder.WithThreeLabels labels(String label1, String label2, String label3) {\n+            return new Builder.WithThreeLabels(name, label1, label2, label3);\n+        }\n+    }\n+\n+    public static final class Adjuster {\n+        private final DoubleAdder adder;\n+        private final Consumer<Double> resetter;\n+\n+        Adjuster(DoubleAdder adder, Consumer<Double> resetter) {\n+            this.adder = adder;\n+            this.resetter = resetter;\n+        }\n+\n+        public void inc() {\n+            inc(1);\n+        }\n+\n+        public void inc(double d) {\n+            adder.add(d);\n+        }\n+\n+        public void dec() {\n+            inc(-1);\n+        }\n+\n+        public void dec(double d) {\n+            adder.add(0 - d);\n+        }\n+\n+        public void set(double d) {\n+            resetter.accept(d);\n+        }\n+\n+        public void setToCurrentTime() {\n+            set(ZonedDateTime.now().toInstant().toEpochMilli() \/ 1000.0);\n+        }\n+    }\n+\n+    private final String name;\n+    private volatile DoubleAdder value;\n+\n+    Gauge(String name) {\n+        this.name = name;\n+        this.value = new DoubleAdder();\n+    }\n+\n+    public static Gauge.Builder name(String name) {\n+        return new Gauge.Builder(name);\n+    }\n+\n+    public void inc() {\n+        inc(1);\n+    }\n+\n+    public void inc(double d) {\n+        value.add(d);\n+    }\n+\n+    public void dec() {\n+        inc(-1);\n+    }\n+\n+    public void dec(double d) {\n+        value.add(0 - d);\n+    }\n+\n+    public void set(double d) {\n+        var newAdder = new DoubleAdder();\n+        newAdder.add(d);\n+        value = newAdder;\n+    }\n+\n+    public void setToCurrentTime() {\n+        set(ZonedDateTime.now().toInstant().toEpochMilli() \/ 1000.0);\n+    }\n+\n+    @Override\n+    public List<Metric> collect() {\n+        return List.of(new Metric(Metric.Type.GAUGE, name, List.of(), value.sum()));\n+    }\n+\n+    public static final class WithOneLabel implements Collector {\n+        private final String name;\n+        private final String label;\n+        private final ConcurrentHashMap<String, DoubleAdder> value;\n+\n+        public WithOneLabel(String name, String label) {\n+            this.name = name;\n+            this.label = label;\n+            this.value = new ConcurrentHashMap<>();\n+        }\n+\n+        public Adjuster labels(String labelValue) {\n+            var adder = new DoubleAdder();\n+            var existing = value.putIfAbsent(labelValue, adder);\n+            if (existing == null) {\n+                existing = adder;\n+            }\n+            return new Adjuster(existing, (v) -> {\n+                var newAdder = new DoubleAdder();\n+                newAdder.add(v);\n+                value.put(labelValue, newAdder);\n+            });\n+        }\n+\n+        @Override\n+        public List<Metric> collect() {\n+            var metrics = new ArrayList<Metric>();\n+            for (var key : value.keySet()) {\n+                var l = new Metric.Label(label, key);\n+                var d = value.get(key);\n+                metrics.add(new Metric(Metric.Type.GAUGE, name, List.of(l), d.sum()));\n+            }\n+            return metrics;\n+        }\n+    }\n+\n+    public static final class WithTwoLabels implements Collector {\n+        private final String name;\n+        private final String label1;\n+        private final String label2;\n+        private final ConcurrentHashMap<List<String>, DoubleAdder> value;\n+\n+        public WithTwoLabels(String name, String label1, String label2) {\n+            this.name = name;\n+            this.label1 = label1;\n+            this.label2 = label2;\n+            this.value = new ConcurrentHashMap<>();\n+        }\n+\n+        public Adjuster labels(String labelValue1, String labelValue2) {\n+            var adder = new DoubleAdder();\n+            var key = List.of(labelValue1, labelValue2);\n+            var existing = value.putIfAbsent(key, adder);\n+            if (existing == null) {\n+                existing = adder;\n+            }\n+            return new Adjuster(existing, (v) -> {\n+                var newAdder = new DoubleAdder();\n+                newAdder.add(v);\n+                value.put(key, newAdder);\n+            });\n+        }\n+\n+        @Override\n+        public List<Metric> collect() {\n+            var metrics = new ArrayList<Metric>();\n+            for (var values : value.keySet()) {\n+                var labels =\n+                    List.of(new Metric.Label(label1, values.get(0)),\n+                            new Metric.Label(label2, values.get(1)));\n+                var d = value.get(values);\n+                metrics.add(new Metric(Metric.Type.GAUGE, name, labels, d.sum()));\n+            }\n+            return metrics;\n+        }\n+    }\n+\n+    public static final class WithThreeLabels implements Collector {\n+        private final String name;\n+        private final String label1;\n+        private final String label2;\n+        private final String label3;\n+        private final ConcurrentHashMap<List<String>, DoubleAdder> value;\n+\n+        public WithThreeLabels(String name, String label1, String label2, String label3) {\n+            this.name = name;\n+            this.label1 = label1;\n+            this.label2 = label2;\n+            this.label3 = label3;\n+            this.value = new ConcurrentHashMap<>();\n+        }\n+\n+        public Adjuster labels(String labelValue1, String labelValue2, String labelValue3) {\n+            var adder = new DoubleAdder();\n+            var key = List.of(labelValue1, labelValue2, labelValue3);\n+            var existing = value.putIfAbsent(key, adder);\n+            if (existing == null) {\n+                existing = adder;\n+            }\n+            return new Adjuster(existing, (v) -> {\n+                var newAdder = new DoubleAdder();\n+                newAdder.add(v);\n+                value.put(key, newAdder);\n+            });\n+        }\n+\n+        @Override\n+        public List<Metric> collect() {\n+            var metrics = new ArrayList<Metric>();\n+            for (var values : value.keySet()) {\n+                var labels =\n+                    List.of(new Metric.Label(label1, values.get(0)),\n+                            new Metric.Label(label2, values.get(1)),\n+                            new Metric.Label(label3, values.get(2)));\n+                var d = value.get(values);\n+                metrics.add(new Metric(Metric.Type.GAUGE, name, labels, d.sum()));\n+            }\n+            return metrics;\n+        }\n+    }\n+}\n","filename":"metrics\/src\/main\/java\/org\/openjdk\/skara\/metrics\/Gauge.java","additions":325,"deletions":0,"binary":false,"changes":325,"status":"added"},{"patch":"@@ -0,0 +1,96 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.metrics;\n+\n+import java.util.List;\n+\n+public final class Metric {\n+    public final static class Label {\n+        private String name;\n+        private String value;\n+\n+        public Label(String name, String value) {\n+            this.name = name;\n+            this.value = value;\n+        }\n+\n+        public String name() {\n+            return name;\n+        }\n+\n+        public String value() {\n+            return value;\n+        }\n+    }\n+\n+    public enum Type {\n+        COUNTER,\n+        GAUGE,\n+        HISTOGRAM,\n+        SUMMARY;\n+\n+        @Override\n+        public String toString() {\n+            switch (this) {\n+                case COUNTER:\n+                    return \"counter\";\n+                case GAUGE:\n+                    return \"gauge\";\n+                case HISTOGRAM:\n+                    return \"histogram\";\n+                case SUMMARY:\n+                    return \"summary\";\n+                default:\n+                    throw new IllegalStateException(\"Unexpected type\");\n+            }\n+        }\n+    }\n+\n+    private final Type type;\n+    private final String name;\n+    private final List<Label> labels;\n+    private final double value;\n+\n+    public Metric(Type type, String name, List<Label> labels, double value) {\n+        this.type = type;\n+        this.name = name;\n+        this.labels = labels;\n+        this.value = value;\n+    }\n+\n+    public Type type() {\n+        return type;\n+    }\n+\n+    public String name() {\n+        return name;\n+    }\n+\n+    public List<Label> labels() {\n+        return labels;\n+    }\n+\n+    public double value() {\n+        return value;\n+    }\n+}\n","filename":"metrics\/src\/main\/java\/org\/openjdk\/skara\/metrics\/Metric.java","additions":96,"deletions":0,"binary":false,"changes":96,"status":"added"},{"patch":"@@ -0,0 +1,53 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.metrics;\n+\n+import org.junit.jupiter.api.*;\n+\n+import java.util.*;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class CollectorRegistryTests {\n+    @Test\n+    void register() {\n+        var registry = new CollectorRegistry();\n+        var counter = Counter.name(\"counter\").register(registry);\n+        var gauge = Gauge.name(\"gauge\").register(registry);\n+        var metrics = registry.scrape();\n+        assertEquals(2, metrics.size());\n+        assertEquals(\"counter\", metrics.get(0).name());\n+        assertEquals(Metric.Type.COUNTER, metrics.get(0).type());\n+        assertEquals(\"gauge\", metrics.get(1).name());\n+        assertEquals(Metric.Type.GAUGE, metrics.get(1).type());\n+    }\n+\n+    @Test\n+    void unregister() {\n+        var registry = new CollectorRegistry();\n+        var counter = Counter.name(\"test\").register(registry);\n+        assertEquals(1, registry.scrape().size());\n+        registry.unregister(counter);\n+        assertEquals(0, registry.scrape().size());\n+    }\n+}\n","filename":"metrics\/src\/test\/java\/org\/openjdk\/skara\/metrics\/CollectorRegistryTests.java","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"},{"patch":"@@ -0,0 +1,155 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.metrics;\n+\n+import org.junit.jupiter.api.*;\n+import java.util.*;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class CounterTests {\n+    @Test\n+    void inc() {\n+        var registry = new CollectorRegistry();\n+        var counter = Counter.name(\"test\").register(registry);\n+        assertEquals(0, counter.collect().get(0).value());\n+        counter.inc();\n+        assertEquals(1, counter.collect().get(0).value());\n+    }\n+\n+    @Test\n+    void incTwice() {\n+        var registry = new CollectorRegistry();\n+        var counter = Counter.name(\"test\").register(registry);\n+        assertEquals(0, counter.collect().get(0).value());\n+        counter.inc();\n+        assertEquals(1, counter.collect().get(0).value());\n+        counter.inc();\n+        assertEquals(2, counter.collect().get(0).value());\n+        counter.inc();\n+        counter.inc();\n+        assertEquals(4, counter.collect().get(0).value());\n+    }\n+\n+    @Test\n+    void incWithValue() {\n+        var registry = new CollectorRegistry();\n+        var counter = Counter.name(\"test\").register(registry);\n+        assertEquals(0, counter.collect().get(0).value());\n+        counter.inc(17);\n+        assertEquals(17, counter.collect().get(0).value());\n+    }\n+\n+    @Test\n+    void incWithValueMixedWithInc() {\n+        var registry = new CollectorRegistry();\n+        var counter = Counter.name(\"test\").register(registry);\n+        assertEquals(0, counter.collect().get(0).value());\n+        counter.inc(17);\n+        assertEquals(17, counter.collect().get(0).value());\n+        counter.inc();\n+        assertEquals(18, counter.collect().get(0).value());\n+        counter.inc(3);\n+        assertEquals(21, counter.collect().get(0).value());\n+    }\n+\n+    @Test\n+    void incAndReset() {\n+        var registry = new CollectorRegistry();\n+        var counter = Counter.name(\"test\").register(registry);\n+        assertEquals(0, counter.collect().get(0).value());\n+        counter.inc(17);\n+        assertEquals(17, counter.collect().get(0).value());\n+        counter.reset();\n+        assertEquals(0, counter.collect().get(0).value());\n+        counter.inc(3);\n+        assertEquals(3, counter.collect().get(0).value());\n+    }\n+\n+    @Test\n+    void oneLabel() {\n+        var registry = new CollectorRegistry();\n+        var counter = Counter.name(\"test\").labels(\"a\").register(registry);\n+        counter.labels(\"1\").inc(17);\n+        assertEquals(1, counter.collect().size());\n+        assertEquals(17, counter.collect().get(0).value());\n+        assertEquals(1, counter.collect().get(0).labels().size());\n+        assertEquals(\"a\", counter.collect().get(0).labels().get(0).name());\n+        assertEquals(\"1\", counter.collect().get(0).labels().get(0).value());\n+    }\n+\n+    @Test\n+    void twoLabels() {\n+        var registry = new CollectorRegistry();\n+        var counter = Counter.name(\"test\").labels(\"a\", \"b\").register(registry);\n+        counter.labels(\"1\", \"2\").inc(17);\n+        assertEquals(1, counter.collect().size());\n+        assertEquals(17, counter.collect().get(0).value());\n+        assertEquals(2, counter.collect().get(0).labels().size());\n+        assertEquals(\"a\", counter.collect().get(0).labels().get(0).name());\n+        assertEquals(\"1\", counter.collect().get(0).labels().get(0).value());\n+        assertEquals(\"b\", counter.collect().get(0).labels().get(1).name());\n+        assertEquals(\"2\", counter.collect().get(0).labels().get(1).value());\n+    }\n+\n+    @Test\n+    void threeLabels() {\n+        var registry = new CollectorRegistry();\n+        var counter = Counter.name(\"test\").labels(\"a\", \"b\", \"c\").register(registry);\n+        counter.labels(\"1\", \"2\", \"3\").inc(17);\n+        assertEquals(1, counter.collect().size());\n+        assertEquals(17, counter.collect().get(0).value());\n+        assertEquals(3, counter.collect().get(0).labels().size());\n+        assertEquals(\"a\", counter.collect().get(0).labels().get(0).name());\n+        assertEquals(\"1\", counter.collect().get(0).labels().get(0).value());\n+        assertEquals(\"b\", counter.collect().get(0).labels().get(1).name());\n+        assertEquals(\"2\", counter.collect().get(0).labels().get(1).value());\n+        assertEquals(\"c\", counter.collect().get(0).labels().get(2).name());\n+        assertEquals(\"3\", counter.collect().get(0).labels().get(2).value());\n+    }\n+\n+    @Test\n+    void threeLabelsIncAndReset() {\n+        var registry = new CollectorRegistry();\n+        var counter = Counter.name(\"test\").labels(\"a\", \"b\", \"c\").register(registry);\n+        counter.labels(\"1\", \"2\", \"3\").inc();\n+        assertEquals(1, counter.collect().get(0).value());\n+        counter.labels(\"1\", \"2\", \"3\").inc(17);\n+        assertEquals(18, counter.collect().get(0).value());\n+        counter.labels(\"1\", \"2\", \"3\").reset();\n+        assertEquals(0, counter.collect().get(0).value());\n+        counter.labels(\"1\", \"2\", \"3\").inc(37);\n+        assertEquals(37, counter.collect().get(0).value());\n+    }\n+\n+    @Test\n+    void oneLabelMultiple() {\n+        var registry = new CollectorRegistry();\n+        var counter = Counter.name(\"test\").labels(\"a\").register(registry);\n+        counter.labels(\"1\").inc(17);\n+        counter.labels(\"2\").inc(19);\n+        assertEquals(2, counter.collect().size());\n+        var values = counter.collect().stream().map(l -> l.value()).toList();\n+        assertTrue(values.contains(17.0));\n+        assertTrue(values.contains(19.0));\n+    }\n+}\n","filename":"metrics\/src\/test\/java\/org\/openjdk\/skara\/metrics\/CounterTests.java","additions":155,"deletions":0,"binary":false,"changes":155,"status":"added"},{"patch":"@@ -0,0 +1,181 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.metrics;\n+\n+import org.junit.jupiter.api.*;\n+import java.util.*;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class GaugeTests {\n+    @Test\n+    void inc() {\n+        var registry = new CollectorRegistry();\n+        var gauge = Gauge.name(\"test\").register(registry);\n+        gauge.inc();\n+        assertEquals(1, gauge.collect().get(0).value());\n+    }\n+\n+    @Test\n+    void dec() {\n+        var registry = new CollectorRegistry();\n+        var gauge = Gauge.name(\"test\").register(registry);\n+        gauge.inc();\n+        assertEquals(1, gauge.collect().get(0).value());\n+        gauge.dec();\n+        assertEquals(0, gauge.collect().get(0).value());\n+        gauge.dec();\n+        assertEquals(-1, gauge.collect().get(0).value());\n+    }\n+\n+    @Test\n+    void incWithValue() {\n+        var registry = new CollectorRegistry();\n+        var gauge = Gauge.name(\"test\").register(registry);\n+        gauge.inc(17);\n+        assertEquals(17, gauge.collect().get(0).value());\n+    }\n+\n+    @Test\n+    void decWithValue() {\n+        var registry = new CollectorRegistry();\n+        var gauge = Gauge.name(\"test\").register(registry);\n+        gauge.dec(17);\n+        assertEquals(-17, gauge.collect().get(0).value());\n+    }\n+\n+    @Test\n+    void incAndDecWithValue() {\n+        var registry = new CollectorRegistry();\n+        var gauge = Gauge.name(\"test\").register(registry);\n+        gauge.inc(17);\n+        assertEquals(17, gauge.collect().get(0).value());\n+        gauge.dec(20);\n+        assertEquals(-3, gauge.collect().get(0).value());\n+    }\n+\n+    @Test\n+    void set() {\n+        var registry = new CollectorRegistry();\n+        var gauge = Gauge.name(\"test\").register(registry);\n+        gauge.set(1337);\n+        assertEquals(1337, gauge.collect().get(0).value());\n+        gauge.set(17);\n+        assertEquals(17, gauge.collect().get(0).value());\n+    }\n+\n+    @Test\n+    void oneLabel() {\n+        var registry = new CollectorRegistry();\n+        var gauge = Gauge.name(\"test\").labels(\"a\").register(registry);\n+        gauge.labels(\"1\").inc();\n+        assertEquals(1, gauge.collect().size());\n+        assertEquals(1, gauge.collect().get(0).value());\n+        assertEquals(1, gauge.collect().get(0).labels().size());\n+        assertEquals(\"a\", gauge.collect().get(0).labels().get(0).name());\n+        assertEquals(\"1\", gauge.collect().get(0).labels().get(0).value());\n+    }\n+\n+    @Test\n+    void oneLabelIncDecSet() {\n+        var registry = new CollectorRegistry();\n+        var gauge = Gauge.name(\"test\").labels(\"a\").register(registry);\n+        gauge.labels(\"1\").inc(17);\n+        assertEquals(1, gauge.collect().size());\n+        assertEquals(17, gauge.collect().get(0).value());\n+        assertEquals(1, gauge.collect().get(0).labels().size());\n+        assertEquals(\"a\", gauge.collect().get(0).labels().get(0).name());\n+        assertEquals(\"1\", gauge.collect().get(0).labels().get(0).value());\n+        gauge.labels(\"1\").dec(20);\n+        assertEquals(-3, gauge.collect().get(0).value());\n+        gauge.labels(\"1\").set(1337);\n+        assertEquals(1337, gauge.collect().get(0).value());\n+    }\n+\n+    @Test\n+    void twoLabels() {\n+        var registry = new CollectorRegistry();\n+        var gauge = Gauge.name(\"test\").labels(\"a\", \"b\").register(registry);\n+        gauge.labels(\"1\", \"2\").inc();\n+        assertEquals(1, gauge.collect().size());\n+        assertEquals(1, gauge.collect().get(0).value());\n+        assertEquals(2, gauge.collect().get(0).labels().size());\n+        assertEquals(\"a\", gauge.collect().get(0).labels().get(0).name());\n+        assertEquals(\"1\", gauge.collect().get(0).labels().get(0).value());\n+        assertEquals(\"b\", gauge.collect().get(0).labels().get(1).name());\n+        assertEquals(\"2\", gauge.collect().get(0).labels().get(1).value());\n+    }\n+\n+    @Test\n+    void twoLabelsIncDecSet() {\n+        var registry = new CollectorRegistry();\n+        var gauge = Gauge.name(\"test\").labels(\"a\", \"b\").register(registry);\n+        gauge.labels(\"1\", \"2\").inc(17);\n+        assertEquals(1, gauge.collect().size());\n+        assertEquals(17, gauge.collect().get(0).value());\n+        assertEquals(2, gauge.collect().get(0).labels().size());\n+        assertEquals(\"a\", gauge.collect().get(0).labels().get(0).name());\n+        assertEquals(\"1\", gauge.collect().get(0).labels().get(0).value());\n+        assertEquals(\"b\", gauge.collect().get(0).labels().get(1).name());\n+        assertEquals(\"2\", gauge.collect().get(0).labels().get(1).value());\n+        gauge.labels(\"1\", \"2\").dec(20);\n+        assertEquals(-3, gauge.collect().get(0).value());\n+        gauge.labels(\"1\", \"2\").set(1337);\n+        assertEquals(1337, gauge.collect().get(0).value());\n+    }\n+\n+    @Test\n+    void threeLabels() {\n+        var registry = new CollectorRegistry();\n+        var gauge = Gauge.name(\"test\").labels(\"a\", \"b\", \"c\").register(registry);\n+        gauge.labels(\"1\", \"2\", \"3\").inc();\n+        assertEquals(1, gauge.collect().size());\n+        assertEquals(1, gauge.collect().get(0).value());\n+        assertEquals(3, gauge.collect().get(0).labels().size());\n+        assertEquals(\"a\", gauge.collect().get(0).labels().get(0).name());\n+        assertEquals(\"1\", gauge.collect().get(0).labels().get(0).value());\n+        assertEquals(\"b\", gauge.collect().get(0).labels().get(1).name());\n+        assertEquals(\"2\", gauge.collect().get(0).labels().get(1).value());\n+        assertEquals(\"c\", gauge.collect().get(0).labels().get(2).name());\n+        assertEquals(\"3\", gauge.collect().get(0).labels().get(2).value());\n+    }\n+\n+    @Test\n+    void threeLabelsIncDecSet() {\n+        var registry = new CollectorRegistry();\n+        var gauge = Gauge.name(\"test\").labels(\"a\", \"b\", \"c\").register(registry);\n+        gauge.labels(\"1\", \"2\", \"3\").inc(17);\n+        assertEquals(1, gauge.collect().size());\n+        assertEquals(17, gauge.collect().get(0).value());\n+        assertEquals(3, gauge.collect().get(0).labels().size());\n+        assertEquals(\"a\", gauge.collect().get(0).labels().get(0).name());\n+        assertEquals(\"1\", gauge.collect().get(0).labels().get(0).value());\n+        assertEquals(\"b\", gauge.collect().get(0).labels().get(1).name());\n+        assertEquals(\"2\", gauge.collect().get(0).labels().get(1).value());\n+        assertEquals(\"c\", gauge.collect().get(0).labels().get(2).name());\n+        assertEquals(\"3\", gauge.collect().get(0).labels().get(2).value());\n+        gauge.labels(\"1\", \"2\", \"3\").dec(20);\n+        assertEquals(-3, gauge.collect().get(0).value());\n+        gauge.labels(\"1\", \"2\", \"3\").set(1337);\n+        assertEquals(1337, gauge.collect().get(0).value());\n+    }\n+}\n","filename":"metrics\/src\/test\/java\/org\/openjdk\/skara\/metrics\/GaugeTests.java","additions":181,"deletions":0,"binary":false,"changes":181,"status":"added"},{"patch":"@@ -36,0 +36,1 @@\n+    implementation project(':metrics')\n","filename":"network\/build.gradle","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+    requires org.openjdk.skara.metrics;\n","filename":"network\/src\/main\/java\/module-info.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+import org.openjdk.skara.metrics.Counter;\n@@ -38,0 +39,8 @@\n+    private final static Counter.WithOneLabel requestCounter =\n+        Counter.name(\"skara_http_requests\")\n+               .labels(\"method\")\n+               .register();\n+    private final static Counter.WithOneLabel responseCounter =\n+        Counter.name(\"skara_http_responses\")\n+               .labels(\"code\")\n+               .register();\n@@ -384,0 +393,1 @@\n+        requestCounter.labels(queryBuilder.queryType.toString()).inc();\n@@ -385,0 +395,1 @@\n+        responseCounter.labels(Integer.toString(response.statusCode())).inc();\n","filename":"network\/src\/main\/java\/org\/openjdk\/skara\/network\/RestRequest.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+include 'metrics'\n","filename":"settings.gradle","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+    implementation project(':metrics')\n","filename":"test\/build.gradle","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}