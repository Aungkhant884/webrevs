{"files":[{"patch":"@@ -274,0 +274,8 @@\n+        \/\/ If the PR is closed and the target ref no longer exists, we cannot process it\n+        if (pr.isClosed()) {\n+            if (pr.repository().branches().stream().noneMatch(n -> n.name().equals(pr.targetRef()))) {\n+                log.warning(\"Target branch of PR '\" + pr.targetRef() + \"' no longer exists, cannot process further\");\n+                return List.of();\n+            }\n+        }\n+\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/ArchiveWorkItem.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -182,3 +182,7 @@\n-                    if (!hasLegacyIntegrationNotice(localRepo, commit.orElseThrow())) {\n-                        var reply = ArchiveItem.integratedNotice(pr, localRepo, commit.orElseThrow(), hostUserToEmailAuthor, parent, subjectPrefix);\n-                        generated.add(reply);\n+                    if (commit.isPresent()) {\n+                        if (!hasLegacyIntegrationNotice(localRepo, commit.get())) {\n+                            var reply = ArchiveItem.integratedNotice(pr, localRepo, commit.get(), hostUserToEmailAuthor, parent, subjectPrefix);\n+                            generated.add(reply);\n+                        }\n+                    } else {\n+                        log.warning(\"Target commit for PR no longer exists, can't post or verify integration notice: \" + hash.get());\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/ReviewArchive.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import org.openjdk.skara.issuetracker.Issue;\n@@ -286,0 +287,65 @@\n+\n+    \/**\n+     * Verify that we don't throw exceptions if the target branch of a PR is missing after\n+     * being closed.\n+     *\/\n+    @Test\n+    void branchMissing(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory();\n+             var listServer = new TestMailmanServer();\n+             var webrevServer = new TestWebrevServer()) {\n+            var author = credentials.getHostedRepository();\n+            var archive = credentials.getHostedRepository();\n+            var ignored = credentials.getHostedRepository();\n+            var listAddress = EmailAddress.parse(listServer.createList(\"test\"));\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addAuthor(author.forge().currentUser().id());\n+            var from = EmailAddress.from(\"test\", \"test@test.mail\");\n+            var mlBot = MailingListBridgeBot.newBuilder()\n+                    .from(from)\n+                    .repo(author)\n+                    .archive(archive)\n+                    .censusRepo(censusBuilder.build())\n+                    .lists(List.of(new MailingListConfiguration(listAddress, Set.of())))\n+                    .ignoredUsers(Set.of(ignored.forge().currentUser().username()))\n+                    .listArchive(listServer.getArchive())\n+                    .smtpServer(listServer.getSMTP())\n+                    .webrevStorageHTMLRepository(archive)\n+                    .webrevStorageRef(\"webrev\")\n+                    .webrevStorageBase(Path.of(\"test\"))\n+                    .webrevStorageBaseUri(webrevServer.uri())\n+                    .issueTracker(URIBuilder.base(\"http:\/\/issues.test\/browse\/\").build())\n+                    .build();\n+\n+            \/\/ The mailing list as well\n+            var mailmanServer = MailingListServerFactory.createMailmanServer(listServer.getArchive(), listServer.getSMTP(),\n+                    Duration.ZERO);\n+            var mailmanList = mailmanServer.getListReader(listAddress.address());\n+            var readerBot = new MailingListArchiveReaderBot(from, mailmanList, Set.of(archive));\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+            localRepo.push(masterHash, author.url(), \"to_be_deleted\", true);\n+            localRepo.push(masterHash, archive.url(), \"webrev\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, \"A simple change\",\n+                    \"Change msg\\n\\nWith several lines\");\n+            localRepo.push(editHash, author.url(), \"edit\", true);\n+            var pr = credentials.createPullRequest(archive, \"to_be_deleted\", \"edit\", \"This is a pull request\");\n+            pr.setBody(\"This should now be ready\");\n+\n+            \/\/ Run an archive pass\n+            TestBotRunner.runPeriodicItems(mlBot);\n+            listServer.processIncoming();\n+\n+            \/\/ Delete the branch and close the PR\n+            author.deleteBranch(\"to_be_deleted\");\n+            pr.setState(Issue.State.CLOSED);\n+\n+            TestBotRunner.runPeriodicItems(mlBot);\n+        }\n+    }\n","filename":"bots\/mlbridge\/src\/test\/java\/org\/openjdk\/skara\/bots\/mlbridge\/MailingListArchiveReaderBotTests.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"modified"}]}