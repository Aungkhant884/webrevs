{"files":[{"patch":"@@ -34,0 +34,1 @@\n+manual-test-settings.properties\n","filename":".gitignore","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -64,2 +64,8 @@\n-        if (!(other instanceof ArchiveWorkItem)) {\n-            return true;\n+        if (!(other instanceof ArchiveWorkItem otherArchiveItem)) {\n+            if (!(other instanceof LabelsUpdaterWorkItem otherLabelsUpdaterItem)) {\n+                return true;\n+            }\n+            if (!bot.equals(otherLabelsUpdaterItem.bot())) {\n+                return true;\n+            }\n+            return false;\n@@ -67,2 +73,1 @@\n-        ArchiveWorkItem otherItem = (ArchiveWorkItem)other;\n-        if (!pr.id().equals(otherItem.pr.id())) {\n+        if (!pr.id().equals(otherArchiveItem.pr.id())) {\n@@ -71,1 +76,1 @@\n-        if (!bot.codeRepo().name().equals(otherItem.bot.codeRepo().name())) {\n+        if (!bot.codeRepo().name().equals(otherArchiveItem.bot.codeRepo().name())) {\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/ArchiveWorkItem.java","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,78 @@\n+package org.openjdk.skara.bots.mlbridge;\n+\n+import org.openjdk.skara.bot.WorkItem;\n+import org.openjdk.skara.issuetracker.Label;\n+\n+import java.nio.file.Path;\n+import java.util.*;\n+import java.util.logging.Logger;\n+\n+\/**\n+ * This WorkItem runs once when the bots starts up to update the repository\n+ * with all mailing list labels configured for it.\n+ *\/\n+public class LabelsUpdaterWorkItem implements WorkItem {\n+    private static final Logger log = Logger.getLogger(LabelsUpdaterWorkItem.class.getName());\n+\n+    private final MailingListBridgeBot bot;\n+\n+    public LabelsUpdaterWorkItem(MailingListBridgeBot bot) {\n+        this.bot = bot;\n+    }\n+\n+    public MailingListBridgeBot bot() {\n+        return bot;\n+    }\n+\n+    @Override\n+    public boolean concurrentWith(WorkItem other) {\n+        if (!(other instanceof LabelsUpdaterWorkItem otherItem)) {\n+            return true;\n+        }\n+        if (!bot.equals(otherItem.bot)) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public Collection<WorkItem> run(Path scratchPath) {\n+        if (bot.labelsUpdated()) {\n+            return List.of();\n+        }\n+\n+        var existingLabelsMap = new HashMap<String, Label>();\n+        bot.codeRepo().labels().forEach(l -> existingLabelsMap.put(l.name(), l));\n+\n+        var configuredLabels = bot.lists().stream()\n+                .flatMap(configuration -> configuration.labels().stream()\n+                        .map(labelName -> new Label(labelName, configuration.list().toString())))\n+                .toList();\n+\n+        for (Label configuredLabel : configuredLabels) {\n+            var existingLabel = existingLabelsMap.get(configuredLabel.name());\n+            if (existingLabel == null) {\n+                log.info(\"Adding label: \" + configuredLabel.name() + \" to repo: \" + bot.codeRepo().name());\n+                bot.codeRepo().addLabel(configuredLabel);\n+            } else if (!existingLabel.description().equals(configuredLabel.description())) {\n+                log.info(\"Updating label: \" + configuredLabel.name() + \" with description: \"\n+                        + configuredLabel.description() + \" for repo: \" + bot.codeRepo().name());\n+                bot.codeRepo().updateLabel(configuredLabel);\n+            }\n+        }\n+\n+        log.fine(\"Done updating labels for: \" + bot.codeRepo());\n+        bot.setLabelsUpdated(true);\n+        return List.of();\n+    }\n+\n+    @Override\n+    public String botName() {\n+        return MailingListBridgeBotFactory.NAME;\n+    }\n+\n+    @Override\n+    public String workItemName() {\n+        return \"labels-updater\";\n+    }\n+}\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/LabelsUpdaterWorkItem.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"},{"patch":"@@ -65,0 +65,1 @@\n+    private volatile boolean labelsUpdated = false;\n@@ -191,0 +192,8 @@\n+    public boolean labelsUpdated() {\n+        return labelsUpdated;\n+    }\n+\n+    public void setLabelsUpdated(boolean labelsUpdated) {\n+        this.labelsUpdated = labelsUpdated;\n+    }\n+\n@@ -194,0 +203,5 @@\n+\n+        if (!labelsUpdated) {\n+            ret.add(new LabelsUpdaterWorkItem(this));\n+        }\n+\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/MailingListBridgeBot.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,85 @@\n+package org.openjdk.skara.bots.mlbridge;\n+\n+import org.junit.jupiter.api.*;\n+import org.openjdk.skara.email.EmailAddress;\n+import org.openjdk.skara.test.*;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Set;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class LabelsUpdaterTests {\n+\n+    @Test\n+    void simple(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var listServer = new TestMailmanServer();) {\n+            var targetRepo = credentials.getHostedRepository();\n+            var listAddress = EmailAddress.parse(listServer.createList(\"test\"));\n+            var mlBot = MailingListBridgeBot.newBuilder()\n+                    .repo(targetRepo)\n+                    .lists(List.of(new MailingListConfiguration(listAddress, Set.of(\"foo\", \"bar\"))))\n+                    .build();\n+\n+            \/\/ Check that the repo contains no labels\n+            assertTrue(targetRepo.labels().isEmpty(), \"Repo has labels from the start: \" + targetRepo.labels());\n+\n+            \/\/ Run an archive pass\n+            TestBotRunner.runPeriodicItems(mlBot);\n+\n+            assertEquals(2, targetRepo.labels().size(), \"Wrong number of labels\");\n+            assertTrue(targetRepo.labels().stream()\n+                    .anyMatch(l -> l.name().equals(\"foo\") && l.description().orElseThrow().equals(listAddress.toString())),\n+                    \"No label 'foo' found\");\n+            assertTrue(targetRepo.labels().stream()\n+                            .anyMatch(l -> l.name().equals(\"bar\") && l.description().orElseThrow().equals(listAddress.toString())),\n+                    \"No label 'bar' found\");\n+\n+            \/\/ Run again and expect no change\n+            TestBotRunner.runPeriodicItems(mlBot);\n+\n+            assertEquals(2, targetRepo.labels().size(), \"Wrong number of labels\");\n+        }\n+    }\n+\n+    @Test\n+    void update(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var listServer = new TestMailmanServer();) {\n+            var targetRepo = credentials.getHostedRepository();\n+            var listAddress = EmailAddress.parse(listServer.createList(\"test\"));\n+            var listAddress2 = EmailAddress.parse(listServer.createList(\"test2\"));\n+            var mlBot = MailingListBridgeBot.newBuilder()\n+                    .repo(targetRepo)\n+                    .lists(List.of(new MailingListConfiguration(listAddress, Set.of(\"foo\"))))\n+                    .build();\n+\n+            \/\/ Check that the repo contains no labels\n+            assertTrue(targetRepo.labels().isEmpty(), \"Repo has labels from the start: \" + targetRepo.labels());\n+\n+            \/\/ Run an archive pass\n+            TestBotRunner.runPeriodicItems(mlBot);\n+\n+            assertEquals(1, targetRepo.labels().size(), \"Wrong number of labels\");\n+            assertTrue(targetRepo.labels().stream()\n+                            .anyMatch(l -> l.name().equals(\"foo\") && l.description().orElseThrow().equals(listAddress.toString())),\n+                    \"No label 'foo' found\");\n+\n+            var mlBot2 = MailingListBridgeBot.newBuilder()\n+                    .repo(targetRepo)\n+                    .lists(List.of(new MailingListConfiguration(listAddress2, Set.of(\"foo\"))))\n+                    .build();\n+\n+            \/\/ Run second bot and expect label to have updated\n+            TestBotRunner.runPeriodicItems(mlBot2);\n+\n+            assertEquals(1, targetRepo.labels().size(), \"Wrong number of labels\");\n+            assertTrue(targetRepo.labels().stream()\n+                            .anyMatch(l -> l.name().equals(\"foo\") && l.description().orElseThrow().equals(listAddress2.toString())),\n+                    \"No label 'foo' found\");\n+        }\n+    }\n+}\n","filename":"bots\/mlbridge\/src\/test\/java\/org\/openjdk\/skara\/bots\/mlbridge\/LabelsUpdaterTests.java","additions":85,"deletions":0,"binary":false,"changes":85,"status":"added"},{"patch":"@@ -226,0 +226,12 @@\n+\n+    @Override\n+    public void addLabel(Label label) {\n+    }\n+\n+    @Override\n+    public void updateLabel(Label label) {\n+    }\n+\n+    @Override\n+    public void deleteLabel(Label label) {\n+    }\n","filename":"bots\/tester\/src\/test\/java\/org\/openjdk\/skara\/bots\/tester\/InMemoryHostedRepository.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+        requires 'org.openjdk.skara.proxy'\n@@ -48,0 +49,1 @@\n+    testImplementation project(':proxy')\n","filename":"forge\/build.gradle","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -93,0 +93,3 @@\n+    void addLabel(Label label);\n+    void updateLabel(Label label);\n+    void deleteLabel(Label label);\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/HostedRepository.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -585,0 +585,33 @@\n+\n+    @Override\n+    public void addLabel(Label label) {\n+        var params = JSON.object()\n+                .put(\"name\", label.name())\n+                \/\/ Color is Gray and matches all current labels\n+                .put(\"color\", \"ededed\");\n+        if (label.description().isPresent()) {\n+            params.put(\"description\", label.description().get());\n+        }\n+        request.post(\"labels\")\n+                .body(params)\n+                .execute();\n+    }\n+\n+    @Override\n+    public void updateLabel(Label label) {\n+        var params = JSON.object();\n+        if (label.description().isPresent()) {\n+            params.put(\"description\", label.description().get());\n+        } else {\n+            params.put(\"description\", JSONValue.fromNull());\n+        }\n+        request.post(\"labels\/\" + label.name())\n+                .body(params)\n+                .execute();\n+    }\n+\n+    @Override\n+    public void deleteLabel(Label label) {\n+        request.delete(\"labels\/\" + label.name())\n+                .execute();\n+    }\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubRepository.java","additions":33,"deletions":0,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-    GitLabHost(String name, URI uri, boolean useSsh, Credential pat, Set<String> groups) {\n+    public GitLabHost(String name, URI uri, boolean useSsh, Credential pat, Set<String> groups) {\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabHost.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -605,0 +605,34 @@\n+\n+    @Override\n+    public void addLabel(Label label) {\n+        var params = JSON.object()\n+                .put(\"name\", label.name())\n+                \/\/ Color is Blue-Gray and matches all current labels\n+                .put(\"color\", \"#428BCA\");\n+        if (label.description().isPresent()) {\n+            params.put(\"description\", label.description().get());\n+        }\n+        request.post(\"labels\")\n+                .body(params)\n+                .execute();\n+    }\n+\n+    @Override\n+    public void updateLabel(Label label) {\n+        var params = JSON.object()\n+                .put(\"new_name\", label.name());\n+        if (label.description().isPresent()) {\n+            params.put(\"description\", label.description().get());\n+        } else {\n+            throw new UnsupportedOperationException(\"Gitlab does not support clearing the description\");\n+        }\n+        request.put(\"labels\/\" + label.name())\n+                .body(params)\n+                .execute();\n+    }\n+\n+    @Override\n+    public void deleteLabel(Label label) {\n+        request.delete(\"labels\/\" + label.name())\n+                .execute();\n+    }\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabRepository.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -0,0 +1,101 @@\n+package org.openjdk.skara.forge;\n+\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import org.openjdk.skara.forge.github.GitHubApplication;\n+import org.openjdk.skara.forge.github.GitHubHost;\n+import org.openjdk.skara.forge.gitlab.GitLabHost;\n+import org.openjdk.skara.host.Credential;\n+import org.openjdk.skara.issuetracker.Label;\n+import org.openjdk.skara.network.URIBuilder;\n+import org.openjdk.skara.proxy.HttpProxy;\n+import org.openjdk.skara.test.ManualTestSettings;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Set;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\/**\n+ * This class contains manual tests for interactions with different forges\n+ * (GitHub and GitLab). To be able to run them, you need to provide a\n+ * properties file with the necessary connection details for running these\n+ * tests. See ManualTestSettings.\n+ *\n+ * To be able to run the tests, you need to remove or comment out the @Disabled\n+ * annotation first.\n+ *\/\n+@Disabled(\"Manual\")\n+public class ManualForgeTests {\n+\n+    @Test\n+    void gitHubLabels() throws IOException {\n+        HttpProxy.setup();\n+        var settings = ManualTestSettings.loadManualTestSettings();\n+        var uri = URIBuilder.base(\"https:\/\/github.com\/\").build();\n+        var id = settings.getProperty(\"github.app.id\");\n+        var installation = settings.getProperty(\"github.app.installation\");\n+        var keyFile = Paths.get(settings.getProperty(\"github.app.key.file\"));\n+\n+        var keyContents = Files.readString(keyFile, StandardCharsets.UTF_8);\n+        var app = new GitHubApplication(keyContents, id, installation);\n+        var gitHubHost = new GitHubHost(uri, app, null, null, Set.of());\n+\n+        var repo = gitHubHost.repository(settings.getProperty(\"github.repository\")).orElseThrow();\n+\n+        verifyLabels(repo, true);\n+    }\n+\n+    @Test\n+    void gitLabLabels() throws IOException {\n+        var settings = ManualTestSettings.loadManualTestSettings();\n+        var uri = URIBuilder.base(settings.getProperty(\"gitlab.uri\")).build();\n+        var user = settings.getProperty(\"gitlab.user\");\n+        var pat = settings.getProperty(\"gitlab.pat\");\n+        var credential = new Credential(user, pat);\n+\n+        var gitLabHost = new GitLabHost(\"gitlab\", uri, false, credential, Set.of());\n+\n+        var repo = gitLabHost.repository(settings.getProperty(\"gitlab.repository\")).orElseThrow();\n+\n+        verifyLabels(repo, false);\n+    }\n+\n+    private void verifyLabels(HostedRepository repo, boolean supportsDeleteDescription) {\n+        var labels = repo.labels();\n+        var labelName = \"skara-test-label\";\n+        var label1 = new Label(labelName, \"bar\");\n+        \/\/ If the label is already there\n+        if (labels.stream().anyMatch(l -> l.name().equals(labelName))) {\n+            repo.deleteLabel(label1);\n+        }\n+        repo.addLabel(label1);\n+        labels = repo.labels();\n+        assertTrue(labels.contains(label1));\n+\n+        var label2 = new Label(labelName, \"new description\");\n+        repo.updateLabel(label2);\n+        labels = repo.labels();\n+        assertTrue(labels.contains(label2));\n+        assertFalse(labels.contains(label1));\n+\n+        var label3 = new Label(labelName, null);\n+        if (supportsDeleteDescription) {\n+            repo.updateLabel(label3);\n+            labels = repo.labels();\n+            assertTrue(labels.contains(label3));\n+            assertFalse(labels.contains(label2));\n+            assertFalse(labels.contains(label1));\n+        }\n+\n+        repo.deleteLabel(label3);\n+        labels = repo.labels();\n+        assertFalse(labels.contains(label3));\n+        assertFalse(labels.contains(label2));\n+        assertFalse(labels.contains(label1));\n+    }\n+}\n","filename":"forge\/src\/test\/java\/org\/openjdk\/skara\/forge\/ManualForgeTests.java","additions":101,"deletions":0,"binary":false,"changes":101,"status":"added"},{"patch":"@@ -0,0 +1,32 @@\n+package org.openjdk.skara.test;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.*;\n+import java.util.Properties;\n+\n+\/**\n+ * This class provides settings for manual tests which the user provides\n+ * through the manual-test-settings.properties file in the root of the project.\n+ *\/\n+public class ManualTestSettings {\n+\n+    public static final String MANUAL_TEST_SETTINGS_FILE = \"manual-test-settings.properties\";\n+\n+    public static Properties loadManualTestSettings() throws IOException {\n+        var dir = Paths.get(\".\").toAbsolutePath();\n+        Path file = dir.resolve(MANUAL_TEST_SETTINGS_FILE);\n+        while (!Files.exists(file)) {\n+            dir = dir.getParent();\n+            if (!Files.isDirectory(dir)) {\n+                throw new RuntimeException(\"Could not find \" + MANUAL_TEST_SETTINGS_FILE);\n+            }\n+            file = dir.resolve(MANUAL_TEST_SETTINGS_FILE);\n+        }\n+        var properties = new Properties();\n+        try (InputStream in = Files.newInputStream(file)) {\n+            properties.load(in);\n+        }\n+        return properties;\n+    }\n+}\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/ManualTestSettings.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"added"},{"patch":"@@ -47,0 +47,1 @@\n+    private List<Label> labels = new ArrayList<>();\n@@ -317,1 +318,19 @@\n-        return List.of();\n+        return labels;\n+    }\n+\n+    @Override\n+    public void addLabel(Label label) {\n+        labels.add(label);\n+    }\n+\n+    @Override\n+    public void updateLabel(Label label) {\n+        var existingLabel = labels.stream().filter(l -> l.name().equals(label.name())).findAny();\n+        existingLabel.ifPresent(value -> labels.remove(value));\n+        labels.add(label);\n+    }\n+\n+    @Override\n+    public void deleteLabel(Label label) {\n+        var existingLabel = labels.stream().filter(l -> l.name().equals(label.name())).findAny();\n+        existingLabel.ifPresent(value -> labels.remove(value));\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestHostedRepository.java","additions":20,"deletions":1,"binary":false,"changes":21,"status":"modified"}]}