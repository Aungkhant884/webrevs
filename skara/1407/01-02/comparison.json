{"files":[{"patch":"@@ -53,1 +53,1 @@\n-                                 HostedRepository confOverrideRepo, String confOverrideName, String confOverrideRef) {\n+                                 HostedRepository confOverrideRepo, String confOverrideName, String confOverrideRef) throws InvalidJCheckConfException, MissingJCheckConfException {\n@@ -60,1 +60,1 @@\n-                                 HostedRepository confOverrideRepo, String confOverrideName, String confOverrideRef) {\n+                                 HostedRepository confOverrideRepo, String confOverrideName, String confOverrideRef) throws InvalidJCheckConfException, MissingJCheckConfException {\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CensusInstance.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -234,1 +234,1 @@\n-        } catch (InvalidJCheckConfException invalidJCheckConfException) {\n+        } catch (MissingJCheckConfException e) {\n@@ -236,1 +236,1 @@\n-                var text = \" ⚠️ @\" + pr.author().username() + \" The `.jcheck\/conf` in the target branch of this pull request is either invalid or missing completely. \"\n+                var text = \" ⚠️ @\" + pr.author().username() + \" The `.jcheck\/conf` in the target branch of this pull request is missing completely. \"\n@@ -240,1 +240,8 @@\n-                var text = \" ⚠️ @\" + pr.author().username() + \" The `.jcheck\/conf` in the override repo is either invalid or missing completely. \"\n+                var text = \" ⚠️ @\" + pr.author().username() + \" The external jcheck configuration for this repository could not be resolved. \"\n+                        + \"Until that is resolved, this pull request cannot be processed. Please notify a Skara admin.\";\n+                addErrorComment(text, comments);\n+            }\n+            return List.of();\n+        } catch (InvalidJCheckConfException e) {\n+            if (bot.confOverrideRepository().isEmpty()) {\n+                var text = \" ⚠️ @\" + pr.author().username() + \" The `.jcheck\/conf` in the target branch of this pull request is invalid. \"\n@@ -243,0 +250,4 @@\n+            } else {\n+                var text = \" ⚠️ @\" + pr.author().username() + \" The external jcheck configuration for this repository could not be resolved. \"\n+                        + \"Until that is resolved, this pull request cannot be processed. Please notify a Skara admin.\";\n+                addErrorComment(text, comments);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckWorkItem.java","additions":14,"deletions":3,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -133,5 +133,1 @@\n-            var census = LimitedCensusInstance.createLimitedCensusInstance(hostedRepositoryPool, bot.censusRepo(), bot.censusRef(),\n-                                               scratchPath.resolve(\"census\"), bot.repo(), commit.hash().hex(),\n-                                               bot.confOverrideRepository().orElse(null),\n-                                               bot.confOverrideName(),\n-                                               bot.confOverrideRef());\n+            Optional<LimitedCensusInstance> census = Optional.empty();\n@@ -139,1 +135,7 @@\n-            if (census.isEmpty()) {\n+            try {\n+                census = LimitedCensusInstance.createLimitedCensusInstance(hostedRepositoryPool, bot.censusRepo(), bot.censusRef(),\n+                        scratchPath.resolve(\"census\"), bot.repo(), commit.hash().hex(),\n+                        bot.confOverrideRepository().orElse(null),\n+                        bot.confOverrideName(),\n+                        bot.confOverrideRef());\n+            } catch (MissingJCheckConfException e) {\n@@ -141,3 +143,3 @@\n-                              \"@\" + command.user().username() +\n-                              \" there is no `.jcheck\/conf` present at revision \" +\n-                              commit.hash().abbreviate() + \" - cannot process command.\";\n+                        \"@\" + command.user().username() +\n+                        \" there is no `.jcheck\/conf` present at revision \" +\n+                        commit.hash().abbreviate() + \" - cannot process command.\";\n@@ -145,2 +147,8 @@\n-            } else {\n-                processCommand(scratchPath, commit, census.get(), command, allComments);\n+                return List.of();\n+            } catch (InvalidJCheckConfException e) {\n+                var comment = String.format(commandReplyMarker, command.id()) + \"\\n\" +\n+                        \"@\" + command.user().username() +\n+                        \" invalid `.jcheck\/conf` present at revision \" +\n+                        commit.hash().abbreviate() + \" - cannot process command.\";\n+                bot.repo().addCommitComment(commit.hash(), comment);\n+                return List.of();\n@@ -148,0 +156,1 @@\n+            processCommand(scratchPath, commit, census.get(), command, allComments);\n@@ -149,1 +158,0 @@\n-\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CommitCommandWorkItem.java","additions":20,"deletions":12,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -8,0 +8,2 @@\n+import java.util.Arrays;\n+import java.util.List;\n@@ -17,3 +19,8 @@\n-class InvalidJCheckConfException extends RuntimeException {\n-    public InvalidJCheckConfException(String message) {\n-        super(message);\n+class MissingJCheckConfException extends Exception {\n+    public MissingJCheckConfException() {\n+    }\n+}\n+\n+class InvalidJCheckConfException extends Exception {\n+    public InvalidJCheckConfException(Throwable cause) {\n+        super(cause);\n@@ -40,1 +47,1 @@\n-            HostedRepository confOverrideRepo, String confOverrideName, String confOverrideRef) {\n+            HostedRepository confOverrideRepo, String confOverrideName, String confOverrideRef) throws MissingJCheckConfException, InvalidJCheckConfException {\n@@ -44,5 +51,2 @@\n-            Optional<JCheckConfiguration> configuration = jCheckConfiguration(hostedRepositoryPool,\n-                    repository, ref, confOverrideRepo, confOverrideName, confOverrideRef);\n-            if (configuration.isEmpty()) {\n-                throw new InvalidJCheckConfException(\".jcheck\/conf is invalid or missing\");\n-            }\n+            JCheckConfiguration configuration = jCheckConfiguration(repository, ref, confOverrideRepo,\n+                    confOverrideName, confOverrideRef).orElseThrow(MissingJCheckConfException::new);\n@@ -51,1 +55,1 @@\n-            return Optional.of(new LimitedCensusInstance(census, configuration.get(), namespace));\n+            return Optional.of(new LimitedCensusInstance(census, configuration, namespace));\n@@ -63,1 +67,0 @@\n-\n@@ -67,2 +70,13 @@\n-    private static Optional<JCheckConfiguration> configuration(HostedRepositoryPool hostedRepositoryPool, HostedRepository remoteRepo, String name, String ref) throws IOException {\n-        return hostedRepositoryPool.lines(remoteRepo, Path.of(name), ref).map(JCheckConfiguration::parse);\n+    private static Optional<JCheckConfiguration> configuration(HostedRepository remoteRepo, String name, String ref) {\n+        Optional<List<String>> conf;\n+        try {\n+            conf = Optional.of(Arrays.stream(remoteRepo.fileContents(name, ref).split(\"\\n\")).toList());\n+        } catch (RuntimeException e) {\n+            if (e.getMessage().contains(\"Request returned bad status:\")) {\n+                if (!e.getMessage().contains(\"404\")) {\n+                    throw e;\n+                }\n+            }\n+            conf = Optional.empty();\n+        }\n+        return conf.map(JCheckConfiguration::parse);\n@@ -71,1 +85,1 @@\n-    private static Optional<JCheckConfiguration> jCheckConfiguration(HostedRepositoryPool hostedRepositoryPool,\n+    private static Optional<JCheckConfiguration> jCheckConfiguration(\n@@ -73,1 +87,1 @@\n-            String confOverrideRef) throws IOException {\n+            String confOverrideRef) throws IOException, InvalidJCheckConfException {\n@@ -75,7 +89,14 @@\n-        if (confOverrideRepo == null) {\n-            configuration = configuration(hostedRepositoryPool, repository, \".jcheck\/conf\", ref);\n-        } else {\n-            configuration = configuration(hostedRepositoryPool,\n-                    confOverrideRepo,\n-                    confOverrideName,\n-                    confOverrideRef);\n+        try {\n+            if (confOverrideRepo == null) {\n+                configuration = configuration(repository, \".jcheck\/conf\", ref);\n+            } else {\n+                configuration = configuration(confOverrideRepo,\n+                        confOverrideName,\n+                        confOverrideRef);\n+            }\n+            return configuration;\n+        } catch (RuntimeException e) {\n+            if (e.getMessage().contains(\"Request returned bad status:\")) {\n+                throw e;\n+            }\n+            throw new InvalidJCheckConfException(e);\n@@ -83,1 +104,0 @@\n-        return configuration;\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/LimitedCensusInstance.java","additions":43,"deletions":23,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -199,2 +199,7 @@\n-        var census = CensusInstance.createCensusInstance(hostedRepositoryPool, bot.censusRepo(), bot.censusRef(), scratchPath.resolve(\"census\"), pr,\n-                                           bot.confOverrideRepository().orElse(null), bot.confOverrideName(), bot.confOverrideRef()).orElseThrow();\n+        CensusInstance census = null;\n+        try {\n+            census = CensusInstance.createCensusInstance(hostedRepositoryPool, bot.censusRepo(), bot.censusRef(), scratchPath.resolve(\"census\"), pr,\n+                    bot.confOverrideRepository().orElse(null), bot.confOverrideName(), bot.confOverrideRef()).orElseThrow();\n+        } catch (InvalidJCheckConfException | MissingJCheckConfException e) {\n+            throw new RuntimeException(e);\n+        }\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestCommandWorkItem.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import java.io.FileWriter;\n@@ -2178,1 +2179,1 @@\n-    void invalidJCheckConf(TestInfo testInfo) throws IOException {\n+    void missingJCheckConf(TestInfo testInfo) throws IOException {\n@@ -2201,1 +2202,0 @@\n-\n@@ -2216,1 +2216,1 @@\n-            assertTrue(comments.get(comments.size() - 1).body().contains(\" ⚠️ @\" + pr.author().username() + \" The `.jcheck\/conf` in the target branch of this pull request is either invalid or missing completely. \"\n+            assertTrue(comments.get(comments.size() - 1).body().contains(\" ⚠️ @\" + pr.author().username() + \" The `.jcheck\/conf` in the target branch of this pull request is missing completely. \"\n@@ -2222,0 +2222,226 @@\n+\n+            \/\/ Restore .jcheck\/conf\n+            localRepo.checkout(masterHash);\n+            Files.createDirectories(tempFolder.path().resolve(\".jcheck\"));\n+            var checkConf = tempFolder.path().resolve(\".jcheck\/conf\");\n+            writeToCheckConf(checkConf);\n+            localRepo.add(checkConf);\n+            var restoreHash = localRepo.commit(\"add conf to master\", \"testauthor\", \"ta@none.none\");\n+            localRepo.push(restoreHash, author.url(), \"master\", true);\n+\n+            pr.addComment(\".jcheck\/conf is uploaded\");\n+            TestBotRunner.runPeriodicItems(checkBot);\n+            assertTrue(pr.store().labelNames().contains(\"rfr\"));\n+        }\n+    }\n+\n+    @Test\n+    void invalidJCheckConf(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addAuthor(author.forge().currentUser().id())\n+                    .addReviewer(reviewer.forge().currentUser().id());\n+            var seedFolder = tempFolder.path().resolve(\"seed\");\n+            var checkBot = PullRequestBot.newBuilder()\n+                    .repo(author)\n+                    .censusRepo(censusBuilder.build())\n+                    .censusLink(\"https:\/\/census.com\/{{contributor}}-profile\")\n+                    .seedStorage(seedFolder)\n+                    .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+\n+            \/\/ Make .jcheck\/conf invalid\n+            try (var output = new FileWriter(tempFolder.path().resolve(\".jcheck\/conf\").toFile(), true)) {\n+                output.append(\"\\n6r4tt32etdffyufv\");\n+            }\n+            localRepo.add(tempFolder.path().resolve(\".jcheck\/conf\"));\n+            var masterHash = localRepo.commit(\"make .jcheck\/conf invalid\", \"testauthor\", \"ta@none.none\");\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Create a new branch\n+            var editBranch = localRepo.branch(masterHash, \"edit\");\n+            localRepo.checkout(editBranch);\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"edit\", true);\n+\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"This is a pull request\");\n+\n+            \/\/ Check the status\n+            TestBotRunner.runPeriodicItems(checkBot);\n+            var comments = pr.store().comments();\n+            assertTrue(comments.get(comments.size() - 1).body().contains(\" ⚠️ @\" + pr.author().username() + \" The `.jcheck\/conf` in the target branch of this pull request is invalid. \"\n+                    + \"Until that is resolved, this pull request cannot be processed. Please notify the repository owner.\"));\n+            \/\/ Make sure the warning message will be sent only once\n+            TestBotRunner.runPeriodicItems(checkBot);\n+            TestBotRunner.runPeriodicItems(checkBot);\n+            assertEquals(1, pr.store().comments().size());\n+\n+            \/\/ Restore .jcheck\/conf\n+            localRepo.checkout(masterHash);\n+            Files.createDirectories(tempFolder.path().resolve(\".jcheck\"));\n+            var checkConf = tempFolder.path().resolve(\".jcheck\/conf\");\n+            writeToCheckConf(checkConf);\n+            localRepo.add(checkConf);\n+            var restoreHash = localRepo.commit(\"restore conf\", \"testauthor\", \"ta@none.none\");\n+            localRepo.push(restoreHash, author.url(), \"master\", true);\n+\n+            pr.addComment(\".jcheck\/conf is uploaded\");\n+            TestBotRunner.runPeriodicItems(checkBot);\n+            assertTrue(pr.store().labelNames().contains(\"rfr\"));\n+        }\n+    }\n+\n+    @Test\n+    void missingExternalJcheckConf(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var conf = credentials.getHostedRepository();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addAuthor(author.forge().currentUser().id());\n+            var checkBot = PullRequestBot.newBuilder()\n+                    .repo(author)\n+                    .censusRepo(censusBuilder.build())\n+                    .confOverrideRepo(conf)\n+                    .confOverrideName(\"jcheck.conf\")\n+                    .confOverrideRef(\"jcheck-branch\")\n+                    .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Remove conf\n+            localRepo.remove(localRepo.root().resolve(\".jcheck\/conf\"));\n+            var newMasterHash = localRepo.commit(\"No more conf\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(newMasterHash, author.url(), \"master\");\n+\n+            \/\/ Create a new branch\n+            var editBranch = localRepo.branch(masterHash, \"edit\");\n+            localRepo.checkout(editBranch);\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"edit\", true);\n+\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"This is a pull request\");\n+\n+            \/\/ Check the status (should become ready immediately as reviewercount is overridden to 0)\n+            TestBotRunner.runPeriodicItems(checkBot);\n+            var comments = pr.store().comments();\n+            assertTrue(comments.get(comments.size() - 1).body().contains(\" ⚠️ @\" + pr.author().username() + \" The external jcheck configuration for this repository could not be resolved. \"\n+                    + \"Until that is resolved, this pull request cannot be processed. Please notify a Skara admin.\"));\n+            \/\/ Make sure the warning message will be sent only once\n+            TestBotRunner.runPeriodicItems(checkBot);\n+            TestBotRunner.runPeriodicItems(checkBot);\n+            assertEquals(1, pr.store().comments().size());\n+\n+            \/\/ upload .jcheck\/conf to jcheck-branch\n+            var jCheckBranch = localRepo.branch(masterHash, \"jcheck-branch\");\n+            localRepo.checkout(jCheckBranch);\n+            var checkConf = tempFolder.path().resolve(\"jcheck.conf\");\n+            writeToCheckConf(checkConf);\n+            localRepo.add(checkConf);\n+            var restoreHash = localRepo.commit(\"restore conf\", \"testauthor\", \"ta@none.none\");\n+            localRepo.push(restoreHash, conf.url(), \"jcheck-branch\", true);\n+\n+            pr.addComment(\"jcheck.conf is uploaded\");\n+            TestBotRunner.runPeriodicItems(checkBot);\n+            assertTrue(pr.store().labelNames().contains(\"rfr\"));\n+        }\n+    }\n+\n+    @Test\n+    void invalidExternalJcheckConf(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var conf = credentials.getHostedRepository();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addAuthor(author.forge().currentUser().id());\n+            var checkBot = PullRequestBot.newBuilder()\n+                    .repo(author)\n+                    .censusRepo(censusBuilder.build())\n+                    .confOverrideRepo(conf)\n+                    .confOverrideName(\"jcheck.conf\")\n+                    .confOverrideRef(\"jcheck-branch\")\n+                    .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Remove conf\n+            localRepo.remove(localRepo.root().resolve(\".jcheck\/conf\"));\n+            var newMasterHash = localRepo.commit(\"No more conf\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(newMasterHash, author.url(), \"master\");\n+\n+            \/\/ upload invalid jcheck.conf to conf repo\n+            var jCheckBranch = localRepo.branch(masterHash, \"jcheck-branch\");\n+            localRepo.checkout(jCheckBranch);\n+            var checkConf = tempFolder.path().resolve(\"jcheck.conf\");\n+            try (var output = new FileWriter(checkConf.toFile(), true)) {\n+                output.append(\"\\n6r4tt32etdffyufv\");\n+            }\n+            localRepo.add(checkConf);\n+            var confHash = localRepo.commit(\"restore conf\", \"testauthor\", \"ta@none.none\");\n+            localRepo.push(confHash, conf.url(), \"jcheck-branch\", true);\n+\n+            \/\/ Create a new branch\n+            var editBranch = localRepo.branch(masterHash, \"edit\");\n+            localRepo.checkout(editBranch);\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"edit\", true);\n+\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"This is a pull request\");\n+\n+            \/\/ Check the status (should become ready immediately as reviewercount is overridden to 0)\n+            TestBotRunner.runPeriodicItems(checkBot);\n+            var comments = pr.store().comments();\n+            assertTrue(comments.get(comments.size() - 1).body().contains(\" ⚠️ @\" + pr.author().username() + \" The external jcheck configuration for this repository could not be resolved. \"\n+                    + \"Until that is resolved, this pull request cannot be processed. Please notify a Skara admin.\"));\n+            \/\/ Make sure the warning message will be sent only once\n+            TestBotRunner.runPeriodicItems(checkBot);\n+            TestBotRunner.runPeriodicItems(checkBot);\n+            assertEquals(1, pr.store().comments().size());\n+\n+            \/\/ restore jcheck.conf to jcheck-branch\n+            localRepo.checkout(jCheckBranch);\n+            writeToCheckConf(checkConf);\n+            localRepo.add(checkConf);\n+            var restoreHash = localRepo.commit(\"restore conf\", \"testauthor\", \"ta@none.none\");\n+            localRepo.push(restoreHash, conf.url(), \"jcheck-branch\", true);\n+\n+            pr.addComment(\"jcheck.conf is uploaded\");\n+            TestBotRunner.runPeriodicItems(checkBot);\n+            assertTrue(pr.store().labelNames().contains(\"rfr\"));\n+        }\n+    }\n+\n+    private void writeToCheckConf(Path checkConf) throws IOException {\n+        try (var output = Files.newBufferedWriter(checkConf)) {\n+            output.append(\"[general]\\n\");\n+            output.append(\"project=test\\n\");\n+            output.append(\"jbs=tstprj\\n\");\n+            output.append(\"\\n\");\n+            output.append(\"[checks]\\n\");\n+            output.append(\"error=\");\n+            output.append(String.join(\",\", Set.of(\"author\", \"reviewers\", \"whitespace\")));\n+            output.append(\"\\n\\n\");\n+            output.append(\"[census]\\n\");\n+            output.append(\"version=0\\n\");\n+            output.append(\"domain=openjdk.org\\n\");\n+            output.append(\"\\n\");\n+            output.append(\"[checks \\\"whitespace\\\"]\\n\");\n+            output.append(\"files=.*\\\\.txt\\n\");\n+            output.append(\"\\n\");\n+            output.append(\"[checks \\\"reviewers\\\"]\\n\");\n+            output.append(\"reviewers=1\\n\");\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CheckTests.java","additions":229,"deletions":3,"binary":false,"changes":232,"status":"modified"}]}