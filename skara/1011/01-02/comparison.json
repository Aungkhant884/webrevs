{"files":[{"patch":"@@ -81,22 +81,1 @@\n-        var comments = remoteRepo.commitComments(hash);\n-        var reviewComment = comments.stream().filter(\n-                c -> c.body().startsWith(\"<!-- COMMIT COMMENT NOTIFICATION -->\")).findFirst();\n-\n-        if (reviewComment.isEmpty()) {\n-            return null;\n-        }\n-\n-        \/** The review comment looks like this:\n-         * <!-- COMMIT COMMENT NOTIFICATION -->\n-         * ### Review\n-         *\n-         * - [openjdk\/skara\/123](https:\/\/git.openjdk.java.net\/skara\/pull\/123)\n-         *\/\n-\n-        var pattern = Pattern.compile(\"### Review[^]]*]\\\\((.*)\\\\)\");\n-        var matcher = pattern.matcher(reviewComment.get().body());\n-        if (matcher.find()) {\n-            return URI.create(matcher.group(1));\n-        }\n-\n-        return null;\n+        return remoteRepo.reviewUrl(hash);\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/GitInfo.java","additions":1,"deletions":22,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.util.regex.Pattern;\n@@ -85,0 +86,25 @@\n+\n+    default URI reviewUrl(Hash hash) {\n+        var comments = this.commitComments(hash);\n+        var reviewComment = comments.stream().filter(\n+                c -> c.body().startsWith(\"<!-- COMMIT COMMENT NOTIFICATION -->\")).findFirst();\n+\n+        if (reviewComment.isEmpty()) {\n+            return null;\n+        }\n+\n+        \/** The review comment looks like this:\n+         * <!-- COMMIT COMMENT NOTIFICATION -->\n+         * ### Review\n+         *\n+         * - [openjdk\/skara\/123](https:\/\/git.openjdk.java.net\/skara\/pull\/123)\n+         *\/\n+\n+        var pattern = Pattern.compile(\"### Review[^]]*]\\\\((.*)\\\\)\");\n+        var matcher = pattern.matcher(reviewComment.get().body());\n+        if (matcher.find()) {\n+            return URI.create(matcher.group(1));\n+        }\n+\n+        return null;\n+    }\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/HostedRepository.java","additions":26,"deletions":0,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import org.openjdk.skara.host.HostUser;\n@@ -28,0 +29,6 @@\n+import org.openjdk.skara.test.TemporaryDirectory;\n+import org.openjdk.skara.test.TestHost;\n+import org.openjdk.skara.test.TestHostedRepository;\n+import org.openjdk.skara.vcs.Hash;\n+import org.openjdk.skara.vcs.Repository;\n+import org.openjdk.skara.vcs.VCS;\n@@ -29,0 +36,1 @@\n+import java.io.IOException;\n@@ -30,0 +38,1 @@\n+import java.nio.file.Files;\n@@ -34,0 +43,1 @@\n+import static org.junit.jupiter.api.Assertions.assertNull;\n@@ -78,0 +88,34 @@\n+\n+    private static Hash createCommit(Repository r) throws IOException {\n+        var readme = r.root().resolve(\"README\");\n+        Files.write(readme, List.of(\"Hello, readme!\"));\n+\n+        r.add(readme);\n+        return r.commit(\"Add README\", \"duke\", \"duke@openjdk.java.net\");\n+    }\n+\n+    @Test\n+    void reviewUrlTest() throws IOException {\n+        try (var tmp = new TemporaryDirectory()) {\n+            var gitLocalDir = tmp.path().resolve(\"review.git\");\n+            Files.createDirectories(gitLocalDir);\n+            var gitLocalRepo = Repository.init(gitLocalDir, VCS.GIT);\n+            var hash = createCommit(gitLocalRepo);\n+\n+            var host = TestHost.createNew(List.of(HostUser.create(0, \"duke\", \"J. Duke\")));\n+            var gitHostedRepo = new TestHostedRepository(host, \"review\", gitLocalRepo);\n+\n+            var missingReviewUrl = gitHostedRepo.reviewUrl(hash);\n+            assertNull(missingReviewUrl);\n+\n+            gitHostedRepo.addCommitComment(hash, \"\"\"\n+                    <!-- COMMIT COMMENT NOTIFICATION -->\n+                    ### Review\n+                    \n+                     - [openjdk\/skara\/123](https:\/\/git.openjdk.java.net\/skara\/pull\/123)\n+                    \"\"\");\n+\n+            var reviewUrl = gitHostedRepo.reviewUrl(hash);\n+            assertEquals(URI.create(\"https:\/\/git.openjdk.java.net\/skara\/pull\/123\"), reviewUrl);\n+        }\n+    }\n","filename":"forge\/src\/test\/java\/org\/openjdk\/skara\/forge\/ForgeTests.java","additions":44,"deletions":0,"binary":false,"changes":44,"status":"modified"}]}