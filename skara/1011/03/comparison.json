{"files":[{"patch":"@@ -0,0 +1,168 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.cli;\n+\n+import org.openjdk.skara.args.Arguments;\n+import org.openjdk.skara.forge.Forge;\n+import org.openjdk.skara.forge.HostedRepository;\n+import org.openjdk.skara.host.Credential;\n+import org.openjdk.skara.vcs.ReadOnlyRepository;\n+import org.openjdk.skara.vcs.Repository;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Path;\n+\n+public class ForgeUtils {\n+    private static void exit(String fmt, Object... args) {\n+        System.err.println(String.format(fmt, args));\n+        System.exit(1);\n+    }\n+\n+    private static String gitConfig(String key) {\n+        try {\n+            var pb = new ProcessBuilder(\"git\", \"config\", key);\n+            pb.redirectOutput(ProcessBuilder.Redirect.PIPE);\n+            pb.redirectError(ProcessBuilder.Redirect.DISCARD);\n+            var p = pb.start();\n+\n+            var output = new String(p.getInputStream().readAllBytes(), StandardCharsets.UTF_8);\n+            var res = p.waitFor();\n+            if (res != 0) {\n+                return null;\n+            }\n+\n+            return output == null ? null : output.replace(\"\\n\", \"\");\n+        } catch (InterruptedException e) {\n+            return null;\n+        } catch (IOException e) {\n+            return null;\n+        }\n+    }\n+\n+    public static String getOption(String name, String command, String subsection, Arguments arguments) {\n+        if (arguments.contains(name)) {\n+            return arguments.get(name).asString();\n+        }\n+\n+        if (subsection != null && !subsection.isEmpty()) {\n+            var subsectionSpecific = gitConfig(command + \".\" + subsection + \".\" + name);\n+            if (subsectionSpecific != null) {\n+                return subsectionSpecific;\n+            }\n+        }\n+\n+        return gitConfig(command + \".\" + name);\n+    }\n+\n+    public static boolean getSwitch(String name, String command, String subsection, Arguments arguments) {\n+        if (arguments.contains(name)) {\n+            return true;\n+        }\n+\n+        if (subsection != null && !subsection.isEmpty()) {\n+            var subsectionSpecific = gitConfig(command + \".\" + subsection + \".\" + name);\n+            if (subsectionSpecific != null) {\n+                return subsectionSpecific.toLowerCase().equals(\"true\");\n+            }\n+        }\n+\n+        var sectionSpecific = gitConfig(command + \".\" + name);\n+        return sectionSpecific != null && sectionSpecific.toLowerCase().equals(\"true\");\n+    }\n+\n+    static Repository getRepo() throws IOException {\n+        var cwd = Path.of(\"\").toAbsolutePath();\n+        return Repository.get(cwd).orElseThrow(() -> new IOException(\"no git repository found at \" + cwd.toString()));\n+    }\n+\n+    public static String getRemote(ReadOnlyRepository repo, String command, Arguments arguments) throws IOException {\n+        var remote = getOption(\"remote\", command, null, arguments);\n+        return remote == null ? \"origin\" : remote;\n+    }\n+\n+    public static URI getURI(ReadOnlyRepository repo, String command, Arguments arguments) throws IOException {\n+        var remotePullPath = repo.pullPath(getRemote(repo, command, arguments));\n+        return Remote.toWebURI(remotePullPath);\n+    }\n+\n+    public static Forge getForge(URI uri, ReadOnlyRepository repo, String command, Arguments arguments) throws IOException {\n+        var username = getOption(\"username\", null, null, arguments);\n+        var token = System.getenv(\"GIT_TOKEN\");\n+        var shouldUseToken = !getSwitch(\"no-token\", command, null, arguments);\n+        var credentials = !shouldUseToken ?\n+                null :\n+                GitCredentials.fill(uri.getHost(), uri.getPath(), username, token, uri.getScheme());\n+        var forgeURI = URI.create(uri.getScheme() + \":\/\/\" + uri.getHost());\n+        var forge = credentials == null ?\n+                Forge.from(forgeURI) :\n+                Forge.from(forgeURI, new Credential(credentials.username(), credentials.password()));\n+        if (forge.isEmpty()) {\n+            if (!shouldUseToken) {\n+                if (arguments.contains(\"verbose\")) {\n+                    System.err.println(\"\");\n+                }\n+                System.err.println(\"warning: using this command with --no-token may result in rate limiting from \" + forgeURI);\n+                if (!arguments.contains(\"verbose\")) {\n+                    System.err.println(\"         Re-run with --verbose to see if you are being rate limited\");\n+                    System.err.println(\"\");\n+                }\n+            }\n+            exit(\"error: failed to connect to host: \" + forgeURI);\n+        }\n+        if (credentials != null) {\n+            GitCredentials.approve(credentials);\n+        }\n+        return forge.get();\n+    }\n+\n+    public static String projectName(URI uri) {\n+        var name = uri.getPath().toString().substring(1);\n+        if (name.endsWith(\".git\")) {\n+            name = name.substring(0, name.length() - \".git\".length());\n+        }\n+        return name;\n+    }\n+\n+    public static HostedRepository getHostedRepositoryFor(URI uri, ReadOnlyRepository repo, Forge host) throws IOException {\n+        HostedRepository targetRepo = null;\n+\n+        try {\n+            var upstream = Remote.toWebURI(repo.pullPath(\"upstream\"));\n+            targetRepo = host.repository(projectName(upstream)).orElse(null);\n+        } catch (IOException e) {\n+            \/\/ do nothing\n+        }\n+\n+        if (targetRepo == null) {\n+            var remoteRepo = host.repository(projectName(uri)).orElseThrow(() ->\n+                    new IOException(\"Could not find repository at: \" + uri.toString())\n+            );\n+            var parentRepo = remoteRepo.parent();\n+            targetRepo = parentRepo.isPresent() ? parentRepo.get() : remoteRepo;\n+        }\n+\n+        return targetRepo;\n+    }\n+}\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/ForgeUtils.java","additions":168,"deletions":0,"binary":false,"changes":168,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,1 @@\n+import java.util.regex.Pattern;\n@@ -67,1 +68,14 @@\n-        return conf.general().jbs().toUpperCase();\n+        var jbsProject = conf.general().jbs();\n+        if (jbsProject != null) {\n+            return jbsProject.toUpperCase();\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    private static URI getReviewUrl(ReadOnlyRepository repo, Arguments arguments, Hash hash, CommitMessage message) throws IOException {\n+        var repoUrl = ForgeUtils.getURI(repo, \"info\", arguments);\n+        var forge = ForgeUtils.getForge(repoUrl, repo, \"info\", arguments);\n+        var remoteRepo = ForgeUtils.getHostedRepositoryFor(repoUrl, repo, forge);\n+\n+        return remoteRepo.reviewUrl(hash);\n@@ -241,15 +255,4 @@\n-            var decoration = useDecoration? \"Review: \" : \"\";\n-            var project = jbsProject(repo, hash);\n-            if (message.issues().size() == 1) {\n-                var issueId = message.issues().get(0).shortId();\n-                var issueTracker = IssueTracker.from(\"jira\", JBS);\n-                var issue = issueTracker.project(project).issue(issueId);\n-                if (issue.isPresent()) {\n-                    for (var link : issue.get().links()) {\n-                        if (link.title().isPresent() && link.uri().isPresent()) {\n-                            if (link.title().get().equals(\"Review\")) {\n-                                System.out.println(decoration + link.uri().get());\n-                            }\n-                        }\n-                    }\n-                }\n+            var reviewUrl = getReviewUrl(repo, arguments, hash, message);\n+            if (reviewUrl != null) {\n+                var decoration = useDecoration? \"Review: \" : \"\";\n+                System.out.println(decoration + reviewUrl);\n@@ -260,9 +263,14 @@\n-            var uri = JBS + \"\/browse\/\" + project + \"-\";\n-            var issues = message.issues();\n-            if (issues.size() > 1) {\n-                if (useDecoration) {\n-                    System.out.println(\"Issues:\");\n-                }\n-                var decoration = useDecoration ? \"- \" : \"\";\n-                for (var issue : issues) {\n-                    System.out.println(decoration + uri + issue.shortId());\n+            if (project != null) {\n+                var uri = JBS + \"\/browse\/\" + project + \"-\";\n+                var issues = message.issues();\n+                if (issues.size() > 1) {\n+                    if (useDecoration) {\n+                        System.out.println(\"Issues:\");\n+                    }\n+                    var decoration = useDecoration ? \"- \" : \"\";\n+                    for (var issue : issues) {\n+                        System.out.println(decoration + uri + issue.shortId());\n+                    }\n+                } else if (issues.size() == 1) {\n+                    var decoration = useDecoration ? \"Issue: \" : \"\";\n+                    System.out.println(decoration + uri + issues.get(0).shortId());\n@@ -270,3 +278,0 @@\n-            } else if (issues.size() == 1) {\n-                var decoration = useDecoration ? \"Issue: \" : \"\";\n-                System.out.println(decoration + uri + issues.get(0).shortId());\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/GitInfo.java","additions":34,"deletions":29,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-import java.util.regex.Pattern;\n@@ -148,1 +147,1 @@\n-        var remoteRepo = host.repository(projectName(uri)).orElseThrow(() ->\n+        var remoteRepo = host.repository(ForgeUtils.projectName(uri)).orElseThrow(() ->\n@@ -308,1 +307,1 @@\n-        var parentProject = projectName(parentRepo.url());\n+        var parentProject = ForgeUtils.projectName(parentRepo.url());\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/pr\/GitPrCreate.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+import org.openjdk.skara.cli.ForgeUtils;\n@@ -118,1 +119,1 @@\n-        var remoteRepo = getHostedRepositoryFor(uri, repo, host);\n+        var remoteRepo = ForgeUtils.getHostedRepositoryFor(uri, repo, host);\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/pr\/GitPrList.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-import org.openjdk.skara.cli.Remote;\n+import org.openjdk.skara.cli.ForgeUtils;\n@@ -28,1 +28,0 @@\n-import org.openjdk.skara.cli.GitCredentials;\n@@ -30,1 +29,0 @@\n-import org.openjdk.skara.host.*;\n@@ -41,1 +39,0 @@\n-import java.nio.charset.StandardCharsets;\n@@ -60,25 +57,0 @@\n-    static String gitConfig(String key) {\n-        try {\n-            var pb = new ProcessBuilder(\"git\", \"config\", key);\n-            pb.redirectOutput(ProcessBuilder.Redirect.PIPE);\n-            pb.redirectError(ProcessBuilder.Redirect.DISCARD);\n-            var p = pb.start();\n-\n-            var output = new String(p.getInputStream().readAllBytes(), StandardCharsets.UTF_8);\n-            var res = p.waitFor();\n-            if (res != 0) {\n-                return null;\n-            }\n-\n-            return output == null ? null : output.replace(\"\\n\", \"\");\n-        } catch (InterruptedException e) {\n-            return null;\n-        } catch (IOException e) {\n-            return null;\n-        }\n-    }\n-\n-    static String getOption(String name, Arguments arguments) {\n-        return getOption(name, null, arguments);\n-    }\n-\n@@ -86,16 +58,1 @@\n-        if (arguments.contains(name)) {\n-            return arguments.get(name).asString();\n-        }\n-\n-        if (subsection != null && !subsection.isEmpty()) {\n-            var subsectionSpecific = gitConfig(\"pr.\" + subsection + \".\" + name);\n-            if (subsectionSpecific != null) {\n-                return subsectionSpecific;\n-            }\n-        }\n-\n-        return gitConfig(\"fork.\" + name);\n-    }\n-\n-    static boolean getSwitch(String name, Arguments arguments) {\n-        return getSwitch(name, null, arguments);\n+        return ForgeUtils.getOption(name, \"pr\", subsection, arguments);\n@@ -105,13 +62,1 @@\n-        if (arguments.contains(name)) {\n-            return true;\n-        }\n-\n-        if (subsection != null && !subsection.isEmpty()) {\n-            var subsectionSpecific = gitConfig(\"pr.\" + subsection + \".\" + name);\n-            if (subsectionSpecific != null) {\n-                return subsectionSpecific.toLowerCase().equals(\"true\");\n-            }\n-        }\n-\n-        var sectionSpecific = gitConfig(\"fork.\" + name);\n-        return sectionSpecific != null && sectionSpecific.toLowerCase().equals(\"true\");\n+        return ForgeUtils.getSwitch(name, \"pr\", subsection, arguments);\n@@ -333,29 +278,0 @@\n-    static String projectName(URI uri) {\n-        var name = uri.getPath().toString().substring(1);\n-        if (name.endsWith(\".git\")) {\n-            name = name.substring(0, name.length() - \".git\".length());\n-        }\n-        return name;\n-    }\n-\n-    static HostedRepository getHostedRepositoryFor(URI uri, ReadOnlyRepository repo, Forge host) throws IOException {\n-        HostedRepository targetRepo = null;\n-\n-        try {\n-            var upstream = Remote.toWebURI(repo.pullPath(\"upstream\"));\n-            targetRepo = host.repository(projectName(upstream)).orElse(null);\n-        } catch (IOException e) {\n-            \/\/ do nothing\n-        }\n-\n-        if (targetRepo == null) {\n-            var remoteRepo = host.repository(projectName(uri)).orElseThrow(() ->\n-                    new IOException(\"Could not find repository at: \" + uri.toString())\n-            );\n-            var parentRepo = remoteRepo.parent();\n-            targetRepo = parentRepo.isPresent() ? parentRepo.get() : remoteRepo;\n-        }\n-\n-        return targetRepo;\n-    }\n-\n@@ -363,1 +279,1 @@\n-        var pr = getHostedRepositoryFor(uri, repo, host).pullRequest(prId);\n+        var pr = ForgeUtils.getHostedRepositoryFor(uri, repo, host).pullRequest(prId);\n@@ -447,2 +363,1 @@\n-        var remote = getOption(\"remote\", arguments);\n-        return remote == null ? \"origin\" : remote;\n+        return ForgeUtils.getRemote(repo, \"pr\", arguments);\n@@ -452,2 +367,1 @@\n-        var remotePullPath = repo.pullPath(getRemote(repo, arguments));\n-        return Remote.toWebURI(remotePullPath);\n+        return ForgeUtils.getURI(repo, \"pr\", arguments);\n@@ -457,27 +371,1 @@\n-        var username = getOption(\"username\", arguments);\n-        var token = System.getenv(\"GIT_TOKEN\");\n-        var shouldUseToken = !getSwitch(\"no-token\", arguments);\n-        var credentials = !shouldUseToken ?\n-            null :\n-            GitCredentials.fill(uri.getHost(), uri.getPath(), username, token, uri.getScheme());\n-        var forgeURI = URI.create(uri.getScheme() + \":\/\/\" + uri.getHost());\n-        var forge = credentials == null ?\n-            Forge.from(forgeURI) :\n-            Forge.from(forgeURI, new Credential(credentials.username(), credentials.password()));\n-        if (forge.isEmpty()) {\n-            if (!shouldUseToken) {\n-                if (arguments.contains(\"verbose\")) {\n-                    System.err.println(\"\");\n-                }\n-                System.err.println(\"warning: using git-pr with --no-token may result in rate limiting from \" + forgeURI);\n-                if (!arguments.contains(\"verbose\")) {\n-                    System.err.println(\"         Re-run git-pr with --verbose to see if you are being rate limited\");\n-                    System.err.println(\"\");\n-                }\n-            }\n-            exit(\"error: failed to connect to host: \" + forgeURI);\n-        }\n-        if (credentials != null) {\n-            GitCredentials.approve(credentials);\n-        }\n-        return forge.get();\n+        return ForgeUtils.getForge(uri, repo, \"pr\", arguments);\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/pr\/Utils.java","additions":7,"deletions":119,"binary":false,"changes":126,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.util.regex.Pattern;\n@@ -85,0 +86,25 @@\n+\n+    default URI reviewUrl(Hash hash) {\n+        var comments = this.commitComments(hash);\n+        var reviewComment = comments.stream().filter(\n+                c -> c.body().startsWith(\"<!-- COMMIT COMMENT NOTIFICATION -->\")).findFirst();\n+\n+        if (reviewComment.isEmpty()) {\n+            return null;\n+        }\n+\n+        \/** The review comment looks like this:\n+         * <!-- COMMIT COMMENT NOTIFICATION -->\n+         * ### Review\n+         *\n+         * - [openjdk\/skara\/123](https:\/\/git.openjdk.java.net\/skara\/pull\/123)\n+         *\/\n+\n+        var pattern = Pattern.compile(\"### Review[^]]*]\\\\((.*)\\\\)\");\n+        var matcher = pattern.matcher(reviewComment.get().body());\n+        if (matcher.find()) {\n+            return URI.create(matcher.group(1));\n+        }\n+\n+        return null;\n+    }\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/HostedRepository.java","additions":26,"deletions":0,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import org.openjdk.skara.host.HostUser;\n@@ -28,0 +29,6 @@\n+import org.openjdk.skara.test.TemporaryDirectory;\n+import org.openjdk.skara.test.TestHost;\n+import org.openjdk.skara.test.TestHostedRepository;\n+import org.openjdk.skara.vcs.Hash;\n+import org.openjdk.skara.vcs.Repository;\n+import org.openjdk.skara.vcs.VCS;\n@@ -29,0 +36,1 @@\n+import java.io.IOException;\n@@ -30,0 +38,1 @@\n+import java.nio.file.Files;\n@@ -34,0 +43,1 @@\n+import static org.junit.jupiter.api.Assertions.assertNull;\n@@ -78,0 +88,34 @@\n+\n+    private static Hash createCommit(Repository r) throws IOException {\n+        var readme = r.root().resolve(\"README\");\n+        Files.write(readme, List.of(\"Hello, readme!\"));\n+\n+        r.add(readme);\n+        return r.commit(\"Add README\", \"duke\", \"duke@openjdk.java.net\");\n+    }\n+\n+    @Test\n+    void reviewUrlTest() throws IOException {\n+        try (var tmp = new TemporaryDirectory()) {\n+            var gitLocalDir = tmp.path().resolve(\"review.git\");\n+            Files.createDirectories(gitLocalDir);\n+            var gitLocalRepo = Repository.init(gitLocalDir, VCS.GIT);\n+            var hash = createCommit(gitLocalRepo);\n+\n+            var host = TestHost.createNew(List.of(HostUser.create(0, \"duke\", \"J. Duke\")));\n+            var gitHostedRepo = new TestHostedRepository(host, \"review\", gitLocalRepo);\n+\n+            var missingReviewUrl = gitHostedRepo.reviewUrl(hash);\n+            assertNull(missingReviewUrl);\n+\n+            gitHostedRepo.addCommitComment(hash, \"\"\"\n+                    <!-- COMMIT COMMENT NOTIFICATION -->\n+                    ### Review\n+\n+                     - [openjdk\/skara\/123](https:\/\/git.openjdk.java.net\/skara\/pull\/123)\n+                    \"\"\");\n+\n+            var reviewUrl = gitHostedRepo.reviewUrl(hash);\n+            assertEquals(URI.create(\"https:\/\/git.openjdk.java.net\/skara\/pull\/123\"), reviewUrl);\n+        }\n+    }\n","filename":"forge\/src\/test\/java\/org\/openjdk\/skara\/forge\/ForgeTests.java","additions":44,"deletions":0,"binary":false,"changes":44,"status":"modified"}]}