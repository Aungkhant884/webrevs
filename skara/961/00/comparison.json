{"files":[{"patch":"@@ -28,1 +28,0 @@\n-import org.openjdk.skara.issuetracker.*;\n@@ -30,0 +29,1 @@\n+import org.openjdk.skara.issuetracker.*;\n@@ -31,1 +31,1 @@\n-import org.openjdk.skara.json.JSON;\n+import org.openjdk.skara.json.*;\n@@ -49,1 +49,0 @@\n-    private final JbsBackport jbsBackport;\n@@ -56,1 +55,1 @@\n-            boolean setFixVersion, Map<String, String> fixVersions, JbsBackport jbsBackport, boolean prOnly,\n+            boolean setFixVersion, Map<String, String> fixVersions, boolean prOnly,\n@@ -65,1 +64,0 @@\n-        this.jbsBackport = jbsBackport;\n@@ -182,0 +180,24 @@\n+    private final static Set<String> copiedProperties = Set.of(\"priority\", \"versions\", \"components\", \"security\",\n+                                                                \"customfield_10000\", \"customfield_10005\", \"customfield_10008\");\n+\n+    private Issue createBackportIssue(Issue primary, String assignee) {\n+        var finalProperties = new HashMap<String, JSONValue>();\n+        for (var property : primary.properties().entrySet()) {\n+            if (copiedProperties.contains(property.getKey())) {\n+                finalProperties.put(property.getKey(), property.getValue());\n+            }\n+        }\n+        finalProperties.put(\"issuetype\", JSON.of(\"Backport\"));\n+        if (assignee != null) {\n+            finalProperties.put(\"assignee\", JSON.of(assignee));\n+        }\n+        if (!finalProperties.containsKey(\"security\")) {\n+            finalProperties.put(\"security\", JSON.of());\n+        }\n+        var backport = primary.project().createIssue(primary.title(), List.of(\"\"), finalProperties);\n+\n+        var backportLink = Link.create(backport, \"backported by\").build();\n+        primary.addLink(backportLink);\n+        return backport;\n+    }\n+\n@@ -230,1 +252,1 @@\n-                            issue = jbsBackport.createBackport(issue, requestedVersion, username.orElse(null));\n+                            issue = createBackportIssue(issue, username.orElse(null));\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifier.java","additions":28,"deletions":6,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -38,2 +38,0 @@\n-    private JbsVault vault = null;\n-    private String securityLevel = null;\n@@ -79,10 +77,0 @@\n-    public IssueNotifierBuilder vault(JbsVault vault) {\n-        this.vault = vault;\n-        return this;\n-    }\n-\n-    public IssueNotifierBuilder securityLevel(String securityLevel) {\n-        this.securityLevel = securityLevel;\n-        return this;\n-    }\n-\n@@ -100,1 +88,0 @@\n-        var jbsBackport = new JbsBackport(issueProject.webUrl(), vault, securityLevel);\n@@ -102,1 +89,1 @@\n-                                 setFixVersion, fixVersions, jbsBackport, prOnly, buildName);\n+                                 setFixVersion, fixVersions, prOnly, buildName);\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifierBuilder.java","additions":1,"deletions":14,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -5,1 +5,0 @@\n-import org.openjdk.skara.host.Credential;\n@@ -7,1 +6,0 @@\n-import org.openjdk.skara.network.URIBuilder;\n@@ -52,17 +50,0 @@\n-        if (notifierConfiguration.contains(\"vault\")) {\n-            var vaultConfiguration = notifierConfiguration.get(\"vault\").asObject();\n-            var credential = new Credential(vaultConfiguration.get(\"username\").asString(), vaultConfiguration.get(\"password\").asString());\n-\n-            if (credential.username().startsWith(\"https:\/\/\")) {\n-                var vaultUrl = URIBuilder.base(credential.username()).build();\n-                var jbsVault = new JbsVault(vaultUrl, credential.password(), issueProject.webUrl());\n-                builder.vault(jbsVault);\n-            } else {\n-                throw new RuntimeException(\"basic authentication not implemented yet\");\n-            }\n-        }\n-\n-        if (notifierConfiguration.contains(\"security\")) {\n-            builder.securityLevel(notifierConfiguration.get(\"security\").asString());\n-        }\n-\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifierFactory.java","additions":0,"deletions":19,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -1,84 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.skara.bots.notify.issue;\n-\n-import org.openjdk.skara.issuetracker.*;\n-import org.openjdk.skara.json.JSON;\n-import org.openjdk.skara.network.*;\n-\n-import java.net.URI;\n-import java.util.*;\n-import java.util.stream.Collectors;\n-\n-public class JbsBackport {\n-    private final String securityLevel;\n-    private final RestRequest backportRequest;\n-\n-    private static URI backportRequest(URI uri) {\n-        return URIBuilder.base(uri)\n-                         .setPath(\"\/rest\/jbs\/1.0\/backport\/\")\n-                         .build();\n-    }\n-\n-    JbsBackport(URI uri, JbsVault vault, String securityLevel) {\n-        this.securityLevel = securityLevel;\n-        if (vault != null) {\n-            backportRequest = new RestRequest(backportRequest(uri), vault.authId(), () -> Arrays.asList(\"Cookie\", vault.getCookie()));\n-        } else {\n-            backportRequest = null;\n-        }\n-    }\n-\n-    private Issue createBackportIssue(Issue primary) {\n-        var finalProperties = new HashMap<>(primary.properties());\n-        finalProperties.put(\"issuetype\", JSON.of(\"Backport\"));\n-\n-        var backport = primary.project().createIssue(primary.title(), primary.body().lines().collect(Collectors.toList()), finalProperties);\n-\n-        var backportLink = Link.create(backport, \"backported by\").build();\n-        primary.addLink(backportLink);\n-        return backport;\n-    }\n-\n-    public Issue createBackport(Issue primary, String fixVersion, String assignee) {\n-        if (backportRequest == null) {\n-            if (primary.project().webUrl().toString().contains(\"openjdk.java.net\")) {\n-                throw new RuntimeException(\"Backports on JBS require vault authentication\");\n-            } else {\n-                return createBackportIssue(primary);\n-            }\n-        }\n-\n-        var request = backportRequest.post()\n-                                     .body(\"parentIssueKey\", primary.id())\n-                                     .body(\"fixVersion\", fixVersion);\n-        if (assignee != null) {\n-            request.body(\"assignee\", assignee);\n-        }\n-        if (securityLevel != null) {\n-            request.body(\"level\", securityLevel);\n-        }\n-        var response = request.execute();\n-        return primary.project().issue(response.get(\"key\").asString()).orElseThrow();\n-    }\n-}\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/JbsBackport.java","additions":0,"deletions":84,"binary":false,"changes":84,"status":"deleted"},{"patch":"@@ -1,81 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.skara.bots.notify.issue;\n-\n-import org.openjdk.skara.json.JSON;\n-import org.openjdk.skara.network.*;\n-\n-import java.net.URI;\n-import java.nio.charset.StandardCharsets;\n-import java.security.*;\n-import java.util.*;\n-import java.util.logging.Logger;\n-\n-public class JbsVault {\n-    private final RestRequest request;\n-    private final String authId;\n-    private final URI authProbe;\n-    private static final Logger log = Logger.getLogger(\"org.openjdk.skara.bots.notify\");\n-\n-    private String cookie;\n-\n-    private String checksum(String body) {\n-        try {\n-            var digest = MessageDigest.getInstance(\"SHA-256\");\n-            digest.update(body.getBytes(StandardCharsets.UTF_8));\n-            return Base64.getUrlEncoder().encodeToString(digest.digest());\n-        } catch (NoSuchAlgorithmException e) {\n-            throw new RuntimeException(\"Cannot find SHA-256\");\n-        }\n-    }\n-\n-    JbsVault(URI vaultUri, String vaultToken, URI jiraUri) {\n-        authId = checksum(vaultToken);\n-        request = new RestRequest(vaultUri, authId, () -> Arrays.asList(\n-                \"X-Vault-Token\", vaultToken\n-        ));\n-        this.authProbe = URIBuilder.base(jiraUri).setPath(\"\/rest\/api\/2\/myself\").build();\n-    }\n-\n-    String getCookie() {\n-        if (cookie != null) {\n-            var authProbeRequest = new RestRequest(authProbe, authId, () -> Arrays.asList(\"Cookie\", cookie));\n-            var res = authProbeRequest.get()\n-                                      .onError(error -> error.statusCode() >= 400 ? Optional.of(JSON.of(\"AUTH_ERROR\")) : Optional.empty())\n-                                      .execute();\n-            if (res.isObject() && !res.contains(\"AUTH_ERROR\")) {\n-                return cookie;\n-            }\n-        }\n-\n-        \/\/ Renewal time\n-        var result = request.get(\"\").execute();\n-        cookie = result.get(\"data\").get(\"cookie.name\").asString() + \"=\" + result.get(\"data\").get(\"cookie.value\").asString();\n-        log.info(\"Renewed Jira token (\" + cookie + \")\");\n-        return cookie;\n-    }\n-\n-    String authId() {\n-        return authId;\n-    }\n-}\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/JbsVault.java","additions":0,"deletions":81,"binary":false,"changes":81,"status":"deleted"},{"patch":"@@ -837,3 +837,1 @@\n-                                                        \"customfield_10008\", JSON.object()\n-                                                                                 .put(\"id\", 244)\n-                                                                                 .put(\"name\", \"java.io\"),\n+                                                        \"customfield_10008\", JSON.of(\"java.io\"),\n@@ -875,2 +873,1 @@\n-            assertEquals(244, backport.properties().get(\"customfield_10008\").get(\"id\").asInt());\n-            assertEquals(\"java.io\", backport.properties().get(\"customfield_10008\").get(\"name\").asString());\n+            assertEquals(\"java.io\", backport.properties().get(\"customfield_10008\").asString());\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifierTests.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -356,2 +356,8 @@\n-        jiraHost.securityLevel().ifPresent(securityLevel -> fields.put(\"security\", JSON.object()\n-                                                                                       .put(\"id\", securityLevel)));\n+        if (properties.containsKey(\"security\")) {\n+            if (!properties.get(\"security\").isNull()) {\n+                fields.put(\"security\", properties.get(\"security\"));\n+            }\n+        } else {\n+            jiraHost.securityLevel().ifPresent(securityLevel -> fields.put(\"security\", JSON.object()\n+                                                                                           .put(\"id\", securityLevel)));\n+        }\n","filename":"issuetracker\/src\/main\/java\/org\/openjdk\/skara\/issuetracker\/jira\/JiraProject.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"}]}