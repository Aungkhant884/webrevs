{"files":[{"patch":"@@ -34,1 +34,1 @@\n-import java.time.ZonedDateTime;\n+import java.time.*;\n@@ -201,1 +201,2 @@\n-                            ret.add(\"Title mismatch between PR and JBS for issue \" + issueString);\n+                            ret.add(\"Title mismatch between PR and JBS for issue \" + issueString +\n+                                            ExpirationTracker.expiresAfterMarker(Duration.ofMinutes(1)));\n@@ -204,1 +205,2 @@\n-                        log.warning(\"Failed to retrieve information on issue \" + currentIssue.id());\n+                        log.warning(\"Failed to retrieve information on issue \" + currentIssue.id() +\n+                                            ExpirationTracker.expiresAfterMarker(Duration.ofMinutes(10)));\n@@ -207,1 +209,2 @@\n-                    log.warning(\"Temporary failure when trying to retrieve information on issue \" + currentIssue.id());\n+                    log.warning(\"Temporary failure when trying to retrieve information on issue \" + currentIssue.id() +\n+                                        ExpirationTracker.expiresAfterMarker(Duration.ofMinutes(30)));\n@@ -438,0 +441,1 @@\n+                            progressBody.append(ExpirationTracker.expiresAfterMarker(Duration.ofMinutes(1)));\n@@ -442,1 +446,3 @@\n-                            progressBody.append(\"`.\\n\");\n+                            progressBody.append(\"`.\");\n+                            progressBody.append(ExpirationTracker.expiresAfterMarker(Duration.ofMinutes(10)));\n+                            progressBody.append(\"\\n\");\n@@ -447,1 +453,3 @@\n-                        progressBody.append(\"`.\\n\");\n+                        progressBody.append(\"`.\");\n+                        progressBody.append(ExpirationTracker.expiresAfterMarker(Duration.ofMinutes(30)));\n+                        progressBody.append(\"\\n\");\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":14,"deletions":6,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -69,0 +69,5 @@\n+            var hasExpired = ExpirationTracker.hasExpired(body);\n+            if (hasExpired) {\n+                return Base64.getUrlEncoder().encodeToString(UUID.randomUUID().toString().getBytes(StandardCharsets.UTF_8));\n+            }\n+\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckWorkItem.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,51 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bots.pr;\n+\n+import java.time.*;\n+import java.time.format.DateTimeFormatter;\n+import java.util.regex.*;\n+\n+public class ExpirationTracker {\n+    private static final String expirationMarker = \"<!-- Data expires at: '%s' -->\";\n+    private static final Pattern expirationPattern = Pattern.compile(\"<!-- Data expires at: '(.*?)' -->\", Pattern.MULTILINE);\n+\n+    static String expiresAfterMarker(Duration expiresAfter) {\n+        return String.format(expirationMarker, ZonedDateTime.now().plus(expiresAfter).format(DateTimeFormatter.ISO_ZONED_DATE_TIME));\n+    }\n+\n+    static boolean hasExpired(String textWithMarkers) {\n+        var earliestExpiration = textWithMarkers.lines()\n+                                                .map(expirationPattern::matcher)\n+                                                .filter(Matcher::find)\n+                                                .map(matcher -> matcher.group(1))\n+                                                .sorted()\n+                                                .findFirst();\n+        if (earliestExpiration.isEmpty()) {\n+            return false;\n+        }\n+\n+        var expiresAt = ZonedDateTime.parse(earliestExpiration.get(), DateTimeFormatter.ISO_ZONED_DATE_TIME);\n+        return expiresAt.isBefore(ZonedDateTime.now());\n+    }\n+}\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/ExpirationTracker.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"},{"patch":"@@ -139,1 +139,1 @@\n-            if (updateCache.needsUpdate(pr, Duration.ofMinutes(5))) {\n+            if (ExpirationTracker.hasExpired(pr.body()) || updateCache.needsUpdate(pr, Duration.ofMinutes(5))) {\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBot.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import java.time.ZonedDateTime;\n+import java.time.*;\n@@ -163,0 +163,8 @@\n+        var needRefresh = latestChecks.values().stream()\n+                .filter(check -> check.status() == CheckStatus.IN_PROGRESS)\n+                .findAny();\n+        if (needRefresh.isPresent()) {\n+            resultsBody.append(\"\\n\");\n+            resultsBody.append(ExpirationTracker.expiresAfterMarker(Duration.ofSeconds(30)));\n+        }\n+\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/TestResults.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bots.pr;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.time.Duration;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class ExpirationTrackerTests {\n+    @Test\n+    void valid() {\n+        var text = \"This is a text. \" + ExpirationTracker.expiresAfterMarker(Duration.ofHours(10)) + \". Indeed.\";\n+        assertFalse(ExpirationTracker.hasExpired(text));\n+    }\n+\n+    @Test\n+    void expired() throws InterruptedException {\n+        var text = \"This is a text. \" + ExpirationTracker.expiresAfterMarker(Duration.ofMillis(1)) + \". Indeed.\";\n+        Thread.sleep(10);\n+        assertTrue(ExpirationTracker.hasExpired(text));\n+    }\n+\n+    @Test\n+    void multipleValid() {\n+        var text = \"This is a text. \" + ExpirationTracker.expiresAfterMarker(Duration.ofHours(10)) + \". Indeed.\" +\n+                \"\\n\" + ExpirationTracker.expiresAfterMarker(Duration.ofDays(2));\n+        assertFalse(ExpirationTracker.hasExpired(text));\n+    }\n+\n+    @Test\n+    void mixed() throws InterruptedException {\n+        var text = ExpirationTracker.expiresAfterMarker(Duration.ofDays(3)) + \"\\n\" +\n+                \"This is a text. \" + ExpirationTracker.expiresAfterMarker(Duration.ofMillis(1)) + \". Indeed.\" +\n+                \"\\n\" + ExpirationTracker.expiresAfterMarker(Duration.ofDays(2));\n+        Thread.sleep(10);\n+        assertTrue(ExpirationTracker.hasExpired(text));\n+    }\n+}\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/ExpirationTrackerTests.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"},{"patch":"@@ -155,1 +155,1 @@\n-        assertEquals(\"### Testing\\n\" +\n+        assertTrue(summary.get().strip().startsWith(\"### Testing\\n\" +\n@@ -159,1 +159,2 @@\n-                             \"| Build \/ test | ✔️ (1\/1 passed) | ⏳ (1\/1 running) |\", summary.get().strip());\n+                             \"| Build \/ test | ✔️ (1\/1 passed) | ⏳ (1\/1 running) |\"));\n+        assertTrue(summary.get().strip().contains(\"<!-- Data expires\"));\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/TestResultsTests.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}