{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+import java.util.stream.Collectors;\n@@ -36,1 +37,2 @@\n-    private static final Pattern argumentPattern = Pattern.compile(\"(?:(add|remove)\\\\s+)?((?:[A-Za-z0-9_@.-]+[\\\\s,]*)+)\");\n+    private static final Pattern argumentPattern = Pattern.compile(\"(?:(add|remove)\\\\s+)((?:[A-Za-z0-9_@.-]+[\\\\s,]*)+)\");\n+    private static final Pattern shortArgumentPattern = Pattern.compile(\"((?:[-+]?[A-Za-z0-9_@.-]+[\\\\s,]*)+)\");\n@@ -48,2 +50,4 @@\n-        reply.println(\"Usage: `\/\" + commandName + \"` <add|remove> [label[, label, ...]]` where `label` is an additional classification that should \" +\n-                              \"be applied to this PR. These labels are valid:\");\n+        reply.println(\"Usage: `\/\" + commandName + \" <add|remove> [label[, label, ...]]` \" +\n+                      \"or `\/\" + commandName + \" [<+|->label[, <+|->label, ...]]` \" +\n+                      \"where `label` is an additional classification that should \" +\n+                      \"be applied to this PR. These labels are valid:\");\n@@ -61,1 +65,2 @@\n-        if (!argumentMatcher.matches()) {\n+        var shortArgumentMatcher = shortArgumentPattern.matcher(command.args());\n+        if (!argumentMatcher.matches() && !shortArgumentMatcher.matches()) {\n@@ -65,0 +70,1 @@\n+        var currentLabels = new HashSet<>(pr.labelNames());\n@@ -66,7 +72,5 @@\n-        var labels = argumentMatcher.group(2).split(\"[\\\\s,]+\");\n-        for (int i = 0; i < labels.length; ++i) {\n-            var label = labels[i];\n-            var ignoredSuffixMatcher = ignoredSuffixes.matcher(label);\n-            if (ignoredSuffixMatcher.matches()) {\n-                label = ignoredSuffixMatcher.group(1);\n-                labels[i] = label;\n+        if (argumentMatcher.matches()) {\n+            var labels =  Arrays.stream(argumentMatcher.group(2).split(\"[\\\\s,]+\")).collect(Collectors.toList());\n+            if (labels.size() == 0) {\n+                showHelp(bot.labelConfiguration(), reply);\n+                return;\n@@ -74,3 +78,3 @@\n-            if (!bot.labelConfiguration().allowed().contains(label)) {\n-                reply.println(\"The label `\" + label + \"` is not a valid label. These labels are valid:\");\n-                bot.labelConfiguration().allowed().forEach(l -> reply.println(\" * `\" + l + \"`\"));\n+            var invalidLabels = verifyLabels(labels, bot);\n+            if (!invalidLabels.isEmpty()) {\n+                printInvalidLabels(invalidLabels, bot, reply);\n@@ -79,3 +83,5 @@\n-        }\n-        if (labels.length == 0) {\n-            showHelp(bot.labelConfiguration(), reply);\n+            if (argumentMatcher.group(1).equals(\"add\")) {\n+                addLabels(labels, currentLabels, pr, reply);\n+            } else if (argumentMatcher.group(1).equals(\"remove\")) {\n+                removeLabels(labels, currentLabels, pr, reply);\n+            }\n@@ -84,10 +90,7 @@\n-        var currentLabels = new HashSet<>(pr.labelNames());\n-        if (argumentMatcher.group(1) == null || argumentMatcher.group(1).equals(\"add\")) {\n-            for (var label : labels) {\n-                if (!currentLabels.contains(label)) {\n-                    pr.addLabel(label);\n-                    reply.println(LabelTracker.addLabelMarker(label));\n-                    reply.println(\"The `\" + label + \"` label was successfully added.\");\n-                } else {\n-                    reply.println(\"The `\" + label + \"` label was already applied.\");\n-                }\n+\n+        if (shortArgumentMatcher.matches()) {\n+            var labels = Arrays.stream(shortArgumentMatcher.group(1).split(\"[\\\\s,]+\")).collect(Collectors.toList());\n+            if (labels.size() == 0 || \"add\".equals(labels.get(0)) || \"remove\".equals(labels.get(0))) {\n+                \/\/ The comparison of the `add and `remove` is to solve this situation: `\/label add +label1, -label2`.\n+                showHelp(bot.labelConfiguration(), reply);\n+                return;\n@@ -95,6 +98,7 @@\n-        } else if (argumentMatcher.group(1).equals(\"remove\")) {\n-            for (var label : labels) {\n-                if (currentLabels.contains(label)) {\n-                    pr.removeLabel(label);\n-                    reply.println(LabelTracker.removeLabelMarker(label));\n-                    reply.println(\"The `\" + label + \"` label was successfully removed.\");\n+            var labelsToAdd = new ArrayList<String>();\n+            var labelsToRemove = new ArrayList<String>();\n+            labels.forEach(label -> {\n+                if (label.startsWith(\"-\")) {\n+                    labelsToRemove.add(label.substring(1).strip());\n+                } else if (label.startsWith(\"+\")){\n+                    labelsToAdd.add(label.substring(1).strip());\n@@ -102,1 +106,1 @@\n-                    reply.println(\"The `\" + label + \"` label was not set.\");\n+                    labelsToAdd.add(label.strip());\n@@ -104,0 +108,60 @@\n+            });\n+\n+            var invalidLabels = verifyLabels(labelsToAdd, bot);\n+            invalidLabels.addAll(verifyLabels(labelsToRemove, bot));\n+            if (!invalidLabels.isEmpty()) {\n+                printInvalidLabels(invalidLabels, bot, reply);\n+                return;\n+            }\n+\n+            addLabels(labelsToAdd, currentLabels, pr, reply);\n+            removeLabels(labelsToRemove, currentLabels, pr, reply);\n+        }\n+    }\n+\n+    private void printInvalidLabels(List<String> invalidLabels, PullRequestBot bot, PrintWriter reply) {\n+        reply.println(\"\"); \/\/ Intentionally blank line.\n+        invalidLabels.forEach(label -> reply.println(\"The label `\" + label + \"` is not a valid label.\"));\n+        reply.println(\"These labels are valid:\");\n+        bot.labelConfiguration().allowed().forEach(l -> reply.println(\" * `\" + l + \"`\"));\n+    }\n+\n+    \/**\n+     * Verify whether the labels are valid, return the invalid labels.\n+     *\/\n+    private List<String> verifyLabels(List<String> labels, PullRequestBot bot) {\n+        List<String> invalidLabels = new ArrayList<>();\n+        for (int i = 0; i < labels.size(); ++i) {\n+            var label = labels.get(i);\n+            var ignoredSuffixMatcher = ignoredSuffixes.matcher(label);\n+            if (ignoredSuffixMatcher.matches()) {\n+                label = ignoredSuffixMatcher.group(1);\n+                labels.set(i, label);\n+            }\n+            if (!bot.labelConfiguration().allowed().contains(label)) {\n+                invalidLabels.add(label);\n+            }\n+        }\n+        return invalidLabels;\n+    }\n+\n+    private void addLabels(List<String> labelsToAdd,Set<String> currentLabels, PullRequest pr, PrintWriter reply) {\n+        for (var label : labelsToAdd) {\n+            if (!currentLabels.contains(label)) {\n+                pr.addLabel(label);\n+                reply.println(LabelTracker.addLabelMarker(label));\n+                reply.println(\"The `\" + label + \"` label was successfully added.\");\n+            } else {\n+                reply.println(\"The `\" + label + \"` label was already applied.\");\n+            }\n+        }\n+    }\n+\n+    private void removeLabels(List<String> labelsToRemove,Set<String> currentLabels, PullRequest pr, PrintWriter reply) {\n+        for (var label : labelsToRemove) {\n+            if (currentLabels.contains(label)) {\n+                pr.removeLabel(label);\n+                reply.println(LabelTracker.removeLabelMarker(label));\n+                reply.println(\"The `\" + label + \"` label was successfully removed.\");\n+            } else {\n+                reply.println(\"The `\" + label + \"` label was not set.\");\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/LabelCommand.java","additions":99,"deletions":35,"binary":false,"changes":134,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -468,0 +468,118 @@\n+\n+    @Test\n+    void shortArgument(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var integrator = credentials.getHostedRepository();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addReviewer(integrator.forge().currentUser().id())\n+                    .addCommitter(author.forge().currentUser().id());\n+            var labelConfiguration = LabelConfigurationJson.builder()\n+                    .addMatchers(\"1\", List.of(Pattern.compile(\"cpp$\")))\n+                    .addMatchers(\"2\", List.of(Pattern.compile(\"hpp$\")))\n+                    .addGroup(\"group\", List.of(\"1\", \"2\"))\n+                    .addExtra(\"extra\")\n+                    .build();\n+            var prBot = PullRequestBot.newBuilder()\n+                    .repo(integrator)\n+                    .censusRepo(censusBuilder.build())\n+                    .labelConfiguration(labelConfiguration)\n+                    .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"123: This is a pull request\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+\n+            \/\/ Add a label without `+`\n+            pr.addComment(\"\/label 1\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+\n+            \/\/ The bot should reply with a success message\n+            assertLastCommentContains(pr,\"The `1` label was successfully added.\");\n+            assertEquals(Set.of(\"1\", \"rfr\"), new HashSet<>(pr.labelNames()));\n+\n+            \/\/ Add a label without `+` and check that the alias works as well\n+            pr.addComment(\"\/cc 2\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+\n+            \/\/ The bot should reply with a success message\n+            assertLastCommentContains(pr,\"The `2` label was successfully added.\");\n+            assertEquals(Set.of(\"1\", \"2\", \"rfr\"), new HashSet<>(pr.labelNames()));\n+\n+            \/\/ Remove a label with `-`\n+            pr.addComment(\"\/label -2\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+\n+            \/\/ The bot should reply with a success message\n+            assertLastCommentContains(pr,\"The `2` label was successfully removed.\");\n+            assertEquals(Set.of(\"1\", \"rfr\"), new HashSet<>(pr.labelNames()));\n+\n+            \/\/ Add a label with `+`\n+            pr.addComment(\"\/label +group\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+\n+            \/\/ The bot should reply with a success message\n+            assertLastCommentContains(pr,\"The `group` label was successfully added.\");\n+            assertEquals(Set.of(\"1\", \"rfr\", \"group\"), new HashSet<>(pr.labelNames()));\n+\n+            \/\/ Mixed `+\/-` labels\n+            pr.addComment(\"\/label -1,+2,-group\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+\n+            \/\/ The bot should reply with the success messages\n+            assertLastCommentContains(pr,\"The `1` label was successfully removed.\");\n+            assertLastCommentContains(pr,\"The `2` label was successfully added.\");\n+            assertLastCommentContains(pr,\"The `group` label was successfully removed.\");\n+            assertEquals(Set.of(\"2\", \"rfr\"), new HashSet<>(pr.labelNames()));\n+\n+            \/\/ Mixed `+\/-` labels again and check that the alias works as well\n+            pr.addComment(\"\/label group, +1, -2\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+\n+            \/\/ The bot should reply with the success messages\n+            assertLastCommentContains(pr,\"The `group` label was successfully added.\");\n+            assertLastCommentContains(pr,\"The `1` label was successfully added.\");\n+            assertLastCommentContains(pr,\"The `2` label was successfully removed.\");\n+            assertEquals(Set.of(\"1\", \"rfr\", \"group\"), new HashSet<>(pr.labelNames()));\n+\n+            \/\/ Mixed `+\/-` labels and intentional whitespace.\n+            pr.addComment(\"\/label - 1, + 2, - group\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+\n+            \/\/ The bot should reply with a help message\n+            assertLastCommentContains(pr,\"Usage: `\/label\");\n+            assertEquals(Set.of(\"1\", \"rfr\", \"group\"), new HashSet<>(pr.labelNames()));\n+\n+            \/\/ Mixed normal and short labels\n+            pr.addComment(\"\/label add +2, -group\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+\n+            \/\/ The bot should reply with a help message\n+            assertLastCommentContains(pr,\"Usage: `\/label\");\n+            assertEquals(Set.of(\"1\", \"rfr\", \"group\"), new HashSet<>(pr.labelNames()));\n+\n+            \/\/ Check unknown labels\n+            pr.addComment(\"\/label +unknown1, -unknown2, unknown3\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+\n+            \/\/ The bot should reply with a failure message\n+            assertLastCommentContains(pr,\"The label `unknown1` is not a valid label\");\n+            assertLastCommentContains(pr,\"The label `unknown2` is not a valid label\");\n+            assertLastCommentContains(pr,\"The label `unknown3` is not a valid label\");\n+            assertLastCommentContains(pr,\"* `1`\");\n+            assertLastCommentContains(pr,\"* `group`\");\n+            assertLastCommentContains(pr,\"* `extra`\");\n+            assertEquals(Set.of(\"1\", \"rfr\", \"group\"), new HashSet<>(pr.labelNames()));\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/LabelTests.java","additions":119,"deletions":1,"binary":false,"changes":120,"status":"modified"}]}