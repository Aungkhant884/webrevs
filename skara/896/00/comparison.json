{"files":[{"patch":"@@ -31,1 +31,1 @@\n-import org.openjdk.skara.vcs.Repository;\n+import org.openjdk.skara.vcs.*;\n@@ -78,0 +78,8 @@\n+        Hash hash;\n+        try {\n+            localRepo.add(localRepo.root().resolve(\".\"));\n+            hash = localRepo.commit(message, bot.emailAddress().fullName().orElseThrow(), bot.emailAddress().address());\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+\n@@ -80,9 +88,0 @@\n-                var localHead = localRepo.head();\n-                localRepo.add(localRepo.root().resolve(\".\"));\n-                var hash = localRepo.commit(message, bot.emailAddress().fullName().orElseThrow(), bot.emailAddress().address());\n-                var remoteHead = localRepo.fetch(bot.archiveRepo().url(), bot.archiveRef(), false);\n-                if (!localHead.equals(remoteHead)) {\n-                    log.info(\"Remote head has changed - attempting a rebase\");\n-                    localRepo.rebase(remoteHead, bot.emailAddress().fullName().orElseThrow(), bot.emailAddress().address());\n-                    hash = localRepo.head();\n-                }\n@@ -92,0 +91,10 @@\n+                log.info(\"Push to archive failed: \" + e);\n+                try {\n+                    var remoteHead = localRepo.fetch(bot.archiveRepo().url(), bot.archiveRef(), false);\n+                    localRepo.rebase(remoteHead, bot.emailAddress().fullName().orElseThrow(), bot.emailAddress().address());\n+                    hash = localRepo.head();\n+                    log.info(\"Rebase successful -  new hash: \" + hash);\n+                } catch (IOException e2) {\n+                    throw new UncheckedIOException(e2);\n+                }\n+\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/ArchiveWorkItem.java","additions":19,"deletions":10,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-import java.io.IOException;\n+import java.io.*;\n@@ -3103,0 +3103,89 @@\n+\n+    @Test\n+    void rebaseOnRetry(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory();\n+             var archiveFolder = new TemporaryDirectory();\n+             var webrevFolder = new TemporaryDirectory();\n+             var listServer = new TestMailmanServer();\n+             var webrevServer = new TestWebrevServer()) {\n+            var author = credentials.getHostedRepository();\n+            var archive = credentials.getHostedRepository();\n+            var ignored = credentials.getHostedRepository();\n+            var listAddress = EmailAddress.parse(listServer.createList(\"test\"));\n+            var censusBuilder = credentials.getCensusBuilder()\n+                                           .addAuthor(author.forge().currentUser().id());\n+            var from = EmailAddress.from(\"test\", \"test@test.mail\");\n+            var mlBot = MailingListBridgeBot.newBuilder()\n+                                            .from(from)\n+                                            .repo(author)\n+                                            .archive(archive)\n+                                            .censusRepo(censusBuilder.build())\n+                                            .lists(List.of(new MailingListConfiguration(listAddress, Set.of())))\n+                                            .ignoredUsers(Set.of(ignored.forge().currentUser().username()))\n+                                            .ignoredComments(Set.of())\n+                                            .listArchive(listServer.getArchive())\n+                                            .smtpServer(listServer.getSMTP())\n+                                            .webrevStorageHTMLRepository(archive)\n+                                            .webrevStorageRef(\"webrev\")\n+                                            .webrevStorageBase(Path.of(\"test\"))\n+                                            .webrevStorageBaseUri(webrevServer.uri())\n+                                            .readyLabels(Set.of(\"rfr\"))\n+                                            .issueTracker(URIBuilder.base(\"http:\/\/issues.test\/browse\/\").build())\n+                                            .headers(Map.of(\"Extra1\", \"val1\", \"Extra2\", \"val2\"))\n+                                            .sendInterval(Duration.ZERO)\n+                                            .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+            localRepo.push(masterHash, archive.url(), \"webrev\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, \"A simple change\",\n+                                                               \"Change msg\\n\\nWith several lines\");\n+            localRepo.push(editHash, author.url(), \"edit\", true);\n+            var pr = credentials.createPullRequest(archive, \"master\", \"edit\", \"1234: This is a pull request\");\n+\n+            \/\/ Flag it as ready for review\n+            pr.setBody(\"This should now be ready\");\n+            pr.addLabel(\"rfr\");\n+\n+            \/\/ The archive should not yet contain an entry\n+            var archiveRepo = Repository.materialize(archiveFolder.path(), archive.url(), \"master\");\n+\n+            \/\/ Interfere while creating\n+            webrevServer.setHandleCallback(uri -> {\n+                try {\n+                    var unrelatedFile = archiveRepo.root().resolve(\"unrelated.txt\");\n+                    if (!Files.exists(unrelatedFile)) {\n+                        Files.writeString(unrelatedFile, \"Unrelated\");\n+                        archiveRepo.add(unrelatedFile);\n+                        var unrelatedHash = archiveRepo.commit(\"Unrelated\", \"duke\", \"duke@openjdk.org\");\n+                        archiveRepo.push(unrelatedHash, archive.url(), \"master\");\n+                    }\n+                } catch (IOException e) {\n+                    throw new UncheckedIOException(e);\n+                }\n+            });\n+\n+            \/\/ Run another archive pass\n+            TestBotRunner.runPeriodicItems(mlBot);\n+\n+            \/\/ The archive should now contain an entry\n+            Repository.materialize(archiveFolder.path(), archive.url(), \"master\");\n+            assertTrue(archiveContains(archiveFolder.path(), \"This is a pull request\"));\n+            assertTrue(archiveContains(archiveFolder.path(), \"This should now be ready\"));\n+            assertTrue(archiveContains(archiveFolder.path(), \"Patch:\"));\n+            assertTrue(archiveContains(archiveFolder.path(), \"Changes:\"));\n+            assertTrue(archiveContains(archiveFolder.path(), \"Webrev:\"));\n+            assertTrue(archiveContains(archiveFolder.path(), webrevServer.uri().toString()));\n+            assertTrue(archiveContains(archiveFolder.path(), pr.id() + \"\/00\"));\n+            assertTrue(archiveContains(archiveFolder.path(), \"Issue:\"));\n+            assertTrue(archiveContains(archiveFolder.path(), \"http:\/\/issues.test\/browse\/TSTPRJ-1234\"));\n+            assertTrue(archiveContains(archiveFolder.path(), \"Fetch:\"));\n+            assertTrue(archiveContains(archiveFolder.path(), \"^ - Change msg\"));\n+            assertFalse(archiveContains(archiveFolder.path(), \"With several lines\"));\n+        }\n+    }\n","filename":"bots\/mlbridge\/src\/test\/java\/org\/openjdk\/skara\/bots\/mlbridge\/MailingListBridgeBotTests.java","additions":90,"deletions":1,"binary":false,"changes":91,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.util.function.Consumer;\n@@ -36,0 +37,1 @@\n+    private Consumer<URI> handleCallback = null;\n@@ -41,0 +43,4 @@\n+            if (handleCallback != null) {\n+                handleCallback.accept(exchange.getRequestURI());\n+            }\n+\n@@ -76,0 +82,7 @@\n+    public void setHandleCallback(Consumer<URI> callback) {\n+        if (handleCallback != null) {\n+            throw new IllegalStateException(\"Can only set callback once\");\n+        }\n+        handleCallback = callback;\n+    }\n+\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestWebrevServer.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"}]}