{"files":[{"patch":"@@ -915,1 +915,7 @@\n-            if (!localHash.equals(baseHash)) {\n+            if (localHash.equals(baseHash)) {\n+                if (additionalErrors.isEmpty()) {\n+                    additionalErrors = List.of(\"This PR contains no changes\");\n+                }\n+            } else if (localHash.equals(PullRequestUtils.targetHash(pr, localRepo))) {\n+                additionalErrors = List.of(\"This PR only contains changes already present in the target\");\n+            } else {\n@@ -920,4 +926,0 @@\n-            } else {\n-                if (additionalErrors.isEmpty()) {\n-                    additionalErrors = List.of(\"This PR contains no changes\");\n-                }\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import org.openjdk.skara.vcs.Repository;\n@@ -232,0 +233,13 @@\n+                try {\n+                    var localRepo = materializeLocalRepo(scratchPath, hostedRepositoryPool);\n+                    if (localRepo.isAncestor(hash, pr.headHash())) {\n+                        var text = \"<!-- backport error -->\\n\" +\n+                                \":warning: @\" + pr.author().username() + \" the given backport hash `\" + hash.hex() +\n+                                \"` is an ancestor of your proposed change. Please update the title with the hash for\" +\n+                                \" the change you are backporting.\";\n+                        addBackportErrorComment(text, comments);\n+                        return List.of();\n+                    }\n+                } catch (IOException e) {\n+                    throw new UncheckedIOException(e);\n+                }\n@@ -242,1 +256,1 @@\n-                        pr.addComment(text);\n+                        addBackportErrorComment(text, comments);\n@@ -253,1 +267,1 @@\n-                        pr.addComment(text);\n+                        addBackportErrorComment(text, comments);\n@@ -280,11 +294,4 @@\n-                    var isErrorPresent = pr.comments()\n-                                           .stream()\n-                                           .filter(c -> c.author().equals(botUser))\n-                                           .flatMap(c -> Stream.of(c.body().split(\"\\n\")))\n-                                           .anyMatch(l -> l.equals(\"<!-- backport error -->\"));\n-                    if (!isErrorPresent) {\n-                        var text = \"<!-- backport error -->\\n\" +\n-                                   \":warning: @\" + pr.author().username() + \" could not find any commit with hash `\" +\n-                                   hash.hex() + \"`. Please update the title with the hash for an existing commit.\";\n-                        pr.addComment(text);\n-                    }\n+                    var text = \"<!-- backport error -->\\n\" +\n+                            \":warning: @\" + pr.author().username() + \" could not find any commit with hash `\" +\n+                            hash.hex() + \"`. Please update the title with the hash for an existing commit.\";\n+                    addBackportErrorComment(text, comments);\n@@ -301,2 +308,1 @@\n-                var localRepoPath = scratchPath.resolve(\"pr\").resolve(\"check\").resolve(pr.repository().name());\n-                var localRepo = PullRequestUtils.materialize(hostedRepositoryPool, pr, localRepoPath);\n+                Repository localRepo = materializeLocalRepo(scratchPath, hostedRepositoryPool);\n@@ -322,0 +328,23 @@\n+    \/**\n+     * Only adds comment if not already present\n+     *\/\n+    private void addBackportErrorComment(String text, List<Comment> comments) {\n+        var botUser = pr.repository().forge().currentUser();\n+        if (comments.stream()\n+                .filter(c -> c.author().equals(botUser))\n+                .noneMatch((c -> c.body().equals(text)))) {\n+            pr.addComment(text);\n+        }\n+    }\n+\n+    \/\/ Lazily initiated\n+    private Repository localRepo;\n+\n+    private Repository materializeLocalRepo(Path scratchPath, HostedRepositoryPool hostedRepositoryPool) throws IOException {\n+        if (localRepo == null) {\n+            var localRepoPath = scratchPath.resolve(\"pr\").resolve(\"check\").resolve(pr.repository().name());\n+            localRepo = PullRequestUtils.materialize(hostedRepositoryPool, pr, localRepoPath);\n+        }\n+        return localRepo;\n+    }\n+\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckWorkItem.java","additions":44,"deletions":15,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -390,0 +390,141 @@\n+    \/**\n+     * Tests that setting a backport title to points to the head commit of the PR\n+     * itself is handled as an error.\n+     *\/\n+    @Test\n+    void prHeadCommit(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory();\n+             var pushedFolder = new TemporaryDirectory()) {\n+\n+            var author = credentials.getHostedRepository();\n+            var integrator = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var issues = credentials.getIssueProject();\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addCommitter(author.forge().currentUser().id())\n+                    .addReviewer(integrator.forge().currentUser().id())\n+                    .addReviewer(reviewer.forge().currentUser().id());\n+            var bot = PullRequestBot.newBuilder()\n+                    .repo(integrator)\n+                    .censusRepo(censusBuilder.build())\n+                    .issueProject(issues)\n+                    .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            var releaseBranch = localRepo.branch(masterHash, \"release\");\n+            localRepo.checkout(releaseBranch);\n+            var newFile = localRepo.root().resolve(\"a_new_file.txt\");\n+            Files.writeString(newFile, \"hello\");\n+            localRepo.add(newFile);\n+            var issue1 = credentials.createIssue(issues, \"An issue\");\n+            var issue1Number = issue1.id().split(\"-\")[1];\n+            var originalMessage = issue1Number + \": An issue\\n\" +\n+                    \"\\n\" +\n+                    \"Reviewed-by: integrationreviewer2\";\n+            var releaseHash = localRepo.commit(originalMessage, \"integrationcommitter1\", \"integrationcommitter1@openjdk.java.net\");\n+            localRepo.push(releaseHash, author.url(), \"refs\/heads\/release\", true);\n+\n+            \/\/ \"backport\" the new file to the master branch\n+            localRepo.checkout(localRepo.defaultBranch());\n+            var editBranch = localRepo.branch(masterHash, \"edit\");\n+            localRepo.checkout(editBranch);\n+            var newFile2 = localRepo.root().resolve(\"a_new_file.txt\");\n+            Files.writeString(newFile2, \"hello\");\n+            localRepo.add(newFile2);\n+            var editHash = localRepo.commit(\"Backport\", \"duke\", \"duke@openjdk.java.net\");\n+            localRepo.push(editHash, author.url(), \"refs\/heads\/edit\", true);\n+            \/\/ Create the backport with the hash from the PR branch\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"Backport \" + editHash.hex());\n+\n+            \/\/ The bot should detect the bad hash\n+            \/\/ The bot should reply with a backport error\n+            TestBotRunner.runPeriodicItems(bot);\n+            assertLastCommentContains(pr, \"<!-- backport error -->\");\n+            assertLastCommentContains(pr, \":warning:\");\n+            assertLastCommentContains(pr, \"the given backport hash\");\n+            assertLastCommentContains(pr, \"is an ancestor of your proposed change.\");\n+            assertFalse(pr.labelNames().contains(\"backport\"));\n+\n+            \/\/ Re-running the bot should not cause any more error comments\n+            TestBotRunner.runPeriodicItems(bot);\n+            assertEquals(1, pr.comments().size());\n+        }\n+    }\n+\n+    \/**\n+     * Tests that setting a backport title to points to an ancestor of the head commit of the PR\n+     * itself is handled as an error.\n+     *\/\n+    @Test\n+    void prAncestorOfHeadCommit(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory();\n+             var pushedFolder = new TemporaryDirectory()) {\n+\n+            var author = credentials.getHostedRepository();\n+            var integrator = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var issues = credentials.getIssueProject();\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addCommitter(author.forge().currentUser().id())\n+                    .addReviewer(integrator.forge().currentUser().id())\n+                    .addReviewer(reviewer.forge().currentUser().id());\n+            var bot = PullRequestBot.newBuilder()\n+                    .repo(integrator)\n+                    .censusRepo(censusBuilder.build())\n+                    .issueProject(issues)\n+                    .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            var releaseBranch = localRepo.branch(masterHash, \"release\");\n+            localRepo.checkout(releaseBranch);\n+            var newFile = localRepo.root().resolve(\"a_new_file.txt\");\n+            Files.writeString(newFile, \"hello\");\n+            localRepo.add(newFile);\n+            var issue1 = credentials.createIssue(issues, \"An issue\");\n+            var issue1Number = issue1.id().split(\"-\")[1];\n+            var originalMessage = issue1Number + \": An issue\\n\" +\n+                    \"\\n\" +\n+                    \"Reviewed-by: integrationreviewer2\";\n+            var releaseHash = localRepo.commit(originalMessage, \"integrationcommitter1\", \"integrationcommitter1@openjdk.java.net\");\n+            localRepo.push(releaseHash, author.url(), \"refs\/heads\/release\", true);\n+\n+            \/\/ \"backport\" the new file to the master branch\n+            localRepo.checkout(localRepo.defaultBranch());\n+            var editBranch = localRepo.branch(masterHash, \"edit\");\n+            localRepo.checkout(editBranch);\n+            var newFile2 = localRepo.root().resolve(\"a_new_file.txt\");\n+            Files.writeString(newFile2, \"hello\");\n+            localRepo.add(newFile2);\n+            var editHash = localRepo.commit(\"Backport\", \"duke\", \"duke@openjdk.java.net\");\n+            localRepo.push(editHash, author.url(), \"refs\/heads\/edit\", true);\n+            \/\/ Add another change on top of the backport\n+            var editHash2 = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash2, author.url(), \"refs\/heads\/edit\", true);\n+            \/\/ Create the backport with the hash from the PR branch\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"Backport \" + editHash.hex());\n+\n+            \/\/ The bot should detect the bad hash\n+            \/\/ The bot should reply with a backport error\n+            TestBotRunner.runPeriodicItems(bot);\n+            assertLastCommentContains(pr, \"<!-- backport error -->\");\n+            assertLastCommentContains(pr, \":warning:\");\n+            assertLastCommentContains(pr, \"the given backport hash\");\n+            assertLastCommentContains(pr, \"is an ancestor of your proposed change.\");\n+            assertFalse(pr.labelNames().contains(\"backport\"));\n+\n+            \/\/ Re-running the bot should not cause any more error comments\n+            TestBotRunner.runPeriodicItems(bot);\n+            assertEquals(1, pr.comments().size());\n+        }\n+    }\n+\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/BackportTests.java","additions":141,"deletions":0,"binary":false,"changes":141,"status":"modified"},{"patch":"@@ -1376,0 +1376,40 @@\n+    @Test\n+    void redundantCommit(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addAuthor(author.forge().currentUser().id())\n+                    .addReviewer(reviewer.forge().currentUser().id());\n+            var checkBot = PullRequestBot.newBuilder().repo(author).censusRepo(censusBuilder.build()).build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Make the same change with different messages in master and edit\n+            String identicalChangeBody = \"identical change\";\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, identicalChangeBody, \"edit message\");\n+            localRepo.push(editHash, author.url(), \"edit\", true);\n+            localRepo.checkout(masterHash, true);\n+            masterHash = CheckableRepository.appendAndCommit(localRepo, identicalChangeBody, \"master message\");\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Create PR\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"This is a pull request\");\n+\n+            \/\/ Check the status\n+            TestBotRunner.runPeriodicItems(checkBot);\n+\n+            \/\/ Verify that the check failed\n+            var checks = pr.checks(editHash);\n+            assertEquals(1, checks.size());\n+            var check = checks.get(\"jcheck\");\n+            assertEquals(CheckStatus.FAILURE, check.status());\n+            assertEquals(\"- This PR only contains changes already present in the target\", check.summary().orElseThrow());\n+        }\n+    }\n+\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CheckTests.java","additions":40,"deletions":0,"binary":false,"changes":40,"status":"modified"}]}