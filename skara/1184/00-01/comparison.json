{"files":[{"patch":"@@ -915,1 +915,7 @@\n-            if (!localHash.equals(baseHash)) {\n+            if (localHash.equals(baseHash)) {\n+                if (additionalErrors.isEmpty()) {\n+                    additionalErrors = List.of(\"This PR contains no changes\");\n+                }\n+            } else if (localHash.equals(PullRequestUtils.targetHash(pr, localRepo))) {\n+                additionalErrors = List.of(\"This PR only contains changes already present in the target\");\n+            } else {\n@@ -920,4 +926,0 @@\n-            } else {\n-                if (additionalErrors.isEmpty()) {\n-                    additionalErrors = List.of(\"This PR contains no changes\");\n-                }\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import org.openjdk.skara.vcs.Repository;\n@@ -232,7 +233,12 @@\n-                if (pr.headHash().equals(hash)) {\n-                    var text = \"<!-- backport error -->\\n\" +\n-                            \":warning: @\" + pr.author().username() + \" the given backport hash `\" + hash.hex() +\n-                            \"` points to the head of your proposed change. Please update the title with the hash for\" +\n-                            \" the change you are backporting.\";\n-                    addBackportErrorComment(text, comments);\n-                    return List.of();\n+                try {\n+                    var localRepo = materializeLocalRepo(scratchPath, hostedRepositoryPool);\n+                    if (localRepo.isAncestor(hash, pr.headHash())) {\n+                        var text = \"<!-- backport error -->\\n\" +\n+                                \":warning: @\" + pr.author().username() + \" the given backport hash `\" + hash.hex() +\n+                                \"` is an ancestor of your proposed change. Please update the title with the hash for\" +\n+                                \" the change you are backporting.\";\n+                        addBackportErrorComment(text, comments);\n+                        return List.of();\n+                    }\n+                } catch (IOException e) {\n+                    throw new UncheckedIOException(e);\n@@ -302,2 +308,1 @@\n-                var localRepoPath = scratchPath.resolve(\"pr\").resolve(\"check\").resolve(pr.repository().name());\n-                var localRepo = PullRequestUtils.materialize(hostedRepositoryPool, pr, localRepoPath);\n+                Repository localRepo = materializeLocalRepo(scratchPath, hostedRepositoryPool);\n@@ -335,0 +340,11 @@\n+    \/\/ Lazily initiated\n+    private Repository localRepo;\n+\n+    private Repository materializeLocalRepo(Path scratchPath, HostedRepositoryPool hostedRepositoryPool) throws IOException {\n+        if (localRepo == null) {\n+            var localRepoPath = scratchPath.resolve(\"pr\").resolve(\"check\").resolve(pr.repository().name());\n+            localRepo = PullRequestUtils.materialize(hostedRepositoryPool, pr, localRepoPath);\n+        }\n+        return localRepo;\n+    }\n+\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckWorkItem.java","additions":25,"deletions":9,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -450,1 +450,1 @@\n-            assertLastCommentContains(pr, \"points to the head of your proposed change.\");\n+            assertLastCommentContains(pr, \"is an ancestor of your proposed change.\");\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/BackportTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1376,0 +1376,40 @@\n+    @Test\n+    void redundantCommit(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addAuthor(author.forge().currentUser().id())\n+                    .addReviewer(reviewer.forge().currentUser().id());\n+            var checkBot = PullRequestBot.newBuilder().repo(author).censusRepo(censusBuilder.build()).build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Make the same change with different messages in master and edit\n+            String identicalChangeBody = \"identical change\";\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, identicalChangeBody, \"edit message\");\n+            localRepo.push(editHash, author.url(), \"edit\", true);\n+            localRepo.checkout(masterHash, true);\n+            masterHash = CheckableRepository.appendAndCommit(localRepo, identicalChangeBody, \"master message\");\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Create PR\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"This is a pull request\");\n+\n+            \/\/ Check the status\n+            TestBotRunner.runPeriodicItems(checkBot);\n+\n+            \/\/ Verify that the check failed\n+            var checks = pr.checks(editHash);\n+            assertEquals(1, checks.size());\n+            var check = checks.get(\"jcheck\");\n+            assertEquals(CheckStatus.FAILURE, check.status());\n+            assertEquals(\"- This PR only contains changes already present in the target\", check.summary().orElseThrow());\n+        }\n+    }\n+\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CheckTests.java","additions":40,"deletions":0,"binary":false,"changes":40,"status":"modified"}]}