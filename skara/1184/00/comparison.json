{"files":[{"patch":"@@ -232,0 +232,8 @@\n+                if (pr.headHash().equals(hash)) {\n+                    var text = \"<!-- backport error -->\\n\" +\n+                            \":warning: @\" + pr.author().username() + \" the given backport hash `\" + hash.hex() +\n+                            \"` points to the head of your proposed change. Please update the title with the hash for\" +\n+                            \" the change you are backporting.\";\n+                    addBackportErrorComment(text, comments);\n+                    return List.of();\n+                }\n@@ -242,1 +250,1 @@\n-                        pr.addComment(text);\n+                        addBackportErrorComment(text, comments);\n@@ -253,1 +261,1 @@\n-                        pr.addComment(text);\n+                        addBackportErrorComment(text, comments);\n@@ -280,11 +288,4 @@\n-                    var isErrorPresent = pr.comments()\n-                                           .stream()\n-                                           .filter(c -> c.author().equals(botUser))\n-                                           .flatMap(c -> Stream.of(c.body().split(\"\\n\")))\n-                                           .anyMatch(l -> l.equals(\"<!-- backport error -->\"));\n-                    if (!isErrorPresent) {\n-                        var text = \"<!-- backport error -->\\n\" +\n-                                   \":warning: @\" + pr.author().username() + \" could not find any commit with hash `\" +\n-                                   hash.hex() + \"`. Please update the title with the hash for an existing commit.\";\n-                        pr.addComment(text);\n-                    }\n+                    var text = \"<!-- backport error -->\\n\" +\n+                            \":warning: @\" + pr.author().username() + \" could not find any commit with hash `\" +\n+                            hash.hex() + \"`. Please update the title with the hash for an existing commit.\";\n+                    addBackportErrorComment(text, comments);\n@@ -322,0 +323,12 @@\n+    \/**\n+     * Only adds comment if not already present\n+     *\/\n+    private void addBackportErrorComment(String text, List<Comment> comments) {\n+        var botUser = pr.repository().forge().currentUser();\n+        if (comments.stream()\n+                .filter(c -> c.author().equals(botUser))\n+                .noneMatch((c -> c.body().equals(text)))) {\n+            pr.addComment(text);\n+        }\n+    }\n+\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckWorkItem.java","additions":26,"deletions":13,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -390,0 +390,69 @@\n+    \/**\n+     * Tests that setting a backport title to points to the head commit of the PR\n+     * itself is handled as an error.\n+     *\/\n+    @Test\n+    void prHeadCommit(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory();\n+             var pushedFolder = new TemporaryDirectory()) {\n+\n+            var author = credentials.getHostedRepository();\n+            var integrator = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var issues = credentials.getIssueProject();\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addCommitter(author.forge().currentUser().id())\n+                    .addReviewer(integrator.forge().currentUser().id())\n+                    .addReviewer(reviewer.forge().currentUser().id());\n+            var bot = PullRequestBot.newBuilder()\n+                    .repo(integrator)\n+                    .censusRepo(censusBuilder.build())\n+                    .issueProject(issues)\n+                    .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            var releaseBranch = localRepo.branch(masterHash, \"release\");\n+            localRepo.checkout(releaseBranch);\n+            var newFile = localRepo.root().resolve(\"a_new_file.txt\");\n+            Files.writeString(newFile, \"hello\");\n+            localRepo.add(newFile);\n+            var issue1 = credentials.createIssue(issues, \"An issue\");\n+            var issue1Number = issue1.id().split(\"-\")[1];\n+            var originalMessage = issue1Number + \": An issue\\n\" +\n+                    \"\\n\" +\n+                    \"Reviewed-by: integrationreviewer2\";\n+            var releaseHash = localRepo.commit(originalMessage, \"integrationcommitter1\", \"integrationcommitter1@openjdk.java.net\");\n+            localRepo.push(releaseHash, author.url(), \"refs\/heads\/release\", true);\n+\n+            \/\/ \"backport\" the new file to the master branch\n+            localRepo.checkout(localRepo.defaultBranch());\n+            var editBranch = localRepo.branch(masterHash, \"edit\");\n+            localRepo.checkout(editBranch);\n+            var newFile2 = localRepo.root().resolve(\"a_new_file.txt\");\n+            Files.writeString(newFile2, \"hello\");\n+            localRepo.add(newFile2);\n+            var editHash = localRepo.commit(\"Backport\", \"duke\", \"duke@openjdk.java.net\");\n+            localRepo.push(editHash, author.url(), \"refs\/heads\/edit\", true);\n+            \/\/ Create the backport with the hash from the PR branch\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"Backport \" + editHash.hex());\n+\n+            \/\/ The bot should detect the bad hash\n+            \/\/ The bot should reply with a backport error\n+            TestBotRunner.runPeriodicItems(bot);\n+            assertLastCommentContains(pr, \"<!-- backport error -->\");\n+            assertLastCommentContains(pr, \":warning:\");\n+            assertLastCommentContains(pr, \"the given backport hash\");\n+            assertLastCommentContains(pr, \"points to the head of your proposed change.\");\n+            assertFalse(pr.labelNames().contains(\"backport\"));\n+\n+            \/\/ Re-running the bot should not cause any more error comments\n+            TestBotRunner.runPeriodicItems(bot);\n+            assertEquals(1, pr.comments().size());\n+        }\n+    }\n+\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/BackportTests.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"modified"}]}