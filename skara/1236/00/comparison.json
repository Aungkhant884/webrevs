{"files":[{"patch":"@@ -211,1 +211,2 @@\n-                        log.warning(\"Failed to retrieve information on issue \" + currentIssue.id());\n+                        ret.add(\"Failed to retrieve information on issue `\" + currentIssue.id() +\n+                                \"`. Please make sure it exists and is accessible.\");\n@@ -215,1 +216,2 @@\n-                    log.warning(\"Temporary failure when trying to retrieve information on issue \" + currentIssue.id());\n+                    ret.add(\"Failed to retrieve information on issue `\" + currentIssue.id() +\n+                            \"`. This may be a temporary failure and will be retried.\");\n@@ -490,1 +492,0 @@\n-                            progressBody.append(\"\\n\");\n@@ -496,1 +497,0 @@\n-                            progressBody.append(\"\\n\");\n@@ -503,1 +503,0 @@\n-                        progressBody.append(\"\\n\");\n@@ -506,0 +505,1 @@\n+                progressBody.append(\"\\n\");\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -189,3 +189,1 @@\n-            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"123: This is a pull request\");\n-\n-            var issue1 = credentials.createIssue(issues, \"First\");\n+            var issue1 = credentials.createIssue(issues, \"Main\");\n@@ -193,0 +191,2 @@\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", issue1Number + \": Main\");\n+\n@@ -195,0 +195,2 @@\n+            var issue3 = credentials.createIssue(issues, \"Third\");\n+            var issue3Number = Integer.parseInt(issue3.id().split(\"-\")[1]);\n@@ -197,1 +199,1 @@\n-            pr.addComment(\"\/solves \" + issue2Number);\n+            pr.addComment(\"\/solves \" + issue3Number);\n@@ -200,1 +202,1 @@\n-            assertLastCommentContains(pr, \": Second\");\n+            assertLastCommentContains(pr, \": Third\");\n@@ -203,1 +205,1 @@\n-            pr.addComment(\"\/solves delete \" + issue2Number);\n+            pr.addComment(\"\/solves delete \" + issue3Number);\n@@ -205,1 +207,1 @@\n-            assertLastCommentContains(pr, \"Removing additional issue from solves list: `\" + issue2Number + \"`\");\n+            assertLastCommentContains(pr, \"Removing additional issue from solves list: `\" + issue3Number + \"`\");\n@@ -208,1 +210,1 @@\n-            pr.addComment(\"\/issue \" + issue1.id() + \",\" + issue2Number);\n+            pr.addComment(\"\/issue \" + issue2.id() + \",\" + issue3Number);\n@@ -213,1 +215,0 @@\n-            assertLastCommentContains(pr, \": First\");\n@@ -215,0 +216,1 @@\n+            assertLastCommentContains(pr, \": Third\");\n@@ -217,1 +219,1 @@\n-            pr.addComment(\"\/issue remove \" + issue1.id());\n+            pr.addComment(\"\/issue remove \" + issue2.id());\n@@ -220,1 +222,1 @@\n-            assertLastCommentContains(pr, \"Removing additional issue from issue list: `\" + issue1Number + \"`\");\n+            assertLastCommentContains(pr, \"Removing additional issue from issue list: `\" + issue2Number + \"`\");\n@@ -234,3 +236,3 @@\n-            assertTrue(preview.contains(\"123: This is a pull request\"));\n-            assertTrue(preview.contains(issue2Number + \": Second\"));\n-            assertFalse(preview.contains(\"First\"));\n+            assertTrue(preview.contains(issue1Number + \": Main\"));\n+            assertTrue(preview.contains(issue3Number + \": Third\"));\n+            assertFalse(preview.contains(\"Second\"));\n@@ -254,2 +256,2 @@\n-            assertEquals(List.of(\"123: This is a pull request\",\n-                                 \"2: Second\",\n+            assertEquals(List.of(issue1Number + \": Main\",\n+                                 issue3Number + \": Third\",\n@@ -686,0 +688,48 @@\n+\n+    @Test\n+    void issueMissing(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var integrator = credentials.getHostedRepository();\n+            var issues = credentials.getIssueProject();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addReviewer(integrator.forge().currentUser().id())\n+                    .addCommitter(author.forge().currentUser().id());\n+            var prBot = PullRequestBot.newBuilder()\n+                    .repo(integrator)\n+                    .censusRepo(censusBuilder.build())\n+                    .issueProject(issues)\n+                    .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR with a non-existing issue ID\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"123: This is a PR\");\n+\n+            \/\/ Approve it as another user\n+            var approvalPr = integrator.pullRequest(pr.id());\n+            approvalPr.addReview(Review.Verdict.APPROVED, \"Approved\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            TestBotRunner.runPeriodicItems(prBot);\n+\n+            \/\/ There should be no commit preview message\n+            var previewComment = pr.comments().stream()\n+                    .map(Comment::body)\n+                    .filter(body -> body.contains(\"the commit message for the final commit will be\"))\n+                    .findFirst();\n+            assertEquals(Optional.empty(), previewComment, \"Preview comment should not have been posted\");\n+            \/\/ Body should contain integration blocker\n+            assertTrue(pr.body().contains(\"Integration blocker\"), \"Body does not report integration blocker\");\n+            assertTrue(pr.body().contains(\"Failed to retrieve information on issue `123`\"),\n+                    \"Body does not contain specific message\");\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/IssueTests.java","additions":66,"deletions":16,"binary":false,"changes":82,"status":"modified"}]}