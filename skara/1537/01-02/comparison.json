{"files":[{"patch":"@@ -70,0 +70,12 @@\n+\n+    public boolean needsApproval(String targetRef) {\n+        if (branchPrefixes.isEmpty()) {\n+            return true;\n+        }\n+        for (var branchPattern : branchPrefixes.keySet()) {\n+            if (branchPattern.matcher(targetRef).matches()) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/Approval.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -272,1 +272,1 @@\n-        if (approval != null) {\n+        if (approval != null && approval.needsApproval(pr.targetRef())) {\n@@ -701,1 +701,1 @@\n-                            if (approval != null) {\n+                            if (approval != null && approval.needsApproval(pr.targetRef())) {\n@@ -712,1 +712,1 @@\n-                                if (!status.isEmpty() && !status.isBlank()) {\n+                                if (!status.isEmpty()) {\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -182,1 +182,3 @@\n-                        issueData.append(String.join(\"\", issue.labelNames()));\n+                        if (bot.approval() != null && bot.approval().needsApproval(pr.targetRef())) {\n+                            issueData.append(String.join(\"\", issue.labelNames()));\n+                        }\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckWorkItem.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+        assertTrue(approval.needsApproval(\"master\"));\n@@ -43,0 +44,1 @@\n+        assertTrue(approval.needsApproval(\"master\"));\n@@ -53,0 +55,4 @@\n+        assertFalse(approval.needsApproval(\"master\"));\n+        assertTrue(approval.needsApproval(\"jdk20.0.1\"));\n+        assertTrue(approval.needsApproval(\"jdk20.0.2\"));\n+        assertFalse(approval.needsApproval(\"jdk20.0.3\"));\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/ApprovalTests.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import org.openjdk.skara.forge.Review;\n@@ -39,0 +40,1 @@\n+import java.util.regex.Pattern;\n@@ -298,1 +300,1 @@\n-    void maintainerApprovalInJBS(TestInfo testInfo) throws IOException {\n+    void maintainerApproval(TestInfo testInfo) throws IOException {\n@@ -347,0 +349,69 @@\n+\n+    @Test\n+    void maintainerApprovalWithBranchPattern(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var bot = credentials.getHostedRepository();\n+            var issueProject = credentials.getIssueProject();\n+            var issue = issueProject.createIssue(\"This is an issue\", List.of(), Map.of());\n+            issue.setProperty(\"issuetype\", JSON.of(\"Bug\"));\n+            issue.setProperty(\"priority\", JSON.of(\"4\"));\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addReviewer(reviewer.forge().currentUser().id())\n+                    .addCommitter(author.forge().currentUser().id());\n+            Map<String, List<PRRecord>> issuePRMap = new HashMap<>();\n+            Approval approval = new Approval(\"\", \"-critical-request\", \"-critical-approved\", \"-critical-rejected\");\n+            approval.addBranchPrefix(Pattern.compile(\"jdk20.0.1\"), \"CPU23_04\");\n+            approval.addBranchPrefix(Pattern.compile(\"jdk20.0.2\"), \"CPU23_05\");\n+\n+            var prBot = PullRequestBot.newBuilder()\n+                    .repo(bot)\n+                    .issueProject(issueProject)\n+                    .censusRepo(censusBuilder.build())\n+                    .issuePRMap(issuePRMap)\n+                    .approval(approval)\n+                    .build();\n+            var issueBot = new IssueBot(issueProject, List.of(author), Map.of(bot.name(), prBot), issuePRMap);\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.authenticatedUrl(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.authenticatedUrl(), \"edit\", true);\n+            var otherHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(otherHash, author.authenticatedUrl(), \"jdk20.0.1\", true);\n+\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", issue.id() + \": This is an issue\");\n+\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertFalse(pr.store().labelNames().contains(\"ready\"));\n+            assertTrue(pr.store().labelNames().contains(\"rfr\"));\n+            assertFalse(pr.store().body().contains(\"[TEST-1](http:\/\/localhost\/project\/testTEST-1) needs maintainer approval\"));\n+\n+            var reviewerPr = reviewer.pullRequest(pr.id());\n+            reviewerPr.addReview(Review.Verdict.APPROVED, \"Looks good\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertTrue(pr.store().labelNames().contains(\"ready\"));\n+\n+            pr.setTargetRef(\"jdk20.0.1\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertFalse(pr.store().labelNames().contains(\"ready\"));\n+            assertTrue(pr.store().body().contains(\"[TEST-1](http:\/\/localhost\/project\/testTEST-1) needs maintainer approval\"));\n+\n+            issue.addLabel(\"CPU23_04-critical-request\");\n+            TestBotRunner.runPeriodicItems(issueBot);\n+            assertTrue(pr.store().body().contains(\"Requested\"));\n+\n+            issue.addLabel(\"CPU23_04-critical-approved\");\n+            TestBotRunner.runPeriodicItems(issueBot);\n+            assertTrue(pr.store().body().contains(\"Approved\"));\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/IssueBotTests.java","additions":72,"deletions":1,"binary":false,"changes":73,"status":"modified"}]}