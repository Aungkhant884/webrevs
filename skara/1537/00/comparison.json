{"files":[{"patch":"@@ -0,0 +1,70 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bots.pr;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.regex.Pattern;\n+\n+public class Approval {\n+    private final String prefix;\n+    private final String request;\n+    private final String approved;\n+    private final String rejected;\n+    private final Map<Pattern, String> branchPrefixes;\n+\n+    public Approval(String prefix, String request, String approved, String rejected) {\n+        this.prefix = prefix;\n+        this.request = request;\n+        this.approved = approved;\n+        this.rejected = rejected;\n+        this.branchPrefixes = new HashMap<>();\n+    }\n+\n+    public void addBranchPrefix(Pattern branchPattern, String prefix) {\n+        branchPrefixes.put(branchPattern, prefix);\n+    }\n+\n+    public String requestedLabel(String targetRef) {\n+        return prefixForRef(targetRef) + request;\n+    }\n+\n+    public String approvedLabel(String targetRef) {\n+        return prefixForRef(targetRef) + approved;\n+    }\n+\n+    public String rejectedLabel(String targetRef) {\n+        return prefixForRef(targetRef) + rejected;\n+    }\n+\n+    private String prefixForRef(String targetRef) {\n+        String prefix = this.prefix;\n+        for (var entry : branchPrefixes.entrySet()) {\n+            if (entry.getKey().matcher(targetRef).matches()) {\n+                prefix = entry.getValue();\n+                break;\n+            }\n+        }\n+        return prefix;\n+    }\n+}\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/Approval.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"added"},{"patch":"@@ -77,0 +77,1 @@\n+    private final Approval approval;\n@@ -83,1 +84,1 @@\n-                     boolean reviewMerge) throws IOException {\n+                     boolean reviewMerge, Approval approval) throws IOException {\n@@ -97,0 +98,1 @@\n+        this.approval = approval;\n@@ -106,2 +108,3 @@\n-                        List<Review> allReviews, List<Review> activeReviews, Set<String> labels, CensusInstance censusInstance,\n-                        boolean ignoreStaleReviews, Set<String> integrators, boolean reviewCleanBackport, boolean reviewMerge) throws IOException {\n+                                     List<Review> allReviews, List<Review> activeReviews, Set<String> labels, CensusInstance censusInstance,\n+                                     boolean ignoreStaleReviews, Set<String> integrators, boolean reviewCleanBackport, boolean reviewMerge,\n+                                     Approval approval) throws IOException {\n@@ -109,1 +112,1 @@\n-                ignoreStaleReviews, integrators, reviewCleanBackport, reviewMerge);\n+                ignoreStaleReviews, integrators, reviewCleanBackport, reviewMerge, approval);\n@@ -264,2 +267,3 @@\n-    private Map<String, Boolean> botSpecificProgresses(List<IssueTrackerIssue> csrIssueTrackerIssues,\n-            IssueTrackerIssue jepIssue, JdkVersion version) {\n+    private Map<String, Boolean> botSpecificProgresses(Map<Issue, Optional<IssueTrackerIssue>> regularIssuesMap,\n+                                                       List<IssueTrackerIssue> csrIssueTrackerIssues,\n+                                                       IssueTrackerIssue jepIssue, JdkVersion version) {\n@@ -268,0 +272,14 @@\n+        if (approval != null) {\n+            for (var issueOpt : regularIssuesMap.values()) {\n+                if (issueOpt.isPresent()) {\n+                    var issue = issueOpt.get();\n+                    var labelNames = issue.labelNames();\n+                    if (labelNames.contains(approval.approvedLabel(pr.targetRef()))) {\n+                        ret.put(\"[\" + issue.id() + \"](\" + issue.webUrl() + \") needs maintainer approval in JBS\", true);\n+                    } else {\n+                        ret.put(\"[\" + issue.id() + \"](\" + issue.webUrl() + \") needs maintainer approval in JBS\", false);\n+                    }\n+                }\n+            }\n+        }\n+\n@@ -680,4 +698,17 @@\n-                            if (issuePriority == null) {\n-                                progressBody.append(\")\");\n-                            } else {\n-                                progressBody.append(\" - P\").append(issuePriority.asString()).append(\")\");\n+                            if (issuePriority != null) {\n+                                progressBody.append(\" - P\").append(issuePriority.asString());\n+                            }\n+                            if (approval != null) {\n+                                String status = \"\";\n+                                String targetRef = pr.targetRef();\n+                                var labels = issueTrackerIssue.get().labelNames();\n+                                if (labels.contains(approval.rejectedLabel(targetRef))) {\n+                                    status = \"Rejected\";\n+                                } else if (labels.contains(approval.approvedLabel(targetRef))) {\n+                                    status = \"Approved\";\n+                                } else if (labels.contains(approval.requestedLabel(targetRef))) {\n+                                    status = \"Requested\";\n+                                }\n+                                if (!status.isEmpty() && !status.isBlank()) {\n+                                    progressBody.append(\" - \").append(status);\n+                                }\n@@ -685,0 +716,1 @@\n+                            progressBody.append(\")\");\n@@ -1251,1 +1283,1 @@\n-                additionalProgresses = botSpecificProgresses(csrIssues, jepIssue, version);\n+                additionalProgresses = botSpecificProgresses(regularIssuesMap, csrIssues, jepIssue, version);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":43,"deletions":11,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -182,0 +182,1 @@\n+                        issueData.append(String.join(\"\", issue.labelNames()));\n@@ -586,1 +587,1 @@\n-                        bot.reviewMerge());\n+                        bot.reviewMerge(), bot.approval());\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckWorkItem.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -80,0 +80,1 @@\n+    private final Approval approval;\n@@ -94,1 +95,1 @@\n-                   Map<String, List<PRRecord>> issuePRMap) {\n+                   Map<String, List<PRRecord>> issuePRMap, Approval approval) {\n@@ -129,0 +130,1 @@\n+        this.approval = approval;\n@@ -381,0 +383,4 @@\n+    public Approval approval() {\n+        return approval;\n+    }\n+\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBot.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -68,0 +68,1 @@\n+    private Approval approval = null;\n@@ -242,0 +243,5 @@\n+    public PullRequestBotBuilder approval(Approval approval) {\n+        this.approval = approval;\n+        return this;\n+    }\n+\n@@ -243,8 +249,6 @@\n-        return new PullRequestBot(repo, censusRepo, censusRef, labelConfiguration,\n-                                  externalPullRequestCommands, externalCommitCommands,\n-                                  blockingCheckLabels, readyLabels, twoReviewersLabels, twentyFourHoursLabels,\n-                                  readyComments, issueProject, ignoreStaleReviews,\n-                                  allowedTargetBranches, seedStorage, confOverrideRepo, confOverrideName,\n-                                  confOverrideRef, censusLink, forks, integrators, excludeCommitCommentsFrom,\n-                                  enableCsr, enableJep, reviewCleanBackport, mlbridgeBotName, reviewMerge,\n-                                  processPR, processCommit, enableMerge, mergeSources, jcheckMerge, enableBackport, issuePRMap);\n+        return new PullRequestBot(repo, censusRepo, censusRef, labelConfiguration, externalPullRequestCommands,\n+                externalCommitCommands, blockingCheckLabels, readyLabels, twoReviewersLabels, twentyFourHoursLabels,\n+                readyComments, issueProject, ignoreStaleReviews, allowedTargetBranches, seedStorage, confOverrideRepo,\n+                confOverrideName, confOverrideRef, censusLink, forks, integrators, excludeCommitCommentsFrom, enableCsr,\n+                enableJep, reviewCleanBackport, mlbridgeBotName, reviewMerge, processPR, processCommit, enableMerge,\n+                mergeSources, jcheckMerge, enableBackport, issuePRMap, approval);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBotBuilder.java","additions":12,"deletions":8,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -227,0 +227,15 @@\n+            if (repo.value().contains(\"approval\")) {\n+                var approvalJSON = repo.value().get(\"approval\");\n+                String prefix = approvalJSON.contains(\"prefix\") ? approvalJSON.get(\"prefix\").asString() : \"\";\n+                String request = approvalJSON.get(\"request\").asString();\n+                String approved = approvalJSON.get(\"approved\").asString();\n+                String rejected = approvalJSON.get(\"rejected\").asString();\n+                Approval approval = new Approval(prefix, request, approved, rejected);\n+                if (approvalJSON.contains(\"branches\")) {\n+                    for (var branch : approvalJSON.get(\"branches\").fields()) {\n+                        approval.addBranchPrefix(Pattern.compile(branch.name()), branch.value().get(\"prefix\").asString());\n+                    }\n+                }\n+                botBuilder.approval(approval);\n+            }\n+\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBotFactory.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,54 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bots.pr;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.regex.Pattern;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class ApprovalTests {\n+    @Test\n+    void simple() {\n+        Approval approval = new Approval(\"\", \"jdk17u-fix-request\", \"jdk17u-fix-yes\", \"jdk17u-fix-no\");\n+        assertEquals(\"jdk17u-fix-request\", approval.requestedLabel(\"master\"));\n+        assertEquals(\"jdk17u-fix-yes\", approval.approvedLabel(\"master\"));\n+        assertEquals(\"jdk17u-fix-no\", approval.rejectedLabel(\"master\"));\n+\n+        approval = new Approval(\"jdk17u-fix-\", \"request\", \"yes\", \"no\");\n+        assertEquals(\"jdk17u-fix-request\", approval.requestedLabel(\"master\"));\n+        assertEquals(\"jdk17u-fix-yes\", approval.approvedLabel(\"master\"));\n+        assertEquals(\"jdk17u-fix-no\", approval.rejectedLabel(\"master\"));\n+\n+        approval = new Approval(\"\", \"-critical-request\", \"-critical-approved\", \"-critical-rejected\");\n+        approval.addBranchPrefix(Pattern.compile(\"jdk20.0.1\"), \"CPU23_04\");\n+        approval.addBranchPrefix(Pattern.compile(\"jdk20.0.2\"), \"CPU23_05\");\n+        assertEquals(\"CPU23_04-critical-request\", approval.requestedLabel(\"jdk20.0.1\"));\n+        assertEquals(\"CPU23_04-critical-approved\", approval.approvedLabel(\"jdk20.0.1\"));\n+        assertEquals(\"CPU23_04-critical-rejected\", approval.rejectedLabel(\"jdk20.0.1\"));\n+        assertEquals(\"CPU23_05-critical-request\", approval.requestedLabel(\"jdk20.0.2\"));\n+        assertEquals(\"CPU23_05-critical-approved\", approval.approvedLabel(\"jdk20.0.2\"));\n+        assertEquals(\"CPU23_05-critical-rejected\", approval.rejectedLabel(\"jdk20.0.2\"));\n+    }\n+}\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/ApprovalTests.java","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"},{"patch":"@@ -296,0 +296,51 @@\n+\n+    @Test\n+    void maintainerApprovalInJBS(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var bot = credentials.getHostedRepository();\n+            var issueProject = credentials.getIssueProject();\n+            var issue = issueProject.createIssue(\"This is an issue\", List.of(), Map.of());\n+            issue.setProperty(\"issuetype\", JSON.of(\"Bug\"));\n+            issue.setProperty(\"priority\", JSON.of(\"4\"));\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addReviewer(reviewer.forge().currentUser().id())\n+                    .addCommitter(author.forge().currentUser().id());\n+            Map<String, List<PRRecord>> issuePRMap = new HashMap<>();\n+            var prBot = PullRequestBot.newBuilder()\n+                    .repo(bot)\n+                    .issueProject(issueProject)\n+                    .censusRepo(censusBuilder.build())\n+                    .issuePRMap(issuePRMap)\n+                    .approval(new Approval(\"\", \"jdk17u-fix-request\", \"jdk17u-fix-yes\", \"jdk17u-fix-no\"))\n+                    .build();\n+            var issueBot = new IssueBot(issueProject, List.of(author), Map.of(bot.name(), prBot), issuePRMap);\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.authenticatedUrl(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.authenticatedUrl(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", issue.id() + \": This is an issue\");\n+\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertFalse(pr.store().labelNames().contains(\"ready\"));\n+            assertTrue(pr.store().labelNames().contains(\"rfr\"));\n+\n+            issue.addLabel(\"jdk17u-fix-request\");\n+            TestBotRunner.runPeriodicItems(issueBot);\n+            assertTrue(pr.store().body().contains(\"Requested\"));\n+\n+            issue.addLabel(\"jdk17u-fix-yes\");\n+            TestBotRunner.runPeriodicItems(issueBot);\n+            assertTrue(pr.store().body().contains(\"Approved\"));\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/IssueBotTests.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -147,0 +147,9 @@\n+                          \"approval\": {\n+                            \"request\": \"-critical-request\",\n+                            \"approved\": \"-critical-approved\",\n+                            \"rejected\": \"-critical-rejected\",\n+                            \"branches\": {\n+                              \"jdk20.0.1\": { \"prefix\": \"CPU23_04\" },\n+                              \"jdk20.0.2\": { \"prefix\": \"CPU23_05\" },\n+                              }\n+                          }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBotFactoryTest.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"}]}