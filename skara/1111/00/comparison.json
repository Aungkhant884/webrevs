{"files":[{"patch":"@@ -299,1 +299,1 @@\n-    static ArchiveItem findParent(List<ArchiveItem> generated, Comment comment) {\n+    static ArchiveItem findParent(List<ArchiveItem> generated, List<BridgedComment> bridgedComments, Comment comment) {\n@@ -313,0 +313,8 @@\n+\n+        \/\/ It is possible to quote a bridged comment when replying - make these eligible as well\n+        for (var bridged : bridgedComments) {\n+            var item = new ArchiveItem(generated.get(0), \"br\" + bridged.messageId().address(), bridged.created(), bridged.created(),\n+                                       bridged.author(), null, generated.get(0).subject, null, bridged::body, null);\n+            eligible.add(item);\n+        }\n+\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/ArchiveItem.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -191,0 +191,3 @@\n+        if (BridgedComment.isBridgedUser(originalAuthor)) {\n+            return EmailAddress.from(originalAuthor.fullName(), originalAuthor.email().orElseThrow());\n+        }\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/ArchiveWorkItem.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,115 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bots.mlbridge;\n+\n+import org.openjdk.skara.email.*;\n+import org.openjdk.skara.forge.PullRequest;\n+import org.openjdk.skara.host.HostUser;\n+import org.openjdk.skara.issuetracker.Comment;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.time.ZonedDateTime;\n+import java.util.*;\n+import java.util.regex.Pattern;\n+\n+public class BridgedComment {\n+    private final EmailAddress messageId;\n+    private final String body;\n+    private final HostUser author;\n+    private final ZonedDateTime created;\n+\n+    private final static String bridgedMailMarker = \"<!-- Bridged id (%s) -->\";\n+    private final static Pattern bridgedMailId = Pattern.compile(\"^<!-- Bridged id \\\\(([=\\\\w]+)\\\\) -->\");\n+    private final static Pattern bridgedSender = Pattern.compile(\"Mailing list message from \\\\[(.*?)]\\\\(mailto:(\\\\S+)\\\\)\");\n+\n+    private BridgedComment(String body, EmailAddress messageId, HostUser author, ZonedDateTime created) {\n+        this.messageId = messageId;\n+        this.body = body;\n+        this.author = author;\n+        this.created = created;\n+    }\n+\n+    static Optional<BridgedComment> from(Comment comment, HostUser botUser) {\n+        if (!comment.author().equals(botUser)) {\n+            return Optional.empty();\n+        }\n+        var matcher = bridgedMailId.matcher(comment.body());\n+        if (!matcher.find()) {\n+            return Optional.empty();\n+        }\n+        var id = new String(Base64.getDecoder().decode(matcher.group(1)), StandardCharsets.UTF_8);\n+        var senderMatcher = bridgedSender.matcher(comment.body());\n+        if (!senderMatcher.find()) {\n+            return Optional.empty();\n+        }\n+        var author = HostUser.builder()\n+                             .id(\"bridged\")\n+                             .username(\"bridged\")\n+                             .fullName(senderMatcher.group(1))\n+                             .email(senderMatcher.group(2))\n+                             .build();\n+        var headerEnd = comment.body().indexOf(\"\\n\\n\", senderMatcher.end());\n+        var bridgedBody = comment.body().substring(headerEnd).strip();\n+        return Optional.of(new BridgedComment(bridgedBody, EmailAddress.from(id), author, comment.createdAt()));\n+    }\n+\n+    static BridgedComment post(PullRequest pr, Email email) {\n+        var marker = String.format(bridgedMailMarker,\n+                                   Base64.getEncoder().encodeToString(email.id().address().getBytes(StandardCharsets.UTF_8)));\n+\n+        var filteredEmail = QuoteFilter.stripLinkBlock(email.body(), pr.webUrl());\n+        var body = marker + \"\\n\" +\n+                \"*Mailing list message from [\" + email.author().fullName().orElse(email.author().localPart()) +\n+                \"](mailto:\" + email.author().address() + \") on [\" + email.sender().localPart() +\n+                \"](mailto:\" + email.sender().address() + \"):*\\n\\n\" +\n+                TextToMarkdown.escapeFormatting(filteredEmail);\n+        if (body.length() > 64000) {\n+            body = body.substring(0, 64000) + \"...\\n\\n\" + \"\" +\n+                    \"This message was too large to bridge in full, and has been truncated. \" +\n+                    \"Please check the mailing list archive to see the full text.\";\n+        }\n+        var comment = pr.addComment(body);\n+        return BridgedComment.from(comment, pr.repository().forge().currentUser()).orElseThrow();\n+    }\n+\n+    public EmailAddress messageId() {\n+        return messageId;\n+    }\n+\n+    public String body() {\n+        return body;\n+    }\n+\n+    public HostUser author() {\n+        return author;\n+    }\n+\n+    public ZonedDateTime created() {\n+        return created;\n+    }\n+\n+    public static boolean isBridgedUser(HostUser user) {\n+        \/\/ All supported platforms use numerical IDs, so this special one can not cause conflicts\n+        return user.id().equals(\"bridged\");\n+    }\n+}\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/BridgedComment.java","additions":115,"deletions":0,"binary":false,"changes":115,"status":"added"},{"patch":"@@ -29,1 +29,0 @@\n-import java.nio.charset.StandardCharsets;\n@@ -34,1 +33,0 @@\n-import java.util.regex.Pattern;\n@@ -43,3 +41,0 @@\n-    private final String bridgedMailMarker = \"<!-- Bridged id (%s) -->\";\n-    private final Pattern bridgedMailId = Pattern.compile(\"^<!-- Bridged id \\\\(([=\\\\w]+)\\\\) -->\");\n-\n@@ -76,17 +71,0 @@\n-    private void postNewMessage(Email email) {\n-        var marker = String.format(bridgedMailMarker,\n-                                 Base64.getEncoder().encodeToString(email.id().address().getBytes(StandardCharsets.UTF_8)));\n-\n-        var filteredEmail = QuoteFilter.stripLinkBlock(email.body(), pr.webUrl());\n-        var body = marker + \"\\n\" +\n-                \"*Mailing list message from [\" + email.author().fullName().orElse(email.author().localPart()) +\n-                \"](mailto:\" + email.author().address() + \") on [\" + email.sender().localPart() +\n-                \"](mailto:\" + email.sender().address() + \"):*\\n\\n\" +\n-                TextToMarkdown.escapeFormatting(filteredEmail);\n-        if (body.length() > 64000) {\n-            body = body.substring(0, 64000) + \"...\\n\\n\" + \"\" +\n-                    \"This message was too large to bridge in full, and has been truncated. \" +\n-                    \"Please check the mailing list archive to see the full text.\";\n-        }\n-        pr.addComment(body);\n-    }\n@@ -100,9 +78,2 @@\n-            if (!comment.author().equals(pr.repository().forge().currentUser())) {\n-                continue;\n-            }\n-            var matcher = bridgedMailId.matcher(comment.body());\n-            if (!matcher.find()) {\n-                continue;\n-            }\n-            var id = new String(Base64.getDecoder().decode(matcher.group(1)), StandardCharsets.UTF_8);\n-            alreadyBridged.add(EmailAddress.from(id));\n+            var bridged = BridgedComment.from(comment, pr.repository().forge().currentUser());\n+            bridged.ifPresent(bridgedComment -> alreadyBridged.add(bridgedComment.messageId()));\n@@ -118,1 +89,1 @@\n-            postNewMessage(message);\n+            BridgedComment.post(pr, message);\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/CommentPosterWorkItem.java","additions":3,"deletions":32,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -156,0 +156,6 @@\n+        \/\/ Comments can be a reply to a bridged email\n+        var bridgedComments = new ArrayList<BridgedComment>();\n+        for (var ignored : ignoredComments) {\n+            var bridgedComment = BridgedComment.from(ignored, pr.repository().forge().currentUser());\n+            bridgedComment.ifPresent(bridgedComments::add);\n+        }\n@@ -158,1 +164,1 @@\n-            var parent = ArchiveItem.findParent(generated, comment);\n+            var parent = ArchiveItem.findParent(generated, bridgedComments, comment);\n@@ -263,0 +269,8 @@\n+        \/\/ Check for the special \"bridged message\" item first\n+        if (BridgedComment.isBridgedUser(item.author())) {\n+            var first = sentEmails.size() > 0 ? sentEmails.get(0) : newEmails.get(0);\n+            return Email.reply(first, item.subject(), item.body())\n+                        .id(EmailAddress.from(item.id().substring(2)))\n+                        .build();\n+        }\n+\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/ReviewArchive.java","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-            assertEquals(a0, ArchiveItem.findParent(List.of(a0, a1, a2), createComment(user3, \"Plain unrelated reply\")));\n+            assertEquals(a0, ArchiveItem.findParent(List.of(a0, a1, a2), List.of(), createComment(user3, \"Plain unrelated reply\")));\n@@ -76,3 +76,3 @@\n-            assertEquals(a1, ArchiveItem.findParent(List.of(a0, a1, a2), createComment(user3, \"> First comment\\n\\nI agree\")));\n-            assertEquals(a1, ArchiveItem.findParent(List.of(a0, a1, a2), createComment(user3, \"> First comment\\n>with two lines\\n\\nI agree\")));\n-            assertEquals(a1, ArchiveItem.findParent(List.of(a0, a1, a2), createComment(user3, \"\\n> First comment\\n\\nI agree\")));\n+            assertEquals(a1, ArchiveItem.findParent(List.of(a0, a1, a2), List.of(), createComment(user3, \"> First comment\\n\\nI agree\")));\n+            assertEquals(a1, ArchiveItem.findParent(List.of(a0, a1, a2), List.of(), createComment(user3, \"> First comment\\n>with two lines\\n\\nI agree\")));\n+            assertEquals(a1, ArchiveItem.findParent(List.of(a0, a1, a2), List.of(), createComment(user3, \"\\n> First comment\\n\\nI agree\")));\n@@ -80,2 +80,2 @@\n-            assertEquals(a1, ArchiveItem.findParent(List.of(a0, a1, a2), createComment(user3, \"@user1 I agree\")));\n-            assertEquals(a1, ArchiveItem.findParent(List.of(a0, a1, a2), createComment(user3, \"@user1\\nI agree\")));\n+            assertEquals(a1, ArchiveItem.findParent(List.of(a0, a1, a2), List.of(), createComment(user3, \"@user1 I agree\")));\n+            assertEquals(a1, ArchiveItem.findParent(List.of(a0, a1, a2), List.of(), createComment(user3, \"@user1\\nI agree\")));\n","filename":"bots\/mlbridge\/src\/test\/java\/org\/openjdk\/skara\/bots\/mlbridge\/ArchiveItemTests.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-import org.openjdk.skara.email.EmailAddress;\n+import org.openjdk.skara.email.*;\n@@ -3291,0 +3291,70 @@\n+\n+    @Test\n+    void commentWithQuoteFromBridged(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory();\n+             var archiveFolder = new TemporaryDirectory();\n+             var listServer = new TestMailmanServer();\n+             var webrevServer = new TestWebrevServer()) {\n+            var author = credentials.getHostedRepository();\n+            var bridge = credentials.getHostedRepository();\n+            var archive = credentials.getHostedRepository();\n+            var listAddress = EmailAddress.parse(listServer.createList(\"test\"));\n+            var censusBuilder = credentials.getCensusBuilder()\n+                                           .addAuthor(author.forge().currentUser().id());\n+            var from = EmailAddress.from(\"test\", \"test@test.mail\");\n+            var mlBot = MailingListBridgeBot.newBuilder()\n+                                            .from(from)\n+                                            .repo(author)\n+                                            .archive(archive)\n+                                            .censusRepo(censusBuilder.build())\n+                                            .lists(List.of(new MailingListConfiguration(listAddress, Set.of())))\n+                                            .listArchive(listServer.getArchive())\n+                                            .smtpServer(listServer.getSMTP())\n+                                            .webrevStorageHTMLRepository(archive)\n+                                            .webrevStorageRef(\"webrev\")\n+                                            .webrevStorageBase(Path.of(\"test\"))\n+                                            .webrevStorageBaseUri(webrevServer.uri())\n+                                            .issueTracker(URIBuilder.base(\"http:\/\/issues.test\/browse\/\").build())\n+                                            .build();\n+\n+            \/\/ Populate the projects repository\n+            var reviewFile = Path.of(\"reviewfile.txt\");\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType(), reviewFile);\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+            localRepo.push(masterHash, archive.url(), \"webrev\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"edit\", true);\n+            var pr = credentials.createPullRequest(archive, \"master\", \"edit\", \"This is a pull request\");\n+            pr.setBody(\"This is now ready\");\n+            TestBotRunner.runPeriodicItems(mlBot);\n+            listServer.processIncoming();\n+\n+            \/\/ Simulate a bridged comment\n+            var authorPr = author.pullRequest(pr.id());\n+            var bridgedMail = Email.create(\"Re: \" + pr.title(), \"Mailing list comment\\nFirst comment\\nsecond line\")\n+                                   .id(EmailAddress.from(\"bridgedemailid@bridge.bridge\"))\n+                                   .author(EmailAddress.from(\"List User\", \"listuser@openjdk.org\"))\n+                                   .build();\n+            BridgedComment.post(authorPr, bridgedMail);\n+\n+            \/\/ And a regular comment\n+            pr.addComment(\"Second comment\\nfourth line\");\n+\n+            \/\/ Reply to the bridged one\n+            pr.addComment(\">First comm\\n\\nreply to first\");\n+            TestBotRunner.runPeriodicItems(mlBot);\n+            listServer.processIncoming();\n+\n+            \/\/ The first comment should be replied to once, and the original post once\n+            Repository.materialize(archiveFolder.path(), archive.url(), \"master\");\n+            assertEquals(1, archiveContainsCount(archiveFolder.path(), Pattern.quote(\"List User <listuser@openjdk.org>\") + \".* wrote\"));\n+            assertEquals(1, archiveContainsCount(archiveFolder.path(), Pattern.quote(pr.author().fullName()) + \".* wrote\"));\n+\n+            \/\/ There should have been a reply directed towards the bridged mail id\n+            assertEquals(1, archiveContainsCount(archiveFolder.path(), Pattern.quote(\"In-Reply-To: <bridgedemailid@bridge.bridge>\")));\n+        }\n+    }\n","filename":"bots\/mlbridge\/src\/test\/java\/org\/openjdk\/skara\/bots\/mlbridge\/MailingListBridgeBotTests.java","additions":71,"deletions":1,"binary":false,"changes":72,"status":"modified"}]}