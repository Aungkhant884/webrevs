{"files":[{"patch":"@@ -36,1 +36,1 @@\n-    private LabelConfiguration labelConfiguration = LabelConfiguration.builder().build();\n+    private LabelConfiguration labelConfiguration = LabelConfigurationJson.builder().build();\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBotBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-import org.openjdk.skara.forge.LabelConfiguration;\n+import org.openjdk.skara.forge.*;\n@@ -68,2 +68,10 @@\n-            labelConfigurations.put(labelGroup.name(),\n-                                    LabelConfiguration.fromJSON(labelGroup.value()));\n+            if (labelGroup.value().contains(\"repository\")) {\n+                var repository = configuration.repository(labelGroup.value().get(\"repository\").asString());\n+                var ref = configuration.repositoryRef(labelGroup.value().get(\"repository\").asString());\n+                var filename = labelGroup.value().get(\"filename\").asString();\n+                labelConfigurations.put(labelGroup.name(),\n+                                        LabelConfigurationHostedRepository.from(repository, ref, filename));\n+            } else {\n+                labelConfigurations.put(labelGroup.name(),\n+                                        LabelConfigurationJson.from(labelGroup.value()));\n+            }\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBotFactory.java","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-import org.openjdk.skara.forge.LabelConfiguration;\n+import org.openjdk.skara.forge.*;\n@@ -48,6 +48,6 @@\n-            var labelConfiguration = LabelConfiguration.builder()\n-                                                       .addMatchers(\"1\", List.of(Pattern.compile(\"cpp$\")))\n-                                                       .addMatchers(\"2\", List.of(Pattern.compile(\"hpp$\")))\n-                                                       .addGroup(\"group\", List.of(\"1\", \"2\"))\n-                                                       .addExtra(\"extra\")\n-                                                       .build();\n+            var labelConfiguration = LabelConfigurationJson.builder()\n+                                                           .addMatchers(\"1\", List.of(Pattern.compile(\"cpp$\")))\n+                                                           .addMatchers(\"2\", List.of(Pattern.compile(\"hpp$\")))\n+                                                           .addGroup(\"group\", List.of(\"1\", \"2\"))\n+                                                           .addExtra(\"extra\")\n+                                                           .build();\n@@ -138,6 +138,6 @@\n-            var labelConfiguration = LabelConfiguration.builder()\n-                                                       .addMatchers(\"1\", List.of(Pattern.compile(\"cpp$\")))\n-                                                       .addMatchers(\"2\", List.of(Pattern.compile(\"hpp$\")))\n-                                                       .addGroup(\"group\", List.of(\"1\", \"2\"))\n-                                                       .addExtra(\"extra\")\n-                                                       .build();\n+            var labelConfiguration = LabelConfigurationJson.builder()\n+                                                           .addMatchers(\"1\", List.of(Pattern.compile(\"cpp$\")))\n+                                                           .addMatchers(\"2\", List.of(Pattern.compile(\"hpp$\")))\n+                                                           .addGroup(\"group\", List.of(\"1\", \"2\"))\n+                                                           .addExtra(\"extra\")\n+                                                           .build();\n@@ -206,6 +206,6 @@\n-            var labelConfiguration = LabelConfiguration.builder()\n-                                                       .addMatchers(\"1\", List.of(Pattern.compile(\"cpp$\")))\n-                                                       .addMatchers(\"2\", List.of(Pattern.compile(\"hpp$\")))\n-                                                       .addGroup(\"group\", List.of(\"1\", \"2\"))\n-                                                       .addExtra(\"extra\")\n-                                                       .build();\n+            var labelConfiguration = LabelConfigurationJson.builder()\n+                                                           .addMatchers(\"1\", List.of(Pattern.compile(\"cpp$\")))\n+                                                           .addMatchers(\"2\", List.of(Pattern.compile(\"hpp$\")))\n+                                                           .addGroup(\"group\", List.of(\"1\", \"2\"))\n+                                                           .addExtra(\"extra\")\n+                                                           .build();\n@@ -268,6 +268,6 @@\n-            var labelConfiguration = LabelConfiguration.builder()\n-                                                       .addMatchers(\"1\", List.of(Pattern.compile(\"cpp$\")))\n-                                                       .addMatchers(\"2\", List.of(Pattern.compile(\"hpp$\")))\n-                                                       .addGroup(\"group\", List.of(\"1\", \"2\"))\n-                                                       .addExtra(\"extra\")\n-                                                       .build();\n+            var labelConfiguration = LabelConfigurationJson.builder()\n+                                                           .addMatchers(\"1\", List.of(Pattern.compile(\"cpp$\")))\n+                                                           .addMatchers(\"2\", List.of(Pattern.compile(\"hpp$\")))\n+                                                           .addGroup(\"group\", List.of(\"1\", \"2\"))\n+                                                           .addExtra(\"extra\")\n+                                                           .build();\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/LabelTests.java","additions":25,"deletions":25,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import org.openjdk.skara.forge.*;\n@@ -26,1 +27,0 @@\n-import org.openjdk.skara.forge.LabelConfiguration;\n@@ -45,4 +45,4 @@\n-            var labelConfiguration = LabelConfiguration.builder()\n-                                                       .addMatchers(\"test1\", List.of(Pattern.compile(\"a.txt\")))\n-                                                       .addMatchers(\"test2\", List.of(Pattern.compile(\"b.txt\")))\n-                                                       .build();\n+            var labelConfiguration = LabelConfigurationJson.builder()\n+                                                           .addMatchers(\"test1\", List.of(Pattern.compile(\"a.txt\")))\n+                                                           .addMatchers(\"test2\", List.of(Pattern.compile(\"b.txt\")))\n+                                                           .build();\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/LabelerTests.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -26,7 +26,2 @@\n-import org.openjdk.skara.cli.GitPublish;\n-import org.openjdk.skara.cli.GitJCheck;\n-import org.openjdk.skara.vcs.Branch;\n-import org.openjdk.skara.vcs.ReadOnlyRepository;\n-import org.openjdk.skara.vcs.openjdk.CommitMessageParsers;\n-import org.openjdk.skara.forge.Forge;\n-import org.openjdk.skara.forge.LabelConfiguration;\n+import org.openjdk.skara.cli.*;\n+import org.openjdk.skara.forge.*;\n@@ -34,2 +29,2 @@\n-\n-import static org.openjdk.skara.cli.pr.Utils.*;\n+import org.openjdk.skara.vcs.*;\n+import org.openjdk.skara.vcs.openjdk.CommitMessageParsers;\n@@ -38,2 +33,1 @@\n-import java.nio.file.Files;\n-import java.nio.file.StandardOpenOption;\n+import java.nio.file.*;\n@@ -43,0 +37,2 @@\n+import static org.openjdk.skara.cli.pr.Utils.*;\n+\n@@ -114,1 +110,1 @@\n-        return LabelConfiguration.fromJSON(json);\n+        return LabelConfigurationJson.from(json);\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/pr\/GitPrCreate.java","additions":8,"deletions":12,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -25,3 +25,0 @@\n-import org.openjdk.skara.json.JSONValue;\n-import org.openjdk.skara.json.JSONObject;\n-\n@@ -29,118 +26,1 @@\n-import java.util.*;\n-import java.util.regex.Pattern;\n-import java.util.stream.Collectors;\n-\n-public class LabelConfiguration {\n-    private final Map<String, List<Pattern>> matchers;\n-    private final Map<String, List<String>> groups;\n-    private final Set<String> extra;\n-    private final Set<String> allowed;\n-\n-    private LabelConfiguration(Map<String, List<Pattern>> matchers, Map<String, List<String>> groups, Set<String> extra) {\n-        this.matchers = Collections.unmodifiableMap(matchers);\n-        this.groups = Collections.unmodifiableMap(groups);\n-        this.extra = Collections.unmodifiableSet(extra);\n-\n-        var allowed = new HashSet<String>();\n-        allowed.addAll(matchers.keySet());\n-        allowed.addAll(groups.keySet());\n-        allowed.addAll(extra);\n-        this.allowed = Collections.unmodifiableSet(allowed);\n-    }\n-\n-    public static class Builder {\n-        private final Map<String, List<Pattern>> matchers = new HashMap<>();\n-        private final Map<String, List<String>> groups = new HashMap<>();\n-        private final Set<String> extra = new HashSet<>();\n-\n-        public Builder addMatchers(String label, List<Pattern> matchers) {\n-            this.matchers.put(label, matchers);\n-            return this;\n-        }\n-\n-        public Builder addGroup(String label, List<String> members) {\n-            groups.put(label, members);\n-            return this;\n-        }\n-\n-        public Builder addExtra(String label) {\n-            extra.add(label);\n-            return this;\n-        }\n-\n-        public LabelConfiguration build() {\n-            return new LabelConfiguration(matchers, groups, extra);\n-        }\n-    }\n-\n-    public static Builder builder() {\n-        return new Builder();\n-    }\n-\n-    public static LabelConfiguration fromJSON(JSONValue json) {\n-        var builder = builder();\n-        if (json.contains(\"matchers\")) {\n-            var fields = json.get(\"matchers\").fields();\n-            var matchers = fields.stream()\n-                                 .collect(Collectors.toMap(JSONObject.Field::name,\n-                                                           field -> field.value()\n-                                                                         .stream()\n-                                                                         .map(JSONValue::asString)\n-                                                                         .map(Pattern::compile)\n-                                                                         .collect(Collectors.toList())));\n-            matchers.forEach(builder::addMatchers);\n-        }\n-        if (json.contains(\"groups\")) {\n-            var fields = json.get(\"groups\").fields();\n-            var groups = fields.stream()\n-                               .collect(Collectors.toMap(JSONObject.Field::name,\n-                                                         field -> field.value()\n-                                                                       .stream()\n-                                                                       .map(JSONValue::asString)\n-                                                                       .collect(Collectors.toList())));\n-            groups.forEach(builder::addGroup);\n-        }\n-        if (json.contains(\"extra\")) {\n-            var extra = json.get(\"extra\").stream()\n-                                         .map(JSONValue::asString)\n-                                         .collect(Collectors.toList());\n-            extra.forEach(builder::addExtra);\n-        }\n-        return builder.build();\n-    }\n-\n-    public Set<String> label(Set<Path> changes) {\n-        var labels = new HashSet<String>();\n-        for (var file : changes) {\n-            for (var label : matchers.entrySet()) {\n-                for (var pattern : label.getValue()) {\n-                    var matcher = pattern.matcher(file.toString());\n-                    if (matcher.find()) {\n-                        labels.add(label.getKey());\n-                        break;\n-                    }\n-                }\n-            }\n-        }\n-\n-        var ret = new HashSet<>(labels);\n-        \/\/ If the current labels matches at least two members of a group, use the group instead\n-        for (var group : groups.entrySet()) {\n-            var count = 0;\n-            for (var groupEntry : group.getValue()) {\n-                if (ret.contains(groupEntry)) {\n-                    count++;\n-                    if (count == 2) {\n-                        ret.add(group.getKey());\n-                        ret.removeAll(group.getValue());\n-                        break;\n-                    }\n-                }\n-            }\n-        }\n-        return ret;\n-    }\n-\n-    public Set<String> allowed() {\n-        return allowed;\n-    }\n+import java.util.Set;\n@@ -148,3 +28,4 @@\n-    public boolean isAllowed(String s) {\n-        return allowed.contains(s);\n-    }\n+public interface LabelConfiguration {\n+    Set<String> label(Set<Path> changes);\n+    Set<String> allowed();\n+    boolean isAllowed(String s);\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/LabelConfiguration.java","additions":5,"deletions":124,"binary":false,"changes":129,"status":"modified"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.forge;\n+\n+import org.openjdk.skara.json.JSON;\n+\n+import java.nio.file.Path;\n+import java.util.Set;\n+\n+public class LabelConfigurationHostedRepository implements LabelConfiguration {\n+    private final HostedRepository repository;\n+    private final String ref;\n+    private final String filename;\n+\n+    private String latestFileContents = \"\";\n+    private LabelConfiguration latestParsedConfiguration;\n+\n+    private LabelConfigurationHostedRepository(HostedRepository repository, String ref, String filename) {\n+        this.repository = repository;\n+        this.ref = ref;\n+        this.filename = filename;\n+    }\n+\n+    public static LabelConfiguration from(HostedRepository repository, String ref, String filename) {\n+        return new LabelConfigurationHostedRepository(repository, ref, filename);\n+    }\n+\n+    private LabelConfiguration labelConfiguration() {\n+        var contents = repository.fileContents(filename, ref);\n+        if (!contents.equals(latestFileContents)) {\n+            latestFileContents = contents;\n+            var json = JSON.parse(contents);\n+            latestParsedConfiguration = LabelConfigurationJson.from(json);\n+        }\n+        return latestParsedConfiguration;\n+    }\n+\n+    @Override\n+    public Set<String> label(Set<Path> changes) {\n+        return labelConfiguration().label(changes);\n+    }\n+\n+    @Override\n+    public Set<String> allowed() {\n+        return labelConfiguration().allowed();\n+    }\n+\n+    @Override\n+    public boolean isAllowed(String s) {\n+        return labelConfiguration().isAllowed(s);\n+    }\n+}\n+\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/LabelConfigurationHostedRepository.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,156 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.forge;\n+\n+import org.openjdk.skara.json.*;\n+\n+import java.nio.file.Path;\n+import java.util.*;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+public class LabelConfigurationJson implements LabelConfiguration {\n+    private final Map<String, List<Pattern>> matchers;\n+    private final Map<String, List<String>> groups;\n+    private final Set<String> extra;\n+    private final Set<String> allowed;\n+\n+    private LabelConfigurationJson(Map<String, List<Pattern>> matchers, Map<String, List<String>> groups, Set<String> extra) {\n+        this.matchers = Collections.unmodifiableMap(matchers);\n+        this.groups = Collections.unmodifiableMap(groups);\n+        this.extra = Collections.unmodifiableSet(extra);\n+\n+        var allowed = new HashSet<String>();\n+        allowed.addAll(matchers.keySet());\n+        allowed.addAll(groups.keySet());\n+        allowed.addAll(extra);\n+        this.allowed = Collections.unmodifiableSet(allowed);\n+    }\n+\n+    public static class Builder {\n+        private final Map<String, List<Pattern>> matchers = new HashMap<>();\n+        private final Map<String, List<String>> groups = new HashMap<>();\n+        private final Set<String> extra = new HashSet<>();\n+\n+        public Builder addMatchers(String label, List<Pattern> matchers) {\n+            this.matchers.put(label, matchers);\n+            return this;\n+        }\n+\n+        public Builder addGroup(String label, List<String> members) {\n+            groups.put(label, members);\n+            return this;\n+        }\n+\n+        public Builder addExtra(String label) {\n+            extra.add(label);\n+            return this;\n+        }\n+\n+        public LabelConfiguration build() {\n+            return new LabelConfigurationJson(matchers, groups, extra);\n+        }\n+    }\n+\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    public static LabelConfiguration from(JSONValue json) {\n+        var builder = builder();\n+        if (json.contains(\"matchers\")) {\n+            var fields = json.get(\"matchers\").fields();\n+            var matchers = fields.stream()\n+                                 .collect(Collectors.toMap(JSONObject.Field::name,\n+                                                           field -> field.value()\n+                                                                         .stream()\n+                                                                         .map(JSONValue::asString)\n+                                                                         .map(s -> Pattern.compile(\"^\" + s, Pattern.CASE_INSENSITIVE))\n+                                                                         .collect(Collectors.toList())));\n+            matchers.forEach(builder::addMatchers);\n+        }\n+        if (json.contains(\"groups\")) {\n+            var fields = json.get(\"groups\").fields();\n+            var groups = fields.stream()\n+                               .collect(Collectors.toMap(JSONObject.Field::name,\n+                                                         field -> field.value()\n+                                                                       .stream()\n+                                                                       .map(JSONValue::asString)\n+                                                                       .collect(Collectors.toList())));\n+            groups.forEach(builder::addGroup);\n+        }\n+        if (json.contains(\"extra\")) {\n+            var extra = json.get(\"extra\").stream()\n+                            .map(JSONValue::asString)\n+                            .collect(Collectors.toList());\n+            extra.forEach(builder::addExtra);\n+        }\n+        return builder.build();\n+    }\n+\n+    public static LabelConfiguration fromHostedRepositoryFile(HostedRepository repository, String ref, String filename) {\n+        var jsonText = repository.fileContents(filename, ref);\n+        var json = JSON.parse(jsonText);\n+        return from(json);\n+    }\n+\n+    public Set<String> label(Set<Path> changes) {\n+        var labels = new HashSet<String>();\n+        for (var file : changes) {\n+            for (var label : matchers.entrySet()) {\n+                for (var pattern : label.getValue()) {\n+                    var matcher = pattern.matcher(file.toString());\n+                    if (matcher.find()) {\n+                        labels.add(label.getKey());\n+                        break;\n+                    }\n+                }\n+            }\n+        }\n+\n+        var ret = new HashSet<>(labels);\n+        \/\/ If the current labels matches at least two members of a group, use the group instead\n+        for (var group : groups.entrySet()) {\n+            var count = 0;\n+            for (var groupEntry : group.getValue()) {\n+                if (ret.contains(groupEntry)) {\n+                    count++;\n+                    if (count == 2) {\n+                        ret.add(group.getKey());\n+                        ret.removeAll(group.getValue());\n+                        break;\n+                    }\n+                }\n+            }\n+        }\n+        return ret;\n+    }\n+\n+    public Set<String> allowed() {\n+        return allowed;\n+    }\n+\n+    public boolean isAllowed(String s) {\n+        return allowed.contains(s);\n+    }\n+}\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/LabelConfigurationJson.java","additions":156,"deletions":0,"binary":false,"changes":156,"status":"added"},{"patch":"@@ -36,4 +36,4 @@\n-        var config = LabelConfiguration.builder()\n-                                       .addMatchers(\"1\", List.of(Pattern.compile(\"cpp$\")))\n-                                       .addMatchers(\"2\", List.of(Pattern.compile(\"hpp$\")))\n-                                       .build();\n+        var config = LabelConfigurationJson.builder()\n+                                           .addMatchers(\"1\", List.of(Pattern.compile(\"cpp$\")))\n+                                           .addMatchers(\"2\", List.of(Pattern.compile(\"hpp$\")))\n+                                           .build();\n@@ -50,5 +50,5 @@\n-        var config = LabelConfiguration.builder()\n-                                       .addMatchers(\"1\", List.of(Pattern.compile(\"cpp$\")))\n-                                       .addMatchers(\"2\", List.of(Pattern.compile(\"hpp$\")))\n-                                       .addGroup(\"both\", List.of(\"1\", \"2\"))\n-                                       .build();\n+        var config = LabelConfigurationJson.builder()\n+                                           .addMatchers(\"1\", List.of(Pattern.compile(\"cpp$\")))\n+                                           .addMatchers(\"2\", List.of(Pattern.compile(\"hpp$\")))\n+                                           .addGroup(\"both\", List.of(\"1\", \"2\"))\n+                                           .build();\n","filename":"forge\/src\/test\/java\/org\/openjdk\/skara\/forge\/LabelConfigurationTests.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"}]}