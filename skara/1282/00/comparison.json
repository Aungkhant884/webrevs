{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -330,0 +330,3 @@\n+        if (pr.labelNames().contains(\"sponsor\")) {\n+            pr.removeLabel(\"sponsor\");\n+        }\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/IntegrateCommand.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -139,0 +139,1 @@\n+    \/\/ This method only has one statement now, but it is kept intentionally to meet the change in the future.\n@@ -141,1 +142,0 @@\n-        pr.removeLabel(\"sponsor\");\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/SponsorCommand.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1415,0 +1415,92 @@\n+\n+    \/**\n+     * When an author types the command `\/integrate`, the label `sponsor` should be added.\n+     * If the author becomes a committer and types the command `\/integrate` again,\n+     * the label `sponsor` should be removed which is similar to the labels `rfr` and `ready`.\n+     *\/\n+    @Test\n+    void sponsor(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory();\n+             var pushedFolder = new TemporaryDirectory()) {\n+\n+            var botUser = credentials.getHostedRepository();\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addAuthor(author.forge().currentUser().id())\n+                    .addReviewer(reviewer.forge().currentUser().id());\n+            var authorBot = PullRequestBot.newBuilder().repo(botUser).censusRepo(censusBuilder.build()).build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"refs\/heads\/edit\", true);\n+            var authorPr = credentials.createPullRequest(author, \"master\", \"edit\", \"This is a pull request\");\n+\n+            \/\/ Approve it as another user\n+            var reviewerPr = reviewer.pullRequest(authorPr.id());\n+            reviewerPr.addReview(Review.Verdict.APPROVED, \"Approved\");\n+\n+            \/\/ Issue an integrate command without being a Committer\n+            authorPr.addComment(\"\/integrate\");\n+            TestBotRunner.runPeriodicItems(authorBot);\n+\n+            \/\/ The bot should reply that a sponsor is required\n+            var sponsor = authorPr.comments().stream()\n+                    .filter(comment -> comment.body().contains(\"sponsor\"))\n+                    .filter(comment -> comment.body().contains(\"your change\"))\n+                    .count();\n+            assertEquals(1, sponsor);\n+            assertFalse(authorPr.labelNames().contains(\"integrated\"));\n+            assertTrue(authorPr.labelNames().contains(\"sponsor\"));\n+            assertTrue(authorPr.labelNames().contains(\"rfr\"));\n+            assertTrue(authorPr.labelNames().contains(\"ready\"));\n+\n+            \/\/ The bot should not have pushed the commit\n+            var notPushed = authorPr.comments().stream()\n+                    .filter(comment -> comment.body().contains(\"Pushed as commit\"))\n+                    .count();\n+            assertEquals(0, notPushed);\n+\n+            \/\/ Mark the PR author as committer\n+            var committerCensusBuilder = credentials.getCensusBuilder()\n+                    .addCommitter(author.forge().currentUser().id())\n+                    .addReviewer(reviewer.forge().currentUser().id());\n+            var committerBot = PullRequestBot.newBuilder().repo(botUser).censusRepo(committerCensusBuilder.build()).build();\n+\n+            \/\/ Issue an integrate command with being a Committer\n+            authorPr.addComment(\"\/integrate\");\n+            TestBotRunner.runPeriodicItems(committerBot);\n+\n+            \/\/ The bot should have pushed the commit\n+            var pushed = authorPr.comments().stream()\n+                    .filter(comment -> comment.body().contains(\"Pushed as commit\"))\n+                    .count();\n+            assertEquals(1, pushed);\n+\n+            \/\/ The corresponding labels should have been adjusted\n+            assertTrue(authorPr.labelNames().contains(\"integrated\"));\n+            assertFalse(authorPr.labelNames().contains(\"sponsor\"));\n+            assertFalse(authorPr.labelNames().contains(\"rfr\"));\n+            assertFalse(authorPr.labelNames().contains(\"ready\"));\n+\n+            \/\/ The change should now be present on the master branch\n+            var pushedRepo = Repository.materialize(pushedFolder.path(), author.url(), \"master\");\n+            assertTrue(CheckableRepository.hasBeenEdited(pushedRepo));\n+\n+            var headHash = pushedRepo.resolve(\"HEAD\").orElseThrow();\n+            var headCommit = pushedRepo.commits(headHash.hex() + \"^..\" + headHash.hex()).asList().get(0);\n+\n+            \/\/ Verify that the author and committer of the change are the correct users\n+            assertEquals(\"Generated Committer 1\", headCommit.author().name());\n+            assertEquals(\"integrationcommitter1@openjdk.java.net\", headCommit.author().email());\n+            assertEquals(\"Generated Committer 1\", headCommit.committer().name());\n+            assertEquals(\"integrationcommitter1@openjdk.java.net\", headCommit.committer().email());\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/IntegrateTests.java","additions":93,"deletions":1,"binary":false,"changes":94,"status":"modified"}]}