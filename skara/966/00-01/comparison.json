{"files":[{"patch":"@@ -164,1 +164,1 @@\n-        var candidates = Stream.concat(Stream.of(primary), findBackports(primary).stream()).collect(Collectors.toList());\n+        var candidates = Stream.concat(Stream.of(primary), findBackports(primary, false).stream()).collect(Collectors.toList());\n@@ -194,1 +194,1 @@\n-    static List<Issue> findBackports(Issue primary) {\n+    static List<Issue> findBackports(Issue primary, boolean resolvedOnly) {\n@@ -201,0 +201,1 @@\n+                    .filter(i -> !resolvedOnly || (i.state() != Issue.State.OPEN))\n@@ -311,1 +312,1 @@\n-        var related = Backports.findBackports(mainIssue.get());\n+        var related = Backports.findBackports(mainIssue.get(), true);\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/Backports.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -55,0 +55,3 @@\n+\n+            assertEquals(List.of(issue2), Backports.findBackports(issue1, false));\n+            assertEquals(List.of(), Backports.findBackports(issue1, true));\n@@ -107,1 +110,1 @@\n-            assertEquals(List.of(), Backports.findBackports(issue1));\n+            assertEquals(List.of(), Backports.findBackports(issue1, false));\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/BackportsTests.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}