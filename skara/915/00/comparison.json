{"files":[{"patch":"@@ -114,0 +114,3 @@\n+        var targetHasNewlineAtEndOfFile = true;\n+        var sourceHasNewlineAtEndOfFile = true;\n+        var previousLineType = \"\";\n@@ -117,0 +120,1 @@\n+                previousLineType = \"-\";\n@@ -121,0 +125,1 @@\n+                previousLineType = \"+\";\n@@ -124,5 +129,4 @@\n-            }\n-\n-            if (line.startsWith(\" \")) {\n-                hunks.add(new Hunk(new Range(sourceStart, sourceLines.size()), sourceLines,\n-                                   new Range(targetStart, targetLines.size()), targetLines));\n+            } else if (line.startsWith(\" \")) {\n+                previousLineType = \" \";\n+                hunks.add(new Hunk(new Range(sourceStart, sourceLines.size()), sourceLines, sourceHasNewlineAtEndOfFile,\n+                                   new Range(targetStart, targetLines.size()), targetLines, targetHasNewlineAtEndOfFile));\n@@ -136,0 +140,3 @@\n+                targetHasNewlineAtEndOfFile = true;\n+                sourceHasNewlineAtEndOfFile = true;\n+\n@@ -141,0 +148,9 @@\n+            } else if (line.equals(\"\\\\ No newline at end of file\")) {\n+                if (previousLineType.equals(\"+\")) {\n+                    targetHasNewlineAtEndOfFile = false;\n+                } else if (previousLineType.equals(\"-\")) {\n+                    sourceHasNewlineAtEndOfFile = false;\n+                }\n+                i++;\n+            } else {\n+                throw new IllegalStateException(\"Unexpected diff line: \" + line);\n@@ -145,2 +161,2 @@\n-            hunks.add(new Hunk(new Range(sourceStart, sourceLines.size()), sourceLines,\n-                               new Range(targetStart, targetLines.size()), targetLines));\n+            hunks.add(new Hunk(new Range(sourceStart, sourceLines.size()), sourceLines, sourceHasNewlineAtEndOfFile,\n+                               new Range(targetStart, targetLines.size()), targetLines, targetHasNewlineAtEndOfFile));\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/UnifiedDiffParser.java","additions":23,"deletions":7,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -401,0 +401,23 @@\n+\n+    @Test\n+    public void noNewline() {\n+        var diff =\n+            \"diff --git a\/test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestHostedRepository.java b\/test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestHostedRepository.java\\n\" +\n+            \"index 489f49ef..e777f0f8 100644\\n\" +\n+            \"--- a\/test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestHostedRepository.java\\n\" +\n+            \"+++ b\/test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestHostedRepository.java\\n\" +\n+            \"@@ -211,6 +211,14 @@ public Hash branchHash(String ref) {\\n\" +\n+            \"+    static class CustomSelectorProviderImpl extends SelectorProvider {\\n\" +\n+            \"+        @Override public DatagramChannel openDatagramChannel() { return null; }\\n\" +\n+            \"+        @Override public DatagramChannel openDatagramChannel(ProtocolFamily family) { return null; }\\n\" +\n+            \"+        @Override public Pipe openPipe() { return null; }\\n\" +\n+            \"+        @Override public AbstractSelector openSelector() { return null; }\\n\" +\n+            \"+        @Override public ServerSocketChannel openServerSocketChannel() { return null; }\\n\" +\n+            \"+        @Override public SocketChannel openSocketChannel() { return null; }\\n\" +\n+            \"+    }\\n\" +\n+            \"+}\\n\" +\n+            \"\\\\ No newline at end of file\\n\";\n+        var hunks = UnifiedDiffParser.parseSingleFileDiff(diff.split(\"\\n\"));\n+        assertEquals(1, hunks.size());\n+        assertFalse(hunks.get(0).target().hasNewlineAtEndOfFile());\n+    }\n","filename":"vcs\/src\/test\/java\/org\/openjdk\/skara\/vcs\/UnifiedDiffParserTests.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"}]}