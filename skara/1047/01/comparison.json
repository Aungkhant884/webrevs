{"files":[{"patch":"@@ -26,0 +26,1 @@\n+import org.openjdk.skara.host.HostUser;\n@@ -197,0 +198,9 @@\n+\n+    @Override\n+    public void addCollaborator(HostUser user, boolean canPush) {\n+    }\n+\n+    @Override\n+    public boolean canPush(HostUser user) {\n+        return false;\n+    }\n","filename":"bots\/tester\/src\/test\/java\/org\/openjdk\/skara\/bots\/tester\/InMemoryHostedRepository.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import org.openjdk.skara.host.HostUser;\n@@ -85,0 +86,2 @@\n+    void addCollaborator(HostUser user, boolean canPush);\n+    boolean canPush(HostUser user);\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/HostedRepository.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+import org.openjdk.skara.host.HostUser;\n@@ -516,0 +517,18 @@\n+\n+    @Override\n+    public void addCollaborator(HostUser user, boolean canPush) {\n+        var query = JSON.object().put(\"permission\", canPush ? \"push\" : \"pull\");\n+        request.put(\"collaborators\/\" + user.username())\n+               .body(query)\n+               .execute();\n+\n+    }\n+\n+    @Override\n+    public boolean canPush(HostUser user) {\n+        var permission = request.get(\"collaborators\/\" + user.username())\n+                                .execute()\n+                                .get(\"permission\")\n+                                .asString();\n+        return permission.equals(\"admin\") || permission.equals(\"write\");\n+    }\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubRepository.java","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -550,0 +550,18 @@\n+\n+    @Override\n+    public void addCollaborator(HostUser user, boolean canPush) {\n+        var accessLevel = canPush ? \"30\" : \"20\";\n+        var data = \"user_id=\" + user.id() + \"&access_level=\" + accessLevel;\n+        request.post(\"members\")\n+               .body(data)\n+               .execute();\n+    }\n+\n+    @Override\n+    public boolean canPush(HostUser user) {\n+        var accessLevel = request.get(\"members\/\" + user.id())\n+                                 .execute()\n+                                 .get(\"access_level\")\n+                                 .asInt();\n+        return accessLevel >= 30;\n+    }\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabRepository.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -70,0 +70,1 @@\n+        private String rawBody;\n@@ -78,0 +79,1 @@\n+            rawBody = null;\n@@ -82,1 +84,9 @@\n-        private JSONValue composedBody() {\n+        private String composedBody() {\n+            if (rawBody != null && (body != null || !bodyParams.isEmpty())) {\n+                throw new RuntimeException(\"Cannot mix raw body and JSON body in request\");\n+            }\n+\n+            if (rawBody != null) {\n+                return rawBody;\n+            }\n+\n@@ -87,1 +97,1 @@\n-            return finalBody;\n+            return finalBody.toString();\n@@ -128,0 +138,10 @@\n+        \/**\n+         * Sets the request body encoded as raw POST data.\n+         * @param data\n+         * @return\n+         *\/\n+        public QueryBuilder body(String data) {\n+            rawBody = data;\n+            return this;\n+        }\n+\n@@ -291,1 +311,1 @@\n-    private HttpRequest.Builder createRequest(RequestType requestType, String endpoint, JSONValue body,\n+    private HttpRequest.Builder createRequest(RequestType requestType, String endpoint, String body,\n@@ -308,1 +328,1 @@\n-            requestBuilder.method(requestType.name(), HttpRequest.BodyPublishers.ofString(body.toString()));\n+            requestBuilder.method(requestType.name(), HttpRequest.BodyPublishers.ofString(body));\n","filename":"network\/src\/main\/java\/org\/openjdk\/skara\/network\/RestRequest.java","additions":24,"deletions":4,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+    private final List<String> rawRequests = new ArrayList<>();\n@@ -66,1 +67,5 @@\n-                requests.add(JSON.parse(input).asObject());\n+                try {\n+                    requests.add(JSON.parse(input).asObject());\n+                } catch (IllegalStateException e) {\n+                    rawRequests.add(input);\n+                }\n@@ -143,0 +148,4 @@\n+    List<String> getRawRequests() {\n+        return rawRequests;\n+    }\n+\n@@ -314,1 +323,26 @@\n-    }}\n+    }\n+\n+    @Test\n+    void rawBody() throws IOException {\n+        try (var receiver = new RestReceiver()) {\n+            var request = new RestRequest(receiver.getEndpoint());\n+            request.post(\"\/test\").body(\"foo=bar\").execute();\n+            var rawRequests = receiver.getRawRequests();\n+            assertEquals(1, rawRequests.size());\n+            assertEquals(\"foo=bar\", rawRequests.get(0));\n+            assertEquals(List.of(), receiver.getRequests());\n+        }\n+    }\n+\n+    @Test\n+    void jsonBody() throws IOException {\n+        try (var receiver = new RestReceiver()) {\n+            var request = new RestRequest(receiver.getEndpoint());\n+            request.post(\"\/test\").body(JSON.object().put(\"foo\", \"bar\")).execute();\n+            var requests = receiver.getRequests();\n+            assertEquals(1, requests.size());\n+            assertEquals(\"bar\", requests.get(0).get(\"foo\").asString());\n+            assertEquals(List.of(), receiver.getRawRequests());\n+        }\n+    }\n+}\n","filename":"network\/src\/test\/java\/org\/openjdk\/skara\/network\/RestRequestTests.java","additions":36,"deletions":2,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+import org.openjdk.skara.host.HostUser;\n@@ -44,0 +45,1 @@\n+    private Map<String, Boolean> collaborators = new HashMap<>();\n@@ -278,0 +280,10 @@\n+    @Override\n+    public void addCollaborator(HostUser user, boolean canPush) {\n+        collaborators.put(user.username(), canPush);\n+    }\n+\n+    @Override\n+    public boolean canPush(HostUser user) {\n+        return collaborators.getOrDefault(user.username(), false);\n+    }\n+\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestHostedRepository.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"}]}