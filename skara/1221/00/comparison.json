{"files":[{"patch":"@@ -45,0 +45,7 @@\n+    private enum Command {\n+        auto,\n+        manual,\n+        defer,\n+        undefer\n+    }\n+\n@@ -46,1 +53,1 @@\n-        reply.println(\"usage: `\/integrate [auto|manual|<hash>]`\");\n+        reply.println(\"usage: `\/integrate [auto|manual|defer|undefer|<hash>]`\");\n@@ -69,15 +76,1 @@\n-        if (!command.user().equals(pr.author()) && !command.user().equals(pr.repository().forge().currentUser())) {\n-            reply.print(\"Only the author (@\" + pr.author().username() + \") is allowed to issue the `integrate` command.\");\n-\n-            \/\/ If the command author is allowed to sponsor this change, suggest that command\n-            var readyHash = ReadyForSponsorTracker.latestReadyForSponsor(pr.repository().forge().currentUser(), allComments);\n-            if (readyHash.isPresent()) {\n-                if (censusInstance.isCommitter(command.user())) {\n-                    reply.print(\" As this PR is ready to be sponsored, and you are an eligible sponsor, did you mean to issue the `\/sponsor` command?\");\n-                    return;\n-                }\n-            }\n-            reply.println();\n-            return;\n-        }\n-\n+        \/\/ Parse any argument given\n@@ -85,0 +78,1 @@\n+        Command commandArg = null;\n@@ -93,7 +87,3 @@\n-            if (arg.equals(\"auto\")) {\n-                pr.addLabel(\"auto\");\n-                reply.println(\"This pull request will be automatically integrated when it is ready\");\n-                return;\n-            } else if (arg.equals(\"manual\")) {\n-                if (pr.labelNames().contains(\"auto\")) {\n-                    pr.removeLabel(\"auto\");\n+            for (Command value : Command.values()) {\n+                if (value.name().equals(arg)) {\n+                    commandArg = value;\n@@ -101,5 +91,2 @@\n-                reply.println(\"This pull request will have to be integrated manually using the \"+\n-                              \"[\/integrate](https:\/\/wiki.openjdk.java.net\/display\/SKARA\/Pull+Request+Commands#PullRequestCommands-\/integrate) pull request command.\");\n-                return;\n-            } else {\n-                \/\/ Validate the target hash if requested\n+            }\n+            if (commandArg == null) {\n@@ -114,0 +101,54 @@\n+        if (!command.user().equals(pr.author()) && !command.user().equals(pr.repository().forge().currentUser())) {\n+            if (pr.labelNames().contains(\"deferred\")) {\n+                \/\/ Check that the command user is a committer\n+                if (!censusInstance.isCommitter(command.user())) {\n+                    reply.print(\"Only project committers are allowed to issue the `integrate` command on a deferred pull request.\");\n+                    return;\n+                }\n+                \/\/ Check that no extra arguments are added\n+                if (!command.args().isEmpty()) {\n+                    reply.print(\"Only the author (@\\\" + pr.author().username() + \\\") is allowed to issue the `integrate` command with arguments.\");\n+                    return;\n+                }\n+            } else {\n+                reply.print(\"Only the author (@\" + pr.author().username() + \") is allowed to issue the `integrate` command.\");\n+\n+                \/\/ If the command author is allowed to sponsor this change, suggest that command\n+                var readyHash = ReadyForSponsorTracker.latestReadyForSponsor(pr.repository().forge().currentUser(), allComments);\n+                if (readyHash.isPresent()) {\n+                    if (censusInstance.isCommitter(command.user())) {\n+                        reply.print(\" As this pull request is ready to be sponsored, and you are an eligible sponsor, did you mean to issue the `\/sponsor` command?\");\n+                        return;\n+                    }\n+                }\n+                reply.println();\n+                return;\n+            }\n+        }\n+\n+        if (commandArg == Command.auto) {\n+            pr.addLabel(\"auto\");\n+            reply.println(\"This pull request will be automatically integrated when it is ready\");\n+            return;\n+        } else if (commandArg == Command.manual) {\n+            if (pr.labelNames().contains(\"auto\")) {\n+                pr.removeLabel(\"auto\");\n+            }\n+            reply.println(\"This pull request will have to be integrated manually using the \" +\n+                    \"[\/integrate](https:\/\/wiki.openjdk.java.net\/display\/SKARA\/Pull+Request+Commands#PullRequestCommands-\/integrate) pull request command.\");\n+            return;\n+        } else if (commandArg == Command.defer) {\n+            pr.addLabel(\"deferred\");\n+            reply.println(\"Integration of this pull request has been deferred and may be completed by any project committer using the \" +\n+                    \"[\/integrate](https:\/\/wiki.openjdk.java.net\/display\/SKARA\/Pull+Request+Commands#PullRequestCommands-\/integrate) pull request command.\");\n+            return;\n+        } else if (commandArg == Command.undefer) {\n+            if (pr.labelNames().contains(\"deferred\")) {\n+                reply.println(\"Integration of this pull request is no longer deferred and may only be integrated by the author (@\" + pr.author().username() + \")using the \" +\n+                        \"[\/integrate](https:\/\/wiki.openjdk.java.net\/display\/SKARA\/Pull+Request+Commands#PullRequestCommands-\/integrate) pull request command.\");\n+                pr.removeLabel(\"deferred\");\n+            }\n+            reply.println(\"This pull request may now only be integrated by the author\");\n+            return;\n+        }\n+\n@@ -129,1 +170,1 @@\n-            reply.println(\"This PR has not yet been marked as ready for integration.\");\n+            reply.println(\"This pull request has not yet been marked as ready for integration.\");\n@@ -166,1 +207,8 @@\n-            var localHash = checkablePr.commit(rebasedHash.get(), censusInstance.namespace(), censusInstance.configuration().census().domain(), null, original);\n+            \/\/ If someone other than the author or the bot issued the \/integrate command, then that person\n+            \/\/ should be set as sponsor\/integrator. Otherwise pass null to use the default author.\n+            String committerId = null;\n+            if (!command.user().equals(pr.author()) && !command.user().equals(pr.repository().forge().currentUser())) {\n+                committerId = command.user().id();\n+            }\n+            var localHash = checkablePr.commit(rebasedHash.get(), censusInstance.namespace(),\n+                    censusInstance.configuration().census().domain(), committerId, original);\n@@ -277,0 +325,3 @@\n+        if (pr.labelNames().contains(\"deferred\")) {\n+            pr.removeLabel(\"deferred\");\n+        }\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/IntegrateCommand.java","additions":81,"deletions":30,"binary":false,"changes":111,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+            var botUser = credentials.getHostedRepository();\n@@ -48,1 +49,0 @@\n-            var integrator = credentials.getHostedRepository();\n@@ -52,1 +52,0 @@\n-                                           .addReviewer(integrator.forge().currentUser().id())\n@@ -54,1 +53,1 @@\n-            var mergeBot = PullRequestBot.newBuilder().repo(integrator).censusRepo(censusBuilder.build()).build();\n+            var mergeBot = PullRequestBot.newBuilder().repo(botUser).censusRepo(censusBuilder.build()).build();\n@@ -68,2 +67,2 @@\n-            var approvalPr = integrator.pullRequest(pr.id());\n-            approvalPr.addReview(Review.Verdict.APPROVED, \"Approved\");\n+            var reviewerPr = reviewer.pullRequest(pr.id());\n+            reviewerPr.addReview(Review.Verdict.APPROVED, \"Approved\");\n@@ -237,1 +236,1 @@\n-            assertLastCommentContains(pr, \"PR has not yet been marked as ready for integration\");\n+            assertLastCommentContains(pr, \"pull request has not yet been marked as ready for integration\");\n@@ -654,1 +653,1 @@\n-            assertLastCommentContains(pr, \"PR has not yet been marked as ready for integration\");\n+            assertLastCommentContains(pr, \"pull request has not yet been marked as ready for integration\");\n@@ -1299,0 +1298,99 @@\n+\n+    @Test\n+    void defer(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory();\n+             var pushedFolder = new TemporaryDirectory()) {\n+\n+            var botUser = credentials.getHostedRepository();\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var badIntegrator = credentials.getHostedRepository();\n+            var integrator = credentials.getHostedRepository();\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addCommitter(author.forge().currentUser().id())\n+                    .addReviewer(reviewer.forge().currentUser().id())\n+                    .addAuthor(badIntegrator.forge().currentUser().id())\n+                    .addCommitter(integrator.forge().currentUser().id());\n+            var mergeBot = PullRequestBot.newBuilder().repo(botUser).censusRepo(censusBuilder.build()).build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"refs\/heads\/edit\", true);\n+            var authorPr = credentials.createPullRequest(author, \"master\", \"edit\", \"This is a pull request\");\n+\n+            \/\/ Approve it as another user\n+            var reviewerPr = reviewer.pullRequest(authorPr.id());\n+            reviewerPr.addReview(Review.Verdict.APPROVED, \"Approved\");\n+\n+            \/\/ Issue \/integrate defer command and verify the PR gets deferred\n+            authorPr.addComment(\"\/integrate defer\");\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+            var deferred = authorPr.comments().stream()\n+                    .filter(comment -> comment.body().contains(\"Integration of this pull request has been deferred\"))\n+                    .count();\n+            assertEquals(1, deferred, \"Missing deferred message\");\n+            assertTrue(authorPr.labelNames().contains(\"deferred\"));\n+\n+            \/\/ Try to integrate by non committer\n+            var badIntegratorPr = badIntegrator.pullRequest(authorPr.id());\n+            badIntegratorPr.addComment(\"\/integrate\");\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+            var onlyCommitters = authorPr.comments().stream()\n+                    .filter(comment -> comment.body()\n+                            .contains(\"Only project committers are allowed to issue the `integrate` command on a deferred pull request.\"))\n+                    .count();\n+            assertEquals(1, onlyCommitters, \"Missing error about only committers can integrate\");\n+\n+            \/\/ Issue \/integrate undefer and verify the PR is no longer deferred\n+            authorPr.addComment(\"\/integrate undefer\");\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+            var undeferred = authorPr.comments().stream()\n+                    .filter(comment -> comment.body().contains(\"Integration of this pull request is no longer deferred and may only be integrated by the author\"))\n+                    .count();\n+            assertEquals(1, undeferred, \"Missing undeferred message\");\n+            assertFalse(authorPr.labelNames().contains(\"deferred\"));\n+\n+            \/\/ Defer again\n+            authorPr.addComment(\"\/integrate defer\");\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+            assertTrue(authorPr.labelNames().contains(\"deferred\"));\n+\n+            \/\/ Try to issue \/integrate with an invalid command for a non author\n+            var integratorPr = integrator.pullRequest(authorPr.id());\n+            integratorPr.addComment(\"\/integrate auto\");\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+            var invalid = authorPr.comments().stream()\n+                    .filter(comment -> comment.body().contains(\"Only the author\"))\n+                    .count();\n+            assertEquals(1, invalid, \"Missing error message\");\n+\n+            \/\/ Try to integrate by committer\n+            integratorPr.addComment(\"\/integrate\");\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+\n+            \/\/ The change should now be present on the master branch\n+            var pushedRepo = Repository.materialize(pushedFolder.path(), author.url(), \"master\");\n+            assertTrue(CheckableRepository.hasBeenEdited(pushedRepo));\n+\n+            var headHash = pushedRepo.resolve(\"HEAD\").orElseThrow();\n+            var headCommit = pushedRepo.commits(headHash.hex() + \"^..\" + headHash.hex()).asList().get(0);\n+\n+            \/\/ Author and committer should be the same\n+            assertEquals(\"Generated Committer 1\", headCommit.author().name());\n+            assertEquals(\"integrationcommitter1@openjdk.java.net\", headCommit.author().email());\n+            assertEquals(\"Generated Committer 4\", headCommit.committer().name());\n+            assertEquals(\"integrationcommitter4@openjdk.java.net\", headCommit.committer().email());\n+            assertTrue(authorPr.labelNames().contains(\"integrated\"));\n+\n+            \/\/ Ready label should have been removed\n+            assertFalse(authorPr.labelNames().contains(\"ready\"));\n+            assertFalse(authorPr.labelNames().contains(\"deferred\"));\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/IntegrateTests.java","additions":105,"deletions":7,"binary":false,"changes":112,"status":"modified"},{"patch":"@@ -95,1 +95,1 @@\n-            assertLastCommentContains(followUpPr, \"This PR has not yet been marked as ready for integration\");\n+            assertLastCommentContains(followUpPr, \"This pull request has not yet been marked as ready for integration\");\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/PreIntegrateTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -182,1 +182,1 @@\n-            assertLastCommentContains(reviewerPr,\"PR has not yet been marked as ready for integration\");\n+            assertLastCommentContains(reviewerPr,\"pull request has not yet been marked as ready for integration\");\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/ReviewersTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -190,1 +190,2 @@\n-                HostUser.create(4, \"user4\", \"User Number 4\")\n+                HostUser.create(4, \"user4\", \"User Number 4\"),\n+                HostUser.create(5, \"user5\", \"User Number 5\")\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/HostCredentials.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}