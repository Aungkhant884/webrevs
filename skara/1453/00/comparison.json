{"files":[{"patch":"@@ -92,0 +92,1 @@\n+    private final ConcurrentHashMap<String, Lock> authNonGetLocks = new ConcurrentHashMap<>();\n@@ -190,2 +191,1 @@\n-        authLocks.computeIfAbsent(authId, id -> new ReentrantLock());\n-        var authLock = authLocks.get(authId);\n+        var authLock = authLocks.computeIfAbsent(authId, id -> new ReentrantLock());\n@@ -225,0 +225,1 @@\n+            var authNonGetLock = authNonGetLocks.computeIfAbsent(authId, id -> new ReentrantLock());\n@@ -229,1 +230,2 @@\n-            try (var ignored = new LockWithTimeout(authLock)) {\n+            try (var ignored = new LockWithTimeout(authNonGetLock)) {\n+                \/\/ Perform at most one update per second\n@@ -231,8 +233,17 @@\n-                lastUpdates.put(authId, Instant.now());\n-            }\n-            \/\/ Perform at most one update per second\n-            var requiredDelay = Duration.between(Instant.now().minus(Duration.ofSeconds(1)), lastUpdate);\n-            if (!requiredDelay.isNegative()) {\n-                try {\n-                    Thread.sleep(requiredDelay.toMillis());\n-                } catch (InterruptedException ignored) {\n+                var requiredDelay = Duration.between(Instant.now().minus(Duration.ofSeconds(1)), lastUpdate);\n+                if (!requiredDelay.isNegative()) {\n+                    try {\n+                        Thread.sleep(requiredDelay.toMillis());\n+                    } catch (InterruptedException e) {\n+                        Thread.currentThread().interrupt();\n+                    }\n+                }\n+                try (var ignored2 = new LockWithTimeout(authLock)) {\n+                    var beforeCall = Instant.now();\n+                    lastUpdates.put(authId, beforeCall);\n+                    var lockDelay = Duration.between(beforeLock, beforeCall);\n+                    log.log(Level.FINE, \"Taking lock and adding required delay for \" + finalRequest.method() + \" \" + finalRequest.uri() + \" took \" + lockDelay, lockDelay);\n+                    var response = client.send(finalRequest, HttpResponse.BodyHandlers.ofString());\n+                    var callDuration = Duration.between(beforeCall, Instant.now());\n+                    log.log(Level.FINE, \"Calling \" + finalRequest.method() + \" \" + finalRequest.uri().toString() + \" took \" + callDuration, callDuration);\n+                    return response;\n@@ -240,9 +251,0 @@\n-            }\n-            try (var ignored = new LockWithTimeout(authLock)) {\n-                var beforeCall = Instant.now();\n-                var lockDelay = Duration.between(beforeLock, beforeCall);\n-                log.log(Level.FINE, \"Taking lock and adding required delay for \" + finalRequest.method() + \" \" + finalRequest.uri() + \" took \" + lockDelay, lockDelay);\n-                var response = client.send(finalRequest, HttpResponse.BodyHandlers.ofString());\n-                var callDuration = Duration.between(beforeCall, Instant.now());\n-                log.log(Level.FINE, \"Calling \" + finalRequest.method() + \" \" + finalRequest.uri().toString() + \" took \" + callDuration, callDuration);\n-                return response;\n","filename":"network\/src\/main\/java\/org\/openjdk\/skara\/network\/RestRequestCache.java","additions":22,"deletions":20,"binary":false,"changes":42,"status":"modified"}]}