{"files":[{"patch":"@@ -36,0 +36,1 @@\n+    private final boolean protectBranches;\n@@ -38,1 +39,1 @@\n-    public PullRequestBranchNotifier(Path seedFolder) {\n+    public PullRequestBranchNotifier(Path seedFolder, boolean protectBranches) {\n@@ -40,0 +41,1 @@\n+        this.protectBranches = protectBranches;\n@@ -53,0 +55,4 @@\n+            if (protectBranches) {\n+                log.info(\"Protecting branch \" + branch);\n+                pr.repository().protectBranchPattern(branch);\n+            }\n@@ -63,0 +69,4 @@\n+        if (protectBranches) {\n+            log.info(\"Removing branch protection for \" + branch);\n+            pr.repository().unprotectBranchPattern(branch);\n+        }\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/prbranch\/PullRequestBranchNotifier.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -38,1 +38,5 @@\n-        return new PullRequestBranchNotifier(seedFolder.resolve(\"seeds\"));\n+        var protectBranches = false;\n+        if (notifierConfiguration.contains(\"protect\")) {\n+            protectBranches = notifierConfiguration.get(\"protect\").asBoolean();\n+        }\n+        return new PullRequestBranchNotifier(seedFolder.resolve(\"seeds\"), protectBranches);\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/prbranch\/PullRequestBranchNotifierFactory.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-                                                                                          .put(\"prbranch\", JSON.object())))\n+                                                                                          .put(\"prbranch\", JSON.object().put(\"protect\", true))))\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/prbranch\/PullRequestBranchNotifierTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -175,0 +175,8 @@\n+    @Override\n+    public void protectBranchPattern(String ref) {\n+    }\n+\n+    @Override\n+    public void unprotectBranchPattern(String ref) {\n+    }\n+\n","filename":"bots\/tester\/src\/test\/java\/org\/openjdk\/skara\/bots\/tester\/InMemoryHostedRepository.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -108,0 +108,14 @@\n+\n+    \/**\n+     * Adds a branch protection rule based on a branch pattern. The rule prevents\n+     * normal users from pushing to the branch, but still allows admins to force\n+     * push.\n+     * @param pattern Pattern for branches\n+     *\/\n+    void protectBranchPattern(String pattern);\n+\n+    \/**\n+     * Removes a branch protection rule based on the branch pattern.\n+     * @param pattern Pattern for branches\n+     *\/\n+    void unprotectBranchPattern(String pattern);\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/HostedRepository.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -349,0 +349,12 @@\n+    @Override\n+    public void protectBranchPattern(String ref) {\n+        \/\/ This could be implemented using GraphQL, but we currently don't need it for GitHub\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public void unprotectBranchPattern(String ref) {\n+        \/\/ This could be implemented using GraphQL, but we currently don't need it for GitHub\n+        throw new UnsupportedOperationException();\n+    }\n+\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubRepository.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -410,1 +410,1 @@\n-        var branch = request.get(\"repository\/branches\/\" + ref)\n+        var branch = request.get(\"repository\/branches\/\" + URLEncoder.encode(ref, StandardCharsets.US_ASCII))\n@@ -428,0 +428,24 @@\n+    @Override\n+    public void protectBranchPattern(String ref) {\n+        var body = JSON.object()\n+                .put(\"name\", ref)\n+                .put(\"allow_force_push\", true);\n+        var existing = request.get(\"protected_branches\/\" + URLEncoder.encode(ref, StandardCharsets.US_ASCII))\n+                .onError(r -> r.statusCode() == 404 ? Optional.of(JSON.of()) : Optional.empty())\n+                .execute();\n+        \/\/ Only add protection if it doesn't already exist.\n+        if (existing.isNull()) {\n+            request.post(\"protected_branches\")\n+                    .body(body)\n+                    .execute();\n+        }\n+    }\n+\n+    @Override\n+    public void unprotectBranchPattern(String ref) {\n+        request.delete(\"protected_branches\/\" + URLEncoder.encode(ref, StandardCharsets.US_ASCII))\n+                .header(\"Content-Type\", \"application\/json\")\n+                .onError(r -> r.statusCode() == 404 ? Optional.of(JSON.of()) : Optional.empty())\n+                .execute();\n+    }\n+\n@@ -431,1 +455,2 @@\n-               .execute();\n+                .header(\"Content-Type\", \"application\/json\")\n+                .execute();\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabRepository.java","additions":27,"deletions":2,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import org.openjdk.skara.test.TemporaryDirectory;\n@@ -36,0 +37,1 @@\n+import org.openjdk.skara.vcs.git.GitRepository;\n@@ -190,0 +192,29 @@\n+\n+    @Test\n+    void branchProtection() throws IOException {\n+        var settings = ManualTestSettings.loadManualTestSettings();\n+        var username = settings.getProperty(\"gitlab.user\");\n+        var token = settings.getProperty(\"gitlab.pat\");\n+        var credential = new Credential(username, token);\n+        var uri = URIBuilder.base(settings.getProperty(\"gitlab.uri\")).build();\n+        var gitLabHost = new GitLabHost(\"gitlab\", uri, false, credential, Set.of());\n+        var gitLabRepo = gitLabHost.repository(settings.getProperty(\"gitlab.repository\")).orElseThrow();\n+        var branchName = \"pr\/4711\";\n+\n+        gitLabRepo.protectBranchPattern(branchName);\n+        \/\/ Don't fail on repeated invocations\n+        gitLabRepo.protectBranchPattern(branchName);\n+\n+        try (var tempDir = new TemporaryDirectory()) {\n+            var localRepoDir = tempDir.path().resolve(\"local\");\n+            var localRepo = GitRepository.clone(gitLabRepo.url(), localRepoDir, false, null);\n+            var head = localRepo.head();\n+            localRepo.push(head, gitLabRepo.url(), branchName, true);\n+\n+            gitLabRepo.unprotectBranchPattern(branchName);\n+            \/\/ Don't fail on repeated invocations\n+            gitLabRepo.unprotectBranchPattern(branchName);\n+\n+            gitLabRepo.deleteBranch(branchName);\n+        }\n+    }\n","filename":"forge\/src\/test\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabRestApiTest.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -52,0 +52,1 @@\n+    private final Set<String> protectedBranchPatterns = new HashSet<>();\n@@ -272,0 +273,10 @@\n+    @Override\n+    public void protectBranchPattern(String pattern) {\n+        protectedBranchPatterns.add(pattern);\n+    }\n+\n+    @Override\n+    public void unprotectBranchPattern(String pattern) {\n+        protectedBranchPatterns.remove(pattern);\n+    }\n+\n@@ -275,0 +286,7 @@\n+            for (String protectedBranchPattern : protectedBranchPatterns) {\n+                var pattern = Pattern.compile(protectedBranchPattern.replace(\"*\", \".*\"));\n+                if (pattern.matcher(ref).matches()) {\n+                    throw new RuntimeException(\"Branch \" + ref + \" is protected with pattern '\"\n+                            + protectedBranchPattern + \"' and cannot be removed\");\n+                }\n+            }\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestHostedRepository.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"}]}