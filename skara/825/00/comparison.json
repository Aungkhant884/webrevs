{"files":[{"patch":"@@ -27,0 +27,1 @@\n+import org.openjdk.skara.forge.PullRequestBody;\n@@ -163,1 +164,2 @@\n-        var allCommands = Stream.concat(extractCommands(pr.body(), \"body\", pr.author()).stream(),\n+        var body = PullRequestBody.parse(pr).bodyText();\n+        var allCommands = Stream.concat(extractCommands(body, \"body\", pr.author()).stream(),\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CommandWorkItem.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import java.util.List;\n@@ -310,0 +311,44 @@\n+\n+    @Test\n+    void summaryCommandInBodyWithBotComment(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var integrator = credentials.getHostedRepository();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                                           .addAuthor(author.forge().currentUser().id());\n+            var mergeBot = PullRequestBot.newBuilder().repo(integrator).censusRepo(censusBuilder.build()).build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"This is a pull request\", List.of(\n+                \"\/summary\",\n+                \"This is a multi-line summary\",\n+                \"\",\n+                \"With multiple paragraphs\",\n+                \"\",\n+                \"Even a final one at the end\"\n+            ));\n+\n+            \/\/ Run the bot\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+\n+            \/\/ The bot should reply with some help\n+            assertLastCommentContains(pr, \"Setting summary to:\\n\\n\" +\n+                                          \"```\\n\" +\n+                                          \"This is a multi-line summary\\n\" +\n+                                          \"\\n\" +\n+                                          \"With multiple paragraphs\\n\" +\n+                                          \"\\n\" +\n+                                          \"Even a final one at the end\\n\" +\n+                                          \"```\\n\");\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CommandTests.java","additions":45,"deletions":0,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -34,2 +34,0 @@\n-    private static final Pattern cutoffPattern = Pattern.compile(\"^<!-- Anything below this marker will be .*? -->$\");\n-\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/PullRequestBody.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}