{"files":[{"patch":"@@ -41,0 +41,1 @@\n+    private final static String TEST_REQUEST_LABEL = \"test-request\";\n@@ -356,0 +357,1 @@\n+                pr.addLabel(TEST_REQUEST_LABEL);\n@@ -361,0 +363,4 @@\n+            if (pr.labels().contains(TEST_REQUEST_LABEL)) {\n+                pr.removeLabel(TEST_REQUEST_LABEL);\n+            }\n+\n","filename":"bots\/tester\/src\/main\/java\/org\/openjdk\/skara\/bots\/tester\/TestWorkItem.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+    Set<String> labels = new TreeSet<>();\n@@ -212,0 +213,1 @@\n+        labels.add(label);\n@@ -216,0 +218,1 @@\n+        labels.remove(label);\n@@ -220,1 +223,1 @@\n-        return null;\n+        return new ArrayList<String>(labels);\n","filename":"bots\/tester\/src\/test\/java\/org\/openjdk\/skara\/bots\/tester\/InMemoryPullRequest.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1121,0 +1121,82 @@\n+    @Test\n+    void pendingTestShouldHaveTestRequestLabel() throws IOException {\n+        try (var tmp = new TemporaryDirectory()) {\n+            var ci = new InMemoryContinuousIntegration();\n+            var approvers = \"0\";\n+            var available = List.of(\"tier1\", \"tier2\", \"tier3\");\n+            var defaultJobs = List.of(\"tier1\");\n+            var name = \"test\";\n+            var storage = tmp.path().resolve(\"storage\");\n+            var scratch = tmp.path().resolve(\"storage\");\n+\n+            var bot = new HostUser(1, \"bot\", \"openjdk [bot]\");\n+            var host = new InMemoryHost();\n+            host.currentUserDetails = bot;\n+\n+            var repo = new InMemoryHostedRepository();\n+            repo.host = host;\n+\n+            var pr = new InMemoryPullRequest();\n+            pr.repository = repo;\n+\n+            var duke = new HostUser(0, \"duke\", \"Duke\");\n+            host.groups = Map.of(approvers, Set.of(duke));\n+            pr.author = duke;\n+            pr.headHash = new Hash(\"01234567890123456789012345789012345789\");\n+\n+            var now = ZonedDateTime.now();\n+            var comment = new Comment(\"0\", \"\/test foobar\", duke, now, now);\n+            pr.comments = new ArrayList<>(List.of(comment));\n+\n+            var item = new TestWorkItem(ci, approvers, Set.of(), available, defaultJobs, name, storage, pr,\n+                                        u -> false);\n+\n+            \/\/ Non-existing test group should result in error\n+            item.run(scratch);\n+\n+            var comments = pr.comments();\n+            assertEquals(2, comments.size());\n+            assertEquals(comment, comments.get(0));\n+\n+            var secondComment = comments.get(1);\n+            assertEquals(bot, secondComment.author());\n+\n+            var lines = secondComment.body().split(\"\\n\");\n+            assertEquals(2, lines.length);\n+            assertEquals(\"<!-- TEST ERROR -->\", lines[0]);\n+            assertEquals(\"@duke the test group foobar does not exist\", lines[1]);\n+\n+            \/\/ Trying to test again should be fine\n+            var thirdComment = new Comment(\"2\", \"\/test tier1\", duke, now, now);\n+            pr.comments.add(thirdComment);\n+            item.run(scratch);\n+\n+            comments = pr.comments();\n+            assertEquals(4, comments.size());\n+            assertEquals(comment, comments.get(0));\n+            assertEquals(secondComment, comments.get(1));\n+            assertEquals(thirdComment, comments.get(2));\n+\n+            var fourthComment = comments.get(3);\n+            assertEquals(bot, fourthComment.author());\n+\n+            lines = fourthComment.body().split(\"\\n\");\n+            assertEquals(\"<!-- TEST PENDING -->\", lines[0]);\n+            assertEquals(\"<!-- 01234567890123456789012345789012345789 -->\", lines[1]);\n+            assertEquals(\"<!-- tier1 -->\", lines[2]);\n+            assertEquals(\"@duke you need to get approval to run the tests in tier1 for commits up until 01234567\",\n+                         lines[3]);\n+\n+            assertEquals(List.of(\"test-request\"), pr.labels());\n+\n+            \/\/ Nothing should change if we run it yet again\n+            item.run(scratch);\n+\n+            comments = pr.comments();\n+            assertEquals(4, comments.size());\n+            assertEquals(comment, comments.get(0));\n+            assertEquals(secondComment, comments.get(1));\n+            assertEquals(thirdComment, comments.get(2));\n+            assertEquals(fourthComment, comments.get(3));\n+        }\n+    }\n","filename":"bots\/tester\/src\/test\/java\/org\/openjdk\/skara\/bots\/tester\/TestWorkItemTests.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"modified"}]}