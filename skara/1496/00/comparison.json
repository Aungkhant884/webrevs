{"files":[{"patch":"@@ -25,6 +25,0 @@\n-import java.util.Optional;\n-\n-import org.openjdk.skara.forge.PullRequest;\n-import org.openjdk.skara.jbs.JdkVersion;\n-import org.openjdk.skara.jcheck.JCheckConfiguration;\n-\n@@ -39,18 +33,0 @@\n-    \/**\n-     * Gets jcheck configured fix version from a pull request. This only works for\n-     * repositories where the fix version is configured in .jcheck\/conf.\n-     *\/\n-    public static Optional<JdkVersion> getVersion(PullRequest pr) {\n-        var confFile = pr.repository().fileContents(\".jcheck\/conf\", pr.headHash().hex())\n-                .orElse(pr.repository().fileContents(\".jcheck\/conf\", pr.targetRef()).orElse(null));\n-        if (confFile == null) {\n-            return Optional.empty();\n-        }\n-        var configuration = JCheckConfiguration.parse(confFile.lines().toList());\n-        var version = configuration.general().version().orElse(null);\n-        if (version == null || \"\".equals(version)) {\n-            return Optional.empty();\n-        }\n-        return JdkVersion.parse(version);\n-    }\n-\n","filename":"bots\/common\/src\/main\/java\/org\/openjdk\/skara\/bots\/common\/BotUtils.java","additions":0,"deletions":24,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import org.openjdk.skara.jbs.JdkVersion;\n@@ -36,0 +37,3 @@\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n@@ -40,0 +44,1 @@\n+    private static final Pattern VERSION_MARKER_PATTERN = Pattern.compile(\"<!-- fixVersion: '(.*?)' -->\");\n@@ -118,2 +123,1 @@\n-\n-                var versionOpt = BotUtils.getVersion(pr);\n+                var versionOpt = getVersion(pr, allComments);\n@@ -193,1 +197,1 @@\n-            var versionOpt = BotUtils.getVersion(pr);\n+            var versionOpt = getVersion(pr, allComments);\n@@ -253,0 +257,18 @@\n+\n+    \/**\n+     * Gets jcheck configured fix version from a pull request. This only works for\n+     * repositories where the fix version is configured in .jcheck\/conf.\n+     *\/\n+    private Optional<JdkVersion> getVersion(PullRequest pr, List<Comment> comments) {\n+        var versionComment = comments.stream()\n+                .filter(comment -> comment.author().equals(pr.repository().forge().currentUser()))\n+                .flatMap(comment -> comment.body().lines())\n+                .map(VERSION_MARKER_PATTERN::matcher)\n+                .filter(Matcher::find)\n+                .findFirst()\n+                .orElse(null);\n+        if (versionComment == null) {\n+            return Optional.empty();\n+        }\n+        return JdkVersion.parse(versionComment.group(1));\n+    }\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CSRCommand.java","additions":25,"deletions":3,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import org.openjdk.skara.jcheck.JCheckConfiguration;\n@@ -73,0 +74,2 @@\n+    private static final String VERSION_HEADER_MARKER = \"<!-- version -->\";\n+    private static final String VERSION_MARKER = \"<!-- fixVersion: '%s' -->\";\n@@ -1179,0 +1182,1 @@\n+            var confFile = localRepo.show(Path.of(\".jcheck\/conf\"), localHash);\n@@ -1180,2 +1184,9 @@\n-            if (sourceBranchJCheckConfValid) {\n-                version = BotUtils.getVersion(pr).orElse(null);\n+            if (confFile.isPresent() && sourceBranchJCheckConfValid) {\n+                String confFileContent = new String(confFile.get());\n+                var configuration = JCheckConfiguration.parse(confFileContent.lines().toList());\n+                var versionString = configuration.general().version().orElse(null);\n+\n+                if (versionString != null && !\"\".equals(versionString)) {\n+                    version = JdkVersion.parse(versionString).orElse(null);\n+                    updateVersionComment(pr, versionString, comments);\n+                }\n@@ -1183,0 +1194,1 @@\n+\n@@ -1417,0 +1429,18 @@\n+    private void updateVersionComment(PullRequest pr, String versionString, List<Comment> comments) {\n+        var existing = comments.stream()\n+                .filter(comment -> comment.author().equals(pr.repository().forge().currentUser()))\n+                .filter(comment -> comment.body().contains(VERSION_HEADER_MARKER))\n+                .findFirst();\n+\n+        var comment = VERSION_HEADER_MARKER + \"\\n\";\n+        comment += \"The fixVersion for this pr is \" + versionString + \"\\n\";\n+        comment += String.format(VERSION_MARKER, versionString);\n+\n+        if (existing.isEmpty()) {\n+            pr.addComment(comment);\n+        } else {\n+            if (!existing.get().body().equals(comment)) {\n+                pr.updateComment(existing.get().id(), comment);\n+            }\n+        }\n+    }\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":32,"deletions":2,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -588,0 +588,60 @@\n+\n+    @Test\n+    void testFindCSRWithVersionInMergedBranch(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var bot = credentials.getHostedRepository();\n+            var issueProject = credentials.getIssueProject();\n+            var issue = issueProject.createIssue(\"This is an issue\", List.of(), Map.of());\n+            issue.setProperty(\"issuetype\", JSON.of(\"Bug\"));\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addReviewer(reviewer.forge().currentUser().id())\n+                    .addCommitter(author.forge().currentUser().id());\n+            var prBot = PullRequestBot.newBuilder().repo(bot).issueProject(issueProject).censusRepo(censusBuilder.build()).enableCsr(true).build();\n+            var csrIssueBot = new CSRIssueBot(issueProject, List.of(author), Map.of(bot.name(), prBot));\n+\n+            \/\/ Run issue bot once to initialize lastUpdatedAt\n+            TestBotRunner.runPeriodicItems(csrIssueBot);\n+\n+            var csr = issueProject.createIssue(\"This is a CSR\", List.of(), Map.of());\n+            csr.setState(Issue.State.OPEN);\n+            csr.setProperty(\"issuetype\", JSON.of(\"CSR\"));\n+            csr.setProperty(\"fixVersions\", JSON.array().add(\"17\"));\n+            issue.addLink(Link.create(csr, \"csr for\").build());\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.authenticatedUrl(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.authenticatedUrl(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", issue.id() + \": This is an issue\");\n+            PullRequestUtils.postPullRequestLinkComment(issue, pr);\n+\n+            \/\/ Change .jcheck\/conf in targetBranch\n+            localRepo.checkout(masterHash);\n+            var defaultConf = Files.readString(localRepo.root().resolve(\".jcheck\/conf\"), StandardCharsets.UTF_8);\n+            var newConf = defaultConf.replace(\"version=0.1\", \"version=17\");\n+            Files.writeString(localRepo.root().resolve(\".jcheck\/conf\"), newConf, StandardCharsets.UTF_8);\n+            localRepo.add(localRepo.root().resolve(\".jcheck\/conf\"));\n+            var confHash = localRepo.commit(\"Set version as 17\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(confHash, author.authenticatedUrl(), \"master\", true);\n+\n+            \/\/ The bot will be able to find the csr although fixVersion in source branch is 0.1\n+            TestBotRunner.runPeriodicItems(csrIssueBot);\n+            assertTrue(pr.store().labelNames().contains(\"csr\"));\n+\n+            reviewer.pullRequest(pr.id()).addComment(\"\/csr unneeded\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+\n+            assertTrue(pr.store().comments().get(pr.store().comments().size() - 1).body()\n+                    .contains(\"The CSR requirement cannot be removed as there is already a CSR associated with the issue\"));\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CSRBotTests.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"modified"}]}