{"files":[{"patch":"@@ -25,6 +25,0 @@\n-import java.util.Optional;\n-\n-import org.openjdk.skara.forge.PullRequest;\n-import org.openjdk.skara.jbs.JdkVersion;\n-import org.openjdk.skara.jcheck.JCheckConfiguration;\n-\n@@ -39,18 +33,0 @@\n-    \/**\n-     * Gets jcheck configured fix version from a pull request. This only works for\n-     * repositories where the fix version is configured in .jcheck\/conf.\n-     *\/\n-    public static Optional<JdkVersion> getVersion(PullRequest pr) {\n-        var confFile = pr.repository().fileContents(\".jcheck\/conf\", pr.headHash().hex())\n-                .orElse(pr.repository().fileContents(\".jcheck\/conf\", pr.targetRef()).orElse(null));\n-        if (confFile == null) {\n-            return Optional.empty();\n-        }\n-        var configuration = JCheckConfiguration.parse(confFile.lines().toList());\n-        var version = configuration.general().version().orElse(null);\n-        if (version == null || \"\".equals(version)) {\n-            return Optional.empty();\n-        }\n-        return JdkVersion.parse(version);\n-    }\n-\n","filename":"bots\/common\/src\/main\/java\/org\/openjdk\/skara\/bots\/common\/BotUtils.java","additions":0,"deletions":24,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-import org.openjdk.skara.bots.common.BotUtils;\n@@ -29,2 +28,0 @@\n-import org.openjdk.skara.jbs.Backports;\n-import org.openjdk.skara.json.JSON;\n@@ -34,1 +31,0 @@\n-import java.util.ArrayList;\n@@ -36,0 +32,2 @@\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n@@ -41,0 +39,3 @@\n+    private static final Pattern CSR_PROGRESS_PATTERN = Pattern.compile(\"- \\\\[[ x]?\\\\] Change requires CSR request \\\\[(.*?)\\\\]\\\\((.*?)\\\\) to be approved\");\n+    private static final Pattern RESOLVED_CSR_PROGRESS_PATTERN = Pattern.compile(\"- \\\\[x\\\\] Change requires CSR request \\\\[(.*?)\\\\]\\\\((.*?)\\\\) to be approved\");\n+\n@@ -55,1 +56,7 @@\n-                      \"an issue in JBS, please use the `\/issue` command in a comment in this pull request.\");\n+                      \"an issue in JBS, please update the title of this pull request to just the issue ID.\");\n+    }\n+\n+    private static void multipleIssueReply(PullRequest pr, PrintWriter writer) {\n+        writer.println(\"@\" + pr.author().username() + \" please create a [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request, \" +\n+                \"with the correct fix version, for at least one of the issues associated with this pull request.\" +\n+                \" This pull request cannot be integrated until all the CSR request are approved.\");\n@@ -58,1 +65,1 @@\n-    private static void linkReply(PullRequest pr, Issue issue, PrintWriter writer) {\n+    private static void singleIssueLinkReply(PullRequest pr, Issue issue, PrintWriter writer) {\n@@ -99,11 +106,5 @@\n-            var issueProject = bot.issueProject();\n-            var mainIssue = org.openjdk.skara.vcs.openjdk.Issue.fromStringRelaxed(pr.title());\n-            if (issueProject == null || mainIssue.isEmpty()) {\n-                csrUnneededReply(pr, reply);\n-                return;\n-            }\n-\n-            \/\/ All the issues this pr solves\n-            var issues = new ArrayList<org.openjdk.skara.vcs.openjdk.Issue>();\n-            issues.add(mainIssue.get());\n-            issues.addAll(SolvesTracker.currentSolved(pr.repository().forge().currentUser(), pr.comments()));\n+            var csrs = pr.body()\n+                    .lines()\n+                    .map(CSR_PROGRESS_PATTERN::matcher)\n+                    .filter(Matcher::matches)\n+                    .toList();\n@@ -111,5 +112,4 @@\n-            var containsOpenCsrIssue = false;\n-            for (var issue : issues) {\n-                var jbsIssueOpt = issueProject.issue(issue.shortId());\n-                if (jbsIssueOpt.isEmpty()) {\n-                    continue;\n+            if (!csrs.isEmpty()) {\n+                var csrLinks = new StringBuilder();\n+                for (Matcher csr : csrs) {\n+                    csrLinks.append(\"[\").append(csr.group(1)).append(\"](\").append(csr.group(2)).append(\")\").append(\" \");\n@@ -117,26 +117,2 @@\n-                var jbsIssue = jbsIssueOpt.get();\n-\n-                var versionOpt = BotUtils.getVersion(pr);\n-                if (versionOpt.isEmpty()) {\n-                    break;\n-                }\n-\n-                var csrOptional = Backports.findCsr(jbsIssue, versionOpt.get());\n-                if (csrOptional.isEmpty()) {\n-                    continue;\n-                }\n-                var csrIssue = csrOptional.get();\n-\n-                var resolution = csrIssue.properties().get(\"resolution\");\n-                if (resolution == null || resolution.isNull()\n-                        || resolution.get(\"name\") == null || resolution.get(\"name\").isNull()\n-                        || csrIssue.state() != Issue.State.CLOSED\n-                        || !resolution.get(\"name\").asString().equals(\"Withdrawn\")) {\n-                    \/\/ The issue has a non-withdrawn csr issue, the bot should direct the user to withdraw the csr firstly.\n-                    reply.println(\"The CSR requirement cannot be removed as there is already a CSR associated with the issue [\" +\n-                            jbsIssue.id() + \"](\" + jbsIssue.webUrl() + \"). Please withdraw the CSR [\" + csrIssue.id() +\n-                            \"](\" + csrIssue.webUrl() + \") and then use the command `\/csr unneeded` again.\");\n-                    containsOpenCsrIssue = true;\n-                }\n-            }\n-            if (containsOpenCsrIssue) {\n+                reply.println(\"The CSR requirement cannot be removed as CSR issues already exist. Please withdraw \" + csrLinks +\n+                        \"and then use the command `\/csr unneeded` again.\");\n@@ -177,9 +153,5 @@\n-        \/\/ All the issues this pr solves\n-        var issues = new ArrayList<org.openjdk.skara.vcs.openjdk.Issue>();\n-        issues.add(mainIssue.get());\n-        issues.addAll(SolvesTracker.currentSolved(pr.repository().forge().currentUser(), pr.comments()));\n-\n-        var approvedCsrIssues = 0;\n-        var openCsrIssues = 0;\n-        var withdrawnCsrIssues = 0;\n-        var csrIssues = 0;\n+        var resolvedCSRs = pr.body()\n+                .lines()\n+                .map(RESOLVED_CSR_PROGRESS_PATTERN::matcher)\n+                .filter(Matcher::matches)\n+                .toList();\n@@ -187,4 +159,4 @@\n-        for (var issue : issues) {\n-            var jbsIssueOpt = issueProject.issue(issue.shortId());\n-            if (jbsIssueOpt.isEmpty()) {\n-                continue;\n+        if (!resolvedCSRs.isEmpty()) {\n+            var csrLinks = new StringBuilder();\n+            for (Matcher resolvedCSR : resolvedCSRs) {\n+                csrLinks.append(\"[\").append(resolvedCSR.group(1)).append(\"](\").append(resolvedCSR.group(2)).append(\")\").append(\" \");\n@@ -192,37 +164,3 @@\n-            var jbsIssue = jbsIssueOpt.get();\n-            var versionOpt = BotUtils.getVersion(pr);\n-            if (versionOpt.isEmpty()) {\n-                break;\n-            }\n-\n-            var csrOptional = Backports.findCsr(jbsIssueOpt.get(), versionOpt.get());\n-            if (csrOptional.isEmpty()) {\n-                continue;\n-            }\n-            \/\/ Found a csr issue for one of the issues associated with this pr\n-            var csr = csrOptional.get();\n-            csrIssues++;\n-\n-            var resolutionName = \"Unresolved\";\n-            var resolution = csr.properties().getOrDefault(\"resolution\", JSON.of());\n-            if (resolution.isObject() && resolution.asObject().contains(\"name\")) {\n-                var nameField = resolution.get(\"name\");\n-                if (nameField.isString()) {\n-                    resolutionName = resolution.get(\"name\").asString();\n-                }\n-            }\n-            if (csr.state() == Issue.State.CLOSED && resolutionName.equals(\"Approved\")) {\n-                reply.println(\"the issue for this pull request, [\" + jbsIssue.id() + \"](\" + jbsIssue.webUrl() + \"), already has \" +\n-                        \"an approved CSR request: [\" + csr.id() + \"](\" + csr.webUrl() + \")\");\n-                approvedCsrIssues++;\n-            } else if (csr.state() == Issue.State.CLOSED && resolutionName.equals(\"Withdrawn\")) {\n-                withdrawnCsrIssues++;\n-            } else {\n-                reply.println(\"this pull request will not be integrated until the [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) \" +\n-                        \"request \" + \"[\" + csr.id() + \"](\" + csr.webUrl() + \")\" + \" for issue \" +\n-                        \"[\" + jbsIssue.id() + \"](\" + jbsIssue.webUrl() + \") has been approved.\");\n-                openCsrIssues++;\n-            }\n-        }\n-        \/\/ All the issues associated with pr either don't have csr issue or the csr issue has already been withdrawn\n-        if (csrIssues == withdrawnCsrIssues) {\n+            reply.println(\"This pull request already associated with these approved CSRs: \" + csrLinks);\n+            reply.println(CSR_NEEDED_MARKER);\n+        } else {\n@@ -230,2 +168,5 @@\n-            if (issues.size() == 1) {\n-                linkReply(pr, jbsMainIssueOpt.get(), reply);\n+            var issues = SolvesTracker.currentSolved(pr.repository().forge().currentUser(), pr.comments());\n+            if (issues.isEmpty()) {\n+                singleIssueLinkReply(pr, jbsMainIssueOpt.get(), reply);\n+            } else {\n+                multipleIssueReply(pr, reply);\n@@ -234,7 +175,0 @@\n-        } else if (csrIssues == approvedCsrIssues) {\n-            \/\/ All the csr issues are approved\n-            reply.println(CSR_NEEDED_MARKER);\n-        } else if (openCsrIssues > 0) {\n-            \/\/ At least one csr issue open\n-            reply.println(CSR_NEEDED_MARKER);\n-            pr.addLabel(CSR_LABEL);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CSRCommand.java","additions":41,"deletions":107,"binary":false,"changes":148,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import org.openjdk.skara.jcheck.JCheckConfiguration;\n@@ -1179,0 +1180,1 @@\n+            var confFile = localRepo.lines(Path.of(\".jcheck\/conf\"), localHash);\n@@ -1180,2 +1182,7 @@\n-            if (sourceBranchJCheckConfValid) {\n-                version = BotUtils.getVersion(pr).orElse(null);\n+            if (confFile.isPresent() && sourceBranchJCheckConfValid) {\n+                var configuration = JCheckConfiguration.parse(confFile.get());\n+                var versionString = configuration.general().version().orElse(null);\n+\n+                if (versionString != null && !\"\".equals(versionString)) {\n+                    version = JdkVersion.parse(versionString).orElse(null);\n+                }\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -441,0 +441,2 @@\n+            \/\/ Run csrIssueBot to update pr body\n+            TestBotRunner.runPeriodicItems(csrIssueBot);\n@@ -479,0 +481,2 @@\n+            \/\/ Run csrIssueBot to update the pr body\n+            TestBotRunner.runPeriodicItems(csrIssueBot);\n@@ -588,0 +592,61 @@\n+\n+    @Test\n+    void testFindCSRWithVersionInMergedBranch(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var bot = credentials.getHostedRepository();\n+            var issueProject = credentials.getIssueProject();\n+            var issue = issueProject.createIssue(\"This is an issue\", List.of(), Map.of());\n+            issue.setProperty(\"issuetype\", JSON.of(\"Bug\"));\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addReviewer(reviewer.forge().currentUser().id())\n+                    .addCommitter(author.forge().currentUser().id());\n+            var prBot = PullRequestBot.newBuilder().repo(bot).issueProject(issueProject).censusRepo(censusBuilder.build()).enableCsr(true).build();\n+            var csrIssueBot = new CSRIssueBot(issueProject, List.of(author), Map.of(bot.name(), prBot));\n+\n+            \/\/ Run issue bot once to initialize lastUpdatedAt\n+            TestBotRunner.runPeriodicItems(csrIssueBot);\n+\n+            var csr = issueProject.createIssue(\"This is a CSR\", List.of(), Map.of());\n+            csr.setState(Issue.State.OPEN);\n+            csr.setProperty(\"issuetype\", JSON.of(\"CSR\"));\n+            csr.setProperty(\"fixVersions\", JSON.array().add(\"17\"));\n+            issue.addLink(Link.create(csr, \"csr for\").build());\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.authenticatedUrl(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.authenticatedUrl(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", issue.id() + \": This is an issue\");\n+            PullRequestUtils.postPullRequestLinkComment(issue, pr);\n+\n+            \/\/ Change .jcheck\/conf in targetBranch\n+            localRepo.checkout(masterHash);\n+            var defaultConf = Files.readString(localRepo.root().resolve(\".jcheck\/conf\"), StandardCharsets.UTF_8);\n+            var newConf = defaultConf.replace(\"version=0.1\", \"version=17\");\n+            Files.writeString(localRepo.root().resolve(\".jcheck\/conf\"), newConf, StandardCharsets.UTF_8);\n+            localRepo.add(localRepo.root().resolve(\".jcheck\/conf\"));\n+            var confHash = localRepo.commit(\"Set version as 17\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(confHash, author.authenticatedUrl(), \"master\", true);\n+\n+            \/\/ The bot will be able to find the csr although fixVersion in source branch is 0.1\n+            TestBotRunner.runPeriodicItems(csrIssueBot);\n+            assertTrue(pr.store().labelNames().contains(\"csr\"));\n+\n+            reviewer.pullRequest(pr.id()).addComment(\"\/csr unneeded\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+\n+            assertTrue(pr.store().comments().get(pr.store().comments().size() - 1).body()\n+                    .contains(\"@user2 The CSR requirement cannot be removed as CSR issues already exist. \" +\n+                            \"Please withdraw [TEST-2](http:\/\/localhost\/project\/testTEST-2) and then use the command `\/csr unneeded` again.\"));\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CSRBotTests.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import org.openjdk.skara.forge.PullRequestUtils;\n@@ -150,3 +151,2 @@\n-            \/\/ The bot should reply with a message that the CSR is already aproved\n-            assertLastCommentContains(pr, \"the issue for this pull request\");\n-            assertLastCommentContains(pr, \"already has an approved CSR request\");\n+            \/\/ The bot should reply with a message that the CSR is already approved\n+            assertLastCommentContains(pr, \"This pull request already associated with these approved CSRs:\");\n@@ -423,1 +423,1 @@\n-\n+            issue.setProperty(\"issuetype\", JSON.of(\"Bug\"));\n@@ -434,0 +434,4 @@\n+            var csrIssueBot = new CSRIssueBot(issues, List.of(author), Map.of(bot.name(), prBot));\n+\n+            \/\/ Run issue bot once to initialize lastUpdatedAt\n+            TestBotRunner.runPeriodicItems(csrIssueBot);\n@@ -446,0 +450,1 @@\n+            PullRequestUtils.postPullRequestLinkComment(issue, pr);\n@@ -464,3 +469,1 @@\n-            assertLastCommentContains(pr, \"The CSR requirement cannot be removed as there is already a CSR associated with the issue [\" +\n-                    issue.id() + \"](\" + issue.webUrl() + \"). Please withdraw the CSR [\"\n-                    + csr.id() + \"](\" + csr.webUrl() + \") and then use the command `\/csr unneeded` again.\");\n+            assertLastCommentContains(pr, \"The CSR requirement cannot be removed as CSR issues already exist.\");\n@@ -475,0 +478,1 @@\n+            TestBotRunner.runPeriodicItems(csrIssueBot);\n@@ -498,0 +502,1 @@\n+            issue.setProperty(\"issuetype\", JSON.of(\"Bug\"));\n@@ -508,0 +513,4 @@\n+            var csrIssueBot = new CSRIssueBot(issues, List.of(author), Map.of(bot.name(), prBot));\n+\n+            \/\/ Run issue bot once to initialize lastUpdatedAt\n+            TestBotRunner.runPeriodicItems(csrIssueBot);\n@@ -520,0 +529,1 @@\n+            PullRequestUtils.postPullRequestLinkComment(issue, pr);\n@@ -538,3 +548,1 @@\n-            assertLastCommentContains(pr, \"The CSR requirement cannot be removed as there is already a CSR associated with the issue [\" +\n-                    issue.id() + \"](\" + issue.webUrl() + \"). Please withdraw the CSR [\"\n-                    + csr.id() + \"](\" + csr.webUrl() + \") and then use the command `\/csr unneeded` again.\");\n+            assertLastCommentContains(pr, \"The CSR requirement cannot be removed as CSR issues already exist.\");\n@@ -550,0 +558,1 @@\n+            TestBotRunner.runPeriodicItems(csrIssueBot);\n@@ -710,1 +719,1 @@\n-            var botRepo = credentials.getHostedRepository();\n+            var bot = credentials.getHostedRepository();\n@@ -714,2 +723,0 @@\n-            var bot = PullRequestBot.newBuilder().repo(botRepo).enableCsr(true)\n-                    .censusRepo(censusBuilder.build()).issueProject(issueProject).build();\n@@ -729,0 +736,8 @@\n+            var prBot = PullRequestBot.newBuilder().repo(bot).enableCsr(true)\n+                    .censusRepo(censusBuilder.build()).issueProject(issueProject).build();\n+\n+            var csrIssueBot = new CSRIssueBot(issueProject, List.of(author), Map.of(bot.name(), prBot));\n+\n+            \/\/ Run issue prBot once to initialize lastUpdatedAt\n+            TestBotRunner.runPeriodicItems(csrIssueBot);\n+\n@@ -756,1 +771,3 @@\n-            \/\/ Run bot. Request a CSR.\n+            PullRequestUtils.postPullRequestLinkComment(issue, pr);\n+\n+            \/\/ Run prBot. Request a CSR.\n@@ -758,1 +775,1 @@\n-            TestBotRunner.runPeriodicItems(bot);\n+            TestBotRunner.runPeriodicItems(prBot);\n@@ -764,1 +781,1 @@\n-            assertLastCommentContains(pr, \"please create a [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request for issue\");\n+            assertLastCommentContains(pr, \"please create a [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request\");\n@@ -769,1 +786,1 @@\n-            TestBotRunner.runPeriodicItems(bot);\n+            TestBotRunner.runPeriodicItems(prBot);\n@@ -785,1 +802,3 @@\n-            \/\/ Run bot. Request a CSR.\n+            PullRequestUtils.postPullRequestLinkComment(issue, pr);\n+\n+            \/\/ Run prBot. Request a CSR.\n@@ -787,1 +806,1 @@\n-            TestBotRunner.runPeriodicItems(bot);\n+            TestBotRunner.runPeriodicItems(prBot);\n@@ -793,1 +812,1 @@\n-            assertLastCommentContains(pr, \"please create a [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request for issue\");\n+            assertLastCommentContains(pr, \"please create a [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request\");\n@@ -798,1 +817,1 @@\n-            TestBotRunner.runPeriodicItems(bot);\n+            TestBotRunner.runPeriodicItems(prBot);\n@@ -814,1 +833,3 @@\n-            \/\/ Run bot. Request a CSR.\n+            PullRequestUtils.postPullRequestLinkComment(issue, pr);\n+\n+            \/\/ Run prBot. Request a CSR.\n@@ -816,1 +837,1 @@\n-            TestBotRunner.runPeriodicItems(bot);\n+            TestBotRunner.runPeriodicItems(prBot);\n@@ -822,1 +843,1 @@\n-            assertLastCommentContains(pr, \"please create a [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request for issue\");\n+            assertLastCommentContains(pr, \"please create a [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request\");\n@@ -827,1 +848,1 @@\n-            TestBotRunner.runPeriodicItems(bot);\n+            TestBotRunner.runPeriodicItems(prBot);\n@@ -835,1 +856,3 @@\n-            \/\/ Run bot. Request a CSR.\n+            \/\/ Run csrIssueBot to update the pr body\n+            TestBotRunner.runPeriodicItems(csrIssueBot);\n+            \/\/ Run prBot. Request a CSR.\n@@ -837,1 +860,1 @@\n-            TestBotRunner.runPeriodicItems(bot);\n+            TestBotRunner.runPeriodicItems(prBot);\n@@ -840,2 +863,1 @@\n-            assertLastCommentContains(pr, \"the issue for this pull request\");\n-            assertLastCommentContains(pr, \"already has an approved CSR request\");\n+            assertLastCommentContains(pr, \"This pull request already associated with these approved CSRs:\");\n@@ -844,1 +866,1 @@\n-            TestBotRunner.runPeriodicItems(bot);\n+            TestBotRunner.runPeriodicItems(prBot);\n@@ -847,3 +869,1 @@\n-            assertLastCommentContains(pr, \"The CSR requirement cannot be removed as there is already a CSR associated with the issue [\" +\n-                    issue.id() + \"](\" + issue.webUrl() + \"). Please withdraw the CSR [\"\n-                    + csr.id() + \"](\" + csr.webUrl() + \")\");\n+            assertLastCommentContains(pr, \"The CSR requirement cannot be removed as CSR issues already exist.\");\n@@ -860,1 +880,3 @@\n-            \/\/ Run bot. Request a CSR.\n+            \/\/ Run csrIssueBot to update the pr body\n+            TestBotRunner.runPeriodicItems(csrIssueBot);\n+            \/\/ Run prBot. Request a CSR.\n@@ -862,1 +884,1 @@\n-            TestBotRunner.runPeriodicItems(bot);\n+            TestBotRunner.runPeriodicItems(prBot);\n@@ -868,1 +890,1 @@\n-            assertLastCommentContains(pr, \"please create a [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request for issue\");\n+            assertLastCommentContains(pr, \"please create a [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request\");\n@@ -873,1 +895,1 @@\n-            TestBotRunner.runPeriodicItems(bot);\n+            TestBotRunner.runPeriodicItems(prBot);\n@@ -885,1 +907,3 @@\n-            \/\/ Run bot. Request a CSR.\n+            TestBotRunner.runPeriodicItems(csrIssueBot);\n+\n+            \/\/ Run prBot. Request a CSR.\n@@ -887,1 +911,1 @@\n-            TestBotRunner.runPeriodicItems(bot);\n+            TestBotRunner.runPeriodicItems(prBot);\n@@ -890,3 +914,1 @@\n-            assertLastCommentContains(pr, \"this pull request will not be integrated until the [CSR]\");\n-            assertLastCommentContains(pr, \"for issue \");\n-            assertLastCommentContains(pr, \"has been approved.\");\n+            assertLastCommentContains(pr, \"an approved [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request is already required for this pull request.\");\n@@ -895,1 +917,1 @@\n-            TestBotRunner.runPeriodicItems(bot);\n+            TestBotRunner.runPeriodicItems(prBot);\n@@ -898,3 +920,1 @@\n-            assertLastCommentContains(pr, \"The CSR requirement cannot be removed as there is already a CSR associated with the issue [\" +\n-                            issue.id() + \"](\" + issue.webUrl() + \"). Please withdraw the CSR [\"\n-                            + backportCsr.id() + \"](\" + backportCsr.webUrl() + \")\");\n+            assertLastCommentContains(pr, \"The CSR requirement cannot be removed as CSR issues already exist.\");\n@@ -916,1 +936,3 @@\n-            \/\/ Run bot.\n+            PullRequestUtils.postPullRequestLinkComment(issue, pr);\n+\n+            \/\/ Run prBot.\n@@ -918,1 +940,1 @@\n-            TestBotRunner.runPeriodicItems(bot);\n+            TestBotRunner.runPeriodicItems(prBot);\n@@ -925,0 +947,1 @@\n+            TestBotRunner.runPeriodicItems(csrIssueBot);\n@@ -927,1 +950,1 @@\n-            TestBotRunner.runPeriodicItems(bot);\n+            TestBotRunner.runPeriodicItems(prBot);\n@@ -933,1 +956,1 @@\n-            \/\/ re-run bot.\n+            \/\/ re-run prBot.\n@@ -935,1 +958,1 @@\n-            TestBotRunner.runPeriodicItems(bot);\n+            TestBotRunner.runPeriodicItems(prBot);\n@@ -941,1 +964,1 @@\n-            assertLastCommentContains(pr, \"please create a [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request for issue\");\n+            assertLastCommentContains(pr, \"please create a [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request\");\n@@ -967,0 +990,1 @@\n+            issue.setProperty(\"issuetype\", JSON.of(\"Bug\"));\n@@ -972,0 +996,4 @@\n+            var csrIssueBot = new CSRIssueBot(issues, List.of(author), Map.of(bot.name(), prBot));\n+\n+            \/\/ Run issue bot once to initialize lastUpdatedAt\n+            TestBotRunner.runPeriodicItems(csrIssueBot);\n@@ -984,0 +1012,1 @@\n+            PullRequestUtils.postPullRequestLinkComment(issue, pr);\n@@ -999,0 +1028,1 @@\n+            issue2.setProperty(\"issuetype\", JSON.of(\"Bug\"));\n@@ -1005,0 +1035,2 @@\n+            PullRequestUtils.postPullRequestLinkComment(issue2, pr);\n+            TestBotRunner.runPeriodicItems(csrIssueBot);\n@@ -1015,3 +1047,1 @@\n-            assertLastCommentContains(pr, \"The CSR requirement cannot be removed as there is already a CSR associated with the issue [\" +\n-                    issue2.id() + \"](\" + issue2.webUrl() + \"). Please withdraw the CSR [\"\n-                    + csr2.id() + \"](\" + csr2.webUrl() + \")\");\n+            assertLastCommentContains(pr, \"The CSR requirement cannot be removed as CSR issues already exist.\");\n@@ -1022,0 +1052,1 @@\n+            TestBotRunner.runPeriodicItems(csrIssueBot);\n@@ -1044,0 +1075,1 @@\n+            TestBotRunner.runPeriodicItems(csrIssueBot);\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CSRCommandTests.java","additions":87,"deletions":55,"binary":false,"changes":142,"status":"modified"},{"patch":"@@ -63,1 +63,0 @@\n-include 'bots:csr'\n","filename":"settings.gradle","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}