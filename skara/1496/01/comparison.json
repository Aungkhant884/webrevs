{"files":[{"patch":"@@ -25,6 +25,0 @@\n-import java.util.Optional;\n-\n-import org.openjdk.skara.forge.PullRequest;\n-import org.openjdk.skara.jbs.JdkVersion;\n-import org.openjdk.skara.jcheck.JCheckConfiguration;\n-\n@@ -39,18 +33,0 @@\n-    \/**\n-     * Gets jcheck configured fix version from a pull request. This only works for\n-     * repositories where the fix version is configured in .jcheck\/conf.\n-     *\/\n-    public static Optional<JdkVersion> getVersion(PullRequest pr) {\n-        var confFile = pr.repository().fileContents(\".jcheck\/conf\", pr.headHash().hex())\n-                .orElse(pr.repository().fileContents(\".jcheck\/conf\", pr.targetRef()).orElse(null));\n-        if (confFile == null) {\n-            return Optional.empty();\n-        }\n-        var configuration = JCheckConfiguration.parse(confFile.lines().toList());\n-        var version = configuration.general().version().orElse(null);\n-        if (version == null || \"\".equals(version)) {\n-            return Optional.empty();\n-        }\n-        return JdkVersion.parse(version);\n-    }\n-\n","filename":"bots\/common\/src\/main\/java\/org\/openjdk\/skara\/bots\/common\/BotUtils.java","additions":0,"deletions":24,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -25,2 +25,0 @@\n-import org.openjdk.skara.bots.common.BotUtils;\n-import org.openjdk.skara.bots.common.SolvesTracker;\n@@ -29,2 +27,0 @@\n-import org.openjdk.skara.jbs.Backports;\n-import org.openjdk.skara.json.JSON;\n@@ -34,1 +30,0 @@\n-import java.util.ArrayList;\n@@ -36,0 +31,2 @@\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n@@ -41,0 +38,3 @@\n+    private static final Pattern CSR_PROGRESS_PATTERN = Pattern.compile(\"- \\\\[[ x]?\\\\] Change requires CSR request \\\\[(.*?)\\\\]\\\\((.*?)\\\\) to be approved\");\n+    private static final Pattern RESOLVED_CSR_PROGRESS_PATTERN = Pattern.compile(\"- \\\\[x\\\\] Change requires CSR request \\\\[(.*?)\\\\]\\\\((.*?)\\\\) to be approved\");\n+\n@@ -58,4 +58,3 @@\n-    private static void linkReply(PullRequest pr, Issue issue, PrintWriter writer) {\n-        writer.println(\"@\" + pr.author().username() + \" please create a [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request for issue \" +\n-                \"[\" + issue.id() + \"](\" + issue.webUrl() + \") with the correct fix version. \" +\n-                \"This pull request cannot be integrated until the CSR request is approved.\");\n+    private static void linkReply(PullRequest pr, PrintWriter writer) {\n+        writer.println(\"@\" + pr.author().username() + \" please create a [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request for any issue this pr solves\" +\n+                \" with the correct fix version. This pull request cannot be integrated until the CSR request is approved.\");\n@@ -99,6 +98,5 @@\n-            var issueProject = bot.issueProject();\n-            var mainIssue = org.openjdk.skara.vcs.openjdk.Issue.fromStringRelaxed(pr.title());\n-            if (issueProject == null || mainIssue.isEmpty()) {\n-                csrUnneededReply(pr, reply);\n-                return;\n-            }\n+            var csrs = pr.body()\n+                    .lines()\n+                    .map(CSR_PROGRESS_PATTERN::matcher)\n+                    .filter(Matcher::matches)\n+                    .toList();\n@@ -106,35 +104,3 @@\n-            \/\/ All the issues this pr solves\n-            var issues = new ArrayList<org.openjdk.skara.vcs.openjdk.Issue>();\n-            issues.add(mainIssue.get());\n-            issues.addAll(SolvesTracker.currentSolved(pr.repository().forge().currentUser(), pr.comments()));\n-\n-            var containsOpenCsrIssue = false;\n-            for (var issue : issues) {\n-                var jbsIssueOpt = issueProject.issue(issue.shortId());\n-                if (jbsIssueOpt.isEmpty()) {\n-                    continue;\n-                }\n-                var jbsIssue = jbsIssueOpt.get();\n-\n-                var versionOpt = BotUtils.getVersion(pr);\n-                if (versionOpt.isEmpty()) {\n-                    break;\n-                }\n-\n-                var csrOptional = Backports.findCsr(jbsIssue, versionOpt.get());\n-                if (csrOptional.isEmpty()) {\n-                    continue;\n-                }\n-                var csrIssue = csrOptional.get();\n-\n-                var resolution = csrIssue.properties().get(\"resolution\");\n-                if (resolution == null || resolution.isNull()\n-                        || resolution.get(\"name\") == null || resolution.get(\"name\").isNull()\n-                        || csrIssue.state() != Issue.State.CLOSED\n-                        || !resolution.get(\"name\").asString().equals(\"Withdrawn\")) {\n-                    \/\/ The issue has a non-withdrawn csr issue, the bot should direct the user to withdraw the csr firstly.\n-                    reply.println(\"The CSR requirement cannot be removed as there is already a CSR associated with the issue [\" +\n-                            jbsIssue.id() + \"](\" + jbsIssue.webUrl() + \"). Please withdraw the CSR [\" + csrIssue.id() +\n-                            \"](\" + csrIssue.webUrl() + \") and then use the command `\/csr unneeded` again.\");\n-                    containsOpenCsrIssue = true;\n-                }\n+            var csrLinks = new StringBuilder();\n+            for (Matcher csr : csrs) {\n+                csrLinks.append(\"[\").append(csr.group(1)).append(\"](\").append(csr.group(2)).append(\")\").append(\" \");\n@@ -142,1 +108,4 @@\n-            if (containsOpenCsrIssue) {\n+\n+            if (!csrs.isEmpty()) {\n+                reply.println(\"The CSR requirement cannot be removed as CSR issues already exist. Please withdraw \" + csrLinks +\n+                        \"and then use the command `\/csr unneeded` again.\");\n@@ -177,20 +146,5 @@\n-        \/\/ All the issues this pr solves\n-        var issues = new ArrayList<org.openjdk.skara.vcs.openjdk.Issue>();\n-        issues.add(mainIssue.get());\n-        issues.addAll(SolvesTracker.currentSolved(pr.repository().forge().currentUser(), pr.comments()));\n-\n-        var approvedCsrIssues = 0;\n-        var openCsrIssues = 0;\n-        var withdrawnCsrIssues = 0;\n-        var csrIssues = 0;\n-\n-        for (var issue : issues) {\n-            var jbsIssueOpt = issueProject.issue(issue.shortId());\n-            if (jbsIssueOpt.isEmpty()) {\n-                continue;\n-            }\n-            var jbsIssue = jbsIssueOpt.get();\n-            var versionOpt = BotUtils.getVersion(pr);\n-            if (versionOpt.isEmpty()) {\n-                break;\n-            }\n+        var resolvedCSRs = pr.body()\n+                .lines()\n+                .map(RESOLVED_CSR_PROGRESS_PATTERN::matcher)\n+                .filter(Matcher::matches)\n+                .toList();\n@@ -198,28 +152,3 @@\n-            var csrOptional = Backports.findCsr(jbsIssueOpt.get(), versionOpt.get());\n-            if (csrOptional.isEmpty()) {\n-                continue;\n-            }\n-            \/\/ Found a csr issue for one of the issues associated with this pr\n-            var csr = csrOptional.get();\n-            csrIssues++;\n-\n-            var resolutionName = \"Unresolved\";\n-            var resolution = csr.properties().getOrDefault(\"resolution\", JSON.of());\n-            if (resolution.isObject() && resolution.asObject().contains(\"name\")) {\n-                var nameField = resolution.get(\"name\");\n-                if (nameField.isString()) {\n-                    resolutionName = resolution.get(\"name\").asString();\n-                }\n-            }\n-            if (csr.state() == Issue.State.CLOSED && resolutionName.equals(\"Approved\")) {\n-                reply.println(\"the issue for this pull request, [\" + jbsIssue.id() + \"](\" + jbsIssue.webUrl() + \"), already has \" +\n-                        \"an approved CSR request: [\" + csr.id() + \"](\" + csr.webUrl() + \")\");\n-                approvedCsrIssues++;\n-            } else if (csr.state() == Issue.State.CLOSED && resolutionName.equals(\"Withdrawn\")) {\n-                withdrawnCsrIssues++;\n-            } else {\n-                reply.println(\"this pull request will not be integrated until the [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) \" +\n-                        \"request \" + \"[\" + csr.id() + \"](\" + csr.webUrl() + \")\" + \" for issue \" +\n-                        \"[\" + jbsIssue.id() + \"](\" + jbsIssue.webUrl() + \") has been approved.\");\n-                openCsrIssues++;\n-            }\n+        var csrLinks = new StringBuilder();\n+        for (Matcher resolvedCSR : resolvedCSRs) {\n+            csrLinks.append(\"[\").append(resolvedCSR.group(1)).append(\"](\").append(resolvedCSR.group(2)).append(\")\").append(\" \");\n@@ -227,12 +156,2 @@\n-        \/\/ All the issues associated with pr either don't have csr issue or the csr issue has already been withdrawn\n-        if (csrIssues == withdrawnCsrIssues) {\n-            csrReply(reply);\n-            if (issues.size() == 1) {\n-                linkReply(pr, jbsMainIssueOpt.get(), reply);\n-            }\n-            pr.addLabel(CSR_LABEL);\n-        } else if (csrIssues == approvedCsrIssues) {\n-            \/\/ All the csr issues are approved\n-            reply.println(CSR_NEEDED_MARKER);\n-        } else if (openCsrIssues > 0) {\n-            \/\/ At least one csr issue open\n+        if (!resolvedCSRs.isEmpty()) {\n+            reply.println(\"This pull request already associated with these approved CSRs: \" + csrLinks);\n@@ -240,0 +159,3 @@\n+        } else {\n+            csrReply(reply);\n+            linkReply(pr, reply);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CSRCommand.java","additions":33,"deletions":111,"binary":false,"changes":144,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import org.openjdk.skara.jcheck.JCheckConfiguration;\n@@ -1179,0 +1180,1 @@\n+            var confFile = localRepo.show(Path.of(\".jcheck\/conf\"), localHash);\n@@ -1180,2 +1182,8 @@\n-            if (sourceBranchJCheckConfValid) {\n-                version = BotUtils.getVersion(pr).orElse(null);\n+            if (confFile.isPresent() && sourceBranchJCheckConfValid) {\n+                String confFileContent = new String(confFile.get());\n+                var configuration = JCheckConfiguration.parse(confFileContent.lines().toList());\n+                var versionString = configuration.general().version().orElse(null);\n+\n+                if (versionString != null && !\"\".equals(versionString)) {\n+                    version = JdkVersion.parse(versionString).orElse(null);\n+                }\n@@ -1183,0 +1191,1 @@\n+\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -113,1 +113,4 @@\n-\n+            commentString = commentString + comments.stream()\n+                    .flatMap(comment -> comment.body().lines())\n+                    .filter(line -> line.startsWith(\"\/csr\"))\n+                    .collect(Collectors.joining());\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckWorkItem.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -588,0 +588,61 @@\n+\n+    @Test\n+    void testFindCSRWithVersionInMergedBranch(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var bot = credentials.getHostedRepository();\n+            var issueProject = credentials.getIssueProject();\n+            var issue = issueProject.createIssue(\"This is an issue\", List.of(), Map.of());\n+            issue.setProperty(\"issuetype\", JSON.of(\"Bug\"));\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addReviewer(reviewer.forge().currentUser().id())\n+                    .addCommitter(author.forge().currentUser().id());\n+            var prBot = PullRequestBot.newBuilder().repo(bot).issueProject(issueProject).censusRepo(censusBuilder.build()).enableCsr(true).build();\n+            var csrIssueBot = new CSRIssueBot(issueProject, List.of(author), Map.of(bot.name(), prBot));\n+\n+            \/\/ Run issue bot once to initialize lastUpdatedAt\n+            TestBotRunner.runPeriodicItems(csrIssueBot);\n+\n+            var csr = issueProject.createIssue(\"This is a CSR\", List.of(), Map.of());\n+            csr.setState(Issue.State.OPEN);\n+            csr.setProperty(\"issuetype\", JSON.of(\"CSR\"));\n+            csr.setProperty(\"fixVersions\", JSON.array().add(\"17\"));\n+            issue.addLink(Link.create(csr, \"csr for\").build());\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.authenticatedUrl(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.authenticatedUrl(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", issue.id() + \": This is an issue\");\n+            PullRequestUtils.postPullRequestLinkComment(issue, pr);\n+\n+            \/\/ Change .jcheck\/conf in targetBranch\n+            localRepo.checkout(masterHash);\n+            var defaultConf = Files.readString(localRepo.root().resolve(\".jcheck\/conf\"), StandardCharsets.UTF_8);\n+            var newConf = defaultConf.replace(\"version=0.1\", \"version=17\");\n+            Files.writeString(localRepo.root().resolve(\".jcheck\/conf\"), newConf, StandardCharsets.UTF_8);\n+            localRepo.add(localRepo.root().resolve(\".jcheck\/conf\"));\n+            var confHash = localRepo.commit(\"Set version as 17\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(confHash, author.authenticatedUrl(), \"master\", true);\n+\n+            \/\/ The bot will be able to find the csr although fixVersion in source branch is 0.1\n+            TestBotRunner.runPeriodicItems(csrIssueBot);\n+            assertTrue(pr.store().labelNames().contains(\"csr\"));\n+\n+            reviewer.pullRequest(pr.id()).addComment(\"\/csr unneeded\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+\n+            assertTrue(pr.store().comments().get(pr.store().comments().size() - 1).body()\n+                    .contains(\"@user2 The CSR requirement cannot be removed as CSR issues already exist. \" +\n+                            \"Please withdraw [TEST-2](http:\/\/localhost\/project\/testTEST-2) and then use the command `\/csr unneeded` again.\"));\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CSRBotTests.java","additions":61,"deletions":0,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -150,3 +150,2 @@\n-            \/\/ The bot should reply with a message that the CSR is already aproved\n-            assertLastCommentContains(pr, \"the issue for this pull request\");\n-            assertLastCommentContains(pr, \"already has an approved CSR request\");\n+            \/\/ The bot should reply with a message that the CSR is already approved\n+            assertLastCommentContains(pr, \"This pull request already associated with these approved CSRs:\");\n@@ -423,1 +422,0 @@\n-\n@@ -464,3 +462,1 @@\n-            assertLastCommentContains(pr, \"The CSR requirement cannot be removed as there is already a CSR associated with the issue [\" +\n-                    issue.id() + \"](\" + issue.webUrl() + \"). Please withdraw the CSR [\"\n-                    + csr.id() + \"](\" + csr.webUrl() + \") and then use the command `\/csr unneeded` again.\");\n+            assertLastCommentContains(pr, \"The CSR requirement cannot be removed as CSR issues already exist.\");\n@@ -538,3 +534,1 @@\n-            assertLastCommentContains(pr, \"The CSR requirement cannot be removed as there is already a CSR associated with the issue [\" +\n-                    issue.id() + \"](\" + issue.webUrl() + \"). Please withdraw the CSR [\"\n-                    + csr.id() + \"](\" + csr.webUrl() + \") and then use the command `\/csr unneeded` again.\");\n+            assertLastCommentContains(pr, \"The CSR requirement cannot be removed as CSR issues already exist.\");\n@@ -764,1 +758,1 @@\n-            assertLastCommentContains(pr, \"please create a [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request for issue\");\n+            assertLastCommentContains(pr, \"please create a [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request for any issue this pr solves\");\n@@ -793,1 +787,1 @@\n-            assertLastCommentContains(pr, \"please create a [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request for issue\");\n+            assertLastCommentContains(pr, \"please create a [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request for any issue this pr solves\");\n@@ -822,1 +816,1 @@\n-            assertLastCommentContains(pr, \"please create a [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request for issue\");\n+            assertLastCommentContains(pr, \"please create a [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request for any issue this pr solves\");\n@@ -840,2 +834,1 @@\n-            assertLastCommentContains(pr, \"the issue for this pull request\");\n-            assertLastCommentContains(pr, \"already has an approved CSR request\");\n+            assertLastCommentContains(pr, \"This pull request already associated with these approved CSRs:\");\n@@ -847,3 +840,1 @@\n-            assertLastCommentContains(pr, \"The CSR requirement cannot be removed as there is already a CSR associated with the issue [\" +\n-                    issue.id() + \"](\" + issue.webUrl() + \"). Please withdraw the CSR [\"\n-                    + csr.id() + \"](\" + csr.webUrl() + \")\");\n+            assertLastCommentContains(pr, \"The CSR requirement cannot be removed as CSR issues already exist.\");\n@@ -868,1 +859,1 @@\n-            assertLastCommentContains(pr, \"please create a [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request for issue\");\n+            assertLastCommentContains(pr, \"please create a [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request for any issue this pr solves\");\n@@ -890,3 +881,1 @@\n-            assertLastCommentContains(pr, \"this pull request will not be integrated until the [CSR]\");\n-            assertLastCommentContains(pr, \"for issue \");\n-            assertLastCommentContains(pr, \"has been approved.\");\n+            assertLastCommentContains(pr, \"an approved [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request is already required for this pull request.\");\n@@ -898,3 +887,1 @@\n-            assertLastCommentContains(pr, \"The CSR requirement cannot be removed as there is already a CSR associated with the issue [\" +\n-                            issue.id() + \"](\" + issue.webUrl() + \"). Please withdraw the CSR [\"\n-                            + backportCsr.id() + \"](\" + backportCsr.webUrl() + \")\");\n+            assertLastCommentContains(pr, \"The CSR requirement cannot be removed as CSR issues already exist.\");\n@@ -941,1 +928,1 @@\n-            assertLastCommentContains(pr, \"please create a [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request for issue\");\n+            assertLastCommentContains(pr, \"please create a [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request for any issue this pr solves\");\n@@ -1015,3 +1002,1 @@\n-            assertLastCommentContains(pr, \"The CSR requirement cannot be removed as there is already a CSR associated with the issue [\" +\n-                    issue2.id() + \"](\" + issue2.webUrl() + \"). Please withdraw the CSR [\"\n-                    + csr2.id() + \"](\" + csr2.webUrl() + \")\");\n+            assertLastCommentContains(pr, \"The CSR requirement cannot be removed as CSR issues already exist.\");\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CSRCommandTests.java","additions":14,"deletions":29,"binary":false,"changes":43,"status":"modified"}]}