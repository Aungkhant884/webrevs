{"files":[{"patch":"@@ -39,0 +39,1 @@\n+        private final Instant created;\n@@ -43,0 +44,1 @@\n+            created = Instant.now();\n@@ -61,0 +63,4 @@\n+\n+        public Duration age() {\n+            return Duration.between(created, Instant.now());\n+        }\n@@ -68,0 +74,10 @@\n+    private final Map<RequestContext, Instant> cachedUpdated = new ConcurrentHashMap<>();\n+\n+    private Duration maxAllowedAge(RequestContext requestContext) {\n+        \/\/ Known stable caches can afford a longer timeout - others expire faster\n+        if (requestContext.unauthenticatedRequest.uri().toString().contains(\"github.com\")) {\n+            return Duration.ofMinutes(30);\n+        } else {\n+            return Duration.ofMinutes(5);\n+        }\n+    }\n@@ -84,2 +100,7 @@\n-                var tag = cached.headers().firstValue(\"ETag\");\n-                tag.ifPresent(value -> requestBuilder.header(\"If-None-Match\", value));\n+                var created = cachedUpdated.get(requestContext);\n+                if (Instant.now().minus(maxAllowedAge(requestContext)).isBefore(created)) {\n+                    var tag = cached.headers().firstValue(\"ETag\");\n+                    tag.ifPresent(value -> requestBuilder.header(\"If-None-Match\", value));\n+                } else {\n+                    log.finer(\"Expired response cache for \" + requestContext.unauthenticatedRequest.uri() + \" (\" + requestContext.authId + \")\");\n+                }\n@@ -101,0 +122,1 @@\n+                cachedUpdated.put(requestContext, Instant.now());\n","filename":"network\/src\/main\/java\/org\/openjdk\/skara\/network\/RestRequestCache.java","additions":24,"deletions":2,"binary":false,"changes":26,"status":"modified"}]}