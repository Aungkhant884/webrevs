{"files":[{"patch":"@@ -69,4 +69,2 @@\n-    private static JCheckConfiguration configuration(HostedRepositoryPool hostedRepositoryPool, HostedRepository remoteRepo, String name, String ref) throws IOException {\n-        var confFile = hostedRepositoryPool.lines(remoteRepo, Path.of(name), ref).orElseThrow(\n-                () -> new IOException(\"Failed to read jcheck configuration from \" + name + \":\" + ref));\n-        return JCheckConfiguration.parse(confFile);\n+    private static Optional<JCheckConfiguration> configuration(HostedRepositoryPool hostedRepositoryPool, HostedRepository remoteRepo, String name, String ref) throws IOException {\n+        return hostedRepositoryPool.lines(remoteRepo, Path.of(name), ref).map(JCheckConfiguration::parse);\n@@ -75,1 +73,1 @@\n-    static CensusInstance create(HostedRepositoryPool hostedRepositoryPool,\n+    static Optional<CensusInstance> create(HostedRepositoryPool hostedRepositoryPool,\n@@ -82,1 +80,1 @@\n-    static CensusInstance create(HostedRepositoryPool hostedRepositoryPool,\n+    static Optional<CensusInstance> create(HostedRepositoryPool hostedRepositoryPool,\n@@ -94,1 +92,1 @@\n-            JCheckConfiguration configuration;\n+            Optional<JCheckConfiguration> configuration;\n@@ -103,0 +101,3 @@\n+            if (configuration.isEmpty()) {\n+                return Optional.empty();\n+            }\n@@ -104,1 +105,1 @@\n-            var project = project(configuration, census);\n+            var project = project(configuration.get(), census);\n@@ -106,1 +107,1 @@\n-            return new CensusInstance(census, configuration, project, namespace);\n+            return Optional.of(new CensusInstance(census, configuration.get(), project, namespace));\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CensusInstance.java","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -216,1 +216,1 @@\n-                                           bot.confOverrideRepository().orElse(null), bot.confOverrideName(), bot.confOverrideRef());\n+                                           bot.confOverrideRepository().orElse(null), bot.confOverrideName(), bot.confOverrideRef()).orElseThrow();\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckWorkItem.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -153,5 +153,0 @@\n-        var census = CensusInstance.create(hostedRepositoryPool, bot.censusRepo(), bot.censusRef(),\n-                                           scratchPath.resolve(\"census\"), bot.repo(), commit.hash().hex(),\n-                                           bot.confOverrideRepository().orElse(null),\n-                                           bot.confOverrideName(),\n-                                           bot.confOverrideRef());\n@@ -160,1 +155,0 @@\n-\n@@ -164,1 +158,15 @@\n-            processCommand(scratchPath, commit, census, nextCommand.get(), allComments);\n+            var census = CensusInstance.create(hostedRepositoryPool, bot.censusRepo(), bot.censusRef(),\n+                                               scratchPath.resolve(\"census\"), bot.repo(), commit.hash().hex(),\n+                                               bot.confOverrideRepository().orElse(null),\n+                                               bot.confOverrideName(),\n+                                               bot.confOverrideRef());\n+            var command = nextCommand.get();\n+            if (census.isEmpty()) {\n+                var comment = String.format(commandReplyMarker, command.id()) + \"\\n\" +\n+                              \"@\" + command.user().username() +\n+                              \" there is no `.jcheck\/conf` present at revision \" +\n+                              commit.hash().abbreviate() + \" - cannot process command.\";\n+                bot.repo().addCommitComment(commit.hash(), comment);\n+            } else {\n+                processCommand(scratchPath, commit, census.get(), command, allComments);\n+            }\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CommitCommandWorkItem.java","additions":15,"deletions":7,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -220,1 +220,1 @@\n-                                           bot.confOverrideRepository().orElse(null), bot.confOverrideName(), bot.confOverrideRef());\n+                                           bot.confOverrideRepository().orElse(null), bot.confOverrideName(), bot.confOverrideRef()).orElseThrow();\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestCommandWorkItem.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import org.openjdk.skara.vcs.Hash;\n+import org.openjdk.skara.vcs.*;\n@@ -31,0 +31,1 @@\n+import java.nio.file.Files;\n@@ -207,0 +208,38 @@\n+\n+    @Test\n+    void missingJcheckConf(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                                           .addAuthor(author.forge().currentUser().id())\n+                                           .addReviewer(reviewer.forge().currentUser().id());\n+            var seedFolder = tempFolder.path().resolve(\"seed\");\n+            var bot = PullRequestBot.newBuilder()\n+                                    .repo(author)\n+                                    .censusRepo(censusBuilder.build())\n+                                    .censusLink(\"https:\/\/census.com\/{{contributor}}-profile\")\n+                                    .externalCommitCommands(Map.of(\"external\", \"Help for external command\"))\n+                                    .seedStorage(seedFolder)\n+                                    .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = Repository.init(tempFolder.path(), author.repositoryType());\n+            var readme = localRepo.root().resolve(\"README\");\n+            Files.writeString(readme, \"Hello, world!\");\n+            localRepo.add(readme);\n+            var masterHash = localRepo.commit(\"Added README\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Add a help command\n+            author.addCommitComment(masterHash, \"\/help\");\n+            TestBotRunner.runPeriodicItems(bot);\n+\n+            \/\/ Look at the reply\n+            var replies = author.commitComments(masterHash);\n+            CommitCommandAsserts.assertLastCommentContains(replies, \"there is no `.jcheck\/conf` present\");\n+            CommitCommandAsserts.assertLastCommentContains(replies, \"cannot process command\");\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CommitCommandTests.java","additions":40,"deletions":1,"binary":false,"changes":41,"status":"modified"}]}