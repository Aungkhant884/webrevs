{"files":[{"patch":"@@ -120,9 +120,10 @@\n-        \/\/ Fetch all open pull requests periodically, and just the recently updated ones in between\n-        if (lastFullUpdate == null || lastFullUpdate.isBefore(ZonedDateTime.now().minus(Duration.ofMinutes(10)))) {\n-            lastFullUpdate = ZonedDateTime.now();\n-            log.info(\"Fetching all open pull requests\");\n-            prs = repository.pullRequests();\n-        } else {\n-            log.info(\"Fetching recently updated pull requests (open and closed)\");\n-            prs = repository.pullRequests(ZonedDateTime.now().minus(Duration.ofDays(14)));\n-        }\n+        if (!prListeners.isEmpty()) {\n+            \/\/ Fetch all open pull requests periodically, and just the recently updated ones in between\n+            if (lastFullUpdate == null || lastFullUpdate.isBefore(ZonedDateTime.now().minus(Duration.ofMinutes(10)))) {\n+                lastFullUpdate = ZonedDateTime.now();\n+                log.info(\"Fetching all open pull requests\");\n+                prs = repository.pullRequests();\n+            } else {\n+                log.info(\"Fetching recently updated pull requests (open and closed)\");\n+                prs = repository.pullRequests(ZonedDateTime.now().minus(Duration.ofDays(14)));\n+            }\n@@ -130,5 +131,11 @@\n-        \/\/ Pull request events\n-        for (var pr : prs) {\n-            if (updateCache.needsUpdate(pr)) {\n-                if (!isOfInterest(pr)) {\n-                    continue;\n+            \/\/ Pull request events\n+            for (var pr : prs) {\n+                if (updateCache.needsUpdate(pr)) {\n+                    if (!isOfInterest(pr)) {\n+                        continue;\n+                    }\n+                    ret.add(new PullRequestWorkItem(pr,\n+                            prStateStorageBuilder,\n+                            prListeners,\n+                            e -> updateCache.invalidate(pr),\n+                            integratorId));\n@@ -136,5 +143,0 @@\n-                ret.add(new PullRequestWorkItem(pr,\n-                                                prStateStorageBuilder,\n-                                                prListeners,\n-                                                e -> updateCache.invalidate(pr),\n-                                                integratorId));\n@@ -145,1 +147,3 @@\n-        ret.add(new RepositoryWorkItem(repository, storagePath, branches, tagStorageBuilder, branchStorageBuilder, repoListeners));\n+        if (!repoListeners.isEmpty()) {\n+            ret.add(new RepositoryWorkItem(repository, storagePath, branches, tagStorageBuilder, branchStorageBuilder, repoListeners));\n+        }\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/NotifyBot.java","additions":24,"deletions":20,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -56,0 +56,1 @@\n+    private final boolean repoOnly;\n@@ -63,0 +64,5 @@\n+    \/\/ If set, use this repository for generating URLs to commits instead of the one\n+    \/\/ supplied. This can be used to have the bot act on a mirror of the original\n+    \/\/ repository but still generate links to the original. Only works for notifications\n+    \/\/ on repository, not pull requests.\n+    private final HostedRepository originalRepository;\n@@ -70,2 +76,3 @@\n-                  JbsBackport jbsBackport, boolean prOnly, String buildName, HostedRepository censusRepository,\n-                  String censusRef, String namespace, boolean useHeadVersion) {\n+                  JbsBackport jbsBackport, boolean prOnly, boolean repoOnly, String buildName,\n+                  HostedRepository censusRepository, String censusRef, String namespace, boolean useHeadVersion,\n+                  HostedRepository originalRepository) {\n@@ -82,0 +89,1 @@\n+        this.repoOnly = repoOnly;\n@@ -87,0 +95,1 @@\n+        this.originalRepository = originalRepository;\n@@ -134,1 +143,3 @@\n-        e.registerPullRequestListener(this);\n+        if (!repoOnly) {\n+            e.registerPullRequestListener(this);\n+        }\n@@ -239,1 +250,2 @@\n-            var commitNotification = CommitFormatters.toTextBrief(repository, commit);\n+            var linkRepository = originalRepository != null ? originalRepository : repository;\n+            var commitNotification = CommitFormatters.toTextBrief(linkRepository, commit);\n@@ -286,1 +298,1 @@\n-                var hashUrl = repository.webUrl(commit.hash()).toString();\n+                var hashUrl = linkRepository.webUrl(commit.hash()).toString();\n@@ -288,1 +300,1 @@\n-                var shortHashUrl = repository.webUrl(new Hash(commit.hash().abbreviate())).toString();\n+                var shortHashUrl = linkRepository.webUrl(new Hash(commit.hash().abbreviate())).toString();\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifier.java","additions":18,"deletions":6,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+    private boolean repoOnly = false;\n@@ -47,0 +48,1 @@\n+    private HostedRepository originalRepository;\n@@ -99,0 +101,5 @@\n+    public IssueNotifierBuilder repoOnly(boolean repoOnly) {\n+        this.repoOnly = repoOnly;\n+        return this;\n+    }\n+\n@@ -124,0 +131,5 @@\n+    public IssueNotifierBuilder originalRepository(HostedRepository originalRepository) {\n+        this.originalRepository = originalRepository;\n+        return this;\n+    }\n+\n@@ -127,2 +139,2 @@\n-                                 setFixVersion, fixVersions, altFixVersions, jbsBackport, prOnly, buildName,\n-                                 censusRepository, censusRef, namespace, useHeadVersion);\n+                setFixVersion, fixVersions, altFixVersions, jbsBackport, prOnly,\n+                repoOnly, buildName, censusRepository, censusRef, namespace, useHeadVersion, originalRepository);\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifierBuilder.java","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -99,0 +99,4 @@\n+        if (notifierConfiguration.contains(\"repoonly\")) {\n+            builder.repoOnly(notifierConfiguration.get(\"repoonly\").asBoolean());\n+        }\n+\n@@ -111,0 +115,4 @@\n+        if (notifierConfiguration.contains(\"originalrepository\")) {\n+            builder.originalRepository(botConfiguration.repository(notifierConfiguration.get(\"originalrepository\").asString()));\n+        }\n+\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifierFactory.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -43,0 +43,14 @@\n+\n+    \/\/ Test implementation of a RepositoryListener that does nothing\n+    public static class NullRepositoryListener implements RepositoryListener {\n+\n+        @Override\n+        public String name() {\n+            return \"null\";\n+        }\n+\n+        @Override\n+        public boolean idempotent() {\n+            return true;\n+        }\n+    }\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/TestUtils.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -63,0 +63,2 @@\n+            \/\/ Register a RepositoryListener to make history initialize on the first run\n+            notifyBot.registerRepositoryListener(new NullRepositoryListener());\n@@ -130,0 +132,2 @@\n+            \/\/ Register a RepositoryListener to make history initialize on the first run\n+            notifyBot.registerRepositoryListener(new NullRepositoryListener());\n@@ -197,0 +201,2 @@\n+            \/\/ Register a RepositoryListener to make history initialize on the first run\n+            notifyBot.registerRepositoryListener(new NullRepositoryListener());\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/comment\/CommitCommentNotifierTests.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -119,0 +119,2 @@\n+            \/\/ Register a RepositoryListener to make history initialize on the first run\n+            notifyBot.registerRepositoryListener(new NullRepositoryListener());\n@@ -1392,0 +1394,65 @@\n+    @Test\n+    void testIssueOriginalRepo(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+\n+            var repo = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var repoFolder = tempFolder.path().resolve(\"repo\");\n+            var localRepo = CheckableRepository.init(repoFolder, repo.repositoryType());\n+            credentials.commitLock(localRepo);\n+            localRepo.pushAll(repo.url());\n+\n+            var issueProject = credentials.getIssueProject();\n+            var storageFolder = tempFolder.path().resolve(\"storage\");\n+            var originalRepo = credentials.getHostedRepository(\"original\");\n+            var jbsNotifierConfig = JSON.object().put(\"fixversions\", JSON.object())\n+                    .put(\"buildname\", \"team\")\n+                    .put(\"originalrepository\", \"original\")\n+                    .put(\"repoonly\", JSON.of(true));\n+            var testBotFactoryBuilder = testBotBuilderFactory(repo, issueProject, storageFolder, jbsNotifierConfig);\n+            testBotFactoryBuilder.addHostedRepository(\"original\", originalRepo);\n+            var notifyBot = testBotFactoryBuilder.build().create(\"notify\", JSON.object());\n+\n+            \/\/ Initialize history\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ Create an issue and commit a fix\n+            var authorEmailAddress = issueProject.issueTracker().currentUser().username() + \"@openjdk.org\";\n+            var issue = issueProject.createIssue(\"This is an issue\", List.of(\"Indeed\"), Map.of(\"issuetype\", JSON.of(\"Enhancement\")));\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, \"Another line\", issue.id() + \": Fix that issue\", \"Duke\", authorEmailAddress);\n+            localRepo.push(editHash, repo.url(), \"master\");\n+            \/\/ Also create a pull request that should not get processed due to repoonly being set\n+            localRepo.push(editHash, repo.url(), \"edit\", true);\n+            var pr = credentials.createPullRequest(repo, \"edit\", \"master\", issue.id() + \": Fix that issue\");\n+            pr.setBody(\"\\n\\n### Issue\\n * [\" + issue.id() + \"](http:\/\/www.test.test\/): The issue\");\n+            pr.addLabel(\"rfr\");\n+            var reviewPr = reviewer.pullRequest(pr.id());\n+            reviewPr.addComment(\"This is now ready\");\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ No PR link should have been added\n+            var links = issue.links();\n+            assertEquals(0, links.size());\n+\n+            \/\/ The changeset should be reflected in a comment\n+            var updatedIssue = issueProject.issue(issue.id()).orElseThrow();\n+\n+            var comments = updatedIssue.comments();\n+            assertEquals(1, comments.size());\n+            var comment = comments.get(0);\n+            assertTrue(comment.body().contains(editHash.toString()));\n+            \/\/ Verify that the 'original' repo URL is used in the comment and not the main one\n+            assertTrue(comment.body().contains(originalRepo.url().toString()));\n+            assertFalse(comment.body().contains(repo.url().toString()));\n+\n+            \/\/ As well as a fixVersion and a resolved in build\n+            assertEquals(Set.of(\"0.1\"), fixVersions(updatedIssue));\n+            assertEquals(\"team\", updatedIssue.properties().get(RESOLVED_IN_BUILD).asString());\n+\n+            \/\/ The issue should be assigned and resolved\n+            assertEquals(RESOLVED, updatedIssue.state());\n+            assertEquals(List.of(issueProject.issueTracker().currentUser()), updatedIssue.assignees());\n+        }\n+    }\n+\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifierTests.java","additions":67,"deletions":0,"binary":false,"changes":67,"status":"modified"}]}