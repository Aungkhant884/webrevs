{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -266,1 +266,10 @@\n-        log.fine(\"ignored: binary file\");\n+        addFailureMessage(issue.check(), \"The binary file \" + issue.path().toString() + \" is not allowed in this repository.\");\n+        readyForReview = false;\n+    }\n+\n+    @Override\n+    public void visit(BinaryFileTooLargeIssue issue) {\n+        addFailureMessage(issue.check(), \"The size of the binary file `\" + issue.path() + \"` is \" + issue.fileSize()\n+                + \" Bytes, which is larger than the binary file size limit: \"\n+                + issue.maxSize() + (issue.maxSize() > 1 ? \" Bytes.\" : \" Byte.\"));\n+        readyForReview = false;\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestCheckIssueVisitor.java","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -295,1 +295,10 @@\n-            println(i, \"adds binary file: \" + i.path().toString());\n+            println(i, \"The binary file \" + i.path().toString() + \" is not allowed in this repository.\");\n+            hasDisplayedErrors = true;\n+        }\n+    }\n+\n+    public void visit(BinaryFileTooLargeIssue i) {\n+        if (!ignore.contains(i.check().name())) {\n+            println(i, \"The size of the binary file `\" + i.path() + \"` is \" + i.fileSize()\n+                    + \" Bytes, which is larger than the binary file size limit: \"\n+                    + i.maxSize() + (i.maxSize() > 1 ? \" Bytes.\" : \" Byte.\"));\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/JCheckCLIVisitor.java","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+import org.openjdk.skara.vcs.BinaryPatch;\n@@ -29,0 +30,2 @@\n+import java.io.IOException;\n+import java.nio.file.Files;\n@@ -39,0 +42,1 @@\n+        var maxSize = conf.checks().binary().maxSize();\n@@ -43,2 +47,10 @@\n-                if (patch.isBinary() &&\n-                    (patch.status().isAdded() || patch.status().isCopied())) {\n+                if (patch.isTextual()) {\n+                    \/\/ Excluded the textual patch.\n+                    continue;\n+                }\n+                if (patch.status().isDeleted()) {\n+                    \/\/ Excluded the deleted file.\n+                    continue;\n+                }\n+                if (maxSize == 0) {\n+                    \/\/ If the maxSize is not set or is set to 0, any binary file can't be added.\n@@ -47,0 +59,13 @@\n+                if (maxSize > 0) {\n+                    long fileSize = 0;\n+                    var binaryPatch = (BinaryPatch) patch;\n+                    var path =  binaryPatch.target().path().get();\n+                    try {\n+                        fileSize = Files.size(path);\n+                    } catch (IOException e) {\n+                        log.warning(\"The file '\" + path + \"' doesn't exist.\");\n+                    }\n+                    if (fileSize > maxSize) {\n+                        issues.add(new BinaryFileTooLargeIssue(path, fileSize, maxSize, metadata));\n+                    }\n+                }\n@@ -49,1 +74,0 @@\n-\n@@ -60,1 +84,1 @@\n-        return \"Files should not be binary\";\n+        return \"Binary files don't meet the requirement.\";\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/BinaryCheck.java","additions":29,"deletions":5,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -0,0 +1,51 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.jcheck;\n+\n+import org.openjdk.skara.ini.Section;\n+\n+public class BinaryConfiguration {\n+    static final BinaryConfiguration DEFAULT =\n+            new BinaryConfiguration(0);\n+\n+    private final long maxSize;\n+\n+    private BinaryConfiguration(long maxSize) {\n+        this.maxSize = maxSize;\n+    }\n+\n+    static BinaryConfiguration parse(Section s) {\n+        if (s == null) {\n+            return DEFAULT;\n+        }\n+        return new BinaryConfiguration(SizeUtils.getSizeFromString(s.get(\"max-size\").asString()));\n+    }\n+\n+    static String name() {\n+        return \"binary\";\n+    }\n+\n+    public long maxSize() {\n+        return maxSize;\n+    }\n+}\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/BinaryConfiguration.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.jcheck;\n+\n+import java.nio.file.Path;\n+\n+public class BinaryFileTooLargeIssue extends CommitIssue {\n+    private final Path path;\n+    private final long fileSize;\n+    private final long maxSize;\n+\n+    BinaryFileTooLargeIssue(Path path, long fileSize, long maxSize, CommitIssue.Metadata metadata) {\n+        super(metadata);\n+        this.path = path;\n+        this.fileSize = fileSize;\n+        this.maxSize = maxSize;\n+    }\n+\n+    public Path path() {\n+        return path;\n+    }\n+\n+    public long fileSize() {\n+        return fileSize;\n+    }\n+\n+    public long maxSize() {\n+        return maxSize;\n+    }\n+\n+    @Override\n+    public void accept(IssueVisitor v) {\n+        v.visit(this);\n+    }\n+}\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/BinaryFileTooLargeIssue.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,1 @@\n+                                BinaryConfiguration.DEFAULT,\n@@ -48,0 +49,1 @@\n+    private final BinaryConfiguration binary;\n@@ -57,0 +59,1 @@\n+                        BinaryConfiguration binary,\n@@ -65,0 +68,1 @@\n+        this.binary = binary;\n@@ -114,0 +118,4 @@\n+    public BinaryConfiguration binary() {\n+        return binary;\n+    }\n+\n@@ -135,0 +143,1 @@\n+        var binary = BinaryConfiguration.parse(s.subsection(BinaryConfiguration.name()));\n@@ -136,1 +145,1 @@\n-        return new ChecksConfiguration(error, warning, whitespace, reviewers, merge, committer, issues, problemlists);\n+        return new ChecksConfiguration(error, warning, whitespace, reviewers, merge, committer, issues, binary, problemlists);\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/ChecksConfiguration.java","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,0 +45,1 @@\n+    void visit(BinaryFileTooLargeIssue issue);\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/IssueVisitor.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -79,0 +79,1 @@\n+            new BinaryCheck(),\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/JCheck.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,54 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.jcheck;\n+\n+import java.util.logging.Logger;\n+\n+public class SizeUtils {\n+    private static final Logger log = Logger.getLogger(\"org.openjdk.skara.jcheck.sizeutils\");\n+\n+    public static long getSizeFromString(String str) {\n+        long size = 0;\n+        String unit = \"\";\n+        var sizeStr = str.toLowerCase();\n+        if (sizeStr.endsWith(\"kb\") || sizeStr.endsWith(\"mb\") || sizeStr.endsWith(\"gb\")) {\n+            unit = sizeStr.substring(sizeStr.length() - 2);\n+            sizeStr = sizeStr.substring(0, sizeStr.length() - 2);\n+        } else if (sizeStr.endsWith(\"k\") || sizeStr.endsWith(\"m\") || sizeStr.endsWith(\"g\") || sizeStr.endsWith(\"b\")) {\n+            unit = sizeStr.substring(sizeStr.length() - 1);\n+            sizeStr = sizeStr.substring(0, sizeStr.length() - 1);\n+        }\n+        try {\n+            size = Long.parseLong(sizeStr);\n+        } catch (NumberFormatException exception) {\n+            log.info(\"The string '\" + str + \"' can't be convert to a number. \" + exception);\n+            size = 0; \/\/ default 0\n+        }\n+        switch (unit) {\n+            case \"kb\", \"k\" -> size *= 1024;\n+            case \"mb\", \"m\" -> size *= 1024 * 1024;\n+            case \"gb\", \"g\" -> size *= 1024 * 1024 * 1024;\n+        }\n+        return size;\n+    }\n+}\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/SizeUtils.java","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+import java.nio.file.Files;\n@@ -40,5 +41,24 @@\n-    private static final JCheckConfiguration conf = JCheckConfiguration.parse(List.of(\n-        \"[general]\",\n-        \"project = test\",\n-        \"[checks]\",\n-        \"error = binary\"\n+    private static final JCheckConfiguration binaryNotAllowedConf = JCheckConfiguration.parse(List.of(\n+            \"[general]\",\n+            \"project = test\",\n+            \"[checks]\",\n+            \"error = binary\"\n+    ));\n+\n+    private static final JCheckConfiguration binaryAllowedConf = JCheckConfiguration.parse(List.of(\n+            \"[general]\",\n+            \"project = test\",\n+            \"[checks]\",\n+            \"error = binary\",\n+            \"[checks \\\"binary\\\"]\",\n+            \"max-size=6b\"\n+    ));\n+\n+    \/\/ Same as `binaryNotAllowedConf`\n+    private static final JCheckConfiguration zeroMaxSizeConf = JCheckConfiguration.parse(List.of(\n+            \"[general]\",\n+            \"project = test\",\n+            \"[checks]\",\n+            \"error = binary\",\n+            \"[checks \\\"binary\\\"]\",\n+            \"max-size=0\"\n@@ -57,0 +77,8 @@\n+    private static List<Diff> binaryParentDiffs(Path path, Status status, int inflatedSize, List<String> data) {\n+        var hunk = BinaryHunk.ofLiteral(inflatedSize, data);\n+        var patch = new BinaryPatch(null, null, null, path,\n+                                    FileType.fromOctal(\"100644\"), Hash.zero(), status, List.of(hunk));\n+        var diff = new Diff(Hash.zero(), Hash.zero(), List.of(patch));\n+        return List.of(diff);\n+    }\n+\n@@ -84,1 +112,5 @@\n-        var issues = toList(check.check(commit, message, conf, null));\n+        var issues = toList(check.check(commit, message, binaryNotAllowedConf, null));\n+        assertEquals(0, issues.size());\n+        issues = toList(check.check(commit, message, binaryAllowedConf, null));\n+        assertEquals(0, issues.size());\n+        issues = toList(check.check(commit, message, zeroMaxSizeConf, null));\n@@ -89,7 +121,6 @@\n-    void binaryFileShouldFail() throws IOException {\n-        var hunk = BinaryHunk.ofLiteral(8, List.of(\"asdfasdf8\"));\n-        var patch = new BinaryPatch(null, null, null,\n-                                    Path.of(\"file.bin\"), FileType.fromOctal(\"100644\"), Hash.zero(),\n-                                    Status.from('A'), List.of(hunk));\n-        var diff = new Diff(Hash.zero(), Hash.zero(), List.of(patch));\n-        var commit = commit(List.of(diff));\n+    void notAddOrCopyFileShouldPass() throws IOException {\n+        Path path = Path.of(\"file.s\");\n+        Files.deleteIfExists(path);\n+        Files.createFile(path);\n+        Files.write(path, List.of(\"testtest\"));\n+        var commit = commit(binaryParentDiffs(path, Status.from(\"D\"), 9, List.of(\"testtest\")));\n@@ -98,9 +129,82 @@\n-        var issues = toList(check.check(commit, message, conf, null));\n-        assertEquals(1, issues.size());\n-        assertTrue(issues.get(0) instanceof BinaryIssue);\n-        var issue = (BinaryIssue) issues.get(0);\n-        assertEquals(Path.of(\"file.bin\"), issue.path());\n-        assertEquals(commit, issue.commit());\n-        assertEquals(message, issue.message());\n-        assertEquals(check, issue.check());\n-        assertEquals(Severity.ERROR, issue.severity());\n+        var issues = toList(check.check(commit, message, binaryNotAllowedConf, null));\n+        assertEquals(0, issues.size());\n+        issues = toList(check.check(commit, message, binaryAllowedConf, null));\n+        assertEquals(0, issues.size());\n+        issues = toList(check.check(commit, message, zeroMaxSizeConf, null));\n+        assertEquals(0, issues.size());\n+        Files.deleteIfExists(path);\n+    }\n+\n+    @Test\n+    void binaryFileNotAllowed() throws IOException {\n+        Path path = Path.of(\"file.bin\");\n+        Files.deleteIfExists(path);\n+        Files.createFile(path);\n+        Files.write(path, List.of(\"testtest\"));\n+        for (var status : List.of(Status.from(\"A\"), Status.from(\"C100\"), Status.from(\"M\"), Status.from(\"U\"), Status.from(\"R100\"))) {\n+            var commit = commit(binaryParentDiffs(path, status, 9, List.of(\"testtest\")));\n+            var message = message(commit);\n+            var check = new BinaryCheck();\n+\n+            var issues = toList(check.check(commit, message, binaryNotAllowedConf, null));\n+            assertEquals(1, issues.size());\n+            assertTrue(issues.get(0) instanceof BinaryIssue);\n+            var issue = (BinaryIssue) issues.get(0);\n+            assertEquals(path, issue.path());\n+            assertEquals(commit, issue.commit());\n+            assertEquals(message, issue.message());\n+            assertEquals(check, issue.check());\n+            assertEquals(Severity.ERROR, issue.severity());\n+\n+            issues = toList(check.check(commit, message, zeroMaxSizeConf, null));\n+            assertEquals(1, issues.size());\n+            assertTrue(issues.get(0) instanceof BinaryIssue);\n+            issue = (BinaryIssue) issues.get(0);\n+            assertEquals(path, issue.path());\n+            assertEquals(commit, issue.commit());\n+            assertEquals(message, issue.message());\n+            assertEquals(check, issue.check());\n+            assertEquals(Severity.ERROR, issue.severity());\n+        }\n+        Files.deleteIfExists(path);\n+    }\n+\n+    @Test\n+    void binaryFileInRange() throws IOException {\n+        Path path = Path.of(\"file.bin\");\n+        Files.deleteIfExists(path);\n+        Files.createFile(path);\n+        Files.write(path, List.of(\"t\"));\n+        for (var status : List.of(Status.from(\"A\"), Status.from(\"C100\"), Status.from(\"M\"), Status.from(\"U\"), Status.from(\"R100\"))) {\n+            var commit = commit(binaryParentDiffs(path, status, 2, List.of(\"testtest\")));\n+            var message = message(commit);\n+            var check = new BinaryCheck();\n+            var issues = toList(check.check(commit, message, binaryAllowedConf, null));\n+            assertEquals(0, issues.size());\n+        }\n+        Files.deleteIfExists(path);\n+    }\n+\n+    @Test\n+    void binaryFileTooLarge() throws IOException {\n+        Path path = Path.of(\"file.bin\");\n+        Files.deleteIfExists(path);\n+        Files.createFile(path);\n+        Files.write(path, List.of(\"testtest\"));\n+        for (var status : List.of(Status.from(\"A\"), Status.from(\"C100\"), Status.from(\"M\"), Status.from(\"U\"), Status.from(\"R100\"))) {\n+            var commit = commit(binaryParentDiffs(path, status, 9, List.of(\"testtest\")));\n+            var message = message(commit);\n+            var check = new BinaryCheck();\n+            var issues = toList(check.check(commit, message, binaryAllowedConf, null));\n+            assertEquals(1, issues.size());\n+            assertTrue(issues.get(0) instanceof BinaryFileTooLargeIssue);\n+            var issue = (BinaryFileTooLargeIssue) issues.get(0);\n+            assertEquals(path, issue.path());\n+            assertTrue(issue.fileSize() > issue.maxSize());\n+            assertEquals(binaryAllowedConf.checks().binary().maxSize(), issue.maxSize());\n+            assertEquals(commit, issue.commit());\n+            assertEquals(message, issue.message());\n+            assertEquals(check, issue.check());\n+            assertEquals(Severity.ERROR, issue.severity());\n+        }\n+        Files.deleteIfExists(path);\n","filename":"jcheck\/src\/test\/java\/org\/openjdk\/skara\/jcheck\/BinaryCheckTests.java","additions":127,"deletions":23,"binary":false,"changes":150,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -236,0 +236,5 @@\n+        @Override\n+        public void visit(BinaryFileTooLargeIssue e) {\n+            issues.add(e);\n+        }\n+\n","filename":"jcheck\/src\/test\/java\/org\/openjdk\/skara\/jcheck\/JCheckTests.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,51 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.jcheck;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.openjdk.skara.jcheck.SizeUtils.*;\n+\n+public class SizeUtilsTest {\n+    @Test\n+    void testGetSizeFromString() {\n+        String[] simpleLowerStrList = new String[]{\"1\", \"2b\", \"3k\", \"4m\", \"5g\", \"\", \"a\", \"ab\", \"ak\", \"am\", \"ag\"};\n+        String[] simpleUpperStrList = new String[]{\"1\", \"2B\", \"3K\", \"4M\", \"5G\", \"\", \"A\", \"AB\", \"AK\", \"AM\", \"AG\"};\n+        long[] simpleSizeList = new long[]{1L, 2L, 3L * 1024, 4L * 1024 * 1024, 5L * 1024 * 1024 * 1024, 0, 0, 0, 0, 0, 0};\n+        for (int i = 0; i < simpleSizeList.length; i++) {\n+            assertEquals(simpleSizeList[i], getSizeFromString(simpleLowerStrList[i]));\n+            assertEquals(simpleSizeList[i], getSizeFromString(simpleUpperStrList[i]));\n+        }\n+\n+        String[] kiloStrList = new String[]{\"1kb\", \"2Kb\", \"3kB\", \"4KB\", \"akb\", \"aKb\", \"akB\", \"aKB\", \"kb\", \"Kb\", \"kB\", \"KB\"};\n+        String[] mageStrList = new String[]{\"1mb\", \"2Mb\", \"3mB\", \"4MB\", \"amb\", \"aMb\", \"amB\", \"aMB\", \"mb\", \"Mb\", \"mB\", \"MB\"};\n+        String[] gigaStrList = new String[]{\"1gb\", \"2Gb\", \"3gB\", \"4GB\", \"agb\", \"aGb\", \"agB\", \"aGB\", \"gb\", \"Gb\", \"gB\", \"GB\"};\n+        long[] expectedSizeList = new long[]{1L, 2L, 3L, 4L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L};\n+        for (int i = 0; i < expectedSizeList.length; i++) {\n+            assertEquals(expectedSizeList[i] * 1024, getSizeFromString(kiloStrList[i]));\n+            assertEquals(expectedSizeList[i] * 1024 * 1024, getSizeFromString(mageStrList[i]));\n+            assertEquals(expectedSizeList[i] * 1024 * 1024 * 1024, getSizeFromString(gigaStrList[i]));\n+        }\n+    }\n+}\n","filename":"jcheck\/src\/test\/java\/org\/openjdk\/skara\/jcheck\/SizeUtilsTest.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"}]}