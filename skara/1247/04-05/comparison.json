{"files":[{"patch":"@@ -55,1 +55,1 @@\n-                if (maxSize == 0) {\n+                if (maxSize <= 0) {\n@@ -59,0 +59,6 @@\n+                if (patch.status().isRenamed() || patch.status().isCopied()) {\n+                    \/\/ Excluded the renamed and copied files now. Note that the moved file is identified as renamed.\n+                    \/\/ It should be seperated from the deleted file, because the deleted file don't need\n+                    \/\/ to be checked, but the renamed file should be checked for the `BinaryIssue`.\n+                    continue;\n+                }\n@@ -62,5 +68,2 @@\n-                    var path =  binaryPatch.target().path().get();\n-                    try {\n-                        fileSize = Files.size(path);\n-                    } catch (IOException e) {\n-                        log.warning(\"The file '\" + path + \"' doesn't exist.\");\n+                    for (var hunk : binaryPatch.hunks()) {\n+                        fileSize += hunk.inflatedSize();\n@@ -69,0 +72,2 @@\n+                        var path = binaryPatch.target().path().isPresent() ?\n+                                binaryPatch.target().path().get() : binaryPatch.source().path().get();\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/BinaryCheck.java","additions":11,"deletions":6,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -121,1 +121,1 @@\n-    void notAddOrCopyFileShouldPass() throws IOException {\n+    void deletedFileShouldPass() throws IOException {\n@@ -194,1 +194,1 @@\n-        for (var status : List.of(Status.from(\"A\"), Status.from(\"C100\"), Status.from(\"M\"), Status.from(\"U\"), Status.from(\"R100\"))) {\n+        for (var status : List.of(Status.from(\"A\"), Status.from(\"M\"), Status.from(\"U\"))) {\n","filename":"jcheck\/src\/test\/java\/org\/openjdk\/skara\/jcheck\/BinaryCheckTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}