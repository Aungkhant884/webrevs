{"files":[{"patch":"@@ -264,0 +264,6 @@\n+    @Override\n+    public void visit(BinaryIssue issue) {\n+        addFailureMessage(issue.check(), \"The binary file \" + issue.path().toString() + \" is not allowed in this repository.\");\n+        readyForReview = false;\n+    }\n+\n@@ -267,2 +273,2 @@\n-                + (issue.fileSize() > 1 ? \" Bytes\" : \" Byte\") + \", which is larger than the limited file size: \"\n-                + issue.limitedFileSize() + (issue.limitedFileSize() > 1 ? \" Bytes.\" : \" Byte.\"));\n+                + \" Bytes, which is larger than the limited file size: \"\n+                + issue.maxSize() + (issue.maxSize() > 1 ? \" Bytes.\" : \" Byte.\"));\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestCheckIssueVisitor.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -293,0 +293,7 @@\n+    public void visit(BinaryIssue i) {\n+        if (!ignore.contains(i.check().name())) {\n+            println(i, \"The binary file \" + i.path().toString() + \" is not allowed in this repository.\");\n+            hasDisplayedErrors = true;\n+        }\n+    }\n+\n@@ -296,2 +303,2 @@\n-                    + (i.fileSize() > 1 ? \" Bytes\" : \" Byte\") + \", which is larger than the limited file size: \"\n-                    + i.limitedFileSize() + (i.limitedFileSize() > 1 ? \" Bytes.\" : \" Byte.\"));\n+                    + \" Bytes, which is larger than the limited file size: \"\n+                    + i.maxSize() + (i.maxSize() > 1 ? \" Bytes.\" : \" Byte.\"));\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/JCheckCLIVisitor.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,2 +57,1 @@\n-        \/\/ The BinaryConfiguration need a fixed iteration order.\n-        this.entries = new LinkedHashMap<>();\n+        this.entries = new HashMap<>();\n","filename":"ini\/src\/main\/java\/org\/openjdk\/skara\/ini\/Section.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-import java.util.Map;\n@@ -36,1 +35,0 @@\n-import java.util.regex.Pattern;\n@@ -44,1 +42,1 @@\n-        var fileSizeLimits = conf.checks().binary().fileSizeLimits();\n+        var maxSize = conf.checks().binary().maxSize();\n@@ -53,14 +51,12 @@\n-                var binaryPatch = (BinaryPatch) patch;\n-                var path =  binaryPatch.target().path().orElse(null);\n-                var fileName = path != null ? path.getFileName().toString() : \"\";\n-\n-                long fileSize = 0;\n-                boolean needCheck = false;\n-\n-                if (binaryPatch.status().isAdded()) {\n-                    \/\/ This is a new-added file, so the BinaryHunk#inflatedSize of the first hunk should be the file size.\n-                    fileSize = binaryPatch.hunks().get(0).inflatedSize();\n-                    needCheck = true;\n-                } else if (binaryPatch.status().isRenamed() || binaryPatch.status().isCopied()\n-                        || binaryPatch.status().isModified() || binaryPatch.status().isUnmerged()) {\n-                    \/\/ Use the file size in the file system.\n+                if (!patch.status().isAdded() && !patch.status().isCopied()) {\n+                    continue;\n+                }\n+                \/\/ Here, the binary file is newly added or copied.\n+                if (maxSize == 0) {\n+                    \/\/ If the maxSize is not set or is set to 0, any binary file can't be added.\n+                    issues.add(new BinaryIssue(patch.target().path().get(), metadata));\n+                }\n+                if (maxSize > 0) {\n+                    long fileSize = 0;\n+                    var binaryPatch = (BinaryPatch) patch;\n+                    var path =  binaryPatch.target().path().get();\n@@ -68,2 +64,1 @@\n-                        fileSize = path != null ? Files.size(path) : 0;\n-                        needCheck = true;\n+                        fileSize = Files.size(path);\n@@ -71,1 +66,1 @@\n-                        log.warning(\"The file '\" + path + \"' doesn't exist. \");\n+                        log.warning(\"The file '\" + path + \"' doesn't exist.\");\n@@ -73,11 +68,2 @@\n-                }\n-\n-                \/\/ If the size of the binary file exceeds the limited size, the check should fail.\n-                if (needCheck) {\n-                    var excessSize = calculateExcessSize(fileSizeLimits, fileName, fileSize);\n-                    if (excessSize > 0) {\n-                        var limitedSize = fileSize - excessSize;\n-                        log.info(\"The size of the binary file `\" + path + \"` is \" + fileSize\n-                                 + (fileSize > 1 ? \" Bytes\" : \" Byte\") + \", which is larger than the limited file size: \"\n-                                 + limitedSize + (limitedSize > 1 ? \" Bytes.\" : \" Byte.\"));\n-                        issues.add(new BinaryFileTooLargeIssue(path, fileSize, limitedSize, metadata));\n+                    if (fileSize > maxSize) {\n+                        issues.add(new BinaryFileTooLargeIssue(path, fileSize, maxSize, metadata));\n@@ -91,14 +77,0 @@\n-    \/**\n-     * Check whether the file size is exceeded and return the excess size.\n-     * @return the value of (the file size - the limited size)\n-     *\/\n-    private long calculateExcessSize(Map<Pattern, Long> fileSizeLimits, String fileName, long fileSize) {\n-        for (var entry : fileSizeLimits.entrySet()) {\n-            if (entry.getKey().matcher(fileName).matches()) {\n-                return fileSize - entry.getValue();\n-            }\n-        }\n-        \/\/ the `fileSizeLimits` has no related limits about this file.\n-        return 0;\n-    }\n-\n@@ -112,1 +84,1 @@\n-        return \"Files should not be binary\";\n+        return \"Binary files don't meet the requirement.\";\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/BinaryCheck.java","additions":18,"deletions":46,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -27,4 +27,0 @@\n-import java.util.LinkedHashMap;\n-import java.util.Map;\n-import java.util.regex.Pattern;\n-\n@@ -33,1 +29,1 @@\n-            new BinaryConfiguration(new LinkedHashMap<>());\n+            new BinaryConfiguration(0);\n@@ -35,1 +31,1 @@\n-    private final Map<Pattern, Long> fileSizeLimits;\n+    private final long maxSize;\n@@ -37,2 +33,2 @@\n-    private BinaryConfiguration(Map<Pattern, Long> fileSizeLimits) {\n-        this.fileSizeLimits = fileSizeLimits;\n+    private BinaryConfiguration(long maxSize) {\n+        this.maxSize = maxSize;\n@@ -45,5 +41,1 @@\n-        Map<Pattern, Long> fileSizeLimits = new LinkedHashMap<>();\n-        for (var entry : s.entries()) {\n-            fileSizeLimits.put(Pattern.compile(entry.key()), SizeUtils.getSizeFromString(entry.value().asString()));\n-        }\n-        return new BinaryConfiguration(fileSizeLimits);\n+        return new BinaryConfiguration(SizeUtils.getSizeFromString(s.get(\"max-size\").asString()));\n@@ -56,2 +48,2 @@\n-    public Map<Pattern, Long> fileSizeLimits() {\n-        return fileSizeLimits;\n+    public long maxSize() {\n+        return maxSize;\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/BinaryConfiguration.java","additions":7,"deletions":15,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-    private final long limitedFileSize;\n+    private final long maxSize;\n@@ -32,1 +32,1 @@\n-    BinaryFileTooLargeIssue(Path path, long fileSize, long limitedFileSize, CommitIssue.Metadata metadata) {\n+    BinaryFileTooLargeIssue(Path path, long fileSize, long maxSize, CommitIssue.Metadata metadata) {\n@@ -36,1 +36,1 @@\n-        this.limitedFileSize = limitedFileSize;\n+        this.maxSize = maxSize;\n@@ -47,2 +47,2 @@\n-    public long limitedFileSize() {\n-        return limitedFileSize;\n+    public long maxSize() {\n+        return maxSize;\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/BinaryFileTooLargeIssue.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-public class ExecutableIssue extends CommitIssue {\n+public class BinaryIssue extends CommitIssue {\n@@ -30,1 +30,1 @@\n-    ExecutableIssue(Path path, CommitIssue.Metadata metadata) {\n+    BinaryIssue(Path path, CommitIssue.Metadata metadata) {\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/BinaryIssue.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/ExecutableIssue.java","status":"copied"},{"patch":"@@ -44,0 +44,1 @@\n+    void visit(BinaryIssue issue);\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/IssueVisitor.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -41,8 +41,24 @@\n-    private static final JCheckConfiguration conf = JCheckConfiguration.parse(List.of(\n-        \"[general]\",\n-        \"project = test\",\n-        \"[checks]\",\n-        \"error = binary\",\n-        \"[checks \\\"binary\\\"]\",\n-        \".*\\\\.bin=1b\",\n-        \".*\\\\.o=1k\"\n+    private static final JCheckConfiguration binaryNotAllowedConf = JCheckConfiguration.parse(List.of(\n+            \"[general]\",\n+            \"project = test\",\n+            \"[checks]\",\n+            \"error = binary\"\n+    ));\n+\n+    private static final JCheckConfiguration binaryAllowedConf = JCheckConfiguration.parse(List.of(\n+            \"[general]\",\n+            \"project = test\",\n+            \"[checks]\",\n+            \"error = binary\",\n+            \"[checks \\\"binary\\\"]\",\n+            \"max-size=6b\"\n+    ));\n+\n+    \/\/ Same as `binaryNotAllowedConf`\n+    private static final JCheckConfiguration zeroMaxSizeConf = JCheckConfiguration.parse(List.of(\n+            \"[general]\",\n+            \"project = test\",\n+            \"[checks]\",\n+            \"error = binary\",\n+            \"[checks \\\"binary\\\"]\",\n+            \"max-size=0\"\n@@ -96,1 +112,5 @@\n-        var issues = toList(check.check(commit, message, conf, null));\n+        var issues = toList(check.check(commit, message, binaryNotAllowedConf, null));\n+        assertEquals(0, issues.size());\n+        issues = toList(check.check(commit, message, binaryAllowedConf, null));\n+        assertEquals(0, issues.size());\n+        issues = toList(check.check(commit, message, zeroMaxSizeConf, null));\n@@ -101,2 +121,1 @@\n-    void binaryFileNotLimited() throws IOException {\n-        \/\/ The size of the file `*.s` is not limited in the config file.\n+    void notAddOrCopyFileShouldPass() throws IOException {\n@@ -107,1 +126,1 @@\n-        for (var status : List.of(Status.from(\"A\"), Status.from(\"M\"), Status.from(\"U\"), Status.from(\"R100\"), Status.from(\"C100\"))) {\n+        for (var status : List.of(Status.from(\"M\"), Status.from(\"U\"), Status.from(\"R100\"))) {\n@@ -111,1 +130,5 @@\n-            var issues = toList(check.check(commit, message, conf, null));\n+            var issues = toList(check.check(commit, message, binaryNotAllowedConf, null));\n+            assertEquals(0, issues.size());\n+            issues = toList(check.check(commit, message, binaryAllowedConf, null));\n+            assertEquals(0, issues.size());\n+            issues = toList(check.check(commit, message, zeroMaxSizeConf, null));\n@@ -118,3 +141,2 @@\n-    void binaryFileInRange() throws IOException {\n-        \/\/ The size of the file `*.o` is limited to 1k in the config file.\n-        Path path = Path.of(\"file.o\");\n+    void binaryFileNotAllowed() throws IOException {\n+        Path path = Path.of(\"file.bin\");\n@@ -124,1 +146,1 @@\n-        for (var status : List.of(Status.from(\"A\"), Status.from(\"M\"), Status.from(\"U\"), Status.from(\"R100\"), Status.from(\"C100\"))) {\n+        for (var status : List.of(Status.from(\"A\"), Status.from(\"C100\"))) {\n@@ -128,1 +150,35 @@\n-            var issues = toList(check.check(commit, message, conf, null));\n+\n+            var issues = toList(check.check(commit, message, binaryNotAllowedConf, null));\n+            assertEquals(1, issues.size());\n+            assertTrue(issues.get(0) instanceof BinaryIssue);\n+            var issue = (BinaryIssue) issues.get(0);\n+            assertEquals(path, issue.path());\n+            assertEquals(commit, issue.commit());\n+            assertEquals(message, issue.message());\n+            assertEquals(check, issue.check());\n+            assertEquals(Severity.ERROR, issue.severity());\n+\n+            issues = toList(check.check(commit, message, zeroMaxSizeConf, null));\n+            assertEquals(1, issues.size());\n+            assertTrue(issues.get(0) instanceof BinaryIssue);\n+            issue = (BinaryIssue) issues.get(0);\n+            assertEquals(path, issue.path());\n+            assertEquals(commit, issue.commit());\n+            assertEquals(message, issue.message());\n+            assertEquals(check, issue.check());\n+            assertEquals(Severity.ERROR, issue.severity());\n+        }\n+        Files.deleteIfExists(path);\n+    }\n+\n+    @Test\n+    void binaryFileInRange() throws IOException {\n+        Path path = Path.of(\"file.bin\");\n+        Files.deleteIfExists(path);\n+        Files.createFile(path);\n+        Files.write(path, List.of(\"t\"));\n+        for (var status : List.of(Status.from(\"A\"), Status.from(\"C100\"))) {\n+            var commit = commit(binaryParentDiffs(path, status, 2, List.of(\"testtest\")));\n+            var message = message(commit);\n+            var check = new BinaryCheck();\n+            var issues = toList(check.check(commit, message, binaryAllowedConf, null));\n@@ -136,1 +192,0 @@\n-        \/\/ The size of the file `*.bin` is limited to 1b in the config file.\n@@ -141,1 +196,1 @@\n-        for (var status : List.of(Status.from(\"A\"), Status.from(\"M\"), Status.from(\"U\"), Status.from(\"R100\"), Status.from(\"C100\"))) {\n+        for (var status : List.of(Status.from(\"A\"), Status.from(\"C100\"))) {\n@@ -145,1 +200,1 @@\n-            var issues = toList(check.check(commit, message, conf, null));\n+            var issues = toList(check.check(commit, message, binaryAllowedConf, null));\n@@ -150,2 +205,2 @@\n-            assertTrue(issue.fileSize() > issue.limitedFileSize());\n-            assertEquals(1, issue.limitedFileSize());\n+            assertTrue(issue.fileSize() > issue.maxSize());\n+            assertEquals(binaryAllowedConf.checks().binary().maxSize(), issue.maxSize());\n","filename":"jcheck\/src\/test\/java\/org\/openjdk\/skara\/jcheck\/BinaryCheckTests.java","additions":78,"deletions":23,"binary":false,"changes":101,"status":"modified"},{"patch":"@@ -231,0 +231,5 @@\n+        @Override\n+        public void visit(BinaryIssue e) {\n+            issues.add(e);\n+        }\n+\n","filename":"jcheck\/src\/test\/java\/org\/openjdk\/skara\/jcheck\/JCheckTests.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}