{"files":[{"patch":"@@ -332,0 +332,3 @@\n+            if (pr.labels().contains(TEST_REQUEST_LABEL)) {\n+                pr.removeLabel(TEST_REQUEST_LABEL);\n+            }\n","filename":"bots\/tester\/src\/main\/java\/org\/openjdk\/skara\/bots\/tester\/TestWorkItem.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1203,0 +1203,98 @@\n+\n+    @Test\n+    void cancelledPendingTestShouldNotHaveTestRequestLabel() throws IOException {\n+        try (var tmp = new TemporaryDirectory()) {\n+            var ci = new InMemoryContinuousIntegration();\n+            var approvers = \"0\";\n+            var available = List.of(\"tier1\", \"tier2\", \"tier3\");\n+            var defaultJobs = List.of(\"tier1\");\n+            var name = \"test\";\n+            var storage = tmp.path().resolve(\"storage\");\n+            var scratch = tmp.path().resolve(\"storage\");\n+\n+            var bot = HostUser.create(1, \"bot\", \"openjdk [bot]\");\n+            var host = new InMemoryHost();\n+            host.currentUserDetails = bot;\n+\n+            var repo = new InMemoryHostedRepository();\n+            repo.host = host;\n+\n+            var pr = new InMemoryPullRequest();\n+            pr.repository = repo;\n+\n+            var duke = HostUser.create(0, \"duke\", \"Duke\");\n+            host.groups = Map.of(approvers, Set.of(duke));\n+            pr.author = duke;\n+            pr.headHash = new Hash(\"01234567890123456789012345789012345789\");\n+\n+            var now = ZonedDateTime.now();\n+            var comment = new Comment(\"0\", \"\/test foobar\", duke, now, now);\n+            pr.comments = new ArrayList<>(List.of(comment));\n+\n+            var item = new TestWorkItem(ci, approvers, Set.of(), available, defaultJobs, name, storage, pr,\n+                                        u -> false);\n+\n+            \/\/ Non-existing test group should result in error\n+            item.run(scratch);\n+\n+            var comments = pr.comments();\n+            assertEquals(2, comments.size());\n+            assertEquals(comment, comments.get(0));\n+\n+            var secondComment = comments.get(1);\n+            assertEquals(bot, secondComment.author());\n+\n+            var lines = secondComment.body().split(\"\\n\");\n+            assertEquals(2, lines.length);\n+            assertEquals(\"<!-- TEST ERROR -->\", lines[0]);\n+            assertEquals(\"@duke the test group foobar does not exist\", lines[1]);\n+\n+            \/\/ Trying to test again should be fine\n+            var thirdComment = new Comment(\"2\", \"\/test tier1\", duke, now, now);\n+            pr.comments.add(thirdComment);\n+            item.run(scratch);\n+\n+            comments = pr.comments();\n+            assertEquals(4, comments.size());\n+            assertEquals(comment, comments.get(0));\n+            assertEquals(secondComment, comments.get(1));\n+            assertEquals(thirdComment, comments.get(2));\n+\n+            var fourthComment = comments.get(3);\n+            assertEquals(bot, fourthComment.author());\n+\n+            lines = fourthComment.body().split(\"\\n\");\n+            assertEquals(\"<!-- TEST PENDING -->\", lines[0]);\n+            assertEquals(\"<!-- 01234567890123456789012345789012345789 -->\", lines[1]);\n+            assertEquals(\"<!-- tier1 -->\", lines[2]);\n+            assertEquals(\"@duke you need to get approval to run the tests in tier1 for commits up until 01234567\",\n+                         lines[3]);\n+\n+            assertEquals(List.of(\"test-request\"), pr.labels());\n+\n+            \/\/ Nothing should change if we run it yet again\n+            item.run(scratch);\n+\n+            comments = pr.comments();\n+            assertEquals(4, comments.size());\n+            assertEquals(comment, comments.get(0));\n+            assertEquals(secondComment, comments.get(1));\n+            assertEquals(thirdComment, comments.get(2));\n+            assertEquals(fourthComment, comments.get(3));\n+\n+            \/\/ Cancelling the test again should remove the test-request label\n+            var fifthComment = new Comment(\"4\", \"\/test cancel\", duke, now, now);\n+            pr.comments.add(fifthComment);\n+            item.run(scratch);\n+\n+            comments = pr.comments();\n+            assertEquals(5, comments.size());\n+            assertEquals(comment, comments.get(0));\n+            assertEquals(secondComment, comments.get(1));\n+            assertEquals(thirdComment, comments.get(2));\n+            assertEquals(fourthComment, comments.get(3));\n+            assertEquals(fifthComment, comments.get(4));\n+\n+            assertEquals(List.of(), pr.labels());\n+        }\n+    }\n","filename":"bots\/tester\/src\/test\/java\/org\/openjdk\/skara\/bots\/tester\/TestWorkItemTests.java","additions":98,"deletions":0,"binary":false,"changes":98,"status":"modified"},{"patch":"@@ -53,0 +53,4 @@\n+        Switch.shortcut(\"\")\n+              .fullname(\"cancel\")\n+              .helptext(\"Cancel a test request\")\n+              .optional(),\n@@ -87,0 +91,2 @@\n+        } else if (arguments.contains(\"cancel\")) {\n+            command += \" cancel\";\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/pr\/GitPrTest.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}