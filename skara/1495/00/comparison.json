{"files":[{"patch":"@@ -75,0 +75,1 @@\n+    private final boolean reviewMergePullRequest;\n@@ -80,1 +81,2 @@\n-                     CensusInstance censusInstance, boolean ignoreStaleReviews, Set<String> integrators, boolean reviewCleanBackport) throws IOException {\n+                     CensusInstance censusInstance, boolean ignoreStaleReviews, Set<String> integrators, boolean reviewCleanBackport,\n+                     boolean reviewMergePullRequest) throws IOException {\n@@ -93,0 +95,1 @@\n+        this.reviewMergePullRequest = reviewMergePullRequest;\n@@ -103,1 +106,1 @@\n-                        boolean ignoreStaleReviews, Set<String> integrators, boolean reviewCleanBackport) throws IOException {\n+                        boolean ignoreStaleReviews, Set<String> integrators, boolean reviewCleanBackport, boolean reviewMergePullRequest) throws IOException {\n@@ -105,1 +108,1 @@\n-                ignoreStaleReviews, integrators, reviewCleanBackport);\n+                ignoreStaleReviews, integrators, reviewCleanBackport, reviewMergePullRequest);\n@@ -1201,0 +1204,1 @@\n+\n@@ -1203,0 +1207,5 @@\n+            \/\/ Merge PullRequest doesn't need review unless review is explicitly requested\n+            if (PullRequestUtils.isMerge(pr) && !reviewMergePullRequest) {\n+                reviewNeeded = false;\n+            }\n+\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -429,1 +429,2 @@\n-                        activeReviews, labels, census, bot.ignoreStaleReviews(), bot.integrators(), bot.reviewCleanBackport());\n+                        activeReviews, labels, census, bot.ignoreStaleReviews(), bot.integrators(), bot.reviewCleanBackport(),\n+                        bot.reviewMergePullRequest());\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckWorkItem.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import org.openjdk.skara.jcheck.ReviewersCheck;\n@@ -225,1 +226,5 @@\n-            if (runJcheck(pr, censusInstance, allComments, reply, localRepo, checkablePr, localHash)) {\n+            \/\/ When integrating backport pr or merge pr, we should ignore Reviewers Check\n+            boolean ignoreReviewersCheck = (original != null && !bot.reviewCleanBackport())\n+                    || (PullRequestUtils.isMerge(pr) && !bot.reviewMergePullRequest());\n+\n+            if (runJcheck(pr, censusInstance, allComments, reply, localRepo, checkablePr, localHash, ignoreReviewersCheck)) {\n@@ -262,1 +267,1 @@\n-                      Repository localRepo, CheckablePullRequest checkablePr, Hash localHash) throws IOException {\n+                      Repository localRepo, CheckablePullRequest checkablePr, Hash localHash, boolean ignoreReviewersCheck) throws IOException {\n@@ -266,1 +271,2 @@\n-        if (!issues.messages().isEmpty()) {\n+        var errorMessage = ignoreReviewersCheck ? issues.messages(List.of(ReviewersCheck.class)) : issues.messages();\n+        if (!errorMessage.isEmpty()) {\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/IntegrateCommand.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -68,0 +68,1 @@\n+    private final boolean reviewMergePullRequest;\n@@ -80,1 +81,1 @@\n-                   boolean reviewCleanBackport, String mlbridgeBotName) {\n+                   boolean reviewCleanBackport, String mlbridgeBotName, boolean reviewMergePullRequest) {\n@@ -107,0 +108,1 @@\n+        this.reviewMergePullRequest = reviewMergePullRequest;\n@@ -277,0 +279,4 @@\n+    public boolean reviewMergePullRequest(){\n+        return reviewMergePullRequest;\n+    }\n+\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBot.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,1 +59,0 @@\n-\n@@ -61,0 +60,1 @@\n+    private boolean reviewMergePullRequest = false;\n@@ -195,0 +195,5 @@\n+    public PullRequestBotBuilder reviewMergePullRequest(boolean reviewMergePullRequest) {\n+        this.reviewMergePullRequest = reviewMergePullRequest;\n+        return this;\n+    }\n+\n@@ -202,1 +207,1 @@\n-                                  enableCsr, enableJep, reviewCleanBackport, mlbridgeBotName);\n+                                  enableCsr, enableJep, reviewCleanBackport, mlbridgeBotName, reviewMergePullRequest);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBotBuilder.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -119,1 +119,1 @@\n-                                           .repo(repository)\n+                                           .repo(configuration.repository(repo.name()))\n@@ -198,0 +198,4 @@\n+            if (repo.value().contains(\"reviewMergePullRequest\")) {\n+                botBuilder.reviewMergePullRequest(repo.value().get(\"reviewMergePullRequest\").asBoolean());\n+            }\n+\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBotFactory.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -65,0 +65,7 @@\n+    List<String> messages(List<Class<? extends Check>> ignoreChecks) {\n+        return failedChecks.keySet()\n+                .stream()\n+                .filter(e -> !ignoreChecks.contains(e))\n+                .map(failedChecks::get).toList();\n+    }\n+\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestCheckIssueVisitor.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -126,1 +126,2 @@\n-            if (IntegrateCommand.runJcheck(pr, censusInstance, allComments, reply, localRepo, checkablePr, localHash)) {\n+            var ignoreReviewersCheck = original != null || PullRequestUtils.isMerge(pr);\n+            if (IntegrateCommand.runJcheck(pr, censusInstance, allComments, reply, localRepo, checkablePr, localHash, ignoreReviewersCheck)) {\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/SponsorCommand.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -86,4 +86,0 @@\n-            \/\/ Approve it as another user\n-            var approvalPr = integrator.pullRequest(pr.id());\n-            approvalPr.addReview(Review.Verdict.APPROVED, \"Approved\");\n-\n@@ -105,0 +101,94 @@\n+            var pushedRepo = Repository.materialize(pushedRepoFolder, author.authenticatedUrl(), \"master\");\n+            assertTrue(CheckableRepository.hasBeenEdited(pushedRepo));\n+\n+            \/\/ The commits from the \"other\" branch should be preserved and not squashed (but not the merge commit)\n+            var headHash = pushedRepo.resolve(\"HEAD\").orElseThrow();\n+            Set<Hash> commits;\n+            try (var tempCommits = pushedRepo.commits(masterHash.hex() + \"..\" + headHash.hex())) {\n+                commits = tempCommits.stream()\n+                        .map(Commit::hash)\n+                        .collect(Collectors.toSet());\n+            }\n+            assertTrue(commits.contains(otherHash1));\n+            assertTrue(commits.contains(otherHash2));\n+            assertFalse(commits.contains(mergeHash));\n+\n+            \/\/ Author and committer should updated in the merge commit\n+            var headCommit = pushedRepo.commits(headHash.hex() + \"^..\" + headHash.hex()).asList().get(0);\n+            assertEquals(\"Merge \" + author.name() + \":other_\/-1.2\", headCommit.message().get(0));\n+            assertEquals(\"Generated Committer 1\", headCommit.author().name());\n+            assertEquals(\"integrationcommitter1@openjdk.org\", headCommit.author().email());\n+            assertEquals(\"Generated Committer 1\", headCommit.committer().name());\n+            assertEquals(\"integrationcommitter1@openjdk.org\", headCommit.committer().email());\n+        }\n+    }\n+\n+    @Test\n+    void branchMergeWithReviewMergeRequest(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+\n+            var author = credentials.getHostedRepository();\n+            var integrator = credentials.getHostedRepository();\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addCommitter(author.forge().currentUser().id())\n+                    .addReviewer(integrator.forge().currentUser().id());\n+            var mergeBot = PullRequestBot.newBuilder().repo(integrator).censusRepo(censusBuilder.build())\n+                    .reviewMergePullRequest(true).build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.authenticatedUrl(), \"master\", true);\n+\n+            \/\/ Make more changes in another branch\n+            var otherHash1 = CheckableRepository.appendAndCommit(localRepo, \"First change in other_\/-1.2\",\n+                    \"First other_\/-1.2\\n\\nReviewed-by: integrationreviewer2\");\n+            localRepo.push(otherHash1, author.authenticatedUrl(), \"other_\/-1.2\", true);\n+            var otherHash2 = CheckableRepository.appendAndCommit(localRepo, \"Second change in other_\/-1.2\",\n+                    \"Second other_\/-1.2\\n\\nReviewed-by: integrationreviewer2\");\n+            localRepo.push(otherHash2, author.authenticatedUrl(), \"other_\/-1.2\");\n+\n+            \/\/ Go back to the original master\n+            localRepo.checkout(masterHash, true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var unrelated = Files.writeString(localRepo.root().resolve(\"unrelated.txt\"), \"Unrelated\", StandardCharsets.UTF_8);\n+            localRepo.add(unrelated);\n+            var updatedMaster = localRepo.commit(\"Unrelated\", \"some\", \"some@one\");\n+            localRepo.merge(otherHash2);\n+            localRepo.push(updatedMaster, author.authenticatedUrl(), \"master\");\n+\n+            var mergeHash = localRepo.commit(\"Merge commit\", \"some\", \"some@one\");\n+            localRepo.push(mergeHash, author.authenticatedUrl(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"Merge \" + author.name() + \":other_\/-1.2\");\n+\n+            \/\/ Let the bot check the status\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+\n+            \/\/ pr should not be ready, because review needed for merge pull requests\n+            assertFalse(pr.store().labelNames().contains(\"ready\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] Change must be properly reviewed\"));\n+\n+            \/\/ Approve it as another user\n+            var approvalPr = integrator.pullRequest(pr.id());\n+            approvalPr.addReview(Review.Verdict.APPROVED, \"Approved\");\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+\n+            assertTrue(pr.store().labelNames().contains(\"ready\"));\n+            assertTrue(pr.store().body().contains(\"- [x] Change must be properly reviewed\"));\n+\n+            \/\/ Push it\n+            pr.addComment(\"\/integrate\");\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+\n+            \/\/ The bot should reply with an ok message\n+            var pushed = pr.comments().stream()\n+                    .filter(comment -> comment.body().contains(\"Pushed as commit\"))\n+                    .count();\n+            assertEquals(1, pushed);\n+\n+            \/\/ The change should now be present on the master branch\n+            var pushedRepoFolder = tempFolder.path().resolve(\"pushedrepo\");\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/MergeTests.java","additions":94,"deletions":4,"binary":false,"changes":98,"status":"modified"},{"patch":"@@ -115,1 +115,2 @@\n-                          \"reviewCleanBackport\": true\n+                          \"reviewCleanBackport\": true,\n+                          \"reviewMergePullRequest\": true,\n@@ -163,0 +164,1 @@\n+            assertTrue(pullRequestBot1.reviewMergePullRequest());\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBotFactoryTest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-        if (commit.isMerge() || utils.addsHgTag(commit)) {\n+        if (utils.addsHgTag(commit)) {\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/ReviewersCheck.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}