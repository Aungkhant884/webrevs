{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n-    static List<String> get(ReadOnlyRepository repository, Hash hash, HostUser botUser, List<Comment> comments) throws IOException {\n+    static List<String> get(ReadOnlyRepository repository, Hash hash, HostUser botUser, List<Comment> comments, boolean reviewMerge) throws IOException {\n@@ -37,1 +37,1 @@\n-        if (additionalReviewers.isEmpty()) {\n+        if (additionalReviewers.isEmpty() && !reviewMerge) {\n@@ -42,0 +42,3 @@\n+        if (additionalReviewers.isEmpty()) {\n+            additionalReviewers = Optional.of(new ReviewersTracker.AdditionalRequiredReviewers(0, \"\"));\n+        }\n@@ -43,1 +46,0 @@\n-\n@@ -46,0 +48,3 @@\n+        if (reviewMerge) {\n+            ret.add(\"merge=check\");\n+        }\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/AdditionalConfiguration.java","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -75,0 +75,1 @@\n+    private final boolean reviewMerge;\n@@ -80,1 +81,2 @@\n-                     CensusInstance censusInstance, boolean ignoreStaleReviews, Set<String> integrators, boolean reviewCleanBackport) throws IOException {\n+                     CensusInstance censusInstance, boolean ignoreStaleReviews, Set<String> integrators, boolean reviewCleanBackport,\n+                     boolean reviewMerge) throws IOException {\n@@ -93,0 +95,1 @@\n+        this.reviewMerge = reviewMerge;\n@@ -103,1 +106,1 @@\n-                        boolean ignoreStaleReviews, Set<String> integrators, boolean reviewCleanBackport) throws IOException {\n+                        boolean ignoreStaleReviews, Set<String> integrators, boolean reviewCleanBackport, boolean reviewMerge) throws IOException {\n@@ -105,1 +108,1 @@\n-                ignoreStaleReviews, integrators, reviewCleanBackport);\n+                ignoreStaleReviews, integrators, reviewCleanBackport, reviewMerge);\n@@ -1155,1 +1158,2 @@\n-                var additionalConfiguration = AdditionalConfiguration.get(localRepo, localHash, pr.repository().forge().currentUser(), comments);\n+                var additionalConfiguration = AdditionalConfiguration.get(localRepo, localHash,\n+                        pr.repository().forge().currentUser(), comments, reviewMerge);\n@@ -1201,0 +1205,1 @@\n+\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -429,1 +429,2 @@\n-                        activeReviews, labels, census, bot.ignoreStaleReviews(), bot.integrators(), bot.reviewCleanBackport());\n+                        activeReviews, labels, census, bot.ignoreStaleReviews(), bot.integrators(), bot.reviewCleanBackport(),\n+                        bot.reviewMerge());\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckWorkItem.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -224,2 +224,1 @@\n-\n-            if (runJcheck(pr, censusInstance, allComments, reply, localRepo, checkablePr, localHash)) {\n+            if (runJcheck(pr, censusInstance, allComments, reply, localRepo, checkablePr, localHash, bot.reviewMerge())) {\n@@ -262,1 +261,1 @@\n-                      Repository localRepo, CheckablePullRequest checkablePr, Hash localHash) throws IOException {\n+                      Repository localRepo, CheckablePullRequest checkablePr, Hash localHash, boolean reviewMerge) throws IOException {\n@@ -264,1 +263,1 @@\n-        var additionalConfiguration = AdditionalConfiguration.get(localRepo, localHash, pr.repository().forge().currentUser(), allComments);\n+        var additionalConfiguration = AdditionalConfiguration.get(localRepo, localHash, pr.repository().forge().currentUser(), allComments, reviewMerge);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/IntegrateCommand.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -68,0 +68,1 @@\n+    private final boolean reviewMerge;\n@@ -80,1 +81,1 @@\n-                   boolean reviewCleanBackport, String mlbridgeBotName) {\n+                   boolean reviewCleanBackport, String mlbridgeBotName, boolean reviewMerge) {\n@@ -107,0 +108,1 @@\n+        this.reviewMerge = reviewMerge;\n@@ -277,0 +279,4 @@\n+    public boolean reviewMerge(){\n+        return reviewMerge;\n+    }\n+\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBot.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,1 +59,0 @@\n-\n@@ -61,0 +60,1 @@\n+    private boolean reviewMerge = false;\n@@ -195,0 +195,5 @@\n+    public PullRequestBotBuilder reviewMerge(boolean reviewMerge) {\n+        this.reviewMerge = reviewMerge;\n+        return this;\n+    }\n+\n@@ -202,1 +207,1 @@\n-                                  enableCsr, enableJep, reviewCleanBackport, mlbridgeBotName);\n+                                  enableCsr, enableJep, reviewCleanBackport, mlbridgeBotName, reviewMerge);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBotBuilder.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -198,0 +198,4 @@\n+            if (repo.value().contains(\"reviewMerge\")) {\n+                botBuilder.reviewMerge(repo.value().get(\"reviewMerge\").asBoolean());\n+            }\n+\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBotFactory.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -126,1 +126,1 @@\n-            if (IntegrateCommand.runJcheck(pr, censusInstance, allComments, reply, localRepo, checkablePr, localHash)) {\n+            if (IntegrateCommand.runJcheck(pr, censusInstance, allComments, reply, localRepo, checkablePr, localHash, bot.reviewMerge())) {\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/SponsorCommand.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -86,4 +86,0 @@\n-            \/\/ Approve it as another user\n-            var approvalPr = integrator.pullRequest(pr.id());\n-            approvalPr.addReview(Review.Verdict.APPROVED, \"Approved\");\n-\n@@ -130,0 +126,97 @@\n+    @Test\n+    void branchMergeWithReviewMergeRequest(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+\n+            var author = credentials.getHostedRepository();\n+            var integrator = credentials.getHostedRepository();\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addCommitter(author.forge().currentUser().id())\n+                    .addReviewer(integrator.forge().currentUser().id());\n+            var mergeBot = PullRequestBot.newBuilder().repo(integrator).censusRepo(censusBuilder.build())\n+                    .reviewMerge(true).build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.authenticatedUrl(), \"master\", true);\n+\n+            \/\/ Make more changes in another branch\n+            var otherHash1 = CheckableRepository.appendAndCommit(localRepo, \"First change in other_\/-1.2\",\n+                    \"First other_\/-1.2\\n\\nReviewed-by: integrationreviewer2\");\n+            localRepo.push(otherHash1, author.authenticatedUrl(), \"other_\/-1.2\", true);\n+            var otherHash2 = CheckableRepository.appendAndCommit(localRepo, \"Second change in other_\/-1.2\",\n+                    \"Second other_\/-1.2\\n\\nReviewed-by: integrationreviewer2\");\n+            localRepo.push(otherHash2, author.authenticatedUrl(), \"other_\/-1.2\");\n+\n+            \/\/ Go back to the original master\n+            localRepo.checkout(masterHash, true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var unrelated = Files.writeString(localRepo.root().resolve(\"unrelated.txt\"), \"Unrelated\", StandardCharsets.UTF_8);\n+            localRepo.add(unrelated);\n+            var updatedMaster = localRepo.commit(\"Unrelated\", \"some\", \"some@one\");\n+            localRepo.merge(otherHash2);\n+            localRepo.push(updatedMaster, author.authenticatedUrl(), \"master\");\n+\n+            var mergeHash = localRepo.commit(\"Merge commit\", \"some\", \"some@one\");\n+            localRepo.push(mergeHash, author.authenticatedUrl(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"Merge \" + author.name() + \":other_\/-1.2\");\n+\n+            \/\/ Let the bot check the status\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+\n+            \/\/ pr should not be ready, because review needed for merge pull requests\n+            assertFalse(pr.store().labelNames().contains(\"ready\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] Change must be properly reviewed\"));\n+\n+            \/\/ Approve it as another user\n+            var approvalPr = integrator.pullRequest(pr.id());\n+            approvalPr.addReview(Review.Verdict.APPROVED, \"Approved\");\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+\n+            assertTrue(pr.store().labelNames().contains(\"ready\"));\n+            assertTrue(pr.store().body().contains(\"- [x] Change must be properly reviewed\"));\n+\n+            \/\/ Push it\n+            pr.addComment(\"\/integrate\");\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+\n+            \/\/ The bot should reply with an ok message\n+            var pushed = pr.comments().stream()\n+                    .filter(comment -> comment.body().contains(\"Pushed as commit\"))\n+                    .count();\n+            assertEquals(1, pushed);\n+\n+            \/\/ The change should now be present on the master branch\n+            var pushedRepoFolder = tempFolder.path().resolve(\"pushedrepo\");\n+            var pushedRepo = Repository.materialize(pushedRepoFolder, author.authenticatedUrl(), \"master\");\n+            assertTrue(CheckableRepository.hasBeenEdited(pushedRepo));\n+\n+            \/\/ The commits from the \"other\" branch should be preserved and not squashed (but not the merge commit)\n+            var headHash = pushedRepo.resolve(\"HEAD\").orElseThrow();\n+            Set<Hash> commits;\n+            try (var tempCommits = pushedRepo.commits(masterHash.hex() + \"..\" + headHash.hex())) {\n+                commits = tempCommits.stream()\n+                        .map(Commit::hash)\n+                        .collect(Collectors.toSet());\n+            }\n+            assertTrue(commits.contains(otherHash1));\n+            assertTrue(commits.contains(otherHash2));\n+            assertFalse(commits.contains(mergeHash));\n+\n+            \/\/ Author and committer should updated in the merge commit\n+            var headCommit = pushedRepo.commits(headHash.hex() + \"^..\" + headHash.hex()).asList().get(0);\n+            assertEquals(\"Merge \" + author.name() + \":other_\/-1.2\", headCommit.message().get(0));\n+            assertEquals(\"Generated Committer 1\", headCommit.author().name());\n+            assertEquals(\"integrationcommitter1@openjdk.org\", headCommit.author().email());\n+            assertEquals(\"Generated Committer 1\", headCommit.committer().name());\n+            assertEquals(\"integrationcommitter1@openjdk.org\", headCommit.committer().email());\n+            assertTrue(String.join(\"\", headCommit.message())\n+                            .matches(\".*Reviewed-by: integrationreviewer2$\"),\n+                    String.join(\"\", headCommit.message()));\n+        }\n+    }\n+\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/MergeTests.java","additions":97,"deletions":4,"binary":false,"changes":101,"status":"modified"},{"patch":"@@ -115,1 +115,2 @@\n-                          \"reviewCleanBackport\": true\n+                          \"reviewCleanBackport\": true,\n+                          \"reviewMerge\": true,\n@@ -163,0 +164,1 @@\n+            assertTrue(pullRequestBot1.reviewMerge());\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBotFactoryTest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-        if (commit.isMerge() || utils.addsHgTag(commit)) {\n+        if ((commit.isMerge() && !conf.checks().reviewers().shouldCheckMerge()) || utils.addsHgTag(commit)) {\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/ReviewersCheck.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-    static final ReviewersConfiguration DEFAULT = new ReviewersConfiguration(0, 1, 0, 0, 0, List.of(\"duke\"), false);\n+    static final ReviewersConfiguration DEFAULT = new ReviewersConfiguration(0, 1, 0, 0, 0, List.of(\"duke\"), false, false);\n@@ -43,0 +43,1 @@\n+    private boolean shouldCheckMerge;\n@@ -44,1 +45,2 @@\n-    ReviewersConfiguration(int lead, int reviewers, int committers, int authors, int contributors, List<String> ignore, boolean shouldCheckBackports) {\n+    ReviewersConfiguration(int lead, int reviewers, int committers, int authors, int contributors, List<String> ignore,\n+                           boolean shouldCheckBackports, boolean shouldCheckMerge) {\n@@ -52,0 +54,1 @@\n+        this.shouldCheckMerge = shouldCheckMerge;\n@@ -82,0 +85,4 @@\n+    public boolean shouldCheckMerge(){\n+        return shouldCheckMerge;\n+    }\n+\n@@ -156,0 +163,1 @@\n+        var shouldCheckMerge = s.get(\"merge\", \"ignore\").equals(\"check\");\n@@ -157,1 +165,1 @@\n-        return new ReviewersConfiguration(lead, reviewers, committers, authors, contributors, ignore, shouldCheckBackports);\n+        return new ReviewersConfiguration(lead, reviewers, committers, authors, contributors, ignore, shouldCheckBackports, shouldCheckMerge);\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/ReviewersConfiguration.java","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"}]}