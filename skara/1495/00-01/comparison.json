{"files":[{"patch":"@@ -75,1 +75,0 @@\n-    private final boolean reviewMergePullRequest;\n@@ -81,2 +80,1 @@\n-                     CensusInstance censusInstance, boolean ignoreStaleReviews, Set<String> integrators, boolean reviewCleanBackport,\n-                     boolean reviewMergePullRequest) throws IOException {\n+                     CensusInstance censusInstance, boolean ignoreStaleReviews, Set<String> integrators, boolean reviewCleanBackport) throws IOException {\n@@ -95,1 +93,0 @@\n-        this.reviewMergePullRequest = reviewMergePullRequest;\n@@ -106,1 +103,1 @@\n-                        boolean ignoreStaleReviews, Set<String> integrators, boolean reviewCleanBackport, boolean reviewMergePullRequest) throws IOException {\n+                        boolean ignoreStaleReviews, Set<String> integrators, boolean reviewCleanBackport) throws IOException {\n@@ -108,1 +105,1 @@\n-                ignoreStaleReviews, integrators, reviewCleanBackport, reviewMergePullRequest);\n+                ignoreStaleReviews, integrators, reviewCleanBackport);\n@@ -1204,1 +1201,0 @@\n-\n@@ -1207,5 +1203,0 @@\n-            \/\/ Merge PullRequest doesn't need review unless review is explicitly requested\n-            if (PullRequestUtils.isMerge(pr) && !reviewMergePullRequest) {\n-                reviewNeeded = false;\n-            }\n-\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":3,"deletions":12,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -429,2 +429,1 @@\n-                        activeReviews, labels, census, bot.ignoreStaleReviews(), bot.integrators(), bot.reviewCleanBackport(),\n-                        bot.reviewMergePullRequest());\n+                        activeReviews, labels, census, bot.ignoreStaleReviews(), bot.integrators(), bot.reviewCleanBackport());\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckWorkItem.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import org.openjdk.skara.jcheck.ReviewersCheck;\n@@ -226,5 +225,1 @@\n-            \/\/ When integrating backport pr or merge pr, we should ignore Reviewers Check\n-            boolean ignoreReviewersCheck = (original != null && !bot.reviewCleanBackport())\n-                    || (PullRequestUtils.isMerge(pr) && !bot.reviewMergePullRequest());\n-\n-            if (runJcheck(pr, censusInstance, allComments, reply, localRepo, checkablePr, localHash, ignoreReviewersCheck)) {\n+            if (runJcheck(pr, censusInstance, allComments, reply, localRepo, checkablePr, localHash)) {\n@@ -267,1 +262,1 @@\n-                      Repository localRepo, CheckablePullRequest checkablePr, Hash localHash, boolean ignoreReviewersCheck) throws IOException {\n+                      Repository localRepo, CheckablePullRequest checkablePr, Hash localHash) throws IOException {\n@@ -271,2 +266,1 @@\n-        var errorMessage = ignoreReviewersCheck ? issues.messages(List.of(ReviewersCheck.class)) : issues.messages();\n-        if (!errorMessage.isEmpty()) {\n+        if (!issues.messages().isEmpty()) {\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/IntegrateCommand.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -68,1 +68,0 @@\n-    private final boolean reviewMergePullRequest;\n@@ -81,1 +80,1 @@\n-                   boolean reviewCleanBackport, String mlbridgeBotName, boolean reviewMergePullRequest) {\n+                   boolean reviewCleanBackport, String mlbridgeBotName) {\n@@ -108,1 +107,0 @@\n-        this.reviewMergePullRequest = reviewMergePullRequest;\n@@ -279,4 +277,0 @@\n-    public boolean reviewMergePullRequest(){\n-        return reviewMergePullRequest;\n-    }\n-\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBot.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,0 +59,1 @@\n+\n@@ -60,1 +61,0 @@\n-    private boolean reviewMergePullRequest = false;\n@@ -195,5 +195,0 @@\n-    public PullRequestBotBuilder reviewMergePullRequest(boolean reviewMergePullRequest) {\n-        this.reviewMergePullRequest = reviewMergePullRequest;\n-        return this;\n-    }\n-\n@@ -207,1 +202,1 @@\n-                                  enableCsr, enableJep, reviewCleanBackport, mlbridgeBotName, reviewMergePullRequest);\n+                                  enableCsr, enableJep, reviewCleanBackport, mlbridgeBotName);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBotBuilder.java","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -119,1 +119,1 @@\n-                                           .repo(configuration.repository(repo.name()))\n+                                           .repo(repository)\n@@ -198,4 +198,0 @@\n-            if (repo.value().contains(\"reviewMergePullRequest\")) {\n-                botBuilder.reviewMergePullRequest(repo.value().get(\"reviewMergePullRequest\").asBoolean());\n-            }\n-\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBotFactory.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -65,7 +65,0 @@\n-    List<String> messages(List<Class<? extends Check>> ignoreChecks) {\n-        return failedChecks.keySet()\n-                .stream()\n-                .filter(e -> !ignoreChecks.contains(e))\n-                .map(failedChecks::get).toList();\n-    }\n-\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestCheckIssueVisitor.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -126,2 +126,1 @@\n-            var ignoreReviewersCheck = original != null || PullRequestUtils.isMerge(pr);\n-            if (IntegrateCommand.runJcheck(pr, censusInstance, allComments, reply, localRepo, checkablePr, localHash, ignoreReviewersCheck)) {\n+            if (IntegrateCommand.runJcheck(pr, censusInstance, allComments, reply, localRepo, checkablePr, localHash)) {\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/SponsorCommand.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -126,94 +126,0 @@\n-    @Test\n-    void branchMergeWithReviewMergeRequest(TestInfo testInfo) throws IOException {\n-        try (var credentials = new HostCredentials(testInfo);\n-             var tempFolder = new TemporaryDirectory()) {\n-\n-            var author = credentials.getHostedRepository();\n-            var integrator = credentials.getHostedRepository();\n-            var censusBuilder = credentials.getCensusBuilder()\n-                    .addCommitter(author.forge().currentUser().id())\n-                    .addReviewer(integrator.forge().currentUser().id());\n-            var mergeBot = PullRequestBot.newBuilder().repo(integrator).censusRepo(censusBuilder.build())\n-                    .reviewMergePullRequest(true).build();\n-\n-            \/\/ Populate the projects repository\n-            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n-            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());\n-            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n-            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n-            localRepo.push(masterHash, author.authenticatedUrl(), \"master\", true);\n-\n-            \/\/ Make more changes in another branch\n-            var otherHash1 = CheckableRepository.appendAndCommit(localRepo, \"First change in other_\/-1.2\",\n-                    \"First other_\/-1.2\\n\\nReviewed-by: integrationreviewer2\");\n-            localRepo.push(otherHash1, author.authenticatedUrl(), \"other_\/-1.2\", true);\n-            var otherHash2 = CheckableRepository.appendAndCommit(localRepo, \"Second change in other_\/-1.2\",\n-                    \"Second other_\/-1.2\\n\\nReviewed-by: integrationreviewer2\");\n-            localRepo.push(otherHash2, author.authenticatedUrl(), \"other_\/-1.2\");\n-\n-            \/\/ Go back to the original master\n-            localRepo.checkout(masterHash, true);\n-\n-            \/\/ Make a change with a corresponding PR\n-            var unrelated = Files.writeString(localRepo.root().resolve(\"unrelated.txt\"), \"Unrelated\", StandardCharsets.UTF_8);\n-            localRepo.add(unrelated);\n-            var updatedMaster = localRepo.commit(\"Unrelated\", \"some\", \"some@one\");\n-            localRepo.merge(otherHash2);\n-            localRepo.push(updatedMaster, author.authenticatedUrl(), \"master\");\n-\n-            var mergeHash = localRepo.commit(\"Merge commit\", \"some\", \"some@one\");\n-            localRepo.push(mergeHash, author.authenticatedUrl(), \"edit\", true);\n-            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"Merge \" + author.name() + \":other_\/-1.2\");\n-\n-            \/\/ Let the bot check the status\n-            TestBotRunner.runPeriodicItems(mergeBot);\n-\n-            \/\/ pr should not be ready, because review needed for merge pull requests\n-            assertFalse(pr.store().labelNames().contains(\"ready\"));\n-            assertTrue(pr.store().body().contains(\"- [ ] Change must be properly reviewed\"));\n-\n-            \/\/ Approve it as another user\n-            var approvalPr = integrator.pullRequest(pr.id());\n-            approvalPr.addReview(Review.Verdict.APPROVED, \"Approved\");\n-            TestBotRunner.runPeriodicItems(mergeBot);\n-\n-            assertTrue(pr.store().labelNames().contains(\"ready\"));\n-            assertTrue(pr.store().body().contains(\"- [x] Change must be properly reviewed\"));\n-\n-            \/\/ Push it\n-            pr.addComment(\"\/integrate\");\n-            TestBotRunner.runPeriodicItems(mergeBot);\n-\n-            \/\/ The bot should reply with an ok message\n-            var pushed = pr.comments().stream()\n-                    .filter(comment -> comment.body().contains(\"Pushed as commit\"))\n-                    .count();\n-            assertEquals(1, pushed);\n-\n-            \/\/ The change should now be present on the master branch\n-            var pushedRepoFolder = tempFolder.path().resolve(\"pushedrepo\");\n-            var pushedRepo = Repository.materialize(pushedRepoFolder, author.authenticatedUrl(), \"master\");\n-            assertTrue(CheckableRepository.hasBeenEdited(pushedRepo));\n-\n-            \/\/ The commits from the \"other\" branch should be preserved and not squashed (but not the merge commit)\n-            var headHash = pushedRepo.resolve(\"HEAD\").orElseThrow();\n-            Set<Hash> commits;\n-            try (var tempCommits = pushedRepo.commits(masterHash.hex() + \"..\" + headHash.hex())) {\n-                commits = tempCommits.stream()\n-                        .map(Commit::hash)\n-                        .collect(Collectors.toSet());\n-            }\n-            assertTrue(commits.contains(otherHash1));\n-            assertTrue(commits.contains(otherHash2));\n-            assertFalse(commits.contains(mergeHash));\n-\n-            \/\/ Author and committer should updated in the merge commit\n-            var headCommit = pushedRepo.commits(headHash.hex() + \"^..\" + headHash.hex()).asList().get(0);\n-            assertEquals(\"Merge \" + author.name() + \":other_\/-1.2\", headCommit.message().get(0));\n-            assertEquals(\"Generated Committer 1\", headCommit.author().name());\n-            assertEquals(\"integrationcommitter1@openjdk.org\", headCommit.author().email());\n-            assertEquals(\"Generated Committer 1\", headCommit.committer().name());\n-            assertEquals(\"integrationcommitter1@openjdk.org\", headCommit.committer().email());\n-        }\n-    }\n-\n@@ -1561,0 +1467,96 @@\n+\n+    @Test\n+    void branchMergeWithReviewMergeEnabled(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+\n+            var author = credentials.getHostedRepository();\n+            var integrator = credentials.getHostedRepository();\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addCommitter(author.forge().currentUser().id())\n+                    .addReviewer(integrator.forge().currentUser().id());\n+            var mergeBot = PullRequestBot.newBuilder().repo(integrator).censusRepo(censusBuilder.build()).build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());\n+\n+            var defaultConf = Files.readString(localRepo.root().resolve(\".jcheck\/conf\"), StandardCharsets.UTF_8);\n+            var newConf = defaultConf.replace(\"reviewers=1\", \"reviewers=1\\nmerge=check\");\n+            Files.writeString(localRepo.root().resolve(\".jcheck\/conf\"), newConf, StandardCharsets.UTF_8);\n+            localRepo.add(localRepo.root().resolve(\".jcheck\/conf\"));\n+            localRepo.commit(\"Enable reviewMerge\", \"duke\", \"duke@openjdk.org\");\n+\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.authenticatedUrl(), \"master\", true);\n+\n+            \/\/ Make more changes in another branch\n+            var otherHash1 = CheckableRepository.appendAndCommit(localRepo, \"First change in other_\/-1.2\",\n+                    \"First other_\/-1.2\\n\\nReviewed-by: integrationreviewer2\");\n+            localRepo.push(otherHash1, author.authenticatedUrl(), \"other_\/-1.2\", true);\n+            var otherHash2 = CheckableRepository.appendAndCommit(localRepo, \"Second change in other_\/-1.2\",\n+                    \"Second other_\/-1.2\\n\\nReviewed-by: integrationreviewer2\");\n+            localRepo.push(otherHash2, author.authenticatedUrl(), \"other_\/-1.2\");\n+\n+            \/\/ Go back to the original master\n+            localRepo.checkout(masterHash, true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var unrelated = Files.writeString(localRepo.root().resolve(\"unrelated.txt\"), \"Unrelated\", StandardCharsets.UTF_8);\n+            localRepo.add(unrelated);\n+            var updatedMaster = localRepo.commit(\"Unrelated\", \"some\", \"some@one\");\n+            localRepo.merge(otherHash2);\n+            localRepo.push(updatedMaster, author.authenticatedUrl(), \"master\");\n+\n+            var mergeHash = localRepo.commit(\"Merge commit\", \"some\", \"some@one\");\n+            localRepo.push(mergeHash, author.authenticatedUrl(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"Merge \" + author.name() + \":other_\/-1.2\");\n+\n+            \/\/ Let the bot check the status\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+\n+            \/\/ The pr should not be ready\n+            assertFalse(pr.store().labelNames().contains(\"ready\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] Change must be properly reviewed\"));\n+\n+            \/\/ Approve it as another user\n+            var approvalPr = integrator.pullRequest(pr.id());\n+            approvalPr.addReview(Review.Verdict.APPROVED, \"Approved\");\n+\n+            \/\/ Push it\n+            pr.addComment(\"\/integrate\");\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+\n+            \/\/ The bot should reply with an ok message\n+            var pushed = pr.comments().stream()\n+                    .filter(comment -> comment.body().contains(\"Pushed as commit\"))\n+                    .count();\n+            assertEquals(1, pushed);\n+\n+            \/\/ The change should now be present on the master branch\n+            var pushedRepoFolder = tempFolder.path().resolve(\"pushedrepo\");\n+            var pushedRepo = Repository.materialize(pushedRepoFolder, author.authenticatedUrl(), \"master\");\n+            assertTrue(CheckableRepository.hasBeenEdited(pushedRepo));\n+\n+            \/\/ The commits from the \"other\" branch should be preserved and not squashed (but not the merge commit)\n+            var headHash = pushedRepo.resolve(\"HEAD\").orElseThrow();\n+            Set<Hash> commits;\n+            try (var tempCommits = pushedRepo.commits(masterHash.hex() + \"..\" + headHash.hex())) {\n+                commits = tempCommits.stream()\n+                        .map(Commit::hash)\n+                        .collect(Collectors.toSet());\n+            }\n+            assertTrue(commits.contains(otherHash1));\n+            assertTrue(commits.contains(otherHash2));\n+            assertFalse(commits.contains(mergeHash));\n+\n+            \/\/ Author and committer should updated in the merge commit\n+            var headCommit = pushedRepo.commits(headHash.hex() + \"^..\" + headHash.hex()).asList().get(0);\n+            assertEquals(\"Merge \" + author.name() + \":other_\/-1.2\", headCommit.message().get(0));\n+            assertEquals(\"Generated Committer 1\", headCommit.author().name());\n+            assertEquals(\"integrationcommitter1@openjdk.org\", headCommit.author().email());\n+            assertEquals(\"Generated Committer 1\", headCommit.committer().name());\n+            assertEquals(\"integrationcommitter1@openjdk.org\", headCommit.committer().email());\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/MergeTests.java","additions":96,"deletions":94,"binary":false,"changes":190,"status":"modified"},{"patch":"@@ -115,2 +115,1 @@\n-                          \"reviewCleanBackport\": true,\n-                          \"reviewMergePullRequest\": true,\n+                          \"reviewCleanBackport\": true\n@@ -164,1 +163,0 @@\n-            assertTrue(pullRequestBot1.reviewMergePullRequest());\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBotFactoryTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-import org.openjdk.skara.census.Project;\n@@ -30,1 +29,0 @@\n-import java.io.IOException;\n@@ -32,1 +30,0 @@\n-import java.util.List;\n@@ -70,1 +67,1 @@\n-        if (utils.addsHgTag(commit)) {\n+        if ((commit.isMerge() && !conf.checks().reviewers().shouldCheckMerge()) || utils.addsHgTag(commit)) {\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/ReviewersCheck.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-    static final ReviewersConfiguration DEFAULT = new ReviewersConfiguration(0, 1, 0, 0, 0, List.of(\"duke\"), false);\n+    static final ReviewersConfiguration DEFAULT = new ReviewersConfiguration(0, 1, 0, 0, 0, List.of(\"duke\"), false, false);\n@@ -43,0 +43,1 @@\n+    private final boolean shouldCheckMerge;\n@@ -44,1 +45,2 @@\n-    ReviewersConfiguration(int lead, int reviewers, int committers, int authors, int contributors, List<String> ignore, boolean shouldCheckBackports) {\n+    ReviewersConfiguration(int lead, int reviewers, int committers, int authors, int contributors, List<String> ignore, boolean shouldCheckBackports,\n+                           boolean shouldCheckMerge) {\n@@ -52,0 +54,1 @@\n+        this.shouldCheckMerge = shouldCheckMerge;\n@@ -82,0 +85,4 @@\n+    public boolean shouldCheckMerge() {\n+        return shouldCheckMerge;\n+    }\n+\n@@ -156,0 +163,1 @@\n+        var shouldCheckMerge = s.get(\"merge\", \"ignore\").equals(\"check\");\n@@ -157,1 +165,1 @@\n-        return new ReviewersConfiguration(lead, reviewers, committers, authors, contributors, ignore, shouldCheckBackports);\n+        return new ReviewersConfiguration(lead, reviewers, committers, authors, contributors, ignore, shouldCheckBackports, shouldCheckMerge);\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/ReviewersConfiguration.java","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"}]}