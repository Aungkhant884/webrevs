{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -100,0 +100,5 @@\n+        if (numReviewers < 0) {\n+            showHelp(reply);\n+            reply.println(\"Cannot decrease the required number of reviewers below 0 (requested: \" + numReviewers + \")\");\n+            return;\n+        }\n@@ -127,5 +132,0 @@\n-        if (updatedLimits.get(role) > numReviewers) {\n-            showHelp(reply);\n-            reply.println(\"Number of required reviewers of role \" + role + \" cannot be decreased below \" + updatedLimits.get(role));\n-            return;\n-        }\n@@ -135,1 +135,2 @@\n-        reply.print(\"The number of required reviews for this PR is now set to \" + totalRequired);\n+        reply.print(\"The total number of required reviews for this PR (including the jcheck configuration \" +\n+                    \"and the last \/reviewers command) is now set to \" + totalRequired);\n@@ -142,3 +143,2 @@\n-        if (nonZeroDescriptions.size() > 1) {\n-            nonZeroDescriptions.remove(nonZeroDescriptions.size() - 1);\n-            reply.print(\" (with at least \" + String.join(\", \", nonZeroDescriptions) + \")\");\n+        if (nonZeroDescriptions.size() > 0) {\n+            reply.print(\" (with \" + String.join(\", \", nonZeroDescriptions) + \")\");\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/ReviewersCommand.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,0 +54,1 @@\n+        var remainingRemovals = 0;\n@@ -62,1 +63,7 @@\n-                updatedLimits.replace(r, updatedLimits.get(r) + remainingAdditional);\n+                \/\/ The new value cannot be lower than the value in '.jcheck\/conf',\n+                \/\/ because the '.jcheck\/conf' file means the minimal reviewer requirement.\n+                if (remainingAdditional > updatedLimits.get(r)) {\n+                    \/\/ Set the number for the lower roles to remove.\n+                    remainingRemovals = remainingAdditional - updatedLimits.get(r);\n+                    updatedLimits.replace(r, remainingAdditional);\n+                }\n@@ -67,0 +74,5 @@\n+        if (remainingRemovals == 0) {\n+            \/\/ Improve performance. If remainingRemovals is 0, don't need to decrease the lower roles.\n+            return updatedLimits;\n+        }\n+\n@@ -69,1 +81,0 @@\n-        var remainingRemovals = count;\n@@ -72,1 +83,2 @@\n-                var removed = Math.max(0, updatedLimits.get(r) - remainingRemovals);\n+                var originalVal = updatedLimits.get(r);\n+                var removed = Math.max(0, originalVal - remainingRemovals);\n@@ -74,1 +86,1 @@\n-                remainingRemovals -= removed;\n+                remainingRemovals -= (originalVal - removed);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/ReviewersTracker.java","additions":17,"deletions":5,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,1 @@\n+import org.openjdk.skara.forge.PullRequest;\n@@ -31,0 +32,4 @@\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n@@ -37,0 +42,3 @@\n+    private static final String reviewersCommandFinallyOutput = \"The total number of required reviews for this PR \" +\n+            \"(including the jcheck configuration and the last \/reviewers command) is now set to \";\n+\n@@ -86,1 +94,1 @@\n-            assertLastCommentContains(reviewerPr,\"Number of required reviewers of role authors cannot be decreased below 0\");\n+            assertLastCommentContains(reviewerPr,\"Cannot decrease the required number of reviewers below 0 (requested: -3)\");\n@@ -98,1 +106,15 @@\n-            assertLastCommentContains(reviewerPr,\"The number of required reviews for this PR is now set to 2 (with at least 1 of role reviewers).\");\n+            assertLastCommentContains(reviewerPr, reviewersCommandFinallyOutput + \"2 (with 1 of role reviewers, 1 of role authors).\");\n+\n+            \/\/ Set 2 of role committers\n+            reviewerPr.addComment(\"\/reviewers 2 committer\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+\n+            \/\/ The bot should reply with a success message\n+            assertLastCommentContains(reviewerPr, reviewersCommandFinallyOutput + \"2 (with 1 of role reviewers, 1 of role committers).\");\n+\n+            \/\/ Set 2 of role reviewers\n+            reviewerPr.addComment(\"\/reviewers 2 reviewer\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+\n+            \/\/ The bot should reply with a success message\n+            assertLastCommentContains(reviewerPr, reviewersCommandFinallyOutput + \"2 (with 2 of role reviewers).\");\n@@ -122,1 +144,1 @@\n-            assertLastCommentContains(reviewerPr,\"The number of required reviews for this PR is now set to 1.\");\n+            assertLastCommentContains(reviewerPr, reviewersCommandFinallyOutput + \"1 (with 1 of role lead).\");\n@@ -132,1 +154,1 @@\n-            assertLastCommentContains(reviewerPr,\"The number of required reviews for this PR is now set to 1.\");\n+            assertLastCommentContains(reviewerPr, reviewersCommandFinallyOutput + \"1 (with 1 of role reviewers).\");\n@@ -172,1 +194,1 @@\n-            assertLastCommentContains(reviewerPr,\"The number of required reviews for this PR is now set to 2 (with at least 1 of role reviewers).\");\n+            assertLastCommentContains(reviewerPr, reviewersCommandFinallyOutput + \"2 (with 1 of role reviewers, 1 of role authors).\");\n@@ -237,1 +259,1 @@\n-            assertLastCommentContains(reviewerPr,\"The number of required reviews for this PR is now set to 2 (with at least 1 of role reviewers).\");\n+            assertLastCommentContains(reviewerPr, reviewersCommandFinallyOutput + \"2 (with 1 of role reviewers, 1 of role authors).\");\n@@ -285,1 +307,1 @@\n-            assertLastCommentContains(authorPR, \"The number of required reviews for this PR is now set to 2 (with at least 1 of role reviewers).\");\n+            assertLastCommentContains(authorPR, reviewersCommandFinallyOutput + \"2 (with 1 of role reviewers, 1 of role authors).\");\n@@ -321,2 +343,1 @@\n-            assertLastCommentContains(authorPR, \"The number of required reviews for this PR is now set to 2 (with at least 1 of role reviewers).\");\n-\n+            assertLastCommentContains(authorPR, reviewersCommandFinallyOutput + \"2 (with 1 of role reviewers, 1 of role authors).\");\n@@ -332,1 +353,1 @@\n-            assertLastCommentContains(authorPR, \"The number of required reviews for this PR is now set to 1\");\n+            assertLastCommentContains(reviewerPr, reviewersCommandFinallyOutput + \"1 (with 1 of role reviewers).\");\n@@ -362,1 +383,118 @@\n-            assertLastCommentContains(authorPR,\"The number of required reviews for this PR is now set to 2 (with at least 1 of role reviewers).\");\n+            assertLastCommentContains(authorPR, reviewersCommandFinallyOutput + \"2 (with 1 of role reviewers, 1 of role authors).\");\n+        }\n+    }\n+\n+    @Test\n+    void complexCombinedConfigAndCommand(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var integrator = credentials.getHostedRepository();\n+            var bot = credentials.getHostedRepository();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addReviewer(integrator.forge().currentUser().id())\n+                    .addCommitter(author.forge().currentUser().id());\n+            var prBot = PullRequestBot.newBuilder().repo(bot).censusRepo(censusBuilder.build()).build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Change the jcheck configuration\n+            var confPath = localRepo.root().resolve(\".jcheck\/conf\");\n+            var defaultConf = Files.readString(confPath, StandardCharsets.UTF_8);\n+            var newConf = defaultConf.replace(\"reviewers=1\", \"\"\"\n+                                                    lead=1\n+                                                    reviewers=1\n+                                                    committers=1\n+                                                    authors=1\n+                                                    contributors=1\n+                                                    ignore=duke\n+                                                    \"\"\");\n+            Files.writeString(confPath, newConf);\n+            localRepo.add(confPath);\n+            var confHash = localRepo.commit(\"Change conf\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(confHash, author.url(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"123: This is a pull request\");\n+\n+            var reviewerPr = integrator.pullRequest(pr.id());\n+\n+            \/\/ test role contributor\n+            for (int i = 1; i <= 10; i++) {\n+                var totalNum = Math.max(i, 5);\n+                var contributorNum = (i < 6) ? 1 : i - 4;\n+                verifyReviewersComment(reviewerPr, prBot, \"\/reviewers \" + i + \" contributor\",\n+                        getReviewersExpectedComment(totalNum, 1, 1, 1, 1, contributorNum));\n+            }\n+\n+            \/\/ test role author\n+            for (int i = 1; i <= 10; i++) {\n+                var totalNum = Math.max(i, 5);\n+                var contributorNum = (i < 5) ? 1 : 0;\n+                var authorNum = (i < 5) ? 1 : i - 3;\n+                verifyReviewersComment(reviewerPr, prBot, \"\/reviewers \" + i + \" author\",\n+                        getReviewersExpectedComment(totalNum, 1, 1, 1, authorNum, contributorNum));\n+            }\n+\n+            \/\/ test role committer\n+            for (int i = 1; i <= 10; i++) {\n+                var totalNum = Math.max(i, 5);\n+                var contributorNum = (i < 4) ? 1 : 0;\n+                var authorNum = (i < 5) ? 1 : 0;\n+                var committerNum = (i < 4) ? 1 : i - 2;\n+                verifyReviewersComment(reviewerPr, prBot, \"\/reviewers \" + i + \" committer\",\n+                        getReviewersExpectedComment(totalNum, 1, 1, committerNum, authorNum, contributorNum));\n+            }\n+\n+            \/\/ test role reviewer\n+            for (int i = 1; i <= 10; i++) {\n+                var totalNum = Math.max(i, 5);\n+                var contributorNum = (i < 3) ? 1 : 0;\n+                var authorNum = (i < 4) ? 1 : 0;\n+                var committerNum = (i < 5) ? 1 : 0;\n+                var reviewerNum = (i < 3) ? 1 : i - 1;\n+                verifyReviewersComment(reviewerPr, prBot, \"\/reviewers \" + i + \" reviewer\",\n+                        getReviewersExpectedComment(totalNum, 1, reviewerNum, committerNum, authorNum, contributorNum));\n+\n+            }\n+\n+            \/\/ test role lead\n+            verifyReviewersComment(reviewerPr, prBot, \"\/reviewers 1 lead\",\n+                        getReviewersExpectedComment(5, 1, 1, 1, 1, 1));\n+        }\n+    }\n+\n+    private void verifyReviewersComment(PullRequest reviewerPr, PullRequestBot prBot, String command, String expectedReply) throws IOException {\n+        reviewerPr.addComment(command);\n+        TestBotRunner.runPeriodicItems(prBot);\n+        assertLastCommentContains(reviewerPr, expectedReply);\n+    }\n+\n+    private String getReviewersExpectedComment(int totalNum, int leadNum, int reviewerNum, int committerNum, int authorNum, int contributorNum) {\n+        StringBuilder builder = new StringBuilder();\n+        builder.append(reviewersCommandFinallyOutput);\n+        builder.append(totalNum);\n+        if (leadNum == 0 && reviewerNum == 0 && committerNum == 0 && authorNum == 0 && contributorNum == 0) {\n+            builder.append(\".\");\n+            return builder.toString();\n+        }\n+        builder.append(\" (with\");\n+        var list = new ArrayList<String>();\n+        var map = new LinkedHashMap<String, Integer>();\n+        map.put(\"lead\", leadNum);\n+        map.put(\"reviewers\", reviewerNum);\n+        map.put(\"committers\", committerNum);\n+        map.put(\"authors\", authorNum);\n+        map.put(\"contributors\", contributorNum);\n+        for (var entry : map.entrySet()) {\n+            if (entry.getValue() > 0) {\n+                list.add(\" \" + entry.getValue() + \" of role \" + entry.getKey());\n+            }\n@@ -364,0 +502,3 @@\n+        builder.append(String.join(\",\", list));\n+        builder.append(\").\");\n+        return builder.toString();\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/ReviewersTests.java","additions":153,"deletions":12,"binary":false,"changes":165,"status":"modified"}]}