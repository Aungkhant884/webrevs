{"files":[{"patch":"@@ -108,24 +108,46 @@\n-            var localRepoDir = scratchPath.resolve(\"backport-command\")\n-                                          .resolve(repoName)\n-                                          .resolve(\"fork\");\n-            var localRepo = bot.hostedRepositoryPool()\n-                               .orElseThrow(() -> new IllegalStateException(\"Missing repository pool for PR bot\"))\n-                               .materialize(fork, localRepoDir);\n-            var fetchHead = localRepo.fetch(bot.repo().url(), hash.hex(), false);\n-            localRepo.checkout(targetBranch);\n-            var head = localRepo.head();\n-            var backportBranch = localRepo.branch(head, \"backport-\" + hash.abbreviate());\n-            localRepo.checkout(backportBranch);\n-            var didApply = localRepo.cherryPick(fetchHead);\n-            if (!didApply) {\n-                var lines = new ArrayList<String>();\n-                lines.add(\"@\" + username + \" could **not** automatically backport `\" + hash.abbreviate() + \"` to \" +\n-                          \"[\" + repoName + \"](\" + targetRepo.webUrl() + \") due to conflicts in the following files:\");\n-                lines.add(\"\");\n-                var unmerged = localRepo.status()\n-                                        .stream()\n-                                        .filter(e -> e.status().isUnmerged())\n-                                        .map(e -> e.target().path().orElseGet(() -> e.source().path().orElseThrow()))\n-                                        .collect(Collectors.toList());\n-                for (var path : unmerged) {\n-                    lines.add(\"- \" + path.toString());\n+            Hash backportHash = null;\n+            var backportBranchName = \"backport-\" + hash.abbreviate();\n+            var hostedBackportBranch = fork.branches().stream().filter(b -> b.name().equals(backportBranchName)).findAny();\n+            if (hostedBackportBranch.isEmpty()) {\n+                var localRepoDir = scratchPath.resolve(\"backport-command\")\n+                                              .resolve(repoName)\n+                                              .resolve(\"fork\");\n+                var localRepo = bot.hostedRepositoryPool()\n+                                   .orElseThrow(() -> new IllegalStateException(\"Missing repository pool for PR bot\"))\n+                                   .materialize(fork, localRepoDir);\n+                var fetchHead = localRepo.fetch(bot.repo().url(), hash.hex(), false);\n+                localRepo.checkout(targetBranch);\n+                var head = localRepo.head();\n+                var backportBranch = localRepo.branch(head, backportBranchName);\n+                localRepo.checkout(backportBranch);\n+                var didApply = localRepo.cherryPick(fetchHead);\n+                if (!didApply) {\n+                    var lines = new ArrayList<String>();\n+                    lines.add(\"@\" + username + \" could **not** automatically backport `\" + hash.abbreviate() + \"` to \" +\n+                              \"[\" + repoName + \"](\" + targetRepo.webUrl() + \") due to conflicts in the following files:\");\n+                    lines.add(\"\");\n+                    var unmerged = localRepo.status()\n+                                            .stream()\n+                                            .filter(e -> e.status().isUnmerged())\n+                                            .map(e -> e.target().path().orElseGet(() -> e.source().path().orElseThrow()))\n+                                            .collect(Collectors.toList());\n+                    for (var path : unmerged) {\n+                        lines.add(\"- \" + path.toString());\n+                    }\n+                    lines.add(\"\");\n+                    lines.add(\"To manually resolve these conflicts run the following commands in your personal fork of [\" + repoName + \"](\" + targetRepo.webUrl() + \"):\");\n+                    lines.add(\"\");\n+                    lines.add(\"```\");\n+                    lines.add(\"$ git checkout -b \" + backportBranchName);\n+                    lines.add(\"$ git fetch --no-tags \" + bot.repo().webUrl() + \" \" + hash.hex());\n+                    lines.add(\"$ git cherry-pick --no-commit \" + hash.hex());\n+                    lines.add(\"$ # Resolve conflicts\");\n+                    lines.add(\"$ git add files\/with\/resolved\/conflicts\");\n+                    lines.add(\"$ git commit -m 'Backport \" + hash.hex() + \"'\");\n+                    lines.add(\"```\");\n+                    lines.add(\"\");\n+                    lines.add(\"Once you have resolved the conflicts as explained above continue with creating a pull request towards the [\" + repoName + \"](\" + targetRepo.webUrl() + \") with the title `Backport \" + hash.hex() + \"`.\");\n+\n+                    reply.println(String.join(\"\\n\", lines));\n+                    localRepo.reset(head, true);\n+                    return;\n@@ -133,18 +155,0 @@\n-                lines.add(\"\");\n-                lines.add(\"To manually resolve these conflicts run the following commands in your personal fork of [\" + repoName + \"](\" + targetRepo.webUrl() + \"):\");\n-                lines.add(\"\");\n-                lines.add(\"```\");\n-                lines.add(\"$ git checkout -b \" + backportBranch.name());\n-                lines.add(\"$ git fetch --no-tags \" + bot.repo().webUrl() + \" \" + hash.hex());\n-                lines.add(\"$ git cherry-pick --no-commit \" + hash.hex());\n-                lines.add(\"$ # Resolve conflicts\");\n-                lines.add(\"$ git add files\/with\/resolved\/conflicts\");\n-                lines.add(\"$ git commit -m 'Backport \" + hash.hex() + \"'\");\n-                lines.add(\"```\");\n-                lines.add(\"\");\n-                lines.add(\"Once you have resolved the conflicts as explained above continue with creating a pull request towards the [\" + repoName + \"](\" + targetRepo.webUrl() + \") with the title `Backport \" + hash.hex() + \"`.\");\n-\n-                reply.println(String.join(\"\\n\", lines));\n-                localRepo.reset(head, true);\n-                return;\n-            }\n@@ -152,2 +156,5 @@\n-            var backportHash = localRepo.commit(\"Backport \" + hash.hex(), \"duke\", \"duke@openjdk.org\");\n-            localRepo.push(backportHash, fork.url(), backportBranch.name(), true);\n+                backportHash = localRepo.commit(\"Backport \" + hash.hex(), \"duke\", \"duke@openjdk.org\");\n+                localRepo.push(backportHash, fork.url(), backportBranchName, false);\n+            } else {\n+                backportHash = hostedBackportBranch.get().hash();\n+            }\n@@ -158,1 +165,1 @@\n-            fork.restrictPushAccess(backportBranch, List.of(command.user()));\n+            fork.restrictPushAccess(new Branch(backportBranchName), List.of(command.user()));\n@@ -199,1 +206,1 @@\n-            var createPrUrl = fork.createPullRequestUrl(targetRepo, targetBranch.name(), backportBranch.name());\n+            var createPrUrl = fork.createPullRequestUrl(targetRepo, targetBranch.name(), backportBranchName);\n@@ -201,1 +208,1 @@\n-            var backportBranchWebUrl = fork.webUrl(backportBranch);\n+            var backportBranchWebUrl = fork.webUrl(new Branch(backportBranchName));\n@@ -204,1 +211,1 @@\n-                          \" was successfully created on the branch [\" + backportBranch.name() + \"](\" +\n+                          \" was successfully created on the branch [\" + backportBranchName + \"](\" +\n@@ -222,2 +229,2 @@\n-                          \"$ git fetch \" + fork.webUrl() + \" \" + backportBranch.name() + \":\" + backportBranch.name() + \"\\n\" +\n-                          \"$ git checkout \" + backportBranch.name() + \"\\n\" +\n+                          \"$ git fetch \" + fork.webUrl() + \" \" + backportBranchName + \":\" + backportBranchName + \"\\n\" +\n+                          \"$ git checkout \" + backportBranchName + \"\\n\" +\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/BackportCommand.java","additions":57,"deletions":50,"binary":false,"changes":107,"status":"modified"},{"patch":"@@ -200,0 +200,54 @@\n+\n+    @Test\n+    void backportTwice(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                                           .addAuthor(author.forge().currentUser().id())\n+                                           .addReviewer(reviewer.forge().currentUser().id());\n+            var seedFolder = tempFolder.path().resolve(\"seed\");\n+            var bot = PullRequestBot.newBuilder()\n+                                    .repo(author)\n+                                    .censusRepo(censusBuilder.build())\n+                                    .censusLink(\"https:\/\/census.com\/{{contributor}}-profile\")\n+                                    .seedStorage(seedFolder)\n+                                    .forks(Map.of(author.name(), author))\n+                                    .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Make a change in another branch\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"edit\");\n+\n+            \/\/ Add a backport command\n+            author.addCommitComment(editHash, \"\/backport \" + author.name());\n+            TestBotRunner.runPeriodicItems(bot);\n+\n+            var recentCommitComments = author.recentCommitComments();\n+            assertEquals(2, recentCommitComments.size());\n+            var botReply = recentCommitComments.get(0);\n+            assertTrue(botReply.body().contains(\"backport\"));\n+            assertTrue(botReply.body().contains(\"was successfully created\"));\n+            assertTrue(botReply.body().contains(\"To create a pull request\"));\n+            assertTrue(botReply.body().contains(\"with this backport\"));\n+\n+            \/\/ Add a backport command again\n+            author.addCommitComment(editHash, \"\/backport \" + author.name());\n+            TestBotRunner.runPeriodicItems(bot);\n+\n+            recentCommitComments = author.recentCommitComments();\n+            assertEquals(4, recentCommitComments.size());\n+            botReply = recentCommitComments.get(0);\n+            assertTrue(botReply.body().contains(\"backport\"));\n+            assertTrue(botReply.body().contains(\"was successfully created\"));\n+            assertTrue(botReply.body().contains(\"To create a pull request\"));\n+            assertTrue(botReply.body().contains(\"with this backport\"));\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/BackportCommitCommandTests.java","additions":54,"deletions":0,"binary":false,"changes":54,"status":"modified"}]}