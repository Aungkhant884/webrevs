{"files":[{"patch":"@@ -473,0 +473,1 @@\n+    \/\/ Need to sort by updated time in descending order to guarantee that no issues are missed, see SKARA-1962 for details\n@@ -476,1 +477,1 @@\n-        var jql = \"project = \" + projectName + \" AND updated >= '\" + timeString + \"'\";\n+        var jql = \"project = \" + projectName + \" AND updated >= '\" + timeString + \"' ORDER BY updated DESC\";\n@@ -481,0 +482,1 @@\n+    \/\/ Need to sort by updated time in descending order to guarantee that no issues are missed, see SKARA-1962 for details\n@@ -484,1 +486,1 @@\n-        var jql = \"project = \" + projectName + \" AND updated >= '\" + timeString + \"' AND issuetype = CSR\";\n+        var jql = \"project = \" + projectName + \" AND updated >= '\" + timeString + \"' AND issuetype = CSR ORDER BY updated DESC\";\n@@ -509,2 +511,3 @@\n-    private ArrayList<IssueTrackerIssue> queryIssues(String jql) {\n-        var ret = new ArrayList<IssueTrackerIssue>();\n+    private List<IssueTrackerIssue> queryIssues(String jql) {\n+        var ret = new HashMap<String, IssueTrackerIssue>();\n+        int count = 0;\n@@ -517,1 +520,2 @@\n-                ret.add(new JiraIssue(this, generateIssueRequest(issue), issue));\n+                ret.put(JiraIssue.id(issue), new JiraIssue(this, generateIssueRequest(issue), issue));\n+                count++;\n@@ -520,1 +524,1 @@\n-            if (ret.size() < issues.get(\"total\").asInt()) {\n+            if (count < issues.get(\"total\").asInt()) {\n@@ -530,1 +534,2 @@\n-        return ret;\n+\n+        return ret.values().stream().toList();\n","filename":"issuetracker\/src\/main\/java\/org\/openjdk\/skara\/issuetracker\/jira\/JiraProject.java","additions":12,"deletions":7,"binary":false,"changes":19,"status":"modified"}]}