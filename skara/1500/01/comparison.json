{"files":[{"patch":"@@ -446,0 +446,22 @@\n+    private void updateMergeClean(Commit commit) {\n+        boolean isClean = !commit.isMerge();\n+        if (!isClean) {\n+            isClean = true;\n+            var commitMessageBody = localRepo.commitMessageBody(commit.hash());\n+            if (commitMessageBody.isPresent()) {\n+                var lines = commitMessageBody.get();\n+                for (int i = 0; i < lines.size() - 1; i++) {\n+                    if (lines.get(i).startsWith(\"diff\") && lines.get(i + 1).startsWith(\"index\")) {\n+                        isClean = false;\n+                        break;\n+                    }\n+                }\n+            }\n+        }\n+        if (isClean) {\n+            newLabels.add(\"clean\");\n+        } else {\n+            newLabels.remove(\"clean\");\n+        }\n+    }\n+\n@@ -1130,0 +1152,4 @@\n+            if (rebasePossible && PullRequestUtils.isMerge(pr)) {\n+                localRepo.lookup(pr.headHash()).ifPresent(this::updateMergeClean);\n+            }\n+\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":26,"deletions":0,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -89,0 +89,3 @@\n+            \/\/ There is a merge commit at HEAD, but the merge commit is empty\n+            assertTrue(pr.store().labelNames().contains(\"clean\"));\n+\n@@ -1564,0 +1567,133 @@\n+\n+    @Test\n+    void noMergeCommitAtHead(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+\n+            var author = credentials.getHostedRepository();\n+            var integrator = credentials.getHostedRepository();\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addCommitter(author.forge().currentUser().id())\n+                    .addReviewer(integrator.forge().currentUser().id());\n+            var mergeBot = PullRequestBot.newBuilder().repo(integrator).censusRepo(censusBuilder.build()).build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.authenticatedUrl(), \"master\", true);\n+\n+            \/\/ Make more changes in another branch\n+            var otherHash1 = CheckableRepository.appendAndCommit(localRepo, \"First change in other_\/-1.2\",\n+                    \"First other_\/-1.2\\n\\nReviewed-by: integrationreviewer2\");\n+            localRepo.push(otherHash1, author.authenticatedUrl(), \"other_\/-1.2\", true);\n+            var otherHash2 = CheckableRepository.appendAndCommit(localRepo, \"Second change in other_\/-1.2\",\n+                    \"Second other_\/-1.2\\n\\nReviewed-by: integrationreviewer2\");\n+            localRepo.push(otherHash2, author.authenticatedUrl(), \"other_\/-1.2\");\n+\n+            \/\/ Go back to the original master\n+            localRepo.checkout(masterHash, true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var unrelated = Files.writeString(localRepo.root().resolve(\"unrelated.txt\"), \"Unrelated\", StandardCharsets.UTF_8);\n+            localRepo.add(unrelated);\n+            var updatedMaster = localRepo.commit(\"Unrelated\", \"some\", \"some@one\");\n+            localRepo.push(updatedMaster, author.authenticatedUrl(), \"master\");\n+\n+            var pr = credentials.createPullRequest(author, \"master\", \"other_\/-1.2\", \"Merge \" + author.name() + \":other_\/-1.2\");\n+\n+            \/\/ Let the bot check the status\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+\n+            assertTrue(pr.store().labelNames().contains(\"clean\"));\n+        }\n+    }\n+\n+    @Test\n+    void MergeCommitWithResolutionAtHead(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+\n+            var author = credentials.getHostedRepository();\n+            var integrator = credentials.getHostedRepository();\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addCommitter(author.forge().currentUser().id())\n+                    .addReviewer(integrator.forge().currentUser().id());\n+            var mergeBot = PullRequestBot.newBuilder().repo(integrator).censusRepo(censusBuilder.build()).build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.authenticatedUrl(), \"master\", true);\n+\n+            \/\/ Make more changes in another branch\n+            var otherHash1 = CheckableRepository.appendAndCommit(localRepo, \"First change in other_\/-1.2\",\n+                    \"First other_\/-1.2\\n\\nReviewed-by: integrationreviewer2\");\n+            localRepo.push(otherHash1, author.authenticatedUrl(), \"other_\/-1.2\", true);\n+            var otherHash2 = CheckableRepository.appendAndCommit(localRepo, \"Second change in other_\/-1.2\",\n+                    \"Second other_\/-1.2\\n\\nReviewed-by: integrationreviewer2\");\n+            localRepo.push(otherHash2, author.authenticatedUrl(), \"other_\/-1.2\");\n+\n+            \/\/ Go back to the original master\n+            localRepo.checkout(masterHash, true);\n+\n+            \/\/ update\n+            var defaultAppendable = Files.readString(localRepo.root().resolve(\"appendable.txt\"), StandardCharsets.UTF_8);\n+            var newAppendable = \"11111\\n\" + defaultAppendable;\n+            Files.writeString(localRepo.root().resolve(\"appendable.txt\"), newAppendable, StandardCharsets.UTF_8);\n+            localRepo.add(localRepo.root().resolve(\"appendable.txt\"));\n+            localRepo.commit(\"updated\", \"test\", \"test@test.com\");\n+\n+            localRepo.merge(otherHash2);\n+            var mergeHash = localRepo.commit(\"Merge commit\\n\\n This is Body\", \"some\", \"some@one\");\n+\n+            localRepo.push(mergeHash, author.authenticatedUrl(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"Merge \" + author.name() + \":other_\/-1.2\");\n+\n+            \/\/ Let the bot check the status\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+\n+            \/\/ There is a merge commit at HEAD and the merge commit is not empty\n+            assertFalse(pr.store().labelNames().contains(\"clean\"));\n+        }\n+    }\n+\n+    @Test\n+    void EmptyMergeCommitAtHead(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+\n+            var author = credentials.getHostedRepository();\n+            var integrator = credentials.getHostedRepository();\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addCommitter(author.forge().currentUser().id())\n+                    .addReviewer(integrator.forge().currentUser().id());\n+            var mergeBot = PullRequestBot.newBuilder().repo(integrator).censusRepo(censusBuilder.build()).build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.authenticatedUrl(), \"master\", true);\n+\n+            var feature = localRepo.branch(masterHash, \"feature\");\n+            localRepo.checkout(feature);\n+            var featureHash = CheckableRepository.appendAndCommit(localRepo);\n+\n+            localRepo.checkout(masterHash);\n+            localRepo.merge(featureHash, Repository.FastForward.DISABLE);\n+            var mergeHash = localRepo.commit(\"merged\\n\\n This is Body\", \"xxx\", \"xxx@gmail.com\");\n+            localRepo.push(mergeHash, author.authenticatedUrl(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"Merge \" + author.name() + \":other_\/-1.2\");\n+\n+            \/\/ Let the bot check the status\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+\n+            \/\/ There is a merge commit at HEAD and the merge commit is not empty\n+            assertTrue(pr.store().labelNames().contains(\"clean\"));\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/MergeTests.java","additions":136,"deletions":0,"binary":false,"changes":136,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -186,0 +186,2 @@\n+    Optional<List<String>> commitMessageBody(Hash hash);\n+\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/Repository.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -1730,0 +1730,8 @@\n+\n+    @Override\n+    public Optional<List<String>> commitMessageBody(Hash hash) {\n+        try (var p = capture(\"git\", \"show\", \"--pretty=format:%b\", hash.hex())) {\n+            var res = p.await();\n+            return res.status() == 0 ? Optional.of(res.stdout()) : Optional.empty();\n+        }\n+    }\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/git\/GitRepository.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -1526,0 +1526,5 @@\n+\n+    @Override\n+    public Optional<List<String>> commitMessageBody(Hash hash) {\n+        throw new UnsupportedOperationException();\n+    }\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/hg\/HgRepository.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"}]}