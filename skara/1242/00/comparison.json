{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -71,1 +71,4 @@\n-        if (!(labels.contains(\"rfr\") || labels.contains(\"integrated\"))) {\n+        var branchExists = pr.repository().branches().stream()\n+                            .map(HostedBranch::name)\n+                            .anyMatch(name -> name.equals(PreIntegrations.preIntegrateBranch(pr)));\n+        if (!(labels.contains(\"rfr\") || labels.contains(\"integrated\") || branchExists)) {\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/NotifyBot.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -103,0 +103,55 @@\n+    @Test\n+    void rfrMissing(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+\n+            var repo = credentials.getHostedRepository();\n+            var repoFolder = tempFolder.path().resolve(\"repo\");\n+            var localRepo = CheckableRepository.init(repoFolder, repo.repositoryType());\n+            credentials.commitLock(localRepo);\n+            localRepo.pushAll(repo.url());\n+\n+            var storageFolder = tempFolder.path().resolve(\"storage\");\n+            var notifyBot = testBotBuilder(repo, storageFolder).create(\"notify\", JSON.object());\n+\n+            \/\/ Initialize history\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ Create a PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, \"Another line\");\n+            localRepo.push(editHash, repo.url(), \"source\", true);\n+            var pr = credentials.createPullRequest(repo, \"master\", \"source\", \"This is a PR\", false);\n+            pr.addLabel(\"rfr\");\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ The target repo should now contain the new branch\n+            var hash = localRepo.fetch(repo.url(), PreIntegrations.preIntegrateBranch(pr));\n+            assertEquals(editHash, hash);\n+\n+            \/\/ remove label `rfr`\n+            pr.removeLabel(\"rfr\");\n+\n+            \/\/ Close the PR\n+            pr.setState(Issue.State.CLOSED);\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ The target repo should no longer contain the branch\n+            assertThrows(IOException.class, () -> localRepo.fetch(repo.url(), PreIntegrations.preIntegrateBranch(pr)));\n+\n+            \/\/ Reopen the PR\n+            pr.setState(Issue.State.OPEN);\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ The target repo should not contain the branch, because the pr doesn't have label `rfr`.\n+            assertThrows(IOException.class, () -> localRepo.fetch(repo.url(), PreIntegrations.preIntegrateBranch(pr)));\n+\n+            \/\/ add label `rfr`\n+            pr.addLabel(\"rfr\");\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ The branch should have reappeared\n+            hash = localRepo.fetch(repo.url(), PreIntegrations.preIntegrateBranch(pr));\n+            assertEquals(editHash, hash);\n+        }\n+    }\n+\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/prbranch\/PullRequestBranchNotifierTests.java","additions":56,"deletions":1,"binary":false,"changes":57,"status":"modified"}]}