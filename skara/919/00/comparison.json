{"files":[{"patch":"@@ -90,2 +90,2 @@\n-                                                                                              \"PR-Base-Hash\", base.hex(),\n-                                                                                              \"PR-Thread-Prefix\", threadPrefix),\n+                                                                                 \"PR-Base-Hash\", base.hex(),\n+                                                                                 \"PR-Thread-Prefix\", threadPrefix),\n@@ -158,1 +158,1 @@\n-        return new ArchiveItem(parent,\"ha\" + head.hex(), created, updated, pr.author(), Map.of(\"PR-Head-Hash\", head.hex(), \"PR-Base-Hash\", base.hex()),\n+        return new ArchiveItem(parent, \"ha\" + head.hex(), created, updated, pr.author(), Map.of(\"PR-Head-Hash\", head.hex(), \"PR-Base-Hash\", base.hex()),\n@@ -213,1 +213,1 @@\n-                               () -> ArchiveMessages.composeReviewComment(pr, reviewComment) ,\n+                               () -> ArchiveMessages.composeReviewComment(pr, reviewComment),\n@@ -233,1 +233,1 @@\n-    private static Pattern mentionPattern = Pattern.compile(\"^@([\\\\w-]+).*\");\n+    private static final Pattern mentionPattern = Pattern.compile(\"@([\\\\w-]+)\");\n@@ -236,2 +236,6 @@\n-        var mentionMatcher = mentionPattern.matcher(commentText);\n-        if (mentionMatcher.matches()) {\n+        var firstLine = commentText.lines().findFirst();\n+        if (firstLine.isEmpty()) {\n+            return Optional.empty();\n+        }\n+        var mentionMatcher = mentionPattern.matcher(firstLine.get());\n+        if (mentionMatcher.find()) {\n@@ -239,1 +243,1 @@\n-            for (int i = eligibleParents.size() - 1; i != 0; --i) {\n+            for (int i = eligibleParents.size() - 1; i >= 0; --i) {\n@@ -250,0 +254,2 @@\n+                                .map(String::strip)\n+                                .filter(line -> !line.isBlank())\n@@ -262,1 +268,1 @@\n-        for (int i = eligibleParents.size() - 1; i != 0; --i) {\n+        for (int i = eligibleParents.size() - 1; i >= 0; --i) {\n@@ -390,0 +396,5 @@\n+\n+    @Override\n+    public String toString() {\n+        return \"ArchiveItem From: \" + author + \" Body: \" + body.get();\n+    }\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/ArchiveItem.java","additions":20,"deletions":9,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bots.mlbridge;\n+\n+import org.junit.jupiter.api.*;\n+import org.openjdk.skara.forge.PullRequest;\n+import org.openjdk.skara.host.HostUser;\n+import org.openjdk.skara.issuetracker.Comment;\n+import org.openjdk.skara.test.HostCredentials;\n+\n+import java.io.IOException;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class ArchiveItemTests {\n+    private int curId = 0;\n+\n+    private Comment createComment(HostUser user, String body) {\n+        return new Comment(Integer.toString(curId++), body, user, ZonedDateTime.now(), ZonedDateTime.now());\n+    }\n+\n+    private ArchiveItem fromComment(PullRequest pr, Comment comment) {\n+        return ArchiveItem.from(pr, comment, null, null);\n+    }\n+\n+    @Test\n+    void simple(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo)) {\n+            var repo = credentials.getHostedRepository();\n+            var pr = credentials.createPullRequest(repo, \"master\", \"master\", \"Test\");\n+\n+            var user1 = HostUser.create(\"1\", \"user1\", \"User Uno\");\n+            var user2 = HostUser.create(\"2\", \"user2\", \"User Duo\");\n+            var user3 = HostUser.create(\"3\", \"user3\", \"User Trio\");\n+\n+            var c1 = createComment(user1, \"First comment\\nwith two lines\");\n+            var c2 = createComment(user2, \"Second comment\");\n+\n+            var a1 = fromComment(pr, c1);\n+            var a2 = fromComment(pr, c2);\n+\n+            assertEquals(a2, ArchiveItem.findParent(List.of(a1, a2), createComment(user3, \"Plain reply\")));\n+\n+            assertEquals(a1, ArchiveItem.findParent(List.of(a1, a2), createComment(user3, \"> First comment\\n\\nI agree\")));\n+            assertEquals(a1, ArchiveItem.findParent(List.of(a1, a2), createComment(user3, \"> First comment\\n>with two lines\\n\\nI agree\")));\n+            assertEquals(a1, ArchiveItem.findParent(List.of(a1, a2), createComment(user3, \"\\n> First comment\\n\\nI agree\")));\n+\n+            assertEquals(a1, ArchiveItem.findParent(List.of(a1, a2), createComment(user3, \"@user1 I agree\")));\n+            assertEquals(a1, ArchiveItem.findParent(List.of(a1, a2), createComment(user3, \"@user1\\nI agree\")));\n+        }\n+    }\n+}\n","filename":"bots\/mlbridge\/src\/test\/java\/org\/openjdk\/skara\/bots\/mlbridge\/ArchiveItemTests.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"}]}