{"files":[{"patch":"@@ -85,0 +85,2 @@\n+    private static final int QUOTE_BODY_MAX_LENGTH = 2500;\n+\n@@ -236,0 +238,3 @@\n+        if (body.length() > QUOTE_BODY_MAX_LENGTH) {\n+            body = body.substring(0, QUOTE_BODY_MAX_LENGTH) + \"...\";\n+        }\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/ReviewArchive.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -3892,0 +3892,94 @@\n+\n+    @Test\n+    void archiveLongBody(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory();\n+             var archiveFolder = new TemporaryDirectory();\n+             var webrevFolder = new TemporaryDirectory();\n+             var listServer = new TestMailmanServer();\n+             var webrevServer = new TestWebrevServer()) {\n+            var author = credentials.getHostedRepository();\n+            var archive = credentials.getHostedRepository();\n+            var ignored = credentials.getHostedRepository();\n+            var listAddress = EmailAddress.parse(listServer.createList(\"test\"));\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addAuthor(author.forge().currentUser().id());\n+            var from = EmailAddress.from(\"test\", \"test@test.mail\");\n+            var mlBot = MailingListBridgeBot.newBuilder()\n+                    .from(from)\n+                    .repo(author)\n+                    .archive(archive)\n+                    .censusRepo(censusBuilder.build())\n+                    .lists(List.of(new MailingListConfiguration(listAddress, Set.of())))\n+                    .ignoredUsers(Set.of(ignored.forge().currentUser().username()))\n+                    .ignoredComments(Set.of())\n+                    .listArchive(listServer.getArchive())\n+                    .smtpServer(listServer.getSMTP())\n+                    .webrevStorageHTMLRepository(archive)\n+                    .webrevStorageRef(\"webrev\")\n+                    .webrevStorageBase(Path.of(\"test\"))\n+                    .webrevStorageBaseUri(webrevServer.uri())\n+                    .readyLabels(Set.of(\"rfr\"))\n+                    .readyComments(Map.of(ignored.forge().currentUser().username(), Pattern.compile(\"ready\")))\n+                    .issueTracker(URIBuilder.base(\"http:\/\/issues.test\/browse\/\").build())\n+                    .headers(Map.of(\"Extra1\", \"val1\", \"Extra2\", \"val2\"))\n+                    .sendInterval(Duration.ZERO)\n+                    .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.authenticatedUrl(), \"master\", true);\n+            localRepo.push(masterHash, archive.authenticatedUrl(), \"webrev\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, \"A simple change\",\n+                    \"Change msg\\n\\nWith several lines\");\n+            localRepo.push(editHash, author.authenticatedUrl(), \"edit\", true);\n+            var pr = credentials.createPullRequest(archive, \"master\", \"edit\", \"1234: This is a pull request\");\n+\n+            \/\/ Flag it as ready for review\n+            pr.setBody(\"This should now be ready\" + \"0\".repeat(10000));\n+            pr.addLabel(\"rfr\");\n+\n+            var ignoredPr = ignored.pullRequest(pr.id());\n+\n+            \/\/ Now post a ready comment\n+            ignoredPr.addComment(\"ready\");\n+\n+            \/\/skara command prefixed with non-white space - should be archived\n+            pr.addComment(\"do not ignore me \/help\");\n+\n+            \/\/valid skara command - should not be archived\n+            pr.addComment(\"\/help\");\n+\n+            \/\/Invalid skara command but starting with '\/' - should be archived\n+            pr.addComment(\"\/some-text & more text\");\n+\n+            \/\/Not a valid skara command with upper case letter - should be archived\n+            pr.addComment(\"\/Help\");\n+\n+            \/\/ Run another archive pass\n+            TestBotRunner.runPeriodicItems(mlBot);\n+\n+            Repository.materialize(archiveFolder.path(), archive.authenticatedUrl(), \"master\");\n+            \/\/ Should contain truncated pr body\n+            assertTrue(archiveContains(archiveFolder.path(), pr.store().body().substring(0, 2500) + \"...\"));\n+\n+            \/\/ The mailing list as well\n+            listServer.processIncoming();\n+            var mailmanServer = MailingListServerFactory.createMailmanServer(listServer.getArchive(), listServer.getSMTP(), Duration.ZERO);\n+            var mailmanList = mailmanServer.getListReader(listAddress.address());\n+            var conversations = mailmanList.conversations(Duration.ofDays(1));\n+            assertEquals(1, conversations.size());\n+            var mail = conversations.get(0).first();\n+            assertEquals(\"RFR: 1234: This is a pull request\", mail.subject());\n+            assertEquals(pr.author().fullName(), mail.author().fullName().orElseThrow());\n+            assertEquals(from.address(), mail.author().address());\n+            assertEquals(listAddress, mail.sender());\n+            assertEquals(\"val1\", mail.headerValue(\"Extra1\"));\n+            assertEquals(\"val2\", mail.headerValue(\"Extra2\"));\n+            \/\/ The first mail should contain full pr body\n+            assertTrue(mail.body().contains(pr.store().body()));\n+        }\n+    }\n","filename":"bots\/mlbridge\/src\/test\/java\/org\/openjdk\/skara\/bots\/mlbridge\/MailingListBridgeBotTests.java","additions":94,"deletions":0,"binary":false,"changes":94,"status":"modified"}]}