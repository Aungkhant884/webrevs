{"files":[{"patch":"@@ -25,0 +25,1 @@\n+import java.util.regex.Pattern;\n@@ -51,2 +52,2 @@\n-    private final Map<String, String> fixVersions;\n-    private final Map<String, List<String>> altFixVersions;\n+    private final LinkedHashMap<Pattern, String> fixVersions;\n+    private final LinkedHashMap<Pattern, List<Pattern>> altFixVersions;\n@@ -82,1 +83,1 @@\n-                  boolean setFixVersion, Map<String, String> fixVersions, Map<String, List<String>> altFixVersions,\n+                  boolean setFixVersion, LinkedHashMap<Pattern, String> fixVersions, LinkedHashMap<Pattern, List<Pattern>> altFixVersions,\n@@ -358,9 +359,7 @@\n-            for (var altFixVersionString : altFixVersions.getOrDefault(branch.name(), List.of())) {\n-                var altFixVersion = JdkVersion.parse(altFixVersionString).orElseThrow();\n-                var altBackport = Backports.findIssue(issue, altFixVersion);\n-                if (altBackport.isPresent()) {\n-                    if (altBackport.get().isFixed()) {\n-                        return altBackport;\n-                    }\n-                }\n-            }\n+            var matchingBranchPattern = altFixVersions.keySet().stream()\n+                    .filter(pattern -> pattern.matcher(branch.toString()).matches())\n+                    .findFirst();\n+            return matchingBranchPattern.flatMap(branchPattern -> altFixVersions.get(branchPattern).stream()\n+                    .map(versionPattern -> Backports.findFixedIssue(issue, versionPattern))\n+                    .flatMap(Optional::stream)\n+                    .findFirst());\n@@ -482,12 +481,6 @@\n-        var requestedVersion = fixVersions != null ? fixVersions.getOrDefault(branch, null) : null;\n-        if (requestedVersion == null) {\n-            try {\n-                var hash = (useHeadVersion ? localRepository.resolve(branch).orElseThrow() : commit.hash());\n-                var conf = localRepository.lines(Path.of(\".jcheck\/conf\"), hash);\n-                if (conf.isPresent()) {\n-                    var parsed = JCheckConfiguration.parse(conf.get());\n-                    var version = parsed.general().version();\n-                    requestedVersion = version.orElse(null);\n-                }\n-            } catch (IOException e) {\n-                throw new RuntimeException(e);\n+        if (fixVersions != null) {\n+            var matchingPattern = fixVersions.keySet().stream()\n+                    .filter(pattern -> pattern.matcher(branch).matches())\n+                    .findFirst();\n+            if (matchingPattern.isPresent()) {\n+                return fixVersions.get(matchingPattern.get());\n@@ -496,1 +489,12 @@\n-        return requestedVersion;\n+        try {\n+            var hash = (useHeadVersion ? localRepository.resolve(branch).orElseThrow() : commit.hash());\n+            var conf = localRepository.lines(Path.of(\".jcheck\/conf\"), hash);\n+            if (conf.isPresent()) {\n+                var parsed = JCheckConfiguration.parse(conf.get());\n+                var version = parsed.general().version();\n+                return version.orElse(null);\n+            }\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);\n+        }\n+        return null;\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifier.java","additions":29,"deletions":25,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import java.util.regex.Pattern;\n@@ -38,2 +39,2 @@\n-    private Map<String, String> fixVersions = null;\n-    private Map<String, List<String>> altFixVersions = null;\n+    private LinkedHashMap<Pattern, String> fixVersions = null;\n+    private LinkedHashMap<Pattern, List<Pattern>> altFixVersions = null;\n@@ -83,1 +84,1 @@\n-    public IssueNotifierBuilder fixVersions(Map<String, String> fixVersions) {\n+    public IssueNotifierBuilder fixVersions(LinkedHashMap<Pattern, String> fixVersions) {\n@@ -88,1 +89,1 @@\n-    public IssueNotifierBuilder altFixVersions(Map<String, List<String>> altFixVersions) {\n+    public IssueNotifierBuilder altFixVersions(LinkedHashMap<Pattern, List<Pattern>> altFixVersions) {\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifierBuilder.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -25,0 +25,3 @@\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.regex.Pattern;\n@@ -67,3 +70,4 @@\n-            builder.fixVersions(notifierConfiguration.get(\"fixversions\").fields().stream()\n-                                                      .collect(Collectors.toMap(JSONObject.Field::name,\n-                                                                                f -> f.value().asString())));\n+            var fixVersions = new LinkedHashMap<Pattern, String>();\n+            notifierConfiguration.get(\"fixversions\").fields()\n+                    .forEach(f -> fixVersions.put(Pattern.compile(f.name()), f.value().asString()));\n+            builder.fixVersions(fixVersions);\n@@ -72,5 +76,7 @@\n-            builder.altFixVersions(notifierConfiguration.get(\"altfixversions\").fields().stream()\n-                    .collect(Collectors.toMap(JSONObject.Field::name,\n-                            f -> f.value().asArray().stream()\n-                                    .map(JSONValue::asString)\n-                                    .toList())));\n+            var altFixVersions = new LinkedHashMap<Pattern, List<Pattern>>();\n+            notifierConfiguration.get(\"altfixversions\").fields()\n+                    .forEach(f -> altFixVersions.put(Pattern.compile(f.name()), f.value().asArray().stream()\n+                            .map(JSONValue::asString)\n+                            .map(Pattern::compile)\n+                            .toList()));\n+            builder.altFixVersions(altFixVersions);\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifierFactory.java","additions":14,"deletions":8,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -1071,2 +1071,2 @@\n-                            .put(\"master\", \"8u341\")\n-                            .put(\"other\", \"8u341-foo\"))\n+                            .put(\"maste.\", \"8u341\")\n+                            .put(\"othe.\", \"8u341-foo\"))\n@@ -1577,1 +1577,1 @@\n-            var jbsNotifierConfig = JSON.object().put(\"fixversions\", JSON.object().put(\"master\", \"12.0.2\"));\n+            var jbsNotifierConfig = JSON.object().put(\"fixversions\", JSON.object().put(\".*aster\", \"12.0.2\"));\n@@ -1774,0 +1774,48 @@\n+            localRepo.push(editHash, repo.url(), \"master\");\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ The fixVersion should not have been updated\n+            var updatedIssue = issueProject.issue(issue.id()).orElseThrow();\n+            assertEquals(Set.of(\"18\"), fixVersions(updatedIssue));\n+            assertEquals(RESOLVED, updatedIssue.state());\n+            assertEquals(List.of(issueProject.issueTracker().currentUser()), updatedIssue.assignees());\n+            \/\/ A commit comment should have been added\n+            List<Comment> comments = updatedIssue.comments();\n+            assertEquals(1, comments.size());\n+            var comment = comments.get(0);\n+            assertTrue(comment.body().contains(editHash.toString()));\n+            assertTrue(comment.body().contains(repo.url().toString()));\n+\n+            \/\/ There should be no link\n+            var links = updatedIssue.links();\n+            assertEquals(0, links.size());\n+        }\n+    }\n+\n+    @Test\n+    void testAltFixVersionsMatchRegex(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var repo = credentials.getHostedRepository();\n+            var repoFolder = tempFolder.path().resolve(\"repo\");\n+            var localRepo = CheckableRepository.init(repoFolder, repo.repositoryType(), Path.of(\"appendable.txt\"), Set.of(), null);\n+            credentials.commitLock(localRepo);\n+            localRepo.pushAll(repo.url());\n+\n+            var storageFolder = tempFolder.path().resolve(\"storage\");\n+            var issueProject = credentials.getIssueProject();\n+            var jbsNotifierConfig = JSON.object().put(\"fixversions\", JSON.object().put(\"master\", \"jdk-cpu\"));\n+            jbsNotifierConfig.put(\"altfixversions\", JSON.object().put(\"m.*\", JSON.array().add(\"1[78]\")));\n+            var notifyBot = testBotBuilder(repo, issueProject, storageFolder, jbsNotifierConfig).create(\"notify\", JSON.object());\n+\n+            \/\/ Initialize history\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ Create an issue and commit a fix\n+            var issue = issueProject.createIssue(\"This is an issue\", List.of(\"Indeed\"),\n+                    Map.of(\"issuetype\", JSON.of(\"Enhancement\")));\n+            issue.setProperty(\"fixVersions\", JSON.array().add(\"18\"));\n+            issue.setState(RESOLVED);\n+\n+            var authorEmailAddress = issueProject.issueTracker().currentUser().username() + \"@openjdk.org\";\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, \"Another line\", issue.id() + \": Fix that issue\", \"Duke\", authorEmailAddress);\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifierTests.java","additions":51,"deletions":3,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -245,0 +245,12 @@\n+    }\n+\n+    \/**\n+     * Returns issue or one of its backports that has a fixVersion matching the\n+     * version pattern and is fixed.\n+     *\/\n+    public static Optional<Issue> findFixedIssue(Issue primary, Pattern versionPattern) {\n+        log.fine(\"Searching for fixed issue with fix version matching \/\" + versionPattern + \"\/ \"\n+                + \" for primary issue \" + primary.id());\n+        return Stream.concat(Stream.of(primary).filter(Issue::isFixed), findBackports(primary, true).stream())\n+                .filter(i -> mainFixVersion(i).map(v -> versionPattern.matcher(v.raw()).matches()).orElse(false))\n+                .findFirst();\n","filename":"jbs\/src\/main\/java\/org\/openjdk\/skara\/jbs\/Backports.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import java.util.regex.Pattern;\n@@ -36,0 +37,1 @@\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -987,0 +989,32 @@\n+\n+    @Test\n+    void findFixedIssueWithPattern(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo)) {\n+            var issueProject = credentials.getIssueProject();\n+            var issue = credentials.createIssue(issueProject, \"Issue\");\n+            issue.setProperty(\"issuetype\", JSON.of(\"Bug\"));\n+            var backport = credentials.createIssue(issueProject, \"Backport\");\n+            backport.setProperty(\"issuetype\", JSON.of(\"Backport\"));\n+            backport.setState(Issue.State.RESOLVED);\n+            issue.addLink(Link.create(backport, \"backported by\").build());\n+            var backport2 = credentials.createIssue(issueProject, \"Backport Foo\");\n+            backport2.setProperty(\"issuetype\", JSON.of(\"Backport\"));\n+            issue.addLink(Link.create(backport2, \"backported by\").build());\n+\n+            issue.setProperty(\"fixVersions\", JSON.array().add(\"17\"));\n+            backport.setProperty(\"fixVersions\", JSON.array().add(\"16.0.2\"));\n+            backport2.setProperty(\"fixVersions\", JSON.array().add(\"16u-cpu\"));\n+\n+            assertEquals(backport.id(), Backports.findFixedIssue(issue, Pattern.compile(\"16.*\")).orElseThrow().id());\n+            assertTrue(Backports.findFixedIssue(issue, Pattern.compile(\".*cpu\")).isEmpty());\n+            assertTrue(Backports.findFixedIssue(issue, Pattern.compile(\"17\")).isEmpty());\n+\n+            issue.setState(Issue.State.RESOLVED);\n+            \/\/ Need to reload the issue from the store for this to be picked up.\n+            issue = (TestIssue) issueProject.issue(issue.id()).orElseThrow();\n+            assertEquals(issue.id(), Backports.findFixedIssue(issue, Pattern.compile(\"17\")).orElseThrow().id());\n+\n+            backport2.setState(Issue.State.RESOLVED);\n+            assertEquals(backport2.id(), Backports.findFixedIssue(issue, Pattern.compile(\".*cpu\")).orElseThrow().id());\n+        }\n+    }\n","filename":"jbs\/src\/test\/java\/org\/openjdk\/skara\/jbs\/BackportsTests.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"modified"}]}