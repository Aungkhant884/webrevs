{"files":[{"patch":"@@ -37,0 +37,6 @@\n+\/**\n+ * The MirrorBot mirrors one HostedRepository to another. It can be configured\n+ * to only mirror a specific set of branches, or everything (which also\n+ * includes tags). When only mirroring a set of branches, the includeTags\n+ * setting can be used to also include tags.\n+ *\/\n@@ -44,0 +50,1 @@\n+    private final boolean includeTags;\n@@ -46,1 +53,1 @@\n-        this(storage, from, to, List.of());\n+        this(storage, from, to, List.of(), false);\n@@ -49,1 +56,2 @@\n-    MirrorBot(Path storage, HostedRepository from, HostedRepository to, List<Branch> branches) {\n+    MirrorBot(Path storage, HostedRepository from, HostedRepository to, List<Branch> branches,\n+              boolean includeTags) {\n@@ -55,0 +63,1 @@\n+        this.includeTags = includeTags;\n@@ -92,1 +101,2 @@\n-                repo.fetchAll(from.url(), false);\n+                \/\/ Tags are always included when mirroring everything\n+                repo.fetchAll(from.url(), true);\n@@ -97,2 +107,2 @@\n-                    var fetchHead = repo.fetch(from.url(), branch.name(), false);\n-                    repo.push(fetchHead, to.url(), branch.name());\n+                    var fetchHead = repo.fetch(from.url(), branch.name(), includeTags);\n+                    repo.push(fetchHead, to.url(), branch.name(), false, includeTags);\n","filename":"bots\/mirror\/src\/main\/java\/org\/openjdk\/skara\/bots\/mirror\/MirrorBot.java","additions":15,"deletions":5,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -67,0 +67,1 @@\n+            var includeTags = repo.contains(\"tags\") && repo.get(\"tags\").asBoolean();\n@@ -69,1 +70,1 @@\n-            bots.add(new MirrorBot(storage, fromRepo, toRepo, branches));\n+            bots.add(new MirrorBot(storage, fromRepo, toRepo, branches, includeTags));\n","filename":"bots\/mirror\/src\/main\/java\/org\/openjdk\/skara\/bots\/mirror\/MirrorBotFactory.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -123,0 +123,3 @@\n+    \/**\n+     * Tests mirrorEverything with multiple tags\n+     *\/\n@@ -124,1 +127,1 @@\n-    void mirrorMultipleTags(TestInfo testInfo) throws IOException {\n+    void mirrorEverythingMultipleTags(TestInfo testInfo) throws IOException {\n@@ -165,0 +168,118 @@\n+\n+            \/\/ Add another tag and go again\n+            fromLocalRepo.tag(newHash, \"third\", \"add third tag\", \"duke\", \"duk@openjdk.org\");\n+\n+            TestBotRunner.runPeriodicItems(bot);\n+            toTags = toLocalRepo.tags();\n+            assertEquals(3, toTags.size());\n+            assertTrue(toTags.contains(new Tag(\"first\")));\n+            assertTrue(toTags.contains(new Tag(\"second\")));\n+            assertTrue(toTags.contains(new Tag(\"third\")));\n+        }\n+    }\n+\n+    \/**\n+     * Tests mirroring a single branch, including tags\n+     *\/\n+    @Test\n+    void mirrorSingleBranchAndTags(TestInfo testInfo) throws IOException {\n+        try (var temp = new TemporaryDirectory()) {\n+            var host = TestHost.createNew(List.of(HostUser.create(0, \"duke\", \"J. Duke\")));\n+\n+            var fromDir = temp.path().resolve(\"from.git\");\n+            var fromLocalRepo = TestableRepository.init(fromDir, VCS.GIT);\n+            var fromHostedRepo = new TestHostedRepository(host, \"test\", fromLocalRepo);\n+\n+            var toDir = temp.path().resolve(\"to.git\");\n+            var toLocalRepo = TestableRepository.init(toDir, VCS.GIT);\n+            var gitConfig = toDir.resolve(\".git\").resolve(\"config\");\n+            Files.write(gitConfig, List.of(\"[receive]\", \"denyCurrentBranch = ignore\"),\n+                    StandardOpenOption.APPEND);\n+            var toHostedRepo = new TestHostedRepository(host, \"test-mirror\", toLocalRepo);\n+\n+            var newFile = fromDir.resolve(\"this-file-cannot-exist.txt\");\n+            Files.writeString(newFile, \"Hello world\\n\");\n+            fromLocalRepo.add(newFile);\n+            var newHash = fromLocalRepo.commit(\"An additional commit\", \"duke\", \"duke@openjdk.org\");\n+            var fromCommits = fromLocalRepo.commits().asList();\n+            assertEquals(1, fromCommits.size());\n+            assertEquals(newHash, fromCommits.get(0).hash());\n+\n+            fromLocalRepo.tag(newHash, \"first\", \"add first tag\", \"duke\", \"duk@openjdk.org\");\n+            fromLocalRepo.tag(newHash, \"second\", \"add second tag\", \"duke\", \"duk@openjdk.org\");\n+\n+            var toCommits = toLocalRepo.commits().asList();\n+            assertEquals(0, toCommits.size());\n+            assertEquals(0, toLocalRepo.tags().size());\n+\n+            var storage = temp.path().resolve(\"storage\");\n+            var bot = new MirrorBot(storage, fromHostedRepo, toHostedRepo, List.of(new Branch(\"master\")), true);\n+            TestBotRunner.runPeriodicItems(bot);\n+\n+            toCommits = toLocalRepo.commits().asList();\n+            assertEquals(1, toCommits.size());\n+            assertEquals(newHash, toCommits.get(0).hash());\n+            var toTags = toLocalRepo.tags();\n+            assertEquals(2, toTags.size());\n+            assertTrue(toTags.contains(new Tag(\"first\")));\n+            assertTrue(toTags.contains(new Tag(\"second\")));\n+\n+            \/\/ Add another tag and go again\n+            fromLocalRepo.tag(newHash, \"third\", \"add third tag\", \"duke\", \"duk@openjdk.org\");\n+\n+            TestBotRunner.runPeriodicItems(bot);\n+            toTags = toLocalRepo.tags();\n+            assertEquals(3, toTags.size());\n+            assertTrue(toTags.contains(new Tag(\"first\")));\n+            assertTrue(toTags.contains(new Tag(\"second\")));\n+            assertTrue(toTags.contains(new Tag(\"third\")));\n+        }\n+    }\n+\n+    \/**\n+     * Tests mirroring a single branch without including tags\n+     *\/\n+    @Test\n+    void mirrorSingleBranchNoTags(TestInfo testInfo) throws IOException {\n+        try (var temp = new TemporaryDirectory()) {\n+            var host = TestHost.createNew(List.of(HostUser.create(0, \"duke\", \"J. Duke\")));\n+\n+            var fromDir = temp.path().resolve(\"from.git\");\n+            var fromLocalRepo = TestableRepository.init(fromDir, VCS.GIT);\n+            var fromHostedRepo = new TestHostedRepository(host, \"test\", fromLocalRepo);\n+\n+            var toDir = temp.path().resolve(\"to.git\");\n+            var toLocalRepo = TestableRepository.init(toDir, VCS.GIT);\n+            var gitConfig = toDir.resolve(\".git\").resolve(\"config\");\n+            Files.write(gitConfig, List.of(\"[receive]\", \"denyCurrentBranch = ignore\"),\n+                    StandardOpenOption.APPEND);\n+            var toHostedRepo = new TestHostedRepository(host, \"test-mirror\", toLocalRepo);\n+\n+            var newFile = fromDir.resolve(\"this-file-cannot-exist.txt\");\n+            Files.writeString(newFile, \"Hello world\\n\");\n+            fromLocalRepo.add(newFile);\n+            var newHash = fromLocalRepo.commit(\"An additional commit\", \"duke\", \"duke@openjdk.org\");\n+            var fromCommits = fromLocalRepo.commits().asList();\n+            assertEquals(1, fromCommits.size());\n+            assertEquals(newHash, fromCommits.get(0).hash());\n+\n+            fromLocalRepo.tag(newHash, \"first\", \"add first tag\", \"duke\", \"duk@openjdk.org\");\n+\n+            var toCommits = toLocalRepo.commits().asList();\n+            assertEquals(0, toCommits.size());\n+            assertEquals(0, toLocalRepo.tags().size());\n+\n+            var storage = temp.path().resolve(\"storage\");\n+            var bot = new MirrorBot(storage, fromHostedRepo, toHostedRepo, List.of(new Branch(\"master\")), false);\n+            TestBotRunner.runPeriodicItems(bot);\n+\n+            toCommits = toLocalRepo.commits().asList();\n+            assertEquals(1, toCommits.size());\n+            assertEquals(newHash, toCommits.get(0).hash());\n+            var toTags = toLocalRepo.tags();\n+            assertEquals(0, toTags.size());\n+\n+            \/\/ Go a second time\n+            TestBotRunner.runPeriodicItems(bot);\n+            toTags = toLocalRepo.tags();\n+            assertEquals(0, toTags.size());\n@@ -261,1 +382,1 @@\n-            var bot = new MirrorBot(storage, fromHostedRepo, toHostedRepo, List.of(new Branch(\"master\")));\n+            var bot = new MirrorBot(storage, fromHostedRepo, toHostedRepo, List.of(new Branch(\"master\")), false);\n","filename":"bots\/mirror\/src\/test\/java\/org\/openjdk\/skara\/bots\/mirror\/MirrorBotTests.java","additions":123,"deletions":2,"binary":false,"changes":125,"status":"modified"},{"patch":"@@ -58,1 +58,4 @@\n-    void push(Hash hash, URI uri, String ref, boolean force) throws IOException;\n+    default void push(Hash hash, URI uri, String ref, boolean force) throws IOException {\n+        push(hash, uri, ref, force, false);\n+    }\n+    void push(Hash hash, URI uri, String ref, boolean force, boolean includeTags) throws IOException;\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/Repository.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -588,1 +588,10 @@\n-    public void push(Hash hash, URI uri, String ref, boolean force) throws IOException {\n+    public void push(Hash hash, URI uri, String ref, boolean force, boolean includeTags) throws IOException {\n+        var cmd = new ArrayList<String>();\n+        cmd.addAll(List.of(\"git\", \"push\"));\n+\n+        if (includeTags) {\n+            cmd.add(\"--tags\");\n+        }\n+\n+        cmd.add(uri.toString());\n+\n@@ -594,0 +603,1 @@\n+        cmd.add(refspec);\n@@ -595,1 +605,1 @@\n-        try (var p = capture(\"git\", \"push\", uri.toString(), refspec)) {\n+        try (var p = capture(cmd)) {\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/git\/GitRepository.java","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -560,1 +560,2 @@\n-    public void push(Hash hash, URI uri, String ref, boolean force) throws IOException {\n+    public void push(Hash hash, URI uri, String ref, boolean force, boolean includeTags) throws IOException {\n+        \/\/ ignore includeTags, hg always pushes tags\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/hg\/HgRepository.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}