{"files":[{"patch":"@@ -76,0 +76,5 @@\n+    \/\/ Should the prefix of a tag match the prefix of a fix version to be considered\n+    \/\/ a match (except for the special tag prefix 'jdk' which will always be ignored\n+    \/\/ when parsing a version from a tag).\n+    private final boolean tagMatchPrefix;\n+\n@@ -85,1 +90,2 @@\n-                  HostedRepository originalRepository, boolean resolve, Set<String> tagIgnoreOpt) {\n+                  HostedRepository originalRepository, boolean resolve, Set<String> tagIgnoreOpt,\n+                  boolean tagMatchPrefix) {\n@@ -105,0 +111,1 @@\n+        this.tagMatchPrefix = tagMatchPrefix;\n@@ -466,11 +473,13 @@\n-        \/\/ The fixVersion may have a prefix in the first component that is not present\n-        \/\/ in the tagVersion. e.g. 'openjdk8u342' vs '8u342'\n-        var fixComponents = fixVersion.components();\n-        var tagComponents = tagVersion.components();\n-        \/\/ Check that the rest of the components are equal\n-        if (fixComponents.size() > 0 && fixComponents.size() == tagComponents.size()\n-                && fixComponents.subList(1, fixComponents.size()).equals(tagComponents.subList(1, tagComponents.size()))) {\n-            var fixFirst = fixComponents.get(0);\n-            var tagFirst = tagComponents.get(0);\n-            \/\/ Check if the first fixVersion component has a prefix consisting of only lower case letters\n-            return fixFirst.matches(\"[a-z]+\" + tagFirst);\n+        if (!tagMatchPrefix) {\n+            \/\/ The fixVersion may have a prefix in the first component that is not present\n+            \/\/ in the tagVersion. e.g. 'openjdk8u342' vs '8u342'\n+            var fixComponents = fixVersion.components();\n+            var tagComponents = tagVersion.components();\n+            \/\/ Check that the rest of the components are equal\n+            if (fixComponents.size() > 0 && fixComponents.size() == tagComponents.size()\n+                    && fixComponents.subList(1, fixComponents.size()).equals(tagComponents.subList(1, tagComponents.size()))) {\n+                var fixFirst = fixComponents.get(0);\n+                var tagFirst = tagComponents.get(0);\n+                \/\/ Check if the first fixVersion component has a prefix consisting of only lower case letters\n+                return fixFirst.matches(\"[a-z]+\" + tagFirst);\n+            }\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifier.java","additions":21,"deletions":12,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -51,0 +51,1 @@\n+    private boolean tagMatchPrefix = false;\n@@ -148,0 +149,5 @@\n+    public IssueNotifierBuilder tagMatchPrefix(boolean tagMatchPrefix) {\n+        this.tagMatchPrefix = tagMatchPrefix;\n+        return this;\n+    }\n+\n@@ -161,1 +167,1 @@\n-                resolve, tagIgnoreOpt);\n+                resolve, tagIgnoreOpt, tagMatchPrefix);\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifierBuilder.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -133,0 +133,3 @@\n+            if (tag.contains(\"matchprefix\")) {\n+                builder.tagMatchPrefix(tag.get(\"matchprefix\").asBoolean());\n+            }\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifierFactory.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1131,1 +1131,1 @@\n-            \/\/ Tag it with an unrelated tag\n+            \/\/ Tag it with a properly formatted tag for the foo version\n@@ -1143,0 +1143,95 @@\n+    \/**\n+     * Tests the optional functionality of requiring a version prefix to be matched\n+     * when evaluating tags against fixVersions\n+     *\/\n+    @Test\n+    void testIssueBuildAfterTagJdk8uPrefix(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+\n+            var repo = credentials.getHostedRepository();\n+            var repoFolder = tempFolder.path().resolve(\"repo\");\n+            var localRepo = CheckableRepository.init(repoFolder, repo.repositoryType());\n+            credentials.commitLock(localRepo);\n+            localRepo.pushAll(repo.url());\n+\n+            var issueProject = credentials.getIssueProject();\n+            var storageFolder = tempFolder.path().resolve(\"storage\");\n+            var jbsNotifierConfig = JSON.object().put(\"fixversions\", JSON.object()\n+                            .put(\"master\", \"8u341\")\n+                            .put(\"other\", \"foo8u341\"))\n+                    .put(\"buildname\", \"team\")\n+                    .put(\"tag\", JSON.object()\n+                            .put(\"matchprefix\", true));\n+            var notifyBot = testBotBuilder(repo, issueProject, storageFolder, jbsNotifierConfig).create(\"notify\", JSON.object());\n+\n+            \/\/ Initialize history\n+            var current = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(current, repo.url(), \"other\");\n+            localRepo.tag(current, \"jdk8u341-b00\", \"First tag\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.tag(current, \"foo8u341-b00\", \"First foo tag\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(new Branch(repo.url().toString()), \"--tags\", false);\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ Create an issue and commit a fix\n+            var authorEmailAddress = issueProject.issueTracker().currentUser().username() + \"@openjdk.org\";\n+            var issue = issueProject.createIssue(\"This is an issue\", List.of(\"Indeed\"), Map.of(\"issuetype\", JSON.of(\"Enhancement\")));\n+            issue.setProperty(\"fixVersions\", JSON.of(\"8u341\"));\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, \"Another line\", issue.id() + \": Fix that issue\", \"Duke\", authorEmailAddress);\n+            localRepo.push(editHash, repo.url(), \"master\");\n+            localRepo.push(editHash, repo.url(), \"other\");\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ The changeset should be reflected in a comment in the issue and in a new backport\n+            var updatedIssue = issueProject.issue(issue.id()).orElseThrow();\n+            var backportIssue = updatedIssue.links().get(0).issue().orElseThrow();\n+\n+            var comments = updatedIssue.comments();\n+            assertEquals(1, comments.size());\n+            var comment = comments.get(0);\n+            assertTrue(comment.body().contains(editHash.toString()));\n+\n+            var backportComments = backportIssue.comments();\n+            assertEquals(1, backportComments.size());\n+            var backportComment = backportComments.get(0);\n+            assertTrue(backportComment.body().contains(editHash.toString()));\n+\n+            \/\/ As well as a fixVersion and a resolved in build\n+            assertEquals(Set.of(\"8u341\"), fixVersions(updatedIssue));\n+            assertEquals(\"team\", updatedIssue.properties().get(RESOLVED_IN_BUILD).asString());\n+            assertEquals(Set.of(\"foo8u341\"), fixVersions(backportIssue));\n+            assertEquals(\"team\", backportIssue.properties().get(RESOLVED_IN_BUILD).asString());\n+\n+            \/\/ The issue should be assigned and resolved\n+            assertEquals(RESOLVED, updatedIssue.state());\n+            assertEquals(List.of(issueProject.issueTracker().currentUser()), updatedIssue.assignees());\n+            assertEquals(RESOLVED, backportIssue.state());\n+            assertEquals(List.of(issueProject.issueTracker().currentUser()), backportIssue.assignees());\n+\n+            \/\/ Tag it\n+            localRepo.tag(editHash, \"jdk8u341-b01\", \"Second tag\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(new Branch(repo.url().toString()), \"--tags\", false);\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ The notifier requires prefix to be matched, but the default tag prefix of \"jdk\"\n+            \/\/ can't be overridden, so fixVersion \"8u341\" does still match tag \"jdk8u341-b01\".\n+            updatedIssue = issueProject.issue(issue.id()).orElseThrow();\n+            backportIssue = issueProject.issue(backportIssue.id()).orElseThrow();\n+            assertEquals(\"b01\", updatedIssue.properties().get(RESOLVED_IN_BUILD).asString());\n+            \/\/ But not in the update backport\n+            assertEquals(\"team\", backportIssue.properties().get(RESOLVED_IN_BUILD).asString());\n+\n+            \/\/ Tag it with a properly formatted tag for the foo version\n+            localRepo.tag(editHash, \"foo8u341-b02\", \"Second foo tag\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(new Branch(repo.url().toString()), \"--tags\", false);\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ The build should now be updated\n+            updatedIssue = issueProject.issue(issue.id()).orElseThrow();\n+            backportIssue = issueProject.issue(backportIssue.id()).orElseThrow();\n+            assertEquals(\"b02\", backportIssue.properties().get(RESOLVED_IN_BUILD).asString());\n+            \/\/ And the main issue should stay the same\n+            assertEquals(\"b01\", updatedIssue.properties().get(RESOLVED_IN_BUILD).asString());\n+        }\n+    }\n+\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifierTests.java","additions":96,"deletions":1,"binary":false,"changes":97,"status":"modified"},{"patch":"@@ -58,0 +58,1 @@\n+     * foo8u341-b17     -> foo8u341     foo8u341  -b           17\n@@ -66,0 +67,1 @@\n+    private final static String legacyOpenJDKProjectVersionPattern = \"(([a-z]+[0-9]{1,2}(u[0-9]{1,3}(?:-[a-z0-9]+)?)?))\";\n@@ -70,1 +72,2 @@\n-                                                             Pattern.compile(legacyOpenJFXVersionPattern + legacyBuildPattern));\n+                                                             Pattern.compile(legacyOpenJFXVersionPattern + legacyBuildPattern),\n+                                                             Pattern.compile(legacyOpenJDKProjectVersionPattern + legacyBuildPattern));\n@@ -109,0 +112,10 @@\n+    \/**\n+     * The complete prefix, which is everything except the build number and any\n+     * delimiter before it (e.g. jdk8u20, shenandoah8u332, jdk8u333-foo)\n+     *\n+     * @return\n+     *\/\n+    public String prefix() {\n+        return prefix;\n+    }\n+\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/openjdk\/OpenJDKTag.java","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -154,0 +154,8 @@\n+\n+    @Test\n+    void parse8uPrefixVersion() {\n+        var tag = new Tag(\"shenandoah8u332-b01\");\n+        var jdkTag = OpenJDKTag.create(tag).orElseThrow();\n+        assertEquals(\"shenandoah8u332\", jdkTag.version());\n+        assertEquals(1, jdkTag.buildNum().orElseThrow());\n+    }\n","filename":"vcs\/src\/test\/java\/org\/openjdk\/skara\/vcs\/openjdk\/OpenJDKTagTests.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"}]}