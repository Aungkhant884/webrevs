{"files":[{"patch":"@@ -35,0 +35,1 @@\n+import java.time.ZonedDateTime;\n@@ -556,0 +557,10 @@\n+        if (labels.stream().anyMatch(label -> workItem.bot.twentyFourHoursLabels().contains(label))) {\n+            var rfrAt = pr.labelAddedAt(\"rfr\");\n+            if (rfrAt.isPresent() && ZonedDateTime.now().minusHours(24).isBefore(rfrAt.get())) {\n+                message.append(\"\\n\\n\");\n+                message.append(\":earth_americas: Applicable reviewers for one or more changes in this pull request are spread across \");\n+                message.append(\"multiple different time zones. Please consider waiting with integrating this pull request until it has \");\n+                message.append(\"been out for review for at least 24 hours to give all reviewers a chance to review the pull request.\");\n+            }\n+        }\n+\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+    private final Set<String> twentyFourHoursLabels;\n@@ -65,1 +66,2 @@\n-                   Set<String> twoReviewersLabels, Map<String, Pattern> readyComments, IssueProject issueProject,\n+                   Set<String> twoReviewersLabels, Set<String> twentyFourHoursLabels,\n+                   Map<String, Pattern> readyComments, IssueProject issueProject,\n@@ -77,0 +79,1 @@\n+        this.twentyFourHoursLabels = twentyFourHoursLabels;\n@@ -181,0 +184,4 @@\n+    Set<String> twentyFourHoursLabels() {\n+        return twentyFourHoursLabels;\n+    }\n+\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBot.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+    private Set<String> twentyFourHoursLabels = Set.of();\n@@ -97,0 +98,5 @@\n+    public PullRequestBotBuilder twentyFourHoursLabels(Set<String> twentyFourHoursLabels) {\n+        this.twentyFourHoursLabels = twentyFourHoursLabels;\n+        return this;\n+    }\n+\n@@ -149,4 +155,4 @@\n-                                  blockingCheckLabels, readyLabels, twoReviewersLabels, readyComments, issueProject,\n-                                  ignoreStaleReviews, allowedIssueTypes, allowedTargetBranches,\n-                                  seedStorage, confOverrideRepo, confOverrideName, confOverrideRef,\n-                                  censusLink);\n+                                  blockingCheckLabels, readyLabels, twoReviewersLabels, twentyFourHoursLabels,\n+                                  readyComments, issueProject, ignoreStaleReviews, allowedIssueTypes,\n+                                  allowedTargetBranches, seedStorage, confOverrideRepo, confOverrideName,\n+                                  confOverrideRef, censusLink);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBotBuilder.java","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -413,0 +413,55 @@\n+\n+    @Test\n+    void twentyFourHoursLabel(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var integrator = credentials.getHostedRepository();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                                           .addReviewer(integrator.forge().currentUser().id())\n+                                           .addCommitter(author.forge().currentUser().id());\n+            var labelConfiguration = LabelConfigurationJson.builder()\n+                                                       .addMatchers(\"1\", List.of(Pattern.compile(\"cpp$\")))\n+                                                       .addMatchers(\"2\", List.of(Pattern.compile(\"hpp$\")))\n+                                                       .addGroup(\"group\", List.of(\"1\", \"2\"))\n+                                                       .addExtra(\"extra\")\n+                                                       .build();\n+            var prBot = PullRequestBot.newBuilder()\n+                                      .repo(integrator)\n+                                      .censusRepo(censusBuilder.build())\n+                                      .twentyFourHoursLabels(Set.of(\"1\"))\n+                                      .labelConfiguration(labelConfiguration)\n+                                      .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"123: This is a pull request\");\n+\n+            \/\/ Add a label with 24h hint\n+            pr.addComment(\"\/label add 1\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+\n+            \/\/ The bot should reply with a success message\n+            assertLastCommentContains(pr,\"The `1` label was successfully added.\");\n+\n+            \/\/ Review the PR\n+            var prAsReviewer = integrator.pullRequest(pr.id());\n+            prAsReviewer.addReview(Review.Verdict.APPROVED, \"Looks good!\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+\n+            \/\/ The bot should reply with a integration message\n+            assertLastCommentContains(pr,\"This change now passes all *automated* pre-integration checks\");\n+            assertLastCommentContains(pr,\":earth_americas: Applicable reviewers for one or more changes \");\n+            assertLastCommentContains(pr,\"in this pull request are spread across multiple different time zones.\");\n+            assertLastCommentContains(pr,\"been out for review for at least 24 hours\");\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/LabelTests.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -288,0 +288,5 @@\n+\n+    @Override\n+    public Optional<ZonedDateTime> labelAddedAt(String label) {\n+        return null;\n+    }\n","filename":"bots\/tester\/src\/test\/java\/org\/openjdk\/skara\/bots\/tester\/InMemoryPullRequest.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.time.ZonedDateTime;\n@@ -144,0 +145,2 @@\n+\n+    Optional<ZonedDateTime> labelAddedAt(String label);\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/PullRequest.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -644,0 +644,13 @@\n+\n+    @Override\n+    public Optional<ZonedDateTime> labelAddedAt(String label) {\n+        return request.get(\"issues\/\" + json.get(\"number\").toString() + \"\/timeline\")\n+                      .execute()\n+                      .stream()\n+                      .map(JSONValue::asObject)\n+                      .filter(obj -> obj.contains(\"event\"))\n+                      .filter(obj -> obj.get(\"event\").asString().equals(\"labeled\"))\n+                      .filter(obj -> obj.get(\"label\").get(\"name\").asString().equals(label))\n+                      .map(o -> ZonedDateTime.parse(o.get(\"created_at\").asString()))\n+                      .findFirst();\n+    }\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubPullRequest.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -721,0 +721,13 @@\n+\n+    @Override\n+    public Optional<ZonedDateTime> labelAddedAt(String label) {\n+        return request.get(\"resource_label_events\")\n+                      .execute()\n+                      .stream()\n+                      .map(JSONValue::asObject)\n+                      .filter(obj -> obj.contains(\"action\"))\n+                      .filter(obj -> obj.get(\"action\").asString().equals(\"add\"))\n+                      .filter(obj -> obj.get(\"label\").get(\"name\").asString().equals(label))\n+                      .map(o -> ZonedDateTime.parse(o.get(\"created_at\").asString()))\n+                      .findFirst();\n+    }\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabMergeRequest.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-    final Set<String> labels = new HashSet<>();\n+    final Map<String, ZonedDateTime> labels = new HashMap<>();\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/IssueData.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -154,2 +154,3 @@\n-        data.labels.add(label);\n-        data.lastUpdate = ZonedDateTime.now();\n+        var now = ZonedDateTime.now();\n+        data.labels.put(label, now);\n+        data.lastUpdate = now;\n@@ -166,1 +167,1 @@\n-        return new ArrayList<>(data.labels);\n+        return new ArrayList<>(data.labels.keySet());\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestIssue.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -225,0 +225,5 @@\n+\n+    @Override\n+    public Optional<ZonedDateTime> labelAddedAt(String label) {\n+        return Optional.ofNullable(data.labels.get(label));\n+    }\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestPullRequest.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}