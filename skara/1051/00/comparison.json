{"files":[{"patch":"@@ -90,2 +90,2 @@\n-        var targetRepo = forge.repository(repoName);\n-        if (targetRepo.isEmpty()) {\n+        var potentialTargetRepo = forge.repository(repoName);\n+        if (potentialTargetRepo.isEmpty()) {\n@@ -95,0 +95,1 @@\n+        var targetRepo = potentialTargetRepo.get();\n@@ -96,4 +97,4 @@\n-        var branchName = parts.length == 2 ? parts[1] : \"master\";\n-        var targetBranches = targetRepo.get().branches();\n-        if (targetBranches.stream().noneMatch(b -> b.name().equals(branchName))) {\n-            reply.println(\"@\" + username + \" the target branch `\" + branchName + \"` does not exist\");\n+        var targetBranchName = parts.length == 2 ? parts[1] : \"master\";\n+        var targetBranches = targetRepo.branches();\n+        if (targetBranches.stream().noneMatch(b -> b.name().equals(targetBranchName))) {\n+            reply.println(\"@\" + username + \" the target branch `\" + targetBranchName + \"` does not exist\");\n@@ -102,0 +103,1 @@\n+        var targetBranch = new Branch(targetBranchName);\n@@ -105,1 +107,1 @@\n-            var fork = bot.writeableForkOf(targetRepo.get());\n+            var fork = bot.writeableForkOf(targetRepo);\n@@ -113,1 +115,1 @@\n-            localRepo.checkout(new Branch(branchName));\n+            localRepo.checkout(targetBranch);\n@@ -121,1 +123,1 @@\n-                          \"[\" + repoName + \"](\" + targetRepo.get().webUrl() + \"] due to conflicts in the following files:\");\n+                          \"[\" + repoName + \"](\" + targetRepo.webUrl() + \"] due to conflicts in the following files:\");\n@@ -132,1 +134,1 @@\n-                lines.add(\"To manually resolve these conflicts run the following commands in your personal fork of [\" + repoName + \"](\" + targetRepo.get().webUrl() + \"):\");\n+                lines.add(\"To manually resolve these conflicts run the following commands in your personal fork of [\" + repoName + \"](\" + targetRepo.webUrl() + \"):\");\n@@ -143,1 +145,1 @@\n-                lines.add(\"Once you have resolved the conflicts as explained above continue with creating a pull request towards the [\" + repoName + \"](\" + targetRepo.get().webUrl() + \") with the title \\\"Backport \" + hash.hex() + \"\\\".\");\n+                lines.add(\"Once you have resolved the conflicts as explained above continue with creating a pull request towards the [\" + repoName + \"](\" + targetRepo.webUrl() + \") with the title \\\"Backport \" + hash.hex() + \"\\\".\");\n@@ -152,0 +154,6 @@\n+\n+            if (!fork.canPush(command.user())) {\n+                fork.addCollaborator(command.user(), true);\n+            }\n+            fork.restrictPushAccess(backportBranch, List.of(command.user()));\n+\n@@ -154,7 +162,7 @@\n-            var lines = new ArrayList<String>();\n-            lines.add(\"Hi all,\");\n-            lines.add(\"\");\n-            lines.add(\"this is an _automatically_ generated pull request containing a backport of \" +\n-                      \"[\" + hash.abbreviate() + \"](\" + commit.url() + \") as requested by \" +\n-                      \"@\" + username);\n-            lines.add(\"\");\n+            var body = new ArrayList<String>();\n+            body.add(\"> Hi all,\");\n+            body.add(\"> \");\n+            body.add(\"> this pull request contains a backport of commit \" +\n+                      \"[\" + hash.abbreviate() + \"](\" + commit.url() + \") from the \" +\n+                      \"[\" + currentRepoName + \"](\" + bot.repo().webUrl() + \") repository.\");\n+            body.add(\">\");\n@@ -187,12 +195,34 @@\n-            lines.add(info);\n-            lines.add(\"\");\n-            lines.add(\"Thanks,\");\n-            lines.add(\"J. Duke\");\n-\n-            var prFromFork = fork.createPullRequest(targetRepo.get(),\n-                                                    \"master\",\n-                                                    backportBranch.name(),\n-                                                    \"Backport \" + hash.hex(),\n-                                                    lines);\n-            var prFromTarget = targetRepo.get().pullRequest(prFromFork.id());\n-            reply.println(\"@\" + command.user().username() + \" backport pull request [#\" + prFromTarget.id() + \"](\" + prFromFork.webUrl() + \") targeting repository [\" + targetRepo.get().name() + \"](\" + targetRepo.get().webUrl() + \") created successfully.\");\n+            body.add(info);\n+            body.add(\"> \");\n+            body.add(\"> Thanks!\");\n+\n+            var createPrUrl = fork.createPullRequestUrl(targetRepo, targetBranch.name(), backportBranch.name());\n+            var targetBranchWebUrl = targetRepo.webUrl(targetBranch);\n+            var backportBranchWebUrl = fork.webUrl(backportBranch);\n+            var backportWebUrl = fork.webUrl(backportHash);\n+            reply.println(\"@\" + command.user().username() + \" the [backport](\" + backportWebUrl + \")\" +\n+                          \" was successfully created on the branch [\" + backportBranch.name() + \"](\" +\n+                          backportBranchWebUrl + \") in my [personal fork](\" + fork.webUrl() + \") of [\" +\n+                          targetRepo.name() + \"](\" + targetRepo.webUrl() + \"). To create a pull request \" +\n+                          \"with this backport targeting [\" + targetRepo.name() + \":\" + targetBranch.name() + \"](\" +\n+                          targetBranchWebUrl + \"), just click the following link:\\n\" +\n+                          \"\\n\" +\n+                          \"[:arrow_right: ***Create pull request***](\" + createPrUrl + \")\\n\" +\n+                          \"\\n\" +\n+                          \"The title of the pull request is automatically filled in correctly and below you \" +\n+                          \"find a suggestion for the pull request body:\\n\" +\n+                          \"\\n\" +\n+                          String.join(\"\\n\", body) +\n+                          \"\\n\" +\n+                          \"If you need to update the [source branch](\" + backportBranchWebUrl + \") of the pull \" +\n+                          \"then run the following commands in a local clone of your personal fork of \" +\n+                          \"[\" + targetRepo.name() + \"](\" + targetRepo.webUrl() + \"):\\n\" +\n+                          \"\\n\" +\n+                          \"```\\n\" +\n+                          \"$ git fetch \" + fork.webUrl() + \" \" + backportBranch.name() + \":\" + backportBranch.name() + \"\\n\" +\n+                          \"$ git checkout \" + backportBranch.name() + \"\\n\" +\n+                          \"# make changes\\n\" +\n+                          \"$ git add paths\/to\/changed\/files\\n\" +\n+                          \"$ git commit --message 'Describe additional changes made'\\n\" +\n+                          \"$ git push\\n\" +\n+                          \"```\");\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/BackportCommand.java","additions":60,"deletions":30,"binary":false,"changes":90,"status":"modified"},{"patch":"@@ -70,28 +70,3 @@\n-            assertTrue(botReply.body().contains(\"created successfully.\"));\n-\n-            var pulls = author.pullRequests();\n-            assertEquals(1, pulls.size());\n-            var pr = pulls.get(0);\n-            assertEquals(\"Backport \" + editHash.hex(), pr.title());\n-            assertEquals(\"master\", pr.targetRef());\n-\n-            var prDiff = pr.diff();\n-            var commitDiff = localRepo.diff(masterHash, editHash);\n-            assertEquals(1, commitDiff.patches().size());\n-            assertEquals(1, prDiff.patches().size());\n-\n-            var commitPatch = commitDiff.patches().get(0);\n-            var prPatch = commitDiff.patches().get(0);\n-            assertEquals(commitPatch.status(), prPatch.status());\n-            assertEquals(commitPatch.target().path(), prPatch.target().path());\n-            assertEquals(commitPatch.source().path(), prPatch.source().path());\n-\n-            var commitHunks = commitPatch.asTextualPatch().hunks();\n-            var prHunks = prPatch.asTextualPatch().hunks();\n-            assertEquals(commitHunks.size(), prHunks.size());\n-            for (var i = 0; i < commitHunks.size(); i++) {\n-                var commitHunk = commitHunks.get(i);\n-                var prHunk = prHunks.get(i);\n-                assertEquals(commitHunk.target().lines(), prHunk.target().lines());\n-                assertEquals(commitHunk.source().lines(), prHunk.source().lines());\n-            }\n+            assertTrue(botReply.body().contains(\"was successfully created\"));\n+            assertTrue(botReply.body().contains(\"To create a pull request\"));\n+            assertTrue(botReply.body().contains(\"with this backport\"));\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/BackportCommitCommandTests.java","additions":3,"deletions":28,"binary":false,"changes":31,"status":"modified"}]}