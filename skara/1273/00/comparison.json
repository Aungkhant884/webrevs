{"files":[{"patch":"@@ -26,0 +26,1 @@\n+import org.openjdk.skara.forge.Forge;\n@@ -175,1 +176,4 @@\n-        var gitForge = ForgeUtils.from(upstreamWebURI, credentials);\n+        \/\/ Use Forge::from directly instead of ForgeUtils::from. ForgeUtils would\n+        \/\/ try to update \"forge.name\" in the local repository based on this forge,\n+        \/\/ and it's unlikely they are related.\n+        var gitForge = Forge.from(upstreamWebURI, credentials);\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/GitFork.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -26,0 +26,2 @@\n+import org.openjdk.skara.forge.HostedRepository;\n+import org.openjdk.skara.host.Credential;\n@@ -161,7 +163,3 @@\n-                    if (arguments.contains(\"force\")) {\n-                        logVerbose(\"Overriding target 'origin' with \" + targetFromOptions + \" due to --force\");\n-                        targetName = targetFromOptions;\n-                        targetURI = targetFromOptionsURI;\n-                    } else {\n-                        die(\"git 'origin' remote and '--to' argument differ. Consider using --force.\");\n-                    }\n+                    logVerbose(\"Overriding target 'origin' with \" + targetFromOptions);\n+                    targetName = targetFromOptions;\n+                    targetURI = targetFromOptionsURI;\n@@ -172,41 +170,8 @@\n-        \/\/ Find pull source as given by the Git Forge as the repository's parent\n-        var forgeWebURI = Remote.toWebURI(targetURI.toString());\n-        URI sourceParentURI;\n-        String sourceParentName;\n-        try {\n-            sourceParentURI = ForgeUtils.from(forgeWebURI)\n-                    .flatMap(f -> f.repository(forgeWebURI.getPath().substring(1)))\n-                    .flatMap(r -> r.parent())\n-                    .map(p -> p.webUrl())\n-                    .orElse(null);\n-            sourceParentName = sourceParentURI.toString();\n-            logVerbose(\"Git Forge reports upstream parent is \" + sourceParentURI);\n-        } catch (Throwable e) {\n-            if (arguments.contains(\"debug\")) {\n-                e.printStackTrace();\n-            }\n-            if (!arguments.contains(\"force\")) {\n-                \/\/ Unless we force a different recipient repo, we are not allowed to have an error here\n-                die(\"cannot get parent repo from Git Forge provider for \" + forgeWebURI);\n-            }\n-            sourceParentURI = null;\n-            sourceParentName = null;\n-        }\n-\n-        sourceURI = sourceParentURI;\n-        sourceName = sourceParentName;\n-\n-        \/\/ Find pull source as given by Git's 'upstream' remote\n-        if (remotes.contains(\"upstream\")) {\n-            sourceName = \"upstream\";\n-            var sourceUpstreamURI = Remote.toURI(repo.pullPath(\"upstream\"));\n-            if (!equalsCanonicalized(sourceUpstreamURI, sourceParentURI)) {\n-                if (arguments.contains(\"force\")) {\n-                    sourceURI = sourceUpstreamURI;\n-                    logVerbose(\"Replacing Git Forge parent with \" + sourceUpstreamURI + \" from 'upstream' remote\");\n-                } else {\n-                    System.err.println(\"error: git 'upstream' remote and the parent fork given by the Git Forge differ\");\n-                    System.err.println(\"       Git 'upstream' remote is \" + sourceUpstreamURI);\n-                    System.err.println(\"       Git Forge parent is \" + sourceParentURI);\n-                    System.err.println(\"       Remove incorrect 'upstream' remote with 'git remote remove upstream'\");\n-                    System.err.println(\"       or run with --force to use 'upstream' remote anyway\");\n+        \/\/ Find pull source as given by command line options\n+        if (sourceFromOptions != null) {\n+            if (!sameHost(sourceFromOptionsURI, targetURI)) {\n+                if (!arguments.contains(\"force\")) {\n+                    System.err.println(\"error: The from and to remote repositories are hosted on different forges\");\n+                    System.err.println(\"       The from remote is \" + sourceFromOptionsURI);\n+                    System.err.println(\"       The to remote is \" + targetURI);\n+                    System.err.println(\"       Rerun with --force if this was intended\");\n@@ -216,0 +181,3 @@\n+            logVerbose(\"Replacing source repo with \" + sourceFromOptionsURI + \" from command line options\");\n+            sourceName = sourceFromOptions;\n+            sourceURI = sourceFromOptionsURI;\n@@ -217,17 +185,15 @@\n-            \/\/ Repo is badly configured, fix it unless instructed not to\n-            if (!arguments.contains(\"no-remote\")) {\n-                System.out.println(\"Setting 'upstream' remote to \" + sourceParentURI);\n-                if (!isDryRun) {\n-                    repo.addRemote(\"upstream\", sourceParentURI.toString());\n-                }\n-            }\n-        }\n-\n-        \/\/ Find pull source as given by command line options\n-        if (sourceFromOptions != null) {\n-            if (!equalsCanonicalized(sourceFromOptionsURI, sourceURI)) {\n-                if (arguments.contains(\"force\")) {\n-                    \/\/ Use the value from the option instead\n-                    sourceName = sourceFromOptions;\n-                    sourceURI = sourceFromOptionsURI;\n-                    logVerbose(\"Replacing source repo with \" + sourceFromOptionsURI + \" from command line options\");\n+            \/\/ This may return null, if so, we fall back on just comparing hostnames further down\n+            var remoteForkParentURI = findRemoteForkParent();\n+\n+            if (remotes.contains(\"upstream\")) {\n+                \/\/ Find pull source as given by Git's 'upstream' remote\n+                var sourceUpstreamURI = Remote.toURI(repo.pullPath(\"upstream\"));\n+                if (remoteForkParentURI != null) {\n+                    if (!equalsCanonicalized(sourceUpstreamURI, remoteForkParentURI)) {\n+                        System.err.println(\"error: git 'upstream' remote and the parent fork given by the Git Forge differ\");\n+                        System.err.println(\"       Git 'upstream' remote is \" + sourceUpstreamURI);\n+                        System.err.println(\"       Git Forge parent is \" + remoteForkParentURI);\n+                        System.err.println(\"       Remove incorrect 'upstream' remote with 'git remote remove upstream'\");\n+                        System.err.println(\"       or run with --force to use 'upstream' remote anyway\");\n+                        System.exit(1);\n+                    }\n@@ -235,1 +201,9 @@\n-                    die(\"Git Forge parent and git sync '--from' option do not match\");\n+                    if (!sameHost(sourceUpstreamURI, targetURI)) {\n+                        if (!arguments.contains(\"force\")) {\n+                            System.err.println(\"error: The from and to remote repositories are hosted on different forges\");\n+                            System.err.println(\"       The from remote is \" + sourceUpstreamURI);\n+                            System.err.println(\"       The to remote is \" + targetURI);\n+                            System.err.println(\"       Rerun with --force if this was intended\");\n+                            System.exit(1);\n+                        }\n+                    }\n@@ -237,0 +211,12 @@\n+                sourceName = \"upstream\";\n+                sourceURI = sourceUpstreamURI;\n+            } else if (remoteForkParentURI != null) {\n+                \/\/ Repo is badly configured, fix it unless instructed not to\n+                if (!arguments.contains(\"no-remote\")) {\n+                    System.out.println(\"Setting 'upstream' remote to \" + remoteForkParentURI);\n+                    if (!isDryRun) {\n+                        repo.addRemote(\"upstream\", remoteForkParentURI.toString());\n+                    }\n+                }\n+                sourceName = \"upstream\";\n+                sourceURI = remoteForkParentURI;\n@@ -250,0 +236,1 @@\n+        setupSourceCredentials();\n@@ -252,1 +239,30 @@\n-    private void setupCredentials() throws IOException {\n+    private URI findRemoteForkParent() throws IOException {\n+        var targetScheme = targetURI.getScheme();\n+        if (!arguments.contains(\"force\") && targetScheme.equals(\"https\") || targetScheme.equals(\"http\")) {\n+            var credentials = setupTargetCredentials();\n+\n+            \/\/ Find pull source as given by the Git Forge as the repository's parent\n+            var forgeWebURI = Remote.toWebURI(targetURI.toString());\n+            try {\n+                var sourceParentURI = ForgeUtils.from(forgeWebURI, credentials)\n+                        .flatMap(f -> f.repository(forgeWebURI.getPath().substring(1)))\n+                        .flatMap(HostedRepository::parent)\n+                        .map(HostedRepository::webUrl);\n+\n+                if (sourceParentURI.isPresent()) {\n+                    logVerbose(\"Git Forge reports upstream parent is \" + sourceParentURI.get());\n+                    return sourceParentURI.get();\n+                }\n+            } catch (UncheckedIOException e) {\n+                System.err.println(\"Failed to contact target forge: \" + targetURI);\n+                var message = e.getCause().getMessage();\n+                if (message != null) {\n+                    System.err.println(message);\n+                }\n+                System.err.println(\"Skipping remote fork parent check\");\n+            }\n+        }\n+        return null;\n+    }\n+\n+    private void setupSourceCredentials() throws IOException {\n@@ -266,0 +282,1 @@\n+    }\n@@ -267,0 +284,1 @@\n+    private Credential setupTargetCredentials() throws IOException {\n@@ -288,0 +306,1 @@\n+            return new Credential(credentials.username(), credentials.password());\n@@ -289,0 +308,1 @@\n+        return null;\n@@ -312,3 +332,0 @@\n-        \/\/ Assure we have proper credentials for pull and push operations\n-        setupCredentials();\n-\n@@ -433,0 +450,5 @@\n+    private static boolean sameHost(URI sourceUpstreamURI, URI targetURI) {\n+        return sourceUpstreamURI.getHost().equals(targetURI.getHost());\n+    }\n+\n+\n@@ -513,0 +535,1 @@\n+\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/GitSync.java","additions":93,"deletions":70,"binary":false,"changes":163,"status":"modified"}]}