{"files":[{"patch":"@@ -35,0 +35,8 @@\n+\n+    \/**\n+     * Gets a HostedRepository on this Forge. This method should verify that the\n+     * repository exists.\n+     * @param name Name of repository to get\n+     * @return Optional containing the repository, or empty if the repository\n+     *         does not exist on the Forge.\n+     *\/\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/Forge.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-import java.nio.file.Path;\n@@ -242,1 +241,1 @@\n-    JSONObject getProjectInfo(String name) {\n+    Optional<JSONObject> getProjectInfo(String name) {\n@@ -244,2 +243,6 @@\n-                             .execute();\n-        return project.asObject();\n+                .onError(r -> r.statusCode() == 404 ? Optional.of(JSON.object().put(\"NOT_FOUND\", true)) : Optional.empty())\n+                .execute();\n+        if (project.contains(\"NOT_FOUND\")) {\n+            return Optional.empty();\n+        }\n+        return Optional.of(project.asObject());\n@@ -271,5 +274,2 @@\n-        try {\n-            return Optional.of(new GitHubRepository(this, name));\n-        } catch (Throwable t) {\n-            return Optional.empty();\n-        }\n+        return getProjectInfo(name)\n+                .map(jsonObject -> new GitHubRepository(this, name, jsonObject));\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubHost.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -49,0 +49,5 @@\n+    GitHubRepository(GitHubHost gitHubHost, String repository, JSONValue json) {\n+        this(gitHubHost, repository);\n+        cachedJSON = json;\n+    }\n+\n@@ -72,1 +77,0 @@\n-        this.cachedJSON = null;\n@@ -79,1 +83,2 @@\n-            cachedJSON = gitHubHost.getProjectInfo(repository);\n+            cachedJSON = gitHubHost.getProjectInfo(repository)\n+                    .orElseThrow(() -> new RuntimeException(\"Repository not found: \" + repository));\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubRepository.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -141,5 +141,2 @@\n-        try {\n-            return Optional.of(new GitLabRepository(this, name));\n-        } catch (Throwable t) {\n-            return Optional.empty();\n-        }\n+        return getProjectInfo(name)\n+                .map(jsonObject -> new GitLabRepository(this, jsonObject));\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabHost.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"}]}