{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+import org.openjdk.skara.forge.HostedRepository;\n@@ -66,1 +67,2 @@\n-    public void handle(PullRequestBot bot, PullRequest pr, CensusInstance censusInstance, Path scratchPath, CommandInvocation command, List<Comment> allComments, PrintWriter reply, List<String> labelsToAdd, List<String> labelsToRemove) {\n+    public void handle(PullRequestBot bot, PullRequest pr, CensusInstance censusInstance, Path scratchPath, CommandInvocation command,\n+                       List<Comment> allComments, PrintWriter reply, List<String> labelsToAdd, List<String> labelsToRemove) {\n@@ -102,22 +104,3 @@\n-            \/\/ Add label\n-            var forge = bot.repo().forge();\n-            var repoNameArg = parts[0].replace(\"http:\/\/\", \"\")\n-                    .replace(\"https:\/\/\", \"\")\n-                    .replace(forge.hostname() + \"\/\", \"\");\n-            \/\/ If the arg is given with a namespace prefix, look for an exact match,\n-            \/\/ otherwise cut off the namespace prefix before comparing with the forks\n-            \/\/ config.\n-            var includesNamespace = repoNameArg.contains(\"\/\");\n-            var repoNameOptional = bot.forks().keySet().stream()\n-                    .filter(s -> includesNamespace\n-                            ? s.equals(repoNameArg)\n-                            : s.substring(s.indexOf(\"\/\") + 1).equals(repoNameArg))\n-                    .findAny();\n-            String targetRepoName = repoNameOptional.orElse(\"<not found>\");\n-\n-            var potentialTargetRepo = repoNameOptional.flatMap(forge::repository);\n-            if (potentialTargetRepo.isEmpty()) {\n-                reply.println(\"The target repository `\" + repoNameArg + \"` is not a valid target for backports. \");\n-                reply.print(\"List of valid target repositories: \");\n-                reply.println(String.join(\", \", bot.forks().keySet().stream().sorted().toList()) + \".\");\n-                reply.println(\"Supplying the organization\/group prefix is optional.\");\n+            \/\/ Get target repo\n+            var targetRepo = getTargetRepo(bot, parts, reply);\n+            if (targetRepo == null) {\n@@ -126,1 +109,1 @@\n-            var targetRepo = potentialTargetRepo.get();\n+            var targetRepoName = targetRepo.name();\n@@ -128,4 +111,3 @@\n-            var targetBranchName = parts.length == 2 ? parts[1] : \"master\";\n-            var targetBranches = targetRepo.branches();\n-            if (targetBranches.stream().noneMatch(b -> b.name().equals(targetBranchName))) {\n-                reply.println(\"The target branch `\" + targetBranchName + \"` does not exist\");\n+            \/\/ Get target branch\n+            var targetBranch = getTargetBranch(parts, targetRepo, reply);\n+            if (targetBranch == null) {\n@@ -134,0 +116,3 @@\n+            var targetBranchName = targetBranch.name();\n+\n+            \/\/ Add label\n@@ -140,1 +125,2 @@\n-                reply.println(\" Further instructions will be provided at that time.\");\n+                reply.println(\"Further instructions will be provided at that time.\");\n+                reply.println(\"<!-- \" + command.user().username() + \" -->\");\n@@ -149,20 +135,1 @@\n-    @Override\n-    public void handle(PullRequestBot bot, HostedCommit commit, LimitedCensusInstance censusInstance,\n-            Path scratchPath, CommandInvocation command, List<Comment> allComments, PrintWriter reply) {\n-        if (censusInstance.contributor(command.user()).isEmpty()) {\n-            reply.println(USER_INVALID_WARNING);\n-            return;\n-        }\n-\n-        var args = command.args();\n-        if (args.isBlank()) {\n-            showHelp(reply);\n-            return;\n-        }\n-\n-        var parts = args.split(\" \");\n-        if (parts.length > 2) {\n-            showHelp(reply);\n-            return;\n-        }\n-\n+    private HostedRepository getTargetRepo(PullRequestBot bot, String[] parts, PrintWriter reply) {\n@@ -171,2 +138,2 @@\n-                               .replace(\"https:\/\/\", \"\")\n-                               .replace(forge.hostname() + \"\/\", \"\");\n+                .replace(\"https:\/\/\", \"\")\n+                .replace(forge.hostname() + \"\/\", \"\");\n@@ -182,1 +149,0 @@\n-        String repoName = repoNameOptional.orElse(\"<not found>\");\n@@ -190,1 +156,1 @@\n-            return;\n+            return null;\n@@ -192,2 +158,2 @@\n-        var targetRepo = potentialTargetRepo.get();\n-        var fork = bot.forks().get(targetRepo.name());\n+        return potentialTargetRepo.get();\n+    }\n@@ -195,0 +161,1 @@\n+    private Branch getTargetBranch(String[] parts, HostedRepository targetRepo, PrintWriter reply) {\n@@ -199,0 +166,36 @@\n+            return null;\n+        }\n+        return new Branch(targetBranchName);\n+    }\n+\n+    @Override\n+    public void handle(PullRequestBot bot, HostedCommit commit, LimitedCensusInstance censusInstance,\n+            Path scratchPath, CommandInvocation command, List<Comment> allComments, PrintWriter reply) {\n+        if (censusInstance.contributor(command.user()).isEmpty()) {\n+            reply.println(USER_INVALID_WARNING);\n+            return;\n+        }\n+\n+        var args = command.args();\n+        if (args.isBlank()) {\n+            showHelp(reply);\n+            return;\n+        }\n+\n+        var parts = args.split(\" \");\n+        if (parts.length > 2) {\n+            showHelp(reply);\n+            return;\n+        }\n+\n+        \/\/ Get target repo\n+        var targetRepo = getTargetRepo(bot, parts, reply);\n+        if (targetRepo == null) {\n+            return;\n+        }\n+        var targetRepoName = targetRepo.name();\n+        var fork = bot.forks().get(targetRepo.name());\n+\n+        \/\/ Get target branch\n+        var targetBranch = getTargetBranch(parts, targetRepo, reply);\n+        if (targetBranch == null) {\n@@ -201,1 +204,1 @@\n-        var targetBranch = new Branch(targetBranchName);\n+        var targetBranchName = targetBranch.name();\n@@ -208,1 +211,1 @@\n-                    .filter(comment -> comment.body().contains(\"Backport for repo `\" + repoName + \"` on branch `\" + targetBranchName + \"` was successfully enabled.\"))\n+                    .filter(comment -> comment.body().contains(\"Backport for repo `\" + targetRepoName + \"` on branch `\" + targetBranchName + \"` was successfully enabled\"))\n@@ -212,1 +215,1 @@\n-                String userName = lines[1].split(\" \")[0].substring(1);\n+                String userName = lines[lines.length - 1].split(\" \")[1];\n@@ -220,1 +223,1 @@\n-                    reply.println(\"Error: can not find the real user of Backport for repo `\" + repoName + \"` on branch `\" + targetBranchName);\n+                    reply.println(\"Error: can not find the real user of Backport for repo `\" + targetRepoName + \"` on branch `\" + targetBranchName);\n@@ -246,1 +249,1 @@\n-                              \"[\" + repoName + \"](\" + targetRepo.webUrl() + \") due to conflicts in the following files:\");\n+                              \"[\" + targetRepoName + \"](\" + targetRepo.webUrl() + \") due to conflicts in the following files:\");\n@@ -258,1 +261,1 @@\n-                            + \"by using the following commands in your personal fork of [\" + repoName + \"](\" + targetRepo.webUrl()\n+                            + \"by using the following commands in your personal fork of [\" + targetRepoName + \"](\" + targetRepo.webUrl()\n@@ -281,1 +284,1 @@\n-                    lines.add(\"Once you have resolved the conflicts as explained above continue with creating a pull request towards the [\" + repoName + \"](\" + targetRepo.webUrl() + \") with the title `Backport \" + hash.hex() + \"`.\");\n+                    lines.add(\"Once you have resolved the conflicts as explained above continue with creating a pull request towards the [\" + targetRepoName + \"](\" + targetRepo.webUrl() + \") with the title `Backport \" + hash.hex() + \"`.\");\n@@ -290,1 +293,1 @@\n-                            \"[\" + repoName + \"](\" + targetRepo.webUrl() + \") because the change is already present in the target.\");\n+                            \"[\" + targetRepoName + \"](\" + targetRepo.webUrl() + \") because the change is already present in the target.\");\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/BackportCommand.java","additions":67,"deletions":64,"binary":false,"changes":131,"status":"modified"},{"patch":"@@ -166,2 +166,1 @@\n-            processBackportLabel(pr, allComments);\n-            markIntegratedAndClosed(pr, prepushHash.get(), reply);\n+            markIntegratedAndClosed(pr, prepushHash.get(), reply, allComments);\n@@ -246,2 +245,1 @@\n-                processBackportLabel(pr, allComments);\n-                markIntegratedAndClosed(pr, amendedHash, reply);\n+                markIntegratedAndClosed(pr, amendedHash, reply, allComments);\n@@ -331,1 +329,1 @@\n-    static void processBackportLabel(PullRequest pr, List<Comment> allComments) {\n+    private static void processBackportLabel(PullRequest pr, List<Comment> allComments) {\n@@ -339,1 +337,1 @@\n-                        + \"\\n<!--\\n \/backport \" + repoName + \" \" + branchName + \"\\n-->\" + \"\\n\"\n+                        + \"\\n\/backport \" + repoName + \" \" + branchName + \"\\n\"\n@@ -351,1 +349,2 @@\n-    static void markIntegratedAndClosed(PullRequest pr, Hash hash, PrintWriter reply) {\n+    static void markIntegratedAndClosed(PullRequest pr, Hash hash, PrintWriter reply, List<Comment> allComments) {\n+        processBackportLabel(pr, allComments);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/IntegrateCommand.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -148,2 +148,1 @@\n-        IntegrateCommand.processBackportLabel(pr, allComments);\n-        IntegrateCommand.markIntegratedAndClosed(pr, amendedHash, reply);\n+        IntegrateCommand.markIntegratedAndClosed(pr, amendedHash, reply, allComments);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/SponsorCommand.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,22 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n@@ -55,1 +77,1 @@\n-            assertLastCommentContains(pr, \"Backport for repo `targetRepo` on branch `master` was successfully enabled.\");\n+            assertLastCommentContains(pr, \"Backport for repo `targetRepo` on branch `master` was successfully enabled\");\n@@ -68,1 +90,1 @@\n-            assertLastCommentContains(pr, \"Backport for repo `targetRepo2` on branch `dev` was successfully enabled.\");\n+            assertLastCommentContains(pr, \"Backport for repo `targetRepo2` on branch `dev` was successfully enabled\");\n@@ -80,1 +102,1 @@\n-            assertLastCommentContains(pr, \"Backport for repo `targetRepo` on branch `master` was not enabled, so you can not disable it.\");\n+            assertLastCommentContains(pr, \"Backport for repo `targetRepo` on branch `master` was already disabled.\");\n@@ -86,1 +108,1 @@\n-            assertLastCommentContains(pr, \"Backport for repo `targetRepo` on branch `master` was successfully enabled.\");\n+            assertLastCommentContains(pr, \"Backport for repo `targetRepo` on branch `master` was successfully enabled\");\n@@ -97,0 +119,1 @@\n+            assertLastCommentContains(pr, \"@user1\");\n@@ -99,0 +122,1 @@\n+            assertLastCommentContains(pr, \"@user2\");\n@@ -146,1 +170,1 @@\n-            assertLastCommentContains(pr, \"`\/backport` command can not be used in closed but not integrated PR\");\n+            assertLastCommentContains(pr, \"`\/backport` command can not be used in a closed but not integrated pull request\");\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/BackportPRCommandTests.java","additions":29,"deletions":5,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -122,1 +122,1 @@\n-            PullRequestAsserts.assertLastCommentContains(pr, \"Backport for repo `jdk17u-dev` on branch `master` was successfully enabled.\");\n+            PullRequestAsserts.assertLastCommentContains(pr, \"Backport for repo `jdk17u-dev` on branch `master` was successfully enabled\");\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CommitCommandTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}