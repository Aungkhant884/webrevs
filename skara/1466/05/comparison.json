{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+import org.openjdk.skara.forge.HostedRepository;\n@@ -27,0 +28,1 @@\n+import org.openjdk.skara.host.HostUser;\n@@ -45,0 +47,4 @@\n+    private void showHelpInPR(PrintWriter reply) {\n+        reply.println(\"Usage: `\/backport [disable] <repository> [<branch>]`\");\n+    }\n+\n@@ -55,5 +61,4 @@\n-    @Override\n-    public void handle(PullRequestBot bot, PullRequest pr, CensusInstance censusInstance, Path scratchPath,\n-                CommandInvocation command, List<Comment> allComments, PrintWriter reply) {\n-        reply.println(\"The command `backport` can only be used in a pull request that has been integrated.\");\n-    }\n+    private static final String USER_INVALID_WARNING = \"To use the `\/backport` command, you need to be in the OpenJDK [census](https:\/\/openjdk.org\/census)\"\n+            + \" and your GitHub account needs to be linked with your OpenJDK username\"\n+            + \" ([how to associate your GitHub account with your OpenJDK username]\"\n+            + \"(https:\/\/wiki.openjdk.org\/display\/skara#Skara-AssociatingyourGitHubaccountandyourOpenJDKusername)).\";\n@@ -62,2 +67,2 @@\n-    public void handle(PullRequestBot bot, HostedCommit commit, LimitedCensusInstance censusInstance,\n-            Path scratchPath, CommandInvocation command, List<Comment> allComments, PrintWriter reply) {\n+    public void handle(PullRequestBot bot, PullRequest pr, CensusInstance censusInstance, Path scratchPath, CommandInvocation command,\n+                       List<Comment> allComments, PrintWriter reply, List<String> labelsToAdd, List<String> labelsToRemove) {\n@@ -65,4 +70,6 @@\n-            reply.println(\"To use the `\/backport` command, you need to be in the OpenJDK [census](https:\/\/openjdk.org\/census)\"\n-                    + \" and your GitHub account needs to be linked with your OpenJDK username\"\n-                    + \" ([how to associate your GitHub account with your OpenJDK username]\"\n-                    + \"(https:\/\/wiki.openjdk.org\/display\/skara#Skara-AssociatingyourGitHubaccountandyourOpenJDKusername)).\");\n+            reply.println(USER_INVALID_WARNING);\n+            return;\n+        }\n+\n+        if (pr.isClosed() && !pr.labelNames().contains(\"integrated\")) {\n+            reply.println(\"`\/backport` command can not be used in a closed but not integrated pull request\");\n@@ -74,1 +81,1 @@\n-            showHelp(reply);\n+            showHelpInPR(reply);\n@@ -79,2 +86,3 @@\n-        if (parts.length > 2) {\n-            showHelp(reply);\n+        boolean argIsValid = parts[0].equals(\"disable\") ? parts.length == 2 || parts.length == 3 : parts.length <= 2;\n+        if (!argIsValid) {\n+            showHelpInPR(reply);\n@@ -84,0 +92,45 @@\n+        if (parts[0].equals(\"disable\")) {\n+            \/\/ Remove label\n+            var targetRepoName = parts[1];\n+            var targetBranchName = parts.length == 3 ? parts[2] : \"master\";\n+            var backportLabel = generateBackportLabel(targetRepoName, targetBranchName);\n+            if (pr.labelNames().contains(backportLabel)) {\n+                labelsToRemove.add(backportLabel);\n+                reply.println(\"Backport for repo `\" + targetRepoName + \"` on branch `\" + targetBranchName + \"` was successfully disabled.\");\n+            } else {\n+                reply.println(\"Backport for repo `\" + targetRepoName + \"` on branch `\" + targetBranchName + \"` was already disabled.\");\n+            }\n+        } else {\n+            \/\/ Get target repo\n+            var targetRepo = getTargetRepo(bot, parts, reply);\n+            if (targetRepo == null) {\n+                return;\n+            }\n+            var targetRepoName = targetRepo.name();\n+\n+            \/\/ Get target branch\n+            var targetBranch = getTargetBranch(parts, targetRepo, reply);\n+            if (targetBranch == null) {\n+                return;\n+            }\n+            var targetBranchName = targetBranch.name();\n+\n+            \/\/ Add label\n+            var backportLabel = generateBackportLabel(targetRepoName, targetBranchName);\n+            if (pr.labelNames().contains(backportLabel)) {\n+                reply.println(\"Backport for repo `\" + targetRepoName + \"` on branch `\" + targetBranchName + \"` has already been enabled.\");\n+            } else {\n+                labelsToAdd.add(backportLabel);\n+                reply.print(\"Backport for repo `\" + targetRepoName + \"` on branch `\" + targetBranchName + \"` was successfully enabled and will be performed once this pull request has been integrated.\");\n+                reply.println(\" Further instructions will be provided at that time.\");\n+                reply.println(\"<!-- add backport \" + targetRepoName + \":\" + targetBranchName + \" -->\");\n+                reply.println(\"<!-- \" + command.user().username() + \" -->\");\n+            }\n+        }\n+    }\n+\n+    private String generateBackportLabel(String targetRepo, String targetBranchName) {\n+        return \"backport=\" + targetRepo + \":\" + targetBranchName;\n+    }\n+\n+    private HostedRepository getTargetRepo(PullRequestBot bot, String[] parts, PrintWriter reply) {\n@@ -86,2 +139,2 @@\n-                               .replace(\"https:\/\/\", \"\")\n-                               .replace(forge.hostname() + \"\/\", \"\");\n+                .replace(\"https:\/\/\", \"\")\n+                .replace(forge.hostname() + \"\/\", \"\");\n@@ -97,1 +150,0 @@\n-        String repoName = repoNameOptional.orElse(\"<not found>\");\n@@ -105,1 +157,1 @@\n-            return;\n+            return null;\n@@ -107,2 +159,2 @@\n-        var targetRepo = potentialTargetRepo.get();\n-        var fork = bot.forks().get(targetRepo.name());\n+        return potentialTargetRepo.get();\n+    }\n@@ -110,0 +162,1 @@\n+    private Branch getTargetBranch(String[] parts, HostedRepository targetRepo, PrintWriter reply) {\n@@ -114,0 +167,10 @@\n+            return null;\n+        }\n+        return new Branch(targetBranchName);\n+    }\n+\n+    @Override\n+    public void handle(PullRequestBot bot, HostedCommit commit, LimitedCensusInstance censusInstance,\n+            Path scratchPath, CommandInvocation command, List<Comment> allComments, PrintWriter reply) {\n+        if (censusInstance.contributor(command.user()).isEmpty()) {\n+            reply.println(USER_INVALID_WARNING);\n@@ -116,1 +179,50 @@\n-        var targetBranch = new Branch(targetBranchName);\n+\n+        var args = command.args();\n+        if (args.isBlank()) {\n+            showHelp(reply);\n+            return;\n+        }\n+\n+        var parts = args.split(\" \");\n+        if (parts.length > 2) {\n+            showHelp(reply);\n+            return;\n+        }\n+\n+        \/\/ Get target repo\n+        var targetRepo = getTargetRepo(bot, parts, reply);\n+        if (targetRepo == null) {\n+            return;\n+        }\n+        var targetRepoName = targetRepo.name();\n+        var fork = bot.forks().get(targetRepo.name());\n+\n+        \/\/ Get target branch\n+        var targetBranch = getTargetBranch(parts, targetRepo, reply);\n+        if (targetBranch == null) {\n+            return;\n+        }\n+        var targetBranchName = targetBranch.name();\n+\n+        \/\/ Find real user when the command user is bot\n+        HostUser realUser = command.user();\n+        if (realUser.equals(bot.repo().forge().currentUser())) {\n+            var botComment = allComments.stream()\n+                    .filter(comment -> comment.author().equals(bot.repo().forge().currentUser()))\n+                    .filter(comment -> comment.body().contains(\"<!-- add backport \" + targetRepoName + \":\" + targetBranchName + \" -->\"))\n+                    .reduce((first, second) -> second).orElse(null);\n+            if (botComment != null) {\n+                String[] lines = botComment.body().split(\"\\\\n\");\n+                String userName = lines[lines.length - 1].split(\" \")[1];\n+                var user = bot.repo().forge().user(userName);\n+                if (user.isPresent()) {\n+                    realUser = user.get();\n+                    reply.print(\"@\");\n+                    reply.print(realUser.username());\n+                    reply.print(\" \");\n+                } else {\n+                    reply.println(\"Error: can not find the real user of Backport for repo `\" + targetRepoName + \"` on branch `\" + targetBranchName);\n+                    return;\n+                }\n+            }\n+        }\n@@ -121,1 +233,1 @@\n-            var backportBranchName = command.user().username() + \"-backport-\" + hash.abbreviate();\n+            var backportBranchName = realUser.username() + \"-backport-\" + hash.abbreviate();\n@@ -138,1 +250,1 @@\n-                              \"[\" + repoName + \"](\" + targetRepo.webUrl() + \") due to conflicts in the following files:\");\n+                              \"[\" + targetRepoName + \"](\" + targetRepo.webUrl() + \") due to conflicts in the following files:\");\n@@ -150,1 +262,1 @@\n-                            + \"by using the following commands in your personal fork of [\" + repoName + \"](\" + targetRepo.webUrl()\n+                            + \"by using the following commands in your personal fork of [\" + targetRepoName + \"](\" + targetRepo.webUrl()\n@@ -173,1 +285,1 @@\n-                    lines.add(\"Once you have resolved the conflicts as explained above continue with creating a pull request towards the [\" + repoName + \"](\" + targetRepo.webUrl() + \") with the title `Backport \" + hash.hex() + \"`.\");\n+                    lines.add(\"Once you have resolved the conflicts as explained above continue with creating a pull request towards the [\" + targetRepoName + \"](\" + targetRepo.webUrl() + \") with the title `Backport \" + hash.hex() + \"`.\");\n@@ -182,1 +294,1 @@\n-                            \"[\" + repoName + \"](\" + targetRepo.webUrl() + \") because the change is already present in the target.\");\n+                            \"[\" + targetRepoName + \"](\" + targetRepo.webUrl() + \") because the change is already present in the target.\");\n@@ -193,2 +305,2 @@\n-            if (!fork.canPush(command.user())) {\n-                fork.addCollaborator(command.user(), true);\n+            if (!fork.canPush(realUser)) {\n+                fork.addCollaborator(realUser, true);\n@@ -196,1 +308,1 @@\n-            fork.restrictPushAccess(new Branch(backportBranchName), command.user());\n+            fork.restrictPushAccess(new Branch(backportBranchName), realUser);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/BackportCommand.java","additions":142,"deletions":30,"binary":false,"changes":172,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+    private static final Pattern BACKPORT_LABEL_PATTERN = Pattern.compile(\"backport=(.+):(.+)\");\n@@ -165,1 +166,1 @@\n-            markIntegratedAndClosed(pr, prepushHash.get(), reply);\n+            markIntegratedAndClosed(pr, prepushHash.get(), reply, allComments);\n@@ -244,1 +245,1 @@\n-                markIntegratedAndClosed(pr, amendedHash, reply);\n+                markIntegratedAndClosed(pr, amendedHash, reply, allComments);\n@@ -328,1 +329,22 @@\n-    static void markIntegratedAndClosed(PullRequest pr, Hash hash, PrintWriter reply) {\n+    private static void processBackportLabel(PullRequest pr, List<Comment> allComments) {\n+        var botUser = pr.repository().forge().currentUser();\n+        for (String label : pr.labelNames()) {\n+            var matcher = BACKPORT_LABEL_PATTERN.matcher(label);\n+            if (matcher.matches()) {\n+                var repoName = matcher.group(1);\n+                var branchName = matcher.group(2);\n+                var text = \"Creating backport for repo \" + repoName + \" on branch \" + branchName\n+                        + \"\\n\/backport \" + repoName + \" \" + branchName + \"\\n\"\n+                        + PullRequestCommandWorkItem.VALID_BOT_COMMAND_MARKER;\n+                if (allComments.stream()\n+                        .filter(c -> c.author().equals(botUser))\n+                        .noneMatch(((c -> c.body().equals(text))))) {\n+                    pr.addComment(text);\n+                }\n+                pr.removeLabel(label);\n+            }\n+        }\n+    }\n+\n+    static void markIntegratedAndClosed(PullRequest pr, Hash hash, PrintWriter reply, List<Comment> allComments) {\n+        processBackportLabel(pr, allComments);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/IntegrateCommand.java","additions":25,"deletions":3,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-            markIntegratedAndClosed(pr, prePushHash.get(), reply);\n+            markIntegratedAndClosed(pr, prePushHash.get(), reply, allComments);\n@@ -134,1 +134,1 @@\n-                markIntegratedAndClosed(pr, amendedHash, reply);\n+                markIntegratedAndClosed(pr, amendedHash, reply, allComments);\n@@ -147,2 +147,2 @@\n-    private void markIntegratedAndClosed(PullRequest pr, Hash amendedHash, PrintWriter reply) {\n-        IntegrateCommand.markIntegratedAndClosed(pr, amendedHash, reply);\n+    private void markIntegratedAndClosed(PullRequest pr, Hash amendedHash, PrintWriter reply, List<Comment> allComments) {\n+        IntegrateCommand.markIntegratedAndClosed(pr, amendedHash, reply, allComments);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/SponsorCommand.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,173 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bots.pr;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInfo;\n+import org.openjdk.skara.forge.Review;\n+import org.openjdk.skara.issuetracker.Issue;\n+import org.openjdk.skara.test.*;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.openjdk.skara.bots.pr.PullRequestAsserts.assertLastCommentContains;\n+\n+public class BackportPRCommandTests {\n+    @Test\n+    void simple(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var integrator = credentials.getHostedRepository();\n+            var bot = credentials.getHostedRepository();\n+            var targetRepo = credentials.getHostedRepository(\"targetRepo\");\n+            var targetRepo2 = credentials.getHostedRepository(\"targetRepo2\");\n+            var seedFolder = tempFolder.path().resolve(\"seed\");\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addReviewer(integrator.forge().currentUser().id())\n+                    .addReviewer(bot.forge().currentUser().id())\n+                    .addCommitter(author.forge().currentUser().id());\n+            var prBot = PullRequestBot.newBuilder()\n+                    .repo(bot)\n+                    .censusRepo(censusBuilder.build())\n+                    .seedStorage(seedFolder)\n+                    .forks(Map.of(\"targetRepo\", targetRepo, \"targetRepo2\", targetRepo2))\n+                    .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"123: This is a pull request\");\n+\n+            var reviewerPr = (TestPullRequest) integrator.pullRequest(pr.id());\n+\n+            \/\/ Enable backport for targetRepo on master\n+            pr.addComment(\"\/backport targetRepo\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertLastCommentContains(pr, \"Backport for repo `targetRepo` on branch `master` was successfully enabled\");\n+            assertTrue(pr.store().labelNames().contains(\"backport=targetRepo:master\"));\n+\n+            \/\/ Enable backport for targetRepo2 on dev, but dev does not exist\n+            pr.addComment(\"\/backport targetRepo2 dev\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertLastCommentContains(pr, \"The target branch `dev` does not exist\");\n+            assertFalse(pr.store().labelNames().contains(\"backport=targetRepo2:dev\"));\n+\n+            \/\/ Enable backport for targetRepo2 on dev\n+            localRepo.push(masterHash, targetRepo2.url(), \"dev\", true);\n+            pr.addComment(\"\/backport targetRepo2 dev\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertLastCommentContains(pr, \"Backport for repo `targetRepo2` on branch `dev` was successfully enabled\");\n+            assertTrue(pr.store().labelNames().contains(\"backport=targetRepo2:dev\"));\n+\n+            \/\/ disable backport for targetRepo on master\n+            reviewerPr.addComment(\"\/backport disable targetRepo\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertLastCommentContains(pr, \"Backport for repo `targetRepo` on branch `master` was successfully disabled.\");\n+            assertFalse(pr.store().labelNames().contains(\"backport=targetRepo:master\"));\n+\n+            \/\/ disable backport for targetRepo again\n+            reviewerPr.addComment(\"\/backport disable targetRepo\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertLastCommentContains(pr, \"Backport for repo `targetRepo` on branch `master` was already disabled.\");\n+            assertFalse(pr.store().labelNames().contains(\"backport=targetRepo:master\"));\n+\n+            \/\/ Enable backport for targetRepo on master as reviewer\n+            reviewerPr.addComment(\"\/backport targetRepo\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertLastCommentContains(pr, \"Backport for repo `targetRepo` on branch `master` was successfully enabled\");\n+            assertTrue(pr.store().labelNames().contains(\"backport=targetRepo:master\"));\n+\n+            \/\/ Approve this PR\n+            reviewerPr.addReview(Review.Verdict.APPROVED, \"\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertTrue(pr.store().labelNames().contains(\"ready\"));\n+\n+            \/\/ Integrate\n+            pr.addComment(\"\/integrate\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertLastCommentContains(pr, \"@user1\");\n+            assertLastCommentContains(pr, \"was successfully created on the branch\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertLastCommentContains(pr, \"@user2\");\n+            assertLastCommentContains(pr, \"Could **not** automatically backport\");\n+\n+            \/\/ Resolve conflict\n+            localRepo.push(masterHash, targetRepo.url(), \"master\", true);\n+            \/\/ Use \/backport after the pr is integrated\n+            reviewerPr.addComment(\"\/backport targetRepo\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertLastCommentContains(pr, \"was successfully created on the branch\");\n+        }\n+    }\n+\n+    @Test\n+    void testBackportCommandWhenPrIsClosed(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var integrator = credentials.getHostedRepository();\n+            var bot = credentials.getHostedRepository();\n+            var targetRepo = credentials.getHostedRepository(\"targetRepo\");\n+            var targetRepo2 = credentials.getHostedRepository(\"targetRepo2\");\n+            var seedFolder = tempFolder.path().resolve(\"seed\");\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addReviewer(integrator.forge().currentUser().id())\n+                    .addReviewer(bot.forge().currentUser().id())\n+                    .addCommitter(author.forge().currentUser().id());\n+            var prBot = PullRequestBot.newBuilder()\n+                    .repo(bot)\n+                    .censusRepo(censusBuilder.build())\n+                    .seedStorage(seedFolder)\n+                    .forks(Map.of(\"targetRepo\", targetRepo, \"targetRepo2\", targetRepo2))\n+                    .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"123: This is a pull request\");\n+\n+            \/\/close the pr\n+            pr.store().setState(Issue.State.CLOSED);\n+            pr.addComment(\"\/backport targetRepo\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertLastCommentContains(pr, \"`\/backport` command can not be used in a closed but not integrated pull request\");\n+        }\n+    }\n+}\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/BackportPRCommandTests.java","additions":173,"deletions":0,"binary":false,"changes":173,"status":"added"},{"patch":"@@ -122,1 +122,1 @@\n-            PullRequestAsserts.assertLastCommentContains(pr, \"The command `backport` can only be used in a pull request that has been integrated.\");\n+            PullRequestAsserts.assertLastCommentContains(pr, \"Backport for repo `jdk17u-dev` on branch `master` was successfully enabled\");\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CommitCommandTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}