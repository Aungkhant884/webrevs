{"files":[{"patch":"@@ -172,0 +172,5 @@\n+\n+    @Override\n+    public List<CommitComment> recentCommitComments() {\n+        return List.of();\n+    }\n","filename":"bots\/tester\/src\/test\/java\/org\/openjdk\/skara\/bots\/tester\/InMemoryHostedRepository.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import java.util.function.Supplier;\n@@ -34,1 +35,2 @@\n-    private final Hash commit;\n+    private Hash commit;\n+    private final Supplier<Hash> commitSupplier;\n@@ -42,0 +44,10 @@\n+        this.commitSupplier = null;\n+        this.path = path;\n+        this.line = line;\n+    }\n+\n+    public CommitComment(Supplier<Hash> commitSupplier, Path path, int line, String id, String body, HostUser author, ZonedDateTime createdAt, ZonedDateTime updatedAt) {\n+        super(id, body, author, createdAt, updatedAt);\n+\n+        this.commit = null;\n+        this.commitSupplier = commitSupplier;\n@@ -50,0 +62,3 @@\n+        if (commit == null) {\n+            commit = commitSupplier.get();\n+        }\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/CommitComment.java","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -71,0 +71,1 @@\n+    List<CommitComment> recentCommitComments();\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/HostedRepository.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -196,5 +196,0 @@\n-    private String getFullName(String username) {\n-        var details = user(username);\n-        return details.get().fullName();\n-    }\n-\n@@ -207,2 +202,16 @@\n-        return HostUser.create(json.get(\"id\").asInt(), json.get(\"login\").asString(),\n-                               () -> getFullName(json.get(\"login\").asString()));\n+        return hostUser(json.get(\"id\").asInt(), json.get(\"login\").asString());\n+    }\n+\n+    HostUser hostUser(int id, String username) {\n+        return HostUser.builder()\n+                       .id(id)\n+                       .username(username)\n+                       .supplier(() -> user(username).orElseThrow())\n+                       .build();\n+    }\n+\n+    HostUser hostUser(String username) {\n+        return HostUser.builder()\n+                       .username(username)\n+                       .supplier(() -> user(username).orElseThrow())\n+                       .build();\n@@ -274,1 +283,1 @@\n-        return Optional.of(asHostUser(details.asObject()));\n+        return Optional.of(toHostUser(details.asObject()));\n@@ -277,1 +286,1 @@\n-    private static HostUser asHostUser(JSONObject details) {\n+    private HostUser toHostUser(JSONObject details) {\n@@ -287,1 +296,6 @@\n-        return HostUser.create(id, login, name, email);\n+        return HostUser.builder()\n+                       .id(id)\n+                       .username(login)\n+                       .fullName(name)\n+                       .email(email)\n+                       .build();\n@@ -302,1 +316,1 @@\n-                currentUser = asHostUser(details);\n+                currentUser = toHostUser(details);\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubHost.java","additions":25,"deletions":11,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -271,0 +271,14 @@\n+    private CommitComment toCommitComment(JSONValue o) {\n+        var hash = new Hash(o.get(\"commit_id\").asString());\n+        var line = o.get(\"line\").isNull()? -1 : o.get(\"line\").asInt();\n+        var path = o.get(\"path\").isNull()? null : Path.of(o.get(\"path\").asString());\n+        return new CommitComment(hash,\n+                                 path,\n+                                 line,\n+                                 o.get(\"id\").toString(),\n+                                 o.get(\"body\").asString(),\n+                                 gitHubHost.parseUserField(o),\n+                                 ZonedDateTime.parse(o.get(\"created_at\").asString()),\n+                                 ZonedDateTime.parse(o.get(\"updated_at\").asString()));\n+    }\n+\n@@ -276,15 +290,1 @@\n-                      .map(JSONValue::asObject)\n-                      .map(o -> {\n-                           var line = o.get(\"line\").isNull()? -1 : o.get(\"line\").asInt();\n-                           var path = o.get(\"path\").isNull()? null : Path.of(o.get(\"path\").asString());\n-                           return new CommitComment(hash,\n-                                                    path,\n-                                                    line,\n-                                                    o.get(\"id\").toString(),\n-                                                    o.get(\"body\").asString(),\n-                                                    gitHubHost.parseUserField(o),\n-                                                    ZonedDateTime.parse(o.get(\"created_at\").asString()),\n-                                                    ZonedDateTime.parse(o.get(\"updated_at\").asString()));\n-\n-\n-                      })\n+                      .map(this::toCommitComment)\n@@ -294,0 +294,51 @@\n+    @Override\n+    public List<CommitComment> recentCommitComments() {\n+        var parts = name().split(\"\/\");\n+        var owner = parts[0];\n+        var name = parts[1];\n+\n+        var query = String.join(\"\\n\", List.of(\n+            \"query {\",\n+            \"    repository(owner: \\\"\" + owner + \"\\\", name: \\\"\" + name + \"\\\") {\",\n+            \"        commitComments(last: 200) {\",\n+            \"            nodes {\",\n+            \"                createdAt\",\n+            \"                updatedAt\",\n+            \"                author { login }\",\n+            \"                databaseId\",\n+            \"                commit { oid }\",\n+            \"                body\",\n+            \"            }\",\n+            \"        }\",\n+            \"    }\",\n+            \"}\"\n+        ));\n+\n+        var data = gitHubHost.graphQL()\n+                             .post()\n+                             .body(JSON.object().put(\"query\", query))\n+                             .execute()\n+                             .get(\"data\");\n+        return data.get(\"repository\")\n+                   .get(\"commitComments\")\n+                   .get(\"nodes\")\n+                   .stream()\n+                   .map(o -> {\n+                       var hash = new Hash(o.get(\"commit\").get(\"oid\").asString());\n+                       var createdAt = ZonedDateTime.parse(o.get(\"createdAt\").asString());\n+                       var updatedAt = ZonedDateTime.parse(o.get(\"updatedAt\").asString());\n+                       var id = o.get(\"databaseId\").asString();\n+                       var body = o.get(\"body\").asString();\n+                       var user = gitHubHost.hostUser(o.get(\"login\").asString());\n+                       return new CommitComment(hash,\n+                                                null,\n+                                                -1,\n+                                                id,\n+                                                body,\n+                                                user,\n+                                                createdAt,\n+                                                updatedAt);\n+                   })\n+                   .collect(Collectors.toList());\n+    }\n+\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubRepository.java","additions":66,"deletions":15,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -152,1 +152,6 @@\n-        return HostUser.create(id, username, name, email);\n+        return HostUser.builder()\n+                       .id(id)\n+                       .username(username)\n+                       .fullName(name)\n+                       .email(email)\n+                       .build();\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabHost.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import org.openjdk.skara.host.HostUser;\n@@ -36,0 +37,1 @@\n+import java.util.function.Supplier;\n@@ -293,0 +295,17 @@\n+    private CommitComment toCommitComment(Hash hash, JSONValue o) {\n+       var line = o.get(\"line\").isNull()? -1 : o.get(\"line\").asInt();\n+       var path = o.get(\"path\").isNull()? null : Path.of(o.get(\"path\").asString());\n+       \/\/ GitLab does not offer updated_at for commit comments\n+       var createdAt = ZonedDateTime.parse(o.get(\"created_at\").asString());\n+       \/\/ GitLab does not offer an id for commit comments\n+       var id = \"\";\n+       return new CommitComment(hash,\n+                                path,\n+                                line,\n+                                id,\n+                                o.get(\"note\").asString(),\n+                                gitLabHost.parseAuthorField(o),\n+                                createdAt,\n+                                createdAt);\n+    }\n+\n@@ -298,1 +317,52 @@\n-                      .map(JSONValue::asObject)\n+                      .map(o -> toCommitComment(hash, o))\n+                      .collect(Collectors.toList());\n+    }\n+\n+    private Hash commitWithComment(String commitTitle,\n+                                   String commentBody,\n+                                   ZonedDateTime commentCreatedAt,\n+                                   HostUser author) {\n+        var result = request.get(\"search\")\n+                            .param(\"scope\", \"commits\")\n+                            .param(\"search\", commitTitle)\n+                            .execute()\n+                            .stream()\n+                            .filter(o -> o.get(\"title\").asString().equals(commitTitle))\n+                            .map(o -> new Hash(o.get(\"id\").asString()))\n+                            .collect(Collectors.toList());\n+        if (result.isEmpty()) {\n+            throw new IllegalArgumentException(\"No commit with title: \" + commitTitle);\n+        }\n+        if (result.size() > 1) {\n+            var filtered = result.stream()\n+                                 .flatMap(hash -> commitComments(hash).stream()\n+                                                                      .filter(c -> c.body().equals(commentBody))\n+                                                                      .filter(c -> c.createdAt().equals(commentCreatedAt))\n+                                                                      .filter(c -> c.author().equals(author)))\n+                                 .map(c -> c.commit())\n+                                 .collect(Collectors.toList());\n+            if (filtered.isEmpty()) {\n+                throw new IllegalStateException(\"No commit with title '\" + commitTitle +\n+                                                \"' and comment '\" + commentBody + \"'\");\n+            }\n+            if (filtered.size() > 1) {\n+                var hashes = filtered.stream().map(Hash::hex).collect(Collectors.toList());\n+                throw new IllegalStateException(\"Multiple commits with identical comment '\" + commentBody + \"': \"\n+                                                 + String.join(\",\", hashes));\n+            }\n+            return filtered.get(0);\n+        }\n+        return result.get(0);\n+    }\n+\n+    @Override\n+    public List<CommitComment> recentCommitComments() {\n+        var twoDaysAgo = ZonedDateTime.now().minusDays(2);\n+        var formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-DD\");\n+        return request.get(\"events\")\n+                      .param(\"after\", twoDaysAgo.format(formatter))\n+                      .execute()\n+                      .stream()\n+                      .filter(o -> o.contains(\"note\") &&\n+                                   o.get(\"note\").contains(\"noteable_type\") &&\n+                                   o.get(\"note\").get(\"noteable_type\").asString().equals(\"Commit\"))\n@@ -300,14 +370,9 @@\n-                           var line = o.get(\"line\").isNull()? -1 : o.get(\"line\").asInt();\n-                           var path = o.get(\"path\").isNull()? null : Path.of(o.get(\"path\").asString());\n-                           \/\/ GitLab does not offer updated_at for commit comments\n-                           var createdAt = ZonedDateTime.parse(o.get(\"created_at\").asString());\n-                           \/\/ GitLab does not offer an id for commit comments\n-                           var id = \"\";\n-                           return new CommitComment(hash,\n-                                                    path,\n-                                                    line,\n-                                                    id,\n-                                                    o.get(\"note\").asString(),\n-                                                    gitLabHost.parseAuthorField(o),\n-                                                    createdAt,\n-                                                    createdAt);\n+                          var createdAt = ZonedDateTime.parse(o.get(\"note\").get(\"created_at\").asString());\n+                          var body = o.get(\"note\").get(\"body\").asString();\n+                          var user = gitLabHost.parseAuthorField(o);\n+                          var id = o.get(\"note\").get(\"id\").asString();\n+                          Supplier<Hash> hash = () -> commitWithComment(o.get(\"target_title\").asString(),\n+                                                                        body,\n+                                                                        createdAt,\n+                                                                        user);\n+                          return new CommitComment(hash, null, -1, id, body, user, createdAt, createdAt);\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabRepository.java","additions":80,"deletions":15,"binary":false,"changes":95,"status":"modified"},{"patch":"@@ -30,4 +30,3 @@\n-    private final String id;\n-    private final String username;\n-    private final Supplier<String> nameSupplier;\n-    private String name;\n+    private String id;\n+    private String username;\n+    private String fullName;\n@@ -35,0 +34,13 @@\n+    private final Supplier<HostUser> supplier;\n+\n+    public static class Builder {\n+        private String id;\n+        private String username;\n+        private String fullName;\n+        private String email;\n+        private Supplier<HostUser> supplier;\n+\n+        public Builder id(int id) {\n+            this.id = String.valueOf(id);\n+            return this;\n+        }\n@@ -36,7 +48,4 @@\n-    private HostUser(String id, String username, String name) {\n-        this.id = id ;\n-        this.username = username;\n-        this.nameSupplier = null;\n-        this.name = name;\n-        this.email = null;\n-    }\n+        public Builder id(String id) {\n+            this.id = id;\n+            return this;\n+        }\n@@ -44,7 +53,4 @@\n-    private HostUser(String id, String username, Supplier<String> nameSupplier) {\n-        this.id = id ;\n-        this.username = username;\n-        this.nameSupplier = nameSupplier;\n-        this.name = null;\n-        this.email = null;\n-    }\n+        public Builder username(String username) {\n+            this.username = username;\n+            return this;\n+        }\n@@ -52,7 +58,4 @@\n-    private HostUser(String id, String username, String name, String email) {\n-        this.id = id ;\n-        this.username = username;\n-        this.nameSupplier = null;\n-        this.name = name;\n-        this.email = email;\n-    }\n+        public Builder fullName(String fullName) {\n+            this.fullName = fullName;\n+            return this;\n+        }\n@@ -60,2 +63,13 @@\n-    public static HostUser create(int id, String username, Supplier<String> nameSupplier) {\n-        return new HostUser(String.valueOf(id), username, nameSupplier);\n+        public Builder email(String email) {\n+            this.email = email;\n+            return this;\n+        }\n+\n+        public Builder supplier(Supplier<HostUser> supplier) {\n+            this.supplier = supplier;\n+            return this;\n+        }\n+\n+        public HostUser build() {\n+            return new HostUser(id, username, fullName, email, supplier);\n+        }\n@@ -64,2 +78,6 @@\n-    public static HostUser create(int id, String username, String name, String email) {\n-        return new HostUser(String.valueOf(id), username, name, email);\n+    private HostUser(String id, String username, String fullName, String email, Supplier<HostUser> supplier) {\n+        this.id = id;\n+        this.username = username;\n+        this.fullName = fullName;\n+        this.email = email;\n+        this.supplier = supplier;\n@@ -68,2 +86,2 @@\n-    public static HostUser create(String id, String username, String name, String email) {\n-        return new HostUser(id, username, name, email);\n+    public static Builder builder() {\n+        return new Builder();\n@@ -72,2 +90,2 @@\n-    public static HostUser create(String id, String username, String name) {\n-        return new HostUser(id, username, name);\n+    public static HostUser create(String id, String username, String fullName) {\n+        return builder().id(id).username(username).fullName(fullName).build();\n@@ -76,2 +94,2 @@\n-    public static HostUser create(int id, String username, String name) {\n-        return new HostUser(String.valueOf(id), username, name);\n+    public static HostUser create(int id, String username, String fullName) {\n+        return builder().id(id).username(username).fullName(fullName).build();\n@@ -81,2 +99,2 @@\n-    public boolean equals(Object o) {\n-        if (this == o) {\n+    public boolean equals(Object other) {\n+        if (this == other) {\n@@ -85,1 +103,1 @@\n-        if (o == null || getClass() != o.getClass()) {\n+        if (other == null || getClass() != other.getClass()) {\n@@ -88,3 +106,3 @@\n-        HostUser that = (HostUser) o;\n-        return id.equals(that.id) &&\n-                Objects.equals(username, that.username);\n+        HostUser o = (HostUser) other;\n+        return Objects.equals(id(), o.id()) &&\n+               Objects.equals(username(), o.username());\n@@ -98,0 +116,8 @@\n+    private void update() {\n+        var result = supplier.get();\n+        id = result.id;\n+        username = result.username;\n+        fullName = result.fullName;\n+        email = result.email;\n+    }\n+\n@@ -99,0 +125,3 @@\n+        if (id == null) {\n+            update();\n+        }\n@@ -103,0 +132,3 @@\n+        if (username == null) {\n+            update();\n+        }\n@@ -107,2 +139,2 @@\n-        if (name == null) {\n-            name = nameSupplier.get();\n+        if (fullName == null) {\n+            update();\n@@ -110,1 +142,1 @@\n-        return name;\n+        return fullName;\n@@ -114,0 +146,3 @@\n+        if (id == null || username == null || fullName == null) {\n+            update();\n+        }\n@@ -122,1 +157,1 @@\n-                \", name='\" + name + '\\'' +\n+                \", fullName='\" + fullName + '\\'' +\n","filename":"host\/src\/main\/java\/org\/openjdk\/skara\/host\/HostUser.java","additions":80,"deletions":45,"binary":false,"changes":125,"status":"modified"},{"patch":"@@ -117,4 +117,6 @@\n-            currentUser = HostUser.create(data.get(\"name\").asString(),\n-                                          data.get(\"name\").asString(),\n-                                          data.get(\"displayName\").asString(),\n-                                          data.get(\"emailAddress\").asString());\n+            currentUser = HostUser.builder()\n+                                  .id(data.get(\"name\").asString())\n+                                  .username(data.get(\"name\").asString())\n+                                  .fullName(data.get(\"displayName\").asString())\n+                                  .email(data.get(\"emailAddress\").asString())\n+                                  .build();\n","filename":"issuetracker\/src\/main\/java\/org\/openjdk\/skara\/issuetracker\/jira\/JiraHost.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -437,4 +437,7 @@\n-        return Optional.of(HostUser.create(data.get(\"name\").asString(),\n-                                           data.get(\"name\").asString(),\n-                                           data.get(\"displayName\").asString(),\n-                                           data.get(\"emailAddress\").asString()));\n+        var hostUser = HostUser.builder()\n+                              .id(data.get(\"name\").asString())\n+                              .username(data.get(\"name\").asString())\n+                              .fullName(data.get(\"displayName\").asString())\n+                              .email(data.get(\"emailAddress\").asString())\n+                              .build();\n+        return Optional.of(hostUser);\n","filename":"issuetracker\/src\/main\/java\/org\/openjdk\/skara\/issuetracker\/jira\/JiraProject.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -214,0 +214,8 @@\n+    @Override\n+    public List<CommitComment> recentCommitComments() {\n+        return commitComments.values()\n+                             .stream()\n+                             .flatMap(e -> e.stream())\n+                             .collect(Collectors.toList());\n+    }\n+\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestHostedRepository.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"}]}