{"files":[{"patch":"@@ -27,0 +27,1 @@\n+import org.openjdk.skara.vcs.Hash;\n@@ -68,0 +69,5 @@\n+\n+    @Override\n+    public Optional<HostedCommitMetadata> search(Hash hash) {\n+        return Optional.empty();\n+    }\n","filename":"bots\/tester\/src\/test\/java\/org\/openjdk\/skara\/bots\/tester\/InMemoryHost.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import org.openjdk.skara.vcs.Hash;\n@@ -36,0 +37,1 @@\n+    Optional<HostedCommitMetadata> search(Hash hash);\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/Forge.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,105 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.forge;\n+\n+import org.openjdk.skara.vcs.*;\n+\n+import java.net.URI;\n+import java.util.*;\n+import java.time.*;\n+import java.time.format.*;\n+\n+public class HostedCommitMetadata {\n+    private final CommitMetadata metadata;\n+    private final URI url;\n+\n+    public HostedCommitMetadata(CommitMetadata metadata, URI url) {\n+        this.metadata = metadata;\n+        this.url = url;\n+    }\n+\n+    public Hash hash() {\n+        return metadata.hash();\n+    }\n+\n+    public Author author() {\n+        return metadata.author();\n+    }\n+\n+    public Author committer() {\n+        return metadata.committer();\n+    }\n+\n+    public List<String> message() {\n+        return metadata.message();\n+    }\n+\n+    public List<Hash> parents() {\n+        return metadata.parents();\n+    }\n+\n+    public ZonedDateTime authored() {\n+        return metadata.authored();\n+    }\n+\n+    public ZonedDateTime committed() {\n+        return metadata.committed();\n+    }\n+\n+    public boolean isInitialCommit() {\n+        return metadata.isInitialCommit();\n+    }\n+\n+    public boolean isMerge() {\n+        return metadata.isMerge();\n+    }\n+\n+    public int numParents() {\n+        return metadata.numParents();\n+    }\n+\n+    public URI url() {\n+        return url;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return url.toString();\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(metadata, url);\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (!(o instanceof HostedCommitMetadata)) {\n+            return false;\n+        }\n+\n+        var other = (HostedCommitMetadata) o;\n+        return Objects.equals(metadata, other.metadata) &&\n+               Objects.equals(url, other.url);\n+    }\n+}\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/HostedCommitMetadata.java","additions":105,"deletions":0,"binary":false,"changes":105,"status":"added"},{"patch":"@@ -6,0 +6,1 @@\n+import org.openjdk.skara.json.JSONValue;\n@@ -9,0 +10,1 @@\n+import java.util.HashSet;\n@@ -10,0 +12,1 @@\n+import java.util.stream.Collectors;\n@@ -31,0 +34,8 @@\n+        Set<String> orgs = new HashSet<String>();\n+        if (configuration != null && configuration.contains(\"orgs\")) {\n+            orgs = configuration.get(\"orgs\")\n+                                .stream()\n+                                .map(JSONValue::asString)\n+                                .collect(Collectors.toSet());\n+        }\n+\n@@ -37,1 +48,1 @@\n-                return new GitHubHost(uri, app, webUriPattern, webUriReplacement);\n+                return new GitHubHost(uri, app, webUriPattern, webUriReplacement, orgs);\n@@ -39,1 +50,1 @@\n-                return new GitHubHost(uri, credential, webUriPattern, webUriReplacement);\n+                return new GitHubHost(uri, credential, webUriPattern, webUriReplacement, orgs);\n@@ -42,1 +53,1 @@\n-            return new GitHubHost(uri, webUriPattern, webUriReplacement);\n+            return new GitHubHost(uri, webUriPattern, webUriReplacement, orgs);\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubForgeFactory.java","additions":14,"deletions":3,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import org.openjdk.skara.vcs.*;\n@@ -35,0 +36,1 @@\n+import java.util.stream.Collectors;\n@@ -50,0 +52,1 @@\n+    private final Set<String> orgs;\n@@ -51,1 +54,1 @@\n-    public GitHubHost(URI uri, GitHubApplication application, Pattern webUriPattern, String webUriReplacement) {\n+    public GitHubHost(URI uri, GitHubApplication application, Pattern webUriPattern, String webUriReplacement, Set<String> orgs) {\n@@ -57,0 +60,1 @@\n+        this.orgs = orgs;\n@@ -89,1 +93,1 @@\n-    public GitHubHost(URI uri, Credential pat, Pattern webUriPattern, String webUriReplacement) {\n+    public GitHubHost(URI uri, Credential pat, Pattern webUriPattern, String webUriReplacement, Set<String> orgs) {\n@@ -95,0 +99,1 @@\n+        this.orgs = orgs;\n@@ -118,1 +123,1 @@\n-    GitHubHost(URI uri, Pattern webUriPattern, String webUriReplacement) {\n+    GitHubHost(URI uri, Pattern webUriPattern, String webUriReplacement, Set<String> orgs) {\n@@ -124,0 +129,1 @@\n+        this.orgs = orgs;\n@@ -228,1 +234,1 @@\n-    JSONObject runSearch(String query) {\n+    JSONObject runSearch(String category, String query) {\n@@ -243,1 +249,1 @@\n-        var result = request.get(\"search\/issues\")\n+        var result = request.get(\"search\/\" + category)\n@@ -326,0 +332,33 @@\n+\n+    CommitMetadata toCommitMetadata(JSONValue o) {\n+        var hash = new Hash(o.get(\"sha\").asString());\n+        var parents = o.get(\"parents\").stream()\n+                                      .map(p -> new Hash(p.get(\"sha\").asString()))\n+                                      .collect(Collectors.toList());\n+        var commit = o.get(\"commit\").asObject();\n+        var author = new Author(commit.get(\"author\").get(\"name\").asString(),\n+                                commit.get(\"author\").get(\"email\").asString());\n+        var authored = ZonedDateTime.parse(commit.get(\"author\").get(\"date\").asString());\n+        var committer = new Author(commit.get(\"committer\").get(\"name\").asString(),\n+                                   commit.get(\"committer\").get(\"email\").asString());\n+        var committed = ZonedDateTime.parse(commit.get(\"committer\").get(\"date\").asString());\n+        var message = Arrays.asList(commit.get(\"message\").asString().split(\"\\n\"));\n+        return new CommitMetadata(hash, parents, author, authored, committer, committed, message);\n+    }\n+\n+    @Override\n+    public Optional<HostedCommitMetadata> search(Hash hash) {\n+        var orgsToSearch = orgs.stream().map(o -> \"org:\" + o).collect(Collectors.joining(\"+\"));\n+        if (!orgsToSearch.isEmpty()) {\n+            orgsToSearch = \"+\" + orgsToSearch;\n+        }\n+        var result = runSearch(\"commits\", \"hash:\" + hash.hex() + orgsToSearch);\n+        var items = result.get(\"items\").asArray();\n+        if (items.isEmpty()) {\n+            return Optional.empty();\n+        }\n+        var first = items.get(0);\n+        var metadata = toCommitMetadata(first);\n+        var url = URI.create(first.get(\"url\").asString());\n+        return Optional.of(new HostedCommitMetadata(metadata, url));\n+    }\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubHost.java","additions":44,"deletions":5,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -154,1 +154,1 @@\n-        var result = gitHubHost.runSearch(query);\n+        var result = gitHubHost.runSearch(\"issues\", query);\n@@ -302,12 +302,1 @@\n-        var parents = o.get(\"parents\").stream()\n-                                      .map(p -> new Hash(p.get(\"sha\").asString()))\n-                                      .collect(Collectors.toList());\n-        var commit = o.get(\"commit\").asObject();\n-        var author = new Author(commit.get(\"author\").get(\"name\").asString(),\n-                                commit.get(\"author\").get(\"email\").asString());\n-        var authored = ZonedDateTime.parse(commit.get(\"author\").get(\"date\").asString());\n-        var committer = new Author(commit.get(\"committer\").get(\"name\").asString(),\n-                                   commit.get(\"committer\").get(\"email\").asString());\n-        var committed = ZonedDateTime.parse(commit.get(\"committer\").get(\"date\").asString());\n-        var message = Arrays.asList(commit.get(\"message\").asString().split(\"\\n\"));\n-        return Optional.of(new CommitMetadata(hash, parents, author, authored, committer, committed, message));\n+        return Optional.of(gitHubHost.toCommitMetadata(o));\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubRepository.java","additions":2,"deletions":13,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -6,0 +6,1 @@\n+import org.openjdk.skara.json.JSONValue;\n@@ -8,0 +9,1 @@\n+import java.util.HashSet;\n@@ -9,0 +11,1 @@\n+import java.util.stream.Collectors;\n@@ -27,0 +30,7 @@\n+        Set<String> groups = new HashSet<String>();\n+        if (configuration != null && configuration.contains(\"groups\")) {\n+            groups = configuration.get(\"groups\")\n+                                  .stream()\n+                                  .map(JSONValue::asString)\n+                                  .collect(Collectors.toSet());\n+        }\n@@ -28,1 +38,1 @@\n-            return new GitLabHost(name, uri, credential);\n+            return new GitLabHost(name, uri, credential, groups);\n@@ -30,1 +40,1 @@\n-            return new GitLabHost(name, uri);\n+            return new GitLabHost(name, uri, groups);\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabForgeFactory.java","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import org.openjdk.skara.vcs.*;\n@@ -34,0 +35,1 @@\n+import java.util.stream.Collectors;\n@@ -35,0 +37,1 @@\n+import java.time.ZonedDateTime;\n@@ -42,0 +45,1 @@\n+    private final Set<String> groups;\n@@ -45,1 +49,1 @@\n-    GitLabHost(String name, URI uri, Credential pat) {\n+    GitLabHost(String name, URI uri, Credential pat, Set<String> groups) {\n@@ -49,0 +53,1 @@\n+        this.groups = groups;\n@@ -56,1 +61,1 @@\n-    GitLabHost(String name, URI uri) {\n+    GitLabHost(String name, URI uri, Set<String> groups) {\n@@ -60,0 +65,1 @@\n+        this.groups = groups;\n@@ -213,0 +219,40 @@\n+\n+    CommitMetadata toCommitMetadata(JSONValue o) {\n+        var hash = new Hash(o.get(\"id\").asString());\n+        var parents = o.get(\"parent_ids\").stream()\n+                                      .map(JSONValue::asString)\n+                                      .map(Hash::new)\n+                                      .collect(Collectors.toList());\n+        var author = new Author(o.get(\"author_name\").asString(),\n+                                o.get(\"author_email\").asString());\n+        var authored = ZonedDateTime.parse(o.get(\"authored_date\").asString());\n+        var committer = new Author(o.get(\"committer_name\").asString(),\n+                                   o.get(\"committer_email\").asString());\n+        var committed = ZonedDateTime.parse(o.get(\"committed_date\").asString());\n+        var message = Arrays.asList(o.get(\"message\").asString().split(\"\\n\"));\n+        return new CommitMetadata(hash, parents, author, authored, committer, committed, message);\n+    }\n+\n+    @Override\n+    public Optional<HostedCommitMetadata> search(Hash hash) {\n+        var hex = hash.hex();\n+        for (var group : groups) {\n+            var projects = request.get(\"groups\/\" + group + \"\/projects\")\n+                                  .execute()\n+                                  .stream()\n+                                  .map(o -> o.get(\"id\").asString())\n+                                  .collect(Collectors.toList());\n+            for (var project : projects) {\n+                var c = request.get(\"projects\/\" + project + \"\/repository\/commits\/\" + hex)\n+                               .onError(r -> Optional.of(JSON.of()))\n+                               .execute();\n+                if (!c.isNull()) {\n+                    var url = URI.create(c.get(\"web_url\").asString());\n+                    var metadata = toCommitMetadata(c);\n+                    return Optional.of(new HostedCommitMetadata(metadata, url));\n+                }\n+            }\n+        }\n+\n+        return Optional.empty();\n+    }\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabHost.java","additions":48,"deletions":2,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -331,15 +331,1 @@\n-        if (c.isNull()) {\n-            return Optional.empty();\n-        }\n-        var parents = c.get(\"parent_ids\").stream()\n-                                      .map(JSONValue::asString)\n-                                      .map(Hash::new)\n-                                      .collect(Collectors.toList());\n-        var author = new Author(c.get(\"author_name\").asString(),\n-                                c.get(\"author_email\").asString());\n-        var authored = ZonedDateTime.parse(c.get(\"authored_date\").asString());\n-        var committer = new Author(c.get(\"committer_name\").asString(),\n-                                   c.get(\"committer_email\").asString());\n-        var committed = ZonedDateTime.parse(c.get(\"committed_date\").asString());\n-        var message = Arrays.asList(c.get(\"message\").asString().split(\"\\n\"));\n-        return Optional.of(new CommitMetadata(hash, parents, author, authored, committer, committed, message));\n+        return c.isNull()? Optional.empty() : Optional.of(gitLabHost.toCommitMetadata(c));\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabRepository.java","additions":1,"deletions":15,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import java.util.Set;\n@@ -40,1 +41,2 @@\n-                                      Pattern.compile(\"^(http:\/\/www.example.com)\/test\/(.*)$\"), \"$1\/another\/$2\");\n+                                      Pattern.compile(\"^(http:\/\/www.example.com)\/test\/(.*)$\"), \"$1\/another\/$2\",\n+                                      Set.of());\n@@ -49,1 +51,2 @@\n-                                      Pattern.compile(\"^(http:\/\/www.example.com)\/test\/(.*)$\"), \"$1\/another\/$2\");\n+                                      Pattern.compile(\"^(http:\/\/www.example.com)\/test\/(.*)$\"), \"$1\/another\/$2\",\n+                                      Set.of());\n","filename":"forge\/src\/test\/java\/org\/openjdk\/skara\/forge\/github\/GitHubHostTests.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -134,0 +134,4 @@\n+    public boolean isEmpty() {\n+        return values.isEmpty();\n+    }\n+\n","filename":"json\/src\/main\/java\/org\/openjdk\/skara\/json\/JSONArray.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import java.net.URI;\n@@ -156,0 +157,17 @@\n+    @Override\n+    public Optional<HostedCommitMetadata> search(Hash hash) {\n+        for (var key : data.repositories.keySet()) {\n+            var repo = data.repositories.get(key);\n+            try {\n+                var commit = repo.lookup(hash);\n+                if (commit.isPresent()) {\n+                    var url = URI.create(\"file:\/\/\" + repo.root() + \"\/commits\/\" + hash.hex());\n+                    return Optional.of(new HostedCommitMetadata(commit.get().metadata(), url));\n+                }\n+            } catch (IOException e) {\n+                return Optional.empty();\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestHost.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -82,0 +82,4 @@\n+    public CommitMetadata metadata() {\n+        return metadata;\n+    }\n+\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/Commit.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"}]}