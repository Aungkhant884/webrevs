{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,0 +41,1 @@\n+    implementation project(':bots:jep')\n","filename":"bots\/cli\/build.gradle","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,45 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+module {\n+    name = 'org.openjdk.skara.bots.jep'\n+    test {\n+        requires 'org.junit.jupiter.api'\n+        requires 'org.openjdk.skara.test'\n+        opens 'org.openjdk.skara.bots.jep' to 'org.junit.platform.commons'\n+    }\n+}\n+\n+dependencies {\n+    implementation project(':host')\n+    implementation project(':bot')\n+    implementation project(':forge')\n+    implementation project(':issuetracker')\n+    implementation project(':census')\n+    implementation project(':ci')\n+    implementation project(':json')\n+    implementation project(':vcs')\n+    implementation project(':metrics')\n+\n+    testImplementation project(':test')\n+}\n","filename":"bots\/jep\/build.gradle","additions":45,"deletions":0,"binary":false,"changes":45,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,1 +23,2 @@\n-module org.openjdk.skara.bots.csr {\n+\n+module org.openjdk.skara.bots.jep {\n@@ -30,1 +31,1 @@\n-    provides org.openjdk.skara.bot.BotFactory with org.openjdk.skara.bots.csr.CSRBotFactory;\n+    provides org.openjdk.skara.bot.BotFactory with org.openjdk.skara.bots.jep.JEPBotFactory;\n","filename":"bots\/jep\/src\/main\/java\/module-info.java","additions":4,"deletions":3,"binary":false,"changes":7,"previous_filename":"bots\/csr\/src\/main\/java\/module-info.java","status":"copied"},{"patch":"@@ -0,0 +1,149 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.skara.bots.jep;\n+\n+import org.openjdk.skara.bot.Bot;\n+import org.openjdk.skara.bot.WorkItem;\n+import org.openjdk.skara.forge.HostedRepository;\n+import org.openjdk.skara.forge.PullRequest;\n+import org.openjdk.skara.issuetracker.IssueProject;\n+\n+import java.nio.file.Path;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.logging.Logger;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static org.openjdk.skara.bots.jep.JEPBotFactory.NAME;\n+\n+public class JEPBot implements Bot, WorkItem {\n+    final static String JEP_LABEL = \"jep\";\n+    private final Logger log = Logger.getLogger(\"org.openjdk.skara.bots\");\n+    private final static Pattern jepMarkerPattern = Pattern.compile(\"<!-- jep: '(.*?)' '(.*?)' '(.*?)' -->\");\n+    private final HostedRepository repo;\n+    private final IssueProject issueProject;\n+\n+    JEPBot(HostedRepository repo, IssueProject issueProject) {\n+        this.repo = repo;\n+        this.issueProject = issueProject;\n+    }\n+\n+    @Override\n+    public boolean concurrentWith(WorkItem other) {\n+        if (!(other instanceof JEPBot otherBot)) {\n+            return true;\n+        }\n+        return !repo.isSame(otherBot.repo);\n+    }\n+\n+    @Override\n+    public Collection<WorkItem> run(Path scratchPath) {\n+        var prs = repo.pullRequests();\n+        for (var pr : prs) {\n+            var jepComment = pr.comments().stream()\n+                    .filter(comment -> comment.author().equals(pr.repository().forge().currentUser()))\n+                    .flatMap(comment -> comment.body().lines())\n+                    .map(jepMarkerPattern::matcher)\n+                    .filter(Matcher::find)\n+                    .reduce((first, second) -> second)\n+                    .orElse(null);\n+            if (jepComment == null) {\n+                if (pr.labelNames().contains(JEP_LABEL)) {\n+                    pr.removeLabel(JEP_LABEL);\n+                }\n+                log.fine(\"No jep command found in comment for \" + describe(pr));\n+                continue;\n+            }\n+\n+            var issueId = jepComment.group(2);\n+            if (\"unneeded\".equals(issueId)) {\n+                log.info(\"Found `\/jep unneeded` command for \" + describe(pr));\n+                if (pr.labelNames().contains(JEP_LABEL)) {\n+                    log.info(\"Removing JEP label from \" + describe(pr));\n+                    pr.removeLabel(JEP_LABEL);\n+                }\n+                continue;\n+            }\n+\n+            var issueOpt = issueProject.issue(issueId);\n+            if (issueOpt.isEmpty()) {\n+                log.severe(\"The issue `\" + issueId + \"` for \" + describe(pr) + \" doesn't exist.\");\n+                continue;\n+            }\n+            var issue = issueOpt.get();\n+\n+            var issueType = issue.properties().get(\"issuetype\");\n+            if (issueType == null || !\"JEP\".equals(issueType.asString())) {\n+                log.severe(\"The issue `\" + issue.id() + \"` for \" + describe(pr) + \" is not a JEP.\");\n+                continue;\n+            }\n+\n+            var issueStatus = issue.properties().get(\"status\").get(\"name\").asString();\n+            var resolution = issue.properties().get(\"resolution\");\n+            String resolutionName = \"\";\n+            if (resolution != null && !resolution.isNull() &&\n+                    resolution.get(\"name\") != null && !resolution.get(\"name\").isNull()) {\n+                resolutionName = resolution.get(\"name\").asString();\n+            }\n+\n+            var hasTargeted = \"Targeted\".equals(issueStatus) ||\n+                    \"Integrated\".equals(issueStatus) ||\n+                    \"Completed\".equals(issueStatus) ||\n+                    (\"Closed\".equals(issueStatus) && \"Delivered\".equals(resolutionName));\n+            if (hasTargeted && pr.labelNames().contains(JEP_LABEL)) {\n+                log.info(\"JEP issue \" + issue.id() + \" found in state \" + issueStatus + \", removing JEP label from \" + describe(pr));\n+                pr.removeLabel(JEP_LABEL);\n+            } else if (!hasTargeted && !pr.labelNames().contains(JEP_LABEL)) {\n+                log.info(\"JEP issue \" + issue.id() + \" found in state \" + issueStatus + \", adding JEP label to \" + describe(pr));\n+                pr.addLabel(JEP_LABEL);\n+            }\n+        }\n+        return List.of();\n+    }\n+\n+    private String describe(PullRequest pr) {\n+        return repo.name() + \"#\" + pr.id();\n+    }\n+\n+    @Override\n+    public String botName() {\n+        return name();\n+    }\n+\n+    @Override\n+    public String workItemName() {\n+        return name();\n+    }\n+\n+    @Override\n+    public List<WorkItem> getPeriodicItems() {\n+        return List.of(this);\n+    }\n+\n+    @Override\n+    public String name() {\n+        return NAME;\n+    }\n+}\n","filename":"bots\/jep\/src\/main\/java\/org\/openjdk\/skara\/bots\/jep\/JEPBot.java","additions":149,"deletions":0,"binary":false,"changes":149,"status":"added"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.skara.bots.jep;\n+\n+import org.openjdk.skara.bot.Bot;\n+import org.openjdk.skara.bot.BotConfiguration;\n+import org.openjdk.skara.bot.BotFactory;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Logger;\n+\n+public class JEPBotFactory implements BotFactory {\n+    private final Logger log = Logger.getLogger(\"org.openjdk.skara.bots\");;\n+    static final String NAME = \"jep\";\n+\n+    @Override\n+    public String name() {\n+        return NAME;\n+    }\n+\n+    @Override\n+    public List<Bot> create(BotConfiguration configuration) {\n+        var ret = new ArrayList<Bot>();\n+        var specific = configuration.specific();\n+        for (var project : specific.get(\"projects\").asArray()) {\n+            var repo = configuration.repository(project.get(\"repository\").asString());\n+            var issueProject = configuration.issueProject(project.get(\"issues\").asString());\n+            log.info(\"Setting up jep bot for \" + repo.name());\n+            ret.add(new JEPBot(repo, issueProject));\n+        }\n+        return ret;\n+    }\n+}\n","filename":"bots\/jep\/src\/main\/java\/org\/openjdk\/skara\/bots\/jep\/JEPBotFactory.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"},{"patch":"@@ -0,0 +1,250 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bots.jep;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInfo;\n+import org.openjdk.skara.issuetracker.Issue;\n+import org.openjdk.skara.issuetracker.jira.JiraProject;\n+import org.openjdk.skara.json.JSON;\n+import org.openjdk.skara.test.CheckableRepository;\n+import org.openjdk.skara.test.HostCredentials;\n+import org.openjdk.skara.test.TemporaryDirectory;\n+import org.openjdk.skara.test.TestBotRunner;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.*;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class JEPBotTests {\n+    private static final String jepMarker = \"<!-- jep: '%s' '%s' '%s' -->\"; \/\/ <!-- jep: 'JEP-ID' 'ISSUE-ID' 'ISSUE-TITLE' -->\n+\n+    @Test\n+    void testJepIssueStatus(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var repo = credentials.getHostedRepository();\n+            var issueProject = credentials.getIssueProject();\n+            var jepBot = new JEPBot(repo, issueProject);\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), repo.repositoryType(),\n+                    Path.of(\"appendable.txt\"), Set.of(\"issues\"), null);\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, repo.url(), \"master\", true);\n+\n+            var mainIssue = issueProject.createIssue(\"The main issue\", List.of(\"main\"), Map.of(\"issuetype\", JSON.of(\"Bug\")));\n+            List<Issue> issueLists = new ArrayList<>();\n+            var statusList = List.of(\"Draft\", \"Submitted\", \"Candidate\", \"Proposed to Target\",\n+                    \"Proposed to Drop\", \"Closed\", \"Targeted\", \"Integrated\", \"Completed\");\n+            for (int i = 1; i <= 9; i++) {\n+                issueLists.add(issueProject.createIssue(statusList.get(i - 1) + \" jep\", List.of(\"Jep body\"), Map.of(\"issuetype\", JSON.of(\"JEP\"),\n+                        \"status\", JSON.object().put(\"name\", statusList.get(i - 1)), JiraProject.JEP_NUMBER, JSON.of(String.valueOf(i)))));\n+            }\n+            issueLists.add(issueProject.createIssue(\"The jep issue\", List.of(\"Jep body\"),\n+                    Map.of(\"issuetype\", JSON.of(\"JEP\"), \"status\", JSON.object().put(\"name\", \"Closed\"),\n+                            \"resolution\", JSON.object().put(\"name\", \"Delivered\"), JiraProject.JEP_NUMBER, JSON.of(\"10\"))));\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, repo.url(), \"edit\", true);\n+            var pr = credentials.createPullRequest(repo, \"master\", \"edit\", mainIssue.id() + \": \" + mainIssue.title());\n+\n+            \/\/ PR should not have the `jep` label at first\n+            TestBotRunner.runPeriodicItems(jepBot);\n+            assertFalse(pr.labelNames().contains(JEPBot.JEP_LABEL));\n+\n+            \/\/ Test draft\/submitted\/candidate\/proposedToTarget\/proposedToDrop\/closedWithoutDelivered JEPs\n+            for (int i = 1; i <= 6; i++) {\n+                pr.addComment(String.format(jepMarker, i, issueLists.get(i - 1).id(), issueLists.get(i - 1).title()));\n+                pr.removeLabel(JEPBot.JEP_LABEL);\n+                TestBotRunner.runPeriodicItems(jepBot);\n+                assertTrue(pr.labelNames().contains(JEPBot.JEP_LABEL));\n+            }\n+\n+            \/\/ PR should have the `jep` label\n+            TestBotRunner.runPeriodicItems(jepBot);\n+            assertTrue(pr.labelNames().contains(JEPBot.JEP_LABEL));\n+            \/\/ Remove the `jep` label for the following test\n+            pr.removeLabel(JEPBot.JEP_LABEL);\n+\n+            \/\/ Test targeted\/integrated\/completed\/closedWithDelivered JEPs\n+            for (int i = 7; i <= 10; i++) {\n+                pr.addComment(String.format(jepMarker, i, issueLists.get(i - 1).id(), issueLists.get(i - 1).title()));\n+                pr.addLabel(JEPBot.JEP_LABEL);\n+                TestBotRunner.runPeriodicItems(jepBot);\n+                assertFalse(pr.labelNames().contains(JEPBot.JEP_LABEL));\n+            }\n+        }\n+    }\n+\n+    @Test\n+    void testJepCommentNotExist(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var repo = credentials.getHostedRepository();\n+            var issueProject = credentials.getIssueProject();\n+            var jepBot = new JEPBot(repo, issueProject);\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), repo.repositoryType(),\n+                    Path.of(\"appendable.txt\"), Set.of(\"issues\"), null);\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, repo.url(), \"master\", true);\n+\n+            var mainIssue = issueProject.createIssue(\"The main issue\", List.of(\"main\"), Map.of(\"issuetype\", JSON.of(\"Bug\")));\n+            issueProject.createIssue(\"Demo jep\", List.of(\"Jep body\"), Map.of(\"issuetype\", JSON.of(\"JEP\"),\n+                        \"status\", JSON.object().put(\"name\", \"Targeted\"), JiraProject.JEP_NUMBER, JSON.of(\"1\")));\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, repo.url(), \"edit\", true);\n+            var pr = credentials.createPullRequest(repo, \"master\", \"edit\", mainIssue.id() + \": \" + mainIssue.title());\n+\n+            \/\/ PR should not have the `jep` label at first\n+            TestBotRunner.runPeriodicItems(jepBot);\n+            assertFalse(pr.labelNames().contains(JEPBot.JEP_LABEL));\n+\n+            \/\/ Add the `jep` label and don't add the jep comment\n+            pr.addLabel(JEPBot.JEP_LABEL);\n+            assertTrue(pr.labelNames().contains(JEPBot.JEP_LABEL));\n+\n+            TestBotRunner.runPeriodicItems(jepBot);\n+            assertFalse(pr.labelNames().contains(JEPBot.JEP_LABEL));\n+        }\n+    }\n+\n+    @Test\n+    void testJepUnneeded(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var repo = credentials.getHostedRepository();\n+            var issueProject = credentials.getIssueProject();\n+            var jepBot = new JEPBot(repo, issueProject);\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), repo.repositoryType(),\n+                    Path.of(\"appendable.txt\"), Set.of(\"issues\"), null);\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, repo.url(), \"master\", true);\n+\n+            var mainIssue = issueProject.createIssue(\"The main issue\", List.of(\"main\"), Map.of(\"issuetype\", JSON.of(\"Bug\")));\n+            issueProject.createIssue(\"Demo jep\", List.of(\"Jep body\"), Map.of(\"issuetype\", JSON.of(\"JEP\"),\n+                    \"status\", JSON.object().put(\"name\", \"Targeted\"), JiraProject.JEP_NUMBER, JSON.of(\"1\")));\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, repo.url(), \"edit\", true);\n+            var pr = credentials.createPullRequest(repo, \"master\", \"edit\", mainIssue.id() + \": \" + mainIssue.title());\n+\n+            \/\/ PR should not have the `jep` label at first\n+            TestBotRunner.runPeriodicItems(jepBot);\n+            assertFalse(pr.labelNames().contains(JEPBot.JEP_LABEL));\n+\n+            \/\/ Add the `jep` label and add the jep unneeded comment\n+            pr.addComment(String.format(jepMarker, \"unneeded\", \"unneeded\", \"unneeded\"));\n+            pr.addLabel(JEPBot.JEP_LABEL);\n+            assertTrue(pr.labelNames().contains(JEPBot.JEP_LABEL));\n+\n+            TestBotRunner.runPeriodicItems(jepBot);\n+            assertFalse(pr.labelNames().contains(JEPBot.JEP_LABEL));\n+        }\n+    }\n+\n+    @Test\n+    void testIssueNotExist(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var repo = credentials.getHostedRepository();\n+            var issueProject = credentials.getIssueProject();\n+            var jepBot = new JEPBot(repo, issueProject);\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), repo.repositoryType(),\n+                    Path.of(\"appendable.txt\"), Set.of(\"issues\"), null);\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, repo.url(), \"master\", true);\n+\n+            var mainIssue = issueProject.createIssue(\"The main issue\", List.of(\"main\"), Map.of(\"issuetype\", JSON.of(\"Bug\")));\n+            issueProject.createIssue(\"Demo jep\", List.of(\"Jep body\"), Map.of(\"issuetype\", JSON.of(\"JEP\"),\n+                    \"status\", JSON.object().put(\"name\", \"Targeted\"), JiraProject.JEP_NUMBER, JSON.of(\"1\")));\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, repo.url(), \"edit\", true);\n+            var pr = credentials.createPullRequest(repo, \"master\", \"edit\", mainIssue.id() + \": \" + mainIssue.title());\n+\n+            \/\/ PR should not have the `jep` label at first\n+            TestBotRunner.runPeriodicItems(jepBot);\n+            assertFalse(pr.labelNames().contains(JEPBot.JEP_LABEL));\n+\n+            \/\/ Add the `jep` label and add the non-existing jep comment\n+            pr.addComment(String.format(jepMarker, \"100\", \"TEST-100\", \"Demo jep\"));\n+            pr.addLabel(JEPBot.JEP_LABEL);\n+            assertTrue(pr.labelNames().contains(JEPBot.JEP_LABEL));\n+\n+            TestBotRunner.runPeriodicItems(jepBot);\n+            assertTrue(pr.labelNames().contains(JEPBot.JEP_LABEL));\n+        }\n+    }\n+\n+    @Test\n+    void testErrorIssueType(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var repo = credentials.getHostedRepository();\n+            var issueProject = credentials.getIssueProject();\n+            var jepBot = new JEPBot(repo, issueProject);\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), repo.repositoryType(),\n+                    Path.of(\"appendable.txt\"), Set.of(\"issues\"), null);\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, repo.url(), \"master\", true);\n+\n+            var mainIssue = issueProject.createIssue(\"The main issue\", List.of(\"main\"), Map.of(\"issuetype\", JSON.of(\"Bug\")));\n+            issueProject.createIssue(\"Demo jep\", List.of(\"Jep body\"), Map.of(\"issuetype\", JSON.of(\"Enhancement\"),\n+                    \"status\", JSON.object().put(\"name\", \"Targeted\"), JiraProject.JEP_NUMBER, JSON.of(\"1\")));\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, repo.url(), \"edit\", true);\n+            var pr = credentials.createPullRequest(repo, \"master\", \"edit\", mainIssue.id() + \": \" + mainIssue.title());\n+\n+            \/\/ PR should not have the `jep` label at first\n+            TestBotRunner.runPeriodicItems(jepBot);\n+            assertFalse(pr.labelNames().contains(JEPBot.JEP_LABEL));\n+\n+            \/\/ Add the `jep` label and add the wrong type issue comment\n+            pr.addComment(String.format(jepMarker, \"1\", \"TEST-2\", \"Demo jep\"));\n+            pr.addLabel(JEPBot.JEP_LABEL);\n+            assertTrue(pr.labelNames().contains(JEPBot.JEP_LABEL));\n+\n+            TestBotRunner.runPeriodicItems(jepBot);\n+            assertTrue(pr.labelNames().contains(JEPBot.JEP_LABEL));\n+        }\n+    }\n+}\n","filename":"bots\/jep\/src\/test\/java\/org\/openjdk\/skara\/bots\/jep\/JEPBotTests.java","additions":250,"deletions":0,"binary":false,"changes":250,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -154,1 +154,1 @@\n-                           .filter(mr -> !mr.group(2).endsWith(\" (**CSR**)\"))\n+                           .filter(mr -> !mr.group(2).endsWith(\" (**CSR**)\") && !mr.group(2).endsWith(\" (**JEP**)\"))\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/PullRequestWorkItem.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import org.openjdk.skara.issuetracker.jira.JiraProject;\n@@ -447,0 +448,60 @@\n+    @Test\n+    void testJepIssue(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+\n+            var repo = credentials.getHostedRepository();\n+            var repoFolder = tempFolder.path().resolve(\"repo\");\n+            var localRepo = CheckableRepository.init(repoFolder, repo.repositoryType());\n+            credentials.commitLock(localRepo);\n+            localRepo.pushAll(repo.url());\n+\n+            var issueProject = credentials.getIssueProject();\n+            var storageFolder = tempFolder.path().resolve(\"storage\");\n+            var notifyBot = testBotBuilder(repo, issueProject, storageFolder, JSON.object()).create(\"notify\", JSON.object());\n+\n+            \/\/ Initialize history\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ Create an issue and a jep issue.\n+            var authorEmailAddress = issueProject.issueTracker().currentUser().username() + \"@openjdk.org\";\n+            var issue = issueProject.createIssue(\"This is an issue\", List.of(\"Issue body\"),\n+                    Map.of(\"issuetype\", JSON.of(\"Enhancement\")));\n+            var jepIssue = issueProject.createIssue(\"This is a jep\", List.of(\"Jep body\"),\n+                    Map.of(\"issuetype\", JSON.of(\"JEP\"), \"status\", JSON.object().put(\"name\", \"Submitted\"), JiraProject.JEP_NUMBER, JSON.of(\"123\")));\n+\n+            \/\/ Push a commit and create a pull request\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, \"Another line\",\n+                    issue.id() + \": This is an issue\\n\", \"Duke\", authorEmailAddress);\n+            localRepo.push(editHash, repo.url(), \"master\");\n+            var pr = credentials.createPullRequest(repo, \"edit\", \"master\", issue.id() + \": This is an issue\");\n+            pr.setBody(\"\\n\\n### Issues\\n\" +\n+                    \" * [\" + issue.id() + \"](http:\/\/www.test.test\/): This is an issue\\n\" +\n+                    \" * [\" + jepIssue.id() + \"](http:\/\/www.test2.test\/): This is a jep (**JEP**)\");\n+            pr.addLabel(\"rfr\");\n+            pr.addComment(\"This is now ready\");\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ Get the issues.\n+            var updatedIssue = issueProject.issue(issue.id()).orElseThrow();\n+            var updatedJepIssue = issueProject.issue(jepIssue.id()).orElseThrow();\n+\n+            \/\/ Non-jep issue should have the PR link and PR comment.\n+            var issueLinks = updatedIssue.links();\n+            assertEquals(1, issueLinks.size());\n+            assertEquals(pr.webUrl(), issueLinks.get(0).uri().orElseThrow());\n+\n+            var issueComments = updatedIssue.comments();\n+            assertEquals(1, issueComments.size());\n+            assertTrue(issueComments.get(0).body().contains(pullRequestTip));\n+            assertTrue(issueComments.get(0).body().contains(pr.webUrl().toString()));\n+\n+            \/\/ jep issue shouldn't have the PR link or PR comment.\n+            var jepIssueLinks = updatedJepIssue.links();\n+            assertEquals(0, jepIssueLinks.size());\n+\n+            var jepIssueComments = updatedJepIssue.comments();\n+            assertEquals(0, jepIssueComments.size());\n+        }\n+    }\n+\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifierTests.java","additions":62,"deletions":1,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -114,1 +114,1 @@\n-    private List<Issue> issues(boolean withCsr) {\n+    private List<Issue> issues(boolean withCsr, boolean withJep) {\n@@ -123,0 +123,3 @@\n+            if (withJep) {\n+                getJepIssue().ifPresent(issues::add);\n+            }\n@@ -154,0 +157,28 @@\n+    private Optional<Issue> getJepIssue() {\n+        var comment = getJepComment();\n+        if (comment.isPresent()) {\n+            return Issue.fromStringRelaxed(comment.get().group(2) + \": \" + comment.get().group(3));\n+        }\n+        return Optional.empty();\n+    }\n+\n+    private Optional<Matcher> getJepComment() {\n+        var jepComment = pr.comments().stream()\n+                .filter(comment -> comment.author().equals(pr.repository().forge().currentUser()))\n+                .flatMap(comment -> comment.body().lines())\n+                .map(JEPCommand.jepMarkerPattern::matcher)\n+                .filter(Matcher::find)\n+                .reduce((first, second) -> second)\n+                .orElse(null);\n+        if (jepComment == null) {\n+            return Optional.empty();\n+        }\n+\n+        var issueId = jepComment.group(2);\n+        if (\"unneeded\".equals(issueId)) {\n+            return  Optional.empty();\n+        }\n+\n+        return Optional.of(jepComment);\n+    }\n+\n@@ -221,0 +252,8 @@\n+        if (pr.labelNames().contains(\"jep\")) {\n+            ret.put(\"Change requires a JEP request to be targeted\", false);\n+        } else {\n+            var comment = getJepComment();\n+            if (comment.isPresent()) {\n+                ret.put(\"Change requires a JEP request to be targeted\", true);\n+            }\n+        }\n@@ -238,1 +277,1 @@\n-        var issues = issues(false);\n+        var issues = issues(false, false);\n@@ -543,1 +582,1 @@\n-        var issues = issues(true);\n+        var issues = issues(true, true);\n@@ -573,0 +612,3 @@\n+                            if (issueType != null && \"JEP\".equals(issueType.asString())) {\n+                                progressBody.append(\" (**JEP**)\");\n+                            }\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":46,"deletions":4,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,1 @@\n-    private final Pattern metadataComments = Pattern.compile(\"<!-- (?:(add|remove) (?:contributor|reviewer))|(?:summary: ')|(?:solves: ')|(?:additional required reviewers)\");\n+    private final Pattern metadataComments = Pattern.compile(\"<!-- (?:(add|remove) (?:contributor|reviewer))|(?:summary: ')|(?:solves: ')|(?:additional required reviewers)|(?:jep: ')\");\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckWorkItem.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import org.openjdk.skara.vcs.*;\n@@ -37,2 +36,2 @@\n-    default void handle(PullRequestBot bot, PullRequest pr, CensusInstance censusInstance, Path scratchPath, CommandInvocation command, List<Comment> allComments, PrintWriter reply)\n-    {\n+    default void handle(PullRequestBot bot, PullRequest pr, CensusInstance censusInstance, Path scratchPath,\n+                        CommandInvocation command, List<Comment> allComments, PrintWriter reply) {\n@@ -40,0 +39,6 @@\n+\n+    default void handle(PullRequestBot bot, PullRequest pr, CensusInstance censusInstance, Path scratchPath, CommandInvocation command,\n+                        List<Comment> allComments, PrintWriter reply, List<String> labelsToAdd, List<String> labelsToRemove) {\n+        handle(bot, pr, censusInstance, scratchPath, command, allComments, reply);\n+    }\n+\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CommandHandler.java","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,156 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.skara.bots.pr;\n+\n+import org.openjdk.skara.forge.PullRequest;\n+import org.openjdk.skara.issuetracker.Comment;\n+import org.openjdk.skara.issuetracker.Issue;\n+import org.openjdk.skara.issuetracker.jira.JiraProject;\n+\n+import java.io.PrintWriter;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.regex.Pattern;\n+\n+public class JEPCommand implements CommandHandler {\n+    static final String JEP_LABEL = \"jep\";\n+    private static final String jepMarker = \"<!-- jep: '%s' '%s' '%s' -->\"; \/\/ <!-- jep: 'JEP-ID' 'ISSUE-ID' 'ISSUE-TITLE' -->\n+    static final Pattern jepMarkerPattern = Pattern.compile(\"<!-- jep: '(.*?)' '(.*?)' '(.*?)' -->\");\n+    private static final String unneededMarker = \"<!-- jep: 'unneeded' 'unneeded' 'unneeded' -->\";\n+\n+    private void showHelp(PrintWriter reply) {\n+        reply.println(\"\"\"\n+                Command syntax:\n+                 * `\/jep <issue-id>`\n+                 * `\/jep JEP-<jep-id>`\n+                 * `\/jep jep-<jep-id>`\n+                 * `\/jep unneeded`\n+\n+                Some examples:\n+\n+                 * `\/jep JDK-1234567`\n+                 * `\/jep 1234567`\n+                 * `\/jep jep-123`\n+                 * `\/jep JEP-123`\n+                 * `\/jep unneeded`\n+\n+                Note:\n+                The project prefix (`JDK-` in the above examples) is optional if you use an issue ID.\n+                The issue type in that case must be `JEP`.\n+                The `JEP-` or `jep-` prefix is required if you instead provide a JEP ID.\n+                \"\"\");\n+    }\n+\n+    private Optional<Issue> getJepIssue(String args, PullRequestBot bot) {\n+        Optional<Issue> jbsIssue;\n+        if (args.startsWith(\"jep-\") || args.startsWith(\"JEP-\") || args.startsWith(\"Jep-\")) {\n+            \/\/ Handle the JEP ID\n+            jbsIssue = bot.issueProject().jepIssue(args.substring(4));\n+        } else {\n+            \/\/ Handle the issue ID\n+            jbsIssue = bot.issueProject().issue(args);\n+        }\n+        return jbsIssue;\n+    }\n+\n+    @Override\n+    public void handle(PullRequestBot bot, PullRequest pr, CensusInstance censusInstance, Path scratchPath, CommandInvocation command,\n+                       List<Comment> allComments, PrintWriter reply, List<String> labelsToAdd, List<String> labelsToRemove) {\n+        if (!pr.author().equals(command.user()) && !censusInstance.isReviewer(command.user())) {\n+            reply.println(\"only the pull request author and [Reviewers](https:\/\/openjdk.java.net\/bylaws#reviewer) are allowed to use the `jep` command.\");\n+            return;\n+        }\n+\n+        var args = command.args().trim();\n+        if (args.isEmpty() || args.isBlank()) {\n+            showHelp(reply);\n+            return;\n+        }\n+\n+        var labelNames = pr.labelNames();\n+        if (\"unneeded\".equals(args) || \"uneeded\".equals(args)) {\n+            if (labelNames.contains(JEP_LABEL)) {\n+                labelsToRemove.add(JEP_LABEL);\n+            }\n+            reply.println(unneededMarker);\n+            reply.println(\"determined that the JEP request is not needed for this pull request.\");\n+            return;\n+        }\n+\n+        \/\/ Get the issue\n+        var jbsIssueOpt = getJepIssue(args, bot);\n+        if (jbsIssueOpt.isEmpty()) {\n+            reply.println(\"The JEP issue was not found. Please make sure you have entered it correctly.\");\n+            showHelp(reply);\n+            return;\n+        }\n+        var jbsIssue = jbsIssueOpt.get();\n+\n+        \/\/ Verify whether the issue type is a JEP\n+        var issueType = jbsIssue.properties().get(\"issuetype\");\n+        if (issueType == null || !\"JEP\".equals(issueType.asString())) {\n+            reply.println(\"The issue `\" + jbsIssue.id() + \"` is not a JEP. Please make sure you have entered it correctly.\");\n+            showHelp(reply);\n+            return;\n+        }\n+\n+        \/\/ Get the issue status\n+        var issueStatus = jbsIssue.properties().get(\"status\").get(\"name\").asString();\n+        var resolution = jbsIssue.properties().get(\"resolution\");\n+        String resolutionName = \"\";\n+        if (resolution != null && !resolution.isNull() &&\n+                resolution.get(\"name\") != null && !resolution.get(\"name\").isNull()) {\n+            resolutionName = resolution.get(\"name\").asString();\n+        }\n+\n+        \/\/ Set the marker and output the result\n+        var jepNumber = jbsIssue.properties().get(JiraProject.JEP_NUMBER).asString();\n+        reply.println(String.format(jepMarker, jepNumber, jbsIssue.id(), jbsIssue.title()));\n+        if (\"Targeted\".equals(issueStatus) || \"Integrated\".equals(issueStatus) ||\n+            \"Completed\".equals(issueStatus) || (\"Closed\".equals(issueStatus) && \"Delivered\".equals(resolutionName))) {\n+            reply.println(\"the JEP for this pull request, [JEP-\" + jepNumber + \"](\" + jbsIssue.webUrl() + \"), has already been targeted.\");\n+            if (labelNames.contains(JEP_LABEL)) {\n+                labelsToRemove.add(JEP_LABEL);\n+            }\n+        } else {\n+            \/\/ The current issue status may be \"Draft\", \"Submitted\", \"Candidate\", \"Proposed to Target\", \"Proposed to Drop\" or \"Closed without Delivered\"\n+            reply.println(\"this pull request will not be integrated until the [JEP-\" + jepNumber\n+                    + \"](\" + jbsIssue.webUrl() + \")\" + \" has been targeted.\");\n+            if (!labelNames.contains(JEP_LABEL)) {\n+                labelsToAdd.add(JEP_LABEL);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public String description() {\n+        return \"require a JDK Enhancement Proposal (JEP) for this pull request\";\n+    }\n+\n+    @Override\n+    public boolean allowedInBody() {\n+        return true;\n+    }\n+}\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/JEPCommand.java","additions":156,"deletions":0,"binary":false,"changes":156,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,0 +55,1 @@\n+            Map.entry(\"jep\", new JEPCommand()),\n@@ -149,0 +150,23 @@\n+    private void changeLabelsAfterComment(List<String> labelsToAdd, List<String> labelsToRemove){\n+        if (labelsToAdd != null && !labelsToAdd.isEmpty()) {\n+            for (var label : labelsToAdd) {\n+                if (!pr.labelNames().contains(label)) {\n+                    log.info(\"Adding \" + label + \" label to \" + describe(pr));\n+                    pr.addLabel(label);\n+                }\n+            }\n+        }\n+        if (labelsToRemove != null && !labelsToRemove.isEmpty()) {\n+            for (var label : labelsToRemove) {\n+                if (pr.labelNames().contains(label)) {\n+                    log.info(\"Removing \" + label + \" label from \" + describe(pr));\n+                    pr.removeLabel(label);\n+                }\n+            }\n+        }\n+    }\n+\n+    private String describe(PullRequest pr) {\n+        return pr.repository().name() + \"#\" + pr.id();\n+    }\n+\n@@ -182,1 +206,6 @@\n-                    handler.get().handle(bot, pr, censusInstance, scratchPath, command, allComments, printer);\n+                    var labelsToAdd = new ArrayList<String>();\n+                    var labelsToRemove = new ArrayList<String>();\n+                    handler.get().handle(bot, pr, censusInstance, scratchPath, command, allComments, printer, labelsToAdd, labelsToRemove);\n+                    pr.addComment(writer.toString());\n+                    changeLabelsAfterComment(labelsToAdd, labelsToRemove);\n+                    return;\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestCommandWorkItem.java","additions":31,"deletions":2,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,0 +42,1 @@\n+import static org.openjdk.skara.issuetracker.jira.JiraProject.JEP_NUMBER;\n@@ -1192,0 +1193,65 @@\n+    @Test\n+    void testJepIssue(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var bot = credentials.getHostedRepository();\n+            var issueProject = credentials.getIssueProject();\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addAuthor(author.forge().currentUser().id())\n+                    .addReviewer(reviewer.forge().currentUser().id());\n+            var checkBot = PullRequestBot.newBuilder().repo(bot).issueProject(issueProject)\n+                    .censusRepo(censusBuilder.build()).build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType(),\n+                    Path.of(\"appendable.txt\"), Set.of(\"issues\"), null);\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            var mainIssue = issueProject.createIssue(\"The main issue\", List.of(\"main\"), Map.of(\"issuetype\", JSON.of(\"Bug\")));\n+            var jepIssue = issueProject.createIssue(\"The jep issue\", List.of(\"Jep body\"),\n+                    Map.of(\"issuetype\", JSON.of(\"JEP\"), \"status\", JSON.object().put(\"name\", \"Submitted\"), JEP_NUMBER, JSON.of(\"123\")));\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", mainIssue.id() + \": \" + mainIssue.title());\n+\n+            \/\/ PR should have one issue\n+            TestBotRunner.runPeriodicItems(checkBot);\n+            assertTrue(pr.body().contains(\"### Issue\"));\n+            assertFalse(pr.body().contains(\"### Issues\"));\n+            assertTrue(pr.body().contains(\"The main issue\"));\n+            assertFalse(pr.body().contains(\"The jep issue (**JEP**)\"));\n+\n+            \/\/ Require jep\n+            pr.addComment(\"\/jep JEP-123\");\n+\n+            \/\/ PR should have two issues\n+            TestBotRunner.runPeriodicItems(checkBot);\n+            assertTrue(pr.body().contains(\"### Issues\"));\n+            assertTrue(pr.body().contains(\"The main issue\"));\n+            assertTrue(pr.body().contains(\"The jep issue (**JEP**)\"));\n+\n+            \/\/ Set the state of the jep issue to `Targeted`.\n+            \/\/ This step is not necessary, because the JEPBot is not actually running\n+            \/\/ in this test case. But it is good to keep it to show the logic.\n+            jepIssue.setProperty(\"status\", JSON.object().put(\"name\", \"Targeted\"));\n+\n+            \/\/ Simulate the JEPBot to remove the `jep` label when the jep issue has been targeted.\n+            jepIssue.removeLabel(\"jep\");\n+\n+            \/\/ Push a commit to trigger the check which can update the PR body.\n+            var newHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(newHash, author.url(), \"edit\", false);\n+\n+            \/\/ PR should have two issues even though the jep issue has been targeted\n+            TestBotRunner.runPeriodicItems(checkBot);\n+            assertTrue(pr.body().contains(\"### Issues\"));\n+            assertTrue(pr.body().contains(\"The main issue\"));\n+            assertTrue(pr.body().contains(\"The jep issue (**JEP**)\"));\n+        }\n+    }\n+\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CheckTests.java","additions":67,"deletions":1,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -0,0 +1,431 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bots.pr;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInfo;\n+import org.openjdk.skara.issuetracker.jira.JiraProject;\n+import org.openjdk.skara.json.JSON;\n+import org.openjdk.skara.test.CheckableRepository;\n+import org.openjdk.skara.test.HostCredentials;\n+import org.openjdk.skara.test.TemporaryDirectory;\n+import org.openjdk.skara.test.TestBotRunner;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.openjdk.skara.bots.pr.PullRequestAsserts.assertLastCommentContains;\n+\n+public class JEPCommandTests {\n+    @Test\n+    void testNormal(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var bot = credentials.getHostedRepository();\n+            var issueProject = credentials.getIssueProject();\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addAuthor(author.forge().currentUser().id())\n+                    .addReviewer(reviewer.forge().currentUser().id());\n+            var prBot = PullRequestBot.newBuilder().repo(bot).issueProject(issueProject)\n+                    .censusRepo(censusBuilder.build()).build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType(),\n+                    Path.of(\"appendable.txt\"), Set.of(\"issues\"), null);\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            var mainIssue = issueProject.createIssue(\"The main issue\", List.of(\"main\"), Map.of(\"issuetype\", JSON.of(\"Bug\")));\n+            var jepIssue = issueProject.createIssue(\"The jep issue\", List.of(\"Jep body\"),\n+                    Map.of(\"issuetype\", JSON.of(\"JEP\"), \"status\", JSON.object().put(\"name\", \"Submitted\"), JiraProject.JEP_NUMBER, JSON.of(\"123\")));\n+            var jepIssueTargeted = issueProject.createIssue(\"The jep issue\", List.of(\"Jep body\"),\n+                    Map.of(\"issuetype\", JSON.of(\"JEP\"), \"status\", JSON.object().put(\"name\", \"Targeted\"), JiraProject.JEP_NUMBER, JSON.of(\"234\")));\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", mainIssue.id() + \": \" + mainIssue.title());\n+            var prAsReviewer = reviewer.pullRequest(pr.id());\n+\n+            \/\/ PR should not have the `jep` label\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertFalse(pr.labelNames().contains(JEPCommand.JEP_LABEL));\n+\n+            \/\/ Require jep by using `JEP-<id>`\n+            pr.addComment(\"\/jep JEP-123\");\n+\n+            \/\/ Verify the behavior\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertTrue(pr.labelNames().contains(JEPCommand.JEP_LABEL));\n+            assertLastCommentContains(pr, \"this pull request will not be integrated until the [JEP-\");\n+            assertLastCommentContains(pr, \"has been targeted.\");\n+            assertTrue(pr.body().contains(\"- [ ] Change requires a JEP request to be targeted\"));\n+\n+            \/\/ Not require jep\n+            prAsReviewer.addComment(\"\/jep unneeded\");\n+\n+            \/\/ Verify the behavior\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertFalse(pr.labelNames().contains(JEPCommand.JEP_LABEL));\n+            assertLastCommentContains(pr, \"determined that the JEP request is not needed for this pull request.\");\n+            assertFalse(pr.body().contains(\"Change requires a JEP request to be targeted\"));\n+\n+            \/\/ Require jep by using `jep-<id>`\n+            pr.addComment(\"\/jep jep-123\");\n+\n+            \/\/ Verify the behavior\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertTrue(pr.labelNames().contains(JEPCommand.JEP_LABEL));\n+            assertLastCommentContains(pr, \"this pull request will not be integrated until the [JEP-\");\n+            assertLastCommentContains(pr, \"has been targeted.\");\n+            assertTrue(pr.body().contains(\"- [ ] Change requires a JEP request to be targeted\"));\n+\n+            \/\/ Not require jep\n+            prAsReviewer.addComment(\"\/jep unneeded\");\n+\n+            \/\/ Verify the behavior\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertFalse(pr.labelNames().contains(JEPCommand.JEP_LABEL));\n+            assertLastCommentContains(pr, \"determined that the JEP request is not needed for this pull request.\");\n+            assertFalse(pr.body().contains(\"Change requires a JEP request to be targeted\"));\n+\n+            \/\/ Require jep by using `Jep-<id>`\n+            pr.addComment(\"\/jep Jep-123\");\n+\n+            \/\/ Verify the behavior\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertTrue(pr.labelNames().contains(JEPCommand.JEP_LABEL));\n+            assertLastCommentContains(pr, \"this pull request will not be integrated until the [JEP-\");\n+            assertLastCommentContains(pr, \"has been targeted.\");\n+            assertTrue(pr.body().contains(\"- [ ] Change requires a JEP request to be targeted\"));\n+\n+            \/\/ Not require jep\n+            prAsReviewer.addComment(\"\/jep unneeded\");\n+\n+            \/\/ Verify the behavior\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertFalse(pr.labelNames().contains(JEPCommand.JEP_LABEL));\n+            assertLastCommentContains(pr, \"determined that the JEP request is not needed for this pull request.\");\n+            assertFalse(pr.body().contains(\"Change requires a JEP request to be targeted\"));\n+\n+            \/\/ Require jep by using `issue-id`(<ProjectName>-<id>)\n+            pr.addComment(\"\/jep TEST-3\");\n+\n+            \/\/ Verify the behavior\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertFalse(pr.labelNames().contains(JEPCommand.JEP_LABEL));\n+            assertLastCommentContains(pr, \"the JEP for this pull request, [JEP-\");\n+            assertLastCommentContains(pr, \"has already been targeted.\");\n+            assertTrue(pr.body().contains(\"- [x] Change requires a JEP request to be targeted\"));\n+\n+            \/\/ Not require jep by using `uneeded`\n+            prAsReviewer.addComment(\"\/jep uneeded\");\n+\n+            \/\/ Verify the behavior\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertFalse(pr.labelNames().contains(JEPCommand.JEP_LABEL));\n+            assertLastCommentContains(pr, \"determined that the JEP request is not needed for this pull request.\");\n+            assertFalse(pr.body().contains(\"Change requires a JEP request to be targeted\"));\n+\n+            \/\/ Require jep by using `issue-id` which doesn't have the project name\n+            pr.addComment(\"\/jep 3\");\n+\n+            \/\/ Verify the behavior\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertFalse(pr.labelNames().contains(JEPCommand.JEP_LABEL));\n+            assertLastCommentContains(pr, \"the JEP for this pull request, [JEP-\");\n+            assertLastCommentContains(pr, \"has already been targeted.\");\n+            assertTrue(pr.body().contains(\"- [x] Change requires a JEP request to be targeted\"));\n+        }\n+    }\n+\n+    @Test\n+    void testAuthorization(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var committer = credentials.getHostedRepository();\n+            var bot = credentials.getHostedRepository();\n+            var issueProject = credentials.getIssueProject();\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addAuthor(author.forge().currentUser().id())\n+                    .addCommitter(committer.forge().currentUser().id())\n+                    .addReviewer(reviewer.forge().currentUser().id());\n+            var prBot = PullRequestBot.newBuilder().repo(bot).issueProject(issueProject)\n+                    .censusRepo(censusBuilder.build()).build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType(),\n+                    Path.of(\"appendable.txt\"), Set.of(\"issues\"), null);\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            var mainIssue = issueProject.createIssue(\"The main issue\", List.of(\"main\"), Map.of(\"issuetype\", JSON.of(\"Bug\")));\n+            var jepIssue = issueProject.createIssue(\"The jep issue\", List.of(\"Jep body\"),\n+                    Map.of(\"issuetype\", JSON.of(\"JEP\"), \"status\", JSON.object().put(\"name\", \"Submitted\"), JiraProject.JEP_NUMBER, JSON.of(\"123\")));\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", mainIssue.id() + \": \" + mainIssue.title());\n+            var prAsReviewer = reviewer.pullRequest(pr.id());\n+            var prAsCommitter = committer.pullRequest(pr.id());\n+\n+            \/\/ PR should not have the `jep` label\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertFalse(pr.labelNames().contains(JEPCommand.JEP_LABEL));\n+\n+            \/\/ Require jep by a committer who is not the PR author\n+            prAsCommitter.addComment(\"\/jep JEP-123\");\n+\n+            \/\/ Verify the behavior\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertFalse(pr.labelNames().contains(JEPCommand.JEP_LABEL));\n+            assertLastCommentContains(pr, \"only the pull request author and [Reviewers]\" +\n+                    \"(https:\/\/openjdk.java.net\/bylaws#reviewer) are allowed to use the `jep` command.\");\n+\n+            \/\/ Require jep by the PR author\n+            pr.addComment(\"\/jep TEST-2\");\n+\n+            \/\/ Verify the behavior\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertTrue(pr.labelNames().contains(JEPCommand.JEP_LABEL));\n+            assertLastCommentContains(pr, \"this pull request will not be integrated until the [JEP-\");\n+            assertLastCommentContains(pr, \"has been targeted.\");\n+            assertTrue(pr.body().contains(\"- [ ] Change requires a JEP request to be targeted\"));\n+\n+            \/\/ Require jep by a reviewer\n+            prAsReviewer.addComment(\"\/jep TEST-2\");\n+\n+            \/\/ Verify the behavior\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertTrue(pr.labelNames().contains(JEPCommand.JEP_LABEL));\n+            assertLastCommentContains(pr, \"this pull request will not be integrated until the [JEP-\");\n+            assertLastCommentContains(pr, \"has been targeted.\");\n+            assertTrue(pr.body().contains(\"- [ ] Change requires a JEP request to be targeted\"));\n+\n+            \/\/ Not require jep by a committer\n+            prAsCommitter.addComment(\"\/jep unneeded\");\n+\n+            \/\/ Verify the behavior\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertTrue(pr.labelNames().contains(JEPCommand.JEP_LABEL));\n+            assertLastCommentContains(pr, \"only the pull request author and [Reviewers]\" +\n+                    \"(https:\/\/openjdk.java.net\/bylaws#reviewer) are allowed to use the `jep` command.\");\n+            assertTrue(pr.body().contains(\"- [ ] Change requires a JEP request to be targeted\"));\n+\n+            \/\/ Not require jep by a reviewer\n+            prAsReviewer.addComment(\"\/jep unneeded\");\n+\n+            \/\/ Verify the behavior\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertFalse(pr.labelNames().contains(JEPCommand.JEP_LABEL));\n+            assertLastCommentContains(pr, \"determined that the JEP request is not needed for this pull request.\");\n+            assertFalse(pr.body().contains(\"Change requires a JEP request to be targeted\"));\n+        }\n+    }\n+\n+    @Test\n+    void testIssueTypo(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var bot = credentials.getHostedRepository();\n+            var issueProject = credentials.getIssueProject();\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addAuthor(author.forge().currentUser().id());\n+            var prBot = PullRequestBot.newBuilder().repo(bot).issueProject(issueProject)\n+                    .censusRepo(censusBuilder.build()).build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType(),\n+                    Path.of(\"appendable.txt\"), Set.of(\"issues\"), null);\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            var mainIssue = issueProject.createIssue(\"The main issue\", List.of(\"main\"), Map.of(\"issuetype\", JSON.of(\"Bug\")));\n+            var jepIssue = issueProject.createIssue(\"The jep issue\", List.of(\"Jep body\"),\n+                    Map.of(\"issuetype\", JSON.of(\"JEP\"), \"status\", JSON.object().put(\"name\", \"Submitted\"), JiraProject.JEP_NUMBER, JSON.of(\"123\")));\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", mainIssue.id() + \": \" + mainIssue.title());\n+\n+            \/\/ PR should not have the `jep` label\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertFalse(pr.labelNames().contains(JEPCommand.JEP_LABEL));\n+\n+            \/\/ Require jep with blank value\n+            pr.addComment(\"\/jep\");\n+\n+            \/\/ Verify the behavior\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertFalse(pr.labelNames().contains(JEPCommand.JEP_LABEL));\n+            assertEquals(3, pr.comments().size());\n+            assertLastCommentContains(pr, \"Command syntax:\");\n+            assertLastCommentContains(pr, \"Some examples:\");\n+            assertFalse(pr.body().contains(\"Change requires a JEP request to be targeted\"));\n+\n+            \/\/ Require jep with blank space\n+            pr.addComment(\"\/jep   \");\n+\n+            \/\/ Verify the behavior\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertFalse(pr.labelNames().contains(JEPCommand.JEP_LABEL));\n+            assertEquals(5, pr.comments().size());\n+            assertLastCommentContains(pr, \"Command syntax:\");\n+            assertLastCommentContains(pr, \"Some examples:\");\n+            assertFalse(pr.body().contains(\"Change requires a JEP request to be targeted\"));\n+\n+            \/\/ Require jep with wrong jep prefix\n+            pr.addComment(\"\/jep je-123\");\n+\n+            \/\/ Verify the behavior\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertFalse(pr.labelNames().contains(JEPCommand.JEP_LABEL));\n+            assertEquals(7, pr.comments().size());\n+            assertLastCommentContains(pr, \"The JEP issue was not found. Please make sure you have entered it correctly.\");\n+            assertFalse(pr.body().contains(\"Change requires a JEP request to be targeted\"));\n+\n+            \/\/ Require jep with wrong jep prefix\n+            pr.addComment(\"\/jep jEP-123\");\n+\n+            \/\/ Verify the behavior\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertFalse(pr.labelNames().contains(JEPCommand.JEP_LABEL));\n+            assertEquals(9, pr.comments().size());\n+            assertLastCommentContains(pr, \"The JEP issue was not found. Please make sure you have entered it correctly.\");\n+            assertFalse(pr.body().contains(\"Change requires a JEP request to be targeted\"));\n+\n+            \/\/ Require jep with wrong project prefix\n+            pr.addComment(\"\/jep TESt-2\");\n+\n+            \/\/ Verify the behavior\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertFalse(pr.labelNames().contains(JEPCommand.JEP_LABEL));\n+            assertEquals(11, pr.comments().size());\n+            assertLastCommentContains(pr, \"The JEP issue was not found. Please make sure you have entered it correctly.\");\n+            assertFalse(pr.body().contains(\"Change requires a JEP request to be targeted\"));\n+\n+            \/\/ Require jep with wrong `jep-id`\n+            pr.addComment(\"\/jep jep-1\");\n+\n+            \/\/ Verify the behavior\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertFalse(pr.labelNames().contains(JEPCommand.JEP_LABEL));\n+            assertEquals(13, pr.comments().size());\n+            assertLastCommentContains(pr, \"The JEP issue was not found. Please make sure you have entered it correctly.\");\n+            assertFalse(pr.body().contains(\"Change requires a JEP request to be targeted\"));\n+\n+            \/\/ Require jep with wrong issue type\n+            pr.addComment(\"\/jep TEST-1\");\n+\n+            \/\/ Verify the behavior\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertFalse(pr.labelNames().contains(JEPCommand.JEP_LABEL));\n+            assertEquals(15, pr.comments().size());\n+            assertLastCommentContains(pr, \"The issue `TEST-1` is not a JEP. Please make sure you have entered it correctly.\");\n+            assertFalse(pr.body().contains(\"Change requires a JEP request to be targeted\"));\n+\n+            \/\/ Require jep with wrong issue type\n+            pr.addComment(\"\/jep 1\");\n+\n+            \/\/ Verify the behavior\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertFalse(pr.labelNames().contains(JEPCommand.JEP_LABEL));\n+            assertEquals(17, pr.comments().size());\n+            assertLastCommentContains(pr, \"The issue `TEST-1` is not a JEP. Please make sure you have entered it correctly.\");\n+            assertFalse(pr.body().contains(\"Change requires a JEP request to be targeted\"));\n+        }\n+    }\n+\n+    @Test\n+    void testJepIssueStatus(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var bot = credentials.getHostedRepository();\n+            var issueProject = credentials.getIssueProject();\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addAuthor(author.forge().currentUser().id());\n+            var prBot = PullRequestBot.newBuilder().repo(bot).issueProject(issueProject)\n+                    .censusRepo(censusBuilder.build()).build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType(),\n+                    Path.of(\"appendable.txt\"), Set.of(\"issues\"), null);\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            var mainIssue = issueProject.createIssue(\"The main issue\", List.of(\"main\"), Map.of(\"issuetype\", JSON.of(\"Bug\")));\n+            var statusList = List.of(\"Draft\", \"Submitted\", \"Candidate\", \"Proposed to Target\",\n+                    \"Proposed to Drop\", \"Closed\", \"Targeted\", \"Integrated\", \"Completed\");\n+            for (int i = 1; i <= 9; i++) {\n+                issueProject.createIssue(statusList.get(i - 1) + \" jep\", List.of(\"Jep body\"), Map.of(\"issuetype\", JSON.of(\"JEP\"),\n+                        \"status\", JSON.object().put(\"name\", statusList.get(i - 1)), JiraProject.JEP_NUMBER, JSON.of(String.valueOf(i))));\n+            }\n+            issueProject.createIssue(\"The jep issue\", List.of(\"Jep body\"),\n+                    Map.of(\"issuetype\", JSON.of(\"JEP\"), \"status\", JSON.object().put(\"name\", \"Closed\"),\n+                           \"resolution\", JSON.object().put(\"name\", \"Delivered\"), JiraProject.JEP_NUMBER, JSON.of(\"10\")));\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", mainIssue.id() + \": \" + mainIssue.title());\n+\n+            \/\/ PR should not have the `jep` label\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertFalse(pr.labelNames().contains(JEPCommand.JEP_LABEL));\n+\n+            \/\/ Test draft\/submitted\/candidate\/proposedToTarget\/proposedToDrop\/closedWithoutDelivered JEPs\n+            for (int i = 1; i <= 6; i++) {\n+                pr.addComment(\"\/jep jep-\" + i);\n+                TestBotRunner.runPeriodicItems(prBot);\n+                assertTrue(pr.labelNames().contains(JEPCommand.JEP_LABEL));\n+                assertEquals(i * 2 + 1, pr.comments().size());\n+                assertLastCommentContains(pr, \"this pull request will not be integrated until the [JEP-\");\n+                assertLastCommentContains(pr, \"has been targeted.\");\n+                assertTrue(pr.body().contains(\"- [ ] Change requires a JEP request to be targeted\"));\n+            }\n+\n+            \/\/ Test targeted\/integrated\/completed\/closedWithDelivered JEPs\n+            for (int i = 7; i <= 10; i++) {\n+                pr.addComment(\"\/jep jep-\" + i);\n+                TestBotRunner.runPeriodicItems(prBot);\n+                assertFalse(pr.labelNames().contains(JEPCommand.JEP_LABEL));\n+                assertEquals(i * 2 + 1, pr.comments().size());\n+                assertLastCommentContains(pr, \"the JEP for this pull request, [JEP-\");\n+                assertLastCommentContains(pr, \"has already been targeted.\");\n+                assertTrue(pr.body().contains(\"- [x] Change requires a JEP request to be targeted\"));\n+            }\n+        }\n+    }\n+}\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/JEPCommandTests.java","additions":431,"deletions":0,"binary":false,"changes":431,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+        opens 'org.openjdk.skara.issuetracker.jira' to 'org.junit.platform.commons'\n","filename":"issuetracker\/build.gradle","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,7 @@\n+\n+    \/**\n+     * Get the JEP issue according to the JEP ID.\n+     * @param jepId JEP ID\n+     * @return the corresponding issue\n+     *\/\n+    Optional<Issue> jepIssue(String jepId);\n","filename":"issuetracker\/src\/main\/java\/org\/openjdk\/skara\/issuetracker\/IssueProject.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,1 @@\n+    public static final String JEP_NUMBER = \"customfield_10701\";\n@@ -217,1 +218,1 @@\n-    private static final Set<String> knownProperties = Set.of(\"issuetype\", \"fixVersions\", \"versions\", \"priority\", \"components\");\n+    private static final Set<String> knownProperties = Set.of(\"issuetype\", \"fixVersions\", \"versions\", \"priority\", \"components\", \"status\");\n@@ -436,0 +437,12 @@\n+    @Override\n+    public Optional<Issue> jepIssue(String jepId) {\n+        var issues = request.post(\"search\")\n+                .body(\"jql\", \"project = \" + projectName + \" AND \\\"JEP Number\\\" ~ \\\"\" + jepId + \"\\\"\")\n+                .execute();\n+        if (issues.get(\"issues\").asArray().size() == 0) {\n+            return Optional.empty();\n+        } else {\n+            return Optional.of(new JiraIssue(this, request, issues.get(\"issues\").asArray().get(0)));\n+        }\n+    }\n+\n","filename":"issuetracker\/src\/main\/java\/org\/openjdk\/skara\/issuetracker\/jira\/JiraProject.java","additions":15,"deletions":2,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.issuetracker.jira;\n+\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import org.openjdk.skara.network.URIBuilder;\n+\n+import java.io.IOException;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\/**\n+ * To be able to run the tests, you need to remove or comment out the @Disabled\n+ * annotation first.\n+ *\/\n+@Disabled(\"Manual\")\n+public class JiraProjectTests {\n+\n+    @Test\n+    void testJepIssue() throws IOException {\n+        var uri = URIBuilder.base(\"https:\/\/bugs.openjdk.java.net\").build();\n+        var jiraHost = new JiraIssueTrackerFactory().create(uri, null, null);\n+        var jiraProject = jiraHost.project(\"JDK\");\n+\n+        \/\/ Test a closed JEP. Note: all the JEPs may be changed to state `Closed` in the end.\n+        var closedJepOpt = jiraProject.jepIssue(\"421\");\n+        assertTrue(closedJepOpt.isPresent());\n+        var closedJep = closedJepOpt.get();\n+        assertEquals(\"Closed\", closedJep.properties().get(\"status\").get(\"name\").asString());\n+        assertEquals(\"Delivered\", closedJep.properties().get(\"resolution\").get(\"name\").asString());\n+        assertEquals(\"JEP\", closedJep.properties().get(\"issuetype\").asString());\n+        assertEquals(\"421\", closedJep.properties().get(JiraProject.JEP_NUMBER).asString());\n+\n+        \/\/ Test a non-existing JEP (large JEP number).\n+        var nonExistingJepOpt = jiraProject.jepIssue(\"100000000000\");\n+        assertTrue(nonExistingJepOpt.isEmpty());\n+\n+        \/\/ Test the wrong JEP (number with alphabet).\n+        var wrongNumberJepOpt = jiraProject.jepIssue(\"JDK-123\");\n+        assertTrue(wrongNumberJepOpt.isEmpty());\n+    }\n+}\n","filename":"issuetracker\/src\/test\/java\/org\/openjdk\/skara\/issuetracker\/jira\/JiraProjectTests.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,0 +63,1 @@\n+include 'bots:jep'\n","filename":"settings.gradle","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import org.openjdk.skara.issuetracker.jira.JiraProject;\n@@ -222,0 +223,14 @@\n+    TestIssue getJepIssue(TestIssueProject issueProject, String jepId) {\n+        var jepIssue = data.issues.entrySet().stream()\n+                .sorted(Map.Entry.comparingByKey())\n+                .map(issue -> getIssue(issueProject, issue.getKey()))\n+                .filter(issue -> {\n+                    var issueType = issue.data.properties.get(\"issuetype\");\n+                    var jepNumber = issue.data.properties.get(JiraProject.JEP_NUMBER);\n+                    return issueType != null && \"JEP\".equals(issueType.asString()) &&\n+                           jepNumber != null && jepId.equals(jepNumber.asString());\n+                })\n+                .findFirst();\n+        return jepIssue.orElse(null);\n+    }\n+\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestHost.java","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -70,0 +70,5 @@\n+    @Override\n+    public Optional<Issue> jepIssue(String jepId) {\n+        return Optional.ofNullable(host.getJepIssue(this, jepId));\n+    }\n+\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestIssueProject.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"}]}