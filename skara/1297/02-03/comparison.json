{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+        opens 'org.openjdk.skara.issuetracker.jira' to 'org.junit.platform.commons'\n","filename":"issuetracker\/build.gradle","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -218,1 +218,1 @@\n-    private static final Set<String> knownProperties = Set.of(\"issuetype\", \"fixVersions\", \"versions\", \"priority\", \"components\");\n+    private static final Set<String> knownProperties = Set.of(\"issuetype\", \"fixVersions\", \"versions\", \"priority\", \"components\", \"status\");\n","filename":"issuetracker\/src\/main\/java\/org\/openjdk\/skara\/issuetracker\/jira\/JiraProject.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.issuetracker.jira;\n+\n+import org.junit.jupiter.api.Test;\n+import org.openjdk.skara.network.URIBuilder;\n+\n+import java.io.IOException;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class JiraProjectTests {\n+\n+    @Test\n+    void testJepIssue() throws IOException {\n+        var uri = URIBuilder.base(\"https:\/\/bugs.openjdk.java.net\").build();\n+        var jiraHost = new JiraIssueTrackerFactory().create(uri, null, null);\n+        var jiraProject = jiraHost.project(\"JDK\");\n+\n+        \/\/ Test a closed JEP. Note: all the JEPs may be changed to state `Closed` in the end.\n+        var closedJepOpt = jiraProject.jepIssue(\"421\");\n+        assertTrue(closedJepOpt.isPresent());\n+        var closedJep = closedJepOpt.get();\n+        assertEquals(\"Closed\", closedJep.properties().get(\"status\").get(\"name\").asString());\n+        assertEquals(\"Delivered\", closedJep.properties().get(\"resolution\").get(\"name\").asString());\n+        assertEquals(\"JEP\", closedJep.properties().get(\"issuetype\").asString());\n+        assertEquals(\"421\", closedJep.properties().get(JiraProject.JEP_NUMBER).asString());\n+\n+        \/\/ Test a non-existing JEP (large JEP number).\n+        var nonExistingJepOpt = jiraProject.jepIssue(\"100000000000\");\n+        assertTrue(nonExistingJepOpt.isEmpty());\n+\n+        \/\/ Test the wrong JEP (number with alphabet).\n+        var wrongNumberJepOpt = jiraProject.jepIssue(\"JDK-123\");\n+        assertTrue(wrongNumberJepOpt.isEmpty());\n+    }\n+}\n","filename":"issuetracker\/src\/test\/java\/org\/openjdk\/skara\/issuetracker\/jira\/JiraProjectTests.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"}]}