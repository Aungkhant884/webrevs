{"files":[{"patch":"@@ -318,1 +318,1 @@\n-                \" Webrev: \" + webrev.uri().toString() + \"\\n\" +\n+                (webrev.uri() == null ? \"\" : \" Webrev: \" + webrev.uri().toString() + \"\\n\") +\n@@ -331,12 +331,16 @@\n-            var containsConflicts = webrevs.stream().anyMatch(w -> w.type().equals(WebrevDescription.Type.MERGE_CONFLICT));\n-            var containsMergeDiffs = webrevs.stream().anyMatch(w -> w.type().equals(WebrevDescription.Type.MERGE_TARGET) ||\n-                    w.type().equals(WebrevDescription.Type.MERGE_SOURCE));\n-\n-            webrevLinks = \"The webrev\" + (webrevs.size() > 1 ? \"s\" : \"\") + \" contain\" + (webrevs.size() == 1 ? \"s\" : \"\") + \" \" +\n-                    (containsConflicts ? \"the conflicts with \" + pr.targetRef() : \"\") +\n-                    (containsConflicts && containsMergeDiffs ? \" and \" : \"\") +\n-                    (containsMergeDiffs ? \"the adjustments done while merging with regards to each parent branch\" : \"\")\n-                    +\":\\n\" +\n-                    webrevs.stream()\n-                           .map(d -> String.format(\" - %s: %s\", d.shortLabel(), d.uri()))\n-                           .collect(Collectors.joining(\"\\n\")) + \"\\n\\n\";\n+            if (webrevs.stream().noneMatch(w -> w.uri() != null)) {\n+                webrevLinks = \"\";\n+            } else {\n+                var containsConflicts = webrevs.stream().anyMatch(w -> w.type().equals(WebrevDescription.Type.MERGE_CONFLICT));\n+                var containsMergeDiffs = webrevs.stream().anyMatch(w -> w.type().equals(WebrevDescription.Type.MERGE_TARGET) ||\n+                        w.type().equals(WebrevDescription.Type.MERGE_SOURCE));\n+\n+                webrevLinks = \"The webrev\" + (webrevs.size() > 1 ? \"s\" : \"\") + \" contain\" + (webrevs.size() == 1 ? \"s\" : \"\") + \" \" +\n+                        (containsConflicts ? \"the conflicts with \" + pr.targetRef() : \"\") +\n+                        (containsConflicts && containsMergeDiffs ? \" and \" : \"\") +\n+                        (containsMergeDiffs ? \"the adjustments done while merging with regards to each parent branch\" : \"\")\n+                        + \":\\n\" +\n+                        webrevs.stream()\n+                                .map(d -> String.format(\" - %s: %s\", d.shortLabel(), d.uri()))\n+                                .collect(Collectors.joining(\"\\n\")) + \"\\n\\n\";\n+            }\n@@ -358,1 +362,1 @@\n-                \" Webrev: \" + fullWebrev.uri().toString() + \"\\n\" +\n+                (fullWebrev.uri() == null ? \"\" : \" Webrev: \" + fullWebrev.uri().toString() + \"\\n\") +\n@@ -369,3 +373,3 @@\n-                \"Webrevs:\\n\" +\n-                \" - full: \" + fullWebrev.uri().toString() + \"\\n\" +\n-                \" - incr: \" + incrementalWebrev.uri().toString() + \"\\n\\n\" +\n+                (fullWebrev.uri() == null ? \"\" : \"Webrevs:\\n\") +\n+                (fullWebrev.uri() == null ? \"\" : \" - full: \" + fullWebrev.uri().toString() + \"\\n\") +\n+                (incrementalWebrev.uri() == null ? \"\" : \" - incr: \" + incrementalWebrev.uri().toString() + \"\\n\\n\") +\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/ArchiveMessages.java","additions":21,"deletions":17,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -156,0 +156,3 @@\n+        if (webrevs.stream().noneMatch(w -> w.uri() != null)) {\n+            return;\n+        }\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/ArchiveWorkItem.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3586,0 +3586,232 @@\n+\n+    @Test\n+    void noWebrev(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory();\n+             var archiveFolder = new TemporaryDirectory();\n+             var webrevFolder = new TemporaryDirectory();\n+             var listServer = new TestMailmanServer();\n+             var webrevServer = new TestWebrevServer()) {\n+            var author = credentials.getHostedRepository();\n+            var archive = credentials.getHostedRepository();\n+            var ignored = credentials.getHostedRepository();\n+            var listAddress = EmailAddress.parse(listServer.createList(\"test\"));\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addAuthor(author.forge().currentUser().id());\n+            var from = EmailAddress.from(\"test\", \"test@test.mail\");\n+            var mlBot = MailingListBridgeBot.newBuilder()\n+                    .from(from)\n+                    .repo(author)\n+                    .archive(archive)\n+                    .censusRepo(censusBuilder.build())\n+                    .lists(List.of(new MailingListConfiguration(listAddress, Set.of())))\n+                    .ignoredUsers(Set.of(ignored.forge().currentUser().username()))\n+                    .ignoredComments(Set.of())\n+                    .listArchive(listServer.getArchive())\n+                    .smtpServer(listServer.getSMTP())\n+                    .webrevStorageHTMLRepository(archive)\n+                    .webrevStorageRef(\"webrev\")\n+                    .webrevStorageBase(Path.of(\"test\"))\n+                    .webrevStorageBaseUri(webrevServer.uri())\n+                    .webrevGenerateHTML(false)\n+                    .webrevGenerateJSON(false)\n+                    .readyLabels(Set.of(\"rfr\"))\n+                    .readyComments(Map.of(ignored.forge().currentUser().username(), Pattern.compile(\"ready\")))\n+                    .issueTracker(URIBuilder.base(\"http:\/\/issues.test\/browse\/\").build())\n+                    .headers(Map.of(\"Extra1\", \"val1\", \"Extra2\", \"val2\"))\n+                    .sendInterval(Duration.ZERO)\n+                    .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+            localRepo.push(masterHash, archive.url(), \"webrev\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, \"A simple change\",\n+                    \"Change msg\\n\\nWith several lines\");\n+            localRepo.push(editHash, author.url(), \"edit\", true);\n+            var pr = credentials.createPullRequest(archive, \"master\", \"edit\", \"1234: This is a pull request\");\n+            pr.setBody(\"This should not be ready\");\n+\n+            \/\/ Run an archive pass\n+            TestBotRunner.runPeriodicItems(mlBot);\n+\n+            \/\/ A PR that isn't ready for review should not be archived\n+            Repository.materialize(archiveFolder.path(), archive.url(), \"master\");\n+            assertFalse(archiveContains(archiveFolder.path(), \"This is a pull request\"));\n+\n+            \/\/ Flag it as ready for review\n+            pr.setBody(\"This should now be ready\");\n+            pr.addLabel(\"rfr\");\n+\n+            \/\/ Run another archive pass\n+            TestBotRunner.runPeriodicItems(mlBot);\n+\n+            \/\/ But it should still not be archived\n+            Repository.materialize(archiveFolder.path(), archive.url(), \"master\");\n+            assertFalse(archiveContains(archiveFolder.path(), \"This is a pull request\"));\n+\n+            \/\/ Now post a general comment - not a ready marker\n+            var ignoredPr = ignored.pullRequest(pr.id());\n+            ignoredPr.addComment(\"hello there\");\n+\n+            \/\/ Run another archive pass\n+            TestBotRunner.runPeriodicItems(mlBot);\n+\n+            \/\/ It should still not be archived\n+            Repository.materialize(archiveFolder.path(), archive.url(), \"master\");\n+            assertFalse(archiveContains(archiveFolder.path(), \"This is a pull request\"));\n+\n+            \/\/ Now post a ready comment\n+            ignoredPr.addComment(\"ready\");\n+\n+            \/\/ Run another archive pass\n+            TestBotRunner.runPeriodicItems(mlBot);\n+\n+            \/\/ The archive should now contain an entry\n+            Repository.materialize(archiveFolder.path(), archive.url(), \"master\");\n+            assertTrue(archiveContains(archiveFolder.path(), \"This is a pull request\"));\n+            assertTrue(archiveContains(archiveFolder.path(), \"This should now be ready\"));\n+            assertTrue(archiveContains(archiveFolder.path(), \"Patch:\"));\n+            assertTrue(archiveContains(archiveFolder.path(), \"Changes:\"));\n+            assertTrue(archiveContains(archiveFolder.path(), \"Issue:\"));\n+            assertTrue(archiveContains(archiveFolder.path(), \"http:\/\/issues.test\/browse\/TSTPRJ-1234\"));\n+            assertTrue(archiveContains(archiveFolder.path(), \"Fetch:\"));\n+            assertTrue(archiveContains(archiveFolder.path(), \"^ - Change msg\"));\n+            assertFalse(archiveContains(archiveFolder.path(), \"With several lines\"));\n+            assertFalse(archiveContains(archiveFolder.path(), \"Webrevs\"));\n+\n+            \/\/ The mailing list as well\n+            listServer.processIncoming();\n+            var mailmanServer = MailingListServerFactory.createMailmanServer(listServer.getArchive(), listServer.getSMTP(), Duration.ZERO);\n+            var mailmanList = mailmanServer.getListReader(listAddress.address());\n+            var conversations = mailmanList.conversations(Duration.ofDays(1));\n+            assertEquals(1, conversations.size());\n+            var mail = conversations.get(0).first();\n+            assertEquals(\"RFR: 1234: This is a pull request\", mail.subject());\n+            assertEquals(pr.author().fullName(), mail.author().fullName().orElseThrow());\n+            assertEquals(from.address(), mail.author().address());\n+            assertEquals(listAddress, mail.sender());\n+            assertEquals(\"val1\", mail.headerValue(\"Extra1\"));\n+            assertEquals(\"val2\", mail.headerValue(\"Extra2\"));\n+            assertFalse(mail.body().contains(\"Webrevs\"));\n+\n+            var nextHash = CheckableRepository.appendAndCommit(localRepo, \"Yet one more line\", \"Fixing\");\n+            localRepo.push(nextHash, author.url(), \"edit\");\n+\n+            \/\/ Run another archive pass\n+            TestBotRunner.runPeriodicItems(mlBot);\n+            TestBotRunner.runPeriodicItems(mlBot);\n+            TestBotRunner.runPeriodicItems(mlBot);\n+\n+            \/\/ The archive should reference the updated push\n+            Repository.materialize(archiveFolder.path(), archive.url(), \"master\");\n+            assertTrue(archiveContains(archiveFolder.path(), \"Patch\"));\n+            assertTrue(archiveContains(archiveFolder.path(), \"Fetch\"));\n+            assertTrue(archiveContains(archiveFolder.path(), \"Fixing\"));\n+            assertFalse(archiveContains(archiveFolder.path(), \"Webrevs\"));\n+\n+            \/\/ The mailing list as well\n+            listServer.processIncoming();\n+            conversations = mailmanList.conversations(Duration.ofDays(1));\n+            assertEquals(1, conversations.size());\n+            var replies = conversations.get(0).replies(mail);\n+            var reply = replies.get(0);\n+            assertEquals(\"RFR: 1234: This is a pull request [v2]\", reply.subject());\n+            assertEquals(pr.author().fullName(), reply.author().fullName().orElseThrow());\n+            assertEquals(from.address(), reply.author().address());\n+            assertEquals(listAddress, reply.sender());\n+            assertEquals(\"val1\", reply.headerValue(\"Extra1\"));\n+            assertEquals(\"val2\", reply.headerValue(\"Extra2\"));\n+            assertFalse(reply.body().contains(\"Webrevs\"));\n+            assertFalse(reply.body().contains(\"- full:\"));\n+            assertFalse(reply.body().contains(\"- incr:\"));\n+        }\n+    }\n+\n+    @Test\n+    void mergeWithoutWebrev(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory();\n+             var archiveFolder = new TemporaryDirectory();\n+             var listServer = new TestMailmanServer();\n+             var webrevServer = new TestWebrevServer()) {\n+            var author = credentials.getHostedRepository();\n+            var archive = credentials.getHostedRepository();\n+            var commenter = credentials.getHostedRepository();\n+            var listAddress = EmailAddress.parse(listServer.createList(\"test\"));\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addAuthor(author.forge().currentUser().id());\n+            var from = EmailAddress.from(\"test\", \"test@test.mail\");\n+            var mlBot = MailingListBridgeBot.newBuilder()\n+                    .from(from)\n+                    .repo(author)\n+                    .archive(archive)\n+                    .archiveRef(\"archive\")\n+                    .censusRepo(censusBuilder.build())\n+                    .lists(List.of(new MailingListConfiguration(listAddress, Set.of())))\n+                    .listArchive(listServer.getArchive())\n+                    .smtpServer(listServer.getSMTP())\n+                    .webrevStorageHTMLRepository(archive)\n+                    .webrevStorageRef(\"webrev\")\n+                    .webrevStorageBase(Path.of(\"test\"))\n+                    .webrevStorageBaseUri(webrevServer.uri())\n+                    .webrevGenerateJSON(false)\n+                    .webrevGenerateHTML(false)\n+                    .issueTracker(URIBuilder.base(\"http:\/\/issues.test\/browse\/\").build())\n+                    .build();\n+\n+            \/\/ Populate the projects repository\n+            var reviewFile = Path.of(\"reviewfile.txt\");\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType(), reviewFile);\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+            localRepo.push(masterHash, archive.url(), \"archive\", true);\n+            localRepo.push(masterHash, archive.url(), \"webrev\", true);\n+\n+            \/\/ Create a diverging branch\n+            var editOnlyFile = Path.of(\"editonly.txt\");\n+            Files.writeString(localRepo.root().resolve(editOnlyFile), \"Only added in the edit\");\n+            localRepo.add(editOnlyFile);\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, \"Edited\");\n+            localRepo.push(editHash, author.url(), \"edit\");\n+\n+            \/\/ Make conflicting changes in the target\n+            localRepo.checkout(masterHash, true);\n+            var masterOnlyFile = Path.of(\"masteronly.txt\");\n+            Files.writeString(localRepo.root().resolve(masterOnlyFile), \"Only added in master\");\n+            localRepo.add(masterOnlyFile);\n+            var updatedMasterHash = CheckableRepository.appendAndCommit(localRepo, \"Master change\");\n+            localRepo.push(updatedMasterHash, author.url(), \"master\");\n+\n+            \/\/ Perform the merge - resolve conflicts in our favor\n+            localRepo.merge(editHash, \"ours\");\n+            localRepo.commit(\"Merged edit\", \"duke\", \"duke@openjdk.org\");\n+            var mergeOnlyFile = Path.of(\"mergeonly.txt\");\n+            Files.writeString(localRepo.root().resolve(mergeOnlyFile), \"Only added in the merge\");\n+            localRepo.add(mergeOnlyFile);\n+            Files.writeString(localRepo.root().resolve(reviewFile), \"Overwriting the conflict resolution\");\n+            localRepo.add(reviewFile);\n+            var appendedCommit = localRepo.amend(\"Updated merge commit\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(appendedCommit, author.url(), \"merge_of_edit\", true);\n+\n+            \/\/ Make a merge PR\n+            var pr = credentials.createPullRequest(archive, \"master\", \"merge_of_edit\", \"Merge edit\");\n+            pr.setBody(\"This is now ready\");\n+\n+            \/\/ Run an archive pass\n+            TestBotRunner.runPeriodicItems(mlBot);\n+            listServer.processIncoming();\n+\n+            \/\/ The archive should contain a merge style webrev\n+            Repository.materialize(archiveFolder.path(), archive.url(), \"archive\");\n+            assertFalse(archiveContains(archiveFolder.path(), \"The webrevs contain the adjustments done while merging with regards to each parent branch:\"));\n+            assertFalse(archiveContains(archiveFolder.path(), pr.id() + \"\/00.0\"));\n+            assertTrue(archiveContains(archiveFolder.path(), \"3 lines in 2 files changed: 1 ins; 1 del; 1 mod\"));\n+\n+            \/\/ The PR should not contain a webrev comment\n+            assertEquals(0, pr.comments().size());\n+        }\n+    }\n","filename":"bots\/mlbridge\/src\/test\/java\/org\/openjdk\/skara\/bots\/mlbridge\/MailingListBridgeBotTests.java","additions":232,"deletions":0,"binary":false,"changes":232,"status":"modified"}]}