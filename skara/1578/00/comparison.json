{"files":[{"patch":"@@ -34,1 +34,1 @@\n-    static List<String> get(ReadOnlyRepository repository, Hash hash, HostUser botUser, List<Comment> comments, boolean reviewMerge) throws IOException {\n+    static List<String> get(Optional<JCheckConfiguration> conf, HostUser botUser, List<Comment> comments, boolean reviewMerge) throws IOException {\n@@ -41,1 +41,1 @@\n-        var currentConfiguration = JCheckConfiguration.from(repository, hash).orElseThrow();\n+        var currentConfiguration = conf.orElseThrow();\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/AdditionalConfiguration.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1257,1 +1257,3 @@\n-            PullRequestCheckIssueVisitor visitor = checkablePullRequest.createVisitor(checkablePullRequest.targetHash());\n+\n+            Hash jcheckConfHash = checkablePullRequest.targetHash();\n+            PullRequestCheckIssueVisitor visitor = checkablePullRequest.createVisitor(jcheckConfHash);\n@@ -1268,1 +1270,2 @@\n-                var additionalConfiguration = AdditionalConfiguration.get(localRepo, localHash,\n+                var conf = checkablePullRequest.parseJCheckConfiguration(localRepo, jcheckConfHash);\n+                var additionalConfiguration = AdditionalConfiguration.get(conf,\n@@ -1270,1 +1273,1 @@\n-                checkablePullRequest.executeChecks(localHash, censusInstance, visitor, additionalConfiguration, checkablePullRequest.targetHash());\n+                checkablePullRequest.executeChecks(localHash, censusInstance, visitor, additionalConfiguration, jcheckConfHash);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -210,3 +210,5 @@\n-    void executeChecks(Hash localHash, CensusInstance censusInstance, PullRequestCheckIssueVisitor visitor,\n-                       List<String> additionalConfiguration, Hash hash) throws IOException {\n-        Optional<JCheckConfiguration> conf;\n+    Optional<JCheckConfiguration> parseJCheckConfiguration(ReadOnlyRepository repo, Hash hash) {\n+        return parseJCheckConfiguration(repo, hash, List.of());\n+    }\n+\n+    Optional<JCheckConfiguration> parseJCheckConfiguration(ReadOnlyRepository repo, Hash hash, List<String> additional) {\n@@ -214,3 +216,1 @@\n-            conf = JCheck.parseConfiguration(confOverride, additionalConfiguration);\n-        } else {\n-            conf = JCheck.parseConfiguration(localRepo, hash, additionalConfiguration);\n+            return JCheck.parseConfiguration(confOverride, additional);\n@@ -218,0 +218,6 @@\n+        return JCheck.parseConfiguration(localRepo, hash, additional);\n+    }\n+\n+    void executeChecks(Hash localHash, CensusInstance censusInstance, PullRequestCheckIssueVisitor visitor,\n+                       List<String> additionalConfiguration, Hash jcheckConfHash) throws IOException {\n+        var conf = parseJCheckConfiguration(localRepo, jcheckConfHash, additionalConfiguration);\n@@ -219,1 +225,1 @@\n-            throw new RuntimeException(\"Failed to parse jcheck configuration at: \" + hash + \" with extra: \" + additionalConfiguration);\n+            throw new RuntimeException(\"Failed to parse jcheck configuration at: \" + jcheckConfHash + \" with extra: \" + additionalConfiguration);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckablePullRequest.java","additions":13,"deletions":7,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -265,2 +265,4 @@\n-        var additionalConfiguration = AdditionalConfiguration.get(localRepo, localHash, pr.repository().forge().currentUser(), allComments, reviewMerge);\n-        checkablePr.executeChecks(localHash, censusInstance, issues, additionalConfiguration, checkablePr.targetHash());\n+        var jcheckConfHash = checkablePr.targetHash();\n+        var jcheckConf = checkablePr.parseJCheckConfiguration(localRepo, jcheckConfHash);\n+        var additionalConfiguration = AdditionalConfiguration.get(jcheckConf, pr.repository().forge().currentUser(), allComments, reviewMerge);\n+        checkablePr.executeChecks(localHash, censusInstance, issues, additionalConfiguration, jcheckConfHash);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/IntegrateCommand.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import org.openjdk.skara.vcs.Repository;\n@@ -3120,0 +3121,50 @@\n+\n+    @Test\n+    void overrideJcheckConfAndAdditionalConf(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var conf = credentials.getHostedRepository();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                                           .addAuthor(author.forge().currentUser().id());\n+            var checkBot = PullRequestBot.newBuilder()\n+                                         .repo(author)\n+                                         .censusRepo(censusBuilder.build())\n+                                         .confOverrideRepo(conf)\n+                                         .confOverrideName(\"jcheck.conf\")\n+                                         .confOverrideRef(\"jcheck-branch\")\n+                                         .reviewMerge(true)\n+                                         .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.authenticatedUrl(), \"master\", true);\n+\n+            \/\/ Create a different conf on a different branch\n+            var defaultConf = Files.readString(localRepo.root().resolve(\".jcheck\/conf\"), StandardCharsets.UTF_8);\n+            var newConf = defaultConf.replace(\"reviewers=1\", \"reviewers=0\");\n+            Files.writeString(localRepo.root().resolve(\"jcheck.conf\"), newConf, StandardCharsets.UTF_8);\n+            localRepo.add(localRepo.root().resolve(\"jcheck.conf\"));\n+            var confHash = localRepo.commit(\"Separate conf\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(confHash, author.authenticatedUrl(), \"jcheck-branch\", true);\n+            localRepo.checkout(masterHash, true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.authenticatedUrl(), \"edit\", true);\n+\n+            localRepo.checkout(masterHash, true);\n+            localRepo.branch(masterHash, \"dev\");\n+            localRepo.merge(editHash, Repository.FastForward.DISABLE);\n+            var mergeHash = localRepo.commit(\"Merge edit\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(mergeHash, author.authenticatedUrl(), \"dev\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"dev\", \"Merge edit\");\n+\n+            \/\/ Check the status (should become ready immediately as reviewercount is overridden to 0)\n+            \/\/ even though merge PRs should always be reviewed\n+            TestBotRunner.runPeriodicItems(checkBot);\n+            assertEquals(Set.of(\"rfr\", \"ready\", \"clean\"), new HashSet<>(pr.store().labelNames()));\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CheckTests.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"}]}