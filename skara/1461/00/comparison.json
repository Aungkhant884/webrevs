{"files":[{"patch":"@@ -147,0 +147,2 @@\n+                \/\/ This is a single point graphql query so shouldn't need to be limited to once a second\n+                .skipLimiter(true)\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubPullRequest.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -426,0 +426,2 @@\n+                             \/\/ This is a single point graphql query so shouldn't need to be limited to once a second\n+                             .skipLimiter(true)\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubRepository.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -91,0 +91,1 @@\n+        private boolean skipLimiter = false;\n@@ -205,0 +206,5 @@\n+        public QueryBuilder skipLimiter(boolean skipLimiter) {\n+            this.skipLimiter = skipLimiter;\n+            return this;\n+        }\n+\n@@ -302,1 +308,1 @@\n-    private HttpResponse<String> sendRequest(HttpRequest.Builder request) throws IOException {\n+    private HttpResponse<String> sendRequest(HttpRequest.Builder request, boolean skipLimiter) throws IOException {\n@@ -310,1 +316,1 @@\n-                response = cache.send(authId, request);\n+                response = cache.send(authId, request, skipLimiter);\n@@ -477,1 +483,1 @@\n-        var response = sendRequest(request);\n+        var response = sendRequest(request, queryBuilder.skipLimiter);\n@@ -496,1 +502,1 @@\n-            response = sendRequest(nextRequest.get());\n+            response = sendRequest(nextRequest.get(), queryBuilder.skipLimiter);\n@@ -517,1 +523,1 @@\n-        var response = sendRequest(request);\n+        var response = sendRequest(request, queryBuilder.skipLimiter);\n","filename":"network\/src\/main\/java\/org\/openjdk\/skara\/network\/RestRequest.java","additions":11,"deletions":5,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -185,1 +185,1 @@\n-    HttpResponse<String> send(String authId, HttpRequest.Builder requestBuilder) throws IOException, InterruptedException {\n+    HttpResponse<String> send(String authId, HttpRequest.Builder requestBuilder, boolean skipLimiter) throws IOException, InterruptedException {\n@@ -192,1 +192,1 @@\n-        if (unauthenticatedRequest.method().equals(\"GET\")) {\n+        if (unauthenticatedRequest.method().equals(\"GET\") || skipLimiter) {\n@@ -209,1 +209,1 @@\n-                log.log(Level.FINE, \"Taking lock for GET \" + finalRequest.uri() + \" took \" + lockDelay, lockDelay);\n+                log.log(Level.FINE, \"Taking lock for \" + finalRequest.method() + \" \" + finalRequest.uri() + \" took \" + lockDelay, lockDelay);\n@@ -212,1 +212,1 @@\n-                log.log(Level.FINE, \"Calling GET \" + finalRequest.uri().toString() + \" took \" + callDuration, callDuration);\n+                log.log(Level.FINE, \"Calling \" + finalRequest.method() + \" \" + finalRequest.uri().toString() + \" took \" + callDuration, callDuration);\n","filename":"network\/src\/main\/java\/org\/openjdk\/skara\/network\/RestRequestCache.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}