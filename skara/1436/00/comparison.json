{"files":[{"patch":"@@ -394,1 +394,1 @@\n-        var commit = pr.repository().forge().search(hash);\n+        var commit = pr.repository().forge().search(hash, true);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -125,2 +125,1 @@\n-        var commit = bot.repo().commit(commitComment.commit()).orElseThrow(() ->\n-            new IllegalStateException(\"Commit with hash \" + commitComment.commit() + \" missing\"));\n+        var hash = commitComment.commit();\n@@ -129,1 +128,1 @@\n-        var allComments = bot.repo().commitComments(commit.hash());\n+        var allComments = bot.repo().commitComments(hash);\n@@ -138,1 +137,1 @@\n-                        scratchPath.resolve(\"census\"), bot.repo(), commit.hash().hex(),\n+                        scratchPath.resolve(\"census\"), bot.repo(), hash.hex(),\n@@ -148,2 +147,2 @@\n-                            commit.hash().abbreviate() + \" - cannot process command.\";\n-                    bot.repo().addCommitComment(commit.hash(), comment);\n+                            hash.abbreviate() + \" - cannot process command.\";\n+                    bot.repo().addCommitComment(hash, comment);\n@@ -157,2 +156,2 @@\n-                            + commit.hash().abbreviate() + \" - cannot process command.\";\n-                    bot.repo().addCommitComment(commit.hash(), comment);\n+                            + hash.abbreviate() + \" - cannot process command.\";\n+                    bot.repo().addCommitComment(hash, comment);\n@@ -167,2 +166,2 @@\n-                            commit.hash().abbreviate() + \" - cannot process command.\";\n-                    bot.repo().addCommitComment(commit.hash(), comment);\n+                            hash.abbreviate() + \" - cannot process command.\";\n+                    bot.repo().addCommitComment(hash, comment);\n@@ -176,2 +175,2 @@\n-                            commit.hash().abbreviate() + \" - cannot process command.\";\n-                    bot.repo().addCommitComment(commit.hash(), comment);\n+                            hash.abbreviate() + \" - cannot process command.\";\n+                    bot.repo().addCommitComment(hash, comment);\n@@ -181,0 +180,2 @@\n+            var commit = bot.repo().commit(hash).orElseThrow(() ->\n+                    new IllegalStateException(\"Commit with hash \" + hash + \" missing\"));\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CommitCommandWorkItem.java","additions":13,"deletions":12,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-    public Optional<HostedCommit> search(Hash hash) {\n+    public Optional<HostedCommit> search(Hash hash, boolean includeDiffs) {\n","filename":"bots\/tester\/src\/test\/java\/org\/openjdk\/skara\/bots\/tester\/InMemoryHost.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -190,1 +190,1 @@\n-    public Optional<HostedCommit> commit(Hash commit) {\n+    public Optional<HostedCommit> commit(Hash commit, boolean includeDiffs) {\n","filename":"bots\/tester\/src\/test\/java\/org\/openjdk\/skara\/bots\/tester\/InMemoryHostedRepository.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,11 @@\n-    Optional<HostedCommit> search(Hash hash);\n+\n+    \/**\n+     * Search the whole host for a commit by hash.\n+     * @param hash Hash to search for\n+     * @param includeDiffs Set to true to include parent diffs in Commit, default false\n+     * @return Commit instance if found, otherwise empty\n+     *\/\n+    Optional<HostedCommit> search(Hash hash, boolean includeDiffs);\n+    default Optional<HostedCommit> search(Hash hash) {\n+        return search(hash, false);\n+    }\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/Forge.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -100,1 +100,12 @@\n-    Optional<HostedCommit> commit(Hash hash);\n+\n+    \/**\n+     * Gets a Commit instance for a given hash, if present.\n+     * @param hash Hash to get Commit for\n+     * @param includeDiffs Set to true to include parent diffs in Commit, default false\n+     * @return Commit instance for the hash in this repository, empty if not\n+     * found.\n+     *\/\n+    Optional<HostedCommit> commit(Hash hash, boolean includeDiffs);\n+    default Optional<HostedCommit> commit(Hash hash) {\n+        return commit(hash, false);\n+    }\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/HostedRepository.java","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -393,1 +393,1 @@\n-    public Optional<HostedCommit> search(Hash hash) {\n+    public Optional<HostedCommit> search(Hash hash, boolean includeDiffs) {\n@@ -410,1 +410,1 @@\n-        return shortestName.flatMap(this::repository).flatMap(r -> r.commit(hash));\n+        return shortestName.flatMap(this::repository).flatMap(r -> r.commit(hash, includeDiffs));\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubHost.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -489,6 +489,15 @@\n-    public Optional<HostedCommit> commit(Hash hash) {\n-        \/\/ Need to specify an explicit per_page < 70 to guarantee that we get patch information in the result set.\n-        var o = request.get(\"commits\/\" + hash.hex())\n-                       .param(\"per_page\", \"50\")\n-                       .onError(r -> Optional.of(JSON.of()))\n-                       .execute();\n+    public Optional<HostedCommit> commit(Hash hash, boolean includeDiffs) {\n+        var queryBuilder = request.get(\"commits\/\" + hash.hex())\n+                .onError(r -> Optional.of(JSON.of()));\n+        if (includeDiffs) {\n+            \/\/ Need to specify an explicit per_page < 70 to guarantee that we get patch information in the result set.\n+            queryBuilder.param(\"per_page\", \"50\");\n+        } else {\n+            \/\/ Minimize size of response when diffs aren't needed.\n+            queryBuilder\n+                    .param(\"per_page\", \"1\")\n+                    .maxPages(1);\n+        }\n+\n+        var o = queryBuilder.execute();\n+\n@@ -500,2 +509,7 @@\n-        var diffs = toDiff(metadata.parents().get(0), hash, o.get(\"files\"));\n-        return Optional.of(new HostedCommit(metadata, List.of(diffs), URI.create(o.get(\"html_url\").asString())));\n+        List<Diff> diffs;\n+        if (includeDiffs) {\n+            diffs = List.of(toDiff(metadata.parents().get(0), hash, o.get(\"files\")));\n+        } else {\n+            diffs = List.of();\n+        }\n+        return Optional.of(new HostedCommit(metadata, diffs, URI.create(o.get(\"html_url\").asString())));\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubRepository.java","additions":22,"deletions":8,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -224,1 +224,1 @@\n-    public Optional<HostedCommit> search(Hash hash) {\n+    public Optional<HostedCommit> search(Hash hash, boolean includeDiffs) {\n@@ -239,1 +239,1 @@\n-                var commit = project.commit(hash);\n+                var commit = project.commit(hash, includeDiffs);\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabHost.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -593,1 +593,1 @@\n-    public Optional<HostedCommit> commit(Hash hash) {\n+    public Optional<HostedCommit> commit(Hash hash, boolean includeDiffs) {\n@@ -602,6 +602,9 @@\n-        var diff = request.get(\"repository\/commits\/\" + hash.hex() + \"\/diff\")\n-                          .onError(r -> Optional.of(JSON.of()))\n-                          .execute();\n-        var parentDiffs = new ArrayList<Diff>();\n-        if (!diff.isNull()) {\n-            parentDiffs.add(toDiff(metadata.parents().get(0), hash, diff));\n+\n+        List<Diff> diffs = List.of();\n+        if (includeDiffs) {\n+            var diff = request.get(\"repository\/commits\/\" + hash.hex() + \"\/diff\")\n+                    .onError(r -> Optional.of(JSON.of()))\n+                    .execute();\n+            if (!diff.isNull()) {\n+                diffs = List.of(toDiff(metadata.parents().get(0), hash, diff));\n+            }\n@@ -609,1 +612,1 @@\n-        return Optional.of(new HostedCommit(metadata, parentDiffs, url));\n+        return Optional.of(new HostedCommit(metadata, diffs, url));\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabRepository.java","additions":11,"deletions":8,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -177,1 +177,1 @@\n-    public Optional<HostedCommit> search(Hash hash) {\n+    public Optional<HostedCommit> search(Hash hash, boolean includeDiffs) {\n@@ -180,1 +180,1 @@\n-            var commit = repo.commit(hash);\n+            var commit = repo.commit(hash, includeDiffs);\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestHost.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -301,1 +301,1 @@\n-    public Optional<HostedCommit> commit(Hash hash) {\n+    public Optional<HostedCommit> commit(Hash hash, boolean includeDiffs) {\n@@ -308,1 +308,2 @@\n-            return Optional.of(new HostedCommit(commit.get().metadata(), commit.get().parentDiffs(), url));\n+            List<Diff> parentDiffs = includeDiffs ? commit.get().parentDiffs() : List.of();\n+            return Optional.of(new HostedCommit(commit.get().metadata(), parentDiffs, url));\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestHostedRepository.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}