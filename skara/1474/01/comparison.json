{"files":[{"patch":"@@ -2,1 +2,1 @@\n-; Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+; Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":".jcheck\/conf","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-# Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"Makefile","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"args\/src\/main\/java\/org\/openjdk\/skara\/args\/Argument.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"args\/src\/main\/java\/org\/openjdk\/skara\/args\/ArgumentParser.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"args\/src\/main\/java\/org\/openjdk\/skara\/args\/Arguments.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"args\/src\/main\/java\/org\/openjdk\/skara\/args\/Flag.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"args\/src\/main\/java\/org\/openjdk\/skara\/args\/Input.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bot\/src\/main\/java\/org\/openjdk\/skara\/bot\/BotRunner.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-# Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots.dockerfile","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/bridgekeeper\/build.gradle","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/bridgekeeper\/src\/main\/java\/org\/openjdk\/skara\/bots\/bridgekeeper\/BridgekeeperBotFactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,1 +47,1 @@\n-    private final String welcomeMarker = \"<!-- PullrequestCloserBot welcome message -->\";\n+    private static final String WELCOME_MARKER = \"<!-- PullrequestCloserBot welcome message -->\";\n@@ -54,1 +54,1 @@\n-                                    .anyMatch(comment -> comment.body().contains(welcomeMarker));\n+                                    .anyMatch(comment -> comment.body().contains(WELCOME_MARKER));\n@@ -77,1 +77,1 @@\n-            pr.addComment(welcomeMarker + \"\\n\\n\" + message);\n+            pr.addComment(WELCOME_MARKER + \"\\n\\n\" + message);\n","filename":"bots\/bridgekeeper\/src\/main\/java\/org\/openjdk\/skara\/bots\/bridgekeeper\/PullRequestCloserBot.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -73,1 +73,1 @@\n-    private final String noticeMarker = \"<!-- PullrequestCloserBot auto close notification -->\";\n+    private static final String NOTICE_MARKER = \"<!-- PullrequestCloserBot auto close notification -->\";\n@@ -80,1 +80,1 @@\n-            if (lastComment.author().equals(pr.repository().forge().currentUser()) && lastComment.body().contains(noticeMarker)) {\n+            if (lastComment.author().equals(pr.repository().forge().currentUser()) && lastComment.body().contains(NOTICE_MARKER)) {\n@@ -98,1 +98,1 @@\n-        pr.addComment(noticeMarker + \"\\n\\n\" + message);\n+        pr.addComment(NOTICE_MARKER + \"\\n\\n\" + message);\n","filename":"bots\/bridgekeeper\/src\/main\/java\/org\/openjdk\/skara\/bots\/bridgekeeper\/PullRequestPrunerBot.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,22 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n","filename":"bots\/bridgekeeper\/src\/test\/java\/org\/openjdk\/skara\/bots\/bridgekeeper\/BridgekeeperBotFactoryTest.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,0 +47,3 @@\n+    implementation project(':bots:common')\n+    implementation project(':jbs')\n+    implementation project(':jcheck')\n","filename":"bots\/censussync\/build.gradle","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,3 @@\n+    requires org.openjdk.skara.jcheck;\n+    requires org.openjdk.skara.jbs;\n+    requires org.openjdk.skara.bots.common;\n","filename":"bots\/censussync\/src\/main\/java\/module-info.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/censussync\/src\/main\/java\/org\/openjdk\/skara\/bots\/censussync\/CensusSyncBotFactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+import org.openjdk.skara.bots.common.BotUtils;\n@@ -80,4 +81,0 @@\n-    private static String escape(String s) {\n-        return s.replace(\"&\", \"&amp;\").replace(\"<\", \"&lt;\").replace(\">\", \"&gt;\");\n-    }\n-\n@@ -136,1 +133,1 @@\n-                file.format(\"<group name=\\\"%s\\\" full-name=\\\"%s\\\">%n\", name, escape(fullName));\n+                file.format(\"<group name=\\\"%s\\\" full-name=\\\"%s\\\">%n\", name, BotUtils.escape(fullName));\n@@ -194,1 +191,1 @@\n-                file.format(\"<project name=\\\"%s\\\" full-name=\\\"%s\\\" sponsor=\\\"%s\\\">%n\", name, escape(fullName), sponsor);\n+                file.format(\"<project name=\\\"%s\\\" full-name=\\\"%s\\\" sponsor=\\\"%s\\\">%n\", name, BotUtils.escape(fullName), sponsor);\n","filename":"bots\/censussync\/src\/main\/java\/org\/openjdk\/skara\/bots\/censussync\/CensusSyncSplitBot.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+import org.openjdk.skara.bots.common.BotUtils;\n@@ -52,4 +53,0 @@\n-    private static String escape(String s) {\n-        return s.replace(\"&\", \"&amp;\").replace(\"<\", \"&lt;\").replace(\">\", \"&gt;\");\n-    }\n-\n@@ -105,1 +102,1 @@\n-                    file.println(\"  <full-name>\" + escape(group.fullName()) + \"<\/full-name>\");\n+                    file.println(\"  <full-name>\" + BotUtils.escape(group.fullName()) + \"<\/full-name>\");\n@@ -116,1 +113,1 @@\n-                    file.println(\"  <full-name>\" + escape(project.fullName()) + \"<\/full-name>\");\n+                    file.println(\"  <full-name>\" + BotUtils.escape(project.fullName()) + \"<\/full-name>\");\n","filename":"bots\/censussync\/src\/main\/java\/org\/openjdk\/skara\/bots\/censussync\/CensusSyncUnifyBot.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,22 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n","filename":"bots\/censussync\/src\/test\/java\/org\/openjdk\/skara\/bots\/censussync\/CensusSyncBotFactoryTest.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/checkout\/build.gradle","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/checkout\/src\/main\/java\/module-info.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/checkout\/src\/main\/java\/org\/openjdk\/skara\/bots\/checkout\/CheckoutBot.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/checkout\/src\/main\/java\/org\/openjdk\/skara\/bots\/checkout\/CheckoutBotFactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,22 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n","filename":"bots\/checkout\/src\/test\/java\/org\/openjdk\/skara\/bots\/checkout\/CheckoutBotFactoryTest.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/checkout\/src\/test\/java\/org\/openjdk\/skara\/bots\/checkout\/CheckoutBotTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/cli\/src\/main\/java\/module-info.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/cli\/src\/main\/java\/org\/openjdk\/skara\/bots\/cli\/BotConsoleHandler.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/cli\/src\/main\/java\/org\/openjdk\/skara\/bots\/cli\/BotLauncher.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/cli\/src\/main\/java\/org\/openjdk\/skara\/bots\/cli\/BotLogstashHandler.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/cli\/src\/main\/java\/org\/openjdk\/skara\/bots\/cli\/BotSlackHandler.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/cli\/src\/test\/java\/org\/openjdk\/skara\/bots\/cli\/BotLogstashHandlerTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/cli\/src\/test\/java\/org\/openjdk\/skara\/bots\/cli\/BotSlackHandlerTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/cli\/src\/test\/java\/org\/openjdk\/skara\/bots\/cli\/LoggingBot.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,45 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+module {\n+    name = 'org.openjdk.skara.bots.common'\n+    test {\n+        requires 'org.junit.jupiter.api'\n+        requires 'org.openjdk.skara.test'\n+        opens 'org.openjdk.skara.bots.common' to 'org.junit.platform.commons'\n+    }\n+}\n+\n+dependencies {\n+    implementation project(':vcs')\n+    implementation project(':host')\n+    implementation project(':forge')\n+    implementation project(':issuetracker')\n+    implementation project(':jbs')\n+    implementation project(':json')\n+    implementation project(':network')\n+    implementation project(':jcheck')\n+    implementation project(':census')\n+\n+    testImplementation project(':test')\n+}\n","filename":"bots\/common\/build.gradle","additions":45,"deletions":0,"binary":false,"changes":45,"status":"added"},{"patch":"@@ -0,0 +1,39 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * The bots.common module is meant for application level logic that needs to be\n+ * shared between multiple bots. This is needed for functionality that ties\n+ * together multiple different libraries that we don't want to create\n+ * dependencies between.\n+ *\/\n+module org.openjdk.skara.bots.common {\n+    requires org.openjdk.skara.vcs;\n+    requires transitive org.openjdk.skara.forge;\n+    requires org.openjdk.skara.network;\n+    requires transitive org.openjdk.skara.jbs;\n+    requires transitive org.openjdk.skara.jcheck;\n+    requires java.logging;\n+\n+    exports org.openjdk.skara.bots.common;\n+}\n\\ No newline at end of file\n","filename":"bots\/common\/src\/main\/java\/module-info.java","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bots.common;\n+\n+import java.util.Optional;\n+\n+import org.openjdk.skara.forge.PullRequest;\n+import org.openjdk.skara.jbs.JdkVersion;\n+import org.openjdk.skara.jcheck.JCheckConfiguration;\n+\n+\/**\n+ * This class contains utility methods used by more than one bot. These methods\n+ * can't reasonably be located in the various libraries as they combine\n+ * functionality and knowledge unique to bot applications. As this class grows,\n+ * it should be encouraged to split it up into more cohesive units.\n+ *\/\n+public class BotUtils {\n+\n+    \/**\n+     * Gets jcheck configured fix version from a pull request. This only works for\n+     * repositories where the fix version is configured in .jcheck\/conf.\n+     *\/\n+    public static Optional<JdkVersion> getVersion(PullRequest pr) {\n+        var confFile = pr.repository().fileContents(\".jcheck\/conf\", pr.headHash().hex())\n+                .orElse(pr.repository().fileContents(\".jcheck\/conf\", pr.targetRef()).orElse(null));\n+        if (confFile == null) {\n+            return Optional.empty();\n+        }\n+        var configuration = JCheckConfiguration.parse(confFile.lines().toList());\n+        var version = configuration.general().version().orElse(null);\n+        if (version == null || \"\".equals(version)) {\n+            return Optional.empty();\n+        }\n+        return JdkVersion.parse(version);\n+    }\n+\n+    public static String escape(String s) {\n+        return s.replace(\"&\", \"&amp;\").replace(\"<\", \"&lt;\").replace(\">\", \"&gt;\");\n+    }\n+}\n","filename":"bots\/common\/src\/main\/java\/org\/openjdk\/skara\/bots\/common\/BotUtils.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"},{"patch":"@@ -0,0 +1,42 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.skara.bots.common;\n+\n+import java.util.regex.Pattern;\n+\n+public class PullRequestConstants {\n+    \/\/ MARKERS\n+    public static final String PROGRESS_MARKER = \"<!-- Anything below this marker will be automatically updated, please do not edit manually! -->\";\n+    public static final String CSR_UPDATE_MARKER = \"<!-- csr: 'update' -->\";\n+    public static final String CSR_NEEDED_MARKER = \"<!-- csr: 'needed' -->\";\n+    public static final String CSR_UNNEEDED_MARKER = \"<!-- csr: 'unneeded' -->\";\n+    public static final String JEP_MARKER = \"<!-- jep: '%s' '%s' '%s' -->\"; \/\/ <!-- jep: 'JEP-ID' 'ISSUE-ID' 'ISSUE-TITLE' -->\n+\n+    \/\/ LABELS\n+    public static final String CSR_LABEL = \"csr\";\n+    public static final String JEP_LABEL = \"jep\";\n+\n+    \/\/ PATTERNS\n+    public static final Pattern JEP_MARKER_PATTERN = Pattern.compile(\"<!-- jep: '(.*?)' '(.*?)' '(.*?)' -->\");\n+}\n","filename":"bots\/common\/src\/main\/java\/org\/openjdk\/skara\/bots\/common\/PullRequestConstants.java","additions":42,"deletions":0,"binary":false,"changes":42,"status":"added"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bots.common;\n+\n+import org.openjdk.skara.host.HostUser;\n+import org.openjdk.skara.issuetracker.Comment;\n+import org.openjdk.skara.vcs.openjdk.Issue;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.*;\n+import java.util.regex.*;\n+import java.util.stream.Collectors;\n+\n+public class SolvesTracker {\n+    private static final String SOLVES_MARKER = \"<!-- solves: '%s' '%s' -->\";\n+    private static final Pattern MARKER_PATTERN = Pattern.compile(\"<!-- solves: '(.*?)' '(.*?)' -->\");\n+\n+    public static String setSolvesMarker(Issue issue) {\n+        var encodedDescription = Base64.getEncoder().encodeToString(issue.description().getBytes(StandardCharsets.UTF_8));\n+        return String.format(SOLVES_MARKER, issue.shortId(), encodedDescription);\n+    }\n+\n+    public static String removeSolvesMarker(Issue issue) {\n+        return String.format(SOLVES_MARKER, issue.shortId(), \"\");\n+    }\n+\n+    public static List<Issue> currentSolved(HostUser botUser, List<Comment> comments) {\n+        var solvesActions = comments.stream()\n+                .filter(comment -> comment.author().equals(botUser))\n+                .flatMap(comment -> comment.body().lines())\n+                .map(MARKER_PATTERN::matcher)\n+                .filter(Matcher::find)\n+                .collect(Collectors.toList());\n+        var current = new LinkedHashMap<String, Issue>();\n+        for (var action : solvesActions) {\n+            var key = action.group(1);\n+            if (action.group(2).equals(\"\")) {\n+                current.remove(key);\n+            } else {\n+                var decodedDescription = new String(Base64.getDecoder().decode(action.group(2)), StandardCharsets.UTF_8);\n+                var issue = new Issue(key, decodedDescription);\n+                current.put(key, issue);\n+            }\n+        }\n+\n+        return new ArrayList<>(current.values());\n+    }\n+}\n","filename":"bots\/common\/src\/main\/java\/org\/openjdk\/skara\/bots\/common\/SolvesTracker.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"},{"patch":"@@ -45,0 +45,1 @@\n+    implementation project(':bots:common')\n","filename":"bots\/csr\/build.gradle","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+    requires org.openjdk.skara.bots.common;\n","filename":"bots\/csr\/src\/main\/java\/module-info.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import java.util.ArrayList;\n@@ -30,1 +31,0 @@\n-import java.util.Optional;\n@@ -34,0 +34,1 @@\n+\n@@ -35,0 +36,2 @@\n+import org.openjdk.skara.bots.common.BotUtils;\n+import org.openjdk.skara.bots.common.SolvesTracker;\n@@ -37,0 +40,1 @@\n+import org.openjdk.skara.issuetracker.Comment;\n@@ -40,2 +44,2 @@\n-import org.openjdk.skara.jbs.JdkVersion;\n-import org.openjdk.skara.jcheck.JCheckConfiguration;\n+\n+import static org.openjdk.skara.bots.common.PullRequestConstants.*;\n@@ -50,3 +54,0 @@\n-    private final static String CSR_LABEL = \"csr\";\n-    private final static String CSR_UPDATE_MARKER = \"<!-- csr: 'update' -->\";\n-    private static final String PROGRESS_MARKER = \"<!-- Anything below this marker will be automatically updated, please do not edit manually! -->\";\n@@ -92,11 +93,2 @@\n-    \/**\n-     * Get the fix version from the provided PR.\n-     *\/\n-    private static Optional<JdkVersion> getVersion(PullRequest pullRequest) {\n-        var confFile = pullRequest.repository().fileContents(\".jcheck\/conf\", pullRequest.targetRef());\n-        var configuration = JCheckConfiguration.parse(confFile.lines().toList());\n-        var version = configuration.general().version().orElse(null);\n-        if (version == null || \"\".equals(version)) {\n-            return Optional.empty();\n-        }\n-        return JdkVersion.parse(version);\n+    private String generateCSRProgressMessage(org.openjdk.skara.issuetracker.Issue issue) {\n+        return \"Change requires CSR request [\" + issue.id() + \"](\" + issue.webUrl() + \") to be approved\";\n@@ -108,2 +100,2 @@\n-                (statusMessage.contains(\"- [ ] Change requires a CSR request to be approved\") ||\n-                        statusMessage.contains(\"- [x] Change requires a CSR request to be approved\"));\n+                (statusMessage.contains(\"- [ ] \" + generateCSRProgressMessage(csr)) ||\n+                        statusMessage.contains(\"- [x] \" + generateCSRProgressMessage(csr)));\n@@ -114,1 +106,1 @@\n-        return hasCsrIssue(statusMessage, csr) && statusMessage.contains(\"- [x] Change requires a CSR request to be approved\");\n+        return hasCsrIssue(statusMessage, csr) && statusMessage.contains(\"- [x] \" + generateCSRProgressMessage(csr));\n@@ -123,0 +115,6 @@\n+    private boolean hasWithdrawnCsrIssue(String statusMessage, Issue csr) {\n+        return statusMessage.contains(csr.id()) &&\n+                statusMessage.contains(csr.webUrl().toString()) &&\n+                statusMessage.contains(csr.title() + \" (**CSR**) (Withdrawn)\");\n+    }\n+\n@@ -134,1 +132,3 @@\n-        if (!statusMessage.contains(CSR_UPDATE_MARKER)) {\n+        if (statusMessage.isEmpty()) {\n+            log.info(\"No PROGRESS_MARKER found in PR body, wait for first CheckRun before adding csr update marker.\");\n+        } else if (!statusMessage.contains(CSR_UPDATE_MARKER)) {\n@@ -144,0 +144,5 @@\n+        \/\/ All the issues this pr solves\n+        var mainIssue = org.openjdk.skara.vcs.openjdk.Issue.fromStringRelaxed(pr.title());\n+        var issues = new ArrayList<org.openjdk.skara.vcs.openjdk.Issue>();\n+        mainIssue.ifPresent(issues::add);\n+        issues.addAll(SolvesTracker.currentSolved(pr.repository().forge().currentUser(), pr.comments()));\n@@ -145,8 +150,2 @@\n-        var issue = org.openjdk.skara.vcs.openjdk.Issue.fromStringRelaxed(pr.title());\n-        if (issue.isEmpty()) {\n-            log.info(\"No issue found in title for \" + describe(pr));\n-            return List.of();\n-        }\n-        var jbsIssueOpt = project.issue(issue.get().shortId());\n-        if (jbsIssueOpt.isEmpty()) {\n-            log.info(\"No issue found in JBS for \" + describe(pr));\n+        if (issues.isEmpty()) {\n+            log.info(\"No issue found for \" + describe(pr));\n@@ -156,1 +155,1 @@\n-        var versionOpt = getVersion(pr);\n+        var versionOpt = BotUtils.getVersion(pr);\n@@ -162,6 +161,4 @@\n-        var csrOptional = Backports.findCsr(jbsIssueOpt.get(), versionOpt.get());\n-        if (csrOptional.isEmpty()) {\n-            log.info(\"No CSR found for \" + describe(pr));\n-            return List.of();\n-        }\n-        var csr = csrOptional.get();\n+        boolean notExistingUnresolvedCSR = true;\n+        boolean needToAddUpdateMarker = false;\n+        boolean existingCSR = false;\n+        boolean existingApprovedCSR = false;\n@@ -169,7 +166,9 @@\n-        log.info(\"Found CSR \" + csr.id() + \" for \" + describe(pr));\n-        if (!hasCsrIssueAndProgress(pr, csr) && !isWithdrawnCSR(csr)) {\n-            \/\/ If the PR body doesn't have the CSR issue or doesn't have the CSR progress,\n-            \/\/ this bot need to add the csr update marker so that the PR bot can update the message of the PR body.\n-            log.info(\"The PR body doesn't have the CSR issue or progress, adding the csr update marker for \" + describe(pr));\n-            addUpdateMarker(pr);\n-        }\n+        for (var issue : issues) {\n+            var jbsIssueOpt = project.issue(issue.shortId());\n+            if (jbsIssueOpt.isEmpty()) {\n+                \/\/ An issue could not be found, so the csr label cannot be removed\n+                notExistingUnresolvedCSR = false;\n+                var issueId = issue.project().isEmpty() ? (project.name() + \"-\" + issue.id()) : issue.id();\n+                log.info(issueId + \" for \" + describe(pr) + \" not found\");\n+                continue;\n+            }\n@@ -177,7 +176,4 @@\n-        var resolution = csr.properties().get(\"resolution\");\n-        if (resolution == null || resolution.isNull()) {\n-            if (!pr.labelNames().contains(CSR_LABEL)) {\n-                log.info(\"CSR issue resolution is null for \" + describe(pr) + \", adding the CSR label\");\n-                pr.addLabel(CSR_LABEL);\n-            } else {\n-                log.info(\"CSR issue resolution is null for \" + describe(pr) + \", not removing the CSR label\");\n+            var csrOptional = Backports.findCsr(jbsIssueOpt.get(), versionOpt.get());\n+            if (csrOptional.isEmpty()) {\n+                log.info(\"No CSR found for issue \" + jbsIssueOpt.get().id() + \" for \" + describe(pr) + \" with fixVersion \" + versionOpt.get().raw());\n+                continue;\n@@ -185,10 +181,10 @@\n-            logLatency();\n-            return List.of();\n-        }\n-        var name = resolution.get(\"name\");\n-        if (name == null || name.isNull()) {\n-            if (!pr.labelNames().contains(CSR_LABEL)) {\n-                log.info(\"CSR issue resolution name is null for \" + describe(pr) + \", adding the CSR label\");\n-                pr.addLabel(CSR_LABEL);\n-            } else {\n-                log.info(\"CSR issue resolution name is null for \" + describe(pr) + \", not removing the CSR label\");\n+            var csr = csrOptional.get();\n+            existingCSR = true;\n+\n+            log.info(\"Found CSR \" + csr.id() + \" for issue \" + jbsIssueOpt.get().id() + \" for \" + describe(pr));\n+            if (!hasCsrIssueAndProgress(pr, csr) && !isWithdrawnCSR(csr)) {\n+                \/\/ If the PR body doesn't have the CSR issue or doesn't have the CSR progress,\n+                \/\/ this bot need to add the csr update marker so that the PR bot can update the message of the PR body.\n+                log.info(\"The PR body doesn't have the CSR issue or progress, adding the csr update marker for this csr issue\"\n+                        + csr.id() + \" for \" + describe(pr));\n+                needToAddUpdateMarker = true;\n@@ -196,3 +192,0 @@\n-            logLatency();\n-            return List.of();\n-        }\n@@ -200,6 +193,22 @@\n-        if (csr.state() != Issue.State.CLOSED) {\n-            if (!pr.labelNames().contains(CSR_LABEL)) {\n-                log.info(\"CSR issue state is not closed for \" + describe(pr) + \", adding the CSR label\");\n-                pr.addLabel(CSR_LABEL);\n-            } else {\n-                log.info(\"CSR issue state is not closed for \" + describe(pr) + \", not removing the CSR label\");\n+            var resolution = csr.properties().get(\"resolution\");\n+            if (resolution == null || resolution.isNull()) {\n+                notExistingUnresolvedCSR = false;\n+                if (!pr.labelNames().contains(CSR_LABEL)) {\n+                    log.info(\"CSR issue resolution is null for csr issue \" + csr.id() + \" for \" + describe(pr) + \", adding the CSR label\");\n+                    pr.addLabel(CSR_LABEL);\n+                } else {\n+                    log.info(\"CSR issue resolution is null for csr issue \" + csr.id() + \" for \" + describe(pr) + \", not removing the CSR label\");\n+                }\n+                continue;\n+            }\n+\n+            var name = resolution.get(\"name\");\n+            if (name == null || name.isNull()) {\n+                notExistingUnresolvedCSR = false;\n+                if (!pr.labelNames().contains(CSR_LABEL)) {\n+                    log.info(\"CSR issue resolution name is null for csr issue \" + csr.id() + \" for \" + describe(pr) + \", adding the CSR label\");\n+                    pr.addLabel(CSR_LABEL);\n+                } else {\n+                    log.info(\"CSR issue resolution name is null for csr issue \" + csr.id() + \" for \" + describe(pr) + \", not removing the CSR label\");\n+                }\n+                continue;\n@@ -207,3 +216,0 @@\n-            logLatency();\n-            return List.of();\n-        }\n@@ -211,10 +217,30 @@\n-        if (!name.asString().equals(\"Approved\")) {\n-            if (name.asString().equals(\"Withdrawn\")) {\n-                \/\/ This condition is necessary to prevent the bot from adding the CSR label again.\n-                \/\/ And the bot can't remove the CSR label automatically here.\n-                \/\/ Because the PR author with the role of Committer may withdraw a CSR that\n-                \/\/ a Reviewer had requested and integrate it without satisfying that requirement.\n-                log.info(\"CSR closed and withdrawn for \" + describe(pr) + \", not revising (not adding and not removing) CSR label\");\n-            } else if (!pr.labelNames().contains(CSR_LABEL)) {\n-                log.info(\"CSR issue resolution is not 'Approved' for \" + describe(pr) + \", adding the CSR label\");\n-                pr.addLabel(CSR_LABEL);\n+            if (csr.state() != Issue.State.CLOSED) {\n+                notExistingUnresolvedCSR = false;\n+                if (!pr.labelNames().contains(CSR_LABEL)) {\n+                    log.info(\"CSR issue state is not closed for csr issue \" + csr.id() + \" for \" + describe(pr) + \", adding the CSR label\");\n+                    pr.addLabel(CSR_LABEL);\n+                } else {\n+                    log.info(\"CSR issue state is not closed for csr issue\" + csr.id() + \" for \" + describe(pr) + \", not removing the CSR label\");\n+                }\n+                continue;\n+            }\n+\n+            if (!name.asString().equals(\"Approved\")) {\n+                if (name.asString().equals(\"Withdrawn\")) {\n+                    \/\/ This condition is necessary to prevent the bot from adding the CSR label again.\n+                    \/\/ And the bot can't remove the CSR label automatically here.\n+                    \/\/ Because the PR author with the role of Committer may withdraw a CSR that\n+                    \/\/ a Reviewer had requested and integrate it without satisfying that requirement.\n+                    if (!hasWithdrawnCsrIssue(getStatusMessage(pr), csr)) {\n+                        needToAddUpdateMarker = true;\n+                    }\n+                    log.info(\"CSR closed and withdrawn for csr issue \" + csr.id() + \" for \" + describe(pr));\n+                } else if (!pr.labelNames().contains(CSR_LABEL)) {\n+                    notExistingUnresolvedCSR = false;\n+                    log.info(\"CSR issue resolution is not 'Approved' for csr issue \" + csr.id() + \" for \" + describe(pr) + \", adding the CSR label\");\n+                    pr.addLabel(CSR_LABEL);\n+                } else {\n+                    notExistingUnresolvedCSR = false;\n+                    log.info(\"CSR issue resolution is not 'Approved' for csr issue \" + csr.id() + \" for \" + describe(pr) + \", not removing the CSR label\");\n+                }\n+                continue;\n@@ -222,1 +248,1 @@\n-                log.info(\"CSR issue resolution is not 'Approved' for \" + describe(pr) + \", not removing the CSR label\");\n+                existingApprovedCSR = true;\n@@ -224,3 +250,0 @@\n-            logLatency();\n-            return List.of();\n-        }\n@@ -228,3 +251,7 @@\n-        if (pr.labelNames().contains(CSR_LABEL)) {\n-            log.info(\"CSR closed and approved for \" + describe(pr) + \", removing CSR label\");\n-            pr.removeLabel(CSR_LABEL);\n+            \/\/ The CSR issue has been closed and approved\n+            if (!hasCsrIssueAndProgressChecked(pr, csr)) {\n+                \/\/ If the PR body doesn't have the CSR issue or doesn't have the CSR progress or the CSR progress checkbox is not selected,\n+                \/\/ this bot need to add the csr update marker so that the PR bot can update the message of the PR body.\n+                log.info(\"CSR closed and approved for \" + describe(pr) + \", adding the csr update marker\");\n+                needToAddUpdateMarker = true;\n+            }\n@@ -232,4 +259,1 @@\n-        if (!hasCsrIssueAndProgressChecked(pr, csr)) {\n-            \/\/ If the PR body doesn't have the CSR issue or doesn't have the CSR progress or the CSR progress checkbox is not selected,\n-            \/\/ this bot need to add the csr update marker so that the PR bot can update the message of the PR body.\n-            log.info(\"CSR closed and approved for \" + describe(pr) + \", adding the csr update marker\");\n+        if (needToAddUpdateMarker) {\n@@ -238,0 +262,4 @@\n+        if (notExistingUnresolvedCSR && existingCSR && (!isCSRNeeded(pr.comments()) || existingApprovedCSR) && pr.labelNames().contains(CSR_LABEL)) {\n+            log.info(\"All CSR issues closed and approved for \" + describe(pr) + \", removing CSR label\");\n+            pr.removeLabel(CSR_LABEL);\n+        }\n@@ -242,0 +270,16 @@\n+    \/**\n+     * Determine whether the CSR label is added via '\/csr needed' command\n+     *\/\n+    private boolean isCSRNeeded(List<Comment> comments) {\n+        for (int i = comments.size() - 1; i >= 0; i--) {\n+            var comment = comments.get(i);\n+            if (comment.body().contains(CSR_NEEDED_MARKER)) {\n+                return true;\n+            }\n+            if (comment.body().contains(CSR_UNNEEDED_MARKER)) {\n+                return false;\n+            }\n+        }\n+        return false;\n+    }\n+\n","filename":"bots\/csr\/src\/main\/java\/org\/openjdk\/skara\/bots\/csr\/PullRequestWorkItem.java","additions":138,"deletions":94,"binary":false,"changes":232,"status":"modified"},{"patch":"@@ -0,0 +1,22 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n","filename":"bots\/csr\/src\/test\/java\/org\/openjdk\/skara\/bots\/csr\/CSRBotFactoryTest.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,1 @@\n+import org.openjdk.skara.bots.common.SolvesTracker;\n@@ -39,0 +40,1 @@\n+import static org.openjdk.skara.bots.common.PullRequestConstants.*;\n@@ -318,2 +320,1 @@\n-            \/\/ Remove `version=0.1` from `.jcheck\/conf`, set the version as null\n-            localRepo.checkout(localRepo.defaultBranch());\n+            \/\/ Remove `version=0.1` from `.jcheck\/conf`, set the version as null in the edit branch\n@@ -325,1 +326,1 @@\n-            localRepo.push(confHash, repo.url(), \"master\", true);\n+            localRepo.push(confHash, repo.url(), \"edit\", true);\n@@ -332,3 +333,0 @@\n-            \/\/ Test the method `TestPullRequest#diff`.\n-            assertEquals(1, pr.diff().patches().size());\n-\n@@ -336,1 +334,0 @@\n-            localRepo.checkout(localRepo.defaultBranch());\n@@ -342,1 +339,1 @@\n-            localRepo.push(confHash, repo.url(), \"master\", true);\n+            localRepo.push(confHash, repo.url(), \"edit\", true);\n@@ -352,1 +349,0 @@\n-            localRepo.checkout(localRepo.defaultBranch());\n@@ -358,1 +354,1 @@\n-            localRepo.push(confHash, repo.url(), \"master\", true);\n+            localRepo.push(confHash, repo.url(), \"edit\", true);\n@@ -402,1 +398,0 @@\n-            localRepo.checkout(localRepo.defaultBranch());\n@@ -408,1 +403,1 @@\n-            localRepo.push(confHash, repo.url(), \"master\", true);\n+            localRepo.push(confHash, repo.url(), \"edit\", true);\n@@ -425,0 +420,4 @@\n+    private String generateCSRProgressMessage(org.openjdk.skara.issuetracker.Issue issue) {\n+        return \"Change requires CSR request [\" + issue.id() + \"](\" + issue.webUrl() + \") to be approved\";\n+    }\n+\n@@ -427,2 +426,0 @@\n-        String csrUpdateMarker = \"<!-- csr: 'update' -->\";\n-        String progressMarker = \"<!-- Anything below this marker will be automatically updated, please do not edit manually! -->\";\n@@ -458,1 +455,1 @@\n-            assertFalse(pr.store().body().contains(csrUpdateMarker));\n+            assertFalse(pr.store().body().contains(CSR_UPDATE_MARKER));\n@@ -468,1 +465,1 @@\n-            assertFalse(pr.store().body().contains(csrUpdateMarker));\n+            assertFalse(pr.store().body().contains(CSR_UPDATE_MARKER));\n@@ -471,2 +468,2 @@\n-            \/\/ The bot should add the csr update marker\n-            assertTrue(pr.store().body().contains(csrUpdateMarker));\n+            \/\/ The bot should not add the csr update marker\n+            assertFalse(pr.store().body().contains(CSR_UPDATE_MARKER));\n@@ -475,2 +472,2 @@\n-            pr.setBody(\"PR body\\n\" + progressMarker + csr.id() + csr.webUrl().toString() + csr.title() + \" (**CSR**)\"\n-                    + \"- [ ] Change requires a CSR request to be approved\");\n+            pr.setBody(\"PR body\\n\" + PROGRESS_MARKER + csr.id() + csr.webUrl().toString() + csr.title() + \" (**CSR**)\"\n+                    + \"- [ ] \" + generateCSRProgressMessage(csr));\n@@ -480,1 +477,1 @@\n-            assertFalse(pr.store().body().contains(csrUpdateMarker));\n+            assertFalse(pr.store().body().contains(CSR_UPDATE_MARKER));\n@@ -488,1 +485,1 @@\n-            assertTrue(pr.store().body().contains(csrUpdateMarker));\n+            assertTrue(pr.store().body().contains(CSR_UPDATE_MARKER));\n@@ -491,2 +488,2 @@\n-            pr.setBody(\"PR body\\n\" + progressMarker + csr.id() + csr.webUrl().toString() + csr.title() + \" (**CSR**)\"\n-                    + \"- [x] Change requires a CSR request to be approved\");\n+            pr.setBody(\"PR body\\n\" + PROGRESS_MARKER + csr.id() + csr.webUrl().toString() + csr.title() + \" (**CSR**)\"\n+                    + \"- [x] \" + generateCSRProgressMessage(csr));\n@@ -496,1 +493,1 @@\n-            assertFalse(pr.store().body().contains(csrUpdateMarker));\n+            assertFalse(pr.store().body().contains(CSR_UPDATE_MARKER));\n@@ -499,2 +496,2 @@\n-            pr.setBody(\"PR body\\n\" + progressMarker + csr.id() + csr.webUrl().toString() + csr.title() + \" (**CSR**)\"\n-                    + \"- [ ] Change requires a CSR request to be approved\" + csrUpdateMarker);\n+            pr.setBody(\"PR body\\n\" + PROGRESS_MARKER + csr.id() + csr.webUrl().toString() + csr.title() + \" (**CSR**)\"\n+                    + \"- [ ] \" + generateCSRProgressMessage(csr));\n@@ -504,2 +501,2 @@\n-            assertTrue(pr.store().body().contains(csrUpdateMarker));\n-            assertEquals(pr.store().body().indexOf(csrUpdateMarker), pr.store().body().lastIndexOf(csrUpdateMarker));\n+            assertTrue(pr.store().body().contains(CSR_UPDATE_MARKER));\n+            assertEquals(pr.store().body().indexOf(CSR_UPDATE_MARKER), pr.store().body().lastIndexOf(CSR_UPDATE_MARKER));\n@@ -511,2 +508,0 @@\n-        String csrUpdateMarker = \"<!-- csr: 'update' -->\";\n-        String progressMarker = \"<!-- Anything below this marker will be automatically updated, please do not edit manually! -->\";\n@@ -542,1 +537,1 @@\n-            assertFalse(pr.store().body().contains(csrUpdateMarker));\n+            assertFalse(pr.store().body().contains(CSR_UPDATE_MARKER));\n@@ -553,1 +548,1 @@\n-            assertFalse(pr.store().body().contains(csrUpdateMarker));\n+            assertFalse(pr.store().body().contains(CSR_UPDATE_MARKER));\n@@ -557,1 +552,88 @@\n-            assertFalse(pr.store().body().contains(csrUpdateMarker));\n+            assertFalse(pr.store().body().contains(CSR_UPDATE_MARKER));\n+        }\n+    }\n+\n+    @Test\n+    void testPRWithMultipleIssues(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var repo = credentials.getHostedRepository();\n+            var issueProject = credentials.getIssueProject();\n+            var issue = issueProject.createIssue(\"This is an issue\", List.of(), Map.of());\n+            issue.setProperty(\"issuetype\", JSON.of(\"Bug\"));\n+            var csrPullRequestBot = new CSRPullRequestBot(repo, issueProject);\n+            var csrIssueBot = new CSRIssueBot(issueProject, List.of(repo));\n+\n+            \/\/ Run issue bot once to initialize lastUpdatedAt\n+            TestBotRunner.runPeriodicItems(csrIssueBot);\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n+            var localRepo = CheckableRepository.init(localRepoFolder, repo.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, repo.url(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, repo.url(), \"edit\", true);\n+            var pr = credentials.createPullRequest(repo, \"master\", \"edit\", issue.id() + \": This is an issue\");\n+            pr.setBody(\"PR body\\n\" + PROGRESS_MARKER);\n+            \/\/ Add the notification link to the PR in the issue. This is needed for the CSRIssueBot to\n+            \/\/ be able to trigger on CSR issue updates\n+            PullRequestUtils.postPullRequestLinkComment(issue, pr);\n+            \/\/ Run bot\n+            TestBotRunner.runPeriodicItems(csrPullRequestBot);\n+\n+            \/\/ Add another issue to this pr\n+            var issue2 = issueProject.createIssue(\"This is an issue 2\", List.of(), Map.of());\n+            issue2.setProperty(\"issuetype\", JSON.of(\"Bug\"));\n+            pr.addComment(SolvesTracker.setSolvesMarker(new org.openjdk.skara.vcs.openjdk.Issue(issue2.id(), issue2.title())));\n+            PullRequestUtils.postPullRequestLinkComment(issue2, pr);\n+\n+            \/\/ Add a csr to issue2\n+            var csr2 = issueProject.createIssue(\"This is an CSR for issue2\", List.of(), Map.of());\n+            csr2.setProperty(\"issuetype\", JSON.of(\"CSR\"));\n+            csr2.setState(Issue.State.OPEN);\n+            issue2.addLink(Link.create(csr2, \"csr for\").build());\n+\n+            TestBotRunner.runPeriodicItems(csrIssueBot);\n+            \/\/ PR should contain csr label\n+            assertTrue(pr.store().labelNames().contains(\"csr\"));\n+\n+            \/\/ Add another issue to this pr\n+            var issue3 = issueProject.createIssue(\"This is an issue 3\", List.of(), Map.of());\n+            issue3.setProperty(\"issuetype\", JSON.of(\"Bug\"));\n+            pr.addComment(SolvesTracker.setSolvesMarker(new org.openjdk.skara.vcs.openjdk.Issue(issue3.id(), issue3.title())));\n+            PullRequestUtils.postPullRequestLinkComment(issue3, pr);\n+\n+            \/\/ Withdrawn the csr for issue2\n+            csr2.setState(Issue.State.CLOSED);\n+            csr2.setProperty(\"resolution\", JSON.object().put(\"name\", \"Withdrawn\"));\n+            TestBotRunner.runPeriodicItems(csrIssueBot);\n+            assertTrue(pr.store().body().contains(CSR_UPDATE_MARKER));\n+            \/\/ PR should not contain csr label\n+            assertFalse(pr.store().labelNames().contains(\"csr\"));\n+\n+            \/\/ Add a csr to issue3\n+            var csr3 = issueProject.createIssue(\"This is an CSR for issue3\", List.of(), Map.of());\n+            csr3.setProperty(\"issuetype\", JSON.of(\"CSR\"));\n+            csr3.setState(Issue.State.OPEN);\n+            issue3.addLink(Link.create(csr3, \"csr for\").build());\n+\n+            TestBotRunner.runPeriodicItems(csrIssueBot);\n+            \/\/ PR should contain csr label\n+            assertTrue(pr.store().labelNames().contains(\"csr\"));\n+\n+            \/\/ Approve CSR3\n+            csr3.setState(Issue.State.CLOSED);\n+            csr3.setProperty(\"resolution\", JSON.object().put(\"name\", \"Approved\"));\n+            TestBotRunner.runPeriodicItems(csrIssueBot);\n+            \/\/ PR should not contain csr label\n+            assertFalse(pr.store().labelNames().contains(\"csr\"));\n+\n+            \/\/ Approve CSR2\n+            csr2.setProperty(\"resolution\", JSON.object().put(\"name\", \"Approved\"));\n+            TestBotRunner.runPeriodicItems(csrIssueBot);\n+            \/\/ PR should not contain csr label\n+            assertFalse(pr.store().labelNames().contains(\"csr\"));\n","filename":"bots\/csr\/src\/test\/java\/org\/openjdk\/skara\/bots\/csr\/CSRBotTests.java","additions":117,"deletions":35,"binary":false,"changes":152,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/forward\/build.gradle","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/forward\/src\/main\/java\/org\/openjdk\/skara\/bots\/forward\/ForwardBot.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/forward\/src\/main\/java\/org\/openjdk\/skara\/bots\/forward\/ForwardBotFactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,22 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n","filename":"bots\/forward\/src\/test\/java\/org\/openjdk\/skara\/bots\/forward\/ForwardBotFactoryTest.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/forward\/src\/test\/java\/org\/openjdk\/skara\/bots\/forward\/ForwardBotTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/hgbridge\/build.gradle","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/hgbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/hgbridge\/ExporterConfig.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/hgbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/hgbridge\/JBridgeBot.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/hgbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/hgbridge\/JBridgeBotFactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/hgbridge\/src\/test\/java\/org\/openjdk\/skara\/bots\/hgbridge\/BridgeBotTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,22 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n","filename":"bots\/hgbridge\/src\/test\/java\/org\/openjdk\/skara\/bots\/hgbridge\/JBridgeBotFactoryTest.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,3 @@\n+    implementation project(':bots:common')\n+    implementation project(':jbs')\n+    implementation project(':jcheck')\n","filename":"bots\/jep\/build.gradle","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,3 @@\n+    requires org.openjdk.skara.bots.common;\n+    requires org.openjdk.skara.jcheck;\n+    requires org.openjdk.skara.jbs;\n","filename":"bots\/jep\/src\/main\/java\/module-info.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,0 @@\n-import java.util.regex.Pattern;\n@@ -40,0 +39,1 @@\n+import static org.openjdk.skara.bots.common.PullRequestConstants.*;\n@@ -42,1 +42,0 @@\n-    final static String JEP_LABEL = \"jep\";\n@@ -44,1 +43,0 @@\n-    private final static Pattern jepMarkerPattern = Pattern.compile(\"<!-- jep: '(.*?)' '(.*?)' '(.*?)' -->\");\n@@ -68,1 +66,1 @@\n-                    .map(jepMarkerPattern::matcher)\n+                    .map(JEP_MARKER_PATTERN::matcher)\n","filename":"bots\/jep\/src\/main\/java\/org\/openjdk\/skara\/bots\/jep\/JEPBot.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,22 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n","filename":"bots\/jep\/src\/test\/java\/org\/openjdk\/skara\/bots\/jep\/JEPBotFactoryTest.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,0 +41,1 @@\n+import static org.openjdk.skara.bots.common.PullRequestConstants.*;\n@@ -43,1 +44,0 @@\n-    private static final String jepMarker = \"<!-- jep: '%s' '%s' '%s' -->\"; \/\/ <!-- jep: 'JEP-ID' 'ISSUE-ID' 'ISSUE-TITLE' -->\n@@ -78,1 +78,1 @@\n-            assertFalse(pr.store().labelNames().contains(JEPBot.JEP_LABEL));\n+            assertFalse(pr.store().labelNames().contains(JEP_LABEL));\n@@ -82,2 +82,2 @@\n-                pr.addComment(String.format(jepMarker, i, issueLists.get(i - 1).id(), issueLists.get(i - 1).title()));\n-                pr.removeLabel(JEPBot.JEP_LABEL);\n+                pr.addComment(String.format(JEP_MARKER, i, issueLists.get(i - 1).id(), issueLists.get(i - 1).title()));\n+                pr.removeLabel(JEP_LABEL);\n@@ -85,1 +85,1 @@\n-                assertTrue(pr.store().labelNames().contains(JEPBot.JEP_LABEL));\n+                assertTrue(pr.store().labelNames().contains(JEP_LABEL));\n@@ -90,1 +90,1 @@\n-            assertTrue(pr.store().labelNames().contains(JEPBot.JEP_LABEL));\n+            assertTrue(pr.store().labelNames().contains(JEP_LABEL));\n@@ -92,1 +92,1 @@\n-            pr.removeLabel(JEPBot.JEP_LABEL);\n+            pr.removeLabel(JEP_LABEL);\n@@ -96,2 +96,2 @@\n-                pr.addComment(String.format(jepMarker, i, issueLists.get(i - 1).id(), issueLists.get(i - 1).title()));\n-                pr.addLabel(JEPBot.JEP_LABEL);\n+                pr.addComment(String.format(JEP_MARKER, i, issueLists.get(i - 1).id(), issueLists.get(i - 1).title()));\n+                pr.addLabel(JEP_LABEL);\n@@ -99,1 +99,1 @@\n-                assertFalse(pr.store().labelNames().contains(JEPBot.JEP_LABEL));\n+                assertFalse(pr.store().labelNames().contains(JEP_LABEL));\n@@ -129,1 +129,1 @@\n-            assertFalse(pr.store().labelNames().contains(JEPBot.JEP_LABEL));\n+            assertFalse(pr.store().labelNames().contains(JEP_LABEL));\n@@ -132,2 +132,2 @@\n-            pr.addLabel(JEPBot.JEP_LABEL);\n-            assertTrue(pr.store().labelNames().contains(JEPBot.JEP_LABEL));\n+            pr.addLabel(JEP_LABEL);\n+            assertTrue(pr.store().labelNames().contains(JEP_LABEL));\n@@ -136,1 +136,1 @@\n-            assertFalse(pr.store().labelNames().contains(JEPBot.JEP_LABEL));\n+            assertFalse(pr.store().labelNames().contains(JEP_LABEL));\n@@ -165,1 +165,1 @@\n-            assertFalse(pr.store().labelNames().contains(JEPBot.JEP_LABEL));\n+            assertFalse(pr.store().labelNames().contains(JEP_LABEL));\n@@ -168,3 +168,3 @@\n-            pr.addComment(String.format(jepMarker, \"unneeded\", \"unneeded\", \"unneeded\"));\n-            pr.addLabel(JEPBot.JEP_LABEL);\n-            assertTrue(pr.store().labelNames().contains(JEPBot.JEP_LABEL));\n+            pr.addComment(String.format(JEP_MARKER, \"unneeded\", \"unneeded\", \"unneeded\"));\n+            pr.addLabel(JEP_LABEL);\n+            assertTrue(pr.store().labelNames().contains(JEP_LABEL));\n@@ -173,1 +173,1 @@\n-            assertFalse(pr.store().labelNames().contains(JEPBot.JEP_LABEL));\n+            assertFalse(pr.store().labelNames().contains(JEP_LABEL));\n@@ -202,1 +202,1 @@\n-            assertFalse(pr.store().labelNames().contains(JEPBot.JEP_LABEL));\n+            assertFalse(pr.store().labelNames().contains(JEP_LABEL));\n@@ -205,3 +205,3 @@\n-            pr.addComment(String.format(jepMarker, \"100\", \"TEST-100\", \"Demo jep\"));\n-            pr.addLabel(JEPBot.JEP_LABEL);\n-            assertTrue(pr.store().labelNames().contains(JEPBot.JEP_LABEL));\n+            pr.addComment(String.format(JEP_MARKER, \"100\", \"TEST-100\", \"Demo jep\"));\n+            pr.addLabel(JEP_LABEL);\n+            assertTrue(pr.store().labelNames().contains(JEP_LABEL));\n@@ -210,1 +210,1 @@\n-            assertTrue(pr.store().labelNames().contains(JEPBot.JEP_LABEL));\n+            assertTrue(pr.store().labelNames().contains(JEP_LABEL));\n@@ -239,1 +239,1 @@\n-            assertFalse(pr.store().labelNames().contains(JEPBot.JEP_LABEL));\n+            assertFalse(pr.store().labelNames().contains(JEP_LABEL));\n@@ -242,3 +242,3 @@\n-            pr.addComment(String.format(jepMarker, \"1\", \"TEST-2\", \"Demo jep\"));\n-            pr.addLabel(JEPBot.JEP_LABEL);\n-            assertTrue(pr.store().labelNames().contains(JEPBot.JEP_LABEL));\n+            pr.addComment(String.format(JEP_MARKER, \"1\", \"TEST-2\", \"Demo jep\"));\n+            pr.addLabel(JEP_LABEL);\n+            assertTrue(pr.store().labelNames().contains(JEP_LABEL));\n@@ -247,1 +247,1 @@\n-            assertTrue(pr.store().labelNames().contains(JEPBot.JEP_LABEL));\n+            assertTrue(pr.store().labelNames().contains(JEP_LABEL));\n","filename":"bots\/jep\/src\/test\/java\/org\/openjdk\/skara\/bots\/jep\/JEPBotTests.java","additions":30,"deletions":30,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/merge\/build.gradle","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/merge\/src\/main\/java\/module-info.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/merge\/src\/main\/java\/org\/openjdk\/skara\/bots\/merge\/MergeBotFactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,22 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n","filename":"bots\/merge\/src\/test\/java\/org\/openjdk\/skara\/bots\/merge\/MergeBotFactoryTest.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/mirror\/build.gradle","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/mirror\/src\/main\/java\/org\/openjdk\/skara\/bots\/mirror\/MirrorBot.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/mirror\/src\/main\/java\/org\/openjdk\/skara\/bots\/mirror\/MirrorBotFactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,22 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n","filename":"bots\/mirror\/src\/test\/java\/org\/openjdk\/skara\/bots\/mirror\/MirrorBotFactoryTest.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/mirror\/src\/test\/java\/org\/openjdk\/skara\/bots\/mirror\/MirrorBotTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/mlbridge\/build.gradle","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/mlbridge\/src\/main\/java\/module-info.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/ArchiveItem.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,1 @@\n-    private static final Pattern commentPattern = Pattern.compile(\"<!--.*?-->\",\n+    private static final Pattern COMMENT_PATTERN = Pattern.compile(\"<!--.*?-->\",\n@@ -43,2 +43,1 @@\n-    private static final Pattern commandPattern = Pattern.compile(\"^\\\\s*\/([A-Za-z]+).*$\", Pattern.MULTILINE | Pattern.DOTALL);\n-\n+    static final Pattern COMMAND_PATTERN = Pattern.compile(\"^\\\\s*\/([A-Za-z]+).*$\", Pattern.MULTILINE | Pattern.DOTALL);\n@@ -49,1 +48,1 @@\n-        var commentMatcher = commentPattern.matcher(body);\n+        var commentMatcher = COMMENT_PATTERN.matcher(body);\n@@ -52,1 +51,1 @@\n-        var commandLineMatcher = commandPattern.matcher(body);\n+        var commandLineMatcher = COMMAND_PATTERN.matcher(body);\n@@ -395,1 +394,4 @@\n-                    var contents = pr.repository().fileContents(reviewComment.path(), reviewComment.hash().get().hex()).lines().collect(Collectors.toList());\n+                    var contents = pr.repository().fileContents(reviewComment.path(), reviewComment.hash().get().hex())\n+                            .orElseThrow(() -> new RuntimeException(\"Could not find \" + reviewComment.path() + \" on ref \"\n+                                    + reviewComment.hash().get().hex() + \" in repo \" + pr.repository().name()))\n+                            .lines().collect(Collectors.toList());\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/ArchiveMessages.java","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/ArchiveReaderWorkItem.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import java.nio.charset.StandardCharsets;\n@@ -41,1 +40,0 @@\n-import java.util.regex.*;\n@@ -44,0 +42,2 @@\n+import static org.openjdk.skara.bots.mlbridge.ArchiveMessages.COMMAND_PATTERN;\n+\n@@ -120,3 +120,1 @@\n-    private static final Pattern commandPattern = Pattern.compile(\"^\\\\s*\/([A-Za-z]+).*$\", Pattern.MULTILINE | Pattern.DOTALL);\n-\n-    private boolean ignoreComment(HostUser author, String body) {\n+    private boolean ignoreComment(HostUser author, String body, ZonedDateTime createdTime, ZonedDateTime lastDraftTime) {\n@@ -130,1 +128,1 @@\n-        var commandLineMatcher = commandPattern.matcher(body);\n+        var commandLineMatcher = COMMAND_PATTERN.matcher(body);\n@@ -143,0 +141,7 @@\n+        \/\/ If the pull request was converted to draft, the comments\n+        \/\/ after the last converted time should be ignored.\n+        if (pr.isDraft()) {\n+            if (lastDraftTime != null && lastDraftTime.isBefore(createdTime)) {\n+                return true;\n+            }\n+        }\n@@ -242,0 +247,4 @@\n+    private String mboxFile() {\n+        return bot.codeRepo().name() + \"\/\" + pr.id() + \".mbox\";\n+    }\n+\n@@ -245,2 +254,0 @@\n-        var archiveRepo = materializeArchive(path);\n-        var mboxBasePath = path.resolve(bot.codeRepo().name());\n@@ -249,5 +256,3 @@\n-        try {\n-            var archiveContents = Files.readString(mboxBasePath.resolve(pr.id() + \".mbox\"), StandardCharsets.UTF_8);\n-            sentMails.addAll(Mbox.splitMbox(archiveContents, bot.emailAddress()));\n-        } catch (IOException ignored) {\n-        }\n+        \/\/ Load in already sent emails from the archive, if there are any.\n+        var archiveContents = bot.archiveRepo().fileContents(mboxFile(), bot.archiveRef());\n+        archiveContents.ifPresent(s -> sentMails.addAll(Mbox.splitMbox(s, bot.emailAddress())));\n@@ -340,0 +345,1 @@\n+            var lastDraftTime = pr.lastMarkedAsDraftTime().orElse(null);\n@@ -343,1 +349,1 @@\n-                if (ignoreComment(comment.author(), comment.body())) {\n+                if (ignoreComment(comment.author(), comment.body(), comment.createdAt(), lastDraftTime)) {\n@@ -353,1 +359,1 @@\n-                if (ignoreComment(review.reviewer(), review.body().orElse(\"\"))) {\n+                if (ignoreComment(review.reviewer(), review.body().orElse(\"\"), review.createdAt(), lastDraftTime)) {\n@@ -365,1 +371,1 @@\n-                if (ignoreComment(reviewComment.author(), reviewComment.body())) {\n+                if (ignoreComment(reviewComment.author(), reviewComment.body(), reviewComment.createdAt(), lastDraftTime)) {\n@@ -385,1 +391,2 @@\n-            var mbox = MailingListServerFactory.createMboxFileServer(mboxBasePath);\n+            var newArchivedContents = new StringBuilder();\n+            archiveContents.ifPresent(newArchivedContents::append);\n@@ -390,1 +397,1 @@\n-                mbox.post(forArchiving);\n+                newArchivedContents.append(Mbox.fromMail(forArchiving));\n@@ -392,1 +399,3 @@\n-            pushMbox(archiveRepo, \"Adding comments for PR \" + bot.codeRepo().name() + \"\/\" + pr.id());\n+            bot.archiveRepo().writeFileContents(mboxFile(), newArchivedContents.toString(), new Branch(bot.archiveRef()),\n+                    \"Adding comments for PR \" + bot.codeRepo().name() + \"\/\" + pr.id(),\n+                    bot.emailAddress().fullName().orElseThrow(), bot.emailAddress().address());\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/ArchiveWorkItem.java","additions":29,"deletions":20,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,3 +41,3 @@\n-    private final static String bridgedMailMarker = \"<!-- Bridged id (%s) -->\";\n-    final static Pattern bridgedMailId = Pattern.compile(\"^<!-- Bridged id \\\\(([=+\/\\\\w]+)\\\\) -->\");\n-    private final static Pattern bridgedSender = Pattern.compile(\"Mailing list message from \\\\[(.*?)]\\\\(mailto:(\\\\S+)\\\\)\");\n+    private static final String BRIDGED_MAIL_MARKER = \"<!-- Bridged id (%s) -->\";\n+    static final Pattern BRIDGED_MAIL_ID = Pattern.compile(\"^<!-- Bridged id \\\\(([=+\/\\\\w]+)\\\\) -->\");\n+    private static final Pattern BRIDGED_SENDER = Pattern.compile(\"Mailing list message from \\\\[(.*?)]\\\\(mailto:(\\\\S+)\\\\)\");\n@@ -56,1 +56,1 @@\n-        var matcher = bridgedMailId.matcher(comment.body());\n+        var matcher = BRIDGED_MAIL_ID.matcher(comment.body());\n@@ -61,1 +61,1 @@\n-        var senderMatcher = bridgedSender.matcher(comment.body());\n+        var senderMatcher = BRIDGED_SENDER.matcher(comment.body());\n@@ -77,1 +77,1 @@\n-        var marker = String.format(bridgedMailMarker,\n+        var marker = String.format(BRIDGED_MAIL_MARKER,\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/BridgedComment.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -79,1 +79,2 @@\n-        var confFile = remoteRepo.fileContents(\".jcheck\/conf\", ref);\n+        var confFile = remoteRepo.fileContents(\".jcheck\/conf\", ref)\n+                .orElseThrow(() -> new RuntimeException(\"Could not find .jcheck\/conf on ref \" + ref + \" in repo \" + remoteRepo.name()));\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/CensusInstance.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/CommentPosterWorkItem.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/HostUserToUsername.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,22 @@\n+\/*\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/LabelsUpdaterWorkItem.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,1 @@\n-    private final Pattern pullRequestLinkPattern = Pattern.compile(\"^(?:PR: |Pull request:\\\\R)(.*?)$\", Pattern.MULTILINE);\n+    private static final Pattern PULL_REQUEST_LINK_PATTERN = Pattern.compile(\"^(?:PR: |Pull request:\\\\R)(.*?)$\", Pattern.MULTILINE);\n@@ -77,1 +77,1 @@\n-            var matcher = pullRequestLinkPattern.matcher(first.body());\n+            var matcher = PULL_REQUEST_LINK_PATTERN.matcher(first.body());\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/MailingListArchiveReaderBot.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -100,1 +100,5 @@\n-        var mailmanServer = MailingListServerFactory.createMailmanServer(listArchive, listSmtp, Duration.ZERO);\n+        boolean useEtag = false;\n+        if (specific.get(\"server\").contains(\"etag\")) {\n+            useEtag = specific.get(\"server\").get(\"etag\").asBoolean();\n+        }\n+        var mailmanServer = MailingListServerFactory.createMailmanServer(listArchive, listSmtp, Duration.ZERO, useEtag);\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/MailingListBridgeBotFactory.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,5 +28,5 @@\n-    private static final Pattern emojiPattern = Pattern.compile(\"(:([0-9a-z_+-]+):)\");\n-    private static final Pattern suggestionPattern = Pattern.compile(\"^```suggestion$\", Pattern.MULTILINE);\n-    private static final Pattern codePattern = Pattern.compile(\"^```+(?:\\\\w+)?$\", Pattern.MULTILINE);\n-    private static final Pattern escapesPattern = Pattern.compile(\"\\\\\\\\([!\\\"#$%&'()*+,\\\\-.\/:;<=?@\\\\[\\\\]^_`{|}~])\", Pattern.MULTILINE);\n-    private static final Pattern entitiesPattern = Pattern.compile(\"&#32;\", Pattern.MULTILINE);\n+    private static final Pattern EMOJI_PATTERN = Pattern.compile(\"(:([0-9a-z_+-]+):)\");\n+    private static final Pattern SUGGESTION_PATTERN = Pattern.compile(\"^```suggestion$\", Pattern.MULTILINE);\n+    private static final Pattern CODE_PATTERN = Pattern.compile(\"^```+(?:\\\\w+)?$\", Pattern.MULTILINE);\n+    private static final Pattern ESCAPES_PATTERN = Pattern.compile(\"\\\\\\\\([!\\\"#$%&'()*+,\\\\-.\/:;<=?@\\\\[\\\\]^_`{|}~])\", Pattern.MULTILINE);\n+    private static final Pattern ENTITIES_PATTERN = Pattern.compile(\"&#32;\", Pattern.MULTILINE);\n@@ -35,1 +35,1 @@\n-        var emojiMatcher = emojiPattern.matcher(markdown);\n+        var emojiMatcher = EMOJI_PATTERN.matcher(markdown);\n@@ -40,1 +40,1 @@\n-        var suggestionMatcher = suggestionPattern.matcher(markdown);\n+        var suggestionMatcher = SUGGESTION_PATTERN.matcher(markdown);\n@@ -45,1 +45,1 @@\n-        var codeMatcher = codePattern.matcher(markdown);\n+        var codeMatcher = CODE_PATTERN.matcher(markdown);\n@@ -50,1 +50,1 @@\n-        var escapesMatcher = escapesPattern.matcher(markdown);\n+        var escapesMatcher = ESCAPES_PATTERN.matcher(markdown);\n@@ -55,1 +55,1 @@\n-        var entitiesMatcher = entitiesPattern.matcher(markdown);\n+        var entitiesMatcher = ENTITIES_PATTERN.matcher(markdown);\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/MarkdownToText.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n-    private static final Pattern leadingQuotesPattern = Pattern.compile(\"^([>\\\\s]+).*\");\n+    private static final Pattern LEADING_QUOTES_PATTERN = Pattern.compile(\"^([>\\\\s]+).*\");\n@@ -33,1 +33,1 @@\n-        var leadingQuotesMatcher = leadingQuotesPattern.matcher(line);\n+        var leadingQuotesMatcher = LEADING_QUOTES_PATTERN.matcher(line);\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/QuoteFilter.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -83,1 +83,1 @@\n-    private final static Pattern pushedPattern = Pattern.compile(\"Pushed as commit ([a-f0-9]{40})\\\\.\");\n+    public static final Pattern PUSHED_PATTERN = Pattern.compile(\"Pushed as commit ([a-f0-9]{40})\\\\.\");\n@@ -88,1 +88,1 @@\n-                              .map(pushedPattern::matcher)\n+                              .map(PUSHED_PATTERN::matcher)\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/ReviewArchive.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,3 +29,3 @@\n-    private static final Pattern punctuationPattern = Pattern.compile(\"([!\\\"#$%&'()*+,\\\\-.\/:;<=?@\\\\[\\\\]^_`{|}~])\", Pattern.MULTILINE);\n-    private static final Pattern indentedPattern = Pattern.compile(\"^ {4}\", Pattern.MULTILINE);\n-    private static final Pattern mentionPattern = Pattern.compile(\"@(\\\\w+)\", Pattern.MULTILINE);\n+    private static final Pattern PUNCTUATION_PATTERN = Pattern.compile(\"([!\\\"#$%&'()*+,\\\\-.\/:;<=?@\\\\[\\\\]^_`{|}~])\", Pattern.MULTILINE);\n+    private static final Pattern INDENTED_PATTERN = Pattern.compile(\"^ {4}\", Pattern.MULTILINE);\n+    private static final Pattern MENTION_PATTERN = Pattern.compile(\"@(\\\\w+)\", Pattern.MULTILINE);\n@@ -38,1 +38,1 @@\n-        var punctuationMatcher = punctuationPattern.matcher(text);\n+        var punctuationMatcher = PUNCTUATION_PATTERN.matcher(text);\n@@ -43,1 +43,1 @@\n-        var indentedMatcher = indentedPattern.matcher(text);\n+        var indentedMatcher = INDENTED_PATTERN.matcher(text);\n@@ -65,1 +65,1 @@\n-        var mentionMatcher = mentionPattern.matcher(text);\n+        var mentionMatcher = MENTION_PATTERN.matcher(text);\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/TextToMarkdown.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/WebrevNotification.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/WebrevStorage.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/mlbridge\/src\/test\/java\/org\/openjdk\/skara\/bots\/mlbridge\/ArchiveItemTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,22 @@\n+\/*\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n@@ -11,4 +33,4 @@\n-        assertFalse(BridgedComment.bridgedMailId.matcher(\"foo\").find());\n-        assertFalse(BridgedComment.bridgedMailId.matcher(\"<-- foo -->\").find());\n-        assertTrue(BridgedComment.bridgedMailId.matcher(\"<!-- Bridged id (foo=) -->\").find());\n-        assertTrue(BridgedComment.bridgedMailId.matcher(\"<!-- Bridged id (PEEzNDJBNUQwLTM\" +\n+        assertFalse(BridgedComment.BRIDGED_MAIL_ID.matcher(\"foo\").find());\n+        assertFalse(BridgedComment.BRIDGED_MAIL_ID.matcher(\"<-- foo -->\").find());\n+        assertTrue(BridgedComment.BRIDGED_MAIL_ID.matcher(\"<!-- Bridged id (foo=) -->\").find());\n+        assertTrue(BridgedComment.BRIDGED_MAIL_ID.matcher(\"<!-- Bridged id (PEEzNDJBNUQwLTM\" +\n@@ -17,1 +39,1 @@\n-        var matcher = BridgedComment.bridgedMailId.matcher(\"<!-- Bridged id (fo+\/o=) -->\");\n+        var matcher = BridgedComment.BRIDGED_MAIL_ID.matcher(\"<!-- Bridged id (fo+\/o=) -->\");\n","filename":"bots\/mlbridge\/src\/test\/java\/org\/openjdk\/skara\/bots\/mlbridge\/BridgedCommentTests.java","additions":27,"deletions":5,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -0,0 +1,22 @@\n+\/*\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n","filename":"bots\/mlbridge\/src\/test\/java\/org\/openjdk\/skara\/bots\/mlbridge\/LabelsUpdaterTests.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/mlbridge\/src\/test\/java\/org\/openjdk\/skara\/bots\/mlbridge\/MailingListArchiveReaderBotTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,22 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n@@ -49,1 +71,2 @@\n-                        \"interval\": \"PT5S\"\n+                        \"interval\": \"PT5S\",\n+                        \"etag\": true,\n","filename":"bots\/mlbridge\/src\/test\/java\/org\/openjdk\/skara\/bots\/mlbridge\/MailingListBridgeBotFactoryTest.java","additions":24,"deletions":1,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -3440,0 +3440,146 @@\n+\n+    @Test\n+    void notArchiveDraftPR(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory();\n+             var archiveFolder = new TemporaryDirectory();\n+             var listServer = new TestMailmanServer();\n+             var webrevServer = new TestWebrevServer()) {\n+            var author = credentials.getHostedRepository();\n+            var archive = credentials.getHostedRepository();\n+            var ignored = credentials.getHostedRepository();\n+            var listAddress = EmailAddress.parse(listServer.createList(\"test\"));\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addAuthor(author.forge().currentUser().id());\n+            var from = EmailAddress.from(\"test\", \"test@test.mail\");\n+            var mlBot = MailingListBridgeBot.newBuilder()\n+                    .from(from)\n+                    .repo(author)\n+                    .archive(archive)\n+                    .censusRepo(censusBuilder.build())\n+                    .lists(List.of(new MailingListConfiguration(listAddress, Set.of())))\n+                    .ignoredUsers(Set.of(ignored.forge().currentUser().username()))\n+                    .ignoredComments(Set.of())\n+                    .listArchive(listServer.getArchive())\n+                    .smtpServer(listServer.getSMTP())\n+                    .webrevStorageHTMLRepository(archive)\n+                    .webrevStorageRef(\"webrev\")\n+                    .webrevStorageBase(Path.of(\"test\"))\n+                    .webrevStorageBaseUri(webrevServer.uri())\n+                    .readyLabels(Set.of(\"rfr\"))\n+                    .readyComments(Map.of(ignored.forge().currentUser().username(), Pattern.compile(\"ready\")))\n+                    .issueTracker(URIBuilder.base(\"http:\/\/issues.test\/browse\/\").build())\n+                    .headers(Map.of(\"Extra1\", \"val1\", \"Extra2\", \"val2\"))\n+                    .sendInterval(Duration.ZERO)\n+                    .build();\n+\n+            \/\/ Populate the repository.\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+            localRepo.push(masterHash, archive.url(), \"webrev\", true);\n+\n+            \/\/ Make a change with a corresponding PR.\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, \"A simple change\",\n+                    \"Change msg\\n\\nWith several lines\");\n+            localRepo.push(editHash, author.url(), \"edit\", true);\n+            var pr = credentials.createPullRequest(archive, \"master\", \"edit\", \"1234: This is a pull request\");\n+            pr.setBody(\"This is not ready now\");\n+\n+            \/\/ Make it as draft, now the PR is not ready.\n+            pr.makeDraft();\n+\n+            \/\/ Run an archive pass.\n+            TestBotRunner.runPeriodicItems(mlBot);\n+\n+            \/\/ A draft PR should not be archived.\n+            Repository.materialize(archiveFolder.path(), archive.url(), \"master\");\n+            assertFalse(archiveContains(archiveFolder.path(), \"This is a pull request\"));\n+\n+            \/\/ Make it as not draft.\n+            pr.makeNotDraft();\n+\n+            \/\/ Flag it as ready for review.\n+            pr.setBody(\"This should be ready now\");\n+            pr.addLabel(\"rfr\");\n+\n+            \/\/ Post a ready comment.\n+            var ignoredPr = ignored.pullRequest(pr.id());\n+            ignoredPr.addComment(\"ready\");\n+\n+            \/\/ Run another archive pass.\n+            TestBotRunner.runPeriodicItems(mlBot);\n+\n+            \/\/ The archive should now contain an entry.\n+            Repository.materialize(archiveFolder.path(), archive.url(), \"master\");\n+            assertEquals(1, archiveContainsCount(archiveFolder.path(), \"RFR: 1234: This is a pull request\"));\n+\n+            \/\/ Add a comment.\n+            pr.addComment(\"This is a comment\");\n+\n+            \/\/ Run another archive pass.\n+            TestBotRunner.runPeriodicItems(mlBot);\n+\n+            \/\/ The archive should now contain the comment.\n+            Repository.materialize(archiveFolder.path(), archive.url(), \"master\");\n+            assertEquals(2, archiveContainsCount(archiveFolder.path(), \"RFR: 1234: This is a pull request\"));\n+            assertEquals(1, archiveContainsCount(archiveFolder.path(), \"This is a comment\"));\n+\n+            \/\/ Make it as draft again.\n+            pr.makeDraft();\n+\n+            \/\/ Add a new comment.\n+            pr.addComment(\"This is a new comment\");\n+\n+            \/\/ Run another archive pass.\n+            TestBotRunner.runPeriodicItems(mlBot);\n+\n+            \/\/ The archive should not now contain the new comment.\n+            Repository.materialize(archiveFolder.path(), archive.url(), \"master\");\n+            assertEquals(2, archiveContainsCount(archiveFolder.path(), \"RFR: 1234: This is a pull request\"));\n+            assertEquals(1, archiveContainsCount(archiveFolder.path(), \"This is a comment\"));\n+            assertFalse(archiveContains(archiveFolder.path(), \"This is a new comment\"));\n+\n+            \/\/ Make it as not draft again.\n+            pr.makeNotDraft();\n+\n+            \/\/ Run another archive pass.\n+            TestBotRunner.runPeriodicItems(mlBot);\n+\n+            \/\/ The archive should now contain the new comment.\n+            Repository.materialize(archiveFolder.path(), archive.url(), \"master\");\n+            assertEquals(3, archiveContainsCount(archiveFolder.path(), \"RFR: 1234: This is a pull request\"));\n+            assertEquals(1, archiveContainsCount(archiveFolder.path(), \"This is a comment\"));\n+            assertEquals(1, archiveContainsCount(archiveFolder.path(), \"This is a new comment\"));\n+\n+            \/\/ Add a new comment before making it as draft.\n+            pr.addComment(\"This is a comment before making\");\n+\n+            \/\/ Make it as draft again.\n+            pr.makeDraft();\n+\n+            \/\/ Add a new comment after making it as draft.\n+            pr.addComment(\"This is a comment after making\");\n+\n+            \/\/ Run another archive pass.\n+            TestBotRunner.runPeriodicItems(mlBot);\n+\n+            \/\/ The archive should only contain the comments before making it as draft.\n+            Repository.materialize(archiveFolder.path(), archive.url(), \"master\");\n+            assertEquals(4, archiveContainsCount(archiveFolder.path(), \"RFR: 1234: This is a pull request\"));\n+            assertEquals(1, archiveContainsCount(archiveFolder.path(), \"This is a comment before making\"));\n+            assertFalse(archiveContains(archiveFolder.path(), \"This is a comment after making\"));\n+\n+            \/\/ Make it as not draft again.\n+            pr.makeNotDraft();\n+\n+            \/\/ Run another archive pass.\n+            TestBotRunner.runPeriodicItems(mlBot);\n+\n+            \/\/ The archive should now contain all the comments.\n+            Repository.materialize(archiveFolder.path(), archive.url(), \"master\");\n+            assertEquals(5, archiveContainsCount(archiveFolder.path(), \"RFR: 1234: This is a pull request\"));\n+            assertEquals(1, archiveContainsCount(archiveFolder.path(), \"This is a comment before making\"));\n+            assertEquals(1, archiveContainsCount(archiveFolder.path(), \"This is a comment after making\"));\n+        }\n+    }\n","filename":"bots\/mlbridge\/src\/test\/java\/org\/openjdk\/skara\/bots\/mlbridge\/MailingListBridgeBotTests.java","additions":147,"deletions":1,"binary":false,"changes":148,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/mlbridge\/src\/test\/java\/org\/openjdk\/skara\/bots\/mlbridge\/MarkdownToTextTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/mlbridge\/src\/test\/java\/org\/openjdk\/skara\/bots\/mlbridge\/TextToMarkdownTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/mlbridge\/src\/test\/java\/org\/openjdk\/skara\/bots\/mlbridge\/WebrevStorageTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/notify\/build.gradle","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/notify\/src\/main\/java\/module-info.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/CommitFormatters.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/NotifyBotFactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/PullRequestListener.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/PullRequestState.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -152,1 +152,1 @@\n-                           .filter(mr -> !mr.group(2).endsWith(\" (**CSR**)\") && !mr.group(2).endsWith(\" (**JEP**)\"))\n+                           .filter(mr -> !mr.group(2).endsWith(\" (**CSR**)\") && !mr.group(2).endsWith(\" (**CSR**) (Withdrawn)\") && !mr.group(2).endsWith(\" (**JEP**)\"))\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/PullRequestWorkItem.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/RepositoryListener.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/RepositoryWorkItem.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/UpdateHistory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/UpdatedBranch.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/comment\/CommitCommentNotifier.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -82,0 +82,3 @@\n+    record BranchSecurity(Pattern branch, String securityId) {}\n+    private final List<BranchSecurity> defaultSecurity;\n+\n@@ -92,1 +95,1 @@\n-                  boolean tagMatchPrefix) {\n+                  boolean tagMatchPrefix, List<BranchSecurity> defaultSecurity) {\n@@ -113,0 +116,1 @@\n+        this.defaultSecurity = defaultSecurity;\n@@ -282,1 +286,1 @@\n-                        log.warning(\"Issue \" + issue.id() + \" is not the main issue - using \" + mainIssue.get().id() + \" instead\");;\n+                        log.warning(\"Issue \" + issue.id() + \" is not the main issue - using \" + mainIssue.get().id() + \" instead\");\n@@ -304,1 +308,12 @@\n-                                issue = jbsBackport.createBackport(issue, requestedVersion, username.orElse(null));\n+                                try {\n+                                    issue = jbsBackport.createBackport(issue, requestedVersion, username.orElse(null), defaultSecurity(branch));\n+                                } catch (Exception exp) {\n+                                    existing = Backports.findIssue(issue, fixVersion);\n+                                    if (existing.isPresent()) {\n+                                        log.info(\"Race condition occurred while creating the back port. So returning an existing backport for \" + issue.id() + \" and requested fixVersion \"\n+                                                + requestedVersion + \" \" + existing.get().id());\n+                                        issue = existing.get();\n+                                    } else {\n+                                        throw exp;\n+                                    }\n+                                }\n@@ -373,0 +388,8 @@\n+    private String defaultSecurity(Branch branch) {\n+        return defaultSecurity.stream()\n+                .filter(branchSecurity -> branchSecurity.branch.matcher(branch.name()).matches())\n+                .map(BranchSecurity::securityId)\n+                .findFirst()\n+                .orElse(null);\n+    }\n+\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifier.java","additions":26,"deletions":3,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,0 +53,1 @@\n+    private List<IssueNotifier.BranchSecurity> defaultSecurity = List.of();\n@@ -155,0 +156,5 @@\n+    public IssueNotifierBuilder defaultSecurity(List<IssueNotifier.BranchSecurity> defaultSecurity) {\n+        this.defaultSecurity = defaultSecurity;\n+        return this;\n+    }\n+\n@@ -168,1 +174,1 @@\n-                resolve, tagIgnoreOpt, tagMatchPrefix);\n+                resolve, tagIgnoreOpt, tagMatchPrefix, defaultSecurity);\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifierBuilder.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -144,0 +144,7 @@\n+        if (notifierConfiguration.contains(\"defaultsecurity\")) {\n+            var defaultSecurity = notifierConfiguration.get(\"defaultsecurity\").fields().stream()\n+                    .map(e -> new IssueNotifier.BranchSecurity(Pattern.compile(e.name()), e.value().asString()))\n+                    .toList();\n+            builder.defaultSecurity(defaultSecurity);\n+        }\n+\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifierFactory.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,1 +52,1 @@\n-    private Issue createBackportIssue(Issue primary) {\n+    private Issue createBackportIssue(Issue primary, String fixVersion, String defaultSecurity) {\n@@ -55,0 +55,4 @@\n+        finalProperties.put(\"fixVersion\", JSON.of(fixVersion));\n+        if (!primary.properties().containsKey(\"security\") && defaultSecurity != null) {\n+            finalProperties.put(\"security\", JSON.of(defaultSecurity));\n+        }\n@@ -64,1 +68,1 @@\n-    public Issue createBackport(Issue primary, String fixVersion, String assignee) {\n+    public Issue createBackport(Issue primary, String fixVersion, String assignee, String defaultSecurity) {\n@@ -69,1 +73,1 @@\n-                return createBackportIssue(primary);\n+                return createBackportIssue(primary, fixVersion, defaultSecurity);\n@@ -81,0 +85,2 @@\n+        } else if (defaultSecurity != null) {\n+            request.body(\"level\", defaultSecurity);\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/JbsBackport.java","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/JbsVault.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/json\/JsonNotifier.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/json\/JsonWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/mailinglist\/MailingListNotifier.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/mailinglist\/MailingListNotifierBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/mailinglist\/MailingListNotifierFactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+    private final boolean protectBranches;\n@@ -38,1 +39,1 @@\n-    public PullRequestBranchNotifier(Path seedFolder) {\n+    public PullRequestBranchNotifier(Path seedFolder, boolean protectBranches) {\n@@ -40,0 +41,1 @@\n+        this.protectBranches = protectBranches;\n@@ -53,0 +55,4 @@\n+            if (protectBranches) {\n+                log.info(\"Protecting branch \" + branch);\n+                pr.repository().protectBranchPattern(branch);\n+            }\n@@ -63,0 +69,4 @@\n+        if (protectBranches) {\n+            log.info(\"Removing branch protection for \" + branch);\n+            pr.repository().unprotectBranchPattern(branch);\n+        }\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/prbranch\/PullRequestBranchNotifier.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -38,1 +38,5 @@\n-        return new PullRequestBranchNotifier(seedFolder.resolve(\"seeds\"));\n+        var protectBranches = false;\n+        if (notifierConfiguration.contains(\"protect\")) {\n+            protectBranches = notifierConfiguration.get(\"protect\").asBoolean();\n+        }\n+        return new PullRequestBranchNotifier(seedFolder.resolve(\"seeds\"), protectBranches);\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/prbranch\/PullRequestBranchNotifierFactory.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/slack\/SlackNotifier.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,22 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/NotifyBotFactoryTest.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -0,0 +1,22 @@\n+\/*\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/RepositoryWorkItemTests.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/TestUtils.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/UpdateHistoryTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/UpdaterTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/comment\/CommitCommentNotifierTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-                                                                                          .put(\"branches\", \"master|other\")\n+                                                                                          .put(\"branches\", \"master|other|other2\")\n@@ -410,0 +410,2 @@\n+            var withdrawnCsrIssue = issueProject.createIssue(\"This is a withdrawn csr issue\", List.of(\"Indeed\"), Map.of(\"issuetype\", JSON.of(\"CSR\")));\n+            issue.addLink(Link.create(withdrawnCsrIssue, \"csr for\").build());\n@@ -418,1 +420,3 @@\n-                    \" * [\" + csrIssue.id() + \"](http:\/\/www.test2.test\/): This is a csr issue (**CSR**)\");\n+                    \" * [\" + csrIssue.id() + \"](http:\/\/www.test2.test\/): This is a csr issue (**CSR**)\\n\" +\n+                    \" * [\" + withdrawnCsrIssue.id() + \"](http:\/\/www.test3.test\/): This is a withdrawn csr issue (**CSR**) (Withdrawn)\\n\"\n+            );\n@@ -426,0 +430,1 @@\n+            var updatedWithdrawnCsrIssue = issueProject.issue(withdrawnCsrIssue.id()).orElseThrow();\n@@ -429,1 +434,1 @@\n-            assertEquals(2, issueLinks.size());\n+            assertEquals(3, issueLinks.size());\n@@ -431,1 +436,2 @@\n-            assertEquals(pr.webUrl(), issueLinks.get(1).uri().orElseThrow());\n+            assertEquals(\"csr for\", issueLinks.get(1).relationship().orElseThrow());\n+            assertEquals(pr.webUrl(), issueLinks.get(2).uri().orElseThrow());\n@@ -441,1 +447,1 @@\n-            assertEquals(\"csr for\", issueLinks.get(0).relationship().orElseThrow());\n+            assertEquals(\"csr of\", csrIssueLinks.get(0).relationship().orElseThrow());\n@@ -445,0 +451,8 @@\n+\n+            \/\/ Withdrawn csr issue shouldn't have the PR link or PR comment.\n+            var withdrawnCsrIssueLinks = updatedWithdrawnCsrIssue.links();\n+            assertEquals(1, withdrawnCsrIssueLinks.size());\n+            assertEquals(\"csr of\", withdrawnCsrIssueLinks.get(0).relationship().orElseThrow());\n+\n+            var withdrawnCsrIssueComments = updatedWithdrawnCsrIssue.comments();\n+            assertEquals(0, withdrawnCsrIssueComments.size());\n@@ -1719,0 +1733,93 @@\n+        }\n+    }\n+\n+    @Test\n+    void testIssueBackportDefaultSecurity(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var repo = credentials.getHostedRepository();\n+            var repoFolder = tempFolder.path().resolve(\"repo\");\n+            var localRepo = CheckableRepository.init(repoFolder, repo.repositoryType(), Path.of(\"appendable.txt\"), Set.of(), null);\n+            credentials.commitLock(localRepo);\n+            localRepo.pushAll(repo.url());\n+            \/\/ Initialize other branches\n+            var initialHead = localRepo.head();\n+            localRepo.push(initialHead, repo.url(), \"other\");\n+            localRepo.push(initialHead, repo.url(), \"other2\");\n+\n+            var storageFolder = tempFolder.path().resolve(\"storage\");\n+            var issueProject = credentials.getIssueProject();\n+            var jbsNotifierConfig = JSON.object()\n+                    .put(\"fixversions\", JSON.object()\n+                            .put(\".*aster\", \"20.0.2\")\n+                            .put(\"other\", \"20.0.1\")\n+                            .put(\"other2\", \"19.0.2\"))\n+                    .put(\"defaultsecurity\", JSON.object()\n+                            .put(\"othe.*\", \"100\"));\n+\n+            var notifyBot = testBotBuilder(repo, issueProject, storageFolder, jbsNotifierConfig).create(\"notify\", JSON.object());\n+\n+            \/\/ Initialize history\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ Create an issue and commit a fix\n+            var issue = issueProject.createIssue(\"This is an issue\", List.of(\"Indeed\"),\n+                    Map.of(\"issuetype\", JSON.of(\"Enhancement\"),\n+                            SUBCOMPONENT, JSON.of(\"java.io\"),\n+                            RESOLVED_IN_BUILD, JSON.of(\"b07\")\n+                    ));\n+            var level = issue.properties().get(\"security\");\n+            issue.setProperty(\"fixVersions\", JSON.array().add(\"21\"));\n+            issue.setProperty(\"priority\", JSON.of(\"1\"));\n+\n+            var authorEmailAddress = issueProject.issueTracker().currentUser().username() + \"@openjdk.org\";\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, \"Another line\", issue.id() + \": Fix that issue\", \"Duke\", authorEmailAddress);\n+            localRepo.push(editHash, repo.url(), \"master\");\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            {\n+                \/\/ The fixVersion should not have been updated\n+                var updatedIssue = issueProject.issue(issue.id()).orElseThrow();\n+                assertEquals(Set.of(\"21\"), fixVersions(updatedIssue));\n+                assertEquals(OPEN, updatedIssue.state());\n+                assertEquals(List.of(), updatedIssue.assignees());\n+\n+                \/\/ There should be a link\n+                var links = updatedIssue.links();\n+                assertEquals(1, links.size());\n+                var link = links.get(0);\n+                var backport = link.issue().orElseThrow();\n+\n+                \/\/ The backport issue should have a correct fixVersion and no security\n+                assertEquals(Set.of(\"20.0.2\"), fixVersions(backport));\n+                assertNull(backport.properties().get(\"security\"));\n+            }\n+\n+            \/\/ Push the fix to other branch\n+            localRepo.push(editHash, repo.url(), \"other\");\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            {\n+                \/\/ Find the new backport\n+                var updatedIssue = issueProject.issue(issue.id()).orElseThrow();\n+                var links = updatedIssue.links();\n+                assertEquals(2, links.size());\n+                var backport = links.get(1).issue().orElseThrow();\n+\n+                \/\/ The backport issue should have a correct fixVersion and security\n+                assertEquals(Set.of(\"20.0.1\"), fixVersions(backport));\n+                assertEquals(\"100\", backport.properties().get(\"security\").asString());\n+            }\n+\n+            \/\/ Set security on the original issue\n+            issue.setProperty(\"security\", JSON.of(\"200\"));\n+            \/\/ Push to another branch\n+            localRepo.push(editHash, repo.url(), \"other2\");\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            {\n+                \/\/ Find the new backport\n+                var updatedIssue = issueProject.issue(issue.id()).orElseThrow();\n+                var links = updatedIssue.links();\n+                assertEquals(3, links.size());\n+                var backport = links.get(2).issue().orElseThrow();\n@@ -1720,3 +1827,3 @@\n-            \/\/ If the parent issue has a security level (can be configured when running a test manually) it should be propagated\n-            if (level != null) {\n-                assertEquals(level.asString(), backport.properties().get(\"security\").asString());\n+                \/\/ The backport issue should have a correct fixVersion and security\n+                assertEquals(Set.of(\"19.0.2\"), fixVersions(backport));\n+                assertEquals(\"200\", backport.properties().get(\"security\").asString());\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifierTests.java","additions":115,"deletions":8,"binary":false,"changes":123,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/json\/JsonNotifierTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/mailinglist\/MailingListNotifierTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-                                                                                          .put(\"prbranch\", JSON.object())))\n+                                                                                          .put(\"prbranch\", JSON.object().put(\"protect\", true))))\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/prbranch\/PullRequestBranchNotifierTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+    implementation project(':bots:common')\n","filename":"bots\/pr\/build.gradle","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+    requires org.openjdk.skara.bots.common;\n@@ -38,0 +39,1 @@\n+    exports org.openjdk.skara.bots.pr;\n","filename":"bots\/pr\/src\/main\/java\/module-info.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+import org.openjdk.skara.forge.HostedRepository;\n@@ -27,0 +28,1 @@\n+import org.openjdk.skara.host.HostUser;\n@@ -45,0 +47,4 @@\n+    private void showHelpInPR(PrintWriter reply) {\n+        reply.println(\"Usage: `\/backport [disable] <repository> [<branch>]`\");\n+    }\n+\n@@ -55,5 +61,4 @@\n-    @Override\n-    public void handle(PullRequestBot bot, PullRequest pr, CensusInstance censusInstance, Path scratchPath,\n-                CommandInvocation command, List<Comment> allComments, PrintWriter reply) {\n-        reply.println(\"The command `backport` can only be used in a pull request that has been integrated.\");\n-    }\n+    private static final String USER_INVALID_WARNING = \"To use the `\/backport` command, you need to be in the OpenJDK [census](https:\/\/openjdk.org\/census)\"\n+            + \" and your GitHub account needs to be linked with your OpenJDK username\"\n+            + \" ([how to associate your GitHub account with your OpenJDK username]\"\n+            + \"(https:\/\/wiki.openjdk.org\/display\/skara#Skara-AssociatingyourGitHubaccountandyourOpenJDKusername)).\";\n@@ -62,2 +67,2 @@\n-    public void handle(PullRequestBot bot, HostedCommit commit, LimitedCensusInstance censusInstance,\n-            Path scratchPath, CommandInvocation command, List<Comment> allComments, PrintWriter reply) {\n+    public void handle(PullRequestBot bot, PullRequest pr, CensusInstance censusInstance, Path scratchPath, CommandInvocation command,\n+                       List<Comment> allComments, PrintWriter reply, List<String> labelsToAdd, List<String> labelsToRemove) {\n@@ -65,4 +70,6 @@\n-            reply.println(\"To use the `\/backport` command, you need to be in the OpenJDK [census](https:\/\/openjdk.org\/census)\"\n-                    + \" and your GitHub account needs to be linked with your OpenJDK username\"\n-                    + \" ([how to associate your GitHub account with your OpenJDK username]\"\n-                    + \"(https:\/\/wiki.openjdk.org\/display\/skara#Skara-AssociatingyourGitHubaccountandyourOpenJDKusername)).\");\n+            reply.println(USER_INVALID_WARNING);\n+            return;\n+        }\n+\n+        if (pr.isClosed() && !pr.labelNames().contains(\"integrated\")) {\n+            reply.println(\"`\/backport` command can not be used in a closed but not integrated pull request\");\n@@ -74,1 +81,1 @@\n-            showHelp(reply);\n+            showHelpInPR(reply);\n@@ -79,2 +86,3 @@\n-        if (parts.length > 2) {\n-            showHelp(reply);\n+        boolean argIsValid = parts[0].equals(\"disable\") ? parts.length == 2 || parts.length == 3 : parts.length <= 2;\n+        if (!argIsValid) {\n+            showHelpInPR(reply);\n@@ -84,0 +92,45 @@\n+        if (parts[0].equals(\"disable\")) {\n+            \/\/ Remove label\n+            var targetRepoName = parts[1];\n+            var targetBranchName = parts.length == 3 ? parts[2] : \"master\";\n+            var backportLabel = generateBackportLabel(targetRepoName, targetBranchName);\n+            if (pr.labelNames().contains(backportLabel)) {\n+                labelsToRemove.add(backportLabel);\n+                reply.println(\"Backport for repo `\" + targetRepoName + \"` on branch `\" + targetBranchName + \"` was successfully disabled.\");\n+            } else {\n+                reply.println(\"Backport for repo `\" + targetRepoName + \"` on branch `\" + targetBranchName + \"` was already disabled.\");\n+            }\n+        } else {\n+            \/\/ Get target repo\n+            var targetRepo = getTargetRepo(bot, parts, reply);\n+            if (targetRepo == null) {\n+                return;\n+            }\n+            var targetRepoName = targetRepo.name();\n+\n+            \/\/ Get target branch\n+            var targetBranch = getTargetBranch(parts, targetRepo, reply);\n+            if (targetBranch == null) {\n+                return;\n+            }\n+            var targetBranchName = targetBranch.name();\n+\n+            \/\/ Add label\n+            var backportLabel = generateBackportLabel(targetRepoName, targetBranchName);\n+            if (pr.labelNames().contains(backportLabel)) {\n+                reply.println(\"Backport for repo `\" + targetRepoName + \"` on branch `\" + targetBranchName + \"` has already been enabled.\");\n+            } else {\n+                labelsToAdd.add(backportLabel);\n+                reply.print(\"Backport for repo `\" + targetRepoName + \"` on branch `\" + targetBranchName + \"` was successfully enabled and will be performed once this pull request has been integrated.\");\n+                reply.println(\" Further instructions will be provided at that time.\");\n+                reply.println(\"<!-- add backport \" + targetRepoName + \":\" + targetBranchName + \" -->\");\n+                reply.println(\"<!-- \" + command.user().username() + \" -->\");\n+            }\n+        }\n+    }\n+\n+    private String generateBackportLabel(String targetRepo, String targetBranchName) {\n+        return \"backport=\" + targetRepo + \":\" + targetBranchName;\n+    }\n+\n+    private HostedRepository getTargetRepo(PullRequestBot bot, String[] parts, PrintWriter reply) {\n@@ -86,2 +139,2 @@\n-                               .replace(\"https:\/\/\", \"\")\n-                               .replace(forge.hostname() + \"\/\", \"\");\n+                .replace(\"https:\/\/\", \"\")\n+                .replace(forge.hostname() + \"\/\", \"\");\n@@ -97,1 +150,0 @@\n-        String repoName = repoNameOptional.orElse(\"<not found>\");\n@@ -105,1 +157,1 @@\n-            return;\n+            return null;\n@@ -107,2 +159,2 @@\n-        var targetRepo = potentialTargetRepo.get();\n-        var fork = bot.forks().get(targetRepo.name());\n+        return potentialTargetRepo.get();\n+    }\n@@ -110,0 +162,1 @@\n+    private Branch getTargetBranch(String[] parts, HostedRepository targetRepo, PrintWriter reply) {\n@@ -114,0 +167,10 @@\n+            return null;\n+        }\n+        return new Branch(targetBranchName);\n+    }\n+\n+    @Override\n+    public void handle(PullRequestBot bot, HostedCommit commit, LimitedCensusInstance censusInstance,\n+            Path scratchPath, CommandInvocation command, List<Comment> allComments, PrintWriter reply) {\n+        if (censusInstance.contributor(command.user()).isEmpty() && !command.user().equals(bot.repo().forge().currentUser())) {\n+            reply.println(USER_INVALID_WARNING);\n@@ -116,1 +179,50 @@\n-        var targetBranch = new Branch(targetBranchName);\n+\n+        var args = command.args();\n+        if (args.isBlank()) {\n+            showHelp(reply);\n+            return;\n+        }\n+\n+        var parts = args.split(\" \");\n+        if (parts.length > 2) {\n+            showHelp(reply);\n+            return;\n+        }\n+\n+        \/\/ Get target repo\n+        var targetRepo = getTargetRepo(bot, parts, reply);\n+        if (targetRepo == null) {\n+            return;\n+        }\n+        var targetRepoName = targetRepo.name();\n+        var fork = bot.forks().get(targetRepo.name());\n+\n+        \/\/ Get target branch\n+        var targetBranch = getTargetBranch(parts, targetRepo, reply);\n+        if (targetBranch == null) {\n+            return;\n+        }\n+        var targetBranchName = targetBranch.name();\n+\n+        \/\/ Find real user when the command user is bot\n+        HostUser realUser = command.user();\n+        if (realUser.equals(bot.repo().forge().currentUser())) {\n+            var botComment = allComments.stream()\n+                    .filter(comment -> comment.author().equals(bot.repo().forge().currentUser()))\n+                    .filter(comment -> comment.body().contains(\"<!-- add backport \" + targetRepoName + \":\" + targetBranchName + \" -->\"))\n+                    .reduce((first, second) -> second).orElse(null);\n+            if (botComment != null) {\n+                String[] lines = botComment.body().split(\"\\\\n\");\n+                String userName = lines[lines.length - 1].split(\" \")[1];\n+                var user = bot.repo().forge().user(userName);\n+                if (user.isPresent()) {\n+                    realUser = user.get();\n+                    reply.print(\"@\");\n+                    reply.print(realUser.username());\n+                    reply.print(\" \");\n+                } else {\n+                    reply.println(\"Error: can not find the real user of Backport for repo `\" + targetRepoName + \"` on branch `\" + targetBranchName);\n+                    return;\n+                }\n+            }\n+        }\n@@ -121,1 +233,1 @@\n-            var backportBranchName = command.user().username() + \"-backport-\" + hash.abbreviate();\n+            var backportBranchName = realUser.username() + \"-backport-\" + hash.abbreviate();\n@@ -138,1 +250,1 @@\n-                              \"[\" + repoName + \"](\" + targetRepo.webUrl() + \") due to conflicts in the following files:\");\n+                              \"[\" + targetRepoName + \"](\" + targetRepo.webUrl() + \") due to conflicts in the following files:\");\n@@ -150,1 +262,1 @@\n-                            + \"by using the following commands in your personal fork of [\" + repoName + \"](\" + targetRepo.webUrl()\n+                            + \"by using the following commands in your personal fork of [\" + targetRepoName + \"](\" + targetRepo.webUrl()\n@@ -173,1 +285,1 @@\n-                    lines.add(\"Once you have resolved the conflicts as explained above continue with creating a pull request towards the [\" + repoName + \"](\" + targetRepo.webUrl() + \") with the title `Backport \" + hash.hex() + \"`.\");\n+                    lines.add(\"Once you have resolved the conflicts as explained above continue with creating a pull request towards the [\" + targetRepoName + \"](\" + targetRepo.webUrl() + \") with the title `Backport \" + hash.hex() + \"`.\");\n@@ -182,1 +294,1 @@\n-                            \"[\" + repoName + \"](\" + targetRepo.webUrl() + \") because the change is already present in the target.\");\n+                            \"[\" + targetRepoName + \"](\" + targetRepo.webUrl() + \") because the change is already present in the target.\");\n@@ -193,2 +305,2 @@\n-            if (!fork.canPush(command.user())) {\n-                fork.addCollaborator(command.user(), true);\n+            if (!fork.canPush(realUser)) {\n+                fork.addCollaborator(realUser, true);\n@@ -196,1 +308,1 @@\n-            fork.restrictPushAccess(new Branch(backportBranchName), command.user());\n+            fork.restrictPushAccess(new Branch(backportBranchName), realUser);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/BackportCommand.java","additions":142,"deletions":30,"binary":false,"changes":172,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,2 @@\n+import org.openjdk.skara.bots.common.BotUtils;\n+import org.openjdk.skara.bots.common.SolvesTracker;\n@@ -32,0 +34,1 @@\n+import java.util.ArrayList;\n@@ -34,0 +37,2 @@\n+import static org.openjdk.skara.bots.common.PullRequestConstants.*;\n+\n@@ -35,3 +40,0 @@\n-    private static final String CSR_LABEL = \"csr\";\n-    private static final String CSR_NEEDED_MARKER = \"<!-- csr: 'needed' -->\";\n-    private static final String CSR_UNNEEDED_MARKER = \"<!-- csr: 'unneeded' -->\";\n@@ -98,7 +100,2 @@\n-            var issue = org.openjdk.skara.vcs.openjdk.Issue.fromStringRelaxed(pr.title());\n-            if (issueProject == null || issue.isEmpty()) {\n-                csrUnneededReply(pr, reply);\n-                return;\n-            }\n-            var jbsIssueOpt = issueProject.issue(issue.get().shortId());\n-            if (jbsIssueOpt.isEmpty()) {\n+            var mainIssue = org.openjdk.skara.vcs.openjdk.Issue.fromStringRelaxed(pr.title());\n+            if (issueProject == null || mainIssue.isEmpty()) {\n@@ -109,4 +106,35 @@\n-            var versionOpt = CheckRun.getVersion(pr);\n-            if (versionOpt.isEmpty()) {\n-                csrUnneededReply(pr, reply);\n-                return;\n+            \/\/ All the issues this pr solves\n+            var issues = new ArrayList<org.openjdk.skara.vcs.openjdk.Issue>();\n+            issues.add(mainIssue.get());\n+            issues.addAll(SolvesTracker.currentSolved(pr.repository().forge().currentUser(), pr.comments()));\n+\n+            var containsOpenCsrIssue = false;\n+            for (var issue : issues) {\n+                var jbsIssueOpt = issueProject.issue(issue.shortId());\n+                if (jbsIssueOpt.isEmpty()) {\n+                    continue;\n+                }\n+                var jbsIssue = jbsIssueOpt.get();\n+\n+                var versionOpt = BotUtils.getVersion(pr);\n+                if (versionOpt.isEmpty()) {\n+                    break;\n+                }\n+\n+                var csrOptional = Backports.findCsr(jbsIssue, versionOpt.get());\n+                if (csrOptional.isEmpty()) {\n+                    continue;\n+                }\n+                var csrIssue = csrOptional.get();\n+\n+                var resolution = csrIssue.properties().get(\"resolution\");\n+                if (resolution == null || resolution.isNull()\n+                        || resolution.get(\"name\") == null || resolution.get(\"name\").isNull()\n+                        || csrIssue.state() != Issue.State.CLOSED\n+                        || !resolution.get(\"name\").asString().equals(\"Withdrawn\")) {\n+                    \/\/ The issue has a non-withdrawn csr issue, the bot should direct the user to withdraw the csr firstly.\n+                    reply.println(\"The CSR requirement cannot be removed as there is already a CSR associated with the issue [\" +\n+                            jbsIssue.id() + \"](\" + jbsIssue.webUrl() + \"). Please withdraw the CSR [\" + csrIssue.id() +\n+                            \"](\" + csrIssue.webUrl() + \") and then use the command `\/csr unneeded` again.\");\n+                    containsOpenCsrIssue = true;\n+                }\n@@ -114,17 +142,1 @@\n-\n-            var csrOptional = Backports.findCsr(jbsIssueOpt.get(), versionOpt.get());\n-            if (csrOptional.isEmpty()) {\n-                csrUnneededReply(pr, reply);\n-                return;\n-            }\n-            var csrIssue = csrOptional.get();\n-\n-            var resolution = csrIssue.properties().get(\"resolution\");\n-            if (resolution == null || resolution.isNull()\n-                    || resolution.get(\"name\") == null || resolution.get(\"name\").isNull()\n-                    || csrIssue.state() != Issue.State.CLOSED\n-                    || !resolution.get(\"name\").asString().equals(\"Withdrawn\")) {\n-                \/\/ The issue has a non-withdrawn csr issue, the bot should direct the user to withdraw the csr firstly.\n-                reply.println(\"The CSR requirement cannot be removed as there is already a CSR associated with the main issue\" +\n-                              \" of this pull request. Please withdraw the CSR [\" + csrIssue.id() + \"](\" + csrIssue.webUrl() +\n-                              \") and then use the command `\/csr unneeded` again.\");\n+            if (containsOpenCsrIssue) {\n@@ -132,1 +144,4 @@\n-                return;\n+            } else {\n+                \/\/ All the issues associated with this pr either don't have csr issue or the csr issue has already been withdrawn,\n+                \/\/ the bot should just remove the csr label and reply the message.\n+                csrUnneededReply(pr, reply);\n@@ -134,3 +149,0 @@\n-\n-            \/\/ The csr has been withdrawn, the bot should just remove the csr label and reply the message.\n-            csrUnneededReply(pr, reply);\n@@ -142,1 +154,1 @@\n-                          \"is already required for this pull request.\");\n+                    \"is already required for this pull request.\");\n@@ -148,2 +160,3 @@\n-        var issue = org.openjdk.skara.vcs.openjdk.Issue.fromStringRelaxed(pr.title());\n-        if (issue.isEmpty()) {\n+        \/\/ Main issue is missing, this pr doesn't solve any issue\n+        var mainIssue = org.openjdk.skara.vcs.openjdk.Issue.fromStringRelaxed(pr.title());\n+        if (issueProject == null || mainIssue.isEmpty()) {\n@@ -156,2 +169,2 @@\n-        var jbsIssueOpt = issueProject.issue(issue.get().shortId());\n-        if (jbsIssueOpt.isEmpty()) {\n+        var jbsMainIssueOpt = issueProject.issue(mainIssue.get().shortId());\n+        if (jbsMainIssueOpt.isEmpty()) {\n@@ -164,8 +177,4 @@\n-        var jbsIssue = jbsIssueOpt.get();\n-        var versionOpt = CheckRun.getVersion(pr);\n-        if (versionOpt.isEmpty()) {\n-            csrReply(reply);\n-            linkReply(pr, jbsIssue, reply);\n-            pr.addLabel(CSR_LABEL);\n-            return;\n-        }\n+        \/\/ All the issues this pr solves\n+        var issues = new ArrayList<org.openjdk.skara.vcs.openjdk.Issue>();\n+        issues.add(mainIssue.get());\n+        issues.addAll(SolvesTracker.currentSolved(pr.repository().forge().currentUser(), pr.comments()));\n@@ -173,15 +182,43 @@\n-        var csrOptional = Backports.findCsr(jbsIssueOpt.get(), versionOpt.get());\n-        if (csrOptional.isEmpty()) {\n-            csrReply(reply);\n-            linkReply(pr, jbsIssue, reply);\n-            pr.addLabel(CSR_LABEL);\n-            return;\n-        }\n-        var csr = csrOptional.get();\n-\n-        var resolutionName = \"Unresolved\";\n-        var resolution = csr.properties().getOrDefault(\"resolution\", JSON.of());\n-        if (resolution.isObject() && resolution.asObject().contains(\"name\")) {\n-            var nameField = resolution.get(\"name\");\n-            if (nameField.isString()) {\n-                resolutionName = resolution.get(\"name\").asString();\n+        var approvedCsrIssues = 0;\n+        var openCsrIssues = 0;\n+        var withdrawnCsrIssues = 0;\n+        var csrIssues = 0;\n+\n+        for (var issue : issues) {\n+            var jbsIssueOpt = issueProject.issue(issue.shortId());\n+            if (jbsIssueOpt.isEmpty()) {\n+                continue;\n+            }\n+            var jbsIssue = jbsIssueOpt.get();\n+            var versionOpt = BotUtils.getVersion(pr);\n+            if (versionOpt.isEmpty()) {\n+                break;\n+            }\n+\n+            var csrOptional = Backports.findCsr(jbsIssueOpt.get(), versionOpt.get());\n+            if (csrOptional.isEmpty()) {\n+                continue;\n+            }\n+            \/\/ Found a csr issue for one of the issues associated with this pr\n+            var csr = csrOptional.get();\n+            csrIssues++;\n+\n+            var resolutionName = \"Unresolved\";\n+            var resolution = csr.properties().getOrDefault(\"resolution\", JSON.of());\n+            if (resolution.isObject() && resolution.asObject().contains(\"name\")) {\n+                var nameField = resolution.get(\"name\");\n+                if (nameField.isString()) {\n+                    resolutionName = resolution.get(\"name\").asString();\n+                }\n+            }\n+            if (csr.state() == Issue.State.CLOSED && resolutionName.equals(\"Approved\")) {\n+                reply.println(\"the issue for this pull request, [\" + jbsIssue.id() + \"](\" + jbsIssue.webUrl() + \"), already has \" +\n+                        \"an approved CSR request: [\" + csr.id() + \"](\" + csr.webUrl() + \")\");\n+                approvedCsrIssues++;\n+            } else if (csr.state() == Issue.State.CLOSED && resolutionName.equals(\"Withdrawn\")) {\n+                withdrawnCsrIssues++;\n+            } else {\n+                reply.println(\"this pull request will not be integrated until the [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) \" +\n+                        \"request \" + \"[\" + csr.id() + \"](\" + csr.webUrl() + \")\" + \" for issue \" +\n+                        \"[\" + jbsIssue.id() + \"](\" + jbsIssue.webUrl() + \") has been approved.\");\n+                openCsrIssues++;\n@@ -190,3 +227,9 @@\n-        if (csr.state() == Issue.State.CLOSED && resolutionName.equals(\"Approved\")) {\n-            reply.println(\"the issue for this pull request, [\" + jbsIssue.id() + \"](\" + jbsIssue.webUrl() + \"), already has \" +\n-                          \"an approved CSR request: [\" + csr.id() + \"](\" + csr.webUrl() + \")\");\n+        \/\/ All the issues associated with pr either don't have csr issue or the csr issue has already been withdrawn\n+        if (csrIssues == withdrawnCsrIssues) {\n+            csrReply(reply);\n+            if (issues.size() == 1) {\n+                linkReply(pr, jbsMainIssueOpt.get(), reply);\n+            }\n+            pr.addLabel(CSR_LABEL);\n+        } else if (csrIssues == approvedCsrIssues) {\n+            \/\/ All the csr issues are approved\n@@ -194,4 +237,2 @@\n-        } else {\n-            reply.println(\"this pull request will not be integrated until the [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) \" +\n-                          \"request \" + \"[\" + csr.id() + \"](\" + csr.webUrl() + \")\" + \" for issue \" +\n-                          \"[\" + jbsIssue.id() + \"](\" + jbsIssue.webUrl() + \") has been approved.\");\n+        } else if (openCsrIssues > 0) {\n+            \/\/ At least one csr issue open\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CSRCommand.java","additions":112,"deletions":71,"binary":false,"changes":183,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CensusInstance.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,2 @@\n+import org.openjdk.skara.bots.common.BotUtils;\n+import org.openjdk.skara.bots.common.SolvesTracker;\n@@ -32,1 +34,0 @@\n-import org.openjdk.skara.jcheck.JCheckConfiguration;\n@@ -44,0 +45,2 @@\n+import static org.openjdk.skara.bots.common.PullRequestConstants.*;\n+\n@@ -62,6 +65,5 @@\n-    private static final String progressMarker = \"<!-- Anything below this marker will be automatically updated, please do not edit manually! -->\";\n-    private static final String mergeReadyMarker = \"<!-- PullRequestBot merge is ready comment -->\";\n-    private static final String outdatedHelpMarker = \"<!-- PullRequestBot outdated help comment -->\";\n-    private static final String sourceBranchWarningMarker = \"<!-- PullRequestBot source branch warning comment -->\";\n-    private static final String mergeCommitWarningMarker = \"<!-- PullRequestBot merge commit warning comment -->\";\n-    private static final String emptyPrBodyMarker = \"<!--\\nReplace this text with a description of your pull request (also remove the surrounding HTML comment markers).\\n\" +\n+    private static final String MERGE_READY_MARKER = \"<!-- PullRequestBot merge is ready comment -->\";\n+    private static final String OUTDATED_HELP_MARKER = \"<!-- PullRequestBot outdated help comment -->\";\n+    private static final String SOURCE_BRANCH_WARNING_MARKER = \"<!-- PullRequestBot source branch warning comment -->\";\n+    private static final String MERGE_COMMIT_WARNING_MARKER = \"<!-- PullRequestBot merge commit warning comment -->\";\n+    private static final String EMPTY_PR_BODY_MARKER = \"<!--\\nReplace this text with a description of your pull request (also remove the surrounding HTML comment markers).\\n\" +\n@@ -69,2 +71,2 @@\n-    private static final String fullNameWarningMarker = \"<!-- PullRequestBot full name warning comment -->\";\n-    private final static Set<String> primaryTypes = Set.of(\"Bug\", \"New Feature\", \"Enhancement\", \"Task\", \"Sub-task\");\n+    private static final String FULL_NAME_WARNING_MARKER = \"<!-- PullRequestBot full name warning comment -->\";\n+    private static final Set<String> PRIMARY_TYPES = Set.of(\"Bug\", \"New Feature\", \"Enhancement\", \"Task\", \"Sub-task\");\n@@ -72,0 +74,1 @@\n+    private final boolean reviewCleanBackport;\n@@ -77,1 +80,1 @@\n-                     CensusInstance censusInstance, boolean ignoreStaleReviews, Set<String> integrators) throws IOException {\n+                     CensusInstance censusInstance, boolean ignoreStaleReviews, Set<String> integrators, boolean reviewCleanBackport) throws IOException {\n@@ -89,0 +92,1 @@\n+        this.reviewCleanBackport = reviewCleanBackport;\n@@ -99,2 +103,3 @@\n-                        boolean ignoreStaleReviews, Set<String> integrators) throws IOException {\n-        var run = new CheckRun(workItem, pr, localRepo, comments, allReviews, activeReviews, labels, censusInstance, ignoreStaleReviews, integrators);\n+                        boolean ignoreStaleReviews, Set<String> integrators, boolean reviewCleanBackport) throws IOException {\n+        var run = new CheckRun(workItem, pr, localRepo, comments, allReviews, activeReviews, labels, censusInstance,\n+                ignoreStaleReviews, integrators, reviewCleanBackport);\n@@ -117,1 +122,1 @@\n-    private List<Issue> issues(boolean withCsr, boolean withJep) {\n+    private List<Issue> issues() {\n@@ -123,6 +128,0 @@\n-            if (withCsr) {\n-                getCsrIssue(issue.get()).ifPresent(issues::add);\n-            }\n-            if (withJep) {\n-                getJepIssue().ifPresent(issues::add);\n-            }\n@@ -134,9 +133,5 @@\n-    \/**\n-     * Get the fix version from the provided PR.\n-     *\/\n-    public static Optional<JdkVersion> getVersion(PullRequest pullRequest) {\n-        var confFile = pullRequest.repository().fileContents(\".jcheck\/conf\", pullRequest.targetRef());\n-        var configuration = JCheckConfiguration.parse(confFile.lines().toList());\n-        var version = configuration.general().version().orElse(null);\n-        if (version == null || \"\".equals(version)) {\n-            return Optional.empty();\n+    private List<Issue> issuesWithCSRAndJEP(List<Issue> issues, List<org.openjdk.skara.issuetracker.Issue> csrIssueTrackerIssues) {\n+        if (!issues.isEmpty()) {\n+            issues.addAll(getCsrIssues(csrIssueTrackerIssues));\n+            getJepIssue().ifPresent(issues::add);\n+            return issues;\n@@ -144,1 +139,1 @@\n-        return JdkVersion.parse(version);\n+        return List.of();\n@@ -148,1 +143,1 @@\n-     * Get the csr issue. Note: this `Issue` is not the issue in module `issuetracker`.\n+     * Get the csr issues. Note: this `Issue` is the issue in module `issuetracker`.\n@@ -150,1 +145,1 @@\n-    private Optional<Issue> getCsrIssue(Issue issue) {\n+    private List<org.openjdk.skara.issuetracker.Issue> getCsrIssueTrackerIssues(List<Issue> issues, JdkVersion version) {\n@@ -153,1 +148,1 @@\n-            return Optional.empty();\n+            return List.of();\n@@ -155,3 +150,2 @@\n-        var jbsIssueOpt = issueProject.issue(issue.shortId());\n-        if (jbsIssueOpt.isEmpty()) {\n-            return Optional.empty();\n+        if (version == null) {\n+            return List.of();\n@@ -159,4 +153,8 @@\n-\n-        var versionOpt = getVersion(pr);\n-        if (versionOpt.isEmpty()) {\n-            return Optional.empty();\n+        var csrIssues = new ArrayList<org.openjdk.skara.issuetracker.Issue>();\n+        for (var issue : issues) {\n+            var jbsIssueOpt = issueProject.issue(issue.shortId());\n+            if (jbsIssueOpt.isEmpty()) {\n+                continue;\n+            }\n+            Backports.findCsr(jbsIssueOpt.get(), version)\n+                    .ifPresent(csrIssues::add);\n@@ -164,0 +162,2 @@\n+        return csrIssues;\n+    }\n@@ -165,2 +165,10 @@\n-        return Backports.findCsr(jbsIssueOpt.get(), versionOpt.get())\n-                .flatMap(perIssue -> Issue.fromStringRelaxed(perIssue.id() + \": \" + perIssue.title()));\n+    \/**\n+     * Get the csr issue. Note: this `Issue` is not the issue in module `issuetracker`.\n+     *\/\n+    private List<Issue> getCsrIssues(List<org.openjdk.skara.issuetracker.Issue> csrIssueTrackerIssues) {\n+\n+        return csrIssueTrackerIssues.stream()\n+                .map(perIssue -> Issue.fromStringRelaxed(perIssue.id() + \": \" + perIssue.title()))\n+                .filter(Optional::isPresent)\n+                .map(Optional::get)\n+                .toList();\n@@ -181,1 +189,1 @@\n-                .map(JEPCommand.jepMarkerPattern::matcher)\n+                .map(JEP_MARKER_PATTERN::matcher)\n@@ -243,0 +251,17 @@\n+    private boolean isWithdrawnCSR(org.openjdk.skara.issuetracker.Issue csr) {\n+        if (csr.isClosed()) {\n+            var resolution = csr.properties().get(\"resolution\");\n+            if (resolution != null && !resolution.isNull()) {\n+                var name = resolution.get(\"name\");\n+                if (name != null && !name.isNull() && name.asString().equals(\"Withdrawn\")) {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private String generateCSRProgressMessage(org.openjdk.skara.issuetracker.Issue issue) {\n+        return \"Change requires CSR request [\" + issue.id() + \"](\" + issue.webUrl() + \") to be approved\";\n+    }\n+\n@@ -244,1 +269,1 @@\n-    private Map<String, Boolean> botSpecificProgresses() {\n+    private Map<String, Boolean> botSpecificProgresses(List<org.openjdk.skara.issuetracker.Issue> csrIssueTrackerIssues, JdkVersion version) {\n@@ -246,15 +271,28 @@\n-        if (pr.labelNames().contains(\"csr\")) {\n-            \/\/ If the PR have csr label, the CSR request need to be approved.\n-            ret.put(\"Change requires a CSR request to be approved\", false);\n-        } else {\n-            var csrIssue = Issue.fromStringRelaxed(pr.title()).flatMap(this::getCsrIssue)\n-                    .flatMap(value -> issueProject() != null ? issueProject().issue(value.shortId()) : Optional.empty());\n-            if (csrIssue.isPresent()) {\n-                var resolution = csrIssue.get().properties().get(\"resolution\");\n-                if (resolution != null && !resolution.isNull()\n-                        && resolution.get(\"name\") != null && !resolution.get(\"name\").isNull()\n-                        && csrIssue.get().state() == org.openjdk.skara.issuetracker.Issue.State.CLOSED\n-                        && \"Approved\".equals(resolution.get(\"name\").asString())) {\n-                    \/\/ The PR doesn't have csr label and the csr request has been Approved.\n-                    ret.put(\"Change requires a CSR request to be approved\", true);\n-                }\n+\n+        var csrIssues = csrIssueTrackerIssues.stream()\n+                .filter(issue -> issue.properties().containsKey(\"issuetype\"))\n+                .filter(issue -> issue.properties().get(\"issuetype\").asString().equals(\"CSR\"))\n+                .filter(issue -> !isWithdrawnCSR(issue))\n+                .toList();\n+        if (csrIssues.isEmpty() && pr.labelNames().contains(\"csr\")) {\n+            ret.put(\"Change requires a CSR request matching fixVersion \" + (version != null ? version.raw() : \"(No fixVersion in .jcheck\/conf)\")\n+                    + \" to be approved (needs to be created)\", false);\n+        }\n+        for (var csrIssue : csrIssues) {\n+            if (!csrIssue.isClosed()) {\n+                ret.put(generateCSRProgressMessage(csrIssue), false);\n+                continue;\n+            }\n+            var resolution = csrIssue.properties().get(\"resolution\");\n+            if (resolution == null || resolution.isNull()) {\n+                ret.put(generateCSRProgressMessage(csrIssue), false);\n+                continue;\n+            }\n+            var name = resolution.get(\"name\");\n+            if (name == null || name.isNull()) {\n+                ret.put(generateCSRProgressMessage(csrIssue), false);\n+                continue;\n+            }\n+            if (!name.asString().equals(\"Approved\")) {\n+                ret.put(generateCSRProgressMessage(csrIssue), false);\n+                continue;\n@@ -262,1 +300,1 @@\n-            \/\/ At other states, no need to add the csr progress.\n+            ret.put(generateCSRProgressMessage(csrIssue), true);\n@@ -264,0 +302,2 @@\n+\n+\n@@ -286,1 +326,1 @@\n-    private List<String> botSpecificIntegrationBlockers() {\n+    private List<String> botSpecificIntegrationBlockers(List<Issue> issues) {\n@@ -289,1 +329,0 @@\n-        var issues = issues(false, false);\n@@ -309,1 +348,1 @@\n-                            if (!primaryTypes.contains(issueType)) {\n+                            if (!PRIMARY_TYPES.contains(issueType)) {\n@@ -354,1 +393,1 @@\n-    private void updateReadyForReview(PullRequestCheckIssueVisitor visitor, List<String> additionalErrors) {\n+    private boolean updateReadyForReview(PullRequestCheckIssueVisitor visitor, List<String> additionalErrors) {\n@@ -358,1 +397,1 @@\n-            return;\n+            return false;\n@@ -364,1 +403,1 @@\n-            return;\n+            return false;\n@@ -370,0 +409,1 @@\n+            return true;\n@@ -372,0 +412,1 @@\n+            return false;\n@@ -405,1 +446,1 @@\n-        var commit = pr.repository().forge().search(hash);\n+        var commit = pr.repository().forge().search(hash, true);\n@@ -457,1 +498,1 @@\n-            ret.append(censusInstance.namespace().name());\n+            ret.append(censusInstance.configuration().census().domain());\n@@ -483,2 +524,2 @@\n-    private String getChecksList(PullRequestCheckIssueVisitor visitor, boolean isCleanBackport, Map<String, Boolean> additionalProgresses) {\n-        var checks = isCleanBackport ? visitor.getReadyForReviewChecks() : visitor.getChecks();\n+    private String getChecksList(PullRequestCheckIssueVisitor visitor, boolean reviewNeeded, Map<String, Boolean> additionalProgresses) {\n+        var checks = reviewNeeded ? visitor.getChecks() : visitor.getReadyForReviewChecks();\n@@ -576,1 +617,1 @@\n-                                    List<String> integrationBlockers, boolean isCleanBackport) {\n+                                    List<String> integrationBlockers, boolean reviewNeeded, List<Issue> allIssues) {\n@@ -580,1 +621,1 @@\n-        progressBody.append(getChecksList(visitor, isCleanBackport, additionalProgresses));\n+        progressBody.append(getChecksList(visitor, reviewNeeded, additionalProgresses));\n@@ -603,1 +644,0 @@\n-        var issues = issues(true, true);\n@@ -605,1 +645,1 @@\n-        if (issueProject != null && !issues.isEmpty()) {\n+        if (issueProject != null && !allIssues.isEmpty()) {\n@@ -607,1 +647,1 @@\n-            if (issues.size() > 1) {\n+            if (allIssues.size() > 1) {\n@@ -611,1 +651,1 @@\n-            for (var currentIssue : issues) {\n+            for (var currentIssue : allIssues) {\n@@ -628,1 +668,1 @@\n-                            progressBody.append(iss.get().title());\n+                            progressBody.append(BotUtils.escape(iss.get().title()));\n@@ -632,0 +672,3 @@\n+                                if (isWithdrawnCSR(iss.get())) {\n+                                    progressBody.append(\" (Withdrawn)\");\n+                                }\n@@ -728,1 +771,1 @@\n-        var markerIndex = description.lastIndexOf(progressMarker);\n+        var markerIndex = description.lastIndexOf(PROGRESS_MARKER);\n@@ -736,1 +779,1 @@\n-        var markerIndex = description.lastIndexOf(progressMarker);\n+        var markerIndex = description.lastIndexOf(PROGRESS_MARKER);\n@@ -744,1 +787,1 @@\n-            originalBody = emptyPrBodyMarker;\n+            originalBody = EMPTY_PR_BODY_MARKER;\n@@ -746,1 +789,1 @@\n-        var newBody = originalBody + \"\\n\\n\" + progressMarker + \"\\n\" + message;\n+        var newBody = originalBody + \"\\n\\n\" + PROGRESS_MARKER + \"\\n\" + message;\n@@ -898,1 +941,1 @@\n-        message.append(mergeReadyMarker);\n+        message.append(MERGE_READY_MARKER);\n@@ -907,1 +950,1 @@\n-        message.append(mergeReadyMarker);\n+        message.append(MERGE_READY_MARKER);\n@@ -912,1 +955,1 @@\n-        var existing = findComment(fullNameWarningMarker);\n+        var existing = findComment(FULL_NAME_WARNING_MARKER);\n@@ -941,1 +984,1 @@\n-            pr.addComment(fullNameWarningMarker + \"\\n\" + message);\n+            pr.addComment(FULL_NAME_WARNING_MARKER + \"\\n\" + message);\n@@ -946,1 +989,1 @@\n-        var existing = findComment(mergeReadyMarker);\n+        var existing = findComment(MERGE_READY_MARKER);\n@@ -973,1 +1016,1 @@\n-        var existing = findComment(sourceBranchWarningMarker);\n+        var existing = findComment(SOURCE_BRANCH_WARNING_MARKER);\n@@ -999,1 +1042,1 @@\n-            sourceBranchWarningMarker;\n+            SOURCE_BRANCH_WARNING_MARKER;\n@@ -1005,1 +1048,1 @@\n-        var existing = findComment(outdatedHelpMarker);\n+        var existing = findComment(OUTDATED_HELP_MARKER);\n@@ -1021,1 +1064,1 @@\n-                outdatedHelpMarker;\n+                OUTDATED_HELP_MARKER;\n@@ -1027,1 +1070,1 @@\n-        var existing = findComment(mergeCommitWarningMarker);\n+        var existing = findComment(MERGE_COMMIT_WARNING_MARKER);\n@@ -1040,1 +1083,1 @@\n-                      mergeCommitWarningMarker;\n+                      MERGE_COMMIT_WARNING_MARKER;\n@@ -1045,0 +1088,4 @@\n+    static String getJcheckName(PullRequest pr) {\n+        return pr.repository().forge().name().equals(\"GitHub\") ? \"jcheck-\" + pr.repository().name() + \"-\" + pr.id() : \"jcheck\";\n+    }\n+\n@@ -1046,1 +1093,1 @@\n-        var checkBuilder = CheckBuilder.create(\"jcheck\", pr.headHash());\n+        var checkBuilder = CheckBuilder.create(getJcheckName(pr), pr.headHash());\n@@ -1073,0 +1120,1 @@\n+            List<String> secondJCheckMessage = new ArrayList<>();\n@@ -1083,0 +1131,2 @@\n+            boolean needUpdateAdditionalProgresses = false;\n+            boolean sourceBranchJCheckConfValid = true;\n@@ -1092,1 +1142,19 @@\n-                checkablePullRequest.executeChecks(localHash, censusInstance, visitor, additionalConfiguration);\n+                checkablePullRequest.executeChecks(localHash, censusInstance, visitor, additionalConfiguration, checkablePullRequest.targetHash());\n+                \/\/ Don't need to run the second round if confOverride is set.\n+                if (workItem.bot.confOverrideRepository().isEmpty() && isFileUpdated(\".jcheck\/conf\", localHash)) {\n+                    try {\n+                        PullRequestCheckIssueVisitor visitor2 = checkablePullRequest.createVisitorUsingHeadHash();\n+                        log.info(\"Run jcheck again with the updated configuration\");\n+                        checkablePullRequest.executeChecks(localHash, censusInstance, visitor2, additionalConfiguration, pr.headHash());\n+                        secondJCheckMessage.addAll(visitor2.messages().stream()\n+                                .map(StringBuilder::new)\n+                                .map(e -> e.append(\" (failed with the updated jcheck configuration)\"))\n+                                .map(StringBuilder::toString)\n+                                .toList());\n+                    } catch (Exception e) {\n+                        var message = e.getMessage() + \" (exception thrown when running jcheck with updated jcheck configuration)\";\n+                        log.warning(message);\n+                        secondJCheckMessage.add(message);\n+                        sourceBranchJCheckConfValid = false;\n+                    }\n+                }\n@@ -1094,1 +1162,1 @@\n-                additionalProgresses = botSpecificProgresses();\n+                needUpdateAdditionalProgresses = true;\n@@ -1096,0 +1164,12 @@\n+\n+            JdkVersion version = null;\n+            if (sourceBranchJCheckConfValid) {\n+                version = BotUtils.getVersion(pr).orElse(null);\n+            }\n+            \/\/ issues without CSR issues and JEP issues\n+            var issues = issues();\n+            var csrIssueTrackerIssues = getCsrIssueTrackerIssues(issues, version);\n+            if (needUpdateAdditionalProgresses) {\n+                additionalProgresses = botSpecificProgresses(csrIssueTrackerIssues, version);\n+            }\n+\n@@ -1097,1 +1177,1 @@\n-            updateReadyForReview(visitor, additionalErrors);\n+            var readyForReview = updateReadyForReview(visitor, additionalErrors);\n@@ -1099,1 +1179,4 @@\n-            var integrationBlockers = botSpecificIntegrationBlockers();\n+            var integrationBlockers = botSpecificIntegrationBlockers(issues);\n+            integrationBlockers.addAll(secondJCheckMessage);\n+\n+            var reviewNeeded = !isCleanBackport || reviewCleanBackport;\n@@ -1102,1 +1185,1 @@\n-            var statusMessage = getStatusMessage(visitor, additionalErrors, additionalProgresses, integrationBlockers, isCleanBackport);\n+            var statusMessage = getStatusMessage(visitor, additionalErrors, additionalProgresses, integrationBlockers, reviewNeeded, issuesWithCSRAndJEP(issues, csrIssueTrackerIssues));\n@@ -1109,2 +1192,2 @@\n-            var readyForIntegration = visitor.messages().isEmpty() &&\n-                                      additionalErrors.isEmpty() &&\n+            var readyForIntegration = readyForReview &&\n+                                      visitor.messages().isEmpty() &&\n@@ -1113,4 +1196,3 @@\n-            if (isCleanBackport) {\n-                \/\/ Reviews are not needed for clean backports\n-                readyForIntegration = visitor.isReadyForReview() &&\n-                                      additionalErrors.isEmpty() &&\n+            if (!reviewNeeded) {\n+                \/\/ Reviews are not needed for clean backports unless this repo is configured with reviewCleanBackport enabled\n+                readyForIntegration = readyForReview &&\n@@ -1192,0 +1274,8 @@\n+\n+    private boolean isFileUpdated(String filename, Hash hash) throws IOException {\n+        return localRepo.commits(hash.hex(), 1).stream()\n+                .anyMatch(commit -> commit.parentDiffs().stream()\n+                        .anyMatch(diff -> diff.patches().stream()\n+                                .anyMatch(patch -> (patch.source().path().isPresent() && patch.source().path().get().toString().equals(filename))\n+                                        || ((patch.target().path().isPresent() && patch.target().path().get().toString().equals(filename))))));\n+    }\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":194,"deletions":104,"binary":false,"changes":298,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+import org.openjdk.skara.bots.common.SolvesTracker;\n@@ -46,1 +47,0 @@\n-    private final Pattern metadataComments = Pattern.compile(\"<!-- (?:backport)|(?:(add|remove) (?:contributor|reviewer))|(?:summary: ')|(?:solves: ')|(?:additional required reviewers)|(?:jep: ')|(?:csr: ')\");\n@@ -52,0 +52,1 @@\n+    private static final Pattern METADATA_COMMENTS_PATTERN = Pattern.compile(\"<!-- (?:backport)|(?:(add|remove) (?:contributor|reviewer))|(?:summary: ')|(?:solves: ')|(?:additional required reviewers)|(?:jep: ')|(?:csr: ')\");\n@@ -56,1 +57,1 @@\n-            All changes will be squashed into a single commit automatically when integrating. \\\n+            Note for future reference, the bots always squash all changes into a single commit automatically as part of the integration. \\\n@@ -94,1 +95,1 @@\n-                                        .filter(line -> metadataComments.matcher(line).find())\n+                                        .filter(line -> METADATA_COMMENTS_PATTERN.matcher(line).find())\n@@ -122,0 +123,1 @@\n+        var jcheckName = CheckRun.getJcheckName(pr);\n@@ -123,2 +125,2 @@\n-        if (currentChecks.containsKey(\"jcheck\")) {\n-            var check = currentChecks.get(\"jcheck\");\n+        if (currentChecks.containsKey(jcheckName)) {\n+            var check = currentChecks.get(jcheckName);\n@@ -231,1 +233,0 @@\n-        \/\/ First determine if the current state of the PR has already been checked\n@@ -235,3 +236,1 @@\n-        var comments = pr.comments();\n-        var allReviews = pr.reviews();\n-        var labels = new HashSet<>(pr.labelNames());\n+        var comments = prComments();\n@@ -271,0 +270,2 @@\n+        var allReviews = pr.reviews();\n+        var labels = new HashSet<>(pr.labelNames());\n@@ -273,0 +274,1 @@\n+        \/\/ Determine if the current state of the PR has already been checked\n@@ -409,1 +411,2 @@\n-                var expiresAt = CheckRun.execute(this, pr, localRepo, comments, allReviews, activeReviews, labels, census, bot.ignoreStaleReviews(), bot.integrators());\n+                var expiresAt = CheckRun.execute(this, pr, localRepo, comments, allReviews,\n+                        activeReviews, labels, census, bot.ignoreStaleReviews(), bot.integrators(), bot.reviewCleanBackport());\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckWorkItem.java","additions":14,"deletions":11,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import org.openjdk.skara.bots.common.SolvesTracker;\n@@ -55,1 +56,3 @@\n-            confOverride = jcheckRepo.fileContents(jcheckName, jcheckRef).lines().collect(Collectors.toList());\n+            confOverride = jcheckRepo.fileContents(jcheckName, jcheckRef).orElseThrow(\n+                    () -> new RuntimeException(\"Could not find \" + jcheckName + \" on ref \" + jcheckRef + \" in repo \" + jcheckRepo.name())\n+            ).lines().collect(Collectors.toList());\n@@ -201,1 +204,7 @@\n-    void executeChecks(Hash localHash, CensusInstance censusInstance, PullRequestCheckIssueVisitor visitor, List<String> additionalConfiguration) throws IOException {\n+    PullRequestCheckIssueVisitor createVisitorUsingHeadHash() throws IOException {\n+        var checks = JCheck.checksFor(localRepo, pr.headHash());\n+        return new PullRequestCheckIssueVisitor(checks);\n+    }\n+\n+    void executeChecks(Hash localHash, CensusInstance censusInstance, PullRequestCheckIssueVisitor visitor,\n+                       List<String> additionalConfiguration, Hash hash) throws IOException {\n@@ -206,1 +215,1 @@\n-            conf = JCheck.parseConfiguration(localRepo, targetHash(), additionalConfiguration);\n+            conf = JCheck.parseConfiguration(localRepo, hash, additionalConfiguration);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckablePullRequest.java","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n-    private static final Pattern commandPattern = Pattern.compile(\"^\\\\s*\/([A-Za-z]+)(?:\\\\s+(.*))?\");\n+    private static final Pattern COMMAND_PATTERN = Pattern.compile(\"^\\\\s*\/([A-Za-z]+)(?:\\\\s+(.*))?\");\n@@ -111,1 +111,1 @@\n-            var commandMatcher = commandPattern.matcher(line);\n+            var commandMatcher = COMMAND_PATTERN.matcher(line);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CommandExtractor.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CommandInvocation.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,2 +43,2 @@\n-    private static final String commandReplyMarker = \"<!-- Jmerge command reply message (%s) -->\";\n-    private static final Pattern commandReplyPattern = Pattern.compile(\"<!-- Jmerge command reply message \\\\((\\\\S+)\\\\) -->\");\n+    static final String COMMAND_REPLY_MARKER = \"<!-- Jmerge command reply message (%s) -->\";\n+    static final Pattern COMMAND_REPLY_PATTERN = Pattern.compile(\"<!-- Jmerge command reply message \\\\((\\\\S+)\\\\) -->\");\n@@ -78,1 +78,1 @@\n-                              .map(c -> commandReplyPattern.matcher(c.body()))\n+                              .map(c -> COMMAND_REPLY_PATTERN.matcher(c.body()))\n@@ -95,1 +95,1 @@\n-        printer.println(String.format(commandReplyMarker, command.id()));\n+        printer.println(String.format(COMMAND_REPLY_MARKER, command.id()));\n@@ -125,2 +125,1 @@\n-        var commit = bot.repo().commit(commitComment.commit()).orElseThrow(() ->\n-            new IllegalStateException(\"Commit with hash \" + commitComment.commit() + \" missing\"));\n+        var hash = commitComment.commit();\n@@ -129,1 +128,1 @@\n-        var allComments = bot.repo().commitComments(commit.hash());\n+        var allComments = bot.repo().commitComments(hash);\n@@ -138,1 +137,1 @@\n-                        scratchPath.resolve(\"census\"), bot.repo(), commit.hash().hex(),\n+                        scratchPath.resolve(\"census\"), bot.repo(), hash.hex(),\n@@ -145,1 +144,1 @@\n-                    var comment = String.format(commandReplyMarker, command.id()) + \"\\n\" +\n+                    var comment = String.format(COMMAND_REPLY_MARKER, command.id()) + \"\\n\" +\n@@ -148,2 +147,2 @@\n-                            commit.hash().abbreviate() + \" - cannot process command.\";\n-                    bot.repo().addCommitComment(commit.hash(), comment);\n+                            hash.abbreviate() + \" - cannot process command.\";\n+                    bot.repo().addCommitComment(hash, comment);\n@@ -153,1 +152,1 @@\n-                    var comment = String.format(commandReplyMarker, command.id()) + \"\\n\" +\n+                    var comment = String.format(COMMAND_REPLY_MARKER, command.id()) + \"\\n\" +\n@@ -157,2 +156,2 @@\n-                            + commit.hash().abbreviate() + \" - cannot process command.\";\n-                    bot.repo().addCommitComment(commit.hash(), comment);\n+                            + hash.abbreviate() + \" - cannot process command.\";\n+                    bot.repo().addCommitComment(hash, comment);\n@@ -164,1 +163,1 @@\n-                    var comment = String.format(commandReplyMarker, command.id()) + \"\\n\" +\n+                    var comment = String.format(COMMAND_REPLY_MARKER, command.id()) + \"\\n\" +\n@@ -167,2 +166,2 @@\n-                            commit.hash().abbreviate() + \" - cannot process command.\";\n-                    bot.repo().addCommitComment(commit.hash(), comment);\n+                            hash.abbreviate() + \" - cannot process command.\";\n+                    bot.repo().addCommitComment(hash, comment);\n@@ -172,1 +171,1 @@\n-                    var comment = String.format(commandReplyMarker, command.id()) + \"\\n\" +\n+                    var comment = String.format(COMMAND_REPLY_MARKER, command.id()) + \"\\n\" +\n@@ -176,2 +175,2 @@\n-                            commit.hash().abbreviate() + \" - cannot process command.\";\n-                    bot.repo().addCommitComment(commit.hash(), comment);\n+                            hash.abbreviate() + \" - cannot process command.\";\n+                    bot.repo().addCommitComment(hash, comment);\n@@ -181,0 +180,2 @@\n+            var commit = bot.repo().commit(hash).orElseThrow(() ->\n+                    new IllegalStateException(\"Commit with hash \" + hash + \" missing\"));\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CommitCommandWorkItem.java","additions":22,"deletions":21,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -25,0 +25,2 @@\n+import java.time.Duration;\n+import java.time.ZonedDateTime;\n@@ -76,3 +78,3 @@\n-            var localRepoPath = scratchPath.resolve(\"pr\").resolve(\"commit-comments\").resolve(bot.repo().name());\n-            var localRepo = hostedRepositoryPool.materializeBare(bot.repo(), localRepoPath);\n-            localRepo.fetchAll(bot.repo().url());\n+            \/\/ We are only reading data from this local repo, so no need to make a clone,\n+            \/\/ just use the seed repo directly.\n+            var seedRepo = hostedRepositoryPool.seedRepository(bot.repo(), false);\n@@ -82,1 +84,1 @@\n-                                           .collect(Collectors.toList());\n+                                           .toList();\n@@ -84,12 +86,2 @@\n-            var commitTitleToCommits = new HashMap<String, Set<Hash>>();\n-            for (var commit : localRepo.commitMetadataFor(localBranches)) {\n-                var title = commit.message().stream().findFirst().orElse(\"\");\n-                if (commitTitleToCommits.containsKey(title)) {\n-                    commitTitleToCommits.get(title).add(commit.hash());\n-                } else {\n-                    var set = new LinkedHashSet<Hash>();\n-                    set.add(commit.hash());\n-                    commitTitleToCommits.put(title, set);\n-                }\n-            }\n-            var commitComments = repo.recentCommitComments(commitTitleToCommits, excludeCommitCommentsFrom);\n+            var commitComments = repo.recentCommitComments(seedRepo, excludeCommitCommentsFrom,\n+                    localBranches, ZonedDateTime.now().minus(Duration.ofDays(4)));\n@@ -99,1 +91,1 @@\n-                                                             .anyMatch(b -> isAncestor(localRepo, cc.commit(), b.hash())))\n+                                                             .anyMatch(b -> isAncestor(seedRepo, cc.commit(), b.hash())))\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CommitCommentsWorkItem.java","additions":9,"deletions":17,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n-    private static final Pattern commandPattern = Pattern.compile(\"^(add|remove)\\\\s+(.+)$\");\n+    private static final Pattern COMMAND_PATTERN = Pattern.compile(\"^(add|remove)\\\\s+(.+)$\");\n@@ -103,1 +103,1 @@\n-        var matcher = commandPattern.matcher(command.args());\n+        var matcher = COMMAND_PATTERN.matcher(command.args());\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/ContributorCommand.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,3 +34,3 @@\n-    private final static String addMarker = \"<!-- add contributor: '%s' -->\";\n-    private final static String removeMarker = \"<!-- remove contributor: '%s' -->\";\n-    private final static Pattern markerPattern = Pattern.compile(\"<!-- (add|remove) contributor: '(.*?)' -->\");\n+    private static final String ADD_MARKER = \"<!-- add contributor: '%s' -->\";\n+    private static final String REMOVE_MARKER = \"<!-- remove contributor: '%s' -->\";\n+    private static final Pattern MARKER_PATTERN = Pattern.compile(\"<!-- (add|remove) contributor: '(.*?)' -->\");\n@@ -39,1 +39,1 @@\n-        return String.format(addMarker, contributor.toString());\n+        return String.format(ADD_MARKER, contributor.toString());\n@@ -43,1 +43,1 @@\n-        return String.format(removeMarker, contributor.toString());\n+        return String.format(REMOVE_MARKER, contributor.toString());\n@@ -49,1 +49,1 @@\n-                                         .map(comment -> markerPattern.matcher(comment.body()))\n+                                         .map(comment -> MARKER_PATTERN.matcher(comment.body()))\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/Contributors.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+    private static final Pattern BACKPORT_LABEL_PATTERN = Pattern.compile(\"backport=(.+):(.+)\");\n@@ -165,1 +166,1 @@\n-            markIntegratedAndClosed(pr, prepushHash.get(), reply);\n+            markIntegratedAndClosed(pr, prepushHash.get(), reply, allComments);\n@@ -169,1 +170,1 @@\n-        var problem = checkProblem(pr.checks(pr.headHash()), \"jcheck\", pr);\n+        var problem = checkProblem(pr.checks(pr.headHash()), CheckRun.getJcheckName(pr), pr);\n@@ -244,1 +245,1 @@\n-                markIntegratedAndClosed(pr, amendedHash, reply);\n+                markIntegratedAndClosed(pr, amendedHash, reply, allComments);\n@@ -264,1 +265,1 @@\n-        checkablePr.executeChecks(localHash, censusInstance, issues, additionalConfiguration);\n+        checkablePr.executeChecks(localHash, censusInstance, issues, additionalConfiguration, checkablePr.targetHash());\n@@ -328,1 +329,22 @@\n-    static void markIntegratedAndClosed(PullRequest pr, Hash hash, PrintWriter reply) {\n+    private static void processBackportLabel(PullRequest pr, List<Comment> allComments) {\n+        var botUser = pr.repository().forge().currentUser();\n+        for (String label : pr.labelNames()) {\n+            var matcher = BACKPORT_LABEL_PATTERN.matcher(label);\n+            if (matcher.matches()) {\n+                var repoName = matcher.group(1);\n+                var branchName = matcher.group(2);\n+                var text = \"Creating backport for repo \" + repoName + \" on branch \" + branchName\n+                        + \"\\n\\n\/backport \" + repoName + \" \" + branchName + \"\\n\"\n+                        + PullRequestCommandWorkItem.VALID_BOT_COMMAND_MARKER;\n+                if (allComments.stream()\n+                        .filter(c -> c.author().equals(botUser))\n+                        .noneMatch(((c -> c.body().equals(text))))) {\n+                    pr.addComment(text);\n+                }\n+                pr.removeLabel(label);\n+            }\n+        }\n+    }\n+\n+    static void markIntegratedAndClosed(PullRequest pr, Hash hash, PrintWriter reply, List<Comment> allComments) {\n+        processBackportLabel(pr, allComments);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/IntegrateCommand.java","additions":27,"deletions":5,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,1 @@\n+import org.openjdk.skara.bots.common.SolvesTracker;\n@@ -79,2 +80,2 @@\n-    private static final Pattern shortIssuePattern = Pattern.compile(\"((?:[A-Za-z]+-)?[0-9]+)(?:,| |$)\");\n-    private final static Pattern subCommandPattern = Pattern.compile(\"^(add|remove|delete|create|(?:[A-Za-z]+-)?[0-9]+:?)[ ,]?.*$\");\n+    private static final Pattern SHORT_ISSUE_PATTERN = Pattern.compile(\"((?:[A-Za-z]+-)?[0-9]+)(?:,| |$)\");\n+    private static final Pattern SUBCOMMAND_PATTERN = Pattern.compile(\"^(add|remove|delete|create|(?:[A-Za-z]+-)?[0-9]+:?)[ ,]?.*$\");\n@@ -89,1 +90,1 @@\n-            var shortIssueMatcher = shortIssuePattern.matcher(issueList);\n+            var shortIssueMatcher = SHORT_ISSUE_PATTERN.matcher(issueList);\n@@ -283,1 +284,1 @@\n-        var subCommandMatcher = subCommandPattern.matcher(args);\n+        var subCommandMatcher = SUBCOMMAND_PATTERN.matcher(args);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/IssueCommand.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import java.util.regex.Pattern;\n@@ -37,0 +36,1 @@\n+import static org.openjdk.skara.bots.common.PullRequestConstants.*;\n@@ -39,4 +39,1 @@\n-    static final String JEP_LABEL = \"jep\";\n-    private static final String jepMarker = \"<!-- jep: '%s' '%s' '%s' -->\"; \/\/ <!-- jep: 'JEP-ID' 'ISSUE-ID' 'ISSUE-TITLE' -->\n-    static final Pattern jepMarkerPattern = Pattern.compile(\"<!-- jep: '(.*?)' '(.*?)' '(.*?)' -->\");\n-    private static final String unneededMarker = \"<!-- jep: 'unneeded' 'unneeded' 'unneeded' -->\";\n+    private static final String UNNEEDED_MARKER = \"<!-- jep: 'unneeded' 'unneeded' 'unneeded' -->\";\n@@ -112,1 +109,1 @@\n-            reply.println(unneededMarker);\n+            reply.println(UNNEEDED_MARKER);\n@@ -145,1 +142,1 @@\n-        reply.println(String.format(jepMarker, jepNumber, jbsIssue.id(), jbsIssue.title()));\n+        reply.println(String.format(JEP_MARKER, jepNumber, jbsIssue.id(), jbsIssue.title()));\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/JEPCommand.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,3 +37,3 @@\n-    private static final Pattern argumentPattern = Pattern.compile(\"(?:(add|remove)\\\\s+)((?:[A-Za-z0-9_@.-]+[\\\\s,]*)+)\");\n-    private static final Pattern shortArgumentPattern = Pattern.compile(\"((?:[-+]?[A-Za-z0-9_@.-]+[\\\\s,]*)+)\");\n-    private static final Pattern ignoredSuffixes = Pattern.compile(\"^(.*)(?:-dev(?:@openjdk.org)?)$\");\n+    private static final Pattern ARGUMENT_PATTERN = Pattern.compile(\"(?:(add|remove)\\\\s+)((?:[A-Za-z0-9_@.-]+[\\\\s,]*)+)\");\n+    private static final Pattern SHORT_ARGUMENT_PATTERN = Pattern.compile(\"((?:[-+]?[A-Za-z0-9_@.-]+[\\\\s,]*)+)\");\n+    private static final Pattern IGNORED_SUFFIXES = Pattern.compile(\"^(.*)(?:-dev(?:@openjdk.org)?)$\");\n@@ -64,2 +64,2 @@\n-        var argumentMatcher = argumentPattern.matcher(command.args());\n-        var shortArgumentMatcher = shortArgumentPattern.matcher(command.args());\n+        var argumentMatcher = ARGUMENT_PATTERN.matcher(command.args());\n+        var shortArgumentMatcher = SHORT_ARGUMENT_PATTERN.matcher(command.args());\n@@ -136,1 +136,1 @@\n-            var ignoredSuffixMatcher = ignoredSuffixes.matcher(label);\n+            var ignoredSuffixMatcher = IGNORED_SUFFIXES.matcher(label);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/LabelCommand.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,3 +33,3 @@\n-    private final static String addMarker = \"<!-- added label: '%s' -->\";\n-    private final static String removeMarker = \"<!-- removed label: '%s' -->\";\n-    private final static Pattern labelMarkerPattern = Pattern.compile(\"<!-- (added|removed) label: '(.*?)' -->\");\n+    private static final String ADD_MARKER = \"<!-- added label: '%s' -->\";\n+    private static final String REMOVE_MARKER = \"<!-- removed label: '%s' -->\";\n+    private static final Pattern LABEL_MARKER_PATTERN = Pattern.compile(\"<!-- (added|removed) label: '(.*?)' -->\");\n@@ -38,1 +38,1 @@\n-        return String.format(addMarker, label);\n+        return String.format(ADD_MARKER, label);\n@@ -42,1 +42,1 @@\n-        return String.format(removeMarker, label);\n+        return String.format(REMOVE_MARKER, label);\n@@ -50,1 +50,1 @@\n-                .map(labelMarkerPattern::matcher)\n+                .map(LABEL_MARKER_PATTERN::matcher)\n@@ -72,1 +72,1 @@\n-                                   .map(labelMarkerPattern::matcher)\n+                                   .map(LABEL_MARKER_PATTERN::matcher)\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/LabelTracker.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n-    private static final String initialLabelMessage = \"<!-- PullRequestBot initial label help comment -->\";\n+    private static final String INITIAL_LABEL_MESSAGE = \"<!-- PullRequestBot initial label help comment -->\";\n@@ -64,1 +64,1 @@\n-        var existing = findComment(comments, initialLabelMessage);\n+        var existing = findComment(comments, INITIAL_LABEL_MESSAGE);\n@@ -114,1 +114,1 @@\n-        message.append(initialLabelMessage);\n+        message.append(INITIAL_LABEL_MESSAGE);\n@@ -129,1 +129,1 @@\n-        var comments = pr.comments();\n+        var comments = prComments();\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/LabelerWorkItem.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,22 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n@@ -72,9 +94,1 @@\n-        Optional<List<String>> conf = Optional.empty();\n-        try {\n-            conf = Optional.of(Arrays.stream(remoteRepo.fileContents(name, ref).split(\"\\n\")).toList());\n-        } catch (UncheckedRestException e) {\n-            if (e.getStatusCode() != 404) {\n-                throw e;\n-            }\n-        }\n-        return conf.map(JCheckConfiguration::parse);\n+        return remoteRepo.fileContents(name, ref).map(contents -> JCheckConfiguration.parse(Arrays.stream(contents.split(\"\\n\")).toList()));\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/LimitedCensusInstance.java","additions":23,"deletions":9,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -67,0 +67,1 @@\n+    private final boolean reviewCleanBackport;\n@@ -78,1 +79,2 @@\n-                   Set<String> integrators, Set<Integer> excludeCommitCommentsFrom, boolean enableCsr, boolean enableJep) {\n+                   Set<String> integrators, Set<Integer> excludeCommitCommentsFrom, boolean enableCsr, boolean enableJep,\n+                   boolean reviewCleanBackport) {\n@@ -103,1 +105,1 @@\n-\n+        this.reviewCleanBackport = reviewCleanBackport;\n@@ -265,0 +267,4 @@\n+    public boolean reviewCleanBackport() {\n+        return reviewCleanBackport;\n+    }\n+\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBot.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -58,0 +58,1 @@\n+    private boolean reviewCleanBackport = false;\n@@ -182,0 +183,5 @@\n+    public PullRequestBotBuilder reviewCleanBackport(boolean reviewCleanBackport) {\n+        this.reviewCleanBackport = reviewCleanBackport;\n+        return this;\n+    }\n+\n@@ -188,1 +194,2 @@\n-                                  confOverrideRef, censusLink, forks, integrators, excludeCommitCommentsFrom, enableCsr, enableJep);\n+                                  confOverrideRef, censusLink, forks, integrators, excludeCommitCommentsFrom,\n+                                  enableCsr, enableJep, reviewCleanBackport);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBotBuilder.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -119,0 +119,1 @@\n+                                           .excludeCommitCommentsFrom(excludeCommitCommentsFrom)\n@@ -174,0 +175,3 @@\n+            if (repo.value().contains(\"reviewCleanBackport\")) {\n+                botBuilder.reviewCleanBackport(repo.value().get(\"reviewCleanBackport\").asBoolean());\n+            }\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBotFactory.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -288,6 +288,0 @@\n-\n-    @Override\n-    public void visit(JCheckConfIssue issue) {\n-        addFailureMessage(issue.check(), \".jcheck\/conf is invalid: \" + issue.getErrorMessage());\n-        readyForReview = false;\n-    }\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestCheckIssueVisitor.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,3 @@\n+import static org.openjdk.skara.bots.pr.CommitCommandWorkItem.COMMAND_REPLY_MARKER;\n+import static org.openjdk.skara.bots.pr.CommitCommandWorkItem.COMMAND_REPLY_PATTERN;\n+\n@@ -42,5 +45,1 @@\n-\n-    private static final String commandReplyMarker = \"<!-- Jmerge command reply message (%s) -->\";\n-    private static final Pattern commandReplyPattern = Pattern.compile(\"<!-- Jmerge command reply message \\\\((\\\\S+)\\\\) -->\");\n-\n-    public static final String VALID_BOT_COMMAND_MARKER = \"<!-- Valid self-command -->\";\n+    static final String VALID_BOT_COMMAND_MARKER = \"<!-- Valid self-command -->\";\n@@ -88,1 +87,1 @@\n-                .map(comment -> commandReplyPattern.matcher(comment.body()))\n+                .map(comment -> COMMAND_REPLY_PATTERN.matcher(comment.body()))\n@@ -122,1 +121,1 @@\n-        printer.println(String.format(commandReplyMarker, command.id()));\n+        printer.println(String.format(COMMAND_REPLY_MARKER, command.id()));\n@@ -182,1 +181,1 @@\n-        var comments = pr.comments();\n+        var comments = getAllComments();\n@@ -231,0 +230,9 @@\n+\n+    \/**\n+     * This method returns all the comments in the pr including comments in reviews(review body)\n+     *\/\n+    private List<Comment> getAllComments() {\n+        return Stream.concat(prComments().stream(),\n+                        pr.reviews().stream().map(review -> new Comment(\"Review\" + review.id(), review.body().orElse(\"\"), review.reviewer(), review.createdAt(), null)))\n+                .sorted(Comparator.comparing(Comment::createdAt)).toList();\n+    }\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestCommandWorkItem.java","additions":17,"deletions":9,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,1 @@\n+import org.openjdk.skara.issuetracker.Comment;\n@@ -54,0 +55,1 @@\n+    private List<Comment> comments;\n@@ -87,1 +89,1 @@\n-        var comments = pr.comments();\n+        var comments = prComments();\n@@ -126,0 +128,10 @@\n+    \/**\n+     * Lazy fetching of pr comments to avoid multiple fetch calls.\n+     *\/\n+    protected List<Comment> prComments() {\n+        if (comments == null) {\n+            comments = pr.comments();\n+        }\n+        return comments;\n+    }\n+\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestWorkItem.java","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,2 +34,2 @@\n-    private final static String marker = \"<!-- integration requested: '%s' -->\";\n-    private final static Pattern markerPattern = Pattern.compile(\"<!-- integration requested: '(.*?)' -->\");\n+    private static final String MARKER = \"<!-- integration requested: '%s' -->\";\n+    private static final Pattern MARKER_PATTERN = Pattern.compile(\"<!-- integration requested: '(.*?)' -->\");\n@@ -38,1 +38,1 @@\n-        return String.format(marker, hash.hex());\n+        return String.format(MARKER, hash.hex());\n@@ -44,1 +44,1 @@\n-                                         .map(comment -> markerPattern.matcher(comment.body()))\n+                                         .map(comment -> MARKER_PATTERN.matcher(comment.body()))\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/ReadyForSponsorTracker.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n-    private static final Pattern commandPattern = Pattern.compile(\"^(credit|remove)\\\\s+(.+)$\");\n+    private static final Pattern COMMAND_PATTERN = Pattern.compile(\"^(credit|remove)\\\\s+(.+)$\");\n@@ -76,1 +76,1 @@\n-        var matcher = commandPattern.matcher(command.args());\n+        var matcher = COMMAND_PATTERN.matcher(command.args());\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/ReviewerCommand.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,3 +35,3 @@\n-    private final static String addMarker = \"<!-- add reviewer: '%s' -->\";\n-    private final static String removeMarker = \"<!-- remove reviewer: '%s' -->\";\n-    private final static Pattern markerPattern = Pattern.compile(\"<!-- (add|remove) reviewer: '(.*?)' -->\");\n+    private static final String ADD_MARKER = \"<!-- add reviewer: '%s' -->\";\n+    private static final String REMOVE_MARKER = \"<!-- remove reviewer: '%s' -->\";\n+    private static final Pattern MARKER_PATTERN = Pattern.compile(\"<!-- (add|remove) reviewer: '(.*?)' -->\");\n@@ -40,1 +40,1 @@\n-        return String.format(addMarker, contributor.username());\n+        return String.format(ADD_MARKER, contributor.username());\n@@ -44,1 +44,1 @@\n-        return String.format(addMarker, username);\n+        return String.format(ADD_MARKER, username);\n@@ -48,1 +48,1 @@\n-        return String.format(removeMarker, contributor.username());\n+        return String.format(REMOVE_MARKER, contributor.username());\n@@ -55,1 +55,1 @@\n-                                         .map(line -> markerPattern.matcher(line))\n+                                         .map(line -> MARKER_PATTERN.matcher(line))\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/Reviewers.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n-    private static final Map<String, String> roleMappings = Map.of(\n+    private static final Map<String, String> ROLE_MAPPINGS = Map.of(\n@@ -110,1 +110,1 @@\n-            if (!roleMappings.containsKey(splitArgs[1].toLowerCase())) {\n+            if (!ROLE_MAPPINGS.containsKey(splitArgs[1].toLowerCase())) {\n@@ -115,1 +115,1 @@\n-            role = roleMappings.get(splitArgs[1].toLowerCase());\n+            role = ROLE_MAPPINGS.get(splitArgs[1].toLowerCase());\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/ReviewersCommand.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,2 +34,2 @@\n-    private final static String reviewersMarker = \"<!-- additional required reviewers id marker (%d) (%s) -->\";\n-    private final static Pattern reviewersMarkerPattern = Pattern.compile(\n+    private static final String REVIEWERS_MARKER = \"<!-- additional required reviewers id marker (%d) (%s) -->\";\n+    private static final Pattern REVIEWERS_MARKER_PATTERN = Pattern.compile(\n@@ -39,1 +39,1 @@\n-        return String.format(reviewersMarker, numReviewers, role);\n+        return String.format(REVIEWERS_MARKER, numReviewers, role);\n@@ -117,1 +117,1 @@\n-                                       .map(comment -> reviewersMarkerPattern.matcher(comment.body()))\n+                                       .map(comment -> REVIEWERS_MARKER_PATTERN.matcher(comment.body()))\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/ReviewersTracker.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1,68 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.skara.bots.pr;\n-\n-import org.openjdk.skara.host.HostUser;\n-import org.openjdk.skara.issuetracker.Comment;\n-import org.openjdk.skara.vcs.openjdk.Issue;\n-\n-import java.nio.charset.StandardCharsets;\n-import java.util.*;\n-import java.util.regex.*;\n-import java.util.stream.Collectors;\n-\n-public class SolvesTracker {\n-    private final static String solvesMarker = \"<!-- solves: '%s' '%s' -->\";\n-    private final static Pattern markerPattern = Pattern.compile(\"<!-- solves: '(.*?)' '(.*?)' -->\");\n-\n-    static String setSolvesMarker(Issue issue) {\n-        var encodedDescription = Base64.getEncoder().encodeToString(issue.description().getBytes(StandardCharsets.UTF_8));\n-        return String.format(solvesMarker, issue.shortId(), encodedDescription);\n-    }\n-\n-    static String removeSolvesMarker(Issue issue) {\n-        return String.format(solvesMarker, issue.shortId(), \"\");\n-    }\n-\n-    static List<Issue> currentSolved(HostUser botUser, List<Comment> comments) {\n-        var solvesActions = comments.stream()\n-                                    .filter(comment -> comment.author().equals(botUser))\n-                                    .flatMap(comment -> comment.body().lines())\n-                                    .map(markerPattern::matcher)\n-                                    .filter(Matcher::find)\n-                                    .collect(Collectors.toList());\n-        var current = new LinkedHashMap<String, Issue>();\n-        for (var action : solvesActions) {\n-            var key = action.group(1);\n-            if (action.group(2).equals(\"\")) {\n-                current.remove(key);\n-            } else {\n-                var decodedDescription = new String(Base64.getDecoder().decode(action.group(2)), StandardCharsets.UTF_8);\n-                var issue = new Issue(key, decodedDescription);\n-                current.put(key, issue);\n-            }\n-        }\n-\n-        return new ArrayList<>(current.values());\n-    }\n-}\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/SolvesTracker.java","additions":0,"deletions":68,"binary":false,"changes":68,"status":"deleted"},{"patch":"@@ -52,1 +52,1 @@\n-            markIntegratedAndClosed(pr, prePushHash.get(), reply);\n+            markIntegratedAndClosed(pr, prePushHash.get(), reply, allComments);\n@@ -134,1 +134,1 @@\n-                markIntegratedAndClosed(pr, amendedHash, reply);\n+                markIntegratedAndClosed(pr, amendedHash, reply, allComments);\n@@ -147,2 +147,2 @@\n-    private void markIntegratedAndClosed(PullRequest pr, Hash amendedHash, PrintWriter reply) {\n-        IntegrateCommand.markIntegratedAndClosed(pr, amendedHash, reply);\n+    private void markIntegratedAndClosed(PullRequest pr, Hash amendedHash, PrintWriter reply, List<Comment> allComments) {\n+        IntegrateCommand.markIntegratedAndClosed(pr, amendedHash, reply, allComments);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/SponsorCommand.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,2 +34,2 @@\n-    private final static String summaryMarker = \"<!-- summary: '%s' -->\";\n-    private final static Pattern markerPattern = Pattern.compile(\"<!-- summary: '(.*?)' -->\");\n+    private static final String SUMMARY_MARKER = \"<!-- summary: '%s' -->\";\n+    private static final Pattern MARKER_PATTERN = Pattern.compile(\"<!-- summary: '(.*?)' -->\");\n@@ -39,1 +39,1 @@\n-        return String.format(summaryMarker, encodedSummary);\n+        return String.format(SUMMARY_MARKER, encodedSummary);\n@@ -45,1 +45,1 @@\n-                                         .map(comment -> markerPattern.matcher(comment.body()))\n+                                         .map(comment -> MARKER_PATTERN.matcher(comment.body()))\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/Summary.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/SummaryCommand.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/TagCommand.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,172 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bots.pr;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInfo;\n+import org.openjdk.skara.forge.Review;\n+import org.openjdk.skara.issuetracker.Issue;\n+import org.openjdk.skara.test.*;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.openjdk.skara.bots.pr.PullRequestAsserts.assertLastCommentContains;\n+\n+public class BackportPRCommandTests {\n+    @Test\n+    void simple(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var integrator = credentials.getHostedRepository();\n+            var bot = credentials.getHostedRepository();\n+            var targetRepo = credentials.getHostedRepository(\"targetRepo\");\n+            var targetRepo2 = credentials.getHostedRepository(\"targetRepo2\");\n+            var seedFolder = tempFolder.path().resolve(\"seed\");\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addReviewer(integrator.forge().currentUser().id())\n+                    .addCommitter(author.forge().currentUser().id());\n+            var prBot = PullRequestBot.newBuilder()\n+                    .repo(bot)\n+                    .censusRepo(censusBuilder.build())\n+                    .seedStorage(seedFolder)\n+                    .forks(Map.of(\"targetRepo\", targetRepo, \"targetRepo2\", targetRepo2))\n+                    .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"123: This is a pull request\");\n+\n+            var reviewerPr = (TestPullRequest) integrator.pullRequest(pr.id());\n+\n+            \/\/ Enable backport for targetRepo on master\n+            pr.addComment(\"\/backport targetRepo\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertLastCommentContains(pr, \"Backport for repo `targetRepo` on branch `master` was successfully enabled\");\n+            assertTrue(pr.store().labelNames().contains(\"backport=targetRepo:master\"));\n+\n+            \/\/ Enable backport for targetRepo2 on dev, but dev does not exist\n+            pr.addComment(\"\/backport targetRepo2 dev\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertLastCommentContains(pr, \"The target branch `dev` does not exist\");\n+            assertFalse(pr.store().labelNames().contains(\"backport=targetRepo2:dev\"));\n+\n+            \/\/ Enable backport for targetRepo2 on dev\n+            localRepo.push(masterHash, targetRepo2.url(), \"dev\", true);\n+            pr.addComment(\"\/backport targetRepo2 dev\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertLastCommentContains(pr, \"Backport for repo `targetRepo2` on branch `dev` was successfully enabled\");\n+            assertTrue(pr.store().labelNames().contains(\"backport=targetRepo2:dev\"));\n+\n+            \/\/ disable backport for targetRepo on master\n+            reviewerPr.addComment(\"\/backport disable targetRepo\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertLastCommentContains(pr, \"Backport for repo `targetRepo` on branch `master` was successfully disabled.\");\n+            assertFalse(pr.store().labelNames().contains(\"backport=targetRepo:master\"));\n+\n+            \/\/ disable backport for targetRepo again\n+            reviewerPr.addComment(\"\/backport disable targetRepo\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertLastCommentContains(pr, \"Backport for repo `targetRepo` on branch `master` was already disabled.\");\n+            assertFalse(pr.store().labelNames().contains(\"backport=targetRepo:master\"));\n+\n+            \/\/ Enable backport for targetRepo on master as reviewer\n+            reviewerPr.addComment(\"\/backport targetRepo\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertLastCommentContains(pr, \"Backport for repo `targetRepo` on branch `master` was successfully enabled\");\n+            assertTrue(pr.store().labelNames().contains(\"backport=targetRepo:master\"));\n+\n+            \/\/ Approve this PR\n+            reviewerPr.addReview(Review.Verdict.APPROVED, \"\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertTrue(pr.store().labelNames().contains(\"ready\"));\n+\n+            \/\/ Integrate\n+            pr.addComment(\"\/integrate\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertLastCommentContains(pr, \"@user1\");\n+            assertLastCommentContains(pr, \"was successfully created on the branch\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertLastCommentContains(pr, \"@user2\");\n+            assertLastCommentContains(pr, \"Could **not** automatically backport\");\n+\n+            \/\/ Resolve conflict\n+            localRepo.push(masterHash, targetRepo.url(), \"master\", true);\n+            \/\/ Use \/backport after the pr is integrated\n+            reviewerPr.addComment(\"\/backport targetRepo\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertLastCommentContains(pr, \"was successfully created on the branch\");\n+        }\n+    }\n+\n+    @Test\n+    void testBackportCommandWhenPrIsClosed(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var integrator = credentials.getHostedRepository();\n+            var bot = credentials.getHostedRepository();\n+            var targetRepo = credentials.getHostedRepository(\"targetRepo\");\n+            var targetRepo2 = credentials.getHostedRepository(\"targetRepo2\");\n+            var seedFolder = tempFolder.path().resolve(\"seed\");\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addReviewer(integrator.forge().currentUser().id())\n+                    .addReviewer(bot.forge().currentUser().id())\n+                    .addCommitter(author.forge().currentUser().id());\n+            var prBot = PullRequestBot.newBuilder()\n+                    .repo(bot)\n+                    .censusRepo(censusBuilder.build())\n+                    .seedStorage(seedFolder)\n+                    .forks(Map.of(\"targetRepo\", targetRepo, \"targetRepo2\", targetRepo2))\n+                    .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"123: This is a pull request\");\n+\n+            \/\/close the pr\n+            pr.store().setState(Issue.State.CLOSED);\n+            pr.addComment(\"\/backport targetRepo\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertLastCommentContains(pr, \"`\/backport` command can not be used in a closed but not integrated pull request\");\n+        }\n+    }\n+}\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/BackportPRCommandTests.java","additions":172,"deletions":0,"binary":false,"changes":172,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1676,0 +1676,102 @@\n+                var m = pattern.matcher(line);\n+                if (m.matches()) {\n+                    hex = m.group(1);\n+                    break;\n+                }\n+            }\n+            assertNotNull(hex);\n+            assertEquals(40, hex.length());\n+            localRepo.checkout(localRepo.defaultBranch());\n+            localRepo.pull(author.url().toString(), \"master\", false);\n+            var commit = localRepo.lookup(new Hash(hex)).orElseThrow();\n+\n+            var message = CommitMessageParsers.v1.parse(commit);\n+            assertEquals(1, message.issues().size());\n+            assertEquals(\"An issue\", message.issues().get(0).description());\n+            assertEquals(List.of(\"integrationreviewer3\"), message.reviewers());\n+            assertEquals(Optional.of(releaseHash), message.original());\n+            assertEquals(List.of(), message.contributors());\n+            assertEquals(List.of(), message.summaries());\n+            assertEquals(List.of(), message.additional());\n+        }\n+    }\n+\n+    @Test\n+    void cleanBackportRequiresReview(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+\n+            var author = credentials.getHostedRepository();\n+            var integrator = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var issues = credentials.getIssueProject();\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addCommitter(author.forge().currentUser().id())\n+                    .addReviewer(integrator.forge().currentUser().id())\n+                    .addReviewer(reviewer.forge().currentUser().id());\n+            var bot = PullRequestBot.newBuilder()\n+                    .repo(integrator)\n+                    .censusRepo(censusBuilder.build())\n+                    .issueProject(issues)\n+                    .reviewCleanBackport(true)\n+                    .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            var releaseBranch = localRepo.branch(masterHash, \"release\");\n+            localRepo.checkout(releaseBranch);\n+            var newFile = localRepo.root().resolve(\"a_new_file.txt\");\n+            Files.writeString(newFile, \"hello\");\n+            localRepo.add(newFile);\n+            var issue1 = credentials.createIssue(issues, \"An issue\");\n+            var issue1Number = issue1.id().split(\"-\")[1];\n+            var originalMessage = issue1Number + \": An issue\\n\" +\n+                    \"\\n\" +\n+                    \"Reviewed-by: integrationreviewer2\";\n+            var releaseHash = localRepo.commit(originalMessage, \"integrationcommitter1\", \"integrationcommitter1@openjdk.org\");\n+            localRepo.push(releaseHash, author.url(), \"refs\/heads\/release\", true);\n+\n+            \/\/ \"backport\" the new file to the master branch\n+            localRepo.checkout(localRepo.defaultBranch());\n+            var editBranch = localRepo.branch(masterHash, \"edit\");\n+            localRepo.checkout(editBranch);\n+            var newFile2 = localRepo.root().resolve(\"a_new_file.txt\");\n+            Files.writeString(newFile2, \"hello\");\n+            localRepo.add(newFile2);\n+            var editHash = localRepo.commit(\"Backport\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(editHash, author.url(), \"refs\/heads\/edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"Backport \" + releaseHash.hex());\n+\n+            \/\/ The bot should reply with a backport message and that the PR is not ready\n+            TestBotRunner.runPeriodicItems(bot);\n+            var backportComment = pr.comments().get(0).body();\n+            assertTrue(backportComment.contains(\"This backport pull request has now been updated with issue\"));\n+            assertTrue(backportComment.contains(\"<!-- backport \" + releaseHash.hex() + \" -->\"));\n+            assertEquals(issue1Number + \": An issue\", pr.store().title());\n+            assertTrue(pr.store().labelNames().contains(\"rfr\"));\n+            assertTrue(pr.store().labelNames().contains(\"clean\"));\n+            assertTrue(pr.store().labelNames().contains(\"backport\"));\n+            assertTrue(pr.store().body().contains(\"Change must be properly reviewed\"));\n+\n+            \/\/ Approve this pr as a reviewer\n+            var approvalPr = reviewer.pullRequest(pr.id());\n+            approvalPr.addReview(Review.Verdict.APPROVED, \"Approved\");\n+            TestBotRunner.runPeriodicItems(bot);\n+            assertTrue(pr.store().labelNames().contains(\"ready\"));\n+\n+            \/\/ Integrate\n+            author.pullRequest(pr.id());\n+            pr.addComment(\"\/integrate\");\n+            TestBotRunner.runPeriodicItems(bot);\n+\n+            \/\/ Find the commit\n+            assertLastCommentContains(pr, \"Pushed as commit\");\n+\n+            String hex = null;\n+            var comment = pr.comments().get(pr.comments().size() - 1);\n+            var lines = comment.body().split(\"\\n\");\n+            var pattern = Pattern.compile(\".* Pushed as commit ([0-9a-z]{40}).*\");\n+            for (var line : lines) {\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/BackportTests.java","additions":103,"deletions":1,"binary":false,"changes":104,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import org.openjdk.skara.json.JSONValue;\n@@ -81,1 +82,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request matching fixVersion 0.1 to be approved (needs to be created)\"));\n@@ -92,1 +93,1 @@\n-            assertFalse(pr.store().body().contains(\"Change requires a CSR request to be approved\"));\n+            assertFalse(pr.store().body().contains(\"Change requires a CSR request matching fixVersion 0.1 to be approved (needs to be created)\"));\n@@ -104,1 +105,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request matching fixVersion 0.1 to be approved (needs to be created)\"));\n@@ -108,0 +109,4 @@\n+    private String generateCSRProgressMessage(org.openjdk.skara.issuetracker.Issue issue) {\n+        return \"Change requires CSR request [\" + issue.id() + \"](\" + issue.webUrl() + \") to be approved\";\n+    }\n+\n@@ -121,0 +126,1 @@\n+            csr.setProperty(\"issuetype\", JSON.of(\"CSR\"));\n@@ -150,1 +156,1 @@\n-            assertTrue(pr.store().body().contains(\"- [x] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [x] \" + generateCSRProgressMessage(csr)));\n@@ -192,1 +198,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request matching fixVersion 0.1 to be approved (needs to be created)\"));\n@@ -231,1 +237,1 @@\n-            assertFalse(pr.store().body().contains(\"Change requires a CSR request to be approved\"));\n+            assertFalse(pr.store().body().contains(\"Change requires a CSR request matching fixVersion 0.1 to be approved (needs to be created)\"));\n@@ -240,1 +246,1 @@\n-            assertFalse(pr.store().body().contains(\"Change requires a CSR request to be approved\"));\n+            assertFalse(pr.store().body().contains(\"Change requires a CSR request matching fixVersion 0.1 to be approved (needs to be created)\"));\n@@ -252,1 +258,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request matching fixVersion 0.1 to be approved (needs to be created)\"));\n@@ -261,1 +267,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request matching fixVersion 0.1 to be approved (needs to be created)\"));\n@@ -270,1 +276,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request matching fixVersion 0.1 to be approved (needs to be created)\"));\n@@ -309,1 +315,1 @@\n-            assertFalse(pr.store().body().contains(\"Change requires a CSR request to be approved\"));\n+            assertFalse(pr.store().body().contains(\"Change requires a CSR request matching fixVersion 0.1 to be approved (needs to be created)\"));\n@@ -352,1 +358,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request matching fixVersion 0.1 to be approved (needs to be created)\"));\n@@ -394,1 +400,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request matching fixVersion 0.1 to be approved (needs to be created)\"));\n@@ -405,1 +411,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request matching fixVersion 0.1 to be approved (needs to be created)\"));\n@@ -421,0 +427,1 @@\n+            csr.setProperty(\"issuetype\", JSON.of(\"CSR\"));\n@@ -451,1 +458,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] \" + generateCSRProgressMessage(csr)));\n@@ -458,2 +465,3 @@\n-            assertLastCommentContains(pr, \"The CSR requirement cannot be removed as there is already a CSR associated \" +\n-                                      \"with the main issue of this pull request. Please withdraw the CSR\");\n+            assertLastCommentContains(pr, \"The CSR requirement cannot be removed as there is already a CSR associated with the issue [\" +\n+                    issue.id() + \"](\" + issue.webUrl() + \"). Please withdraw the CSR [\"\n+                    + csr.id() + \"](\" + csr.webUrl() + \") and then use the command `\/csr unneeded` again.\");\n@@ -463,1 +471,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] \" + generateCSRProgressMessage(csr)));\n@@ -478,1 +486,1 @@\n-            assertFalse(pr.store().body().contains(\"Change requires a CSR request to be approved\"));\n+            assertFalse(pr.store().body().contains(generateCSRProgressMessage(csr)));\n@@ -493,0 +501,1 @@\n+            csr.setProperty(\"issuetype\", JSON.of(\"CSR\"));\n@@ -523,1 +532,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] \" + generateCSRProgressMessage(csr)));\n@@ -530,2 +539,3 @@\n-            assertLastCommentContains(pr, \"The CSR requirement cannot be removed as there is already a CSR associated \" +\n-                    \"with the main issue of this pull request. Please withdraw the CSR\");\n+            assertLastCommentContains(pr, \"The CSR requirement cannot be removed as there is already a CSR associated with the issue [\" +\n+                    issue.id() + \"](\" + issue.webUrl() + \"). Please withdraw the CSR [\"\n+                    + csr.id() + \"](\" + csr.webUrl() + \") and then use the command `\/csr unneeded` again.\");\n@@ -535,1 +545,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] \" + generateCSRProgressMessage(csr)));\n@@ -550,1 +560,1 @@\n-            assertFalse(pr.store().body().contains(\"Change requires a CSR request to be approved\"));\n+            assertFalse(pr.store().body().contains(\"- [ ] \" + generateCSRProgressMessage(csr)));\n@@ -586,1 +596,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request matching fixVersion 0.1 to be approved (needs to be created)\"));\n@@ -626,1 +636,1 @@\n-            assertFalse(pr.store().body().contains(\"Change requires a CSR request to be approved\"));\n+            assertFalse(pr.store().body().contains(\"Change requires a CSR request matching fixVersion 0.1 to be approved (needs to be created)\"));\n@@ -646,1 +656,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request matching fixVersion 0.1 to be approved (needs to be created)\"));\n@@ -679,1 +689,1 @@\n-            assertFalse(pr.store().body().contains(\"Change requires a CSR request to be approved\"));\n+            assertFalse(pr.store().body().contains(\"Change requires a CSR request matching fixVersion 0.1 to be approved (needs to be created)\"));\n@@ -690,1 +700,1 @@\n-            assertTrue(pr.store().body().contains(\"Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"Change requires a CSR request matching fixVersion 0.1 to be approved (needs to be created)\"));\n@@ -750,1 +760,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request matching fixVersion (No fixVersion in .jcheck\/conf) to be approved (needs to be created)\"));\n@@ -761,1 +771,1 @@\n-            assertFalse(pr.store().body().contains(\"Change requires a CSR request to be approved\"));\n+            assertFalse(pr.store().body().contains(\"Change requires a CSR request matching fixVersion (No fixVersion in .jcheck\/conf) to be approved (needs to be created)\"));\n@@ -779,1 +789,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request matching fixVersion (No fixVersion in .jcheck\/conf) to be approved (needs to be created)\"));\n@@ -790,1 +800,1 @@\n-            assertFalse(pr.store().body().contains(\"Change requires a CSR request to be approved\"));\n+            assertFalse(pr.store().body().contains(\"Change requires a CSR request matching fixVersion (No fixVersion in .jcheck\/conf) to be approved (needs to be created)\"));\n@@ -808,1 +818,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request matching fixVersion 17 to be approved (needs to be created)\"));\n@@ -819,1 +829,1 @@\n-            assertFalse(pr.store().body().contains(\"Change requires a CSR request to be approved\"));\n+            assertFalse(pr.store().body().contains(\"Change requires a CSR request matching fixVersion 17 to be approved (needs to be created)\"));\n@@ -829,1 +839,1 @@\n-            assertTrue(pr.store().body().contains(\"- [x] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [x] \" + generateCSRProgressMessage(csr)));\n@@ -836,1 +846,1 @@\n-            assertTrue(pr.store().body().contains(\"- [x] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [x] \" + generateCSRProgressMessage(csr)));\n@@ -838,2 +848,3 @@\n-            assertLastCommentContains(pr, \"The CSR requirement cannot be removed as there is already a CSR associated \" +\n-                    \"with the main issue of this pull request. Please withdraw the CSR\");\n+            assertLastCommentContains(pr, \"The CSR requirement cannot be removed as there is already a CSR associated with the issue [\" +\n+                    issue.id() + \"](\" + issue.webUrl() + \"). Please withdraw the CSR [\"\n+                    + csr.id() + \"](\" + csr.webUrl() + \")\");\n@@ -853,1 +864,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request matching fixVersion 17 to be approved (needs to be created)\"));\n@@ -864,1 +875,1 @@\n-            assertFalse(pr.store().body().contains(\"Change requires a CSR request to be approved\"));\n+            assertFalse(pr.store().body().contains(\"Change requires a CSR request matching fixVersion 17 to be approved (needs to be created)\"));\n@@ -878,1 +889,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] \" + generateCSRProgressMessage(backportCsr)));\n@@ -886,1 +897,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] \" + generateCSRProgressMessage(backportCsr)));\n@@ -888,2 +899,3 @@\n-            assertLastCommentContains(pr, \"The CSR requirement cannot be removed as there is already a CSR associated \" +\n-                    \"with the main issue of this pull request. Please withdraw the CSR\");\n+            assertLastCommentContains(pr, \"The CSR requirement cannot be removed as there is already a CSR associated with the issue [\" +\n+                            issue.id() + \"](\" + issue.webUrl() + \"). Please withdraw the CSR [\"\n+                            + backportCsr.id() + \"](\" + backportCsr.webUrl() + \")\");\n@@ -908,1 +920,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] \" + generateCSRProgressMessage(backportCsr)));\n@@ -918,1 +930,1 @@\n-            assertFalse(pr.store().body().contains(\"Change requires a CSR request to be approved\"));\n+            assertFalse(pr.store().body().contains(\"- [ ] \" + generateCSRProgressMessage(backportCsr)));\n@@ -920,2 +932,2 @@\n-            assertLastCommentContains(pr, \"determined that a [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request \" +\n-                    \"is not needed for this pull request.\");\n+            assertTrue(pr.comments().get(pr.comments().size() - 2).body().contains(\"determined that a [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request \" +\n+                    \"is not needed for this pull request.\"));\n@@ -926,1 +938,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request matching fixVersion 11 to be approved (needs to be created)\"));\n@@ -947,0 +959,200 @@\n+\n+    @Test\n+    void prSolvesMultipleIssues(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var bot = credentials.getHostedRepository();\n+            var issues = credentials.getIssueProject();\n+            var issue = issues.createIssue(\"This is an issue\", List.of(), Map.of());\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addReviewer(reviewer.forge().currentUser().id())\n+                    .addCommitter(author.forge().currentUser().id());\n+            var prBot = PullRequestBot.newBuilder().repo(bot).issueProject(issues).censusRepo(censusBuilder.build()).enableCsr(true).build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", issue.id() + \": This is an issue\");\n+\n+            \/\/ Require CSR\n+            var prAsReviewer = reviewer.pullRequest(pr.id());\n+            prAsReviewer.addComment(\"\/csr\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+\n+            \/\/ The bot should reply with a message that a CSR is needed\n+            assertLastCommentContains(pr, \"has indicated that a \" +\n+                    \"[compatibility and specification](https:\/\/wiki.openjdk.org\/display\/csr\/Main) (CSR) request \" +\n+                    \"is needed for this pull request.\");\n+            assertTrue(pr.store().labelNames().contains(\"csr\"));\n+            \/\/ The PR body should contain the progress about CSR request\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request matching fixVersion 0.1 to be approved (needs to be created)\"));\n+\n+            var issue2 = issues.createIssue(\"This is an issue2\", List.of(), Map.of());\n+            \/\/ create a csr for issue2\n+            var csr2 = issues.createIssue(\"This is a CSR2\", List.of(), Map.of(\"resolution\",\n+                    JSON.object().put(\"name\", \"Unresolved\")));\n+            csr2.setProperty(\"issuetype\", JSON.of(\"CSR\"));\n+            csr2.setState(Issue.State.OPEN);\n+            issue2.addLink(Link.create(csr2, \"csr for\").build());\n+\n+            pr.addComment(\"\/issue TEST-2\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertTrue(pr.store().labelNames().contains(\"csr\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] \" + generateCSRProgressMessage(csr2)));\n+\n+            \/\/ Try \/csr unneeded, it should fail\n+            prAsReviewer.addComment(\"\/csr unneeded\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertTrue(pr.store().labelNames().contains(\"csr\"));\n+            assertLastCommentContains(pr, \"The CSR requirement cannot be removed as there is already a CSR associated with the issue [\" +\n+                    issue2.id() + \"](\" + issue2.webUrl() + \"). Please withdraw the CSR [\"\n+                    + csr2.id() + \"](\" + csr2.webUrl() + \")\");\n+\n+            \/\/ Withdraw the csr linked with issue2\n+            csr2.setState(Issue.State.CLOSED);\n+            csr2.setProperty(\"resolution\", JSON.object().put(\"name\", \"Withdrawn\"));\n+            prAsReviewer.addComment(\"\/csr unneeded\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertFalse(pr.store().labelNames().contains(\"csr\"));\n+\n+            \/\/ Require CSR again\n+            prAsReviewer.addComment(\"\/csr\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+\n+            \/\/ The bot should reply with a message that a CSR is needed\n+            assertLastCommentContains(pr, \"has indicated that a \" +\n+                    \"[compatibility and specification](https:\/\/wiki.openjdk.org\/display\/csr\/Main) (CSR) request \" +\n+                    \"is needed for this pull request.\");\n+            assertTrue(pr.store().labelNames().contains(\"csr\"));\n+            \/\/ The PR body should contain the progress about CSR request\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request matching fixVersion 0.1 to be approved (needs to be created)\"));\n+\n+            \/\/ Create a csr for main issue\n+            var csr1 = issues.createIssue(\"This is a CSR1\", List.of(), Map.of(\"resolution\",\n+                    JSON.object().put(\"name\", \"Unresolved\")));\n+            csr1.setProperty(\"issuetype\", JSON.of(\"CSR\"));\n+            csr1.setState(Issue.State.OPEN);\n+            issue.addLink(Link.create(csr1, \"csr for\").build());\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertTrue(pr.store().labelNames().contains(\"csr\"));\n+        }\n+    }\n+\n+\n+    @Test\n+    void prSolvesMultipleIssuesWithApprovedCSRIssues(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var bot = credentials.getHostedRepository();\n+            var issues = credentials.getIssueProject();\n+            var issue = issues.createIssue(\"This is an issue\", List.of(), Map.of());\n+            var csr = issues.createIssue(\"This is a CSR\", List.of(), Map.of());\n+            csr.setProperty(\"issuetype\", JSON.of(\"CSR\"));\n+            csr.setState(Issue.State.CLOSED);\n+            csr.setProperty(\"resolution\", JSON.object().put(\"name\", \"Approved\"));\n+            issue.addLink(Link.create(csr, \"csr for\").build());\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addReviewer(reviewer.forge().currentUser().id())\n+                    .addCommitter(author.forge().currentUser().id());\n+            var prBot = PullRequestBot.newBuilder().repo(bot).issueProject(issues).censusRepo(censusBuilder.build()).enableCsr(true).build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", issue.id() + \": This is an issue\");\n+\n+            var issue2 = issues.createIssue(\"This is an issue2\", List.of(), Map.of());\n+            \/\/ create a csr for issue2\n+            var csr2 = issues.createIssue(\"This is a CSR2\", List.of(), Map.of());\n+            csr2.setState(Issue.State.CLOSED);\n+            csr2.setProperty(\"resolution\", JSON.object().put(\"name\", \"Approved\"));\n+            csr2.setProperty(\"issuetype\", JSON.of(\"CSR\"));\n+            issue2.addLink(Link.create(csr2, \"csr for\").build());\n+\n+            pr.addComment(\"\/issue TEST-3\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            \/\/ Require CSR\n+            var prAsReviewer = reviewer.pullRequest(pr.id());\n+            prAsReviewer.addComment(\"\/csr\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertFalse(pr.store().labelNames().contains(\"csr\"));\n+            assertTrue(pr.store().body().contains(\"- [x] \" + generateCSRProgressMessage(csr)));\n+            assertTrue(pr.store().body().contains(\"- [x] \" + generateCSRProgressMessage(csr2)));\n+        }\n+    }\n+\n+    @Test\n+    void prSolvesMultipleIssuesWithWithdrawnCSRIssues(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var bot = credentials.getHostedRepository();\n+            var issues = credentials.getIssueProject();\n+            var issue = issues.createIssue(\"This is an issue\", List.of(), Map.of());\n+            var csr = issues.createIssue(\"This is a CSR\", List.of(), Map.of());\n+            csr.setProperty(\"issuetype\", JSON.of(\"CSR\"));\n+            csr.setState(Issue.State.CLOSED);\n+            csr.setProperty(\"resolution\", JSON.object().put(\"name\", \"Withdrawn\"));\n+            issue.addLink(Link.create(csr, \"csr for\").build());\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addReviewer(reviewer.forge().currentUser().id())\n+                    .addCommitter(author.forge().currentUser().id());\n+            var prBot = PullRequestBot.newBuilder().repo(bot).issueProject(issues).censusRepo(censusBuilder.build()).enableCsr(true).build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", issue.id() + \": This is an issue\");\n+\n+            var issue2 = issues.createIssue(\"This is an issue2\", List.of(), Map.of());\n+            \/\/ create a csr for issue2\n+            var csr2 = issues.createIssue(\"This is a CSR2\", List.of(), Map.of());\n+            csr2.setState(Issue.State.CLOSED);\n+            csr2.setProperty(\"resolution\", JSON.object().put(\"name\", \"Withdrawn\"));\n+            csr2.setProperty(\"issuetype\", JSON.of(\"CSR\"));\n+            issue2.addLink(Link.create(csr2, \"csr for\").build());\n+\n+            pr.addComment(\"\/issue TEST-3\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            \/\/ Require CSR\n+            var prAsReviewer = reviewer.pullRequest(pr.id());\n+            prAsReviewer.addComment(\"\/csr\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertTrue(pr.store().labelNames().contains(\"csr\"));\n+            assertLastCommentContains(pr, \"has indicated that a \" +\n+                    \"[compatibility and specification](https:\/\/wiki.openjdk.org\/display\/csr\/Main) (CSR) request \" +\n+                    \"is needed for this pull request.\");\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request matching fixVersion 0.1 to be approved (needs to be created)\"));\n+            assertFalse(pr.store().body().contains(generateCSRProgressMessage(csr)));\n+            assertFalse(pr.store().body().contains(generateCSRProgressMessage(csr2)));\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CSRTests.java","additions":262,"deletions":50,"binary":false,"changes":312,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,0 +44,1 @@\n+import static org.openjdk.skara.bots.common.PullRequestConstants.*;\n@@ -1976,1 +1977,0 @@\n-            var csrUpdateMarker = \"\\n<!-- csr: 'update' -->\\n\";\n@@ -2018,1 +2018,0 @@\n-            localRepo.checkout(localRepo.defaultBranch());\n@@ -2024,1 +2023,1 @@\n-            localRepo.push(confHash, author.url(), \"master\", true);\n+            localRepo.push(confHash, author.url(), \"edit\", true);\n@@ -2026,1 +2025,1 @@\n-            pr.setBody(pr.store().body() + csrUpdateMarker);\n+            pr.setBody(pr.store().body() + CSR_UPDATE_MARKER);\n@@ -2038,1 +2037,0 @@\n-            localRepo.checkout(localRepo.defaultBranch());\n@@ -2044,1 +2042,1 @@\n-            localRepo.push(confHash, author.url(), \"master\", true);\n+            localRepo.push(confHash, author.url(), \"edit\", true);\n@@ -2046,1 +2044,1 @@\n-            pr.setBody(pr.store().body() + csrUpdateMarker);\n+            pr.setBody(pr.store().body() + CSR_UPDATE_MARKER);\n@@ -2058,1 +2056,0 @@\n-            localRepo.checkout(localRepo.defaultBranch());\n@@ -2064,1 +2061,1 @@\n-            localRepo.push(confHash, author.url(), \"master\", true);\n+            localRepo.push(confHash, author.url(), \"edit\", true);\n@@ -2066,1 +2063,1 @@\n-            pr.setBody(pr.store().body() + csrUpdateMarker);\n+            pr.setBody(pr.store().body() + CSR_UPDATE_MARKER);\n@@ -2080,1 +2077,1 @@\n-            pr.setBody(pr.store().body() + csrUpdateMarker);\n+            pr.setBody(pr.store().body() + CSR_UPDATE_MARKER);\n@@ -2099,1 +2096,1 @@\n-            pr.setBody(pr.store().body() + csrUpdateMarker);\n+            pr.setBody(pr.store().body() + CSR_UPDATE_MARKER);\n@@ -2119,1 +2116,1 @@\n-            pr.setBody(pr.store().body() + csrUpdateMarker);\n+            pr.setBody(pr.store().body() + CSR_UPDATE_MARKER);\n@@ -2137,1 +2134,0 @@\n-            localRepo.checkout(localRepo.defaultBranch());\n@@ -2143,1 +2139,1 @@\n-            localRepo.push(confHash, author.url(), \"master\", true);\n+            localRepo.push(confHash, author.url(), \"edit\", true);\n@@ -2145,1 +2141,1 @@\n-            pr.setBody(pr.store().body() + csrUpdateMarker);\n+            pr.setBody(pr.store().body() + CSR_UPDATE_MARKER);\n@@ -2162,1 +2158,1 @@\n-            pr.setBody(pr.store().body() + csrUpdateMarker);\n+            pr.setBody(pr.store().body() + CSR_UPDATE_MARKER);\n@@ -2197,5 +2193,3 @@\n-            try (var output = new FileWriter(tempFolder.path().resolve(\".jcheck\/conf\").toFile(), true)) {\n-                output.append(\"\\n[checks \\\"problemlists\\\"]\\n\");\n-                output.append(\"dirs=test\/jdk\\n\");\n-            }\n-\n+            var checkConf = tempFolder.path().resolve(\".jcheck\/conf\");\n+            Files.writeString(checkConf, \"\\n[checks \\\"problemlists\\\"]\\n\", StandardOpenOption.APPEND);\n+            Files.writeString(checkConf, \"dirs=test\/jdk\\n\", StandardOpenOption.APPEND);\n@@ -2205,3 +2199,1 @@\n-            try (var output = Files.newBufferedWriter(problemList)) {\n-                output.append(\"test 1 windows-all\");\n-            }\n+            Files.writeString(problemList, \"test 1 windows-all\", StandardOpenOption.CREATE);\n@@ -2312,4 +2304,3 @@\n-            try (var output = new FileWriter(tempFolder.path().resolve(\".jcheck\/conf\").toFile(), true)) {\n-                output.append(\"\\nRandomCharacters\");\n-            }\n-            localRepo.add(tempFolder.path().resolve(\".jcheck\/conf\"));\n+            var checkConf = tempFolder.path().resolve(\".jcheck\/conf\");\n+            Files.writeString(checkConf, \"\\nRandomCharacters\", StandardOpenOption.APPEND);\n+            localRepo.add(checkConf);\n@@ -2340,1 +2331,0 @@\n-            var checkConf = tempFolder.path().resolve(\".jcheck\/conf\");\n@@ -2346,0 +2336,8 @@\n+            \/\/ Restore .jcheck\/conf in source branch\n+            localRepo.checkout(editHash);\n+            Files.createDirectories(tempFolder.path().resolve(\".jcheck\"));\n+            writeToCheckConf(checkConf);\n+            localRepo.add(checkConf);\n+            var restoreEditHash = localRepo.commit(\"restore source branch conf\", \"testauthor\", \"ta@none.none\");\n+            localRepo.push(restoreEditHash, author.url(), \"edit\", true);\n+\n@@ -2387,1 +2385,0 @@\n-            \/\/ Check the status (should become ready immediately as reviewercount is overridden to 0)\n@@ -2443,3 +2440,1 @@\n-            try (var output = new FileWriter(checkConf.toFile(), true)) {\n-                output.append(\"\\nRandomCharacters\");\n-            }\n+            Files.writeString(checkConf, \"\\nRandomCharacters\", StandardOpenOption.CREATE);\n@@ -2503,118 +2498,0 @@\n-    @Test\n-    void testJCheckConfCheck(TestInfo testInfo) throws IOException {\n-        try (var credentials = new HostCredentials(testInfo);\n-             var tempFolder = new TemporaryDirectory()) {\n-            var author = credentials.getHostedRepository();\n-            var reviewer = credentials.getHostedRepository();\n-\n-            var censusBuilder = credentials.getCensusBuilder()\n-                    .addAuthor(author.forge().currentUser().id())\n-                    .addReviewer(reviewer.forge().currentUser().id());\n-            var seedFolder = tempFolder.path().resolve(\"seed\");\n-            var checkBot = PullRequestBot.newBuilder()\n-                    .repo(author)\n-                    .censusRepo(censusBuilder.build())\n-                    .censusLink(\"https:\/\/census.com\/{{contributor}}-profile\")\n-                    .seedStorage(seedFolder)\n-                    .build();\n-\n-            \/\/ Populate the projects repository\n-            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n-\n-            \/\/ Remove .jcheck\/conf\n-            localRepo.remove(localRepo.root().resolve(\".jcheck\/conf\"));\n-            localRepo.commit(\"no conf\", \"testauthor\", \"ta@none.none\");\n-            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n-            localRepo.push(masterHash, author.url(), \"master\", true);\n-\n-            \/\/ write new conf\n-            Files.createDirectories(tempFolder.path().resolve(\".jcheck\"));\n-            var checkConf = tempFolder.path().resolve(\".jcheck\/conf\");\n-            try (var output = Files.newBufferedWriter(checkConf)) {\n-                output.append(\"[general]\\n\");\n-                output.append(\"project=test\\n\");\n-                output.append(\"jbs=tstprj\\n\");\n-                output.append(\"\\n\");\n-                output.append(\"[checks]\\n\");\n-                output.append(\"error=\");\n-                output.append(String.join(\",\", Set.of(\"author\", \"reviewers\", \"whitespace\", \"jcheckconf\")));\n-                output.append(\"\\n\\n\");\n-                output.append(\"[census]\\n\");\n-                output.append(\"version=0\\n\");\n-                output.append(\"domain=openjdk.org\\n\");\n-                output.append(\"\\n\");\n-                output.append(\"[checks \\\"whitespace\\\"]\\n\");\n-                output.append(\"files=.*\\\\.txt\\n\");\n-                output.append(\"\\n\");\n-                output.append(\"[checks \\\"reviewers\\\"]\\n\");\n-                output.append(\"reviewers=1\\n\");\n-            }\n-            localRepo.add(checkConf);\n-            masterHash = localRepo.commit(\"add conf to master\", \"testauthor\", \"ta@none.none\");\n-            localRepo.push(masterHash, author.url(), \"master\", true);\n-\n-            \/\/ Create a new branch\n-            var editBranch = localRepo.branch(masterHash, \"edit\");\n-            localRepo.checkout(editBranch);\n-            var editHash = CheckableRepository.appendAndCommit(localRepo);\n-            localRepo.push(editHash, author.url(), \"edit\", true);\n-\n-            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"This is a pull request\");\n-\n-            \/\/ Check the status\n-            TestBotRunner.runPeriodicItems(checkBot);\n-            var checks = pr.checks(editHash);\n-            assertEquals(1, checks.size());\n-            var check = checks.get(\"jcheck\");\n-            assertEquals(CheckStatus.SUCCESS, check.status());\n-            assertTrue(pr.store().labelNames().contains(\"rfr\"));\n-\n-            \/\/ Make .jcheck\/conf invalid\n-            try (var output = new FileWriter(checkConf.toFile(), true)) {\n-                output.append(\"\\nRandomCharacters\");\n-            }\n-            localRepo.add(checkConf);\n-            var invalidHash = localRepo.commit(\"add conf to master\", \"testauthor\", \"ta@none.none\");\n-            localRepo.push(invalidHash, author.url(), \"edit\", true);\n-\n-            TestBotRunner.runPeriodicItems(checkBot);\n-            checks = pr.checks(invalidHash);\n-            assertEquals(1, checks.size());\n-            check = checks.get(\"jcheck\");\n-            assertEquals(CheckStatus.FAILURE, check.status());\n-            assertTrue(pr.store().body().contains(\".jcheck\/conf is invalid: line 17: entry must be of form 'key = value'\"));\n-            assertFalse(pr.store().labelNames().contains(\"rfr\"));\n-\n-            \/\/ Restore .jcheck\/conf\n-            try (var output = Files.newBufferedWriter(checkConf)) {\n-                output.append(\"[general]\\n\");\n-                output.append(\"project=test\\n\");\n-                output.append(\"jbs=tstprj\\n\");\n-                output.append(\"\\n\");\n-                output.append(\"[checks]\\n\");\n-                output.append(\"error=\");\n-                output.append(String.join(\",\", Set.of(\"author\", \"reviewers\", \"whitespace\", \"jcheckconf\")));\n-                output.append(\"\\n\\n\");\n-                output.append(\"[census]\\n\");\n-                output.append(\"version=0\\n\");\n-                output.append(\"domain=openjdk.org\\n\");\n-                output.append(\"\\n\");\n-                output.append(\"[checks \\\"whitespace\\\"]\\n\");\n-                output.append(\"files=.*\\\\.txt\\n\");\n-                output.append(\"\\n\");\n-                output.append(\"[checks \\\"reviewers\\\"]\\n\");\n-                output.append(\"reviewers=1\\n\");\n-            }\n-            localRepo.add(checkConf);\n-            var restoreHash = localRepo.commit(\"restore .jcheck\/conf\", \"testauthor\", \"ta@none.none\");\n-            localRepo.push(restoreHash, author.url(), \"edit\", true);\n-\n-            TestBotRunner.runPeriodicItems(checkBot);\n-            checks = pr.checks(restoreHash);\n-            assertEquals(1, checks.size());\n-            check = checks.get(\"jcheck\");\n-            assertEquals(CheckStatus.SUCCESS, check.status());\n-            assertTrue(pr.store().labelNames().contains(\"rfr\"));\n-        }\n-    }\n-\n@@ -2801,0 +2678,128 @@\n+\n+    @Test\n+    void testRunJcheckTwice(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addAuthor(author.forge().currentUser().id())\n+                    .addReviewer(reviewer.forge().currentUser().id());\n+            var seedFolder = tempFolder.path().resolve(\"seed\");\n+            var checkBot = PullRequestBot.newBuilder()\n+                    .repo(author)\n+                    .censusRepo(censusBuilder.build())\n+                    .censusLink(\"https:\/\/census.com\/{{contributor}}-profile\")\n+                    .seedStorage(seedFolder)\n+                    .build();\n+\n+            \/\/ Populate the projects repository\n+            \/\/ set the .jcheck\/conf without whitespace check\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType(), Path.of(\"appendable.txt\"), Set.of(\"author\", \"reviewers\"), \"0.1\");\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR, add a line with whitespace issue\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, \"An additional line\\r\\n\");\n+            localRepo.push(editHash, author.url(), \"refs\/heads\/edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"This is a pull request\");\n+\n+            \/\/ Check the status\n+            TestBotRunner.runPeriodicItems(checkBot);\n+\n+            \/\/ Verify that the check succeeded\n+            var checks = pr.checks(editHash);\n+            assertEquals(1, checks.size());\n+            var check = checks.get(\"jcheck\");\n+            assertEquals(CheckStatus.SUCCESS, check.status());\n+            \/\/ pr body should not have the process for whitespace\n+            assertFalse(pr.store().body().contains(\"whitespace\"));\n+\n+            \/\/ Add whitespace check to .jcheck\/conf\n+            var checkConf = tempFolder.path().resolve(\".jcheck\/conf\");\n+            writeToCheckConf(checkConf);\n+            localRepo.add(checkConf);\n+            var updateHash = localRepo.commit(\"enable whitespace issue check\", \"testauthor\", \"ta@none.none\");\n+            localRepo.push(updateHash, author.url(), \"edit\", true);\n+\n+            TestBotRunner.runPeriodicItems(checkBot);\n+\n+            \/\/ pr body should have the integrationBlocker for whitespace and reviewer check\n+            assertTrue(pr.store().body().contains(\"Whitespace errors (failed with the updated jcheck configuration)\"));\n+            assertTrue(pr.store().body().contains(\"Too few reviewers with at least role reviewer found (have 0, need at least 1) (failed with the updated jcheck configuration)\"));\n+\n+            var approvalPr = reviewer.pullRequest(pr.id());\n+            approvalPr.addReview(Review.Verdict.APPROVED, \"Approved\");\n+            TestBotRunner.runPeriodicItems(checkBot);\n+\n+            \/\/ \/\/ pr body should only have the integrationBlocker for whitespace check\n+            assertTrue(pr.store().body().contains(\"Whitespace errors (failed with the updated jcheck configuration)\"));\n+            assertFalse(pr.store().body().contains(\"Too few reviewers with at least role reviewer found (have 0, need at least 1) (failed with the updated jcheck configuration)\"));\n+        }\n+    }\n+\n+    @Test\n+    void testRunJcheckTwiceWithBadConfiguration(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addAuthor(author.forge().currentUser().id())\n+                    .addReviewer(reviewer.forge().currentUser().id());\n+            var seedFolder = tempFolder.path().resolve(\"seed\");\n+            var checkBot = PullRequestBot.newBuilder()\n+                    .repo(author)\n+                    .censusRepo(censusBuilder.build())\n+                    .censusLink(\"https:\/\/census.com\/{{contributor}}-profile\")\n+                    .seedStorage(seedFolder)\n+                    .build();\n+\n+            \/\/ Populate the projects repository\n+            \/\/ set the .jcheck\/conf without whitespace check\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType(), Path.of(\"appendable.txt\"), Set.of(\"author\", \"reviewers\"), \"0.1\");\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR, add a line with whitespace issue\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, \"An additional line\\r\\n\");\n+            localRepo.push(editHash, author.url(), \"refs\/heads\/edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"This is a pull request\");\n+\n+            \/\/ Check the status\n+            TestBotRunner.runPeriodicItems(checkBot);\n+\n+            \/\/ Verify that the check succeeded\n+            var checks = pr.checks(editHash);\n+            assertEquals(1, checks.size());\n+            var check = checks.get(\"jcheck\");\n+            assertEquals(CheckStatus.SUCCESS, check.status());\n+            \/\/ pr body should not have the process for whitespace\n+            assertFalse(pr.store().body().contains(\"whitespace\"));\n+\n+            \/\/ Make .jcheck\/conf invalid\n+            var checkConf = tempFolder.path().resolve(\".jcheck\/conf\");\n+            Files.writeString(checkConf, \"\\nRandomCharacters\", StandardOpenOption.APPEND);\n+            localRepo.add(checkConf);\n+            var updateHash = localRepo.commit(\"make .jcheck\/conf invalid\", \"testauthor\", \"ta@none.none\");\n+            localRepo.push(updateHash, author.url(), \"edit\", true);\n+\n+            TestBotRunner.runPeriodicItems(checkBot);\n+\n+            \/\/ pr body should have the integrationBlocker for exception\n+            assertTrue(pr.store().body().contains(\"(exception thrown when running jcheck with updated jcheck configuration)\"));\n+\n+            \/\/ Restore .jcheck\/conf and add whitespace issue check\n+            writeToCheckConf(checkConf);\n+            localRepo.add(checkConf);\n+            updateHash = localRepo.commit(\"enable whitespace issue check\", \"testauthor\", \"ta@none.none\");\n+            localRepo.push(updateHash, author.url(), \"edit\", true);\n+\n+            TestBotRunner.runPeriodicItems(checkBot);\n+            \/\/ pr body should have the integrationBlocker for whitespace and reviewer check\n+            assertTrue(pr.store().body().contains(\"Whitespace errors (failed with the updated jcheck configuration)\"));\n+            assertTrue(pr.store().body().contains(\"Too few reviewers with at least role reviewer found (have 0, need at least 1) (failed with the updated jcheck configuration)\"));\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CheckTests.java","additions":158,"deletions":153,"binary":false,"changes":311,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CleanCommandTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -122,1 +122,1 @@\n-            PullRequestAsserts.assertLastCommentContains(pr, \"The command `backport` can only be used in a pull request that has been integrated.\");\n+            PullRequestAsserts.assertLastCommentContains(pr, \"Backport for repo `jdk17u-dev` on branch `master` was successfully enabled\");\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CommitCommandTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/ContributorTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/IssueTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,0 +42,1 @@\n+import static org.openjdk.skara.bots.common.PullRequestConstants.*;\n@@ -78,1 +79,1 @@\n-            assertFalse(pr.store().labelNames().contains(JEPCommand.JEP_LABEL));\n+            assertFalse(pr.store().labelNames().contains(JEP_LABEL));\n@@ -85,1 +86,1 @@\n-            assertTrue(pr.store().labelNames().contains(JEPCommand.JEP_LABEL));\n+            assertTrue(pr.store().labelNames().contains(JEP_LABEL));\n@@ -95,1 +96,1 @@\n-            assertFalse(pr.store().labelNames().contains(JEPCommand.JEP_LABEL));\n+            assertFalse(pr.store().labelNames().contains(JEP_LABEL));\n@@ -104,1 +105,1 @@\n-            assertTrue(pr.store().labelNames().contains(JEPCommand.JEP_LABEL));\n+            assertTrue(pr.store().labelNames().contains(JEP_LABEL));\n@@ -114,1 +115,1 @@\n-            assertFalse(pr.store().labelNames().contains(JEPCommand.JEP_LABEL));\n+            assertFalse(pr.store().labelNames().contains(JEP_LABEL));\n@@ -123,1 +124,1 @@\n-            assertTrue(pr.store().labelNames().contains(JEPCommand.JEP_LABEL));\n+            assertTrue(pr.store().labelNames().contains(JEP_LABEL));\n@@ -133,1 +134,1 @@\n-            assertFalse(pr.store().labelNames().contains(JEPCommand.JEP_LABEL));\n+            assertFalse(pr.store().labelNames().contains(JEP_LABEL));\n@@ -142,1 +143,1 @@\n-            assertTrue(pr.store().labelNames().contains(JEPCommand.JEP_LABEL));\n+            assertTrue(pr.store().labelNames().contains(JEP_LABEL));\n@@ -152,1 +153,1 @@\n-            assertFalse(pr.store().labelNames().contains(JEPCommand.JEP_LABEL));\n+            assertFalse(pr.store().labelNames().contains(JEP_LABEL));\n@@ -161,1 +162,1 @@\n-            assertFalse(pr.store().labelNames().contains(JEPCommand.JEP_LABEL));\n+            assertFalse(pr.store().labelNames().contains(JEP_LABEL));\n@@ -171,1 +172,1 @@\n-            assertFalse(pr.store().labelNames().contains(JEPCommand.JEP_LABEL));\n+            assertFalse(pr.store().labelNames().contains(JEP_LABEL));\n@@ -180,1 +181,1 @@\n-            assertFalse(pr.store().labelNames().contains(JEPCommand.JEP_LABEL));\n+            assertFalse(pr.store().labelNames().contains(JEP_LABEL));\n@@ -190,1 +191,1 @@\n-            assertFalse(pr.store().labelNames().contains(JEPCommand.JEP_LABEL));\n+            assertFalse(pr.store().labelNames().contains(JEP_LABEL));\n@@ -199,1 +200,1 @@\n-            assertTrue(pr.store().labelNames().contains(JEPCommand.JEP_LABEL));\n+            assertTrue(pr.store().labelNames().contains(JEP_LABEL));\n@@ -241,1 +242,1 @@\n-            assertFalse(pr.store().labelNames().contains(JEPCommand.JEP_LABEL));\n+            assertFalse(pr.store().labelNames().contains(JEP_LABEL));\n@@ -248,1 +249,1 @@\n-            assertFalse(pr.store().labelNames().contains(JEPCommand.JEP_LABEL));\n+            assertFalse(pr.store().labelNames().contains(JEP_LABEL));\n@@ -257,1 +258,1 @@\n-            assertTrue(pr.store().labelNames().contains(JEPCommand.JEP_LABEL));\n+            assertTrue(pr.store().labelNames().contains(JEP_LABEL));\n@@ -267,1 +268,1 @@\n-            assertTrue(pr.store().labelNames().contains(JEPCommand.JEP_LABEL));\n+            assertTrue(pr.store().labelNames().contains(JEP_LABEL));\n@@ -277,1 +278,1 @@\n-            assertTrue(pr.store().labelNames().contains(JEPCommand.JEP_LABEL));\n+            assertTrue(pr.store().labelNames().contains(JEP_LABEL));\n@@ -287,1 +288,1 @@\n-            assertFalse(pr.store().labelNames().contains(JEPCommand.JEP_LABEL));\n+            assertFalse(pr.store().labelNames().contains(JEP_LABEL));\n@@ -322,1 +323,1 @@\n-            assertFalse(pr.store().labelNames().contains(JEPCommand.JEP_LABEL));\n+            assertFalse(pr.store().labelNames().contains(JEP_LABEL));\n@@ -329,1 +330,1 @@\n-            assertFalse(pr.store().labelNames().contains(JEPCommand.JEP_LABEL));\n+            assertFalse(pr.store().labelNames().contains(JEP_LABEL));\n@@ -343,1 +344,1 @@\n-            assertFalse(pr.store().labelNames().contains(JEPCommand.JEP_LABEL));\n+            assertFalse(pr.store().labelNames().contains(JEP_LABEL));\n@@ -357,1 +358,1 @@\n-            assertFalse(pr.store().labelNames().contains(JEPCommand.JEP_LABEL));\n+            assertFalse(pr.store().labelNames().contains(JEP_LABEL));\n@@ -367,1 +368,1 @@\n-            assertFalse(pr.store().labelNames().contains(JEPCommand.JEP_LABEL));\n+            assertFalse(pr.store().labelNames().contains(JEP_LABEL));\n@@ -377,1 +378,1 @@\n-            assertFalse(pr.store().labelNames().contains(JEPCommand.JEP_LABEL));\n+            assertFalse(pr.store().labelNames().contains(JEP_LABEL));\n@@ -387,1 +388,1 @@\n-            assertFalse(pr.store().labelNames().contains(JEPCommand.JEP_LABEL));\n+            assertFalse(pr.store().labelNames().contains(JEP_LABEL));\n@@ -397,1 +398,1 @@\n-            assertFalse(pr.store().labelNames().contains(JEPCommand.JEP_LABEL));\n+            assertFalse(pr.store().labelNames().contains(JEP_LABEL));\n@@ -440,1 +441,1 @@\n-            assertFalse(pr.store().labelNames().contains(JEPCommand.JEP_LABEL));\n+            assertFalse(pr.store().labelNames().contains(JEP_LABEL));\n@@ -446,1 +447,1 @@\n-                assertTrue(pr.store().labelNames().contains(JEPCommand.JEP_LABEL));\n+                assertTrue(pr.store().labelNames().contains(JEP_LABEL));\n@@ -457,1 +458,1 @@\n-                assertFalse(pr.store().labelNames().contains(JEPCommand.JEP_LABEL));\n+                assertFalse(pr.store().labelNames().contains(JEP_LABEL));\n@@ -497,1 +498,1 @@\n-            assertFalse(pr.store().labelNames().contains(JEPCommand.JEP_LABEL));\n+            assertFalse(pr.store().labelNames().contains(JEP_LABEL));\n@@ -506,1 +507,1 @@\n-            assertTrue(pr.store().labelNames().contains(JEPCommand.JEP_LABEL));\n+            assertTrue(pr.store().labelNames().contains(JEP_LABEL));\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/JEPCommandTests.java","additions":35,"deletions":34,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/LabelTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/LabelerTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/MergeTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/OpenCommandTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/PreIntegrateTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,22 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n@@ -58,1 +80,2 @@\n-                          ]\n+                          ],\n+                          \"reviewCleanBackport\": true\n@@ -101,0 +124,1 @@\n+            assertTrue(pullRequestBot1.reviewCleanBackport());\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBotFactoryTest.java","additions":25,"deletions":1,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+import org.openjdk.skara.forge.Review;\n@@ -360,0 +361,43 @@\n+\n+    @Test\n+    void interpretCommandFromReviews(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var integrator = credentials.getHostedRepository();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addAuthor(author.forge().currentUser().id());\n+            var prBot = PullRequestBot.newBuilder().repo(integrator).censusRepo(censusBuilder.build()).build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"This is a pull request\");\n+\n+            \/\/ Test command in review\n+            pr.addReview(Review.Verdict.APPROVED, \"\/reviewers 3\");\n+            \/\/ Run the bot\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertLastCommentContains(pr, \"The total number of required reviews for this PR (including the jcheck configuration and the last \/reviewers command) is now set to 3\");\n+\n+            \/\/ This should work\n+            pr.addReview(Review.Verdict.APPROVED, \"first line \\n  \/reviewers 4\");\n+            \/\/ Run the bot\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertLastCommentContains(pr, \"The total number of required reviews for this PR (including the jcheck configuration and the last \/reviewers command) is now set to 4\");\n+\n+            \/\/ This should not work\n+            pr.addReview(Review.Verdict.APPROVED, \"first line \\n  second line \/reviewers 5\");\n+            \/\/ Run the bot\n+            TestBotRunner.runPeriodicItems(prBot);\n+            \/\/ Reviewer number is still 4\n+            assertLastCommentContains(pr, \"The total number of required reviews for this PR (including the jcheck configuration and the last \/reviewers command) is now set to 4\");\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestCommandTests.java","additions":45,"deletions":1,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/ReviewerTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/SponsorTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/SummaryTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/submit\/build.gradle","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/submit\/src\/main\/java\/org\/openjdk\/skara\/bots\/submit\/SubmitBotFactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/submit\/src\/main\/java\/org\/openjdk\/skara\/bots\/submit\/SubmitBotWorkItem.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,22 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n","filename":"bots\/submit\/src\/test\/java\/org\/openjdk\/skara\/bots\/submit\/SubmitBotFactoryTest.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/synclabel\/src\/main\/java\/org\/openjdk\/skara\/bots\/synclabel\/SyncLabelBot.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/synclabel\/src\/main\/java\/org\/openjdk\/skara\/bots\/synclabel\/SyncLabelBotUpdateLabelWorkItem.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,22 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n","filename":"bots\/synclabel\/src\/test\/java\/org\/openjdk\/skara\/bots\/synclabel\/SyncLabelBotFactoryTest.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/synclabel\/src\/test\/java\/org\/openjdk\/skara\/bots\/synclabel\/SyncLabelBotTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/tester\/build.gradle","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/tester\/src\/main\/java\/module-info.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/tester\/src\/main\/java\/org\/openjdk\/skara\/bots\/tester\/State.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -101,1 +101,3 @@\n-                var jcheckConf = repo.fileContents(\".jcheck\/conf\", Branch.defaultFor(VCS.GIT).name());\n+                var jcheckConf = repo.fileContents(\".jcheck\/conf\", Branch.defaultFor(VCS.GIT).name())\n+                        .orElseThrow(() -> new RuntimeException(\"Could not find .jcheck\/conf on ref \"\n+                                + Branch.defaultFor(VCS.GIT).name() + \" in repo \" + repo.name()));\n","filename":"bots\/tester\/src\/main\/java\/org\/openjdk\/skara\/bots\/tester\/TestBot.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/tester\/src\/main\/java\/org\/openjdk\/skara\/bots\/tester\/TestBotFactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/tester\/src\/main\/java\/org\/openjdk\/skara\/bots\/tester\/TestUpdateNeededWorkItem.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/tester\/src\/main\/java\/org\/openjdk\/skara\/bots\/tester\/TestWorkItem.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/tester\/src\/test\/java\/org\/openjdk\/skara\/bots\/tester\/InMemoryContinuousIntegration.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -71,1 +71,1 @@\n-    public Optional<HostedCommit> search(Hash hash) {\n+    public Optional<HostedCommit> search(Hash hash, boolean includeDiffs) {\n","filename":"bots\/tester\/src\/test\/java\/org\/openjdk\/skara\/bots\/tester\/InMemoryHost.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -132,2 +132,6 @@\n-    public String fileContents(String filename, String ref) {\n-        return null;\n+    public Optional<String> fileContents(String filename, String ref) {\n+        return Optional.empty();\n+    }\n+\n+    @Override\n+    public void writeFileContents(String filename, String content, Branch branch, String message, String authorName, String authorEmail) {\n@@ -171,0 +175,8 @@\n+    @Override\n+    public void protectBranchPattern(String ref) {\n+    }\n+\n+    @Override\n+    public void unprotectBranchPattern(String ref) {\n+    }\n+\n@@ -190,1 +202,1 @@\n-    public Optional<HostedCommit> commit(Hash commit) {\n+    public Optional<HostedCommit> commit(Hash commit, boolean includeDiffs) {\n@@ -205,1 +217,2 @@\n-    public List<CommitComment> recentCommitComments(Map<String, Set<Hash>> commitTitleToCommits, Set<Integer> excludeAuthors) {\n+    public List<CommitComment> recentCommitComments(ReadOnlyRepository unused, Set<Integer> excludeAuthors,\n+            List<Branch> branches, ZonedDateTime updatedAfter) {\n","filename":"bots\/tester\/src\/test\/java\/org\/openjdk\/skara\/bots\/tester\/InMemoryHostedRepository.java","additions":17,"deletions":4,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -296,0 +296,5 @@\n+    @Override\n+    public Optional<ZonedDateTime> lastMarkedAsDraftTime() {\n+        return Optional.empty();\n+    }\n+\n","filename":"bots\/tester\/src\/test\/java\/org\/openjdk\/skara\/bots\/tester\/InMemoryPullRequest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/tester\/src\/test\/java\/org\/openjdk\/skara\/bots\/tester\/StateTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,22 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n","filename":"bots\/tester\/src\/test\/java\/org\/openjdk\/skara\/bots\/tester\/TestBotFactoryTest.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/tester\/src\/test\/java\/org\/openjdk\/skara\/bots\/tester\/TestBotTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/tester\/src\/test\/java\/org\/openjdk\/skara\/bots\/tester\/TestWorkItemTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/testinfo\/build.gradle","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/testinfo\/src\/main\/java\/org\/openjdk\/skara\/bots\/testinfo\/TestInfoBotFactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/testinfo\/src\/main\/java\/org\/openjdk\/skara\/bots\/testinfo\/TestInfoBotWorkItem.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,22 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n","filename":"bots\/testinfo\/src\/test\/java\/org\/openjdk\/skara\/bots\/testinfo\/TestInfoBotFactoryTest.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/testinfo\/src\/test\/java\/org\/openjdk\/skara\/bots\/testinfo\/TestInfoTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/topological\/build.gradle","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/topological\/src\/main\/java\/org\/openjdk\/skara\/bots\/topological\/TopologicalBot.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/topological\/src\/main\/java\/org\/openjdk\/skara\/bots\/topological\/TopologicalBotFactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,22 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n","filename":"bots\/topological\/src\/test\/java\/org\/openjdk\/skara\/bots\/topological\/TopologicalBotFactoryTest.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"bots\/topological\/src\/test\/java\/org\/openjdk\/skara\/bots\/topological\/TopologicalBotTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -83,1 +83,1 @@\n-        reports.html.enabled = false\n+        reports.html.required = false\n@@ -95,2 +95,2 @@\n-        reports.html.enabled = false\n-        reports.junitXml.enabled = false\n+        reports.html.required = false\n+        reports.junitXml.required = false\n@@ -133,2 +133,2 @@\n-    destinationDir = file(\"$buildDir\/reports\/allTests\")\n-    reportOn subprojects.findAll()*.getTasksByName('test', false)\n+    destinationDirectory = file(\"$buildDir\/reports\/allTests\")\n+    getTestResults().from(subprojects.findAll()*.getTasksByName('test', false))\n","filename":"build.gradle","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -230,1 +230,2 @@\n-        var contributorsData = repository.fileContents(\"contributors.xml\", ref);\n+        var contributorsData = repository.fileContents(\"contributors.xml\", ref)\n+                .orElseThrow(() -> new RuntimeException(\"Could not find contributors.xml on ref \" + ref + \" in repo \" + repository.name()));\n@@ -232,1 +233,2 @@\n-        var namespaceData = repository.fileContents(\"namespaces\/\" + name + \".xml\", ref);\n+        var namespaceData = repository.fileContents(\"namespaces\/\" + name + \".xml\", ref)\n+                .orElseThrow(() -> new RuntimeException(\"Could not find namespaces\/\" + name + \".xml on ref \" + ref + \" in repo \" + repository.name()));\n","filename":"census\/src\/main\/java\/org\/openjdk\/skara\/census\/Census.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"census\/src\/main\/java\/org\/openjdk\/skara\/census\/Group.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"census\/src\/main\/java\/org\/openjdk\/skara\/census\/Project.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"census\/src\/main\/java\/org\/openjdk\/skara\/census\/Version.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"cli\/build.gradle","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"cli\/src\/main\/java\/module-info.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/GitBackport.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/GitCredentials.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/GitDefpath.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/GitFork.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/GitHgExport.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/GitInfo.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/GitPublish.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/GitSkara.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/GitSync.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/GitToken.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/GitTranslate.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/GitWebrev.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -316,8 +316,0 @@\n-\n-    @Override\n-    public void visit(JCheckConfIssue i) {\n-        if (!ignore.contains(i.check().name())) {\n-            println(i, \".jcheck\/conf is invalid: \" + i.getErrorMessage());\n-            hasDisplayedErrors = true;\n-        }\n-    }\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/JCheckCLIVisitor.java","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/Logging.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/MinimalFormatter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/Remote.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/debug\/GitMlRules.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/debug\/IssueRedecorate.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -111,1 +111,4 @@\n-        var rules = skaraRemoteRepo.fileContents(\"config\/mailinglist\/rules\/jdk.json\", Branch.defaultFor(VCS.GIT).name());\n+        var rules = skaraRemoteRepo\n+                .fileContents(\"config\/mailinglist\/rules\/jdk.json\", Branch.defaultFor(VCS.GIT).name())\n+                .orElseThrow(() -> new RuntimeException(\"Could not find config\/mailinglist\/rules\/jdk.json on ref \"\n+                        + Branch.defaultFor(VCS.GIT).name() + \" in repo \" + skaraRemoteRepo.name()));\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/pr\/GitPrCreate.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/pr\/Utils.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"email\/src\/main\/java\/org\/openjdk\/skara\/email\/Email.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"email\/src\/main\/java\/org\/openjdk\/skara\/email\/MimeText.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"email\/src\/main\/java\/org\/openjdk\/skara\/email\/SMTP.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"email\/src\/test\/java\/org\/openjdk\/skara\/email\/MimeTextTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"email\/src\/test\/java\/org\/openjdk\/skara\/email\/SMTPTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/Check.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/CheckBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/CheckStatus.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,11 @@\n-    Optional<HostedCommit> search(Hash hash);\n+\n+    \/**\n+     * Search the whole host for a commit by hash.\n+     * @param hash Hash to search for\n+     * @param includeDiffs Set to true to include parent diffs in Commit, default false\n+     * @return Commit instance if found, otherwise empty\n+     *\/\n+    Optional<HostedCommit> search(Hash hash, boolean includeDiffs);\n+    default Optional<HostedCommit> search(Hash hash) {\n+        return search(hash, false);\n+    }\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/Forge.java","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import java.time.Duration;\n@@ -85,1 +86,17 @@\n-    String fileContents(String filename, String ref);\n+\n+    \/**\n+     * Returns contents of the file, if the file does not exist, returns Optional.empty().\n+     *\/\n+    Optional<String> fileContents(String filename, String ref);\n+\n+    \/**\n+     * Writes new contents to a file in the repo by creating a new commit.\n+     *\n+     * @param filename    Name of file inside repository to write to\n+     * @param content     New file content to write, always replacing existing content\n+     * @param branch      Branch to add commit on top of\n+     * @param message     Commit message\n+     * @param authorName  Name of author and committer for commit\n+     * @param authorEmail Email of author and committer for commit\n+     *\/\n+    void writeFileContents(String filename, String content, Branch branch, String message, String authorName, String authorEmail);\n@@ -92,0 +109,14 @@\n+\n+    \/**\n+     * Adds a branch protection rule based on a branch pattern. The rule prevents\n+     * normal users from pushing to the branch, but still allows admins to force\n+     * push.\n+     * @param pattern Pattern for branches\n+     *\/\n+    void protectBranchPattern(String pattern);\n+\n+    \/**\n+     * Removes a branch protection rule based on the branch pattern.\n+     * @param pattern Pattern for branches\n+     *\/\n+    void unprotectBranchPattern(String pattern);\n@@ -95,1 +126,1 @@\n-        return recentCommitComments(Map.of(), Set.of());\n+        return recentCommitComments(null, Set.of(), null, ZonedDateTime.now().minus(Duration.ofDays(4)));\n@@ -97,1 +128,13 @@\n-    List<CommitComment> recentCommitComments(Map<String, Set<Hash>> commitTitleToCommits, Set<Integer> excludeAuthors);\n+\n+    \/**\n+     * Fetch recent commit comments from the forge.\n+     * @param localRepo Only needed for certain implementations. Needs to be a\n+     *                  reasonably up-to-date clone of this repository\n+     * @param excludeAuthors Set of authors to exclude from the results\n+     * @param Branches Optional list of branches to limit the search to if\n+     *                 supported by the implementation.\n+     * @param updatedAfter Filter out comments older than this\n+     * @return A list of CommitComments\n+     *\/\n+    List<CommitComment> recentCommitComments(ReadOnlyRepository localRepo, Set<Integer> excludeAuthors,\n+            List<Branch> Branches, ZonedDateTime updatedAfter);\n@@ -100,1 +143,12 @@\n-    Optional<HostedCommit> commit(Hash hash);\n+\n+    \/**\n+     * Gets a Commit instance for a given hash, if present.\n+     * @param hash Hash to get Commit for\n+     * @param includeDiffs Set to true to include parent diffs in Commit, default false\n+     * @return Commit instance for the hash in this repository, empty if not\n+     * found.\n+     *\/\n+    Optional<HostedCommit> commit(Hash hash, boolean includeDiffs);\n+    default Optional<HostedCommit> commit(Hash hash) {\n+        return commit(hash, false);\n+    }\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/HostedRepository.java","additions":58,"deletions":4,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/HostedRepositoryPool.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,1 +49,2 @@\n-        var contents = repository.fileContents(filename, ref);\n+        var contents = repository.fileContents(filename, ref)\n+                .orElseThrow(() -> new RuntimeException(\"Could not find \" + filename + \" on ref \" + ref + \" in repo \" + repository.name()));\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/LabelConfigurationHostedRepository.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -112,1 +112,3 @@\n-        var jsonText = repository.fileContents(filename, ref);\n+        var jsonText = repository.fileContents(filename, ref).orElseThrow(() ->\n+                new RuntimeException(\"Could not find \" + filename + \" on ref \" + ref + \" in repo\" + repository.name())\n+        );\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/LabelConfigurationJson.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -166,0 +166,10 @@\n+    \/**\n+     * Return the last time the pull request was converted to draft.\n+     * If the pull request was created as draft, return the created time of the pull request.\n+     * If the pull request was always ready for review and never converted to draft, return empty.\n+     * If the restful api doesn't support draft pull request, return empty.\n+     * Note: if the pull request was created as draft, but later converted to ready\n+     *  and didn't convert to draft again, this method will return empty.\n+     *\/\n+    Optional<ZonedDateTime> lastMarkedAsDraftTime();\n+\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/PullRequest.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,22 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/PullRequestPoller.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/PullRequestUpdateCache.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,22 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/ReferenceChange.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/Review.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/ReviewComment.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubApplication.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubForgeFactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -276,1 +276,1 @@\n-        } catch (IOException e) {\n+        } catch (IOException | UncheckedRestException e) {\n@@ -393,1 +393,1 @@\n-    public Optional<HostedCommit> search(Hash hash) {\n+    public Optional<HostedCommit> search(Hash hash, boolean includeDiffs) {\n@@ -410,1 +410,1 @@\n-        return shortestName.flatMap(this::repository).flatMap(r -> r.commit(hash));\n+        return shortestName.flatMap(this::repository).flatMap(r -> r.commit(hash, includeDiffs));\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubHost.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -147,0 +147,2 @@\n+                \/\/ This is a single point graphql query so shouldn't need to be limited to once a second\n+                .skipLimiter(true)\n@@ -704,0 +706,14 @@\n+    @Override\n+    public Optional<ZonedDateTime> lastMarkedAsDraftTime() {\n+        var lastMarkedAsDraftTime = request.get(\"issues\/\" + json.get(\"number\").toString() + \"\/timeline\")                .execute().stream()\n+                .map(JSONValue::asObject)\n+                .filter(obj -> obj.contains(\"event\"))\n+                .filter(obj -> obj.get(\"event\").asString().equals(\"convert_to_draft\"))\n+                .map(obj -> ZonedDateTime.parse(obj.get(\"created_at\").asString()))\n+                .max(ZonedDateTime::compareTo);\n+        if (lastMarkedAsDraftTime.isEmpty() && isDraft()) {\n+            return Optional.of(createdAt());\n+        }\n+        return lastMarkedAsDraftTime;\n+    }\n+\n@@ -756,1 +772,1 @@\n-                      .reduce((a, b) -> b)\n+                      .max(Comparator.comparing(o -> ZonedDateTime.parse(o.get(\"created_at\").asString())))\n@@ -776,2 +792,2 @@\n-                .reduce((a, b) -> b)\n-                .map(obj -> ZonedDateTime.parse(obj.get(\"created_at\").asString()));\n+                .map(obj -> ZonedDateTime.parse(obj.get(\"created_at\").asString()))\n+                .max(Comparator.naturalOrder());\n@@ -807,1 +823,0 @@\n-                .reduce((a, b) -> b)\n@@ -809,0 +824,1 @@\n+                .max(ZonedDateTime::compareTo)\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubPullRequest.java","additions":21,"deletions":5,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -25,0 +25,2 @@\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n@@ -66,5 +68,1 @@\n-                \"Accept\", \"application\/vnd.github.machine-man-preview+json\",\n-                \"Accept\", \"application\/vnd.github.antiope-preview+json\",\n-                \"Accept\", \"application\/vnd.github.shadow-cat-preview+json\",\n-                \"Accept\", \"application\/vnd.github.comfort-fade-preview+json\",\n-                \"Accept\", \"application\/vnd.github.mockingbird-preview+json\"));\n+                \"X-GitHub-Api-Version\", \"2022-11-28\"));\n@@ -264,8 +262,44 @@\n-    public String fileContents(String filename, String ref) {\n-        var conf = request.get(\"contents\/\" + filename)\n-                          .param(\"ref\", ref)\n-                          .execute().asObject();\n-        \/\/ Content may contain newline characters\n-        return conf.get(\"content\").asString().lines()\n-                   .map(line -> new String(Base64.getDecoder().decode(line), StandardCharsets.UTF_8))\n-                   .collect(Collectors.joining());\n+    public Optional<String> fileContents(String filename, String ref) {\n+        \/\/ Get file contents using raw format. This allows us to get files of\n+        \/\/ size up to 100MB (up from 1MB if getting in object from).\n+        try {\n+            var content = request.get(\"contents\/\" + filename)\n+                    .param(\"ref\", ref)\n+                    .header(\"Accept\", \"application\/vnd.github.raw+json\")\n+                    .executeUnparsed();\n+            return Optional.of(content);\n+        } catch (UncheckedRestException e) {\n+            \/\/ The onError handler is not used with executeUnparsed, so have to\n+            \/\/ resort to catching exception for 404 handling.\n+            if (e.getStatusCode() == 404) {\n+                return Optional.empty();\n+            } else {\n+                throw e;\n+            }\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void writeFileContents(String filename, String content, Branch branch, String message, String authorName, String authorEmail) {\n+        var body = JSON.object()\n+                .put(\"message\", message)\n+                .put(\"branch\", branch.name())\n+                .put(\"committer\", JSON.object()\n+                        .put(\"name\", authorName)\n+                        .put(\"email\", authorEmail))\n+                .put(\"content\", new String(Base64.getEncoder().encode(content.getBytes(StandardCharsets.UTF_8)), StandardCharsets.UTF_8));\n+\n+        \/\/ If the file exists, we have to supply the current sha with the update request.\n+        var curentFileData = request.get(\"contents\/\" + filename)\n+                .param(\"ref\", branch.name())\n+                .onError(r -> r.statusCode() == 404 ? Optional.of(JSON.object().put(\"NOT_FOUND\", true)) : Optional.empty())\n+                .execute();\n+        if (curentFileData.contains(\"sha\")) {\n+            body.put(\"sha\", curentFileData.get(\"sha\").asString());\n+        }\n+\n+        request.put(\"contents\/\" + filename)\n+                .body(body)\n+                .execute();\n@@ -315,0 +349,12 @@\n+    @Override\n+    public void protectBranchPattern(String pattern) {\n+        \/\/ This could be implemented using GraphQL, but we currently don't need it for GitHub\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public void unprotectBranchPattern(String pattern) {\n+        \/\/ This could be implemented using GraphQL, but we currently don't need it for GitHub\n+        throw new UnsupportedOperationException();\n+    }\n+\n@@ -345,1 +391,2 @@\n-    public List<CommitComment> recentCommitComments(Map<String, Set<Hash>> commitTitleToCommits, Set<Integer> excludeAuthors) {\n+    public List<CommitComment> recentCommitComments(ReadOnlyRepository unused, Set<Integer> excludeAuthors,\n+            List<Branch> branches, ZonedDateTime updatedAfter) {\n@@ -379,0 +426,2 @@\n+                             \/\/ This is a single point graphql query so shouldn't need to be limited to once a second\n+                             .skipLimiter(true)\n@@ -408,0 +457,4 @@\n+                           \/\/ It's not possible to filter on timestamp in the GraphQL API, but we\n+                           \/\/ can at least filter here to limit the amount of data returned to the\n+                           \/\/ caller.\n+                           .filter(c -> c.updatedAt().isAfter(updatedAfter))\n@@ -489,6 +542,15 @@\n-    public Optional<HostedCommit> commit(Hash hash) {\n-        \/\/ Need to specify an explicit per_page < 70 to guarantee that we get patch information in the result set.\n-        var o = request.get(\"commits\/\" + hash.hex())\n-                       .param(\"per_page\", \"50\")\n-                       .onError(r -> Optional.of(JSON.of()))\n-                       .execute();\n+    public Optional<HostedCommit> commit(Hash hash, boolean includeDiffs) {\n+        var queryBuilder = request.get(\"commits\/\" + hash.hex())\n+                .onError(r -> Optional.of(JSON.of()));\n+        if (includeDiffs) {\n+            \/\/ Need to specify an explicit per_page < 70 to guarantee that we get patch information in the result set.\n+            queryBuilder.param(\"per_page\", \"50\");\n+        } else {\n+            \/\/ Minimize size of response when diffs aren't needed.\n+            queryBuilder\n+                    .param(\"per_page\", \"1\")\n+                    .maxPages(1);\n+        }\n+\n+        var o = queryBuilder.execute();\n+\n@@ -500,2 +562,7 @@\n-        var diffs = toDiff(metadata.parents().get(0), hash, o.get(\"files\"));\n-        return Optional.of(new HostedCommit(metadata, List.of(diffs), URI.create(o.get(\"html_url\").asString())));\n+        List<Diff> diffs;\n+        if (includeDiffs) {\n+            diffs = List.of(toDiff(metadata.parents().get(0), hash, o.get(\"files\")));\n+        } else {\n+            diffs = List.of();\n+        }\n+        return Optional.of(new HostedCommit(metadata, diffs, URI.create(o.get(\"html_url\").asString())));\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubRepository.java","additions":89,"deletions":22,"binary":false,"changes":111,"status":"modified"},{"patch":"@@ -224,1 +224,1 @@\n-    public Optional<HostedCommit> search(Hash hash) {\n+    public Optional<HostedCommit> search(Hash hash, boolean includeDiffs) {\n@@ -239,1 +239,1 @@\n-                var commit = project.commit(hash);\n+                var commit = project.commit(hash, includeDiffs);\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabHost.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -85,7 +85,1 @@\n-        var username = json.get(\"author\").get(\"username\").asString();\n-        var author = repository.forge().user(username);\n-        if (author.isPresent()) {\n-            return author.get();\n-        } else {\n-            throw new RuntimeException(\"Author of GitLab merge request unknown: \" + username + \"(maybe the user is inactive)\");\n-        }\n+        return host.parseAuthorField(json);\n@@ -637,1 +631,1 @@\n-        return json.get(\"work_in_progress\").asBoolean();\n+        return json.get(\"draft\").asBoolean();\n@@ -778,1 +772,1 @@\n-        var draftPrefix = \"WIP:\";\n+        var draftPrefix = \"Draft:\";\n@@ -784,0 +778,16 @@\n+    @Override\n+    public Optional<ZonedDateTime> lastMarkedAsDraftTime() {\n+        var draftMessage = \"marked this merge request as **draft**\";\n+        var notes = request.get(\"notes\").execute();\n+        var lastMarkedAsDraftTime = notes.stream()\n+                .map(JSONValue::asObject)\n+                .filter(obj -> obj.get(\"system\").asBoolean())\n+                .filter(obj -> draftMessage.equals(obj.get(\"body\").asString()))\n+                .map(obj -> ZonedDateTime.parse(obj.get(\"created_at\").asString()))\n+                .max(ZonedDateTime::compareTo);\n+        if (lastMarkedAsDraftTime.isEmpty() && isDraft()) {\n+            return Optional.of(createdAt());\n+        }\n+        return lastMarkedAsDraftTime;\n+    }\n+\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabMergeRequest.java","additions":20,"deletions":10,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -25,0 +25,2 @@\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n@@ -115,1 +117,1 @@\n-                        .body(\"title\", draft ? \"WIP: \" : \"\" + title)\n+                        .body(\"title\", (draft ? \"Draft: \" : \"\") + title)\n@@ -289,15 +291,50 @@\n-    public String fileContents(String filename, String ref) {\n-        var confName = URLEncoder.encode(filename, StandardCharsets.UTF_8);\n-        var conf = request.get(\"repository\/files\/\" + confName)\n-                          .param(\"ref\", ref)\n-                          .onError(response -> {\n-                              log.warning(\"First time request returned bad status: \" + response.statusCode());\n-                              log.info(\"First time response body: \" + response.body());\n-                              \/\/ Retry once with additional escaping of the path fragment\n-                              var escapedConfName = URLEncoder.encode(confName, StandardCharsets.UTF_8);\n-                              return Optional.of(request.get(\"repository\/files\/\" + escapedConfName)\n-                                            .param(\"ref\", ref).execute());\n-                          })\n-                          .execute();\n-        var content = Base64.getDecoder().decode(conf.get(\"content\").asString());\n-        return new String(content, StandardCharsets.UTF_8);\n+    public Optional<String> fileContents(String filename, String ref) {\n+        var encodedFileName = URLEncoder.encode(filename, StandardCharsets.UTF_8);\n+        var content = request.get(\"repository\/files\/\" + encodedFileName)\n+                .param(\"ref\", ref)\n+                .onError(response -> {\n+                    \/\/ Retry once with additional escaping of the path fragment\n+                    \/\/ Only retry when the error is exactly \"File Not Found\"\n+                    if (response.statusCode() == 404 && JSON.parse(response.body()).get(\"message\").asString().endsWith(\"File Not Found\")) {\n+                        log.warning(\"First time request returned bad status: \" + response.statusCode());\n+                        log.info(\"First time response body: \" + response.body());\n+                        var doubleEncodedFileName = URLEncoder.encode(encodedFileName, StandardCharsets.UTF_8);\n+                        return Optional.of(request.get(\"repository\/files\/\" + doubleEncodedFileName)\n+                                .param(\"ref\", ref)\n+                                .onError(r -> r.statusCode() == 404 && JSON.parse(r.body()).get(\"message\").asString().endsWith(\"File Not Found\") ?\n+                                        Optional.of(JSON.object().put(\"NOT_FOUND\", true)) : Optional.empty())\n+                                .execute());\n+                    }\n+                    return Optional.empty();\n+                })\n+                .execute();\n+        if (content.contains(\"NOT_FOUND\")) {\n+            return Optional.empty();\n+        }\n+        var decodedContent = Base64.getDecoder().decode(content.get(\"content\").asString());\n+        return Optional.of(new String(decodedContent, StandardCharsets.UTF_8));\n+    }\n+\n+    @Override\n+    public void writeFileContents(String filename, String content, Branch branch, String message, String authorName, String authorEmail) {\n+        var encodedFileName = URLEncoder.encode(filename, StandardCharsets.UTF_8);\n+        var body = JSON.object()\n+                .put(\"commit_message\", message)\n+                .put(\"branch\", branch.name())\n+                .put(\"author_name\", authorName)\n+                .put(\"author_email\", authorEmail)\n+                .put(\"encoding\", \"base64\")\n+                .put(\"content\", new String(Base64.getEncoder().encode(content.getBytes(StandardCharsets.UTF_8)), StandardCharsets.UTF_8));\n+        request.put(\"repository\/files\/\" + encodedFileName)\n+                .body(body)\n+                .onError(response -> {\n+                    \/\/ Gitlab requires POST for creating new files and PUT for updating existing.\n+                    \/\/ Retry with POST if we get 400 response.\n+                    if (response.statusCode() == 400) {\n+                        return Optional.of(request.post(\"repository\/files\/\" + encodedFileName)\n+                                .body(body)\n+                                .execute());\n+                    }\n+                    return Optional.empty();\n+                })\n+                .execute();\n@@ -375,1 +412,1 @@\n-        var branch = request.get(\"repository\/branches\/\" + ref)\n+        var branch = request.get(\"repository\/branches\/\" + URLEncoder.encode(ref, StandardCharsets.US_ASCII))\n@@ -393,0 +430,24 @@\n+    @Override\n+    public void protectBranchPattern(String pattern) {\n+        var body = JSON.object()\n+                .put(\"name\", pattern)\n+                .put(\"allow_force_push\", true);\n+        var existing = request.get(\"protected_branches\/\" + URLEncoder.encode(pattern, StandardCharsets.US_ASCII))\n+                .onError(r -> r.statusCode() == 404 ? Optional.of(JSON.of()) : Optional.empty())\n+                .execute();\n+        \/\/ Only add protection if it doesn't already exist.\n+        if (existing.isNull()) {\n+            request.post(\"protected_branches\")\n+                    .body(body)\n+                    .execute();\n+        }\n+    }\n+\n+    @Override\n+    public void unprotectBranchPattern(String pattern) {\n+        request.delete(\"protected_branches\/\" + URLEncoder.encode(pattern, StandardCharsets.US_ASCII))\n+                .header(\"Content-Type\", \"application\/json\")\n+                .onError(r -> r.statusCode() == 404 ? Optional.of(JSON.of()) : Optional.empty())\n+                .execute();\n+    }\n+\n@@ -396,1 +457,2 @@\n-               .execute();\n+                .header(\"Content-Type\", \"application\/json\")\n+                .execute();\n@@ -468,0 +530,5 @@\n+    \/**\n+     * The localRepo is needed to build a map of commit title to commit hash mappings,\n+     * which in turn is needed to identify commits form the GitLab notes objects. The\n+     * notes only has the commit titles, not the hashes.\n+     *\/\n@@ -469,2 +536,6 @@\n-    public List<CommitComment> recentCommitComments(Map<String, Set<Hash>> commitTitleToCommits, Set<Integer> excludeAuthors) {\n-        var fourDaysAgo = ZonedDateTime.now().minusDays(4);\n+    public List<CommitComment> recentCommitComments(ReadOnlyRepository localRepo, Set<Integer> excludeAuthors,\n+            List<Branch> branches, ZonedDateTime updatedAfter) {\n+        if (localRepo == null) {\n+            throw new NullPointerException(\"localRepo cannot be null in GitLabMergeRequest\");\n+        }\n+\n@@ -473,1 +544,1 @@\n-                      .param(\"after\", fourDaysAgo.format(formatter))\n+                      .param(\"after\", updatedAfter.format(formatter))\n@@ -485,1 +556,1 @@\n-                      .collect(Collectors.toList());\n+                      .toList();\n@@ -487,13 +558,2 @@\n-        \/\/ Fetch eventual new commits\n-        var commits = request.get(\"repository\/commits\")\n-                             .param(\"since\", ZonedDateTime.now().minusHours(1).format(DateTimeFormatter.ISO_DATE_TIME))\n-                             .execute()\n-                             .asArray();\n-        for (var commit : commits) {\n-            var hash = new Hash(commit.get(\"id\").asString());\n-            var title = commit.get(\"title\").asString();\n-            if (commitTitleToCommits.containsKey(title)) {\n-                commitTitleToCommits.get(title).add(hash);\n-            } else {\n-                commitTitleToCommits.put(title, Set.of(hash));\n-            }\n+        if (notes.isEmpty()) {\n+            return List.of();\n@@ -502,0 +562,2 @@\n+        var commitTitleToCommits = getCommitTitleToCommitsMap(localRepo, branches);\n+\n@@ -514,1 +576,41 @@\n-                    .collect(Collectors.toList());\n+                    .toList();\n+    }\n+\n+    \/**\n+     * Lazy fetching and caching of the commitTitleToCommits map. The first time\n+     * this is called, the full map is built from the local repository. After that\n+     * it's just refreshed from the server.\n+     *\/\n+    private final Map<String, Set<Hash>> commitTitleToCommits = new HashMap<>();\n+    private boolean commitTitleToCommitsInitialized = false;\n+    private ZonedDateTime lastCommitTime = ZonedDateTime.ofInstant(Instant.EPOCH, ZoneId.systemDefault());\n+    private Map<String, Set<Hash>> getCommitTitleToCommitsMap(ReadOnlyRepository localRepo, List<Branch> branches) {\n+        if (!commitTitleToCommitsInitialized) {\n+            try {\n+                for (var commit : localRepo.commitMetadataFor(branches)) {\n+                    var title = commit.message().stream().findFirst().orElse(\"\");\n+                    commitTitleToCommits.computeIfAbsent(title, t -> new LinkedHashSet<>()).add(commit.hash());\n+                    if (lastCommitTime.isBefore(commit.authored())) {\n+                        lastCommitTime = commit.authored();\n+                    }\n+                }\n+            } catch (IOException e) {\n+                throw new UncheckedIOException(e);\n+            }\n+            commitTitleToCommitsInitialized = true;\n+        }\n+        \/\/ Fetch eventual new commits\n+        var commits = request.get(\"repository\/commits\")\n+                .param(\"since\", lastCommitTime.format(DateTimeFormatter.ISO_DATE_TIME))\n+                .execute()\n+                .asArray();\n+        for (var commit : commits) {\n+            var hash = new Hash(commit.get(\"id\").asString());\n+            var title = commit.get(\"title\").asString();\n+            commitTitleToCommits.computeIfAbsent(title, t -> new LinkedHashSet<>()).add(hash);\n+            var authored = ZonedDateTime.parse(commit.get(\"authored_date\").asString());\n+            if (lastCommitTime.isBefore(authored)) {\n+                lastCommitTime = authored;\n+            }\n+        }\n+        return commitTitleToCommits;\n@@ -593,1 +695,1 @@\n-    public Optional<HostedCommit> commit(Hash hash) {\n+    public Optional<HostedCommit> commit(Hash hash, boolean includeDiffs) {\n@@ -602,6 +704,9 @@\n-        var diff = request.get(\"repository\/commits\/\" + hash.hex() + \"\/diff\")\n-                          .onError(r -> Optional.of(JSON.of()))\n-                          .execute();\n-        var parentDiffs = new ArrayList<Diff>();\n-        if (!diff.isNull()) {\n-            parentDiffs.add(toDiff(metadata.parents().get(0), hash, diff));\n+\n+        List<Diff> diffs = List.of();\n+        if (includeDiffs) {\n+            var diff = request.get(\"repository\/commits\/\" + hash.hex() + \"\/diff\")\n+                    .onError(r -> Optional.of(JSON.of()))\n+                    .execute();\n+            if (!diff.isNull()) {\n+                diffs = List.of(toDiff(metadata.parents().get(0), hash, diff));\n+            }\n@@ -609,1 +714,1 @@\n-        return Optional.of(new HostedCommit(metadata, parentDiffs, url));\n+        return Optional.of(new HostedCommit(metadata, diffs, url));\n@@ -661,1 +766,1 @@\n-        var accessLevel = request.get(\"members\/\" + user.id())\n+        var accessLevel = request.get(\"members\/all\/\" + user.id())\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabRepository.java","additions":150,"deletions":45,"binary":false,"changes":195,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"forge\/src\/test\/java\/org\/openjdk\/skara\/forge\/CheckBuilderTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"forge\/src\/test\/java\/org\/openjdk\/skara\/forge\/ForgeTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"forge\/src\/test\/java\/org\/openjdk\/skara\/forge\/HostedRepositoryPoolTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,22 @@\n+\/*\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n","filename":"forge\/src\/test\/java\/org\/openjdk\/skara\/forge\/ManualForgeTests.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -0,0 +1,22 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n","filename":"forge\/src\/test\/java\/org\/openjdk\/skara\/forge\/PullRequestPollerTests.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -0,0 +1,22 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n","filename":"forge\/src\/test\/java\/org\/openjdk\/skara\/forge\/PullRequestTests.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"forge\/src\/test\/java\/org\/openjdk\/skara\/forge\/github\/GitHubHostTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,1 @@\n+import java.util.Properties;\n@@ -33,0 +34,1 @@\n+import org.openjdk.skara.vcs.Branch;\n@@ -52,0 +54,1 @@\n+    private Properties settings;\n@@ -56,1 +59,1 @@\n-        var settings = ManualTestSettings.loadManualTestSettings();\n+        settings = ManualTestSettings.loadManualTestSettings();\n@@ -163,0 +166,68 @@\n+\n+    @Test\n+    void fileContentsNonExisting() {\n+        var gitHubRepo = githubHost.repository(settings.getProperty(\"github.repository\")).orElseThrow();\n+        var branch = new Branch(settings.getProperty(\"github.repository.branch\"));\n+        var fileName = \"testfile-that-does-not-exist.txt\";\n+        var returnedContents = gitHubRepo.fileContents(fileName, branch.name());\n+        assertTrue(returnedContents.isEmpty());\n+    }\n+\n+    @Test\n+    void writeFileContents() {\n+        var gitHubRepo = githubHost.repository(settings.getProperty(\"github.repository\")).orElseThrow();\n+        var branch = new Branch(settings.getProperty(\"github.repository.branch\"));\n+\n+        var fileName = \"testfile.txt\";\n+\n+        \/\/ Create new file\n+        {\n+            var fileContent = \"File content\";\n+            gitHubRepo.writeFileContents(fileName, fileContent, branch,\n+                    \"First commit message\", \"Duke\", \"duke@openjdk.org\");\n+            var returnedContents = gitHubRepo.fileContents(fileName, branch.name());\n+            assertEquals(fileContent, returnedContents.orElseThrow());\n+        }\n+\n+        \/\/ Update file\n+        {\n+            var fileContent = \"New file content\";\n+            gitHubRepo.writeFileContents(fileName, fileContent, branch,\n+                    \"Second commit message\", \"Duke\", \"duke@openjdk.org\");\n+            var returnedContents = gitHubRepo.fileContents(fileName, branch.name());\n+            assertEquals(fileContent, returnedContents.orElseThrow());\n+        }\n+\n+        \/\/ Make the file huge\n+        {\n+            var fileContent = \"a\".repeat(1024 * 1024 * 10);\n+            gitHubRepo.writeFileContents(fileName, fileContent, branch,\n+                    \"Third commit message\", \"Duke\", \"duke@openjdk.org\");\n+            var returnedContents = gitHubRepo.fileContents(fileName, branch.name());\n+            assertTrue(returnedContents.isPresent());\n+            assertEquals(fileContent.length(), returnedContents.get().length());\n+            assertTrue(fileContent.equals(returnedContents.get()),\n+                    \"Diff for huge file contents, printing first 50 chars of each '\"\n+                    + fileContent.substring(0, 50) + \"' '\" + returnedContents.get().substring(0, 50) + \"'\");\n+        }\n+    }\n+\n+    @Test\n+    void testLastMarkedAsDraftTime() {\n+        var githubRepoOpt = githubHost.repository(\"openjdk\/playground\");\n+        assumeTrue(githubRepoOpt.isPresent());\n+        var githubRepo = githubRepoOpt.get();\n+        var pr = githubRepo.pullRequest(\"129\");\n+        var lastMarkedAsDraftTime = pr.lastMarkedAsDraftTime();\n+        assertEquals(\"2023-02-11T11:51:12Z\", lastMarkedAsDraftTime.get().toString());\n+    }\n+\n+    @Test\n+    void testClosedBy() {\n+        var githubRepoOpt = githubHost.repository(\"openjdk\/playground\");\n+        assumeTrue(githubRepoOpt.isPresent());\n+        var githubRepo = githubRepoOpt.get();\n+        var pr = githubRepo.pullRequest(\"96\");\n+        var user = pr.closedBy();\n+        assertEquals(\"lgxbslgx\", user.get().username());\n+    }\n","filename":"forge\/src\/test\/java\/org\/openjdk\/skara\/forge\/github\/GitHubRestApiTests.java","additions":73,"deletions":2,"binary":false,"changes":75,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,2 @@\n+import org.openjdk.skara.test.TemporaryDirectory;\n+import org.openjdk.skara.vcs.Branch;\n@@ -34,0 +36,1 @@\n+import java.util.List;\n@@ -35,0 +38,1 @@\n+import org.openjdk.skara.vcs.git.GitRepository;\n@@ -36,2 +40,1 @@\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -132,0 +135,122 @@\n+\n+    @Test\n+    void fileContentsNonExisting() throws IOException {\n+        var settings = ManualTestSettings.loadManualTestSettings();\n+        var username = settings.getProperty(\"gitlab.user\");\n+        var token = settings.getProperty(\"gitlab.pat\");\n+        var credential = new Credential(username, token);\n+        var uri = URIBuilder.base(settings.getProperty(\"gitlab.uri\")).build();\n+        var gitLabHost = new GitLabHost(\"gitlab\", uri, false, credential, Set.of());\n+        var gitLabRepo = gitLabHost.repository(settings.getProperty(\"gitlab.repository\")).orElseThrow();\n+        var branch = new Branch(settings.getProperty(\"gitlab.repository.branch\"));\n+\n+        var fileName = \"testfile-that-does-not-exist.txt\";\n+        var returnedContents = gitLabRepo.fileContents(fileName, branch.name());\n+        assertTrue(returnedContents.isEmpty());\n+    }\n+\n+    @Test\n+    void writeFileContents() throws IOException {\n+        var settings = ManualTestSettings.loadManualTestSettings();\n+        var username = settings.getProperty(\"gitlab.user\");\n+        var token = settings.getProperty(\"gitlab.pat\");\n+        var credential = new Credential(username, token);\n+        var uri = URIBuilder.base(settings.getProperty(\"gitlab.uri\")).build();\n+        var gitLabHost = new GitLabHost(\"gitlab\", uri, false, credential, Set.of());\n+        var gitLabRepo = gitLabHost.repository(settings.getProperty(\"gitlab.repository\")).orElseThrow();\n+        var branch = new Branch(settings.getProperty(\"gitlab.repository.branch\"));\n+\n+        var fileName = \"testfile.txt\";\n+\n+        \/\/ Create new file\n+        {\n+            var fileContent = \"File content\";\n+            gitLabRepo.writeFileContents(fileName, fileContent, branch,\n+                    \"First commit message\", \"Duke\", \"duke@openjdk.org\");\n+            var returnedContents = gitLabRepo.fileContents(fileName, branch.name());\n+            assertEquals(fileContent, returnedContents.orElseThrow());\n+        }\n+\n+        \/\/ Update file\n+        {\n+            var fileContent = \"New file content\";\n+            gitLabRepo.writeFileContents(fileName, fileContent, branch,\n+                    \"Second commit message\", \"Duke\", \"duke@openjdk.org\");\n+            var returnedContents = gitLabRepo.fileContents(fileName, branch.name());\n+            assertEquals(fileContent, returnedContents.orElseThrow());\n+        }\n+\n+        \/\/ Make the file huge\n+        {\n+            var fileContent = \"a\".repeat(1024 * 1024 * 10);\n+            gitLabRepo.writeFileContents(fileName, fileContent, branch,\n+                    \"Third commit message\", \"Duke\", \"duke@openjdk.org\");\n+            var returnedContents = gitLabRepo.fileContents(fileName, branch.name());\n+            assertEquals(fileContent, returnedContents.orElseThrow());\n+        }\n+    }\n+\n+    @Test\n+    void branchProtection() throws IOException {\n+        var settings = ManualTestSettings.loadManualTestSettings();\n+        var username = settings.getProperty(\"gitlab.user\");\n+        var token = settings.getProperty(\"gitlab.pat\");\n+        var credential = new Credential(username, token);\n+        var uri = URIBuilder.base(settings.getProperty(\"gitlab.uri\")).build();\n+        var gitLabHost = new GitLabHost(\"gitlab\", uri, false, credential, Set.of());\n+        var gitLabRepo = gitLabHost.repository(settings.getProperty(\"gitlab.repository\")).orElseThrow();\n+        var branchName = \"pr\/4711\";\n+\n+        gitLabRepo.protectBranchPattern(branchName);\n+        \/\/ Don't fail on repeated invocations\n+        gitLabRepo.protectBranchPattern(branchName);\n+\n+        try (var tempDir = new TemporaryDirectory()) {\n+            var localRepoDir = tempDir.path().resolve(\"local\");\n+            var localRepo = GitRepository.clone(gitLabRepo.url(), localRepoDir, false, null);\n+            var head = localRepo.head();\n+            localRepo.push(head, gitLabRepo.url(), branchName, true);\n+\n+            gitLabRepo.unprotectBranchPattern(branchName);\n+            \/\/ Don't fail on repeated invocations\n+            gitLabRepo.unprotectBranchPattern(branchName);\n+\n+            gitLabRepo.deleteBranch(branchName);\n+        }\n+    }\n+\n+    @Test\n+    void testLastMarkedAsDraftTime() throws IOException {\n+        var settings = ManualTestSettings.loadManualTestSettings();\n+        var username = settings.getProperty(\"gitlab.user\");\n+        var token = settings.getProperty(\"gitlab.pat\");\n+        var credential = new Credential(username, token);\n+        var uri = URIBuilder.base(settings.getProperty(\"gitlab.uri\")).build();\n+        var gitLabHost = new GitLabHost(\"gitlab\", uri, false, credential, Set.of());\n+        var gitLabRepo = gitLabHost.repository(settings.getProperty(\"gitlab.repository\")).orElseThrow();\n+        var gitLabMergeRequest = gitLabRepo.pullRequest(settings.getProperty(\"gitlab.merge.request.id\"));\n+\n+        var lastMarkedAsDraftTime = gitLabMergeRequest.lastMarkedAsDraftTime();\n+        assertEquals(\"2023-02-11T08:43:52.408Z\", lastMarkedAsDraftTime.get().toString());\n+    }\n+\n+    @Test\n+    void testDraftMR() throws IOException {\n+        var settings = ManualTestSettings.loadManualTestSettings();\n+        var username = settings.getProperty(\"gitlab.user\");\n+        var token = settings.getProperty(\"gitlab.pat\");\n+        var credential = new Credential(username, token);\n+        var uri = URIBuilder.base(settings.getProperty(\"gitlab.uri\")).build();\n+        var gitLabHost = new GitLabHost(\"gitlab\", uri, false, credential, Set.of());\n+        var gitLabRepo = gitLabHost.repository(settings.getProperty(\"gitlab.repository\")).orElseThrow();\n+\n+        var gitLabMergeRequest = gitLabRepo.createPullRequest(gitLabRepo, settings.getProperty(\"gitlab.targetRef\"),\n+                settings.getProperty(\"gitlab.sourceRef\"), \"Test\", List.of(\"test\"), true);\n+        assertTrue(gitLabMergeRequest.isDraft());\n+        assertEquals(\"Draft: Test\", gitLabMergeRequest.title());\n+\n+        gitLabMergeRequest.makeNotDraft();\n+        gitLabMergeRequest = gitLabRepo.pullRequest(gitLabMergeRequest.id());\n+        assertFalse(gitLabMergeRequest.isDraft());\n+        assertEquals(\"Test\", gitLabMergeRequest.title());\n+    }\n","filename":"forge\/src\/test\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabRestApiTest.java","additions":128,"deletions":3,"binary":false,"changes":131,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"gradle\/plugins\/skara-images\/build.gradle","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"gradle\/plugins\/skara-images\/src\/main\/java\/org\/openjdk\/skara\/gradle\/images\/DownloadJDKTask.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"gradle\/plugins\/skara-images\/src\/main\/java\/org\/openjdk\/skara\/gradle\/images\/ImagesPlugin.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"gradle\/plugins\/skara-images\/src\/main\/java\/org\/openjdk\/skara\/gradle\/images\/LaunchersTask.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"gradle\/plugins\/skara-images\/src\/main\/java\/org\/openjdk\/skara\/gradle\/images\/LinkTask.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"gradle\/plugins\/skara-module\/build.gradle","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"gradle\/plugins\/skara-module\/src\/main\/java\/org\/openjdk\/skara\/gradle\/module\/ModuleExtension.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,7 @@\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.gradle.api.Action;\n+import org.gradle.api.GradleException;\n@@ -28,3 +35,0 @@\n-import org.gradle.api.GradleException;\n-import org.gradle.api.Action;\n-import org.gradle.api.DefaultTask;\n@@ -32,0 +36,1 @@\n+import org.gradle.api.plugins.JavaPluginExtension;\n@@ -33,1 +38,0 @@\n-import org.gradle.api.tasks.SourceSet;\n@@ -35,7 +39,0 @@\n-import org.gradle.api.plugins.JavaPluginConvention;\n-\n-import java.util.List;\n-import java.util.ArrayList;\n-import java.util.Map;\n-import java.util.stream.Collectors;\n-import java.io.File;\n@@ -50,2 +47,1 @@\n-                if (task instanceof JavaCompile) {\n-                    var compileJavaTask = (JavaCompile) task;\n+                if (task instanceof JavaCompile compileJavaTask) {\n@@ -65,2 +61,1 @@\n-                if (task instanceof JavaCompile) {\n-                    var compileTestJavaTask = (JavaCompile) task;\n+                if (task instanceof JavaCompile compileTestJavaTask) {\n@@ -70,3 +65,2 @@\n-                            var t = (JavaCompile) at;\n-                            var maybeModuleName = extension.getName().get();\n-                            if (maybeModuleName == null) {\n+                            var maybeModuleName = extension.getName();\n+                            if (!maybeModuleName.isPresent()) {\n@@ -75,2 +69,2 @@\n-                            var moduleName = maybeModuleName.toString();\n-                            var testSourceSet = project.getConvention().getPlugin(JavaPluginConvention.class).getSourceSets().getByName(\"test\");\n+                            var moduleName = maybeModuleName.get();\n+                            var testSourceSet = project.getExtensions().getByType(JavaPluginExtension.class).getSourceSets().getByName(\"test\");\n@@ -101,2 +95,1 @@\n-                if (task instanceof Test) {\n-                    var testTask = (Test) task;\n+                if (task instanceof Test testTask) {\n@@ -107,2 +100,2 @@\n-                            var maybeModuleName = extension.getName().get();\n-                            if (maybeModuleName == null) {\n+                            var maybeModuleName = extension.getName();\n+                            if (!maybeModuleName.isPresent()) {\n@@ -111,3 +104,3 @@\n-                            var moduleName = maybeModuleName.toString();\n-                            var testSourceSet = project.getConvention().getPlugin(JavaPluginConvention.class).getSourceSets().getByName(\"test\");\n-                            var outputDir = testSourceSet.getJava().getOutputDir().toString();\n+                            var moduleName = maybeModuleName.get();\n+                            var testSourceSet = project.getExtensions().getByType(JavaPluginExtension.class).getSourceSets().getByName(\"test\");\n+                            var outputDir = testSourceSet.getJava().getClassesDirectory().get().toString();\n@@ -116,1 +109,4 @@\n-                            var jvmArgs = new ArrayList<>(testTask.getJvmArgs());\n+                            var jvmArgs = new ArrayList<>();\n+                            if (testTask.getJvmArgs() != null) {\n+                                jvmArgs.addAll(testTask.getJvmArgs());\n+                            }\n","filename":"gradle\/plugins\/skara-module\/src\/main\/java\/org\/openjdk\/skara\/gradle\/module\/ModulePlugin.java","additions":25,"deletions":29,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"gradle\/plugins\/skara-proxy\/build.gradle","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"gradle\/plugins\/skara-proxy\/src\/main\/java\/org\/openjdk\/skara\/gradle\/proxy\/ProxyPlugin.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"gradle\/plugins\/skara-reproduce\/build.gradle","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"gradle\/plugins\/skara-version\/build.gradle","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"gradle\/plugins\/skara-version\/src\/main\/java\/org\/openjdk\/skara\/gradle\/version\/VersionPlugin.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -22,2 +22,2 @@\n-distributionUrl=https\\:\/\/services.gradle.org\/distributions\/gradle-7.2-bin.zip\n-distributionSha256Sum=f581709a9c35e9cb92e16f585d2c4bc99b2b1a5f85d2badbd3dc6bff59e1e6dd\n+distributionUrl=https\\:\/\/services.gradle.org\/distributions\/gradle-7.4.2-bin.zip\n+distributionSha256Sum=29e49b10984e585d8118b7d0bc452f944e386458df27371b49b4ac1dec4b7fda\n","filename":"gradle\/wrapper\/gradle-wrapper.properties","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-# Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"gradlew","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-rem Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+rem Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"gradlew.bat","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"host\/src\/main\/java\/org\/openjdk\/skara\/host\/Host.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"host\/src\/main\/java\/org\/openjdk\/skara\/host\/HostUser.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"ini\/src\/main\/java\/org\/openjdk\/skara\/ini\/Section.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+        requires 'org.openjdk.skara.proxy'\n@@ -47,0 +48,1 @@\n+    testImplementation project(':proxy')\n","filename":"issuetracker\/build.gradle","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"issuetracker\/src\/main\/java\/org\/openjdk\/skara\/issuetracker\/Comment.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"issuetracker\/src\/main\/java\/org\/openjdk\/skara\/issuetracker\/Issue.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,22 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n","filename":"issuetracker\/src\/main\/java\/org\/openjdk\/skara\/issuetracker\/IssuePoller.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"issuetracker\/src\/main\/java\/org\/openjdk\/skara\/issuetracker\/IssueTracker.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"issuetracker\/src\/main\/java\/org\/openjdk\/skara\/issuetracker\/Link.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"issuetracker\/src\/main\/java\/org\/openjdk\/skara\/issuetracker\/WebLinkBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -283,1 +283,2 @@\n-            case \"priority\":\n+            case \"priority\": \/\/ fall-through\n+            case \"security\":\n","filename":"issuetracker\/src\/main\/java\/org\/openjdk\/skara\/issuetracker\/jira\/JiraProject.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"issuetracker\/src\/main\/java\/org\/openjdk\/skara\/issuetracker\/jira\/JiraVault.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,22 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n","filename":"issuetracker\/src\/test\/java\/org\/openjdk\/skara\/issuetracker\/IssuePollerTests.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"jbs\/src\/main\/java\/org\/openjdk\/skara\/jbs\/JdkVersion.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"jbs\/src\/test\/java\/org\/openjdk\/skara\/jbs\/BuildCompareTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"jbs\/src\/test\/java\/org\/openjdk\/skara\/jbs\/JdkVersionTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/AuthorCheck.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/BinaryCheck.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/CensusConfiguration.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/CommitCheck.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/CommitterCheck.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/CommitterConfiguration.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/DuplicateIssuesCheck.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/ExecutableCheck.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/HgTagCommitCheck.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,1 +47,0 @@\n-    void visit(JCheckConfIssue issue);\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/IssueVisitor.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/IssuesCheck.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/IssuesConfiguration.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -84,2 +84,1 @@\n-            new ProblemListsCheck(repository),\n-            new JCheckConfCheck(repository)\n+            new ProblemListsCheck(repository)\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/JCheck.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,80 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.skara.jcheck;\n-\n-import org.openjdk.skara.census.Census;\n-import org.openjdk.skara.vcs.Commit;\n-import org.openjdk.skara.vcs.ReadOnlyRepository;\n-import org.openjdk.skara.vcs.openjdk.CommitMessage;\n-\n-import java.io.IOException;\n-import java.io.UncheckedIOException;\n-import java.nio.file.Path;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Optional;\n-import java.util.logging.Logger;\n-\n-public class JCheckConfCheck extends CommitCheck {\n-    private final Logger log = Logger.getLogger(\"org.openjdk.skara.jcheck.jcheckconf\");\n-\n-    private final ReadOnlyRepository repo;\n-\n-    public JCheckConfCheck(ReadOnlyRepository repo) {\n-        this.repo = repo;\n-    }\n-\n-    @Override\n-    Iterator<Issue> check(Commit commit, CommitMessage message, JCheckConfiguration conf, Census census) {\n-        var metadata = CommitIssue.metadata(commit, message, conf, this);\n-        var hash = commit.hash();\n-\n-        Optional<List<String>> lines;\n-        try {\n-            lines = repo.lines(Path.of(\".jcheck\/conf\"), hash);\n-        } catch (IOException e) {\n-            throw new UncheckedIOException(e);\n-        }\n-        if (lines.isEmpty()) {\n-            log.finer(\".jcheck\/conf is missing\");\n-            return iterator(new JCheckConfIssue(metadata, \".jcheck\/conf is missing\"));\n-        }\n-        try {\n-            JCheckConfiguration.parse(lines.get());\n-        } catch (RuntimeException e) {\n-            log.finer(\".jcheck\/conf is not valid\");\n-            return iterator(new JCheckConfIssue(metadata, e.getMessage()));\n-        }\n-        return iterator();\n-    }\n-\n-    @Override\n-    public String name() {\n-        return \"jcheckconf\";\n-    }\n-\n-    @Override\n-    public String description() {\n-        return \"Change must contain valid jcheck configuration\";\n-    }\n-}\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/JCheckConfCheck.java","additions":0,"deletions":80,"binary":false,"changes":80,"status":"deleted"},{"patch":"@@ -1,41 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.skara.jcheck;\n-\n-public class JCheckConfIssue extends CommitIssue {\n-    String errorMessage;\n-\n-    public JCheckConfIssue(Metadata metadata, String errorMessage) {\n-        super(metadata);\n-        this.errorMessage = errorMessage;\n-    }\n-\n-    @Override\n-    public void accept(IssueVisitor v) {\n-        v.visit(this);\n-    }\n-\n-    public String getErrorMessage() {\n-        return errorMessage;\n-    }\n-}\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/JCheckConfIssue.java","additions":0,"deletions":41,"binary":false,"changes":41,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/JCheckConfiguration.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/MergeMessageCheck.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/MessageCheck.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/ReviewersCheck.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/TooFewReviewersIssue.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/Utilities.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"jcheck\/src\/test\/java\/org\/openjdk\/skara\/jcheck\/DuplicateIssuesCheckTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,104 +0,0 @@\n-package org.openjdk.skara.jcheck;\n-\n-import org.junit.jupiter.api.Test;\n-import org.openjdk.skara.vcs.*;\n-import org.openjdk.skara.vcs.openjdk.CommitMessage;\n-import org.openjdk.skara.vcs.openjdk.CommitMessageParsers;\n-\n-import java.io.IOException;\n-import java.nio.file.Path;\n-import java.time.ZonedDateTime;\n-import java.util.*;\n-\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-\n-public class JCheckConfCheckTests {\n-\n-    private class JCheckConfTestRepository extends TestRepository {\n-        List<String> conf;\n-\n-        public JCheckConfTestRepository(List<String> text) {\n-            conf = text;\n-        }\n-\n-        @Override\n-        public Optional<List<String>> lines(Path p, Hash h) throws IOException {\n-            if (p.toString().contains(\"conf\")) {\n-                return Optional.of(conf);\n-            }\n-            return super.lines(p, h);\n-        }\n-\n-        public void setConf(List<String> text) {\n-            conf = text;\n-        }\n-    }\n-\n-    private static final List<String> CONFIGURATION = List.of(\n-            \"[general]\",\n-            \"project = test\",\n-            \"[checks]\",\n-            \"error = jcheckconf\"\n-    );\n-\n-    private static final JCheckConfiguration conf = JCheckConfiguration.parse(CONFIGURATION);\n-\n-    private List<Issue> toList(Iterator<Issue> i) {\n-        var list = new ArrayList<Issue>();\n-        while (i.hasNext()) {\n-            list.add(i.next());\n-        }\n-        return list;\n-    }\n-\n-    private static Commit commit(int id, String... message) {\n-        var author = new Author(\"foo\", \"foo@host.org\");\n-        var hash = new Hash((\"\" + id).repeat(40));\n-        var parents = List.of(Hash.zero());\n-        var authored = ZonedDateTime.now();\n-        var metadata = new CommitMetadata(hash, parents, author, authored, author, authored, List.of(message));\n-        return new Commit(metadata, List.of());\n-    }\n-\n-    private static CommitMessage message(Commit c) {\n-        return CommitMessageParsers.v1.parse(c);\n-    }\n-\n-    @Test\n-    void validJCheckConfTest() {\n-        var commit = commit(0, \"Bugfix\");\n-        var message = message(commit);\n-        var check = new JCheckConfCheck(new JCheckConfTestRepository(CONFIGURATION));\n-        var issues = toList(check.check(commit, message, conf, null));\n-        assertEquals(0, issues.size());\n-    }\n-\n-    @Test\n-    void invalidJCheckConfTest() {\n-        var commit = commit(0, \"Bugfix\");\n-        var message = message(commit);\n-        var repo = new JCheckConfTestRepository(CONFIGURATION);\n-        var check = new JCheckConfCheck(repo);\n-\n-        repo.setConf(List.of(\n-                \"[general] 36542\",\n-                \"project = test\",\n-                \"[checks]\",\n-                \"error = jcheckconf\"\n-        ));\n-        var issues = toList(check.check(commit, message, conf, null));\n-        assertEquals(1, issues.size());\n-        assertEquals(\"line 0: section header must end with ']'\", ((JCheckConfIssue) issues.get(0)).getErrorMessage());\n-\n-        repo.setConf(List.of(\n-                \"[general]\",\n-                \"project = test\",\n-                \"[checks]\",\n-                \"error = jcheckconf\",\n-                \"randomrandom\"\n-        ));\n-        issues = toList(check.check(commit, message, conf, null));\n-        assertEquals(1, issues.size());\n-        assertEquals(\"line 4: entry must be of form 'key = value'\", ((JCheckConfIssue) issues.get(0)).getErrorMessage());\n-    }\n-}\n","filename":"jcheck\/src\/test\/java\/org\/openjdk\/skara\/jcheck\/JCheckConfCheckTests.java","additions":0,"deletions":104,"binary":false,"changes":104,"status":"deleted"},{"patch":"@@ -241,5 +241,0 @@\n-        @Override\n-        public void visit(JCheckConfIssue e) {\n-            issues.add(e);\n-        }\n-\n","filename":"jcheck\/src\/test\/java\/org\/openjdk\/skara\/jcheck\/JCheckTests.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"json\/src\/main\/java\/org\/openjdk\/skara\/json\/JSONArray.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"json\/src\/main\/java\/org\/openjdk\/skara\/json\/JSONBoolean.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"json\/src\/main\/java\/org\/openjdk\/skara\/json\/JSONDecimal.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"json\/src\/main\/java\/org\/openjdk\/skara\/json\/JSONNull.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"json\/src\/main\/java\/org\/openjdk\/skara\/json\/JSONNumber.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"json\/src\/main\/java\/org\/openjdk\/skara\/json\/JSONObject.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"json\/src\/main\/java\/org\/openjdk\/skara\/json\/JSONParser.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"json\/src\/main\/java\/org\/openjdk\/skara\/json\/JSONString.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"json\/src\/main\/java\/org\/openjdk\/skara\/json\/JSONValue.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -442,1 +442,1 @@\n-                \"\\\"work_in_progress\\\":false,\" +\n+                \"\\\"draft\\\":false,\" +\n","filename":"json\/src\/test\/java\/org\/openjdk\/skara\/json\/JSONParserTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"mailinglist\/build.gradle","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"mailinglist\/src\/main\/java\/module-info.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"mailinglist\/src\/main\/java\/org\/openjdk\/skara\/mailinglist\/Conversation.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"mailinglist\/src\/main\/java\/org\/openjdk\/skara\/mailinglist\/MailingListReader.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"mailinglist\/src\/main\/java\/org\/openjdk\/skara\/mailinglist\/MailingListServer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-        return new MailmanServer(archive, smtp, sendInterval);\n+        return new MailmanServer(archive, smtp, sendInterval, false);\n@@ -36,0 +36,5 @@\n+\n+    public static MailingListServer createMailmanServer(URI archive, String smtp, Duration sendInterval, boolean useEtag) {\n+        return new MailmanServer(archive, smtp, sendInterval, useEtag);\n+    }\n+\n","filename":"mailinglist\/src\/main\/java\/org\/openjdk\/skara\/mailinglist\/MailingListServerFactory.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"mailinglist\/src\/main\/java\/org\/openjdk\/skara\/mailinglist\/Mbox.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,1 @@\n+    private final boolean useEtag;\n@@ -51,1 +52,1 @@\n-    MailmanListReader(MailmanServer server, Collection<String> names) {\n+    MailmanListReader(MailmanServer server, Collection<String> names, boolean useEtag) {\n@@ -53,0 +54,1 @@\n+        this.useEtag = useEtag;\n@@ -90,1 +92,1 @@\n-        if (cached != null) {\n+        if (useEtag && cached != null) {\n","filename":"mailinglist\/src\/main\/java\/org\/openjdk\/skara\/mailinglist\/mailman\/MailmanListReader.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,1 @@\n+    private final boolean useEtag;\n@@ -41,1 +42,1 @@\n-    public MailmanServer(URI archive, String smtpServer, Duration sendInterval) {\n+    public MailmanServer(URI archive, String smtpServer, Duration sendInterval, boolean useEtag) {\n@@ -45,0 +46,1 @@\n+        this.useEtag = useEtag;\n@@ -75,1 +77,1 @@\n-        return new MailmanListReader(this, Arrays.asList(listNames));\n+        return new MailmanListReader(this, Arrays.asList(listNames), useEtag);\n","filename":"mailinglist\/src\/main\/java\/org\/openjdk\/skara\/mailinglist\/mailman\/MailmanServer.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"mailinglist\/src\/main\/java\/org\/openjdk\/skara\/mailinglist\/mboxfile\/MboxFileListReader.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"mailinglist\/src\/main\/java\/org\/openjdk\/skara\/mailinglist\/mboxfile\/MboxFileListServer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -112,1 +112,1 @@\n-                                                                             Duration.ZERO);\n+                                                                             Duration.ZERO, true);\n","filename":"mailinglist\/src\/test\/java\/org\/openjdk\/skara\/mailinglist\/MailmanTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"mailinglist\/src\/test\/java\/org\/openjdk\/skara\/mailinglist\/MboxTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"network\/build.gradle","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"network\/src\/main\/java\/module-info.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -91,0 +91,1 @@\n+        private boolean skipLimiter = false;\n@@ -205,0 +206,5 @@\n+        public QueryBuilder skipLimiter(boolean skipLimiter) {\n+            this.skipLimiter = skipLimiter;\n+            return this;\n+        }\n+\n@@ -302,1 +308,1 @@\n-    private HttpResponse<String> sendRequest(HttpRequest.Builder request) throws IOException {\n+    private HttpResponse<String> sendRequest(HttpRequest.Builder request, boolean skipLimiter) throws IOException {\n@@ -310,1 +316,1 @@\n-                response = cache.send(authId, request);\n+                response = cache.send(authId, request, skipLimiter);\n@@ -477,1 +483,1 @@\n-        var response = sendRequest(request);\n+        var response = sendRequest(request, queryBuilder.skipLimiter);\n@@ -496,1 +502,1 @@\n-            response = sendRequest(nextRequest.get());\n+            response = sendRequest(nextRequest.get(), queryBuilder.skipLimiter);\n@@ -517,1 +523,1 @@\n-        var response = sendRequest(request);\n+        var response = sendRequest(request, queryBuilder.skipLimiter);\n@@ -520,1 +526,1 @@\n-            throw new IOException(\"Bad response: \" + response.statusCode());\n+            throw new UncheckedRestException(\"Bad response: \" + response.statusCode(), response.statusCode());\n","filename":"network\/src\/main\/java\/org\/openjdk\/skara\/network\/RestRequest.java","additions":13,"deletions":7,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -92,0 +92,1 @@\n+    private final ConcurrentHashMap<String, Lock> authNonGetLocks = new ConcurrentHashMap<>();\n@@ -184,1 +185,1 @@\n-    HttpResponse<String> send(String authId, HttpRequest.Builder requestBuilder) throws IOException, InterruptedException {\n+    HttpResponse<String> send(String authId, HttpRequest.Builder requestBuilder, boolean skipLimiter) throws IOException, InterruptedException {\n@@ -190,3 +191,2 @@\n-        authLocks.computeIfAbsent(authId, id -> new ReentrantLock());\n-        var authLock = authLocks.get(authId);\n-        if (unauthenticatedRequest.method().equals(\"GET\")) {\n+        var authLock = authLocks.computeIfAbsent(authId, id -> new ReentrantLock());\n+        if (unauthenticatedRequest.method().equals(\"GET\") || skipLimiter) {\n@@ -204,0 +204,1 @@\n+            var beforeLock = Instant.now();\n@@ -206,1 +207,3 @@\n-                var before = Instant.now();\n+                var beforeCall = Instant.now();\n+                var lockDelay = Duration.between(beforeLock, beforeCall);\n+                log.log(Level.FINE, \"Taking lock for \" + finalRequest.method() + \" \" + finalRequest.uri() + \" took \" + lockDelay, lockDelay);\n@@ -208,2 +211,2 @@\n-                var duration = Duration.between(before, Instant.now());\n-                log.log(Level.FINE, \"Calling GET \" + finalRequest.uri().toString() + \" took \" + duration, duration);\n+                var callDuration = Duration.between(beforeCall, Instant.now());\n+                log.log(Level.FINE, \"Calling \" + finalRequest.method() + \" \" + finalRequest.uri().toString() + \" took \" + callDuration, callDuration);\n@@ -222,0 +225,1 @@\n+            var authNonGetLock = authNonGetLocks.computeIfAbsent(authId, id -> new ReentrantLock());\n@@ -225,1 +229,3 @@\n-            try (var ignored = new LockWithTimeout(authLock)) {\n+            var beforeLock = Instant.now();\n+            try (var ignored = new LockWithTimeout(authNonGetLock)) {\n+                \/\/ Perform at most one update per second\n@@ -227,8 +233,17 @@\n-                lastUpdates.put(authId, Instant.now());\n-            }\n-            \/\/ Perform at most one update per second\n-            var requiredDelay = Duration.between(Instant.now().minus(Duration.ofSeconds(1)), lastUpdate);\n-            if (!requiredDelay.isNegative()) {\n-                try {\n-                    Thread.sleep(requiredDelay.toMillis());\n-                } catch (InterruptedException ignored) {\n+                var requiredDelay = Duration.between(Instant.now().minus(Duration.ofSeconds(1)), lastUpdate);\n+                if (!requiredDelay.isNegative()) {\n+                    try {\n+                        Thread.sleep(requiredDelay.toMillis());\n+                    } catch (InterruptedException e) {\n+                        Thread.currentThread().interrupt();\n+                    }\n+                }\n+                try (var ignored2 = new LockWithTimeout(authLock)) {\n+                    var beforeCall = Instant.now();\n+                    lastUpdates.put(authId, beforeCall);\n+                    var lockDelay = Duration.between(beforeLock, beforeCall);\n+                    log.log(Level.FINE, \"Taking lock and adding required delay for \" + finalRequest.method() + \" \" + finalRequest.uri() + \" took \" + lockDelay, lockDelay);\n+                    var response = client.send(finalRequest, HttpResponse.BodyHandlers.ofString());\n+                    var callDuration = Duration.between(beforeCall, Instant.now());\n+                    log.log(Level.FINE, \"Calling \" + finalRequest.method() + \" \" + finalRequest.uri().toString() + \" took \" + callDuration, callDuration);\n+                    return response;\n@@ -236,7 +251,0 @@\n-            }\n-            try (var ignored = new LockWithTimeout(authLock)) {\n-                var before = Instant.now();\n-                var response = client.send(finalRequest, HttpResponse.BodyHandlers.ofString());\n-                var duration = Duration.between(before, Instant.now());\n-                log.log(Level.FINE, \"Calling \" + finalRequest.method() + \" \" + finalRequest.uri().toString() + \" took \" + duration, duration);\n-                return response;\n","filename":"network\/src\/main\/java\/org\/openjdk\/skara\/network\/RestRequestCache.java","additions":32,"deletions":24,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"network\/src\/main\/java\/org\/openjdk\/skara\/network\/URIBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,22 @@\n+\/*\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n","filename":"network\/src\/main\/java\/org\/openjdk\/skara\/network\/UncheckedRestException.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"network\/src\/test\/java\/org\/openjdk\/skara\/network\/RestRequestTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"process\/src\/main\/java\/org\/openjdk\/skara\/process\/Execution.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"proxy\/src\/main\/java\/module-info.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -62,0 +62,1 @@\n+include 'bots:common'\n","filename":"settings.gradle","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-# Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"skara.gitconfig","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-# Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"skara.py","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"storage\/build.gradle","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"storage\/src\/main\/java\/module-info.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"storage\/src\/main\/java\/org\/openjdk\/skara\/storage\/FileStorage.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"storage\/src\/main\/java\/org\/openjdk\/skara\/storage\/HostedRepositoryStorage.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"storage\/src\/main\/java\/org\/openjdk\/skara\/storage\/RepositoryStorage.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"storage\/src\/test\/java\/org\/openjdk\/skara\/storage\/FileStorageTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"storage\/src\/test\/java\/org\/openjdk\/skara\/storage\/HostedRepositoryStorageTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"storage\/src\/test\/java\/org\/openjdk\/skara\/storage\/RepositoryStorageTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-# Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test.dockerfile","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/CensusBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/CheckableRepository.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/HostCredentials.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,22 @@\n+\/*\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/ManualTestSettings.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/SMTPServer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestBotFactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestBotRunner.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -177,1 +177,1 @@\n-    public Optional<HostedCommit> search(Hash hash) {\n+    public Optional<HostedCommit> search(Hash hash, boolean includeDiffs) {\n@@ -180,1 +180,1 @@\n-            var commit = repo.commit(hash);\n+            var commit = repo.commit(hash, includeDiffs);\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestHost.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -25,0 +25,3 @@\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.StandardOpenOption;\n@@ -30,1 +33,0 @@\n-import org.openjdk.skara.network.UncheckedRestException;\n@@ -50,0 +52,1 @@\n+    private final Set<String> protectedBranchPatterns = new HashSet<>();\n@@ -200,1 +203,1 @@\n-    public String fileContents(String filename, String ref) {\n+    public Optional<String> fileContents(String filename, String ref) {\n@@ -202,2 +205,2 @@\n-            var lines = localRepository.lines(Path.of(filename), localRepository.resolve(ref).orElseThrow());\n-            return String.join(\"\\n\", lines.orElseThrow());\n+            var bytes = localRepository.show(Path.of(filename), localRepository.resolve(ref).orElseThrow());\n+            return bytes.map(b -> new String(b, StandardCharsets.UTF_8));\n@@ -207,2 +210,18 @@\n-            \/\/ Make this method behave more like other remote repo implementations\n-            throw new UncheckedRestException(\"Can't find file \" + filename, 404);\n+            return Optional.empty();\n+        }\n+    }\n+\n+    @Override\n+    public void writeFileContents(String filename, String content, Branch branch, String message, String authorName, String authorEmail) {\n+        try {\n+            localRepository.checkout(branch);\n+            Path absPath = localRepository.root().resolve(filename);\n+            Files.createDirectories(absPath.getParent());\n+            Files.writeString(absPath, content, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);\n+            localRepository.add(absPath);\n+            var hash = localRepository.commit(message, authorName, authorEmail);\n+            \/\/ Don't leave the repository having a branch checked out as that would\n+            \/\/ prevent pushing to that branch.\n+            localRepository.checkout(hash);\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n@@ -254,0 +273,10 @@\n+    @Override\n+    public void protectBranchPattern(String pattern) {\n+        protectedBranchPatterns.add(pattern);\n+    }\n+\n+    @Override\n+    public void unprotectBranchPattern(String pattern) {\n+        protectedBranchPatterns.remove(pattern);\n+    }\n+\n@@ -257,0 +286,7 @@\n+            for (String protectedBranchPattern : protectedBranchPatterns) {\n+                var pattern = Pattern.compile(protectedBranchPattern.replace(\"*\", \".*\"));\n+                if (pattern.matcher(ref).matches()) {\n+                    throw new RuntimeException(\"Branch \" + ref + \" is protected with pattern '\"\n+                            + protectedBranchPattern + \"' and cannot be removed\");\n+                }\n+            }\n@@ -272,1 +308,2 @@\n-    public List<CommitComment> recentCommitComments(Map<String, Set<Hash>> commitTitleToCommits, Set<Integer> excludeAuthors) {\n+    public List<CommitComment> recentCommitComments(ReadOnlyRepository unused, Set<Integer> excludeAuthors,\n+            List<Branch> branches, ZonedDateTime updatedAfter) {\n@@ -278,0 +315,1 @@\n+                             .filter(c -> c.updatedAt().isAfter(updatedAfter))\n@@ -301,1 +339,1 @@\n-    public Optional<HostedCommit> commit(Hash hash) {\n+    public Optional<HostedCommit> commit(Hash hash, boolean includeDiffs) {\n@@ -308,1 +346,2 @@\n-            return Optional.of(new HostedCommit(commit.get().metadata(), commit.get().parentDiffs(), url));\n+            List<Diff> parentDiffs = includeDiffs ? commit.get().parentDiffs() : List.of();\n+            return Optional.of(new HostedCommit(commit.get().metadata(), parentDiffs, url));\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestHostedRepository.java","additions":48,"deletions":9,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestIssueStore.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestMailmanServer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -228,0 +228,9 @@\n+    public void makeDraft() {\n+        store().setDraft(true);\n+    }\n+\n+    @Override\n+    public Optional<ZonedDateTime> lastMarkedAsDraftTime() {\n+        return Optional.ofNullable(store().lastMarkedAsDraftTime());\n+    }\n+\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestPullRequest.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,0 +51,1 @@\n+    private ZonedDateTime lastMarkedAsDraftTime;\n@@ -59,1 +60,3 @@\n-        if (!draft) {\n+        if (draft) {\n+            lastMarkedAsDraftTime = ZonedDateTime.now();\n+        } else {\n@@ -132,1 +135,3 @@\n-        if (!draft) {\n+        if (draft) {\n+            lastMarkedAsDraftTime = ZonedDateTime.now();\n+        } else {\n@@ -144,0 +149,4 @@\n+\n+    public ZonedDateTime lastMarkedAsDraftTime() {\n+        return lastMarkedAsDraftTime;\n+    }\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestPullRequestStore.java","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestWebrevServer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"vcs\/build.gradle","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"vcs\/src\/main\/java\/module-info.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/Branch.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/Commit.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/CommitMetadata.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/Diff.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/Hash.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/Hunk.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/Patch.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/Range.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/Status.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/TextualPatch.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/UnifiedDiffParser.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/WebrevStats.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/git\/GitCombinedDiffParser.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/git\/GitCommitIterator.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/git\/GitCommitMetadata.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -472,1 +472,1 @@\n-        try (var p = capture(\"git\", \"checkout\", \"--recurse-submodules\", h.hex(), \"--\", \".\")) {\n+        try (var p = capture(\"git\", \"restore\", \"--recurse-submodules\", \"--source\", h.hex(), \"--\", \".\")) {\n@@ -604,0 +604,7 @@\n+        \/*\n+         * https:\/\/git-scm.com\/docs\/git-push\n+         * Specify what destination ref to update with what source object.\n+         * The format of a <refspec> parameter is an optional plus +, followed by\n+         * the source object, followed by a colon : and finally by the destination\n+         * ref.\n+         *\/\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/git\/GitRepository.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/git\/GitVersion.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/hg\/HgCommitIterator.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/hg\/HgCommitMetadata.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/hg\/HgCommits.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/openjdk\/CommitMessage.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/openjdk\/CommitMessageBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/openjdk\/CommitMessageFormatters.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/openjdk\/CommitMessageParser.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/openjdk\/CommitMessageParsers.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/openjdk\/CommitMessageSyntax.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/openjdk\/Issue.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/openjdk\/OpenJDKTag.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/openjdk\/convert\/ConverterCommitMessageParser.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/openjdk\/convert\/GitToHgConverter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/openjdk\/convert\/HgToGitConverter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/openjdk\/convert\/Mark.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/tools\/GitRawDiffParser.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/tools\/PatchHeader.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-# Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"vcs\/src\/main\/resources\/ext.py","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"vcs\/src\/test\/java\/org\/openjdk\/skara\/vcs\/RepositoryTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"vcs\/src\/test\/java\/org\/openjdk\/skara\/vcs\/UnifiedDiffParserTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"vcs\/src\/test\/java\/org\/openjdk\/skara\/vcs\/git\/GitVersionTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"vcs\/src\/test\/java\/org\/openjdk\/skara\/vcs\/openjdk\/CommitMessageFormattersTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"vcs\/src\/test\/java\/org\/openjdk\/skara\/vcs\/openjdk\/CommitMessageParsersTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"vcs\/src\/test\/java\/org\/openjdk\/skara\/vcs\/openjdk\/OpenJDKTagTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"vcs\/src\/test\/java\/org\/openjdk\/skara\/vcs\/openjdk\/converter\/GitToHgConverterTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"vcs\/src\/test\/java\/org\/openjdk\/skara\/vcs\/openjdk\/converter\/HgToGitConverterTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"webrev\/build.gradle","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"webrev\/src\/main\/java\/module-info.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"webrev\/src\/main\/java\/org\/openjdk\/skara\/webrev\/AddedFileView.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"webrev\/src\/main\/java\/org\/openjdk\/skara\/webrev\/AddedPatchView.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"webrev\/src\/main\/java\/org\/openjdk\/skara\/webrev\/FileView.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"webrev\/src\/main\/java\/org\/openjdk\/skara\/webrev\/HunkCoalescer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"webrev\/src\/main\/java\/org\/openjdk\/skara\/webrev\/IndexView.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"webrev\/src\/main\/java\/org\/openjdk\/skara\/webrev\/ModifiedFileView.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"webrev\/src\/main\/java\/org\/openjdk\/skara\/webrev\/RawView.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"webrev\/src\/main\/java\/org\/openjdk\/skara\/webrev\/RemovedFileView.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"webrev\/src\/main\/java\/org\/openjdk\/skara\/webrev\/RemovedPatchView.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"webrev\/src\/main\/java\/org\/openjdk\/skara\/webrev\/Stats.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"webrev\/src\/main\/java\/org\/openjdk\/skara\/webrev\/Webrev.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"webrev\/src\/test\/java\/org\/openjdk\/skara\/webrev\/WebrevTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"xml\/src\/main\/java\/org\/openjdk\/skara\/xml\/XML.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}