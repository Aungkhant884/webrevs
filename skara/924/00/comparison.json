{"files":[{"patch":"@@ -82,12 +82,4 @@\n-            var seedRepo = Repository.get(seed).orElseThrow(() -> new IOException(\"Existing seed is corrupt?\"));\n-            if (allowStale) {\n-                try {\n-                    var lastFetch = Files.getLastModifiedTime(seed.resolve(\"FETCH_HEAD\"));\n-                    if (lastFetch.toInstant().isAfter(Instant.now().minus(Duration.ofMinutes(1)))) {\n-                        log.info(\"Seed should be up to date, skipping fetch\");\n-                        return;\n-                    } else {\n-                        log.info(\"Seed is potentially stale, time to fetch the latest upstream changes\");\n-                    }\n-                } catch (IOException ignored) {\n-                }\n+            \/\/ If a stale materialization isn't allowed, we will always clone directly from the source and thus do not\n+            \/\/ need to refresh the seed folder\n+            if (!allowStale) {\n+                return;\n@@ -95,15 +87,8 @@\n-            IOException lastException = null;\n-            for (int counter = 0; counter < 5; counter++) {\n-                try {\n-                    seedRepo.fetchAll(hostedRepository.url(), true);\n-                } catch (IOException e) {\n-                    if (!allowStale) {\n-                        lastException = e;\n-                        try {\n-                            Thread.sleep(Duration.ofSeconds(1).toMillis());\n-                        } catch (InterruptedException ignored) {\n-                        }\n-                    } else {\n-                        log.info(\"Failed to refresh seed - ignoring\");\n-                        return;\n-                    }\n+            var seedRepo = Repository.get(seed).orElseThrow(() -> new IOException(\"Existing seed is corrupt?\"));\n+            try {\n+                var lastFetch = Files.getLastModifiedTime(seed.resolve(\"FETCH_HEAD\"));\n+                if (lastFetch.toInstant().isAfter(Instant.now().minus(Duration.ofMinutes(1)))) {\n+                    log.info(\"Seed should be up to date, skipping fetch\");\n+                    return;\n+                } else {\n+                    log.info(\"Seed is potentially stale, time to fetch the latest upstream changes\");\n@@ -111,0 +96,1 @@\n+            } catch (IOException ignored) {\n@@ -112,3 +98,4 @@\n-            if (lastException != null) {\n-                log.info(\"Failed to refresh stale seed - giving up\");\n-                throw lastException;\n+            try {\n+                seedRepo.fetchAll(hostedRepository.url(), true);\n+            } catch (IOException e) {\n+                log.info(\"Failed to refresh seed - ignoring\");\n@@ -159,0 +146,1 @@\n+                        refreshSeed(allowStale);\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/HostedRepositoryPool.java","additions":18,"deletions":30,"binary":false,"changes":48,"status":"modified"}]}