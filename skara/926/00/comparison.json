{"files":[{"patch":"@@ -27,0 +27,1 @@\n+import org.openjdk.skara.vcs.Hash;\n@@ -69,3 +70,3 @@\n-    private static JCheckConfiguration configuration(HostedRepositoryPool hostedRepositoryPool, HostedRepository remoteRepo, String name, String ref) throws IOException {\n-        var confFile = hostedRepositoryPool.lines(remoteRepo, Path.of(name), ref).orElseThrow(\n-                () -> new IOException(\"Failed to read jcheck configuration from \" + name + \":\" + ref));\n+    private static JCheckConfiguration configuration(HostedRepositoryPool hostedRepositoryPool, HostedRepository remoteRepo, String name, Hash hash) throws IOException {\n+        var confFile = hostedRepositoryPool.lines(remoteRepo, Path.of(name), hash).orElseThrow(\n+                () -> new IOException(\"Failed to read jcheck configuration from \" + name + \":\" + hash.hex()));\n@@ -75,1 +76,9 @@\n-    static CensusInstance create(HostedRepositoryPool hostedRepositoryPool, HostedRepository censusRepo, String censusRef, Path folder, PullRequest pr,\n+    static CensusInstance create(HostedRepositoryPool hostedRepositoryPool,\n+                                 HostedRepository censusRepo, String censusRef, Path folder, PullRequest pr,\n+                                 HostedRepository confOverrideRepo, String confOverrideName, String confOverrideRef) {\n+        return create(hostedRepositoryPool, censusRepo, censusRef, folder, pr.repository(), pr.targetHash(),\n+                      confOverrideRepo, confOverrideName, confOverrideRef);\n+    }\n+\n+    static CensusInstance create(HostedRepositoryPool hostedRepositoryPool,\n+                                 HostedRepository censusRepo, String censusRef, Path folder, HostedRepository repository, Hash hash,\n@@ -88,1 +97,1 @@\n-                configuration = configuration(hostedRepositoryPool, pr.repository(), \".jcheck\/conf\", pr.targetRef());\n+                configuration = configuration(hostedRepositoryPool, repository, \".jcheck\/conf\", hash);\n@@ -90,1 +99,5 @@\n-                configuration = configuration(hostedRepositoryPool, confOverrideRepo, confOverrideName, confOverrideRef);\n+                var confOverrideHash = confOverrideRepo.branchHash(confOverrideRef);\n+                configuration = configuration(hostedRepositoryPool,\n+                                              confOverrideRepo,\n+                                              confOverrideName,\n+                                              confOverrideHash);\n@@ -94,1 +107,1 @@\n-            var namespace = namespace(census, pr.repository().namespace());\n+            var namespace = namespace(census, repository.namespace());\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CensusInstance.java","additions":20,"deletions":7,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import org.openjdk.skara.forge.HostedCommit;\n@@ -39,1 +40,1 @@\n-    default void handleCommit(PullRequestBot bot, Hash hash, Path scratchPath, CommandInvocation command, List<Comment> allComments, PrintWriter reply) {\n+    default void handle(PullRequestBot bot, HostedCommit commit, CensusInstance censusInstance, Path scratchPath, CommandInvocation command, List<Comment> allComments, PrintWriter reply) {\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CommandHandler.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-        public void handleCommit(PullRequestBot bot, Hash hash, Path scratchPath, CommandInvocation command, List<Comment> allComments, PrintWriter reply) {\n+        public void handle(PullRequestBot bot, HostedCommit hash, CensusInstance censusInstance, Path scratchPath, CommandInvocation command, List<Comment> allComments, PrintWriter reply) {\n@@ -162,1 +162,2 @@\n-                        handler.get().handleCommit(bot, hash.get(), scratchPath, command, allComments, printer);\n+                        var commit = pr.repository().commit(hash.get()).orElseThrow();\n+                        handler.get().handle(bot, commit, censusInstance, scratchPath, command, allComments, printer);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CommandWorkItem.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-        public void handleCommit(PullRequestBot bot, Hash hash, Path scratchPath, CommandInvocation command, List<Comment> allComments, PrintWriter reply) {\n+        public void handle(PullRequestBot bot, HostedCommit commit, CensusInstance censusInstance, Path scratchPath, CommandInvocation command, List<Comment> allComments, PrintWriter reply) {\n@@ -115,1 +115,1 @@\n-    private void processCommand(Path scratchPath, CommandInvocation command, List<CommitComment> allComments) {\n+    private void processCommand(Path scratchPath, HostedCommit commit, CensusInstance censusInstance, CommandInvocation command, List<CommitComment> allComments) {\n@@ -127,1 +127,1 @@\n-                handler.get().handleCommit(bot, commitComment.commit(), scratchPath, command, comments, printer);\n+                handler.get().handle(bot, commit, censusInstance, scratchPath, command, comments, printer);\n@@ -145,1 +145,10 @@\n-        var allComments = bot.repo().commitComments(commitComment.commit());\n+        var commit = bot.repo().commit(commitComment.commit()).orElseThrow(() ->\n+            new IllegalStateException(\"Commit with hash \" + commitComment.commit() + \" missing\"));\n+        var seedPath = bot.seedStorage().orElse(scratchPath.resolve(\"seeds\"));\n+        var hostedRepositoryPool = new HostedRepositoryPool(seedPath);\n+        var census = CensusInstance.create(hostedRepositoryPool, bot.censusRepo(), bot.censusRef(),\n+                                           scratchPath.resolve(\"census\"), bot.repo(), commit.hash(),\n+                                           bot.confOverrideRepository().orElse(null),\n+                                           bot.confOverrideName(),\n+                                           bot.confOverrideRef());\n+        var allComments = bot.repo().commitComments(commit.hash());\n@@ -151,1 +160,1 @@\n-            processCommand(scratchPath, nextCommand.get(), allComments);\n+            processCommand(scratchPath, commit, census, nextCommand.get(), allComments);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CommitCommandWorkItem.java","additions":14,"deletions":5,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -196,1 +196,1 @@\n-    public Optional<List<String>> lines(HostedRepository hostedRepository, Path p, String ref) throws IOException {\n+    public Optional<List<String>> lines(HostedRepository hostedRepository, Path p, Hash hash) throws IOException {\n@@ -199,2 +199,1 @@\n-        var refHash = seedRepo.resolve(ref);\n-        if (refHash.isEmpty()) {\n+        if (!seedRepo.contains(hash)) {\n@@ -203,1 +202,0 @@\n-            refHash = seedRepo.resolve(ref);\n@@ -205,2 +203,0 @@\n-\n-        var hash = refHash.orElseThrow(() -> new IOException(\"Ref not found: \" + ref));\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/HostedRepositoryPool.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"}]}