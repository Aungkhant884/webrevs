{"files":[{"patch":"@@ -24,0 +24,1 @@\n+    requires java.management;\n","filename":"metrics\/src\/main\/java\/module-info.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,3 @@\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.MemoryType;\n+import java.lang.management.MemoryUsage;\n@@ -30,1 +33,1 @@\n-    private static final CollectorRegistry DEFAULT = new CollectorRegistry();\n+    private static final CollectorRegistry DEFAULT = new CollectorRegistry(true);\n@@ -32,0 +35,5 @@\n+    private final boolean includeHotspotMetrics;\n+\n+    public CollectorRegistry(boolean includeHotspotMetrics) {\n+        this.includeHotspotMetrics = includeHotspotMetrics;\n+    }\n@@ -41,0 +49,65 @@\n+    private static List<Metric> memoryUsageMetrics(String prefix, List<Metric.Label> labels, MemoryUsage usage) {\n+        var result = new ArrayList<Metric>();\n+        var max = usage.getMax();\n+        if (max != -1) {\n+            result.add(new Metric(Metric.Type.GAUGE, prefix + \"_max\", labels, max));\n+        }\n+        result.add(new Metric(Metric.Type.GAUGE, prefix + \"_used\", labels, usage.getUsed()));\n+        result.add(new Metric(Metric.Type.GAUGE, prefix + \"_committed\", labels, usage.getCommitted()));\n+        var init = usage.getInit();\n+        if (init != -1) {\n+            result.add(new Metric(Metric.Type.GAUGE, prefix + \"_init\", labels, init));\n+        }\n+        return result;\n+    }\n+\n+    private static List<Metric> hotspotMetrics() {\n+        var result = new ArrayList<Metric>();\n+\n+        var memoryMXBean = ManagementFactory.getMemoryMXBean();\n+        var heapUsage = memoryMXBean.getHeapMemoryUsage();\n+        var heapLabels = List.of(new Metric.Label(\"type\", MemoryType.HEAP.toString()));\n+        result.addAll(memoryUsageMetrics(\"hotspot_memory\", heapLabels, heapUsage));\n+\n+        var nonHeapUsage = memoryMXBean.getNonHeapMemoryUsage();\n+        var nonHeapLabels = List.of(new Metric.Label(\"type\", MemoryType.NON_HEAP.toString()));\n+        result.addAll(memoryUsageMetrics(\"hotspot_memory\", nonHeapLabels, nonHeapUsage));\n+\n+        var numThreads = ManagementFactory.getThreadMXBean().getThreadCount();\n+        result.add(new Metric(Metric.Type.GAUGE, \"hotspot_threads\", List.of(), numThreads));\n+\n+        var uptime = ManagementFactory.getRuntimeMXBean().getUptime();\n+        result.add(new Metric(Metric.Type.COUNTER, \"hotspot_uptime\", List.of(), uptime));\n+\n+        for (var gcMXBean : ManagementFactory.getGarbageCollectorMXBeans()) {\n+            var labels = List.of(new Metric.Label(\"gc_name\", gcMXBean.getName()));\n+\n+            var gcCount = gcMXBean.getCollectionCount();\n+            result.add(new Metric(Metric.Type.COUNTER, \"hotspot_gc_count\", labels, gcCount));\n+\n+            var gcTime = gcMXBean.getCollectionTime() \/ 1000.0;\n+            result.add(new Metric(Metric.Type.COUNTER, \"hotspot_gc_time\", labels, gcTime));\n+        }\n+\n+        for (var memoryPoolMXBean : ManagementFactory.getMemoryPoolMXBeans()) {\n+            var labels = List.of(new Metric.Label(\"memory_pool_name\", memoryPoolMXBean.getName()),\n+                                 new Metric.Label(\"memory_pool_type\", memoryPoolMXBean.getType().toString()));\n+            var usage = memoryPoolMXBean.getUsage();\n+            result.addAll(memoryUsageMetrics(\"hotspot_memory_pool\", labels, usage));\n+        }\n+\n+        var compilationMXBean = ManagementFactory.getCompilationMXBean();\n+        if (compilationMXBean.isCompilationTimeMonitoringSupported()) {\n+            var compilationTime = ManagementFactory.getCompilationMXBean().getTotalCompilationTime();\n+            result.add(new Metric(Metric.Type.COUNTER, \"hotspot_compilation_time\", List.of(), compilationTime));\n+        }\n+\n+        var classLoadingMXBean = ManagementFactory.getClassLoadingMXBean();\n+        var totalLoadedClasses = classLoadingMXBean.getTotalLoadedClassCount();\n+        result.add(new Metric(Metric.Type.COUNTER, \"hotspot_classes_loaded\", List.of(), totalLoadedClasses));\n+        var totalUnloadedClasses = classLoadingMXBean.getTotalLoadedClassCount();\n+        result.add(new Metric(Metric.Type.COUNTER, \"hotspot_classes_unloaded\", List.of(), totalUnloadedClasses));\n+\n+        return result;\n+    }\n+\n@@ -46,0 +119,3 @@\n+        if (includeHotspotMetrics) {\n+            result.addAll(hotspotMetrics());\n+        }\n","filename":"metrics\/src\/main\/java\/org\/openjdk\/skara\/metrics\/CollectorRegistry.java","additions":77,"deletions":1,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.util.stream.Collectors;\n@@ -34,1 +35,1 @@\n-        var registry = new CollectorRegistry();\n+        var registry = new CollectorRegistry(false);\n@@ -47,1 +48,1 @@\n-        var registry = new CollectorRegistry();\n+        var registry = new CollectorRegistry(false);\n@@ -53,0 +54,22 @@\n+\n+    @Test\n+    void hotspotMetrics() {\n+        var registry = new CollectorRegistry(true);\n+        var metrics = registry.scrape();\n+        var metricNames = metrics.stream().map(Metric::name).collect(Collectors.toSet());\n+        assertTrue(metricNames.contains(\"hotspot_memory_max\"));\n+        assertTrue(metricNames.contains(\"hotspot_memory_used\"));\n+        assertTrue(metricNames.contains(\"hotspot_memory_committed\"));\n+        assertTrue(metricNames.contains(\"hotspot_memory_init\"));\n+        assertTrue(metricNames.contains(\"hotspot_threads\"));\n+        assertTrue(metricNames.contains(\"hotspot_uptime\"));\n+        assertTrue(metricNames.contains(\"hotspot_gc_count\"));\n+        assertTrue(metricNames.contains(\"hotspot_gc_time\"));\n+        assertTrue(metricNames.contains(\"hotspot_memory_pool_max\"));\n+        assertTrue(metricNames.contains(\"hotspot_memory_pool_used\"));\n+        assertTrue(metricNames.contains(\"hotspot_memory_pool_committed\"));\n+        assertTrue(metricNames.contains(\"hotspot_memory_pool_init\"));\n+        assertTrue(metricNames.contains(\"hotspot_classes_loaded\"));\n+        assertTrue(metricNames.contains(\"hotspot_classes_unloaded\"));\n+\n+    }\n","filename":"metrics\/src\/test\/java\/org\/openjdk\/skara\/metrics\/CollectorRegistryTests.java","additions":25,"deletions":2,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-        var registry = new CollectorRegistry();\n+        var registry = new CollectorRegistry(false);\n@@ -41,1 +41,1 @@\n-        var registry = new CollectorRegistry();\n+        var registry = new CollectorRegistry(false);\n@@ -55,1 +55,1 @@\n-        var registry = new CollectorRegistry();\n+        var registry = new CollectorRegistry(false);\n@@ -64,1 +64,1 @@\n-        var registry = new CollectorRegistry();\n+        var registry = new CollectorRegistry(false);\n@@ -77,1 +77,1 @@\n-        var registry = new CollectorRegistry();\n+        var registry = new CollectorRegistry(false);\n@@ -90,1 +90,1 @@\n-        var registry = new CollectorRegistry();\n+        var registry = new CollectorRegistry(false);\n@@ -102,1 +102,1 @@\n-        var registry = new CollectorRegistry();\n+        var registry = new CollectorRegistry(false);\n@@ -116,1 +116,1 @@\n-        var registry = new CollectorRegistry();\n+        var registry = new CollectorRegistry(false);\n@@ -132,1 +132,1 @@\n-        var registry = new CollectorRegistry();\n+        var registry = new CollectorRegistry(false);\n@@ -146,1 +146,1 @@\n-        var registry = new CollectorRegistry();\n+        var registry = new CollectorRegistry(false);\n","filename":"metrics\/src\/test\/java\/org\/openjdk\/skara\/metrics\/CounterTests.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-        var registry = new CollectorRegistry();\n+        var registry = new CollectorRegistry(false);\n@@ -40,1 +40,1 @@\n-        var registry = new CollectorRegistry();\n+        var registry = new CollectorRegistry(false);\n@@ -52,1 +52,1 @@\n-        var registry = new CollectorRegistry();\n+        var registry = new CollectorRegistry(false);\n@@ -60,1 +60,1 @@\n-        var registry = new CollectorRegistry();\n+        var registry = new CollectorRegistry(false);\n@@ -68,1 +68,1 @@\n-        var registry = new CollectorRegistry();\n+        var registry = new CollectorRegistry(false);\n@@ -78,1 +78,1 @@\n-        var registry = new CollectorRegistry();\n+        var registry = new CollectorRegistry(false);\n@@ -88,1 +88,1 @@\n-        var registry = new CollectorRegistry();\n+        var registry = new CollectorRegistry(false);\n@@ -100,1 +100,1 @@\n-        var registry = new CollectorRegistry();\n+        var registry = new CollectorRegistry(false);\n@@ -116,1 +116,1 @@\n-        var registry = new CollectorRegistry();\n+        var registry = new CollectorRegistry(false);\n@@ -130,1 +130,1 @@\n-        var registry = new CollectorRegistry();\n+        var registry = new CollectorRegistry(false);\n@@ -148,1 +148,1 @@\n-        var registry = new CollectorRegistry();\n+        var registry = new CollectorRegistry(false);\n@@ -164,1 +164,1 @@\n-        var registry = new CollectorRegistry();\n+        var registry = new CollectorRegistry(false);\n","filename":"metrics\/src\/test\/java\/org\/openjdk\/skara\/metrics\/GaugeTests.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"}]}