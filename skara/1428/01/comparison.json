{"files":[{"patch":"@@ -101,0 +101,10 @@\n+            Option.shortcut(\"\")\n+                  .fullname(\"conf-rev\")\n+                  .describe(\"REV\")\n+                  .helptext(\"Use .jcheck\/conf in specified rev\")\n+                  .optional(),\n+            Option.shortcut(\"\")\n+                  .fullname(\"conf-file\")\n+                  .describe(\"FILE\")\n+                  .helptext(\"Use this file as jcheck configuration instead of .jcheck\/conf\")\n+                  .optional(),\n@@ -128,0 +138,8 @@\n+                  .optional(),\n+            Switch.shortcut(\"\")\n+                  .fullname(\"conf-staged\")\n+                  .helptext(\"Use staged .jcheck\/conf\")\n+                  .optional(),\n+            Switch.shortcut(\"\")\n+                  .fullname(\"conf-working-tree\")\n+                  .helptext(\"Use .jcheck\/conf in current working tree\")\n@@ -215,0 +233,69 @@\n+        var confRev = arguments.contains(\"conf-rev\");\n+        var confStaged = arguments.contains(\"conf-staged\");\n+        var confWorkingTree = arguments.contains(\"conf-working-tree\");\n+        var confFile = arguments.contains(\"conf-file\");\n+\n+        int confFlagCount = 0;\n+        if (confRev) {\n+            confFlagCount++;\n+        }\n+        if (confStaged) {\n+            confFlagCount++;\n+        }\n+        if (confWorkingTree) {\n+            confFlagCount++;\n+        }\n+        if (confFile) {\n+            confFlagCount++;\n+        }\n+        \/\/ This four flags are mutually exclusive\n+        if (confFlagCount > 1) {\n+            System.err.println(String.format(\"error: you can only choose one from using jcheck \" +\n+                    \"configuration in work space or in a specified commit\"));\n+            return 1;\n+        }\n+        JCheckConfiguration overridingConfig = null;\n+        \/\/ Using jcheck configuration in a specified rev\n+        if (confRev) {\n+            var rev = arguments.get(\"conf-rev\").asString();\n+            var confCommitHash = repo.wholeHash(rev);\n+            if (confCommitHash.isEmpty()) {\n+                System.err.println(String.format(\"error: rev %s is invalid!\", rev));\n+                return 1;\n+            }\n+            try {\n+                overridingConfig = JCheck.parseConfiguration(repo, confCommitHash.get(), List.of()).get();\n+            } catch (IllegalArgumentException e) {\n+                System.err.println(String.format(\"error: Invalid jcheck configuration: %s\", e.getMessage()));\n+                return 1;\n+            }\n+        }\n+        \/\/ Using staged jcheck configuration\n+        else if (confStaged) {\n+            var content = repo.stagedFile(Path.of(\".jcheck\/conf\"));\n+            if (content.isEmpty()) {\n+                System.err.println(String.format(\"error: .jcheck\/conf doesn't exist!\"));\n+                return 1;\n+            }\n+            try {\n+                overridingConfig = JCheck.parseConfiguration(content.get(), List.of()).get();\n+            } catch (IllegalArgumentException e) {\n+                System.err.println(String.format(\"error: Invalid jcheck configuration: %s\", e.getMessage()));\n+                return 1;\n+            }\n+        }\n+        \/\/ Using pointed file as jcheck configuration or jcheck configuration in current working tree\n+        else if (confFile || confWorkingTree) {\n+            var fileName = confFile ? arguments.get(\"conf-file\").asString() : \".jcheck\/conf\";\n+            try {\n+                var content = Files.readAllBytes(Path.of(fileName));\n+                var lines = new String(content, StandardCharsets.UTF_8).lines().toList();\n+                overridingConfig = JCheck.parseConfiguration(lines, List.of()).get();\n+            } catch (NoSuchFileException e) {\n+                System.err.println(String.format(\"error: File %s doesn't exist!\", fileName));\n+                return 1;\n+            } catch (IllegalArgumentException e) {\n+                System.err.println(String.format(\"error: Invalid jcheck configuration: %s,\", e.getMessage()));\n+                return 1;\n+            }\n+        }\n@@ -220,1 +307,1 @@\n-            try (var errors = JCheck.check(repo, census, commitMessageParser, range)) {\n+            try (var errors = JCheck.check(repo, census, commitMessageParser, range, overridingConfig)) {\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/GitJCheck.java","additions":88,"deletions":1,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -259,1 +259,2 @@\n-                               String revisionRange) throws IOException {\n+                               String revisionRange,\n+                               JCheckConfiguration overridingConfig) throws IOException {\n@@ -273,1 +274,1 @@\n-        return check(repository, parser, branchRegex, tagRegex, revisionRange, List.of(), null, census);\n+        return check(repository, parser, branchRegex, tagRegex, revisionRange, List.of(), overridingConfig, census);\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/JCheck.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -299,1 +299,1 @@\n-            try (var issues = JCheck.check(repo, census, CommitMessageParsers.v1, first.hex() + \"..\" + second.hex())) {\n+            try (var issues = JCheck.check(repo, census, CommitMessageParsers.v1, first.hex() + \"..\" + second.hex(), null)) {\n@@ -332,1 +332,1 @@\n-            try (var issues = JCheck.check(repo, census, CommitMessageParsers.v1, range)) {\n+            try (var issues = JCheck.check(repo, census, CommitMessageParsers.v1, range, null)) {\n","filename":"jcheck\/src\/test\/java\/org\/openjdk\/skara\/jcheck\/JCheckTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -350,0 +350,10 @@\n+\n+    @Override\n+    public Optional<Hash> wholeHash(String rev) {\n+        return Optional.empty();\n+    }\n+\n+    @Override\n+    public Optional<List<String>> stagedFile(Path p) {\n+        return Optional.empty();\n+    }\n","filename":"jcheck\/src\/test\/java\/org\/openjdk\/skara\/jcheck\/TestRepository.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -177,0 +177,4 @@\n+\n+    Optional<Hash> wholeHash(String rev);\n+\n+    Optional<List<String>> stagedFile(Path p);\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/ReadOnlyRepository.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1662,0 +1662,22 @@\n+\n+    @Override\n+    public Optional<Hash> wholeHash(String rev) {\n+        try (var p = capture(\"git\", \"rev-parse\", rev)) {\n+            var res = p.await();\n+            if (res.status() == 0 && res.stdout().size() == 1) {\n+                return Optional.of(new Hash(res.stdout().get(0)));\n+            }\n+            return Optional.empty();\n+        }\n+    }\n+\n+    @Override\n+    public Optional<List<String>> stagedFile(Path path) {\n+        try (var p = capture(\"git\", \"cat-file\", \"-p\", \":\" + path.toString())) {\n+            var res = p.await();\n+            if(res.status() ==0){\n+                return Optional.of(res.stdout());\n+            }\n+        }\n+        return Optional.empty();\n+    }\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/git\/GitRepository.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -1511,0 +1511,11 @@\n+\n+    @Override\n+    public Optional<Hash> wholeHash(String rev) {\n+        \/\/TODO: implement it later or not\n+        return Optional.empty();\n+    }\n+\n+    @Override\n+    public Optional<List<String>> stagedFile(Path p) {\n+        return Optional.empty();\n+    }\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/hg\/HgRepository.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"}]}