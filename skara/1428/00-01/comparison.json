{"files":[{"patch":"@@ -102,3 +102,3 @@\n-                  .fullname(\"specified-conf-commit\")\n-                  .describe(\"COMMIT HASH\")\n-                  .helptext(\"Use jcheck configuration in specified commit\")\n+                  .fullname(\"conf-rev\")\n+                  .describe(\"REV\")\n+                  .helptext(\"Use .jcheck\/conf in specified rev\")\n@@ -109,2 +109,1 @@\n-                  .helptext(\"Use this file as jcheck configuration instead of .jcheck\/conf, \" +\n-                          \"this flag can only be used when 'workspace-conf' is enabled\")\n+                  .helptext(\"Use this file as jcheck configuration instead of .jcheck\/conf\")\n@@ -141,2 +140,2 @@\n-                  .fullname(\"workspace-conf\")\n-                  .helptext(\"Use jcheck configuration in current workspace\")\n+                  .fullname(\"conf-staged\")\n+                  .helptext(\"Use staged .jcheck\/conf\")\n@@ -145,3 +144,2 @@\n-                  .fullname(\"workspace-diff\")\n-                  .helptext(\"Run jcheck includes diff in workspace(either staged or not), \" +\n-                          \"Please note that after run jcheck with this flag, all your staged diff will be unstaged\")\n+                  .fullname(\"conf-working-tree\")\n+                  .helptext(\"Use .jcheck\/conf in current working tree\")\n@@ -235,0 +233,4 @@\n+        var confRev = arguments.contains(\"conf-rev\");\n+        var confStaged = arguments.contains(\"conf-staged\");\n+        var confWorkingTree = arguments.contains(\"conf-working-tree\");\n+        var confFile = arguments.contains(\"conf-file\");\n@@ -236,3 +238,15 @@\n-        JCheckConfiguration overridingConfig = null;\n-        \/\/ This two flags are mutually exclusive\n-        if (arguments.contains(\"workspace-conf\") && arguments.contains(\"specified-conf-commit\")) {\n+        int confFlagCount = 0;\n+        if (confRev) {\n+            confFlagCount++;\n+        }\n+        if (confStaged) {\n+            confFlagCount++;\n+        }\n+        if (confWorkingTree) {\n+            confFlagCount++;\n+        }\n+        if (confFile) {\n+            confFlagCount++;\n+        }\n+        \/\/ This four flags are mutually exclusive\n+        if (confFlagCount > 1) {\n@@ -243,5 +257,8 @@\n-        \/\/ Using jcheck configuration in workspace\n-        if (arguments.contains(\"workspace-conf\")) {\n-            String confFileName = \".jcheck\/conf\";\n-            if (arguments.contains(\"conf-file\")) {\n-                confFileName = arguments.get(\"conf-file\").asString();\n+        JCheckConfiguration overridingConfig = null;\n+        \/\/ Using jcheck configuration in a specified rev\n+        if (confRev) {\n+            var rev = arguments.get(\"conf-rev\").asString();\n+            var confCommitHash = repo.wholeHash(rev);\n+            if (confCommitHash.isEmpty()) {\n+                System.err.println(String.format(\"error: rev %s is invalid!\", rev));\n+                return 1;\n@@ -250,6 +267,1 @@\n-                var content = Files.readAllBytes(Path.of(confFileName));\n-                var lines = new String(content, StandardCharsets.UTF_8).lines().toList();\n-                overridingConfig = JCheck.parseConfiguration(lines, List.of()).get();\n-            } catch (NoSuchFileException e) {\n-                System.err.println(String.format(\"error: File %s doesn't exist!\", confFileName));\n-                return 1;\n+                overridingConfig = JCheck.parseConfiguration(repo, confCommitHash.get(), List.of()).get();\n@@ -257,1 +269,1 @@\n-                System.err.println(String.format(\"error: Invalid jcheck configuration: %s,\", e.getMessage()));\n+                System.err.println(String.format(\"error: Invalid jcheck configuration: %s\", e.getMessage()));\n@@ -261,6 +273,5 @@\n-        \/\/ Using jcheck configuration in a specified commit\n-        if (arguments.contains(\"specified-conf-commit\")) {\n-            var shortHash = arguments.get(\"specified-conf-commit\").asString();\n-            var confCommitHash = repo.wholeHash(shortHash);\n-            if (confCommitHash.isEmpty()) {\n-                System.err.println(String.format(\"error: commit %s is invalid!\", shortHash));\n+        \/\/ Using staged jcheck configuration\n+        else if (confStaged) {\n+            var content = repo.stagedFile(Path.of(\".jcheck\/conf\"));\n+            if (content.isEmpty()) {\n+                System.err.println(String.format(\"error: .jcheck\/conf doesn't exist!\"));\n@@ -270,1 +281,1 @@\n-                overridingConfig = JCheck.parseConfiguration(repo, confCommitHash.get(), List.of()).get();\n+                overridingConfig = JCheck.parseConfiguration(content.get(), List.of()).get();\n@@ -276,7 +287,14 @@\n-        \/\/ Commit local changes temporarily\n-        Boolean checkWorkspaceDiff = arguments.contains(\"workspace-diff\");\n-        Hash originHash = null;\n-        if (checkWorkspaceDiff) {\n-            originHash = repo.head();\n-            repo.add(Paths.get(\".\"));\n-            repo.commit(\"temp commit\", \"jcheck\", \"jcheck@openjdk.com\");\n+        \/\/ Using pointed file as jcheck configuration or jcheck configuration in current working tree\n+        else if (confFile || confWorkingTree) {\n+            var fileName = confFile ? arguments.get(\"conf-file\").asString() : \".jcheck\/conf\";\n+            try {\n+                var content = Files.readAllBytes(Path.of(fileName));\n+                var lines = new String(content, StandardCharsets.UTF_8).lines().toList();\n+                overridingConfig = JCheck.parseConfiguration(lines, List.of()).get();\n+            } catch (NoSuchFileException e) {\n+                System.err.println(String.format(\"error: File %s doesn't exist!\", fileName));\n+                return 1;\n+            } catch (IllegalArgumentException e) {\n+                System.err.println(String.format(\"error: Invalid jcheck configuration: %s,\", e.getMessage()));\n+                return 1;\n+            }\n@@ -284,0 +302,1 @@\n+\n@@ -292,6 +311,0 @@\n-            } catch (Exception e) {\n-                System.err.println(String.format(\"error: JCheck failed due to exception: %s\", e.getMessage()));\n-                if (checkWorkspaceDiff) {\n-                    repo.reset(originHash, false);\n-                }\n-                return 1;\n@@ -300,4 +313,0 @@\n-        \/\/ Reset the changes\n-        if (checkWorkspaceDiff) {\n-            repo.reset(originHash, false);\n-        }\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/GitJCheck.java","additions":58,"deletions":49,"binary":false,"changes":107,"status":"modified"},{"patch":"@@ -352,1 +352,6 @@\n-    public Optional<Hash> wholeHash(String hash) {\n+    public Optional<Hash> wholeHash(String rev) {\n+        return Optional.empty();\n+    }\n+\n+    @Override\n+    public Optional<List<String>> stagedFile(Path p) {\n","filename":"jcheck\/src\/test\/java\/org\/openjdk\/skara\/jcheck\/TestRepository.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -178,1 +178,3 @@\n-    Optional<Hash> wholeHash(String hash);\n+    Optional<Hash> wholeHash(String rev);\n+\n+    Optional<List<String>> stagedFile(Path p);\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/ReadOnlyRepository.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1664,2 +1664,2 @@\n-    public Optional<Hash> wholeHash(String hash) {\n-        try (var p = capture(\"git\", \"rev-parse\", hash)) {\n+    public Optional<Hash> wholeHash(String rev) {\n+        try (var p = capture(\"git\", \"rev-parse\", rev)) {\n@@ -1673,0 +1673,11 @@\n+\n+    @Override\n+    public Optional<List<String>> stagedFile(Path path) {\n+        try (var p = capture(\"git\", \"cat-file\", \"-p\", \":\" + path.toString())) {\n+            var res = p.await();\n+            if(res.status() ==0){\n+                return Optional.of(res.stdout());\n+            }\n+        }\n+        return Optional.empty();\n+    }\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/git\/GitRepository.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -1513,1 +1513,1 @@\n-    public Optional<Hash> wholeHash(String hash) {\n+    public Optional<Hash> wholeHash(String rev) {\n@@ -1517,0 +1517,5 @@\n+\n+    @Override\n+    public Optional<List<String>> stagedFile(Path p) {\n+        return Optional.empty();\n+    }\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/hg\/HgRepository.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"}]}