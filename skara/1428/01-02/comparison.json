{"files":[{"patch":"@@ -27,1 +27,0 @@\n-import org.openjdk.skara.forge.*;\n@@ -29,2 +28,0 @@\n-import org.openjdk.skara.json.JSON;\n-import org.openjdk.skara.json.JSONValue;\n@@ -42,1 +39,0 @@\n-import java.util.regex.Pattern;\n@@ -46,0 +42,3 @@\n+import static org.openjdk.skara.jcheck.JCheck.STAGED_REV;\n+import static org.openjdk.skara.jcheck.JCheck.WORKING_TREE_REV;\n+\n@@ -146,0 +145,9 @@\n+                  .optional(),\n+            Switch.shortcut(\"\")\n+                  .fullname(\"staged\")\n+                  .helptext(\"Run jcheck includes staged changes and by default jcheck will use staged .jcheck\/conf\")\n+                  .optional(),\n+            Switch.shortcut(\"\")\n+                  .fullname(\"working-tree\")\n+                  .helptext(\"Run jcheck includes changes in working tree and by default \" +\n+                          \"jcheck will use .jcheck\/conf in working tree\")\n@@ -233,0 +241,9 @@\n+\n+        var staged = arguments.contains(\"staged\");\n+        var working_tree = arguments.contains(\"working-tree\");\n+        \/\/ This two flags are mutually exclusive\n+        if (staged && working_tree) {\n+            System.err.println(String.format(\"error: you can only choose one from staged or working-tree\"));\n+            return 1;\n+        }\n+\n@@ -274,1 +291,1 @@\n-        else if (confStaged) {\n+        else if (confStaged || (staged && !confFile && !confWorkingTree)) {\n@@ -288,1 +305,1 @@\n-        else if (confFile || confWorkingTree) {\n+        else if (confFile || confWorkingTree || working_tree) {\n@@ -303,0 +320,9 @@\n+        if (staged) {\n+            ranges.clear();\n+            ranges.add(STAGED_REV);\n+        }\n+        if (working_tree) {\n+            ranges.clear();\n+            ranges.add(WORKING_TREE_REV);\n+        }\n+\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/GitJCheck.java","additions":32,"deletions":6,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -58,2 +58,7 @@\n-        var prefix = \"[\" + i.check().name() + \"] \" + i.severity() + \": \" +\n-                     i.commit().hash().abbreviate() + \": \";\n+        String prefix = \"[\" + i.check().name() + \"] \" + i.severity() + \": \";\n+        Hash hash = i.commit().hash();\n+        if (hash.hex().equals(\"staged\") || hash.hex().equals(\"working-tree\")) {\n+            prefix += hash.hex() + \": \";\n+        } else {\n+            prefix += i.commit().hash().abbreviate() + \": \";\n+        }\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/JCheckCLIVisitor.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -51,0 +51,4 @@\n+    public final static String WORKING_TREE_REV = \"SKARA_GIT_WORKING_TREE_AS_REV\";\n+\n+    public final static String STAGED_REV = \"SKARA_GIT_STAGED_AS_REV\";\n+\n@@ -215,1 +219,8 @@\n-        var commitIssues = commitIssues(commits);\n+        Iterator<Issue> commitIssues;\n+        if (revisionRange.equals(STAGED_REV)) {\n+            commitIssues = checkCommit(repository.staged());\n+        } else if (revisionRange.equals(WORKING_TREE_REV)) {\n+            commitIssues = checkCommit(repository.workingTree());\n+        } else {\n+            commitIssues = commitIssues(commits);\n+        }\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/JCheck.java","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -360,0 +360,10 @@\n+\n+    @Override\n+    public Commit staged() {\n+        return null;\n+    }\n+\n+    @Override\n+    public Commit workingTree() {\n+        return null;\n+    }\n","filename":"jcheck\/src\/test\/java\/org\/openjdk\/skara\/jcheck\/TestRepository.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -181,0 +181,4 @@\n+\n+    Commit staged() throws IOException;\n+\n+    Commit workingTree() throws IOException;\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/ReadOnlyRepository.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1678,1 +1678,1 @@\n-            if(res.status() ==0){\n+            if (res.status() == 0) {\n@@ -1684,0 +1684,39 @@\n+\n+    @Override\n+    public Commit staged() throws IOException {\n+        var author = new Author(\"jcheck\", \"jcheck@none.none\");\n+        var commitMetaData = new CommitMetadata(new Hash(\"staged\"), List.of(head()), author, ZonedDateTime.now(),\n+                author, ZonedDateTime.now(), List.of(\"\"));\n+        return new Commit(commitMetaData, List.of(diffStaged()));\n+    }\n+\n+    @Override\n+    public Commit workingTree() throws IOException {\n+        var author = new Author(\"jcheck\", \"jcheck@none.none\");\n+        var commitMetaData = new CommitMetadata(new Hash(\"working-tree\"), List.of(head()), author, ZonedDateTime.now(),\n+                author, ZonedDateTime.now(), List.of(\"\"));\n+        return new Commit(commitMetaData, List.of(diff(head())));\n+    }\n+\n+    private Diff diffStaged() throws IOException {\n+        var cmd = new ArrayList<>(List.of(\"git\", \"-c\", \"core.quotePath=false\", \"diff\", \"--patch\", \"--cached\",\n+                \"--find-renames=\" + \"90\" + \"%\",\n+                \"--find-copies=\" + \"90\" + \"%\",\n+                \"--find-copies-harder\",\n+                \"--binary\",\n+                \"--raw\",\n+                \"--no-abbrev\",\n+                \"--unified=0\",\n+                \"--no-color\"));\n+        cmd.add(head().hex());\n+\n+        var p = start(cmd);\n+        try {\n+            var patches = GitRawDiffParser.parse(p.getInputStream());\n+            await(p);\n+            return new Diff(head(), null, patches);\n+        } catch (Throwable t) {\n+            stop(p);\n+            throw t;\n+        }\n+    }\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/git\/GitRepository.java","additions":40,"deletions":1,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -1514,2 +1514,1 @@\n-        \/\/TODO: implement it later or not\n-        return Optional.empty();\n+        throw new UnsupportedOperationException();\n@@ -1520,1 +1519,11 @@\n-        return Optional.empty();\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public Commit staged() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public Commit workingTree() {\n+        throw new UnsupportedOperationException();\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/hg\/HgRepository.java","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"}]}