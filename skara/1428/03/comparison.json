{"files":[{"patch":"@@ -27,1 +27,0 @@\n-import org.openjdk.skara.forge.*;\n@@ -29,2 +28,0 @@\n-import org.openjdk.skara.json.JSON;\n-import org.openjdk.skara.json.JSONValue;\n@@ -42,1 +39,0 @@\n-import java.util.regex.Pattern;\n@@ -46,0 +42,3 @@\n+import static org.openjdk.skara.jcheck.JCheck.STAGED_REV;\n+import static org.openjdk.skara.jcheck.JCheck.WORKING_TREE_REV;\n+\n@@ -101,0 +100,10 @@\n+            Option.shortcut(\"\")\n+                  .fullname(\"conf-rev\")\n+                  .describe(\"REV\")\n+                  .helptext(\"Use .jcheck\/conf in the specified revision\")\n+                  .optional(),\n+            Option.shortcut(\"\")\n+                  .fullname(\"conf-file\")\n+                  .describe(\"FILE\")\n+                  .helptext(\"Use this file as jcheck configuration instead of .jcheck\/conf\")\n+                  .optional(),\n@@ -128,0 +137,16 @@\n+                  .optional(),\n+            Switch.shortcut(\"\")\n+                  .fullname(\"conf-staged\")\n+                  .helptext(\"Use staged .jcheck\/conf\")\n+                  .optional(),\n+            Switch.shortcut(\"\")\n+                  .fullname(\"conf-working-tree\")\n+                  .helptext(\"Use .jcheck\/conf in current working tree\")\n+                  .optional(),\n+            Switch.shortcut(\"\")\n+                  .fullname(\"staged\")\n+                  .helptext(\"Check staged changes as if they were committed\")\n+                  .optional(),\n+            Switch.shortcut(\"\")\n+                  .fullname(\"working-tree\")\n+                  .helptext(\"Check changes in working tree as if they were committed\")\n@@ -216,0 +241,87 @@\n+        var staged = arguments.contains(\"staged\");\n+        var working_tree = arguments.contains(\"working-tree\");\n+        \/\/ These two flags are mutually exclusive\n+        if (staged && working_tree) {\n+            System.err.println(String.format(\"error: can only use one of --staged or --working-tree\"));\n+            return 1;\n+        }\n+\n+        var confRev = arguments.contains(\"conf-rev\");\n+        var confStaged = arguments.contains(\"conf-staged\");\n+        var confWorkingTree = arguments.contains(\"conf-working-tree\");\n+        var confFile = arguments.contains(\"conf-file\");\n+\n+        int confFlagCount = 0;\n+        if (confRev) {\n+            confFlagCount++;\n+        }\n+        if (confStaged) {\n+            confFlagCount++;\n+        }\n+        if (confWorkingTree) {\n+            confFlagCount++;\n+        }\n+        if (confFile) {\n+            confFlagCount++;\n+        }\n+        \/\/ This four flags are mutually exclusive\n+        if (confFlagCount > 1) {\n+            System.err.println(String.format(\"error: you can only choose one from using jcheck \" +\n+                    \"configuration in work space or in a specified commit\"));\n+            return 1;\n+        }\n+        JCheckConfiguration overridingConfig = null;\n+        \/\/ Using jcheck configuration in a specified rev\n+        if (confRev) {\n+            var rev = arguments.get(\"conf-rev\").asString();\n+            var confCommitHash = repo.wholeHash(rev);\n+            if (confCommitHash.isEmpty()) {\n+                System.err.println(String.format(\"error: rev %s is invalid!\", rev));\n+                return 1;\n+            }\n+            try {\n+                overridingConfig = JCheck.parseConfiguration(repo, confCommitHash.get(), List.of()).get();\n+            } catch (IllegalArgumentException e) {\n+                System.err.println(String.format(\"error: Invalid jcheck configuration: %s\", e.getMessage()));\n+                return 1;\n+            }\n+        }\n+        \/\/ Using staged jcheck configuration\n+        else if (confStaged || (staged && !confFile && !confWorkingTree)) {\n+            var content = repo.stagedFile(Path.of(\".jcheck\/conf\"));\n+            if (content.isEmpty()) {\n+                System.err.println(String.format(\"error: .jcheck\/conf doesn't exist!\"));\n+                return 1;\n+            }\n+            try {\n+                overridingConfig = JCheck.parseConfiguration(content.get(), List.of()).get();\n+            } catch (IllegalArgumentException e) {\n+                System.err.println(String.format(\"error: Invalid jcheck configuration: %s\", e.getMessage()));\n+                return 1;\n+            }\n+        }\n+        \/\/ Using pointed file as jcheck configuration or jcheck configuration in current working tree\n+        else if (confFile || confWorkingTree || working_tree) {\n+            var fileName = confFile ? arguments.get(\"conf-file\").asString() : \".jcheck\/conf\";\n+            try {\n+                var content = Files.readAllBytes(Path.of(fileName));\n+                var lines = new String(content, StandardCharsets.UTF_8).lines().toList();\n+                overridingConfig = JCheck.parseConfiguration(lines, List.of()).get();\n+            } catch (NoSuchFileException e) {\n+                System.err.println(String.format(\"error: File %s doesn't exist!\", fileName));\n+                return 1;\n+            } catch (IllegalArgumentException e) {\n+                System.err.println(String.format(\"error: Invalid jcheck configuration: %s,\", e.getMessage()));\n+                return 1;\n+            }\n+        }\n+\n+        if (staged) {\n+            ranges.clear();\n+            ranges.add(STAGED_REV);\n+        }\n+        if (working_tree) {\n+            ranges.clear();\n+            ranges.add(WORKING_TREE_REV);\n+        }\n+\n@@ -220,1 +332,1 @@\n-            try (var errors = JCheck.check(repo, census, commitMessageParser, range)) {\n+            try (var errors = JCheck.check(repo, census, commitMessageParser, range, overridingConfig)) {\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/GitJCheck.java","additions":117,"deletions":5,"binary":false,"changes":122,"status":"modified"},{"patch":"@@ -58,2 +58,7 @@\n-        var prefix = \"[\" + i.check().name() + \"] \" + i.severity() + \": \" +\n-                     i.commit().hash().abbreviate() + \": \";\n+        String prefix = \"[\" + i.check().name() + \"] \" + i.severity() + \": \";\n+        Hash hash = i.commit().hash();\n+        if (hash.hex().equals(\"staged\") || hash.hex().equals(\"working-tree\")) {\n+            prefix += hash.hex() + \": \";\n+        } else {\n+            prefix += i.commit().hash().abbreviate() + \": \";\n+        }\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/JCheckCLIVisitor.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -51,0 +51,4 @@\n+    public final static String WORKING_TREE_REV = \"SKARA_GIT_WORKING_TREE_AS_REV\";\n+\n+    public final static String STAGED_REV = \"SKARA_GIT_STAGED_AS_REV\";\n+\n@@ -215,1 +219,8 @@\n-        var commitIssues = commitIssues(commits);\n+        Iterator<Issue> commitIssues;\n+        if (revisionRange.equals(STAGED_REV)) {\n+            commitIssues = checkCommit(repository.staged());\n+        } else if (revisionRange.equals(WORKING_TREE_REV)) {\n+            commitIssues = checkCommit(repository.workingTree());\n+        } else {\n+            commitIssues = commitIssues(commits);\n+        }\n@@ -259,1 +270,2 @@\n-                               String revisionRange) throws IOException {\n+                               String revisionRange,\n+                               JCheckConfiguration overridingConfig) throws IOException {\n@@ -273,1 +285,1 @@\n-        return check(repository, parser, branchRegex, tagRegex, revisionRange, List.of(), null, census);\n+        return check(repository, parser, branchRegex, tagRegex, revisionRange, List.of(), overridingConfig, census);\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/JCheck.java","additions":15,"deletions":3,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -299,1 +299,1 @@\n-            try (var issues = JCheck.check(repo, census, CommitMessageParsers.v1, first.hex() + \"..\" + second.hex())) {\n+            try (var issues = JCheck.check(repo, census, CommitMessageParsers.v1, first.hex() + \"..\" + second.hex(), null)) {\n@@ -332,1 +332,1 @@\n-            try (var issues = JCheck.check(repo, census, CommitMessageParsers.v1, range)) {\n+            try (var issues = JCheck.check(repo, census, CommitMessageParsers.v1, range, null)) {\n","filename":"jcheck\/src\/test\/java\/org\/openjdk\/skara\/jcheck\/JCheckTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -350,0 +350,20 @@\n+\n+    @Override\n+    public Optional<Hash> wholeHash(String rev) {\n+        return Optional.empty();\n+    }\n+\n+    @Override\n+    public Optional<List<String>> stagedFile(Path p) {\n+        return Optional.empty();\n+    }\n+\n+    @Override\n+    public Commit staged() {\n+        return null;\n+    }\n+\n+    @Override\n+    public Commit workingTree() {\n+        return null;\n+    }\n","filename":"jcheck\/src\/test\/java\/org\/openjdk\/skara\/jcheck\/TestRepository.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -177,0 +177,8 @@\n+\n+    Optional<Hash> wholeHash(String rev);\n+\n+    Optional<List<String>> stagedFile(Path p);\n+\n+    Commit staged() throws IOException;\n+\n+    Commit workingTree() throws IOException;\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/ReadOnlyRepository.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1662,0 +1662,61 @@\n+\n+    @Override\n+    public Optional<Hash> wholeHash(String rev) {\n+        try (var p = capture(\"git\", \"rev-parse\", rev)) {\n+            var res = p.await();\n+            if (res.status() == 0 && res.stdout().size() == 1) {\n+                return Optional.of(new Hash(res.stdout().get(0)));\n+            }\n+            return Optional.empty();\n+        }\n+    }\n+\n+    @Override\n+    public Optional<List<String>> stagedFile(Path path) {\n+        try (var p = capture(\"git\", \"cat-file\", \"-p\", \":\" + path.toString())) {\n+            var res = p.await();\n+            if (res.status() == 0) {\n+                return Optional.of(res.stdout());\n+            }\n+        }\n+        return Optional.empty();\n+    }\n+\n+    @Override\n+    public Commit staged() throws IOException {\n+        var author = new Author(\"jcheck\", \"jcheck@none.none\");\n+        var commitMetaData = new CommitMetadata(new Hash(\"staged\"), List.of(head()), author, ZonedDateTime.now(),\n+                author, ZonedDateTime.now(), List.of(\"\"));\n+        return new Commit(commitMetaData, List.of(diffStaged()));\n+    }\n+\n+    @Override\n+    public Commit workingTree() throws IOException {\n+        var author = new Author(\"jcheck\", \"jcheck@none.none\");\n+        var commitMetaData = new CommitMetadata(new Hash(\"working-tree\"), List.of(head()), author, ZonedDateTime.now(),\n+                author, ZonedDateTime.now(), List.of(\"\"));\n+        return new Commit(commitMetaData, List.of(diff(head())));\n+    }\n+\n+    private Diff diffStaged() throws IOException {\n+        var cmd = new ArrayList<>(List.of(\"git\", \"-c\", \"core.quotePath=false\", \"diff\", \"--patch\", \"--cached\",\n+                \"--find-renames=\" + \"90\" + \"%\",\n+                \"--find-copies=\" + \"90\" + \"%\",\n+                \"--find-copies-harder\",\n+                \"--binary\",\n+                \"--raw\",\n+                \"--no-abbrev\",\n+                \"--unified=0\",\n+                \"--no-color\"));\n+        cmd.add(head().hex());\n+\n+        var p = start(cmd);\n+        try {\n+            var patches = GitRawDiffParser.parse(p.getInputStream());\n+            await(p);\n+            return new Diff(head(), null, patches);\n+        } catch (Throwable t) {\n+            stop(p);\n+            throw t;\n+        }\n+    }\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/git\/GitRepository.java","additions":61,"deletions":0,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -1511,0 +1511,20 @@\n+\n+    @Override\n+    public Optional<Hash> wholeHash(String rev) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public Optional<List<String>> stagedFile(Path p) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public Commit staged() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public Commit workingTree() {\n+        throw new UnsupportedOperationException();\n+    }\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/hg\/HgRepository.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"}]}