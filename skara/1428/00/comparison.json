{"files":[{"patch":"@@ -101,0 +101,11 @@\n+            Option.shortcut(\"\")\n+                  .fullname(\"specified-conf-commit\")\n+                  .describe(\"COMMIT HASH\")\n+                  .helptext(\"Use jcheck configuration in specified commit\")\n+                  .optional(),\n+            Option.shortcut(\"\")\n+                  .fullname(\"conf-file\")\n+                  .describe(\"FILE\")\n+                  .helptext(\"Use this file as jcheck configuration instead of .jcheck\/conf, \" +\n+                          \"this flag can only be used when 'workspace-conf' is enabled\")\n+                  .optional(),\n@@ -128,0 +139,9 @@\n+                  .optional(),\n+            Switch.shortcut(\"\")\n+                  .fullname(\"workspace-conf\")\n+                  .helptext(\"Use jcheck configuration in current workspace\")\n+                  .optional(),\n+            Switch.shortcut(\"\")\n+                  .fullname(\"workspace-diff\")\n+                  .helptext(\"Run jcheck includes diff in workspace(either staged or not), \" +\n+                          \"Please note that after run jcheck with this flag, all your staged diff will be unstaged\")\n@@ -216,0 +236,48 @@\n+        JCheckConfiguration overridingConfig = null;\n+        \/\/ This two flags are mutually exclusive\n+        if (arguments.contains(\"workspace-conf\") && arguments.contains(\"specified-conf-commit\")) {\n+            System.err.println(String.format(\"error: you can only choose one from using jcheck \" +\n+                    \"configuration in work space or in a specified commit\"));\n+            return 1;\n+        }\n+        \/\/ Using jcheck configuration in workspace\n+        if (arguments.contains(\"workspace-conf\")) {\n+            String confFileName = \".jcheck\/conf\";\n+            if (arguments.contains(\"conf-file\")) {\n+                confFileName = arguments.get(\"conf-file\").asString();\n+            }\n+            try {\n+                var content = Files.readAllBytes(Path.of(confFileName));\n+                var lines = new String(content, StandardCharsets.UTF_8).lines().toList();\n+                overridingConfig = JCheck.parseConfiguration(lines, List.of()).get();\n+            } catch (NoSuchFileException e) {\n+                System.err.println(String.format(\"error: File %s doesn't exist!\", confFileName));\n+                return 1;\n+            } catch (IllegalArgumentException e) {\n+                System.err.println(String.format(\"error: Invalid jcheck configuration: %s,\", e.getMessage()));\n+                return 1;\n+            }\n+        }\n+        \/\/ Using jcheck configuration in a specified commit\n+        if (arguments.contains(\"specified-conf-commit\")) {\n+            var shortHash = arguments.get(\"specified-conf-commit\").asString();\n+            var confCommitHash = repo.wholeHash(shortHash);\n+            if (confCommitHash.isEmpty()) {\n+                System.err.println(String.format(\"error: commit %s is invalid!\", shortHash));\n+                return 1;\n+            }\n+            try {\n+                overridingConfig = JCheck.parseConfiguration(repo, confCommitHash.get(), List.of()).get();\n+            } catch (IllegalArgumentException e) {\n+                System.err.println(String.format(\"error: Invalid jcheck configuration: %s\", e.getMessage()));\n+                return 1;\n+            }\n+        }\n+        \/\/ Commit local changes temporarily\n+        Boolean checkWorkspaceDiff = arguments.contains(\"workspace-diff\");\n+        Hash originHash = null;\n+        if (checkWorkspaceDiff) {\n+            originHash = repo.head();\n+            repo.add(Paths.get(\".\"));\n+            repo.commit(\"temp commit\", \"jcheck\", \"jcheck@openjdk.com\");\n+        }\n@@ -220,1 +288,1 @@\n-            try (var errors = JCheck.check(repo, census, commitMessageParser, range)) {\n+            try (var errors = JCheck.check(repo, census, commitMessageParser, range, overridingConfig)) {\n@@ -224,0 +292,6 @@\n+            } catch (Exception e) {\n+                System.err.println(String.format(\"error: JCheck failed due to exception: %s\", e.getMessage()));\n+                if (checkWorkspaceDiff) {\n+                    repo.reset(originHash, false);\n+                }\n+                return 1;\n@@ -226,0 +300,4 @@\n+        \/\/ Reset the changes\n+        if (checkWorkspaceDiff) {\n+            repo.reset(originHash, false);\n+        }\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/GitJCheck.java","additions":79,"deletions":1,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -259,1 +259,2 @@\n-                               String revisionRange) throws IOException {\n+                               String revisionRange,\n+                               JCheckConfiguration overridingConfig) throws IOException {\n@@ -273,1 +274,1 @@\n-        return check(repository, parser, branchRegex, tagRegex, revisionRange, List.of(), null, census);\n+        return check(repository, parser, branchRegex, tagRegex, revisionRange, List.of(), overridingConfig, census);\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/JCheck.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -299,1 +299,1 @@\n-            try (var issues = JCheck.check(repo, census, CommitMessageParsers.v1, first.hex() + \"..\" + second.hex())) {\n+            try (var issues = JCheck.check(repo, census, CommitMessageParsers.v1, first.hex() + \"..\" + second.hex(), null)) {\n@@ -332,1 +332,1 @@\n-            try (var issues = JCheck.check(repo, census, CommitMessageParsers.v1, range)) {\n+            try (var issues = JCheck.check(repo, census, CommitMessageParsers.v1, range, null)) {\n","filename":"jcheck\/src\/test\/java\/org\/openjdk\/skara\/jcheck\/JCheckTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -350,0 +350,5 @@\n+\n+    @Override\n+    public Optional<Hash> wholeHash(String hash) {\n+        return Optional.empty();\n+    }\n","filename":"jcheck\/src\/test\/java\/org\/openjdk\/skara\/jcheck\/TestRepository.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -177,0 +177,2 @@\n+\n+    Optional<Hash> wholeHash(String hash);\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/ReadOnlyRepository.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1662,0 +1662,11 @@\n+\n+    @Override\n+    public Optional<Hash> wholeHash(String hash) {\n+        try (var p = capture(\"git\", \"rev-parse\", hash)) {\n+            var res = p.await();\n+            if (res.status() == 0 && res.stdout().size() == 1) {\n+                return Optional.of(new Hash(res.stdout().get(0)));\n+            }\n+            return Optional.empty();\n+        }\n+    }\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/git\/GitRepository.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1511,0 +1511,6 @@\n+\n+    @Override\n+    public Optional<Hash> wholeHash(String hash) {\n+        \/\/TODO: implement it later or not\n+        return Optional.empty();\n+    }\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/hg\/HgRepository.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}