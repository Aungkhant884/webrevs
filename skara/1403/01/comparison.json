{"files":[{"patch":"@@ -49,0 +49,2 @@\n+    private static final int GITHUB_PR_COMMENT_BODY_MAX_SIZE = 64_000;\n+\n@@ -354,0 +356,1 @@\n+        body = limitBodySize(body);\n@@ -367,0 +370,1 @@\n+        body = limitBodySize(body);\n@@ -786,0 +790,8 @@\n+\n+    public String limitBodySize(String body) {\n+        if (body.length() > GITHUB_PR_COMMENT_BODY_MAX_SIZE) {\n+            return body.substring(0, GITHUB_PR_COMMENT_BODY_MAX_SIZE)\n+                    + \"...\";\n+        }\n+        return body;\n+    }\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubPullRequest.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -54,0 +54,2 @@\n+    private static final int GITLAB_MR_COMMENT_BODY_MAX_SIZE = 64_000;\n+\n@@ -399,0 +401,1 @@\n+        body = limitBodySize(body);\n@@ -415,0 +418,1 @@\n+        body =  limitBodySize(body);\n@@ -892,0 +896,8 @@\n+\n+    private String limitBodySize(String body) {\n+        if (body.length() > GITLAB_MR_COMMENT_BODY_MAX_SIZE) {\n+            return body.substring(0, GITLAB_MR_COMMENT_BODY_MAX_SIZE)\n+                    + \"...\";\n+        }\n+        return body;\n+    }\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabMergeRequest.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import org.openjdk.skara.issuetracker.Comment;\n@@ -132,0 +133,18 @@\n+\n+    @Test\n+    void testOversizeComment() {\n+        var testRepoOpt = githubHost.repository(\"openjdk\/playground\");\n+        assumeTrue(testRepoOpt.isPresent());\n+        var testRepo = testRepoOpt.get();\n+        var testPr = testRepo.pullRequest(\"99\");\n+\n+        \/\/ Test add comment\n+        Comment comment = testPr.addComment(\"1\".repeat(1_000_000));\n+        assertTrue(comment.body().contains(\"...\"));\n+        assertTrue(comment.body().contains(\"1\"));\n+\n+        \/\/ Test update comment\n+        Comment updateComment = testPr.updateComment(comment.id(), \"2\".repeat(2_000_000));\n+        assertTrue(updateComment.body().contains(\"...\"));\n+        assertTrue(updateComment.body().contains(\"2\"));\n+    }\n","filename":"forge\/src\/test\/java\/org\/openjdk\/skara\/forge\/github\/GitHubRestApiTests.java","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import org.openjdk.skara.issuetracker.Comment;\n@@ -36,0 +37,1 @@\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -108,0 +110,22 @@\n+\n+    @Test\n+    void testOversizeComment() throws IOException {\n+        var settings = ManualTestSettings.loadManualTestSettings();\n+        var username = settings.getProperty(\"gitlab.user\");\n+        var token = settings.getProperty(\"gitlab.pat\");\n+        var credential = new Credential(username, token);\n+        var uri = URIBuilder.base(settings.getProperty(\"gitlab.uri\")).build();\n+        var gitLabHost = new GitLabHost(\"gitlab\", uri, false, credential, Set.of());\n+        var gitLabRepo = gitLabHost.repository(settings.getProperty(\"gitlab.repository\")).orElseThrow();\n+        var gitLabMergeRequest = gitLabRepo.pullRequest(settings.getProperty(\"gitlab.merge.request.id\"));\n+\n+        \/\/ Test add comment\n+        Comment comment = gitLabMergeRequest.addComment(\"1\".repeat(1_000_000));\n+        assertTrue(comment.body().contains(\"...\"));\n+        assertTrue(comment.body().contains(\"1\"));\n+\n+        \/\/ Test update comment\n+        Comment updateComment = gitLabMergeRequest.updateComment(comment.id(), \"2\".repeat(2_000_000));\n+        assertTrue(updateComment.body().contains(\"...\"));\n+        assertTrue(updateComment.body().contains(\"2\"));\n+    }\n","filename":"forge\/src\/test\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabRestApiTest.java","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"}]}