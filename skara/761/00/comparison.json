{"files":[{"patch":"@@ -43,0 +43,1 @@\n+    implementation project(':jcheck')\n","filename":"bots\/tester\/build.gradle","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+    requires org.openjdk.skara.census;\n+    requires org.openjdk.skara.jcheck;\n","filename":"bots\/tester\/src\/main\/java\/module-info.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,4 @@\n+import org.openjdk.skara.census.Census;\n+import org.openjdk.skara.jcheck.JCheckConfiguration;\n+import org.openjdk.skara.vcs.Repository;\n+import org.openjdk.skara.host.HostUser;\n@@ -35,0 +39,1 @@\n+import java.util.function.Predicate;\n@@ -58,0 +63,3 @@\n+    private final HostedRepository censusRemote;\n+    private final Path censusDir;\n+    private final boolean checkCommitterStatus;\n@@ -66,1 +74,4 @@\n-            HostedRepository repo) {\n+            HostedRepository repo,\n+            HostedRepository censusRemote,\n+            Path censusDir,\n+            boolean checkCommitterStatus) {\n@@ -77,0 +88,3 @@\n+        this.censusRemote = censusRemote;\n+        this.censusDir = censusDir;\n+        this.checkCommitterStatus = checkCommitterStatus;\n@@ -81,0 +95,23 @@\n+        Predicate<HostUser> isCommitter = null;\n+        if (checkCommitterStatus) {\n+            try {\n+                var censusRepo = Repository.materialize(censusDir, censusRemote.url(), \"master\");\n+                var census = Census.parse(censusDir);\n+                var namespace = census.namespace(repo.namespace());\n+                var jcheckConf = repo.fileContents(\".jcheck\/conf\", \"master\");\n+                var jcheck = JCheckConfiguration.parse(jcheckConf.lines().collect(Collectors.toList()));\n+                var project = census.project(jcheck.general().project());\n+                isCommitter = u -> {\n+                   var contributor = namespace.get(u.id());\n+                   if (contributor == null) {\n+                       return false;\n+                   }\n+                   return project.isCommitter(contributor.username(), census.version().format());\n+                };\n+            } catch (IOException e) {\n+                throw new UncheckedIOException(e);\n+            }\n+        } else {\n+            isCommitter = u -> true;\n+        }\n+\n@@ -94,1 +131,2 @@\n-                                         pr));\n+                                         pr,\n+                                         isCommitter));\n@@ -133,1 +171,2 @@\n-                                                 pr));\n+                                                 pr,\n+                                                 isCommitter));\n","filename":"bots\/tester\/src\/main\/java\/org\/openjdk\/skara\/bots\/tester\/TestBot.java","additions":42,"deletions":3,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -54,0 +54,10 @@\n+        var censusDir = storage.resolve(\"census.git\");\n+        try {\n+            Files.createDirectories(censusDir);\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+        var censusRemote = configuration.repository(specific.get(\"census\").asString());\n+        var checkCommitterStatus = specific.contains(\"role\") &&\n+                                   specific.get(\"role\").asString().toLowerCase().equals(\"committer\");\n+\n@@ -62,1 +72,1 @@\n-            ret.add(new TestBot(ci, approvers, allowlist, availableJobs, defaultJobs, name, storage, hostedRepo));\n+            ret.add(new TestBot(ci, approvers, allowlist, availableJobs, defaultJobs, name, storage, hostedRepo, censusRemote, censusDir, checkCommitterStatus));\n","filename":"bots\/tester\/src\/main\/java\/org\/openjdk\/skara\/bots\/tester\/TestBotFactory.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -51,0 +51,1 @@\n+    private final Predicate<HostUser> isCommitter;\n@@ -53,1 +54,1 @@\n-                 List<String> defaultJobs, String name, Path storage, PullRequest pr) {\n+                 List<String> defaultJobs, String name, Path storage, PullRequest pr, Predicate<HostUser> isCommitter) {\n@@ -63,0 +64,1 @@\n+        this.isCommitter = isCommitter;\n@@ -255,1 +257,1 @@\n-        return forge.isMemberOf(approversGroupId, u) || allowlist.contains(u.id());\n+        return isCommitter.test(u) && (forge.isMemberOf(approversGroupId, u) || allowlist.contains(u.id()));\n","filename":"bots\/tester\/src\/main\/java\/org\/openjdk\/skara\/bots\/tester\/TestWorkItem.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -52,1 +52,2 @@\n-            var bot = new TestBot(ci, \"0\", Set.of(), List.of(), List.of(), \"\", storage, upstreamHostedRepo);\n+            var bot = new TestBot(ci, \"0\", Set.of(), List.of(), List.of(), \"\",\n+                                  storage, upstreamHostedRepo, null, null, false);\n","filename":"bots\/tester\/src\/test\/java\/org\/openjdk\/skara\/bots\/tester\/TestBotTests.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -67,1 +67,2 @@\n-            var item = new TestWorkItem(ci, approvers, Set.of(), available, defaultJobs, name, storage, pr);\n+            var item = new TestWorkItem(ci, approvers, Set.of(), available, defaultJobs, name, storage, pr,\n+                                        u -> true);\n@@ -102,1 +103,2 @@\n-            var item = new TestWorkItem(ci, approvers, Set.of(), available, defaultJobs, name, storage, pr);\n+            var item = new TestWorkItem(ci, approvers, Set.of(), available, defaultJobs, name, storage, pr,\n+                                        u -> true);\n@@ -138,1 +140,2 @@\n-            var item = new TestWorkItem(ci, approvers, Set.of(), available, defaultJobs, name, storage, pr);\n+            var item = new TestWorkItem(ci, approvers, Set.of(), available, defaultJobs, name, storage, pr,\n+                                        u -> true);\n@@ -176,1 +179,2 @@\n-            var item = new TestWorkItem(ci, approvers, Set.of(), available, defaultJobs, name, storage, pr);\n+            var item = new TestWorkItem(ci, approvers, Set.of(), available, defaultJobs, name, storage, pr,\n+                                        u -> true);\n@@ -223,1 +227,2 @@\n-            var item = new TestWorkItem(ci, approvers, Set.of(), available, defaultJobs, name, storage, pr);\n+            var item = new TestWorkItem(ci, approvers, Set.of(), available, defaultJobs, name, storage, pr,\n+                                        u -> true);\n@@ -304,1 +309,2 @@\n-            var item = new TestWorkItem(ci, approvers, Set.of(), available, defaultJobs, name, storage, pr);\n+            var item = new TestWorkItem(ci, approvers, Set.of(), available, defaultJobs, name, storage, pr,\n+                                        u -> true);\n@@ -345,1 +351,2 @@\n-            var item = new TestWorkItem(ci, approvers, Set.of(), available, defaultJobs, name, storage, pr);\n+            var item = new TestWorkItem(ci, approvers, Set.of(), available, defaultJobs, name, storage, pr,\n+                                        u -> true);\n@@ -429,1 +436,2 @@\n-            var item = new TestWorkItem(ci, approvers, Set.of(), available, defaultJobs, name, storage, pr);\n+            var item = new TestWorkItem(ci, approvers, Set.of(), available, defaultJobs, name, storage, pr,\n+                                        u -> true);\n@@ -516,1 +524,2 @@\n-            var item = new TestWorkItem(ci, approvers, Set.of(), available, defaultJobs, name, storage, pr);\n+            var item = new TestWorkItem(ci, approvers, Set.of(), available, defaultJobs, name, storage, pr,\n+                                        u -> true);\n@@ -624,1 +633,2 @@\n-            var item = new TestWorkItem(ci, approvers, Set.of(), available, defaultJobs, name, storage, pr);\n+            var item = new TestWorkItem(ci, approvers, Set.of(), available, defaultJobs, name, storage, pr,\n+                                        u -> true);\n@@ -749,1 +759,2 @@\n-            var item = new TestWorkItem(ci, approvers, Set.of(), available, defaultJobs, name, storage, pr);\n+            var item = new TestWorkItem(ci, approvers, Set.of(), available, defaultJobs, name, storage, pr,\n+                                        u -> true);\n@@ -837,1 +848,2 @@\n-            var item = new TestWorkItem(ci, approvers, Set.of(), available, defaultJobs, name, storage, pr);\n+            var item = new TestWorkItem(ci, approvers, Set.of(), available, defaultJobs, name, storage, pr,\n+                                        u -> true);\n@@ -990,1 +1002,2 @@\n-            var item = new TestWorkItem(ci, approvers, Set.of(\"0\"), available, defaultJobs, name, storage, pr);\n+            var item = new TestWorkItem(ci, approvers, Set.of(\"0\"), available, defaultJobs, name, storage, pr,\n+                                        u -> true);\n@@ -1026,0 +1039,82 @@\n+\n+    @Test\n+    void testCommentFromNonCommitterShouldRequireApproval() throws IOException {\n+        try (var tmp = new TemporaryDirectory()) {\n+            var ci = new InMemoryContinuousIntegration();\n+            var approvers = \"0\";\n+            var available = List.of(\"tier1\", \"tier2\", \"tier3\");\n+            var defaultJobs = List.of(\"tier1\");\n+            var name = \"test\";\n+            var storage = tmp.path().resolve(\"storage\");\n+            var scratch = tmp.path().resolve(\"storage\");\n+\n+            var bot = new HostUser(1, \"bot\", \"openjdk [bot]\");\n+            var host = new InMemoryHost();\n+            host.currentUserDetails = bot;\n+\n+            var repo = new InMemoryHostedRepository();\n+            repo.host = host;\n+\n+            var pr = new InMemoryPullRequest();\n+            pr.repository = repo;\n+\n+            var duke = new HostUser(0, \"duke\", \"Duke\");\n+            host.groups = Map.of(approvers, Set.of(duke));\n+            pr.author = duke;\n+            pr.headHash = new Hash(\"01234567890123456789012345789012345789\");\n+\n+            var now = ZonedDateTime.now();\n+            var comment = new Comment(\"0\", \"\/test foobar\", duke, now, now);\n+            pr.comments = new ArrayList<>(List.of(comment));\n+\n+            var item = new TestWorkItem(ci, approvers, Set.of(), available, defaultJobs, name, storage, pr,\n+                                        u -> false);\n+\n+            \/\/ Non-existing test group should result in error\n+            item.run(scratch);\n+\n+            var comments = pr.comments();\n+            assertEquals(2, comments.size());\n+            assertEquals(comment, comments.get(0));\n+\n+            var secondComment = comments.get(1);\n+            assertEquals(bot, secondComment.author());\n+\n+            var lines = secondComment.body().split(\"\\n\");\n+            assertEquals(2, lines.length);\n+            assertEquals(\"<!-- TEST ERROR -->\", lines[0]);\n+            assertEquals(\"@duke the test group foobar does not exist\", lines[1]);\n+\n+            \/\/ Trying to test again should be fine\n+            var thirdComment = new Comment(\"2\", \"\/test tier1\", duke, now, now);\n+            pr.comments.add(thirdComment);\n+            item.run(scratch);\n+\n+            comments = pr.comments();\n+            assertEquals(4, comments.size());\n+            assertEquals(comment, comments.get(0));\n+            assertEquals(secondComment, comments.get(1));\n+            assertEquals(thirdComment, comments.get(2));\n+\n+            var fourthComment = comments.get(3);\n+            assertEquals(bot, fourthComment.author());\n+\n+            lines = fourthComment.body().split(\"\\n\");\n+            assertEquals(\"<!-- TEST PENDING -->\", lines[0]);\n+            assertEquals(\"<!-- 01234567890123456789012345789012345789 -->\", lines[1]);\n+            assertEquals(\"<!-- tier1 -->\", lines[2]);\n+            assertEquals(\"@duke you need to get approval to run the tests in tier1 for commits up until 01234567\",\n+                         lines[3]);\n+\n+            \/\/ Nothing should change if we run it yet again\n+            item.run(scratch);\n+\n+            comments = pr.comments();\n+            assertEquals(4, comments.size());\n+            assertEquals(comment, comments.get(0));\n+            assertEquals(secondComment, comments.get(1));\n+            assertEquals(thirdComment, comments.get(2));\n+            assertEquals(fourthComment, comments.get(3));\n+        }\n+    }\n+\n","filename":"bots\/tester\/src\/test\/java\/org\/openjdk\/skara\/bots\/tester\/TestWorkItemTests.java","additions":108,"deletions":13,"binary":false,"changes":121,"status":"modified"}]}