{"files":[{"patch":"@@ -33,0 +33,1 @@\n+import java.util.logging.Logger;\n@@ -36,0 +37,2 @@\n+    private final Logger log = Logger.getLogger(\"org.openjdk.skara.bots.notify\");\n+\n@@ -80,1 +83,7 @@\n-        repository.addCommitComment(hash, String.join(\"\\n\", comment));\n+        var existingComments = repository.commitComments(hash);\n+        var commentBody = String.join(\"\\n\", comment);\n+        if (existingComments.stream().anyMatch(c -> c.body().equals(commentBody))) {\n+            log.warning(\"Commit comment for \" + hash + \" already posted\");\n+        } else {\n+            repository.addCommitComment(hash, commentBody);\n+        }\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/comment\/CommitCommentNotifier.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -168,0 +168,57 @@\n+\n+    \/**\n+     * Test that the CommitCommentNotifier never repeates the exact same comment\n+     *\/\n+    @Test\n+    void testNoRepeatedCommitComment(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var repo = credentials.getHostedRepository();\n+            var repoFolder = tempFolder.path().resolve(\"repo\");\n+            var localRepo = CheckableRepository.init(repoFolder, repo.repositoryType());\n+            credentials.commitLock(localRepo);\n+            localRepo.pushAll(repo.url());\n+\n+            var tagStorage = createTagStorage(repo);\n+            var branchStorage = createBranchStorage(repo);\n+            var prStateStorage = createPullRequestStateStorage(repo);\n+            var storageFolder = tempFolder.path().resolve(\"storage\");\n+\n+            var issueProject = credentials.getIssueProject();\n+            var notifyBot = NotifyBot.newBuilder()\n+                    .repository(repo)\n+                    .storagePath(storageFolder)\n+                    .branches(Pattern.compile(\"master\"))\n+                    .tagStorageBuilder(tagStorage)\n+                    .branchStorageBuilder(branchStorage)\n+                    .prStateStorageBuilder(prStateStorage)\n+                    .integratorId(repo.forge().currentUser().id())\n+                    .build();\n+            var notifier = new CommitCommentNotifier(issueProject);\n+            notifier.attachTo(notifyBot);\n+\n+            \/\/ Initialize history\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ Save the state\n+            var historyState = localRepo.fetch(repo.url(), \"history\");\n+\n+            \/\/ Commit a fix\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, \"Another line\", \"Fix an issue\");\n+            localRepo.push(editHash, repo.url(), \"master\");\n+            var pr = credentials.createPullRequest(repo, \"master\", \"master\", \"Fix an issue\");\n+            pr.setBody(\"I made a fix\");\n+            pr.addLabel(\"integrated\");\n+            pr.addComment(\"@user Pushed as commit \" + editHash.hex() + \".\");\n+\n+            \/\/ Run the notifier manually to add a comment\n+            notifier.onIntegratedPullRequest(pr, storageFolder, editHash);\n+\n+            \/\/ Run the bot officially\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ Check that we only have 1 commit comment\n+            var comments = repo.commitComments(editHash);\n+            assertEquals(1, comments.size());\n+        }\n+    }\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/comment\/CommitCommentNotifierTests.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"modified"}]}