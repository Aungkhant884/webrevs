{"files":[{"patch":"@@ -92,1 +92,3 @@\n-            reply.println(\"@\" + username + \" the target repository `\" + repoName + \"` does not exist\");\n+            reply.println(\"@\" + username + \" the target repository `\" + repoName + \"` does not exist. \");\n+            reply.print(\"List of valid repositories: \");\n+            reply.println(String.join(\", \", bot.forkRepoNames()));\n@@ -107,1 +109,8 @@\n-            var fork = bot.writeableForkOf(targetRepo);\n+            var optionalFork = bot.writeableForkOf(targetRepo);\n+            if (optionalFork.isEmpty()) {\n+                reply.print(\"@\" + username + \" [\" + repoName + \"](\" + targetRepo.webUrl() + \") is not a valid target for backports. \");\n+                reply.print(\"List of valid repositories: \");\n+                reply.println(String.join(\", \", bot.forkRepoNames()));\n+                return;\n+            }\n+            var fork = optionalFork.get();\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/BackportCommand.java","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -280,1 +280,1 @@\n-    HostedRepository writeableForkOf(HostedRepository upstream) {\n+    Optional<HostedRepository> writeableForkOf(HostedRepository upstream) {\n@@ -283,1 +283,1 @@\n-            throw new IllegalArgumentException(\"No writeable fork for \" + upstream.name());\n+            return Optional.empty();\n@@ -285,1 +285,10 @@\n-        return fork;\n+        return Optional.of(fork);\n+    }\n+\n+    \/**\n+     * Returns a list of all repo names that have a fork configured for them\n+     *\/\n+    List<String> forkRepoNames() {\n+        return forks.keySet().stream()\n+                .map(k -> k.substring(k.lastIndexOf('\/') + 1))\n+                .toList();\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBot.java","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -113,0 +113,42 @@\n+            assertTrue(botReply.body().contains(\"List of valid repositories: test\"));\n+            assertEquals(List.of(), author.pullRequests());\n+        }\n+    }\n+\n+    @Test\n+    void unknownTargetRepoFork(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addAuthor(author.forge().currentUser().id())\n+                    .addReviewer(reviewer.forge().currentUser().id());\n+            var seedFolder = tempFolder.path().resolve(\"seed\");\n+            var bot = PullRequestBot.newBuilder()\n+                    .repo(author)\n+                    .censusRepo(censusBuilder.build())\n+                    .censusLink(\"https:\/\/census.com\/{{contributor}}-profile\")\n+                    .seedStorage(seedFolder)\n+                    .forks(Map.of(\"foobar\/other-repo\", author))\n+                    .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Make a change in another branch\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"edit\");\n+\n+            \/\/ Add a backport command\n+            author.addCommitComment(editHash, \"\/backport \" + author.name());\n+            TestBotRunner.runPeriodicItems(bot);\n+\n+            var recentCommitComments = author.recentCommitComments();\n+            assertEquals(2, recentCommitComments.size());\n+            var botReply = recentCommitComments.get(0);\n+            assertTrue(botReply.body().contains(\"is not a valid target for backports\"));\n+            assertTrue(botReply.body().contains(\"List of valid repositories: other-repo\"));\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/BackportCommitCommandTests.java","additions":42,"deletions":0,"binary":false,"changes":42,"status":"modified"}]}