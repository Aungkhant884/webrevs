{"files":[{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bots.common;\n+\n+import org.openjdk.skara.host.HostUser;\n+import org.openjdk.skara.issuetracker.Comment;\n+import org.openjdk.skara.vcs.openjdk.Issue;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.*;\n+import java.util.regex.*;\n+import java.util.stream.Collectors;\n+\n+public class SolvesTracker {\n+    private final static String solvesMarker = \"<!-- solves: '%s' '%s' -->\";\n+    private final static Pattern markerPattern = Pattern.compile(\"<!-- solves: '(.*?)' '(.*?)' -->\");\n+\n+    public static String setSolvesMarker(Issue issue) {\n+        var encodedDescription = Base64.getEncoder().encodeToString(issue.description().getBytes(StandardCharsets.UTF_8));\n+        return String.format(solvesMarker, issue.shortId(), encodedDescription);\n+    }\n+\n+    public static String removeSolvesMarker(Issue issue) {\n+        return String.format(solvesMarker, issue.shortId(), \"\");\n+    }\n+\n+    public static List<Issue> currentSolved(HostUser botUser, List<Comment> comments) {\n+        var solvesActions = comments.stream()\n+                .filter(comment -> comment.author().equals(botUser))\n+                .flatMap(comment -> comment.body().lines())\n+                .map(markerPattern::matcher)\n+                .filter(Matcher::find)\n+                .collect(Collectors.toList());\n+        var current = new LinkedHashMap<String, Issue>();\n+        for (var action : solvesActions) {\n+            var key = action.group(1);\n+            if (action.group(2).equals(\"\")) {\n+                current.remove(key);\n+            } else {\n+                var decodedDescription = new String(Base64.getDecoder().decode(action.group(2)), StandardCharsets.UTF_8);\n+                var issue = new Issue(key, decodedDescription);\n+                current.put(key, issue);\n+            }\n+        }\n+\n+        return new ArrayList<>(current.values());\n+    }\n+}\n","filename":"bots\/common\/src\/main\/java\/org\/openjdk\/skara\/bots\/common\/SolvesTracker.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"},{"patch":"@@ -28,0 +28,1 @@\n+import java.util.ArrayList;\n@@ -33,0 +34,1 @@\n+\n@@ -35,0 +37,1 @@\n+import org.openjdk.skara.bots.common.SolvesTracker;\n@@ -90,0 +93,4 @@\n+    private String generateCSRProgressMessage(org.openjdk.skara.issuetracker.Issue issue) {\n+        return \"Change requires CSR request [\" + issue.id() + \"](\" + issue.webUrl() + \") to be approved\";\n+    }\n+\n@@ -93,2 +100,2 @@\n-                (statusMessage.contains(\"- [ ] Change requires a CSR request to be approved\") ||\n-                        statusMessage.contains(\"- [x] Change requires a CSR request to be approved\"));\n+                (statusMessage.contains(\"- [ ] \" + generateCSRProgressMessage(csr)) ||\n+                        statusMessage.contains(\"- [x] \" + generateCSRProgressMessage(csr)));\n@@ -99,1 +106,1 @@\n-        return hasCsrIssue(statusMessage, csr) && statusMessage.contains(\"- [x] Change requires a CSR request to be approved\");\n+        return hasCsrIssue(statusMessage, csr) && statusMessage.contains(\"- [x] \" + generateCSRProgressMessage(csr));\n@@ -129,0 +136,5 @@\n+        \/\/ All the issues this pr solves\n+        var mainIssue = org.openjdk.skara.vcs.openjdk.Issue.fromStringRelaxed(pr.title());\n+        var issues = new ArrayList<org.openjdk.skara.vcs.openjdk.Issue>();\n+        mainIssue.ifPresent(issues::add);\n+        issues.addAll(SolvesTracker.currentSolved(pr.repository().forge().currentUser(), pr.comments()));\n@@ -130,8 +142,2 @@\n-        var issue = org.openjdk.skara.vcs.openjdk.Issue.fromStringRelaxed(pr.title());\n-        if (issue.isEmpty()) {\n-            log.info(\"No issue found in title for \" + describe(pr));\n-            return List.of();\n-        }\n-        var jbsIssueOpt = project.issue(issue.get().shortId());\n-        if (jbsIssueOpt.isEmpty()) {\n-            log.info(\"No issue found in JBS for \" + describe(pr));\n+        if (issues.isEmpty()) {\n+            log.info(\"No issue found for \" + describe(pr));\n@@ -147,6 +153,3 @@\n-        var csrOptional = Backports.findCsr(jbsIssueOpt.get(), versionOpt.get());\n-        if (csrOptional.isEmpty()) {\n-            log.info(\"No CSR found for \" + describe(pr));\n-            return List.of();\n-        }\n-        var csr = csrOptional.get();\n+        boolean allCSRApproved = true;\n+        boolean needToAddUpdateMarker = false;\n+        boolean existingCSR = false;\n@@ -154,7 +157,10 @@\n-        log.info(\"Found CSR \" + csr.id() + \" for \" + describe(pr));\n-        if (!hasCsrIssueAndProgress(pr, csr) && !isWithdrawnCSR(csr)) {\n-            \/\/ If the PR body doesn't have the CSR issue or doesn't have the CSR progress,\n-            \/\/ this bot need to add the csr update marker so that the PR bot can update the message of the PR body.\n-            log.info(\"The PR body doesn't have the CSR issue or progress, adding the csr update marker for \" + describe(pr));\n-            addUpdateMarker(pr);\n-        }\n+        for (var issue : issues) {\n+            var jbsIssueOpt = project.issue(issue.shortId());\n+            if (jbsIssueOpt.isEmpty()) {\n+                \/\/ An issue could not be found, so the csr label cannot be removed\n+                allCSRApproved = false;\n+                var issueId = issue.project().isEmpty() ? (project.name() + \"-\" + issue.id()) : issue.id();\n+                log.info(issueId + \" for \" + describe(pr) + \" not found\");\n+                \/\/ allCSRApproved is now false, so there is no point in continuing\n+                break;\n+            }\n@@ -162,7 +168,4 @@\n-        var resolution = csr.properties().get(\"resolution\");\n-        if (resolution == null || resolution.isNull()) {\n-            if (!pr.labelNames().contains(CSR_LABEL)) {\n-                log.info(\"CSR issue resolution is null for \" + describe(pr) + \", adding the CSR label\");\n-                pr.addLabel(CSR_LABEL);\n-            } else {\n-                log.info(\"CSR issue resolution is null for \" + describe(pr) + \", not removing the CSR label\");\n+            var csrOptional = Backports.findCsr(jbsIssueOpt.get(), versionOpt.get());\n+            if (csrOptional.isEmpty()) {\n+                log.info(\"No CSR found for issue \" + jbsIssueOpt.get().id() + \" for \" + describe(pr));\n+                continue;\n@@ -170,10 +173,10 @@\n-            logLatency();\n-            return List.of();\n-        }\n-        var name = resolution.get(\"name\");\n-        if (name == null || name.isNull()) {\n-            if (!pr.labelNames().contains(CSR_LABEL)) {\n-                log.info(\"CSR issue resolution name is null for \" + describe(pr) + \", adding the CSR label\");\n-                pr.addLabel(CSR_LABEL);\n-            } else {\n-                log.info(\"CSR issue resolution name is null for \" + describe(pr) + \", not removing the CSR label\");\n+            var csr = csrOptional.get();\n+            existingCSR = true;\n+\n+            log.info(\"Found CSR \" + csr.id() + \" for issue \" + jbsIssueOpt.get().id() + \" for \" + describe(pr));\n+            if (!hasCsrIssueAndProgress(pr, csr) && !isWithdrawnCSR(csr)) {\n+                \/\/ If the PR body doesn't have the CSR issue or doesn't have the CSR progress,\n+                \/\/ this bot need to add the csr update marker so that the PR bot can update the message of the PR body.\n+                log.info(\"The PR body doesn't have the CSR issue or progress, adding the csr update marker for this csr issue\"\n+                        + csr.id() + \" for \" + describe(pr));\n+                needToAddUpdateMarker = true;\n@@ -181,3 +184,0 @@\n-            logLatency();\n-            return List.of();\n-        }\n@@ -185,6 +185,11 @@\n-        if (csr.state() != Issue.State.CLOSED) {\n-            if (!pr.labelNames().contains(CSR_LABEL)) {\n-                log.info(\"CSR issue state is not closed for \" + describe(pr) + \", adding the CSR label\");\n-                pr.addLabel(CSR_LABEL);\n-            } else {\n-                log.info(\"CSR issue state is not closed for \" + describe(pr) + \", not removing the CSR label\");\n+            var resolution = csr.properties().get(\"resolution\");\n+            if (resolution == null || resolution.isNull()) {\n+                allCSRApproved = false;\n+                if (!pr.labelNames().contains(CSR_LABEL)) {\n+                    log.info(\"CSR issue resolution is null for csr issue \" + csr.id() + \" for \" + describe(pr) + \", adding the CSR label\");\n+                    pr.addLabel(CSR_LABEL);\n+                } else {\n+                    log.info(\"CSR issue resolution is null for csr issue \" + csr.id() + \" for \" + describe(pr) + \", not removing the CSR label\");\n+                }\n+                \/\/ allCSRApproved is now false, so there is no point in continuing\n+                break;\n@@ -192,3 +197,0 @@\n-            logLatency();\n-            return List.of();\n-        }\n@@ -196,12 +198,11 @@\n-        if (!name.asString().equals(\"Approved\")) {\n-            if (name.asString().equals(\"Withdrawn\")) {\n-                \/\/ This condition is necessary to prevent the bot from adding the CSR label again.\n-                \/\/ And the bot can't remove the CSR label automatically here.\n-                \/\/ Because the PR author with the role of Committer may withdraw a CSR that\n-                \/\/ a Reviewer had requested and integrate it without satisfying that requirement.\n-                log.info(\"CSR closed and withdrawn for \" + describe(pr) + \", not revising (not adding and not removing) CSR label\");\n-            } else if (!pr.labelNames().contains(CSR_LABEL)) {\n-                log.info(\"CSR issue resolution is not 'Approved' for \" + describe(pr) + \", adding the CSR label\");\n-                pr.addLabel(CSR_LABEL);\n-            } else {\n-                log.info(\"CSR issue resolution is not 'Approved' for \" + describe(pr) + \", not removing the CSR label\");\n+            var name = resolution.get(\"name\");\n+            if (name == null || name.isNull()) {\n+                allCSRApproved = false;\n+                if (!pr.labelNames().contains(CSR_LABEL)) {\n+                    log.info(\"CSR issue resolution name is null for csr issue \" + csr.id() + \" for \" + describe(pr) + \", adding the CSR label\");\n+                    pr.addLabel(CSR_LABEL);\n+                } else {\n+                    log.info(\"CSR issue resolution name is null for csr issue \" + csr.id() + \" for \" + describe(pr) + \", not removing the CSR label\");\n+                }\n+                \/\/ allCSRApproved is now false, so there is no point in continuing\n+                break;\n@@ -209,3 +210,0 @@\n-            logLatency();\n-            return List.of();\n-        }\n@@ -213,3 +211,38 @@\n-        if (pr.labelNames().contains(CSR_LABEL)) {\n-            log.info(\"CSR closed and approved for \" + describe(pr) + \", removing CSR label\");\n-            pr.removeLabel(CSR_LABEL);\n+            if (csr.state() != Issue.State.CLOSED) {\n+                allCSRApproved = false;\n+                if (!pr.labelNames().contains(CSR_LABEL)) {\n+                    log.info(\"CSR issue state is not closed for csr issue \" + csr.id() + \" for \" + describe(pr) + \", adding the CSR label\");\n+                    pr.addLabel(CSR_LABEL);\n+                } else {\n+                    log.info(\"CSR issue state is not closed for csr issue\" + csr.id() + \" for \" + describe(pr) + \", not removing the CSR label\");\n+                }\n+                \/\/ allCSRApproved is now false, so there is no point in continuing\n+                break;\n+            }\n+\n+            if (!name.asString().equals(\"Approved\")) {\n+                if (name.asString().equals(\"Withdrawn\")) {\n+                    \/\/ This condition is necessary to prevent the bot from adding the CSR label again.\n+                    \/\/ And the bot can't remove the CSR label automatically here.\n+                    \/\/ Because the PR author with the role of Committer may withdraw a CSR that\n+                    \/\/ a Reviewer had requested and integrate it without satisfying that requirement.\n+                    log.info(\"CSR closed and withdrawn for csr issue \" + csr.id() + \" for \" + describe(pr));\n+                    continue;\n+                } else if (!pr.labelNames().contains(CSR_LABEL)) {\n+                    allCSRApproved = false;\n+                    log.info(\"CSR issue resolution is not 'Approved' for csr issue \" + csr.id() + \" for \" + describe(pr) + \", adding the CSR label\");\n+                    pr.addLabel(CSR_LABEL);\n+                } else {\n+                    allCSRApproved = false;\n+                    log.info(\"CSR issue resolution is not 'Approved' for csr issue \" + csr.id() + \" for \" + describe(pr) + \", not removing the CSR label\");\n+                }\n+                break;\n+            }\n+\n+            \/\/ The CSR issue has been closed and approved\n+            if (!hasCsrIssueAndProgressChecked(pr, csr)) {\n+                \/\/ If the PR body doesn't have the CSR issue or doesn't have the CSR progress or the CSR progress checkbox is not selected,\n+                \/\/ this bot need to add the csr update marker so that the PR bot can update the message of the PR body.\n+                log.info(\"CSR closed and approved for \" + describe(pr) + \", adding the csr update marker\");\n+                needToAddUpdateMarker = true;\n+            }\n@@ -217,4 +250,1 @@\n-        if (!hasCsrIssueAndProgressChecked(pr, csr)) {\n-            \/\/ If the PR body doesn't have the CSR issue or doesn't have the CSR progress or the CSR progress checkbox is not selected,\n-            \/\/ this bot need to add the csr update marker so that the PR bot can update the message of the PR body.\n-            log.info(\"CSR closed and approved for \" + describe(pr) + \", adding the csr update marker\");\n+        if (needToAddUpdateMarker) {\n@@ -223,0 +253,4 @@\n+        if (allCSRApproved && existingCSR && pr.labelNames().contains(CSR_LABEL)) {\n+            log.info(\"All CSR issues closed and approved for \" + describe(pr) + \", removing CSR label\");\n+            pr.removeLabel(CSR_LABEL);\n+        }\n","filename":"bots\/csr\/src\/main\/java\/org\/openjdk\/skara\/bots\/csr\/PullRequestWorkItem.java","additions":109,"deletions":75,"binary":false,"changes":184,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import org.openjdk.skara.bots.common.SolvesTracker;\n@@ -418,0 +419,4 @@\n+    private String generateCSRProgressMessage(org.openjdk.skara.issuetracker.Issue issue) {\n+        return \"Change requires CSR request [\" + issue.id() + \"](\" + issue.webUrl() + \") to be approved\";\n+    }\n+\n@@ -469,1 +474,1 @@\n-                    + \"- [ ] Change requires a CSR request to be approved\");\n+                    + \"- [ ] \" + generateCSRProgressMessage(csr));\n@@ -485,1 +490,1 @@\n-                    + \"- [x] Change requires a CSR request to be approved\");\n+                    + \"- [x] \" + generateCSRProgressMessage(csr));\n@@ -493,1 +498,1 @@\n-                    + \"- [ ] Change requires a CSR request to be approved\" + csrUpdateMarker);\n+                    + \"- [ ] \" + generateCSRProgressMessage(csr));\n@@ -505,1 +510,0 @@\n-        String progressMarker = \"<!-- Anything below this marker will be automatically updated, please do not edit manually! -->\";\n@@ -553,0 +557,79 @@\n+\n+    @Test\n+    void testPRWithMultipleIssues(TestInfo testInfo) throws IOException{\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var repo = credentials.getHostedRepository();\n+            var issueProject = credentials.getIssueProject();\n+            var issue = issueProject.createIssue(\"This is an issue\", List.of(), Map.of());\n+            issue.setProperty(\"issuetype\", JSON.of(\"Bug\"));\n+            var csrPullRequestBot = new CSRPullRequestBot(repo, issueProject);\n+            var csrIssueBot = new CSRIssueBot(issueProject, List.of(repo));\n+\n+            \/\/ Run issue bot once to initialize lastUpdatedAt\n+            TestBotRunner.runPeriodicItems(csrIssueBot);\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n+            var localRepo = CheckableRepository.init(localRepoFolder, repo.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, repo.url(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, repo.url(), \"edit\", true);\n+            var pr = credentials.createPullRequest(repo, \"master\", \"edit\", issue.id() + \": This is an issue\");\n+            \/\/ Add the notification link to the PR in the issue. This is needed for the CSRIssueBot to\n+            \/\/ be able to trigger on CSR issue updates\n+            PullRequestUtils.postPullRequestLinkComment(issue, pr);\n+            \/\/ Run bot\n+            TestBotRunner.runPeriodicItems(csrPullRequestBot);\n+\n+            \/\/ Add an issue to this pr\n+            var issue2 = issueProject.createIssue(\"This is an issue 2\", List.of(), Map.of());\n+            issue2.setProperty(\"issuetype\", JSON.of(\"Bug\"));\n+            pr.addComment(SolvesTracker.setSolvesMarker(new org.openjdk.skara.vcs.openjdk.Issue(issue2.id(), issue2.title())));\n+            PullRequestUtils.postPullRequestLinkComment(issue2, pr);\n+\n+            \/\/ Add a csr to issue2\n+            var csr2 = issueProject.createIssue(\"This is an CSR for issue2\", List.of(), Map.of());\n+            csr2.setProperty(\"issuetype\", JSON.of(\"CSR\"));\n+            csr2.setState(Issue.State.OPEN);\n+            issue2.addLink(Link.create(csr2, \"csr for\").build());\n+\n+            TestBotRunner.runPeriodicItems(csrIssueBot);\n+            \/\/ PR should contain csr label\n+            assertTrue(pr.store().labelNames().contains(\"csr\"));\n+\n+            \/\/ Add another issue to this pr\n+            var issue3 = issueProject.createIssue(\"This is an issue 3\", List.of(), Map.of());\n+            issue3.setProperty(\"issuetype\", JSON.of(\"Bug\"));\n+            pr.addComment(SolvesTracker.setSolvesMarker(new org.openjdk.skara.vcs.openjdk.Issue(issue3.id(), issue3.title())));\n+            PullRequestUtils.postPullRequestLinkComment(issue3, pr);\n+\n+            \/\/ Withdrawn the csr for issue2\n+            csr2.setState(Issue.State.CLOSED);\n+            csr2.setProperty(\"resolution\", JSON.object().put(\"name\", \"Withdrawn\"));\n+            TestBotRunner.runPeriodicItems(csrIssueBot);\n+            \/\/ PR should not contain csr label\n+            assertFalse(pr.store().labelNames().contains(\"csr\"));\n+\n+            \/\/ Add a csr to issue3\n+            var csr3 = issueProject.createIssue(\"This is an CSR for issue3\", List.of(), Map.of());\n+            csr3.setProperty(\"issuetype\", JSON.of(\"CSR\"));\n+            csr3.setState(Issue.State.OPEN);\n+            issue3.addLink(Link.create(csr3, \"csr for\").build());\n+\n+            TestBotRunner.runPeriodicItems(csrIssueBot);\n+            \/\/ PR should contain csr label\n+            assertTrue(pr.store().labelNames().contains(\"csr\"));\n+\n+            \/\/ Approve CSR3\n+            csr3.setState(Issue.State.CLOSED);\n+            csr3.setProperty(\"resolution\", JSON.object().put(\"name\", \"Approved\"));\n+            TestBotRunner.runPeriodicItems(csrIssueBot);\n+            \/\/ PR should not contain csr label\n+            assertFalse(pr.store().labelNames().contains(\"csr\"));\n+        }\n+    }\n","filename":"bots\/csr\/src\/test\/java\/org\/openjdk\/skara\/bots\/csr\/CSRBotTests.java","additions":87,"deletions":4,"binary":false,"changes":91,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+    exports org.openjdk.skara.bots.pr;\n","filename":"bots\/pr\/src\/main\/java\/module-info.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+import org.openjdk.skara.bots.common.SolvesTracker;\n@@ -33,0 +34,1 @@\n+import java.util.ArrayList;\n@@ -99,13 +101,2 @@\n-            var issue = org.openjdk.skara.vcs.openjdk.Issue.fromStringRelaxed(pr.title());\n-            if (issueProject == null || issue.isEmpty()) {\n-                csrUnneededReply(pr, reply);\n-                return;\n-            }\n-            var jbsIssueOpt = issueProject.issue(issue.get().shortId());\n-            if (jbsIssueOpt.isEmpty()) {\n-                csrUnneededReply(pr, reply);\n-                return;\n-            }\n-\n-            var versionOpt = BotUtils.getVersion(pr);\n-            if (versionOpt.isEmpty()) {\n+            var mainIssue = org.openjdk.skara.vcs.openjdk.Issue.fromStringRelaxed(pr.title());\n+            if (issueProject == null || mainIssue.isEmpty()) {\n@@ -116,4 +107,35 @@\n-            var csrOptional = Backports.findCsr(jbsIssueOpt.get(), versionOpt.get());\n-            if (csrOptional.isEmpty()) {\n-                csrUnneededReply(pr, reply);\n-                return;\n+            \/\/ All the issues this pr solves\n+            var issues = new ArrayList<org.openjdk.skara.vcs.openjdk.Issue>();\n+            issues.add(mainIssue.get());\n+            issues.addAll(SolvesTracker.currentSolved(pr.repository().forge().currentUser(), pr.comments()));\n+\n+            var containsOpenCsrIssue = false;\n+            for (var issue : issues) {\n+                var jbsIssueOpt = issueProject.issue(issue.shortId());\n+                if (jbsIssueOpt.isEmpty()) {\n+                    continue;\n+                }\n+                var jbsIssue = jbsIssueOpt.get();\n+\n+                var versionOpt = BotUtils.getVersion(pr);\n+                if (versionOpt.isEmpty()) {\n+                    break;\n+                }\n+\n+                var csrOptional = Backports.findCsr(jbsIssue, versionOpt.get());\n+                if (csrOptional.isEmpty()) {\n+                    continue;\n+                }\n+                var csrIssue = csrOptional.get();\n+\n+                var resolution = csrIssue.properties().get(\"resolution\");\n+                if (resolution == null || resolution.isNull()\n+                        || resolution.get(\"name\") == null || resolution.get(\"name\").isNull()\n+                        || csrIssue.state() != Issue.State.CLOSED\n+                        || !resolution.get(\"name\").asString().equals(\"Withdrawn\")) {\n+                    \/\/ The issue has a non-withdrawn csr issue, the bot should direct the user to withdraw the csr firstly.\n+                    reply.println(\"The CSR requirement cannot be removed as there is already a CSR associated with the issue [\" +\n+                            jbsIssue.id() + \"](\" + jbsIssue.webUrl() + \"). Please withdraw the CSR [\" + csrIssue.id() +\n+                            \"](\" + csrIssue.webUrl() + \") and then use the command `\/csr unneeded` again.\");\n+                    containsOpenCsrIssue = true;\n+                }\n@@ -121,11 +143,1 @@\n-            var csrIssue = csrOptional.get();\n-\n-            var resolution = csrIssue.properties().get(\"resolution\");\n-            if (resolution == null || resolution.isNull()\n-                    || resolution.get(\"name\") == null || resolution.get(\"name\").isNull()\n-                    || csrIssue.state() != Issue.State.CLOSED\n-                    || !resolution.get(\"name\").asString().equals(\"Withdrawn\")) {\n-                \/\/ The issue has a non-withdrawn csr issue, the bot should direct the user to withdraw the csr firstly.\n-                reply.println(\"The CSR requirement cannot be removed as there is already a CSR associated with the main issue\" +\n-                              \" of this pull request. Please withdraw the CSR [\" + csrIssue.id() + \"](\" + csrIssue.webUrl() +\n-                              \") and then use the command `\/csr unneeded` again.\");\n+            if (containsOpenCsrIssue) {\n@@ -133,1 +145,4 @@\n-                return;\n+            } else {\n+                \/\/ All the issues associated with this pr either don't have csr issue or the csr issue has already been withdrawn,\n+                \/\/ the bot should just remove the csr label and reply the message.\n+                csrUnneededReply(pr, reply);\n@@ -135,3 +150,0 @@\n-\n-            \/\/ The csr has been withdrawn, the bot should just remove the csr label and reply the message.\n-            csrUnneededReply(pr, reply);\n@@ -143,1 +155,1 @@\n-                          \"is already required for this pull request.\");\n+                    \"is already required for this pull request.\");\n@@ -149,2 +161,3 @@\n-        var issue = org.openjdk.skara.vcs.openjdk.Issue.fromStringRelaxed(pr.title());\n-        if (issue.isEmpty()) {\n+        \/\/ Main issue is missing, this pr doesn't solve any issue\n+        var mainIssue = org.openjdk.skara.vcs.openjdk.Issue.fromStringRelaxed(pr.title());\n+        if (issueProject == null || mainIssue.isEmpty()) {\n@@ -157,2 +170,2 @@\n-        var jbsIssueOpt = issueProject.issue(issue.get().shortId());\n-        if (jbsIssueOpt.isEmpty()) {\n+        var jbsMainIssueOpt = issueProject.issue(mainIssue.get().shortId());\n+        if (jbsMainIssueOpt.isEmpty()) {\n@@ -165,8 +178,4 @@\n-        var jbsIssue = jbsIssueOpt.get();\n-        var versionOpt = BotUtils.getVersion(pr);\n-        if (versionOpt.isEmpty()) {\n-            csrReply(reply);\n-            linkReply(pr, jbsIssue, reply);\n-            pr.addLabel(CSR_LABEL);\n-            return;\n-        }\n+        \/\/ All the issues this pr solves\n+        var issues = new ArrayList<org.openjdk.skara.vcs.openjdk.Issue>();\n+        issues.add(mainIssue.get());\n+        issues.addAll(SolvesTracker.currentSolved(pr.repository().forge().currentUser(), pr.comments()));\n@@ -174,15 +183,43 @@\n-        var csrOptional = Backports.findCsr(jbsIssueOpt.get(), versionOpt.get());\n-        if (csrOptional.isEmpty()) {\n-            csrReply(reply);\n-            linkReply(pr, jbsIssue, reply);\n-            pr.addLabel(CSR_LABEL);\n-            return;\n-        }\n-        var csr = csrOptional.get();\n-\n-        var resolutionName = \"Unresolved\";\n-        var resolution = csr.properties().getOrDefault(\"resolution\", JSON.of());\n-        if (resolution.isObject() && resolution.asObject().contains(\"name\")) {\n-            var nameField = resolution.get(\"name\");\n-            if (nameField.isString()) {\n-                resolutionName = resolution.get(\"name\").asString();\n+        var approvedCsrIssues = 0;\n+        var openCsrIssues = 0;\n+        var withdrawnCsrIssues = 0;\n+        var csrIssues = 0;\n+\n+        for (var issue : issues) {\n+            var jbsIssueOpt = issueProject.issue(issue.shortId());\n+            if (jbsIssueOpt.isEmpty()) {\n+                continue;\n+            }\n+            var jbsIssue = jbsIssueOpt.get();\n+            var versionOpt = BotUtils.getVersion(pr);\n+            if (versionOpt.isEmpty()) {\n+                break;\n+            }\n+\n+            var csrOptional = Backports.findCsr(jbsIssueOpt.get(), versionOpt.get());\n+            if (csrOptional.isEmpty()) {\n+                continue;\n+            }\n+            \/\/ Found a csr issue for one of the issues associated with this pr\n+            var csr = csrOptional.get();\n+            csrIssues++;\n+\n+            var resolutionName = \"Unresolved\";\n+            var resolution = csr.properties().getOrDefault(\"resolution\", JSON.of());\n+            if (resolution.isObject() && resolution.asObject().contains(\"name\")) {\n+                var nameField = resolution.get(\"name\");\n+                if (nameField.isString()) {\n+                    resolutionName = resolution.get(\"name\").asString();\n+                }\n+            }\n+            if (csr.state() == Issue.State.CLOSED && resolutionName.equals(\"Approved\")) {\n+                reply.println(\"the issue for this pull request, [\" + jbsIssue.id() + \"](\" + jbsIssue.webUrl() + \"), already has \" +\n+                        \"an approved CSR request: [\" + csr.id() + \"](\" + csr.webUrl() + \")\");\n+                approvedCsrIssues++;\n+            } else if (csr.state() == Issue.State.CLOSED && resolutionName.equals(\"Withdrawn\")) {\n+                withdrawnCsrIssues++;\n+            } else {\n+                reply.println(\"this pull request will not be integrated until the [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) \" +\n+                        \"request \" + \"[\" + csr.id() + \"](\" + csr.webUrl() + \")\" + \" for issue \" +\n+                        \"[\" + jbsIssue.id() + \"](\" + jbsIssue.webUrl() + \") has been approved.\");\n+                openCsrIssues++;\n@@ -191,3 +228,9 @@\n-        if (csr.state() == Issue.State.CLOSED && resolutionName.equals(\"Approved\")) {\n-            reply.println(\"the issue for this pull request, [\" + jbsIssue.id() + \"](\" + jbsIssue.webUrl() + \"), already has \" +\n-                          \"an approved CSR request: [\" + csr.id() + \"](\" + csr.webUrl() + \")\");\n+        \/\/ All the issues associated with pr either don't have csr issue or the csr issue has already been withdrawn\n+        if (csrIssues == withdrawnCsrIssues) {\n+            csrReply(reply);\n+            if (issues.size() == 1) {\n+                linkReply(pr, jbsMainIssueOpt.get(), reply);\n+            }\n+            pr.addLabel(CSR_LABEL);\n+        } else if (csrIssues == approvedCsrIssues) {\n+            \/\/ All the csr issues are approved\n@@ -195,4 +238,2 @@\n-        } else {\n-            reply.println(\"this pull request will not be integrated until the [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) \" +\n-                          \"request \" + \"[\" + csr.id() + \"](\" + csr.webUrl() + \")\" + \" for issue \" +\n-                          \"[\" + jbsIssue.id() + \"](\" + jbsIssue.webUrl() + \") has been approved.\");\n+        } else if (openCsrIssues > 0) {\n+            \/\/ At least one csr issue open\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CSRCommand.java","additions":108,"deletions":67,"binary":false,"changes":175,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+import org.openjdk.skara.bots.common.SolvesTracker;\n@@ -126,1 +127,1 @@\n-                getCsrIssue(issue.get()).ifPresent(issues::add);\n+                issues.addAll(getCsrIssues(issues));\n@@ -137,1 +138,1 @@\n-     * Get the csr issue. Note: this `Issue` is not the issue in module `issuetracker`.\n+     * Get the csr issues. Note: this `Issue` is the issue in module `issuetracker`.\n@@ -139,1 +140,1 @@\n-    private Optional<Issue> getCsrIssue(Issue issue) {\n+    private List<org.openjdk.skara.issuetracker.Issue> getCsrIssueTrackerIssues(List<Issue> issues) {\n@@ -142,5 +143,1 @@\n-            return Optional.empty();\n-        }\n-        var jbsIssueOpt = issueProject.issue(issue.shortId());\n-        if (jbsIssueOpt.isEmpty()) {\n-            return Optional.empty();\n+            return List.of();\n@@ -148,1 +145,0 @@\n-\n@@ -151,1 +147,10 @@\n-            return Optional.empty();\n+            return List.of();\n+        }\n+        var csrIssues = new ArrayList<org.openjdk.skara.issuetracker.Issue>();\n+        for (var issue : issues) {\n+            var jbsIssueOpt = issueProject.issue(issue.shortId());\n+            if (jbsIssueOpt.isEmpty()) {\n+                continue;\n+            }\n+            Backports.findCsr(jbsIssueOpt.get(), versionOpt.get())\n+                    .ifPresent(csrIssues::add);\n@@ -153,0 +158,2 @@\n+        return csrIssues;\n+    }\n@@ -154,2 +161,10 @@\n-        return Backports.findCsr(jbsIssueOpt.get(), versionOpt.get())\n-                .flatMap(perIssue -> Issue.fromStringRelaxed(perIssue.id() + \": \" + perIssue.title()));\n+    \/**\n+     * Get the csr issue. Note: this `Issue` is not the issue in module `issuetracker`.\n+     *\/\n+    private List<Issue> getCsrIssues(List<Issue> issues) {\n+\n+        return getCsrIssueTrackerIssues(issues).stream()\n+                .map(perIssue -> Issue.fromStringRelaxed(perIssue.id() + \": \" + perIssue.title()))\n+                .filter(Optional::isPresent)\n+                .map(Optional::get)\n+                .toList();\n@@ -232,0 +247,17 @@\n+    private boolean isWithdrawnCSR(org.openjdk.skara.issuetracker.Issue csr) {\n+        if (csr.isClosed()) {\n+            var resolution = csr.properties().get(\"resolution\");\n+            if (resolution != null && !resolution.isNull()) {\n+                var name = resolution.get(\"name\");\n+                if (name != null && !name.isNull() && name.asString().equals(\"Withdrawn\")) {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private String generateCSRProgressMessage(org.openjdk.skara.issuetracker.Issue issue) {\n+        return \"Change requires CSR request [\" + issue.id() + \"](\" + issue.webUrl() + \") to be approved\";\n+    }\n+\n@@ -235,15 +267,23 @@\n-        if (pr.labelNames().contains(\"csr\")) {\n-            \/\/ If the PR have csr label, the CSR request need to be approved.\n-            ret.put(\"Change requires a CSR request to be approved\", false);\n-        } else {\n-            var csrIssue = Issue.fromStringRelaxed(pr.title()).flatMap(this::getCsrIssue)\n-                    .flatMap(value -> issueProject() != null ? issueProject().issue(value.shortId()) : Optional.empty());\n-            if (csrIssue.isPresent()) {\n-                var resolution = csrIssue.get().properties().get(\"resolution\");\n-                if (resolution != null && !resolution.isNull()\n-                        && resolution.get(\"name\") != null && !resolution.get(\"name\").isNull()\n-                        && csrIssue.get().state() == org.openjdk.skara.issuetracker.Issue.State.CLOSED\n-                        && \"Approved\".equals(resolution.get(\"name\").asString())) {\n-                    \/\/ The PR doesn't have csr label and the csr request has been Approved.\n-                    ret.put(\"Change requires a CSR request to be approved\", true);\n-                }\n+\n+        var csrIssues = getCsrIssueTrackerIssues(issues(false, false)).stream()\n+                .filter(issue -> issue.properties().containsKey(\"issuetype\"))\n+                .filter(issue -> issue.properties().get(\"issuetype\").asString().equals(\"CSR\"))\n+                .filter(issue -> !isWithdrawnCSR(issue))\n+                .toList();\n+        if (csrIssues.isEmpty() && pr.labelNames().contains(\"csr\")) {\n+            ret.put(\"Change requires a CSR request (needs to be created) to be approved\", false);\n+        }\n+        for (var csrIssue : csrIssues) {\n+            if (!csrIssue.isClosed()) {\n+                ret.put(generateCSRProgressMessage(csrIssue), false);\n+                continue;\n+            }\n+            var resolution = csrIssue.properties().get(\"resolution\");\n+            if (resolution == null || resolution.isNull()) {\n+                ret.put(generateCSRProgressMessage(csrIssue), false);\n+                continue;\n+            }\n+            var name = resolution.get(\"name\");\n+            if (name == null || name.isNull()) {\n+                ret.put(generateCSRProgressMessage(csrIssue), false);\n+                continue;\n@@ -251,1 +291,5 @@\n-            \/\/ At other states, no need to add the csr progress.\n+            if (!name.asString().equals(\"Approved\")) {\n+                ret.put(generateCSRProgressMessage(csrIssue), false);\n+                continue;\n+            }\n+            ret.put(generateCSRProgressMessage(csrIssue), true);\n@@ -253,0 +297,2 @@\n+\n+\n@@ -621,0 +667,3 @@\n+                                if (isWithdrawnCSR(iss.get())) {\n+                                    progressBody.append(\" (Withdrawn)\");\n+                                }\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":77,"deletions":28,"binary":false,"changes":105,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import org.openjdk.skara.bots.common.SolvesTracker;\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckWorkItem.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import org.openjdk.skara.bots.common.SolvesTracker;\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckablePullRequest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import org.openjdk.skara.bots.common.SolvesTracker;\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/IssueCommand.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,68 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.skara.bots.pr;\n-\n-import org.openjdk.skara.host.HostUser;\n-import org.openjdk.skara.issuetracker.Comment;\n-import org.openjdk.skara.vcs.openjdk.Issue;\n-\n-import java.nio.charset.StandardCharsets;\n-import java.util.*;\n-import java.util.regex.*;\n-import java.util.stream.Collectors;\n-\n-public class SolvesTracker {\n-    private final static String solvesMarker = \"<!-- solves: '%s' '%s' -->\";\n-    private final static Pattern markerPattern = Pattern.compile(\"<!-- solves: '(.*?)' '(.*?)' -->\");\n-\n-    static String setSolvesMarker(Issue issue) {\n-        var encodedDescription = Base64.getEncoder().encodeToString(issue.description().getBytes(StandardCharsets.UTF_8));\n-        return String.format(solvesMarker, issue.shortId(), encodedDescription);\n-    }\n-\n-    static String removeSolvesMarker(Issue issue) {\n-        return String.format(solvesMarker, issue.shortId(), \"\");\n-    }\n-\n-    static List<Issue> currentSolved(HostUser botUser, List<Comment> comments) {\n-        var solvesActions = comments.stream()\n-                                    .filter(comment -> comment.author().equals(botUser))\n-                                    .flatMap(comment -> comment.body().lines())\n-                                    .map(markerPattern::matcher)\n-                                    .filter(Matcher::find)\n-                                    .collect(Collectors.toList());\n-        var current = new LinkedHashMap<String, Issue>();\n-        for (var action : solvesActions) {\n-            var key = action.group(1);\n-            if (action.group(2).equals(\"\")) {\n-                current.remove(key);\n-            } else {\n-                var decodedDescription = new String(Base64.getDecoder().decode(action.group(2)), StandardCharsets.UTF_8);\n-                var issue = new Issue(key, decodedDescription);\n-                current.put(key, issue);\n-            }\n-        }\n-\n-        return new ArrayList<>(current.values());\n-    }\n-}\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/SolvesTracker.java","additions":0,"deletions":68,"binary":false,"changes":68,"status":"deleted"},{"patch":"@@ -30,0 +30,1 @@\n+import org.openjdk.skara.json.JSONValue;\n@@ -81,1 +82,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request (needs to be created) to be approved\"));\n@@ -92,1 +93,1 @@\n-            assertFalse(pr.store().body().contains(\"Change requires a CSR request to be approved\"));\n+            assertFalse(pr.store().body().contains(\"Change requires a CSR request (needs to be created) to be approved\"));\n@@ -104,1 +105,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request (needs to be created) to be approved\"));\n@@ -108,0 +109,4 @@\n+    private String generateCSRProgressMessage(org.openjdk.skara.issuetracker.Issue issue) {\n+        return \"Change requires CSR request [\" + issue.id() + \"](\" + issue.webUrl() + \") to be approved\";\n+    }\n+\n@@ -121,0 +126,1 @@\n+            csr.setProperty(\"issuetype\", JSON.of(\"CSR\"));\n@@ -150,1 +156,1 @@\n-            assertTrue(pr.store().body().contains(\"- [x] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [x] \" + generateCSRProgressMessage(csr)));\n@@ -192,1 +198,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request (needs to be created) to be approved\"));\n@@ -231,1 +237,1 @@\n-            assertFalse(pr.store().body().contains(\"Change requires a CSR request to be approved\"));\n+            assertFalse(pr.store().body().contains(\"Change requires a CSR request (needs to be created) to be approved\"));\n@@ -240,1 +246,1 @@\n-            assertFalse(pr.store().body().contains(\"Change requires a CSR request to be approved\"));\n+            assertFalse(pr.store().body().contains(\"Change requires a CSR request (needs to be created) to be approved\"));\n@@ -252,1 +258,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request (needs to be created) to be approved\"));\n@@ -261,1 +267,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request (needs to be created) to be approved\"));\n@@ -270,1 +276,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request (needs to be created) to be approved\"));\n@@ -309,1 +315,1 @@\n-            assertFalse(pr.store().body().contains(\"Change requires a CSR request to be approved\"));\n+            assertFalse(pr.store().body().contains(\"Change requires a CSR request (needs to be created) to be approved\"));\n@@ -352,1 +358,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request (needs to be created) to be approved\"));\n@@ -394,1 +400,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request (needs to be created) to be approved\"));\n@@ -405,1 +411,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request (needs to be created) to be approved\"));\n@@ -421,0 +427,1 @@\n+            csr.setProperty(\"issuetype\", JSON.of(\"CSR\"));\n@@ -451,1 +458,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] \" + generateCSRProgressMessage(csr)));\n@@ -458,2 +465,3 @@\n-            assertLastCommentContains(pr, \"The CSR requirement cannot be removed as there is already a CSR associated \" +\n-                                      \"with the main issue of this pull request. Please withdraw the CSR\");\n+            assertLastCommentContains(pr, \"The CSR requirement cannot be removed as there is already a CSR associated with the issue [\" +\n+                    issue.id() + \"](\" + issue.webUrl() + \"). Please withdraw the CSR [\"\n+                    + csr.id() + \"](\" + csr.webUrl() + \") and then use the command `\/csr unneeded` again.\");\n@@ -463,1 +471,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] \" + generateCSRProgressMessage(csr)));\n@@ -478,1 +486,1 @@\n-            assertFalse(pr.store().body().contains(\"Change requires a CSR request to be approved\"));\n+            assertFalse(pr.store().body().contains(generateCSRProgressMessage(csr)));\n@@ -493,0 +501,1 @@\n+            csr.setProperty(\"issuetype\", JSON.of(\"CSR\"));\n@@ -523,1 +532,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] \" + generateCSRProgressMessage(csr)));\n@@ -530,2 +539,3 @@\n-            assertLastCommentContains(pr, \"The CSR requirement cannot be removed as there is already a CSR associated \" +\n-                    \"with the main issue of this pull request. Please withdraw the CSR\");\n+            assertLastCommentContains(pr, \"The CSR requirement cannot be removed as there is already a CSR associated with the issue [\" +\n+                    issue.id() + \"](\" + issue.webUrl() + \"). Please withdraw the CSR [\"\n+                    + csr.id() + \"](\" + csr.webUrl() + \") and then use the command `\/csr unneeded` again.\");\n@@ -535,1 +545,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] \" + generateCSRProgressMessage(csr)));\n@@ -550,1 +560,1 @@\n-            assertFalse(pr.store().body().contains(\"Change requires a CSR request to be approved\"));\n+            assertFalse(pr.store().body().contains(\"- [ ] \" + generateCSRProgressMessage(csr)));\n@@ -586,1 +596,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request (needs to be created) to be approved\"));\n@@ -626,1 +636,1 @@\n-            assertFalse(pr.store().body().contains(\"Change requires a CSR request to be approved\"));\n+            assertFalse(pr.store().body().contains(\"Change requires a CSR request (needs to be created) to be approved\"));\n@@ -646,1 +656,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request (needs to be created) to be approved\"));\n@@ -679,1 +689,1 @@\n-            assertFalse(pr.store().body().contains(\"Change requires a CSR request to be approved\"));\n+            assertFalse(pr.store().body().contains(\"Change requires a CSR request (needs to be created) to be approved\"));\n@@ -690,1 +700,1 @@\n-            assertTrue(pr.store().body().contains(\"Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"Change requires a CSR request (needs to be created) to be approved\"));\n@@ -750,1 +760,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request (needs to be created) to be approved\"));\n@@ -761,1 +771,1 @@\n-            assertFalse(pr.store().body().contains(\"Change requires a CSR request to be approved\"));\n+            assertFalse(pr.store().body().contains(\"Change requires a CSR request (needs to be created) to be approved\"));\n@@ -779,1 +789,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request (needs to be created) to be approved\"));\n@@ -790,1 +800,1 @@\n-            assertFalse(pr.store().body().contains(\"Change requires a CSR request to be approved\"));\n+            assertFalse(pr.store().body().contains(\"Change requires a CSR request (needs to be created) to be approved\"));\n@@ -808,1 +818,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request (needs to be created) to be approved\"));\n@@ -819,1 +829,1 @@\n-            assertFalse(pr.store().body().contains(\"Change requires a CSR request to be approved\"));\n+            assertFalse(pr.store().body().contains(\"Change requires a CSR request (needs to be created) to be approved\"));\n@@ -829,1 +839,1 @@\n-            assertTrue(pr.store().body().contains(\"- [x] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [x] \" + generateCSRProgressMessage(csr)));\n@@ -836,1 +846,1 @@\n-            assertTrue(pr.store().body().contains(\"- [x] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [x] \" + generateCSRProgressMessage(csr)));\n@@ -838,2 +848,3 @@\n-            assertLastCommentContains(pr, \"The CSR requirement cannot be removed as there is already a CSR associated \" +\n-                    \"with the main issue of this pull request. Please withdraw the CSR\");\n+            assertLastCommentContains(pr, \"The CSR requirement cannot be removed as there is already a CSR associated with the issue [\" +\n+                    issue.id() + \"](\" + issue.webUrl() + \"). Please withdraw the CSR [\"\n+                    + csr.id() + \"](\" + csr.webUrl() + \")\");\n@@ -853,1 +864,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request (needs to be created) to be approved\"));\n@@ -864,1 +875,1 @@\n-            assertFalse(pr.store().body().contains(\"Change requires a CSR request to be approved\"));\n+            assertFalse(pr.store().body().contains(\"Change requires a CSR request (needs to be created) to be approved\"));\n@@ -878,1 +889,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] \" + generateCSRProgressMessage(backportCsr)));\n@@ -886,1 +897,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] \" + generateCSRProgressMessage(backportCsr)));\n@@ -888,2 +899,3 @@\n-            assertLastCommentContains(pr, \"The CSR requirement cannot be removed as there is already a CSR associated \" +\n-                    \"with the main issue of this pull request. Please withdraw the CSR\");\n+            assertLastCommentContains(pr, \"The CSR requirement cannot be removed as there is already a CSR associated with the issue [\" +\n+                            issue.id() + \"](\" + issue.webUrl() + \"). Please withdraw the CSR [\"\n+                            + backportCsr.id() + \"](\" + backportCsr.webUrl() + \")\");\n@@ -908,1 +920,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] \" + generateCSRProgressMessage(backportCsr)));\n@@ -918,1 +930,1 @@\n-            assertFalse(pr.store().body().contains(\"Change requires a CSR request to be approved\"));\n+            assertFalse(pr.store().body().contains(\"- [ ] \" + generateCSRProgressMessage(backportCsr)));\n@@ -920,2 +932,2 @@\n-            assertLastCommentContains(pr, \"determined that a [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request \" +\n-                    \"is not needed for this pull request.\");\n+            assertTrue(pr.comments().get(pr.comments().size() - 2).body().contains(\"determined that a [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request \" +\n+                    \"is not needed for this pull request.\"));\n@@ -926,1 +938,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request (needs to be created) to be approved\"));\n@@ -947,0 +959,200 @@\n+\n+    @Test\n+    void prSolvesMultipleIssues(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var bot = credentials.getHostedRepository();\n+            var issues = credentials.getIssueProject();\n+            var issue = issues.createIssue(\"This is an issue\", List.of(), Map.of());\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addReviewer(reviewer.forge().currentUser().id())\n+                    .addCommitter(author.forge().currentUser().id());\n+            var prBot = PullRequestBot.newBuilder().repo(bot).issueProject(issues).censusRepo(censusBuilder.build()).enableCsr(true).build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", issue.id() + \": This is an issue\");\n+\n+            \/\/ Require CSR\n+            var prAsReviewer = reviewer.pullRequest(pr.id());\n+            prAsReviewer.addComment(\"\/csr\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+\n+            \/\/ The bot should reply with a message that a CSR is needed\n+            assertLastCommentContains(pr, \"has indicated that a \" +\n+                    \"[compatibility and specification](https:\/\/wiki.openjdk.org\/display\/csr\/Main) (CSR) request \" +\n+                    \"is needed for this pull request.\");\n+            assertTrue(pr.store().labelNames().contains(\"csr\"));\n+            \/\/ The PR body should contain the progress about CSR request\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request (needs to be created) to be approved\"));\n+\n+            var issue2 = issues.createIssue(\"This is an issue2\", List.of(), Map.of());\n+            \/\/ create a csr for issue2\n+            var csr2 = issues.createIssue(\"This is a CSR2\", List.of(), Map.of(\"resolution\",\n+                    JSON.object().put(\"name\", \"Unresolved\")));\n+            csr2.setProperty(\"issuetype\", JSON.of(\"CSR\"));\n+            csr2.setState(Issue.State.OPEN);\n+            issue2.addLink(Link.create(csr2, \"csr for\").build());\n+\n+            pr.addComment(\"\/issue TEST-2\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertTrue(pr.store().labelNames().contains(\"csr\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] \" + generateCSRProgressMessage(csr2)));\n+\n+            \/\/ Try \/csr unneeded, it should fail\n+            prAsReviewer.addComment(\"\/csr unneeded\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertTrue(pr.store().labelNames().contains(\"csr\"));\n+            assertLastCommentContains(pr, \"The CSR requirement cannot be removed as there is already a CSR associated with the issue [\" +\n+                    issue2.id() + \"](\" + issue2.webUrl() + \"). Please withdraw the CSR [\"\n+                    + csr2.id() + \"](\" + csr2.webUrl() + \")\");\n+\n+            \/\/ Withdraw the csr linked with issue2\n+            csr2.setState(Issue.State.CLOSED);\n+            csr2.setProperty(\"resolution\", JSON.object().put(\"name\", \"Withdrawn\"));\n+            prAsReviewer.addComment(\"\/csr unneeded\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertFalse(pr.store().labelNames().contains(\"csr\"));\n+\n+            \/\/ Require CSR again\n+            prAsReviewer.addComment(\"\/csr\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+\n+            \/\/ The bot should reply with a message that a CSR is needed\n+            assertLastCommentContains(pr, \"has indicated that a \" +\n+                    \"[compatibility and specification](https:\/\/wiki.openjdk.org\/display\/csr\/Main) (CSR) request \" +\n+                    \"is needed for this pull request.\");\n+            assertTrue(pr.store().labelNames().contains(\"csr\"));\n+            \/\/ The PR body should contain the progress about CSR request\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request (needs to be created) to be approved\"));\n+\n+            \/\/ Create a csr for main issue\n+            var csr1 = issues.createIssue(\"This is a CSR1\", List.of(), Map.of(\"resolution\",\n+                    JSON.object().put(\"name\", \"Unresolved\")));\n+            csr1.setProperty(\"issuetype\", JSON.of(\"CSR\"));\n+            csr1.setState(Issue.State.OPEN);\n+            issue.addLink(Link.create(csr1, \"csr for\").build());\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertTrue(pr.store().labelNames().contains(\"csr\"));\n+        }\n+    }\n+\n+\n+    @Test\n+    void prSolvesMultipleIssuesWithApprovedCSRIssues(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var bot = credentials.getHostedRepository();\n+            var issues = credentials.getIssueProject();\n+            var issue = issues.createIssue(\"This is an issue\", List.of(), Map.of());\n+            var csr = issues.createIssue(\"This is a CSR\", List.of(), Map.of());\n+            csr.setProperty(\"issuetype\", JSON.of(\"CSR\"));\n+            csr.setState(Issue.State.CLOSED);\n+            csr.setProperty(\"resolution\", JSON.object().put(\"name\", \"Approved\"));\n+            issue.addLink(Link.create(csr, \"csr for\").build());\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addReviewer(reviewer.forge().currentUser().id())\n+                    .addCommitter(author.forge().currentUser().id());\n+            var prBot = PullRequestBot.newBuilder().repo(bot).issueProject(issues).censusRepo(censusBuilder.build()).enableCsr(true).build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", issue.id() + \": This is an issue\");\n+\n+            var issue2 = issues.createIssue(\"This is an issue2\", List.of(), Map.of());\n+            \/\/ create a csr for issue2\n+            var csr2 = issues.createIssue(\"This is a CSR2\", List.of(), Map.of());\n+            csr2.setState(Issue.State.CLOSED);\n+            csr2.setProperty(\"resolution\", JSON.object().put(\"name\", \"Approved\"));\n+            csr2.setProperty(\"issuetype\", JSON.of(\"CSR\"));\n+            issue2.addLink(Link.create(csr2, \"csr for\").build());\n+\n+            pr.addComment(\"\/issue TEST-3\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            \/\/ Require CSR\n+            var prAsReviewer = reviewer.pullRequest(pr.id());\n+            prAsReviewer.addComment(\"\/csr\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertFalse(pr.store().labelNames().contains(\"csr\"));\n+            assertTrue(pr.store().body().contains(\"- [x] \" + generateCSRProgressMessage(csr)));\n+            assertTrue(pr.store().body().contains(\"- [x] \" + generateCSRProgressMessage(csr2)));\n+        }\n+    }\n+\n+    @Test\n+    void prSolvesMultipleIssuesWithWithdrawnCSRIssues(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var bot = credentials.getHostedRepository();\n+            var issues = credentials.getIssueProject();\n+            var issue = issues.createIssue(\"This is an issue\", List.of(), Map.of());\n+            var csr = issues.createIssue(\"This is a CSR\", List.of(), Map.of());\n+            csr.setProperty(\"issuetype\", JSON.of(\"CSR\"));\n+            csr.setState(Issue.State.CLOSED);\n+            csr.setProperty(\"resolution\", JSON.object().put(\"name\", \"Withdrawn\"));\n+            issue.addLink(Link.create(csr, \"csr for\").build());\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addReviewer(reviewer.forge().currentUser().id())\n+                    .addCommitter(author.forge().currentUser().id());\n+            var prBot = PullRequestBot.newBuilder().repo(bot).issueProject(issues).censusRepo(censusBuilder.build()).enableCsr(true).build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", issue.id() + \": This is an issue\");\n+\n+            var issue2 = issues.createIssue(\"This is an issue2\", List.of(), Map.of());\n+            \/\/ create a csr for issue2\n+            var csr2 = issues.createIssue(\"This is a CSR2\", List.of(), Map.of());\n+            csr2.setState(Issue.State.CLOSED);\n+            csr2.setProperty(\"resolution\", JSON.object().put(\"name\", \"Withdrawn\"));\n+            csr2.setProperty(\"issuetype\", JSON.of(\"CSR\"));\n+            issue2.addLink(Link.create(csr2, \"csr for\").build());\n+\n+            pr.addComment(\"\/issue TEST-3\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            \/\/ Require CSR\n+            var prAsReviewer = reviewer.pullRequest(pr.id());\n+            prAsReviewer.addComment(\"\/csr\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertTrue(pr.store().labelNames().contains(\"csr\"));\n+            assertLastCommentContains(pr, \"has indicated that a \" +\n+                    \"[compatibility and specification](https:\/\/wiki.openjdk.org\/display\/csr\/Main) (CSR) request \" +\n+                    \"is needed for this pull request.\");\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request (needs to be created) to be approved\"));\n+            assertFalse(pr.store().body().contains(generateCSRProgressMessage(csr)));\n+            assertFalse(pr.store().body().contains(generateCSRProgressMessage(csr2)));\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CSRTests.java","additions":262,"deletions":50,"binary":false,"changes":312,"status":"modified"}]}