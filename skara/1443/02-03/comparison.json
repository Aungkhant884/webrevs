{"files":[{"patch":"@@ -112,0 +112,1 @@\n+            var containsOpenCsrIssue = false;\n@@ -139,2 +140,1 @@\n-                    reply.println(CSR_NEEDED_MARKER);\n-                    return;\n+                    containsOpenCsrIssue = true;\n@@ -143,3 +143,7 @@\n-            \/\/ All the issues associated with this pr either don't have csr issue or the csr issue has already been withdrawn,\n-            \/\/ the bot should just remove the csr label and reply the message.\n-            csrUnneededReply(pr, reply);\n+            if (containsOpenCsrIssue) {\n+                reply.println(CSR_NEEDED_MARKER);\n+            } else {\n+                \/\/ All the issues associated with this pr either don't have csr issue or the csr issue has already been withdrawn,\n+                \/\/ the bot should just remove the csr label and reply the message.\n+                csrUnneededReply(pr, reply);\n+            }\n@@ -179,0 +183,5 @@\n+        var approvedCsrIssues = 0;\n+        var openCsrIssues = 0;\n+        var withdrawnCsrIssues = 0;\n+        var csrIssues = 0;\n+\n@@ -196,0 +205,1 @@\n+            csrIssues++;\n@@ -208,1 +218,1 @@\n-                reply.println(CSR_NEEDED_MARKER);\n+                approvedCsrIssues++;\n@@ -210,1 +220,1 @@\n-                continue;\n+                withdrawnCsrIssues++;\n@@ -215,2 +225,1 @@\n-                reply.println(CSR_NEEDED_MARKER);\n-                pr.addLabel(CSR_LABEL);\n+                openCsrIssues++;\n@@ -218,1 +227,0 @@\n-            return;\n@@ -221,3 +229,13 @@\n-        csrReply(reply);\n-        if (issues.size() == 1) {\n-            linkReply(pr, jbsMainIssueOpt.get(), reply);\n+        if (csrIssues == withdrawnCsrIssues) {\n+            csrReply(reply);\n+            if (issues.size() == 1) {\n+                linkReply(pr, jbsMainIssueOpt.get(), reply);\n+            }\n+            pr.addLabel(CSR_LABEL);\n+        } else if (csrIssues == approvedCsrIssues) {\n+            \/\/ All the csr issues are approved\n+            reply.println(CSR_NEEDED_MARKER);\n+        } else if (openCsrIssues > 0) {\n+            \/\/ At least one csr issue open\n+            reply.println(CSR_NEEDED_MARKER);\n+            pr.addLabel(CSR_LABEL);\n@@ -225,1 +243,0 @@\n-        pr.addLabel(CSR_LABEL);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CSRCommand.java","additions":31,"deletions":14,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -1050,0 +1050,109 @@\n+\n+\n+    @Test\n+    void prSolvesMultipleIssuesWithApprovedCSRIssues(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var bot = credentials.getHostedRepository();\n+            var issues = credentials.getIssueProject();\n+            var issue = issues.createIssue(\"This is an issue\", List.of(), Map.of());\n+            var csr = issues.createIssue(\"This is a CSR\", List.of(), Map.of());\n+            csr.setProperty(\"issuetype\", JSON.of(\"CSR\"));\n+            csr.setState(Issue.State.CLOSED);\n+            csr.setProperty(\"resolution\", JSON.object().put(\"name\", \"Approved\"));\n+            issue.addLink(Link.create(csr, \"csr for\").build());\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addReviewer(reviewer.forge().currentUser().id())\n+                    .addCommitter(author.forge().currentUser().id());\n+            var prBot = PullRequestBot.newBuilder().repo(bot).issueProject(issues).censusRepo(censusBuilder.build()).enableCsr(true).build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", issue.id() + \": This is an issue\");\n+\n+            var issue2 = issues.createIssue(\"This is an issue2\", List.of(), Map.of());\n+            \/\/ create a csr for issue2\n+            var csr2 = issues.createIssue(\"This is a CSR2\", List.of(), Map.of());\n+            csr2.setState(Issue.State.CLOSED);\n+            csr2.setProperty(\"resolution\", JSON.object().put(\"name\", \"Approved\"));\n+            csr2.setProperty(\"issuetype\", JSON.of(\"CSR\"));\n+            issue2.addLink(Link.create(csr2, \"csr for\").build());\n+\n+            pr.addComment(\"\/issue TEST-3\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            \/\/ Require CSR\n+            var prAsReviewer = reviewer.pullRequest(pr.id());\n+            prAsReviewer.addComment(\"\/csr\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertFalse(pr.store().labelNames().contains(\"csr\"));\n+            assertTrue(pr.store().body().contains(\"- [x] \" + generateCSRProgressMessage(csr)));\n+            assertTrue(pr.store().body().contains(\"- [x] \" + generateCSRProgressMessage(csr2)));\n+        }\n+    }\n+\n+    @Test\n+    void prSolvesMultipleIssuesWithWithdrawnCSRIssues(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var bot = credentials.getHostedRepository();\n+            var issues = credentials.getIssueProject();\n+            var issue = issues.createIssue(\"This is an issue\", List.of(), Map.of());\n+            var csr = issues.createIssue(\"This is a CSR\", List.of(), Map.of());\n+            csr.setProperty(\"issuetype\", JSON.of(\"CSR\"));\n+            csr.setState(Issue.State.CLOSED);\n+            csr.setProperty(\"resolution\", JSON.object().put(\"name\", \"Withdrawn\"));\n+            issue.addLink(Link.create(csr, \"csr for\").build());\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addReviewer(reviewer.forge().currentUser().id())\n+                    .addCommitter(author.forge().currentUser().id());\n+            var prBot = PullRequestBot.newBuilder().repo(bot).issueProject(issues).censusRepo(censusBuilder.build()).enableCsr(true).build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", issue.id() + \": This is an issue\");\n+\n+            var issue2 = issues.createIssue(\"This is an issue2\", List.of(), Map.of());\n+            \/\/ create a csr for issue2\n+            var csr2 = issues.createIssue(\"This is a CSR2\", List.of(), Map.of());\n+            csr2.setState(Issue.State.CLOSED);\n+            csr2.setProperty(\"resolution\", JSON.object().put(\"name\", \"Withdrawn\"));\n+            csr2.setProperty(\"issuetype\", JSON.of(\"CSR\"));\n+            issue2.addLink(Link.create(csr2, \"csr for\").build());\n+\n+            pr.addComment(\"\/issue TEST-3\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            \/\/ Require CSR\n+            var prAsReviewer = reviewer.pullRequest(pr.id());\n+            prAsReviewer.addComment(\"\/csr\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertTrue(pr.store().labelNames().contains(\"csr\"));\n+            assertLastCommentContains(pr, \"has indicated that a \" +\n+                    \"[compatibility and specification](https:\/\/wiki.openjdk.org\/display\/csr\/Main) (CSR) request \" +\n+                    \"is needed for this pull request.\");\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request (needs to be created) to be approved\"));\n+            assertFalse(pr.store().body().contains(generateCSRProgressMessage(csr)));\n+            assertFalse(pr.store().body().contains(generateCSRProgressMessage(csr2)));\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CSRTests.java","additions":109,"deletions":0,"binary":false,"changes":109,"status":"modified"}]}