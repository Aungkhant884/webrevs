{"files":[{"patch":"@@ -46,0 +46,1 @@\n+    implementation project(\":bots:pr\")\n","filename":"bots\/csr\/build.gradle","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+    requires org.openjdk.skara.bots.pr;\n","filename":"bots\/csr\/src\/main\/java\/module-info.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.util.ArrayList;\n@@ -33,0 +34,1 @@\n+\n@@ -35,0 +37,1 @@\n+import org.openjdk.skara.bots.pr.SolvesTracker;\n@@ -93,2 +96,2 @@\n-                (statusMessage.contains(\"- [ ] Change requires a CSR request to be approved\") ||\n-                        statusMessage.contains(\"- [x] Change requires a CSR request to be approved\"));\n+                (statusMessage.contains(\"- [ ] Change requires a CSR request (\" + csr.id() + \") to be approved\") ||\n+                        statusMessage.contains(\"- [x] Change requires a CSR request (\" + csr.id() + \") to be approved\"));\n@@ -99,1 +102,1 @@\n-        return hasCsrIssue(statusMessage, csr) && statusMessage.contains(\"- [x] Change requires a CSR request to be approved\");\n+        return hasCsrIssue(statusMessage, csr) && statusMessage.contains(\"- [x] Change requires a CSR request (\" + csr.id() + \") to be approved\");\n@@ -129,9 +132,8 @@\n-\n-        var issue = org.openjdk.skara.vcs.openjdk.Issue.fromStringRelaxed(pr.title());\n-        if (issue.isEmpty()) {\n-            log.info(\"No issue found in title for \" + describe(pr));\n-            return List.of();\n-        }\n-        var jbsIssueOpt = project.issue(issue.get().shortId());\n-        if (jbsIssueOpt.isEmpty()) {\n-            log.info(\"No issue found in JBS for \" + describe(pr));\n+        \/\/ All the issues this pr solves\n+        var mainIssue = org.openjdk.skara.vcs.openjdk.Issue.fromStringRelaxed(pr.title());\n+        var issues = new ArrayList<org.openjdk.skara.vcs.openjdk.Issue>();\n+        mainIssue.ifPresent(issues::add);\n+        issues.addAll(SolvesTracker.currentSolved(pr.repository().forge().currentUser(), pr.comments()));\n+\n+        if (issues.isEmpty()) {\n+            log.info(\"No issue found for \" + describe(pr));\n@@ -147,14 +149,12 @@\n-        var csrOptional = Backports.findCsr(jbsIssueOpt.get(), versionOpt.get());\n-        if (csrOptional.isEmpty()) {\n-            log.info(\"No CSR found for \" + describe(pr));\n-            return List.of();\n-        }\n-        var csr = csrOptional.get();\n-\n-        log.info(\"Found CSR \" + csr.id() + \" for \" + describe(pr));\n-        if (!hasCsrIssueAndProgress(pr, csr) && !isWithdrawnCSR(csr)) {\n-            \/\/ If the PR body doesn't have the CSR issue or doesn't have the CSR progress,\n-            \/\/ this bot need to add the csr update marker so that the PR bot can update the message of the PR body.\n-            log.info(\"The PR body doesn't have the CSR issue or progress, adding the csr update marker for \" + describe(pr));\n-            addUpdateMarker(pr);\n-        }\n+        boolean allCSRApproved = true;\n+\n+        for (var issue : issues) {\n+            var jbsIssueOpt = project.issue(issue.shortId());\n+            if (jbsIssueOpt.isEmpty()) {\n+                \/\/ One issue could not be found in JBS, so the csr label cannot be removed until the problem is solved\n+                allCSRApproved = false;\n+                var issueId = issue.project().isEmpty() ? (project.name() + \"-\" + issue.id()) : issue.id();\n+                log.info(\"No issue found in JBS related with this issue \" + issueId + \"for \" + describe(pr));\n+                \/\/ allCSRApproved is false now, so we could break now\n+                break;\n+            }\n@@ -162,7 +162,4 @@\n-        var resolution = csr.properties().get(\"resolution\");\n-        if (resolution == null || resolution.isNull()) {\n-            if (!pr.labelNames().contains(CSR_LABEL)) {\n-                log.info(\"CSR issue resolution is null for \" + describe(pr) + \", adding the CSR label\");\n-                pr.addLabel(CSR_LABEL);\n-            } else {\n-                log.info(\"CSR issue resolution is null for \" + describe(pr) + \", not removing the CSR label\");\n+            var csrOptional = Backports.findCsr(jbsIssueOpt.get(), versionOpt.get());\n+            if (csrOptional.isEmpty()) {\n+                log.info(\"No CSR found for issue \" + jbsIssueOpt.get().id() + \" for \" + describe(pr));\n+                continue;\n@@ -170,10 +167,9 @@\n-            logLatency();\n-            return List.of();\n-        }\n-        var name = resolution.get(\"name\");\n-        if (name == null || name.isNull()) {\n-            if (!pr.labelNames().contains(CSR_LABEL)) {\n-                log.info(\"CSR issue resolution name is null for \" + describe(pr) + \", adding the CSR label\");\n-                pr.addLabel(CSR_LABEL);\n-            } else {\n-                log.info(\"CSR issue resolution name is null for \" + describe(pr) + \", not removing the CSR label\");\n+            var csr = csrOptional.get();\n+\n+            log.info(\"Found CSR \" + csr.id() + \" for issue \" + jbsIssueOpt.get().id() + \" for \" + describe(pr));\n+            if (!hasCsrIssueAndProgress(pr, csr) && !isWithdrawnCSR(csr)) {\n+                \/\/ If the PR body doesn't have the CSR issue or doesn't have the CSR progress,\n+                \/\/ this bot need to add the csr update marker so that the PR bot can update the message of the PR body.\n+                log.info(\"The PR body doesn't have the CSR issue or progress, adding the csr update marker for this csr issue\"\n+                        + csr.id() + \" for \" + describe(pr));\n+                addUpdateMarker(pr);\n@@ -181,3 +177,0 @@\n-            logLatency();\n-            return List.of();\n-        }\n@@ -185,6 +178,11 @@\n-        if (csr.state() != Issue.State.CLOSED) {\n-            if (!pr.labelNames().contains(CSR_LABEL)) {\n-                log.info(\"CSR issue state is not closed for \" + describe(pr) + \", adding the CSR label\");\n-                pr.addLabel(CSR_LABEL);\n-            } else {\n-                log.info(\"CSR issue state is not closed for \" + describe(pr) + \", not removing the CSR label\");\n+            var resolution = csr.properties().get(\"resolution\");\n+            if (resolution == null || resolution.isNull()) {\n+                allCSRApproved = false;\n+                if (!pr.labelNames().contains(CSR_LABEL)) {\n+                    log.info(\"CSR issue resolution is null for csr issue \" + csr.id() + \" for \" + describe(pr) + \", adding the CSR label\");\n+                    pr.addLabel(CSR_LABEL);\n+                } else {\n+                    log.info(\"CSR issue resolution is null for csr issue \" + csr.id() + \" for \" + describe(pr) + \", not removing the CSR label\");\n+                }\n+                \/\/ allCSRApproved is false now, so we could break now\n+                break;\n@@ -192,3 +190,0 @@\n-            logLatency();\n-            return List.of();\n-        }\n@@ -196,12 +191,11 @@\n-        if (!name.asString().equals(\"Approved\")) {\n-            if (name.asString().equals(\"Withdrawn\")) {\n-                \/\/ This condition is necessary to prevent the bot from adding the CSR label again.\n-                \/\/ And the bot can't remove the CSR label automatically here.\n-                \/\/ Because the PR author with the role of Committer may withdraw a CSR that\n-                \/\/ a Reviewer had requested and integrate it without satisfying that requirement.\n-                log.info(\"CSR closed and withdrawn for \" + describe(pr) + \", not revising (not adding and not removing) CSR label\");\n-            } else if (!pr.labelNames().contains(CSR_LABEL)) {\n-                log.info(\"CSR issue resolution is not 'Approved' for \" + describe(pr) + \", adding the CSR label\");\n-                pr.addLabel(CSR_LABEL);\n-            } else {\n-                log.info(\"CSR issue resolution is not 'Approved' for \" + describe(pr) + \", not removing the CSR label\");\n+            var name = resolution.get(\"name\");\n+            if (name == null || name.isNull()) {\n+                allCSRApproved = false;\n+                if (!pr.labelNames().contains(CSR_LABEL)) {\n+                    log.info(\"CSR issue resolution name is null for csr issue \" + csr.id() + \" for \" + describe(pr) + \", adding the CSR label\");\n+                    pr.addLabel(CSR_LABEL);\n+                } else {\n+                    log.info(\"CSR issue resolution name is null for csr issue \" + csr.id() + \" for \" + describe(pr) + \", not removing the CSR label\");\n+                }\n+                \/\/ allCSRApproved is false now, so we could break now\n+                break;\n@@ -209,3 +203,0 @@\n-            logLatency();\n-            return List.of();\n-        }\n@@ -213,3 +204,38 @@\n-        if (pr.labelNames().contains(CSR_LABEL)) {\n-            log.info(\"CSR closed and approved for \" + describe(pr) + \", removing CSR label\");\n-            pr.removeLabel(CSR_LABEL);\n+            if (csr.state() != Issue.State.CLOSED) {\n+                allCSRApproved = false;\n+                if (!pr.labelNames().contains(CSR_LABEL)) {\n+                    log.info(\"CSR issue state is not closed for csr issue \" + csr.id() + \" for \" + describe(pr) + \", adding the CSR label\");\n+                    pr.addLabel(CSR_LABEL);\n+                } else {\n+                    log.info(\"CSR issue state is not closed for csr issue\" + csr.id() + \" for \" + describe(pr) + \", not removing the CSR label\");\n+                }\n+                \/\/ allCSRApproved is false now, so we could break now\n+                break;\n+            }\n+\n+            if (!name.asString().equals(\"Approved\")) {\n+                if (name.asString().equals(\"Withdrawn\")) {\n+                    \/\/ This condition is necessary to prevent the bot from adding the CSR label again.\n+                    \/\/ And the bot can't remove the CSR label automatically here.\n+                    \/\/ Because the PR author with the role of Committer may withdraw a CSR that\n+                    \/\/ a Reviewer had requested and integrate it without satisfying that requirement.\n+                    log.info(\"CSR closed and withdrawn for csr issue \" + csr.id() + \" for \" + describe(pr));\n+                    continue;\n+                } else if (!pr.labelNames().contains(CSR_LABEL)) {\n+                    allCSRApproved = false;\n+                    log.info(\"CSR issue resolution is not 'Approved' for csr issue \" + csr.id() + \" for \" + describe(pr) + \", adding the CSR label\");\n+                    pr.addLabel(CSR_LABEL);\n+                } else {\n+                    allCSRApproved = false;\n+                    log.info(\"CSR issue resolution is not 'Approved' for csr issue \" + csr.id() + \" for \" + describe(pr) + \", not removing the CSR label\");\n+                }\n+                break;\n+            }\n+\n+            \/\/ The CSR issue has been closed and approved\n+            if (!hasCsrIssueAndProgressChecked(pr, csr)) {\n+                \/\/ If the PR body doesn't have the CSR issue or doesn't have the CSR progress or the CSR progress checkbox is not selected,\n+                \/\/ this bot need to add the csr update marker so that the PR bot can update the message of the PR body.\n+                log.info(\"CSR closed and approved for \" + describe(pr) + \", adding the csr update marker\");\n+                addUpdateMarker(pr);\n+            }\n@@ -217,5 +243,3 @@\n-        if (!hasCsrIssueAndProgressChecked(pr, csr)) {\n-            \/\/ If the PR body doesn't have the CSR issue or doesn't have the CSR progress or the CSR progress checkbox is not selected,\n-            \/\/ this bot need to add the csr update marker so that the PR bot can update the message of the PR body.\n-            log.info(\"CSR closed and approved for \" + describe(pr) + \", adding the csr update marker\");\n-            addUpdateMarker(pr);\n+        if (allCSRApproved && pr.labelNames().contains(CSR_LABEL)) {\n+            log.info(\"All CSR issues closed and approved for \" + describe(pr) + \", removing CSR label\");\n+            pr.removeLabel(CSR_LABEL);\n","filename":"bots\/csr\/src\/main\/java\/org\/openjdk\/skara\/bots\/csr\/PullRequestWorkItem.java","additions":102,"deletions":78,"binary":false,"changes":180,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import org.openjdk.skara.bots.pr.SolvesTracker;\n@@ -469,1 +470,1 @@\n-                    + \"- [ ] Change requires a CSR request to be approved\");\n+                    + \"- [ ] Change requires a CSR request (\" + csr.id() + \") to be approved\");\n@@ -485,1 +486,1 @@\n-                    + \"- [x] Change requires a CSR request to be approved\");\n+                    + \"- [x] Change requires a CSR request (\" + csr.id() + \") to be approved\");\n@@ -493,1 +494,1 @@\n-                    + \"- [ ] Change requires a CSR request to be approved\" + csrUpdateMarker);\n+                    + \"- [ ] Change requires a CSR request (\" +  csr.id() + \") to be approved\" + csrUpdateMarker);\n@@ -505,1 +506,0 @@\n-        String progressMarker = \"<!-- Anything below this marker will be automatically updated, please do not edit manually! -->\";\n@@ -553,0 +553,79 @@\n+\n+    @Test\n+    void testPRWithMultipleIssues(TestInfo testInfo) throws IOException{\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var repo = credentials.getHostedRepository();\n+            var issueProject = credentials.getIssueProject();\n+            var issue = issueProject.createIssue(\"This is an issue\", List.of(), Map.of());\n+            issue.setProperty(\"issuetype\", JSON.of(\"Bug\"));\n+            var csrPullRequestBot = new CSRPullRequestBot(repo, issueProject);\n+            var csrIssueBot = new CSRIssueBot(issueProject, List.of(repo));\n+\n+            \/\/ Run issue bot once to initialize lastUpdatedAt\n+            TestBotRunner.runPeriodicItems(csrIssueBot);\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n+            var localRepo = CheckableRepository.init(localRepoFolder, repo.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, repo.url(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, repo.url(), \"edit\", true);\n+            var pr = credentials.createPullRequest(repo, \"master\", \"edit\", issue.id() + \": This is an issue\");\n+            \/\/ Add the notification link to the PR in the issue. This is needed for the CSRIssueBot to\n+            \/\/ be able to trigger on CSR issue updates\n+            PullRequestUtils.postPullRequestLinkComment(issue, pr);\n+            \/\/ Run bot\n+            TestBotRunner.runPeriodicItems(csrPullRequestBot);\n+\n+            \/\/ Add an issue to this pr\n+            var issue2 = issueProject.createIssue(\"This is an issue 2\", List.of(), Map.of());\n+            issue2.setProperty(\"issuetype\", JSON.of(\"Bug\"));\n+            pr.addComment(SolvesTracker.setSolvesMarker(new org.openjdk.skara.vcs.openjdk.Issue(issue2.id(), issue2.title())));\n+            PullRequestUtils.postPullRequestLinkComment(issue2, pr);\n+\n+            \/\/ Add a csr to issue2\n+            var csr2 = issueProject.createIssue(\"This is an CSR for issue2\", List.of(), Map.of());\n+            csr2.setProperty(\"issuetype\", JSON.of(\"CSR\"));\n+            csr2.setState(Issue.State.OPEN);\n+            issue2.addLink(Link.create(csr2, \"csr for\").build());\n+\n+            TestBotRunner.runPeriodicItems(csrIssueBot);\n+            \/\/ PR should contain csr label\n+            assertTrue(pr.store().labelNames().contains(\"csr\"));\n+\n+            \/\/ Add another issue to this pr\n+            var issue3 = issueProject.createIssue(\"This is an issue 3\", List.of(), Map.of());\n+            issue3.setProperty(\"issuetype\", JSON.of(\"Bug\"));\n+            pr.addComment(SolvesTracker.setSolvesMarker(new org.openjdk.skara.vcs.openjdk.Issue(issue3.id(), issue3.title())));\n+            PullRequestUtils.postPullRequestLinkComment(issue3, pr);\n+\n+            \/\/ Withdrawn the csr for issue2\n+            csr2.setState(Issue.State.CLOSED);\n+            csr2.setProperty(\"resolution\", JSON.object().put(\"name\", \"Withdrawn\"));\n+            TestBotRunner.runPeriodicItems(csrIssueBot);\n+            \/\/ PR should not contain csr label\n+            assertFalse(pr.store().labelNames().contains(\"csr\"));\n+\n+            \/\/ Add a csr to issue3\n+            var csr3 = issueProject.createIssue(\"This is an CSR for issue3\", List.of(), Map.of());\n+            csr3.setProperty(\"issuetype\", JSON.of(\"CSR\"));\n+            csr3.setState(Issue.State.OPEN);\n+            issue3.addLink(Link.create(csr3, \"csr for\").build());\n+\n+            TestBotRunner.runPeriodicItems(csrIssueBot);\n+            \/\/ PR should contain csr label\n+            assertTrue(pr.store().labelNames().contains(\"csr\"));\n+\n+            \/\/ Approve CSR3\n+            csr3.setState(Issue.State.CLOSED);\n+            csr3.setProperty(\"resolution\", JSON.object().put(\"name\", \"Approved\"));\n+            TestBotRunner.runPeriodicItems(csrIssueBot);\n+            \/\/ PR should not contain csr label\n+            assertFalse(pr.store().labelNames().contains(\"csr\"));\n+        }\n+    }\n","filename":"bots\/csr\/src\/test\/java\/org\/openjdk\/skara\/bots\/csr\/CSRBotTests.java","additions":83,"deletions":4,"binary":false,"changes":87,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+    exports org.openjdk.skara.bots.pr;\n","filename":"bots\/pr\/src\/main\/java\/module-info.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.util.ArrayList;\n@@ -57,3 +58,3 @@\n-    private static void linkReply(PullRequest pr, Issue issue, PrintWriter writer) {\n-        writer.println(\"@\" + pr.author().username() + \" please create a [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request for issue \" +\n-                \"[\" + issue.id() + \"](\" + issue.webUrl() + \") with the correct fix version. \" +\n+    private static void csrCreateReply(PullRequest pr,  PrintWriter writer) {\n+        writer.println(\"@\" + pr.author().username() + \" please create a [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) \" +\n+                \"request for any issue associated with this pr with the correct fix version \" +\n@@ -99,7 +100,2 @@\n-            var issue = org.openjdk.skara.vcs.openjdk.Issue.fromStringRelaxed(pr.title());\n-            if (issueProject == null || issue.isEmpty()) {\n-                csrUnneededReply(pr, reply);\n-                return;\n-            }\n-            var jbsIssueOpt = issueProject.issue(issue.get().shortId());\n-            if (jbsIssueOpt.isEmpty()) {\n+            var mainIssue = org.openjdk.skara.vcs.openjdk.Issue.fromStringRelaxed(pr.title());\n+            if (issueProject == null || mainIssue.isEmpty()) {\n@@ -110,24 +106,35 @@\n-            var versionOpt = BotUtils.getVersion(pr);\n-            if (versionOpt.isEmpty()) {\n-                csrUnneededReply(pr, reply);\n-                return;\n-            }\n-\n-            var csrOptional = Backports.findCsr(jbsIssueOpt.get(), versionOpt.get());\n-            if (csrOptional.isEmpty()) {\n-                csrUnneededReply(pr, reply);\n-                return;\n-            }\n-            var csrIssue = csrOptional.get();\n-\n-            var resolution = csrIssue.properties().get(\"resolution\");\n-            if (resolution == null || resolution.isNull()\n-                    || resolution.get(\"name\") == null || resolution.get(\"name\").isNull()\n-                    || csrIssue.state() != Issue.State.CLOSED\n-                    || !resolution.get(\"name\").asString().equals(\"Withdrawn\")) {\n-                \/\/ The issue has a non-withdrawn csr issue, the bot should direct the user to withdraw the csr firstly.\n-                reply.println(\"The CSR requirement cannot be removed as there is already a CSR associated with the main issue\" +\n-                              \" of this pull request. Please withdraw the CSR [\" + csrIssue.id() + \"](\" + csrIssue.webUrl() +\n-                              \") and then use the command `\/csr unneeded` again.\");\n-                reply.println(CSR_NEEDED_MARKER);\n-                return;\n+            \/\/ All the issues this pr solves\n+            var issues = new ArrayList<org.openjdk.skara.vcs.openjdk.Issue>();\n+            issues.add(mainIssue.get());\n+            issues.addAll(SolvesTracker.currentSolved(pr.repository().forge().currentUser(), pr.comments()));\n+\n+            for (var issue : issues) {\n+                var jbsIssueOpt = issueProject.issue(issue.shortId());\n+                if (jbsIssueOpt.isEmpty()) {\n+                    continue;\n+                }\n+                var jbsIssue = jbsIssueOpt.get();\n+\n+                var versionOpt = BotUtils.getVersion(pr);\n+                if (versionOpt.isEmpty()) {\n+                    break;\n+                }\n+\n+                var csrOptional = Backports.findCsr(jbsIssue, versionOpt.get());\n+                if (csrOptional.isEmpty()) {\n+                    continue;\n+                }\n+                var csrIssue = csrOptional.get();\n+\n+                var resolution = csrIssue.properties().get(\"resolution\");\n+                if (resolution == null || resolution.isNull()\n+                        || resolution.get(\"name\") == null || resolution.get(\"name\").isNull()\n+                        || csrIssue.state() != Issue.State.CLOSED\n+                        || !resolution.get(\"name\").asString().equals(\"Withdrawn\")) {\n+                    \/\/ The issue has a non-withdrawn csr issue, the bot should direct the user to withdraw the csr firstly.\n+                    reply.println(\"The CSR requirement cannot be removed as there is already a CSR associated with the issue [\" +\n+                            jbsIssue.id() + \"](\" + jbsIssue.webUrl() + \") of this pull request. Please withdraw the CSR [\"\n+                            + csrIssue.id() + \"](\" + csrIssue.webUrl() + \") and then use the command `\/csr unneeded` again.\");\n+                    reply.println(CSR_NEEDED_MARKER);\n+                    return;\n+                }\n@@ -135,2 +142,2 @@\n-\n-            \/\/ The csr has been withdrawn, the bot should just remove the csr label and reply the message.\n+            \/\/ All the issue associated with this pr don't have csr issue or the csr issue has already been withdrawn,\n+            \/\/ the bot should just remove the csr label and reply the message.\n@@ -143,1 +150,1 @@\n-                          \"is already required for this pull request.\");\n+                    \"is already required for this pull request.\");\n@@ -149,2 +156,3 @@\n-        var issue = org.openjdk.skara.vcs.openjdk.Issue.fromStringRelaxed(pr.title());\n-        if (issue.isEmpty()) {\n+        \/\/ Main issue is missing, this pr doesn't solve any issue\n+        var mainIssue = org.openjdk.skara.vcs.openjdk.Issue.fromStringRelaxed(pr.title());\n+        if (issueProject == null || mainIssue.isEmpty()) {\n@@ -157,2 +165,2 @@\n-        var jbsIssueOpt = issueProject.issue(issue.get().shortId());\n-        if (jbsIssueOpt.isEmpty()) {\n+        var jbsMainIssueOpt = issueProject.issue(mainIssue.get().shortId());\n+        if (jbsMainIssueOpt.isEmpty()) {\n@@ -165,8 +173,4 @@\n-        var jbsIssue = jbsIssueOpt.get();\n-        var versionOpt = BotUtils.getVersion(pr);\n-        if (versionOpt.isEmpty()) {\n-            csrReply(reply);\n-            linkReply(pr, jbsIssue, reply);\n-            pr.addLabel(CSR_LABEL);\n-            return;\n-        }\n+        \/\/ All the issues this pr solves\n+        var issues = new ArrayList<org.openjdk.skara.vcs.openjdk.Issue>();\n+        issues.add(mainIssue.get());\n+        issues.addAll(SolvesTracker.currentSolved(pr.repository().forge().currentUser(), pr.comments()));\n@@ -174,15 +178,4 @@\n-        var csrOptional = Backports.findCsr(jbsIssueOpt.get(), versionOpt.get());\n-        if (csrOptional.isEmpty()) {\n-            csrReply(reply);\n-            linkReply(pr, jbsIssue, reply);\n-            pr.addLabel(CSR_LABEL);\n-            return;\n-        }\n-        var csr = csrOptional.get();\n-\n-        var resolutionName = \"Unresolved\";\n-        var resolution = csr.properties().getOrDefault(\"resolution\", JSON.of());\n-        if (resolution.isObject() && resolution.asObject().contains(\"name\")) {\n-            var nameField = resolution.get(\"name\");\n-            if (nameField.isString()) {\n-                resolutionName = resolution.get(\"name\").asString();\n+        for (var issue : issues) {\n+            var jbsIssueOpt = issueProject.issue(issue.shortId());\n+            if (jbsIssueOpt.isEmpty()) {\n+                continue;\n@@ -190,0 +183,35 @@\n+            var jbsIssue = jbsIssueOpt.get();\n+            var versionOpt = BotUtils.getVersion(pr);\n+            if (versionOpt.isEmpty()) {\n+                break;\n+            }\n+\n+            var csrOptional = Backports.findCsr(jbsIssueOpt.get(), versionOpt.get());\n+            if (csrOptional.isEmpty()) {\n+                continue;\n+            }\n+            \/\/ Could find a csr issue for one of the issues associated with this pr\n+            var csr = csrOptional.get();\n+\n+            var resolutionName = \"Unresolved\";\n+            var resolution = csr.properties().getOrDefault(\"resolution\", JSON.of());\n+            if (resolution.isObject() && resolution.asObject().contains(\"name\")) {\n+                var nameField = resolution.get(\"name\");\n+                if (nameField.isString()) {\n+                    resolutionName = resolution.get(\"name\").asString();\n+                }\n+            }\n+            if (csr.state() == Issue.State.CLOSED && resolutionName.equals(\"Approved\")) {\n+                reply.println(\"the issue for this pull request, [\" + jbsIssue.id() + \"](\" + jbsIssue.webUrl() + \"), already has \" +\n+                        \"an approved CSR request: [\" + csr.id() + \"](\" + csr.webUrl() + \")\");\n+                reply.println(CSR_NEEDED_MARKER);\n+            } else if (csr.state() == Issue.State.CLOSED && resolutionName.equals(\"Withdrawn\")) {\n+                continue;\n+            } else {\n+                reply.println(\"this pull request will not be integrated until the [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) \" +\n+                        \"request \" + \"[\" + csr.id() + \"](\" + csr.webUrl() + \")\" + \" for issue \" +\n+                        \"[\" + jbsIssue.id() + \"](\" + jbsIssue.webUrl() + \") has been approved.\");\n+                reply.println(CSR_NEEDED_MARKER);\n+                pr.addLabel(CSR_LABEL);\n+            }\n+            return;\n@@ -191,11 +219,4 @@\n-        if (csr.state() == Issue.State.CLOSED && resolutionName.equals(\"Approved\")) {\n-            reply.println(\"the issue for this pull request, [\" + jbsIssue.id() + \"](\" + jbsIssue.webUrl() + \"), already has \" +\n-                          \"an approved CSR request: [\" + csr.id() + \"](\" + csr.webUrl() + \")\");\n-            reply.println(CSR_NEEDED_MARKER);\n-        } else {\n-            reply.println(\"this pull request will not be integrated until the [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) \" +\n-                          \"request \" + \"[\" + csr.id() + \"](\" + csr.webUrl() + \")\" + \" for issue \" +\n-                          \"[\" + jbsIssue.id() + \"](\" + jbsIssue.webUrl() + \") has been approved.\");\n-            reply.println(CSR_NEEDED_MARKER);\n-            pr.addLabel(CSR_LABEL);\n-        }\n+        \/\/ All the issues associated with pr don't have csr issue or the csr issue has already been withdrawn\n+        csrReply(reply);\n+        csrCreateReply(pr, reply);\n+        pr.addLabel(CSR_LABEL);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CSRCommand.java","additions":96,"deletions":75,"binary":false,"changes":171,"status":"modified"},{"patch":"@@ -126,1 +126,1 @@\n-                getCsrIssue(issue.get()).ifPresent(issues::add);\n+                issues.addAll(getCsrIssues(issues));\n@@ -137,1 +137,1 @@\n-     * Get the csr issue. Note: this `Issue` is not the issue in module `issuetracker`.\n+     * Get the csr issues. Note: this `Issue` is the issue in module `issuetracker`.\n@@ -139,1 +139,1 @@\n-    private Optional<Issue> getCsrIssue(Issue issue) {\n+    private List<org.openjdk.skara.issuetracker.Issue> getCsrIssueTrackerIssues(List<Issue> issues) {\n@@ -142,5 +142,1 @@\n-            return Optional.empty();\n-        }\n-        var jbsIssueOpt = issueProject.issue(issue.shortId());\n-        if (jbsIssueOpt.isEmpty()) {\n-            return Optional.empty();\n+            return List.of();\n@@ -148,1 +144,0 @@\n-\n@@ -151,1 +146,1 @@\n-            return Optional.empty();\n+            return List.of();\n@@ -153,0 +148,16 @@\n+        var csrIssues = new ArrayList<org.openjdk.skara.issuetracker.Issue>();\n+        for (var issue : issues) {\n+            var jbsIssueOpt = issueProject.issue(issue.shortId());\n+            if (jbsIssueOpt.isEmpty()) {\n+                continue;\n+            }\n+            Backports.findCsr(jbsIssueOpt.get(), versionOpt.get())\n+                    .ifPresent(csrIssues::add);\n+        }\n+        return csrIssues;\n+    }\n+\n+    \/**\n+     * Get the csr issue. Note: this `Issue` is not the issue in module `issuetracker`.\n+     *\/\n+    private List<Issue> getCsrIssues(List<Issue> issues) {\n@@ -154,2 +165,5 @@\n-        return Backports.findCsr(jbsIssueOpt.get(), versionOpt.get())\n-                .flatMap(perIssue -> Issue.fromStringRelaxed(perIssue.id() + \": \" + perIssue.title()));\n+        return getCsrIssueTrackerIssues(issues).stream()\n+                .map(perIssue -> Issue.fromStringRelaxed(perIssue.id() + \": \" + perIssue.title()))\n+                .filter(Optional::isPresent)\n+                .map(Optional::get)\n+                .toList();\n@@ -232,0 +246,12 @@\n+    private boolean isWithdrawnCSR(org.openjdk.skara.issuetracker.Issue csr) {\n+        if (csr.isClosed()) {\n+            var resolution = csr.properties().get(\"resolution\");\n+            if (resolution != null && !resolution.isNull()) {\n+                var name = resolution.get(\"name\");\n+                if (name != null && !name.isNull() && name.asString().equals(\"Withdrawn\")) {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n@@ -235,15 +261,23 @@\n-        if (pr.labelNames().contains(\"csr\")) {\n-            \/\/ If the PR have csr label, the CSR request need to be approved.\n-            ret.put(\"Change requires a CSR request to be approved\", false);\n-        } else {\n-            var csrIssue = Issue.fromStringRelaxed(pr.title()).flatMap(this::getCsrIssue)\n-                    .flatMap(value -> issueProject() != null ? issueProject().issue(value.shortId()) : Optional.empty());\n-            if (csrIssue.isPresent()) {\n-                var resolution = csrIssue.get().properties().get(\"resolution\");\n-                if (resolution != null && !resolution.isNull()\n-                        && resolution.get(\"name\") != null && !resolution.get(\"name\").isNull()\n-                        && csrIssue.get().state() == org.openjdk.skara.issuetracker.Issue.State.CLOSED\n-                        && \"Approved\".equals(resolution.get(\"name\").asString())) {\n-                    \/\/ The PR doesn't have csr label and the csr request has been Approved.\n-                    ret.put(\"Change requires a CSR request to be approved\", true);\n-                }\n+\n+        var csrIssues = getCsrIssueTrackerIssues(issues(false, false)).stream()\n+                .filter(issue -> issue.properties().containsKey(\"issuetype\"))\n+                .filter(issue -> issue.properties().get(\"issuetype\").asString().equals(\"CSR\"))\n+                .filter(issue -> !isWithdrawnCSR(issue))\n+                .toList();\n+        if (csrIssues.isEmpty() && pr.labelNames().contains(\"csr\")) {\n+            ret.put(\"Change requires a CSR request (need to be created) to be approved\", false);\n+        }\n+        for (var csrIssue : csrIssues) {\n+            if (!csrIssue.isClosed()) {\n+                ret.put(\"Change requires a CSR request (\" + csrIssue.id() + \") to be approved\", false);\n+                continue;\n+            }\n+            var resolution = csrIssue.properties().get(\"resolution\");\n+            if (resolution == null || resolution.isNull()) {\n+                ret.put(\"Change requires a CSR request (\" + csrIssue.id() + \") to be approved\", false);\n+                continue;\n+            }\n+            var name = resolution.get(\"name\");\n+            if (name == null || name.isNull()) {\n+                ret.put(\"Change requires a CSR request (\" + csrIssue.id() + \") to be approved\", false);\n+                continue;\n@@ -251,1 +285,5 @@\n-            \/\/ At other states, no need to add the csr progress.\n+            if (!name.asString().equals(\"Approved\")) {\n+                ret.put(\"Change requires a CSR request (\" + csrIssue.id() + \") to be approved\", false);\n+                continue;\n+            }\n+            ret.put(\"Change requires a CSR request (\" + csrIssue.id() + \") to be approved\", true);\n@@ -253,0 +291,2 @@\n+\n+\n@@ -621,0 +661,3 @@\n+                                if(isWithdrawnCSR(iss.get())){\n+                                    progressBody.append(\" (Withdrawn)\");\n+                                }\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":71,"deletions":28,"binary":false,"changes":99,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-    static String setSolvesMarker(Issue issue) {\n+    public static String setSolvesMarker(Issue issue) {\n@@ -47,1 +47,1 @@\n-    static List<Issue> currentSolved(HostUser botUser, List<Comment> comments) {\n+    public static List<Issue> currentSolved(HostUser botUser, List<Comment> comments) {\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/SolvesTracker.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import org.openjdk.skara.json.JSONValue;\n@@ -81,1 +82,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request (need to be created) to be approved\"));\n@@ -92,1 +93,1 @@\n-            assertFalse(pr.store().body().contains(\"Change requires a CSR request to be approved\"));\n+            assertFalse(pr.store().body().contains(\"Change requires a CSR request (need to be created) to be approved\"));\n@@ -104,1 +105,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request (need to be created) to be approved\"));\n@@ -121,0 +122,1 @@\n+            csr.setProperty(\"issuetype\", JSON.of(\"CSR\"));\n@@ -150,1 +152,1 @@\n-            assertTrue(pr.store().body().contains(\"- [x] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [x] Change requires a CSR request (\" + csr.id() + \") to be approved\"));\n@@ -192,1 +194,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request (need to be created) to be approved\"));\n@@ -231,1 +233,1 @@\n-            assertFalse(pr.store().body().contains(\"Change requires a CSR request to be approved\"));\n+            assertFalse(pr.store().body().contains(\"Change requires a CSR request (need to be created) to be approved\"));\n@@ -240,1 +242,1 @@\n-            assertFalse(pr.store().body().contains(\"Change requires a CSR request to be approved\"));\n+            assertFalse(pr.store().body().contains(\"Change requires a CSR request (need to be created) to be approved\"));\n@@ -252,1 +254,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request (need to be created) to be approved\"));\n@@ -261,1 +263,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request (need to be created) to be approved\"));\n@@ -270,1 +272,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request (need to be created) to be approved\"));\n@@ -309,1 +311,1 @@\n-            assertFalse(pr.store().body().contains(\"Change requires a CSR request to be approved\"));\n+            assertFalse(pr.store().body().contains(\"Change requires a CSR request (need to be created) to be approved\"));\n@@ -352,1 +354,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request (need to be created) to be approved\"));\n@@ -394,1 +396,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request (need to be created) to be approved\"));\n@@ -405,1 +407,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request (need to be created) to be approved\"));\n@@ -421,0 +423,1 @@\n+            csr.setProperty(\"issuetype\", JSON.of(\"CSR\"));\n@@ -451,1 +454,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request (\" + csr.id() + \") to be approved\"));\n@@ -458,2 +461,3 @@\n-            assertLastCommentContains(pr, \"The CSR requirement cannot be removed as there is already a CSR associated \" +\n-                                      \"with the main issue of this pull request. Please withdraw the CSR\");\n+            assertLastCommentContains(pr, \"The CSR requirement cannot be removed as there is already a CSR associated with the issue [\" +\n+                    issue.id() + \"](\" + issue.webUrl() + \") of this pull request. Please withdraw the CSR [\"\n+                    + csr.id() + \"](\" + csr.webUrl() + \") and then use the command `\/csr unneeded` again.\");\n@@ -463,1 +467,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request (\" + csr.id() + \") to be approved\"));\n@@ -478,1 +482,1 @@\n-            assertFalse(pr.store().body().contains(\"Change requires a CSR request to be approved\"));\n+            assertFalse(pr.store().body().contains(\"Change requires a CSR request (\" + csr.id() + \") to be approved\"));\n@@ -493,0 +497,1 @@\n+            csr.setProperty(\"issuetype\", JSON.of(\"CSR\"));\n@@ -523,1 +528,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request (\" + csr.id() + \") to be approved\"));\n@@ -530,2 +535,3 @@\n-            assertLastCommentContains(pr, \"The CSR requirement cannot be removed as there is already a CSR associated \" +\n-                    \"with the main issue of this pull request. Please withdraw the CSR\");\n+            assertLastCommentContains(pr, \"The CSR requirement cannot be removed as there is already a CSR associated with the issue [\" +\n+                    issue.id() + \"](\" + issue.webUrl() + \") of this pull request. Please withdraw the CSR [\"\n+                    + csr.id() + \"](\" + csr.webUrl() + \") and then use the command `\/csr unneeded` again.\");\n@@ -535,1 +541,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request (\" + csr.id() + \") to be approved\"));\n@@ -550,1 +556,1 @@\n-            assertFalse(pr.store().body().contains(\"Change requires a CSR request to be approved\"));\n+            assertFalse(pr.store().body().contains(\"- [ ] Change requires a CSR request (\" + csr.id() + \") to be approved\"));\n@@ -586,1 +592,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request (need to be created) to be approved\"));\n@@ -626,1 +632,1 @@\n-            assertFalse(pr.store().body().contains(\"Change requires a CSR request to be approved\"));\n+            assertFalse(pr.store().body().contains(\"Change requires a CSR request (need to be created) to be approved\"));\n@@ -646,1 +652,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request (need to be created) to be approved\"));\n@@ -679,1 +685,1 @@\n-            assertFalse(pr.store().body().contains(\"Change requires a CSR request to be approved\"));\n+            assertFalse(pr.store().body().contains(\"Change requires a CSR request (need to be created) to be approved\"));\n@@ -690,1 +696,1 @@\n-            assertTrue(pr.store().body().contains(\"Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"Change requires a CSR request (need to be created) to be approved\"));\n@@ -750,1 +756,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request (need to be created) to be approved\"));\n@@ -755,1 +761,1 @@\n-            assertLastCommentContains(pr, \"please create a [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request for issue\");\n+            assertLastCommentContains(pr, \"please create a [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request for any issue associated with this pr\");\n@@ -761,1 +767,1 @@\n-            assertFalse(pr.store().body().contains(\"Change requires a CSR request to be approved\"));\n+            assertFalse(pr.store().body().contains(\"Change requires a CSR request (need to be created) to be approved\"));\n@@ -779,1 +785,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request (need to be created) to be approved\"));\n@@ -784,1 +790,1 @@\n-            assertLastCommentContains(pr, \"please create a [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request for issue\");\n+            assertLastCommentContains(pr, \"please create a [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request for any issue associated with this pr\");\n@@ -790,1 +796,1 @@\n-            assertFalse(pr.store().body().contains(\"Change requires a CSR request to be approved\"));\n+            assertFalse(pr.store().body().contains(\"Change requires a CSR request (need to be created) to be approved\"));\n@@ -808,1 +814,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request (need to be created) to be approved\"));\n@@ -813,1 +819,1 @@\n-            assertLastCommentContains(pr, \"please create a [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request for issue\");\n+            assertLastCommentContains(pr, \"please create a [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request for any issue associated with this pr\");\n@@ -819,1 +825,1 @@\n-            assertFalse(pr.store().body().contains(\"Change requires a CSR request to be approved\"));\n+            assertFalse(pr.store().body().contains(\"Change requires a CSR request (need to be created) to be approved\"));\n@@ -829,1 +835,1 @@\n-            assertTrue(pr.store().body().contains(\"- [x] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [x] Change requires a CSR request (\" + csr.id() + \") to be approved\"));\n@@ -836,1 +842,1 @@\n-            assertTrue(pr.store().body().contains(\"- [x] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [x] Change requires a CSR request (\" + csr.id() + \") to be approved\"));\n@@ -838,2 +844,3 @@\n-            assertLastCommentContains(pr, \"The CSR requirement cannot be removed as there is already a CSR associated \" +\n-                    \"with the main issue of this pull request. Please withdraw the CSR\");\n+            assertLastCommentContains(pr, \"The CSR requirement cannot be removed as there is already a CSR associated with the issue [\" +\n+                    issue.id() + \"](\" + issue.webUrl() + \") of this pull request. Please withdraw the CSR [\"\n+                    + csr.id() + \"](\" + csr.webUrl() + \")\");\n@@ -853,1 +860,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request (need to be created) to be approved\"));\n@@ -858,1 +865,1 @@\n-            assertLastCommentContains(pr, \"please create a [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request for issue\");\n+            assertLastCommentContains(pr, \"please create a [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request for any issue associated with this pr\");\n@@ -864,1 +871,1 @@\n-            assertFalse(pr.store().body().contains(\"Change requires a CSR request to be approved\"));\n+            assertFalse(pr.store().body().contains(\"Change requires a CSR request (need to be created) to be approved\"));\n@@ -878,1 +885,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request (\" + backportCsr.id() + \") to be approved\"));\n@@ -886,1 +893,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request (\" + backportCsr.id() + \") to be approved\"));\n@@ -888,2 +895,3 @@\n-            assertLastCommentContains(pr, \"The CSR requirement cannot be removed as there is already a CSR associated \" +\n-                    \"with the main issue of this pull request. Please withdraw the CSR\");\n+            assertLastCommentContains(pr, \"The CSR requirement cannot be removed as there is already a CSR associated with the issue [\" +\n+                            issue.id() + \"](\" + issue.webUrl() + \") of this pull request. Please withdraw the CSR [\"\n+                            + backportCsr.id() + \"](\" + backportCsr.webUrl() + \")\");\n@@ -908,1 +916,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request (\" + backportCsr.id() + \") to be approved\"));\n@@ -918,1 +926,1 @@\n-            assertFalse(pr.store().body().contains(\"Change requires a CSR request to be approved\"));\n+            assertFalse(pr.store().body().contains(\"- [ ] Change requires a CSR request (\" + backportCsr.id() + \") to be approved\"));\n@@ -920,2 +928,2 @@\n-            assertLastCommentContains(pr, \"determined that a [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request \" +\n-                    \"is not needed for this pull request.\");\n+            assertTrue(pr.comments().get(pr.comments().size() - 2).body().contains(\"determined that a [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request \" +\n+                    \"is not needed for this pull request.\"));\n@@ -926,1 +934,1 @@\n-            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request to be approved\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request (need to be created) to be approved\"));\n@@ -931,1 +939,1 @@\n-            assertLastCommentContains(pr, \"please create a [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request for issue\");\n+            assertLastCommentContains(pr, \"please create a [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request for any issue associated with this pr\");\n@@ -947,0 +955,91 @@\n+\n+    @Test\n+    void prSolvesMultipleIssues(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var bot = credentials.getHostedRepository();\n+            var issues = credentials.getIssueProject();\n+            var issue = issues.createIssue(\"This is an issue\", List.of(), Map.of());\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addReviewer(reviewer.forge().currentUser().id())\n+                    .addCommitter(author.forge().currentUser().id());\n+            var prBot = PullRequestBot.newBuilder().repo(bot).issueProject(issues).censusRepo(censusBuilder.build()).enableCsr(true).build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", issue.id() + \": This is an issue\");\n+\n+            \/\/ Require CSR\n+            var prAsReviewer = reviewer.pullRequest(pr.id());\n+            prAsReviewer.addComment(\"\/csr\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+\n+            \/\/ The bot should reply with a message that a CSR is needed\n+            assertLastCommentContains(pr, \"has indicated that a \" +\n+                    \"[compatibility and specification](https:\/\/wiki.openjdk.org\/display\/csr\/Main) (CSR) request \" +\n+                    \"is needed for this pull request.\");\n+            assertTrue(pr.store().labelNames().contains(\"csr\"));\n+            \/\/ The PR body should contain the progress about CSR request\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request (need to be created) to be approved\"));\n+\n+            var issue2 = issues.createIssue(\"This is an issue2\", List.of(), Map.of());\n+            \/\/ create a csr for issue2\n+            var csr2 = issues.createIssue(\"This is a CSR2\", List.of(), Map.of(\"resolution\",\n+                    JSON.object().put(\"name\", \"Unresolved\")));\n+            csr2.setProperty(\"issuetype\", JSON.of(\"CSR\"));\n+            csr2.setState(Issue.State.OPEN);\n+            issue2.addLink(Link.create(csr2, \"csr for\").build());\n+\n+            pr.addComment(\"\/issue TEST-2\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertTrue(pr.store().labelNames().contains(\"csr\"));\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request (\" + csr2.id() + \") to be approved\"));\n+\n+            \/\/ Try \/csr unneeded, it should fail\n+            prAsReviewer.addComment(\"\/csr unneeded\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertTrue(pr.store().labelNames().contains(\"csr\"));\n+            assertLastCommentContains(pr, \"The CSR requirement cannot be removed as there is already a CSR associated with the issue [\" +\n+                    issue2.id() + \"](\" + issue2.webUrl() + \") of this pull request. Please withdraw the CSR [\"\n+                    + csr2.id() + \"](\" + csr2.webUrl() + \")\");\n+\n+            \/\/ Withdraw the csr linked with issue2\n+            csr2.setState(Issue.State.CLOSED);\n+            csr2.setProperty(\"resolution\", JSON.object().put(\"name\", \"Withdrawn\"));\n+            prAsReviewer.addComment(\"\/csr unneeded\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertFalse(pr.store().labelNames().contains(\"csr\"));\n+\n+            \/\/ Require CSR again\n+            prAsReviewer.addComment(\"\/csr\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+\n+            \/\/ The bot should reply with a message that a CSR is needed\n+            assertLastCommentContains(pr, \"has indicated that a \" +\n+                    \"[compatibility and specification](https:\/\/wiki.openjdk.org\/display\/csr\/Main) (CSR) request \" +\n+                    \"is needed for this pull request.\");\n+            assertTrue(pr.store().labelNames().contains(\"csr\"));\n+            \/\/ The PR body should contain the progress about CSR request\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request (need to be created) to be approved\"));\n+\n+            \/\/ Create a csr for main issue\n+            var csr1 = issues.createIssue(\"This is a CSR1\", List.of(), Map.of(\"resolution\",\n+                    JSON.object().put(\"name\", \"Unresolved\")));\n+            csr1.setProperty(\"issuetype\", JSON.of(\"CSR\"));\n+            csr1.setState(Issue.State.OPEN);\n+            issue.addLink(Link.create(csr1, \"csr for\").build());\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertTrue(pr.store().labelNames().contains(\"csr\"));\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CSRTests.java","additions":154,"deletions":55,"binary":false,"changes":209,"status":"modified"}]}