{"files":[{"patch":"@@ -126,0 +126,51 @@\n+    @Test\n+    void copy(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+\n+            var labelConfiguration = LabelConfigurationJson.builder()\n+                                                           .addMatchers(\"test1\", List.of(Pattern.compile(\"a.txt\")))\n+                                                           .addMatchers(\"test2\", List.of(Pattern.compile(\"b.txt\")))\n+                                                           .build();\n+            var censusBuilder = credentials.getCensusBuilder()\n+                                           .addAuthor(author.forge().currentUser().id())\n+                                           .addReviewer(reviewer.forge().currentUser().id());\n+            var labelBot = PullRequestBot.newBuilder()\n+                                         .repo(author)\n+                                         .censusRepo(censusBuilder.build())\n+                                         .labelConfiguration(labelConfiguration)\n+                                         .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path();\n+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Add an unrelated file to master\n+            var fileB = localRepoFolder.resolve(\"b.txt\");\n+            Files.writeString(fileB, \"Hello\");\n+            localRepo.add(fileB);\n+            var hashB = localRepo.commit(\"test1\", \"test\", \"test@test\");\n+            localRepo.push(hashB, author.url(), \"master\");\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"edit\", true);\n+\n+            var fileA = localRepoFolder.resolve(\"a.txt\");\n+            Files.writeString(fileA, \"Hello\");\n+            localRepo.add(fileA);\n+            var hashA = localRepo.commit(\"test1\", \"test\", \"test@test\");\n+            localRepo.push(hashA, author.url(), \"edit\");\n+\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"This is a pull request\");\n+\n+            \/\/ Check the status - there should now be a test1 label\n+            TestBotRunner.runPeriodicItems(labelBot);\n+            assertEquals(Set.of(\"rfr\", \"test1\"), new HashSet<>(pr.labelNames()));\n+        }\n+    }\n+\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/LabelerTests.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -189,2 +189,6 @@\n-            patch.target().path().ifPresent(ret::add);\n-            patch.source().path().ifPresent(ret::add);\n+            if (patch.status().isDeleted() || patch.status().isRenamed()) {\n+                patch.source().path().ifPresent(ret::add);\n+            }\n+            if (!patch.status().isDeleted()) {\n+                patch.target().path().ifPresent(ret::add);\n+            }\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/PullRequestUtils.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"}]}