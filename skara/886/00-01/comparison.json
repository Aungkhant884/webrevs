{"files":[{"patch":"@@ -34,0 +34,1 @@\n+        opens 'org.openjdk.skara.bots.notify.prbranch' to 'org.junit.platform.commons'\n","filename":"bots\/notify\/build.gradle","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -44,1 +44,2 @@\n-            org.openjdk.skara.bots.notify.comment.CommitCommentNotifierFactory;\n+            org.openjdk.skara.bots.notify.comment.CommitCommentNotifierFactory,\n+            org.openjdk.skara.bots.notify.prbranch.PullRequestBranchNotifierFactory;\n","filename":"bots\/notify\/src\/main\/java\/module-info.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -38,0 +38,4 @@\n+    default void onHeadChange(PullRequest pr, Hash oldHead) {\n+    }\n+    default void onStateChange(PullRequest pr, org.openjdk.skara.issuetracker.Issue.State oldState) {\n+    }\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/PullRequestListener.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+import org.openjdk.skara.issuetracker.Issue;\n@@ -34,0 +35,2 @@\n+    private final Hash head;\n+    private final Issue.State state;\n@@ -35,1 +38,1 @@\n-    PullRequestState(PullRequest pr, Set<String> issueIds, Hash commitId) {\n+    PullRequestState(PullRequest pr, Set<String> issueIds, Hash commitId, Hash head, Issue.State state) {\n@@ -39,0 +42,2 @@\n+        this.head = head;\n+        this.state = state;\n@@ -41,1 +46,1 @@\n-    PullRequestState(String prId, Set<String> issueIds, Hash commitId) {\n+    PullRequestState(String prId, Set<String> issueIds, Hash commitId, Hash head, Issue.State state) {\n@@ -45,0 +50,2 @@\n+        this.head = head;\n+        this.state = state;\n@@ -59,0 +66,8 @@\n+    public Hash head() {\n+        return head;\n+    }\n+\n+    public Issue.State state() {\n+        return state;\n+    }\n+\n@@ -65,0 +80,2 @@\n+                \", head=\" + head +\n+                \", state=\" + state +\n@@ -79,1 +96,3 @@\n-                Objects.equals(commitId, that.commitId);\n+                Objects.equals(commitId, that.commitId) &&\n+                Objects.equals(head, that.head) &&\n+                Objects.equals(state, that.state);\n@@ -84,1 +103,1 @@\n-        return Objects.hash(prId, issueIds, commitId);\n+        return Objects.hash(prId, issueIds, commitId, head);\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/PullRequestState.java","additions":23,"deletions":4,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -88,0 +88,6 @@\n+                       if (!obj.contains(\"head\")) {\n+                           obj.put(\"head\", Hash.zero().hex());\n+                       }\n+                       if (!obj.contains(\"state\")) {\n+                           obj.put(\"state\", JSON.of());\n+                       }\n@@ -91,0 +97,2 @@\n+                       var state = obj.get(\"state\").isNull() ?\n+                               null : org.openjdk.skara.issuetracker.Issue.State.valueOf(obj.get(\"state\").asString());\n@@ -92,1 +100,1 @@\n-                       return new PullRequestState(id, issues, commit);\n+                       return new PullRequestState(id, issues, commit, new Hash(obj.get(\"head\").asString()), state);\n@@ -122,0 +130,6 @@\n+                                ret.put(\"head\", JSON.of(pr.head().hex()));\n+                                if (pr.state() != null) {\n+                                    ret.put(\"state\", JSON.of(pr.state().toString()));\n+                                } else {\n+                                    ret.putNull(\"state\");\n+                                }\n@@ -174,0 +188,8 @@\n+    private void notifyHeadChange(PullRequest pr, Hash oldHead) {\n+        listeners.forEach(c -> c.onHeadChange(pr, oldHead));\n+    }\n+\n+    private void notifyStateChange(org.openjdk.skara.issuetracker.Issue.State oldState) {\n+        listeners.forEach(c -> c.onStateChange(pr, oldState));\n+    }\n+\n@@ -184,1 +206,1 @@\n-        var state = new PullRequestState(pr, issues, commit);\n+        var state = new PullRequestState(pr, issues, commit, pr.headHash(), pr.state());\n@@ -196,4 +218,14 @@\n-        if (storedState.isPresent() && storedState.get().commitId().equals(Optional.of(Hash.zero()))) {\n-            var hash = resultingCommitHash();\n-            storedState = Optional.of(new PullRequestState(pr, storedState.get().issueIds(), hash));\n-            storage.put(storedState.get());\n+        if (storedState.isPresent()) {\n+            if (storedState.get().commitId().equals(Optional.of(Hash.zero()))) {\n+                var hash = resultingCommitHash();\n+                storedState = Optional.of(new PullRequestState(pr, storedState.get().issueIds(), hash, pr.headHash(), pr.state()));\n+                storage.put(storedState.get());\n+            }\n+            if (storedState.get().head().equals(Hash.zero())) {\n+                storedState = Optional.of(new PullRequestState(pr, storedState.get().issueIds(), storedState.get().commitId().orElse(null), pr.headHash(), pr.state()));\n+                storage.put(storedState.get());\n+            }\n+            if (storedState.get().state() == null) {\n+                storedState = Optional.of(new PullRequestState(pr, storedState.get().issueIds(), storedState.get().commitId().orElse(null), pr.headHash(), pr.state()));\n+                storage.put(storedState.get());\n+            }\n@@ -211,0 +243,3 @@\n+            if (!storedState.get().head().equals(state.head())) {\n+                notifyHeadChange(pr, storedState.get().head());\n+            }\n@@ -212,1 +247,1 @@\n-            if (!storedCommit.isPresent() && state.commitId().isPresent()) {\n+            if (storedCommit.isEmpty() && state.commitId().isPresent()) {\n@@ -215,0 +250,3 @@\n+            if (!storedState.get().state().equals(state.state())) {\n+                notifyStateChange(storedState.get().state());\n+            }\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/PullRequestWorkItem.java","additions":45,"deletions":7,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bots.notify.prbranch;\n+\n+import org.openjdk.skara.bots.notify.*;\n+import org.openjdk.skara.forge.*;\n+import org.openjdk.skara.issuetracker.Issue;\n+import org.openjdk.skara.vcs.*;\n+\n+import java.io.*;\n+import java.nio.file.Path;\n+\n+public class PullRequestBranchNotifier implements Notifier, PullRequestListener {\n+    private final Path seedFolder;\n+\n+    public PullRequestBranchNotifier(Path seedFolder) {\n+        this.seedFolder = seedFolder;\n+    }\n+\n+    @Override\n+    public void attachTo(Emitter e) {\n+        e.registerPullRequestListener(this);\n+    }\n+\n+    private void pushBranch(PullRequest pr) {\n+        var hostedRepositoryPool = new HostedRepositoryPool(seedFolder);\n+        try {\n+            var seedRepo = hostedRepositoryPool.seedRepository(pr.repository(), false);\n+            seedRepo.push(pr.headHash(), pr.repository().url(), PreIntegrations.preIntegrateBranch(pr), true);\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    private void deleteBranch(PullRequest pr) {\n+        var hostedRepositoryPool = new HostedRepositoryPool(seedFolder);\n+        try {\n+            var seedRepo = hostedRepositoryPool.seedRepository(pr.repository(), false);\n+            seedRepo.prune(new Branch(PreIntegrations.preIntegrateBranch(pr)), pr.repository().url().toString());\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void onNewPullRequest(PullRequest pr) {\n+        if (pr.state() == Issue.State.OPEN) {\n+            pushBranch(pr);\n+        }\n+    }\n+\n+    @Override\n+    public void onStateChange(PullRequest pr, Issue.State oldState) {\n+        if (pr.state() == Issue.State.CLOSED) {\n+            deleteBranch(pr);\n+        } else {\n+            pushBranch(pr);\n+        }\n+    }\n+\n+    @Override\n+    public void onHeadChange(PullRequest pr, Hash oldHead) {\n+        if (pr.state() == Issue.State.OPEN) {\n+            pushBranch(pr);\n+        }\n+    }\n+}\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/prbranch\/PullRequestBranchNotifier.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -0,0 +1,41 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bots.notify.prbranch;\n+\n+import org.openjdk.skara.bot.BotConfiguration;\n+import org.openjdk.skara.bots.notify.*;\n+import org.openjdk.skara.json.JSONObject;\n+\n+public class PullRequestBranchNotifierFactory implements NotifierFactory {\n+    @Override\n+    public String name() {\n+        return \"prbranch\";\n+    }\n+\n+    @Override\n+    public Notifier create(BotConfiguration botConfiguration, JSONObject notifierConfiguration) {\n+        var seedFolder = botConfiguration.storageFolder();\n+        return new PullRequestBranchNotifier(seedFolder.resolve(\"seeds\"));\n+    }\n+\n+}\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/prbranch\/PullRequestBranchNotifierFactory.java","additions":41,"deletions":0,"binary":false,"changes":41,"status":"added"},{"patch":"@@ -0,0 +1,140 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bots.notify.prbranch;\n+\n+import org.junit.jupiter.api.*;\n+import org.openjdk.skara.forge.*;\n+import org.openjdk.skara.issuetracker.*;\n+import org.openjdk.skara.json.*;\n+import org.openjdk.skara.test.*;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class PullRequestBranchNotifierTests {\n+    private TestBotFactory testBotBuilder(HostedRepository hostedRepository, Path storagePath) {\n+        return TestBotFactory.newBuilder()\n+                             .addHostedRepository(\"hostedrepo\", hostedRepository)\n+                             .storagePath(storagePath)\n+                             .addConfiguration(\"database\", JSON.object()\n+                                                               .put(\"repository\", \"hostedrepo:history\")\n+                                                               .put(\"name\", \"duke\")\n+                                                               .put(\"email\", \"duke@openjdk.org\"))\n+                             .addConfiguration(\"ready\", JSON.object()\n+                                                            .put(\"labels\", JSON.array())\n+                                                            .put(\"comments\", JSON.array()))\n+                             .addConfiguration(\"integrator\", JSON.of(hostedRepository.forge().currentUser().id()))\n+                             .addConfiguration(\"repositories\", JSON.object()\n+                                                                   .put(\"hostedrepo\", JSON.object()\n+                                                                                          .put(\"basename\", \"test\")\n+                                                                                          .put(\"branches\", \"master\")\n+                                                                                          .put(\"prbranch\", JSON.object())))\n+                             .build();\n+    }\n+\n+    @Test\n+    void simple(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+\n+            var repo = credentials.getHostedRepository();\n+            var repoFolder = tempFolder.path().resolve(\"repo\");\n+            var localRepo = CheckableRepository.init(repoFolder, repo.repositoryType());\n+            credentials.commitLock(localRepo);\n+            localRepo.pushAll(repo.url());\n+\n+            var storageFolder = tempFolder.path().resolve(\"storage\");\n+            var notifyBot = testBotBuilder(repo, storageFolder).create(\"notify\", JSON.object());\n+\n+            \/\/ Initialize history\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ Create a PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, \"Another line\");\n+            localRepo.push(editHash, repo.url(), \"source\", true);\n+            var pr = credentials.createPullRequest(repo, \"master\", \"source\", \"This is a PR\", false);\n+            pr.addLabel(\"rfr\");\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ The target repo should now contain the new branch\n+            var hash = localRepo.fetch(repo.url(), PreIntegrations.preIntegrateBranch(pr));\n+            assertEquals(editHash, hash);\n+\n+            \/\/ Close the PR\n+            pr.setState(Issue.State.CLOSED);\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ The target repo should no longer contain the branch\n+            assertThrows(IOException.class, () -> localRepo.fetch(repo.url(), PreIntegrations.preIntegrateBranch(pr)));\n+\n+            \/\/ Reopen the PR\n+            pr.setState(Issue.State.OPEN);\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ The branch should have reappeared\n+            hash = localRepo.fetch(repo.url(), PreIntegrations.preIntegrateBranch(pr));\n+            assertEquals(editHash, hash);\n+        }\n+    }\n+\n+    @Test\n+    void updated(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+\n+            var repo = credentials.getHostedRepository();\n+            var repoFolder = tempFolder.path().resolve(\"repo\");\n+            var localRepo = CheckableRepository.init(repoFolder, repo.repositoryType());\n+            credentials.commitLock(localRepo);\n+            localRepo.pushAll(repo.url());\n+\n+            var storageFolder = tempFolder.path().resolve(\"storage\");\n+            var notifyBot = testBotBuilder(repo, storageFolder).create(\"notify\", JSON.object());\n+\n+            \/\/ Initialize history\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ Create a PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, \"Another line\");\n+            localRepo.push(editHash, repo.url(), \"source\", true);\n+            var pr = credentials.createPullRequest(repo, \"master\", \"source\", \"This is a PR\", false);\n+            pr.addLabel(\"rfr\");\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ The target repo should now contain the new branch\n+            var hash = localRepo.fetch(repo.url(), PreIntegrations.preIntegrateBranch(pr));\n+            assertEquals(editHash, hash);\n+\n+            \/\/ Push another change\n+            var updatedHash = CheckableRepository.appendAndCommit(localRepo, \"Yet another line\");\n+            localRepo.push(updatedHash, repo.url(), \"source\");\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ The branch should have been updated\n+            hash = localRepo.fetch(repo.url(), PreIntegrations.preIntegrateBranch(pr));\n+            assertEquals(updatedHash, hash);\n+        }\n+    }\n+}\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/prbranch\/PullRequestBranchNotifierTests.java","additions":140,"deletions":0,"binary":false,"changes":140,"status":"added"},{"patch":"@@ -58,2 +58,1 @@\n-            Map.entry(\"cc\", new LabelCommand(\"cc\")),\n-            Map.entry(\"preintegrate\", new PreIntegrateCommand())\n+            Map.entry(\"cc\", new LabelCommand(\"cc\"))\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CommandWorkItem.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,74 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.skara.bots.pr;\n-\n-import org.openjdk.skara.forge.*;\n-import org.openjdk.skara.issuetracker.Comment;\n-\n-import java.io.*;\n-import java.nio.file.Path;\n-import java.util.List;\n-import java.util.logging.Logger;\n-\n-public class PreIntegrateCommand implements CommandHandler {\n-    private final Logger log = Logger.getLogger(\"org.openjdk.skara.bots.pr\");\n-\n-    @Override\n-    public void handle(PullRequestBot bot, PullRequest pr, CensusInstance censusInstance, Path scratchPath, CommandInvocation command, List<Comment> allComments, PrintWriter reply) {\n-        if (!command.user().equals(pr.author())) {\n-            reply.println(\"Only the author (@\" + pr.author().userName() + \") is allowed to issue the `preintegrate` command.\");\n-            return;\n-        }\n-\n-        \/\/ Check if the author is allowed to perform pre-integrations\n-        if (!censusInstance.isCommitter(pr.author())) {\n-            reply.println(\"Only [Committers](https:\/\/openjdk.java.net\/bylaws#committer) (@\" + pr.author().userName() + \") are allowed to issue the `preintegrate` command.\");\n-            return;\n-        }\n-\n-        try {\n-            var path = scratchPath.resolve(\"integrate\").resolve(pr.repository().name());\n-            var seedPath = bot.seedStorage().orElse(scratchPath.resolve(\"seeds\"));\n-            var hostedRepositoryPool = new HostedRepositoryPool(seedPath);\n-            var localRepo = PullRequestUtils.materialize(hostedRepositoryPool, pr, path);\n-\n-            var preIntegrateBranch = PreIntegrations.preIntegrateBranch(pr);\n-            localRepo.push(pr.headHash(), pr.repository().url(), preIntegrateBranch);\n-\n-            reply.println(\"The current content of this pull request has been pre-integrated into the branch `\" + preIntegrateBranch + \"`. \");\n-            reply.println(\"This branch can now be targeted by additional pull requests that contain dependent work.\");\n-\n-        } catch (IOException e) {\n-            log.severe(\"An error occurred during pre-integration (\" + pr.webUrl() + \"): \" + e.getMessage());\n-            log.throwing(\"PreIntegrateCommand\", \"handle\", e);\n-            reply.println(\"An unexpected error occurred during pre-integration. No push attempt will be made. \" +\n-                                  \"The error has been logged and will be investigated. It is possible that this error \" +\n-                                  \"is caused by a transient issue; feel free to retry the operation.\");\n-        }\n-    }\n-\n-    @Override\n-    public String description() {\n-        return null;\n-    }\n-}\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PreIntegrateCommand.java","additions":0,"deletions":74,"binary":false,"changes":74,"status":"deleted"},{"patch":"@@ -28,1 +28,0 @@\n-import org.openjdk.skara.vcs.Repository;\n@@ -37,52 +36,0 @@\n-    @Test\n-    void simple(TestInfo testInfo) throws IOException {\n-        try (var credentials = new HostCredentials(testInfo);\n-             var tempFolder = new TemporaryDirectory();\n-             var masterFolder = new TemporaryDirectory();\n-             var pushedFolder = new TemporaryDirectory()) {\n-\n-            var author = credentials.getHostedRepository();\n-            var integrator = credentials.getHostedRepository();\n-            var reviewer = credentials.getHostedRepository();\n-            var censusBuilder = credentials.getCensusBuilder()\n-                                           .addCommitter(author.forge().currentUser().id())\n-                                           .addReviewer(integrator.forge().currentUser().id())\n-                                           .addReviewer(reviewer.forge().currentUser().id());\n-            var mergeBot = PullRequestBot.newBuilder().repo(integrator).censusRepo(censusBuilder.build()).build();\n-\n-            \/\/ Populate the projects repository\n-            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n-            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n-            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n-            localRepo.push(masterHash, author.url(), \"master\", true);\n-\n-            \/\/ Make a change with a corresponding PR\n-            var editHash = CheckableRepository.appendAndCommit(localRepo);\n-            localRepo.push(editHash, author.url(), \"refs\/heads\/edit\", true);\n-            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"This is a pull request\");\n-\n-            \/\/ Approve it as another user\n-            var approvalPr = integrator.pullRequest(pr.id());\n-            approvalPr.addReview(Review.Verdict.APPROVED, \"Approved\");\n-\n-            \/\/ The bot should reply with integration message\n-            TestBotRunner.runPeriodicItems(mergeBot);\n-            assertLastCommentContains(pr, \"To integrate this PR with the above commit message to the `master` branch\");\n-\n-            \/\/ Attempt a merge (the bot should only process the first one)\n-            pr.addComment(\"\/preintegrate\");\n-            TestBotRunner.runPeriodicItems(mergeBot);\n-\n-            \/\/ The bot should reply with an ok message\n-            assertLastCommentContains(pr, \"The current content of this pull request has been pre-integrated into the branch\");\n-\n-            \/\/ The change should not be present on the master branch\n-            var masterRepo = Repository.materialize(pushedFolder.path(), author.url(), \"master\");\n-            assertFalse(CheckableRepository.hasBeenEdited(masterRepo));\n-\n-            \/\/ But it should appear in a new branch\n-            var pushedRepo = Repository.materialize(pushedFolder.path(), author.url(), PreIntegrations.preIntegrateBranch(pr));\n-            assertTrue(CheckableRepository.hasBeenEdited(pushedRepo));\n-        }\n-    }\n-\n@@ -93,3 +40,1 @@\n-             var seedFolder = new TemporaryDirectory();\n-             var masterFolder = new TemporaryDirectory();\n-             var pushedFolder = new TemporaryDirectory()) {\n+             var seedFolder = new TemporaryDirectory()) {\n@@ -125,3 +70,0 @@\n-            var r = pr.reviews();\n-\n-\n@@ -132,6 +74,2 @@\n-            \/\/ Attempt a merge (the bot should only process the first one)\n-            pr.addComment(\"\/preintegrate\");\n-            TestBotRunner.runPeriodicItems(mergeBot);\n-\n-            \/\/ The bot should reply with an ok message\n-            assertLastCommentContains(pr, \"The current content of this pull request has been pre-integrated into the branch\");\n+            \/\/ Simulate population of the pr branch\n+            localRepo.push(editHash, author.url(), PreIntegrations.preIntegrateBranch(pr), true);\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/PreIntegrateTests.java","additions":3,"deletions":65,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -97,1 +97,1 @@\n-        private ReadOnlyRepository seedRepository(boolean allowStale) throws IOException {\n+        private Repository seedRepository(boolean allowStale) throws IOException {\n@@ -99,1 +99,1 @@\n-            return ReadOnlyRepository.get(seed).orElseThrow(() -> new IOException(\"Existing seed is corrupt?\"));\n+            return Repository.get(seed).orElseThrow(() -> new IOException(\"Existing seed is corrupt?\"));\n@@ -193,0 +193,5 @@\n+\n+    public Repository seedRepository(HostedRepository hostedRepository, boolean allowStale) throws IOException {\n+        var hostedRepositoryInstance = new HostedRepositoryInstance(hostedRepository);\n+        return hostedRepositoryInstance.seedRepository(false);\n+    }\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/HostedRepositoryPool.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -20,1 +20,1 @@\n-        return \"pr\/\" + pr.author().userName().replaceAll(\"[^\\\\w]\", \"_\") + \"\/\" + pr.id();\n+        return \"pr\/\" + pr.id();\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/PreIntegrations.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}