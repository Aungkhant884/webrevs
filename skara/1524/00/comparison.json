{"files":[{"patch":"@@ -0,0 +1,22 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n@@ -14,1 +36,1 @@\n-    summary,\n+    summary(true),\n@@ -28,0 +50,13 @@\n+    private boolean isMultiLine = false;\n+\n+    CommandNameEnum() {\n+    }\n+\n+    CommandNameEnum(boolean isMultiLine) {\n+        this.isMultiLine = isMultiLine;\n+    }\n+\n+    public boolean isMultiLine() {\n+        return isMultiLine;\n+    }\n+\n","filename":"bots\/common\/src\/main\/java\/org\/openjdk\/skara\/bots\/common\/CommandNameEnum.java","additions":36,"deletions":1,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -0,0 +1,22 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n@@ -15,1 +37,0 @@\n-    ARCHIVAL_COMMAND_PATTERN(compile(EXECUTION_COMMAND_PATTERN.pattern.pattern(), Pattern.MULTILINE | Pattern.DOTALL)),\n","filename":"bots\/common\/src\/main\/java\/org\/openjdk\/skara\/bots\/common\/PatternEnum.java","additions":22,"deletions":1,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-import static org.openjdk.skara.bots.common.PatternEnum.ARCHIVAL_COMMAND_PATTERN;\n@@ -51,2 +50,1 @@\n-        var commandLineMatcher = ARCHIVAL_COMMAND_PATTERN.getPattern().matcher(body);\n-        body = commandLineMatcher.replaceAll(\"\");\n+        body = ArchiveWorkItem.filterOutCommands(body);\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/ArchiveMessages.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import org.openjdk.skara.bots.common.CommandNameEnum;\n@@ -42,1 +43,1 @@\n-import static org.openjdk.skara.bots.common.PatternEnum.ARCHIVAL_COMMAND_PATTERN;\n+import static org.openjdk.skara.bots.common.PatternEnum.EXECUTION_COMMAND_PATTERN;\n@@ -121,1 +122,22 @@\n-    private boolean ignoreComment(HostUser author, String body, ZonedDateTime createdTime, ZonedDateTime lastDraftTime) {\n+    static String filterOutCommands(String body) {\n+        var filteredBody = new StringBuilder();\n+        boolean readingMultiLineCommandArgs = false;\n+        for (var line : body.split(\"\\\\R\")) {\n+            var commandMatcher = EXECUTION_COMMAND_PATTERN.getPattern().matcher(line);\n+            if (commandMatcher.matches()) {\n+                readingMultiLineCommandArgs = false;\n+                var command = commandMatcher.group(1).toLowerCase();\n+                if (Arrays.stream(CommandNameEnum.values()).anyMatch(commandNameEnum -> commandNameEnum.name().equals(command))\n+                        && CommandNameEnum.valueOf(command).isMultiLine()) {\n+                    readingMultiLineCommandArgs = true;\n+                }\n+            } else {\n+                if (!readingMultiLineCommandArgs) {\n+                    filteredBody.append(line).append(System.lineSeparator());\n+                }\n+            }\n+        }\n+        return filteredBody.toString().strip();\n+    }\n+\n+    private boolean ignoreComment(HostUser author, String body, ZonedDateTime createdTime, ZonedDateTime lastDraftTime, boolean isComment) {\n@@ -128,0 +150,1 @@\n+\n@@ -129,6 +152,3 @@\n-        var commandLineMatcher = ARCHIVAL_COMMAND_PATTERN.getPattern().matcher(body);\n-        if (commandLineMatcher.find()) {\n-            var filteredBody = commandLineMatcher.replaceAll(\"\");\n-            if (filteredBody.strip().isEmpty()) {\n-                return true;\n-            }\n+        \/\/ For reviews, while the body is empty or only contains command, the bot should still archive it\n+        if (isComment && filterOutCommands(body).isEmpty()) {\n+            return true;\n@@ -136,0 +156,1 @@\n+\n@@ -352,1 +373,1 @@\n-                if (ignoreComment(comment.author(), comment.body(), comment.createdAt(), lastDraftTime)) {\n+                if (ignoreComment(comment.author(), comment.body(), comment.createdAt(), lastDraftTime, true)) {\n@@ -362,1 +383,1 @@\n-                if (ignoreComment(review.reviewer(), review.body().orElse(\"\"), review.createdAt(), lastDraftTime)) {\n+                if (ignoreComment(review.reviewer(), review.body().orElse(\"\"), review.createdAt(), lastDraftTime, false)) {\n@@ -374,1 +395,1 @@\n-                if (ignoreComment(reviewComment.author(), reviewComment.body(), reviewComment.createdAt(), lastDraftTime)) {\n+                if (ignoreComment(reviewComment.author(), reviewComment.body(), reviewComment.createdAt(), lastDraftTime, true)) {\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/ArchiveWorkItem.java","additions":32,"deletions":11,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -1543,1 +1543,2 @@\n-            pr.addComment(\"\/multiline\\nwill be dropped\");\n+            pr.addComment(\"\/summary\\nwill be dropped\");\n+            pr.addComment(\"\/csr needed\\nThis should not be dropped\");\n@@ -1566,0 +1567,1 @@\n+            assertTrue(archiveContains(archiveFolder.path(), \"This should not be dropped\"));\n@@ -1572,1 +1574,1 @@\n-            pr.addComment(\"\/another\\nmultiline\\nwill not cause another mail\");\n+            pr.addComment(\"\/summary\\nmultiline\\nwill not cause another mail\");\n","filename":"bots\/mlbridge\/src\/test\/java\/org\/openjdk\/skara\/bots\/mlbridge\/MailingListBridgeBotTests.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"}]}