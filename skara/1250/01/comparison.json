{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,1 @@\n+import java.time.format.DateTimeFormatter;\n@@ -60,0 +61,2 @@\n+    private static final String pullRequestTip = \"A pull request is submitted for review.\";\n+\n@@ -192,0 +195,7 @@\n+\n+        var alreadyPostedComment = realIssue.get().comments().stream()\n+                .filter(comment -> comment.author().equals(issueProject.issueTracker().currentUser()))\n+                .anyMatch(comment -> comment.body().contains(pullRequestTip) && comment.body().contains(pr.webUrl().toString()));\n+        if (!alreadyPostedComment) {\n+            realIssue.get().addComment(pullRequestToTextBrief(pr));\n+        }\n@@ -204,0 +214,15 @@\n+\n+        var postedComment = realIssue.get().comments().stream()\n+                .filter(comment -> comment.author().equals(issueProject.issueTracker().currentUser()))\n+                .filter(comment -> comment.body().contains(pullRequestTip) && comment.body().contains(pr.webUrl().toString()))\n+                .findAny();\n+        postedComment.ifPresent(comment -> realIssue.get().removeComment(comment));\n+    }\n+\n+    private String pullRequestToTextBrief(PullRequest pr) {\n+        var writer = new StringWriter();\n+        var printer = new PrintWriter(writer);\n+        printer.println(pullRequestTip + \"\\n\");\n+        printer.println(\"URL: \" + pr.webUrl().toString());\n+        printer.println(\"Date: \" + pr.createdAt().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss +0000\")));\n+        return writer.toString();\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifier.java","additions":26,"deletions":1,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,0 +49,2 @@\n+    private static final String pullRequestTip = \"A pull request is submitted for review.\";\n+\n@@ -199,1 +201,1 @@\n-            \/\/ The issue should not yet contain a link to the PR\n+            \/\/ The issue should not yet contain a link to the PR or a comment which contains the link to the PR\n@@ -202,0 +204,2 @@\n+            var comments = issue.comments();\n+            assertEquals(0, comments.size());\n@@ -208,0 +212,2 @@\n+            comments = issue.comments();\n+            assertEquals(0, comments.size());\n@@ -216,0 +222,2 @@\n+            comments = issue.comments();\n+            assertEquals(0, comments.size());\n@@ -221,1 +229,1 @@\n-            \/\/ The issue should now contain a link to the PR\n+            \/\/ The issue should now contain a link to the PR and a comment which contains the link to the PR\n@@ -226,0 +234,4 @@\n+            comments = issue.comments();\n+            assertEquals(1, comments.size());\n+            assertTrue(comments.get(0).body().contains(pullRequestTip));\n+            assertTrue(comments.get(0).body().contains(pr.webUrl().toString()));\n@@ -233,1 +245,1 @@\n-            \/\/ Both issues should contain a link to the PR\n+            \/\/ Both issues should contain a link to the PR and a comment which contains the link to the PR\n@@ -237,0 +249,5 @@\n+            var comments1 = issue.comments();\n+            assertEquals(1, comments1.size());\n+            assertTrue(comments1.get(0).body().contains(pullRequestTip));\n+            assertTrue(comments1.get(0).body().contains(pr.webUrl().toString()));\n+\n@@ -240,0 +257,4 @@\n+            var comments2 = issue2.comments();\n+            assertEquals(1, comments2.size());\n+            assertTrue(comments2.get(0).body().contains(pullRequestTip));\n+            assertTrue(comments2.get(0).body().contains(pr.webUrl().toString()));\n@@ -245,1 +266,1 @@\n-            \/\/ Only the second issue should now contain a link to the PR\n+            \/\/ Only the second issue should now contain a link to the PR and a comment which contains the link to the PR\n@@ -248,0 +269,3 @@\n+            comments1 = issue.comments();\n+            assertEquals(0, comments1.size());\n+\n@@ -251,0 +275,4 @@\n+            comments2 = issue2.comments();\n+            assertEquals(1, comments2.size());\n+            assertTrue(comments2.get(0).body().contains(pullRequestTip));\n+            assertTrue(comments2.get(0).body().contains(pr.webUrl().toString()));\n@@ -309,1 +337,1 @@\n-            \/\/ The issue should still not contain a link to the PR\n+            \/\/ The issue should still not contain a link to the PR or a comment which contains the link to the PR\n@@ -312,0 +340,4 @@\n+            var comments = issue.comments();\n+            assertEquals(1, comments.size());\n+            assertTrue(comments.get(0).body().contains(pullRequestTip));\n+            assertTrue(comments.get(0).body().contains(pr.webUrl().toString()));\n@@ -344,1 +376,1 @@\n-            \/\/ The issue should now contain a link to the PR\n+            \/\/ The issue should now contain a link to the PR and a comment which contains the link to the PR\n@@ -349,0 +381,4 @@\n+            var comments = issue.comments();\n+            assertEquals(1, comments.size());\n+            assertTrue(comments.get(0).body().contains(pullRequestTip));\n+            assertTrue(comments.get(0).body().contains(pr.webUrl().toString()));\n@@ -362,0 +398,6 @@\n+            \/\/ The issue should only contain a comment which contains the link to the PR\n+            comments = updatedIssue.comments();\n+            assertEquals(1, comments.size());\n+            assertTrue(comments.get(0).body().contains(pullRequestTip));\n+            assertTrue(comments.get(0).body().contains(pr.webUrl().toString()));\n+\n@@ -371,2 +413,5 @@\n-            \/\/ And no comments should have been made\n-            assertEquals(0, issue.comments().size());\n+            \/\/ The issue should only contain a comment which contains the link to the PR\n+            comments = updatedIssue.comments();\n+            assertEquals(1, comments.size());\n+            assertTrue(comments.get(0).body().contains(pullRequestTip));\n+            assertTrue(comments.get(0).body().contains(pr.webUrl().toString()));\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifierTests.java","additions":54,"deletions":9,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -140,2 +140,3 @@\n-        var id = comments.size();\n-        var comment = new Comment(Integer.toString(id), body, user, now, now);\n+        var size = comments.size();\n+        var lastId = size > 0 ? comments.get(size - 1).id() : null;\n+        var comment = new Comment(String.valueOf(lastId != null ? Integer.parseInt(lastId) + 1 : 0), body, user, now, now);\n@@ -146,0 +147,5 @@\n+    @Override\n+    public void removeComment(Comment comment) {\n+        comments.remove(comment);\n+    }\n+\n@@ -148,2 +154,3 @@\n-        var index = Integer.parseInt(id);\n-        var old = comments.get(index);\n+        var old = comments.stream()\n+                .filter(comment -> comment.id().equals(id)).findAny().get();\n+        var index = comments().indexOf(old);\n","filename":"bots\/tester\/src\/test\/java\/org\/openjdk\/skara\/bots\/tester\/InMemoryPullRequest.java","additions":12,"deletions":5,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -367,0 +367,5 @@\n+    @Override\n+    public void removeComment(Comment comment) {\n+        throw new RuntimeException(\"not implemented yet\");\n+    }\n+\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubPullRequest.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -406,0 +406,5 @@\n+    @Override\n+    public void removeComment(Comment comment) {\n+        throw new RuntimeException(\"not implemented yet\");\n+    }\n+\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabMergeRequest.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -88,0 +88,6 @@\n+    \/**\n+     * Remove the specific comment.\n+     * @param comment\n+     *\/\n+    void removeComment(Comment comment);\n+\n","filename":"issuetracker\/src\/main\/java\/org\/openjdk\/skara\/issuetracker\/Issue.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -143,0 +143,7 @@\n+    @Override\n+    public void removeComment(Comment comment) {\n+        request.delete(\"\/comment\/\" + comment.id())\n+               .onError(e -> e.statusCode() == 404 ? Optional.of(JSON.object().put(\"already_deleted\", true)) : Optional.empty())\n+               .execute();\n+    }\n+\n","filename":"issuetracker\/src\/main\/java\/org\/openjdk\/skara\/issuetracker\/jira\/JiraIssue.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -109,1 +109,3 @@\n-        var comment = new Comment(String.valueOf(data.comments.size()),\n+        var size = data.comments.size();\n+        var lastId = size > 0 ? data.comments.get(size - 1).id() : null;\n+        var comment = new Comment(String.valueOf(lastId != null ? Integer.parseInt(lastId) + 1 : 0),\n@@ -119,0 +121,5 @@\n+    @Override\n+    public void removeComment(Comment comment) {\n+        data.comments.remove(comment);\n+    }\n+\n@@ -121,1 +128,3 @@\n-        var originalComment = data.comments.get(Integer.parseInt(id));\n+        var originalComment = data.comments.stream()\n+                .filter(comment -> comment.id().equals(id)).findAny().get();\n+        var index = comments().indexOf(originalComment);\n@@ -127,2 +136,1 @@\n-        data.comments.remove(Integer.parseInt(id));\n-        data.comments.add(Integer.parseInt(id), comment);\n+        data.comments.set(index, comment);\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestIssue.java","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-import org.openjdk.skara.issuetracker.Comment;\n@@ -266,4 +265,0 @@\n-\n-    public void removeComment(Comment comment) {\n-        data.comments.remove(comment);\n-    }\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestPullRequest.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"}]}