{"files":[{"patch":"@@ -760,1 +760,2 @@\n-            var commit = localRepo.lookup(localHash).orElseThrow();\n+            var amendedHash = checkablePullRequest.amendManualReviewers(localHash, censusInstance.namespace());\n+            var commit = localRepo.lookup(amendedHash).orElseThrow();\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-    private String commitMessage(List<Review> activeReviews, Namespace namespace) throws IOException {\n+    private String commitMessage(List<Review> activeReviews, Namespace namespace, boolean manualReviewers) throws IOException {\n@@ -65,1 +65,1 @@\n-        if (!ignoreStaleReviews) {\n+        if (manualReviewers) {\n@@ -133,1 +133,1 @@\n-        var commitMessage = commitMessage(activeReviews, namespace);\n+        var commitMessage = commitMessage(activeReviews, namespace, false);\n@@ -137,0 +137,12 @@\n+    Hash amendManualReviewers(Hash commit, Namespace namespace) throws IOException {\n+        var activeReviews = filterActiveReviews(pr.reviews());\n+        var originalCommitMessage = commitMessage(activeReviews, namespace, false);\n+        var amendedCommitMessage = commitMessage(activeReviews, namespace, true);\n+\n+        if (originalCommitMessage.equals(amendedCommitMessage)) {\n+            return commit;\n+        } else {\n+            return localRepo.amend(amendedCommitMessage);\n+        }\n+    }\n+\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckablePullRequest.java","additions":15,"deletions":3,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -154,0 +154,1 @@\n+                var amendedHash = checkablePr.amendManualReviewers(localHash, censusInstance.namespace());\n@@ -158,1 +159,1 @@\n-                reply.println(\"Pushed as commit \" + localHash.hex() + \".\");\n+                reply.println(\"Pushed as commit \" + amendedHash.hex() + \".\");\n@@ -161,1 +162,1 @@\n-                localRepo.push(localHash, pr.repository().url(), pr.targetRef());\n+                localRepo.push(amendedHash, pr.repository().url(), pr.targetRef());\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/IntegrateCommand.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-    private static final Pattern commandPattern = Pattern.compile(\"^(add|remove)\\\\s+(.+)$\");\n+    private static final Pattern commandPattern = Pattern.compile(\"^(credit|remove)\\\\s+(.+)$\");\n@@ -38,1 +38,1 @@\n-        reply.println(\"Syntax: `\/reviewer (add|remove) [@user | openjdk-user]+`. For example:\");\n+        reply.println(\"Syntax: `\/reviewer (credit|remove) [@user | openjdk-user]+`. For example:\");\n@@ -40,3 +40,3 @@\n-        reply.println(\" * `\/reviewer add @openjdk-bot`\");\n-        reply.println(\" * `\/reviewer add duke`\");\n-        reply.println(\" * `\/reviewer add @user1 @user2`\");\n+        reply.println(\" * `\/reviewer credit @openjdk-bot`\");\n+        reply.println(\" * `\/reviewer credit duke`\");\n+        reply.println(\" * `\/reviewer credit @user1 @user2`\");\n@@ -75,4 +75,0 @@\n-        if (bot.ignoreStaleReviews()) {\n-            reply.println(\"This project requires authenticated reviews - please ask your reviewer to flag this PR as reviewed.\");\n-            return;\n-        }\n@@ -101,1 +97,1 @@\n-        if (action.equals(\"add\")) {\n+        if (action.equals(\"credit\")) {\n@@ -105,1 +101,1 @@\n-                    reply.println(\"Reviewer `\" + reviewer.username() + \"` successfully added.\");\n+                    reply.println(\"Reviewer `\" + reviewer.username() + \"` successfully credited.\");\n@@ -107,1 +103,1 @@\n-                    reply.println(\"Reviewer `\" + reviewer.username() + \"` has already made an authenticated review of this PR, and does not need to be added manually.\");\n+                    reply.println(\"Reviewer `\" + reviewer.username() + \"` has already made an authenticated review of this PR, and does not need to be credited manually.\");\n@@ -119,1 +115,1 @@\n-                        reply.println(\"There are no additional reviewers associated with this pull request.\");\n+                        reply.println(\"There are no manually specified reviewers associated with this pull request.\");\n@@ -129,1 +125,1 @@\n-                reply.println(\"Current additional reviewers are:\");\n+                reply.println(\"Current credited reviewers are:\");\n@@ -139,1 +135,1 @@\n-        return \"adds or removes additional reviewers for a PR\";\n+        return \"manage additional reviewers for a PR\";\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/ReviewerCommand.java","additions":11,"deletions":15,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -128,0 +128,1 @@\n+                var amendedHash = checkablePr.amendManualReviewers(localHash, censusInstance.namespace());\n@@ -132,1 +133,1 @@\n-                reply.println(\"Pushed as commit \" + localHash.hex() + \".\");\n+                reply.println(\"Pushed as commit \" + amendedHash.hex() + \".\");\n@@ -135,1 +136,1 @@\n-                localRepo.push(localHash, pr.repository().url(), pr.targetRef());\n+                localRepo.push(amendedHash, pr.repository().url(), pr.targetRef());\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/SponsorCommand.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-            pr.addComment(\"\/reviewer add @\" + integrator.forge().currentUser().userName());\n+            pr.addComment(\"\/reviewer credit @\" + integrator.forge().currentUser().userName());\n@@ -74,2 +74,2 @@\n-            \/\/ The bot should now consider the PR ready\n-            assertLastCommentContains(pr,\"This change now passes all automated pre-integration checks\");\n+            \/\/ The bot should not yet consider the PR ready\n+            assertFalse(pr.labels().contains(\"ready\"));\n@@ -89,1 +89,1 @@\n-            assertLastCommentContains(pr,\"There are no additional reviewers associated with this pull request\");\n+            assertLastCommentContains(pr,\"There are no manually specified reviewers associated with this pull request\");\n@@ -92,1 +92,1 @@\n-            pr.addComment(\"\/reviewer add integrationreviewer1\");\n+            pr.addComment(\"\/reviewer credit integrationreviewer1\");\n@@ -115,1 +115,1 @@\n-            pr.addComment(\"\/reviewer add integrationauthor2\");\n+            pr.addComment(\"\/reviewer credit integrationauthor2\");\n@@ -175,1 +175,1 @@\n-            externalPr.addComment(\"\/reviewer add integrationauthor1\");\n+            externalPr.addComment(\"\/reviewer credit integrationauthor1\");\n@@ -211,1 +211,1 @@\n-            pr.addComment(\"\/reviewer add Moo <Foo.Bar (at) host.com>\");\n+            pr.addComment(\"\/reviewer credit Moo <Foo.Bar (at) host.com>\");\n@@ -216,1 +216,1 @@\n-            pr.addComment(\"\/reviewer add @\");\n+            pr.addComment(\"\/reviewer credit @\");\n@@ -221,1 +221,1 @@\n-            pr.addComment(\"\/reviewer add @someone\");\n+            pr.addComment(\"\/reviewer credit @someone\");\n@@ -226,1 +226,1 @@\n-            pr.addComment(\"\/reviewer add someone\");\n+            pr.addComment(\"\/reviewer credit someone\");\n@@ -257,1 +257,1 @@\n-            pr.addComment(\"\/reviewer add @\" + author.forge().currentUser().userName());\n+            pr.addComment(\"\/reviewer credit @\" + author.forge().currentUser().userName());\n@@ -261,1 +261,1 @@\n-            assertLastCommentContains(pr, \"Reviewer `integrationcommitter2` successfully added.\");\n+            assertLastCommentContains(pr, \"Reviewer `integrationcommitter2` successfully credited.\");\n@@ -290,1 +290,1 @@\n-            pr.addComment(\"\/reviewer add integrationauthor1\");\n+            pr.addComment(\"\/reviewer credit integrationauthor1\");\n@@ -294,1 +294,1 @@\n-            assertLastCommentContains(pr, \"Reviewer `integrationauthor1` successfully added.\");\n+            assertLastCommentContains(pr, \"Reviewer `integrationauthor1` successfully credited.\");\n@@ -325,1 +325,1 @@\n-            assertLastCommentContains(pr, \"There are no additional reviewers associated with this pull request.\");\n+            assertLastCommentContains(pr, \"There are no manually specified reviewers associated with this pull request.\");\n@@ -328,1 +328,1 @@\n-            pr.addComment(\"\/reviewer add integrationauthor1\");\n+            pr.addComment(\"\/reviewer credit integrationauthor1\");\n@@ -330,1 +330,1 @@\n-            assertLastCommentContains(pr, \"successfully added.\");\n+            assertLastCommentContains(pr, \"successfully credited.\");\n@@ -336,1 +336,1 @@\n-            assertLastCommentContains(pr, \"Current additional reviewers are:\");\n+            assertLastCommentContains(pr, \"Current credited reviewers are:\");\n@@ -371,1 +371,1 @@\n-            pr.addComment(\"\/reviewer add integrationauthor1\");\n+            pr.addComment(\"\/reviewer credit integrationauthor1\");\n@@ -374,1 +374,1 @@\n-            assertLastCommentContains(pr, \"successfully added.\");\n+            assertLastCommentContains(pr, \"successfully credited.\");\n@@ -406,1 +406,1 @@\n-            pr.addComment(\"\/reviewer add integrationauthor1\");\n+            pr.addComment(\"\/reviewer credit integrationauthor1\");\n@@ -409,1 +409,1 @@\n-            assertLastCommentContains(pr, \"successfully added.\");\n+            assertLastCommentContains(pr, \"successfully credited.\");\n@@ -455,1 +455,1 @@\n-            pr.addComment(\"\/reviewer add integrationreviewer1\");\n+            pr.addComment(\"\/reviewer credit integrationreviewer1\");\n@@ -474,1 +474,1 @@\n-                                           .addAuthor(extra.forge().currentUser().id())\n+                                           .addReviewer(extra.forge().currentUser().id())\n@@ -490,2 +490,2 @@\n-            \/\/ Add two reviewers\n-            pr.addComment(\"\/reviewer add integrationreviewer1 integrationauthor2\");\n+            \/\/ Credit two additional reviewers\n+            pr.addComment(\"\/reviewer credit integrationreviewer1 integrationcommitter3\");\n@@ -494,2 +494,7 @@\n-            \/\/ Expect success\n-            assertLastCommentContains(pr, \"Reviewed-by: integrationreviewer1, integrationauthor2\");\n+            \/\/ Add a real review\n+            var approvalPr = extra.pullRequest(pr.id());\n+            approvalPr.addReview(Review.Verdict.APPROVED, \"Approved\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+\n+            \/\/ Check the ready comment\n+            assertLastCommentContains(pr, \"Reviewed-by: integrationreviewer2, integrationreviewer1, integrationcommitter3\");\n@@ -498,1 +503,1 @@\n-            pr.addComment(\"\/reviewer remove integrationreviewer1 integrationauthor2\");\n+            pr.addComment(\"\/reviewer remove integrationreviewer1 integrationcommitter3\");\n@@ -503,1 +508,1 @@\n-            assertLastCommentContains(pr, \"Reviewer `integrationauthor2` successfully removed\");\n+            assertLastCommentContains(pr, \"Reviewer `integrationcommitter3` successfully removed\");\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/ReviewerTests.java","additions":36,"deletions":31,"binary":false,"changes":67,"status":"modified"}]}