{"files":[{"patch":"@@ -25,2 +25,0 @@\n-import org.openjdk.skara.ci.ContinuousIntegration;\n-import org.openjdk.skara.ci.Job;\n@@ -28,1 +26,0 @@\n-import org.openjdk.skara.forge.*;\n@@ -30,0 +27,3 @@\n+import org.openjdk.skara.ci.*;\n+import org.openjdk.skara.forge.*;\n+import org.openjdk.skara.host.HostUser;\n@@ -32,1 +32,0 @@\n-import org.openjdk.skara.host.HostUser;\n@@ -35,1 +34,1 @@\n-import java.nio.file.*;\n+import java.nio.file.Path;\n@@ -37,0 +36,2 @@\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Predicate;\n@@ -39,1 +40,0 @@\n-import java.util.function.Predicate;\n@@ -42,1 +42,1 @@\n-    private static class Observation {\n+    static class Observation {\n@@ -62,1 +62,1 @@\n-    private final Map<String, Observation> states;\n+    private final ConcurrentHashMap<String, Observation> states;\n@@ -87,1 +87,1 @@\n-        this.states = new HashMap<>();\n+        this.states = new ConcurrentHashMap<>();\n@@ -123,0 +123,9 @@\n+            var workItem = new TestWorkItem(ci,\n+                                            approversGroupId,\n+                                            allowlist,\n+                                            availableJobs,\n+                                            defaultJobs,\n+                                            name,\n+                                            storage,\n+                                            pr,\n+                                            isCommitter);\n@@ -124,9 +133,1 @@\n-                ret.add(new TestWorkItem(ci,\n-                                         approversGroupId,\n-                                         allowlist,\n-                                         availableJobs,\n-                                         defaultJobs,\n-                                         name,\n-                                         storage,\n-                                         pr,\n-                                         isCommitter));\n+                ret.add(workItem);\n@@ -134,41 +135,1 @@\n-                \/\/ is there a job running for this PR?\n-                var desc = pr.repository().name() + \"#\" + pr.id();\n-                List<Job> jobs = List.of();\n-                try {\n-                    log.info(\"Getting test jobs for \" + desc);\n-                    jobs = ci.jobsFor(pr);\n-                } catch (IOException e) {\n-                    log.info(\"Could not retrieve test jobs for PR: \" + desc);\n-                    log.throwing(\"TestBot\", \"getPeriodicItems\", e);\n-                }\n-\n-                if (!jobs.isEmpty()) {\n-                    var shouldUpdate = false;\n-                    for (var job : jobs) {\n-                        if (!states.containsKey(job.id())) {\n-                            shouldUpdate = true;\n-                            states.put(job.id(), new Observation(job.state(), job.state()));\n-                        } else {\n-                            var observed = states.get(job.id());\n-\n-                            if (!observed.last.equals(Job.State.COMPLETED) ||\n-                                !observed.nextToLast.equals(Job.State.COMPLETED)) {\n-                                shouldUpdate = true;\n-                            }\n-\n-                            observed.nextToLast = observed.last;\n-                            observed.last = job.state();\n-                        }\n-                    }\n-                    if (shouldUpdate) {\n-                        ret.add(new TestWorkItem(ci,\n-                                                 approversGroupId,\n-                                                 allowlist,\n-                                                 availableJobs,\n-                                                 defaultJobs,\n-                                                 name,\n-                                                 storage,\n-                                                 pr,\n-                                                 isCommitter));\n-                    }\n-                }\n+                ret.add(new TestUpdateNeededWorkItem(pr, ci, states, workItem));\n","filename":"bots\/tester\/src\/main\/java\/org\/openjdk\/skara\/bots\/tester\/TestBot.java","additions":20,"deletions":59,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -0,0 +1,92 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bots.tester;\n+\n+import org.openjdk.skara.bot.WorkItem;\n+import org.openjdk.skara.ci.*;\n+import org.openjdk.skara.forge.PullRequest;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.*;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.logging.Logger;\n+\n+public class TestUpdateNeededWorkItem implements WorkItem {\n+    private final PullRequest pr;\n+    private final ContinuousIntegration ci;\n+    private final ConcurrentHashMap<String, TestBot.Observation> states;\n+    private final TestWorkItem actualWorkItem;\n+    private final Logger log = Logger.getLogger(\"org.openjdk.skara.bots\");;\n+\n+    TestUpdateNeededWorkItem(PullRequest pr,  ContinuousIntegration ci, ConcurrentHashMap<String, TestBot.Observation> states,\n+                             TestWorkItem actualWorkItem) {\n+        this.pr = pr;\n+        this.ci = ci;\n+        this.states = states;\n+        this.actualWorkItem = actualWorkItem;\n+    }\n+\n+    @Override\n+    public boolean concurrentWith(WorkItem other) {\n+        return false;\n+    }\n+\n+    @Override\n+    public Collection<WorkItem> run(Path scratchPath) {\n+        \/\/ is there a job running for this PR?\n+        var desc = pr.repository().name() + \"#\" + pr.id();\n+        List<Job> jobs = List.of();\n+        try {\n+            log.info(\"Getting test jobs for \" + desc);\n+            jobs = ci.jobsFor(pr);\n+        } catch (IOException e) {\n+            log.info(\"Could not retrieve test jobs for PR: \" + desc);\n+            log.throwing(\"TestBot\", \"getPeriodicItems\", e);\n+        }\n+\n+        if (!jobs.isEmpty()) {\n+            var shouldUpdate = false;\n+            for (var job : jobs) {\n+                if (!states.containsKey(job.id())) {\n+                    shouldUpdate = true;\n+                    states.put(job.id(), new TestBot.Observation(job.state(), job.state()));\n+                } else {\n+                    var observed = states.get(job.id());\n+\n+                    if (!observed.last.equals(Job.State.COMPLETED) ||\n+                            !observed.nextToLast.equals(Job.State.COMPLETED)) {\n+                        shouldUpdate = true;\n+                    }\n+\n+                    observed.nextToLast = observed.last;\n+                    observed.last = job.state();\n+                }\n+            }\n+            if (shouldUpdate) {\n+                return List.of(actualWorkItem);\n+            }\n+        }\n+        return List.of();\n+    }\n+}\n","filename":"bots\/tester\/src\/main\/java\/org\/openjdk\/skara\/bots\/tester\/TestUpdateNeededWorkItem.java","additions":92,"deletions":0,"binary":false,"changes":92,"status":"added"}]}