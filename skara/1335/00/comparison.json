{"files":[{"patch":"@@ -73,0 +73,4 @@\n+    \/\/ A set of version opt strings that may be part of fixVersion in issues, but that\n+    \/\/ do not need to be part of a tag to be considered a match.\n+    private final Set<String> tagIgnoreOpt;\n+\n@@ -81,1 +85,1 @@\n-                  HostedRepository originalRepository, boolean resolve) {\n+                  HostedRepository originalRepository, boolean resolve, Set<String> tagIgnoreOpt) {\n@@ -100,0 +104,1 @@\n+        this.tagIgnoreOpt = tagIgnoreOpt;\n@@ -436,3 +441,1 @@\n-        \/\/ Ignore the opt string when comparing versions for match as the fixVersion can\n-        \/\/ have a suffix such as \"-oracle\" that isn't reflected in tags.\n-        if (fixVersion.components().equals(tagVersion.components())) {\n+        if (fixVersion.equals(tagVersion)) {\n@@ -441,0 +444,13 @@\n+        \/\/ If the fix version has an opt string that should be ignored, compare just the version\n+        \/\/ component parts.\n+        if (fixVersion.opt().isPresent()) {\n+            if (tagIgnoreOpt.contains(fixVersion.opt().get())\n+                    && fixVersion.components().equals(tagVersion.components())) {\n+                return true;\n+            }\n+            \/\/ If the opt strings shouldn't be ignored, break early if they aren't matching\n+            if (!fixVersion.opt().equals(tagVersion.opt())) {\n+                return false;\n+            }\n+        }\n+\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifier.java","additions":20,"deletions":4,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -50,0 +50,1 @@\n+    private Set<String> tagIgnoreOpt = Set.of();\n@@ -142,0 +143,5 @@\n+    public IssueNotifierBuilder tagIgnoreOpt(Set<String> tagIgnoreOpt) {\n+        this.tagIgnoreOpt = tagIgnoreOpt;\n+        return this;\n+    }\n+\n@@ -155,1 +161,1 @@\n-                resolve);\n+                resolve, tagIgnoreOpt);\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifierBuilder.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -126,0 +126,9 @@\n+        if (notifierConfiguration.contains(\"tag\")) {\n+            var tag = notifierConfiguration.get(\"tag\");\n+            if (tag.contains(\"ignoreopt\")) {\n+                builder.tagIgnoreOpt(tag.get(\"ignoreopt\").stream()\n+                        .map(JSONValue::asString)\n+                        .collect(Collectors.toSet()));\n+            }\n+        }\n+\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifierFactory.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-            if (primary.project().webUrl().toString().contains(\"openjdk.java.net\")) {\n+            if (primary.project().webUrl().toString().contains(\"openjdk.org\")) {\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/JbsBackport.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -881,3 +881,4 @@\n-                                                                         .put(\"master\", \"16-foo\")\n-                                                                         .put(\"other\", \"16.0.2\"))\n-                                        .put(\"buildname\", \"team\");\n+                            .put(\"master\", \"16-foo\")\n+                            .put(\"other\", \"16.0.2\"))\n+                    .put(\"buildname\", \"team\")\n+                    .put(\"tag\", JSON.object().put(\"ignoreopt\", JSON.array().add(\"foo\")));\n@@ -1056,0 +1057,86 @@\n+    @Test\n+    void testIssueBuildAfterTagJdk8uSuffix(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+\n+            var repo = credentials.getHostedRepository();\n+            var repoFolder = tempFolder.path().resolve(\"repo\");\n+            var localRepo = CheckableRepository.init(repoFolder, repo.repositoryType());\n+            credentials.commitLock(localRepo);\n+            localRepo.pushAll(repo.url());\n+\n+            var issueProject = credentials.getIssueProject();\n+            var storageFolder = tempFolder.path().resolve(\"storage\");\n+            var jbsNotifierConfig = JSON.object().put(\"fixversions\", JSON.object()\n+                            .put(\"master\", \"8u341\")\n+                            .put(\"other\", \"8u341-foo\"))\n+                    .put(\"buildname\", \"team\");\n+            var notifyBot = testBotBuilder(repo, issueProject, storageFolder, jbsNotifierConfig).create(\"notify\", JSON.object());\n+\n+            \/\/ Initialize history\n+            var current = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(current, repo.url(), \"other\");\n+            localRepo.tag(current, \"jdk8u341-b00\", \"First tag\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.tag(current, \"jdk8u341-foo-b00\", \"First foo tag\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(new Branch(repo.url().toString()), \"--tags\", false);\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ Create an issue and commit a fix\n+            var authorEmailAddress = issueProject.issueTracker().currentUser().username() + \"@openjdk.org\";\n+            var issue = issueProject.createIssue(\"This is an issue\", List.of(\"Indeed\"), Map.of(\"issuetype\", JSON.of(\"Enhancement\")));\n+            issue.setProperty(\"fixVersions\", JSON.of(\"8u341\"));\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, \"Another line\", issue.id() + \": Fix that issue\", \"Duke\", authorEmailAddress);\n+            localRepo.push(editHash, repo.url(), \"master\");\n+            localRepo.push(editHash, repo.url(), \"other\");\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ The changeset should be reflected in a comment in the issue and in a new backport\n+            var updatedIssue = issueProject.issue(issue.id()).orElseThrow();\n+            var backportIssue = updatedIssue.links().get(0).issue().orElseThrow();\n+\n+            var comments = updatedIssue.comments();\n+            assertEquals(1, comments.size());\n+            var comment = comments.get(0);\n+            assertTrue(comment.body().contains(editHash.toString()));\n+\n+            var backportComments = backportIssue.comments();\n+            assertEquals(1, backportComments.size());\n+            var backportComment = backportComments.get(0);\n+            assertTrue(backportComment.body().contains(editHash.toString()));\n+\n+            \/\/ As well as a fixVersion and a resolved in build\n+            assertEquals(Set.of(\"8u341\"), fixVersions(updatedIssue));\n+            assertEquals(\"team\", updatedIssue.properties().get(RESOLVED_IN_BUILD).asString());\n+            assertEquals(Set.of(\"8u341-foo\"), fixVersions(backportIssue));\n+            assertEquals(\"team\", backportIssue.properties().get(RESOLVED_IN_BUILD).asString());\n+\n+            \/\/ The issue should be assigned and resolved\n+            assertEquals(RESOLVED, updatedIssue.state());\n+            assertEquals(List.of(issueProject.issueTracker().currentUser()), updatedIssue.assignees());\n+            assertEquals(RESOLVED, backportIssue.state());\n+            assertEquals(List.of(issueProject.issueTracker().currentUser()), backportIssue.assignees());\n+\n+            \/\/ Tag it\n+            localRepo.tag(editHash, \"jdk8u341-b01\", \"Second tag\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(new Branch(repo.url().toString()), \"--tags\", false);\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ The build should now be updated\n+            updatedIssue = issueProject.issue(issue.id()).orElseThrow();\n+            backportIssue = issueProject.issue(backportIssue.id()).orElseThrow();\n+            assertEquals(\"b01\", updatedIssue.properties().get(RESOLVED_IN_BUILD).asString());\n+            \/\/ But not in the update backport\n+            assertEquals(\"team\", backportIssue.properties().get(RESOLVED_IN_BUILD).asString());\n+\n+            \/\/ Tag it with an unrelated tag\n+            localRepo.tag(editHash, \"jdk8u341-foo-b01\", \"Second foo tag\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(new Branch(repo.url().toString()), \"--tags\", false);\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ The build should now be updated\n+            updatedIssue = issueProject.issue(issue.id()).orElseThrow();\n+            backportIssue = issueProject.issue(backportIssue.id()).orElseThrow();\n+            assertEquals(\"b01\", backportIssue.properties().get(RESOLVED_IN_BUILD).asString());\n+        }\n+    }\n+\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifierTests.java","additions":90,"deletions":3,"binary":false,"changes":93,"status":"modified"},{"patch":"@@ -48,9 +48,10 @@\n-     *                prefix   version  update  buildPrefix  buildNum\n-     *                -------  -------  ------  -----------  ------\n-     * jdk-9.1+27  -> jdk-9.1  9.1              +            27\n-     * jdk8-b90    -> jdk8     8                -b           90\n-     * jdk7u40-b20 -> jdk7u40  7u40     u20     -b           29\n-     * hs24-b30    -> hs24     24               -b           30\n-     * hs23.6-b19  -> hs23.6   23.6     .6      -b           19\n-     * 11.1+22     -> 11.1     11.1     .1      +            22\n-     * 8u321-b03   -> 8u321    8u321    u321    -b           3\n+     *                     prefix       version   buildPrefix  buildNum\n+     *                     -------      -------   -----------  ------\n+     * jdk-9.1+27       -> jdk-9.1      9.1       +            27\n+     * jdk8-b90         -> jdk8         8         -b           90\n+     * jdk7u40-b20      -> jdk7u40      7u40      -b           29\n+     * hs24-b30         -> hs24         24        -b           30\n+     * hs23.6-b19       -> hs23.6       23.6      -b           19\n+     * 11.1+22          -> 11.1         11.1      +            22\n+     * 8u321-b03        -> 8u321        8u321     -b           3\n+     * jdk8u341-foo-b17 -> jdk8u341-foo 8u341-foo -b           17\n@@ -59,1 +60,1 @@\n-    private final static String legacyOpenJDKVersionPattern = \"(jdk([0-9]{1,2}(u[0-9]{1,3})?))\";\n+    private final static String legacyOpenJDKVersionPattern = \"(jdk([0-9]{1,2}(u[0-9]{1,3}(?:-[a-z0-9]+)?)?))\";\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/openjdk\/OpenJDKTag.java","additions":11,"deletions":10,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -146,0 +146,8 @@\n+\n+    @Test\n+    void parse8uSuffixVersion() {\n+        var tag = new Tag(\"jdk8u341-foo-b17\");\n+        var jdkTag = OpenJDKTag.create(tag).orElseThrow();\n+        assertEquals(\"8u341-foo\", jdkTag.version());\n+        assertEquals(17, jdkTag.buildNum().orElseThrow());\n+    }\n","filename":"vcs\/src\/test\/java\/org\/openjdk\/skara\/vcs\/openjdk\/OpenJDKTagTests.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"}]}