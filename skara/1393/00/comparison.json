{"files":[{"patch":"@@ -46,6 +46,6 @@\n-    private final Logger log;\n-    private final JSONObject config;\n-    private final Map<String, Forge> repositoryHosts;\n-    private final Map<String, IssueTracker> issueHosts;\n-    private final Map<String, ContinuousIntegration> continuousIntegrations;\n-    private final Map<String, HostedRepository> repositories;\n+    protected final Logger log;\n+    protected final JSONObject config;\n+    protected final Map<String, Forge> repositoryHosts;\n+    protected final Map<String, IssueTracker> issueHosts;\n+    protected final Map<String, ContinuousIntegration> continuousIntegrations;\n+    protected final Map<String, HostedRepository> repositories;\n@@ -63,0 +63,9 @@\n+    public BotRunnerConfiguration(JSONObject config, Map<String, Forge> repositoryHosts, Map<String, IssueTracker> issueHosts) throws ConfigurationError {\n+        log = Logger.getLogger(\"org.openjdk.skara.bot\");\n+        this.config = config;\n+        this.repositoryHosts = repositoryHosts;\n+        this.issueHosts = issueHosts;\n+        this.continuousIntegrations = parseContinuousIntegrations(config, null);\n+        this.repositories = parseRepositories(config);\n+    }\n+\n@@ -134,1 +143,1 @@\n-    private Map<String, ContinuousIntegration> parseContinuousIntegrations(JSONObject config, Path cwd) throws ConfigurationError {\n+    protected Map<String, ContinuousIntegration> parseContinuousIntegrations(JSONObject config, Path cwd) throws ConfigurationError {\n@@ -154,1 +163,1 @@\n-    private Map<String, HostedRepository> parseRepositories(JSONObject config) throws ConfigurationError {\n+    protected Map<String, HostedRepository> parseRepositories(JSONObject config) throws ConfigurationError {\n","filename":"bot\/src\/main\/java\/org\/openjdk\/skara\/bot\/BotRunnerConfiguration.java","additions":17,"deletions":8,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-    ConfigurationError(String message) {\n+    public ConfigurationError(String message) {\n","filename":"bot\/src\/main\/java\/org\/openjdk\/skara\/bot\/ConfigurationError.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,29 @@\n+package org.openjdk.skara.bots.bridgekeeper;\n+\n+import org.junit.jupiter.api.Test;\n+import org.openjdk.skara.bot.BotConfiguration;\n+import org.openjdk.skara.bot.ConfigurationError;\n+import org.openjdk.skara.json.JWCC;\n+import org.openjdk.skara.test.TestBotRunnerConfiguration;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class BridgekeeperBotFactoryTest {\n+    BridgekeeperBotFactory bridgekeeperBotFactory = new BridgekeeperBotFactory();\n+\n+    @Test\n+    public void testCreate() throws IOException, ConfigurationError {\n+\/\/        Path jsonFile = Paths.get(\"..\", \"resources\", \"services-external.json\");\n+\/\/        var jsonConfig = JWCC.parse(Files.readString(jsonFile, StandardCharsets.UTF_8)).asObject();\n+\/\/\n+\/\/        TestBotRunnerConfiguration runnerConfig = new TestBotRunnerConfiguration(jsonConfig);\n+\/\/        BotConfiguration botConfig = runnerConfig.perBotConfiguration(bridgekeeperBotFactory.name());\n+\/\/        bridgekeeperBotFactory.create(botConfig);\n+    }\n+}\n\\ No newline at end of file\n","filename":"bots\/bridgekeeper\/src\/test\/java\/org\/openjdk\/skara\/bots\/bridgekeeper\/BridgekeeperBotFactoryTest.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"},{"patch":"@@ -0,0 +1,51 @@\n+package org.openjdk.skara.bots.csr;\n+\n+import org.junit.jupiter.api.Test;\n+import org.openjdk.skara.bot.BotConfiguration;\n+import org.openjdk.skara.bot.ConfigurationError;\n+import org.openjdk.skara.json.*;\n+import org.openjdk.skara.test.*;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class CSRBotFactoryTest {\n+    CSRBotFactory csrBotFactory = new CSRBotFactory();\n+\n+    @Test\n+    public void testCreate() throws IOException, ConfigurationError {\n+        Path jsonFile = Paths.get(\"src\", \"test\", \"resources\", \"test_config.json\");\n+        var jsonConfig = JWCC.parse(Files.readString(jsonFile, StandardCharsets.UTF_8)).asObject();\n+\n+        TestBotRunnerConfiguration runnerConfig = new TestBotRunnerConfiguration(jsonConfig);\n+        BotConfiguration botConfig = runnerConfig.perBotConfiguration(csrBotFactory.name());\n+        var bots = csrBotFactory.create(botConfig);\n+        assertEquals(8, bots.size());\n+\n+        var csrPullRequestBots = bots.stream().filter(e -> e.getClass().equals(CSRPullRequestBot.class)).collect(Collectors.toList());\n+        var csrIssueBots = bots.stream().filter(e -> e.getClass().equals(CSRIssueBot.class)).collect(Collectors.toList());\n+\n+        \/\/ a CSRPullRequestBot for every configured repository\n+        assertEquals(6, csrPullRequestBots.size());\n+        \/\/ a CSRIssueBot for each unique IssueProject\n+        assertEquals(2, csrIssueBots.size());\n+\n+        for (var bot : csrIssueBots) {\n+            CSRIssueBot csrIssueBot = (CSRIssueBot) bot;\n+            if (csrIssueBot.toString().equals(\"CSRIssueBot@TEST\")) {\n+                assertEquals(5, csrIssueBot.repositories().size());\n+            } else if (csrIssueBot.toString().equals(\"CSRIssueBot@TEST2\")) {\n+                assertEquals(1, csrIssueBot.repositories().size());\n+            } else {\n+                throw new RuntimeException(\"This issue bot is not expected\");\n+            }\n+        }\n+\n+    }\n+}\n","filename":"bots\/csr\/src\/test\/java\/org\/openjdk\/skara\/bots\/csr\/CSRBotFactoryTest.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"},{"patch":"@@ -0,0 +1,50 @@\n+{\n+  \"forges\": {\n+    \"orahub\": {\n+      \"gitlab\": {\n+        \"url\": \"https:\/\/test.test.com\"\n+      }\n+    },\n+    \"test@github\": {\n+      \"github\": {\n+        \"app\": {\n+        }\n+      }\n+    }\n+  },\n+  \"issuetrackers\": {\n+    \"test_bugs\": {\n+      \"jira\": {\n+        \"url\": \"https:\/\/test.test.org\"\n+      }\n+    }\n+  },\n+  \"csr\": {\n+    \"projects\": [\n+      {\n+        \"repository\": \"test@github\/openjdk\/jdk1\",\n+        \"issues\": \"test_bugs\/TEST\"\n+      },\n+      {\n+        \"repository\": \"test@github\/openjdk\/jdk2\",\n+        \"issues\": \"test_bugs\/TEST\"\n+      },\n+      {\n+        \"repository\": \"test@github\/openjdk\/jdk3\",\n+        \"issues\": \"test_bugs\/TEST\"\n+      },\n+      {\n+        \"repository\": \"test@github\/openjdk\/jdk4\",\n+        \"issues\": \"test_bugs\/TEST\"\n+      },\n+      {\n+        \"repository\": \"test@github\/openjdk\/jdk5\",\n+        \"issues\": \"test_bugs\/TEST\"\n+      },\n+      {\n+        \"repository\": \"test@github\/openjdk\/jdk6\",\n+        \"issues\": \"test_bugs\/TEST2\"\n+      }\n+    ]\n+  }\n+}\n\\ No newline at end of file\n","filename":"bots\/csr\/src\/test\/resources\/test_config.json","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"},{"patch":"@@ -0,0 +1,82 @@\n+package org.openjdk.skara.test;\n+\n+import org.openjdk.skara.bot.BotRunnerConfiguration;\n+import org.openjdk.skara.bot.ConfigurationError;\n+import org.openjdk.skara.forge.Forge;\n+import org.openjdk.skara.host.Credential;\n+import org.openjdk.skara.issuetracker.IssueTracker;\n+import org.openjdk.skara.json.JSONObject;\n+import org.openjdk.skara.network.URIBuilder;\n+\n+import java.net.URI;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class TestBotRunnerConfiguration extends BotRunnerConfiguration {\n+    public TestBotRunnerConfiguration(JSONObject config) throws ConfigurationError {\n+        super(config, parseRepositoryHosts(config), parseIssueHosts(config));\n+    }\n+\n+    static private Map<String, Forge> parseRepositoryHosts(JSONObject config) throws ConfigurationError {\n+        Map<String, Forge> ret = new HashMap<>();\n+\n+        if (!config.contains(\"forges\")) {\n+            return ret;\n+        }\n+        \/\/ Since we don't have the real credential, all the pats are set to null\n+        for (var entry : config.get(\"forges\").fields()) {\n+            if (entry.value().contains(\"gitlab\")) {\n+                var gitlab = entry.value().get(\"gitlab\");\n+                var uri = URIBuilder.base(gitlab.get(\"url\").asString()).build();\n+                Credential pat = null;\n+                ret.put(entry.name(), Forge.from(\"gitlab\", uri, pat, gitlab.asObject()));\n+            } else if (entry.value().contains(\"github\")) {\n+                var github = entry.value().get(\"github\");\n+                \/\/add {\"offline\":true} to the configuration, so that in Forge#repository, it will just create a new repo\n+                \/\/ instead of trying to get repo information from host\n+                github.asObject().put(\"offline\", true);\n+                URI uri;\n+                if (github.contains(\"url\")) {\n+                    uri = URIBuilder.base(github.get(\"url\").asString()).build();\n+                } else {\n+                    uri = URIBuilder.base(\"https:\/\/github.com\/\").build();\n+                }\n+                if (github.contains(\"app\")) {\n+                    Credential pat = null;\n+                    ret.put(entry.name(), Forge.from(\"github\", uri, pat, github.asObject()));\n+                } else if (github.contains(\"username\")) {\n+                    Credential pat = null;\n+                    ret.put(entry.name(), Forge.from(\"github\", uri, pat, github.asObject()));\n+                } else {\n+                    ret.put(entry.name(), Forge.from(\"github\", uri, github.asObject()));\n+                }\n+            } else {\n+                throw new ConfigurationError(\"Host \" + entry.name());\n+            }\n+        }\n+\n+        return ret;\n+    }\n+\n+    static private Map<String, IssueTracker> parseIssueHosts(JSONObject config) throws ConfigurationError {\n+        Map<String, IssueTracker> ret = new HashMap<>();\n+\n+        if (!config.contains(\"issuetrackers\")) {\n+            return ret;\n+        }\n+\n+        for (var entry : config.get(\"issuetrackers\").fields()) {\n+            if (entry.value().contains(\"jira\")) {\n+                var jira = entry.value().get(\"jira\");\n+                var uri = URIBuilder.base(jira.get(\"url\").asString()).build();\n+                \/\/we don't have real credential\n+                Credential credential = null;\n+                ret.put(entry.name(), IssueTracker.from(\"jira\", uri, credential, jira.asObject()));\n+            } else {\n+                throw new ConfigurationError(\"Host \" + entry.name());\n+            }\n+        }\n+\n+        return ret;\n+    }\n+}\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestBotRunnerConfiguration.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"}]}