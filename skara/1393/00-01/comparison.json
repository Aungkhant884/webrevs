{"files":[{"patch":"@@ -4,0 +4,1 @@\n+import org.junit.jupiter.api.TestInfo;\n@@ -6,0 +7,2 @@\n+import org.openjdk.skara.host.Host;\n+import org.openjdk.skara.issuetracker.IssueProject;\n@@ -8,0 +11,1 @@\n+import org.openjdk.skara.vcs.git.GitRepository;\n@@ -14,0 +18,1 @@\n+import java.util.List;\n@@ -19,1 +24,83 @@\n-    CSRBotFactory csrBotFactory = new CSRBotFactory();\n+\/\/    CSRBotFactory csrBotFactory = new CSRBotFactory();\n+\/\/\n+\/\/    @Test\n+\/\/    public void testCreate() throws IOException, ConfigurationError {\n+\/\/        String jsonString = \"\"\"\n+\/\/                {\n+\/\/                  \"forges\": {\n+\/\/                    \"orahub\": {\n+\/\/                      \"gitlab\": {\n+\/\/                        \"url\": \"https:\/\/test.test.com\"\n+\/\/                      }\n+\/\/                    },\n+\/\/                    \"test@github\": {\n+\/\/                      \"github\": {\n+\/\/                        \"app\": {\n+\/\/                        }\n+\/\/                      }\n+\/\/                    }\n+\/\/                  },\n+\/\/                  \"issuetrackers\": {\n+\/\/                    \"test_bugs\": {\n+\/\/                      \"jira\": {\n+\/\/                        \"url\": \"https:\/\/test.test.org\"\n+\/\/                      }\n+\/\/                    }\n+\/\/                  },\n+\/\/                  \"csr\": {\n+\/\/                    \"projects\": [\n+\/\/                      {\n+\/\/                        \"repository\": \"test@github\/openjdk\/jdk1\",\n+\/\/                        \"issues\": \"test_bugs\/TEST\"\n+\/\/                      },\n+\/\/                      {\n+\/\/                        \"repository\": \"test@github\/openjdk\/jdk2\",\n+\/\/                        \"issues\": \"test_bugs\/TEST\"\n+\/\/                      },\n+\/\/                      {\n+\/\/                        \"repository\": \"test@github\/openjdk\/jdk3\",\n+\/\/                        \"issues\": \"test_bugs\/TEST\"\n+\/\/                      },\n+\/\/                      {\n+\/\/                        \"repository\": \"test@github\/openjdk\/jdk4\",\n+\/\/                        \"issues\": \"test_bugs\/TEST\"\n+\/\/                      },\n+\/\/                      {\n+\/\/                        \"repository\": \"test@github\/openjdk\/jdk5\",\n+\/\/                        \"issues\": \"test_bugs\/TEST\"\n+\/\/                      },\n+\/\/                      {\n+\/\/                        \"repository\": \"test@github\/openjdk\/jdk6\",\n+\/\/                        \"issues\": \"test_bugs\/TEST2\"\n+\/\/                      }\n+\/\/                    ]\n+\/\/                  }\n+\/\/                }\n+\/\/                \"\"\";\n+\/\/        var jsonConfig = JWCC.parse(jsonString).asObject();\n+\/\/\n+\/\/        TestBotRunnerConfiguration runnerConfig = new TestBotRunnerConfiguration(jsonConfig);\n+\/\/        BotConfiguration botConfig = runnerConfig.perBotConfiguration(csrBotFactory.name());\n+\/\/        var bots = csrBotFactory.create(botConfig);\n+\/\/        assertEquals(8, bots.size());\n+\/\/\n+\/\/        var csrPullRequestBots = bots.stream().filter(e -> e.getClass().equals(CSRPullRequestBot.class)).collect(Collectors.toList());\n+\/\/        var csrIssueBots = bots.stream().filter(e -> e.getClass().equals(CSRIssueBot.class)).collect(Collectors.toList());\n+\/\/\n+\/\/        \/\/ a CSRPullRequestBot for every configured repository\n+\/\/        assertEquals(6, csrPullRequestBots.size());\n+\/\/        \/\/ a CSRIssueBot for each unique IssueProject\n+\/\/        assertEquals(2, csrIssueBots.size());\n+\/\/\n+\/\/        for (var bot : csrIssueBots) {\n+\/\/            CSRIssueBot csrIssueBot = (CSRIssueBot) bot;\n+\/\/            if (csrIssueBot.toString().equals(\"CSRIssueBot@TEST\")) {\n+\/\/                assertEquals(5, csrIssueBot.repositories().size());\n+\/\/            } else if (csrIssueBot.toString().equals(\"CSRIssueBot@TEST2\")) {\n+\/\/                assertEquals(1, csrIssueBot.repositories().size());\n+\/\/            } else {\n+\/\/                throw new RuntimeException(\"This issue bot is not expected\");\n+\/\/            }\n+\/\/        }\n+\/\/\n+\/\/    }\n@@ -23,2 +110,0 @@\n-        Path jsonFile = Paths.get(\"src\", \"test\", \"resources\", \"test_config.json\");\n-        var jsonConfig = JWCC.parse(Files.readString(jsonFile, StandardCharsets.UTF_8)).asObject();\n@@ -26,3 +111,46 @@\n-        TestBotRunnerConfiguration runnerConfig = new TestBotRunnerConfiguration(jsonConfig);\n-        BotConfiguration botConfig = runnerConfig.perBotConfiguration(csrBotFactory.name());\n-        var bots = csrBotFactory.create(botConfig);\n+\n+        String jsonString = \"\"\"\n+                 {\n+                   \"projects\": [\n+                     {\n+                       \"repository\": \"test@github\/openjdk\/jdk1\",\n+                       \"issues\": \"test_bugs\/TEST\"\n+                     },\n+                     {\n+                       \"repository\": \"test@github\/openjdk\/jdk2\",\n+                       \"issues\": \"test_bugs\/TEST\"\n+                     },\n+                     {\n+                       \"repository\": \"test@github\/openjdk\/jdk3\",\n+                       \"issues\": \"test_bugs\/TEST\"\n+                     },\n+                     {\n+                       \"repository\": \"test@github\/openjdk\/jdk4\",\n+                       \"issues\": \"test_bugs\/TEST\"\n+                     },\n+                     {\n+                       \"repository\": \"test@github\/openjdk\/jdk5\",\n+                       \"issues\": \"test_bugs\/TEST\"\n+                     },\n+                     {\n+                       \"repository\": \"test@github\/openjdk\/jdk6\",\n+                       \"issues\": \"test_bugs\/TEST2\"\n+                     }\n+                   ]\n+                 }\n+                \"\"\";\n+        var jsonConfig = JWCC.parse(jsonString).asObject();\n+\n+        var host = TestHost.createNew(List.of());\n+        var localRepo = new GitRepository(Paths.get(\"\"));\n+        var testBotFactory = TestBotFactory.newBuilder().addHostedRepository(\"test@github\/openjdk\/jdk1\", new TestHostedRepository(host, \"openjdk\/jdk1\", localRepo))\n+                .addHostedRepository(\"test@github\/openjdk\/jdk2\", new TestHostedRepository(host, \"openjdk\/jdk2\", localRepo))\n+                .addHostedRepository(\"test@github\/openjdk\/jdk3\", new TestHostedRepository(host, \"openjdk\/jdk3\", localRepo))\n+                .addHostedRepository(\"test@github\/openjdk\/jdk4\", new TestHostedRepository(host, \"openjdk\/jdk4\", localRepo))\n+                .addHostedRepository(\"test@github\/openjdk\/jdk5\", new TestHostedRepository(host, \"openjdk\/jdk5\", localRepo))\n+                .addHostedRepository(\"test@github\/openjdk\/jdk6\", new TestHostedRepository(host, \"openjdk\/jdk6\", localRepo))\n+                .addIssueProject(\"test_bugs\/TEST\", new TestIssueProject(null, \"TEST\"))\n+                .addIssueProject(\"test_bugs\/TEST2\", new TestIssueProject(null, \"TEST2\"))\n+                .build();\n+\n+        var bots = testBotFactory.createBots(\"csr\", jsonConfig);\n@@ -49,1 +177,0 @@\n-\n","filename":"bots\/csr\/src\/test\/java\/org\/openjdk\/skara\/bots\/csr\/CSRBotFactoryTest.java","additions":134,"deletions":7,"binary":false,"changes":141,"status":"modified"},{"patch":"@@ -1,50 +0,0 @@\n-{\n-  \"forges\": {\n-    \"orahub\": {\n-      \"gitlab\": {\n-        \"url\": \"https:\/\/test.test.com\"\n-      }\n-    },\n-    \"test@github\": {\n-      \"github\": {\n-        \"app\": {\n-        }\n-      }\n-    }\n-  },\n-  \"issuetrackers\": {\n-    \"test_bugs\": {\n-      \"jira\": {\n-        \"url\": \"https:\/\/test.test.org\"\n-      }\n-    }\n-  },\n-  \"csr\": {\n-    \"projects\": [\n-      {\n-        \"repository\": \"test@github\/openjdk\/jdk1\",\n-        \"issues\": \"test_bugs\/TEST\"\n-      },\n-      {\n-        \"repository\": \"test@github\/openjdk\/jdk2\",\n-        \"issues\": \"test_bugs\/TEST\"\n-      },\n-      {\n-        \"repository\": \"test@github\/openjdk\/jdk3\",\n-        \"issues\": \"test_bugs\/TEST\"\n-      },\n-      {\n-        \"repository\": \"test@github\/openjdk\/jdk4\",\n-        \"issues\": \"test_bugs\/TEST\"\n-      },\n-      {\n-        \"repository\": \"test@github\/openjdk\/jdk5\",\n-        \"issues\": \"test_bugs\/TEST\"\n-      },\n-      {\n-        \"repository\": \"test@github\/openjdk\/jdk6\",\n-        \"issues\": \"test_bugs\/TEST2\"\n-      }\n-    ]\n-  }\n-}\n\\ No newline at end of file\n","filename":"bots\/csr\/src\/test\/resources\/test_config.json","additions":0,"deletions":50,"binary":false,"changes":50,"status":"deleted"},{"patch":"@@ -159,0 +159,71 @@\n+\n+    public List<Bot> createBots(String name, JSONObject configuration) {\n+        var finalConfiguration = JSON.object();\n+        for (var defaultField : defaultConfiguration.fields()) {\n+            finalConfiguration.put(defaultField.name(), defaultField.value());\n+        }\n+        for (var field : configuration.fields()) {\n+            finalConfiguration.put(field.name(), field.value());\n+        }\n+\n+        var botConfiguration = new BotConfiguration() {\n+            @Override\n+            public Path storageFolder() {\n+                return storagePath;\n+            }\n+\n+            @Override\n+            public HostedRepository repository(String name) {\n+                var repoName = name.split(\":\")[0];\n+                if (!hostedRepositories.containsKey(repoName)) {\n+                    throw new RuntimeException(\"Unknown repository: \" + repoName);\n+                }\n+                return hostedRepositories.get(repoName);\n+            }\n+\n+            @Override\n+            public IssueProject issueProject(String name) {\n+                if (!issueProjects.containsKey(name)) {\n+                    throw new RuntimeException(\"Unknown issue project: \" + name);\n+                }\n+                return issueProjects.get(name);\n+            }\n+\n+            @Override\n+            public ContinuousIntegration continuousIntegration(String name) {\n+                throw new RuntimeException(\"not implemented yet\");\n+            }\n+\n+            @Override\n+            public String repositoryRef(String name) {\n+                return name.split(\":\")[1];\n+            }\n+\n+            @Override\n+            public String repositoryName(String name) {\n+                var refIndex = name.indexOf(':');\n+                if (refIndex >= 0) {\n+                    name = name.substring(0, refIndex);\n+                }\n+                var orgIndex = name.lastIndexOf('\/');\n+                if (orgIndex >= 0) {\n+                    name = name.substring(orgIndex + 1);\n+                }\n+                return name;\n+            }\n+\n+            @Override\n+            public JSONObject specific() {\n+                return finalConfiguration;\n+            }\n+        };\n+\n+        var factories = BotFactory.getBotFactories();\n+        for (var factory : factories) {\n+            if (factory.name().equals(name)) {\n+                var bots = factory.create(botConfiguration);\n+                return bots;\n+            }\n+        }\n+        throw new RuntimeException(\"Failed to find bot factory with name: \" + name);\n+    }\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestBotFactory.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"modified"}]}