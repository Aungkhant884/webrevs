{"files":[{"patch":"@@ -160,0 +160,4 @@\n+\n+    public Type getType() {\n+        return type;\n+    }\n","filename":"bots\/bridgekeeper\/src\/main\/java\/org\/openjdk\/skara\/bots\/bridgekeeper\/PullRequestCloserBot.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -184,0 +184,4 @@\n+\n+    public Map<HostedRepository, Duration> getMaxAges() {\n+        return maxAges;\n+    }\n","filename":"bots\/bridgekeeper\/src\/main\/java\/org\/openjdk\/skara\/bots\/bridgekeeper\/PullRequestPrunerBot.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,94 @@\n+package org.openjdk.skara.bots.bridgekeeper;\n+\n+import org.junit.jupiter.api.Test;\n+import org.openjdk.skara.json.JWCC;\n+import org.openjdk.skara.test.TestBotFactory;\n+import org.openjdk.skara.test.TestHostedRepository;\n+\n+import java.time.Duration;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class BridgekeeperBotFactoryTest {\n+    @Test\n+    public void testCreate() {\n+        String jsonString = \"\"\"\n+                {\n+                  \"mirrors\": [\n+                    \"mirror1\",\n+                    \"mirror2\",\n+                    \"mirror3\"\n+                  ],\n+                  \"data\": [\n+                    \"data1\",\n+                    \"data2\",\n+                    \"data3\"\n+                  ],\n+                  \"pruned\": {\n+                    \"pruned1\": {\n+                      \"maxage\": \"P1D\"\n+                    },\n+                    \"pruned2\": {\n+                      \"maxage\": \"PT48H\"\n+                    },\n+                    \"pruned3\": {\n+                      \"maxage\": \"PT4320M\"\n+                    }\n+                  }\n+                }\n+                \"\"\";\n+        var jsonConfig = JWCC.parse(jsonString).asObject();\n+\n+        var pruned1 = new TestHostedRepository(\"pruned1\");\n+        var pruned2 = new TestHostedRepository(\"pruned2\");\n+        var pruned3 = new TestHostedRepository(\"pruned3\");\n+        var testBotFactory = TestBotFactory.newBuilder()\n+                .addHostedRepository(\"mirror1\", new TestHostedRepository(\"mirror1\"))\n+                .addHostedRepository(\"mirror2\", new TestHostedRepository(\"mirror2\"))\n+                .addHostedRepository(\"mirror3\", new TestHostedRepository(\"mirror3\"))\n+                .addHostedRepository(\"data1\", new TestHostedRepository(\"data1\"))\n+                .addHostedRepository(\"data2\", new TestHostedRepository(\"data2\"))\n+                .addHostedRepository(\"data3\", new TestHostedRepository(\"data3\"))\n+                .addHostedRepository(\"pruned1\", pruned1)\n+                .addHostedRepository(\"pruned2\", pruned2)\n+                .addHostedRepository(\"pruned3\", pruned3)\n+                .build();\n+\n+        var bots = testBotFactory.createBots(BridgekeeperBotFactory.NAME, jsonConfig);\n+        assertEquals(7, bots.size());\n+\n+        var mirrorPullRequestCloserBots = bots.stream()\n+                .filter(e -> e.getClass().equals(PullRequestCloserBot.class))\n+                .filter(e -> ((PullRequestCloserBot) e).getType().equals(PullRequestCloserBot.Type.MIRROR))\n+                .toList();\n+        var dataPullRequestCloserBots = bots.stream()\n+                .filter(e -> e.getClass().equals(PullRequestCloserBot.class))\n+                .filter(e -> ((PullRequestCloserBot) e).getType().equals(PullRequestCloserBot.Type.DATA))\n+                .toList();\n+        var pullRequestPrunerBots = bots.stream()\n+                .filter(e -> e.getClass().equals(PullRequestPrunerBot.class))\n+                .toList();\n+\n+        \/\/ A mirror pullRequestCloserBot for every configured mirror repository\n+        assertEquals(3, mirrorPullRequestCloserBots.size());\n+        \/\/ A data pullRequestCloserBot for every configured data repository\n+        assertEquals(3, dataPullRequestCloserBots.size());\n+        \/\/ One pullRequestPrunerBot for all configured pruned repository\n+        assertEquals(1, pullRequestPrunerBots.size());\n+\n+        \/\/ Check whether each bot is combined with the correct repo\n+        assertEquals(\"PullRequestCloserBot@mirror1\", mirrorPullRequestCloserBots.get(0).toString());\n+        assertEquals(\"PullRequestCloserBot@mirror2\", mirrorPullRequestCloserBots.get(1).toString());\n+        assertEquals(\"PullRequestCloserBot@mirror3\", mirrorPullRequestCloserBots.get(2).toString());\n+        assertEquals(\"PullRequestCloserBot@data1\", dataPullRequestCloserBots.get(0).toString());\n+        assertEquals(\"PullRequestCloserBot@data2\", dataPullRequestCloserBots.get(1).toString());\n+        assertEquals(\"PullRequestCloserBot@data3\", dataPullRequestCloserBots.get(2).toString());\n+\n+        var pullRequestPrunerBot = (PullRequestPrunerBot) pullRequestPrunerBots.get(0);\n+        assertEquals(\"PullRequestPrunerBot\", pullRequestPrunerBot.toString());\n+        var maxAges = pullRequestPrunerBot.getMaxAges();\n+        assertEquals(Duration.ofDays(1), maxAges.get(pruned1));\n+        assertEquals(Duration.ofDays(2), maxAges.get(pruned2));\n+        assertEquals(Duration.ofDays(3), maxAges.get(pruned3));\n+    }\n+}\n\\ No newline at end of file\n","filename":"bots\/bridgekeeper\/src\/test\/java\/org\/openjdk\/skara\/bots\/bridgekeeper\/BridgekeeperBotFactoryTest.java","additions":94,"deletions":0,"binary":false,"changes":94,"status":"added"},{"patch":"@@ -0,0 +1,51 @@\n+package org.openjdk.skara.bots.censussync;\n+\n+import org.junit.jupiter.api.Test;\n+import org.openjdk.skara.json.JWCC;\n+import org.openjdk.skara.test.TestBotFactory;\n+import org.openjdk.skara.test.TestHostedRepository;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class CensusSyncBotFactoryTest {\n+    @Test\n+    void testCreate() {\n+        String jsonString = \"\"\"\n+                {\n+                    \"sync\": [\n+                      {\n+                        \"method\": \"unify\",\n+                        \"from\": \"from1\",\n+                        \"to\": \"to1\",\n+                        \"version\": 1\n+                      },\n+                      {\n+                        \"method\": \"split\",\n+                        \"from\": \"https:\/\/test.org\/test.xml\",\n+                        \"to\": \"to2\",\n+                        \"version\": 2\n+                      }\n+                    ]\n+                }\n+                \"\"\";\n+        var jsonConfig = JWCC.parse(jsonString).asObject();\n+\n+        var testBotFactory = TestBotFactory.newBuilder()\n+                .addHostedRepository(\"from1\", new TestHostedRepository(\"from1\"))\n+                .addHostedRepository(\"to1\", new TestHostedRepository(\"to1\"))\n+                .addHostedRepository(\"to2\", new TestHostedRepository(\"to2\"))\n+                .build();\n+\n+        var bots = testBotFactory.createBots(CensusSyncBotFactory.NAME, jsonConfig);\n+        assertEquals(2, bots.size());\n+\n+        var censusSyncUnifyBots = bots.stream().filter(e -> e.getClass().equals(CensusSyncUnifyBot.class)).toList();\n+        var censusSyncSplitBots = bots.stream().filter(e -> e.getClass().equals(CensusSyncSplitBot.class)).toList();\n+\n+        assertEquals(1, censusSyncUnifyBots.size());\n+        assertEquals(1, censusSyncSplitBots.size());\n+\n+        assertEquals(\"CensusSyncUnifyBot(from1->to1@1)\", censusSyncUnifyBots.get(0).toString());\n+        assertEquals(\"CensusSyncSplitBot(https:\/\/test.org\/test.xml->to2@2)\", censusSyncSplitBots.get(0).toString());\n+    }\n+}\n\\ No newline at end of file\n","filename":"bots\/censussync\/src\/test\/java\/org\/openjdk\/skara\/bots\/censussync\/CensusSyncBotFactoryTest.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"},{"patch":"@@ -0,0 +1,52 @@\n+package org.openjdk.skara.bots.checkout;\n+\n+import org.junit.jupiter.api.Test;\n+import org.openjdk.skara.json.JWCC;\n+import org.openjdk.skara.test.TestBotFactory;\n+import org.openjdk.skara.test.TestHostedRepository;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class CheckoutBotFactoryTest {\n+    @Test\n+    public void testCreate() {\n+        String jsonString = \"\"\"\n+                {\n+                  \"marks\": {\n+                    \"repo\": \"mark\",\n+                    \"author\": \"test_author <test_author@test.com>\"\n+                  },\n+                  \"repositories\": [\n+                    {\n+                      \"from\": {\n+                        \"repo\": \"from1\",\n+                        \"branch\": \"master\"\n+                      },\n+                      \"to\": \"to1\"\n+                    },\n+                    {\n+                      \"from\": {\n+                        \"repo\": \"from2\",\n+                        \"branch\": \"dev\"\n+                      },\n+                      \"to\": \"to2\"\n+                    }\n+                  ]\n+                }\n+                \"\"\";\n+        var jsonConfig = JWCC.parse(jsonString).asObject();\n+\n+        var testBotFactory = TestBotFactory.newBuilder()\n+                .addHostedRepository(\"mark\", new TestHostedRepository(\"mark\"))\n+                .addHostedRepository(\"from1\", new TestHostedRepository(\"from1\"))\n+                .addHostedRepository(\"from2\", new TestHostedRepository(\"from2\"))\n+                .build();\n+\n+        var bots = testBotFactory.createBots(CheckoutBotFactory.NAME, jsonConfig);\n+        \/\/ A checkoutBot for every configured repository\n+        assertEquals(2, bots.size());\n+\n+        assertEquals(\"CheckoutBot(from1:master, to1)\", bots.get(0).toString());\n+        assertEquals(\"CheckoutBot(from2:dev, to2)\", bots.get(1).toString());\n+    }\n+}\n\\ No newline at end of file\n","filename":"bots\/checkout\/src\/test\/java\/org\/openjdk\/skara\/bots\/checkout\/CheckoutBotFactoryTest.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"},{"patch":"@@ -94,0 +94,4 @@\n+\n+    public IssueProject getProject() {\n+        return project;\n+    }\n","filename":"bots\/csr\/src\/main\/java\/org\/openjdk\/skara\/bots\/csr\/CSRPullRequestBot.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,72 @@\n+package org.openjdk.skara.bots.csr;\n+\n+import org.junit.jupiter.api.Test;\n+import org.openjdk.skara.json.*;\n+import org.openjdk.skara.test.*;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class CSRBotFactoryTest {\n+    @Test\n+    public void testCreate() {\n+        String jsonString = \"\"\"\n+                 {\n+                   \"projects\": [\n+                     {\n+                       \"repository\": \"repo1\",\n+                       \"issues\": \"test_bugs\/TEST\"\n+                     },\n+                     {\n+                       \"repository\": \"repo2\",\n+                       \"issues\": \"test_bugs\/TEST\"\n+                     },\n+                     {\n+                       \"repository\": \"repo3\",\n+                       \"issues\": \"test_bugs\/TEST2\"\n+                     }\n+                   ]\n+                 }\n+                \"\"\";\n+        var jsonConfig = JWCC.parse(jsonString).asObject();\n+\n+        var testBotFactory = TestBotFactory.newBuilder()\n+                .addHostedRepository(\"repo1\", new TestHostedRepository(\"repo1\"))\n+                .addHostedRepository(\"repo2\", new TestHostedRepository(\"repo2\"))\n+                .addHostedRepository(\"repo3\", new TestHostedRepository(\"repo3\"))\n+                .addIssueProject(\"test_bugs\/TEST\", new TestIssueProject(null, \"TEST\"))\n+                .addIssueProject(\"test_bugs\/TEST2\", new TestIssueProject(null, \"TEST2\"))\n+                .build();\n+\n+        var bots = testBotFactory.createBots(CSRBotFactory.NAME, jsonConfig);\n+        assertEquals(5, bots.size());\n+\n+        var csrPullRequestBots = bots.stream().filter(e -> e.getClass().equals(CSRPullRequestBot.class)).toList();\n+        var csrIssueBots = bots.stream().filter(e -> e.getClass().equals(CSRIssueBot.class)).toList();\n+\n+        \/\/ A CSRPullRequestBot for every configured repository\n+        assertEquals(3, csrPullRequestBots.size());\n+        \/\/ A CSRIssueBot for each unique IssueProject\n+        assertEquals(2, csrIssueBots.size());\n+\n+        var CSRPullRequestBot1 = (CSRPullRequestBot) csrPullRequestBots.get(0);\n+        var CSRPullRequestBot2 = (CSRPullRequestBot) csrPullRequestBots.get(1);\n+        var CSRPullRequestBot3 = (CSRPullRequestBot) csrPullRequestBots.get(2);\n+        assertEquals(\"CSRPullRequestBot@repo1\", CSRPullRequestBot1.toString());\n+        assertEquals(\"CSRPullRequestBot@repo2\", CSRPullRequestBot2.toString());\n+        assertEquals(\"CSRPullRequestBot@repo3\", CSRPullRequestBot3.toString());\n+        assertEquals(\"TEST\", CSRPullRequestBot1.getProject().name());\n+        assertEquals(\"TEST\", CSRPullRequestBot2.getProject().name());\n+        assertEquals(\"TEST2\", CSRPullRequestBot3.getProject().name());\n+\n+        for (var bot : csrIssueBots) {\n+            CSRIssueBot csrIssueBot = (CSRIssueBot) bot;\n+            if (csrIssueBot.toString().equals(\"CSRIssueBot@TEST\")) {\n+                assertEquals(2, csrIssueBot.repositories().size());\n+            } else if (csrIssueBot.toString().equals(\"CSRIssueBot@TEST2\")) {\n+                assertEquals(1, csrIssueBot.repositories().size());\n+            } else {\n+                throw new RuntimeException(\"This CSRIssueBot is not expected\");\n+            }\n+        }\n+    }\n+}\n","filename":"bots\/csr\/src\/test\/java\/org\/openjdk\/skara\/bots\/csr\/CSRBotFactoryTest.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"},{"patch":"@@ -98,1 +98,1 @@\n-        return \"FowardBot@(\" + fromHostedRepo.name() + \":\" + fromBranch.name() +\n+        return \"ForwardBot@(\" + fromHostedRepo.name() + \":\" + fromBranch.name() +\n","filename":"bots\/forward\/src\/main\/java\/org\/openjdk\/skara\/bots\/forward\/ForwardBot.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,51 @@\n+package org.openjdk.skara.bots.forward;\n+\n+import org.junit.jupiter.api.Test;\n+import org.openjdk.skara.json.JWCC;\n+import org.openjdk.skara.test.TemporaryDirectory;\n+import org.openjdk.skara.test.TestBotFactory;\n+import org.openjdk.skara.test.TestHostedRepository;\n+\n+import java.util.Comparator;\n+import java.util.Objects;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class ForwardBotFactoryTest {\n+    @Test\n+    public void testCreate() {\n+        try (var tempFolder = new TemporaryDirectory()) {\n+            String jsonString = \"\"\"\n+                    {\n+                      \"repositories\": {\n+                        \"repo1\": {\n+                          \"from\": \"from1:master\",\n+                          \"to\": \"to1:master\"\n+                        },\n+                        \"repo2\": {\n+                          \"from\": \"from2:dev\",\n+                          \"to\": \"to2:test\"\n+                        }\n+                      }\n+                    }\n+                    \"\"\";\n+            var jsonConfig = JWCC.parse(jsonString).asObject();\n+\n+            var testBotFactory = TestBotFactory.newBuilder()\n+                    .addHostedRepository(\"from1\", new TestHostedRepository(\"from1\"))\n+                    .addHostedRepository(\"from2\", new TestHostedRepository(\"from2\"))\n+                    .addHostedRepository(\"to1\", new TestHostedRepository(\"to1\"))\n+                    .addHostedRepository(\"to2\", new TestHostedRepository(\"to2\"))\n+                    .storagePath(tempFolder.path().resolve(\"storage\"))\n+                    .build();\n+\n+            var bots = testBotFactory.createBots(ForwardBotFactory.NAME, jsonConfig);\n+            bots = bots.stream().sorted(Comparator.comparing(Objects::toString)).toList();\n+            \/\/A forwardBot for every configured repo\n+            assertEquals(2, bots.size());\n+\n+            assertEquals(\"ForwardBot@(from1:master-> to1:master)\", bots.get(0).toString());\n+            assertEquals(\"ForwardBot@(from2:dev-> to2:test)\", bots.get(1).toString());\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"bots\/forward\/src\/test\/java\/org\/openjdk\/skara\/bots\/forward\/ForwardBotFactoryTest.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"},{"patch":"@@ -194,0 +194,24 @@\n+\n+    public String getConfigurationRef() {\n+        return configurationRef;\n+    }\n+\n+    public List<String> getReplacementsFile() {\n+        return replacementsFile;\n+    }\n+\n+    public List<String> getCorrectionsFile() {\n+        return correctionsFile;\n+    }\n+\n+    public List<String> getAuthorsFile() {\n+        return authorsFile;\n+    }\n+\n+    public List<String> getContributorsFile() {\n+        return contributorsFile;\n+    }\n+\n+    public List<String> getSponsorsFile() {\n+        return sponsorsFile;\n+    }\n","filename":"bots\/hgbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/hgbridge\/ExporterConfig.java","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -162,0 +162,4 @@\n+\n+    public ExporterConfig getExporterConfig() {\n+        return exporterConfig;\n+    }\n","filename":"bots\/hgbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/hgbridge\/JBridgeBot.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,103 @@\n+package org.openjdk.skara.bots.hgbridge;\n+\n+import org.junit.jupiter.api.Test;\n+import org.openjdk.skara.json.JWCC;\n+import org.openjdk.skara.test.TemporaryDirectory;\n+import org.openjdk.skara.test.TestBotFactory;\n+import org.openjdk.skara.test.TestHostedRepository;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class JBridgeBotFactoryTest {\n+    @Test\n+    public void testCreate() {\n+        try (var tempFolder = new TemporaryDirectory()) {\n+            String jsonString = \"\"\"\n+                    {\n+                      \"marks\": {\n+                        \"repository\": \"marks\",\n+                        \"ref\": \"master\",\n+                        \"name\": \"test\",\n+                        \"email\": \"test@test.org\"\n+                      },\n+                      \"converters\": [\n+                        {\n+                          \"repository\": \"converter\",\n+                          \"ref\": \"master\",\n+                          \"authors\": \"test_authors.json\",\n+                          \"contributors\": \"test_contributors.json\",\n+                          \"sponsors\": \"test_sponsors.json\",\n+                          \"corrections\": \"test_corrections.json\",\n+                          \"replacements\": \"test_replacements.json\",\n+                          \"repositories\": [\n+                            {\n+                              \"source\": \"https:\/\/test.org\/source1\",\n+                              \"destinations\": \"https:\/\/test.org\/des1\",\n+                              \"replacements\": \"test_replacements_for_repo1.json\",\n+                              \"corrections\": \"test_corrections_for_repo1.json\"\n+                            },\n+                            {\n+                              \"source\": \"https:\/\/test.org\/source2\",\n+                              \"destinations\": \"https:\/\/test.org\/des2\",\n+                              \"sponsors\": \"test_sponsors_for_repo2.json\",\n+                              \"authors\": \"test_authors_for_repo2.json\",\n+                              \"replacements\": \"test_replacements_for_repo2.json\",\n+                            }\n+                          ]\n+                        }\n+                      ]\n+                    }\n+                    \"\"\";\n+            var jsonConfig = JWCC.parse(jsonString).asObject();\n+\n+            var testBotFactory = TestBotFactory.newBuilder()\n+                    .addHostedRepository(\"marks\", new TestHostedRepository(\"marks\"))\n+                    .addHostedRepository(\"converter\", new TestHostedRepository(\"converter\"))\n+                    .addHostedRepository(\"https:\/\/test.org\/des1\", new TestHostedRepository(\"des1\"))\n+                    .addHostedRepository(\"https:\/\/test.org\/des2\", new TestHostedRepository(\"des2\"))\n+                    .storagePath(tempFolder.path().resolve(\"storage\"))\n+                    .build();\n+\n+            var bots = testBotFactory.createBots(JBridgeBotFactory.NAME, jsonConfig);\n+            \/\/ A JBridgeBot for every configured repo\n+            assertEquals(2, bots.size());\n+\n+            JBridgeBot jBridgeBot1 = (JBridgeBot) bots.get(0);\n+            assertEquals(\"JBridgeBot@https:\/\/test.org\/source1\", jBridgeBot1.toString());\n+            var exporterConfig1 = jBridgeBot1.getExporterConfig();\n+            assertEquals(\"marks\", exporterConfig1.marksRepo().name());\n+            assertEquals(\"master\", exporterConfig1.marksRef());\n+            assertEquals(\"test@test.org\", exporterConfig1.marksAuthorEmail());\n+            assertEquals(\"test\", exporterConfig1.marksAuthorName());\n+            assertEquals(\"des1\", exporterConfig1.destinations().get(0).name());\n+            assertEquals(\"https:\/\/test.org\/source1\", exporterConfig1.source().toString());\n+            assertEquals(\"master\", exporterConfig1.getConfigurationRef());\n+            assertEquals(\"test_authors.json\", exporterConfig1.getAuthorsFile().get(0));\n+            assertEquals(\"test_contributors.json\", exporterConfig1.getContributorsFile().get(0));\n+            assertEquals(\"test_sponsors.json\", exporterConfig1.getSponsorsFile().get(0));\n+            assertEquals(\"test_corrections.json\", exporterConfig1.getCorrectionsFile().get(0));\n+            assertEquals(\"test_corrections_for_repo1.json\", exporterConfig1.getCorrectionsFile().get(1));\n+            assertEquals(\"test_replacements.json\", exporterConfig1.getReplacementsFile().get(0));\n+            assertEquals(\"test_replacements_for_repo1.json\", exporterConfig1.getReplacementsFile().get(1));\n+\n+            JBridgeBot jBridgeBot2 = (JBridgeBot) bots.get(1);\n+            assertEquals(\"JBridgeBot@https:\/\/test.org\/source2\", jBridgeBot2.toString());\n+            var exporterConfig2 = jBridgeBot2.getExporterConfig();\n+            assertEquals(\"marks\", exporterConfig2.marksRepo().name());\n+            assertEquals(\"master\", exporterConfig2.marksRef());\n+            assertEquals(\"test@test.org\", exporterConfig2.marksAuthorEmail());\n+            assertEquals(\"test\", exporterConfig2.marksAuthorName());\n+            assertEquals(\"des2\", exporterConfig2.destinations().get(0).name());\n+            assertEquals(\"https:\/\/test.org\/source2\", exporterConfig2.source().toString());\n+            assertEquals(\"master\", exporterConfig2.getConfigurationRef());\n+            assertEquals(\"test_authors.json\", exporterConfig2.getAuthorsFile().get(0));\n+            assertEquals(\"test_authors_for_repo2.json\", exporterConfig2.getAuthorsFile().get(1));\n+            assertEquals(\"test_contributors.json\", exporterConfig2.getContributorsFile().get(0));\n+            assertEquals(\"test_sponsors.json\", exporterConfig2.getSponsorsFile().get(0));\n+            assertEquals(\"test_sponsors_for_repo2.json\", exporterConfig2.getSponsorsFile().get(1));\n+            assertEquals(\"test_corrections.json\", exporterConfig2.getCorrectionsFile().get(0));\n+            assertEquals(\"test_replacements.json\", exporterConfig2.getReplacementsFile().get(0));\n+            assertEquals(\"test_replacements_for_repo2.json\", exporterConfig2.getReplacementsFile().get(1));\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"bots\/hgbridge\/src\/test\/java\/org\/openjdk\/skara\/bots\/hgbridge\/JBridgeBotFactoryTest.java","additions":103,"deletions":0,"binary":false,"changes":103,"status":"added"},{"patch":"@@ -155,0 +155,4 @@\n+\n+    public IssueProject getIssueProject() {\n+        return issueProject;\n+    }\n","filename":"bots\/jep\/src\/main\/java\/org\/openjdk\/skara\/bots\/jep\/JEPBot.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,48 @@\n+package org.openjdk.skara.bots.jep;\n+\n+import org.junit.jupiter.api.Test;\n+import org.openjdk.skara.json.JWCC;\n+import org.openjdk.skara.test.TestBotFactory;\n+import org.openjdk.skara.test.TestHostedRepository;\n+import org.openjdk.skara.test.TestIssueProject;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class JEPBotFactoryTest {\n+    @Test\n+    public void testCreate() {\n+        String jsonString = \"\"\"\n+                {\n+                  \"projects\": [\n+                    {\n+                      \"repository\": \"repo1\",\n+                      \"issues\": \"test_bugs\/TEST\"\n+                    },\n+                    {\n+                      \"repository\": \"repo2\",\n+                      \"issues\": \"test_bugs\/TEST\"\n+                    }\n+                  ]\n+                }\n+                \"\"\";\n+        var jsonConfig = JWCC.parse(jsonString).asObject();\n+\n+        var testBotFactory = TestBotFactory.newBuilder()\n+                .addHostedRepository(\"repo1\", new TestHostedRepository(\"repo1\"))\n+                .addHostedRepository(\"repo2\", new TestHostedRepository(\"repo2\"))\n+                .addIssueProject(\"test_bugs\/TEST\", new TestIssueProject(null, \"TEST\"))\n+                .build();\n+\n+        var bots = testBotFactory.createBots(JEPBotFactory.NAME, jsonConfig);\n+        \/\/ A JEPBot for every configured project\n+        assertEquals(2, bots.size());\n+\n+        JEPBot jepBot1 = (JEPBot) bots.get(0);\n+        assertEquals(\"JEPBot@repo1\", jepBot1.toString());\n+        assertEquals(\"TEST\", jepBot1.getIssueProject().name());\n+\n+        JEPBot jepBot2 = (JEPBot) bots.get(1);\n+        assertEquals(\"JEPBot@repo2\", jepBot2.toString());\n+        assertEquals(\"TEST\", jepBot2.getIssueProject().name());\n+    }\n+}\n\\ No newline at end of file\n","filename":"bots\/jep\/src\/test\/java\/org\/openjdk\/skara\/bots\/jep\/JEPBotFactoryTest.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"},{"patch":"@@ -625,0 +625,4 @@\n+\n+    public List<Spec> getSpecs() {\n+        return specs;\n+    }\n","filename":"bots\/merge\/src\/main\/java\/org\/openjdk\/skara\/bots\/merge\/MergeBot.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,136 @@\n+package org.openjdk.skara.bots.merge;\n+\n+import org.junit.jupiter.api.Test;\n+import org.openjdk.skara.json.JWCC;\n+import org.openjdk.skara.test.TemporaryDirectory;\n+import org.openjdk.skara.test.TestBotFactory;\n+import org.openjdk.skara.test.TestHostedRepository;\n+\n+import java.time.DayOfWeek;\n+import java.time.Month;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class MergeBotFactoryTest {\n+    @Test\n+    public void testCreate() {\n+        try (var tempFolder = new TemporaryDirectory()) {\n+            String jsonString = \"\"\"\n+                    {\n+                      \"repositories\": [\n+                        {\n+                          \"target\": \"target\",\n+                          \"fork\": \"fork\",\n+                          \"spec\": [\n+                            {\n+                              \"from\": \"from1:master\",\n+                              \"to\": \"master\",\n+                              \"frequency\": {\n+                                \"interval\": \"weekly\",\n+                                \"weekday\": \"monday\",\n+                                \"hour\": 3\n+                              }\n+                            },\n+                            {\n+                              \"name\": \"spec2\",\n+                              \"from\": \"from2:master\",\n+                              \"to\": \"test\"\n+                            },\n+                            {\n+                              \"from\": \"from3:master\",\n+                              \"to\": \"master\",\n+                              \"frequency\": {\n+                                \"interval\": \"hourly\",\n+                                \"minute\": 30\n+                              }\n+                            },\n+                            {\n+                              \"from\": \"from4:master\",\n+                              \"to\": \"master\",\n+                              \"frequency\": {\n+                                \"interval\": \"daily\",\n+                                \"hour\": 2\n+                              }\n+                            },\n+                            {\n+                              \"from\": \"from5:master\",\n+                              \"to\": \"master\",\n+                              \"frequency\": {\n+                                \"interval\": \"monthly\",\n+                                \"day\": 1,\n+                                \"hour\": 2\n+                              }\n+                            },\n+                            {\n+                              \"from\": \"from6:master\",\n+                              \"to\": \"master\",\n+                              \"frequency\": {\n+                                \"interval\": \"yearly\",\n+                                \"month\": \"october\",\n+                                \"day\": 15,\n+                                \"hour\": 5\n+                              }\n+                            }\n+                          ]\n+                        }\n+                      ]\n+                    }\n+                    \"\"\";\n+            var jsonConfig = JWCC.parse(jsonString).asObject();\n+\n+            var testBotFactory = TestBotFactory.newBuilder()\n+                    .addHostedRepository(\"target\", new TestHostedRepository(\"target\"))\n+                    .addHostedRepository(\"fork\", new TestHostedRepository(\"fork\"))\n+                    .addHostedRepository(\"from1\", new TestHostedRepository(\"from1\"))\n+                    .addHostedRepository(\"from2\", new TestHostedRepository(\"from2\"))\n+                    .addHostedRepository(\"from3\", new TestHostedRepository(\"from3\"))\n+                    .addHostedRepository(\"from4\", new TestHostedRepository(\"from4\"))\n+                    .addHostedRepository(\"from5\", new TestHostedRepository(\"from5\"))\n+                    .addHostedRepository(\"from6\", new TestHostedRepository(\"from6\"))\n+                    .storagePath(tempFolder.path().resolve(\"storage\"))\n+                    .build();\n+\n+            var bots = testBotFactory.createBots(MergeBotFactory.NAME, jsonConfig);\n+            assertEquals(1, bots.size());\n+\n+            MergeBot mergeBot = (MergeBot) bots.get(0);\n+            assertEquals(\"MergeBot@(target)\", mergeBot.toString());\n+\n+            \/\/ Check the contents in the mergeBot\n+            var specs = mergeBot.getSpecs();\n+            MergeBot.Spec spec1 = specs.get(0);\n+            MergeBot.Spec.Frequency frequency1 = spec1.frequency().get();\n+            assertTrue(spec1.name().isEmpty());\n+            assertTrue(frequency1.isWeekly());\n+            assertEquals(DayOfWeek.MONDAY, frequency1.weekday());\n+            assertEquals(3, frequency1.hour());\n+\n+            MergeBot.Spec spec2 = specs.get(1);\n+            assertTrue(spec2.frequency().isEmpty());\n+            assertTrue(spec2.name().isPresent());\n+\n+            MergeBot.Spec spec3 = specs.get(2);\n+            MergeBot.Spec.Frequency frequency3 = spec3.frequency().get();\n+            assertTrue(frequency3.isHourly());\n+            assertEquals(30, frequency3.minute());\n+\n+            MergeBot.Spec spec4 = specs.get(3);\n+            MergeBot.Spec.Frequency frequency4 = spec4.frequency().get();\n+            assertTrue(frequency4.isDaily());\n+            assertEquals(2, frequency4.hour());\n+\n+            MergeBot.Spec spec5 = specs.get(4);\n+            MergeBot.Spec.Frequency frequency5 = spec5.frequency().get();\n+            assertTrue(frequency5.isMonthly());\n+            assertEquals(1, frequency5.day());\n+            assertEquals(2, frequency5.hour());\n+\n+            MergeBot.Spec spec6 = specs.get(5);\n+            MergeBot.Spec.Frequency frequency6 = spec6.frequency().get();\n+            assertTrue(frequency6.isYearly());\n+            assertEquals(Month.OCTOBER, frequency6.month());\n+            assertEquals(15, frequency6.day());\n+            assertEquals(5, frequency6.hour());\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"bots\/merge\/src\/test\/java\/org\/openjdk\/skara\/bots\/merge\/MergeBotFactoryTest.java","additions":136,"deletions":0,"binary":false,"changes":136,"status":"added"},{"patch":"@@ -158,0 +158,12 @@\n+\n+    public List<Pattern> getBranchPatterns() {\n+        return branchPatterns;\n+    }\n+\n+    public boolean isIncludeTags() {\n+        return includeTags;\n+    }\n+\n+    public boolean isShouldMirrorEverything() {\n+        return shouldMirrorEverything;\n+    }\n","filename":"bots\/mirror\/src\/main\/java\/org\/openjdk\/skara\/bots\/mirror\/MirrorBot.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,75 @@\n+package org.openjdk.skara.bots.mirror;\n+\n+import org.junit.jupiter.api.Test;\n+import org.openjdk.skara.json.JWCC;\n+import org.openjdk.skara.test.TemporaryDirectory;\n+import org.openjdk.skara.test.TestBotFactory;\n+import org.openjdk.skara.test.TestHostedRepository;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class MirrorBotFactoryTest {\n+    @Test\n+    public void testCreate() {\n+        try (var tempFolder = new TemporaryDirectory()) {\n+            String jsonString = \"\"\"\n+                    {\n+                      \"repositories\": [\n+                        {\n+                          \"from\": \"from1\",\n+                          \"to\": \"to1\",\n+                          \"branches\": \"master\"\n+                        },\n+                        {\n+                          \"from\": \"from2\",\n+                          \"to\": \"to2\",\n+                          \"branches\": [\n+                            \"master\",\n+                            \"dev\",\n+                            \"test\"\n+                          ]\n+                        },\n+                        {\n+                          \"from\": \"from3\",\n+                          \"to\": \"to3\"\n+                        },\n+                      ]\n+                    }\n+                    \"\"\";\n+            var jsonConfig = JWCC.parse(jsonString).asObject();\n+\n+            var testBotFactory = TestBotFactory.newBuilder()\n+                    .addHostedRepository(\"from1\", new TestHostedRepository(\"from1\"))\n+                    .addHostedRepository(\"from2\", new TestHostedRepository(\"from2\"))\n+                    .addHostedRepository(\"from3\", new TestHostedRepository(\"from3\"))\n+                    .addHostedRepository(\"to1\", new TestHostedRepository(\"to1\"))\n+                    .addHostedRepository(\"to2\", new TestHostedRepository(\"to2\"))\n+                    .addHostedRepository(\"to3\", new TestHostedRepository(\"to3\"))\n+                    .storagePath(tempFolder.path().resolve(\"storage\"))\n+                    .build();\n+\n+            var bots = testBotFactory.createBots(MirrorBotFactory.NAME, jsonConfig);\n+            assertEquals(3, bots.size());\n+\n+            MirrorBot mirrorBot1 = (MirrorBot) bots.get(0);\n+            assertEquals(\"MirrorBot@from1->to1 (master)\", mirrorBot1.toString());\n+            assertFalse(mirrorBot1.isShouldMirrorEverything());\n+            assertFalse(mirrorBot1.isIncludeTags());\n+            assertEquals(\"master\", mirrorBot1.getBranchPatterns().get(0).toString());\n+\n+            MirrorBot mirrorBot2 = (MirrorBot) bots.get(1);\n+            assertEquals(\"MirrorBot@from2->to2 (master,dev,test)\", mirrorBot2.toString());\n+            assertFalse(mirrorBot2.isShouldMirrorEverything());\n+            assertFalse(mirrorBot2.isIncludeTags());\n+            assertEquals(\"master\", mirrorBot2.getBranchPatterns().get(0).toString());\n+            assertEquals(\"dev\", mirrorBot2.getBranchPatterns().get(1).toString());\n+            assertEquals(\"test\", mirrorBot2.getBranchPatterns().get(2).toString());\n+\n+            MirrorBot mirrorBot3 = (MirrorBot) bots.get(2);\n+            assertEquals(\"MirrorBot@from3->to3\", mirrorBot3.toString());\n+            assertTrue(mirrorBot3.isShouldMirrorEverything());\n+            assertTrue(mirrorBot3.isIncludeTags());\n+            assertEquals(0, mirrorBot3.getBranchPatterns().size());\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"bots\/mirror\/src\/test\/java\/org\/openjdk\/skara\/bots\/mirror\/MirrorBotFactoryTest.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"},{"patch":"@@ -0,0 +1,211 @@\n+package org.openjdk.skara.bots.mlbridge;\n+\n+import org.junit.jupiter.api.Test;\n+import org.openjdk.skara.bot.Bot;\n+import org.openjdk.skara.json.JWCC;\n+import org.openjdk.skara.test.TemporaryDirectory;\n+import org.openjdk.skara.test.TestBotFactory;\n+import org.openjdk.skara.test.TestHostedRepository;\n+\n+import java.time.Duration;\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class MailingListBridgeBotFactoryTest {\n+    @Test\n+    public void testCreate() {\n+        try (var tempFolder = new TemporaryDirectory()) {\n+            String jsonString = \"\"\"\n+                    {\n+                      \"name\": \"test\",\n+                      \"mail\": \"test@openjdk.org\",\n+                      \"ignored\": {\n+                        \"users\": [\n+                          \"ignore1[bot]\",\n+                          \"ignore2[bot]\",\n+                          \"ignore3[bot]\",\n+                          \"ignore4[bot]\"\n+                        ],\n+                        \"comments\": [\n+                          \"<!-- It's a test comment!-->\"\n+                        ]\n+                      },\n+                      \"ready\": {\n+                        \"labels\": [\n+                          \"rfr\"\n+                        ],\n+                        \"comments\": [\n+                          {\n+                            \"user\": \"test_user[bot]\",\n+                            \"pattern\": \"<!-- Welcome message -->\"\n+                          }\n+                        ]\n+                      },\n+                      \"server\": {\n+                        \"archive\": \"https:\/\/mail.test.org\/test\/\",\n+                        \"smtp\": \"0.0.0.0\",\n+                        \"interval\": \"PT5S\"\n+                      },\n+                      \"webrevs\": {\n+                        \"repository\": {\n+                          \"html\": \"repo1\",\n+                          \"json\": \"repo2\"\n+                        },\n+                        \"ref\": \"master\",\n+                        \"web\": \"https:\/\/test.openjdk.org\/\"\n+                      },\n+                      \"archive\": \"archive:master\",\n+                      \"issues\": \"https:\/\/bugs.test.org\/browse\/\",\n+                      \"cooldown\": \"PT2M\",\n+                      \"repositories\": [\n+                        {\n+                          \"repository\": \"repo3\",\n+                          \"census\": \"census:master\",\n+                          \"webrevs\": {\n+                            \"html\": false,\n+                            \"json\": true\n+                          },\n+                          \"headers\": {\n+                            \"Approved\": \"test\"\n+                          },\n+                          \"lists\": [\n+                            {\n+                              \"email\": \"test_email1@test.org\"\n+                            }\n+                          ],\n+                          \"branchname\":\"dev\"\n+                        },\n+                        {\n+                          \"repository\": \"repo4\",\n+                          \"census\": \"census:master\",\n+                          \"webrevs\": {\n+                            \"html\": false,\n+                            \"json\": true\n+                          },\n+                          \"lists\": {\n+                            \"email\": \"test_email2@test.com\"\n+                          },\n+                          \"bidirectional\": false,\n+                          \"reponame\": true\n+                        },\n+                        {\n+                          \"repository\": \"repo5\",\n+                          \"census\": \"census:master\",\n+                          \"webrevs\": {\n+                            \"html\": false,\n+                            \"json\": true\n+                          },\n+                          \"headers\": {\n+                            \"Approved\": \"test5\"\n+                          },\n+                          \"reponame\": true,\n+                          \"branchname\": \"master\",\n+                          \"lists\": [\n+                            {\n+                              \"email\": \"test_email3@test.org\",\n+                              \"labels\": [\n+                                \"label1\",\n+                                \"label2\",\n+                                \"label3\"\n+                              ]\n+                            }\n+                          ],\n+                          \"issues\": \"https:\/\/test.test.com\/issueProject\"\n+                        }\n+                      ]\n+                    }\n+                    \"\"\";\n+            var jsonConfig = JWCC.parse(jsonString).asObject();\n+\n+            var testBotFactory = TestBotFactory.newBuilder()\n+                    .addHostedRepository(\"repo1\", new TestHostedRepository(\"repo1\"))\n+                    .addHostedRepository(\"repo2\", new TestHostedRepository(\"repo2\"))\n+                    .addHostedRepository(\"repo3\", new TestHostedRepository(\"repo3\"))\n+                    .addHostedRepository(\"repo4\", new TestHostedRepository(\"repo4\"))\n+                    .addHostedRepository(\"repo5\", new TestHostedRepository(\"repo5\"))\n+                    .addHostedRepository(\"archive\", new TestHostedRepository(\"archive\"))\n+                    .addHostedRepository(\"census\", new TestHostedRepository(\"census\"))\n+                    .storagePath(tempFolder.path().resolve(\"storage\"))\n+                    .build();\n+\n+            var bots = testBotFactory.createBots(MailingListBridgeBotFactory.NAME, jsonConfig);\n+            assertEquals(5, bots.size());\n+\n+            \/\/A mailingListArchiveReaderBot for every configured repository which is bidirectional\n+            List<Bot> mailingListArchiveReaderBots = bots.stream().filter(e -> e.getClass().equals(MailingListArchiveReaderBot.class)).toList();\n+            \/\/A mailingListBridgeBot for every configured repository\n+            List<Bot> mailingListBridgeBots = bots.stream().filter(e -> e.getClass().equals(MailingListBridgeBot.class)).toList();\n+\n+            assertEquals(2, mailingListArchiveReaderBots.size());\n+            assertEquals(3, mailingListBridgeBots.size());\n+\n+            assertEquals(\"MailingListArchiveReaderBot@repo3\", mailingListArchiveReaderBots.get(0).toString());\n+            assertEquals(\"MailingListArchiveReaderBot@repo5\", mailingListArchiveReaderBots.get(1).toString());\n+\n+            MailingListBridgeBot mailingListBridgeBot1 = (MailingListBridgeBot) mailingListBridgeBots.get(0);\n+            assertEquals(\"MailingListBridgeBot@repo3\", mailingListBridgeBot1.toString());\n+            assertEquals(\"repo3\", mailingListBridgeBot1.codeRepo().name());\n+            assertEquals(\"archive\", mailingListBridgeBot1.archiveRepo().name());\n+            assertEquals(\"master\", mailingListBridgeBot1.archiveRef());\n+            assertEquals(\"https:\/\/mail.test.org\/test\/\", mailingListBridgeBot1.listArchive().toString());\n+            assertEquals(\"master\", mailingListBridgeBot1.censusRef());\n+            assertEquals(\"census\", mailingListBridgeBot1.censusRepo().name());\n+            assertEquals(\"<test_email1@test.org>\", mailingListBridgeBot1.lists().get(0).list().toString());\n+            assertEquals(\"[ignore1[bot], ignore2[bot], ignore4[bot], ignore3[bot]]\", mailingListBridgeBot1.ignoredUsers().toString());\n+            assertEquals(\"[<!-- It's a test comment!-->]\", mailingListBridgeBot1.ignoredComments().toString());\n+            assertEquals(\"0.0.0.0\", mailingListBridgeBot1.smtpServer());\n+            assertEquals(\"[rfr]\", mailingListBridgeBot1.readyLabels().toString());\n+            assertEquals(\"{test_user[bot]=<!-- Welcome message -->}\", mailingListBridgeBot1.readyComments().toString());\n+            assertEquals(\"{Approved=test}\", mailingListBridgeBot1.headers().toString());\n+            assertEquals(\"https:\/\/bugs.test.org\/browse\/\", mailingListBridgeBot1.issueTracker().toString());\n+            assertEquals(Duration.ofSeconds(5), mailingListBridgeBot1.sendInterval());\n+            assertEquals(Duration.ofMinutes(2), mailingListBridgeBot1.cooldown());\n+            assertFalse(mailingListBridgeBot1.repoInSubject());\n+            assertEquals(\"dev\", mailingListBridgeBot1.branchInSubject().toString());\n+\n+\n+            MailingListBridgeBot mailingListBridgeBot2 = (MailingListBridgeBot) mailingListBridgeBots.get(1);\n+            assertEquals(\"MailingListBridgeBot@repo4\", mailingListBridgeBot2.toString());\n+            assertEquals(\"repo4\", mailingListBridgeBot2.codeRepo().name());\n+            assertEquals(\"archive\", mailingListBridgeBot2.archiveRepo().name());\n+            assertEquals(\"master\", mailingListBridgeBot2.archiveRef());\n+            assertEquals(\"https:\/\/mail.test.org\/test\/\", mailingListBridgeBot2.listArchive().toString());\n+            assertEquals(\"master\", mailingListBridgeBot2.censusRef());\n+            assertEquals(\"census\", mailingListBridgeBot2.censusRepo().name());\n+            assertEquals(\"<test_email2@test.com>\", mailingListBridgeBot2.lists().get(0).list().toString());\n+            assertEquals(\"[ignore1[bot], ignore2[bot], ignore4[bot], ignore3[bot]]\", mailingListBridgeBot2.ignoredUsers().toString());\n+            assertEquals(\"[<!-- It's a test comment!-->]\", mailingListBridgeBot2.ignoredComments().toString());\n+            assertEquals(\"0.0.0.0\", mailingListBridgeBot2.smtpServer());\n+            assertEquals(\"[rfr]\", mailingListBridgeBot2.readyLabels().toString());\n+            assertEquals(\"{test_user[bot]=<!-- Welcome message -->}\", mailingListBridgeBot2.readyComments().toString());\n+            assertEquals(0, mailingListBridgeBot2.headers().size());\n+            assertEquals(\"https:\/\/bugs.test.org\/browse\/\", mailingListBridgeBot2.issueTracker().toString());\n+            assertEquals(Duration.ofSeconds(5), mailingListBridgeBot2.sendInterval());\n+            assertEquals(Duration.ofMinutes(2), mailingListBridgeBot2.cooldown());\n+            assertTrue(mailingListBridgeBot2.repoInSubject());\n+\n+            MailingListBridgeBot mailingListBridgeBot3 = (MailingListBridgeBot) mailingListBridgeBots.get(2);\n+            assertEquals(\"MailingListBridgeBot@repo5\", mailingListBridgeBot3.toString());\n+            assertEquals(\"repo5\", mailingListBridgeBot3.codeRepo().name());\n+            assertEquals(\"archive\", mailingListBridgeBot3.archiveRepo().name());\n+            assertEquals(\"master\", mailingListBridgeBot3.archiveRef());\n+            assertEquals(\"https:\/\/mail.test.org\/test\/\", mailingListBridgeBot3.listArchive().toString());\n+            assertEquals(\"master\", mailingListBridgeBot3.censusRef());\n+            assertEquals(\"census\", mailingListBridgeBot3.censusRepo().name());\n+            assertEquals(\"<test_email3@test.org>\", mailingListBridgeBot3.lists().get(0).list().toString());\n+            assertEquals(\"[label1, label2, label3]\", mailingListBridgeBot3.lists().get(0).labels().toString());\n+            assertEquals(\"[ignore1[bot], ignore2[bot], ignore4[bot], ignore3[bot]]\", mailingListBridgeBot3.ignoredUsers().toString());\n+            assertEquals(\"[<!-- It's a test comment!-->]\", mailingListBridgeBot3.ignoredComments().toString());\n+            assertEquals(\"0.0.0.0\", mailingListBridgeBot3.smtpServer());\n+            assertEquals(\"[rfr]\", mailingListBridgeBot3.readyLabels().toString());\n+            assertEquals(\"{test_user[bot]=<!-- Welcome message -->}\", mailingListBridgeBot3.readyComments().toString());\n+            assertEquals(\"{Approved=test5}\", mailingListBridgeBot3.headers().toString());\n+            assertEquals(\"https:\/\/test.test.com\/issueProject\", mailingListBridgeBot3.issueTracker().toString());\n+            assertEquals(Duration.ofSeconds(5), mailingListBridgeBot3.sendInterval());\n+            assertEquals(Duration.ofMinutes(2), mailingListBridgeBot3.cooldown());\n+            assertTrue(mailingListBridgeBot3.repoInSubject());\n+            assertEquals(\"master\", mailingListBridgeBot3.branchInSubject().toString());\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"bots\/mlbridge\/src\/test\/java\/org\/openjdk\/skara\/bots\/mlbridge\/MailingListBridgeBotFactoryTest.java","additions":211,"deletions":0,"binary":false,"changes":211,"status":"added"},{"patch":"@@ -158,0 +158,10 @@\n+\n+    public Pattern getBranches() {\n+        return branches;\n+    }\n+\n+    public Map<String, Pattern> getReadyComments() {\n+        return readyComments;\n+    }\n+\n+\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/NotifyBot.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,131 @@\n+package org.openjdk.skara.bots.notify;\n+\n+import org.junit.jupiter.api.Test;\n+import org.openjdk.skara.json.JWCC;\n+import org.openjdk.skara.test.*;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class NotifyBotFactoryTest {\n+    @Test\n+    public void testCreate() {\n+        try (var tempFolder = new TemporaryDirectory()) {\n+            String jsonString = \"\"\"\n+                    {\n+                      \"database\": {\n+                        \"repository\": \"notify:master\",\n+                        \"name\": \"test_notify\",\n+                        \"email\": \"test_notify@openjdk.org\"\n+                      },\n+                      \"ready\": {\n+                        \"labels\": [\n+                          \"rfr\"\n+                        ],\n+                        \"comments\": [\n+                          {\n+                            \"user\": \"test[bot]\",\n+                            \"pattern\": \"<!-- Welcome message -->\"\n+                          }\n+                        ]\n+                      },\n+                      \"integrator\": \"111\",\n+                      \"mailinglist\": {\n+                        \"archive\": \"https:\/\/test.openjdk.org\/archive\",\n+                        \"smtp\": \"0.0.0.0\",\n+                        \"sender\": \"test <test@openjdk.org>\",\n+                        \"interval\": \"PT5S\"\n+                      },\n+                      \"issue\": {\n+                        \"reviews\": {\n+                          \"icon\": \"icon.png\"\n+                        },\n+                        \"commits\": {\n+                          \"icon\": \"commit.png\"\n+                        },\n+                        \"namespace\": \"test.org\"\n+                      },\n+                      \"repositories\": {\n+                        \"repo1\": {\n+                          \"basename\": \"test-repo\",\n+                          \"branches\": \"master\",\n+                          \"mailinglist\": {\n+                            \"recipient\": \"test@test.org\",\n+                            \"domains\": \"test.org|test.com\",\n+                            \"headers\": {\n+                              \"Approved\": \"0000000\"\n+                            },\n+                            \"branchnames\": false,\n+                            \"branches\": false,\n+                            \"tags\": true,\n+                            \"builds\": false\n+                          },\n+                          \"issue\": {\n+                            \"project\": \"test_bugs\/TEST\",\n+                            \"pronly\": true,\n+                            \"resolve\": false\n+                          },\n+                          \"comment\": {\n+                            \"project\": \"test_bugs\/TEST\"\n+                          },\n+                          \"prbranch\": {\n+                          }\n+                        },\n+                        \"repo2\": {\n+                          \"basename\": \"test-repo2\",\n+                          \"branches\": \"dev\",\n+                          \"mailinglist\": {\n+                            \"recipient\": \"test@test.org\",\n+                            \"domains\": \"test.org|test.com\",\n+                            \"headers\": {\n+                              \"Approved\": \"0000000\"\n+                            },\n+                            \"branchnames\": false,\n+                            \"branches\": false,\n+                            \"tags\": true,\n+                            \"builds\": false\n+                          },\n+                          \"issue\": {\n+                            \"project\": \"test_bugs\/TEST\",\n+                            \"pronly\": true,\n+                            \"resolve\": false\n+                          },\n+                          \"comment\": {\n+                            \"project\": \"test_bugs\/TEST\"\n+                          },\n+                          \"prbranch\": {\n+                          }\n+                        }\n+                      }\n+                    }\n+                    \"\"\";\n+            var jsonConfig = JWCC.parse(jsonString).asObject();\n+\n+            var testBotFactory = TestBotFactory.newBuilder()\n+                    .addHostedRepository(\"notify\", new TestHostedRepository(\"notify\"))\n+                    .addHostedRepository(\"repo1\", new TestHostedRepository(\"repo1\"))\n+                    .addHostedRepository(\"repo2\", new TestHostedRepository(\"repo2\"))\n+                    .addIssueProject(\"test_bugs\/TEST\", new TestIssueProject(TestHost.createNew(List.of()), \"TEST\"))\n+                    .storagePath(tempFolder.path().resolve(\"storage\"))\n+                    .build();\n+\n+            var bots = testBotFactory.createBots(NotifyBotFactory.NAME, jsonConfig);\n+            bots = bots.stream().sorted(Comparator.comparing(Objects::toString)).toList();\n+            \/\/A notifyBot for every configured repository\n+            assertEquals(2, bots.size());\n+\n+            NotifyBot notifyBot1 = (NotifyBot) bots.get(0);\n+            assertEquals(\"NotifyBot@repo1\", notifyBot1.toString());\n+            assertEquals(\"master\", notifyBot1.getBranches().toString());\n+            assertEquals(\"{test[bot]=<!-- Welcome message -->}\", notifyBot1.getReadyComments().toString());\n+\n+            NotifyBot notifyBot2 = (NotifyBot) bots.get(1);\n+            assertEquals(\"NotifyBot@repo2\", notifyBot2.toString());\n+            assertEquals(\"dev\", notifyBot2.getBranches().toString());\n+            assertEquals(\"{test[bot]=<!-- Welcome message -->}\", notifyBot2.getReadyComments().toString());\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/NotifyBotFactoryTest.java","additions":131,"deletions":0,"binary":false,"changes":131,"status":"added"},{"patch":"@@ -0,0 +1,95 @@\n+package org.openjdk.skara.bots.pr;\n+\n+import org.junit.jupiter.api.Test;\n+import org.openjdk.skara.json.JWCC;\n+import org.openjdk.skara.test.*;\n+\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class PullRequestBotFactoryTest {\n+    @Test\n+    public void testCreate() {\n+        try (var tempFolder = new TemporaryDirectory()) {\n+            String jsonString = \"\"\"\n+                    {\n+                      \"external\": {\n+                        \"pr\": {\n+                          \"test\": \"used to run tests\"\n+                        },\n+                        \"commit\": {\n+                          \"command1\": \"test1\",\n+                          \"command2\": \"test2\"\n+                        }\n+                      },\n+                      \"exclude-commit-comments-from\": [\n+                          1,\n+                          2\n+                      ],\n+                      \"blockers\": {\n+                        \"test\": \"Signature needs verify\"\n+                      },\n+                      \"ready\": {\n+                        \"labels\": [],\n+                        \"comments\": []\n+                      },\n+                      \"labels\": {\n+                        \"label1\": {\n+                          \"repository\": \"repo1:master\",\n+                          \"filename\": \"file.json\"\n+                        }\n+                      },\n+                      \"repositories\": {\n+                        \"repo2\": {\n+                          \"census\": \"census:master\",\n+                          \"censuslink\": \"https:\/\/test.test.com\",\n+                          \"issues\": \"TEST\",\n+                          \"csr\": false,\n+                          \"two-reviewers\": [\n+                            \"rfr\"\n+                          ],\n+                          \"24h\": [\n+                            \"24h_test\"\n+                          ]\n+                        }\n+                      },\n+                      \"forks\": {\n+                        \"repo3\": \"fork3\",\n+                        \"repo4\": \"fork4\",\n+                      }\n+                    }\n+                    \"\"\";\n+            var jsonConfig = JWCC.parse(jsonString).asObject();\n+\n+            var testBotFactory = TestBotFactory.newBuilder()\n+                    .addHostedRepository(\"repo1\", new TestHostedRepository(\"repo1\"))\n+                    .addHostedRepository(\"repo2\", new TestHostedRepository(TestHost.createNew(List.of()), \"repo2\"))\n+                    .addHostedRepository(\"repo3\", new TestHostedRepository(\"repo3\"))\n+                    .addHostedRepository(\"repo4\", new TestHostedRepository(\"repo4\"))\n+                    .addHostedRepository(\"fork3\", new TestHostedRepository(\"fork3\"))\n+                    .addHostedRepository(\"fork4\", new TestHostedRepository(\"fork4\"))\n+                    .addHostedRepository(\"census\", new TestHostedRepository(\"census\"))\n+                    .addIssueProject(\"TEST\", new TestIssueProject(null, \"TEST\"))\n+                    .storagePath(tempFolder.path().resolve(\"storage\"))\n+                    .build();\n+\n+            var bots = testBotFactory.createBots(PullRequestBotFactory.NAME, jsonConfig);\n+            \/\/A pullRequestBot for every configured repository\n+            assertEquals(1, bots.size());\n+\n+            var pullRequestBot1 = (PullRequestBot) bots.get(0);\n+            assertEquals(\"PullRequestBot@repo2\", pullRequestBot1.toString());\n+            assertEquals(\"used to run tests\", pullRequestBot1.externalPullRequestCommands().get(\"test\"));\n+            assertEquals(\"TEST\", pullRequestBot1.issueProject().name());\n+            assertEquals(\"census\",pullRequestBot1.censusRepo().name());\n+            assertEquals(\"master\",pullRequestBot1.censusRef());\n+            assertEquals(\"{test=used to run tests}\",pullRequestBot1.externalPullRequestCommands().toString());\n+            assertEquals(\"{test=Signature needs verify}\",pullRequestBot1.blockingCheckLabels().toString());\n+            assertEquals(\"[rfr]\",pullRequestBot1.twoReviewersLabels().toString());\n+            assertEquals(\"[24h_test]\",pullRequestBot1.twentyFourHoursLabels().toString());\n+            assertFalse(pullRequestBot1.ignoreStaleReviews());\n+            assertEquals(\".*\",pullRequestBot1.allowedTargetBranches().toString());\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBotFactoryTest.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"},{"patch":"@@ -0,0 +1,47 @@\n+package org.openjdk.skara.bots.submit;\n+\n+import org.junit.jupiter.api.Test;\n+import org.openjdk.skara.json.JWCC;\n+import org.openjdk.skara.test.TestBotFactory;\n+import org.openjdk.skara.test.TestHostedRepository;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class SubmitBotFactoryTest {\n+    @Test\n+    public void testCreate() {\n+        String jsonString = \"\"\"\n+                {\n+                  \"executors\": {\n+                    \"executor1\": {\n+                      \"type\": \"shell\",\n+                      \"timeout\": \"P3D\",\n+                      \"config\": {\n+                        \"cmd\": [\n+                        ],\n+                        \"name\": \"name1\",\n+                        \"env\": {\n+                          \"key1\": \"val1\",\n+                          \"key2\": \"val2\"\n+                        }\n+                      }\n+                    }\n+                  },\n+                  \"repositories\": {\n+                    \"repo1\": \"executor1\"\n+                  }\n+                }\n+                \"\"\";\n+        var jsonConfig = JWCC.parse(jsonString).asObject();\n+\n+        var testBotFactory = TestBotFactory.newBuilder()\n+                .addHostedRepository(\"repo1\", new TestHostedRepository(\"repo1\"))\n+                .build();\n+\n+        var bots = testBotFactory.createBots(SubmitBotFactory.NAME, jsonConfig);\n+        \/\/A submitBot for every configured repository\n+        assertEquals(1, bots.size());\n+\n+        assertEquals(\"SubmitBot@repo1\", bots.get(0).toString());\n+    }\n+}\n\\ No newline at end of file\n","filename":"bots\/submit\/src\/test\/java\/org\/openjdk\/skara\/bots\/submit\/SubmitBotFactoryTest.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"},{"patch":"@@ -0,0 +1,39 @@\n+package org.openjdk.skara.bots.synclabel;\n+\n+import org.junit.jupiter.api.Test;\n+import org.openjdk.skara.json.JWCC;\n+import org.openjdk.skara.test.TestBotFactory;\n+import org.openjdk.skara.test.TestIssueProject;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class SyncLabelBotFactoryTest {\n+    @Test\n+    public void testCreate() {\n+        String jsonString = \"\"\"\n+                {\n+                  \"issueprojects\": [\n+                    {\n+                      \"project\": \"test_bugs\/TEST\",\n+                      \"inspect\": \".*\",\n+                      \"ignore\": \"\\\\\\\\b\\\\\\\\B\"\n+                    }\n+                  ]\n+                }\n+                \"\"\";\n+        var jsonConfig = JWCC.parse(jsonString).asObject();\n+\n+        var testBotFactory = TestBotFactory.newBuilder()\n+                .addIssueProject(\"test_bugs\/TEST\", new TestIssueProject(null, \"TEST\"))\n+                .build();\n+\n+        var bots = testBotFactory.createBots(SyncLabelBotFactory.NAME, jsonConfig);\n+        \/\/ A syncLabelBot for every configured issueProject\n+        assertEquals(1, bots.size());\n+\n+        SyncLabelBot syncLabelBot1 = (SyncLabelBot) bots.get(0);\n+        assertEquals(\"SyncLabelBot@TEST\", syncLabelBot1.toString());\n+        assertEquals(\".*\", syncLabelBot1.inspect().toString());\n+        assertEquals(\"\\\\b\\\\B\", syncLabelBot1.ignore().toString());\n+    }\n+}\n\\ No newline at end of file\n","filename":"bots\/synclabel\/src\/test\/java\/org\/openjdk\/skara\/bots\/synclabel\/SyncLabelBotFactoryTest.java","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"},{"patch":"@@ -0,0 +1,57 @@\n+package org.openjdk.skara.bots.tester;\n+\n+import org.junit.jupiter.api.Test;\n+import org.openjdk.skara.json.JWCC;\n+import org.openjdk.skara.test.TemporaryDirectory;\n+import org.openjdk.skara.test.TestBotFactory;\n+import org.openjdk.skara.test.TestHostedRepository;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class TestBotFactoryTest {\n+    @Test\n+    public void testCreate() {\n+        try (var tempFolder = new TemporaryDirectory()) {\n+            String jsonString = \"\"\"\n+                    {\n+                      \"census\": \"census\",\n+                      \"approvers\": \"approver\",\n+                      \"allowlist\": [\n+                        \"allow1\",\n+                        \"allow2\"\n+                      ],\n+                      \"availableJobs\": [\n+                        \"availableJob1\",\n+                        \"availableJob2\"\n+                      ],\n+                      \"defaultJobs\":[\n+                        \"defaultJob1\",\n+                        \"defaultJob2\"\n+                      ],\n+                      \"ci\": \"ci_test\",\n+                      \"name\": \"name\",\n+                      \"repositories\": [\n+                        \"repo1\",\n+                        \"repo2\"\n+                      ],\n+                      \"role\": \"role1\"\n+                    }\n+                    \"\"\";\n+            var jsonConfig = JWCC.parse(jsonString).asObject();\n+\n+            var testBotFactory = TestBotFactory.newBuilder()\n+                    .addHostedRepository(\"repo1\", new TestHostedRepository(\"repo1\"))\n+                    .addHostedRepository(\"repo2\", new TestHostedRepository(\"repo2\"))\n+                    .addHostedRepository(\"census\", new TestHostedRepository(\"census\"))\n+                    .storagePath(tempFolder.path().resolve(\"storage\"))\n+                    .build();\n+\n+            var bots = testBotFactory.createBots(org.openjdk.skara.bots.tester.TestBotFactory.NAME, jsonConfig);\n+            \/\/A TestBot for every configured repo\n+            assertEquals(2, bots.size());\n+\n+            assertEquals(\"TestBot@repo1\", bots.get(0).toString());\n+            assertEquals(\"TestBot@repo2\", bots.get(1).toString());\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"bots\/tester\/src\/test\/java\/org\/openjdk\/skara\/bots\/tester\/TestBotFactoryTest.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"},{"patch":"@@ -0,0 +1,35 @@\n+package org.openjdk.skara.bots.testinfo;\n+\n+import org.junit.jupiter.api.Test;\n+import org.openjdk.skara.json.JWCC;\n+import org.openjdk.skara.test.TestBotFactory;\n+import org.openjdk.skara.test.TestHostedRepository;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class TestInfoBotFactoryTest {\n+    @Test\n+    public void testCreate() {\n+        String jsonString = \"\"\"\n+                {\n+                  \"repositories\": [\n+                    \"repo1\",\n+                    \"repo2\"\n+                  ]\n+                }\n+                \"\"\";\n+        var jsonConfig = JWCC.parse(jsonString).asObject();\n+\n+        var testBotFactory = TestBotFactory.newBuilder()\n+                .addHostedRepository(\"repo1\", new TestHostedRepository(\"repo1\"))\n+                .addHostedRepository(\"repo2\", new TestHostedRepository(\"repo2\"))\n+                .build();\n+\n+        var bots = testBotFactory.createBots(TestInfoBotFactory.NAME, jsonConfig);\n+        \/\/ A testInfoBot for every configured repo\n+        assertEquals(2, bots.size());\n+\n+        assertEquals(\"TestInfoBot@repo1\", bots.get(0).toString());\n+        assertEquals(\"TestInfoBot@repo2\", bots.get(1).toString());\n+    }\n+}\n\\ No newline at end of file\n","filename":"bots\/testinfo\/src\/test\/java\/org\/openjdk\/skara\/bots\/testinfo\/TestInfoBotFactoryTest.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"added"},{"patch":"@@ -202,0 +202,4 @@\n+\n+    public List<Branch> getBranches() {\n+        return branches;\n+    }\n","filename":"bots\/topological\/src\/main\/java\/org\/openjdk\/skara\/bots\/topological\/TopologicalBot.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,44 @@\n+package org.openjdk.skara.bots.topological;\n+\n+import org.junit.jupiter.api.Test;\n+import org.openjdk.skara.json.JWCC;\n+import org.openjdk.skara.test.TemporaryDirectory;\n+import org.openjdk.skara.test.TestBotFactory;\n+import org.openjdk.skara.test.TestHostedRepository;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class TopologicalBotFactoryTest {\n+    @Test\n+    public void testCreate() {\n+        try (var tempFolder = new TemporaryDirectory()) {\n+            String jsonString = \"\"\"\n+                    {\n+                      \"repo\": \"repo1\",\n+                      \"branches\": [\n+                        \"master\",\n+                        \"dev\",\n+                        \"test\"\n+                      ],\n+                      \"depsFile\": \"test\"\n+                    }\n+                    \"\"\";\n+            var jsonConfig = JWCC.parse(jsonString).asObject();\n+\n+            var testBotFactory = TestBotFactory.newBuilder()\n+                    .addHostedRepository(\"repo1\", new TestHostedRepository(\"repo1\"))\n+                    .storagePath(tempFolder.path().resolve(\"storage\"))\n+                    .build();\n+\n+            var bots = testBotFactory.createBots(TopologicalBotFactory.NAME, jsonConfig);\n+            \/\/ A topologicalBot for every configured repo\n+            assertEquals(1, bots.size());\n+\n+            TopologicalBot topologicalBot1 = (TopologicalBot) bots.get(0);\n+            assertEquals(\"TopologicalBot@repo1\", topologicalBot1.toString());\n+            assertEquals(\"master\", topologicalBot1.getBranches().get(0).toString());\n+            assertEquals(\"dev\", topologicalBot1.getBranches().get(1).toString());\n+            assertEquals(\"test\", topologicalBot1.getBranches().get(2).toString());\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"bots\/topological\/src\/test\/java\/org\/openjdk\/skara\/bots\/topological\/TopologicalBotFactoryTest.java","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"@@ -87,0 +87,8 @@\n+        var bots = createBots(name, configuration);\n+        if (bots.size() != 1) {\n+            throw new RuntimeException(\"Factory did not create a bot instance\");\n+        }\n+        return bots.get(0);\n+    }\n+\n+    public List<Bot> createBots(String name, JSONObject configuration) {\n@@ -104,2 +112,2 @@\n-                if (!hostedRepositories.containsKey(repoName)) {\n-                    throw new RuntimeException(\"Unknown repository: \" + repoName);\n+                if (!hostedRepositories.containsKey(repoName) && !hostedRepositories.containsKey(name)) {\n+                    throw new RuntimeException(\"Unknown repository: \" + repoName + \" or \" + name);\n@@ -107,1 +115,4 @@\n-                return hostedRepositories.get(repoName);\n+                if(hostedRepositories.get(repoName) !=null){\n+                    return hostedRepositories.get(repoName);\n+                }\n+                return hostedRepositories.get(name);\n@@ -120,1 +131,1 @@\n-                throw new RuntimeException(\"not implemented yet\");\n+                return null;\n@@ -150,5 +161,1 @@\n-                var bots = factory.create(botConfiguration);\n-                if (bots.size() != 1) {\n-                    throw new RuntimeException(\"Factory did not create a bot instance\");\n-                }\n-                return bots.get(0);\n+                return factory.create(botConfiguration);\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestBotFactory.java","additions":16,"deletions":9,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -58,0 +58,24 @@\n+    \/**\n+     * Creates an instance without a backing local repository that will not support any actual repository interaction\n+     *\/\n+    public TestHostedRepository(String projectName) {\n+        super(null, projectName);\n+        this.host = null;\n+        this.projectName = projectName;\n+        this.localRepository = null;\n+        pullRequestPattern = null;\n+        commitComments = new HashMap<>();\n+    }\n+\n+    \/**\n+     * Creates an instance without a backing local repository that will not support any actual repository interaction\n+     *\/\n+    public TestHostedRepository(TestHost host, String projectName) {\n+        super(host, projectName);\n+        this.host = host;\n+        this.projectName = projectName;\n+        this.localRepository = null;\n+        pullRequestPattern = null;\n+        commitComments = new HashMap<>();\n+    }\n+\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestHostedRepository.java","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"}]}