{"files":[{"patch":"@@ -47,0 +47,1 @@\n+    private String resolvedHeader;\n@@ -48,0 +49,1 @@\n+    private String resolvedBody;\n@@ -49,0 +51,1 @@\n+    private String resolvedFooter;\n@@ -167,0 +170,19 @@\n+    \/**\n+     * Checks if lastHead is available in the local repository and tried to fetch it\n+     * if not.\n+     *\/\n+    private static boolean lastHeadAvailable(PullRequest pr, Repository localRepo, Hash lastHead, boolean tryFetch) {\n+        try {\n+            if (localRepo.resolve(lastHead.hex()).isPresent()) {\n+                return true;\n+            }\n+            if (tryFetch) {\n+                localRepo.fetch(pr.repository().url(), lastHead.hex(), false);\n+                return true;\n+            }\n+        } catch (IOException e) {\n+            return false;\n+        }\n+        return false;\n+    }\n+\n@@ -185,1 +207,3 @@\n-                                       return ArchiveMessages.composeIncrementalRevision(pr, localRepo, hostUserToCommitterName(hostUserToEmailAuthor, pr.author()), head, lastHead);\n+                                       \/\/ Make sure lastHead is present in the local repo (if possible)\n+                                       lastHeadAvailable(pr, localRepo, lastHead, true);\n+                                       return ArchiveMessages.composeIncrementalRevision(pr, localRepo, hostUserToCommitterName(hostUserToEmailAuthor, pr.author()), head, lastHead, base);\n@@ -198,3 +222,8 @@\n-                                       var incrementalWebrev = webrevGenerator.generate(lastHead, head, String.format(\"%02d-%02d\", index - 1, index), WebrevDescription.Type.INCREMENTAL);\n-                                       webrevNotification.notify(index, List.of(fullWebrev, incrementalWebrev));\n-                                       return ArchiveMessages.composeIncrementalFooter(pr, localRepo, fullWebrev, incrementalWebrev, head, lastHead);\n+                                       if (lastHeadAvailable(pr, localRepo, lastHead, false)) {\n+                                           var incrementalWebrev = webrevGenerator.generate(lastHead, head, String.format(\"%02d-%02d\", index - 1, index), WebrevDescription.Type.INCREMENTAL);\n+                                           webrevNotification.notify(index, List.of(fullWebrev, incrementalWebrev));\n+                                           return ArchiveMessages.composeIncrementalFooter(pr, localRepo, fullWebrev, incrementalWebrev, head, lastHead);\n+                                       } else {\n+                                           webrevNotification.notify(index, List.of(fullWebrev));\n+                                           return ArchiveMessages.composeRebasedFooter(pr, localRepo, fullWebrev, base, head);\n+                                       }\n@@ -427,1 +456,4 @@\n-        return header.get();\n+        if (resolvedHeader == null) {\n+            resolvedHeader = header.get();\n+        }\n+        return resolvedHeader;\n@@ -431,1 +463,4 @@\n-        return body.get();\n+        if (resolvedBody == null) {\n+            resolvedBody = body.get();\n+        }\n+        return resolvedBody;\n@@ -435,1 +470,4 @@\n-        return footer.get();\n+        if (resolvedFooter == null) {\n+            resolvedFooter = footer.get();\n+        }\n+        return resolvedFooter;\n@@ -440,1 +478,1 @@\n-        return \"ArchiveItem From: \" + author + \" Body: \" + body.get();\n+        return \"ArchiveItem From: \" + author + \" Body: \" + body();\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/ArchiveItem.java","additions":46,"deletions":8,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -203,1 +203,1 @@\n-    static String composeIncrementalRevision(PullRequest pr, Repository localRepository, String author, Hash head, Hash lastHead) {\n+    static String composeIncrementalRevision(PullRequest pr, Repository localRepository, String author, Hash head, Hash lastHead, Hash base) {\n@@ -212,0 +212,6 @@\n+        var noIncrementalCommitsFound = commits.isEmpty();\n+        if (noIncrementalCommitsFound) {\n+            \/\/ Could not find incremental commits, get everything from the base instead\n+            lastHead = base;\n+            commits = commits(localRepository, lastHead, head);\n+        }\n@@ -214,0 +220,1 @@\n+\n@@ -226,6 +233,15 @@\n-            ret.append(\"The incremental views will show differences compared to the previous content of the PR.\");\n-            var commitsDescription = describeCommits(commits, \"new\");\n-            newCommitMessages.ifPresent(m -> ret.append(\" The pull request contains \")\n-                                                .append(commitsDescription)\n-                                                .append(\" since the last revision:\\n\\n\")\n-                                                .append(m));\n+            if (noIncrementalCommitsFound) {\n+                ret.append(\"Incremental views are not available.\");\n+                var commitsDescription = describeCommits(commits, \"\");\n+                newCommitMessages.ifPresent(m -> ret.append(\" The pull request now contains \")\n+                        .append(commitsDescription)\n+                        .append(\":\\n\\n\")\n+                        .append(m));\n+            } else {\n+                ret.append(\"The incremental views will show differences compared to the previous content of the PR.\");\n+                var commitsDescription = describeCommits(commits, \"new\");\n+                newCommitMessages.ifPresent(m -> ret.append(\" The pull request contains \")\n+                        .append(commitsDescription)\n+                        .append(\" since the last revision:\\n\\n\")\n+                        .append(m));\n+            }\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/ArchiveMessages.java","additions":23,"deletions":7,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -1678,1 +1678,1 @@\n-    void rebased(TestInfo testInfo) throws IOException {\n+    void forcePushed(TestInfo testInfo) throws IOException {\n@@ -1684,2 +1684,3 @@\n-            var author = credentials.getHostedRepository();\n-            var archive = credentials.getHostedRepository();\n+            var author = credentials.getHostedRepository(\"author\");\n+            var main = credentials.getHostedRepository(\"main\");\n+            var archive = credentials.getHostedRepository(\"archive\");\n@@ -1710,0 +1711,1 @@\n+            localRepo.push(masterHash, main.url(), \"master\", true);\n@@ -1715,1 +1717,1 @@\n-            var pr = credentials.createPullRequest(archive, \"master\", \"edit\", \"This is a pull request\");\n+            var pr = credentials.createPullRequest(author, main, \"master\", \"edit\", \"This is a pull request\");\n@@ -1742,1 +1744,1 @@\n-            assertTrue(archiveContains(archiveFolder.path(), \"has updated the pull request with a new target base\"));\n+            assertTrue(archiveContains(archiveFolder.path(), \"has refreshed the contents of this pull request, and previous commits have been removed.\"));\n@@ -1744,1 +1746,0 @@\n-            assertFalse(archiveContains(archiveFolder.path(), \"Incremental\"));\n@@ -1759,0 +1760,104 @@\n+            \/\/ Check that sender address is set properly\n+            var mailmanServer = MailingListServerFactory.createMailmanServer(listServer.getArchive(), listServer.getSMTP(), Duration.ZERO);\n+            var mailmanList = mailmanServer.getListReader(listAddress.address());\n+            var conversations = mailmanList.conversations(Duration.ofDays(1));\n+            assertEquals(1, conversations.size());\n+            for (var newMail : conversations.get(0).allMessages()) {\n+                assertEquals(sender.address(), newMail.author().address());\n+                assertEquals(listAddress, newMail.sender());\n+                assertFalse(newMail.hasHeader(\"PR-Head-Hash\"));\n+            }\n+            assertEquals(\"RFR: This is a pull request [v2]\", conversations.get(0).allMessages().get(1).subject());\n+        }\n+    }\n+\n+    @Test\n+    void rebased(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory();\n+             var archiveFolder = new TemporaryDirectory();\n+             var listServer = new TestMailmanServer();\n+             var webrevServer = new TestWebrevServer()) {\n+            var author = credentials.getHostedRepository(\"author\");\n+            var main = credentials.getHostedRepository(\"main\");\n+            var archive = credentials.getHostedRepository(\"archive\");\n+            var listAddress = EmailAddress.parse(listServer.createList(\"test\"));\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addAuthor(author.forge().currentUser().id());\n+            var sender = EmailAddress.from(\"test\", \"test@test.mail\");\n+            var mlBot = MailingListBridgeBot.newBuilder()\n+                    .from(sender)\n+                    .repo(author)\n+                    .archive(archive)\n+                    .censusRepo(censusBuilder.build())\n+                    .lists(List.of(new MailingListConfiguration(listAddress, Set.of())))\n+                    .listArchive(listServer.getArchive())\n+                    .smtpServer(listServer.getSMTP())\n+                    .webrevStorageHTMLRepository(archive)\n+                    .webrevStorageRef(\"webrev\")\n+                    .webrevStorageBase(Path.of(\"test\"))\n+                    .webrevStorageBaseUri(webrevServer.uri())\n+                    .issueTracker(URIBuilder.base(\"http:\/\/issues.test\/browse\/\").build())\n+                    .build();\n+\n+            \/\/ Populate the projects repository\n+            var reviewFile = Path.of(\"reviewfile.txt\");\n+            var localRepo = CheckableRepository.init(tempFolder.path().resolve(\"first\"), author.repositoryType(), reviewFile);\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+            localRepo.push(masterHash, main.url(), \"master\", true);\n+            localRepo.push(masterHash, archive.url(), \"webrev\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, \"Edit line\", \"Original msg\");\n+            localRepo.push(editHash, author.url(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, main, \"master\", \"edit\", \"This is a pull request\");\n+            pr.setBody(\"This is now ready\");\n+\n+            \/\/ Run an archive pass\n+            TestBotRunner.runPeriodicItems(mlBot);\n+            listServer.processIncoming();\n+\n+            \/\/ Add another change in the master\n+            localRepo.checkout(masterHash);\n+            var newMasterHash = CheckableRepository.appendAndCommit(localRepo, \"New master line\", \"New master commit message\");\n+            localRepo.push(newMasterHash, main.url(), \"master\");\n+            \/\/ Add a new \"rebased\" version of the edit change on top of the new master and force\n+            \/\/ push it to the PR. This should emulate a rebase.\n+            localRepo.push(newMasterHash, author.url(), \"master\");\n+            var newEditHash = CheckableRepository.appendAndCommit(localRepo, \"Edit line\", \"New edit commit message\");\n+            localRepo.push(newEditHash, author.url(), \"edit\", true);\n+\n+            \/\/ Make sure that the push registered\n+            var lastHeadHash = pr.headHash();\n+            var refreshCount = 0;\n+            do {\n+                pr = author.pullRequest(pr.id());\n+                if (refreshCount++ > 100) {\n+                    fail(\"The PR did not update after the new push\");\n+                }\n+            } while (pr.headHash().equals(lastHeadHash));\n+\n+            \/\/ Run another archive pass\n+            TestBotRunner.runPeriodicItems(mlBot);\n+            listServer.processIncoming();\n+\n+            \/\/ The archive should reference the rebased push\n+            Repository.materialize(archiveFolder.path(), archive.url(), \"master\");\n+            assertTrue(archiveContains(archiveFolder.path(), \"has updated the pull request with a new target base\"));\n+            assertTrue(archiveContains(archiveFolder.path(), pr.id() + \"\/01\"));\n+            assertFalse(archiveContains(archiveFolder.path(), \"Incremental\"));\n+            assertTrue(archiveContains(archiveFolder.path(), \"Patch\"));\n+            assertTrue(archiveContains(archiveFolder.path(), \"Fetch\"));\n+            assertTrue(archiveContains(archiveFolder.path(), \"Original msg\"));\n+            assertTrue(archiveContains(archiveFolder.path(), \"New edit commit message\"));\n+\n+            \/\/ The webrev comment should be updated\n+            var comments = pr.comments();\n+            var webrevComments = comments.stream()\n+                    .filter(comment -> comment.author().equals(author.forge().currentUser()))\n+                    .filter(comment -> comment.body().contains(\"webrev\"))\n+                    .filter(comment -> comment.body().contains(newEditHash.hex()))\n+                    .collect(Collectors.toList());\n+            assertEquals(1, webrevComments.size());\n+\n","filename":"bots\/mlbridge\/src\/test\/java\/org\/openjdk\/skara\/bots\/mlbridge\/MailingListBridgeBotTests.java","additions":111,"deletions":6,"binary":false,"changes":117,"status":"modified"},{"patch":"@@ -961,1 +961,1 @@\n-            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"Merge \" + author.name() + \"xyz\" + \":other\");\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"Merge \" + TestHost.NON_EXISTING_REPO + \":other\");\n@@ -981,1 +981,1 @@\n-            assertEquals(\"- Could not find project `\" + author.name() + \"xyz` - check that it is correct.\", check.summary().orElseThrow());\n+            assertEquals(\"- Could not find project `\" + TestHost.NON_EXISTING_REPO + \"` - check that it is correct.\", check.summary().orElseThrow());\n@@ -1081,1 +1081,1 @@\n-            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"Merge otherxyz\");\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"Merge \" + TestHost.NON_EXISTING_REPO);\n@@ -1101,1 +1101,1 @@\n-            assertEquals(\"- Could not find project `otherxyz` - check that it is correct.\", check.summary().orElseThrow());\n+            assertEquals(\"- Could not find project `\" + TestHost.NON_EXISTING_REPO + \"` - check that it is correct.\", check.summary().orElseThrow());\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/MergeTests.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-        HostedRepository getHostedRepository(Forge host);\n+        HostedRepository getHostedRepository(Forge host, String name);\n@@ -93,2 +93,2 @@\n-        public HostedRepository getHostedRepository(Forge host) {\n-            return host.repository(config.get(\"project\").asString()).orElseThrow();\n+        public HostedRepository getHostedRepository(Forge host, String name) {\n+            return host.repository(name != null ? name : config.get(\"project\").asString()).orElseThrow();\n@@ -130,2 +130,2 @@\n-        public HostedRepository getHostedRepository(Forge host) {\n-            return host.repository(config.get(\"project\").asString()).orElseThrow();\n+        public HostedRepository getHostedRepository(Forge host, String name) {\n+            return host.repository(name != null ? name : config.get(\"project\").asString()).orElseThrow();\n@@ -169,2 +169,2 @@\n-        public HostedRepository getHostedRepository(Forge host) {\n-            return repoCredentials.getHostedRepository(host);\n+        public HostedRepository getHostedRepository(Forge host, String name) {\n+            return repoCredentials.getHostedRepository(host, name);\n@@ -214,2 +214,2 @@\n-        public HostedRepository getHostedRepository(Forge host) {\n-            return host.repository(\"test\").orElseThrow();\n+        public HostedRepository getHostedRepository(Forge host, String name) {\n+            return host.repository(name != null ? name : \"test\").orElseThrow();\n@@ -335,0 +335,9 @@\n+        return getHostedRepository(null);\n+    }\n+\n+    \/**\n+     * Get a hosted repository with a specific name. Unless a unique name is\n+     * specified, the underlying git repository will be the same for each\n+     * HostedRepository.\n+     *\/\n+    public HostedRepository getHostedRepository(String name) throws IOException {\n@@ -336,1 +345,1 @@\n-        var repo = credentials.getHostedRepository(host);\n+        var repo = credentials.getHostedRepository(host, name);\n@@ -363,2 +372,3 @@\n-    public PullRequest createPullRequest(HostedRepository hostedRepository, String targetRef, String sourceRef, String title, List<String> body, boolean draft) {\n-        var pr = hostedRepository.createPullRequest(hostedRepository, targetRef, sourceRef, title, body, draft);\n+    public PullRequest createPullRequest(HostedRepository sourceRepository, HostedRepository targetRepository,\n+                                         String targetRef, String sourceRef, String title, List<String> body, boolean draft) {\n+        var pr = sourceRepository.createPullRequest(targetRepository, targetRef, sourceRef, title, body, draft);\n@@ -369,2 +379,10 @@\n-    public PullRequest createPullRequest(HostedRepository hostedRepository, String targetRef, String sourceRef, String title, boolean draft) {\n-        return createPullRequest(hostedRepository, targetRef, sourceRef, title, List.of(\"PR body\"), draft);\n+    public PullRequest createPullRequest(HostedRepository targetRepository, String targetRef, String sourceRef, String title, List<String> body, boolean draft) {\n+        return createPullRequest(targetRepository, targetRepository, targetRef, sourceRef, title, body, draft);\n+    }\n+\n+        public PullRequest createPullRequest(HostedRepository targetRepository, String targetRef, String sourceRef, String title, boolean draft) {\n+        return createPullRequest(targetRepository, targetRepository, targetRef, sourceRef, title, List.of(\"PR body\"), draft);\n+    }\n+\n+    public PullRequest createPullRequest(HostedRepository targetRepository, String targetRef, String sourceRef, String title, List<String> body) {\n+        return createPullRequest(targetRepository, targetRepository, targetRef, sourceRef, title, body, false);\n@@ -373,2 +391,2 @@\n-    public PullRequest createPullRequest(HostedRepository hostedRepository, String targetRef, String sourceRef, String title, List<String> body) {\n-        return createPullRequest(hostedRepository, targetRef, sourceRef, title, body, false);\n+    public PullRequest createPullRequest(HostedRepository targetRepository, String targetRef, String sourceRef, String title) {\n+        return createPullRequest(targetRepository, targetRepository, targetRef, sourceRef, title, List.of(\"PR body\"), false);\n@@ -377,2 +395,2 @@\n-    public PullRequest createPullRequest(HostedRepository hostedRepository, String targetRef, String sourceRef, String title) {\n-        return createPullRequest(hostedRepository, targetRef, sourceRef, title, List.of(\"PR body\"), false);\n+    public PullRequest createPullRequest(HostedRepository sourceRepository, HostedRepository targetRepository, String targetRef, String sourceRef, String title) {\n+        return createPullRequest(sourceRepository, targetRepository, targetRef, sourceRef, title, List.of(\"PR body\"), false);\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/HostCredentials.java","additions":36,"deletions":18,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -42,0 +42,7 @@\n+\n+    \/**\n+     * If test needs to name a repository that should not exist on the TestHost,\n+     * use this as the name of the repository.\n+     *\/\n+    public static final String NON_EXISTING_REPO = \"non-existing-repo\";\n+\n@@ -115,0 +122,3 @@\n+        if (NON_EXISTING_REPO.equals(name)) {\n+            return Optional.empty();\n+        }\n@@ -118,4 +128,0 @@\n-            if (data.repositories.size() > 0) {\n-                log.warning(\"A test host can only manage a single repository - reporting \" + name + \" as not found\");\n-                return Optional.empty();\n-            }\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestHost.java","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"}]}