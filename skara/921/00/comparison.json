{"files":[{"patch":"@@ -163,0 +163,1 @@\n+    boolean cherryPick(Hash hash) throws IOException;\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/Repository.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1552,0 +1552,11 @@\n+\n+    @Override\n+    public boolean cherryPick(Hash hash) throws IOException {\n+        try (var p = capture(\"git\", \"cherry-pick\", \"--no-commit\",\n+                                                   \"--keep-redundant-commits\",\n+                                                   \"--strategy=recursive\",\n+                                                   \"--strategy-option=patience\",\n+                                                   hash.hex())) {\n+            return p.await().status() == 0;\n+        }\n+    }\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/git\/GitRepository.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1457,0 +1457,7 @@\n+\n+    @Override\n+    public boolean cherryPick(Hash hash) throws IOException {\n+        try (var p = capture(\"hg\", \"graft\", \"--no-commit\", \"--force\", hash.hex())) {\n+            return p.await().status() == 0;\n+        }\n+    }\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/hg\/HgRepository.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2746,0 +2746,81 @@\n+\n+    @ParameterizedTest\n+    @EnumSource(VCS.class)\n+    void testSuccessfulCherryPicking(VCS vcs) throws IOException {\n+        try (var dir = new TemporaryDirectory()) {\n+            var r = Repository.init(dir.path(), vcs);\n+            assertTrue(r.isClean());\n+\n+            var readme = dir.path().resolve(\"README.md\");\n+            Files.writeString(readme, \"Hello world\\n\");\n+            r.add(readme);\n+            var initial = r.commit(\"Added readme\", \"duke\", \"duke@openjdk.java.net\");\n+\n+            Files.writeString(readme, \"Hello world\\nAgain\");\n+            r.add(readme);\n+            var second = r.commit(\"Updated readme\", \"duke\", \"duke@openjdk.java.net\");\n+\n+            var otherBranch = r.branch(initial, \"other\");\n+            r.checkout(otherBranch);\n+            var contributing = dir.path().resolve(\"CONTRIBUTING.md\");\n+            Files.writeString(contributing, \"Patches welcome!\\n\");\n+            r.add(contributing);\n+            var otherCommit = r.commit(\"Added contributing\", \"duke\", \"duke@openjdk.java.net\");\n+\n+            if (vcs == VCS.HG) {\n+                r.checkout(second);\n+            } else {\n+                r.checkout(r.defaultBranch());\n+            }\n+            var result = r.cherryPick(otherCommit);\n+            assertTrue(result);\n+\n+            var diff = r.diff(second);\n+            assertEquals(1, diff.patches().size());\n+            var patch = diff.patches().get(0);\n+            assertTrue(patch.status().isAdded());\n+            assertEquals(Path.of(\"CONTRIBUTING.md\"), patch.target().path().get());\n+        }\n+    }\n+\n+    @ParameterizedTest\n+    @EnumSource(VCS.class)\n+    void testFailingCherryPicking(VCS vcs) throws IOException {\n+        try (var dir = new TemporaryDirectory(false)) {\n+            var r = Repository.init(dir.path(), vcs);\n+            assertTrue(r.isClean());\n+\n+            var readme = dir.path().resolve(\"README.md\");\n+            Files.writeString(readme, \"Hello world\\n\");\n+            r.add(readme);\n+            var initial = r.commit(\"Added readme\", \"duke\", \"duke@openjdk.java.net\");\n+\n+            Files.writeString(readme, \"Hello world\\nAgain\");\n+            r.add(readme);\n+            var second = r.commit(\"Updated readme\", \"duke\", \"duke@openjdk.java.net\");\n+\n+            r.checkout(initial);\n+            var otherBranch = r.branch(initial, \"other\");\n+            r.checkout(otherBranch);\n+            Files.writeString(readme, \"Hello world\\nOne more time!\");\n+            r.add(readme);\n+            var otherCommit = r.commit(\"Modified readme\", \"duke\", \"duke@openjdk.java.net\");\n+\n+            if (vcs == VCS.HG) {\n+                r.checkout(second);\n+            } else {\n+                r.checkout(r.defaultBranch());\n+            }\n+            var result = r.cherryPick(otherCommit);\n+            assertFalse(result);\n+\n+            var diff = r.diff(second);\n+            assertEquals(1, diff.patches().size());\n+            var patch = diff.patches().get(0);\n+            assertTrue(patch.status().isModified());\n+            assertEquals(Path.of(\"README.md\"), patch.target().path().get());\n+\n+            r.revert(second);\n+            assertEquals(List.of(), r.diff(second).patches());\n+        }\n+    }\n","filename":"vcs\/src\/test\/java\/org\/openjdk\/skara\/vcs\/RepositoryTests.java","additions":81,"deletions":0,"binary":false,"changes":81,"status":"modified"}]}