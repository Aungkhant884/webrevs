{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -206,0 +206,1 @@\n+                .filter(pr -> !pr.isDraft())\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/MailingListBridgeBot.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -3440,0 +3440,116 @@\n+\n+    @Test\n+    void notArchiveDraftPR(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory();\n+             var archiveFolder = new TemporaryDirectory();\n+             var listServer = new TestMailmanServer();\n+             var webrevServer = new TestWebrevServer()) {\n+            var author = credentials.getHostedRepository();\n+            var archive = credentials.getHostedRepository();\n+            var ignored = credentials.getHostedRepository();\n+            var listAddress = EmailAddress.parse(listServer.createList(\"test\"));\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addAuthor(author.forge().currentUser().id());\n+            var from = EmailAddress.from(\"test\", \"test@test.mail\");\n+            var mlBot = MailingListBridgeBot.newBuilder()\n+                    .from(from)\n+                    .repo(author)\n+                    .archive(archive)\n+                    .censusRepo(censusBuilder.build())\n+                    .lists(List.of(new MailingListConfiguration(listAddress, Set.of())))\n+                    .ignoredUsers(Set.of(ignored.forge().currentUser().username()))\n+                    .ignoredComments(Set.of())\n+                    .listArchive(listServer.getArchive())\n+                    .smtpServer(listServer.getSMTP())\n+                    .webrevStorageHTMLRepository(archive)\n+                    .webrevStorageRef(\"webrev\")\n+                    .webrevStorageBase(Path.of(\"test\"))\n+                    .webrevStorageBaseUri(webrevServer.uri())\n+                    .readyLabels(Set.of(\"rfr\"))\n+                    .readyComments(Map.of(ignored.forge().currentUser().username(), Pattern.compile(\"ready\")))\n+                    .issueTracker(URIBuilder.base(\"http:\/\/issues.test\/browse\/\").build())\n+                    .headers(Map.of(\"Extra1\", \"val1\", \"Extra2\", \"val2\"))\n+                    .sendInterval(Duration.ZERO)\n+                    .build();\n+\n+            \/\/ Populate the repository.\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+            localRepo.push(masterHash, archive.url(), \"webrev\", true);\n+\n+            \/\/ Make a change with a corresponding PR.\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, \"A simple change\",\n+                    \"Change msg\\n\\nWith several lines\");\n+            localRepo.push(editHash, author.url(), \"edit\", true);\n+            var pr = credentials.createPullRequest(archive, \"master\", \"edit\", \"1234: This is a pull request\");\n+            pr.setBody(\"This is not ready now\");\n+\n+            \/\/ Make it as draft, now the PR is not ready.\n+            pr.makeDraft();\n+\n+            \/\/ Run an archive pass.\n+            TestBotRunner.runPeriodicItems(mlBot);\n+\n+            \/\/ A draft PR should not be archived.\n+            Repository.materialize(archiveFolder.path(), archive.url(), \"master\");\n+            assertFalse(archiveContains(archiveFolder.path(), \"This is a pull request\"));\n+\n+            \/\/ Make it as not draft.\n+            pr.makeNotDraft();\n+\n+            \/\/ Flag it as ready for review.\n+            pr.setBody(\"This should be ready now\");\n+            pr.addLabel(\"rfr\");\n+\n+            \/\/ Post a ready comment.\n+            var ignoredPr = ignored.pullRequest(pr.id());\n+            ignoredPr.addComment(\"ready\");\n+\n+            \/\/ Run another archive pass.\n+            TestBotRunner.runPeriodicItems(mlBot);\n+\n+            \/\/ The archive should now contain an entry.\n+            Repository.materialize(archiveFolder.path(), archive.url(), \"master\");\n+            assertEquals(1, archiveContainsCount(archiveFolder.path(), \"RFR: 1234: This is a pull request\"));\n+\n+            \/\/ Add a comment.\n+            pr.addComment(\"This is a comment\");\n+\n+            \/\/ Run another archive pass.\n+            TestBotRunner.runPeriodicItems(mlBot);\n+\n+            \/\/ The archive should now contain the comment.\n+            Repository.materialize(archiveFolder.path(), archive.url(), \"master\");\n+            assertEquals(2, archiveContainsCount(archiveFolder.path(), \"RFR: 1234: This is a pull request\"));\n+            assertEquals(1, archiveContainsCount(archiveFolder.path(), \"This is a comment\"));\n+\n+            \/\/ Make it as draft again.\n+            pr.makeDraft();\n+\n+            \/\/ Add a new comment.\n+            pr.addComment(\"This is a new comment\");\n+\n+            \/\/ Run another archive pass.\n+            TestBotRunner.runPeriodicItems(mlBot);\n+\n+            \/\/ The archive should not now contain the new comment.\n+            Repository.materialize(archiveFolder.path(), archive.url(), \"master\");\n+            assertEquals(2, archiveContainsCount(archiveFolder.path(), \"RFR: 1234: This is a pull request\"));\n+            assertEquals(1, archiveContainsCount(archiveFolder.path(), \"This is a comment\"));\n+            assertFalse(archiveContains(archiveFolder.path(), \"This is a new comment\"));\n+\n+            \/\/ Make it as not draft again.\n+            pr.makeNotDraft();\n+\n+            \/\/ Run another archive pass.\n+            TestBotRunner.runPeriodicItems(mlBot);\n+\n+            \/\/ The archive should now contain the new comment.\n+            Repository.materialize(archiveFolder.path(), archive.url(), \"master\");\n+            assertEquals(3, archiveContainsCount(archiveFolder.path(), \"RFR: 1234: This is a pull request\"));\n+            assertEquals(1, archiveContainsCount(archiveFolder.path(), \"This is a comment\"));\n+            assertEquals(1, archiveContainsCount(archiveFolder.path(), \"This is a new comment\"));\n+        }\n+    }\n","filename":"bots\/mlbridge\/src\/test\/java\/org\/openjdk\/skara\/bots\/mlbridge\/MailingListBridgeBotTests.java","additions":117,"deletions":1,"binary":false,"changes":118,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -228,0 +228,4 @@\n+    public void makeDraft() {\n+        store().setDraft(true);\n+    }\n+\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestPullRequest.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"}]}