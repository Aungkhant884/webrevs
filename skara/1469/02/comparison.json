{"files":[{"patch":"@@ -120,1 +120,1 @@\n-    private boolean ignoreComment(HostUser author, String body) {\n+    private boolean ignoreComment(HostUser author, String body, ZonedDateTime createdTime, ZonedDateTime lastDraftTime) {\n@@ -141,0 +141,7 @@\n+        \/\/ If the pull request was converted to draft, the comments\n+        \/\/ after the last converted time should be ignored.\n+        if (pr.isDraft()) {\n+            if (lastDraftTime != null && lastDraftTime.isBefore(createdTime)) {\n+                return true;\n+            }\n+        }\n@@ -338,0 +345,1 @@\n+            var lastDraftTime = pr.lastMarkedAsDraftTime().orElse(null);\n@@ -341,1 +349,1 @@\n-                if (ignoreComment(comment.author(), comment.body())) {\n+                if (ignoreComment(comment.author(), comment.body(), comment.createdAt(), lastDraftTime)) {\n@@ -351,1 +359,1 @@\n-                if (ignoreComment(review.reviewer(), review.body().orElse(\"\"))) {\n+                if (ignoreComment(review.reviewer(), review.body().orElse(\"\"), review.createdAt(), lastDraftTime)) {\n@@ -363,1 +371,1 @@\n-                if (ignoreComment(reviewComment.author(), reviewComment.body())) {\n+                if (ignoreComment(reviewComment.author(), reviewComment.body(), reviewComment.createdAt(), lastDraftTime)) {\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/ArchiveWorkItem.java","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -3440,0 +3440,146 @@\n+\n+    @Test\n+    void notArchiveDraftPR(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory();\n+             var archiveFolder = new TemporaryDirectory();\n+             var listServer = new TestMailmanServer();\n+             var webrevServer = new TestWebrevServer()) {\n+            var author = credentials.getHostedRepository();\n+            var archive = credentials.getHostedRepository();\n+            var ignored = credentials.getHostedRepository();\n+            var listAddress = EmailAddress.parse(listServer.createList(\"test\"));\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addAuthor(author.forge().currentUser().id());\n+            var from = EmailAddress.from(\"test\", \"test@test.mail\");\n+            var mlBot = MailingListBridgeBot.newBuilder()\n+                    .from(from)\n+                    .repo(author)\n+                    .archive(archive)\n+                    .censusRepo(censusBuilder.build())\n+                    .lists(List.of(new MailingListConfiguration(listAddress, Set.of())))\n+                    .ignoredUsers(Set.of(ignored.forge().currentUser().username()))\n+                    .ignoredComments(Set.of())\n+                    .listArchive(listServer.getArchive())\n+                    .smtpServer(listServer.getSMTP())\n+                    .webrevStorageHTMLRepository(archive)\n+                    .webrevStorageRef(\"webrev\")\n+                    .webrevStorageBase(Path.of(\"test\"))\n+                    .webrevStorageBaseUri(webrevServer.uri())\n+                    .readyLabels(Set.of(\"rfr\"))\n+                    .readyComments(Map.of(ignored.forge().currentUser().username(), Pattern.compile(\"ready\")))\n+                    .issueTracker(URIBuilder.base(\"http:\/\/issues.test\/browse\/\").build())\n+                    .headers(Map.of(\"Extra1\", \"val1\", \"Extra2\", \"val2\"))\n+                    .sendInterval(Duration.ZERO)\n+                    .build();\n+\n+            \/\/ Populate the repository.\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+            localRepo.push(masterHash, archive.url(), \"webrev\", true);\n+\n+            \/\/ Make a change with a corresponding PR.\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, \"A simple change\",\n+                    \"Change msg\\n\\nWith several lines\");\n+            localRepo.push(editHash, author.url(), \"edit\", true);\n+            var pr = credentials.createPullRequest(archive, \"master\", \"edit\", \"1234: This is a pull request\");\n+            pr.setBody(\"This is not ready now\");\n+\n+            \/\/ Make it as draft, now the PR is not ready.\n+            pr.makeDraft();\n+\n+            \/\/ Run an archive pass.\n+            TestBotRunner.runPeriodicItems(mlBot);\n+\n+            \/\/ A draft PR should not be archived.\n+            Repository.materialize(archiveFolder.path(), archive.url(), \"master\");\n+            assertFalse(archiveContains(archiveFolder.path(), \"This is a pull request\"));\n+\n+            \/\/ Make it as not draft.\n+            pr.makeNotDraft();\n+\n+            \/\/ Flag it as ready for review.\n+            pr.setBody(\"This should be ready now\");\n+            pr.addLabel(\"rfr\");\n+\n+            \/\/ Post a ready comment.\n+            var ignoredPr = ignored.pullRequest(pr.id());\n+            ignoredPr.addComment(\"ready\");\n+\n+            \/\/ Run another archive pass.\n+            TestBotRunner.runPeriodicItems(mlBot);\n+\n+            \/\/ The archive should now contain an entry.\n+            Repository.materialize(archiveFolder.path(), archive.url(), \"master\");\n+            assertEquals(1, archiveContainsCount(archiveFolder.path(), \"RFR: 1234: This is a pull request\"));\n+\n+            \/\/ Add a comment.\n+            pr.addComment(\"This is a comment\");\n+\n+            \/\/ Run another archive pass.\n+            TestBotRunner.runPeriodicItems(mlBot);\n+\n+            \/\/ The archive should now contain the comment.\n+            Repository.materialize(archiveFolder.path(), archive.url(), \"master\");\n+            assertEquals(2, archiveContainsCount(archiveFolder.path(), \"RFR: 1234: This is a pull request\"));\n+            assertEquals(1, archiveContainsCount(archiveFolder.path(), \"This is a comment\"));\n+\n+            \/\/ Make it as draft again.\n+            pr.makeDraft();\n+\n+            \/\/ Add a new comment.\n+            pr.addComment(\"This is a new comment\");\n+\n+            \/\/ Run another archive pass.\n+            TestBotRunner.runPeriodicItems(mlBot);\n+\n+            \/\/ The archive should not now contain the new comment.\n+            Repository.materialize(archiveFolder.path(), archive.url(), \"master\");\n+            assertEquals(2, archiveContainsCount(archiveFolder.path(), \"RFR: 1234: This is a pull request\"));\n+            assertEquals(1, archiveContainsCount(archiveFolder.path(), \"This is a comment\"));\n+            assertFalse(archiveContains(archiveFolder.path(), \"This is a new comment\"));\n+\n+            \/\/ Make it as not draft again.\n+            pr.makeNotDraft();\n+\n+            \/\/ Run another archive pass.\n+            TestBotRunner.runPeriodicItems(mlBot);\n+\n+            \/\/ The archive should now contain the new comment.\n+            Repository.materialize(archiveFolder.path(), archive.url(), \"master\");\n+            assertEquals(3, archiveContainsCount(archiveFolder.path(), \"RFR: 1234: This is a pull request\"));\n+            assertEquals(1, archiveContainsCount(archiveFolder.path(), \"This is a comment\"));\n+            assertEquals(1, archiveContainsCount(archiveFolder.path(), \"This is a new comment\"));\n+\n+            \/\/ Add a new comment before making it as draft.\n+            pr.addComment(\"This is a comment before making\");\n+\n+            \/\/ Make it as draft again.\n+            pr.makeDraft();\n+\n+            \/\/ Add a new comment after making it as draft.\n+            pr.addComment(\"This is a comment after making\");\n+\n+            \/\/ Run another archive pass.\n+            TestBotRunner.runPeriodicItems(mlBot);\n+\n+            \/\/ The archive should only contain the comments before making it as draft.\n+            Repository.materialize(archiveFolder.path(), archive.url(), \"master\");\n+            assertEquals(4, archiveContainsCount(archiveFolder.path(), \"RFR: 1234: This is a pull request\"));\n+            assertEquals(1, archiveContainsCount(archiveFolder.path(), \"This is a comment before making\"));\n+            assertFalse(archiveContains(archiveFolder.path(), \"This is a comment after making\"));\n+\n+            \/\/ Make it as not draft again.\n+            pr.makeNotDraft();\n+\n+            \/\/ Run another archive pass.\n+            TestBotRunner.runPeriodicItems(mlBot);\n+\n+            \/\/ The archive should now contain all the comments.\n+            Repository.materialize(archiveFolder.path(), archive.url(), \"master\");\n+            assertEquals(5, archiveContainsCount(archiveFolder.path(), \"RFR: 1234: This is a pull request\"));\n+            assertEquals(1, archiveContainsCount(archiveFolder.path(), \"This is a comment before making\"));\n+            assertEquals(1, archiveContainsCount(archiveFolder.path(), \"This is a comment after making\"));\n+        }\n+    }\n","filename":"bots\/mlbridge\/src\/test\/java\/org\/openjdk\/skara\/bots\/mlbridge\/MailingListBridgeBotTests.java","additions":147,"deletions":1,"binary":false,"changes":148,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -296,0 +296,5 @@\n+    @Override\n+    public Optional<ZonedDateTime> lastMarkedAsDraftTime() {\n+        return Optional.empty();\n+    }\n+\n","filename":"bots\/tester\/src\/test\/java\/org\/openjdk\/skara\/bots\/tester\/InMemoryPullRequest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -166,0 +166,10 @@\n+    \/**\n+     * Return the last time the pull request was converted to draft.\n+     * If the pull request was created as draft, return the created time of the pull request.\n+     * If the pull request was always ready for review and never converted to draft, return empty.\n+     * If the restful api doesn't support draft pull request, return empty.\n+     * Note: if the pull request was created as draft, but later converted to ready\n+     *  and didn't convert to draft again, this method will return empty.\n+     *\/\n+    Optional<ZonedDateTime> lastMarkedAsDraftTime();\n+\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/PullRequest.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -706,0 +706,14 @@\n+    @Override\n+    public Optional<ZonedDateTime> lastMarkedAsDraftTime() {\n+        var lastMarkedAsDraftTime = request.get(\"issues\/\" + json.get(\"number\").toString() + \"\/timeline\")                .execute().stream()\n+                .map(JSONValue::asObject)\n+                .filter(obj -> obj.contains(\"event\"))\n+                .filter(obj -> obj.get(\"event\").asString().equals(\"convert_to_draft\"))\n+                .map(obj -> ZonedDateTime.parse(obj.get(\"created_at\").asString()))\n+                .reduce((a, b) -> a.isBefore(b) ? b : a);\n+        if (lastMarkedAsDraftTime.isEmpty() && isDraft()) {\n+            return Optional.of(createdAt());\n+        }\n+        return lastMarkedAsDraftTime;\n+    }\n+\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubPullRequest.java","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -784,0 +784,16 @@\n+    @Override\n+    public Optional<ZonedDateTime> lastMarkedAsDraftTime() {\n+        var draftMessage = \"marked this merge request as **draft**\";\n+        var notes = request.get(\"notes\").execute();\n+        var lastMarkedAsDraftTime = notes.stream()\n+                .map(JSONValue::asObject)\n+                .filter(obj -> obj.get(\"system\").asBoolean())\n+                .filter(obj -> draftMessage.equals(obj.get(\"body\").asString()))\n+                .map(obj -> ZonedDateTime.parse(obj.get(\"created_at\").asString()))\n+                .reduce((a, b) -> a.isBefore(b) ? b : a);\n+        if (lastMarkedAsDraftTime.isEmpty() && isDraft()) {\n+            return Optional.of(createdAt());\n+        }\n+        return lastMarkedAsDraftTime;\n+    }\n+\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabMergeRequest.java","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -214,0 +214,10 @@\n+\n+    @Test\n+    void testLastMarkedAsDraftTime() {\n+        var githubRepoOpt = githubHost.repository(\"openjdk\/playground\");\n+        assumeTrue(githubRepoOpt.isPresent());\n+        var githubRepo = githubRepoOpt.get();\n+        var pr = githubRepo.pullRequest(\"129\");\n+        var lastMarkedAsDraftTime = pr.lastMarkedAsDraftTime();\n+        assertEquals(\"2023-02-11T11:51:12Z\", lastMarkedAsDraftTime.get().toString());\n+    }\n","filename":"forge\/src\/test\/java\/org\/openjdk\/skara\/forge\/github\/GitHubRestApiTests.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -221,0 +221,15 @@\n+\n+    @Test\n+    void testLastMarkedAsDraftTime() throws IOException {\n+        var settings = ManualTestSettings.loadManualTestSettings();\n+        var username = settings.getProperty(\"gitlab.user\");\n+        var token = settings.getProperty(\"gitlab.pat\");\n+        var credential = new Credential(username, token);\n+        var uri = URIBuilder.base(settings.getProperty(\"gitlab.uri\")).build();\n+        var gitLabHost = new GitLabHost(\"gitlab\", uri, false, credential, Set.of());\n+        var gitLabRepo = gitLabHost.repository(settings.getProperty(\"gitlab.repository\")).orElseThrow();\n+        var gitLabMergeRequest = gitLabRepo.pullRequest(settings.getProperty(\"gitlab.merge.request.id\"));\n+\n+        var lastMarkedAsDraftTime = gitLabMergeRequest.lastMarkedAsDraftTime();\n+        assertEquals(\"2023-02-11T08:43:52.408Z\", lastMarkedAsDraftTime.get().toString());\n+    }\n","filename":"forge\/src\/test\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabRestApiTest.java","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -228,0 +228,9 @@\n+    public void makeDraft() {\n+        store().setDraft(true);\n+    }\n+\n+    @Override\n+    public Optional<ZonedDateTime> lastMarkedAsDraftTime() {\n+        return Optional.ofNullable(store().lastMarkedAsDraftTime());\n+    }\n+\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestPullRequest.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,0 +51,1 @@\n+    private ZonedDateTime lastMarkedAsDraftTime;\n@@ -59,1 +60,3 @@\n-        if (!draft) {\n+        if (draft) {\n+            lastMarkedAsDraftTime = ZonedDateTime.now();\n+        } else {\n@@ -132,1 +135,3 @@\n-        if (!draft) {\n+        if (draft) {\n+            lastMarkedAsDraftTime = ZonedDateTime.now();\n+        } else {\n@@ -144,0 +149,4 @@\n+\n+    public ZonedDateTime lastMarkedAsDraftTime() {\n+        return lastMarkedAsDraftTime;\n+    }\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestPullRequestStore.java","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"}]}