{"files":[{"patch":"@@ -49,1 +49,3 @@\n-        undefer\n+        undefer,\n+        delegate,\n+        undelegate\n@@ -53,1 +55,1 @@\n-        reply.println(\"usage: `\/integrate [auto|manual|defer|undefer|<hash>]`\");\n+        reply.println(\"usage: `\/integrate [auto|manual|delegate|undelegate<hash>]`\");\n@@ -102,1 +104,1 @@\n-            if (pr.labelNames().contains(\"deferred\")) {\n+            if (pr.labelNames().contains(\"delegated\")) {\n@@ -105,1 +107,1 @@\n-                    reply.print(\"Only project committers are allowed to issue the `integrate` command on a deferred pull request.\");\n+                    reply.print(\"Only project committers are allowed to issue the `integrate` command on a delegated pull request.\");\n@@ -140,3 +142,6 @@\n-        } else if (commandArg == Command.defer) {\n-            pr.addLabel(\"deferred\");\n-            reply.println(\"Integration of this pull request has been deferred and may be completed by any project committer using the \" +\n+        } else if (commandArg == Command.defer || commandArg == Command.delegate) {\n+            pr.addLabel(\"delegated\");\n+            if (commandArg == Command.defer) {\n+                reply.println(\"FutureWarning: \/integrate defer is deprecated and will be moved in a future version. Use \/integrate delegate instead.\");\n+            }\n+            reply.println(\"Integration of this pull request has been delegated and may be completed by any project committer using the \" +\n@@ -145,3 +150,6 @@\n-        } else if (commandArg == Command.undefer) {\n-            if (pr.labelNames().contains(\"deferred\")) {\n-                reply.println(\"Integration of this pull request is no longer deferred and may only be integrated by the author (@\" + pr.author().username() + \")using the \" +\n+        } else if (commandArg == Command.undefer || commandArg == Command.undelegate) {\n+            if (commandArg == Command.undefer) {\n+                reply.println(\"FutureWarning: \/integrate undefer is deprecated and will be moved in a future version. Use \/integrate undelegate instead.\");\n+            }\n+            if (pr.labelNames().contains(\"delegated\")) {\n+                reply.println(\"Integration of this pull request is no longer delegated and may only be integrated by the author (@\" + pr.author().username() + \")using the \" +\n@@ -149,1 +157,1 @@\n-                pr.removeLabel(\"deferred\");\n+                pr.removeLabel(\"delegated\");\n@@ -327,2 +335,2 @@\n-        if (pr.labelNames().contains(\"deferred\")) {\n-            pr.removeLabel(\"deferred\");\n+        if (pr.labelNames().contains(\"delegated\")) {\n+            pr.removeLabel(\"delegated\");\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/IntegrateCommand.java","additions":21,"deletions":13,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -1311,1 +1311,1 @@\n-    void defer(TestInfo testInfo) throws IOException {\n+    void delegate(TestInfo testInfo) throws IOException {\n@@ -1342,2 +1342,1 @@\n-\n-            \/\/ Issue \/integrate defer command and verify the PR gets deferred\n+            \/\/ Issue \/integrate defer command and verify deprecated message is printed and the PR gets delegated\n@@ -1347,1 +1346,17 @@\n-                    .filter(comment -> comment.body().contains(\"Integration of this pull request has been deferred\"))\n+                    .filter(comment -> comment.body().contains(\"Integration of this pull request has been delegated\"))\n+                    .count();\n+            var deprecated = authorPr.comments().stream()\n+                    .filter(comment -> comment.body().contains(\"\/integrate defer is deprecated\"))\n+                    .count();\n+            assertEquals(1, deferred, \"Missing delegated message\");\n+            assertEquals(1, deprecated, \"Missing deprecated message\");\n+            assertTrue(authorPr.store().labelNames().contains(\"delegated\"));\n+\n+            \/\/ Issue \/integrate undefer and verify deprecated message is printed the PR is no longer delegated\n+            authorPr.addComment(\"\/integrate undefer\");\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+            var undeferred = authorPr.comments().stream()\n+                    .filter(comment -> comment.body().contains(\"Integration of this pull request is no longer delegated and may only be integrated by the author\"))\n+                    .count();\n+            deprecated = authorPr.comments().stream()\n+                    .filter(comment -> comment.body().contains(\"\/integrate undefer is deprecated\"))\n@@ -1349,2 +1364,13 @@\n-            assertEquals(1, deferred, \"Missing deferred message\");\n-            assertTrue(authorPr.store().labelNames().contains(\"deferred\"));\n+            assertEquals(1, undeferred, \"Missing undelegated message\");\n+            assertEquals(1, deprecated, \"Missing deprecated message\");\n+            assertFalse(authorPr.store().labelNames().contains(\"delegated\"));\n+\n+\n+            \/\/ Issue \/integrate delegate command and verify the PR gets delegated\n+            authorPr.addComment(\"\/integrate delegate\");\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+            var delegated = authorPr.comments().stream()\n+                    .filter(comment -> comment.body().contains(\"Integration of this pull request has been delegated\"))\n+                    .count();\n+            assertEquals(2, delegated, \"Missing delegated message\");\n+            assertTrue(authorPr.store().labelNames().contains(\"delegated\"));\n@@ -1358,1 +1384,1 @@\n-                            .contains(\"Only project committers are allowed to issue the `integrate` command on a deferred pull request.\"))\n+                            .contains(\"Only project committers are allowed to issue the `integrate` command on a delegated pull request.\"))\n@@ -1362,2 +1388,2 @@\n-            \/\/ Issue \/integrate undefer and verify the PR is no longer deferred\n-            authorPr.addComment(\"\/integrate undefer\");\n+            \/\/ Issue \/integrate undelegate and verify the PR is no longer delegated\n+            authorPr.addComment(\"\/integrate undelegate\");\n@@ -1365,2 +1391,2 @@\n-            var undeferred = authorPr.comments().stream()\n-                    .filter(comment -> comment.body().contains(\"Integration of this pull request is no longer deferred and may only be integrated by the author\"))\n+            var undelegated = authorPr.comments().stream()\n+                    .filter(comment -> comment.body().contains(\"Integration of this pull request is no longer delegated and may only be integrated by the author\"))\n@@ -1368,2 +1394,2 @@\n-            assertEquals(1, undeferred, \"Missing undeferred message\");\n-            assertFalse(authorPr.store().labelNames().contains(\"deferred\"));\n+            assertEquals(2, undelegated, \"Missing undelegated message\");\n+            assertFalse(authorPr.store().labelNames().contains(\"delegated\"));\n@@ -1371,1 +1397,1 @@\n-            \/\/ Try integrating as another committer, which should fail since the PR is currently not deferred\n+            \/\/ Try integrating as another committer, which should fail since the PR is currently not delegated\n@@ -1381,2 +1407,2 @@\n-            \/\/ Defer again\n-            authorPr.addComment(\"\/integrate defer\");\n+            \/\/ Delegate again\n+            authorPr.addComment(\"\/integrate delegate\");\n@@ -1384,1 +1410,1 @@\n-            assertTrue(authorPr.store().labelNames().contains(\"deferred\"));\n+            assertTrue(authorPr.store().labelNames().contains(\"delegated\"));\n@@ -1413,1 +1439,1 @@\n-            \/\/ Ready and deferred labels should have been removed\n+            \/\/ Ready and delegated labels should have been removed\n@@ -1415,1 +1441,1 @@\n-            assertFalse(authorPr.store().labelNames().contains(\"deferred\"));\n+            assertFalse(authorPr.store().labelNames().contains(\"delegated\"));\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/IntegrateTests.java","additions":45,"deletions":19,"binary":false,"changes":64,"status":"modified"}]}