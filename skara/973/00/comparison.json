{"files":[{"patch":"@@ -64,0 +64,1 @@\n+    private static final String diffDiffMarker = \"<!-- PullRequestBot diff-diff comment -->\";\n@@ -898,0 +899,34 @@\n+            } else if (original.isPresent()) {\n+                var originalDiff = original.get().parentDiffs().get(0);\n+                var prDiff = pr.diff();\n+                var diffDiff = DiffComparator.diff(originalDiff, prDiff);\n+\n+                var lines = new ArrayList<String>();\n+                lines.add(diffDiffMarker);\n+                for (var patch : diffDiff.patches()) {\n+                    lines.add(\"- **`\" + patch.target().path().orElseThrow() + \"`**\");\n+                    lines.add(\"   ```diff\");\n+                    if (patch.isBinary()) {\n+                        lines.add(\"   Binary files differ\");\n+                    } else {\n+                        for (var hunk : patch.asTextualPatch().hunks()) {\n+                            lines.add(\"   @@ \" + hunk.source().range().toString() + \" \" +\n+                                      hunk.target().range().toString() + \" @@\");\n+                            for (var line : hunk.source().lines()) {\n+                                lines.add(\"   - \" + line);\n+                            }\n+                            for (var line : hunk.target().lines()) {\n+                                lines.add(\"   + \" + line);\n+                            }\n+                        }\n+                    }\n+                    lines.add(\"   ```\");\n+                }\n+\n+                var body = String.join(\"\\n\", lines);\n+                var diffDiffComment = findComment(comments, diffDiffMarker);\n+                if (diffDiffComment.isEmpty()) {\n+                    pr.addComment(body);\n+                } else {\n+                    pr.updateComment(diffDiffComment.get().id(), body);\n+                }\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.util.stream.Collectors;\n@@ -30,0 +31,104 @@\n+    public static Diff diff(Diff a, Diff b) throws IOException {\n+        Path tmpDir = null;\n+        try {\n+            tmpDir = Files.createTempDirectory(null);\n+            var repo = Repository.init(tmpDir, VCS.GIT);\n+\n+            var aDeleted = a.patches().stream()\n+                                      .filter(Patch::isTextual)\n+                                      .filter(p -> p.status().isDeleted())\n+                                      .map(p -> p.source().path().orElseThrow())\n+                                      .collect(Collectors.toSet());\n+            var bDeleted = b.patches().stream()\n+                                      .filter(Patch::isTextual)\n+                                      .filter(p -> p.status().isDeleted())\n+                                      .map(p -> p.source().path().orElseThrow())\n+                                      .collect(Collectors.toSet());\n+\n+            for (var patch : a.patches()) {\n+                if (patch.status().isDeleted() || patch.isBinary()) {\n+                    continue;\n+                }\n+\n+                var path = tmpDir.resolve(patch.target().path().orElseThrow());\n+                var lines = new ArrayList<String>();\n+                for (var hunk : patch.asTextualPatch().hunks()) {\n+                    var start = hunk.target().range().start();\n+                    for (var i = lines.size(); i < start; i++) {\n+                        lines.add(\"\");\n+                    }\n+                    for (var i = 0; i < hunk.target().lines().size(); i++) {\n+                        lines.add(hunk.target().lines().get(i));\n+                    }\n+                }\n+                Files.createDirectories(path.getParent());\n+                Files.write(path, lines);\n+                repo.add(path);\n+            }\n+            var aHash = repo.commit(\"a\", \"a\", \"a@localhost\", true);\n+\n+            Files.walk(repo.root())\n+                 .filter(p -> !p.toString().contains(\".git\"))\n+                 .map(Path::toFile)\n+                 .sorted(Comparator.reverseOrder())\n+                 .forEach(File::delete);\n+\n+            var additionalPatches = new ArrayList<Patch>();\n+            for (var patch : a.patches()) {\n+                if (patch.status().isDeleted() && !bDeleted.contains(patch.source().path().get())) {\n+                    if (patch.isBinary()) {\n+                        continue;\n+                    }\n+                    var path = tmpDir.resolve(patch.source().path().get());\n+                    var hunks = patch.asTextualPatch().hunks();\n+                    if (hunks.size() != 1) {\n+                        throw new IllegalStateException(\"A deleted patch should only have one hunk\");\n+                    }\n+                    var hunk = hunks.get(0);\n+                    Files.write(path, hunk.source().lines());\n+                    repo.add(path);\n+                }\n+            }\n+            for (var patch : b.patches()) {\n+                if (patch.status().isDeleted() && !aDeleted.contains(patch.source().path().get())) {\n+                    additionalPatches.add(patch);\n+                }\n+            }\n+\n+            for (var patch : b.patches()) {\n+                if (patch.status().isDeleted() || patch.isBinary()) {\n+                    continue;\n+                }\n+\n+                var path = tmpDir.resolve(patch.target().path().orElseThrow());\n+                var lines = new ArrayList<String>();\n+                for (var hunk : patch.asTextualPatch().hunks()) {\n+                    var start = hunk.target().range().start();\n+                    for (var i = lines.size(); i < start; i++) {\n+                        lines.add(\"\");\n+                    }\n+                    for (var i = 0; i < hunk.target().lines().size(); i++) {\n+                        lines.add(hunk.target().lines().get(i));\n+                    }\n+                }\n+                Files.write(path, lines);\n+                repo.add(path);\n+            }\n+            var bHash = repo.commit(\"b\", \"b\", \"b@localhost\", true);\n+\n+            var diffDiff = repo.diff(aHash, bHash);\n+            diffDiff.patches().addAll(additionalPatches);\n+            return diffDiff;\n+        } finally {\n+            if (tmpDir != null) {\n+                Files.walk(tmpDir)\n+                     .map(Path::toFile)\n+                     .sorted(Comparator.reverseOrder())\n+                     .forEach(File::delete);\n+                if (Files.exists(tmpDir)) {\n+                    Files.delete(tmpDir);\n+                }\n+            }\n+        }\n+    }\n+\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/DiffComparator.java","additions":105,"deletions":0,"binary":false,"changes":105,"status":"modified"},{"patch":"@@ -94,0 +94,5 @@\n+    default Hash commit(String message,\n+                String authorName,\n+                String authorEmail) throws IOException {\n+        return commit(message, authorName, authorEmail, false);\n+    }\n@@ -96,1 +101,8 @@\n-                String authorEmail) throws IOException;\n+                String authorEmail,\n+                boolean allowEmpty) throws IOException;\n+    default Hash commit(String message,\n+                String authorName,\n+                String authorEmail,\n+                ZonedDateTime date) throws IOException {\n+        return commit(message, authorName, authorEmail, date, false);\n+    }\n@@ -100,1 +112,9 @@\n-                ZonedDateTime date) throws IOException;\n+                ZonedDateTime date,\n+                boolean allowEmpty) throws IOException;\n+    default Hash commit(String message,\n+                String authorName,\n+                String authorEmail,\n+                String committerName,\n+                String committerEmail) throws IOException {\n+        return commit(message, authorName, authorEmail, committerName, committerEmail, false);\n+    }\n@@ -105,1 +125,11 @@\n-                String committerEmail) throws IOException;\n+                String committerEmail,\n+                boolean allowEmpty) throws IOException;\n+    default Hash commit(String message,\n+                String authorName,\n+                String authorEmail,\n+                ZonedDateTime authorDate,\n+                String committerName,\n+                String committerEmail,\n+                ZonedDateTime committerDate) throws IOException {\n+        return commit(message, authorName, authorEmail, authorDate, committerName, committerEmail, committerDate, false);\n+    }\n@@ -112,1 +142,2 @@\n-                ZonedDateTime committerDate) throws IOException;\n+                ZonedDateTime committerDate,\n+                boolean allowEmpty) throws IOException;\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/Repository.java","additions":35,"deletions":4,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -693,2 +693,2 @@\n-    public Hash commit(String message, String authorName, String authorEmail)  throws IOException {\n-        return commit(message, authorName, authorEmail, null);\n+    public Hash commit(String message, String authorName, String authorEmail, boolean allowEmpty)  throws IOException {\n+        return commit(message, authorName, authorEmail, null, allowEmpty);\n@@ -698,2 +698,2 @@\n-    public Hash commit(String message, String authorName, String authorEmail, ZonedDateTime authorDate)  throws IOException {\n-        return commit(message, authorName, authorEmail, authorDate, authorName, authorEmail, authorDate);\n+    public Hash commit(String message, String authorName, String authorEmail, ZonedDateTime authorDate, boolean allowEmpty)  throws IOException {\n+        return commit(message, authorName, authorEmail, authorDate, authorName, authorEmail, authorDate, allowEmpty);\n@@ -707,2 +707,3 @@\n-                       String committerEmail) throws IOException {\n-        return commit(message, authorName, authorEmail, null, committerName, committerEmail, null);\n+                       String committerEmail,\n+                       boolean allowEmpty) throws IOException {\n+        return commit(message, authorName, authorEmail, null, committerName, committerEmail, null, allowEmpty);\n@@ -718,2 +719,8 @@\n-                       ZonedDateTime committerDate) throws IOException {\n-        var cmd = Process.capture(\"git\", \"commit\", \"--message=\" + message)\n+                       ZonedDateTime committerDate,\n+                       boolean allowEmpty) throws IOException {\n+        var args = new ArrayList<String>();\n+        args.addAll(List.of(\"git\", \"commit\", \"--message=\" + message));\n+        if (allowEmpty) {\n+            args.add(\"--allow-empty\");\n+        }\n+        var cmd = Process.capture(args.toArray(new String[0]))\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/git\/GitRepository.java","additions":15,"deletions":8,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -627,1 +627,1 @@\n-    public Hash commit(String message, String authorName, String authorEmail)  throws IOException {\n+    public Hash commit(String message, String authorName, String authorEmail, boolean allowEmpty)  throws IOException {\n@@ -632,1 +632,1 @@\n-    public Hash commit(String message, String authorName, String authorEmail, ZonedDateTime authorDate)  throws IOException {\n+    public Hash commit(String message, String authorName, String authorEmail, ZonedDateTime authorDate, boolean allowEmpty)  throws IOException {\n@@ -651,1 +651,2 @@\n-                       String committerEmail) throws IOException {\n+                       String committerEmail,\n+                       boolean allowEmpty) throws IOException {\n@@ -662,1 +663,2 @@\n-                       ZonedDateTime committerDate) throws IOException {\n+                       ZonedDateTime committerDate,\n+                       boolean allowEmpty) throws IOException {\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/hg\/HgRepository.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,193 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.vcs;\n+\n+import org.openjdk.skara.test.TemporaryDirectory;\n+\n+import java.io.*;\n+import java.nio.file.*;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class DiffComparatorTests {\n+    @Test\n+    void simpleAdd() throws IOException {\n+        var ft = FileType.fromOctal(\"100644\");\n+        var path = Path.of(\"README\");\n+        var hash = Hash.zero();\n+        var status = Status.from('A');\n+\n+        var aHunks = new ArrayList<Hunk>();\n+        aHunks.add(new Hunk(new Range(0, 0), List.of(),\n+                            new Range(0, 1), List.of(\"Hello, world\")));\n+        var aPatches = new ArrayList<Patch>();\n+        aPatches.add(new TextualPatch(path, ft, hash,\n+                                      path, ft, hash,\n+                                      status, aHunks));\n+        var aDiff = new Diff(hash, hash, aPatches);\n+\n+        var bHunks = new ArrayList<Hunk>();\n+        bHunks.add(new Hunk(new Range(0, 0), List.of(),\n+                            new Range(0, 2), List.of(\"Hello, world\", \"Hello again!\")));\n+        var bPatches = new ArrayList<Patch>();\n+        bPatches.add(new TextualPatch(path, ft, hash,\n+                                      path, ft, hash,\n+                                      status, bHunks));\n+        var bDiff = new Diff(hash, hash, bPatches);\n+\n+        var diffDiff = DiffComparator.diff(aDiff, bDiff);\n+        var diffDiffPatches = diffDiff.patches();\n+        assertEquals(1, diffDiffPatches.size());\n+        assertTrue(diffDiffPatches.get(0).isTextual());\n+\n+        var diffDiffPatch = diffDiffPatches.get(0).asTextualPatch();\n+        assertTrue(diffDiffPatch.status().isModified());\n+        assertEquals(Optional.of(path), diffDiffPatch.source().path());\n+        assertEquals(Optional.of(path), diffDiffPatch.target().path());\n+\n+        var diffDiffHunks = diffDiffPatch.hunks();\n+        assertEquals(1, diffDiffHunks.size());\n+        var diffDiffHunk = diffDiffHunks.get(0);\n+        assertEquals(List.of(), diffDiffHunk.source().lines());\n+        assertEquals(List.of(\"Hello again!\"), diffDiffHunk.target().lines());\n+        assertEquals(new Range(2, 0), diffDiffHunk.source().range());\n+        assertEquals(new Range(2, 1), diffDiffHunk.target().range());\n+    }\n+\n+    @Test\n+    void simpleRemoval() throws IOException {\n+        var ft = FileType.fromOctal(\"100644\");\n+        var path = Path.of(\"README\");\n+        var hash = Hash.zero();\n+        var status = Status.from('A');\n+\n+        var aHunks = new ArrayList<Hunk>();\n+        aHunks.add(new Hunk(new Range(0, 0), List.of(),\n+                            new Range(0, 1), List.of(\"Hello, world\", \"Hello again!\")));\n+        var aPatches = new ArrayList<Patch>();\n+        aPatches.add(new TextualPatch(path, ft, hash,\n+                                      path, ft, hash,\n+                                      status, aHunks));\n+        var aDiff = new Diff(hash, hash, aPatches);\n+\n+        var bHunks = new ArrayList<Hunk>();\n+        bHunks.add(new Hunk(new Range(0, 0), List.of(),\n+                            new Range(0, 2), List.of(\"Hello, world\")));\n+        var bPatches = new ArrayList<Patch>();\n+        bPatches.add(new TextualPatch(path, ft, hash,\n+                                      path, ft, hash,\n+                                      status, bHunks));\n+        var bDiff = new Diff(hash, hash, bPatches);\n+\n+        var diffDiff = DiffComparator.diff(aDiff, bDiff);\n+        var diffDiffPatches = diffDiff.patches();\n+        assertEquals(1, diffDiffPatches.size());\n+        assertTrue(diffDiffPatches.get(0).isTextual());\n+\n+        var diffDiffPatch = diffDiffPatches.get(0).asTextualPatch();\n+        assertTrue(diffDiffPatch.status().isModified());\n+        assertEquals(Optional.of(path), diffDiffPatch.source().path());\n+        assertEquals(Optional.of(path), diffDiffPatch.target().path());\n+\n+        var diffDiffHunks = diffDiffPatch.hunks();\n+        assertEquals(1, diffDiffHunks.size());\n+        var diffDiffHunk = diffDiffHunks.get(0);\n+        assertEquals(List.of(\"Hello again!\"), diffDiffHunk.source().lines());\n+        assertEquals(List.of(), diffDiffHunk.target().lines());\n+        assertEquals(new Range(2, 1), diffDiffHunk.source().range());\n+        assertEquals(new Range(2, 0), diffDiffHunk.target().range());\n+    }\n+\n+    @Test\n+    void removalOfSameFile() throws IOException {\n+        var ft = FileType.fromOctal(\"100644\");\n+        var path1 = Path.of(\"README1\");\n+        var path2 = Path.of(\"README1\");\n+        var hash = Hash.zero();\n+        var status = Status.from('D');\n+\n+        var aHunks = new ArrayList<Hunk>();\n+        aHunks.add(new Hunk(new Range(1, 1), List.of(\"Hello world\"),\n+                            new Range(1, 0), List.of()));\n+        var aPatches = new ArrayList<Patch>();\n+        aPatches.add(new TextualPatch(path1, ft, hash,\n+                                      path1, ft, hash,\n+                                      status, aHunks));\n+        var aDiff = new Diff(hash, hash, aPatches);\n+\n+        var bHunks = new ArrayList<Hunk>();\n+        bHunks.add(new Hunk(new Range(1, 1), List.of(\"Hello world\"),\n+                            new Range(1, 0), List.of()));\n+        var bPatches = new ArrayList<Patch>();\n+        bPatches.add(new TextualPatch(path2, ft, hash,\n+                                      path2, ft, hash,\n+                                      status, bHunks));\n+        var bDiff = new Diff(hash, hash, bPatches);\n+\n+        var diffDiff = DiffComparator.diff(aDiff, bDiff);\n+        var diffDiffPatches = diffDiff.patches();\n+        assertEquals(List.of(), diffDiffPatches);\n+    }\n+\n+    @Test\n+    void removalOfDifferentFile() throws IOException {\n+        var ft = FileType.fromOctal(\"100644\");\n+        var path1 = Path.of(\"README1\");\n+        var path2 = Path.of(\"README2\");\n+        var hash = Hash.zero();\n+        var status = Status.from('D');\n+\n+        var aHunks = new ArrayList<Hunk>();\n+        aHunks.add(new Hunk(new Range(1, 1), List.of(\"Hello world\"),\n+                            new Range(1, 0), List.of()));\n+        var aPatches = new ArrayList<Patch>();\n+        aPatches.add(new TextualPatch(path1, ft, hash,\n+                                      path1, ft, hash,\n+                                      status, aHunks));\n+        var aDiff = new Diff(hash, hash, aPatches);\n+\n+        var bHunks = new ArrayList<Hunk>();\n+        bHunks.add(new Hunk(new Range(1, 1), List.of(\"Hello world\"),\n+                            new Range(1, 0), List.of()));\n+        var bPatches = new ArrayList<Patch>();\n+        bPatches.add(new TextualPatch(path2, ft, hash,\n+                                      path2, ft, hash,\n+                                      status, bHunks));\n+        var bDiff = new Diff(hash, hash, bPatches);\n+\n+        var diffDiff = DiffComparator.diff(aDiff, bDiff);\n+        var diffDiffPatches = diffDiff.patches();\n+        assertEquals(2, diffDiffPatches.size());\n+\n+        var added = diffDiffPatches.get(0);\n+        assertTrue(added.status().isAdded());\n+        assertEquals(Optional.of(path1), added.target().path());\n+\n+        var deleted = diffDiffPatches.get(1);\n+        assertTrue(deleted.status().isDeleted());\n+        assertEquals(Optional.of(path2), deleted.source().path());\n+    }\n+}\n","filename":"vcs\/src\/test\/java\/org\/openjdk\/skara\/vcs\/DiffComparatorTests.java","additions":193,"deletions":0,"binary":false,"changes":193,"status":"added"}]}