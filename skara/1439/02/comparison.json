{"files":[{"patch":"@@ -1062,0 +1062,1 @@\n+            List<String> secondJCheckMessage = new ArrayList<>();\n@@ -1081,1 +1082,18 @@\n-                checkablePullRequest.executeChecks(localHash, censusInstance, visitor, additionalConfiguration);\n+                checkablePullRequest.executeChecks(localHash, censusInstance, visitor, additionalConfiguration, checkablePullRequest.targetHash());\n+                \/\/ Don't need to run the second round if confOverride is set.\n+                if (workItem.bot.confOverrideRepository().isEmpty() && isFileUpdated(\".jcheck\/conf\", localHash)) {\n+                    try {\n+                        PullRequestCheckIssueVisitor visitor2 = checkablePullRequest.createVisitorUsingHeadHash();\n+                        log.info(\"Run jcheck again with the updated configuration\");\n+                        checkablePullRequest.executeChecks(localHash, censusInstance, visitor2, additionalConfiguration, pr.headHash());\n+                        secondJCheckMessage.addAll(visitor2.messages().stream()\n+                                .map(StringBuilder::new)\n+                                .map(e -> e.append(\" (failed with the updated jcheck configuration)\"))\n+                                .map(StringBuilder::toString)\n+                                .toList());\n+                    } catch (Exception e) {\n+                        var message = e.getMessage() + \" (exception thrown when running jcheck with updated jcheck configuration)\";\n+                        log.warning(message);\n+                        secondJCheckMessage.add(message);\n+                    }\n+                }\n@@ -1089,0 +1107,1 @@\n+            integrationBlockers.addAll(secondJCheckMessage);\n@@ -1181,0 +1200,7 @@\n+\n+    private boolean isFileUpdated(String filename, Hash hash) throws IOException {\n+        return localRepo.commits(hash.hex()).asList().stream()\n+                .anyMatch(commit -> commit.parentDiffs().stream()\n+                        .anyMatch(diff -> diff.patches().stream()\n+                                .anyMatch(patch -> patch.toString().contains(filename))));\n+    }\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":27,"deletions":1,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -203,1 +203,7 @@\n-    void executeChecks(Hash localHash, CensusInstance censusInstance, PullRequestCheckIssueVisitor visitor, List<String> additionalConfiguration) throws IOException {\n+    PullRequestCheckIssueVisitor createVisitorUsingHeadHash() throws IOException {\n+        var checks = JCheck.checksFor(localRepo, pr.headHash());\n+        return new PullRequestCheckIssueVisitor(checks);\n+    }\n+\n+    void executeChecks(Hash localHash, CensusInstance censusInstance, PullRequestCheckIssueVisitor visitor,\n+                       List<String> additionalConfiguration, Hash hash) throws IOException {\n@@ -208,1 +214,1 @@\n-            conf = JCheck.parseConfiguration(localRepo, targetHash(), additionalConfiguration);\n+            conf = JCheck.parseConfiguration(localRepo, hash, additionalConfiguration);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckablePullRequest.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -264,1 +264,1 @@\n-        checkablePr.executeChecks(localHash, censusInstance, issues, additionalConfiguration);\n+        checkablePr.executeChecks(localHash, censusInstance, issues, additionalConfiguration, checkablePr.targetHash());\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/IntegrateCommand.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2193,5 +2193,3 @@\n-            try (var output = new FileWriter(tempFolder.path().resolve(\".jcheck\/conf\").toFile(), true)) {\n-                output.append(\"\\n[checks \\\"problemlists\\\"]\\n\");\n-                output.append(\"dirs=test\/jdk\\n\");\n-            }\n-\n+            var checkConf = tempFolder.path().resolve(\".jcheck\/conf\");\n+            Files.writeString(checkConf, \"\\n[checks \\\"problemlists\\\"]\\n\", StandardOpenOption.APPEND);\n+            Files.writeString(checkConf, \"dirs=test\/jdk\\n\", StandardOpenOption.APPEND);\n@@ -2201,3 +2199,1 @@\n-            try (var output = Files.newBufferedWriter(problemList)) {\n-                output.append(\"test 1 windows-all\");\n-            }\n+            Files.writeString(problemList, \"test 1 windows-all\", StandardOpenOption.CREATE);\n@@ -2308,4 +2304,3 @@\n-            try (var output = new FileWriter(tempFolder.path().resolve(\".jcheck\/conf\").toFile(), true)) {\n-                output.append(\"\\nRandomCharacters\");\n-            }\n-            localRepo.add(tempFolder.path().resolve(\".jcheck\/conf\"));\n+            var checkConf = tempFolder.path().resolve(\".jcheck\/conf\");\n+            Files.writeString(checkConf, \"\\nRandomCharacters\", StandardOpenOption.APPEND);\n+            localRepo.add(checkConf);\n@@ -2336,1 +2331,0 @@\n-            var checkConf = tempFolder.path().resolve(\".jcheck\/conf\");\n@@ -2438,3 +2432,1 @@\n-            try (var output = new FileWriter(checkConf.toFile(), true)) {\n-                output.append(\"\\nRandomCharacters\");\n-            }\n+            Files.writeString(checkConf, \"\\nRandomCharacters\", StandardOpenOption.CREATE);\n@@ -2678,0 +2670,128 @@\n+\n+    @Test\n+    void testRunJcheckTwice(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addAuthor(author.forge().currentUser().id())\n+                    .addReviewer(reviewer.forge().currentUser().id());\n+            var seedFolder = tempFolder.path().resolve(\"seed\");\n+            var checkBot = PullRequestBot.newBuilder()\n+                    .repo(author)\n+                    .censusRepo(censusBuilder.build())\n+                    .censusLink(\"https:\/\/census.com\/{{contributor}}-profile\")\n+                    .seedStorage(seedFolder)\n+                    .build();\n+\n+            \/\/ Populate the projects repository\n+            \/\/ set the .jcheck\/conf without whitespace check\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType(), Path.of(\"appendable.txt\"), Set.of(\"author\", \"reviewers\"), \"0.1\");\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR, add a line with whitespace issue\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, \"An additional line\\r\\n\");\n+            localRepo.push(editHash, author.url(), \"refs\/heads\/edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"This is a pull request\");\n+\n+            \/\/ Check the status\n+            TestBotRunner.runPeriodicItems(checkBot);\n+\n+            \/\/ Verify that the check succeeded\n+            var checks = pr.checks(editHash);\n+            assertEquals(1, checks.size());\n+            var check = checks.get(\"jcheck\");\n+            assertEquals(CheckStatus.SUCCESS, check.status());\n+            \/\/ pr body should not have the process for whitespace\n+            assertFalse(pr.store().body().contains(\"whitespace\"));\n+\n+            \/\/ Add whitespace check to .jcheck\/conf\n+            var checkConf = tempFolder.path().resolve(\".jcheck\/conf\");\n+            writeToCheckConf(checkConf);\n+            localRepo.add(checkConf);\n+            var updateHash = localRepo.commit(\"enable whitespace issue check\", \"testauthor\", \"ta@none.none\");\n+            localRepo.push(updateHash, author.url(), \"edit\", true);\n+\n+            TestBotRunner.runPeriodicItems(checkBot);\n+\n+            \/\/ pr body should have the integrationBlocker for whitespace and reviewer check\n+            assertTrue(pr.store().body().contains(\"Whitespace errors (failed with the updated jcheck configuration)\"));\n+            assertTrue(pr.store().body().contains(\"Too few reviewers with at least role reviewer found (have 0, need at least 1) (failed with the updated jcheck configuration)\"));\n+\n+            var approvalPr = reviewer.pullRequest(pr.id());\n+            approvalPr.addReview(Review.Verdict.APPROVED, \"Approved\");\n+            TestBotRunner.runPeriodicItems(checkBot);\n+\n+            \/\/ \/\/ pr body should only have the integrationBlocker for whitespace check\n+            assertTrue(pr.store().body().contains(\"Whitespace errors (failed with the updated jcheck configuration)\"));\n+            assertFalse(pr.store().body().contains(\"Too few reviewers with at least role reviewer found (have 0, need at least 1) (failed with the updated jcheck configuration)\"));\n+        }\n+    }\n+\n+    @Test\n+    void testRunJcheckTwiceWithBadConfiguration(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addAuthor(author.forge().currentUser().id())\n+                    .addReviewer(reviewer.forge().currentUser().id());\n+            var seedFolder = tempFolder.path().resolve(\"seed\");\n+            var checkBot = PullRequestBot.newBuilder()\n+                    .repo(author)\n+                    .censusRepo(censusBuilder.build())\n+                    .censusLink(\"https:\/\/census.com\/{{contributor}}-profile\")\n+                    .seedStorage(seedFolder)\n+                    .build();\n+\n+            \/\/ Populate the projects repository\n+            \/\/ set the .jcheck\/conf without whitespace check\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType(), Path.of(\"appendable.txt\"), Set.of(\"author\", \"reviewers\"), \"0.1\");\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR, add a line with whitespace issue\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, \"An additional line\\r\\n\");\n+            localRepo.push(editHash, author.url(), \"refs\/heads\/edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"This is a pull request\");\n+\n+            \/\/ Check the status\n+            TestBotRunner.runPeriodicItems(checkBot);\n+\n+            \/\/ Verify that the check succeeded\n+            var checks = pr.checks(editHash);\n+            assertEquals(1, checks.size());\n+            var check = checks.get(\"jcheck\");\n+            assertEquals(CheckStatus.SUCCESS, check.status());\n+            \/\/ pr body should not have the process for whitespace\n+            assertFalse(pr.store().body().contains(\"whitespace\"));\n+\n+            \/\/ Make .jcheck\/conf invalid\n+            var checkConf = tempFolder.path().resolve(\".jcheck\/conf\");\n+            Files.writeString(checkConf, \"\\nRandomCharacters\", StandardOpenOption.APPEND);\n+            localRepo.add(checkConf);\n+            var updateHash = localRepo.commit(\"make .jcheck\/conf invalid\", \"testauthor\", \"ta@none.none\");\n+            localRepo.push(updateHash, author.url(), \"edit\", true);\n+\n+            TestBotRunner.runPeriodicItems(checkBot);\n+\n+            \/\/ pr body should have the integrationBlocker for exception\n+            assertTrue(pr.store().body().contains(\"(exception thrown when running jcheck with updated jcheck configuration)\"));\n+\n+            \/\/ Restore .jcheck\/conf and add whitespace issue check\n+            writeToCheckConf(checkConf);\n+            localRepo.add(checkConf);\n+            updateHash = localRepo.commit(\"enable whitespace issue check\", \"testauthor\", \"ta@none.none\");\n+            localRepo.push(updateHash, author.url(), \"edit\", true);\n+\n+            TestBotRunner.runPeriodicItems(checkBot);\n+            \/\/ pr body should have the integrationBlocker for whitespace and reviewer check\n+            assertTrue(pr.store().body().contains(\"Whitespace errors (failed with the updated jcheck configuration)\"));\n+            assertTrue(pr.store().body().contains(\"Too few reviewers with at least role reviewer found (have 0, need at least 1) (failed with the updated jcheck configuration)\"));\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CheckTests.java","additions":136,"deletions":16,"binary":false,"changes":152,"status":"modified"},{"patch":"@@ -168,0 +168,1 @@\n+        localRepo.fetch(pr.repository().url(), \"+\" + pr.sourceRef() + \":prutils_sourceref\", false);\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/PullRequestUtils.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}