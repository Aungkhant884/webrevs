{"files":[{"patch":"@@ -1083,1 +1083,2 @@\n-                if (localRepo.isFileUpdated(\".jcheck\/conf\")) {\n+                \/\/ Don't need to run the second round if confOverride is set.\n+                if (workItem.bot.confOverrideRepository().isEmpty() && localRepo.isFileUpdated(\".jcheck\/conf\", localHash)) {\n@@ -1090,1 +1091,1 @@\n-                                .map(e -> e.append(\"(failed with the updated jcheck configuration)\"))\n+                                .map(e -> e.append(\" (failed with the updated jcheck configuration)\"))\n@@ -1094,1 +1095,3 @@\n-                        secondJCheckMessage.add(e.getMessage() + \"(exception thrown when running jcheck with updated jcheck configuration)\");\n+                        var message = e.getMessage() + \" (exception thrown when running jcheck with updated jcheck configuration)\";\n+                        log.warning(message);\n+                        secondJCheckMessage.add(message);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2193,5 +2193,3 @@\n-            try (var output = new FileWriter(tempFolder.path().resolve(\".jcheck\/conf\").toFile(), true)) {\n-                output.append(\"\\n[checks \\\"problemlists\\\"]\\n\");\n-                output.append(\"dirs=test\/jdk\\n\");\n-            }\n-\n+            var checkConf = tempFolder.path().resolve(\".jcheck\/conf\");\n+            Files.writeString(checkConf, \"\\n[checks \\\"problemlists\\\"]\\n\", StandardOpenOption.APPEND);\n+            Files.writeString(checkConf, \"dirs=test\/jdk\\n\", StandardOpenOption.APPEND);\n@@ -2201,3 +2199,1 @@\n-            try (var output = Files.newBufferedWriter(problemList)) {\n-                output.append(\"test 1 windows-all\");\n-            }\n+            Files.writeString(problemList, \"test 1 windows-all\", StandardOpenOption.CREATE);\n@@ -2308,4 +2304,3 @@\n-            try (var output = new FileWriter(tempFolder.path().resolve(\".jcheck\/conf\").toFile(), true)) {\n-                output.append(\"\\nRandomCharacters\");\n-            }\n-            localRepo.add(tempFolder.path().resolve(\".jcheck\/conf\"));\n+            var checkConf = tempFolder.path().resolve(\".jcheck\/conf\");\n+            Files.writeString(checkConf, \"\\nRandomCharacters\", StandardOpenOption.APPEND);\n+            localRepo.add(checkConf);\n@@ -2336,1 +2331,0 @@\n-            var checkConf = tempFolder.path().resolve(\".jcheck\/conf\");\n@@ -2438,3 +2432,1 @@\n-            try (var output = new FileWriter(checkConf.toFile(), true)) {\n-                output.append(\"\\nRandomCharacters\");\n-            }\n+            Files.writeString(checkConf, \"\\nRandomCharacters\", StandardOpenOption.CREATE);\n@@ -2729,2 +2721,2 @@\n-            assertTrue(pr.store().body().contains(\"Whitespace errors(failed with the updated jcheck configuration)\"));\n-            assertTrue(pr.store().body().contains(\"Too few reviewers with at least role reviewer found (have 0, need at least 1)(failed with the updated jcheck configuration)\"));\n+            assertTrue(pr.store().body().contains(\"Whitespace errors (failed with the updated jcheck configuration)\"));\n+            assertTrue(pr.store().body().contains(\"Too few reviewers with at least role reviewer found (have 0, need at least 1) (failed with the updated jcheck configuration)\"));\n@@ -2737,2 +2729,2 @@\n-            assertTrue(pr.store().body().contains(\"Whitespace errors(failed with the updated jcheck configuration)\"));\n-            assertFalse(pr.store().body().contains(\"Too few reviewers with at least role reviewer found (have 0, need at least 1)(failed with the updated jcheck configuration)\"));\n+            assertTrue(pr.store().body().contains(\"Whitespace errors (failed with the updated jcheck configuration)\"));\n+            assertFalse(pr.store().body().contains(\"Too few reviewers with at least role reviewer found (have 0, need at least 1) (failed with the updated jcheck configuration)\"));\n@@ -2784,3 +2776,1 @@\n-            try (var output = new FileWriter(checkConf.toFile(), true)) {\n-                output.append(\"\\nRandomCharacters\");\n-            }\n+            Files.writeString(checkConf, \"\\nRandomCharacters\", StandardOpenOption.APPEND);\n@@ -2804,2 +2794,2 @@\n-            assertTrue(pr.store().body().contains(\"Whitespace errors(failed with the updated jcheck configuration)\"));\n-            assertTrue(pr.store().body().contains(\"Too few reviewers with at least role reviewer found (have 0, need at least 1)(failed with the updated jcheck configuration)\"));\n+            assertTrue(pr.store().body().contains(\"Whitespace errors (failed with the updated jcheck configuration)\"));\n+            assertTrue(pr.store().body().contains(\"Too few reviewers with at least role reviewer found (have 0, need at least 1) (failed with the updated jcheck configuration)\"));\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CheckTests.java","additions":15,"deletions":25,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -367,1 +367,1 @@\n-    public boolean isFileUpdated(String filename) throws IOException {\n+    public boolean isFileUpdated(String filename, Hash h) throws IOException {\n","filename":"jcheck\/src\/test\/java\/org\/openjdk\/skara\/jcheck\/TestRepository.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -187,1 +187,1 @@\n-    boolean isFileUpdated(String filename) throws IOException;\n+    boolean isFileUpdated(String filename, Hash h) throws IOException;\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/ReadOnlyRepository.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1725,10 +1725,6 @@\n-    public boolean isFileUpdated(String filename) throws IOException {\n-        try (var p = capture(\"git\", \"log\", \"--raw\", \"-1\")) {\n-            var lines = await(p).stdout();\n-            for (var line : lines) {\n-                if (line.contains(filename)) {\n-                    return true;\n-                }\n-            }\n-        }\n-        return false;\n+    public boolean isFileUpdated(String filename, Hash h) throws IOException {\n+        return commits().asList().stream()\n+                .filter(commit -> commit.hash().equals(h))\n+                .anyMatch(commit -> commit.parentDiffs().stream()\n+                        .anyMatch(diff -> diff.patches().stream()\n+                                .anyMatch(patch -> patch.toString().contains(filename))));\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/git\/GitRepository.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -1528,1 +1528,1 @@\n-    public boolean isFileUpdated(String filename) throws IOException {\n+    public boolean isFileUpdated(String filename, Hash h) throws IOException {\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/hg\/HgRepository.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}