{"files":[{"patch":"@@ -50,1 +50,2 @@\n-    approve;\n+    approve,\n+    author;\n","filename":"bots\/common\/src\/main\/java\/org\/openjdk\/skara\/bots\/common\/CommandNameEnum.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,137 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bots.pr;\n+\n+import org.openjdk.skara.email.EmailAddress;\n+import org.openjdk.skara.forge.PullRequest;\n+import org.openjdk.skara.issuetracker.Comment;\n+\n+import java.io.PrintWriter;\n+import java.util.*;\n+import java.util.regex.Pattern;\n+\n+import static org.openjdk.skara.bots.common.CommandNameEnum.author;\n+\n+public class AuthorCommand implements CommandHandler {\n+    private static final Pattern COMMAND_PATTERN = Pattern.compile(\"^(set|remove)?\\\\s*(.+)?$\");\n+\n+    private void showHelp(PrintWriter reply) {\n+        reply.println(\"Syntax: `\/author [set|remove] [@user | openjdk-user | Full Name <email@address>]`. For example:\");\n+        reply.println();\n+        reply.println(\" * `\/author set @openjdk-bot`\");\n+        reply.println(\" * `\/author set duke`\");\n+        reply.println(\" * `\/author set J. Duke <duke@openjdk.org>`\");\n+        reply.println(\" * `\/author @openjdk-bot`\");\n+        reply.println(\" * `\/author remove @openjdk-bot`\");\n+        reply.println(\" * `\/author remove`\");\n+        reply.println();\n+        reply.println(\"User names can only be used for users in the census associated with this repository. \" +\n+                \"For other authors you need to supply the full name and email address.\");\n+    }\n+\n+    @Override\n+    public void handle(PullRequestBot bot, PullRequest pr, CensusInstance censusInstance, ScratchArea scratchArea, CommandInvocation command, List<Comment> allComments, PrintWriter reply) {\n+        if (!command.user().equals(pr.author())) {\n+            reply.println(\"Only the pull request author (@\" + pr.author().username() + \") is allowed to issue the `author` command.\");\n+            return;\n+        }\n+\n+        if (!censusInstance.isCommitter(pr.author())) {\n+            reply.println(\"Only [Committers](https:\/\/openjdk.org\/bylaws#committer) are allowed to issue the `author` command.\");\n+            return;\n+        }\n+\n+        var matcher = COMMAND_PATTERN.matcher(command.args());\n+        if (!matcher.matches()) {\n+            showHelp(reply);\n+            return;\n+        }\n+\n+        String option = matcher.group(1);\n+        if (option == null) {\n+            option = \"set\";\n+        }\n+\n+        String authorArg = matcher.group(2);\n+\n+        switch (option) {\n+            case \"set\": {\n+                if (authorArg == null) {\n+                    reply.println();\n+                    showHelp(reply);\n+                    return;\n+                }\n+                var author = ContributorCommand.parseUser(authorArg, pr, censusInstance, reply);\n+                if (author.isEmpty()) {\n+                    reply.println();\n+                    showHelp(reply);\n+                    return;\n+                }\n+                reply.println(Authors.setAuthorMarker(author.get()));\n+                reply.println(\"Setting overriding author to `\" + author.get() + \"`. When this pull request is integrated, the overriding author will be used in the commit.\");\n+                break;\n+            }\n+            case \"remove\": {\n+                var currAuthor = Authors.author(pr.repository().forge().currentUser(), allComments);\n+                Optional<EmailAddress> author;\n+                if (authorArg == null) {\n+                    author = currAuthor;\n+                } else {\n+                    author = ContributorCommand.parseUser(authorArg, pr, censusInstance, reply);\n+                    if (author.isEmpty()) {\n+                        reply.println();\n+                        showHelp(reply);\n+                        return;\n+                    }\n+                }\n+                if (currAuthor.isEmpty()) {\n+                    reply.println(\"There is no author set in this pull request.\");\n+                } else {\n+                    if (currAuthor.get().equals(author.get())) {\n+                        reply.println(Authors.removeAuthorMarker(author.get()));\n+                        reply.println(\"Author `\" + author.get() + \"` successfully removed.\");\n+                    } else {\n+                        reply.println(\"`\" + author.get() + \"` was not set to this pull request's author.\");\n+                        reply.println(\"Current author of this pull request is set to: `\" + currAuthor.get() + \"`\");\n+                    }\n+                }\n+                break;\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public String description() {\n+        return \"sets or removes author for a PR\";\n+    }\n+\n+    @Override\n+    public String name() {\n+        return author.name();\n+    }\n+\n+    @Override\n+    public boolean allowedInBody() {\n+        return true;\n+    }\n+}\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/AuthorCommand.java","additions":137,"deletions":0,"binary":false,"changes":137,"status":"added"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bots.pr;\n+\n+import org.openjdk.skara.email.EmailAddress;\n+import org.openjdk.skara.host.*;\n+import org.openjdk.skara.issuetracker.Comment;\n+\n+import java.util.*;\n+import java.util.regex.*;\n+\n+class Authors {\n+    private static final String SET_MARKER = \"<!-- set author: '%s' -->\";\n+    private static final String REMOVE_MARKER = \"<!-- remove author: '%s' -->\";\n+    private static final Pattern MARKER_PATTERN = Pattern.compile(\"<!-- (set|remove) author: '(.*?)' -->\");\n+\n+    static String setAuthorMarker(EmailAddress author) {\n+        return String.format(SET_MARKER, author.toString());\n+    }\n+\n+    static String removeAuthorMarker(EmailAddress author) {\n+        return String.format(REMOVE_MARKER, author.toString());\n+    }\n+\n+    static Optional<EmailAddress> author(HostUser botUser, List<Comment> comments) {\n+        var authorActions = comments.stream()\n+                .filter(comment -> comment.author().equals(botUser))\n+                .map(comment -> MARKER_PATTERN.matcher(comment.body()))\n+                .filter(Matcher::find)\n+                .toList();\n+        Optional<EmailAddress> author = Optional.empty();\n+        for (var action : authorActions) {\n+            switch (action.group(1)) {\n+                case \"set\":\n+                    author = Optional.of(EmailAddress.parse(action.group(2)));\n+                    break;\n+                case \"remove\":\n+                    author = Optional.empty();\n+                    break;\n+            }\n+        }\n+\n+        return author;\n+    }\n+}\n+\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/Authors.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"},{"patch":"@@ -181,0 +181,5 @@\n+        var authorSet = Authors.author(pr.repository().forge().currentUser(), pr.comments());\n+        if (authorSet.isPresent()) {\n+            author = new Author(authorSet.get().fullName().orElse(\"\"), authorSet.get().address());\n+        }\n+\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckablePullRequest.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -68,1 +68,2 @@\n-            Map.entry(approve.name(), new ApproveCommand())\n+            Map.entry(approve.name(), new ApproveCommand()),\n+            Map.entry(author.name(), new AuthorCommand())\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CommandExtractor.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-    private Optional<EmailAddress> parseUser(String user, PullRequest pr, CensusInstance censusInstance, PrintWriter reply) {\n+    public static Optional<EmailAddress> parseUser(String user, PullRequest pr, CensusInstance censusInstance, PrintWriter reply) {\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/ContributorCommand.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,145 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bots.pr;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInfo;\n+import org.openjdk.skara.forge.Review;\n+import org.openjdk.skara.test.CheckableRepository;\n+import org.openjdk.skara.test.HostCredentials;\n+import org.openjdk.skara.test.TemporaryDirectory;\n+import org.openjdk.skara.test.TestBotRunner;\n+import org.openjdk.skara.vcs.Repository;\n+\n+import java.io.IOException;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.openjdk.skara.bots.pr.PullRequestAsserts.assertLastCommentContains;\n+\n+public class AuthorCommandTests {\n+    @Test\n+    void simple(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var integrator = credentials.getHostedRepository();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addReviewer(integrator.forge().currentUser().id())\n+                    .addCommitter(author.forge().currentUser().id());\n+            var prBot = PullRequestBot.newBuilder().repo(integrator).censusRepo(censusBuilder.build()).build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.authenticatedUrl(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.authenticatedUrl(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"This is a pull request\");\n+\n+            \/\/ Issue an invalid command\n+            pr.addComment(\"\/author xx\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+\n+            \/\/ The bot should reply with an error message\n+            assertLastCommentContains(pr, \"Syntax\");\n+\n+            \/\/ set an author\n+            pr.addComment(\"\/author set Test Person <test@test.test>\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+\n+            \/\/ The bot should reply with a success message\n+            assertLastCommentContains(pr, \"Author of this pull request has been set to `Test Person <test@test.test>` successfully.\");\n+\n+            \/\/ Remove it\n+            pr.addComment(\"\/author remove Test Person <test@test.test>\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+\n+            \/\/ The bot should reply with a success message\n+            assertLastCommentContains(pr, \"Author `Test Person <test@test.test>` successfully removed.\");\n+\n+            \/\/ Remove something that isn't there\n+            pr.addComment(\"\/author remove Test Person 2 <test2@test.test>\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+\n+            \/\/ The bot should reply with an error message\n+            assertLastCommentContains(pr, \"There is no author set in this pull request.\");\n+\n+            \/\/ Remove something that isn't there\n+            pr.addComment(\"\/author remove\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+\n+            \/\/ The bot should reply with an error message\n+            assertLastCommentContains(pr, \"There is no author set in this pull request.\");\n+\n+            \/\/ Now add someone back again\n+            pr.addComment(\"\/author Test Person <test@test.test>\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+\n+            \/\/ The bot should reply with a success message\n+            assertLastCommentContains(pr, \"Author of this pull request has been set to `Test Person <test@test.test>` successfully.\");\n+\n+            \/\/ Remove something that isn't there\n+            pr.addComment(\"\/author remove Test Person 2 <test2@test.test>\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+\n+            \/\/ The bot should reply with an error message\n+            assertLastCommentContains(pr, \"@user1 `Test Person 2 <test2@test.test>` was not set to this pull request's author.\");\n+            assertLastCommentContains(pr, \"Current author of this pull request is set to: `Test Person <test@test.test>`\");\n+\n+            \/\/ Approve it as another user\n+            var approvalPr = integrator.pullRequest(pr.id());\n+            approvalPr.addReview(Review.Verdict.APPROVED, \"Approved\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            TestBotRunner.runPeriodicItems(prBot);\n+\n+            var pushed = pr.comments().stream()\n+                    .filter(comment -> comment.body().contains(\"change now passes all *automated*\"))\n+                    .count();\n+            assertEquals(1, pushed);\n+\n+            \/\/ Integrate\n+            pr.addComment(\"\/integrate\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+\n+            \/\/ The bot should reply with an ok message\n+            assertLastCommentContains(pr, \"Pushed as commit\");\n+\n+            \/\/ The change should now be present on the master branch\n+            var pushedFolder = tempFolder.path().resolve(\"pushed\");\n+            var pushedRepo = Repository.materialize(pushedFolder, author.authenticatedUrl(), \"master\");\n+            assertTrue(CheckableRepository.hasBeenEdited(pushedRepo));\n+\n+            var headHash = pushedRepo.resolve(\"HEAD\").orElseThrow();\n+            var headCommit = pushedRepo.commits(headHash.hex() + \"^..\" + headHash.hex()).asList().get(0);\n+\n+            assertEquals(\"Test Person\", headCommit.author().name());\n+            assertEquals(\"Generated Committer 2\", headCommit.committer().name());\n+        }\n+    }\n+}\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/AuthorCommandTests.java","additions":145,"deletions":0,"binary":false,"changes":145,"status":"added"}]}