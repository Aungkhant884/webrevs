{"files":[{"patch":"@@ -258,1 +258,9 @@\n-        if (!isClean && hasCleanLabel) {\n+\n+        var botUser = pr.repository().forge().currentUser();\n+        var isCleanLabelManuallyAdded =\n+            pr.comments()\n+              .stream()\n+              .filter(c -> c.author().equals(botUser))\n+              .anyMatch(c -> c.body().contains(\"this backport pull request is now marked as clean\"));\n+\n+        if (!isCleanLabelManuallyAdded && !isClean && hasCleanLabel) {\n@@ -261,0 +269,1 @@\n+\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bots.pr;\n+\n+import org.openjdk.skara.forge.HostedCommit;\n+import org.openjdk.skara.forge.PullRequest;\n+import org.openjdk.skara.issuetracker.Comment;\n+import org.openjdk.skara.vcs.*;\n+import org.openjdk.skara.vcs.openjdk.CommitMessageParsers;\n+\n+import java.io.PrintWriter;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.time.format.DateTimeFormatter;\n+\n+public class CleanCommand implements CommandHandler {\n+    private void showHelp(PrintWriter reply) {\n+        reply.println(\"Usage: `\/clean`\");\n+    }\n+\n+    @Override\n+    public String description() {\n+        return \"Mark the backport pull request as a clean backport\";\n+    }\n+\n+    @Override\n+    public boolean allowedInBody() {\n+        return true;\n+    }\n+\n+    @Override\n+    public void handle(PullRequestBot bot, PullRequest pr, CensusInstance censusInstance, Path scratchPath, CommandInvocation command, List<Comment> allComments, PrintWriter reply)\n+    {\n+        var username = command.user().username();\n+        if (!censusInstance.isCommitter(command.user())) {\n+            reply.println(\"@\" + username + \" only OpenJDK [Committers](https:\/\/openjdk.java.net\/bylaws#committer) can use the `\/clean` command\");\n+            return;\n+        }\n+\n+        if (!pr.labels().contains(\"backport\")) {\n+            reply.println(\"@\" + username + \" can only mark [backport pull requests](https:\/\/wiki.openjdk.java.net\/display\/SKARA\/Backports#Backports-BackportPullRequests) as clean\");\n+            return;\n+        }\n+\n+        if (pr.labels().contains(\"clean\")) {\n+            reply.println(\"@\" + username + \" this backport pull request is already marked as clean\");\n+            return;\n+        }\n+\n+        pr.addLabel(\"clean\");\n+        reply.println(\"@\" + username + \" this backport pull request is now marked as clean\");\n+    }\n+}\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CleanCommand.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"},{"patch":"@@ -58,1 +58,2 @@\n-            Map.entry(\"cc\", new LabelCommand(\"cc\"))\n+            Map.entry(\"cc\", new LabelCommand(\"cc\")),\n+            Map.entry(\"clean\", new CleanCommand())\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CommandWorkItem.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,300 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bots.pr;\n+\n+import org.openjdk.skara.forge.*;\n+import org.junit.jupiter.api.*;\n+import org.openjdk.skara.test.*;\n+\n+import java.io.IOException;\n+import java.nio.file.*;\n+import java.util.*;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.openjdk.skara.bots.pr.PullRequestAsserts.assertLastCommentContains;\n+\n+public class CleanCommandTests {\n+    @Test\n+    void cleanCommandOnRegularPullRequestShouldNotWork(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var integrator = credentials.getHostedRepository();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                                           .addCommitter(author.forge().currentUser().id())\n+                                           .addReviewer(integrator.forge().currentUser().id());\n+\n+            var prBot = PullRequestBot.newBuilder()\n+                                      .repo(integrator)\n+                                      .censusRepo(censusBuilder.build())\n+                                      .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.url(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"123: This is a pull request\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+\n+            assertFalse(pr.labels().contains(\"backport\"));\n+            assertFalse(pr.labels().contains(\"clean\"));\n+\n+            \/\/ Try to issue the \"\/clean\" PR command, should not work\n+            pr.addComment(\"\/clean\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertFalse(pr.labels().contains(\"backport\"));\n+            assertFalse(pr.labels().contains(\"clean\"));\n+            assertLastCommentContains(pr, \"can only mark [backport pull requests]\");\n+            assertLastCommentContains(pr, \"as clean\");\n+        }\n+    }\n+\n+    @Test\n+    void alreadyCleanPullRequest(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory(false);\n+             var pushedFolder = new TemporaryDirectory(false)) {\n+\n+            var author = credentials.getHostedRepository();\n+            var integrator = credentials.getHostedRepository();\n+            var issues = credentials.getIssueProject();\n+            var censusBuilder = credentials.getCensusBuilder()\n+                                           .addCommitter(author.forge().currentUser().id())\n+                                           .addReviewer(integrator.forge().currentUser().id());\n+            var bot = PullRequestBot.newBuilder()\n+                                    .repo(integrator)\n+                                    .censusRepo(censusBuilder.build())\n+                                    .issueProject(issues)\n+                                    .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            var releaseBranch = localRepo.branch(masterHash, \"release\");\n+            localRepo.checkout(releaseBranch);\n+            var newFile = localRepo.root().resolve(\"a_new_file.txt\");\n+            Files.writeString(newFile, \"hello\");\n+            localRepo.add(newFile);\n+            var issue1 = credentials.createIssue(issues, \"An issue\");\n+            var issue1Number = issue1.id().split(\"-\")[1];\n+            var originalMessage = issue1Number + \": An issue\\n\" +\n+                                  \"\\n\" +\n+                                  \"Reviewed-by: integrationreviewer2\";\n+            var releaseHash = localRepo.commit(originalMessage, \"integrationcommitter1\", \"integrationcommitter1@openjdk.java.net\");\n+            localRepo.push(releaseHash, author.url(), \"refs\/heads\/release\", true);\n+\n+            \/\/ \"backport\" the new file to the master branch\n+            localRepo.checkout(localRepo.defaultBranch());\n+            var editBranch = localRepo.branch(masterHash, \"edit\");\n+            localRepo.checkout(editBranch);\n+            var newFile2 = localRepo.root().resolve(\"a_new_file.txt\");\n+            Files.writeString(newFile2, \"hello\");\n+            localRepo.add(newFile2);\n+            var editHash = localRepo.commit(\"Backport\", \"duke\", \"duke@openjdk.java.net\");\n+            localRepo.push(editHash, author.url(), \"refs\/heads\/edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"Backport \" + releaseHash.hex());\n+\n+            \/\/ The bot should reply with a backport message\n+            TestBotRunner.runPeriodicItems(bot);\n+            var comments = pr.comments();\n+            var backportComment = comments.get(0).body();\n+            assertTrue(backportComment.contains(\"This backport pull request has now been updated with issue\"));\n+            assertTrue(backportComment.contains(\"<!-- backport \" + releaseHash.hex() + \" -->\"));\n+            assertEquals(issue1Number + \": An issue\", pr.title());\n+            assertTrue(pr.labels().contains(\"backport\"));\n+\n+            \/\/ The bot should have added the \"clean\" label\n+            assertTrue(pr.labels().contains(\"clean\"));\n+\n+            \/\/ Issue the \"\/clean\" PR command, should do nothing\n+            pr.addComment(\"\/clean\");\n+            TestBotRunner.runPeriodicItems(bot);\n+            assertTrue(pr.labels().contains(\"clean\"));\n+            assertLastCommentContains(pr, \"this backport pull request is already marked as clean\");\n+        }\n+    }\n+\n+    @Test\n+    void makeNonCleanBackportClean(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory(false);\n+             var pushedFolder = new TemporaryDirectory(false)) {\n+\n+            var author = credentials.getHostedRepository();\n+            var integrator = credentials.getHostedRepository();\n+            var issues = credentials.getIssueProject();\n+            var censusBuilder = credentials.getCensusBuilder()\n+                                           .addCommitter(author.forge().currentUser().id())\n+                                           .addReviewer(integrator.forge().currentUser().id());\n+            var bot = PullRequestBot.newBuilder()\n+                                    .repo(integrator)\n+                                    .censusRepo(censusBuilder.build())\n+                                    .issueProject(issues)\n+                                    .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+\n+            var newFile = localRepo.root().resolve(\"a_new_file.txt\");\n+            Files.writeString(newFile, \"a\\nb\\nc\\nd\");\n+            localRepo.add(newFile);\n+            var issue1 = credentials.createIssue(issues, \"An issue\");\n+            var issue1Number = issue1.id().split(\"-\")[1];\n+            var originalMessage = issue1Number + \": An issue\\n\" +\n+                                  \"\\n\" +\n+                                  \"Reviewed-by: integrationreviewer2\";\n+            var masterHash = localRepo.commit(originalMessage, \"integrationcommitter1\", \"integrationcommitter1@openjdk.java.net\");\n+\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            var releaseBranch = localRepo.branch(masterHash, \"release\");\n+            localRepo.checkout(releaseBranch);\n+            Files.writeString(newFile, \"a\\nb\\nc\\nd\\ne\");\n+            localRepo.add(newFile);\n+            var issue2 = credentials.createIssue(issues, \"Another issue\");\n+            var issue2Number = issue2.id().split(\"-\")[1];\n+            var upstreamMessage = issue2Number + \": Another issue\\n\" +\n+                                  \"\\n\" +\n+                                  \"Reviewed-by: integrationreviewer2\";\n+            var upstreamHash = localRepo.commit(upstreamMessage, \"integrationcommitter1\", \"integrationcommitter1@openjdk.java.net\");\n+            localRepo.push(upstreamHash, author.url(), \"refs\/heads\/release\", true);\n+\n+            \/\/ \"backport\" the new file to the master branch\n+            localRepo.checkout(localRepo.defaultBranch());\n+            var editBranch = localRepo.branch(masterHash, \"edit\");\n+            localRepo.checkout(editBranch);\n+            Files.writeString(newFile, \"a\\nb\\nc\\nd\\nd\");\n+            localRepo.add(newFile);\n+            var editHash = localRepo.commit(\"Backport\", \"duke\", \"duke@openjdk.java.net\");\n+            localRepo.push(editHash, author.url(), \"refs\/heads\/edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"Backport \" + upstreamHash.hex());\n+\n+            \/\/ The bot should reply with a backport message\n+            TestBotRunner.runPeriodicItems(bot);\n+            var comments = pr.comments();\n+            var backportComment = comments.get(0).body();\n+            assertTrue(backportComment.contains(\"This backport pull request has now been updated with issue\"));\n+            assertTrue(backportComment.contains(\"<!-- backport \" + upstreamHash.hex() + \" -->\"));\n+            assertEquals(issue2Number + \": Another issue\", pr.title());\n+            assertTrue(pr.labels().contains(\"backport\"));\n+\n+            \/\/ The bot should not have added the \"clean\" label\n+            assertFalse(pr.labels().contains(\"clean\"));\n+\n+            \/\/ Use the \"\/clean\" pull request command to mark the backport PR as clean\n+            pr.addComment(\"\/clean\");\n+            TestBotRunner.runPeriodicItems(bot);\n+            assertTrue(pr.labels().contains(\"clean\"));\n+            assertLastCommentContains(pr, \"this backport pull request is now marked as clean\");\n+        }\n+    }\n+\n+    @Test\n+    void authorShouldNotBeAllowed(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory(false);\n+             var pushedFolder = new TemporaryDirectory(false)) {\n+\n+            var author = credentials.getHostedRepository();\n+            var contributor = credentials.getHostedRepository();\n+            var integrator = credentials.getHostedRepository();\n+            var issues = credentials.getIssueProject();\n+            var censusBuilder = credentials.getCensusBuilder()\n+                                           .addAuthor(contributor.forge().currentUser().id())\n+                                           .addCommitter(author.forge().currentUser().id())\n+                                           .addReviewer(integrator.forge().currentUser().id());\n+            var bot = PullRequestBot.newBuilder()\n+                                    .repo(integrator)\n+                                    .censusRepo(censusBuilder.build())\n+                                    .issueProject(issues)\n+                                    .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+\n+            var newFile = localRepo.root().resolve(\"a_new_file.txt\");\n+            Files.writeString(newFile, \"a\\nb\\nc\\nd\");\n+            localRepo.add(newFile);\n+            var issue1 = credentials.createIssue(issues, \"An issue\");\n+            var issue1Number = issue1.id().split(\"-\")[1];\n+            var originalMessage = issue1Number + \": An issue\\n\" +\n+                                  \"\\n\" +\n+                                  \"Reviewed-by: integrationreviewer2\";\n+            var masterHash = localRepo.commit(originalMessage, \"integrationcommitter1\", \"integrationcommitter1@openjdk.java.net\");\n+\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            var releaseBranch = localRepo.branch(masterHash, \"release\");\n+            localRepo.checkout(releaseBranch);\n+            Files.writeString(newFile, \"a\\nb\\nc\\nd\\ne\");\n+            localRepo.add(newFile);\n+            var issue2 = credentials.createIssue(issues, \"Another issue\");\n+            var issue2Number = issue2.id().split(\"-\")[1];\n+            var upstreamMessage = issue2Number + \": Another issue\\n\" +\n+                                  \"\\n\" +\n+                                  \"Reviewed-by: integrationreviewer2\";\n+            var upstreamHash = localRepo.commit(upstreamMessage, \"integrationcommitter1\", \"integrationcommitter1@openjdk.java.net\");\n+            localRepo.push(upstreamHash, author.url(), \"refs\/heads\/release\", true);\n+\n+            \/\/ \"backport\" the new file to the master branch\n+            localRepo.checkout(localRepo.defaultBranch());\n+            var editBranch = localRepo.branch(masterHash, \"edit\");\n+            localRepo.checkout(editBranch);\n+            Files.writeString(newFile, \"a\\nb\\nc\\nd\\nd\");\n+            localRepo.add(newFile);\n+            var editHash = localRepo.commit(\"Backport\", \"duke\", \"duke@openjdk.java.net\");\n+            localRepo.push(editHash, author.url(), \"refs\/heads\/edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"Backport \" + upstreamHash.hex());\n+\n+            \/\/ The bot should reply with a backport message\n+            TestBotRunner.runPeriodicItems(bot);\n+            var comments = pr.comments();\n+            var backportComment = comments.get(0).body();\n+            assertTrue(backportComment.contains(\"This backport pull request has now been updated with issue\"));\n+            assertTrue(backportComment.contains(\"<!-- backport \" + upstreamHash.hex() + \" -->\"));\n+            assertEquals(issue2Number + \": Another issue\", pr.title());\n+            assertTrue(pr.labels().contains(\"backport\"));\n+\n+            \/\/ The bot should not have added the \"clean\" label\n+            assertFalse(pr.labels().contains(\"clean\"));\n+\n+            \/\/ Use the \"\/clean\" pull request command as author, should not work\n+            var prAsAuthor = contributor.pullRequest(pr.id());\n+            prAsAuthor.addComment(\"\/clean\");\n+            TestBotRunner.runPeriodicItems(bot);\n+            assertFalse(pr.labels().contains(\"clean\"));\n+            assertLastCommentContains(pr, \"only OpenJDK [Committers]\");\n+            assertLastCommentContains(pr, \"can use the `\/clean` command\");\n+        }\n+    }\n+}\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CleanCommandTests.java","additions":300,"deletions":0,"binary":false,"changes":300,"status":"added"},{"patch":"@@ -87,0 +87,4 @@\n+        Switch.shortcut(\"\")\n+              .fullname(\"clean\")\n+              .helptext(\"Set a backport pull request as clean\")\n+              .optional(),\n@@ -145,0 +149,7 @@\n+        var setClean = getSwitch(\"clean\", \"set\", arguments);\n+        if (setClean) {\n+            var command = pr.addComment(\"\/clean\");\n+            var reply = awaitReplyTo(pr, command);\n+            showReply(reply);\n+        }\n+\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/pr\/GitPrSet.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"}]}