{"files":[{"patch":"@@ -24,0 +24,1 @@\n+- git-backport - backports a commit from another repository onto the current branch\n","filename":"README.md","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-import java.net.URI;\n+import java.net.*;\n@@ -51,0 +51,14 @@\n+    private static void run(Repository repo, String... args) throws IOException {\n+        var pb = new ProcessBuilder(args);\n+        pb.inheritIO();\n+        pb.directory(repo.root().toFile());\n+        try {\n+            var err = pb.start().waitFor();\n+            if (err != 0) {\n+                System.exit(err);\n+            }\n+        } catch (InterruptedException e) {\n+            throw new IOException(e);\n+        }\n+    }\n+\n@@ -62,10 +76,0 @@\n-        Option.shortcut(\"\")\n-              .fullname(\"to\")\n-              .describe(\"REPO\")\n-              .helptext(\"Repository to backport to\")\n-              .optional(),\n-        Option.shortcut(\"\")\n-              .fullname(\"branch\")\n-              .describe(\"NAME\")\n-              .helptext(\"Name of branch to backport to (default to 'master')\")\n-              .optional(),\n@@ -87,4 +91,4 @@\n-        Input.position(0)\n-             .describe(\"HASH\")\n-             .singular()\n-             .required()\n+         Input.position(0)\n+              .describe(\"HASH\")\n+              .singular()\n+              .required()\n@@ -118,10 +122,2 @@\n-        var to = getOption(\"to\", arguments, repo);\n-\n-        if (from != null && to != null) {\n-            System.err.println(\"error: cannot specify both --from and --to\");\n-            System.exit(1);\n-        }\n-\n-        if (from == null && to == null) {\n-            System.err.println(\"error: must use either --from or --to\");\n-            System.exit(1);\n+        if (from == null) {\n+            System.err.println(\"error: must specify repository to backport from using --from\");\n@@ -130,5 +126,1 @@\n-        var hash = new Hash(arguments.at(0).asString());\n-        var resolved = repo.resolve(hash.hex());\n-        if (resolved.isPresent()) {\n-            hash = resolved.get();\n-        }\n+        var commit = arguments.at(0).asString();\n@@ -136,8 +128,3 @@\n-        var origin = Remote.toWebURI(Remote.toURI(repo.pullPath(\"origin\"), true).toString());\n-        var username = getOption(\"username\", arguments, repo);\n-        var token = System.getenv(\"GIT_TOKEN\");\n-        var credentials = GitCredentials.fill(origin.getHost(), origin.getPath(), username, token, origin.getScheme());\n-        var forgeURI = URI.create(origin.getScheme() + \":\/\/\" + origin.getHost());\n-        var forge = Forge.from(forgeURI, new Credential(credentials.username(), credentials.password()));\n-        if (forge.isEmpty()) {\n-            System.err.println(\"error: could not find forge for \" + forgeURI.getHost());\n+        var gitUsername = repo.config(\"user.name\");\n+        if (gitUsername.size() != 1) {\n+            System.err.println(\"error: user.name not configured\");\n@@ -147,50 +134,4 @@\n-        var branch = getOption(\"branch\", arguments, repo);\n-\n-        HostedRepository hostedRepo = null;\n-        Comment comment = null;\n-        if (from != null) {\n-            var originName = origin.getPath().substring(1);\n-            var originRepo = forge.get().repository(originName);\n-            if (!originRepo.isPresent()) {\n-                System.err.println(\"error: repository named \" + originName + \" not present on \" + forge.get().name());\n-                System.exit(1);\n-            }\n-            var upstreamRepo = originRepo.get().parent().isPresent() ?\n-                originRepo.get().parent().get() : originRepo.get();\n-            var upstreamGroup = upstreamRepo.name().split(\"\/\")[0];\n-            var repoName = from.startsWith(\"http\") ? URI.create(from).getPath().substring(1) : from;\n-            if (!repoName.contains(\"\/\")) {\n-                repoName = upstreamGroup + \"\/\" + repoName;\n-            }\n-            var maybeHostedRepo = forge.get().repository(repoName);\n-            if (!maybeHostedRepo.isPresent()) {\n-                System.err.println(\"error: repository named \" + repoName + \" not present on \" + forge.get().name());\n-                System.exit(1);\n-            }\n-            hostedRepo = maybeHostedRepo.get();\n-            var targetName = upstreamRepo.name().split(\"\/\")[1];\n-            var message = \"\/backport \" + targetName;\n-            if (branch != null) {\n-                message += \" \" + branch;\n-            }\n-            comment = hostedRepo.addCommitComment(hash, message);\n-        } else if (to != null ) {\n-            var repoName = origin.getPath().substring(1);\n-            var maybeHostedRepo = forge.get().repository(repoName);\n-            if (!maybeHostedRepo.isPresent()) {\n-                System.err.println(\"error: repository named \" + repoName + \" not present on \" + forge.get().name());\n-                System.exit(1);\n-            }\n-            hostedRepo = maybeHostedRepo.get();\n-            var parent = hostedRepo.parent();\n-            if (parent.isPresent()) {\n-                hostedRepo = parent.get();\n-            }\n-            var targetName = to.startsWith(\"http\") ? URI.create(to).getPath().substring(1) : to;\n-            var message = \"\/backport \" + targetName;\n-            if (branch != null) {\n-                message += \" \" + branch;\n-            }\n-            comment = hostedRepo.addCommitComment(hash, message);\n-        } else {\n-            throw new IllegalStateException(\"Should not be here, both 'from' and 'to' are null\");\n+        var gitEmail = repo.config(\"user.email\");\n+        if (gitEmail.size() != 1) {\n+            System.err.println(\"error: user.email not configured\");\n+            System.exit(1);\n@@ -199,11 +140,28 @@\n-        var seenReply = false;\n-        var expected = \"<!-- Jmerge command reply message (\" + comment.id() + \") -->\";\n-        for (var i = 0; i < 90; i++) {\n-            var comments = hostedRepo.commitComments(hash);\n-            for (var c : comments) {\n-                var lines = c.body().split(\"\\n\");\n-                if (lines.length > 0 && lines[0].equals(expected)) {\n-                    for (var j = 1; j < lines.length; j++) {\n-                        System.out.println(lines[j]);\n-                    }\n-                    System.exit(0);\n+        URI fromURI = null;\n+        try {\n+            fromURI = Remote.toURI(from, false);\n+        } catch (IOException e) {\n+            var origin = Remote.toURI(repo.pullPath(\"origin\"), false);\n+            var dotGit = origin.getPath().endsWith(\".git\") ? \".git\" : \"\";\n+            if (from.contains(\"\/\")) {\n+                fromURI = URI.create(origin.getScheme() + \":\/\/\" + origin.getHost() + \"\/\" + from + dotGit);\n+            } else {\n+                var canonical = Remote.toWebURI(Remote.toURI(repo.pullPath(\"origin\"), true).toString());\n+                var username = getOption(\"username\", arguments, repo);\n+                var token = System.getenv(\"GIT_TOKEN\");\n+                var credentials = GitCredentials.fill(canonical.getHost(), canonical.getPath(), username, token, canonical.getScheme());\n+                var forgeURI = URI.create(canonical.getScheme() + \":\/\/\" + canonical.getHost());\n+                var forge = Forge.from(forgeURI, new Credential(credentials.username(), credentials.password()));\n+                if (forge.isEmpty()) {\n+                    System.err.println(\"error: could not find forge at \" + forgeURI.getHost());\n+                    System.exit(1);\n+                }\n+                var originRemoteRepository = forge.get().repository(canonical.getPath().substring(1));\n+                if (originRemoteRepository.isEmpty()) {\n+                    System.err.println(\"error: could not find repository named '\" + origin.getPath().substring(1) + \"' on \" + forge.get().hostname());\n+                    System.exit(1);\n+                }\n+                var upstreamRemoteRepository = originRemoteRepository.get().parent();\n+                if (upstreamRemoteRepository.isEmpty()) {\n+                    System.err.println(\"error: the repository named '\" + originRemoteRepository.get().name() + \" is not a fork of another repository\");\n+                    System.exit(1);\n@@ -211,0 +169,6 @@\n+                var upstreamGroup = upstreamRemoteRepository.get().webUrl().getPath().substring(1).split(\"\/\")[0];\n+                fromURI = URI.create(origin.getScheme() + \":\/\/\" +\n+                                     origin.getHost() + \"\/\" +\n+                                     upstreamGroup + \"\/\" +\n+                                     from +\n+                                     dotGit);\n@@ -212,1 +176,0 @@\n-            Thread.sleep(2000);\n@@ -215,2 +178,17 @@\n-        System.err.println(\"error: timed out waiting for response to \/backport command\");\n-        System.exit(1);\n+        System.out.println(\"Fetching ...\");\n+        System.out.flush();\n+        var fetchHead = repo.fetch(fromURI, commit, false);\n+\n+        System.out.println(\"Cherry picking ...\");\n+        System.out.flush();\n+        run(repo, \"git\", \"cherry-pick\", \"--no-commit\",\n+                                        \"--keep-redundant-commits\",\n+                                        \"--strategy=recursive\",\n+                                        \"--strategy-option=patience\",\n+                                        fetchHead.hex());\n+\n+        System.out.println(\"Committing ...\");\n+        System.out.flush();\n+        run(repo, \"git\", \"commit\", \"--quiet\", \"--message=\" + \"Backport \" + fetchHead.hex());\n+\n+        System.out.println(\"Commit \" + fetchHead.hex() + \" successfully backported as commit \" + repo.head().hex());\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/GitBackport.java","additions":80,"deletions":102,"binary":false,"changes":182,"status":"modified"},{"patch":"@@ -215,0 +215,1 @@\n+        commands.put(\"backport\", GitBackport::main);\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/GitSkara.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -61,5 +61,0 @@\n-        Option.shortcut(\"\")\n-              .fullname(\"backport\")\n-              .describe(\"REV\")\n-              .helptext(\"Create a backport pull request for the given revision\")\n-              .optional(),\n@@ -387,2 +382,5 @@\n-        var toBackport = getOption(\"backport\", \"create\", arguments);\n-        if (toBackport == null) {\n+        if (issue.isPresent()) {\n+            Files.writeString(file, format(issue.get()) + \"\\n\\n\");\n+        } else {\n+            var commit = commits.get(0);\n+            issue = getIssue(commit, project);\n@@ -392,13 +390,7 @@\n-                var commit = commits.get(0);\n-                issue = getIssue(commit, project);\n-                if (issue.isPresent()) {\n-                    Files.writeString(file, format(issue.get()) + \"\\n\\n\");\n-                } else {\n-                    var message = CommitMessageParsers.v1.parse(commit.message());\n-                    Files.writeString(file, message.title() + \"\\n\");\n-                    if (!message.summaries().isEmpty()) {\n-                        Files.write(file, message.summaries(), StandardOpenOption.APPEND);\n-                    }\n-                    if (!message.additional().isEmpty()) {\n-                        Files.write(file, message.additional(), StandardOpenOption.APPEND);\n-                    }\n+                var message = CommitMessageParsers.v1.parse(commit.message());\n+                Files.writeString(file, message.title() + \"\\n\");\n+                if (!message.summaries().isEmpty()) {\n+                    Files.write(file, message.summaries(), StandardOpenOption.APPEND);\n+                }\n+                if (!message.additional().isEmpty()) {\n+                    Files.write(file, message.additional(), StandardOpenOption.APPEND);\n@@ -407,7 +399,0 @@\n-        } else {\n-            var hash = repo.resolve(toBackport);\n-            if (hash.isEmpty()) {\n-                System.err.println(\"error: could not resolve \" + toBackport);\n-                System.exit(1);\n-            }\n-            Files.writeString(file, \"Backport \" + hash.get().hex() + \"\\n\\n\");\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/pr\/GitPrCreate.java","additions":12,"deletions":27,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+        backport = ! git skara backport\n","filename":"skara.gitconfig","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}