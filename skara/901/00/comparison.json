{"files":[{"patch":"@@ -59,1 +59,1 @@\n-        var commit = repository.commitMetadata(hash).orElseThrow(() ->\n+        var commit = repository.commit(hash).orElseThrow(() ->\n@@ -70,1 +70,1 @@\n-        var issues = issues(commit);\n+        var issues = issues(commit.metadata());\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/comment\/CommitCommentNotifier.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -75,6 +75,0 @@\n-        return findIssueUsername(new CommitMetadata(commit.hash(), commit.parents(), commit.author(),\n-                                                    commit.authored(), commit.committer(), commit.committed(),\n-                                                    commit.message()));\n-    }\n-\n-    private Optional<String> findIssueUsername(CommitMetadata commit) {\n@@ -116,1 +110,1 @@\n-        var commit = repository.commitMetadata(hash).orElseThrow(() ->\n+        var commit = repository.commit(hash).orElseThrow(() ->\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifier.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -838,1 +838,1 @@\n-        var head = pr.repository().commitMetadata(pr.headHash()).orElseThrow(\n+        var head = pr.repository().commit(pr.headHash()).orElseThrow(\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -164,1 +164,1 @@\n-    public Optional<CommitMetadata> commitMetadata(Hash commit) {\n+    public Optional<HostedCommit> commit(Hash commit) {\n","filename":"bots\/tester\/src\/test\/java\/org\/openjdk\/skara\/bots\/tester\/InMemoryHostedRepository.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-    Optional<CommitMetadata> commitMetadata(Hash hash);\n+    Optional<HostedCommit> commit(Hash hash);\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/HostedRepository.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -354,38 +354,0 @@\n-    CommitMetadata toCommitMetadata(JSONValue o) {\n-        var hash = new Hash(o.get(\"sha\").asString());\n-        var parents = o.get(\"parents\").stream()\n-                                      .map(p -> new Hash(p.get(\"sha\").asString()))\n-                                      .collect(Collectors.toList());\n-        var commit = o.get(\"commit\").asObject();\n-        var author = new Author(commit.get(\"author\").get(\"name\").asString(),\n-                                commit.get(\"author\").get(\"email\").asString());\n-        var authored = ZonedDateTime.parse(commit.get(\"author\").get(\"date\").asString());\n-        var committer = new Author(commit.get(\"committer\").get(\"name\").asString(),\n-                                   commit.get(\"committer\").get(\"email\").asString());\n-        var committed = ZonedDateTime.parse(commit.get(\"committer\").get(\"date\").asString());\n-        var message = Arrays.asList(commit.get(\"message\").asString().split(\"\\n\"));\n-        return new CommitMetadata(hash, parents, author, authored, committer, committed, message);\n-    }\n-\n-    Diff toDiff(Hash from, Hash to, JSONValue files) {\n-        var patches = new ArrayList<Patch>();\n-\n-        for (var file : files.asArray()) {\n-            var status = Status.from(file.get(\"status\").asString().toUpperCase().charAt(0));\n-            var targetPath = Path.of(file.get(\"filename\").asString());\n-            var sourcePath = status.isRenamed() || status.isCopied() ?\n-                Path.of(file.get(\"previous_filename\").asString()) :\n-                targetPath;\n-            var filetype = FileType.fromOctal(\"100644\");\n-\n-            var diff = file.get(\"patch\").asString().split(\"\\n\");\n-            var hunks = UnifiedDiffParser.parseSingleFileDiff(diff);\n-\n-            patches.add(new TextualPatch(sourcePath, filetype, Hash.zero(),\n-                                         targetPath, filetype, Hash.zero(),\n-                                         status, hunks));\n-        }\n-\n-        return new Diff(from, to, patches);\n-    }\n-\n@@ -404,4 +366,2 @@\n-        var metadata = toCommitMetadata(first);\n-        var diff = toDiff(metadata.parents().get(0), hash, first.get(\"files\"));\n-        var url = URI.create(first.get(\"url\").asString());\n-        return Optional.of(new HostedCommit(metadata, List.of(diff), url));\n+        var repo = repository(first.get(\"repository\").get(\"full_name\").asString());\n+        return repo.get().commit(hash);\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubHost.java","additions":2,"deletions":42,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -704,1 +704,1 @@\n-        return host.toDiff(targetHash(), headHash(), files);\n+        return repository.toDiff(targetHash(), headHash(), files);\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubPullRequest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -353,0 +353,38 @@\n+    private CommitMetadata toCommitMetadata(JSONValue o) {\n+        var hash = new Hash(o.get(\"sha\").asString());\n+        var parents = o.get(\"parents\").stream()\n+                                      .map(p -> new Hash(p.get(\"sha\").asString()))\n+                                      .collect(Collectors.toList());\n+        var commit = o.get(\"commit\").asObject();\n+        var author = new Author(commit.get(\"author\").get(\"name\").asString(),\n+                                commit.get(\"author\").get(\"email\").asString());\n+        var authored = ZonedDateTime.parse(commit.get(\"author\").get(\"date\").asString());\n+        var committer = new Author(commit.get(\"committer\").get(\"name\").asString(),\n+                                   commit.get(\"committer\").get(\"email\").asString());\n+        var committed = ZonedDateTime.parse(commit.get(\"committer\").get(\"date\").asString());\n+        var message = Arrays.asList(commit.get(\"message\").asString().split(\"\\n\"));\n+        return new CommitMetadata(hash, parents, author, authored, committer, committed, message);\n+    }\n+\n+    Diff toDiff(Hash from, Hash to, JSONValue files) {\n+        var patches = new ArrayList<Patch>();\n+\n+        for (var file : files.asArray()) {\n+            var status = Status.from(file.get(\"status\").asString().toUpperCase().charAt(0));\n+            var targetPath = Path.of(file.get(\"filename\").asString());\n+            var sourcePath = status.isRenamed() || status.isCopied() ?\n+                Path.of(file.get(\"previous_filename\").asString()) :\n+                targetPath;\n+            var filetype = FileType.fromOctal(\"100644\");\n+\n+            var diff = file.get(\"patch\").asString().split(\"\\n\");\n+            var hunks = UnifiedDiffParser.parseSingleFileDiff(diff);\n+\n+            patches.add(new TextualPatch(sourcePath, filetype, Hash.zero(),\n+                                         targetPath, filetype, Hash.zero(),\n+                                         status, hunks));\n+        }\n+\n+        return new Diff(from, to, patches);\n+    }\n+\n@@ -354,1 +392,1 @@\n-    public Optional<CommitMetadata> commitMetadata(Hash hash) {\n+    public Optional<HostedCommit> commit(Hash hash) {\n@@ -361,1 +399,4 @@\n-        return Optional.of(gitHubHost.toCommitMetadata(o));\n+\n+        var metadata = toCommitMetadata(o);\n+        var diffs = toDiff(metadata.parents().get(0), hash, o.get(\"files\"));\n+        return Optional.of(new HostedCommit(metadata, List.of(diffs), URI.create(o.get(\"html_url\").asString())));\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubRepository.java","additions":43,"deletions":2,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -226,46 +226,0 @@\n-    CommitMetadata toCommitMetadata(JSONValue o) {\n-        var hash = new Hash(o.get(\"id\").asString());\n-        var parents = o.get(\"parent_ids\").stream()\n-                                      .map(JSONValue::asString)\n-                                      .map(Hash::new)\n-                                      .collect(Collectors.toList());\n-        var author = new Author(o.get(\"author_name\").asString(),\n-                                o.get(\"author_email\").asString());\n-        var authored = ZonedDateTime.parse(o.get(\"authored_date\").asString());\n-        var committer = new Author(o.get(\"committer_name\").asString(),\n-                                   o.get(\"committer_email\").asString());\n-        var committed = ZonedDateTime.parse(o.get(\"committed_date\").asString());\n-        var message = Arrays.asList(o.get(\"message\").asString().split(\"\\n\"));\n-        return new CommitMetadata(hash, parents, author, authored, committer, committed, message);\n-    }\n-\n-    Diff toDiff(Hash from, Hash to, JSONValue o) {\n-        var patches = new ArrayList<Patch>();\n-\n-        for (var file : o.asArray()) {\n-            var sourcePath = Path.of(file.get(\"old_path\").asString());\n-            var sourceFileType = FileType.fromOctal(file.get(\"a_mode\").asString());\n-\n-            var targetPath = Path.of(file.get(\"new_path\").asString());\n-            var targetFileType = FileType.fromOctal(file.get(\"b_mode\").asString());\n-\n-            var status = Status.from('M');\n-            if (file.get(\"new_file\").asBoolean()) {\n-                status = Status.from('A');\n-            } else if (file.get(\"renamed_file\").asBoolean()) {\n-                status = Status.from('R');\n-            } else if (file.get(\"deleted_file\").asBoolean()) {\n-                status = Status.from('D');\n-            }\n-\n-            var diff = file.get(\"diff\").asString().split(\"\\n\");\n-            var hunks = UnifiedDiffParser.parseSingleFileDiff(diff);\n-\n-            patches.add(new TextualPatch(sourcePath, sourceFileType, Hash.zero(),\n-                                         targetPath, targetFileType, Hash.zero(),\n-                                         status, hunks));\n-        }\n-\n-        return new Diff(from, to, patches);\n-    }\n-\n@@ -276,1 +230,1 @@\n-            var projects = request.get(\"groups\/\" + group + \"\/projects\")\n+            var ids = request.get(\"groups\/\" + group + \"\/projects\")\n@@ -281,15 +235,5 @@\n-            for (var project : projects) {\n-                var c = request.get(\"projects\/\" + project + \"\/repository\/commits\/\" + hex)\n-                               .onError(r -> Optional.of(JSON.of()))\n-                               .execute();\n-                if (!c.isNull()) {\n-                    var url = URI.create(c.get(\"web_url\").asString());\n-                    var metadata = toCommitMetadata(c);\n-                    var diff = request.get(\"projects\/\" + project + \"\/repository\/commits\/\" + hex + \"\/diff\")\n-                                   .onError(r -> Optional.of(JSON.of()))\n-                                   .execute();\n-                    var parentDiffs = new ArrayList<Diff>();\n-                    if (!diff.isNull()) {\n-                        parentDiffs.add(toDiff(metadata.parents().get(0), hash, diff));\n-                    }\n-                    return Optional.of(new HostedCommit(metadata, parentDiffs, url));\n+            for (var id : ids) {\n+                var project = repository(id);\n+                var commit = project.get().commit(hash);\n+                if (commit.isPresent()) {\n+                    return commit;\n@@ -299,1 +243,0 @@\n-\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabHost.java","additions":6,"deletions":63,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -753,1 +753,1 @@\n-        return host.toDiff(targetHash(), headHash(), changes.get(\"changes\"));\n+        return repository.toDiff(targetHash(), headHash(), changes.get(\"changes\"));\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabMergeRequest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -391,0 +391,46 @@\n+    private CommitMetadata toCommitMetadata(JSONValue o) {\n+        var hash = new Hash(o.get(\"id\").asString());\n+        var parents = o.get(\"parent_ids\").stream()\n+                                      .map(JSONValue::asString)\n+                                      .map(Hash::new)\n+                                      .collect(Collectors.toList());\n+        var author = new Author(o.get(\"author_name\").asString(),\n+                                o.get(\"author_email\").asString());\n+        var authored = ZonedDateTime.parse(o.get(\"authored_date\").asString());\n+        var committer = new Author(o.get(\"committer_name\").asString(),\n+                                   o.get(\"committer_email\").asString());\n+        var committed = ZonedDateTime.parse(o.get(\"committed_date\").asString());\n+        var message = Arrays.asList(o.get(\"message\").asString().split(\"\\n\"));\n+        return new CommitMetadata(hash, parents, author, authored, committer, committed, message);\n+    }\n+\n+    Diff toDiff(Hash from, Hash to, JSONValue o) {\n+        var patches = new ArrayList<Patch>();\n+\n+        for (var file : o.asArray()) {\n+            var sourcePath = Path.of(file.get(\"old_path\").asString());\n+            var sourceFileType = FileType.fromOctal(file.get(\"a_mode\").asString());\n+\n+            var targetPath = Path.of(file.get(\"new_path\").asString());\n+            var targetFileType = FileType.fromOctal(file.get(\"b_mode\").asString());\n+\n+            var status = Status.from('M');\n+            if (file.get(\"new_file\").asBoolean()) {\n+                status = Status.from('A');\n+            } else if (file.get(\"renamed_file\").asBoolean()) {\n+                status = Status.from('R');\n+            } else if (file.get(\"deleted_file\").asBoolean()) {\n+                status = Status.from('D');\n+            }\n+\n+            var diff = file.get(\"diff\").asString().split(\"\\n\");\n+            var hunks = UnifiedDiffParser.parseSingleFileDiff(diff);\n+\n+            patches.add(new TextualPatch(sourcePath, sourceFileType, Hash.zero(),\n+                                         targetPath, targetFileType, Hash.zero(),\n+                                         status, hunks));\n+        }\n+\n+        return new Diff(from, to, patches);\n+    }\n+\n@@ -392,1 +438,1 @@\n-    public Optional<CommitMetadata> commitMetadata(Hash hash) {\n+    public Optional<HostedCommit> commit(Hash hash) {\n@@ -396,1 +442,13 @@\n-        return c.isNull()? Optional.empty() : Optional.of(gitLabHost.toCommitMetadata(c));\n+        if (!c.isNull()) {\n+            return Optional.empty();\n+        }\n+        var url = URI.create(c.get(\"web_url\").asString());\n+        var metadata = toCommitMetadata(c);\n+        var diff = request.get(\"repository\/commits\/\" + hash.hex() + \"\/diff\")\n+                          .onError(r -> Optional.of(JSON.of()))\n+                          .execute();\n+        var parentDiffs = new ArrayList<Diff>();\n+        if (!diff.isNull()) {\n+            parentDiffs.add(toDiff(metadata.parents().get(0), hash, diff));\n+        }\n+        return Optional.of(new HostedCommit(metadata, parentDiffs, url));\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabRepository.java","additions":60,"deletions":2,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -160,9 +160,4 @@\n-            var repo = data.repositories.get(key);\n-            try {\n-                var commit = repo.lookup(hash);\n-                if (commit.isPresent()) {\n-                    var url = URI.create(\"file:\/\/\" + repo.root() + \"\/commits\/\" + hash.hex());\n-                    return Optional.of(new HostedCommit(commit.get().metadata(), commit.get().parentDiffs(), url));\n-                }\n-            } catch (IOException e) {\n-                return Optional.empty();\n+            var repo = repository(key).orElseThrow();\n+            var commit = repo.commit(hash);\n+            if (commit.isPresent()) {\n+                return commit;\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestHost.java","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -236,1 +236,1 @@\n-    public Optional<CommitMetadata> commitMetadata(Hash hash) {\n+    public Optional<HostedCommit> commit(Hash hash) {\n@@ -238,1 +238,6 @@\n-            return localRepository.commitMetadata(hash);\n+            var commit = localRepository.lookup(hash);\n+            if (!commit.isPresent()) {\n+                return Optional.empty();\n+            }\n+            var url = URI.create(\"file:\/\/\" + localRepository.root() + \"\/commits\/\" + hash.hex());\n+            return Optional.of(new HostedCommit(commit.get().metadata(), commit.get().parentDiffs(), url));\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestHostedRepository.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"}]}