{"files":[{"patch":"@@ -91,8 +91,10 @@\n-            for (var retargeted : retargetedDependencies) {\n-                log.info(\"Posting retargeted comment on PR \" + pr.id());\n-                retargeted.addComment(\"\"\"\n-                    The dependent pull request has now been integrated, and the target branch of this pull request \\\n-                    has been updated. This means that changes from the dependent pull request can start to show up \\\n-                    as belonging to this pull request, which may be confusing for reviewers. To remedy this situation, \\\n-                    simply merge the latest changes from the new target branch into this pull request by running commands \\\n-                    similar to these in the local repository for your personal fork:\n+            if (pr.labelNames().contains(\"integrated\")) {\n+                for (var retargeted : retargetedDependencies) {\n+                    log.info(\"Posting retargeted comment on PR \" + pr.id());\n+                    retargeted.addComment(\"\"\"\n+                            The parent pull request that this pull request depends on has now been integrated and \\\n+                            the target branch of this pull request has been updated. This means that changes from \\\n+                            the dependent pull request can start to show up as belonging to this pull request, \\\n+                            which may be confusing for reviewers. To remedy this situation, simply merge the latest \\\n+                            changes from the new target branch into this pull request by running commands \\\n+                            similar to these in the local repository for your personal fork:\n@@ -100,9 +102,22 @@\n-                    ```bash\n-                    git checkout %s\n-                    git fetch %s %s\n-                    git merge FETCH_HEAD\n-                    # if there are conflicts, follow the instructions given by git merge\n-                    git commit -m \"Merge %s\"\n-                    git push\n-                    ```\n-                    \"\"\".formatted(retargeted.sourceRef(), pr.repository().webUrl(), pr.targetRef(), pr.targetRef()));\n+                            ```bash\n+                            git checkout %s\n+                            git fetch %s %s\n+                            git merge FETCH_HEAD\n+                            # if there are conflicts, follow the instructions given by git merge\n+                            git commit -m \"Merge %s\"\n+                            git push\n+                            ```\n+                            \"\"\".formatted(retargeted.sourceRef(), pr.repository().webUrl(), pr.targetRef(),\n+                            pr.targetRef()));\n+                }\n+            } else {\n+                for (var retargeted : retargetedDependencies) {\n+                    log.info(\"Posting retargeted comment on PR \" + pr.id());\n+                    retargeted.addComment(\"\"\"\n+                            The parent pull request that this pull request depends on has been closed without being \\\n+                            integrated and the target branch of this pull request has been updated as the previous \\\n+                            branch was deleted. This means that changes from the parent pull request will start to \\\n+                            show up in this pull request. If closing the parent pull request was done in error, it will \\\n+                            need to be re-opened and this pull request will need to manually be retargeted again.\n+                            \"\"\");\n+                }\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/prbranch\/PullRequestBranchNotifier.java","additions":32,"deletions":17,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -281,0 +281,1 @@\n+            followUpPr.addLabel(\"rfr\");\n@@ -296,2 +297,27 @@\n-            assertTrue(lastComment.body().contains(\"The dependent pull request has now\"), lastComment.body());\n-            assertTrue(lastComment.body().contains(\"git checkout followup\"), lastComment.body());\n+            assertTrue(lastComment.body().contains(\"The parent pull request that this pull request \"\n+                    + \"depends on has been closed without being integrated\"), lastComment.body());\n+\n+            \/\/ Create another follow-up work\n+            var anotherFollowUp = CheckableRepository.appendAndCommit(localRepo, \"another follow-up work\", \"another follow-up change\");\n+            localRepo.push(anotherFollowUp, repo.url(), \"another-followup\", true);\n+            var anotherFollowUpPr = credentials.createPullRequest(repo, PreIntegrations.preIntegrateBranch(followUpPr), \"another-followup\", \"This is another follow-up pull request\");\n+            anotherFollowUpPr.addLabel(\"rfr\");\n+            assertEquals(PreIntegrations.preIntegrateBranch(followUpPr), anotherFollowUpPr.targetRef());\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ Simulate that the PR has been integrated.\n+            followUpPr.setState(Issue.State.CLOSED);\n+            followUpPr.addLabel(\"integrated\");\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ The target repo should no longer contain the branch\n+            var targetBranch = PreIntegrations.preIntegrateBranch(followUpPr);\n+            assertThrows(IOException.class, () -> localRepo.fetch(repo.url(), targetBranch));\n+\n+            \/\/ The another follow-up PR should have been retargeted\n+            anotherFollowUpPr = repo.pullRequest(anotherFollowUpPr.id());\n+            assertEquals(\"master\", anotherFollowUpPr.targetRef());\n+            lastComment = anotherFollowUpPr.comments().get(anotherFollowUpPr.comments().size() - 1);\n+            assertTrue(lastComment.body().contains(\"The parent pull request that this \"\n+                    + \"pull request depends on has now been integrated\"), lastComment.body());\n+            assertTrue(lastComment.body().contains(\"git checkout another-followup\"), lastComment.body());\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/prbranch\/PullRequestBranchNotifierTests.java","additions":28,"deletions":2,"binary":false,"changes":30,"status":"modified"}]}