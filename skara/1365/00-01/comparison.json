{"files":[{"patch":"@@ -89,0 +89,1 @@\n+            var retargetedDependencies = PreIntegrations.retargetDependencies(pr);\n@@ -91,1 +92,0 @@\n-                var retargetedDependencies = PreIntegrations.retargetDependencies(pr);\n@@ -95,4 +95,5 @@\n-                            The dependent pull request has now been integrated, and the target branch of this pull request \\\n-                            has been updated. This means that changes from the dependent pull request can start to show up \\\n-                            as belonging to this pull request, which may be confusing for reviewers. To remedy this situation, \\\n-                            simply merge the latest changes from the new target branch into this pull request by running commands \\\n+                            The parent pull request that this pull request depends on has now been integrated and \\\n+                            the target branch of this pull request has been updated. This means that changes from \\\n+                            the dependent pull request can start to show up as belonging to this pull request, \\\n+                            which may be confusing for reviewers. To remedy this situation, simply merge the latest \\\n+                            changes from the new target branch into this pull request by running commands \\\n@@ -112,0 +113,11 @@\n+            } else {\n+                for (var retargeted : retargetedDependencies) {\n+                    log.info(\"Posting retargeted comment on PR \" + pr.id());\n+                    retargeted.addComment(\"\"\"\n+                            The parent pull request that this pull request depends on has been closed without being integrated. \\\n+                            This has caused the pull request branch pr\/XX to be deleted and the target branch of this pull \\\n+                            request to be updated, which means that changes from the parent pull request will start to show up \\\n+                            in this pull request. If closing the parent pull request was done in error, it will need to be \\\n+                            re-opened and this pull request will need to be retargeted again manually.\n+                            \"\"\");\n+                }\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/prbranch\/PullRequestBranchNotifier.java","additions":17,"deletions":5,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -281,0 +281,1 @@\n+            followUpPr.addLabel(\"rfr\");\n@@ -290,11 +291,0 @@\n-            \/\/ The follow-up PR shouldn't been retargeted because the source PR is only closed but not integrated.\n-            followUpPr = repo.pullRequest(followUpPr.id());\n-            assertEquals(PreIntegrations.preIntegrateBranch(pr), followUpPr.targetRef());\n-\n-            \/\/ Simulate integrating the PR. Re-open and re-close is necessary because we want the state to be changed.\n-            pr.setState(Issue.State.OPEN);\n-            TestBotRunner.runPeriodicItems(notifyBot);\n-            pr.setState(Issue.State.CLOSED);\n-            pr.addLabel(\"integrated\");\n-            TestBotRunner.runPeriodicItems(notifyBot);\n-\n@@ -307,2 +297,27 @@\n-            assertTrue(lastComment.body().contains(\"The dependent pull request has now\"), lastComment.body());\n-            assertTrue(lastComment.body().contains(\"git checkout followup\"), lastComment.body());\n+            assertTrue(lastComment.body().contains(\"The parent pull request that this pull request \"\n+                    + \"depends on has been closed without being integrated.\"), lastComment.body());\n+\n+            \/\/ Create another follow-up work\n+            var anotherFollowUp = CheckableRepository.appendAndCommit(localRepo, \"another follow-up work\", \"another follow-up change\");\n+            localRepo.push(anotherFollowUp, repo.url(), \"another-followup\", true);\n+            var anotherFollowUpPr = credentials.createPullRequest(repo, PreIntegrations.preIntegrateBranch(followUpPr), \"another-followup\", \"This is another follow-up pull request\");\n+            anotherFollowUpPr.addLabel(\"rfr\");\n+            assertEquals(PreIntegrations.preIntegrateBranch(followUpPr), anotherFollowUpPr.targetRef());\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ Simulate that the PR has been integrated.\n+            followUpPr.setState(Issue.State.CLOSED);\n+            followUpPr.addLabel(\"integrated\");\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ The target repo should no longer contain the branch\n+            var targetBranch = PreIntegrations.preIntegrateBranch(followUpPr);\n+            assertThrows(IOException.class, () -> localRepo.fetch(repo.url(), targetBranch));\n+\n+            \/\/ The another follow-up PR should have been retargeted\n+            anotherFollowUpPr = repo.pullRequest(anotherFollowUpPr.id());\n+            assertEquals(\"master\", anotherFollowUpPr.targetRef());\n+            lastComment = anotherFollowUpPr.comments().get(anotherFollowUpPr.comments().size() - 1);\n+            assertTrue(lastComment.body().contains(\"The parent pull request that this \"\n+                    + \"pull request depends on has now been integrated\"), lastComment.body());\n+            assertTrue(lastComment.body().contains(\"git checkout another-followup\"), lastComment.body());\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/prbranch\/PullRequestBranchNotifierTests.java","additions":28,"deletions":13,"binary":false,"changes":41,"status":"modified"}]}