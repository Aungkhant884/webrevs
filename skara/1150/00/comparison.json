{"files":[{"patch":"@@ -27,2 +27,2 @@\n-public interface Collector {\n-    List<Metric> collect();\n+public interface Exporter {\n+    String export(List<Metric> metrics);\n","filename":"metrics\/src\/main\/java\/org\/openjdk\/skara\/metrics\/Exporter.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"metrics\/src\/main\/java\/org\/openjdk\/skara\/metrics\/Collector.java","status":"copied"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.metrics;\n+\n+import java.util.*;\n+\n+public class PrometheusExporter implements Exporter {\n+    @Override\n+    public String export(List<Metric> metrics) {\n+        var typed = new HashSet<String>();\n+        var sb = new StringBuilder();\n+        for (var metric : metrics) {\n+            if (!typed.contains(metric.name())) {\n+                sb.append(\"# TYPE \");\n+                sb.append(metric.name());\n+                sb.append(\" \");\n+                sb.append(metric.type().toString());\n+                sb.append(\"\\n\");\n+\n+                typed.add(metric.name());\n+            }\n+            sb.append(metric.name());\n+            var labels = metric.labels();\n+            if (!labels.isEmpty()) {\n+                sb.append(\"{\");\n+                for (var i = 0; i < labels.size(); i++) {\n+                    var label = labels.get(i);\n+                    sb.append(label.name());\n+                    sb.append(\"=\\\"\");\n+                    sb.append(label.value());\n+                    sb.append(\"\\\"\");\n+                    if (i != labels.size() - 1) {\n+                        sb.append(\",\");\n+                    }\n+                }\n+                sb.append(\"}\");\n+            }\n+            sb.append(\" \");\n+            sb.append(Double.toString(metric.value()));\n+            sb.append(\"\\n\");\n+        }\n+        return sb.toString();\n+    }\n+}\n","filename":"metrics\/src\/main\/java\/org\/openjdk\/skara\/metrics\/PrometheusExporter.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"},{"patch":"@@ -0,0 +1,169 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.metrics;\n+\n+import org.junit.jupiter.api.*;\n+import java.util.*;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class PrometheusExporterTests {\n+    private static Metric metric(Metric.Type type, String name, double value, String... labelsAndValues) {\n+        var labels = new ArrayList<Metric.Label>();\n+        for (var labelAndValue : labelsAndValues) {\n+            var parts = labelAndValue.split(\"=\");\n+            labels.add(new Metric.Label(parts[0], parts[1]));\n+        }\n+        return new Metric(type, name, labels, value);\n+    }\n+\n+    private static Metric counter(String name, double value, String... labelsAndValues) {\n+        return metric(Metric.Type.COUNTER, name, value, labelsAndValues);\n+    }\n+\n+    private static Metric gauge(String name, double value, String... labelsAndValues) {\n+        return metric(Metric.Type.GAUGE, name, value, labelsAndValues);\n+    }\n+\n+    private static List<String> export(Metric... metrics) {\n+        return export(Arrays.asList(metrics));\n+    }\n+\n+    private static List<String> export(List<Metric> metrics) {\n+        var output = new PrometheusExporter().export(metrics);\n+        return Arrays.asList(output.split(\"\\n\"));\n+    }\n+\n+    @Test\n+    void counter() {\n+        var lines = export(counter(\"test\", 17.3));\n+        assertEquals(2, lines.size());\n+        assertEquals(\"# TYPE test counter\", lines.get(0));\n+        assertEquals(\"test 17.3\", lines.get(1));\n+    }\n+\n+    @Test\n+    void counterWithOneLabel() {\n+        var lines = export(counter(\"test\", 17.3, \"a=1\"));\n+        assertEquals(2, lines.size());\n+        assertEquals(\"# TYPE test counter\", lines.get(0));\n+        assertEquals(\"test{a=\\\"1\\\"} 17.3\", lines.get(1));\n+    }\n+\n+    @Test\n+    void counterWithTwoLabels() {\n+        var lines = export(counter(\"test\", 17.3, \"a=1\", \"b=2\"));\n+        assertEquals(2, lines.size());\n+        assertEquals(\"# TYPE test counter\", lines.get(0));\n+        assertEquals(\"test{a=\\\"1\\\",b=\\\"2\\\"} 17.3\", lines.get(1));\n+    }\n+\n+    @Test\n+    void counterWithThreeLabels() {\n+        var lines = export(counter(\"test\", 17.3, \"a=1\", \"b=2\", \"c=3\"));\n+        assertEquals(2, lines.size());\n+        assertEquals(\"# TYPE test counter\", lines.get(0));\n+        assertEquals(\"test{a=\\\"1\\\",b=\\\"2\\\",c=\\\"3\\\"} 17.3\", lines.get(1));\n+    }\n+\n+    @Test\n+    void sameCounterTwice() {\n+        var lines = export(\n+            counter(\"test\", 17.3, \"a=1\"),\n+            counter(\"test\", 8.6, \"a=2\")\n+        );\n+        assertEquals(3, lines.size());\n+        assertEquals(\"# TYPE test counter\", lines.get(0));\n+        assertEquals(\"test{a=\\\"1\\\"} 17.3\", lines.get(1));\n+        assertEquals(\"test{a=\\\"2\\\"} 8.6\", lines.get(2));\n+    }\n+\n+    @Test\n+    void twoDifferentCounters() {\n+        var lines = export(\n+            counter(\"test-1\", 17.3, \"a=1\"),\n+            counter(\"test-2\", 8.6, \"a=2\")\n+        );\n+        assertEquals(4, lines.size());\n+        assertEquals(\"# TYPE test-1 counter\", lines.get(0));\n+        assertEquals(\"test-1{a=\\\"1\\\"} 17.3\", lines.get(1));\n+        assertEquals(\"# TYPE test-2 counter\", lines.get(2));\n+        assertEquals(\"test-2{a=\\\"2\\\"} 8.6\", lines.get(3));\n+    }\n+\n+    @Test\n+    void gauge() {\n+        var lines = export(gauge(\"test\", 17.3));\n+        assertEquals(2, lines.size());\n+        assertEquals(\"# TYPE test gauge\", lines.get(0));\n+        assertEquals(\"test 17.3\", lines.get(1));\n+    }\n+\n+    @Test\n+    void gaugeWithOneLabel() {\n+        var lines = export(gauge(\"test\", 17.3, \"a=1\"));\n+        assertEquals(2, lines.size());\n+        assertEquals(\"# TYPE test gauge\", lines.get(0));\n+        assertEquals(\"test{a=\\\"1\\\"} 17.3\", lines.get(1));\n+    }\n+\n+    @Test\n+    void gaugeWithTwoLabels() {\n+        var lines = export(gauge(\"test\", 17.3, \"a=1\", \"b=2\"));\n+        assertEquals(2, lines.size());\n+        assertEquals(\"# TYPE test gauge\", lines.get(0));\n+        assertEquals(\"test{a=\\\"1\\\",b=\\\"2\\\"} 17.3\", lines.get(1));\n+    }\n+\n+    @Test\n+    void gaugeWithThreeLabels() {\n+        var lines = export(gauge(\"test\", 17.3, \"a=1\", \"b=2\", \"c=3\"));\n+        assertEquals(2, lines.size());\n+        assertEquals(\"# TYPE test gauge\", lines.get(0));\n+        assertEquals(\"test{a=\\\"1\\\",b=\\\"2\\\",c=\\\"3\\\"} 17.3\", lines.get(1));\n+    }\n+\n+    @Test\n+    void sameGaugeTwice() {\n+        var lines = export(\n+            gauge(\"test\", 17.3, \"a=1\"),\n+            gauge(\"test\", 8.6, \"a=2\")\n+        );\n+        assertEquals(3, lines.size());\n+        assertEquals(\"# TYPE test gauge\", lines.get(0));\n+        assertEquals(\"test{a=\\\"1\\\"} 17.3\", lines.get(1));\n+        assertEquals(\"test{a=\\\"2\\\"} 8.6\", lines.get(2));\n+    }\n+\n+    @Test\n+    void twoDifferentGauges() {\n+        var lines = export(\n+            gauge(\"test-1\", 17.3, \"a=1\"),\n+            gauge(\"test-2\", 8.6, \"a=2\")\n+        );\n+        assertEquals(4, lines.size());\n+        assertEquals(\"# TYPE test-1 gauge\", lines.get(0));\n+        assertEquals(\"test-1{a=\\\"1\\\"} 17.3\", lines.get(1));\n+        assertEquals(\"# TYPE test-2 gauge\", lines.get(2));\n+        assertEquals(\"test-2{a=\\\"2\\\"} 8.6\", lines.get(3));\n+    }\n+}\n","filename":"metrics\/src\/test\/java\/org\/openjdk\/skara\/metrics\/PrometheusExpoterTests.java","additions":169,"deletions":0,"binary":false,"changes":169,"status":"added"}]}