{"files":[{"patch":"@@ -81,1 +81,1 @@\n-            localRepo.merge(PullRequestUtils.targetHash(pr, localRepo));\n+            localRepo.merge(PullRequestUtils.targetHash(localRepo));\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/ArchiveItem.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-import java.util.regex.Pattern;\n@@ -65,1 +64,0 @@\n-    private static final Pattern BACKPORT_PATTERN = Pattern.compile(\"<!-- backport ([0-9a-z]{40}) -->\");\n@@ -141,1 +139,1 @@\n-    private List<String> botSpecificChecks(Hash finalHash) throws IOException {\n+    private List<String> botSpecificChecks() {\n@@ -294,9 +292,2 @@\n-        var botUser = pr.repository().forge().currentUser();\n-        var backportLines = pr.comments()\n-                              .stream()\n-                              .filter(c -> c.author().equals(botUser))\n-                              .flatMap(c -> Stream.of(c.body().split(\"\\n\")))\n-                              .map(l -> BACKPORT_PATTERN.matcher(l))\n-                              .filter(Matcher::find)\n-                              .collect(Collectors.toList());\n-        if (backportLines.isEmpty()) {\n+        var hash = checkablePullRequest.findOriginalBackportHash();\n+        if (hash == null) {\n@@ -305,2 +296,0 @@\n-\n-        var hash = new Hash(backportLines.get(0).group(1));\n@@ -342,1 +331,1 @@\n-                ret.append(censusLink.get().toString());\n+                ret.append(censusLink.get());\n@@ -478,1 +467,0 @@\n-                            var properties = iss.get().properties();\n@@ -597,10 +585,5 @@\n-        switch (verdict) {\n-            case APPROVED:\n-                return \"changes are approved\";\n-            case DISAPPROVED:\n-                return \"more changes needed\";\n-            case NONE:\n-                return \"comment added\";\n-            default:\n-                throw new RuntimeException(\"Unknown verdict: \" + verdict);\n-        }\n+        return switch (verdict) {\n+            case APPROVED -> \"changes are approved\";\n+            case DISAPPROVED -> \"more changes needed\";\n+            case NONE -> \"comment added\";\n+        };\n@@ -639,1 +622,1 @@\n-                !localRepo.files(PullRequestUtils.targetHash(pr, localRepo), Path.of(\"CONTRIBUTING.md\")).isEmpty();\n+                !localRepo.files(checkablePullRequest.targetHash(), Path.of(\"CONTRIBUTING.md\")).isEmpty();\n@@ -727,1 +710,0 @@\n-            var contributor = censusInstance.namespace().get(pr.author().id());\n@@ -814,1 +796,1 @@\n-    private void addSourceBranchWarningComment(List<Comment> comments) throws IOException {\n+    private void addSourceBranchWarningComment(List<Comment> comments) {\n@@ -825,1 +807,1 @@\n-            \"in your [personal fork](\" + pr.sourceRepository().get().nonTransformedWebUrl() + \") will diverge once you sync \" +\n+            \"in your [personal fork](\" + pr.sourceRepository().orElseThrow().nonTransformedWebUrl() + \") will diverge once you sync \" +\n@@ -914,1 +896,1 @@\n-            PullRequestCheckIssueVisitor visitor = checkablePullRequest.createVisitor(localHash);\n+            PullRequestCheckIssueVisitor visitor = checkablePullRequest.createVisitor();\n@@ -919,1 +901,1 @@\n-            } else if (localHash.equals(PullRequestUtils.targetHash(pr, localRepo))) {\n+            } else if (localHash.equals(checkablePullRequest.targetHash())) {\n@@ -925,1 +907,1 @@\n-                additionalErrors = botSpecificChecks(localHash);\n+                additionalErrors = botSpecificChecks();\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":15,"deletions":33,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import java.util.regex.Matcher;\n@@ -37,0 +38,1 @@\n+import java.util.stream.Stream;\n@@ -39,0 +41,2 @@\n+    private static final Pattern BACKPORT_PATTERN = Pattern.compile(\"<!-- backport ([0-9a-z]{40}) -->\");\n+\n@@ -124,2 +128,0 @@\n-     * @param allReviews\n-     * @return\n@@ -145,1 +147,1 @@\n-            var head = localRepo.lookup(pr.headHash()).get();\n+            var head = localRepo.lookup(pr.headHash()).orElseThrow();\n@@ -175,2 +177,2 @@\n-    PullRequestCheckIssueVisitor createVisitor(Hash localHash) throws IOException {\n-        var checks = JCheck.checksFor(localRepo, PullRequestUtils.targetHash(pr, localRepo));\n+    PullRequestCheckIssueVisitor createVisitor() throws IOException {\n+        var checks = JCheck.checksFor(localRepo, targetHash());\n@@ -185,1 +187,1 @@\n-            conf = JCheck.parseConfiguration(localRepo, PullRequestUtils.targetHash(pr, localRepo), additionalConfiguration);\n+            conf = JCheck.parseConfiguration(localRepo, targetHash(), additionalConfiguration);\n@@ -188,1 +190,1 @@\n-            throw new RuntimeException(\"Failed to parse jcheck configuration at: \" + PullRequestUtils.targetHash(pr, localRepo) + \" with extra: \" + additionalConfiguration);\n+            throw new RuntimeException(\"Failed to parse jcheck configuration at: \" + targetHash() + \" with extra: \" + additionalConfiguration);\n@@ -204,2 +206,2 @@\n-            var updatedBase = localRepo.mergeBase(PullRequestUtils.targetHash(pr, localRepo), commitHash);\n-            return localRepo.commitMetadata(updatedBase, PullRequestUtils.targetHash(pr, localRepo));\n+            var updatedBase = localRepo.mergeBase(targetHash(), commitHash);\n+            return localRepo.commitMetadata(updatedBase, targetHash());\n@@ -230,1 +232,1 @@\n-                    var baseHash = localRepo.mergeBase(PullRequestUtils.targetHash(pr, localRepo), pr.headHash());\n+                    var baseHash = localRepo.mergeBase(targetHash(), pr.headHash());\n@@ -243,1 +245,1 @@\n-                    localRepo.merge(PullRequestUtils.targetHash(pr, localRepo));\n+                    localRepo.merge(targetHash());\n@@ -247,1 +249,1 @@\n-                    localRepo.rebase(PullRequestUtils.targetHash(pr, localRepo), \"duke\", \"duke@openjdk.org\");\n+                    localRepo.rebase(targetHash(), \"duke\", \"duke@openjdk.org\");\n@@ -266,0 +268,21 @@\n+    Hash findOriginalBackportHash() {\n+        var botUser = pr.repository().forge().currentUser();\n+        var backportLines = pr.comments()\n+                .stream()\n+                .filter(c -> c.author().equals(botUser))\n+                .flatMap(c -> Stream.of(c.body().split(\"\\n\")))\n+                .map(BACKPORT_PATTERN::matcher)\n+                .filter(Matcher::find)\n+                .collect(Collectors.toList());\n+        return backportLines.isEmpty() ? null : new Hash(backportLines.get(0).group(1));\n+    }\n+\n+    \/\/ Lazily initiated\n+    private Hash targetHash;\n+\n+    public Hash targetHash() throws IOException {\n+        if (targetHash == null) {\n+            targetHash = PullRequestUtils.targetHash(localRepo);\n+        }\n+        return targetHash;\n+    }\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckablePullRequest.java","additions":35,"deletions":12,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-import java.util.stream.Stream;\n@@ -43,1 +42,0 @@\n-    private static final Pattern BACKPORT_PATTERN = Pattern.compile(\"<!-- backport ([0-9a-z]{40}) -->\");\n@@ -152,1 +150,1 @@\n-            if (targetHash != null && !PullRequestUtils.targetHash(pr, localRepo).equals(targetHash)) {\n+            if (targetHash != null && !checkablePr.targetHash().equals(targetHash)) {\n@@ -154,1 +152,1 @@\n-                reply.println(\" - it has moved to \" + PullRequestUtils.targetHash(pr, localRepo) + \". Aborting integration.\");\n+                reply.println(\" - it has moved to \" + checkablePr.targetHash() + \". Aborting integration.\");\n@@ -163,1 +161,1 @@\n-                reply.println(rebaseMessage.toString());\n+                reply.println(rebaseMessage);\n@@ -167,9 +165,1 @@\n-            var botUser = pr.repository().forge().currentUser();\n-            var backportLines = pr.comments()\n-                                  .stream()\n-                                  .filter(c -> c.author().equals(botUser))\n-                                  .flatMap(c -> Stream.of(c.body().split(\"\\n\")))\n-                                  .map(l -> BACKPORT_PATTERN.matcher(l))\n-                                  .filter(Matcher::find)\n-                                  .collect(Collectors.toList());\n-            var original = backportLines.isEmpty() ? null : new Hash(backportLines.get(0).group(1));\n+            var original = checkablePr.findOriginalBackportHash();\n@@ -178,9 +168,1 @@\n-            var issues = checkablePr.createVisitor(localHash);\n-            var additionalConfiguration = AdditionalConfiguration.get(localRepo, localHash, pr.repository().forge().currentUser(), allComments);\n-            checkablePr.executeChecks(localHash, censusInstance, issues, additionalConfiguration);\n-            if (!issues.messages().isEmpty()) {\n-                reply.print(\"Your integration request cannot be fulfilled at this time, as \");\n-                reply.println(\"your changes failed the final jcheck:\");\n-                issues.messages().stream()\n-                      .map(line -> \" * \" + line)\n-                      .forEach(reply::println);\n+            if (runJcheck(pr, censusInstance, allComments, reply, localRepo, checkablePr, localHash)) {\n@@ -202,1 +184,1 @@\n-            if (!localHash.equals(PullRequestUtils.targetHash(pr, localRepo))) {\n+            if (!localHash.equals(checkablePr.targetHash())) {\n@@ -219,0 +201,19 @@\n+    \/**\n+     * Runs the checks adding to the reply message and returns true if any of them failed\n+     *\/\n+    static boolean runJcheck(PullRequest pr, CensusInstance censusInstance, List<Comment> allComments, PrintWriter reply,\n+                      Repository localRepo, CheckablePullRequest checkablePr, Hash localHash) throws IOException {\n+        var issues = checkablePr.createVisitor();\n+        var additionalConfiguration = AdditionalConfiguration.get(localRepo, localHash, pr.repository().forge().currentUser(), allComments);\n+        checkablePr.executeChecks(localHash, censusInstance, issues, additionalConfiguration);\n+        if (!issues.messages().isEmpty()) {\n+            reply.print(\"Your integration request cannot be fulfilled at this time, as \");\n+            reply.println(\"your changes failed the final jcheck:\");\n+            issues.messages().stream()\n+                  .map(line -> \" * \" + line)\n+                  .forEach(reply::println);\n+            return true;\n+        }\n+        return false;\n+    }\n+\n@@ -242,3 +243,0 @@\n-            var path = scratchPath.resolve(\"integrate\").resolve(pr.repository().name());\n-            var seedPath = bot.seedStorage().orElse(scratchPath.resolve(\"seeds\"));\n-            var hostedRepositoryPool = new HostedRepositoryPool(seedPath);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/IntegrateCommand.java","additions":25,"deletions":27,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -34,2 +34,0 @@\n-import java.util.stream.Stream;\n-import java.util.stream.Collectors;\n@@ -37,2 +35,0 @@\n-import java.util.regex.Pattern;\n-import java.util.regex.Matcher;\n@@ -42,1 +38,0 @@\n-    private static final Pattern BACKPORT_PATTERN = Pattern.compile(\"<!-- backport ([0-9a-z]{40}) -->\");\n@@ -67,1 +62,1 @@\n-        var acceptedHash = readyHash.get();\n+        var acceptedHash = readyHash.orElseThrow();\n@@ -103,1 +98,1 @@\n-                if (!PullRequestUtils.targetHash(pr, localRepo).equals(wantedHash)) {\n+                if (!checkablePr.targetHash().equals(wantedHash)) {\n@@ -105,1 +100,1 @@\n-                    reply.println(\" - it has moved to \" + PullRequestUtils.targetHash(pr, localRepo) + \". Aborting integration.\");\n+                    reply.println(\" - it has moved to \" + checkablePr.targetHash() + \". Aborting integration.\");\n@@ -115,1 +110,1 @@\n-                reply.println(rebaseMessage.toString());\n+                reply.println(rebaseMessage);\n@@ -119,9 +114,1 @@\n-            var botUser = pr.repository().forge().currentUser();\n-            var backportLines = pr.comments()\n-                                  .stream()\n-                                  .filter(c -> c.author().equals(botUser))\n-                                  .flatMap(c -> Stream.of(c.body().split(\"\\n\")))\n-                                  .map(l -> BACKPORT_PATTERN.matcher(l))\n-                                  .filter(Matcher::find)\n-                                  .collect(Collectors.toList());\n-            var original = backportLines.isEmpty() ? null : new Hash(backportLines.get(0).group(1));\n+            var original = checkablePr.findOriginalBackportHash();\n@@ -131,9 +118,1 @@\n-            var issues = checkablePr.createVisitor(localHash);\n-            var additionalConfiguration = AdditionalConfiguration.get(localRepo, localHash, pr.repository().forge().currentUser(), allComments);\n-            checkablePr.executeChecks(localHash, censusInstance, issues, additionalConfiguration);\n-            if (!issues.messages().isEmpty()) {\n-                reply.print(\"Your integration request cannot be fulfilled at this time, as \");\n-                reply.println(\"your changes failed the final jcheck:\");\n-                issues.messages().stream()\n-                      .map(line -> \" * \" + line)\n-                      .forEach(reply::println);\n+            if (IntegrateCommand.runJcheck(pr, censusInstance, allComments, reply, localRepo, checkablePr, localHash)) {\n@@ -143,1 +122,1 @@\n-            if (!localHash.equals(PullRequestUtils.targetHash(pr, localRepo))) {\n+            if (!localHash.equals(checkablePr.targetHash())) {\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/SponsorCommand.java","additions":7,"deletions":28,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-    private static Hash commitSquashed(PullRequest pr, Repository localRepo, Hash finalHead, Author author, Author committer, String commitMessage) throws IOException {\n+    private static Hash commitSquashed(Repository localRepo, Hash finalHead, Author author, Author committer, String commitMessage) throws IOException {\n@@ -39,1 +39,1 @@\n-                                committer.name(), committer.email(), ZonedDateTime.now(), List.of(targetHash(pr, localRepo)), localRepo.tree(finalHead));\n+                                committer.name(), committer.email(), ZonedDateTime.now(), List.of(targetHash(localRepo)), localRepo.tree(finalHead));\n@@ -45,1 +45,1 @@\n-    private static Optional<Hash> fetchRef(Repository localRepo, URI uri, String ref) throws IOException {\n+    private static Optional<Hash> fetchRef(Repository localRepo, URI uri, String ref) {\n@@ -51,0 +51,1 @@\n+            \/\/ Ignored\n@@ -58,0 +59,1 @@\n+            \/\/ Ignored\n@@ -67,1 +69,1 @@\n-                                            mergeSourcePattern.toString() + \"` to allow verification of the merge contents.\");\n+                                            mergeSourcePattern + \"` to allow verification of the merge contents.\");\n@@ -77,1 +79,1 @@\n-                var prTargetHash = PullRequestUtils.targetHash(pr, localRepo);\n+                var prTargetHash = PullRequestUtils.targetHash(localRepo);\n@@ -130,1 +132,1 @@\n-            localRepo.mergeBase(targetHash(pr, localRepo), sourceHead);\n+            localRepo.mergeBase(targetHash(localRepo), sourceHead);\n@@ -150,1 +152,1 @@\n-        var parents = List.of(localRepo.mergeBase(targetHash(pr, localRepo), finalHead), sourceHash);\n+        var parents = List.of(localRepo.mergeBase(targetHash(localRepo), finalHead), sourceHash);\n@@ -156,1 +158,1 @@\n-    public static Hash targetHash(PullRequest pr, Repository localRepo) throws IOException {\n+    public static Hash targetHash(Repository localRepo) throws IOException {\n@@ -178,1 +180,1 @@\n-            commit = commitSquashed(pr, localRepo, finalHead, author, committer, commitMessage);\n+            commit = commitSquashed(localRepo, finalHead, author, committer, commitMessage);\n@@ -187,1 +189,1 @@\n-        return localRepo.mergeBase(targetHash(pr, localRepo), pr.headHash());\n+        return localRepo.mergeBase(targetHash(localRepo), pr.headHash());\n@@ -220,1 +222,1 @@\n-            if (!localRepo.mergeBase(targetHash(pr, localRepo), mergeParent).equals(mergeParent)) {\n+            if (!localRepo.mergeBase(targetHash(localRepo), mergeParent).equals(mergeParent)) {\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/PullRequestUtils.java","additions":13,"deletions":11,"binary":false,"changes":24,"status":"modified"}]}