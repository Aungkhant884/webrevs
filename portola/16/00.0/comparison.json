{"files":[{"patch":"@@ -1,23 +1,0 @@\n-;\n-; Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n-; DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-;\n-; This code is free software; you can redistribute it and\/or modify it\n-; under the terms of the GNU General Public License version 2 only, as\n-; published by the Free Software Foundation.\n-;\n-; This code is distributed in the hope that it will be useful, but WITHOUT\n-; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-; version 2 for more details (a copy is included in the LICENSE file that\n-; accompanied this code).\n-;\n-; You should have received a copy of the GNU General Public License version\n-; 2 along with this work; if not, write to the Free Software Foundation,\n-; Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-;\n-; Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-; or visit www.oracle.com if you need additional information or have any\n-; questions.\n-;\n-\n@@ -25,1 +2,0 @@\n-repository=portola\n@@ -30,1 +6,5 @@\n-error=author,committer,whitespace,executable\n+error=author,committer,executable,symlink,whitespace\n+\n+[repository]\n+tags=(?:jdk-(?:[1-9]([0-9]*)(?:\\.(?:0|[1-9][0-9]*)){0,4})(?:\\+(?:(?:[0-9]+))|(?:-ga)))|(?:jdk[4-9](?:u\\d{1,3})?-(?:(?:b\\d{2,3})|(?:ga)))|(?:hs\\d\\d(?:\\.\\d{1,2})?-b\\d\\d)\n+branches=\n@@ -37,1 +17,4 @@\n-files=.*\\.java$|.*\\.cpp$|.*\\.hpp$|.*\\.c$|.*\\.h$\n+files=.*\\.cpp|.*\\.hpp|.*\\.c|.*\\.h|.*\\.java|.*\\.cc|.*\\.hh|.*\\.m|.*\\.mm\n+\n+[checks \"committer\"]\n+role=committer\n","filename":".jcheck\/conf","additions":9,"deletions":26,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -390,1 +390,1 @@\n-    common.boot_jdk_version = \"14\";\n+    common.boot_jdk_version = \"15\";\n@@ -980,1 +980,1 @@\n-        linux_x64: \"gcc9.2.0-OL6.4+1.0\",\n+        linux_x64: \"gcc10.2.0-OL6.4+1.0\",\n@@ -982,2 +982,2 @@\n-        windows_x64: \"VS2019-16.5.3+1.0\",\n-        linux_aarch64: \"gcc9.2.0-OL7.6+1.0\",\n+        windows_x64: \"VS2019-16.7.2+1.0\",\n+        linux_aarch64: \"gcc10.2.0-OL7.6+1.0\",\n@@ -1016,11 +1016,2 @@\n-    if (input.build_cpu == 'aarch64') {\n-        boot_jdk = {\n-            organization: common.organization,\n-            ext: \"tar.gz\",\n-            module: \"jdk-linux_aarch64\",\n-            revision: \"14+1.0\",\n-            configure_args: \"--with-boot-jdk=\" + common.boot_jdk_home,\n-            environment_path: common.boot_jdk_home + \"\/bin\"\n-        }\n-    } else {\n-        boot_jdk = {\n+    var dependencies = {\n+        boot_jdk: {\n@@ -1035,5 +1026,1 @@\n-        }\n-    }\n-\n-    var dependencies = {\n-        boot_jdk: boot_jdk,\n+        },\n","filename":"make\/conf\/jib-profiles.js","additions":7,"deletions":20,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+#include \"runtime\/globals_extension.hpp\"\n@@ -323,1 +324,1 @@\n-\/\/ i386: 224, ia64: 1105, amd64: 186, sparc 143\n+\/\/ i386: 224, ia64: 1105, amd64: 186, sparc: 143\n@@ -983,7 +984,0 @@\n-  \/\/ Aborted due to thread limit being reached\n-  if (state == ZOMBIE) {\n-    thread->set_osthread(NULL);\n-    delete osthread;\n-    return false;\n-  }\n-\n@@ -1046,2 +1040,1 @@\n-    JavaThread *jt = (JavaThread *)thread;\n-    address addr = jt->stack_reserved_zone_base();\n+    address addr = thread->stack_reserved_zone_base();\n@@ -1049,1 +1042,1 @@\n-    assert(jt->stack_available(addr) > 0, \"stack guard should not be enabled\");\n+    assert(thread->stack_available(addr) > 0, \"stack guard should not be enabled\");\n@@ -1052,1 +1045,1 @@\n-    os::Linux::manually_expand_stack(jt, addr);\n+    os::Linux::manually_expand_stack(thread, addr);\n@@ -1787,1 +1780,0 @@\n-        assert(Thread::current()->is_Java_thread(), \"must be Java thread\");\n@@ -3668,3 +3660,0 @@\n-\/\/ If 'fixed' is true, anon_mmap() will attempt to reserve anonymous memory\n-\/\/ at 'requested_addr'. If there are existing memory mappings at the same\n-\/\/ location, however, they will be overwritten. If 'fixed' is false,\n@@ -3674,9 +3663,3 @@\n-static char* anon_mmap(char* requested_addr, size_t bytes, bool fixed) {\n-  char * addr;\n-  int flags;\n-\n-  flags = MAP_PRIVATE | MAP_NORESERVE | MAP_ANONYMOUS;\n-  if (fixed) {\n-    assert((uintptr_t)requested_addr % os::Linux::page_size() == 0, \"unaligned address\");\n-    flags |= MAP_FIXED;\n-  }\n+static char* anon_mmap(char* requested_addr, size_t bytes) {\n+  \/\/ MAP_FIXED is intentionally left out, to leave existing mappings intact.\n+  const int flags = MAP_PRIVATE | MAP_NORESERVE | MAP_ANONYMOUS;\n@@ -3687,2 +3670,1 @@\n-  addr = (char*)::mmap(requested_addr, bytes, PROT_NONE,\n-                       flags, -1, 0);\n+  char* addr = (char*)::mmap(requested_addr, bytes, PROT_NONE, flags, -1, 0);\n@@ -3701,2 +3683,1 @@\n-static char* anon_mmap_aligned(size_t bytes, size_t alignment, char* req_addr) {\n-\n+static char* anon_mmap_aligned(char* req_addr, size_t bytes, size_t alignment) {\n@@ -3708,6 +3689,2 @@\n-  char* start = (char*) ::mmap(req_addr, extra_size, PROT_NONE,\n-    MAP_PRIVATE|MAP_ANONYMOUS|MAP_NORESERVE,\n-    -1, 0);\n-  if (start == MAP_FAILED) {\n-    start = NULL;\n-  } else {\n+  char* start = anon_mmap(req_addr, bytes);\n+  if (start != NULL) {\n@@ -3739,3 +3716,3 @@\n-char* os::pd_reserve_memory(size_t bytes, char* requested_addr,\n-                            size_t alignment_hint) {\n-  return anon_mmap(requested_addr, bytes, (requested_addr != NULL));\n+char* os::pd_reserve_memory(size_t bytes, size_t alignment_hint) {\n+  \/\/ Ignores alignment hint\n+  return anon_mmap(NULL, bytes);\n@@ -4099,1 +4076,1 @@\n-  char* pre_reserved_addr = anon_mmap_aligned(bytes, alignment, NULL);\n+  char* pre_reserved_addr = anon_mmap_aligned(NULL \/* req_addr *\/, bytes, alignment);\n@@ -4268,1 +4245,1 @@\n-  char* const start = anon_mmap_aligned(bytes, alignment, req_addr);\n+  char* const start = anon_mmap_aligned(req_addr, bytes, alignment);\n@@ -4421,1 +4398,1 @@\n-char* os::pd_attempt_reserve_memory_at(size_t bytes, char* requested_addr, int file_desc) {\n+char* os::pd_attempt_reserve_memory_at(char* requested_addr, size_t bytes, int file_desc) {\n@@ -4423,1 +4400,1 @@\n-  char* result = pd_attempt_reserve_memory_at(bytes, requested_addr);\n+  char* result = pd_attempt_reserve_memory_at(requested_addr, bytes);\n@@ -4435,1 +4412,1 @@\n-char* os::pd_attempt_reserve_memory_at(size_t bytes, char* requested_addr) {\n+char* os::pd_attempt_reserve_memory_at(char* requested_addr, size_t bytes) {\n@@ -4448,1 +4425,1 @@\n-  char * addr = anon_mmap(requested_addr, bytes, false);\n+  char * addr = anon_mmap(requested_addr, bytes);\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":21,"deletions":44,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -820,3 +820,0 @@\n-  if (_process_strong_tasks->try_claim_task(GCH_PS_ObjectSynchronizer_oops_do)) {\n-    ObjectSynchronizer::oops_do(strong_roots);\n-  }\n@@ -1035,5 +1032,0 @@\n-bool GenCollectedHeap::supports_tlab_allocation() const {\n-  assert(!_old_gen->supports_tlab_allocation(), \"Old gen supports TLAB allocation?!\");\n-  return _young_gen->supports_tlab_allocation();\n-}\n-\n@@ -1042,4 +1034,2 @@\n-  if (_young_gen->supports_tlab_allocation()) {\n-    return _young_gen->tlab_capacity();\n-  }\n-  return 0;\n+  assert(_young_gen->supports_tlab_allocation(), \"Young gen doesn't support TLAB allocation?!\");\n+  return _young_gen->tlab_capacity();\n@@ -1050,4 +1040,2 @@\n-  if (_young_gen->supports_tlab_allocation()) {\n-    return _young_gen->tlab_used();\n-  }\n-  return 0;\n+  assert(_young_gen->supports_tlab_allocation(), \"Young gen doesn't support TLAB allocation?!\");\n+  return _young_gen->tlab_used();\n@@ -1058,4 +1046,2 @@\n-  if (_young_gen->supports_tlab_allocation()) {\n-    return _young_gen->unsafe_max_tlab_alloc();\n-  }\n-  return 0;\n+  assert(_young_gen->supports_tlab_allocation(), \"Young gen doesn't support TLAB allocation?!\");\n+  return _young_gen->unsafe_max_tlab_alloc();\n","filename":"src\/hotspot\/share\/gc\/shared\/genCollectedHeap.cpp","additions":6,"deletions":20,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -300,0 +300,16 @@\n+void Abstract_VM_Version::insert_features_names(char* buf, size_t buflen, const char* features_names[]) {\n+  uint64_t features = _features;\n+  uint features_names_index = 0;\n+\n+  while (features != 0) {\n+    if (features & 1) {\n+      int res = jio_snprintf(buf, buflen, \", %s\", features_names[features_names_index]);\n+      assert(res > 0, \"not enough temporary space allocated\");\n+      buf += res;\n+      buflen -= res;\n+    }\n+    features >>= 1;\n+    ++features_names_index;\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/runtime\/abstract_vm_version.cpp","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -21,1 +21,1 @@\n-com\/apple\/laf com\/sun\/java\/accessibility com\/sun\/java\/swing sanity\/client demo\/jfc \\\n+com\/apple\/laf com\/apple\/eawt com\/sun\/java\/accessibility com\/sun\/java\/swing sanity\/client demo\/jfc \\\n","filename":"test\/jdk\/TEST.ROOT","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}