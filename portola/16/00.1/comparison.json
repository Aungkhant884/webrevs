{"files":[{"patch":"@@ -1,1 +1,1 @@\n-project=jdk\n+project=portola\n@@ -6,1 +6,1 @@\n-error=author,committer,reviewers,merge,issues,executable,symlink,message,hg-tag,whitespace,problemlists\n+error=author,committer,executable,symlink,whitespace\n@@ -19,7 +19,0 @@\n-[checks \"merge\"]\n-message=Merge\n-\n-[checks \"reviewers\"]\n-reviewers=1\n-ignore=duke\n-\n@@ -28,6 +21,0 @@\n-\n-[checks \"issues\"]\n-pattern=^([124-8][0-9]{6}): (\\S.*)$\n-\n-[checks \"problemlists\"]\n-dirs=test\/jdk|test\/langtools|test\/lib-test|test\/hotspot\/jtreg|test\/jaxp\n","filename":".jcheck\/conf","additions":2,"deletions":15,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -61,0 +61,1 @@\n+ * input.target_libc\n@@ -63,0 +64,1 @@\n+ * input.build_libc\n@@ -103,1 +105,3 @@\n- *       \/\/ Combination of target_os and target_cpu for convenience\n+ *       \/\/ Optional libc string if non standard\n+ *       target_libc; <string>\n+ *       \/\/ Optional combination of target_os and target_cpu for convenience\n@@ -109,1 +113,3 @@\n- *       \/\/ Combination of build_os and build_cpu for convenience\n+ *       \/\/ Optional libc string if non standard\n+ *       build_libc; <string>\n+ *       \/\/ Optional combination of build_os and build_cpu for convenience\n@@ -195,1 +201,1 @@\n-    data.product = \"jdk\";\n+    data.product = \"jdk-portola\";\n@@ -242,1 +248,1 @@\n-        \"linux-x64\", \"linux-x86\", \"macosx-x64\",\n+        \"linux-x64\", \"linux-x64-musl\", \"linux-x86\", \"macosx-x64\",\n@@ -415,0 +421,8 @@\n+        \"linux-x64-musl\": {\n+            target_os: \"linux\",\n+            target_cpu: \"x64\",\n+            target_libc: \"musl\",\n+            configure_args: concat(common.configure_args_64bit,\n+                \"--with-zlib=system\"),\n+        },\n+\n@@ -642,0 +656,4 @@\n+        \"linux-x64-musl\": {\n+            platform: \"linux-x64-musl\",\n+            demo_ext: \"tar.gz\"\n+        },\n@@ -984,1 +1002,2 @@\n-        + \"-\" + input.build_cpu;\n+        + \"-\" + input.build_cpu +\n+        (input.build_libc ? \"-\" + input.build_libc : \"\");\n@@ -1000,1 +1019,1 @@\n-            product: \"jdk\",\n+            product: input.build_libc == \"musl\" ? \"jdk-portola\" : \"jdk\",\n","filename":"make\/conf\/jib-profiles.js","additions":25,"deletions":6,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -106,1 +106,0 @@\n-# include <gnu\/libc-version.h>\n@@ -158,2 +157,2 @@\n-const char * os::Linux::_glibc_version = NULL;\n-const char * os::Linux::_libpthread_version = NULL;\n+const char * os::Linux::_glibc_version = \"unknown\";\n+const char * os::Linux::_libpthread_version = \"unknown\";\n@@ -612,5 +611,8 @@\n-  size_t n = confstr(_CS_GNU_LIBC_VERSION, NULL, 0);\n-  assert(n > 0, \"cannot retrieve glibc version\");\n-  char *str = (char *)malloc(n, mtInternal);\n-  confstr(_CS_GNU_LIBC_VERSION, str, n);\n-  os::Linux::set_glibc_version(str);\n+  size_t n;\n+\n+  n = confstr(_CS_GNU_LIBC_VERSION, NULL, 0);\n+  if (n > 0) {\n+    char* str = (char *)malloc(n, mtInternal);\n+    confstr(_CS_GNU_LIBC_VERSION, str, n);\n+    os::Linux::set_glibc_version(str);\n+  }\n@@ -619,4 +621,5 @@\n-  assert(n > 0, \"cannot retrieve pthread version\");\n-  str = (char *)malloc(n, mtInternal);\n-  confstr(_CS_GNU_LIBPTHREAD_VERSION, str, n);\n-  os::Linux::set_libpthread_version(str);\n+  if (n > 0) {\n+    char* str = (char *)malloc(n, mtInternal);\n+    confstr(_CS_GNU_LIBPTHREAD_VERSION, str, n);\n+    os::Linux::set_libpthread_version(str);\n+  }\n@@ -3262,0 +3265,20 @@\n+static void* dlvsym_if_available(void* handle, const char* name, const char* version) {\n+  typedef void* (*dlvsym_func_type)(void* handle, const char* name, const char* version);\n+  static dlvsym_func_type dlvsym_func;\n+  static bool initialized = false;\n+\n+  if (!initialized) {\n+    dlvsym_func = (dlvsym_func_type)dlsym(RTLD_NEXT, \"dlvsym\");\n+    initialized = true;\n+  }\n+\n+  if (dlvsym_func != NULL) {\n+    void *f = dlvsym_func(handle, name, version);\n+    if (f != NULL) {\n+      return f;\n+    }\n+  }\n+\n+  return dlsym(handle, name);\n+}\n+\n@@ -3265,5 +3288,1 @@\n-  void *f = dlvsym(handle, name, \"libnuma_1.1\");\n-  if (f == NULL) {\n-    f = dlsym(handle, name);\n-  }\n-  return f;\n+  return dlvsym_if_available(handle, name, \"libnuma_1.1\");\n@@ -3275,1 +3294,1 @@\n-  return dlvsym(handle, name, \"libnuma_1.2\");\n+  return dlvsym_if_available(handle, name, \"libnuma_1.2\");\n@@ -5216,0 +5235,57 @@\n+\/\/ Some linux distributions (notably: Alpine Linux) include the\n+\/\/ grsecurity in the kernel by default. Of particular interest from a\n+\/\/ JVM perspective is PaX (https:\/\/pax.grsecurity.net\/), which adds\n+\/\/ some security features related to page attributes. Specifically,\n+\/\/ the MPROTECT PaX functionality\n+\/\/ (https:\/\/pax.grsecurity.net\/docs\/mprotect.txt) prevents dynamic\n+\/\/ code generation by disallowing a (previously) writable page to be\n+\/\/ marked as executable. This is, of course, exactly what HotSpot does\n+\/\/ for both JIT compiled method, as well as for stubs, adapters, etc.\n+\/\/\n+\/\/ Instead of crashing \"lazily\" when trying to make a page executable,\n+\/\/ this code probes for the presence of PaX and reports the failure\n+\/\/ eagerly.\n+static void check_pax(void) {\n+  \/\/ Zero doesn't generate code dynamically, so no need to perform the PaX check\n+#ifndef ZERO\n+  size_t size = os::Linux::page_size();\n+\n+  void* p = ::mmap(NULL, size, PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0);\n+  if (p == MAP_FAILED) {\n+    vm_exit_out_of_memory(size, OOM_MMAP_ERROR, \"failed to allocate memory for PaX check.\");\n+  }\n+\n+  int res = ::mprotect(p, size, PROT_WRITE|PROT_EXEC);\n+  if (res == -1) {\n+    vm_exit_during_initialization(\"Failed to mark memory page as executable\",\n+                                  \"Please check if grsecurity\/PaX is enabled in your kernel.\\n\"\n+                                  \"\\n\"\n+                                  \"For example, you can do this by running (note: you may need root privileges):\\n\"\n+                                  \"\\n\"\n+                                  \"    sysctl kernel.pax.softmode\\n\"\n+                                  \"\\n\"\n+                                  \"If PaX is included in the kernel you will see something like this:\\n\"\n+                                  \"\\n\"\n+                                  \"    kernel.pax.softmode = 0\\n\"\n+                                  \"\\n\"\n+                                  \"In particular, if the value is 0 (zero), then PaX is enabled.\\n\"\n+                                  \"\\n\"\n+                                  \"PaX includes security functionality which interferes with the dynamic code\\n\"\n+                                  \"generation the JVM relies on. Specifically, the MPROTECT functionality as\\n\"\n+                                  \"described on https:\/\/pax.grsecurity.net\/docs\/mprotect.txt is not compatible\\n\"\n+                                  \"with the JVM. If you want to allow the JVM to run you will have to disable PaX.\\n\"\n+                                  \"You can do this on a per-executable basis using the paxctl tool, for example:\\n\"\n+                                  \"\\n\"\n+                                  \"    paxctl -cm bin\/java\\n\"\n+                                  \"\\n\"\n+                                  \"Please note that this modifies the executable binary in-place, so you may want\\n\"\n+                                  \"to make a backup of it first. Also note that you have to repeat this for other\\n\"\n+                                  \"executables like javac, jar, jcmd, etc.\\n\"\n+                                  );\n+\n+  }\n+\n+  ::munmap(p, size);\n+#endif\n+}\n+\n@@ -5249,0 +5325,2 @@\n+  check_pax();\n+\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":96,"deletions":18,"binary":false,"changes":114,"status":"modified"},{"patch":"@@ -1069,1 +1069,1 @@\n-  ScratchBlock **smallest_ptr, *smallest;\n+  ScratchBlock **smallest_ptr = NULL, *smallest;\n","filename":"src\/hotspot\/share\/gc\/shared\/genCollectedHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -260,0 +260,6 @@\n+  #ifdef HOTSPOT_LIBC\n+    #define LIBC_STR \"-\" HOTSPOT_LIBC\n+  #else\n+    #define LIBC_STR \"\"\n+  #endif\n+\n@@ -265,1 +271,1 @@\n-         \" for \" OS \"-\" CPU FLOAT_ARCH_STR \\\n+         \" for \" OS \"-\" CPU FLOAT_ARCH_STR LIBC_STR \\\n","filename":"src\/hotspot\/share\/runtime\/abstract_vm_version.cpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -55,0 +55,1 @@\n+    vm.musl \\\n","filename":"test\/jdk\/TEST.ROOT","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}