{"files":[{"patch":"@@ -0,0 +1,23 @@\n+;\n+; Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+; DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+;\n+; This code is free software; you can redistribute it and\/or modify it\n+; under the terms of the GNU General Public License version 2 only, as\n+; published by the Free Software Foundation.\n+;\n+; This code is distributed in the hope that it will be useful, but WITHOUT\n+; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; version 2 for more details (a copy is included in the LICENSE file that\n+; accompanied this code).\n+;\n+; You should have received a copy of the GNU General Public License version\n+; 2 along with this work; if not, write to the Free Software Foundation,\n+; Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+;\n+; Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+; or visit www.oracle.com if you need additional information or have any\n+; questions.\n+;\n+\n@@ -2,2 +25,3 @@\n-project=jdk\n-jbs=JDK\n+project=amber\n+repository=amber\n+jbs=jdk\n","filename":".jcheck\/conf","additions":26,"deletions":2,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -221,0 +221,2 @@\n+        LAMBDA_PARAMETER_SHADOWING(JDK16),\n+        UNDERSCORE_AS_PARAM_NAME(JDK16),\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Source.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -158,0 +158,8 @@\n+    \/** A common method type for all those method symbols owning a lambda scope.\n+     *\/\n+    public final MethodType lambdaScopeMethodType;\n+\n+    \/** A common method type for all those method symbols owning a block scope.\n+     *\/\n+    public final MethodType blockScopeMethodType;\n+\n@@ -482,0 +490,3 @@\n+        lambdaScopeMethodType = new MethodType(List.nil(), voidType, List.nil(), methodClass);\n+        blockScopeMethodType = new MethodType(List.nil(), voidType, List.nil(), methodClass);\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symtab.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -171,0 +171,1 @@\n+        allowShadowingOfLambdaParameters = Feature.LAMBDA_PARAMETER_SHADOWING.allowedInSource(source);\n@@ -216,0 +217,5 @@\n+    \/**\n+     * Switch: allow shadowing of lambda parameters?\n+     *\/\n+    boolean allowShadowingOfLambdaParameters;\n+\n@@ -1316,0 +1322,6 @@\n+            if (tree.name == names.underscore) {\n+                WriteableScope enclScope = enter.enterScope(env);\n+                if (enclScope != null) {\n+                    enclScope.remove(tree.sym);\n+                }\n+            }\n@@ -1412,1 +1424,1 @@\n-                    env.info.scope.owner.flags() & STRICTFP, names.empty, null,\n+                    env.info.scope.owner.flags() & STRICTFP, names.empty, syms.blockScopeMethodType,\n@@ -3333,0 +3345,2 @@\n+            ClassSymbol enclClass = owner.enclClass();\n+            Symbol newScopeOwner = null;\n@@ -3335,2 +3349,1 @@\n-                ClassSymbol enclClass = owner.enclClass();\n-                Symbol newScopeOwner = env.info.scope.owner;\n+                newScopeOwner = env.info.scope.owner;\n@@ -3361,0 +3374,10 @@\n+            } else {\n+                if (allowShadowingOfLambdaParameters) {\n+                    newScopeOwner = new MethodSymbol(\n+                        HYPOTHETICAL,\n+                        names.empty,\n+                        syms.lambdaScopeMethodType,\n+                        owner);\n+                }\n+            }\n+            if (newScopeOwner != null) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":26,"deletions":3,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -483,0 +483,1 @@\n+            owner1 = skipLambdaOwner(owner1);\n@@ -486,0 +487,1 @@\n+                owner1 = skipLambdaOwner(owner1);\n@@ -520,0 +522,7 @@\n+        private Symbol skipLambdaOwner(Symbol currentOwner) {\n+            while (currentOwner.type == syms.lambdaScopeMethodType) {\n+                currentOwner = currentOwner.owner;\n+            }\n+            return currentOwner;\n+        }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Enter.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -147,0 +147,3 @@\n+    \/** The symbol table. *\/\n+    private final Symtab syms;\n+\n@@ -185,0 +188,2 @@\n+        syms = Symtab.instance(context);\n+\n@@ -331,1 +336,1 @@\n-            (c.owner.type == null \/\/ local to init block\n+            (c.owner.type == syms.blockScopeMethodType \/\/ local to init block\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassWriter.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -567,1 +567,1 @@\n-        return ident(false);\n+        return ident(false, false);\n@@ -571,0 +571,4 @@\n+        return ident(advanceOnErrors, false);\n+    }\n+\n+    protected Name ident(boolean advanceOnErrors, boolean underscoreAllowed) {\n@@ -596,4 +600,10 @@\n-            if (Feature.UNDERSCORE_IDENTIFIER.allowedInSource(source)) {\n-                log.warning(token.pos, Warnings.UnderscoreAsIdentifier);\n-            } else {\n-                log.error(DiagnosticFlag.SYNTAX, token.pos, Errors.UnderscoreAsIdentifier);\n+            if (!underscoreAllowed) {\n+                if (Feature.UNDERSCORE_AS_PARAM_NAME.allowedInSource(source)) {\n+                    log.error(token.pos, Errors.UnderscoreNotAllowed);\n+                } else {\n+                    if (Feature.UNDERSCORE_IDENTIFIER.allowedInSource(source)) {\n+                        log.warning(token.pos, Warnings.UnderscoreAsIdentifier);\n+                    } else {\n+                        log.error(DiagnosticFlag.SYNTAX, token.pos, Errors.UnderscoreAsIdentifier);\n+                    }\n+                }\n@@ -617,1 +627,5 @@\n-        JCExpression t = toP(F.at(token.pos).Ident(ident()));\n+        return qualident(allowAnnos, false);\n+    }\n+\n+    public JCExpression qualident(boolean allowAnnos, boolean underscoreAllowed) {\n+        JCExpression t = toP(F.at(token.pos).Ident(ident(false, underscoreAllowed)));\n@@ -1798,1 +1812,1 @@\n-                formalParameters(true, false) :\n+                formalParameters(FormalParameterKind.LAMBDA) :\n@@ -2876,1 +2890,1 @@\n-        JCVariableDecl formal = variableDeclaratorId(mods, paramType);\n+        JCVariableDecl formal = variableDeclaratorId(mods, paramType, FormalParameterKind.CATCH);\n@@ -3373,0 +3387,29 @@\n+    \/** The kind of a formal parameter\n+     *\/\n+    enum FormalParameterKind {\n+        \/* a formal lambda parameter\n+         *\/\n+        LAMBDA {\n+            @Override\n+            boolean isLambdaParameter() {\n+                return true;\n+            }\n+        },\n+        \/* a formal catch clause parameter\n+         *\/\n+        CATCH,\n+        \/* a formal method parameter\n+         *\/\n+        METHOD,\n+        \/* a formal record parameter\n+         *\/\n+        RECORD;\n+\n+        boolean isLambdaParameter() {\n+            return false;\n+        }\n+        boolean isRecordParameter() {\n+            return false;\n+        }\n+    }\n+\n@@ -3376,1 +3419,1 @@\n-        return variableDeclaratorId(mods, type, false, false);\n+        return variableDeclaratorId(mods, type, FormalParameterKind.METHOD);\n@@ -3378,2 +3421,2 @@\n-    \/\/where\n-    JCVariableDecl variableDeclaratorId(JCModifiers mods, JCExpression type, boolean lambdaParameter, boolean recordComponent) {\n+\n+    JCVariableDecl variableDeclaratorId(JCModifiers mods, JCExpression type, FormalParameterKind parameterKind) {\n@@ -3382,1 +3425,3 @@\n-        if (lambdaParameter && token.kind == UNDERSCORE) {\n+        boolean allowUnderscoreAsFormal = Feature.UNDERSCORE_AS_PARAM_NAME.allowedInSource(source);\n+        boolean isUnderscore = token.kind == UNDERSCORE;\n+        if (parameterKind.isLambdaParameter() && isUnderscore && !allowUnderscoreAsFormal) {\n@@ -3386,0 +3431,4 @@\n+        } else if (parameterKind == FormalParameterKind.METHOD && isUnderscore && allowUnderscoreAsFormal) {\n+            log.error(pos, Errors.UnderscoreAsIdentifierInMethod);\n+            name = token.name();\n+            nextToken();\n@@ -3388,1 +3437,1 @@\n-                !lambdaParameter ||\n+                parameterKind != FormalParameterKind.LAMBDA ||\n@@ -3392,1 +3441,1 @@\n-                JCExpression pn = qualident(false);\n+                JCExpression pn = qualident(false, allowUnderscoreAsFormal);\n@@ -3424,1 +3473,1 @@\n-        if (recordComponent && token.kind == LBRACKET) {\n+        if (parameterKind == FormalParameterKind.RECORD && token.kind == LBRACKET) {\n@@ -3427,1 +3476,0 @@\n-        type = bracketsOpt(type);\n@@ -3429,1 +3477,6 @@\n-        return toP(F.at(pos).VarDef(mods, name, type, null));\n+        int dimensionsPos = token.pos;\n+        JCExpression typeWithDimensions = bracketsOpt(type);\n+        if (allowUnderscoreAsFormal && isUnderscore && typeWithDimensions != type) {\n+            log.error(dimensionsPos, Errors.UnderscoreCantBeFollowedByDimensions);\n+        }\n+        return toP(F.at(pos).VarDef(mods, name, typeWithDimensions, null));\n@@ -3783,1 +3836,1 @@\n-        List<JCVariableDecl> headerFields = formalParameters(false, true);\n+        List<JCVariableDecl> headerFields = formalParameters(FormalParameterKind.RECORD);\n@@ -4299,1 +4352,1 @@\n-                params = formalParameters();\n+                params = formalParameters(FormalParameterKind.METHOD);\n@@ -4415,4 +4468,1 @@\n-    List<JCVariableDecl> formalParameters() {\n-        return formalParameters(false, false);\n-    }\n-    List<JCVariableDecl> formalParameters(boolean lambdaParameters, boolean recordComponents) {\n+    List<JCVariableDecl> formalParameters(FormalParameterKind parameterKind) {\n@@ -4423,2 +4473,2 @@\n-            this.allowThisIdent = !lambdaParameters && !recordComponents;\n-            lastParam = formalParameter(lambdaParameters, recordComponents);\n+            this.allowThisIdent = parameterKind != FormalParameterKind.LAMBDA && parameterKind != FormalParameterKind.RECORD;\n+            lastParam = formalParameter(parameterKind);\n@@ -4436,1 +4486,1 @@\n-                params.append(lastParam = formalParameter(lambdaParameters, recordComponents));\n+                params.append(lastParam = formalParameter(parameterKind));\n@@ -4547,3 +4597,3 @@\n-    protected JCVariableDecl formalParameter(boolean lambdaParameter, boolean recordComponent) {\n-        JCModifiers mods = !recordComponent ? optFinal(Flags.PARAMETER) : modifiersOpt();\n-        if (recordComponent && mods.flags != 0) {\n+    protected JCVariableDecl formalParameter(FormalParameterKind parameterKind) {\n+        JCModifiers mods = parameterKind != FormalParameterKind.RECORD ? optFinal(Flags.PARAMETER) : modifiersOpt();\n+        if (parameterKind == FormalParameterKind.RECORD && mods.flags != 0) {\n@@ -4552,1 +4602,1 @@\n-        if (recordComponent) {\n+        if (parameterKind == FormalParameterKind.RECORD) {\n@@ -4558,1 +4608,1 @@\n-        JCExpression type = parseType(lambdaParameter);\n+        JCExpression type = parseType(parameterKind == FormalParameterKind.LAMBDA);\n@@ -4575,1 +4625,1 @@\n-        return variableDeclaratorId(mods, type, lambdaParameter, recordComponent);\n+        return variableDeclaratorId(mods, type, parameterKind);\n@@ -4580,1 +4630,1 @@\n-        return variableDeclaratorId(mods, null, true, false);\n+        return variableDeclaratorId(mods, null, FormalParameterKind.LAMBDA);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":83,"deletions":33,"binary":false,"changes":116,"status":"modified"},{"patch":"@@ -2959,0 +2959,6 @@\n+compiler.err.underscore.not.allowed=\\\n+    as of release 10, '_' can only be used as an unused formal parameter.\n+\n+compiler.err.underscore.cant.be.followed.by.dimensions=\\\n+    parameter name ''_'' cannot be followed by dimensions\n+\n@@ -2963,0 +2969,4 @@\n+compiler.err.underscore.as.identifier.in.method=\\\n+    ''_'' used as an identifier\\n\\\n+    (use of ''_'' as an identifier is forbidden for method parameters)\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -189,0 +189,1 @@\n+    public final Name underscore;\n@@ -363,0 +364,1 @@\n+        underscore = fromString(\"_\");\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/Names.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2017, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,1 @@\n+\/\/ options: -source 9 -Xlint:-options\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/UnderscoreAsIdentifierError.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,29 @@\n+\/*\n+ * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.err.underscore.cant.be.followed.by.dimensions\n+\/\/ key: compiler.err.underscore.as.identifier.in.method\n+\n+class UnderscoreCantBeFollowedByDims {\n+    void m(String _[]) {}\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/UnderscoreCantBeFollowedByDims.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2017, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,2 @@\n+\/\/ options: -source 9 -Xlint:-options\n+\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/UnderscoreInLambdaExpression.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,28 @@\n+\/*\n+ * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.err.underscore.as.identifier.in.method\n+\n+public class UnderscoreInMethodParameters {\n+    void m(String _) {}\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/UnderscoreInMethodParameters.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"},{"patch":"@@ -0,0 +1,30 @@\n+\/*\n+ * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.err.underscore.not.allowed\n+\n+import java.util.function.*;\n+\n+class UnderscoreAsIdentifierError {\n+    BiFunction<Integer, String, String> biss = (i, j) -> String.valueOf(_);\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/UnderscoreOnlyInLamdaError.java","additions":30,"deletions":0,"binary":false,"changes":30,"status":"added"},{"patch":"@@ -7,1 +7,2 @@\n- * @compile\/fail\/ref=IdentifierTest9.out -XDrawDiagnostics IdentifierTest.java\n+ * @compile\/fail\/ref=IdentifierTest9.out -source 9 -Xlint:-options -XDrawDiagnostics IdentifierTest.java\n+ * @compile\/fail\/ref=IdentifierTest10.out -Xlint:-options -XDrawDiagnostics IdentifierTest.java\n@@ -183,1 +184,0 @@\n-\n","filename":"test\/langtools\/tools\/javac\/lambda\/IdentifierTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,44 @@\n+IdentifierTest.java:42:11: compiler.err.underscore.not.allowed\n+IdentifierTest.java:45:16: compiler.err.underscore.not.allowed\n+IdentifierTest.java:46:20: compiler.err.underscore.not.allowed\n+IdentifierTest.java:47:22: compiler.err.underscore.not.allowed\n+IdentifierTest.java:52:13: compiler.err.underscore.not.allowed\n+IdentifierTest.java:52:15: compiler.err.underscore.not.allowed\n+IdentifierTest.java:52:23: compiler.err.underscore.not.allowed\n+IdentifierTest.java:54:13: compiler.err.underscore.not.allowed\n+IdentifierTest.java:56:13: compiler.err.underscore.not.allowed\n+IdentifierTest.java:62:21: compiler.err.underscore.not.allowed\n+IdentifierTest.java:64:67: compiler.err.underscore.not.allowed\n+IdentifierTest.java:71:13: compiler.err.underscore.not.allowed\n+IdentifierTest.java:72:14: compiler.err.underscore.not.allowed\n+IdentifierTest.java:73:18: compiler.err.underscore.not.allowed\n+IdentifierTest.java:78:22: compiler.err.underscore.not.allowed\n+IdentifierTest.java:80:13: compiler.err.underscore.not.allowed\n+IdentifierTest.java:80:15: compiler.err.underscore.not.allowed\n+IdentifierTest.java:82:13: compiler.err.underscore.not.allowed\n+IdentifierTest.java:82:15: compiler.err.underscore.not.allowed\n+IdentifierTest.java:89:10: compiler.err.underscore.not.allowed\n+IdentifierTest.java:89:38: compiler.err.underscore.not.allowed\n+IdentifierTest.java:95:14: compiler.err.underscore.not.allowed\n+IdentifierTest.java:102:17: compiler.err.underscore.not.allowed\n+IdentifierTest.java:102:26: compiler.err.underscore.not.allowed\n+IdentifierTest.java:119:20: compiler.err.underscore.not.allowed\n+IdentifierTest.java:124:10: compiler.err.underscore.not.allowed\n+IdentifierTest.java:129:17: compiler.err.underscore.not.allowed\n+IdentifierTest.java:132:17: compiler.err.underscore.not.allowed\n+IdentifierTest.java:139:17: compiler.err.underscore.not.allowed\n+IdentifierTest.java:139:24: compiler.err.underscore.not.allowed\n+IdentifierTest.java:139:33: compiler.err.underscore.not.allowed\n+IdentifierTest.java:140:39: compiler.err.underscore.not.allowed\n+IdentifierTest.java:144:13: compiler.err.underscore.not.allowed\n+IdentifierTest.java:145:15: compiler.err.underscore.not.allowed\n+IdentifierTest.java:146:13: compiler.err.underscore.not.allowed\n+IdentifierTest.java:151:15: compiler.err.underscore.not.allowed\n+IdentifierTest.java:152:17: compiler.err.underscore.not.allowed\n+IdentifierTest.java:158:16: compiler.err.underscore.not.allowed\n+IdentifierTest.java:160:25: compiler.err.underscore.not.allowed\n+IdentifierTest.java:169:5: compiler.err.underscore.not.allowed\n+IdentifierTest.java:173:26: compiler.err.underscore.not.allowed\n+IdentifierTest.java:175:19: compiler.err.underscore.not.allowed\n+IdentifierTest.java:181:11: compiler.err.underscore.not.allowed\n+43 errors\n","filename":"test\/langtools\/tools\/javac\/lambda\/IdentifierTest10.out","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"@@ -1,44 +1,44 @@\n-IdentifierTest.java:41:11: compiler.warn.underscore.as.identifier\n-IdentifierTest.java:44:16: compiler.warn.underscore.as.identifier\n-IdentifierTest.java:45:20: compiler.warn.underscore.as.identifier\n-IdentifierTest.java:46:22: compiler.warn.underscore.as.identifier\n-IdentifierTest.java:51:13: compiler.warn.underscore.as.identifier\n-IdentifierTest.java:51:15: compiler.warn.underscore.as.identifier\n-IdentifierTest.java:51:23: compiler.warn.underscore.as.identifier\n-IdentifierTest.java:53:13: compiler.warn.underscore.as.identifier\n-IdentifierTest.java:55:13: compiler.warn.underscore.as.identifier\n-IdentifierTest.java:61:21: compiler.warn.underscore.as.identifier\n-IdentifierTest.java:62:42: compiler.warn.underscore.as.identifier\n-IdentifierTest.java:63:67: compiler.warn.underscore.as.identifier\n-IdentifierTest.java:70:13: compiler.warn.underscore.as.identifier\n-IdentifierTest.java:71:14: compiler.warn.underscore.as.identifier\n-IdentifierTest.java:72:18: compiler.warn.underscore.as.identifier\n-IdentifierTest.java:77:22: compiler.warn.underscore.as.identifier\n-IdentifierTest.java:79:13: compiler.warn.underscore.as.identifier\n-IdentifierTest.java:79:15: compiler.warn.underscore.as.identifier\n-IdentifierTest.java:81:13: compiler.warn.underscore.as.identifier\n-IdentifierTest.java:81:15: compiler.warn.underscore.as.identifier\n-IdentifierTest.java:88:10: compiler.warn.underscore.as.identifier\n-IdentifierTest.java:88:38: compiler.warn.underscore.as.identifier\n-IdentifierTest.java:94:14: compiler.warn.underscore.as.identifier\n-IdentifierTest.java:101:17: compiler.warn.underscore.as.identifier\n-IdentifierTest.java:101:26: compiler.warn.underscore.as.identifier\n-IdentifierTest.java:118:20: compiler.warn.underscore.as.identifier\n-IdentifierTest.java:123:10: compiler.warn.underscore.as.identifier\n-IdentifierTest.java:128:17: compiler.warn.underscore.as.identifier\n-IdentifierTest.java:131:17: compiler.warn.underscore.as.identifier\n-IdentifierTest.java:138:17: compiler.warn.underscore.as.identifier\n-IdentifierTest.java:138:24: compiler.warn.underscore.as.identifier\n-IdentifierTest.java:138:33: compiler.warn.underscore.as.identifier\n-IdentifierTest.java:139:39: compiler.warn.underscore.as.identifier\n-IdentifierTest.java:143:13: compiler.warn.underscore.as.identifier\n-IdentifierTest.java:144:15: compiler.warn.underscore.as.identifier\n-IdentifierTest.java:145:13: compiler.warn.underscore.as.identifier\n-IdentifierTest.java:150:15: compiler.warn.underscore.as.identifier\n-IdentifierTest.java:151:17: compiler.warn.underscore.as.identifier\n-IdentifierTest.java:157:16: compiler.warn.underscore.as.identifier\n-IdentifierTest.java:159:25: compiler.warn.underscore.as.identifier\n-IdentifierTest.java:168:5: compiler.warn.underscore.as.identifier\n-IdentifierTest.java:172:26: compiler.warn.underscore.as.identifier\n-IdentifierTest.java:174:19: compiler.warn.underscore.as.identifier\n-IdentifierTest.java:180:11: compiler.warn.underscore.as.identifier\n+IdentifierTest.java:42:11: compiler.warn.underscore.as.identifier\n+IdentifierTest.java:45:16: compiler.warn.underscore.as.identifier\n+IdentifierTest.java:46:20: compiler.warn.underscore.as.identifier\n+IdentifierTest.java:47:22: compiler.warn.underscore.as.identifier\n+IdentifierTest.java:52:13: compiler.warn.underscore.as.identifier\n+IdentifierTest.java:52:15: compiler.warn.underscore.as.identifier\n+IdentifierTest.java:52:23: compiler.warn.underscore.as.identifier\n+IdentifierTest.java:54:13: compiler.warn.underscore.as.identifier\n+IdentifierTest.java:56:13: compiler.warn.underscore.as.identifier\n+IdentifierTest.java:62:21: compiler.warn.underscore.as.identifier\n+IdentifierTest.java:63:42: compiler.warn.underscore.as.identifier\n+IdentifierTest.java:64:67: compiler.warn.underscore.as.identifier\n+IdentifierTest.java:71:13: compiler.warn.underscore.as.identifier\n+IdentifierTest.java:72:14: compiler.warn.underscore.as.identifier\n+IdentifierTest.java:73:18: compiler.warn.underscore.as.identifier\n+IdentifierTest.java:78:22: compiler.warn.underscore.as.identifier\n+IdentifierTest.java:80:13: compiler.warn.underscore.as.identifier\n+IdentifierTest.java:80:15: compiler.warn.underscore.as.identifier\n+IdentifierTest.java:82:13: compiler.warn.underscore.as.identifier\n+IdentifierTest.java:82:15: compiler.warn.underscore.as.identifier\n+IdentifierTest.java:89:10: compiler.warn.underscore.as.identifier\n+IdentifierTest.java:89:38: compiler.warn.underscore.as.identifier\n+IdentifierTest.java:95:14: compiler.warn.underscore.as.identifier\n+IdentifierTest.java:102:17: compiler.warn.underscore.as.identifier\n+IdentifierTest.java:102:26: compiler.warn.underscore.as.identifier\n+IdentifierTest.java:119:20: compiler.warn.underscore.as.identifier\n+IdentifierTest.java:124:10: compiler.warn.underscore.as.identifier\n+IdentifierTest.java:129:17: compiler.warn.underscore.as.identifier\n+IdentifierTest.java:132:17: compiler.warn.underscore.as.identifier\n+IdentifierTest.java:139:17: compiler.warn.underscore.as.identifier\n+IdentifierTest.java:139:24: compiler.warn.underscore.as.identifier\n+IdentifierTest.java:139:33: compiler.warn.underscore.as.identifier\n+IdentifierTest.java:140:39: compiler.warn.underscore.as.identifier\n+IdentifierTest.java:144:13: compiler.warn.underscore.as.identifier\n+IdentifierTest.java:145:15: compiler.warn.underscore.as.identifier\n+IdentifierTest.java:146:13: compiler.warn.underscore.as.identifier\n+IdentifierTest.java:151:15: compiler.warn.underscore.as.identifier\n+IdentifierTest.java:152:17: compiler.warn.underscore.as.identifier\n+IdentifierTest.java:158:16: compiler.warn.underscore.as.identifier\n+IdentifierTest.java:160:25: compiler.warn.underscore.as.identifier\n+IdentifierTest.java:169:5: compiler.warn.underscore.as.identifier\n+IdentifierTest.java:173:26: compiler.warn.underscore.as.identifier\n+IdentifierTest.java:175:19: compiler.warn.underscore.as.identifier\n+IdentifierTest.java:181:11: compiler.warn.underscore.as.identifier\n","filename":"test\/langtools\/tools\/javac\/lambda\/IdentifierTest8.out","additions":44,"deletions":44,"binary":false,"changes":88,"status":"modified"},{"patch":"@@ -1,44 +1,44 @@\n-IdentifierTest.java:41:11: compiler.err.underscore.as.identifier\n-IdentifierTest.java:44:16: compiler.err.underscore.as.identifier\n-IdentifierTest.java:45:20: compiler.err.underscore.as.identifier\n-IdentifierTest.java:46:22: compiler.err.underscore.as.identifier\n-IdentifierTest.java:51:13: compiler.err.underscore.as.identifier\n-IdentifierTest.java:51:15: compiler.err.underscore.as.identifier\n-IdentifierTest.java:51:23: compiler.err.underscore.as.identifier\n-IdentifierTest.java:53:13: compiler.err.underscore.as.identifier\n-IdentifierTest.java:55:13: compiler.err.underscore.as.identifier\n-IdentifierTest.java:61:21: compiler.err.underscore.as.identifier\n-IdentifierTest.java:62:42: compiler.err.underscore.as.identifier\n-IdentifierTest.java:63:67: compiler.err.underscore.as.identifier\n-IdentifierTest.java:70:13: compiler.err.underscore.as.identifier\n-IdentifierTest.java:71:14: compiler.err.underscore.as.identifier\n-IdentifierTest.java:72:18: compiler.err.underscore.as.identifier\n-IdentifierTest.java:77:22: compiler.err.underscore.as.identifier\n-IdentifierTest.java:79:13: compiler.err.underscore.as.identifier\n-IdentifierTest.java:79:15: compiler.err.underscore.as.identifier\n-IdentifierTest.java:81:13: compiler.err.underscore.as.identifier\n-IdentifierTest.java:81:15: compiler.err.underscore.as.identifier\n-IdentifierTest.java:88:10: compiler.err.underscore.as.identifier\n-IdentifierTest.java:88:38: compiler.err.underscore.as.identifier\n-IdentifierTest.java:94:14: compiler.err.underscore.as.identifier\n-IdentifierTest.java:101:17: compiler.err.underscore.as.identifier\n-IdentifierTest.java:101:26: compiler.err.underscore.as.identifier\n-IdentifierTest.java:118:20: compiler.err.underscore.as.identifier\n-IdentifierTest.java:123:10: compiler.err.underscore.as.identifier\n-IdentifierTest.java:128:17: compiler.err.underscore.as.identifier\n-IdentifierTest.java:131:17: compiler.err.underscore.as.identifier\n-IdentifierTest.java:138:17: compiler.err.underscore.as.identifier\n-IdentifierTest.java:138:24: compiler.err.underscore.as.identifier\n-IdentifierTest.java:138:33: compiler.err.underscore.as.identifier\n-IdentifierTest.java:139:39: compiler.err.underscore.as.identifier\n-IdentifierTest.java:143:13: compiler.err.underscore.as.identifier\n-IdentifierTest.java:144:15: compiler.err.underscore.as.identifier\n-IdentifierTest.java:145:13: compiler.err.underscore.as.identifier\n-IdentifierTest.java:150:15: compiler.err.underscore.as.identifier\n-IdentifierTest.java:151:17: compiler.err.underscore.as.identifier\n-IdentifierTest.java:157:16: compiler.err.underscore.as.identifier\n-IdentifierTest.java:159:25: compiler.err.underscore.as.identifier\n-IdentifierTest.java:168:5: compiler.err.underscore.as.identifier\n-IdentifierTest.java:172:26: compiler.err.underscore.as.identifier\n-IdentifierTest.java:174:19: compiler.err.underscore.as.identifier\n-IdentifierTest.java:180:11: compiler.err.underscore.as.identifier\n+IdentifierTest.java:42:11: compiler.err.underscore.as.identifier\n+IdentifierTest.java:45:16: compiler.err.underscore.as.identifier\n+IdentifierTest.java:46:20: compiler.err.underscore.as.identifier\n+IdentifierTest.java:47:22: compiler.err.underscore.as.identifier\n+IdentifierTest.java:52:13: compiler.err.underscore.as.identifier\n+IdentifierTest.java:52:15: compiler.err.underscore.as.identifier\n+IdentifierTest.java:52:23: compiler.err.underscore.as.identifier\n+IdentifierTest.java:54:13: compiler.err.underscore.as.identifier\n+IdentifierTest.java:56:13: compiler.err.underscore.as.identifier\n+IdentifierTest.java:62:21: compiler.err.underscore.as.identifier\n+IdentifierTest.java:63:42: compiler.err.underscore.as.identifier\n+IdentifierTest.java:64:67: compiler.err.underscore.as.identifier\n+IdentifierTest.java:71:13: compiler.err.underscore.as.identifier\n+IdentifierTest.java:72:14: compiler.err.underscore.as.identifier\n+IdentifierTest.java:73:18: compiler.err.underscore.as.identifier\n+IdentifierTest.java:78:22: compiler.err.underscore.as.identifier\n+IdentifierTest.java:80:13: compiler.err.underscore.as.identifier\n+IdentifierTest.java:80:15: compiler.err.underscore.as.identifier\n+IdentifierTest.java:82:13: compiler.err.underscore.as.identifier\n+IdentifierTest.java:82:15: compiler.err.underscore.as.identifier\n+IdentifierTest.java:89:10: compiler.err.underscore.as.identifier\n+IdentifierTest.java:89:38: compiler.err.underscore.as.identifier\n+IdentifierTest.java:95:14: compiler.err.underscore.as.identifier\n+IdentifierTest.java:102:17: compiler.err.underscore.as.identifier\n+IdentifierTest.java:102:26: compiler.err.underscore.as.identifier\n+IdentifierTest.java:119:20: compiler.err.underscore.as.identifier\n+IdentifierTest.java:124:10: compiler.err.underscore.as.identifier\n+IdentifierTest.java:129:17: compiler.err.underscore.as.identifier\n+IdentifierTest.java:132:17: compiler.err.underscore.as.identifier\n+IdentifierTest.java:139:17: compiler.err.underscore.as.identifier\n+IdentifierTest.java:139:24: compiler.err.underscore.as.identifier\n+IdentifierTest.java:139:33: compiler.err.underscore.as.identifier\n+IdentifierTest.java:140:39: compiler.err.underscore.as.identifier\n+IdentifierTest.java:144:13: compiler.err.underscore.as.identifier\n+IdentifierTest.java:145:15: compiler.err.underscore.as.identifier\n+IdentifierTest.java:146:13: compiler.err.underscore.as.identifier\n+IdentifierTest.java:151:15: compiler.err.underscore.as.identifier\n+IdentifierTest.java:152:17: compiler.err.underscore.as.identifier\n+IdentifierTest.java:158:16: compiler.err.underscore.as.identifier\n+IdentifierTest.java:160:25: compiler.err.underscore.as.identifier\n+IdentifierTest.java:169:5: compiler.err.underscore.as.identifier\n+IdentifierTest.java:173:26: compiler.err.underscore.as.identifier\n+IdentifierTest.java:175:19: compiler.err.underscore.as.identifier\n+IdentifierTest.java:181:11: compiler.err.underscore.as.identifier\n","filename":"test\/langtools\/tools\/javac\/lambda\/IdentifierTest9.out","additions":44,"deletions":44,"binary":false,"changes":88,"status":"modified"},{"patch":"@@ -298,1 +298,1 @@\n-                lk.arity() > 0;\n+                lk.arity() > 0 && sk == SourceKind.SOURCE_9;\n","filename":"test\/langtools\/tools\/javac\/lambda\/LambdaParserTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -6,1 +6,2 @@\n- * @compile\/fail\/ref=LambdaScope04.out -XDrawDiagnostics LambdaScope04.java\n+ * @compile\/fail\/ref=LambdaScope04_Source9.out -source 9 -Xlint:-options -XDrawDiagnostics LambdaScope04.java\n+ * @compile\/fail\/ref=LambdaScope04_Source10.out -Xlint:-options -XDrawDiagnostics LambdaScope04.java\n","filename":"test\/langtools\/tools\/javac\/lambda\/LambdaScope04.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,37 +0,0 @@\n-LambdaScope04.java:23:18: compiler.err.already.defined.in.clinit: kindname.variable, local, kindname.instance.init, kindname.class, LambdaScope04\n-LambdaScope04.java:24:34: compiler.err.already.defined.in.clinit: kindname.variable, local, kindname.instance.init, kindname.class, LambdaScope04\n-LambdaScope04.java:29:18: compiler.err.already.defined.in.clinit: kindname.variable, local, kindname.static.init, kindname.class, LambdaScope04\n-LambdaScope04.java:30:34: compiler.err.already.defined.in.clinit: kindname.variable, local, kindname.static.init, kindname.class, LambdaScope04\n-LambdaScope04.java:36:18: compiler.err.already.defined: kindname.variable, local, kindname.method, testLocalInstance()\n-LambdaScope04.java:37:34: compiler.err.already.defined: kindname.variable, local, kindname.method, testLocalInstance()\n-LambdaScope04.java:43:18: compiler.err.already.defined: kindname.variable, local, kindname.method, testLocalStatic()\n-LambdaScope04.java:44:34: compiler.err.already.defined: kindname.variable, local, kindname.method, testLocalStatic()\n-LambdaScope04.java:49:18: compiler.err.already.defined: kindname.variable, local, kindname.method, testParamInstance(java.lang.Object)\n-LambdaScope04.java:50:34: compiler.err.already.defined: kindname.variable, local, kindname.method, testParamInstance(java.lang.Object)\n-LambdaScope04.java:55:18: compiler.err.already.defined: kindname.variable, local, kindname.method, testParamStatic(java.lang.Object)\n-LambdaScope04.java:56:34: compiler.err.already.defined: kindname.variable, local, kindname.method, testParamStatic(java.lang.Object)\n-LambdaScope04.java:62:22: compiler.err.already.defined: kindname.variable, local, kindname.method, testForInstance()\n-LambdaScope04.java:63:38: compiler.err.already.defined: kindname.variable, local, kindname.method, testForInstance()\n-LambdaScope04.java:70:22: compiler.err.already.defined: kindname.variable, local, kindname.method, testForStatic(java.lang.Iterable<java.lang.Object>)\n-LambdaScope04.java:71:38: compiler.err.already.defined: kindname.variable, local, kindname.method, testForStatic(java.lang.Iterable<java.lang.Object>)\n-LambdaScope04.java:78:22: compiler.err.already.defined: kindname.variable, local, kindname.method, testForEachInstance(java.lang.Iterable<java.lang.Object>)\n-LambdaScope04.java:79:38: compiler.err.already.defined: kindname.variable, local, kindname.method, testForEachInstance(java.lang.Iterable<java.lang.Object>)\n-LambdaScope04.java:86:22: compiler.err.already.defined: kindname.variable, local, kindname.method, testForEachStatic(java.lang.Iterable<java.lang.Object>)\n-LambdaScope04.java:87:38: compiler.err.already.defined: kindname.variable, local, kindname.method, testForEachStatic(java.lang.Iterable<java.lang.Object>)\n-LambdaScope04.java:94:22: compiler.err.already.defined: kindname.variable, local, kindname.method, testCatchInstance()\n-LambdaScope04.java:95:38: compiler.err.already.defined: kindname.variable, local, kindname.method, testCatchInstance()\n-LambdaScope04.java:102:22: compiler.err.already.defined: kindname.variable, local, kindname.method, testCatchStatic(java.lang.Iterable<java.lang.Object>)\n-LambdaScope04.java:103:38: compiler.err.already.defined: kindname.variable, local, kindname.method, testCatchStatic(java.lang.Iterable<java.lang.Object>)\n-LambdaScope04.java:110:22: compiler.err.already.defined: kindname.variable, local, kindname.method, testTWRInstance(java.lang.AutoCloseable)\n-LambdaScope04.java:111:38: compiler.err.already.defined: kindname.variable, local, kindname.method, testTWRInstance(java.lang.AutoCloseable)\n-LambdaScope04.java:118:22: compiler.err.already.defined: kindname.variable, local, kindname.method, testTWRStatic(java.lang.AutoCloseable)\n-LambdaScope04.java:119:38: compiler.err.already.defined: kindname.variable, local, kindname.method, testTWRStatic(java.lang.AutoCloseable)\n-LambdaScope04.java:127:22: compiler.err.already.defined: kindname.variable, local, kindname.method, testBlockLocalInstance()\n-LambdaScope04.java:128:38: compiler.err.already.defined: kindname.variable, local, kindname.method, testBlockLocalInstance()\n-LambdaScope04.java:136:22: compiler.err.already.defined: kindname.variable, local, kindname.method, testBlockLocalStatic()\n-LambdaScope04.java:137:38: compiler.err.already.defined: kindname.variable, local, kindname.method, testBlockLocalStatic()\n-LambdaScope04.java:146:26: compiler.err.already.defined: kindname.variable, local, kindname.method, testSwitchLocalInstance(int)\n-LambdaScope04.java:147:42: compiler.err.already.defined: kindname.variable, local, kindname.method, testSwitchLocalInstance(int)\n-LambdaScope04.java:157:26: compiler.err.already.defined: kindname.variable, local, kindname.method, testSwitchLocalStatic(int)\n-LambdaScope04.java:158:42: compiler.err.already.defined: kindname.variable, local, kindname.method, testSwitchLocalStatic(int)\n-36 errors\n","filename":"test\/langtools\/tools\/javac\/lambda\/LambdaScope04.out","additions":0,"deletions":37,"binary":false,"changes":37,"status":"deleted"},{"patch":"@@ -0,0 +1,3 @@\n+LambdaScope04.java:110:28: compiler.err.unreported.exception.implicit.close: java.lang.Exception, local\n+LambdaScope04.java:118:28: compiler.err.unreported.exception.implicit.close: java.lang.Exception, local\n+2 errors\n","filename":"test\/langtools\/tools\/javac\/lambda\/LambdaScope04_Source10.out","additions":3,"deletions":0,"binary":false,"changes":3,"status":"added"},{"patch":"@@ -0,0 +1,37 @@\n+LambdaScope04.java:24:18: compiler.err.already.defined.in.clinit: kindname.variable, local, kindname.instance.init, kindname.class, LambdaScope04\n+LambdaScope04.java:25:34: compiler.err.already.defined.in.clinit: kindname.variable, local, kindname.instance.init, kindname.class, LambdaScope04\n+LambdaScope04.java:30:18: compiler.err.already.defined.in.clinit: kindname.variable, local, kindname.static.init, kindname.class, LambdaScope04\n+LambdaScope04.java:31:34: compiler.err.already.defined.in.clinit: kindname.variable, local, kindname.static.init, kindname.class, LambdaScope04\n+LambdaScope04.java:37:18: compiler.err.already.defined: kindname.variable, local, kindname.method, testLocalInstance()\n+LambdaScope04.java:38:34: compiler.err.already.defined: kindname.variable, local, kindname.method, testLocalInstance()\n+LambdaScope04.java:44:18: compiler.err.already.defined: kindname.variable, local, kindname.method, testLocalStatic()\n+LambdaScope04.java:45:34: compiler.err.already.defined: kindname.variable, local, kindname.method, testLocalStatic()\n+LambdaScope04.java:50:18: compiler.err.already.defined: kindname.variable, local, kindname.method, testParamInstance(java.lang.Object)\n+LambdaScope04.java:51:34: compiler.err.already.defined: kindname.variable, local, kindname.method, testParamInstance(java.lang.Object)\n+LambdaScope04.java:56:18: compiler.err.already.defined: kindname.variable, local, kindname.method, testParamStatic(java.lang.Object)\n+LambdaScope04.java:57:34: compiler.err.already.defined: kindname.variable, local, kindname.method, testParamStatic(java.lang.Object)\n+LambdaScope04.java:63:22: compiler.err.already.defined: kindname.variable, local, kindname.method, testForInstance()\n+LambdaScope04.java:64:38: compiler.err.already.defined: kindname.variable, local, kindname.method, testForInstance()\n+LambdaScope04.java:71:22: compiler.err.already.defined: kindname.variable, local, kindname.method, testForStatic(java.lang.Iterable<java.lang.Object>)\n+LambdaScope04.java:72:38: compiler.err.already.defined: kindname.variable, local, kindname.method, testForStatic(java.lang.Iterable<java.lang.Object>)\n+LambdaScope04.java:79:22: compiler.err.already.defined: kindname.variable, local, kindname.method, testForEachInstance(java.lang.Iterable<java.lang.Object>)\n+LambdaScope04.java:80:38: compiler.err.already.defined: kindname.variable, local, kindname.method, testForEachInstance(java.lang.Iterable<java.lang.Object>)\n+LambdaScope04.java:87:22: compiler.err.already.defined: kindname.variable, local, kindname.method, testForEachStatic(java.lang.Iterable<java.lang.Object>)\n+LambdaScope04.java:88:38: compiler.err.already.defined: kindname.variable, local, kindname.method, testForEachStatic(java.lang.Iterable<java.lang.Object>)\n+LambdaScope04.java:95:22: compiler.err.already.defined: kindname.variable, local, kindname.method, testCatchInstance()\n+LambdaScope04.java:96:38: compiler.err.already.defined: kindname.variable, local, kindname.method, testCatchInstance()\n+LambdaScope04.java:103:22: compiler.err.already.defined: kindname.variable, local, kindname.method, testCatchStatic(java.lang.Iterable<java.lang.Object>)\n+LambdaScope04.java:104:38: compiler.err.already.defined: kindname.variable, local, kindname.method, testCatchStatic(java.lang.Iterable<java.lang.Object>)\n+LambdaScope04.java:111:22: compiler.err.already.defined: kindname.variable, local, kindname.method, testTWRInstance(java.lang.AutoCloseable)\n+LambdaScope04.java:112:38: compiler.err.already.defined: kindname.variable, local, kindname.method, testTWRInstance(java.lang.AutoCloseable)\n+LambdaScope04.java:119:22: compiler.err.already.defined: kindname.variable, local, kindname.method, testTWRStatic(java.lang.AutoCloseable)\n+LambdaScope04.java:120:38: compiler.err.already.defined: kindname.variable, local, kindname.method, testTWRStatic(java.lang.AutoCloseable)\n+LambdaScope04.java:128:22: compiler.err.already.defined: kindname.variable, local, kindname.method, testBlockLocalInstance()\n+LambdaScope04.java:129:38: compiler.err.already.defined: kindname.variable, local, kindname.method, testBlockLocalInstance()\n+LambdaScope04.java:137:22: compiler.err.already.defined: kindname.variable, local, kindname.method, testBlockLocalStatic()\n+LambdaScope04.java:138:38: compiler.err.already.defined: kindname.variable, local, kindname.method, testBlockLocalStatic()\n+LambdaScope04.java:147:26: compiler.err.already.defined: kindname.variable, local, kindname.method, testSwitchLocalInstance(int)\n+LambdaScope04.java:148:42: compiler.err.already.defined: kindname.variable, local, kindname.method, testSwitchLocalInstance(int)\n+LambdaScope04.java:158:26: compiler.err.already.defined: kindname.variable, local, kindname.method, testSwitchLocalStatic(int)\n+LambdaScope04.java:159:42: compiler.err.already.defined: kindname.variable, local, kindname.method, testSwitchLocalStatic(int)\n+36 errors\n","filename":"test\/langtools\/tools\/javac\/lambda\/LambdaScope04_Source9.out","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"},{"patch":"@@ -5,1 +5,2 @@\n- * @compile\/fail\/ref=LambdaScope05.out -XDrawDiagnostics LambdaScope05.java\n+ * @compile\/fail\/ref=LambdaScope05_Source9.out -source 9 -Xlint:-options -XDrawDiagnostics LambdaScope05.java\n+ * @compile -source 10 -Xlint:-options -XDrawDiagnostics LambdaScope05.java\n","filename":"test\/langtools\/tools\/javac\/lambda\/LambdaScope05.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,7 +0,0 @@\n-LambdaScope05.java:13:47: compiler.err.already.defined.in.clinit: kindname.variable, p, kindname.static.init, kindname.class, LambdaScope05\n-LambdaScope05.java:14:40: compiler.err.already.defined: kindname.variable, p, kindname.constructor, LambdaScope05()\n-LambdaScope05.java:17:43: compiler.err.already.defined.in.clinit: kindname.variable, p, kindname.static.init, kindname.class, LambdaScope05\n-LambdaScope05.java:21:43: compiler.err.already.defined.in.clinit: kindname.variable, p, kindname.instance.init, kindname.class, LambdaScope05\n-LambdaScope05.java:25:43: compiler.err.already.defined: kindname.variable, p, kindname.method, m_static()\n-LambdaScope05.java:29:43: compiler.err.already.defined: kindname.variable, p, kindname.method, m()\n-6 errors\n","filename":"test\/langtools\/tools\/javac\/lambda\/LambdaScope05.out","additions":0,"deletions":7,"binary":false,"changes":7,"status":"deleted"},{"patch":"@@ -0,0 +1,7 @@\n+LambdaScope05.java:14:47: compiler.err.already.defined.in.clinit: kindname.variable, p, kindname.static.init, kindname.class, LambdaScope05\n+LambdaScope05.java:15:40: compiler.err.already.defined: kindname.variable, p, kindname.constructor, LambdaScope05()\n+LambdaScope05.java:18:43: compiler.err.already.defined.in.clinit: kindname.variable, p, kindname.static.init, kindname.class, LambdaScope05\n+LambdaScope05.java:22:43: compiler.err.already.defined.in.clinit: kindname.variable, p, kindname.instance.init, kindname.class, LambdaScope05\n+LambdaScope05.java:26:43: compiler.err.already.defined: kindname.variable, p, kindname.method, m_static()\n+LambdaScope05.java:30:43: compiler.err.already.defined: kindname.variable, p, kindname.method, m()\n+6 errors\n","filename":"test\/langtools\/tools\/javac\/lambda\/LambdaScope05_Source9.out","additions":7,"deletions":0,"binary":false,"changes":7,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2017, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @compile\/fail\/ref=UnderscoreAsIdent9.out -XDrawDiagnostics -Werror UnderscoreAsIdent.java\n+ * @compile\/fail\/ref=UnderscoreAsIdent9.out -source 9 -Xlint:-options -XDrawDiagnostics -Werror UnderscoreAsIdent.java\n","filename":"test\/langtools\/tools\/javac\/lambda\/UnderscoreAsIdent.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,39 @@\n+\/*\n+ * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8173061\n+ * @summary Shadowing of lambda parameters\n+ * @compile ShadowParametersTest01.java\n+ *\/\n+\n+import java.util.*;\n+\n+public class ShadowParametersTest01 {\n+    void foo() {\n+        Map<String, Integer> msi = null;\n+        String key = \"333\";\n+        msi.computeIfAbsent(key, key -> key.length());\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/lambda_leftovers\/ShadowParametersTest01.java","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8173061\n+ * @summary Shadowing of lambda parameters\n+ * @modules jdk.compiler\/com.sun.tools.javac.util\n+ * @run main ShadowParametersTest02\n+ *\/\n+\n+import com.sun.tools.javac.util.Assert;\n+\n+public class ShadowParametersTest02 {\n+    public static void main(String... args) {\n+        new ShadowParametersTest02().tests();\n+    }\n+\n+    void tests() {\n+        m(1);\n+        Assert.check(str.equals(\"Hi from lambda\"));\n+        Assert.check(b);\n+    }\n+\n+    String str = null;\n+    boolean b = false;\n+\n+    void m(int x) {\n+        Runnable r = () -> {\n+            String x = \"Hi from lambda\";\n+            str = x;\n+            Runnable r = () -> {\n+                boolean x = true;\n+                b = x;\n+            };\n+            r.run();\n+        };\n+        r.run();\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/lambda_leftovers\/ShadowParametersTest02.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"},{"patch":"@@ -0,0 +1,10 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8177513\n+ * @summary underscore can't be followed by dimensions\n+ * @compile\/fail\/ref=UnderscoreCantBeFollowedByDimsTest.out -XDrawDiagnostics UnderscoreCantBeFollowedByDimsTest.java\n+ *\/\n+\n+public class UnderscoreCantBeFollowedByDimsTest {\n+    void m(String _[]) {}\n+}\n","filename":"test\/langtools\/tools\/javac\/lambda_leftovers\/UnderscoreCantBeFollowedByDimsTest.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"added"},{"patch":"@@ -0,0 +1,3 @@\n+UnderscoreCantBeFollowedByDimsTest.java:9:19: compiler.err.underscore.as.identifier.in.method\n+UnderscoreCantBeFollowedByDimsTest.java:9:20: compiler.err.underscore.cant.be.followed.by.dimensions\n+2 errors\n","filename":"test\/langtools\/tools\/javac\/lambda_leftovers\/UnderscoreCantBeFollowedByDimsTest.out","additions":3,"deletions":0,"binary":false,"changes":3,"status":"added"},{"patch":"@@ -0,0 +1,16 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8173059\n+ * @summary Underscore for unnamed method, constructor, lambda, and catch formals\n+ * @compile\/fail\/ref=UnderscoreInCatchClauseTest.out -XDrawDiagnostics UnderscoreInCatchClauseTest.java\n+ *\/\n+\n+public class UnderscoreInCatchClauseTest {\n+    void foo() {\n+        \/\/ this use should be allowed\n+        try { } catch (Throwable _) {\n+            \/\/ this use should be forbidden\n+            throw _;\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/lambda_leftovers\/UnderscoreInCatchClauseTest.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"added"},{"patch":"@@ -0,0 +1,2 @@\n+UnderscoreInCatchClauseTest.java:13:19: compiler.err.underscore.not.allowed\n+1 error\n","filename":"test\/langtools\/tools\/javac\/lambda_leftovers\/UnderscoreInCatchClauseTest.out","additions":2,"deletions":0,"binary":false,"changes":2,"status":"added"},{"patch":"@@ -0,0 +1,23 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8173059\n+ * @summary Underscore for unnamed method, constructor, lambda, and catch formals\n+ * @compile\/fail\/ref=UnderscoreInLambdaTest.out -XDrawDiagnostics UnderscoreInLambdaTest.java\n+ *\/\n+\n+import java.util.function.*;\n+\n+public class UnderscoreInLambdaTest {\n+    void foo() {\n+        \/\/ error\n+        BiFunction<Integer, String, String> biss1 =\n+                (_, _) ->\n+                    String.valueOf(_); \/\/ this use will be detected and banned by the parser\n+        \/\/ ok implicit\n+        BiFunction<Integer, String, String> biss2 =\n+                (_, _) -> \"\";\n+        \/\/ ok explicit\n+        BiFunction<Integer, String, String> biss2 =\n+                (int _, String _) -> \"\";\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/lambda_leftovers\/UnderscoreInLambdaTest.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"added"},{"patch":"@@ -0,0 +1,2 @@\n+UnderscoreInLambdaTest.java:15:36: compiler.err.underscore.not.allowed\n+1 error\n","filename":"test\/langtools\/tools\/javac\/lambda_leftovers\/UnderscoreInLambdaTest.out","additions":2,"deletions":0,"binary":false,"changes":2,"status":"added"},{"patch":"@@ -0,0 +1,19 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8173059\n+ * @summary Underscore for unnamed method, constructor, lambda, and catch formals\n+ * @compile\/fail\/ref=UnderscoreInMethodsTest.out -XDrawDiagnostics UnderscoreInMethodsTest.java\n+ *\/\n+\n+public class UnderscoreInMethodsTest {\n+    class Super {\n+        void m(String _) {}\n+    }\n+\n+    class Child extends Super {\n+        void m(String _) {\n+            \/\/ error '_' is not in scope so it can't be used inside the method\n+            System.out.println(_);\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/lambda_leftovers\/UnderscoreInMethodsTest.java","additions":19,"deletions":0,"binary":false,"changes":19,"status":"added"},{"patch":"@@ -0,0 +1,4 @@\n+UnderscoreInMethodsTest.java:10:23: compiler.err.underscore.as.identifier.in.method\n+UnderscoreInMethodsTest.java:14:23: compiler.err.underscore.as.identifier.in.method\n+UnderscoreInMethodsTest.java:16:32: compiler.err.underscore.not.allowed\n+3 errors\n","filename":"test\/langtools\/tools\/javac\/lambda_leftovers\/UnderscoreInMethodsTest.out","additions":4,"deletions":0,"binary":false,"changes":4,"status":"added"},{"patch":"@@ -17,1 +17,1 @@\n-       var y = (Function<Integer, Integer>)(Integer y) -> y; \/\/error - bad shadowing\n+       var y = (Function<Integer, Integer>)(Integer y) -> y; \/\/error - bad shadowing - but ok in lambda leftovers!\n","filename":"test\/langtools\/tools\/javac\/lvti\/SelfRefTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,0 @@\n-SelfRefTest.java:17:53: compiler.err.already.defined: kindname.variable, y, kindname.method, test(boolean)\n@@ -4,1 +3,1 @@\n-3 errors\n+2 errors\n","filename":"test\/langtools\/tools\/javac\/lvti\/SelfRefTest.out","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}