{"files":[{"patch":"@@ -0,0 +1,1 @@\n+<<<<<<< HEAD\n@@ -11,0 +12,32 @@\n+=======\n+;\n+; Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+; DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+;\n+; This code is free software; you can redistribute it and\/or modify it\n+; under the terms of the GNU General Public License version 2 only, as\n+; published by the Free Software Foundation.\n+;\n+; This code is distributed in the hope that it will be useful, but WITHOUT\n+; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+; version 2 for more details (a copy is included in the LICENSE file that\n+; accompanied this code).\n+;\n+; You should have received a copy of the GNU General Public License version\n+; 2 along with this work; if not, write to the Free Software Foundation,\n+; Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+;\n+; Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+; or visit www.oracle.com if you need additional information or have any\n+; questions.\n+;\n+\n+[general]\n+project=amber\n+repository=amber\n+jbs=jdk\n+\n+[checks]\n+error=author,committer,whitespace,executable,symlink\n+>>>>>>> 6c25a9da9306594609e69101e207f05214ec42db\n@@ -17,0 +50,1 @@\n+<<<<<<< HEAD\n@@ -31,0 +65,3 @@\n+=======\n+files=.*\\.java$|.*\\.cpp$|.*\\.hpp$|.*\\.c$|.*\\.h$\n+>>>>>>> 6c25a9da9306594609e69101e207f05214ec42db\n","filename":".jcheck\/conf","additions":37,"deletions":0,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -1072,0 +1072,1 @@\n+<<<<<<< HEAD\n@@ -1082,0 +1083,4 @@\n+=======\n+                    if ((tree.sym.flags_field & RECORD) != 0) {\n+                        \/\/ if it is the canonical constructor:\n+>>>>>>> 6c25a9da9306594609e69101e207f05214ec42db\n@@ -1187,2 +1192,5 @@\n-                    if (body.stats.isEmpty() ||\n-                            TreeInfo.getConstructorInvocationName(body.stats, names) == names.empty) {\n+                    int numberOfCallsToThisSuper = numberOfCallsToThisSuper(body.stats);\n+                    if (numberOfCallsToThisSuper > 1) {\n+                        log.error(tree.pos(), Errors.OnlyOneCallToSuperOrThisInConstructor);\n+                    }\n+                    if (body.stats.isEmpty() || numberOfCallsToThisSuper == 0) {\n@@ -1236,0 +1244,24 @@\n+        \/** Check that given application node appears as first statement\n+         *  in a constructor call.\n+         *  @param tree          The application node\n+         *  @param enclMethod    The enclosing method of the application.\n+         *  @param error         Should an error be issued?\n+         *\/\n+        boolean checkFirstConstructorStat(JCMethodInvocation tree, JCMethodDecl enclMethod, boolean error) {\n+            if (enclMethod != null && enclMethod.name == names.init) {\n+                JCBlock body = enclMethod.body;\n+                if (body.stats.head.hasTag(EXEC) &&\n+                    ((JCExpressionStatement) body.stats.head).expr == tree)\n+                    return true;\n+            }\n+            if (error) {\n+                log.error(tree.pos(),\n+                        Errors.CallMustBeFirstStmtInCtor(TreeInfo.name(tree.meth)));\n+            }\n+            return false;\n+        }\n+\n+    private int numberOfCallsToThisSuper(List<JCStatement> stats) {\n+        return (int)stats.stream().filter(s -> TreeInfo.isSelfCall(s)).count();\n+    }\n+\n@@ -2312,2 +2344,0 @@\n-            checkFirstConstructorStat(tree, env.enclMethod, true);\n-\n@@ -2448,20 +2478,0 @@\n-        \/** Check that given application node appears as first statement\n-         *  in a constructor call.\n-         *  @param tree          The application node\n-         *  @param enclMethod    The enclosing method of the application.\n-         *  @param error         Should an error be issued?\n-         *\/\n-        boolean checkFirstConstructorStat(JCMethodInvocation tree, JCMethodDecl enclMethod, boolean error) {\n-            if (enclMethod != null && enclMethod.name == names.init) {\n-                JCBlock body = enclMethod.body;\n-                if (body.stats.head.hasTag(EXEC) &&\n-                    ((JCExpressionStatement) body.stats.head).expr == tree)\n-                    return true;\n-            }\n-            if (error) {\n-                log.error(tree.pos(),\n-                        Errors.CallMustBeFirstStmtInCtor(TreeInfo.name(tree.meth)));\n-            }\n-            return false;\n-        }\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":34,"deletions":24,"binary":false,"changes":58,"status":"modified"}]}