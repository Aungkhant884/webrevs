{"files":[{"patch":"@@ -812,1 +812,2 @@\n-                    if (types.isSubtype(currentType.erasure(types), currentPatternType.erasure(types))) {\n+                    if ((currentType.type.isPrimitive() && currentType.type.equals(currentPatternType.type)) ||\n+                            types.isSubtype(currentType.erasure(types), currentPatternType.erasure(types))) {\n@@ -895,1 +896,3 @@\n-                default -> false;\n+                default -> {\n+                    yield covered.contains(seltype.tsym);\n+                }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Flow.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @compile --enable-preview -source ${jdk.version} NestedPrimitiveDeconstructionPattern.java\n+ * @run main\/othervm --enable-preview NestedPrimitiveDeconstructionPattern\n+ *\/\n+\n+import java.util.Objects;\n+\n+public class NestedPrimitiveDeconstructionPattern {\n+\n+    public static void main(String... args) throws Throwable {\n+        new NestedPrimitiveDeconstructionPattern().doTestR();\n+    }\n+\n+    void doTestR() {\n+        assertEquals(\"OK\", switchR1(new R(3, 42d)));\n+        assertEquals(\"OK\", switchR1_int_double(new R_i(3, 42d)));\n+    }\n+\n+    record R(Integer x, Double y) {}\n+\n+    String switchR1(R r) {\n+        return switch (r) {\n+            case R(Integer x, Double y) -> \"OK\";\n+        };\n+    }\n+\n+    record R_i(int x, double y) {}\n+\n+    String switchR1_int_double(R_i r) {\n+        return switch (r) {\n+            case R_i(int x, double y) -> \"OK\";\n+        };\n+    }\n+\n+    private void assertEquals(String expected, String actual) {\n+        if (!Objects.equals(expected, actual)) {\n+            throw new AssertionError(\"Expected: \" + expected + \", but got: \" + actual);\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/patterns\/NestedPrimitiveDeconstructionPattern.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"}]}