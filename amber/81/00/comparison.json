{"files":[{"patch":"@@ -304,1 +304,1 @@\n-            } else if (nested.type.isReference()) {\n+            } else if (nested.type.isNullOrReference() && nested.hasTag(Tag.DECONSTRUCTIONPATTERN)) {\n@@ -306,0 +306,2 @@\n+            } else {\n+                extraTest = makeLit(syms.booleanType, 1);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TransPatterns.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -212,1 +212,1 @@\n-                                  0: #_A_(): LOCAL_VARIABLE, {start_pc=284, length=11, index=2}\n+                                  0: #_A_(): LOCAL_VARIABLE, {start_pc=251, length=11, index=2}\n@@ -214,1 +214,1 @@\n-                                  1: #_CA_(#_value_=[@#_A_(),@#_A_()]): LOCAL_VARIABLE, {start_pc=328, length=11, index=3}\n+                                  1: #_CA_(#_value_=[@#_A_(),@#_A_()]): LOCAL_VARIABLE, {start_pc=290, length=11, index=3}\n@@ -218,1 +218,1 @@\n-                                  2: #_A_(): LOCAL_VARIABLE, {start_pc=30, length=11, index=1}\n+                                  2: #_A_(): LOCAL_VARIABLE, {start_pc=26, length=11, index=1}\n@@ -220,1 +220,1 @@\n-                                  3: #_CA_(#_value_=[@#_A_(),@#_A_()]): LOCAL_VARIABLE, {start_pc=71, length=11, index=1}\n+                                  3: #_CA_(#_value_=[@#_A_(),@#_A_()]): LOCAL_VARIABLE, {start_pc=63, length=11, index=1}\n@@ -224,1 +224,1 @@\n-                                  4: #_A_(): LOCAL_VARIABLE, {start_pc=114, length=11, index=2}\n+                                  4: #_A_(): LOCAL_VARIABLE, {start_pc=101, length=11, index=2}\n@@ -226,1 +226,1 @@\n-                                  5: #_CA_(#_value_=[@#_A_(),@#_A_()]): LOCAL_VARIABLE, {start_pc=158, length=11, index=3}\n+                                  5: #_CA_(#_value_=[@#_A_(),@#_A_()]): LOCAL_VARIABLE, {start_pc=140, length=11, index=3}\n@@ -230,1 +230,1 @@\n-                                  6: #_A_(): LOCAL_VARIABLE, {start_pc=199, length=11, index=2}\n+                                  6: #_A_(): LOCAL_VARIABLE, {start_pc=176, length=11, index=2}\n@@ -232,1 +232,1 @@\n-                                  7: #_CA_(#_value_=[@#_A_(),@#_A_()]): LOCAL_VARIABLE, {start_pc=243, length=11, index=3}\n+                                  7: #_CA_(#_value_=[@#_A_(),@#_A_()]): LOCAL_VARIABLE, {start_pc=215, length=11, index=3}\n@@ -241,1 +241,1 @@\n-                                  0: #_A_(): LOCAL_VARIABLE, {start_pc=28, length=11, index=2}\n+                                  0: #_A_(): LOCAL_VARIABLE, {start_pc=23, length=11, index=2}\n@@ -243,1 +243,1 @@\n-                                  1: #_CA_(#_value_=[@#_A_(),@#_A_()]): LOCAL_VARIABLE, {start_pc=72, length=11, index=3}\n+                                  1: #_CA_(#_value_=[@#_A_(),@#_A_()]): LOCAL_VARIABLE, {start_pc=62, length=11, index=3}\n@@ -256,1 +256,1 @@\n-                                  0: #_A_(): LOCAL_VARIABLE, {start_pc=30, length=11, index=0}\n+                                  0: #_A_(): LOCAL_VARIABLE, {start_pc=26, length=11, index=0}\n@@ -258,1 +258,1 @@\n-                                  1: #_CA_(#_value_=[@#_A_(),@#_A_()]): LOCAL_VARIABLE, {start_pc=70, length=11, index=0}\n+                                  1: #_CA_(#_value_=[@#_A_(),@#_A_()]): LOCAL_VARIABLE, {start_pc=62, length=11, index=0}\n@@ -262,1 +262,1 @@\n-                                  2: #_A_(): LOCAL_VARIABLE, {start_pc=110, length=11, index=1}\n+                                  2: #_A_(): LOCAL_VARIABLE, {start_pc=98, length=11, index=1}\n@@ -264,1 +264,1 @@\n-                                  3: #_CA_(#_value_=[@#_A_(),@#_A_()]): LOCAL_VARIABLE, {start_pc=151, length=11, index=2}\n+                                  3: #_CA_(#_value_=[@#_A_(),@#_A_()]): LOCAL_VARIABLE, {start_pc=134, length=11, index=2}\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/Patterns.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -69,0 +69,22 @@\n+\n+        \/\/ record classes and null\n+        assertEquals(1, matchingSwitch14(new R(null)));\n+        assertEquals(2, matchingSwitch15(new R(null)));\n+    }\n+\n+    class Super {}\n+    class Sub extends Super {}\n+    record R(Super s) {}\n+\n+    private int matchingSwitch14(R r) {\n+        return switch(r) {\n+            case R(Super s) -> 1;\n+            default -> 2;\n+        };\n+    }\n+\n+    private int matchingSwitch15(R r) {\n+        return switch(r) {\n+            case R(Sub s) -> 1;\n+            default -> 2;\n+        };\n","filename":"test\/langtools\/tools\/javac\/patterns\/NullSwitch.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -0,0 +1,36 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @summary Testing record patterns against the null constant (14.30.2 Pattern Matching)\n+ * @compile --enable-preview -source ${jdk.version} NullsInDeconstructionPatterns.java\n+ * @run main\/othervm --enable-preview NullsInDeconstructionPatterns\n+ *\/\n+\n+public class NullsInDeconstructionPatterns {\n+\n+    class Super {}\n+    class Sub extends Super {}\n+    record R(Super s) {}\n+\n+    public static void main(String[] args) {\n+\n+        R r = new R(null);\n+\n+        if (r instanceof R(Super s1)) {\n+            System.out.println(\"R(Super s1) is resolved to the R(any pattern) and does match\");\n+        } else {\n+            throw new AssertionError(\"broken\");\n+        }\n+\n+        if (r instanceof R(Object o)) {\n+            System.out.println(\"R(Object) is resolved to the R(any pattern) and does match\");\n+        } else {\n+            throw new AssertionError(\"broken\");\n+        }\n+\n+        if (r instanceof R(Sub s2)) {\n+            throw new AssertionError(\"broken\");\n+        } else {\n+            System.out.println(\"R(Sub s2) is resolved to the pattern R(Sub s) and does not match\");\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/patterns\/NullsInDeconstructionPatterns.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"","filename":"test\/langtools\/tools\/javac\/patterns\/NullsInDeconstructionPatterns.out","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/langtools\/tools\/javac\/patterns\/NullsInPatterns.out","status":"copied"},{"patch":"@@ -79,1 +79,1 @@\n-        if (testA(new P6(new P3(null)))) {\n+        if (!testA(new P6(new P3(null)))) {\n@@ -85,1 +85,1 @@\n-        if (testB(new P6(new P3(null)))) {\n+        if (!testB(new P6(new P3(null)))) {\n@@ -91,3 +91,0 @@\n-        if (testC(new P6(new P3(null)))) {\n-            throw new IllegalStateException();\n-        }\n@@ -100,1 +97,4 @@\n-        if (!testE(new P7(0, (short) 0))) {\n+        if (!testE(new P6(new P3(null)))) {\n+            throw new IllegalStateException();\n+        }\n+        if (!testF(new P7(0, (short) 0))) {\n@@ -103,1 +103,1 @@\n-        if (testE(new P7(0, (short) 1))) {\n+        if (testF(new P7(0, (short) 1))) {\n@@ -188,0 +188,4 @@\n+        return o instanceof P6(P3(String s)) && s == null;\n+    }\n+\n+    private static boolean testF(Object o) throws Throwable {\n","filename":"test\/langtools\/tools\/javac\/patterns\/SimpleDeconstructionPattern.java","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"}]}