{"files":[{"patch":"@@ -3570,6 +3570,0 @@\n-bool ClassFileParser::supports_records() {\n-  return _major_version == JVM_CLASSFILE_MAJOR_VERSION &&\n-         _minor_version == JAVA_PREVIEW_MINOR_VERSION &&\n-         Arguments::enable_preview();\n-}\n-\n@@ -3823,0 +3817,1 @@\n+<<<<<<< HEAD\n@@ -3837,0 +3832,9 @@\n+=======\n+\n+        } else if (_major_version >= JAVA_15_VERSION) {\n+          \/\/ Check for PermittedSubclasses tag\n+          if (tag == vmSymbols::tag_permitted_subclasses()) {\n+            if (supports_sealed_types()) {\n+              if (parsed_permitted_subclasses_attribute) {\n+                classfile_parse_error(\"Multiple PermittedSubclasses attributes in class file %s\", CHECK);\n+>>>>>>> 866b0eb4983c8a7a90ffc5924841de25a0b055f8\n@@ -3838,17 +3842,3 @@\n-              parsed_record_attribute = true;\n-              record_attribute_start = cfs->current();\n-              record_attribute_length = attribute_length;\n-            } else if (log_is_enabled(Info, class, record)) {\n-              \/\/ Log why the Record attribute was ignored.  Note that if the\n-              \/\/ class file version is JVM_CLASSFILE_MAJOR_VERSION.65535 and\n-              \/\/ --enable-preview wasn't specified then a java.lang.UnsupportedClassVersionError\n-              \/\/ exception would have been thrown.\n-              ResourceMark rm(THREAD);\n-              if (supports_records()) {\n-                log_info(class, record)(\n-                  \"Ignoring Record attribute in class %s because super type is not java.lang.Record\",\n-                  _class_name->as_C_string());\n-              } else {\n-                log_info(class, record)(\n-                  \"Ignoring Record attribute in class %s because class file version is not %d.65535\",\n-                   _class_name->as_C_string(), JVM_CLASSFILE_MAJOR_VERSION);\n+              \/\/ Classes marked ACC_FINAL cannot have a PermittedSubclasses attribute.\n+              if (_access_flags.is_final()) {\n+                classfile_parse_error(\"PermittedSubclasses attribute in final class file %s\", CHECK);\n@@ -3856,0 +3846,3 @@\n+              parsed_permitted_subclasses_attribute = true;\n+              permitted_subclasses_attribute_start = cfs->current();\n+              permitted_subclasses_attribute_length = attribute_length;\n@@ -3858,0 +3851,1 @@\n+<<<<<<< HEAD\n@@ -3870,0 +3864,13 @@\n+=======\n+\n+          } else if (_major_version >= JAVA_16_VERSION) {\n+            if (tag == vmSymbols::tag_record()) {\n+              \/\/ Skip over Record attribute if super class is not java.lang.Record.\n+              if (cp->klass_name_at(_super_class_index) == vmSymbols::java_lang_Record()) {\n+                if (parsed_record_attribute) {\n+                  classfile_parse_error(\"Multiple Record attributes in class file %s\", CHECK);\n+                }\n+                \/\/ Check that class is final and not abstract.\n+                if (!_access_flags.is_final() || _access_flags.is_abstract()) {\n+                  classfile_parse_error(\"Record attribute in non-final or abstract class file %s\", CHECK);\n+>>>>>>> 866b0eb4983c8a7a90ffc5924841de25a0b055f8\n@@ -3871,3 +3878,8 @@\n-                parsed_permitted_subclasses_attribute = true;\n-                permitted_subclasses_attribute_start = cfs->current();\n-                permitted_subclasses_attribute_length = attribute_length;\n+                parsed_record_attribute = true;\n+                record_attribute_start = cfs->current();\n+                record_attribute_length = attribute_length;\n+              } else if (log_is_enabled(Info, class, record)) {\n+                ResourceMark rm(THREAD);\n+                log_info(class, record)(\n+                  \"Ignoring Record attribute in class %s because super type is not java.lang.Record\",\n+                  _class_name->as_C_string());\n@@ -3875,4 +3887,0 @@\n-              cfs->skip_u1(attribute_length, CHECK);\n-            } else {\n-              \/\/ Unknown attribute\n-              cfs->skip_u1(attribute_length, CHECK);\n@@ -3880,0 +3888,1 @@\n+            cfs->skip_u1(attribute_length, CHECK);\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":39,"deletions":30,"binary":false,"changes":69,"status":"modified"}]}