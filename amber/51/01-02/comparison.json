{"files":[{"patch":"@@ -56,0 +56,1 @@\n+\n","filename":".jcheck\/conf","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -4427,1 +4427,1 @@\n-     * * {@preview Associated with sealed classes, a preview feature of the Java language.\n+     * {@preview Associated with sealed classes, a preview feature of the Java language.\n@@ -4434,2 +4434,3 @@\n-     * Returns {@code true} if and only if this {@code Class} object represents a sealed class or interface.\n-     * If this {@code Class} object represents a primitive type, {@code void}, or an array type, this method returns\n+     * Returns {@code true} if and only if this {@code Class} object represents\n+     * a sealed class or interface. If this {@code Class} object represents a\n+     * primitive type, {@code void}, or an array type, this method returns\n@@ -4438,0 +4439,4 @@\n+     * @apiNote\n+     * This method reports on a distinct concept of sealing from\n+     * {@link Package#isSealed() Package::isSealed}.\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -226,0 +226,4 @@\n+     * @apiNote\n+     * This method reports on a distinct concept of sealing from\n+     * {@link Class#isSealed() Class::isSealed}.\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Package.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1310,1 +1310,4 @@\n-                           FINAL | NON_SEALED)) {\n+                           FINAL | NON_SEALED)\n+                 && checkDisjoint(pos, flags,\n+                                SEALED,\n+                                ANNOTATION)) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -4312,1 +4312,5 @@\n-                case MONKEYS_AT, ABSTRACT, FINAL, STRICTFP, CLASS, INTERFACE, ENUM -> true;\n+                case MONKEYS_AT -> {\n+                    Token afterNext = S.token(2);\n+                    yield afterNext.kind != INTERFACE || currentIsNonSealed;\n+                }\n+                case ABSTRACT, FINAL, STRICTFP, CLASS, INTERFACE, ENUM -> true;\n@@ -4316,1 +4320,5 @@\n-                case MONKEYS_AT, PUBLIC, PROTECTED, PRIVATE, ABSTRACT, STATIC, FINAL, STRICTFP, CLASS, INTERFACE, ENUM -> true;\n+                case MONKEYS_AT -> {\n+                    Token afterNext = S.token(2);\n+                    yield afterNext.kind != INTERFACE || currentIsNonSealed;\n+                }\n+                case PUBLIC, PROTECTED, PRIVATE, ABSTRACT, STATIC, FINAL, STRICTFP, CLASS, INTERFACE, ENUM -> true;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -959,0 +959,11 @@\n+\n+    public void testDoNotAllowSealedAnnotation() {\n+        for (String s : List.of(\n+            \"\"\"\n+            sealed @interface A {}\n+            non-sealed interface I extends A {}\n+            \"\"\"\n+        )) {\n+            assertFail(\"compiler.err.expected4\", s);\n+        }\n+    }\n","filename":"test\/langtools\/tools\/javac\/sealed\/SealedCompilationTests.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"}]}