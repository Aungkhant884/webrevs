{"files":[{"patch":"@@ -3719,1 +3719,1 @@\n-        classfile_parse_error(\n+          classfile_parse_error(\n@@ -3902,0 +3902,1 @@\n+<<<<<<< HEAD\n@@ -3903,0 +3904,2 @@\n+=======\n+>>>>>>> 22d7639dbc74c23b69a89cdacbbcd9ec294cad50\n@@ -3907,0 +3910,16 @@\n+<<<<<<< HEAD\n+=======\n+              }\n+              parsed_permitted_subclasses_attribute = true;\n+              permitted_subclasses_attribute_start = cfs->current();\n+              permitted_subclasses_attribute_length = attribute_length;\n+            }\n+            cfs->skip_u1(attribute_length, CHECK);\n+\n+          } else if (_major_version >= JAVA_16_VERSION) {\n+          if (tag == vmSymbols::tag_record()) {\n+              \/\/ Skip over Record attribute if super class is not java.lang.Record.\n+              if (cp->klass_name_at(_super_class_index) == vmSymbols::java_lang_Record()) {\n+              if (parsed_record_attribute) {\n+                classfile_parse_error(\"Multiple Record attributes in class file %s\", THREAD);\n+>>>>>>> 22d7639dbc74c23b69a89cdacbbcd9ec294cad50\n@@ -3924,0 +3943,8 @@\n+<<<<<<< HEAD\n+=======\n+            } else if (log_is_enabled(Info, class, record)) {\n+              ResourceMark rm(THREAD);\n+                log_info(class, record)(\n+                  \"Ignoring Record attribute in class %s because super type is not java.lang.Record\",\n+                  _class_name->as_C_string());\n+>>>>>>> 22d7639dbc74c23b69a89cdacbbcd9ec294cad50\n@@ -6160,1 +6187,1 @@\n-    jio_snprintf(addr_buf, 20, INTPTR_FORMAT, p2i(ik));\n+  jio_snprintf(addr_buf, 20, INTPTR_FORMAT, p2i(ik));\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":29,"deletions":2,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -95,0 +95,1 @@\n+<<<<<<< HEAD\n@@ -96,0 +97,3 @@\n+=======\n+         * @since 14\n+>>>>>>> 22d7639dbc74c23b69a89cdacbbcd9ec294cad50\n","filename":"src\/java.base\/share\/classes\/sun\/reflect\/annotation\/TypeAnnotation.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -653,0 +653,1 @@\n+<<<<<<< HEAD\n@@ -654,0 +655,3 @@\n+=======\n+         * @since 14\n+>>>>>>> 22d7639dbc74c23b69a89cdacbbcd9ec294cad50\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/source\/tree\/Tree.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+<<<<<<< HEAD\n@@ -34,0 +35,4 @@\n+=======\n+ * @compile RedefineRecord.java\n+ * @run main\/othervm RedefineRecord buildagent\n+>>>>>>> 22d7639dbc74c23b69a89cdacbbcd9ec294cad50\n","filename":"test\/hotspot\/jtreg\/runtime\/records\/RedefineRecord.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary test logging of reasons for ignoring Record attribute\n+ * @library \/test\/lib\n+ * @compile superNotJLRecord.jcod recordIgnoredVersion.jcod\n+ * @run driver ignoreRecordAttribute\n+ *\/\n+\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class ignoreRecordAttribute {\n+\n+    public static void main(String[] args) throws Exception {\n+        String MAJOR_VERSION = Integer.toString(44 + Runtime.version().feature());\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+            \"-Xlog:class+record\", \"-Xshare:off\", \"superNotJLRecord\");\n+        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        output.shouldContain(\"Ignoring Record attribute\");\n+        output.shouldContain(\"because super type is not java.lang.Record\");\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/records\/ignoreRecordAttribute.java","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"},{"patch":"@@ -29,0 +29,1 @@\n+<<<<<<< HEAD\n@@ -30,0 +31,4 @@\n+=======\n+ *\n+ * @run main\/othervm recordAttributeTest\n+>>>>>>> 22d7639dbc74c23b69a89cdacbbcd9ec294cad50\n","filename":"test\/hotspot\/jtreg\/runtime\/records\/recordAttributeTest.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,256 @@\n+\/*\n+ * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ Record attribute is ignored because class file major version is < 60.\n+class recordIgnoredVersion {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  59; \/\/ version\n+  [52] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1     at 0x0A\n+    class #4; \/\/ #2     at 0x0F\n+    NameAndType #5 #6; \/\/ #3     at 0x12\n+    Utf8 \"java\/lang\/Record\"; \/\/ #4     at 0x17\n+    Utf8 \"<init>\"; \/\/ #5     at 0x2A\n+    Utf8 \"()V\"; \/\/ #6     at 0x33\n+    Field #8 #9; \/\/ #7     at 0x39\n+    class #10; \/\/ #8     at 0x3E\n+    NameAndType #11 #12; \/\/ #9     at 0x41\n+    Utf8 \"recordIgnoredVersion\"; \/\/ #10     at 0x46\n+    Utf8 \"x\"; \/\/ #11     at 0x56\n+    Utf8 \"I\"; \/\/ #12     at 0x5A\n+    Field #8 #9; \/\/ #13     at 0x5E\n+    InvokeDynamic 0s #15; \/\/ #14     at 0x63\n+    NameAndType #16 #17; \/\/ #15     at 0x68\n+    Utf8 \"toString\"; \/\/ #16     at 0x6D\n+    Utf8 \"(LrecordIgnoredVersion;)Ljava\/lang\/String;\"; \/\/ #17     at 0x78\n+    InvokeDynamic 0s #19; \/\/ #18     at 0x9E\n+    NameAndType #20 #21; \/\/ #19     at 0xA3\n+    Utf8 \"hashCode\"; \/\/ #20     at 0xA8\n+    Utf8 \"(LrecordIgnoredVersion;)I\"; \/\/ #21     at 0xB3\n+    InvokeDynamic 0s #23; \/\/ #22     at 0xC8\n+    NameAndType #24 #25; \/\/ #23     at 0xCD\n+    Utf8 \"equals\"; \/\/ #24     at 0xD2\n+    Utf8 \"(LrecordIgnoredVersion;Ljava\/lang\/Object;)Z\"; \/\/ #25     at 0xDB\n+    Utf8 \"(I)V\"; \/\/ #26     at 0x0102\n+    Utf8 \"Code\"; \/\/ #27     at 0x0109\n+    Utf8 \"LineNumberTable\"; \/\/ #28     at 0x0110\n+    Utf8 \"MethodParameters\"; \/\/ #29     at 0x0122\n+    Utf8 \"()Ljava\/lang\/String;\"; \/\/ #30     at 0x0135\n+    Utf8 \"()I\"; \/\/ #31     at 0x014C\n+    Utf8 \"(Ljava\/lang\/Object;)Z\"; \/\/ #32     at 0x0152\n+    Utf8 \"SourceFile\"; \/\/ #33     at 0x016A\n+    Utf8 \"recordIgnoredVersion.java\"; \/\/ #34     at 0x0177\n+    Utf8 \"Record\"; \/\/ #35     at 0x018C\n+    Utf8 \"BootstrapMethods\"; \/\/ #36     at 0x0195\n+    MethodHandle 6b #38; \/\/ #37     at 0x01A8\n+    Method #39 #40; \/\/ #38     at 0x01AC\n+    class #41; \/\/ #39     at 0x01B1\n+    NameAndType #42 #43; \/\/ #40     at 0x01B4\n+    Utf8 \"java\/lang\/runtime\/ObjectMethods\"; \/\/ #41     at 0x01B9\n+    Utf8 \"bootstrap\"; \/\/ #42     at 0x01DB\n+    Utf8 \"(Ljava\/lang\/invoke\/MethodHandles$Lookup;Ljava\/lang\/String;Ljava\/lang\/invoke\/TypeDescriptor;Ljava\/lang\/Class;Ljava\/lang\/String;[Ljava\/lang\/invoke\/MethodHandle;)Ljava\/lang\/Object;\"; \/\/ #43     at 0x01E7\n+    String #11; \/\/ #44     at 0x029B\n+    MethodHandle 1b #7; \/\/ #45     at 0x029E\n+    Utf8 \"InnerClasses\"; \/\/ #46     at 0x02A2\n+    class #48; \/\/ #47     at 0x02B1\n+    Utf8 \"java\/lang\/invoke\/MethodHandles$Lookup\"; \/\/ #48     at 0x02B4\n+    class #50; \/\/ #49     at 0x02DC\n+    Utf8 \"java\/lang\/invoke\/MethodHandles\"; \/\/ #50     at 0x02DF\n+    Utf8 \"Lookup\"; \/\/ #51     at 0x0300\n+  } \/\/ Constant Pool\n+\n+  0x0030; \/\/ access [ ACC_SUPER ACC_FINAL ]\n+  #8;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [0] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [1] { \/\/ fields\n+    { \/\/ Member at 0x0313\n+      0x8012; \/\/ access\n+      #11; \/\/ name_cpx\n+      #12; \/\/ sig_cpx\n+      [0] { \/\/ Attributes\n+      } \/\/ Attributes\n+    } \/\/ Member\n+  } \/\/ fields\n+\n+  [5] { \/\/ methods\n+    { \/\/ Member at 0x031D\n+      0x0001; \/\/ access\n+      #5; \/\/ name_cpx\n+      #26; \/\/ sig_cpx\n+      [2] { \/\/ Attributes\n+        Attr(#27, 34) { \/\/ Code at 0x0325\n+          2; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[10]{\n+            0x2AB700012A1BB500;\n+            0x07B1;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#28, 6) { \/\/ LineNumberTable at 0x0341\n+              [1] { \/\/ LineNumberTable\n+                0  1; \/\/  at 0x034D\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+        ;\n+        Attr(#29, 5) { \/\/ MethodParameters at 0x034D\n+          0x01000B8000;\n+        } \/\/ end MethodParameters\n+      } \/\/ Attributes\n+    } \/\/ Member\n+    ;\n+    { \/\/ Member at 0x0358\n+      0x8001; \/\/ access\n+      #16; \/\/ name_cpx\n+      #30; \/\/ sig_cpx\n+      [1] { \/\/ Attributes\n+        Attr(#27, 31) { \/\/ Code at 0x0360\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[7]{\n+            0x2ABA000E0000B0;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#28, 6) { \/\/ LineNumberTable at 0x0379\n+              [1] { \/\/ LineNumberTable\n+                0  1; \/\/  at 0x0385\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    } \/\/ Member\n+    ;\n+    { \/\/ Member at 0x0385\n+      0x8011; \/\/ access\n+      #20; \/\/ name_cpx\n+      #31; \/\/ sig_cpx\n+      [1] { \/\/ Attributes\n+        Attr(#27, 31) { \/\/ Code at 0x038D\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[7]{\n+            0x2ABA00120000AC;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#28, 6) { \/\/ LineNumberTable at 0x03A6\n+              [1] { \/\/ LineNumberTable\n+                0  1; \/\/  at 0x03B2\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    } \/\/ Member\n+    ;\n+    { \/\/ Member at 0x03B2\n+      0x8011; \/\/ access\n+      #24; \/\/ name_cpx\n+      #32; \/\/ sig_cpx\n+      [1] { \/\/ Attributes\n+        Attr(#27, 32) { \/\/ Code at 0x03BA\n+          2; \/\/ max_stack\n+          2; \/\/ max_locals\n+          Bytes[8]{\n+            0x2A2BBA00160000AC;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#28, 6) { \/\/ LineNumberTable at 0x03D4\n+              [1] { \/\/ LineNumberTable\n+                0  1; \/\/  at 0x03E0\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    } \/\/ Member\n+    ;\n+    { \/\/ Member at 0x03E0\n+      0x8001; \/\/ access\n+      #11; \/\/ name_cpx\n+      #31; \/\/ sig_cpx\n+      [1] { \/\/ Attributes\n+        Attr(#27, 29) { \/\/ Code at 0x03E8\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[5]{\n+            0x2AB4000DAC;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#28, 6) { \/\/ LineNumberTable at 0x03FF\n+              [1] { \/\/ LineNumberTable\n+                0  1; \/\/  at 0x040B\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    } \/\/ Member\n+  } \/\/ methods\n+\n+  [4] { \/\/ Attributes\n+    Attr(#33, 2) { \/\/ SourceFile at 0x040D\n+      #34;\n+    } \/\/ end SourceFile\n+    ;\n+    Attr(#35, 8) { \/\/ Record at 0x0415\n+      0x0001000B000C0000;\n+    } \/\/ end Record\n+    ;\n+    Attr(#36, 12) { \/\/ BootstrapMethods at 0x0423\n+      [1] { \/\/ bootstrap_methods\n+        {  \/\/  bootstrap_method\n+          #37; \/\/ bootstrap_method_ref\n+          [3] { \/\/ bootstrap_arguments\n+            #8; \/\/  at 0x0431\n+            #44; \/\/  at 0x0433\n+            #45; \/\/  at 0x0435\n+          }  \/\/  bootstrap_arguments\n+        }  \/\/  bootstrap_method\n+      }\n+    } \/\/ end BootstrapMethods\n+    ;\n+    Attr(#46, 10) { \/\/ InnerClasses at 0x0435\n+      [1] { \/\/ InnerClasses\n+        #47 #49 #51 25; \/\/  at 0x0445\n+      }\n+    } \/\/ end InnerClasses\n+  } \/\/ Attributes\n+} \/\/ end class recordIgnoredVersion\n","filename":"test\/hotspot\/jtreg\/runtime\/records\/recordIgnoredVersion.jcod","additions":256,"deletions":0,"binary":false,"changes":256,"status":"added"},{"patch":"@@ -26,0 +26,1 @@\n+<<<<<<< HEAD\n@@ -28,0 +29,3 @@\n+=======\n+ * @run main\/othervm recordReflectionTest\n+>>>>>>> 22d7639dbc74c23b69a89cdacbbcd9ec294cad50\n","filename":"test\/hotspot\/jtreg\/runtime\/records\/recordReflectionTest.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -38,0 +38,4 @@\n+<<<<<<< HEAD\n+=======\n+ * @compile TestRecordAttr.java\n+>>>>>>> 22d7639dbc74c23b69a89cdacbbcd9ec294cad50\n","filename":"test\/jdk\/java\/lang\/instrument\/RedefineRecordAttr\/TestRecordAttr.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -38,0 +38,4 @@\n+<<<<<<< HEAD\n+=======\n+ * @compile TestRecordAttrGenericSig.java\n+>>>>>>> 22d7639dbc74c23b69a89cdacbbcd9ec294cad50\n","filename":"test\/jdk\/java\/lang\/instrument\/RedefineRecordAttrGenericSig\/TestRecordAttrGenericSig.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,0 +31,4 @@\n+<<<<<<< HEAD\n+=======\n+ * @compile TestRecordTypes.java\n+>>>>>>> 22d7639dbc74c23b69a89cdacbbcd9ec294cad50\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testRecordTypes\/TestRecordTypes.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -81,0 +81,1 @@\n+<<<<<<< HEAD\n@@ -82,0 +83,3 @@\n+=======\n+                        \"compiler.err.expected4\",   \/\/ class, interface, enum, or __datum expected\n+>>>>>>> 22d7639dbc74c23b69a89cdacbbcd9ec294cad50\n","filename":"test\/langtools\/jdk\/javadoc\/tool\/api\/basic\/GetTask_DiagListenerTest.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,0 +31,4 @@\n+<<<<<<< HEAD\n+=======\n+ * @compile ApplicableAnnotationsOnRecords.java\n+>>>>>>> 22d7639dbc74c23b69a89cdacbbcd9ec294cad50\n","filename":"test\/langtools\/tools\/javac\/annotations\/ApplicableAnnotationsOnRecords.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -36,0 +36,4 @@\n+<<<<<<< HEAD\n+=======\n+ * @compile TypeAnnotationsPositionsOnRecords.java\n+>>>>>>> 22d7639dbc74c23b69a89cdacbbcd9ec294cad50\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/TypeAnnotationsPositionsOnRecords.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,0 +33,4 @@\n+<<<<<<< HEAD\n+=======\n+ * @compile LocalStaticDeclarations.java\n+>>>>>>> 22d7639dbc74c23b69a89cdacbbcd9ec294cad50\n@@ -60,1 +64,2 @@\n-                { int LOCAL_VARIABLE = 0;\n+                {\n+                    int LOCAL_VARIABLE = 0;\n@@ -64,0 +69,1 @@\n+                    int LOCAL_VARIABLE = 0;\n@@ -96,1 +102,1 @@\n-        ENUM(\"enum CE { #{STATIC_LOCAL} }\"),\n+        ENUM(\"enum CE { CE1; #{STATIC_LOCAL} }\"),\n@@ -127,1 +133,0 @@\n-        NONE(\"\"),\n@@ -143,4 +148,4 @@\n-         LITERAL(\"1\"),\n-         STATIC_FIELD(\"STATIC_FIELD\"),\n-         LOCAL_VARIABLE(\"LOCAL_VARIABLE\"),\n-         INSTANCE_FIELD(\"INSTANCE_FIELD\");\n+        LITERAL(\"1\"),\n+        STATIC_FIELD(\"STATIC_FIELD\"),\n+        LOCAL_VARIABLE(\"LOCAL_VARIABLE\"),\n+        INSTANCE_FIELD(\"INSTANCE_FIELD\");\n@@ -148,1 +153,1 @@\n-         String expr;\n+        String expr;\n@@ -150,1 +155,1 @@\n-         Expression(String expr) {\n+        Expression(String expr) {\n@@ -182,2 +187,2 @@\n-        return decl == StaticLocalDecl.INTERFACE && (member == Member.DEFAULT_METHOD || member == Member.NONE) ||\n-               decl != StaticLocalDecl.INTERFACE && (member == Member.METHOD || member == Member.NONE);\n+        return decl == StaticLocalDecl.INTERFACE && member == Member.DEFAULT_METHOD ||\n+               decl != StaticLocalDecl.INTERFACE && member == Member.METHOD;\n@@ -188,1 +193,1 @@\n-            Assert.check(result.hasErrors(), result.compilationInfo());\n+            Assert.check(result.hasErrors(), \"unexpected compilation\\n\" + result.compilationInfo());\n@@ -198,4 +203,1 @@\n-        return ((container != Container.NO_CONTAINER &&\n-                container != Container.LAMBDA &&\n-                container != Container.ANONYMOUS)) ||\n-                (member != Member.NONE && !acceptableExpr());\n+        return (expr == Expression.LOCAL_VARIABLE || expr == Expression.INSTANCE_FIELD);\n@@ -209,4 +211,1 @@\n-        if ((container == Container.NO_CONTAINER ||\n-                container == Container.LAMBDA ||\n-                container == Container.ANONYMOUS) &&\n-                !acceptableExpr()) {\n+        if (expr == Expression.LOCAL_VARIABLE || expr == Expression.INSTANCE_FIELD) {\n@@ -214,2 +213,0 @@\n-        } else if (container == Container.ENUM) {\n-            return result.containsKey(\"compiler.err.enum.constant.expected\" );\n@@ -217,1 +214,1 @@\n-        return result.containsKey(\"compiler.err.static.declaration.not.allowed.in.inner.classes\" );\n+        return false;\n","filename":"test\/langtools\/tools\/javac\/records\/LocalStaticDeclarations.java","additions":20,"deletions":23,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -39,0 +39,4 @@\n+<<<<<<< HEAD\n+=======\n+ * @compile RecordCompilationTests.java\n+>>>>>>> 22d7639dbc74c23b69a89cdacbbcd9ec294cad50\n@@ -480,1 +484,1 @@\n-    public void testStaticLocalTypes() {\n+    public void testStaticDefinitionsInLocalandInner() {\n@@ -773,0 +777,114 @@\n+        assertFail(\"compiler.err.non-static.cant.be.ref\",\n+                \"class C {\\n\" +\n+                \"    String hello = \\\"hello\\\";\\n\" +\n+                \"    class Inner {\\n\" +\n+                \"        enum E {\\n\" +\n+                \"            A;\\n\" +\n+                \"            public void test1() {\\n\" +\n+                \"                class X {\\n\" +\n+                \"                    public void test2() {\\n\" +\n+                \"                        System.err.println(hello);\\n\" +\n+                \"                    }\\n\" +\n+                \"                }\\n\" +\n+                \"            }\\n\" +\n+                \"        }\\n\" +\n+                \"    }\\n\" +\n+                \"}\");\n+\n+        assertFail(\"compiler.err.non-static.cant.be.ref\",\n+                \"class C {\\n\" +\n+                \"    String hello = \\\"hello\\\";\\n\" +\n+                \"    class Inner {\\n\" +\n+                \"        enum E {\\n\" +\n+                \"            A;\\n\" +\n+                \"            public void test1() {\\n\" +\n+                \"                System.err.println(hello);\\n\" +\n+                \"            }\\n\" +\n+                \"        }\\n\" +\n+                \"    }\\n\" +\n+                \"}\");\n+\n+        assertFail(\"compiler.err.non-static.cant.be.ref\",\n+                \"class C {\\n\" +\n+                \"    String hello = \\\"hello\\\";\\n\" +\n+                \"    class Inner {\\n\" +\n+                \"        record R() {\\n\" +\n+                \"            public void test1() {\\n\" +\n+                \"                class X {\\n\" +\n+                \"                    public void test2() {\\n\" +\n+                \"                        System.err.println(hello);\\n\" +\n+                \"                    }\\n\" +\n+                \"                }\\n\" +\n+                \"            }\\n\" +\n+                \"        }\\n\" +\n+                \"    }\\n\" +\n+                \"}\");\n+\n+        assertFail(\"compiler.err.non-static.cant.be.ref\",\n+                \"class C {\\n\" +\n+                \"    String hello = \\\"hello\\\";\\n\" +\n+                \"    class Inner {\\n\" +\n+                \"        record R() {\\n\" +\n+                \"            public void test1() {\\n\" +\n+                \"                System.err.println(hello);\\n\" +\n+                \"            }\\n\" +\n+                \"        }\\n\" +\n+                \"    }\\n\" +\n+                \"}\");\n+\n+        assertFail(\"compiler.err.non-static.cant.be.ref\",\n+                \"class C {\\n\" +\n+                \"    String hello = \\\"hello\\\";\\n\" +\n+                \"    class Inner {\\n\" +\n+                \"        interface I {\\n\" +\n+                \"            public default void test1() {\\n\" +\n+                \"                class X {\\n\" +\n+                \"                    public void test2() {\\n\" +\n+                \"                        System.err.println(hello);\\n\" +\n+                \"                    }\\n\" +\n+                \"                }\\n\" +\n+                \"            }\\n\" +\n+                \"        }\\n\" +\n+                \"    }\\n\" +\n+                \"}\");\n+\n+        assertFail(\"compiler.err.non-static.cant.be.ref\",\n+                \"class C {\\n\" +\n+                \"    String hello = \\\"hello\\\";\\n\" +\n+                \"    class Inner {\\n\" +\n+                \"        interface I {\\n\" +\n+                \"            public default void test1() {\\n\" +\n+                \"                System.err.println(hello);\\n\" +\n+                \"            }\\n\" +\n+                \"        }\\n\" +\n+                \"    }\\n\" +\n+                \"}\");\n+\n+        assertFail(\"compiler.err.non-static.cant.be.ref\",\n+                \"class C {\\n\" +\n+                \"    String hello = \\\"hello\\\";\\n\" +\n+                \"    class Inner {\\n\" +\n+                \"        static class SC {\\n\" +\n+                \"            public void test1() {\\n\" +\n+                \"                class X {\\n\" +\n+                \"                    public void test2() {\\n\" +\n+                \"                        System.err.println(hello);\\n\" +\n+                \"                    }\\n\" +\n+                \"                }\\n\" +\n+                \"            }\\n\" +\n+                \"        }\\n\" +\n+                \"    }\\n\" +\n+                \"}\");\n+\n+        assertFail(\"compiler.err.non-static.cant.be.ref\",\n+                \"class C {\\n\" +\n+                \"    String hello = \\\"hello\\\";\\n\" +\n+                \"    class Inner {\\n\" +\n+                \"        static class SC {\\n\" +\n+                \"            public void test1() {\\n\" +\n+                \"                System.err.println(hello);\\n\" +\n+                \"            }\\n\" +\n+                \"        }\\n\" +\n+                \"    }\\n\" +\n+                \"}\");\n+\n@@ -842,0 +960,25 @@\n+\n+        \/\/ inner classes can contain static methods too\n+        assertOK(\n+                \"\"\"\n+                class C {\n+                    class Inner {\n+                        \/\/ static method inside inner class\n+                        static void m() {}\n+                    }\n+                }\n+                \"\"\"\n+        );\n+\n+        assertOK(\n+                \"\"\"\n+                class C {\n+                     void m() {\n+                         new Object() {\n+                            \/\/ static method inside inner class\n+                            static void m() {}\n+                         };\n+                     }\n+                }\n+                \"\"\"\n+        );\n@@ -872,1 +1015,1 @@\n-        assertFail(\"compiler.err.static.declaration.not.allowed.in.inner.classes\",\n+        assertOK(\n@@ -881,1 +1024,1 @@\n-        assertFail(\"compiler.err.static.declaration.not.allowed.in.inner.classes\",\n+        assertOK(\n@@ -891,1 +1034,1 @@\n-        assertFail(\"compiler.err.static.declaration.not.allowed.in.inner.classes\",\n+        assertOK(\n@@ -900,1 +1043,1 @@\n-        assertFail(\"compiler.err.static.declaration.not.allowed.in.inner.classes\",\n+        assertOK(\n","filename":"test\/langtools\/tools\/javac\/records\/RecordCompilationTests.java","additions":148,"deletions":5,"binary":false,"changes":153,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+<<<<<<< HEAD\n@@ -30,0 +31,3 @@\n+=======\n+ * @compile RecordMemberTests.java\n+>>>>>>> 22d7639dbc74c23b69a89cdacbbcd9ec294cad50\n","filename":"test\/langtools\/tools\/javac\/records\/RecordMemberTests.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+<<<<<<< HEAD\n@@ -39,0 +40,3 @@\n+=======\n+ * @compile VarargsRecordsTest.java\n+>>>>>>> 22d7639dbc74c23b69a89cdacbbcd9ec294cad50\n","filename":"test\/langtools\/tools\/javac\/records\/VarargsRecordsTest.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"}]}