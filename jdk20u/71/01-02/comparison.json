{"files":[{"patch":"@@ -1,231 +0,0 @@\n-\/*\n- * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.process.ProcessTools;\n-\n-\/*\n- * @test id=allDisabled\n- * @bug 8305994\n- * @summary Test the GuaranteedAsyncDeflationInterval option\n- * @requires vm.flagless\n- * @library \/test\/lib\n- * @run driver GuaranteedAsyncDeflationIntervalTest allDisabled\n- *\/\n-\n-\/*\n- * @test id=guaranteedNoMUDT\n- * @requires vm.flagless\n- * @library \/test\/lib\n- * @run driver GuaranteedAsyncDeflationIntervalTest guaranteedNoMUDT\n- *\/\n-\n-\/*\n- * @test id=guaranteedNoADI\n- * @requires vm.flagless\n- * @library \/test\/lib\n- * @run driver GuaranteedAsyncDeflationIntervalTest guaranteedNoADI\n- *\/\n-\n-\/*\n- * @test id=allEnabled\n- * @requires vm.flagless\n- * @library \/test\/lib\n- * @run driver GuaranteedAsyncDeflationIntervalTest allEnabled\n- *\/\n-\n-public class GuaranteedAsyncDeflationIntervalTest {\n-\n-    public static class Test {\n-        \/\/ Inflate a lot of monitors, so that threshold heuristics definitely fires\n-        private static final int MONITORS = 10_000;\n-\n-        \/\/ Use a handful of threads to inflate the monitors, to eat the cost of\n-        \/\/ wait(1) calls. This can be larger than available parallelism, since threads\n-        \/\/ would be time-waiting.\n-        private static final int THREADS = 16;\n-\n-        private static Thread[] threads;\n-        private static Object[] monitors;\n-\n-        public static void main(String... args) throws Exception {\n-            monitors = new Object[MONITORS];\n-            threads = new Thread[THREADS];\n-\n-            for (int t = 0; t < THREADS; t++) {\n-                int monStart = t * MONITORS \/ THREADS;\n-                int monEnd = (t + 1) * MONITORS \/ THREADS;\n-                threads[t] = new Thread(() -> {\n-                    for (int m = monStart; m < monEnd; m++) {\n-                        Object o = new Object();\n-                        synchronized (o) {\n-                            try {\n-                                o.wait(1);\n-                            } catch (InterruptedException e) {\n-                            }\n-                        }\n-                        monitors[m] = o;\n-                    }\n-                });\n-                threads[t].start();\n-            }\n-\n-            for (Thread t : threads) {\n-                t.join();\n-            }\n-\n-            try {\n-                Thread.sleep(10_000);\n-            } catch (InterruptedException ie) {\n-            }\n-        }\n-    }\n-\n-    public static void main(String[] args) throws Exception {\n-        if (args.length < 1) {\n-            throw new IllegalArgumentException(\"Expect the test label\");\n-        }\n-\n-        String test = args[0];\n-        switch (test) {\n-            case \"allDisabled\":\n-                testAllDisabled();\n-                break;\n-            case \"guaranteedNoMUDT\":\n-                testGuaranteedNoMUDT();\n-                break;\n-            case \"guaranteedNoADI\":\n-                testGuaranteedNoADI();\n-                break;\n-            case \"allEnabled\":\n-                testAllEnabled();\n-                break;\n-            default:\n-                throw new IllegalArgumentException(\"Unknown test: \" + test);\n-        }\n-    }\n-\n-    static final String MSG_THRESHOLD  = \"Async deflation needed: monitors used are above the threshold\";\n-    static final String MSG_GUARANTEED = \"Async deflation needed: guaranteed interval\";\n-\n-    \/\/ Try with all heuristics disabled\n-    public static void testAllDisabled() throws Exception {\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n-            \"-Xmx100M\",\n-            \"-XX:+UnlockDiagnosticVMOptions\",\n-            \"-XX:GuaranteedAsyncDeflationInterval=0\",\n-            \"-XX:AsyncDeflationInterval=0\",\n-            \"-XX:MonitorUsedDeflationThreshold=0\",\n-            \"-Xlog:monitorinflation=info\",\n-            \"GuaranteedAsyncDeflationIntervalTest$Test\");\n-\n-        OutputAnalyzer oa = new OutputAnalyzer(pb.start());\n-        oa.shouldHaveExitValue(0);\n-\n-        oa.shouldNotContain(MSG_THRESHOLD);\n-        oa.shouldNotContain(MSG_GUARANTEED);\n-        assertNoDeflations(oa);\n-    }\n-\n-    \/\/ Try with guaranteed interval only enabled, threshold heuristics disabled via MUDT\n-    public static void testGuaranteedNoMUDT() throws Exception {\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n-            \"-Xmx100M\",\n-            \"-XX:+UnlockDiagnosticVMOptions\",\n-            \"-XX:GuaranteedAsyncDeflationInterval=100\",\n-            \"-XX:MonitorUsedDeflationThreshold=0\",\n-            \"-Xlog:monitorinflation=info\",\n-            \"GuaranteedAsyncDeflationIntervalTest$Test\");\n-\n-        OutputAnalyzer oa = new OutputAnalyzer(pb.start());\n-        oa.shouldHaveExitValue(0);\n-\n-        oa.shouldNotContain(MSG_THRESHOLD);\n-        oa.shouldContain(MSG_GUARANTEED);\n-        assertDeflations(oa);\n-    }\n-\n-    \/\/ Try with guaranteed interval only enabled, threshold heuristics disabled via ADI\n-    public static void testGuaranteedNoADI() throws Exception {\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n-            \"-Xmx100M\",\n-            \"-XX:+UnlockDiagnosticVMOptions\",\n-            \"-XX:GuaranteedAsyncDeflationInterval=100\",\n-            \"-XX:AsyncDeflationInterval=0\",\n-            \"-Xlog:monitorinflation=info\",\n-            \"GuaranteedAsyncDeflationIntervalTest$Test\");\n-\n-        OutputAnalyzer oa = new OutputAnalyzer(pb.start());\n-        oa.shouldHaveExitValue(0);\n-\n-        oa.shouldNotContain(MSG_THRESHOLD);\n-        oa.shouldContain(MSG_GUARANTEED);\n-        assertDeflations(oa);\n-    }\n-\n-    \/\/ Try with both threshold heuristics and guaranteed interval enabled\n-    public static void testAllEnabled() throws Exception {\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n-            \"-Xmx100M\",\n-            \"-XX:+UnlockDiagnosticVMOptions\",\n-            \"-XX:GuaranteedAsyncDeflationInterval=5000\",\n-            \"-XX:MonitorUsedDeflationThreshold=1\",\n-            \"-Xlog:monitorinflation=info\",\n-            \"GuaranteedAsyncDeflationIntervalTest$Test\");\n-\n-        OutputAnalyzer oa = new OutputAnalyzer(pb.start());\n-        oa.shouldHaveExitValue(0);\n-\n-        oa.shouldContain(MSG_THRESHOLD);\n-        oa.shouldContain(MSG_GUARANTEED);\n-        assertDeflations(oa);\n-    }\n-\n-    private static void assertNoDeflations(OutputAnalyzer oa) {\n-        for (String line : oa.asLines()) {\n-            if (line.contains(\"Starting the final audit\")) {\n-                \/\/ Final deflations started, with no prior deflations, good.\n-                return;\n-            }\n-            if (line.contains(\"begin deflating\")) {\n-                \/\/ Deflations detected before final ones, bad\n-                oa.reportDiagnosticSummary();\n-                throw new IllegalStateException(\"FAILED\");\n-            }\n-        }\n-    }\n-\n-    private static void assertDeflations(OutputAnalyzer oa) {\n-        for (String line : oa.asLines()) {\n-            if (line.contains(\"Starting the final audit\")) {\n-                \/\/ Final deflations started, with no prior deflations, bad.\n-                oa.reportDiagnosticSummary();\n-                throw new IllegalStateException(\"FAILED\");\n-            }\n-            if (line.contains(\"begin deflating\")) {\n-                \/\/ Deflations detected before final ones, good\n-                return;\n-            }\n-        }\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/Monitor\/GuaranteedAsyncDeflationIntervalTest.java","additions":0,"deletions":231,"binary":false,"changes":231,"status":"deleted"}]}