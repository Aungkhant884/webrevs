{"files":[{"patch":"@@ -782,0 +782,3 @@\n+\n+  const Type* t_sub = sub(t1, t2); \/\/ compare based on immediate inputs\n+\n@@ -834,2 +837,4 @@\n-        \/\/ compute union, so that cmp handles all possible results from the two cases\n-        return cmp1->meet(cmp2);\n+        \/\/ Compute union, so that cmp handles all possible results from the two cases\n+        const Type* t_cmp = cmp1->meet(cmp2);\n+        \/\/ Pick narrowest type, based on overflow computation and on immediate inputs\n+        return t_sub->filter(t_cmp);\n@@ -840,1 +845,1 @@\n-  return sub(t1, t2);            \/\/ Local flavor of type subtraction\n+  return t_sub;\n","filename":"src\/hotspot\/share\/opto\/subnode.cpp","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8299959\n+ * @summary In CmpU::Value, the sub computation may be narrower than the overflow computation.\n+ *\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+StressCCP -Xcomp -XX:-TieredCompilation\n+ *                   -XX:CompileCommand=compileonly,compiler.rangechecks.TestRangeCheckCmpUOverflowVsSub::test\n+ *                   -XX:RepeatCompilation=50\n+ *                   compiler.rangechecks.TestRangeCheckCmpUOverflowVsSub\n+*\/\n+\n+package compiler.rangechecks;\n+\n+public class TestRangeCheckCmpUOverflowVsSub {\n+    static int arr[] = new int[400];\n+\n+    public static void main(String[] strArr) {\n+        for (int i = 0; i < 10; i++) {\n+            test(); \/\/ repeat for multiple compilations\n+        }\n+    }\n+\n+    static void test() {\n+        for(int i = 0; i < 50_000; i++) {} \/\/empty loop - trigger OSR faster\n+        int val;\n+        int zero = arr[5];\n+        int i = 1;\n+        do {\n+            for (int j = 1; j < 3; j++) {\n+                for (int k = 2; k > i; k -= 3) {\n+                    try {\n+                        val = arr[i + 1] % k;\n+                        val = arr[i - 1] % zero;\n+                        val = arr[k - 1];\n+                    } catch (ArithmeticException e) {} \/\/ catch div by zero\n+                }\n+            }\n+        } while (++i < 3);\n+    }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/rangechecks\/TestRangeCheckCmpUOverflowVsSub.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"}]}