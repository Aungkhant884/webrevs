{"files":[{"patch":"@@ -416,1 +416,7 @@\n-     THROW_NEW_DEBUGGER_EXCEPTION_(\"get_thread_regs failed for a lwp\", 0);\n+    \/\/ This is not considered fatal and does happen on occassion, usually with an\n+    \/\/ ESRCH error. The root cause is not fully understood, but by ignoring this error\n+    \/\/ and returning NULL, stacking walking code will get null registers and fallback\n+    \/\/ to using the \"last java frame\" if setup.\n+    fprintf(stdout, \"WARNING: getThreadIntegerRegisterSet0: get_lwp_regs failed for lwp (%d)\\n\", lwp_id);\n+    fflush(stdout);\n+    return NULL;\n","filename":"src\/jdk.hotspot.agent\/linux\/native\/libsaproc\/LinuxDebuggerLocal.c","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -147,1 +147,2 @@\n-   print_debug(\"ptrace(PTRACE_GETREGS, ...) failed for lwp %d\\n\", pid);\n+   print_debug(\"ptrace(PTRACE_GETREGS, ...) failed for lwp(%d) errno(%d) \\\"%s\\\"\\n\", pid,\n+               errno, strerror(errno));\n","filename":"src\/jdk.hotspot.agent\/linux\/native\/libsaproc\/ps_proc.c","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -688,1 +688,1 @@\n-  print_debug(\"getThreadRegisterSet0 called\\n\");\n+  print_debug(\"getThreadIntegerRegisterSet0 called\\n\");\n@@ -708,1 +708,7 @@\n-    print_error(\"getregs: thread_get_state(%d) failed (%d)\\n\", tid, result);\n+    \/\/ This is not considered fatal. Unlike on Linux and Windows, we haven't seen a\n+    \/\/ failure to get thread registers, but if it were to fail the response should\n+    \/\/ be the same. By ignoring this error and returning NULL, stacking walking code\n+    \/\/ will get null registers and fallback to using the \"last java frame\" if setup.\n+    fprintf(stdout, \"WARNING: getThreadIntegerRegisterSet0: thread_get_state failed (%d) for thread (%d)\\n\",\n+            result, tid);\n+    fflush(stdout);\n@@ -811,1 +817,1 @@\n-  JNIEnv *env, jobject this_obj, jint tid) \n+  JNIEnv *env, jobject this_obj, jint tid)\n@@ -818,1 +824,1 @@\n-  \n+\n@@ -820,1 +826,1 @@\n-    \n+\n@@ -822,2 +828,2 @@\n-  result = mach_port_extract_right(gTask, foreign_tid, \n-\t\t\t\t   MACH_MSG_TYPE_COPY_SEND, \n+  result = mach_port_extract_right(gTask, foreign_tid,\n+\t\t\t\t   MACH_MSG_TYPE_COPY_SEND,\n@@ -827,1 +833,1 @@\n-    \n+\n@@ -829,1 +835,1 @@\n-    \n+\n","filename":"src\/jdk.hotspot.agent\/macosx\/native\/libsaproc\/MacosxDebuggerLocal.m","additions":15,"deletions":9,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -169,1 +169,1 @@\n-                throw new DebuggerException(lastException);\n+                throw new DebuggerException(lastException.getMessage(), lastException);\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/bsd\/BsdDebuggerLocal.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -70,2 +70,6 @@\n-        for (int i = 0; i < data.length; i++) {\n-            context.setRegister(i, data[i]);\n+        \/\/ null means we failed to get the register set for some reason. The caller\n+        \/\/ is responsible for dealing with the set of null registers in that case.\n+        if (data != null) {\n+            for (int i = 0; i < data.length; i++) {\n+                context.setRegister(i, data[i]);\n+            }\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/bsd\/BsdThread.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -176,1 +176,1 @@\n-                throw new DebuggerException(lastException);\n+                throw new DebuggerException(lastException.getMessage(), lastException);\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/linux\/LinuxDebuggerLocal.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -76,2 +76,6 @@\n-        for (int i = 0; i < data.length; i++) {\n-            context.setRegister(i, data[i]);\n+        \/\/ null means we failed to get the register set for some reason. The caller\n+        \/\/ is responsible for dealing with the set of null registers in that case.\n+        if (data != null) {\n+            for (int i = 0; i < data.length; i++) {\n+                context.setRegister(i, data[i]);\n+            }\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/linux\/LinuxThread.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-  private long           sysId;\n+  private long           sysId; \/\/ SystemID for Windows thread, stored in OSThread::_thread_id\n@@ -35,1 +35,1 @@\n-  private long           id;\n+  private long           id;    \/\/ ThreadID for Windows thread,  returned by GetThreadIdBySystemId\n@@ -53,2 +53,6 @@\n-    for (int i = 0; i < data.length; i++) {\n-      context.setRegister(i, data[i]);\n+    \/\/ null means we failed to get the register set for some reason. The caller\n+    \/\/ is responsible for dealing with the set of null registers in that case.\n+    if (data != null) {\n+        for (int i = 0; i < data.length; i++) {\n+            context.setRegister(i, data[i]);\n+        }\n@@ -89,0 +93,1 @@\n+       gotID = true;\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/windbg\/amd64\/WindbgAMD64Thread.java","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+#include <inttypes.h>\n@@ -768,3 +769,10 @@\n-  COM_VERIFY_OK_(ptrIDebugSystemObjects->GetThreadIdBySystemId((ULONG)sysId, &id),\n-                 \"Windbg Error: GetThreadIdBySystemId failed!\", 0);\n-\n+  HRESULT hr = ptrIDebugSystemObjects->GetThreadIdBySystemId((ULONG)sysId, &id);\n+  if (hr != S_OK) {\n+    \/\/ This is not considered fatal and does happen on occassion, usually with an\n+    \/\/ 0x80004002 \"No such interface supported\". The root cause is not fully understood,\n+    \/\/ but by ignoring this error and returning NULL, stacking walking code will get\n+    \/\/ null registers and fallback to using the \"last java frame\" if setup.\n+   printf(\"WARNING: GetThreadIdBySystemId failed with 0x%x for sysId (%\" PRIu64 \")\\n\",\n+           hr, sysId);\n+    return -1;\n+  }\n","filename":"src\/jdk.hotspot.agent\/windows\/native\/libsaproc\/sawindbg.cpp","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"}]}