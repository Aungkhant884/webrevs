{"files":[{"patch":"@@ -285,3 +285,3 @@\n-         \"48-bit overflow in address constant\");\n-  \/\/ Load upper 32 bits\n-  int32_t imm = imm64 >> 16;\n+         \"bit 47 overflows in address constant\");\n+  \/\/ Load upper 31 bits\n+  int32_t imm = imm64 >> 17;\n@@ -295,1 +295,1 @@\n-  \/\/ Load the rest 16 bits.\n+  \/\/ Load the rest 17 bits.\n@@ -297,2 +297,2 @@\n-  addi(Rd, Rd, (imm64 >> 5) & 0x7ff);\n-  slli(Rd, Rd, 5);\n+  addi(Rd, Rd, (imm64 >> 6) & 0x7ff);\n+  slli(Rd, Rd, 6);\n@@ -301,1 +301,1 @@\n-  offset = imm64 & 0x1f;\n+  offset = imm64 & 0x3f;\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -392,1 +392,4 @@\n-  li(t0, (uintptr_t)(address)b);\n+  \/\/ The length of the instruction sequence emitted should be independent\n+  \/\/ of the values of the local char buffer address so that the size of mach\n+  \/\/ nodes for scratch emit and normal emit matches.\n+  mv(t0, (address)b);\n@@ -428,1 +431,4 @@\n-  li(t0, (uintptr_t)(address)b);\n+  \/\/ The length of the instruction sequence emitted should be independent\n+  \/\/ of the values of the local char buffer address so that the size of mach\n+  \/\/ nodes for scratch emit and normal emit matches.\n+  mv(t0, (address)b);\n@@ -545,2 +551,5 @@\n-  li(c_rarg0, (uintptr_t)(address)msg);\n-  li(c_rarg1, (uintptr_t)(address)ip);\n+  \/\/ The length of the instruction sequence emitted should be independent\n+  \/\/ of the values of msg and ip so that the size of mach nodes for scratch\n+  \/\/ emit and normal emit matches.\n+  mv(c_rarg0, (address)msg);\n+  mv(c_rarg1, (address)ip);\n@@ -1152,6 +1161,6 @@\n-  int32_t lower = ((intptr_t)target << 36) >> 36;\n-  int64_t upper = ((intptr_t)target - lower) >> 28;\n-  Assembler::patch(branch + 0,  31, 12, upper & 0xfffff);                       \/\/ Lui.             target[47:28] + target[27] ==> branch[31:12]\n-  Assembler::patch(branch + 4,  31, 20, (lower >> 16) & 0xfff);                 \/\/ Addi.            target[27:16] ==> branch[31:20]\n-  Assembler::patch(branch + 12, 31, 20, (lower >> 5) & 0x7ff);                  \/\/ Addi.            target[15: 5] ==> branch[31:20]\n-  Assembler::patch(branch + 20, 31, 20, lower & 0x1f);                          \/\/ Addi\/Jalr\/Load.  target[ 4: 0] ==> branch[31:20]\n+  int32_t lower = ((intptr_t)target << 35) >> 35;\n+  int64_t upper = ((intptr_t)target - lower) >> 29;\n+  Assembler::patch(branch + 0,  31, 12, upper & 0xfffff);                       \/\/ Lui.             target[48:29] + target[28] ==> branch[31:12]\n+  Assembler::patch(branch + 4,  31, 20, (lower >> 17) & 0xfff);                 \/\/ Addi.            target[28:17] ==> branch[31:20]\n+  Assembler::patch(branch + 12, 31, 20, (lower >> 6) & 0x7ff);                  \/\/ Addi.            target[16: 6] ==> branch[31:20]\n+  Assembler::patch(branch + 20, 31, 20, lower & 0x3f);                          \/\/ Addi\/Jalr\/Load.  target[ 5: 0] ==> branch[31:20]\n@@ -1229,3 +1238,3 @@\n-  intptr_t target_address = (((int64_t)Assembler::sextract(((unsigned*)insn_addr)[0], 31, 12)) & 0xfffff) << 28;    \/\/ Lui.\n-  target_address += ((int64_t)Assembler::sextract(((unsigned*)insn_addr)[1], 31, 20)) << 16;                        \/\/ Addi.\n-  target_address += ((int64_t)Assembler::sextract(((unsigned*)insn_addr)[3], 31, 20)) << 5;                         \/\/ Addi.\n+  intptr_t target_address = (((int64_t)Assembler::sextract(((unsigned*)insn_addr)[0], 31, 12)) & 0xfffff) << 29;    \/\/ Lui.\n+  target_address += ((int64_t)Assembler::sextract(((unsigned*)insn_addr)[1], 31, 20)) << 17;                        \/\/ Addi.\n+  target_address += ((int64_t)Assembler::sextract(((unsigned*)insn_addr)[3], 31, 20)) << 6;                         \/\/ Addi.\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":22,"deletions":13,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -830,1 +830,2 @@\n-    return ((uintptr_t)addr >> 48) == 0;\n+    \/\/ sv48: must have bits 63â€“48 all equal to bit 47\n+    return ((uintptr_t)addr >> 47) == 0;\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -92,1 +92,1 @@\n-         is_slli_shift_at(instr + instruction_size * 4, 5) && \/\/ Slli Rd, Rs, 5\n+         is_slli_shift_at(instr + instruction_size * 4, 6) && \/\/ Slli Rd, Rs, 6\n","filename":"src\/hotspot\/cpu\/riscv\/nativeInst_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}