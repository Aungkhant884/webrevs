{"files":[{"patch":"@@ -2732,6 +2732,0 @@\n-  \/\/ RVB pseudo instructions\n-  \/\/ zero extend word\n-  void zext_w(Register Rd, Register Rs) {\n-    add_uw(Rd, Rs, zr);\n-  }\n-\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.hpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -651,86 +651,0 @@\n-void MacroAssembler::nop() {\n-  addi(x0, x0, 0);\n-}\n-\n-void MacroAssembler::mv(Register Rd, Register Rs) {\n-  if (Rd != Rs) {\n-    addi(Rd, Rs, 0);\n-  }\n-}\n-\n-void MacroAssembler::notr(Register Rd, Register Rs) {\n-  xori(Rd, Rs, -1);\n-}\n-\n-void MacroAssembler::neg(Register Rd, Register Rs) {\n-  sub(Rd, x0, Rs);\n-}\n-\n-void MacroAssembler::negw(Register Rd, Register Rs) {\n-  subw(Rd, x0, Rs);\n-}\n-\n-void MacroAssembler::sext_w(Register Rd, Register Rs) {\n-  addiw(Rd, Rs, 0);\n-}\n-\n-void MacroAssembler::zext_b(Register Rd, Register Rs) {\n-  andi(Rd, Rs, 0xFF);\n-}\n-\n-void MacroAssembler::seqz(Register Rd, Register Rs) {\n-  sltiu(Rd, Rs, 1);\n-}\n-\n-void MacroAssembler::snez(Register Rd, Register Rs) {\n-  sltu(Rd, x0, Rs);\n-}\n-\n-void MacroAssembler::sltz(Register Rd, Register Rs) {\n-  slt(Rd, Rs, x0);\n-}\n-\n-void MacroAssembler::sgtz(Register Rd, Register Rs) {\n-  slt(Rd, x0, Rs);\n-}\n-\n-void MacroAssembler::fmv_s(FloatRegister Rd, FloatRegister Rs) {\n-  if (Rd != Rs) {\n-    fsgnj_s(Rd, Rs, Rs);\n-  }\n-}\n-\n-void MacroAssembler::fabs_s(FloatRegister Rd, FloatRegister Rs) {\n-  fsgnjx_s(Rd, Rs, Rs);\n-}\n-\n-void MacroAssembler::fneg_s(FloatRegister Rd, FloatRegister Rs) {\n-  fsgnjn_s(Rd, Rs, Rs);\n-}\n-\n-void MacroAssembler::fmv_d(FloatRegister Rd, FloatRegister Rs) {\n-  if (Rd != Rs) {\n-    fsgnj_d(Rd, Rs, Rs);\n-  }\n-}\n-\n-void MacroAssembler::fabs_d(FloatRegister Rd, FloatRegister Rs) {\n-  fsgnjx_d(Rd, Rs, Rs);\n-}\n-\n-void MacroAssembler::fneg_d(FloatRegister Rd, FloatRegister Rs) {\n-  fsgnjn_d(Rd, Rs, Rs);\n-}\n-\n-void MacroAssembler::vmnot_m(VectorRegister vd, VectorRegister vs) {\n-  vmnand_mm(vd, vs, vs);\n-}\n-\n-void MacroAssembler::vncvt_x_x_w(VectorRegister vd, VectorRegister vs, VectorMask vm) {\n-  vnsrl_wx(vd, vs, x0, vm);\n-}\n-\n-void MacroAssembler::vfneg_v(VectorRegister vd, VectorRegister vs) {\n-  vfsgnjn_vv(vd, vs, vs);\n-}\n-\n@@ -1601,15 +1515,0 @@\n-void MacroAssembler::mv(Register Rd, Address dest) {\n-  assert(dest.getMode() == Address::literal, \"Address mode should be Address::literal\");\n-  relocate(dest.rspec(), [&] {\n-    movptr(Rd, dest.target());\n-  });\n-}\n-\n-void MacroAssembler::mv(Register Rd, RegisterOrConstant src) {\n-  if (src.is_register()) {\n-    mv(Rd, src.as_register());\n-  } else {\n-    mv(Rd, src.as_constant());\n-  }\n-}\n-\n@@ -1645,10 +1544,0 @@\n-void MacroAssembler::movptr(Register Rd, uintptr_t imm64) {\n-  movptr(Rd, (address)imm64);\n-}\n-\n-void MacroAssembler::movptr(Register Rd, address addr) {\n-  int offset = 0;\n-  movptr(Rd, addr, offset);\n-  addi(Rd, Rd, offset);\n-}\n-\n@@ -3567,2 +3456,1 @@\n-                                   bool haystack_isL)\n-{\n+                                   bool haystack_isL) {\n@@ -3589,2 +3477,1 @@\n-                                        Register mask1, Register mask2)\n-{\n+                                        Register mask1, Register mask2) {\n@@ -3674,2 +3561,1 @@\n-void MacroAssembler::adc(Register dst, Register src1, Register src2, Register carry)\n-{\n+void MacroAssembler::adc(Register dst, Register src1, Register src2, Register carry) {\n@@ -3682,2 +3568,1 @@\n-void MacroAssembler::cadc(Register dst, Register src1, Register src2, Register carry)\n-{\n+void MacroAssembler::cadc(Register dst, Register src1, Register src2, Register carry) {\n@@ -3690,2 +3575,1 @@\n-                                     Register src1, Register src2, Register carry)\n-{\n+                                     Register src1, Register src2, Register carry) {\n@@ -3704,2 +3588,1 @@\n-                                           Register idx, Register kdx)\n-{\n+                                           Register idx, Register kdx) {\n@@ -3741,2 +3624,1 @@\n-                                           Register idx, Register kdx)\n-{\n+                                           Register idx, Register kdx) {\n@@ -3806,2 +3688,1 @@\n-                                             Register tmp6, Register product_hi)\n-{\n+                                             Register tmp6, Register product_hi) {\n@@ -3942,2 +3823,1 @@\n-                                     Register tmp5, Register tmp6, Register product_hi)\n-{\n+                                     Register tmp5, Register tmp6, Register product_hi) {\n@@ -4107,2 +3987,1 @@\n-void MacroAssembler::ctzc_bit(Register Rd, Register Rs, bool isLL, Register tmp1, Register tmp2)\n-{\n+void MacroAssembler::ctzc_bit(Register Rd, Register Rs, bool isLL, Register tmp1, Register tmp2) {\n@@ -4117,0 +3996,1 @@\n+\n@@ -4134,2 +4014,1 @@\n-void MacroAssembler::inflate_lo32(Register Rd, Register Rs, Register tmp1, Register tmp2)\n-{\n+void MacroAssembler::inflate_lo32(Register Rd, Register Rs, Register tmp1, Register tmp2) {\n@@ -4137,0 +4016,1 @@\n+\n@@ -4139,2 +4019,1 @@\n-  for (int i = 0; i <= 3; i++)\n-  {\n+  for (int i = 0; i <= 3; i++) {\n@@ -4156,2 +4035,1 @@\n-void MacroAssembler::inflate_hi32(Register Rd, Register Rs, Register tmp1, Register tmp2)\n-{\n+void MacroAssembler::inflate_hi32(Register Rd, Register Rs, Register tmp1, Register tmp2) {\n@@ -4159,0 +4037,1 @@\n+\n@@ -4161,2 +4040,1 @@\n-  for (int i = 0; i <= 3; i++)\n-  {\n+  for (int i = 0; i <= 3; i++) {\n@@ -4185,2 +4063,1 @@\n-address MacroAssembler::zero_words(Register ptr, Register cnt)\n-{\n+address MacroAssembler::zero_words(Register ptr, Register cnt) {\n@@ -4192,0 +4069,1 @@\n+\n@@ -4227,0 +4105,1 @@\n+\n@@ -4236,2 +4115,1 @@\n-void MacroAssembler::zero_words(Register base, u_int64_t cnt)\n-{\n+void MacroAssembler::zero_words(Register base, u_int64_t cnt) {\n@@ -4275,2 +4153,1 @@\n-void MacroAssembler::fill_words(Register base, Register cnt, Register value)\n-{\n+void MacroAssembler::fill_words(Register base, Register cnt, Register value) {\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":22,"deletions":145,"binary":false,"changes":167,"status":"modified"},{"patch":"@@ -341,1 +341,2 @@\n-  static void membar_mask_to_pred_succ(uint32_t order_constraint, uint32_t& predecessor, uint32_t& successor) {\n+  static void membar_mask_to_pred_succ(uint32_t order_constraint,\n+                                       uint32_t& predecessor, uint32_t& successor) {\n@@ -399,12 +400,52 @@\n-  \/\/ Standard pseudo instruction\n-  void nop();\n-  void mv(Register Rd, Register Rs);\n-  void notr(Register Rd, Register Rs);\n-  void neg(Register Rd, Register Rs);\n-  void negw(Register Rd, Register Rs);\n-  void sext_w(Register Rd, Register Rs);\n-  void zext_b(Register Rd, Register Rs);\n-  void seqz(Register Rd, Register Rs);          \/\/ set if = zero\n-  void snez(Register Rd, Register Rs);          \/\/ set if != zero\n-  void sltz(Register Rd, Register Rs);          \/\/ set if < zero\n-  void sgtz(Register Rd, Register Rs);          \/\/ set if > zero\n+  \/\/ Standard pseudo instructions\n+  inline void nop() {\n+    addi(x0, x0, 0);\n+  }\n+\n+  inline void mv(Register Rd, Register Rs) {\n+    if (Rd != Rs) {\n+      addi(Rd, Rs, 0);\n+    }\n+  }\n+\n+  inline void notr(Register Rd, Register Rs) {\n+    xori(Rd, Rs, -1);\n+  }\n+\n+  inline void neg(Register Rd, Register Rs) {\n+    sub(Rd, x0, Rs);\n+  }\n+\n+  inline void negw(Register Rd, Register Rs) {\n+    subw(Rd, x0, Rs);\n+  }\n+\n+  inline void sext_w(Register Rd, Register Rs) {\n+    addiw(Rd, Rs, 0);\n+  }\n+\n+  inline void zext_b(Register Rd, Register Rs) {\n+    andi(Rd, Rs, 0xFF);\n+  }\n+\n+  inline void seqz(Register Rd, Register Rs) {\n+    sltiu(Rd, Rs, 1);\n+  }\n+\n+  inline void snez(Register Rd, Register Rs) {\n+    sltu(Rd, x0, Rs);\n+  }\n+\n+  inline void sltz(Register Rd, Register Rs) {\n+    slt(Rd, Rs, x0);\n+  }\n+\n+  inline void sgtz(Register Rd, Register Rs) {\n+    slt(Rd, x0, Rs);\n+  }\n+\n+  \/\/ Bit-manipulation extension pseudo instructions\n+  \/\/ zero extend word\n+  inline void zext_w(Register Rd, Register Rs) {\n+    add_uw(Rd, Rs, zr);\n+  }\n@@ -413,6 +454,27 @@\n-  void fmv_s(FloatRegister Rd, FloatRegister Rs);\n-  void fabs_s(FloatRegister Rd, FloatRegister Rs);\n-  void fneg_s(FloatRegister Rd, FloatRegister Rs);\n-  void fmv_d(FloatRegister Rd, FloatRegister Rs);\n-  void fabs_d(FloatRegister Rd, FloatRegister Rs);\n-  void fneg_d(FloatRegister Rd, FloatRegister Rs);\n+  inline void fmv_s(FloatRegister Rd, FloatRegister Rs) {\n+    if (Rd != Rs) {\n+      fsgnj_s(Rd, Rs, Rs);\n+    }\n+  }\n+\n+  inline void fabs_s(FloatRegister Rd, FloatRegister Rs) {\n+    fsgnjx_s(Rd, Rs, Rs);\n+  }\n+\n+  inline void fneg_s(FloatRegister Rd, FloatRegister Rs) {\n+    fsgnjn_s(Rd, Rs, Rs);\n+  }\n+\n+  inline void fmv_d(FloatRegister Rd, FloatRegister Rs) {\n+    if (Rd != Rs) {\n+      fsgnj_d(Rd, Rs, Rs);\n+    }\n+  }\n+\n+  inline void fabs_d(FloatRegister Rd, FloatRegister Rs) {\n+    fsgnjx_d(Rd, Rs, Rs);\n+  }\n+\n+  inline void fneg_d(FloatRegister Rd, FloatRegister Rs) {\n+    fsgnjn_d(Rd, Rs, Rs);\n+  }\n@@ -614,2 +676,14 @@\n-  void mv(Register Rd, Address dest);\n-  void mv(Register Rd, RegisterOrConstant src);\n+  void mv(Register Rd, Address dest) {\n+    assert(dest.getMode() == Address::literal, \"Address mode should be Address::literal\");\n+    relocate(dest.rspec(), [&] {\n+      movptr(Rd, dest.target());\n+    });\n+  }\n+\n+  void mv(Register Rd, RegisterOrConstant src) {\n+    if (src.is_register()) {\n+      mv(Rd, src.as_register());\n+    } else {\n+      mv(Rd, src.as_constant());\n+    }\n+  }\n@@ -617,1 +691,0 @@\n-  void movptr(Register Rd, address addr);\n@@ -619,1 +692,10 @@\n-  void movptr(Register Rd, uintptr_t imm64);\n+\n+  void movptr(Register Rd, address addr) {\n+    int offset = 0;\n+    movptr(Rd, addr, offset);\n+    addi(Rd, Rd, offset);\n+  }\n+\n+  inline void movptr(Register Rd, uintptr_t imm64) {\n+    movptr(Rd, (address)imm64);\n+  }\n@@ -1092,0 +1174,13 @@\n+  \/\/ vector pseudo instructions\n+  inline void vmnot_m(VectorRegister vd, VectorRegister vs) {\n+    vmnand_mm(vd, vs, vs);\n+  }\n+\n+  inline void vncvt_x_x_w(VectorRegister vd, VectorRegister vs, VectorMask vm) {\n+    vnsrl_wx(vd, vs, x0, vm);\n+  }\n+\n+  inline void vfneg_v(VectorRegister vd, VectorRegister vs) {\n+    vfsgnjn_vv(vd, vs, vs);\n+  }\n+\n@@ -1133,5 +1228,0 @@\n-  \/\/ vext\n-  void vmnot_m(VectorRegister vd, VectorRegister vs);\n-  void vncvt_x_x_w(VectorRegister vd, VectorRegister vs, VectorMask vm = unmasked);\n-  void vfneg_v(VectorRegister vd, VectorRegister vs);\n-\n@@ -1146,1 +1236,1 @@\n-  void ret() {\n+  inline void ret() {\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":119,"deletions":29,"binary":false,"changes":148,"status":"modified"}]}