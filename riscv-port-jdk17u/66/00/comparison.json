{"files":[{"patch":"@@ -398,1 +398,1 @@\n-instruct minI_reg_b(iRegINoSp dst, iRegI src1, iRegI src2) %{\n+instruct minI_reg_reg_b(iRegINoSp dst, iRegI src1, iRegI src2) %{\n@@ -403,1 +403,1 @@\n-  format %{ \"min  $dst, $src1, $src2\\t#@minI_reg_b\" %}\n+  format %{ \"min  $dst, $src1, $src2\\t#@minI_reg_reg_b\" %}\n@@ -412,1 +412,1 @@\n-instruct maxI_reg_b(iRegINoSp dst, iRegI src1, iRegI src2) %{\n+instruct maxI_reg_reg_b(iRegINoSp dst, iRegI src1, iRegI src2) %{\n@@ -417,1 +417,1 @@\n-  format %{ \"max  $dst, $src1, $src2\\t#@maxI_reg_b\" %}\n+  format %{ \"max  $dst, $src1, $src2\\t#@maxI_reg_reg_b\" %}\n@@ -426,0 +426,34 @@\n+\/\/ special case for comparing with zero\n+\/\/ n.b. this is selected in preference to the rule above because it\n+\/\/ avoids loading constant 0 into a source register\n+\n+instruct minI_reg_zero_b(iRegINoSp dst, iRegI src1, immI0 zero) %{\n+  predicate(UseZbb);\n+  match(Set dst (MinI src1 zero));\n+  match(Set dst (MinI zero src1));\n+\n+  ins_cost(ALU_COST);\n+  format %{ \"min  $dst, $src1, zr\\t#@minI_reg_zero_b\" %}\n+\n+  ins_encode %{\n+    __ min(as_Register($dst$$reg), as_Register($src1$$reg), zr);\n+  %}\n+\n+  ins_pipe(ialu_reg_reg);\n+%}\n+\n+instruct maxI_reg_zero_b(iRegINoSp dst, iRegI src1, immI0 zero) %{\n+  predicate(UseZbb);\n+  match(Set dst (MaxI src1 zero));\n+  match(Set dst (MaxI zero src1));\n+\n+  ins_cost(ALU_COST);\n+  format %{ \"max  $dst, $src1, zr\\t#@maxI_reg_zero_b\" %}\n+\n+  ins_encode %{\n+    __ max(as_Register($dst$$reg), as_Register($src1$$reg), zr);\n+  %}\n+\n+  ins_pipe(ialu_reg_reg);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_b.ad","additions":38,"deletions":4,"binary":false,"changes":42,"status":"modified"}]}