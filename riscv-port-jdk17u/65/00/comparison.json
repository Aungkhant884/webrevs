{"files":[{"patch":"@@ -1637,1 +1637,1 @@\n-    __ andi(t0, tmp, TypeEntries::type_unknown);\n+    __ test_bit(t0, tmp, exact_log2(TypeEntries::type_unknown));\n@@ -1659,1 +1659,1 @@\n-    __ andi(t0, tmp, TypeEntries::type_unknown);\n+    __ test_bit(t0, tmp, exact_log2(TypeEntries::type_unknown));\n@@ -1714,1 +1714,1 @@\n-    __ andi(t0, tmp, TypeEntries::type_unknown);\n+    __ test_bit(t0, tmp, exact_log2(TypeEntries::type_unknown));\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LIRAssembler_riscv.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-    andi(t0, hdr, JVM_ACC_IS_VALUE_BASED_CLASS);\n+    test_bit(t0, hdr, exact_log2(JVM_ACC_IS_VALUE_BASED_CLASS));\n","filename":"src\/hotspot\/cpu\/riscv\/c1_MacroAssembler_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -913,1 +913,1 @@\n-        __ andi(t0, t, JVM_ACC_HAS_FINALIZER);\n+        __ test_bit(t0, t, exact_log2(JVM_ACC_HAS_FINALIZER));\n","filename":"src\/hotspot\/cpu\/riscv\/c1_Runtime1_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1150,1 +1150,1 @@\n-  andi(t0, cnt1, 4);\n+  test_bit(t0, cnt1, 2);\n@@ -1162,1 +1162,1 @@\n-  andi(t0, cnt1, 2);\n+  test_bit(t0, cnt1, 1);\n@@ -1175,1 +1175,1 @@\n-    andi(t0, cnt1, 1);\n+    test_bit(t0, cnt1, 0);\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-        __ andi(t0, t0, ShenandoahHeap::HAS_FORWARDED);\n+        __ test_bit(t0, t0, ShenandoahHeap::HAS_FORWARDED_BITPOS);\n@@ -249,1 +249,1 @@\n-    __ andi(t1, t1, ShenandoahHeap::HAS_FORWARDED);\n+    __ test_bit(t1, t1, ShenandoahHeap::HAS_FORWARDED_BITPOS);\n@@ -253,1 +253,1 @@\n-    __ andi(t0, t1, ShenandoahHeap::WEAK_ROOTS);\n+    __ test_bit(t0, t1, ShenandoahHeap::WEAK_ROOTS_BITPOS);\n@@ -255,1 +255,1 @@\n-    __ andi(t0, t1, ShenandoahHeap::HAS_FORWARDED);\n+    __ test_bit(t0, t1, ShenandoahHeap::HAS_FORWARDED_BITPOS);\n@@ -279,1 +279,1 @@\n-    __ andi(t0, t1, 1);\n+    __ test_bit(t0, t1, 0);\n@@ -450,1 +450,1 @@\n-  __ andi(t0, t1, ShenandoahHeap::EVACUATION);\n+  __ test_bit(t0, t1, ShenandoahHeap::EVACUATION_BITPOS);\n@@ -643,1 +643,1 @@\n-  __ andi(tmp, tmp, ShenandoahHeap::MARKING);\n+  __ test_bit(tmp, tmp, ShenandoahHeap::MARKING_BITPOS);\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/shenandoah\/shenandoahBarrierSetAssembler_riscv.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -102,1 +102,1 @@\n-    andi(t0, t1, JavaThread::popframe_pending_bit);\n+    test_bit(t0, t1, exact_log2(JavaThread::popframe_pending_bit));\n@@ -104,1 +104,1 @@\n-    andi(t0, t1, JavaThread::popframe_processing_bit);\n+    test_bit(t0, t1, exact_log2(JavaThread::popframe_processing_bit));\n@@ -526,1 +526,1 @@\n-    andi(t1, t1, SafepointMechanism::poll_bit());\n+    test_bit(t1, t1, exact_log2(SafepointMechanism::poll_bit()));\n@@ -623,1 +623,1 @@\n-  andi(t0, x12, JVM_ACC_SYNCHRONIZED);\n+  test_bit(t0, x12, exact_log2(JVM_ACC_SYNCHRONIZED));\n@@ -808,1 +808,1 @@\n-      andi(tmp, tmp, JVM_ACC_IS_VALUE_BASED_CLASS);\n+      test_bit(tmp, tmp, exact_log2(JVM_ACC_IS_VALUE_BASED_CLASS));\n@@ -1674,1 +1674,1 @@\n-  andi(t0, obj, TypeEntries::type_unknown);\n+  test_bit(t0, obj, exact_log2(TypeEntries::type_unknown));\n@@ -1930,1 +1930,1 @@\n-void InterpreterMacroAssembler::verify_access_flags(Register access_flags, uint32_t flag_bits,\n+void InterpreterMacroAssembler::verify_access_flags(Register access_flags, uint32_t flag,\n@@ -1933,1 +1933,1 @@\n-  andi(t0, access_flags, flag_bits);\n+  test_bit(t0, access_flags, exact_log2(flag));\n","filename":"src\/hotspot\/cpu\/riscv\/interp_masm_riscv.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -279,1 +279,1 @@\n-  void verify_access_flags(Register access_flags, uint32_t flag_bits,\n+  void verify_access_flags(Register access_flags, uint32_t flag,\n","filename":"src\/hotspot\/cpu\/riscv\/interp_masm_riscv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -87,1 +87,1 @@\n-  __ andi(t0, rcounter, 1);\n+  __ test_bit(t0, rcounter, 0);\n","filename":"src\/hotspot\/cpu\/riscv\/jniFastGetField_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -534,1 +534,1 @@\n-  andi(t0, value, JNIHandles::weak_tag_mask);\n+  test_bit(t0, value, exact_log2(JNIHandles::weak_tag_mask));\n@@ -2354,1 +2354,1 @@\n-    andi(t0, t0, SafepointMechanism::poll_bit());\n+    test_bit(t0, t0, exact_log2(SafepointMechanism::poll_bit()));\n@@ -3826,1 +3826,1 @@\n-    andi(t0, t0, 0x1);\n+    test_bit(t0, t0, 0);\n@@ -4067,1 +4067,1 @@\n-    andi(t0, cnt, i);\n+    test_bit(t0, cnt, exact_log2(i));\n@@ -4077,1 +4077,1 @@\n-    andi(t0, cnt, 1);\n+    test_bit(t0, cnt, 0);\n@@ -4390,0 +4390,9 @@\n+\n+void MacroAssembler::test_bit(Register Rd, Register Rs, uint32_t bit_pos, Register tmp) {\n+  assert(bit_pos < 64, \"invalid bit range\");\n+  if (UseZbs) {\n+    bexti(Rd, Rs, bit_pos);\n+    return;\n+  }\n+  andi(Rd, Rs, 1UL << bit_pos, tmp);\n+}\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":14,"deletions":5,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -1134,0 +1134,3 @@\n+  \/\/ test single bit in Rs, result is set to Rd\n+  void test_bit(Register Rd, Register Rs, uint32_t bit_pos, Register tmp = t0);\n+\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2321,1 +2321,1 @@\n-      __ andi(flag, flag, JVM_ACC_IS_VALUE_BASED_CLASS, tmp \/* tmp *\/);\n+      __ test_bit(flag, flag, exact_log2(JVM_ACC_IS_VALUE_BASED_CLASS), tmp \/* tmp *\/);\n@@ -2330,1 +2330,1 @@\n-    __ andi(t0, disp_hdr, markWord::monitor_value);\n+    __ test_bit(t0, disp_hdr, exact_log2(markWord::monitor_value));\n@@ -2420,1 +2420,1 @@\n-    __ andi(t0, tmp, markWord::monitor_value);\n+    __ test_bit(t0, tmp, exact_log2(markWord::monitor_value));\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -652,1 +652,1 @@\n-      __ andi(t1, t0, JVM_ACC_STATIC);\n+      __ test_bit(t1, t0, exact_log2(JVM_ACC_STATIC));\n","filename":"src\/hotspot\/cpu\/riscv\/sharedRuntime_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -815,1 +815,1 @@\n-      __ andi(t0, count, 4);\n+      __ test_bit(t0, count, 2);\n@@ -837,1 +837,1 @@\n-      __ andi(t0, count, 2);\n+      __ test_bit(t0, count, 1);\n@@ -1707,1 +1707,1 @@\n-    __ andi(t0, t0, 1);\n+    __ test_bit(t0, t0, 0);\n@@ -1788,1 +1788,1 @@\n-    __ andi(t0, src_pos, 1UL << 31);\n+    __ test_bit(t0, src_pos, 31);\n@@ -1796,1 +1796,1 @@\n-    __ andi(t0, dst_pos, 1UL << 31);\n+    __ test_bit(t0, dst_pos, 31);\n@@ -1807,1 +1807,1 @@\n-    __ andi(t0, scratch_length, 1UL << 31);\n+    __ test_bit(t0, scratch_length, 31);\n@@ -1847,1 +1847,1 @@\n-    __ andi(t0, lh, 1UL << 31);\n+    __ test_bit(t0, lh, 31);\n@@ -1898,1 +1898,1 @@\n-    __ andi(t0, x22_elsize, 2);\n+    __ test_bit(t0, x22_elsize, 1);\n@@ -1900,1 +1900,1 @@\n-    __ andi(t0, x22_elsize, 1);\n+    __ test_bit(t0, x22_elsize, 0);\n@@ -1914,1 +1914,1 @@\n-    __ andi(t0, x22_elsize, 1);\n+    __ test_bit(t0, x22_elsize, 0);\n@@ -2089,1 +2089,1 @@\n-          __ andi(t0, to, 1);\n+          __ test_bit(t0, to, 0);\n@@ -2098,1 +2098,1 @@\n-          __ andi(t0, to, 2);\n+          __ test_bit(t0, to, 1);\n@@ -2107,1 +2107,1 @@\n-          __ andi(t0, to, 4);\n+          __ test_bit(t0, to, 2);\n@@ -2151,1 +2151,1 @@\n-        __ andi(t0, count, 1);\n+        __ test_bit(t0, count, 0);\n@@ -2156,1 +2156,1 @@\n-        __ andi(t0, count, 2);\n+        __ test_bit(t0, count, 1);\n@@ -2161,1 +2161,1 @@\n-        __ andi(t0, count, 4);\n+        __ test_bit(t0, count, 2);\n@@ -2166,1 +2166,1 @@\n-        __ andi(t0, count, 1);\n+        __ test_bit(t0, count, 0);\n@@ -2171,1 +2171,1 @@\n-        __ andi(t0, count, 2);\n+        __ test_bit(t0, count, 1);\n@@ -3132,1 +3132,1 @@\n-      andi(t0, count, 0x1);\n+      test_bit(t0, count, 0);\n@@ -3148,1 +3148,1 @@\n-      andi(tmp, count, 0x1);\n+      test_bit(tmp, count, 0);\n@@ -3399,1 +3399,1 @@\n-      andi(t0, i, 0x1);\n+      test_bit(t0, i, 0);\n","filename":"src\/hotspot\/cpu\/riscv\/stubGenerator_riscv.cpp","additions":21,"deletions":21,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -117,1 +117,1 @@\n-    __ andi(t0, c_rarg3, 1UL << i);\n+    __ test_bit(t0, c_rarg3, i);\n@@ -1047,1 +1047,1 @@\n-    __ andi(t0, t, JVM_ACC_STATIC);\n+    __ test_bit(t0, t, exact_log2(JVM_ACC_STATIC));\n@@ -1234,1 +1234,1 @@\n-    __ andi(t0, t, JVM_ACC_SYNCHRONIZED);\n+    __ test_bit(t0, t, exact_log2(JVM_ACC_SYNCHRONIZED));\n","filename":"src\/hotspot\/cpu\/riscv\/templateInterpreterGenerator_riscv.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1156,1 +1156,1 @@\n-  __ andi(t0, x12, Klass::layout_helper_boolean_diffbit());\n+  __ test_bit(t0, x12, exact_log2(Klass::layout_helper_boolean_diffbit()));\n@@ -2181,1 +2181,1 @@\n-    __ andi(t0, x13, JVM_ACC_HAS_FINALIZER);\n+    __ test_bit(t0, x13, exact_log2(JVM_ACC_HAS_FINALIZER));\n@@ -2546,1 +2546,1 @@\n-  __ andi(t0, raw_flags, 1UL << ConstantPoolCacheEntry::is_volatile_shift);\n+  __ test_bit(t0, raw_flags, ConstantPoolCacheEntry::is_volatile_shift);\n@@ -2646,1 +2646,1 @@\n-    __ andi(t0, x15, 1UL << ConstantPoolCacheEntry::is_volatile_shift);\n+    __ test_bit(t0, x15, ConstantPoolCacheEntry::is_volatile_shift);\n@@ -2856,1 +2856,1 @@\n-    __ andi(t0, x15, 1UL << ConstantPoolCacheEntry::is_volatile_shift);\n+    __ test_bit(t0, x15, ConstantPoolCacheEntry::is_volatile_shift);\n@@ -2960,1 +2960,1 @@\n-    __ andi(t0, x13, 1UL << ConstantPoolCacheEntry::is_volatile_shift);\n+    __ test_bit(t0, x13, ConstantPoolCacheEntry::is_volatile_shift);\n@@ -3008,1 +3008,1 @@\n-    __ andi(t0, x13, 1UL << ConstantPoolCacheEntry::is_volatile_shift);\n+    __ test_bit(t0, x13, ConstantPoolCacheEntry::is_volatile_shift);\n@@ -3095,1 +3095,1 @@\n-    __ andi(t0, x13, 1UL << ConstantPoolCacheEntry::is_volatile_shift);\n+    __ test_bit(t0, x13, ConstantPoolCacheEntry::is_volatile_shift);\n@@ -3140,1 +3140,1 @@\n-    __ andi(t0, x13, 1UL << ConstantPoolCacheEntry::is_volatile_shift);\n+    __ test_bit(t0, x13, ConstantPoolCacheEntry::is_volatile_shift);\n@@ -3189,1 +3189,1 @@\n-    __ andi(t0, flags, 1UL << ConstantPoolCacheEntry::has_appendix_shift);\n+    __ test_bit(t0, flags, ConstantPoolCacheEntry::has_appendix_shift);\n@@ -3231,1 +3231,1 @@\n-  __ andi(t0, flags, 1UL << ConstantPoolCacheEntry::is_vfinal_shift);\n+  __ test_bit(t0, flags, ConstantPoolCacheEntry::is_vfinal_shift);\n@@ -3328,1 +3328,1 @@\n-  __ andi(t0, x13, 1UL << ConstantPoolCacheEntry::is_forced_virtual_shift);\n+  __ test_bit(t0, x13, ConstantPoolCacheEntry::is_forced_virtual_shift);\n@@ -3338,1 +3338,1 @@\n-  __ andi(t0, x13, 1UL << ConstantPoolCacheEntry::is_vfinal_shift);\n+  __ test_bit(t0, x13, ConstantPoolCacheEntry::is_vfinal_shift);\n@@ -3510,1 +3510,1 @@\n-  __ andi(t0, x13, Klass::_lh_instance_slow_path_bit);\n+  __ test_bit(t0, x13, exact_log2(Klass::_lh_instance_slow_path_bit));\n","filename":"src\/hotspot\/cpu\/riscv\/templateTable_riscv.cpp","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"}]}