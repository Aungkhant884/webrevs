{"files":[{"patch":"@@ -13,1 +13,5 @@\n-The appropriate way to print logging output from HotSpot is through the [Unified Logging Framework (JEP 158)](https:\/\/openjdk.org\/jeps\/158). It gives you a lot of nice features and enables common command-line options for all logging. Messages can also be \"decorated\" with e.g. uptime, level, tags. The JEP contains a thorough description of the feature, but a quick example might look like:\n+The appropriate way to print logging output from HotSpot is through the [Unified Logging Framework (JEP 158)](https:\/\/openjdk.org\/jeps\/158).\n+It gives you a lot of nice features and enables common command-line options for all logging.\n+\n+\n+A basic log message can be output like this.\n@@ -19,1 +23,5 @@\n-Where 'gc' and 'marking' are tags, and 'info' is the log level. This would be visible if the JVM were run with any of the following flags:\n+Where 'gc' and 'marking' are tags, and 'info' is the log level. Tags associate log messages with certain subsystems or features and the log level\n+determines the importance and verbosity of the message. The most verbose output is trace, and the least is error. The full list of tags is available\n+[here](https:\/\/github.com\/openjdk\/jdk\/blob\/master\/src\/hotspot\/share\/logging\/logTag.hpp) and the full list of levels [here](https:\/\/github.com\/openjdk\/jdk\/blob\/master\/src\/hotspot\/share\/logging\/logLevel.hpp).\n+\n+The basic log API looks as follows:\n@@ -22,3 +30,1 @@\n--Xlog:gc+marking=info\n--Xlog:gc+marking\n--Xlog:gc*\n+log_<level>(Tag1[,...])(fmtstr, ...)\n@@ -27,1 +33,3 @@\n-The API should be similar to:\n+Sometimes single line printf-style logging isn't enough.\n+For example, it can be useful to group several log lines together or to use Hotspot's output stream API.\n+UL supports both of these use cases using `LogMessage` and `LogStream`, respectively.\n@@ -30,1 +38,42 @@\n-log_<level>(Tag1[,...])(fmtstr, ...)\n+LogMessage(gc, marking) lm;\n+if (lm.is_info()) {\n+  lm.info(\"We are guaranteed to be\");\n+  lm.info(\" grouped together\");\n+}\n+~~~\n+\n+`LogMessage` will submit its output when it goes out of scope.\n+\n+`LogStream` is typically used when a single printf-style format string becomes unwieldy.\n+\n+~~~c++\n+ResourceMark rm;\n+LogStream st(Log(gc, marking)::info());\n+if(st.is_enabled()) {\n+  st.print(\"I'm printing a lot of %s \", \"arguments\");\n+  st.print(\"With a lot of extra info %d \", 3);\n+  st.print_cr(\"and so it's useful to use a stream\");\n+}\n+~~~\n+\n+If you need to print multiple lines grouped together with complex formatting requirements then `NonInterleavingLogStream` is probably what you want.\n+\n+~~~c++\n+ResourceMark rm;\n+LogMessage(gc) lm;\n+NonInterleavingLogStream st{LogLevelType::Info, lm};\n+if(st.is_enabled()) {\n+  st.print_cr(\"Line one: %d %d %d \", 1, 2, 3);\n+  st.print(\"Still line one: %d %d %d\", 4, 5, 6);\n+  st.print_cr(\"Line two: %d %d %d\", 7, 8, 9);\n+}\n+~~~\n+\n+\n+You turn on logging by starting the JVM with the `-Xlog` command line option specified.\n+For example, the messages from the examples would be visible if the JVM were run with any of the following flags:\n+\n+~~~c++\n+-Xlog:gc+marking=info\n+-Xlog:gc+marking\n+-Xlog:gc*\n@@ -33,1 +82,1 @@\n-At the time of writing, the different log levels can be found in [src\/hotspot\/share\/logging\/log.hpp](https:\/\/github.com\/openjdk\/jdk\/blob\/master\/src\/hotspot\/share\/logging\/log.hpp).\n+A full description of the syntax of `-Xlog` is available in [JEP 158](https:\/\/openjdk.java.net\/jeps\/158), also mentioned above.\n","filename":"src\/guide\/hotspot-development.md","additions":57,"deletions":8,"binary":false,"changes":65,"status":"modified"}]}