{"files":[{"patch":"@@ -13,1 +13,4 @@\n-The appropriate way to print logging output from HotSpot is through the [Unified Logging Framework (JEP 158)](https:\/\/openjdk.org\/jeps\/158). It gives you a lot of nice features and enables common command-line options for all logging. Messages can also be \"decorated\" with e.g. uptime, level, tags. The JEP contains a thorough description of the feature, but a quick example might look like:\n+The appropriate way to print logging output from HotSpot is through the [Unified Logging Framework (JEP 158)](https:\/\/openjdk.org\/jeps\/158).\n+It gives you a lot of nice features and enables common command-line options for all logging.\n+\n+A basic log message can be output like this:\n@@ -19,1 +22,38 @@\n-Where 'gc' and 'marking' are tags, and 'info' is the log level. This would be visible if the JVM were run with any of the following flags:\n+Where 'gc' and 'marking' are tags, and 'info' is the log level. Tags associate log messages with certain subsystems or features and the log level\n+determines the importance and verbosity of the message. The most verbose output is trace, and the least is error. The full list of tags is available\n+[here](https:\/\/github.com\/openjdk\/jdk\/blob\/master\/src\/hotspot\/share\/logging\/logTag.hpp) and the full list of levels [here](https:\/\/github.com\/openjdk\/jdk\/blob\/master\/src\/hotspot\/share\/logging\/logLevel.hpp).\n+\n+The basic log API looks as follows:\n+\n+~~~c++\n+log_<level>(Tag1[,...])(fmtstr, ...)\n+~~~\n+\n+Sometimes single line printf-style logging isn't enough.\n+For example, it can be useful to group several log lines together or to use HotSpot's output stream API.\n+UL supports both of these use cases using `LogMessage` and `LogStream`, respectively.\n+\n+~~~c++\n+LogMessage(gc, marking) lm;\n+if (lm.is_info()) {\n+  lm.info(\"We are guaranteed to be\");\n+  lm.info(\" grouped together\");\n+}\n+~~~\n+\n+`LogMessage` will submit its output when it goes out of scope.\n+\n+`LogStream` is typically used when a single printf-style format string becomes unwieldy.\n+\n+~~~c++\n+LogStream st(Log(gc, marking)::info());\n+if(st.is_enabled()) {\n+  \/\/ Print without newline\n+  st.print(\"I'm printing a lot of %s \", \"arguments\");\n+  st.print(\"With a lot of extra info %d \", 3);\n+  \/\/ Print with newline (cr stands for carriage return)\n+  st.print_cr(\"and so it's useful to use a stream\");\n+}\n+~~~\n+\n+If you need to print multiple lines grouped together with complex formatting requirements then `NonInterleavingLogStream` is probably what you want.\n@@ -22,0 +62,15 @@\n+LogMessage(gc) lm;\n+NonInterleavingLogStream st{LogLevelType::Info, lm};\n+if(st.is_enabled()) {\n+  st.print_cr(\"Line one: %d %d %d \", 1, 2, 3);\n+  st.print(\"Line two: %d %d %d\", 4, 5, 6);\n+  st.print_cr(\" still line two: %d %d %d\", 7, 8, 9);\n+}\n+~~~\n+\n+### Enabling logging\n+\n+You enable logging in the JVM by using the `-Xlog` command line option specified.\n+For example, the messages from the examples would be visible if the JVM were run with any of the following options:\n+\n+~~~\n@@ -27,1 +82,1 @@\n-The API should be similar to:\n+You can have multiple `-Xlog` options, these are applied in an additive manner. Consider this example:\n@@ -29,2 +84,0 @@\n-~~~c++\n-log_<level>(Tag1[,...])(fmtstr, ...)\n@@ -32,0 +85,17 @@\n+-Xlog:gc+marking=info:stdout -Xlog:alloc=warning:stderr -Xlog:breakpoint=error:breakpoint.txt:level\n+~~~\n+\n+This specifies that:\n+\n+1. Log messages with info level and up with tags gc and marking to stdout.\n+2. Log messages with warning level and up with tag alloc to stderr.\n+3. Log messages with error level and up with tag breakpoint to file breakpoint.txt with the decorator level.\n+\n+UL automatically applies a default argument of `-Xlog:all=warning:stdout:uptime,level,tags` when logging is enabled. This can be disabled by\n+prepending `-Xlog:disable` to your arguments.\n+\n+~~~\n+-Xlog:disable -Xlog:gc+marking=info -Xlog:alloc=warning\n+~~~\n+\n+Starting the JVM with the option `-Xlog:help` outputs more information and more examples.\n@@ -33,1 +103,1 @@\n-At the time of writing, the different log levels can be found in [src\/hotspot\/share\/logging\/log.hpp](https:\/\/github.com\/openjdk\/jdk\/blob\/master\/src\/hotspot\/share\/logging\/log.hpp).\n+A full description of the syntax of `-Xlog` is available in [JEP 158](https:\/\/openjdk.java.net\/jeps\/158).\n","filename":"src\/guide\/hotspot-development.md","additions":76,"deletions":6,"binary":false,"changes":82,"status":"modified"}]}