{"files":[{"patch":"@@ -1353,1 +1353,1 @@\n-#. Close the original JBS issue **(O)**.\n+#. Close the original (failed) JBS issue **(O)**.\n@@ -1358,1 +1358,1 @@\n-   * Remember that comments aren't brought over when cloning.\n+   * Remember that comments aren't automatically brought over when cloning.\n@@ -1361,2 +1361,2 @@\n-     * Create a sub-task to **(R)** with the same summary, prefix with `[BACKOUT]`.\n-   * Alternative 2 - an investigation issue is created **(I)**, and during the investigation backing out the change is identified as the best solution.\n+     * Create a sub-task to **(R)** with the same summary prefixed with `[BACKOUT]`.\n+   * Alternative 2 - an investigation issue was created **(I)**, and during the investigation backing out the change is identified as the best solution.\n@@ -1368,1 +1368,1 @@\n-     * Link **(B)** and **(O)**.\n+     * Add a _relates to_ link between **(B)** and **(O)**.\n@@ -1437,0 +1437,51 @@\n+## Backing out a backport\n+\n+In rare cases it may be necessary to back out a backport from an update release without backing out the original fix in mainline. This will require a somewhat different procedure and will result in a small mess in JBS. It's extremely important to add comments in all relevant issues explaining exactly what's happened.\n+\n+The steps to take in order to do this are described below. **(M)** used below refers to the main bug entry - the first fix that was later backported.\n+\n+#. Close the original (failed) JBS backport issue **(O)**.\n+   * \"Verify\" the issue and choose \"Fix Failed\".\n+#. If the intention is to fix the backport and submit it again, create a redo-issue **(R)** to track that the work still needs to be done.\n+   * Clone **(M)** and add the prefix `[REDO BACKPORT]` on the summary - the clone becomes the redo-issue **(R)**.\n+   * Add a _relates to_ link between **(R)** and **(O)**.\n+   * Set Fix Version of **(R)** to the target release for the backport - either the exact release if known, or `<N>-pool` if it's not critical which release the fixed backport goes into.\n+#. Create a backout-issue **(B)**:\n+   * Alternative 1 - the broken backport is identified directly.\n+     * Create a sub-task to **(R)** with the same summary, but prefixed with `[BACKOUT BACKPORT]`.\n+   * Alternative 2 - an investigation issue was created **(I)**, and during the investigation backing out the backport is identified as the best solution.\n+     * Use the investigation issue **(I)** for the backout.\n+     * Change summary of **(I)** to the same as **(M)** and prefix with `[BACKOUT BACKPORT]`.\n+     * Move and change type of **(I)** to become a sub-task of **(R)**.\n+   * Alternative 3 - no redo issue was created.\n+     * Create a backout-issue **(B)** with the same summary as **(M)** and prefix with `[BACKOUT BACKPORT]`.\n+     * Add a _relates to_ link between **(B)** and **(M)**.\n+#. Add comments to **(M)**, **(R)** and **(O)** explaining the situation.\n+\n+The end result in JBS should look like this:\n+\n+::: {style=\"text-align:center;\"}\n+~~~{.mermaid caption=\"JBS structure after backout and redo of a backport\" format=svg theme=neutral}\n+flowchart TD\n+  main(\"Main issue <b>(M)<\/b><br>JDK-8272373: Example JBS Issue<br>Issue type: Bug<br>Fix version: 18\")\n+  backport(\"Initial backport <b>(O)<\/b><br>JDK-8280986: Example JBS Issue<br>Issue type: Backport<br>Fix version: 15.0.2<br>Verification: Fix failed\")\n+  backout(\"Backout of JDK-8280986 <b>(B)<\/b><br>JDK-8280996: [BACKOUT BACKPORT] Example JBS Issue<br>Issue type: Sub-task<br>Fix version: 15.0.2\")\n+  redo(\"Redo of backport <b>(R)<\/b><br>JDK-8280989: [REDO BACKPORT] Example JBS Issue<br>Issue type: Bug<br>Fix version: 15.0.2\")\n+  main --> |backported by| backport\n+  redo --> |clones| main\n+  backport <--> |relates to| redo\n+  redo --> |sub-task| backout\n+~~~\n+:::\n+\n+For this example in JBS see the 15.0.2 backport of [JDK-8272373](https:\/\/bugs.openjdk.java.net\/browse\/JDK-8272373).\n+\n+### Rationale for using this model\n+\n+The approach described here has both advantages and disadvantages. The key invariants that lead to this model are:\n+\n+* A _backported by_ link should only refer to issues of type Backport\n+* A bug id should never be reused for different patches in the same repository\n+\n+Disadvantages of this model are that the list of backports in JBS will still list the old (failed) backport as the 15.0.2 backport, and the new backport will not be linked to using a _backported by_ link. It is assumed that the advantages above outweigths the disadvantages and that the capital letter prefixes for the backout and the redo will be visible enough in JBS to alert that something fishy is going on.\n+\n","filename":"src\/index.md","additions":56,"deletions":5,"binary":false,"changes":61,"status":"modified"}]}