{"files":[{"patch":"@@ -614,1 +614,1 @@\n-      [~~**`hs-tier`**~~~~`[1-8]`~~]{#hs-tier}\n+      [~~**`hs-tier`**`[1-8]`~~]{#hs-tier}\n@@ -988,0 +988,75 @@\n+# Cloning the JDK\n+\n+::: {.box}\n+[Quick Links]{.boxheader}\n+\n+* [openjdk\/jdk GitHub project](https:\/\/github.com\/openjdk\/jdk)\n+* [Skara Documentation](https:\/\/wiki.openjdk.java.net\/display\/SKARA)\n+:::\n+\n+The complete source code for the JDK is hosted at [GitHub](https:\/\/github.com). You can browse the code directly in the [openjdk\/jdk GitHub repository](https:\/\/github.com\/openjdk\/jdk), or download the code for offline browsing, editing, and building using `git clone`.\n+\n+    $ git clone https:\/\/github.com\/openjdk\/jdk.git\n+\n+If you intend to contribute patches to the JDK, you should first *fork* the JDK repository on GitHub and clone your own fork as shown below. To fork a project on GitHub, go to the [project page](https:\/\/github.com\/openjdk\/jdk) and click the 'Fork' button in the upper right corner, then follow the on screen instructions.\n+\n+All pushes to [openjdk\/jdk](https:\/\/github.com\/openjdk\/jdk) require an SSH key which must be installed on GitHub. If this is the first time you clone your personal fork of the [openjdk\/jdk](https:\/\/github.com\/openjdk\/jdk) repository you may want to create an SSH key to use with it. See [Generating an SSH key] below. Once you have your private fork and an SSH key to go with it, go ahead and clone.\n+\n+    $ git clone git@github.com:OpenDuke\/jdk.git\n+    $ cd jdk\n+    $ git remote add upstream https:\/\/github.com\/openjdk\/jdk.git\n+\n+In the example above Duke cloned his personal fork of the JDK mainline repository using SSH. You should of course use your own GitHub username instead. Then, by adding a new *remote* named 'upstream', the clone is associated with [openjdk\/jdk](https:\/\/github.com\/openjdk\/jdk). Doing this will allow the tooling to automatically create a PR on [openjdk\/jdk](https:\/\/github.com\/openjdk\/jdk) whenever a change is pushed to the personal fork. The way that works is that once the change has been pushed to the private fork, and you navigate to the [openjdk\/jdk](https:\/\/github.com\/openjdk\/jdk) repository on GitHub, there will be a message saying that you just pushed a change and asking if you want to create a PR.\n+\n+The recommendation is to always create a new branch for any change you intend to implement. By doing that you can easily work on many different changes in parallel in the same code repository. Unless you know what you are doing, the recommendation is also to always base your new branch on the `master` branch.\n+\n+    $ git checkout -b JDK-8272373 master\n+\n+Here we create a new branch called `JDK-8272373` based on the `master` branch and set the repository up to work in that new branch.\n+\n+Starting from Git version 2.23 there's also `git switch` that can be used instead of `git checkout`.\n+\n+    $ git switch -c JDK-8272373 master\n+\n+::: {.box}\n+More information about how to work with git and the dedicated tooling that is available for OpenJDK can be found in the [Project Skara Documentation](https:\/\/wiki.openjdk.java.net\/display\/SKARA). If you're new to git you can also read more about how to work with it in one of the many fine git tutorials available on the Internet. For instance the [Pro Git book](https:\/\/git-scm.com\/book\/en\/v2). This guide doesn't aspire to become another git guide.\n+:::\n+\n+## Generating an SSH key\n+\n+For security reasons you should always create new keys and use different keys with each repository you clone. The `ssh-keygen` command generates an SSH key. The `-t` option determines which type of key to create. `ed25519` is recommended. `-C` is used to add a comment in the key file, to help you remember which key it is. While it’s possible to use SSH without a passphrase, this is **strongly discouraged**. Empty or insecure passphrases may be reset using `ssh-keygen -p`; this doesn’t change the keys.\n+\n+    $ ssh-keygen -t ed25519 -C openjdk-jdk -f ~\/.ssh\/openjdk-jdk\n+    Generating public\/private ed25519 key pair.\n+    Enter passphrase (empty for no passphrase):\n+    Enter same passphrase again:\n+    Your identification has been saved in \/Users\/duke\/.ssh\/openjdk-jdk.\n+    Your public key has been saved in \/Users\/duke\/.ssh\/openjdk-jdk.pub.\n+    The key fingerprint is:\n+    SHA256:WS4jCQMtat75ZEue+so+Lgj7V\/sdMtj1FTNkfNsCfHA openjdk-jdk\n+    The key's randomart image is:\n+    +--[ED25519 256]--+\n+    |  ..       ..oE  |\n+    |  ...       o+o .|\n+    | . .o     .  o+.o|\n+    |..   o . +    .=.|\n+    |o . . o S o   .. |\n+    |.. o +.+ + . .   |\n+    |o.  *.+.+ . .    |\n+    |o....=.  + .     |\n+    | .=B=. .. .      |\n+    +----[SHA256]-----+\n+\n+`~\/.ssh\/openjdk-jdk` is a text file containing your private ssh key. There's a corresponding public key in `~\/.ssh\/openjdk-jdk.pub` (as detailed in the example above). You should **never** share your private key. The *public* key on the other hand should be uploaded to GitHub. Follow the steps below to do that.\n+\n+* Go to the GitHub settings for your account by choosing \"Settings\" in the menu by your avatar in the upper right corner\n+* Go to \"SSH and GPG keys\"\n+* Click \"New SSH key\"\n+* Title \"OpenJDK\" (or something else appropriate)\n+* Paste the content of `~\/.ssh\/openjdk-jdk.pub` into the text field\n+  * To get the content of the file you can for instance use `cat ~\/.ssh\/openjdk-jdk.pub`\n+  * It will look something like this: `ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIO8+egiIgWV+tE7LVVJmlR7WS2Lr3Fj7dXVo9HiasD6T openjdk-jdk`\n+* Click \"Add SSH key\"\n+\n+Now you are ready to clone your [openjdk\/jdk](https:\/\/github.com\/openjdk\/jdk) fork using SSH.\n+\n@@ -994,1 +1069,0 @@\n-* [openjdk\/jdk GitHub project](https:\/\/github.com\/openjdk\/jdk)\n@@ -1002,1 +1076,1 @@\n-The log below shows the steps taken to download and build the JDK source code from the mainline JDK development GIT repository. The configure script will tell you what additional packages you need. In this particular case several packages were needed since this build was performed on a clean Ubuntu installation. The configure script was run several times to get all the dependencies, but only the commands actually needed to get the JDK built are included in the log.\n+The examples below show the steps taken to build the JDK source code. Please see [Cloning the JDK](#cloning-the-jdk) for information on how to download it. These examples were written in the JDK 17 development time frame which is why the boot JDK used here is JDK 16. Note that the download links used here point to JDK 16 bundles. To build JDK N, use JDK N-1 as the boot JDK.\n@@ -1004,1 +1078,1 @@\n-This example was written in the JDK 17 development time frame which is why the boot JDK used here is JDK 16. To build JDK N, use JDK N-1 as the boot JDK. Note that the download link used here points to a Linux x64 JDK 16.\n+The configure script will tell you what additional packages you need. In this first example several packages were needed since this build was performed on a clean Ubuntu installation. The configure script was run several times to get all the dependencies, but only the commands actually needed to get the JDK built are included in the log. This is just an example log, don't copy the `apt-get install` line. Instead run `sh .\/configure` to see what packages you actually need on your system.\n@@ -1006,3 +1080,0 @@\n-This is just an example log, don't copy the `apt-get install` line. Instead run `sh .\/configure` once you have the boot JDK installed to see what packages you actually need on your system.\n-\n-    $ git clone https:\/\/github.com\/openjdk\/jdk.git\n@@ -1016,1 +1087,12 @@\n-In this case the built JDK can be found in `build\/linux-x86_64-server-release\/jdk`. The exact path depends on your build platform and selected configuration.\n+The built JDK can be found in `build\/linux-x86_64-server-release\/jdk`. The exact path depends on your build platform and selected configuration.\n+\n+The second example is from a clean (newly installed) Mac running MacOS Big Sur. Please note that in this case there are some steps taken outside of the terminal. First XCode and the XCode command line tools must be installed. It could be that the most recent version of XCode that you get from App Store is too new to have been properly tested with the JDK build. See [the JDK build instructions](https:\/\/github.com\/openjdk\/jdk\/blob\/master\/doc\/building.md#apple-xcode) for supported versions and more details in case you need to install an older version of XCode.\n+In this example [Mac Ports](https:\/\/www.macports.org) is used to install `autoconf`. `autoconf` can also be installed using [Homebrew](https:\/\/brew.sh) and surely through other sources as well.\n+\n+    $ curl https:\/\/download.java.net\/java\/GA\/jdk16.0.1\/7147401fd7354114ac51ef3e1328291f\/9\/GPL\/openjdk-16.0.1_osx-x64_bin.tar.gz --output openjdk-16.0.1_osx-x64_bin.tar.gz\n+    $ tar xzf openjdk-16.0.1_osx-x64_bin.tar.gz\n+    $ sudo port install autoconf\n+    $ sh .\/configure --with-boot-jdk=$HOME\/jdk-16.0.1.jdk\/Contents\/Home\n+    $ make images\n+\n+In this case the built JDK can be found in `build\/macosx-x86_64-server-release\/jdk`.\n@@ -1293,1 +1375,1 @@\n- *\n+ *\/\n@@ -1440,73 +1522,0 @@\n-#### Generating an SSH Key\n-\n-All pushes require an ssh key which must be installed on the Mercurial server. The `ssh-keygen` command generates an ssh key. The `-b` option overrides the default number of bits for the key. Allow a few minutes to generate a 4096 bit key; a key of at least 2048 bits is recommended. While it's possible to use ssh without a passphrase, this is **strongly** discouraged. Empty or insecure passphrases may be reset using `ssh-keygen -p`; this doesn't change the keys.\n-\n-    $ ssh-keygen -t rsa -b 4096\n-    Enter file in which to save the key(\/u\/iris\/.ssh\/id_rsa):\n-    Generating public\/private rsa key pair.\n-    Enter passphrase(empty for no passphrase):\n-    Enter same passphrase again:\n-    Your identification has been saved in \/u\/iris\/.ssh\/id_rsa.\n-    Your public key has been saved in \/u\/iris\/.ssh\/id_rsa.pub.\n-    The key fingerprint is:\n-    md5 4096 c2:b7:00:e6:4b:da:ea:ec:32:30:f5:bd:12:26:04:83 iris@duke\n-    The key's randomart image is:\n-    +--[ RSA 4096]----+\n-    |    E.=          |\n-    |     . *         |\n-    |      o .   .    |\n-    |         + o     |\n-    |        S + .    |\n-    |       .   + .   |\n-    |        + + +..  |\n-    |       * . oo+.  |\n-    |      o . .o..   |\n-    +-----------------+\n-\n-The `~\/.ssh\/id_rsa.pub` is a text file containing the public ssh key. This file should be mailed as an attachment along with the JDK username to [keys(at)openjdk.java.net](mailto:keys-at-openjdk.java.net). An administrator will install your key on the server and notify you on completion. This process may take a couple of days.\n-\n-> ---\n-> Users behind a SOCKS firewall can add a directive to the `~\/.ssh\/config` file to connect to the OpenJDK Mercurial server:\n->\n->     Host *.openjdk.java.net\n->     ProxyCommand \/usr\/lib\/ssh\/ssh-socks5-proxy-connect -h [socks_proxy_address] %h %p\n->\n-> See the `ssh-socks5-proxy-connect` man page and `ssh-config` man page for more information. Other systems may require proxy access via other programs. Some Linux distributions provide the `corkscrew` package which provides ssh access through HTTP proxies.\n->\n-> **It's recommended that all users check with their network administrators before installing any kind of TCP forwarding tool on their network. Many corporations and institutions have strict security policies in this area.**\n-\n-> ---\n-\n-#### SSH Shortcuts\n-\n-The following section provides some tips for improving the usability of ssh-related operations.\n-\n-* _Using SSH in multiple shells_\n-\n-  To avoid having to constantly type in the passphrase, use the ssh-agent on your local client to cache your pashphrase:\n-\n-      $ eval `ssh-agent`\n-      Agent pid 17450\n-      $ ssh-add\n-      Enter passphrase for \/u\/iris\/.ssh\/id_rsa:\n-      Identity added: \/u\/iris\/.ssh\/id_rsa(\/u\/iris\/.ssh\/id_rsa)\n-\n-  The same ssh-agent process can be shared with multiple shells. There are various ways to do this. Bash users can accomplish this with the following code in `.bashrc`:\n-\n-      if [ \"$PS1\" -a -d $HOME\/.ssh ]; then\n-        if [ \"x$SSH_AUTH_SOCK\" = x ]; then\n-          eval `ssh-agent | grep -v 'echo Agent pid'`\n-          ssh-add\n-          trap \"echo Killing SSH agent $SSH_AGENT_PID; kill $SSH_AGENT_PID\" 0\n-        fi\n-      fi\n-\n-  For secure operation, only start an ssh-agent when needed and kill it off when the shell completes. Test this by running `ssh 'hostname' echo hello` multiple times.\n-\n-* _Logging in without a password_\n-\n-  To avoid needing to constantly type in the password, add the public key to the list of ssh authorized keys.\n-\n-      $ cat ~\/.ssh\/id_rsa.pub >> ~\/.ssh\/authorized_keys\n-      $ chmod 600 ~\/.ssh\/authorized_keys\n-\n","filename":"src\/index.md","additions":91,"deletions":82,"binary":false,"changes":173,"status":"modified"}]}