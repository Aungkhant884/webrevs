{"files":[{"patch":"@@ -26,1 +26,1 @@\n-OpenJDK consists of a number of [Groups](https:\/\/openjdk.java.net\/groups\/). Members of a group collaborate on an area of mutual interest. The right hand side bar on the [OpenJDK website](https:\/\/openjdk.java.net\/) has a list of all groups in OpenJDK. If you're interested in a specific area, this is where you would start your OpenJDK experience. Look at the group's information and wiki pages, and see what projects they sponsor on the [Census page](https:\/\/openjdk.java.net\/census).\n+OpenJDK consists of a number of [Groups](https:\/\/openjdk.java.net\/groups\/). Members of a group collaborate on an area of mutual interest. The right hand side bar on the [OpenJDK website](https:\/\/openjdk.java.net\/) has a list of all groups in OpenJDK. If you're interested in a specific area, this is where you would start your OpenJDK experience. Look at the group's information and wiki pages, and see what projects they sponsor on the [Census page](https:\/\/openjdk.java.net\/census). The [Census](https:\/\/openjdk.java.net\/census) shows the structure of the OpenJDK Community.\n@@ -95,1 +95,1 @@\n-When you sign the OCA, please make sure that you specify your GitHub user name in the `Username` field of the OCA. If you try to create a PR before you have signed the OCA, or if you didn't specify your GitHub user name, you'll get instructions telling you to do so, and the PR won't be published until this is done. OCA registration is a manual process. Please allow for up to several days to have your OCA application processed, even though it's normally processed swiftly.\n+When you sign the OCA, please make sure that you specify your GitHub user name in the `Username` field of the OCA. If you try to create a PR before you have signed the OCA, or if you didn't specify your GitHub user name, you'll get instructions telling you to do so, and the PR won't be published until this is done. OCA registration is a manual process. Please allow for up to several days to have your OCA application processed, even though it's normally processed swiftly. An alphabetical list of all of the assigned OpenJDK usernames may be found on the [OpenJDK people](https:\/\/db.openjdk.java.net\/people) list.\n@@ -189,168 +189,0 @@\n-# Repositories\n-\n-This section describes the OpenJDK repository terminology and naming scheme. It also includes minimal instructions to acquire source from the OpenJDK repository, [`https:\/\/hg.openjdk.java.net\/`](https:\/\/hg.openjdk.java.net\/).\n-\n-> ---\n-> Note that source may be available from other locations, for example `src.zip` from a full JDK distribution. However, OpenJDK contributions must use source from the [OpenJDK Mercurial repository](https:\/\/hg.openjdk.java.net\/) since other source distributions may contain older code or code which differs due to licensing.\n-\n-> ---\n-\n-Operations which are performed repeatedly, such as creating changesets, merging, and pushing are described in [Producing a Changeset](#producing-a-changeset).\n-\n-* [Terminology and Naming Scheme](#terminology-and-naming-scheme) defines the nomenclature used by OpenJDK.\n-* [Installing and Configuring Mercurial](#installing-and-configuring) enumerates the required software, provides links for download, and describes basic installation and configuration.\n-* [Cloning](#clone) covers the procedure for obtaining private copies of source repositories.\n-\n-This document assumes familiarity with the first two chapters of the free on-line book [Mercurial: The Definitive Guide](http:\/\/hgbook.red-bean.com).\n-\n-## Terminology and Naming Scheme\n-\n-The OpenJDK code base for all [Projects](https:\/\/openjdk.java.net\/bylaws#project) is stored in Mercurial repositories which contain the source files and their change history. Some Projects may choose to organize their code into multiple, possibly related, Mercurial repositories. For instance, [JDK 9](https:\/\/openjdk.java.net\/projects\/jdk9) uses a forest of multiple related repositories which contain components of the entire JDK. Projects which are based on the JDK, such as [IcedTea](https:\/\/openjdk.java.net\/projects\/icedtea) and [Jigsaw](https:\/\/openjdk.java.net\/projects\/jigsaw) also use this model. In contrast, [Code Tools](https:\/\/openjdk.java.net\/projects\/code-tools) uses an unrelated repository for each tool and [Graal](https:\/\/openjdk.java.net\/projects\/graal) uses only a single repository. Regardless of how a Project has chosen to store their code, each [Contributor](https:\/\/openjdk.java.net\/bylaws#contributor) clones the repository associated with the code they are modifying.\n-\n-> ---\n-> Consult the Project's documentation or [mailing list](https:\/\/mail.openjdk.java.net) to determine the appropriate repository, development conventions, and helpful tools.\n-\n-> ---\n-\n-This is the typical development model:\n-\n-::: {style=\"text-align:center;\"}\n-~~~{.mermaid caption=\"Diagram of server repos and user's clone\" format=svg theme=neutral}\n-graph TD\n-    subgraph hg.openjdk.java.net\n-        origin(jdk9\/dev)\n-    end\n-    origin --> |clone| local(9dev)\n-    local --> |push| origin\n-~~~\n-:::\n-\n-A Contributor creates a _clone_ (a local copy called \"9dev\") of a read\/write repository (\"jdk9\/dev\") which resides on the OpenJDK Mercurial server. They work on their change in the clone and locally _commit_ a changeset. After the new changeset(s) are verified, they're either _pushed_ directly from the clone or _exported_ and delivered to a [Committer](https:\/\/openjdk.java.net\/bylaws#committer) who can perform the push into the server repository for all to see.\n-\n-> ---\n-> The use of _gate repositories_ was eliminated when the Mercurial servers were upgraded in March 2014.\n-\n-> ---\n-\n-The repositories use the following naming scheme:\n-\n-> `<project>\/<component_path>`\n-\n-where\n-\n-> ------------------  ----  ----------------------------------------------------\n-> _project_            ::   the short name of an OpenJDK [Project](https:\/\/openjdk.java.net\/bylaws#project) such as \"jdk9\", \"openjfx\", or \"sumatra\"\n-> _component_path_     ::   the path to a repository containing the code base as designated by the [Project Lead](https:\/\/openjdk.java.net\/bylaws#project-lead).\n-> ------------------  ----  ----------------------------------------------------\n-\n-## Installing and Configuring Mercurial\n-\n-Mercurial is a free, cross-platform, distributed source management tool. Source bundles and binary packages for Mercurial are available at [https:\/\/www.selenic.com\/mercurial\/wiki\/index.cgi](https:\/\/www.selenic.com\/mercurial\/wiki\/index.cgi\/Mercurial). The OpenJDK repositories recommend installation of Mercurial 2.6.3 (or later). A Mercurial installation is sufficient to clone a repository. Contributors who wish to submit changes will need some additional configuration as described below.\n-\n-Some Projects may recommend additional tools or scripts that help with repository manipulation and code development. For instance, in JDK 9, the utility script `common\/bin\/hgforest.sh` may be used to apply commands to all the repositories in the [forest](#forest). Popular extensions for OpenJDK developers include [jcheck](https:\/\/openjdk.java.net\/projects\/code-tools\/jcheck\/), [trees](https:\/\/openjdk.java.net\/projects\/code-tools\/trees\/), and [Mercurial Queues](http:\/\/hgbook.red-bean.com\/read\/managing-change-with-mercurial-queues.html) (mq). Note that `trees` is enabled on the OpenJDK Mercurial server.\n-\n-Create and edit the `~\/.hgrc` file to minimally contain the following entry:\n-\n-    [ui]\n-    username = <openjdk_username>\n-\n-_openjdk\\_username_ is a plain lowercase, alphanumeric token (not an e-mail address) with twelve characters or less. The first character should be alphabetic. This username will be publicly visible in all Mercurial changeset logs. It will be used to verify that the changeset author is at least an [Author](https:\/\/openjdk.java.net\/bylaws#author) for the Project and that the person pushing the changeset is at least a [Committer](https:\/\/openjdk.java.net\/bylaws#committer). It's recommended that the _openjdk\\_username_ be somehow related to the Author's full name, such as the first character of the Author's first name followed by the Author's last name. Refer to the [Becoming an Author](https:\/\/openjdk.java.net\/projects\/index.html#project-author) section of the [Project](https:\/\/openjdk.java.net\/projects\/index.html) page for additional information.\n-\n-An alphabetical list of all of the assigned _openjdk\\_usernames_ may be found on the [OpenJDK people](https:\/\/db.openjdk.java.net\/people) list. The [Census](https:\/\/openjdk.java.net\/census) shows the structure of the OpenJDK Community.\n-\n-#### Verifying the Configuration\n-\n-After installing and configuring Mercurial, validate the configuration using the following steps.\n-\n-#. Verify that Mercurial is version 2.6.3 (or newer).\n-\n-       $ hg version\n-       Mercurial Distributed SCM (version 2.9)\n-       (see http:\/\/mercurial.selenic.com for more information)\n-\n-       Copyright (C) 2005-2014 Matt Mackall and others\n-       This is free software; see the source for copying conditions. There is NO\n-       warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n-\n-#. Verify that the list of enabled extensions includes fetch and mq.\n-\n-       $ hg help\n-\n-#. Verify that the `~\/.hgrc` configuration looks correct. Minimally it should contain the following entries:\n-\n-       $ hg showconfig\n-       ui.username=iris\n-\n-At this point, it should be possible to start retrieving source from the repositories.\n-\n-## Cloning\n-\n-With Mercurial each developer works with a clone of the repository which is a snapshot of the files at the time the clone was taken. To update the clone, see [Producing a Changeset](#producing-a-changeset).\n-\n-#### ... a Sandbox Repository {#cloneSandbox}\n-\n-In addition to the Project repositories, there are some test repositories that may be used to run test commands against Mercurial without fear of causing damage to development source. Use them freely but with discretion; content in them may be deleted at any time.\n-\n-    $ mkdir sandbox; cd sandbox\n-    $ hg clone http:\/\/hg.openjdk.java.net\/sandbox\/box\n-    destination directory: box\n-    requesting all changes\n-    adding changesets\n-    adding manifests\n-    adding file changes\n-    added 23 changesets with 24 changes to 5 files\n-    4 files updated, 0 files merged, 0 files removed, 0 files unresolved\n-    $ du -s box\n-    46      box\n-\n-#### ... a Forest {#cloneForest}\n-\n-If a Project uses a forest, It's strongly recommended for developers to clone an entire forest, rather than a single repository. This is the only means to ensure consistency in builds. The following examples illustrate two alternatives for cloning the entire _jdk9\/dev_ forest into the directory `9dev`.\n-\n-#. To clone the forest using the [trees](https:\/\/openjdk.java.net\/projects\/code-tools\/trees\/) extension just use `tclone`:\n-\n-       $ hg tclone http:\/\/hg.openjdk.java.net\/jdk9\/dev 9dev\n-\n-#. To clone the forest using `get_source.sh`, first clone the main tree:\n-\n-       $ hg clone http:\/\/hg.openjdk.java.net\/jdk9\/dev 9dev\n-       requesting all changes\n-       adding changesets\n-       adding manifests\n-       adding file changes\n-       added 997 changesets with 1477 changes to 138 files\n-       updating to branch default\n-       82 files updated, 0 files merged, 0 files removed, 0 files unresolved\n-\n-   Then clone the repositories in the forest:\n-\n-       $ cd 9dev\n-       $ sh .\/get_source.sh\n-\n-Regardless of how the forest was cloned, this is the resulting populated forest.\n-\n-    $ du -s\n-    934532  .\n-    $ ls\n-    ASSEMBLY_EXCEPTION  hotspot    LICENSE   README-builds.html\n-    common              jaxp       make      test\n-    configure           jaxws      Makefile  THIRD_PARTY_README\n-    corba               jdk        nashorn\n-    get_source.sh       langtools  README\n-\n-#### ... a Single Repository {#cloneSingle}\n-\n-If the source for the Project is contained within a single repository or reading a limited portion of the source is the only goal, it's possible to clone a single repository (even if it's part of a forest). For instance, this example shows how to clone the `langtools` repository from _jdk9\/dev_ into the default destination directory.\n-\n-    $ hg clone http:\/\/hg.openjdk.java.net\/jdk9\/dev\/langtools\n-    destination directory: langtools\n-    requesting all changes\n-    adding changesets\n-    adding manifests\n-    adding file changes\n-    added 2289 changesets with 21194 changes to 7004 files\n-    updating to branch default\n-    6212 files updated, 0 files merged, 0 files removed, 0 files unresolved\n-    $ du -s langtools\n-    84396   langtools\n-\n@@ -676,1 +508,1 @@\n-      [~~**`hs-tier`**~~~~`[1-8]`~~]{#hs-tier}\n+      [~~**`hs-tier`**`[1-8]`~~]{#hs-tier}\n@@ -1050,0 +882,97 @@\n+# Cloning the JDK\n+\n+::: {.box}\n+[Quick Links]{.boxheader}\n+\n+* [OpenJDK Mainline GitHub project](https:\/\/github.com\/openjdk\/jdk)\n+* [Skara Documentation](https:\/\/wiki.openjdk.java.net\/display\/SKARA)\n+:::\n+\n+The complete source code for the JDK is hosted at [GitHub](https:\/\/github.com). You can browse the code directly in the [openjdk\/jdk repository](https:\/\/github.com\/openjdk\/jdk), or download the code for offline browsing, editing, and building using `git clone`.\n+\n+    $ git clone https:\/\/github.com\/openjdk\/jdk.git\n+\n+`openjdk\/jdk` is the mainline JDK development repository where the next major release of the JDK is being developed. Other projects have their own repositories on GitHub.\n+\n+> ---\n+>\n+> Note that source may be available from other locations, for example `src.zip` from a full JDK distribution. However, OpenJDK contributions must use source from the appropriate OpenJDK GitHub repository since other source distributions may contain older code or code which differs due to licensing. Consult the Project's documentation or [mailing list](#mailing-lists) to determine the appropriate repository, development conventions, and helpful tools.\n+>\n+> ---\n+\n+If you intend to contribute patches, you should first *fork* the repository on GitHub and clone your own *personal fork* as shown below. To fork a project on GitHub, go to the GitHub project page and click the 'Fork' button in the upper right corner, then follow the on screen instructions.\n+\n+This is the typical development model:\n+\n+::: {style=\"text-align:center;\"}\n+~~~{.mermaid caption=\"Diagram of upstream repos and user's clone\" format=svg theme=neutral}\n+graph TD\n+  subgraph GitHub\n+    upstream(openjdk\/jdk)\n+    fork(OpenDuke\/jdk)\n+  end\n+  upstream --> |fork| fork\n+  fork --> |clone| local(local)\n+  local --> |push| fork\n+  fork --> |PR| upstream\n+~~~\n+:::\n+\n+Pushes to your personal fork can be made either using HTTP or SSH. These examples assume you have an SSH key installed on GitHub. If this is the first time you clone your personal fork of an OpenJDK repository you may want to create an SSH key to use with it. See [Generating an SSH key] below. Once you have your personal fork and an SSH key to go with it, go ahead and clone.\n+\n+    $ git clone git@github.com:OpenDuke\/jdk.git\n+    $ cd jdk\n+    $ git remote add upstream https:\/\/github.com\/openjdk\/jdk.git\n+\n+In the example above Duke cloned his personal fork of the JDK mainline repository using SSH. You should of course use your own GitHub username instead. Then, by adding a new *remote* named 'upstream', the clone is associated with [openjdk\/jdk](https:\/\/github.com\/openjdk\/jdk). Doing this will allow the tooling to automatically create a PR on [openjdk\/jdk](https:\/\/github.com\/openjdk\/jdk) whenever a change is pushed to the personal fork. The way that works is that once the change has been pushed to the personal fork, and you navigate to the [openjdk\/jdk](https:\/\/github.com\/openjdk\/jdk) repository on GitHub, there will be a message saying that you just pushed a change and asking if you want to create a PR.\n+\n+The recommendation is to always create a new branch for any change you intend to implement. By doing that you can easily work on many different changes in parallel in the same code repository. Unless you know what you are doing, the recommendation is also to always base your new branch on the `master` branch.\n+\n+    $ git switch -c JDK-8272373 master\n+\n+Here we create a new branch called `JDK-8272373` based on the `master` branch and set the repository up to work in that new branch.\n+\n+`git switch` was introduced in Git version 2.23. For earlier versions of Git `git checkout` can be used instead. However it is always recommended to use the latest versions of all your tools when possible.\n+\n+::: {.box}\n+More information about how to work with git and the dedicated tooling that is available for OpenJDK can be found in the [Project Skara Documentation](https:\/\/wiki.openjdk.java.net\/display\/SKARA). If you're new to git you can also read more about how to work with it in one of the many fine git tutorials available on the Internet. For instance the [Pro Git book](https:\/\/git-scm.com\/book\/en\/v2). This guide doesn't aspire to become another git guide.\n+:::\n+\n+## Generating an SSH key\n+\n+For security reasons you should always create new keys and use different keys with each repository you clone. The `ssh-keygen` command generates an SSH key. The `-t` option determines which type of key to create. `ed25519` is recommended. `-C` is used to add a comment in the key file, to help you remember which key it is. While it’s possible to use SSH without a passphrase, this is **strongly discouraged**. Empty or insecure passphrases may be reset using `ssh-keygen -p`; this doesn’t change the keys.\n+\n+    $ ssh-keygen -t ed25519 -C openjdk-jdk -f ~\/.ssh\/openjdk-jdk\n+    Generating public\/private ed25519 key pair.\n+    Enter passphrase (empty for no passphrase):\n+    Enter same passphrase again:\n+    Your identification has been saved in \/Users\/duke\/.ssh\/openjdk-jdk.\n+    Your public key has been saved in \/Users\/duke\/.ssh\/openjdk-jdk.pub.\n+    The key fingerprint is:\n+    SHA256:WS4jCQMtat75ZEue+so+Lgj7V\/sdMtj1FTNkfNsCfHA openjdk-jdk\n+    The key's randomart image is:\n+    +--[ED25519 256]--+\n+    |  ..       ..oE  |\n+    |  ...       o+o .|\n+    | . .o     .  o+.o|\n+    |..   o . +    .=.|\n+    |o . . o S o   .. |\n+    |.. o +.+ + . .   |\n+    |o.  *.+.+ . .    |\n+    |o....=.  + .     |\n+    | .=B=. .. .      |\n+    +----[SHA256]-----+\n+\n+`~\/.ssh\/openjdk-jdk` is a text file containing your private ssh key. There's a corresponding public key in `~\/.ssh\/openjdk-jdk.pub` (as detailed in the example above). You should **never** share your private key. The *public* key on the other hand should be uploaded to GitHub. Follow the steps below to do that.\n+\n+* Go to the GitHub settings for your account by choosing \"Settings\" in the menu by your avatar in the upper right corner\n+* Go to \"SSH and GPG keys\"\n+* Click \"New SSH key\"\n+* Title \"OpenJDK\" (or something else appropriate)\n+* Paste the content of `~\/.ssh\/openjdk-jdk.pub` into the text field\n+  * To get the content of the file you can for instance use `cat ~\/.ssh\/openjdk-jdk.pub`\n+  * It will look something like this: `ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIO8+egiIgWV+tE7LVVJmlR7WS2Lr3Fj7dXVo9HiasD6T openjdk-jdk`\n+* Click \"Add SSH key\"\n+\n+Now you are ready to clone your [openjdk\/jdk](https:\/\/github.com\/openjdk\/jdk) fork using SSH.\n+\n@@ -1064,1 +993,1 @@\n-The log below shows the steps taken to download and build the JDK source code from the mainline JDK development GIT repository. The configure script will tell you what additional packages you need. In this particular case several packages were needed since this build was performed on a clean Ubuntu installation. The configure script was run several times to get all the dependencies, but only the commands actually needed to get the JDK built are included in the log.\n+The examples below show the steps taken to build the JDK source code. Please see [Cloning the JDK](#cloning-the-jdk) for information on how to download it. These examples were written in the JDK 17 development time frame which is why the boot JDK used here is JDK 16. Note that the download links used here point to JDK 16 bundles. To build JDK N, use JDK N-1 as the boot JDK.\n@@ -1066,1 +995,1 @@\n-This example was written in the JDK 17 development time frame which is why the boot JDK used here is JDK 16. To build JDK N, use JDK N-1 as the boot JDK. Note that the download link used here points to a Linux x64 JDK 16.\n+The configure script will tell you what additional packages you need. In this first example several packages were needed since this build was performed on a clean Ubuntu installation. The configure script was run several times to get all the dependencies, but only the commands actually needed to get the JDK built are included in the log. This is just an example log, don't copy the `apt-get install` line. Instead run `sh .\/configure` to see what packages you actually need on your system.\n@@ -1068,3 +997,0 @@\n-This is just an example log, don't copy the `apt-get install` line. Instead run `sh .\/configure` once you have the boot JDK installed to see what packages you actually need on your system.\n-\n-    $ git clone https:\/\/github.com\/openjdk\/jdk.git\n@@ -1078,1 +1004,12 @@\n-In this case the built JDK can be found in `build\/linux-x86_64-server-release\/jdk`. The exact path depends on your build platform and selected configuration.\n+The built JDK can be found in `build\/linux-x86_64-server-release\/jdk`. The exact path depends on your build platform and selected configuration.\n+\n+The second example is from a clean (newly installed) Mac running MacOS Big Sur. Please note that in this case there are some steps taken outside of the terminal. First XCode and the XCode command line tools must be installed. It could be that the most recent version of XCode that you get from App Store is too new to have been properly tested with the JDK build. See [the JDK build instructions](https:\/\/github.com\/openjdk\/jdk\/blob\/master\/doc\/building.md#apple-xcode) for supported versions and more details in case you need to install an older version of XCode.\n+In this example [Mac Ports](https:\/\/www.macports.org) is used to install `autoconf`. `autoconf` can also be installed using [Homebrew](https:\/\/brew.sh) and surely through other sources as well.\n+\n+    $ curl https:\/\/download.java.net\/java\/GA\/jdk16.0.1\/7147401fd7354114ac51ef3e1328291f\/9\/GPL\/openjdk-16.0.1_osx-x64_bin.tar.gz --output openjdk-16.0.1_osx-x64_bin.tar.gz\n+    $ tar xzf openjdk-16.0.1_osx-x64_bin.tar.gz\n+    $ sudo port install autoconf\n+    $ sh .\/configure --with-boot-jdk=$HOME\/jdk-16.0.1.jdk\/Contents\/Home\n+    $ make images\n+\n+In this case the built JDK can be found in `build\/macosx-x86_64-server-release\/jdk`.\n@@ -1355,1 +1292,1 @@\n- *\n+ *\/\n@@ -1373,1 +1310,1 @@\n-# Producing a Changeset\n+# Working with the legacy Mercurial servers\n@@ -1375,1 +1312,2 @@\n-This section is confined to the actual Mercurial mechanics required to produce a changeset:\n+::: {.box}\n+[Quick Links]{.boxheader}\n@@ -1377,4 +1315,3 @@\n-* [Setting a JDK User Name](#setting-a-jdk-user-name) reminds the user to confirm proper configuration.\n-* [Creating](#creating) includes instructions for the required format of a changeset comment and describes how to commit files to a changeset.\n-* [Merging](#merging) describes how to pull changes from a parent forest or clone and incorporate the changes into the current working set of files.\n-* [Pushing](#pushing) covers configuring ssh, setting the `default-push` path, and pushing changesets.\n+* [Mercurial: The Definitive Guide](http:\/\/hgbook.red-bean.com\/)\n+* [OpenJDK Mercurial Server](https:\/\/hg.openjdk.java.net\/)\n+:::\n@@ -1382,1 +1319,1 @@\n-## Setting a JDK User Name\n+After the initial release of the JDK source code into OpenJDK in 2007 the OpenJDK project moved from TeamWare to using Mercurial. Starting in 2019 the source revision control has been moved to Git and GitHub. Even though most large projects have moved to Git by now, some still use the Mercurial servers. To access these projects some additional setup is required.\n@@ -1384,1 +1321,5 @@\n-Ensure that _ui.username_ has a value in the `~\/.hgrc` file as described in [Verifying the Configuration](#verifying-the-configuration).\n+> ---\n+>\n+>  There used to be a sandbox repository that could be used for testing purposes. With the move to Git this has been replaced by GitHub Actions.\n+>\n+> ---\n@@ -1386,1 +1327,1 @@\n-## Creating\n+This document assumes familiarity with the first two chapters of the free on-line book [Mercurial: The Definitive Guide](http:\/\/hgbook.red-bean.com).\n@@ -1388,1 +1329,22 @@\n-The timing for creating a changeset is important. Creating the changeset long before it gets pushed into the parent repository may require complex merges. If a changeset is created before sufficient review or testing, a rollback may be required and a new changeset may be required to correct previous mistakes. The [mq extension](http:\/\/hgbook.red-bean.com\/hgbookch12.html#x16-26500012) is recommended for managing changes before they become committed to a changeset.\n+## Installing and Configuring Mercurial\n+\n+Source bundles and binary packages for Mercurial are available at [https:\/\/www.selenic.com\/mercurial\/wiki\/index.cgi](https:\/\/www.selenic.com\/mercurial\/wiki\/index.cgi\/Mercurial). The OpenJDK repositories recommend installation of Mercurial 2.6.3 (or later). A Mercurial installation is sufficient to clone a repository. Contributors who wish to submit changes will need some additional configuration as described below.\n+\n+Once Mercurial is installed, create and edit the `~\/.hgrc` file to minimally contain the following entry:\n+\n+    [ui]\n+    username = <openjdk_username>\n+\n+_openjdk\\_username_ is in general the same as your GitHub user name. (See [Contributing to an OpenJDK Project] for more information.) If you don't have a GitHub user name, you choose your OpenJDK user name when you sign the OCA. The user name should be a plain lowercase, alphanumeric token (not an e-mail address) with twelve characters or less. The first character should be alphabetic. This username will be publicly visible in all Mercurial changeset logs. It will be used to verify that the changeset author is at least an [Author](https:\/\/openjdk.java.net\/bylaws#author) for the Project and that the person pushing the changeset is at least a [Committer](https:\/\/openjdk.java.net\/bylaws#committer). It's recommended that the _openjdk\\_username_ be somehow related to the Author's full name, such as the first character of the Author's first name followed by the Author's last name.\n+\n+Some Projects may recommend additional tools or scripts that help with repository manipulation and code development. For instance, in JDK 8u, the utility script `common\/bin\/hgforest.sh` may be used to apply commands to all the repositories in the [forest](#forest). Some useful Mercurial extensions for OpenJDK developers are [jcheck](https:\/\/openjdk.java.net\/projects\/code-tools\/jcheck\/), [trees](https:\/\/openjdk.java.net\/projects\/code-tools\/trees\/), and [Mercurial Queues](http:\/\/hgbook.red-bean.com\/read\/managing-change-with-mercurial-queues.html) (mq). Note that `trees` is enabled on the OpenJDK Mercurial server.\n+\n+### Verifying the Configuration\n+\n+After installing and configuring Mercurial, validate the configuration using the following steps.\n+\n+#. Verify that Mercurial is version 2.6.3 (or newer).\n+\n+       $ hg version\n+       Mercurial Distributed SCM (version 2.9)\n+       (see http:\/\/mercurial.selenic.com for more information)\n@@ -1390,1 +1352,3 @@\n-In the examples below, the script `common\/bin\/hgforest.sh` can be used to apply the Mercurial command to all the repositories in the forest. So when you see _**`hg`**_, if you are dealing with one repository, just use \"`hg`\", if it's a forest, use \"`sh common\/bin\/hgforest.sh`\".\n+       Copyright (C) 2005-2014 Matt Mackall and others\n+       This is free software; see the source for copying conditions. There is NO\n+       warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n@@ -1392,0 +1356,63 @@\n+#. Verify that the list of enabled extensions includes fetch and mq.\n+\n+       $ hg help\n+\n+#. Verify that the `~\/.hgrc` configuration looks correct. Minimally it should contain the following entries:\n+\n+       $ hg showconfig\n+       ui.username=iris\n+\n+At this point, it should be possible to start retrieving source from the repositories.\n+\n+## Cloning a Mercurial Repository\n+\n+Some Projects organized their code into multiple Mercurial repositories. For instance, [JDK 8](https:\/\/openjdk.java.net\/projects\/jdk8) uses a forest of multiple related repositories which contain components of the entire JDK. If a Project uses a forest, It's strongly recommended for developers to clone an entire forest, rather than a single repository. This is the only means to ensure consistency in builds. The following examples illustrate two alternatives for cloning the entire `jdk8u\/jdk8u-dev` forest into the directory `8u-dev`.\n+\n+#. To clone the forest using the [trees](https:\/\/openjdk.java.net\/projects\/code-tools\/trees\/) extension just use `tclone`:\n+\n+       $ hg tclone http:\/\/hg.openjdk.java.net\/jdk8u\/jdk8u-dev\/ 8u-dev\n+\n+#. To clone the forest using `get_source.sh`, first clone the main tree:\n+\n+       $ hg clone http:\/\/hg.openjdk.java.net\/jdk8u\/jdk8u-dev\/ 8u-dev\n+       requesting all changes\n+       adding changesets\n+       adding manifests\n+       adding file changes\n+       added 997 changesets with 1477 changes to 138 files\n+       updating to branch default\n+       82 files updated, 0 files merged, 0 files removed, 0 files unresolved\n+\n+   Then clone the repositories in the forest:\n+\n+       $ cd 8u-dev\n+       $ sh .\/get_source.sh\n+\n+Regardless of how the forest was cloned, this is the resulting populated forest.\n+\n+    $ ls\n+    ASSEMBLY_EXCEPTION  hotspot    LICENSE   README-builds.html\n+    common              jaxp       make      test\n+    configure           jaxws      Makefile  THIRD_PARTY_README\n+    corba               jdk        nashorn\n+    get_source.sh       langtools  README\n+\n+### Cloning a Single Repository {#cloneSingle}\n+\n+If the source for the Project is contained within a single repository or reading a limited portion of the source is the only goal, it's possible to clone a single repository (even if it's part of a forest). For instance, this example shows how to clone the `langtools` repository from `jdk8u\/jdk8u-dev` into the default destination directory.\n+\n+    $ hg clone http:\/\/hg.openjdk.java.net\/jdk8u\/jdk8u-dev\/langtools\n+    destination directory: langtools\n+    requesting all changes\n+    adding changesets\n+    adding manifests\n+    adding file changes\n+    added 2289 changesets with 21194 changes to 7004 files\n+    updating to branch default\n+    6212 files updated, 0 files merged, 0 files removed, 0 files unresolved\n+\n+## Creating a Mercurial Changeset\n+\n+The timing for creating a changeset is important. Creating the changeset long before it gets pushed into the parent repository may require complex merges. If a changeset is created before sufficient review or testing, a rollback may be required and a new changeset may be required to correct previous mistakes. The [mq extension](http:\/\/hgbook.red-bean.com\/hgbookch12.html#x16-26500012) is recommended for managing changes before they become committed to a changeset.\n+\n+In the examples below, the script `common\/bin\/hgforest.sh` can be used to apply the Mercurial command to all the repositories in the forest. So when you see `hg`, if you are dealing with one repository, just use \"`hg`\", if it's a forest, use \"`sh common\/bin\/hgforest.sh`\".\n@@ -1403,1 +1430,1 @@\n-To see changes made to the repositories use _**`hg`**_ `status`:\n+To see changes made to the repositories use `hg status`:\n@@ -1409,1 +1436,1 @@\n-In this example, the repository was previously cloned as described in [Cloning a Sandbox Repository](#clone). A new file `DukeTubbingSmall.png` was added to a new subdirectory.\n+In this example, a new file `DukeTubbingSmall.png` was added to a new subdirectory.\n@@ -1411,1 +1438,1 @@\n-#### Formatting a Changeset Comment\n+### Formatting a Changeset Comment\n@@ -1426,1 +1453,2 @@\n-The _contributed-by_ line is optional. If present, it's a list of comma-separated email addresses. It should be included only when the author or authors of the change don't have commit rights to the target repository and thus would not otherwise receive acknowledgment.\n+The _contributed-by_ line is optional. If present, it's a list of comma-separated email addresses. It should be included only when the author of the\n+change doesn't have commit rights to the target repository and thus would not otherwise receive acknowledgment, or when there are multiple authors.\n@@ -1439,1 +1467,1 @@\n-The required format of the comments will be enforced whenever the changeset is pushed into the JDK master or team repository forests. Other Projects may copy these conventions, adopt some other conventions, or have no conventions, depending upon their goals.\n+The required format of the comments will be enforced whenever the changeset is pushed into the JDK forests. Other Projects may copy these conventions, adopt some other conventions, or have no conventions, depending upon their goals.\n@@ -1441,1 +1469,1 @@\n-#### Committing a Changeset\n+### Committing a Changeset\n@@ -1460,1 +1488,1 @@\n-## Merging\n+## Merging Mercurial Changesets\n@@ -1466,1 +1494,1 @@\n-Option 1: _**`hg`**_ `pull`\n+Option 1: `hg pull`\n@@ -1468,1 +1496,1 @@\n-> One way to merge the parent repository with the working set of files is to use _**`hg`**_ `pull` all by itself. This option allows merging off-line or at a later time.\n+> One way to merge the parent repository with the working set of files is to use `hg pull` all by itself. This option allows merging off-line or at a later time.\n@@ -1472,1 +1500,1 @@\n->     pulling from http:\/\/hg.openjdk.java.net\/sandbox\/box\n+>     pulling from http:\/\/hg.openjdk.java.net\/jdk8u\/jdk8u-dev\n@@ -1476,1 +1504,1 @@\n-> In Mercurial, pulling changesets will not update or merge into the working set of files. To update the clone, run _**`hg`**_ `update`. If the update reports conflicts, run _**`hg`**_ `merge` to resolve them.\n+> In Mercurial, pulling changesets will not update or merge into the working set of files. To update the clone, run `hg update`. If the update reports conflicts, run `hg merge` to resolve them.\n@@ -1478,1 +1506,1 @@\n-Option 2: _**`hg`**_ `fetch`\n+Option 2: `hg fetch`\n@@ -1480,1 +1508,1 @@\n-> Alternatively, use _**`hg`**_ `fetch` to pull the changes, update the working set files, and create simple merge changesets as necessary. The fetch extension is distributed with Mercurial but needs to be enabled. Edit the `.hgrc` to include the following entries:\n+> Alternatively, use `hg fetch` to pull the changes, update the working set files, and create simple merge changesets as necessary. The fetch extension is distributed with Mercurial but needs to be enabled. Edit the `.hgrc` to include the following entries:\n@@ -1485,1 +1513,1 @@\n-> Once the fetch extension has been enabled, _**`hg`**_ `fetch` may be invoked as follows:\n+> Once the fetch extension has been enabled, `hg fetch` may be invoked as follows:\n@@ -1489,1 +1517,1 @@\n->     pulling from http:\/\/hg.openjdk.java.net\/sandbox\/box\n+>     pulling from http:\/\/hg.openjdk.java.net\/jdk8u\/jdk8u-dev\n@@ -1494,0 +1522,1 @@\n+>\n@@ -1495,1 +1524,1 @@\n-\n+>\n@@ -1498,1 +1527,1 @@\n-## Pushing\n+## Pushing Mercurial Changesets\n@@ -1502,1 +1531,1 @@\n-#### Generating an SSH Key\n+### Get Your SSH key Installed\n@@ -1504,25 +1533,1 @@\n-All pushes require an ssh key which must be installed on the Mercurial server. The `ssh-keygen` command generates an ssh key. The `-b` option overrides the default number of bits for the key. Allow a few minutes to generate a 4096 bit key; a key of at least 2048 bits is recommended. While it's possible to use ssh without a passphrase, this is **strongly** discouraged. Empty or insecure passphrases may be reset using `ssh-keygen -p`; this doesn't change the keys.\n-\n-    $ ssh-keygen -t rsa -b 4096\n-    Enter file in which to save the key(\/u\/iris\/.ssh\/id_rsa):\n-    Generating public\/private rsa key pair.\n-    Enter passphrase(empty for no passphrase):\n-    Enter same passphrase again:\n-    Your identification has been saved in \/u\/iris\/.ssh\/id_rsa.\n-    Your public key has been saved in \/u\/iris\/.ssh\/id_rsa.pub.\n-    The key fingerprint is:\n-    md5 4096 c2:b7:00:e6:4b:da:ea:ec:32:30:f5:bd:12:26:04:83 iris@duke\n-    The key's randomart image is:\n-    +--[ RSA 4096]----+\n-    |    E.=          |\n-    |     . *         |\n-    |      o .   .    |\n-    |         + o     |\n-    |        S + .    |\n-    |       .   + .   |\n-    |        + + +..  |\n-    |       * . oo+.  |\n-    |      o . .o..   |\n-    +-----------------+\n-\n-The `~\/.ssh\/id_rsa.pub` is a text file containing the public ssh key. This file should be mailed as an attachment along with the JDK username to [keys(at)openjdk.java.net](mailto:keys-at-openjdk.java.net). An administrator will install your key on the server and notify you on completion. This process may take a couple of days.\n+First you should create a new SSH key. See [Generating an SSH key] for guidance on how to do that. Your public key (`~\/.ssh\/id_rsa.pub`) should be mailed as an attachment along with your JDK username to [keys(at)openjdk.java.net](mailto:keys-at-openjdk.java.net). An administrator will install your key on the server and notify you on completion. This process may take a couple of days.\n@@ -1531,0 +1536,1 @@\n+>\n@@ -1539,1 +1545,1 @@\n-\n+>\n@@ -1542,38 +1548,1 @@\n-#### SSH Shortcuts\n-\n-The following section provides some tips for improving the usability of ssh-related operations.\n-\n-* _Using SSH in multiple shells_\n-\n-  To avoid having to constantly type in the passphrase, use the ssh-agent on your local client to cache your pashphrase:\n-\n-      $ eval `ssh-agent`\n-      Agent pid 17450\n-      $ ssh-add\n-      Enter passphrase for \/u\/iris\/.ssh\/id_rsa:\n-      Identity added: \/u\/iris\/.ssh\/id_rsa(\/u\/iris\/.ssh\/id_rsa)\n-\n-  The same ssh-agent process can be shared with multiple shells. There are various ways to do this. Bash users can accomplish this with the following code in `.bashrc`:\n-\n-      if [ \"$PS1\" -a -d $HOME\/.ssh ]; then\n-        if [ \"x$SSH_AUTH_SOCK\" = x ]; then\n-          eval `ssh-agent | grep -v 'echo Agent pid'`\n-          ssh-add\n-          trap \"echo Killing SSH agent $SSH_AGENT_PID; kill $SSH_AGENT_PID\" 0\n-        fi\n-      fi\n-\n-  For secure operation, only start an ssh-agent when needed and kill it off when the shell completes. Test this by running `ssh 'hostname' echo hello` multiple times.\n-\n-* _Logging in without a password_\n-\n-  To avoid needing to constantly type in the password, add the public key to the list of ssh authorized keys.\n-\n-      $ cat ~\/.ssh\/id_rsa.pub >> ~\/.ssh\/authorized_keys\n-      $ chmod 600 ~\/.ssh\/authorized_keys\n-\n-#### Setting the `default-push` Path to the Server Repositories\n-\n-<!--\n-#. Option 1: Add default-push path to every <code>.hg\/hgrc<\/code>\n--->\n+### Setting the `default-push` Path to the Server Repositories\n@@ -1587,1 +1556,1 @@\n-        origin(jdk9\/dev)\n+        origin(jdk8u\/jdk8u-dev)\n@@ -1589,1 +1558,1 @@\n-    origin --> |clone| local(9dev)\n+    origin --> |clone| local(8u-dev)\n@@ -1594,1 +1563,1 @@\n-Changesets need to be _pushed_ via ssh to the read\/write repository which resides on the OpenJDK Mercurial server. The easiest way to do this is to have each repository define the \"default-push\" path in every repository's `.hg\/hgrc` file. The `.hg\/hgrc` file in isn't a managed file - it's private to the repository. The following example defines the \"default\" and \"default-push\" paths for clones of the jdk9\/dev team repository.\n+Changesets need to be _pushed_ via ssh to the read\/write repository which resides on the OpenJDK Mercurial server. The easiest way to do this is to have each repository define the \"default-push\" path in every repository's `.hg\/hgrc` file. The `.hg\/hgrc` file isn't a managed file - it's private to the repository. The following example defines the \"default\" and \"default-push\" paths for clones of the `jdk8u\/jdk8u-dev` repository.\n@@ -1597,2 +1566,2 @@\n-    default = http:\/\/hg.openjdk.java.net\/jdk9\/dev\n-    default-push = ssh:\/\/<JDK_username>@hg.openjdk.java.net\/jdk9\/dev\n+    default = http:\/\/hg.openjdk.java.net\/jdk8u\/jdk8u-dev\n+    default-push = ssh:\/\/<JDK_username>@hg.openjdk.java.net\/jdk8u\/jdk8u-dev\n@@ -1625,23 +1594,3 @@\n-<!--\n-#. Option 2: Use the <code>defpath<\/code> ExtensionAnother way to setup the default-push path is to use the Mercurial defpath extension, which is available in \/java\/jdk\/lib\/hgext\/defpath.py. To enable this extension add the following to the <code>~\/hgrc<\/code> file:\n-<blockquote><pre>\n-[extensions]\n-defpath = \/java\/jdk\/lib\/hgext\/defpath.py  # Or the pathname of a local copy\n-<\/pre><\/blockquote>\n-     The defpath extension actually adds two new Mercurial subcommands:\n-    defpath to operate upon a single repository and fdefpath for an entire\n-    forest. hg help defpath or hg help fdefpath will tell you more. For a\n-    freshly cloned open\/closed forest the command you probably want is\n-<blockquote><pre>\n-$ hg fdefpath -dgv\n-<\/pre><\/blockquote>\n-     Be sure to try this with the -n flag first to see if it will do what\n-    you actually expect. If your OpenJDK username differs from your Oracle\n-    username then add -u name to the command line.\n-     The defpath extension defines the default-push path, which is the path\n-    that Mercurial uses by default in push operations.\n--->\n-\n-#### Pushing a Changeset\n-\n-[Committers](https:\/\/openjdk.java.net\/bylaws#committer) can use the _**hg**_ `push` command to propagate changesets into the repositories.\n+### Performing the Push\n+\n+[Committers](https:\/\/openjdk.java.net\/bylaws#committer) can use the `hg push` command to propagate changesets into the repositories.\n@@ -1656,0 +1605,1 @@\n+>\n@@ -1662,2 +1612,2 @@\n-> Refer to the [Nominating a Contributor or Author to be a Committer](https:\/\/openjdk.java.net\/projects\/index.html#project-committer) section of the [Project](https:\/\/openjdk.java.net\/projects\/index.html) page for information about becoming a Project Committer.\n-\n+> See [Becoming a Committer] for information about becoming a Project Committer.\n+>\n","filename":"src\/index.md","additions":251,"deletions":301,"binary":false,"changes":552,"status":"modified"}]}