{"files":[{"patch":"@@ -24,1 +24,0 @@\n-* Introductory text about how to approach the community - Socialize your patch before asking for reviews\n@@ -39,0 +38,3 @@\n+* How to work with the code in an IDE\n+* Where to find JTReg bundles\n+* How to run tests with your fork and how to navigate the test result ZIP\n","filename":"README.md","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -15,0 +15,112 @@\n+## I have a patch, what do I do?\n+\n+::: {.box}\n+[Quick Links]{.boxheader}\n+\n+* [Oracle Contributor Agreement (OCA)](https:\/\/www.oracle.com\/technical-resources\/oracle-contributor-agreement.html)\n+* [JDK Bug System (JBS)](https:\/\/bugs.openjdk.java.net\/)\n+* [OpenJDK Project Roles](https:\/\/openjdk.java.net\/bylaws#project-roles)\n+:::\n+\n+In many GitHub projects the standard way to propose a change is to create a pull request (PR) and discuss the patch in the PR. For OpenJDK projects the situation is somewhat different. First of all, the JDK and the surrounding tooling developed in the OpenJDK projects are part of commercial products maintained and sold by many companies. The JDK is installed on billions of devices and there are many millions of developers out there who use Java. For this reason there must be several safety checks before a change is made.\n+\n+### 1. Sign the OCA\n+\n+Oracle is the steward of the OpenJDK project, and owns the Java brand. In order to make your patch available for review you must first sign the [Oracle Contributor Agreement](https:\/\/www.oracle.com\/technical-resources\/oracle-contributor-agreement.html) (OCA). This agreement gives Oracle and you as a contributor joint copyright interests in the code. You will retain your copyright while also granting those rights to Oracle.\n+\n+When you sign the OCA, please make sure that you specify your GitHub user name in the `Username` field of the OCA. If you try to create a PR before you have signed the OCA, or if you didn't specify your GitHub user name, you'll get instructions telling you to do so, and the PR won't be published until this is done. OCA registration is a manual process. Please allow for up to several days to have your OCA application processed, even though it's normally processed swiftly.\n+\n+### 2. Socialize your change\n+\n+Once the OCA is signed, please restrain your urge to create a PR just a little while longer. In order to prepare the community for your patch, please socialize your idea on the relevant [mailing lists](#mailing-lists). Almost all changes, and in particular any API changes, must go this route and have a broad agreement in place before there is any point in presenting code. To understand the criteria by which your patch is going to be judged, please read [_Why is My Change Rejected?_](#why-is-my-change-rejected) below. In short, hidden constraints and assumptions, stability and quality, maintainability, compatibility, and conformance to specifications must be considered before your PR is ready to be submitted. If you don't understand the constraints for acceptance, you might be surprised when your PR is rejected.\n+\n+### 3. Find a sponsor\n+\n+Socializing your change on the mailing lists also prevents the surprise that would otherwise make the community choke on their morning coffee when they see a huge patch in a new, unknown PR. As a new developer in the community you'll need to make a few friends that agree with your change. There are many good reasons to make friends, but the one relevant here is that for your first changes you'll need a sponsor to facilitate the integration of your work. The sponsor will perform any number of administrative tasks like JBS updates, additional testing, etc. It's usual for a sponsor to also be a reviewer of a change and thus familiar with it, but it's not a requirement.\n+\n+### 4. Create a tracking issue in JBS\n+\n+Many OpenJDK projects require a tracking issue to be filed in the [JDK Bug System (JBS)](https:\/\/bugs.openjdk.java.net\/) before a change can be pushed. This is the case for instance for the JDK and the JDK-Updates projects. In order to get write access to JBS you need to be an [Author](https:\/\/openjdk.java.net\/bylaws#author) in an OpenJDK project. For your first changes, ask your sponsor to help you create the issue.\n+\n+If you continue to contribute high-quality content you'll soon enough be eligible for OpenJDK roles in the project. First Author, and later Committer. The Committer role means you won't need a sponsor anymore. You can read more about [OpenJDK Project Roles](https:\/\/openjdk.java.net\/bylaws#project-roles).\n+\n+### 5. Get acquainted with local process\n+\n+Even though we strive to unify how things are done within the OpenJDK, different areas and projects in the OpenJDK may have slight variations in how they work. Some of these differences are highlighted throughout this guide, some aren't. If you're new to an area, make sure you understand local differences before you proceed. Ask your sponsor who should be your main point of contact through your first developer experience in the OpenJDK.\n+\n+## Why is my change rejected?\n+\n+::: {.box}\n+[Quick Links]{.boxheader}\n+\n+* [Java Language and Virtual Machine Specifications](https:\/\/docs.oracle.com\/javase\/specs\/)\n+* [Java API Specification](https:\/\/docs.oracle.com\/en\/java\/javase\/15\/docs\/api\/index.html)\n+* [CSR Process](https:\/\/wiki.openjdk.java.net\/display\/csr\/Main)\n+:::\n+\n+Java and the JDK are very popular products, and just about every Java developer out there has an idea or two for how to enhance something. And (obviously not referring to you) believe it or not, not every idea is a good idea. Even though many ideas are indeed good, we must be quite restrictive on what we actually include into the JDK. There are many reasons for this.\n+\n+* **Hidden constraints and assumptions**. Many sections of code have constraints and assumptions that aren't necessarily visible at first glance. This might preclude certain changes, even those that might seem obvious.\n+\n+* **Stability and quality**. The JDK is used by millions of developers and as a widely deployed commercial product, it is held to a high standard of quality. Changes should include tests where practical, and core tests should pass at all times. The value of the change should outweigh the risk of introducing a bug or performance regression.\n+\n+* **Maintainability**. Any new feature or code change will need to be maintained in the JDK essentially forever, thus imposing a maintenance burden on future maintainers. The code might still be in use long after you and the people who reviewed it have moved on. New maintainers must be able to understand how to fix bugs in this code.\n+\n+* **Complexity**. Each new feature interacts with all the existing features, which can result in geometric growth of the interactions among features if features are added unchecked. Sometimes we avoid adding a new feature, even if it seems like an obvious thing to add, if that feature would make it difficult to add a more important feature in the future.\n+\n+* **Adherence to specifications**. Much of the JDK is governed by a series of specifications, in particular the [Java Language Specification](https:\/\/docs.oracle.com\/javase\/specs\/), the [Java Virtual Machine Specification](https:\/\/docs.oracle.com\/javase\/specs\/), and the [Java API Specification](https:\/\/docs.oracle.com\/en\/java\/javase\/15\/docs\/api\/index.html) (\"javadocs\"). All changes must be checked and tested carefully to ensure that they don't violate these specifications.\n+\n+* **Javadoc comments are specifications**. The Java API Specification is authored in the form of javadoc comments, so even apparently innocuous changes to comments can be quite significant. It's not always easy to tell what comments are part of the specification and what parts are merely code comments. Briefly, documentation comments on public packages, classes, and class members of exported modules are specifications.\n+\n+* **Specification changes**. It is possible to change the API specifications, and this is done regularly. However, these changes require even more scrutiny than code changes. This extra review is handled by the [CSR Process](https:\/\/wiki.openjdk.java.net\/display\/csr\/Main). Specifications are written in stylized, somewhat formal language, and they don't simply describe what the code does. Writing specifications is a separate skill from coding.\n+\n+* **Compatibility**. Changes should also adhere to high standards of binary, source, and behavioral compatibility. The compatibility impact of apparently innocuous changes is sometimes startling.\n+\n+For reasons like these it’s quite possible that your change, even though it adds value to you, isn’t deemed to add enough value to the larger community.\n+\n+# Mailing Lists\n+\n+::: {.box}\n+[Quick Links]{.boxheader}\n+\n+* [OpenJDK Mailing Lists Manager](https:\/\/mail.openjdk.java.net\/mailman\/listinfo)\n+:::\n+\n+The mailing lists are the key communications mechanism for all OpenJDK work. All participation in an OpenJDK project starts with joining the relevant mailing list. A subscriber to an OpenJDK mailing list is referred to as a [Participant](https:\/\/openjdk.java.net\/bylaws#participant) in the [Bylaws](https:\/\/openjdk.java.net\/bylaws). As a general recommendation we suggest to subscribe to [announce](https:\/\/mail.openjdk.java.net\/mailman\/listinfo\/announce), [discuss](https:\/\/mail.openjdk.java.net\/mailman\/listinfo\/discuss), and the `-dev` lists covering your explicit area of interest. All OpenJDK mailing lists are found here:\n+\n+> [`mail.openjdk.java.net`](https:\/\/mail.openjdk.java.net\/mailman\/listinfo)\n+\n+The OpenJDK community is a friendly place. To keep it that way it's important to keep a professional tone in emails and be aware that the community is global. Many different people with different backgrounds collaborate in these lists. Even though English is the required language for all lists, many Participants speak other languages as their native language. A high tolerance for non-perfect English is expected from anyone joining these lists. You're also strongly encouraged to use your real name on the mailing lists. This adds to the professional tone of your email. Postings from anonymized mailboxes risk being seen as spam. If you do work in the OpenJDK on behalf of your employer, please also list this affiliation. If your GitHub username differs from your real name it's also a good idea to include that to identify yourself and your actions on GitHub.\n+\n+You must be a member of a list to be able to post to that list. Some lists are moderated to keep the content on topic. Each list has its own archive where you can browse older conversations on the list.\n+\n+There are a few different types of lists. The list name has two parts to explain what the list is intended for, `<name>-<suffix>`. The name often refers to the project that owns the list or a specific area of interest that the list focuses on. The suffix is explained below. Not all projects or areas have all types of lists described here.\n+\n+> `-dev`\n+> :    Technical discussions around the implementation of the project artifacts. This is also where code reviews happen.\n+\n+> `-use`\n+> :    Technical discussions around the usage of the project artifacts.\n+\n+> `-discuss`\n+> :    General discussions around the project. The special case `discuss(at)openjdk.java.net` is used for general discussions around the OpenJDK project. Discussions around new project proposals usually happens here.\n+\n+>  `-changes`\n+> :    Changeset notifications from the source code repositories maintained by the project.\n+\n+> `-announce`\n+> :    General project announcements. These lists are tightly moderated and are expected to be low traffic. The special case `announce(at)openjdk.java.net` is used for announcements for the OpenJDK project.\n+\n+> `-experts`\n+> :    Expert group discussions. The list is restricted; only members of the expert group can subscribe.\n+\n+> `-observers`\n+> :    Open for anyone to subscribe to see what the experts are discussing and potentially to have some dialog with other non-experts. There is no guarantee that an expert is subscribed to the `-observers` list or will see any responses on that list.\n+\n+> `-comments`\n+> :    Used by observers to directly provide feedback\/comments to the experts (typically a lead will process the comments list and forward things on to the experts list).\n+\n+## Changing your email address\n+\n+If you need to change your registered email address, or if you have any other problems with the mailing lists, please contact [mailman@openjdk.java.net](mailto:mailman@openjdk.java.net).\n+\n@@ -176,46 +288,0 @@\n-# Mailing Lists\n-\n-::: {.box}\n-[Quick Links]{.boxheader}\n-\n-* [OpenJDK Mailing Lists Manager](https:\/\/mail.openjdk.java.net\/mailman\/listinfo)\n-:::\n-\n-The mailing lists are the key communications mechanism for all OpenJDK work. All participation in an OpenJDK project starts with joining the relevant mailing list. A subscriber to an OpenJDK mailing list is referred to as a [Participant](https:\/\/openjdk.java.net\/bylaws#participant) in the [Bylaws](https:\/\/openjdk.java.net\/bylaws). As a general recommendation we suggest to subscribe to [announce](https:\/\/mail.openjdk.java.net\/mailman\/listinfo\/announce), [discuss](https:\/\/mail.openjdk.java.net\/mailman\/listinfo\/discuss), and the `-dev` lists covering your explicit area of interest. All OpenJDK mailing lists are found here:\n-\n-> [`mail.openjdk.java.net`](https:\/\/mail.openjdk.java.net\/mailman\/listinfo)\n-\n-The OpenJDK community is a friendly place. To keep it that way it's important to keep a professional tone in emails and be aware that the community is global. Many different people with different backgrounds collaborate in these lists. Even though English is the required language for all lists, many Participants speak other languages as their native language. A high tolerance for non-perfect English is expected from anyone joining these lists.\n-\n-You must be in the list to send to the list. Some lists are moderated to keep the content on topic. Each list has its own archive where you can browse older conversations on the list.\n-\n-There are a few different types of lists. The list name has two parts to explain what the list is intended for, `<name>-<suffix>`. The name often refers to the project that owns the list or a specific area of interest that the list focuses on. The suffix is explained below. Not all projects or areas have all types of lists described here.\n-\n-> `-dev`\n-> :    Technical discussions around the implementation of the project artifacts. This is also where code reviews happen.\n-\n-> `-use`\n-> :    Technical discussions around the usage of the project artifacts.\n-\n-> `-discuss`\n-> :    General discussions around the project. The special case `discuss(at)openjdk.java.net` is used for general discussions around the OpenJDK project. Discussions around new project proposals usually happens here.\n-\n->  `-changes`\n-> :    Changeset notifications from the source code repositories maintained by the project.\n-\n-> `-announce`\n-> :    General project announcements. These lists are tightly moderated and are expected to be low traffic. The special case `announce(at)openjdk.java.net` is used for announcements for the OpenJDK project.\n-\n-> `-experts`\n-> :    Expert group discussions. The list is restricted; only members of the expert group can subscribe.\n-\n-> `-observers`\n-> :    Open for anyone to subscribe to see what the experts are discussing and potentially to have some dialog with other non-experts. There is no guarantee that an expert is subscribed to the `-observers` list or will see any responses on that list.\n-\n-> `-comments`\n-> :    Used by observers to directly provide feedback\/comments to the experts (typically a lead will process the comments list and forward things on to the experts list).\n-\n-## Changing your email address\n-\n-If you need to change your registered email address, or if you have any other problems with the mailing lists, please contact [mailman@openjdk.java.net](mailto:mailman@openjdk.java.net).\n-\n","filename":"src\/index.md","additions":112,"deletions":46,"binary":false,"changes":158,"status":"modified"}]}