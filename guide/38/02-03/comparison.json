{"files":[{"patch":"@@ -35,1 +35,1 @@\n-Once the OCA is signed, please restrain your urge to create a PR just a little while longer. In order to prepare the community for your patch, please socialize your idea on the relevant [mailing lists](#mailing-lists). Java and the JDK are very popular products, and just about every Java developer out there has an idea or two for how to enhance something. And (obviously not referring to you) believe it or not, not every idea is a good idea. Even though many ideas are indeed good, we must be quite restrictive on what we actually include into the JDK. There are many reasons for this. Stability is one. Any change that goes into the source code risks introducing bugs. This means that the added value of your change must outweigh the added risk of it. The code must be maintained for a foreseeable future even if you as the original developer decides not to do so. This means that the added value of your change must outweigh the added maintenance burden of it. All changes to the Java programming language are visible to a large developer community. Any change you do will require a very large number of developers around the world to spend time to understand your change. Again, the added value of your change must outweigh the cost for all those developers' time. For reasons like these it's quite possible that your change, even though it adds value to you, isn't deemed to add enough value to the larger community.\n+Once the OCA is signed, please restrain your urge to create a PR just a little while longer. In order to prepare the community for your patch, please socialize your idea on the relevant [mailing lists](#mailing-lists). To understand the criteria by which your patch is going to be judged, please read [_Why is My Change Rejected?_](#why-is-my-change-rejected) below. In short, hidden constraints and assumptions, stability and quality, maintainability, compatibility, and conformance to specifications must be considered before your PR is ready to be submitted. If you don't understand the constraints for acceptance, you might be surprised when your PR is rejected.\n@@ -45,1 +45,1 @@\n-If you continue to contribute high-quality content you'll soon enough be eligible for OpenJDK roles in the project. First Author, and later Contributor. The Contributor role means you won't need a sponsor anymore. You can read more about [OpenJDK Project Roles](https:\/\/openjdk.java.net\/bylaws#project-roles).\n+If you continue to contribute high-quality content you'll soon enough be eligible for OpenJDK roles in the project. First Author, and later Committer. The Committer role means you won't need a sponsor anymore. You can read more about [OpenJDK Project Roles](https:\/\/openjdk.java.net\/bylaws#project-roles).\n@@ -51,0 +51,30 @@\n+## Why is my change rejected?\n+\n+::: {.box}\n+[Quick Links]{.boxheader}\n+\n+* [Java Language and Virtual Machine Specifications](https:\/\/docs.oracle.com\/javase\/specs\/)\n+* [Java API Specification](https:\/\/docs.oracle.com\/en\/java\/javase\/15\/docs\/api\/index.html)\n+* [CSR Process](https:\/\/wiki.openjdk.java.net\/display\/csr\/Main)\n+:::\n+\n+Java and the JDK are very popular products, and just about every Java developer out there has an idea or two for how to enhance something. And (obviously not referring to you) believe it or not, not every idea is a good idea. Even though many ideas are indeed good, we must be quite restrictive on what we actually include into the JDK. There are many reasons for this.\n+\n+* **Hidden constraints and assumptions**. Many sections of code have constraints and assumptions that aren't necessarily visible at first glance. This might preclude certain changes, even those that might seem obvious.\n+\n+* **Stability and quality**. The JDK is used by millions of developers and as a widely deployed commercial product, it is held to a high standard of quality. Changes should include tests where practicable, and core tests should be kept passing at all times. The value of the change should outweigh the risk of introducing a bug.\n+\n+* **Maintainability**. Any new feature or code change will need to be maintained in the JDK essentially forever, thus imposing a maintenance burden on future maintainers. The code might still be in use long after you and the people who reviewed it have moved on. New maintainers must be able to understand how to fix bugs in this code.\n+\n+* **Complexity**. Each new feature interacts with all the existing features, which can result in geometric growth of the interactions among features if features are added unchecked. Sometimes we avoid adding a new feature, even if it seems like an obvious thing to add, if that feature would make it difficult to add a more important feature in the future.\n+\n+* **Adherence to specifications**. Much of the JDK is governed by a series of specifications, in particular the [Java Language Specification](https:\/\/docs.oracle.com\/javase\/specs\/), the [Java Virtual Machine Specification](https:\/\/docs.oracle.com\/javase\/specs\/), and the [Java API Specification](https:\/\/docs.oracle.com\/en\/java\/javase\/15\/docs\/api\/index.html) (\"javadocs\"). All changes must be checked and tested carefully to ensure that they don't violate these specifications.\n+\n+* **Javadoc comments are specifications**. The Java API Specification is authored in the form of javadoc comments, so even apparently innocuous changes to comments can be quite significant. It's not always easy to tell what comments are part of the specification and what parts are merely code comments. Briefly, documentation comments on public packages, classes, and class members of exported modules are specifications.\n+\n+* **Specification changes**. It is possible to change the API specifications, and this is done regularly. However, these changes require even more scrutiny than code changes. This extra review is handled by the [CSR Process](https:\/\/wiki.openjdk.java.net\/display\/csr\/Main). Specifications are written in stylized, somewhat formal language, and they don't simply describe what the code does. Writing specifications is a separate skill from coding.\n+\n+* **Compatibility**. Changes should also adhere to high standards of binary, source, and behavioral compatibility. The compatibility impact of apparently innocuous changes is sometimes startling.\n+\n+For reasons like these it’s quite possible that your change, even though it adds value to you, isn’t deemed to add enough value to the larger community.\n+\n@@ -63,1 +93,1 @@\n-The OpenJDK community is a friendly place. To keep it that way it's important to keep a professional tone in emails and be aware that the community is global. Many different people with different backgrounds collaborate in these lists. Even though English is the required language for all lists, many Participants speak other languages as their native language. A high tolerance for non-perfect English is expected from anyone joining these lists.\n+The OpenJDK community is a friendly place. To keep it that way it's important to keep a professional tone in emails and be aware that the community is global. Many different people with different backgrounds collaborate in these lists. Even though English is the required language for all lists, many Participants speak other languages as their native language. A high tolerance for non-perfect English is expected from anyone joining these lists. You're also strongly encouraged to use your real name on the mailing lists. This adds to the professional tone of your email. Postings from anonymized mailboxes risk being seen as spam. If you do work in the OpenJDK on behalf of your employer, please also list this affiliation.\n","filename":"src\/index.md","additions":33,"deletions":3,"binary":false,"changes":36,"status":"modified"}]}