{"files":[{"patch":"@@ -5,1 +5,1 @@\n-Comments and questions may be sent to [guide-dev (at) openjdk.org](mailto:guide-dev-at-openjdk.org). Please let us know if there's anything in the guide that isn't clear.\n+Comments and questions may be sent to [guide-dev@openjdk.org](mailto:guide-dev@openjdk.org). Please let us know if there's anything in the guide that isn't clear.\n","filename":"src\/guide\/about-this-guide.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-## JBS Labels\n+## JBS labels\n@@ -62,1 +62,1 @@\n-## JBS Label Dictionary\n+## JBS label dictionary\n@@ -349,0 +349,3 @@\n+      Please note that the [noreg-]{.jbs-label} namespace is closed, meaning that no new [noreg-]{.jbs-label} labels should be added unless properly\n+      motivated, discussed, and agreed upon.\n+\n","filename":"src\/guide\/jbs-jdk-bug-system.md","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-> :    General discussions around the project. The special case `discuss(at)openjdk.org` is used for general discussions around OpenJDK. Discussions around new project proposals usually happens here.\n+> :    General discussions around the project. The special case `discuss@openjdk.org` is used for general discussions around OpenJDK. Discussions around new project proposals usually happens here.\n@@ -32,1 +32,1 @@\n-> :    General project announcements. These lists are tightly moderated and are expected to be low traffic. The special case `announce(at)openjdk.org` is used for announcements for OpenJDK.\n+> :    General project announcements. These lists are tightly moderated and are expected to be low traffic. The special case `announce@openjdk.org` is used for announcements for OpenJDK.\n","filename":"src\/guide\/mailing-lists.md","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-## General Conventions for Release Notes\n+## General conventions for release notes\n@@ -117,1 +117,1 @@\n-## Querying the Release Notes\n+## Querying the release notes\n","filename":"src\/guide\/release-notes.md","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,11 +33,11 @@\n-    \/*\n-     * @test\n-     * @summary Make sure feature X handles Y correctly\n-     * @run main TestXY\n-     *\/\n-    public class TestXY {\n-        public static void main(String[] args) throws Exception {\n-            var result = X.y();\n-            if (result != expected_result) {\n-                throw new RuntimeException(\"X.y() gave \" + result + \", expected \" + expected_result);\n-            }\n+~~~Java\n+\/*\n+ * @test\n+ * @summary Make sure feature X handles Y correctly\n+ * @run main TestXY\n+ *\/\n+public class TestXY {\n+    public static void main(String[] args) throws Exception {\n+        var result = X.y();\n+        if (result != expected_result) {\n+            throw new RuntimeException(\"X.y() gave \" + result + \", expected \" + expected_result);\n@@ -46,0 +46,2 @@\n+}\n+~~~\n@@ -51,1 +53,3 @@\n-    @bug 7000001\n+~~~\n+@bug 7000001\n+~~~\n@@ -55,4 +59,6 @@\n-    @requires docker.support\n-    @requires os.family != ”windows”\n-    @requires os.maxMemory > 3G\n-    @requires os.arch==\"x86_64\" | os.arch==\"amd64\"\n+~~~\n+@requires docker.support\n+@requires os.family != ”windows”\n+@requires os.maxMemory > 3G\n+@requires os.arch==\"x86_64\" | os.arch==\"amd64\"\n+~~~\n@@ -62,2 +68,4 @@\n-    @modules java.base\/jdk.internal.misc\n-    @run main\/othervm -Xmx128m TestXY\n+~~~\n+@modules java.base\/jdk.internal.misc\n+@run main\/othervm -Xmx128m TestXY\n+~~~\n@@ -69,1 +77,3 @@\n-    @key headful\n+~~~\n+@key headful\n+~~~\n@@ -83,2 +93,4 @@\n-    sh .\/configure --with-jtreg=\/path\/to\/jtreg\n-    make run-test TEST=tier1\n+~~~\n+sh .\/configure --with-jtreg=\/path\/to\/jtreg\n+make run-test TEST=tier1\n+~~~\n@@ -88,1 +100,3 @@\n-    make run-test TEST=test\/jdk\/java\/lang\/String\/\n+~~~\n+make run-test TEST=test\/jdk\/java\/lang\/String\/\n+~~~\n@@ -92,1 +106,3 @@\n-    jtreg -jdk:\/path\/to\/jdk \/path\/to\/test\n+~~~\n+jtreg -jdk:\/path\/to\/jdk \/path\/to\/test\n+~~~\n@@ -98,19 +114,21 @@\n-    static int demo_comparator(int a, int b) {\n-      if (a == b) {\n-        return 0;\n-      }\n-      if (a < b) {\n-        return -1;\n-      }\n-      return 1;\n-    }\n-\n-    TEST(Demo, quicksort) {\n-      int test_array[] = {7,1,5,3,6,9,8,2,4,0};\n-      int expected_array[] = {0,1,2,3,4,5,6,7,8,9};\n-\n-      QuickSort::sort(test_array, 10, demo_comparator, false);\n-      for (int i = 0; i < 10; i++) {\n-        ASSERT_EQ(expected_array[i], test_array[i]);\n-      }\n-    }\n+~~~Java\n+static int demo_comparator(int a, int b) {\n+  if (a == b) {\n+    return 0;\n+  }\n+  if (a < b) {\n+    return -1;\n+  }\n+  return 1;\n+}\n+\n+TEST(Demo, quicksort) {\n+  int test_array[] = {7,1,5,3,6,9,8,2,4,0};\n+  int expected_array[] = {0,1,2,3,4,5,6,7,8,9};\n+\n+  QuickSort::sort(test_array, 10, demo_comparator, false);\n+  for (int i = 0; i < 10; i++) {\n+    ASSERT_EQ(expected_array[i], test_array[i]);\n+  }\n+}\n+~~~\n@@ -120,5 +138,7 @@\n-    ASSERT_TRUE(condition);\n-    ASSERT_FALSE(condition);\n-    EXPECT_EQ(expected, actual);\n-    EXPECT_LT(val1, val2);\n-    EXPECT_STREQ(expected_str, actual_str);\n+~~~Java\n+ASSERT_TRUE(condition);\n+ASSERT_FALSE(condition);\n+EXPECT_EQ(expected, actual);\n+EXPECT_LT(val1, val2);\n+EXPECT_STREQ(expected_str, actual_str);\n+~~~\n@@ -134,2 +154,4 @@\n-    sh .\/configure --with-gtest=\/path\/to\/gtest\n-    make test TEST=gtest\n+~~~\n+sh .\/configure --with-gtest=\/path\/to\/gtest\n+make test TEST=gtest\n+~~~\n@@ -139,2 +161,4 @@\n-    make test TEST=gtest:code.*:os.*\n-    make test TEST=gtest:$X\/$variant\n+~~~\n+make test TEST=gtest:code.*:os.*\n+make test TEST=gtest:$X\/$variant\n+~~~\n@@ -152,1 +176,3 @@\n-ProblemListing should be used for a short term exclusion while a test is being fixed, and for the exclusion of intermittently failing tests that cause too much noise, but can still be useful to run on an ad-hoc basis. ProblemListing is done in the file `ProblemList.txt`. There are actually several ProblemList files to choose from. Their location and name hint about what area or feature each file belongs to. Each file has sections for different components. All ProblemList files complement each other to build the total set of tests to exclude in jtreg runs.\n+ProblemListing should be used for a short term exclusion while a test is being fixed, and for the exclusion of intermittently failing tests that cause too much noise, but can still be useful to run on an ad-hoc basis. ProblemListing is done in the file `ProblemList.txt`. For more details about the `ProblemList.txt` file see the [jtreg FAQ](https:\/\/openjdk.org\/jtreg\/faq.html#what-is-a-problemlist.txt-file).\n+\n+There are actually several ProblemList files to choose from in the JDK. Their location and name hint about what area or feature each file belongs to. Each file has sections for different components. All ProblemList files complement each other to build the total set of tests to exclude in jtreg runs.\n@@ -254,1 +280,1 @@\n-## GitHub Actions\n+## GitHub actions\n@@ -256,1 +282,1 @@\n-GitHub has a feature called **GitHub Actions** (GHA) that can be used to automate testing. The GHA is executed whenever a push is made to a branch in your repository. The bots will show the results of the GHA in your PR when you create or update it. The GHA in the JDK project is configured to run a set of tests that is commonly known as **tier 1**. This is a relatively fast, small set of tests that tries to verify that your change didn't break the JDK completely. In tier 1 the JDK is built on a small set of platforms including (but not necessarily limited to) Linux, Windows, and MacOS, and a few tests are executed using these builds.\n+GitHub has a feature called **GitHub actions** (GHA) that can be used to automate testing. The GHA is executed whenever a push is made to a branch in your repository. The bots will show the results of the GHA in your PR when you create or update it. The GHA in the JDK project is configured to run a set of tests that is commonly known as **tier 1**. This is a relatively fast, small set of tests that tries to verify that your change didn't break the JDK completely. In tier 1 the JDK is built on a small set of platforms including (but not necessarily limited to) Linux, Windows, and MacOS, and a few tests are executed using these builds.\n","filename":"src\/guide\/testing-the-jdk.md","additions":80,"deletions":54,"binary":false,"changes":134,"status":"modified"},{"patch":"@@ -224,1 +224,1 @@\n-First you should create a new SSH key. See [Generating an SSH key] for guidance on how to do that. Your public key (`~\/.ssh\/id_rsa.pub`) should be mailed as an attachment along with your JDK username to [keys(at)openjdk.org](mailto:keys-at-openjdk.org). An administrator will install your key on the server and notify you on completion. This process may take a couple of days.\n+First you should create a new SSH key. See [Generating an SSH key] for guidance on how to do that. Your public key (`~\/.ssh\/id_rsa.pub`) should be mailed as an attachment along with your JDK username to [keys@openjdk.org](mailto:keys@openjdk.org). An administrator will install your key on the server and notify you on completion. This process may take a couple of days.\n","filename":"src\/guide\/working-with-the-legacy-mercurial-servers.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}