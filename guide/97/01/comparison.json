{"files":[{"patch":"@@ -25,1 +25,1 @@\n-Oracle is the steward of OpenJDK. In order to make your patch available for review you must first sign the [Oracle Contributor Agreement](https:\/\/oca.opensource.oracle.com\/) (OCA). This agreement gives Oracle and you as a contributor joint copyright interests in the code. You will retain your copyright while also granting those rights to Oracle.\n+Like many other open-source communities, the OpenJDK Community requires Contributors to jointly assign their copyright on contributed code. Oracle is the steward of OpenJDK and if you haven't yet signed the [Oracle Contributor Agreement](https:\/\/oca.opensource.oracle.com\/) (OCA) then please do so. This is required in order to make your patch available for review. The OCA gives Oracle and you as a Contributor joint copyright interests in the code. You will retain your copyright while also granting those rights to Oracle.\n@@ -29,0 +29,2 @@\n+You only need to sign the OCA once in order to cover all changes that you might contribute to any Oracle-sponsored open-source community. If you've already signed the OCA or the former SCA (Sun Contributor Agreement) for any Oracle-sponsored open-source community, then you do not need to sign it again in order to contribute to OpenJDK. Please note that you don't need to sign an OCA if you work at Oracle or a company which has negotiated an equivalent agreement.\n+\n@@ -31,1 +33,5 @@\n-Once the OCA is signed, please restrain your urge to create a PR just a little while longer. In order to prepare the community for your patch, please socialize your idea on the relevant [mailing lists](#mailing-lists). Almost all changes, and in particular any API changes, must go this route and have a broad agreement in place before there is any point in presenting code. To understand the criteria by which your patch is going to be judged, please read [_Why is My Change Rejected?_](#why-is-my-change-rejected) below. In short, hidden constraints and assumptions, stability and quality, maintainability, compatibility, and conformance to specifications must be considered before your PR is ready to be submitted. If you don't understand the constraints for acceptance, you might be surprised when your PR is rejected.\n+Once the OCA is signed, please restrain your urge to create a PR just a little while longer. In order to prepare the community for your patch, please socialize your idea on the relevant [mailing lists](#mailing-lists).\n+\n+It's actually a good idea to discuss what you're trying to do with other engineers working on the same code already before you invest significant time working on a change. They're likely to be able to offer comments and suggestions that will result in a higher-quality change and a smoother submission process. Announcing that you're working on a particular item can also help to avoid wasted effort in case someone else is already working on it.\n+\n+Almost all changes, and in particular any API changes, must go this route and have a broad agreement in place before there is any point in presenting code. To understand the criteria by which your patch is going to be judged, please read [_Why is My Change Rejected?_](#why-is-my-change-rejected) below. In short, hidden constraints and assumptions, stability and quality, maintainability, compatibility, and conformance to specifications must be considered before your PR is ready to be submitted. If you don't understand the constraints for acceptance, you might be surprised when your PR is rejected.\n@@ -55,1 +61,3 @@\n-Java and the JDK are very popular products, and just about every Java developer out there has an idea or two for how to enhance something. And (obviously not referring to you) believe it or not, not every idea is a good idea. Even though many ideas are indeed good, we must be quite restrictive on what we actually include into the JDK. There are many reasons for this.\n+Only the best patches submitted will actually make it all the way into the JDK code base. The goal is not to take in the maximum number of contributions possible, but rather to accept only the highest-quality contributions. The JDK is used daily by millions of people and thousands of businesses, often in mission-critical applications, and so we can't afford to accept anything less than the very best.\n+\n+Just about every Java developer out there has an idea or two for how to enhance something. And (obviously not referring to you) believe it or not, not every idea is a good idea. Even though many ideas are indeed good, we must be quite restrictive on what we actually include into the JDK. There are many reasons for this.\n@@ -75,0 +83,4 @@\n+If you're relatively new to the Java platform then we recommend that you gain more experience writing Java applications before you attempt to work on the JDK itself. The purpose of the sponsored-contribution process is to bring developers who already have the skills required to work on the JDK into the existing development community. The members of that community have neither the time nor the patience required to teach basic Java programming skills or platform implementation techniques.\n+\n+The feature releases currently under development are in the JDK Project. Most development work is focused on the newest release, so generally you should be working against the latest JDK sources rather than the JDK Updates sources.\n+\n","filename":"src\/guide\/contributing-to-an-open-jdk-project.md","additions":15,"deletions":3,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -0,0 +1,43 @@\n+# Sponsoring a Change\n+\n+New developers in the OpenJDK community doesn't have the permissions needed to push changes to the repositories. This is a feature that ensures that all developers get familiar with the code, processes, and community before being allowed to actually make changes. To get the first changes in, the new Contributor needs the help of a Sponsor. The Sponsor's role is to offer constructive advice and eventually push the sponsored contribution into the repository.\n+\n+There are many different reasons to sponsor a change and depending on the situation the exact steps involved may differ significantly. A developer hired into a larger team of experienced OpenJDK developers is likely to get the required information in new hire training or similar and will likely need less help from a sponsor than the entusiast sitting at home with no prior experience of large scale software development. This text aims to highlight the steps involved in sponsoring a change but can't cover all possible scenarios. As always, common sense takes precedence where the assumptions made here doesn't apply to your use case.\n+\n+## Subscribe to OpenJDK mailing lists\n+\n+It should go without saying that as a Committer for a project, you should be subscribed to and actively participating in all appropriate mailing lists. This includes both project mailing lists and any group mailing lists where technical decisions may take place for the area.\n+\n+As a Sponsor, Contributors will look up to you for guidance to get their contributions into the project - your actions will determine whether Contributors will feel welcome and want to engage further with the project beyond their initial attempt, or not. Let's not lose enthusiastic, engaged and technically competent Contributors due to a lack of communication. If there is a request in your area of expertise and you can't address it, at least acknowledge receipt of the request and provide an estimate for when you'll be able to give it your attention. A frank explanation of your time constraints or commitments will be appreciated and respected.\n+\n+## Volunteer to sponsor a contribution\n+\n+Opportunities to sponsor contributions can occur in the OpenJDK mail lists. Since Contributors are encouraged to discuss their intended changes before they submit a patch, the ideal time to declare your sponsorship is during that initial conversation. As a Sponsor you should offer advice and collaborate with the contributor as necessary to produce a high-quality patch. In addition to sponsoring changes to code you regularly maintain, there may be other areas where you can serve as a Sponsor.\n+\n+After publicly committing to sponsoring a contribution, you need to \"claim the sponsorship request\" in [JBS](#jbs---jdk-bug-system) unless the Contributor already has a JBS account and can assign the bug to themself. To do that you need to perform three steps:\n+\n+* first assign the bug to yourself,\n+* then add a comment providing the name of the Contributor and a summary of the approach to solving the problem,\n+* and finally set the bug's [Status]{.jbs-field} to `In Progress`.\n+\n+If the contribution doesn't already have an associated OpenJDK bug then create one in [JBS](#jbs---jdk-bug-system).\n+\n+## Review the contribution\n+\n+You're now ready to review the proposed changes. As a sponsor, you aren't technically required to review the change, other Reviewers may already have looked at it or signed up to review. But it will be your name on the commit so you should do whatever you feel is needed to be comfortable with that. Some changes may be trivial, like spelling fixes. Others may require a more intensive review - including, for example, a review by the CSR.\n+\n+As a Sponsor, you may need to work with the Contributor to make any necessary changes, until you and the Contributor are satisfied with the result, and you are satisfied that the proposed contribution will pass any relevant review processes and build-and-test processes. That may take more than one iteration in the worst case.\n+\n+You may also need to help out with any process or practical questions around the OCA, GitHub PRs, and specific requirements in the area or project.\n+\n+## Push the contribution\n+\n+Once the contribution passes the review and build-and-test processes, you're ready to perform the integration. The Contributor should use the command `\/integrate` on the PR as prompted by the bots. Once that is done, you as a sponsor enters the command `\/sponsor` in a comment on the PR. That's it!\n+\n+## Celebrate your contributions\n+\n+Sponsoring new contributions is an important activity - it's how the engineering culture of a project gets passed on from the core group to new Contributors, from one generation to the next. It should be fun, so please celebrate the contributions you've sponsored by mentioning them on your blog or similar. Congratulate other Sponsors on their work. Take pride in the value you provide to Contributors. Their success reflects well on you.\n+\n+::: {.box}\n+[To the top](#){.boxheader}\n+:::\n","filename":"src\/guide\/sponsoring-a-change.md","additions":43,"deletions":0,"binary":false,"changes":43,"status":"added"},{"patch":"@@ -4,0 +4,1 @@\n+sponsoring-a-change.md\n","filename":"src\/toc.conf","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}