{"files":[{"patch":"@@ -297,20 +297,1 @@\n-# Change Planning and Guidelines\n-\n-This section describes the development process of identifying a bug or enhancement (formerly \"Request for Enhancement\" (RFE)) and providing a solution. The instructions assume that the [Contributor](https:\/\/openjdk.java.net\/bylaws#contributor) already has a working build environment and has some familiarity with an existing OpenJDK [Project](https:\/\/openjdk.java.net\/bylaws#project) and its repositories.\n-\n-## Fixing a Bug\n-\n-This is the list of steps which should be performed when fixing a small bug. Small bugs include typos in code or specification, algorithm improvements for correctness or performance, and code changes required to correctly implement the specification.\n-\n-> ---\n-> Some steps refer to operations which can not be performed directly without the assistance of a [Project Committer](https:\/\/openjdk.java.net\/bylaws#committer). For example, any changes to the [bug database](https:\/\/bugs.openjdk.java.net) fall into this category. Since these steps are required, [Contributors](https:\/\/openjdk.java.net\/bylaws#contributor) are urged to work with their [Sponsors](https:\/\/openjdk.java.net\/sponsor\/) to complete these tasks.\n-\n-> ---\n-\n-For the purposes of brevity this document will use the term \"bug\" to refer to both bugs and enhancements unless otherwise noted. Hence \"fix for a bug\" could also imply \"implementation for an enhancement\".\n-\n-#. **Discuss the intended change**\n-\n-   Send an e-mail to the appropriate development mailing list for the Project that maintains the code. The e-mail should have a subject line of the form:\n-\n-       6543210: My favorite bug\n+# JBS - JDK Bug System\n@@ -318,1 +299,2 @@\n-   where `6543210` is replaced with the actual bug id number or \"[NEW BUG]\" if the bug id is not known and `My favorite bug` is replaced with the bug's summary.  The message should describe the intended change, which components may be affected, and any other risks or concerns.\n+::: {.box}\n+[Quick Links]{.boxheader}\n@@ -320,1 +302,3 @@\n-#. **Does a bug id exist for the work?**\n+* [Bug Report Tool](https:\/\/bugreport.java.com\/)\n+* [JDK Bug System (JBS)](https:\/\/bugs.openjdk.java.net\/)\n+:::\n@@ -322,2 +306,1 @@\n-   **Yes**\n-   :   Continue\n+[JBS](https:\/\/bugs.openjdk.java.net\/) is an issue tracker used by many OpenJDK projects.\n@@ -325,2 +308,1 @@\n-   **No**\n-   :   Create a bug in an appropriate component\/sub-component.\n+## Filing a Bug\n@@ -328,1 +310,1 @@\n-#. **Set the bug status to \"Open\"**\n+When a new failure is found in the JDK a bug should be filed to describe and track the issue. Depending on your role in the OpenJDK you can either use the [Bug Report Tool](https:\/\/bugreport.java.com\/) or, if you are [Author](https:\/\/openjdk.java.net\/bylaws#author) in an OpenJDK [Project](https:\/\/openjdk.java.net\/bylaws#project), report the bug directly in the [JDK Bug System](https:\/\/bugs.openjdk.java.net\/). Try to make the bug report as complete as possible to make it easier to triage and investigate the bug.\n@@ -330,1 +312,1 @@\n-   This communicates intent to fix the bug to other members of the Project. It also sets the expectation for downstream teams such as SQE and JCK that the bug will be fixed in an upcoming integration.\n+It's not the reporter's responsibility to set a correct priority, but a qualified guess is always better than a default value. To help with setting the right priority consider things like how the bug impacts the product and our testing, how likely is it that the bug triggers, how difficult is it to work around the bug if it's not fixed soon, and whether it's a recent regression, since that may break existing applications. Regressions are often higher priority than long standing bugs and may block a release if not fixed.\n@@ -332,1 +314,1 @@\n-#. **Does the fix for the bug require a specification change, directly affect an external interface, or otherwise have a compatibility impact?**\n+A few things to keep in mind when filing a new bug:\n@@ -334,2 +316,18 @@\n-   **Yes**\n-   :   Submission of a CSR request is required. The CSR must be [approved](#approved) before the bug fix is pushed to a feature release or update release repository. The work may begin concurrently with the CSR review, but may need to be modified in response to CSR feedback.\n+* Before filing a bug, verify that there isn't already a bug filed for this issue.\n+* If you suspect that the bug is a vulnerability, don't file a JBS issue. Instead send your bugreport to [vuln-dev@openjdk.java.net](mailto:vuln-dev@openjdk.java.net)\n+* Make a reasonable attempt to narrow down which build or release the failure first appeared in.\n+* Add relevant labels like [`intermittent`](#intermittent), [`regression`](#regression), [`noreg-self`](#noreg-self), ['tier1'](#tier) etc.\n+* Set affects version to the JDK version(s) where the failure was seen.\n+  * If the failure is found in an update train of the JDK (e.g. 11.0.x), please make an effort to see if the bug is also present in [mainline](https:\/\/hg.openjdk.java.net\/jdk\/jdk\/).\n+* Set priority (see above)\n+* In the description, always include (if possible):\n+  * full name of the failing tests\n+  * error messages\n+  * assert messages\n+  * stack trace\n+  * command line information\n+  * relevant information from the logs\n+* If the failure is not reproducible with an existing OpenJDK test, attach a reproducer if possible.\n+* Only set CPU and\/or OS fields if the bug **ONLY** happens on that particular platform.\n+* Always file separate bugs for different issues.\n+  * If two crashes looks related but not similar enough to for sure be the same, it is easier to close a bug as a duplicate than it is to extract the relevant info from a bug to create a new one later.\n@@ -337,2 +335,1 @@\n-   **No**\n-   :   Continue\n+To find out which component to use for different bugs, consult the [directory to area mapping](#directory-to-area-mapping).\n@@ -340,1 +337,1 @@\n-#. **Fix the bug**\n+## How to fix an incorrect backport creation\n@@ -342,1 +339,1 @@\n-   Assuming that the development team approves of the intended approach, begin working on the code using the latest source available from the appropriate OpenJDK Project [repository](https:\/\/hg.openjdk.java.net).\n+If a main bug is targeted to a release and the fix is pushed to a different release, then a backport bug is automatically created. Usually this is a \"good thing\", e.g., when you are backporting a fix to an earlier release, but not always... If the main bug is targeted to a later release (due to schedule planning), but someone finds the time to fix that bug in the current release, then the bug should be retargeted to the current release before pushing the fix. However, sometimes we forget to do that.\n@@ -344,1 +341,1 @@\n-#. [**Is it possible to write a test to detect the bug?**]\n+Here is how to fix that:\n@@ -346,2 +343,2 @@\n-   **Yes**\n-   :   For bugs, provide a [jtreg](https:\/\/openjdk.java.net\/jtreg\/) regression test as part of the changeset. For enhancements that directly affect one or more exported interfaces, add an adequate set of jtreg unit tests as part of the changeset. By convention all regression and unit tests should contain a [\\@bug tag](https:\/\/openjdk.java.net\/jtreg\/tag-spec.html#INFORMATIONAL_TAGS9) referencing at least one bugid.\n+> ---\n+> In this example a fix was pushed to JDK N (a.k.a. the current release) while the JBS bug was targeted to JDK N+1 (a.k.a. a future release).\n@@ -349,1 +346,1 @@\n-   :   An entirely new test (or tests) may not be required. For example, if the bug is an existing regression test failure, then when fixing the bug you should just add the new bug ID to the list of space-delimited bugs in the [\\@bug tag](https:\/\/openjdk.java.net\/jtreg\/tag-spec.html#INFORMATIONAL_TAGS) of the failing regression test, even if the test did not need to be updated.\n+> ---\n@@ -351,2 +348,21 @@\n-   **No**\n-   :   An explanation for why a test is unnecessary or infeasible is required. Such an explanation is recorded by adding a label, and possibly a comment, to the bug report. The label has the prefix **`noreg`** for regression tests and **`nounit`** for unit tests. The suffix of the label is described in detail in the [JBS Label Dictionary](#noreg)\n+#. Reopen the _backport_ bug that was created automatically\n+   * Use a comment like the following (in the reopen dialog):\n+~~~\n+Fix was pushed while main bug was targeted to 'N+1'. Reset the main bug to fixed in 'N', reset this bug to fix in 'N+1' and closed as 'Not An Issue' since JDK N+1 will automatically get this fix from JDK N.\n+~~~\n+   * Change the 'Fix Version\/s' from 'N' to 'N+1'.\n+   * Close the _backport_ bug as \"Not an Issue\".\n+#. Clean up the _main_ bug\n+   * Copy the open push notification comment from the _backport_ bug to the _main_ bug, e.g.:\n+~~~\n+Changeset: 12345678\n+Author: Duke <duke@openjdk.org>\n+Date: 2020-10-23 15:37:46 +0000\n+URL: https:\/\/git.openjdk.java.net\/jdk\/commit\/12345678\n+~~~\n+   * Add a comment like the following to the _main_ bug:\n+~~~\n+Fix was pushed while main bug was targeted to 'N+1'. Reset the main bug to fixed in 'N' and copied the Robo Duke entry here.\n+~~~\n+   * Reset the _main_ bug 'Fix Version\/s' from 'N+1' to 'N'.\n+   * Resolve the _main_ bug as \"Fixed\" in build \"team\" or in build \"master\" depending on where the fix was pushed. Pushes to 'openjdk\/jdk' are fixed in build \"master\" and pushes to project repositories are fixed in build \"team\".\n@@ -354,1 +370,1 @@\n-#. **Is modification of shared Java code needed?**\n+## Resolved - Incomplete\n@@ -356,2 +372,1 @@\n-   **Yes**\n-   :   It is often sufficient to build and test on a single platform, but sometimes it is not. Use discretion.\n+To resolve an issue as `Incomplete` is JBS lingo for \"Need More Information\". An issue that is `Resolved - Incomplete` is *not* closed but more information is needed to be able to work on it. If no more information is obtained within reasonable time the issue should be closed (`Closed - Incomplete`). Closing a resolved issue is done using the `Verify` option.\n@@ -359,2 +374,1 @@\n-   **No**\n-   :   Continue\n+## JBS Label Dictionary\n@@ -362,1 +376,1 @@\n-#. **Is modification of shared C code needed?**\n+This table contains some frequently used JBS labels and their meaning. Please help keeping this dictionary up to date by adding your favorite labels. This table doesn’t dictate how to use labels, but rather document how they are used. That said, obviously it will help everyone if we try to follow a common standard and use similar labels in the same way across all entities that use JBS.\n@@ -364,2 +378,1 @@\n-   **Yes**\n-   :   Build and test on at least one instance of all three of the supported operating systems (Solaris, Linux, and Windows).\n+Labels are an open namespace, which means that anyone can create new labels at any time. In order to avoid confusion, however, it's best to reuse existing labels where possible. This can be done by editing the \"labels\" field of a bug and entering the first few characters of the label you want to add. JIRA will pop up an autocomplete window with existing labels that match that prefix. Then choose one of the existing labels. Using the autocomplete window is preferable to typing the whole label name (even if you're a good typist) because it's easy for minor spelling errors to creep in, which can inadvertently introduce multiple labels with spurious spelling variations.\n@@ -367,2 +380,3 @@\n-   **No**\n-   :   Continue\n+> ---\n+> ### Labels are case sensitive\n+> When using labels in Jira gadgets (like pie charts, heat maps, and statistics tables) Jira will be case sensitive and treat e.g. OpenJDK and openjdk as two different labels. Searching however is case insensitive. This means that if you group a set of issues in a gadget based on a label, and then click one of the groups to see the list of issues, that list will contain more results than the gadget if there are usages of the label with different casing. This can be very confusing and for this reason the recommendation is to stick with the commonly used case for all labels, regardless of your personal taste for upper or lower case letters. Most labels are lower case only, but there are examples where upper case letters are used in the most common version of a label. Use of the autocomplete popup window (described above) when adding labels will avoid inadvertent introduction of labels with differing case.\n@@ -370,1 +384,1 @@\n-#. **Is modification of C or Java platform-specific code needed?**\n+> ---\n@@ -372,2 +386,34 @@\n-   **Yes**\n-   :   Build and test on all relevant platforms.  Code under `src\/solaris` builds on Solaris, Linux, and MacOS X despite its name.\n+<table class=\"dictionary\">\n+  <tr style=\"text-align:left;\"><th>Label<\/th><th>Description<\/th><\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [*(Area)***`-interest`**]{#area-interest}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      Used to indicate that an area (usually a team or project) is interested in the issue. This label doesn't indicate ownership of the issue. E.g., **`redhat-interest`**, **`azul-interest`**, **`coin-interest`**\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [*(Area)***`-related`**]{#area-related}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      Used to indicate that an issue is related to a specific area (usually a feature or project). This label doesn't indicate ownership of the issue. E.g., **`graal-related`**, **`testcolo-related`**, **`doc-related`**\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [*(Rel)***`-bp`**]{#rel-bp}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      Used to indicate that a bug would be suitable for backport to a release *(Rel)*. This is not a decision to backport, just a suggestion \/ recommendation. E.g., **`11-bp`**\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [*(Rel)***`-critical-request`**]{#rel-critical-request}<br>\n+      [*(Rel)***`-critical-approved`**]{#rel-critical-approved}<br>\n+      [*(Rel)***`-critical-watch`**]{#rel-critical-watch}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      Used in the rampdown phases of specific releases to request approval of changes that requires project lead approval (or similar) to be included. *(Rel)* is the release in question. E.g., **`jdk11-critical-request`**\n@@ -375,2 +421,2 @@\n-   **No**\n-   :   Continue\n+      *(Rel)***`-critical-approved`** is used to signal that the change has been approved for inclusion. E.g., **`jdk11-critical-approved`**<br>\n+      *(Rel)***`-critical-watch`** is used for issues that must get into a specific release but risk running late. The label is used while the issue is still in progress and is replaced with *(Rel)***`-critical-request`** once the issue is resolved. E.g., **`jdk11-critical-watch`**\n@@ -378,1 +424,11 @@\n-#. **Run relevant regression and unit tests on all relevant platforms**\n+      These labels are always placed on the main JBS issue (the bug), never on backports or subtasks.\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [*(Rel)***`-defer-request`**]{#rel-defer-request}<br>\n+      [*(Rel)***`-defer-yes`**]{#rel-defer-yes}<br>\n+      [*(Rel)***`-defer-no`**]{#rel-defer-no}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      Used to request deferral of changes that requires project lead approval (or similar) to defer. *(Rel)* is the release in question. E.g., **`jdk12-defer-request`**\n@@ -380,1 +436,1 @@\n-   These include tests for external interfaces as well as other kinds of tests, e.g., HotSpot tests that use internal verification mechanisms.\n+      *(Rel)***`-defer-yes`** and *(Rel)***`-defer-no`** are used to indicate wether the deferral has been approved or not. E.g., **`jdk12-defer-yes`**\n@@ -382,1 +438,12 @@\n-#. **Run relevant JCK tests on all relevant platforms**\n+      These labels are always placed on the main JBS issue (the bug), never on backports or subtasks.\n+      Further details are found in the [JDK Release Process](https:\/\/openjdk.java.net\/jeps\/3#Bug-Deferral-Process).\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [*(Rel)***`-enhancement-request`**]{#rel-enhancement-request}<br>\n+      [*(Rel)***`-enhancement-yes`**]{#rel-enhancement-yes}<br>\n+      [*(Rel)***`-enhancement-no`**]{#rel-enhancement-no}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      Used in the rampdown phases to request the late inclusion of an enhancement. *(Rel)* is the release in question. E.g., **`jdk10-enhancement-request`**\n@@ -384,1 +451,1 @@\n-   Running JCK tests is particularly important if the change may have unexpected side-effects.\n+      *(Rel)***`-enhancement-yes`** and *(Rel)***`-enhancement-no`** are used to indicate the response on the request. E.g., **`jdk10-enhancement-yes`**, **`jdk10-enhancement-no`**\n@@ -386,1 +453,13 @@\n-#. **Request a review of the changes by sending an e-mail to the development alias**\n+      These labels are always placed on the main JBS issue (the bug), never on backports or subtasks.\n+      Further details are found in the [JDK Release Process](http:\/\/openjdk.java.net\/jeps\/3#Late-Enhancement-Request-Process).\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [*(Rel)***`-fix-request`**]{#rel-fix-request}<br>\n+      [*(Rel)***`-fix-SQE-ok`**]{#rel-fix-SQE-ok}<br>\n+      [*(Rel)***`-fix-yes`**]{#rel-fix-yes}<br>\n+      [*(Rel)***`-fix-no`**]{#rel-fix-no}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      Used in rampdown phase 2 to indicate that an issue would be of interest to get integrated into release *(Rel)*. E.g., **`jdk12u-fix-request`**\n@@ -388,1 +467,2 @@\n-   A patch can be submitted as described in [Contributing](https:\/\/openjdk.java.net\/contribute\/). Alternatively, a [\"webrev\"](webrevHelp.html) may be generated and uploaded to the [community code review](https:\/\/cr.openjdk.java.net\/) server. The complete webrev generation and upload procedure is described at [https:\/\/cr.openjdk.java.net](https:\/\/cr.openjdk.java.net\/).\n+      *(Rel)***`-fix-SQE-ok`** is used to indicate that the issue will be covered by the test plan for *(Rel)*. E.g., **`jdk12u-fix-SQE-ok`**<br>\n+      *(Rel)***`-fix-yes`** and *(Rel)***`-fix-no`** are used to indicate wether an issue has been approved for backport to *(Rel)*. E.g., **`jdk12u-fix-yes`**\n@@ -390,1 +470,18 @@\n-   Changeset pushes before the [Feature Complete](https:\/\/openjdk.java.net\/projects\/jdk8\/milestones#Feature_Complete) require at least one [Reviewer](https:\/\/openjdk.java.net\/bylaws#reviewer); pushes after the Feature Complete require at least two Reviewers. In either case, the more the merrier. Some teams may require more Reviewers. Check with members of the Project.\n+      These labels are always placed on the main JBS issue (the bug), never on backports or subtasks.\n+      Further details are found in the [JDK Release Process](http:\/\/openjdk.java.net\/jeps\/3#Fix-Request-Process).\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [*(Rel)***`-na`**]{#rel-na}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      Used to indicate that the issue does not affect release *(Rel)* or later. Could for instance be a bug in code that was removed in *(Rel)*.\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [*(Team)***`-triage-`***(Rel)*]{#team-triage-rel}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      Used to indicate that *(Team)* has triaged this issue for release *(Rel)*. It's encouraged that all open bugs are triaged on a regular basis so that old bugs aren't forgotten. It's therefore common to see several triage labels on the same issue which helps keeping track of which bugs has been triaged for each release. E.g., **`oracle-triage-13`**\n@@ -392,1 +489,34 @@\n-   Reviewers should examine not only the code being added or changed but also the relevant unit or regression tests.\n+      There are many label variants that include the word triage in some form. The form described above is the only one recommended. Please refrain from using other forms.\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [**`aot`**]{#aot}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      Used to indicate that an issue is related to Ahead of Time Compilation.\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+     [~~**`appcds`**~~]{#appcds}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      **Deprecated.** Was used to indicate that an issue was related to Application Class-Data Sharing. The **`cds`** label is now used instead.\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [**`c1`**]{#c1}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      Used to indicate that an issue is related to the C1 JIT compiler.\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [**`c2`**]{#c2}<br>\n+      **`c2-`**`.*`\n+    <\/td>\n+    <td class=\"dictionary\">\n+      Used to indicate that an issue is related to the C2 JIT compiler.\n@@ -394,3 +524,33 @@\n-   A change may require multiple Reviewers because it affects multiple areas.  Reviewers should be aware that they take full responsibility for the appropriateness and correctness of any changes in their area of expertise.  If something goes wrong (e.g., the build breaks) and the change&apos;s author is unavailable, they may be asked to deal with the problem.  Potential Reviewers are encouraged to refuse to review code for which they are not qualified.\n-\n-#. **Create a changeset**\n+      **`c2-`**`.*` labels are used to identify different c2 features. E.g., **`c2-intrinsic`**, **`c2-loopopts`**\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [**`cds`**]{#cds}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      Used to indicate that an issue is related to Class Data Sharing.\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [**`cleanup`**]{#cleanup}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      The **`cleanup`** label is used to indicate enhancements which has no semantic changes, whose only purpose is to make the code more maintainable or better looking.\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [**`docker`**]{#docker}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      Used to indicate that an issue is related to docker support.\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [**`gc-`**`.*`]{#gc}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      Used to indicate that an issue is related to a specific garbage collector in the JVM. E.g., **`gc-g1`**, **`gc-shenandoah`**, **`gc-serial`**, **`gc-epsilon`**\n@@ -398,1 +558,75 @@\n-   Follow the instructions in [Producing a Changeset](#producing-a-changeset).\n+      There are also labels in use to identify different GC features or areas rather than GC algorithms. E.g., **`gc-g1-fullgc`**, **`gc-largeheap`**, **`gc-performance`**\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [**`graal`**]{#graal}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      Used to indicate that this is a Graal issue. (Something that needs to be fixed in Graal rather than in OpenJDK.)\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [**`graal-integration`**]{#graal-integration}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      Reserved for Graal integration umbrella bugs. The automated integration script will break if this label is used for other bugs.\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [**`hgupdate-sync`**]{#hgupdate-sync}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      Used to identify backport issues automatically created by HG Updater (a script that monitors the hg repositories for changes).\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [~~**`hs-nightly`**~~]{#hs-nightly}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      **Deprecated.** Was used to tag bugs found in the HotSpot nightly testing. Since we are now running tiered testing there is no more nightly HotSpot testing. See **`tier`**`[1-8]`.\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [**`hs-sbr`**]{#hs-sbr}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      Used to tag bugs that are found in the \"same binary runs\", a stress testing method used to find intermittent failures.\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [~~**`hs-tier`**~~~~`[1-8]`~~]{#hs-tier}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      **Deprecated.** Was used to identify which HotSpot tier a test failure was seen in. We don't separate HotSpot tiers from the JDK tiers anymore. See **`tier`**`[1-8]`.\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [**`i18n`**]{#i18n}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      Used to indicate that an issue is related to internationalization.\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [**`integration-blocker`**]{#integration-blocker}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      Used to indicate that a bug is present in a downstream repository but not present in the upstream repository and is therefore blocking integration of downstream changes into upstream.\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [**`intermittent`**]{#intermittent}<br>\n+      [**`intermittent-environment`**]{#intermittent-environment}<br>\n+      [**`intermittent-hardware`**]{#intermittent-hardware}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      An intermittent issue is one that fails sometimes but not always. The exact reason for the intermittent failure is per definition unknown. Once the reason has been identified the issue is no more considered intermittent. An issue isn't intermittent if some characteristics has been found that triggers the failure consistently, even if the actual cause for the failure has not been found. For instance if a test fails every time it is executed on a specific host but not on other hosts it wouldn't be considered intermittent as it fails consistently on that specific host. In other cases it may be that we know that a test sometimes is unlucky in some respect and fails due to this. This test could still be considered intermittent even though we know what the reason is if the reason itself appears intermittently.\n@@ -400,1 +634,1 @@\n-#. **Update the bug content**\n+      Some issues may seem intermittent when looking at test results, even though the reason for failing is actually known. One example is where a test fails consistently on a specific host, or due to specific conditions in the environment. These failures should not be considered intermittent but it may still be valuable to tag these in JBS with one of the labels **`intermittent-hardware`** or **`intermittent-environment`**. This will help to faster identify that the cause of the failure is known without having to read through the entire bug.\n@@ -402,1 +636,18 @@\n-   Bug descriptions and comments should be written in a professional manner.\n+      A test that should be platform agnostic but is consistently failing on a specific OS would for instance be labeled with **`intermittent-environment`**, while a test that fails every time it is run on some specific hardware would be labeled with **`intermittent-hardware`**.\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [**`maintainer-pain`**]{#}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      Bugs that for some reason is wasting engineering time just by existing, or in other ways are causing pain for the maintainers of the JDK. Examples are bugs that occur frequently in testing or test failures that are time consuming to investigate before determining that it is a pre-existing bug.\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [**`noreg-`**`.*`]{#noreg}<br>\n+      [**`nounit-`**`.*`]{#nounit}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      The **`noreg-`**`.*` and **`nounit-`**`.*` labels are used to explain why a bugfix doesn't need\/have a regression test or a unit test. The suffix of the label is described below.\n@@ -404,1 +655,2 @@\n-#. **Push the changeset into the Project's forest**\n+[**`-sqe`**]{#noreg-sqe}\n+:    Change can be verified by running an existing SQE test suite; the bug should identify the suite and the specific test case(s).\n@@ -406,1 +658,2 @@\n-   Follow the instructions in [Producing a Changeset](#producing-a-changeset). If working with a Sponsor, send the changeset to the development mailing list so that they can handle the final push.\n+[**`-jck`**]{#noreg-jck}\n+:    Change can be verified by running the JCK; the bug should identify the specific test case(s).\n@@ -408,1 +661,2 @@\n-   The push will trigger a update to the bug which will make the following changes:\n+[**`-external`**]{#noreg-external}\n+:    Change can be verified by running an existing external test suite; the bug should identify the suite and the specific test case(s).\n@@ -410,4 +664,2 @@\n-    * Set the bug's \"Status\" to \"Resolved\" and \"Resolution to \"Fixed\".\n-    * Set the bug's \"Fix Version\/s\" to an appropriate release.\n-    * Set the bug's \"Resolved in Build\" to \"team\".\n-    * Add a Comment containing a reference to the changeset.\n+[**`-doc`**]{#noreg-doc}\n+:    Change only affects documentation.\n@@ -415,1 +667,2 @@\n-_Congratulations!_ Your changeset will now make its way towards a promoted build. When the changeset becomes part of a promoted build, the bug's \"Resolved in Build\" will have a value of \\\"b\\[1-9\\]\\[0-9\\]&ast;\\\" to indicate the build number.\n+[**`-demo`**]{#noreg-demo}\n+:    Change only affects demo code.\n@@ -417,1 +670,2 @@\n-# Testing Changes\n+[**`-build`**]{#noreg-build}\n+:    Change only affects build infrastructure (makefiles, copyrights, scripts, etc.).\n@@ -419,2 +673,2 @@\n-::: {.box}\n-[Quick Links]{.boxheader}\n+[**`-self`**]{#noreg-self}\n+:    Change is a fix to a regression or unit test itself.\n@@ -422,4 +676,2 @@\n-* [Using the run-test Framework](https:\/\/github.com\/openjdk\/jdk\/blob\/master\/doc\/testing.md)\n-* [JTReg Harness Documentation](https:\/\/openjdk.java.net\/jtreg\/)\n-* [Google Test Documentation](https:\/\/github.com\/google\/googletest\/blob\/master\/googletest\/docs\/primer.md)\n-:::\n+[**`-perf`**]{#noreg-perf}\n+:    Change is for a performance bug for which writing a regression test is infeasible; the bug should describe how to verify the fix.\n@@ -427,1 +679,2 @@\n-In addition to your own Java applications, OpenJDK have support for two test frameworks, JTReg and GTest. JTReg is a Java regression test framework that is used for most of the tests that are included in the OpenJDK source repository. The Google Test (GTest) framework is intended for unit testing of the C++ native code. Currently only JVM testing is supported by the GTest framework. Other areas use JTReg for unit testing of C++ code.\n+[**`-hard`**]{#noreg-hard}\n+:    It is too hard to write a regression or unit test for this bug (e.g., theoretical race condition, complex setup, reboot required, editing of installed files required, specific graphics card required); the bug should explain why.\n@@ -429,1 +682,2 @@\n-This section provides a brief summary of how to get started with testing in OpenJDK. For more information on configuration and how to use the OpenJDK test framework, a.k.a. \"run-test framework\", see [`doc\/testing.md`](https:\/\/github.com\/openjdk\/jdk\/blob\/master\/doc\/testing.md).\n+[**`-long`**]{#noreg-long}\n+:    Testing requires a very long running time (e.g., more than a few minutes).\n@@ -431,1 +685,2 @@\n-In general all changes should come with a regression test so if you're writing product code you should also be writing test code. There are a few examples where it doesn't make sence to write an explicit regression test. These should be tagged in JBS with one of the [noreg-labels](#noreg).\n+[**`-big`**]{#noreg-big}\n+:    Testing requires an unreasonable quantity of resources (e.g., tens of gigabytes of filesystem space).\n@@ -433,1 +688,2 @@\n-A few key items to think about when writing a regression test:\n+[**`-trivial`**]{#noreg-trivial}\n+:    Change is so trivial that nothing could possibly go wrong with it.\n@@ -435,5 +691,2 @@\n-* A regression test should execute fast - a few seconds at most\n-* The test should only test the desired functionality - if you have several features to test, write more tests\n-* The test should pass reliably on all supported platforms - watch out for platform-specific differences such as path separators\n-* Binary files should not be checked in, if your test needs to use one, the test should create it in some fashion\n-* Avoid shell scripts and relying on external commands as much as possible\n+[**`-cleanup`**]{#noreg-cleanup}\n+:    Change is a cleanup or refactoring of existing code that is covered by existing tests.\n@@ -441,1 +694,2 @@\n-The JTReg documentation has a section on [how to write good JTReg tests](https:\/\/openjdk.java.net\/jtreg\/writetests.html).\n+[**`-l10n`**]{#noreg-l10n}\n+:    Change only affects localized text.\n@@ -443,1 +697,2 @@\n-## JTReg\n+[**`-undo`**]{#noreg-undo}\n+:    Change is a reversion of a previous faulty change.\n@@ -445,1 +700,2 @@\n-In-depth documentation about the JTReg framework is found here: [JTReg harness](https:\/\/openjdk.java.net\/jtreg\/). JTReg itself is available in the [Code Tools Project](https:\/\/openjdk.java.net\/projects\/code-tools\/).\n+[**`-other`**]{#noreg-other}\n+:    Regression or unit test is unnecessary or infeasible for some other reason; the bug report should explain why.\n@@ -447,1 +703,41 @@\n-Below is a small example of a JTReg test. It’s a clean Java class with a main method that is called from the test harness. If the test fails we throw a RuntimeException. This is picked up by the harness and is reported as a test failure. Try to always write a meaningful message in the exception. One that actually helps with understanding what went wrong once the test fails.\n+Examples:  If a bug fix only corrects a change in the build system, then add the **`noreg-build`** label to the corresponding bug. If the change improves loop optimizations in HotSpot, then add **`nounit-perf`** to the corresponding bug.\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [**`performance`**]{#performance}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      Used to identify a bug with noticeable performance impact. Either positive or negative.\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [~~**`pit`**~~]{#pit}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      **Deprecated.** Was used to indicate that a failure happened in product integration testing (PIT). Since we are now running tiered testing there is no more PIT. See **`tier`**`[1-8]`.\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [**`problemlist`**]{#problemlist}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      One or more tests has been problemlisted due to this bug.\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [**`regression`**]{#regression}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      A regression is a bug that did not exist in the previous release. Ideally all regressions must be fixed in order to release the next major version.\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [**`release-note`**]{#release-note}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      Used to indicate that the issue is a release note. The release-note issue is a sub-task to the main JBS issue containing the text to be used in the release note. The release note must also have one of the following labels:\n@@ -449,13 +745,2 @@\n-    \/*\n-     * @test\n-     * @summary Make sure feature X handles Y correctly\n-     * @run main TestXY\n-     *\/\n-    public class TestXY {\n-        public static void main(String[] args) throws Exception {\n-            var result = X.y();\n-            if (result != expected_result) {\n-                throw new RuntimeException(\"X.y() gave \" + result + \", expexted \" + expected_result);\n-            }\n-        }\n-    }\n+[**`RN-NewFeature`**]{#RN-NewFeature}\n+:   New Feature or enhancement.\n@@ -463,1 +748,2 @@\n-This example only utilizes three JTReg specific tags, `@test`, `@summary`, and `@run`. `@test` simply tells JTReg that this class is a test, and `@summary` provides a description of the test. `@run` tells JTReg how to execute the test. In this case we simply tell JTReg to execute the main method of the class `TestXY`. `@run` is not strictly necessary for JTReg to execute the test, an implicit `@run` tag will be added if none exists. However, for clarity and in order to avoid bugs it's recommended to always explicitly use the `@run` tag.\n+[**`RN-IssueFixed`**]{#RN-IssueFixed}\n+:   A significant issue which has been fixed, would normally be a regression or an issue which unknowingly released in a new feature.\n@@ -465,1 +751,2 @@\n-There are several other tags that can be used in JTReg tests. You can for instance associate the test with a specific bug that this test is a regression test for.\n+[**`RN-KnownIssue`**]{#RN-KnownIssue}\n+:   An issue that was not possible to fix by the time the release was GA'd.\n@@ -467,1 +754,258 @@\n-    @bug 7000001\n+[**`RN-Removed`**]{#RN-Removed}\n+:   Covers an API, feature, tool etc. which has been removed from the JDK.\n+\n+[**`RN-Deprecated`**]{#RN-Deprecated}\n+:   Covers an API that has been marked as deprecated in the release.\n+\n+[**`RN-Important`**]{#RN-Important}\n+:   Used to indicate that the release note should be highlighted in some fashion, such as listing it at the beginning of the release notes.\n+\n+[**`RN-`(distro)**]{#RN-distro}\n+:   Used to indicate that the release note is only relevant for a specific JDK distribution. E.g. RN-Oracle\n+\n+[~~**`RN-Change`**~~]{#RN-Change}\n+:   Deprecated.\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [**`release-note=yes`**]{#release-note-yes}<br>\n+      [**`release-note=no`**]{#release-note-no}<br>\n+      [~~**`release-note=done`**~~]{#release-note-done}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      Used to indicate wether a change requires a release note or not. The labels are always placed on the main JBS issue, never on the actual release note issue.\n+\n+      **`release-note=done`** is deprecated and should no longer be used.\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [**`starter`**]{#starter}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      A starter bug is a well contained, small issue that is suitable for someone new to the codebase.\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [**`startup`**]{#startup}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      Used to identify a bug as affecting Java SE startup performance.\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [**`tck-red-`***(Rel)*]{#tck-red-rel}<br>\n+      [~~**`tck-red`**~~]{#tck-red}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      Used to identify TCK conformance stoppers (e.g. failure of a valid TCK test that exists in a shipped TCK). The release number indicates which release of the TCK that failed. E.g., **`tck-red-11`**\n+\n+      There are **`tck-red`** labels without the release number out there as well. This usage is deprecated.\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [~~**`test`**~~]{#test}<br>\n+      [~~**`test-only`**~~]{#test-only}<br>\n+      [~~**`testbug`**~~]{#testbug}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      The labels **`test`**, **`test-only`**, and **`testbug`** are deprecated and should no longer be used. Use [**`noreg-self`**](#noreg) to indicate that an issue is a bug in test code.\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [**`tier`**`[1-8]`]{#tier}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      Used to indicate which tier in the jdk\/jdk CI pipeline a test failure has been seen in. Lower tiers would in general mean higher urgency to fix the issue. E.g., **`tier1`**, **`tier2`**\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [**`webbug`**]{#webbug}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      Used to identify a bug as submitted on [bugs.java.com](https:\/\/bugs.java.com\/bugdatabase\/).\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [**`zgc`**]{#zgc}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      Used to indicate that an issue is related to ZGC.\n+    <\/td>\n+  <\/tr>\n+<\/table>\n+\n+# Fixing a Bug\n+\n+This is the list of steps which should be performed when fixing a small bug. Small bugs include typos in code or specification, algorithm improvements for correctness or performance, and code changes required to correctly implement the specification.\n+\n+> ---\n+> Some steps refer to operations which can not be performed directly without the assistance of a [Project Committer](https:\/\/openjdk.java.net\/bylaws#committer). For example, any changes to the [bug database](https:\/\/bugs.openjdk.java.net) fall into this category. Since these steps are required, [Contributors](https:\/\/openjdk.java.net\/bylaws#contributor) are urged to work with their [Sponsors](https:\/\/openjdk.java.net\/sponsor\/) to complete these tasks.\n+\n+> ---\n+\n+For the purposes of brevity this document will use the term \"bug\" to refer to both bugs and enhancements unless otherwise noted. Hence \"fix for a bug\" could also imply \"implementation for an enhancement\".\n+\n+#. **Discuss the intended change**\n+\n+   Send an e-mail to the appropriate development mailing list for the Project that maintains the code. The e-mail should have a subject line of the form:\n+\n+       6543210: My favorite bug\n+\n+   where `6543210` is replaced with the actual bug id number or \"[NEW BUG]\" if the bug id is not known and `My favorite bug` is replaced with the bug's summary.  The message should describe the intended change, which components may be affected, and any other risks or concerns.\n+\n+#. **Does a bug id exist for the work?**\n+\n+   **Yes**\n+   :   Continue\n+\n+   **No**\n+   :   Create a bug in an appropriate component\/sub-component.\n+\n+#. **Set the bug status to \"Open\"**\n+\n+   This communicates intent to fix the bug to other members of the Project. It also sets the expectation for downstream teams such as SQE and JCK that the bug will be fixed in an upcoming integration.\n+\n+#. **Does the fix for the bug require a specification change, directly affect an external interface, or otherwise have a compatibility impact?**\n+\n+   **Yes**\n+   :   Submission of a CSR request is required. The CSR must be [approved](#approved) before the bug fix is pushed to a feature release or update release repository. The work may begin concurrently with the CSR review, but may need to be modified in response to CSR feedback.\n+\n+   **No**\n+   :   Continue\n+\n+#. **Fix the bug**\n+\n+   Assuming that the development team approves of the intended approach, begin working on the code using the latest source available from the appropriate OpenJDK Project [repository](https:\/\/hg.openjdk.java.net).\n+\n+#. [**Is it possible to write a test to detect the bug?**]\n+\n+   **Yes**\n+   :   For bugs, provide a [jtreg](https:\/\/openjdk.java.net\/jtreg\/) regression test as part of the changeset. For enhancements that directly affect one or more exported interfaces, add an adequate set of jtreg unit tests as part of the changeset. By convention all regression and unit tests should contain a [\\@bug tag](https:\/\/openjdk.java.net\/jtreg\/tag-spec.html#INFORMATIONAL_TAGS9) referencing at least one bugid.\n+\n+   :   An entirely new test (or tests) may not be required. For example, if the bug is an existing regression test failure, then when fixing the bug you should just add the new bug ID to the list of space-delimited bugs in the [\\@bug tag](https:\/\/openjdk.java.net\/jtreg\/tag-spec.html#INFORMATIONAL_TAGS) of the failing regression test, even if the test did not need to be updated.\n+\n+   **No**\n+   :   An explanation for why a test is unnecessary or infeasible is required. Such an explanation is recorded by adding a label, and possibly a comment, to the bug report. The label has the prefix **`noreg`** for regression tests and **`nounit`** for unit tests. The suffix of the label is described in detail in the [JBS Label Dictionary](#noreg)\n+\n+#. **Is modification of shared Java code needed?**\n+\n+   **Yes**\n+   :   It is often sufficient to build and test on a single platform, but sometimes it is not. Use discretion.\n+\n+   **No**\n+   :   Continue\n+\n+#. **Is modification of shared C code needed?**\n+\n+   **Yes**\n+   :   Build and test on at least one instance of all three of the supported operating systems (Solaris, Linux, and Windows).\n+\n+   **No**\n+   :   Continue\n+\n+#. **Is modification of C or Java platform-specific code needed?**\n+\n+   **Yes**\n+   :   Build and test on all relevant platforms.  Code under `src\/solaris` builds on Solaris, Linux, and MacOS X despite its name.\n+\n+   **No**\n+   :   Continue\n+\n+#. **Run relevant regression and unit tests on all relevant platforms**\n+\n+   These include tests for external interfaces as well as other kinds of tests, e.g., HotSpot tests that use internal verification mechanisms.\n+\n+#. **Run relevant JCK tests on all relevant platforms**\n+\n+   Running JCK tests is particularly important if the change may have unexpected side-effects.\n+\n+#. **Request a review of the changes by sending an e-mail to the development alias**\n+\n+   A patch can be submitted as described in [Contributing](https:\/\/openjdk.java.net\/contribute\/). Alternatively, a [\"webrev\"](webrevHelp.html) may be generated and uploaded to the [community code review](https:\/\/cr.openjdk.java.net\/) server. The complete webrev generation and upload procedure is described at [https:\/\/cr.openjdk.java.net](https:\/\/cr.openjdk.java.net\/).\n+\n+   Changeset pushes before the [Feature Complete](https:\/\/openjdk.java.net\/projects\/jdk8\/milestones#Feature_Complete) require at least one [Reviewer](https:\/\/openjdk.java.net\/bylaws#reviewer); pushes after the Feature Complete require at least two Reviewers. In either case, the more the merrier. Some teams may require more Reviewers. Check with members of the Project.\n+\n+   Reviewers should examine not only the code being added or changed but also the relevant unit or regression tests.\n+\n+   A change may require multiple Reviewers because it affects multiple areas.  Reviewers should be aware that they take full responsibility for the appropriateness and correctness of any changes in their area of expertise.  If something goes wrong (e.g., the build breaks) and the change&apos;s author is unavailable, they may be asked to deal with the problem.  Potential Reviewers are encouraged to refuse to review code for which they are not qualified.\n+\n+#. **Create a changeset**\n+\n+   Follow the instructions in [Producing a Changeset](#producing-a-changeset).\n+\n+#. **Update the bug content**\n+\n+   Bug descriptions and comments should be written in a professional manner.\n+\n+#. **Push the changeset into the Project's forest**\n+\n+   Follow the instructions in [Producing a Changeset](#producing-a-changeset). If working with a Sponsor, send the changeset to the development mailing list so that they can handle the final push.\n+\n+   The push will trigger a update to the bug which will make the following changes:\n+\n+    * Set the bug's \"Status\" to \"Resolved\" and \"Resolution to \"Fixed\".\n+    * Set the bug's \"Fix Version\/s\" to an appropriate release.\n+    * Set the bug's \"Resolved in Build\" to \"team\".\n+    * Add a Comment containing a reference to the changeset.\n+\n+_Congratulations!_ Your changeset will now make its way towards a promoted build. When the changeset becomes part of a promoted build, the bug's \"Resolved in Build\" will have a value of \\\"b\\[1-9\\]\\[0-9\\]&ast;\\\" to indicate the build number.\n+\n+# Testing the JDK\n+\n+::: {.box}\n+[Quick Links]{.boxheader}\n+\n+* [Using the run-test Framework](https:\/\/github.com\/openjdk\/jdk\/blob\/master\/doc\/testing.md)\n+* [JTReg Harness Documentation](https:\/\/openjdk.java.net\/jtreg\/)\n+* [Google Test Documentation](https:\/\/github.com\/google\/googletest\/blob\/master\/googletest\/docs\/primer.md)\n+:::\n+\n+In addition to your own Java applications, OpenJDK have support for two test frameworks, JTReg and GTest. JTReg is a Java regression test framework that is used for most of the tests that are included in the OpenJDK source repository. The Google Test (GTest) framework is intended for unit testing of the C++ native code. Currently only JVM testing is supported by the GTest framework. Other areas use JTReg for unit testing of C++ code.\n+\n+This section provides a brief summary of how to get started with testing in OpenJDK. For more information on configuration and how to use the OpenJDK test framework, a.k.a. \"run-test framework\", see [`doc\/testing.md`](https:\/\/github.com\/openjdk\/jdk\/blob\/master\/doc\/testing.md).\n+\n+In general all changes should come with a regression test so if you're writing product code you should also be writing test code. There are a few examples where it doesn't make sence to write an explicit regression test. These should be tagged in JBS with one of the [noreg-labels](#noreg).\n+\n+A few key items to think about when writing a regression test:\n+\n+* A regression test should execute fast - a few seconds at most\n+* The test should only test the desired functionality - if you have several features to test, write more tests\n+* The test should pass reliably on all supported platforms - watch out for platform-specific differences such as path separators\n+* Binary files should not be checked in, if your test needs to use one, the test should create it in some fashion\n+* Avoid shell scripts and relying on external commands as much as possible\n+\n+The JTReg documentation has a section on [how to write good JTReg tests](https:\/\/openjdk.java.net\/jtreg\/writetests.html).\n+\n+## JTReg\n+\n+In-depth documentation about the JTReg framework is found here: [JTReg harness](https:\/\/openjdk.java.net\/jtreg\/). JTReg itself is available in the [Code Tools Project](https:\/\/openjdk.java.net\/projects\/code-tools\/).\n+\n+Below is a small example of a JTReg test. It’s a clean Java class with a main method that is called from the test harness. If the test fails we throw a RuntimeException. This is picked up by the harness and is reported as a test failure. Try to always write a meaningful message in the exception. One that actually helps with understanding what went wrong once the test fails.\n+\n+    \/*\n+     * @test\n+     * @summary Make sure feature X handles Y correctly\n+     * @run main TestXY\n+     *\/\n+    public class TestXY {\n+        public static void main(String[] args) throws Exception {\n+            var result = X.y();\n+            if (result != expected_result) {\n+                throw new RuntimeException(\"X.y() gave \" + result + \", expexted \" + expected_result);\n+            }\n+        }\n+    }\n+\n+This example only utilizes three JTReg specific tags, `@test`, `@summary`, and `@run`. `@test` simply tells JTReg that this class is a test, and `@summary` provides a description of the test. `@run` tells JTReg how to execute the test. In this case we simply tell JTReg to execute the main method of the class `TestXY`. `@run` is not strictly necessary for JTReg to execute the test, an implicit `@run` tag will be added if none exists. However, for clarity and in order to avoid bugs it's recommended to always explicitly use the `@run` tag.\n+\n+There are several other tags that can be used in JTReg tests. You can for instance associate the test with a specific bug that this test is a regression test for.\n+\n+    @bug 7000001\n@@ -560,1 +1104,109 @@\n-# Producing a Changeset\n+## Excluding a Test\n+\n+Sometimes tests break. It could be e.g. due to bugs in the test itself, due to changed functionality in the code that the test is testing, or changes in the environment where the test is executed. While working on a fix, it can be useful to stop the test from being executed in everyone else's testing to reduce noise, especially if the test is expected to fail for more than a day. There are two ways to stop a test from being run in standard test runs: ProblemListing and using the `@ignore` keyword. Removing tests isn't the standard way to remove a failure. A failing test is often a regression and should ideally be handled with high urgency.\n+\n+I'll say it right away so that it's not forgotten at the end: Remember to remove the JBS id from the ProblemList or the test when the bug is closed. This is especially easy to forget if a bug is closed as a duplicate or 'Will Not Fix'. jcheck will report an error and prohibit a push if a PR is created for an issue that is found in a ProblemList if the fix doesn't remove the bug ID from the ProblemList.\n+\n+### ProblemListing jtreg tests\n+\n+ProblemListing should be used for a short term exclusion while a test is being fixed, and for the exclusion of intermittently failing tests that cause too much noise, but can still be useful to run on an ad-hoc basis. ProblemListing is done in the file `ProblemList.txt`. There are actually several ProblemList files to choose from. Their location and name hint about what area or feature each file belongs to. Each file has sections for different components. All ProblemList files complement each other to build the total set of tests to exclude in JTReg runs.\n+\n+~~~\n+test\/hotspot\/jtreg\/ProblemList.txt\n+test\/hotspot\/jtreg\/ProblemList-aot.txt\n+test\/hotspot\/jtreg\/ProblemList-graal.txt\n+test\/hotspot\/jtreg\/ProblemList-non-cds-mode.txt\n+test\/hotspot\/jtreg\/ProblemList-Xcomp.txt\n+test\/hotspot\/jtreg\/ProblemList-zgc.txt\n+test\/jaxp\/ProblemList.txt\n+test\/jdk\/ProblemList.txt\n+test\/jdk\/ProblemList-aot.txt\n+test\/jdk\/ProblemList-graal.txt\n+test\/jdk\/ProblemList-Xcomp.txt\n+test\/langtools\/ProblemList.txt\n+test\/langtools\/ProblemList-graal.txt\n+test\/lib-test\/ProblemList.txt\n+~~~\n+\n+Use the suitable ProblemList and add a line like this in the proper section:\n+\n+~~~\n+foo\/bar\/MyTest.java                        4711   windows-all\n+~~~\n+\n+In this example, `MyTest.java` is ProblemListed on windows, tracked by bug `JDK-4711`.\n+\n+Currently there's [no support for multiple lines for the same test](https:\/\/bugs.openjdk.java.net\/browse\/CODETOOLS-7902481). For this reason it's important to always make sure there's no existing entry for the test before adding a new one, as multiple entries might lead to unexpected results, e.g.\n+\n+~~~\n+foo\/bar\/MyTest.java                        4710   generic-all\n+...\n+foo\/bar\/MyTest.java                        4711   windows-all\n+~~~\n+\n+This would lead to `sun.tools.jcmd.MyTest.java` being ProblemListed only on `windows-all`. The proper way to write this is:\n+\n+~~~\n+foo\/bar\/MyTest.java                        4710,4711   generic-all,windows-all\n+~~~\n+\n+Although `windows-all` isn't strictly required in this example, it's preferable to specify platforms for each bugid (unless they are all `generic-all`), this makes it easier to remove one of the bugs from the list.\n+\n+#### ProblemListing some, but not all, test cases in a file\n+\n+Some tests contain several test cases and there may be a need to ProblemList only a few of them. To do this use the full test name, i.e. `<filename> + # + <test case id>`, where test case id can be specified in the test header. If no id is specified each test case can be referenced with `id` + ordinary number of the test case in the test file.\n+\n+Let's assume we have four test cases in `foo\/bar\/MyTest.java`:\n+\n+~~~\n+\/* @test *\/\n+\/* @test id=fancy_name *\/\n+\/* @test *\/\n+\/* @test *\/\n+~~~\n+\n+A ProblemList entry that excludes the first, second, and third test case would look like this:\n+\n+~~~\n+foo\/bar\/MyTest.java#id0          4720  generic-all\n+foo\/bar\/MyTest.java#fancy_name   4721  generic-all\n+foo\/bar\/MyTest.java#id2          4722  generic-all\n+~~~\n+\n+Due to an issue described in [CODETOOLS-7902712](https:\/\/bugs.openjdk.java.net\/browse\/CODETOOLS-7902712) tests that contains more than one `@test` must actually use this way to specify all test cases if all of them should be ProblemListed. Specifying just the test name will not work.\n+\n+#### Running ProblemListed tests\n+\n+To run ad-hoc runs of ProblemListed tests use `RUN_PROBLEM_LISTS=true`.\n+\n+~~~\n+make test TEST=... JTREG=RUN_PROBLEM_LISTS=true\n+~~~\n+\n+### Exclude jtreg tests using `@ignore`\n+\n+The `@ignore` keyword is used in the test source code. This is mainly used for tests that are so broken that they may be harmful or useless, and is less common than ProblemListing. Examples can be tests that don't compile because something changed in the platform; or a test which might remove your `\/etc\/shadow`. Use `@ignore` with a bug reference in the test case to prevent the test from being run.\n+\n+~~~java\n+\/**\n+ *  @test\n+ *  @ignore 4711\n+ *\n+~~~\n+\n+In this example, `MyTest.java` is excluded, tracked by bug `JDK-4711`. `@ignore` should always be placed directly before the first `@run` line in the test.\n+\n+### Dealing with JBS bugs for test exclusion\n+\n+ProblemListing and `@ignore`-ing are done in the JDK source tree, that means a check-in into the repository is needed. This in turn means that a unique JBS issue and a code review are needed. This is a good thing since it makes test problems visible.\n+\n+* **Code review**: ProblemListing a test is considered a [trivial](#trivial) change.\n+* **JBS issue**: A JBS issue is obviously created for the bug that caused the failure, we call this the _main issue_. To exclude the test, create a subtask to the main issue. Also add the label [`problemlist`](#problemlist) to the main issue.\n+\n+The fix for the main issue should remove the test from the ProblemList or remove the `@ignore` keyword from the test.\n+\n+#### Triage excluded issues\n+\n+After a failure is handled by excluding a test, the main JBS issue should be re-triaged and possibly given a new priority. This should be handled by the standard triage process. A test exclusion results in an outage in our testing. This outage should be taken into consideration when triaging, in addition to the impact of the bug itself.\n+\n+# Producing a Changeset\n@@ -846,148 +1498,0 @@\n-# What Happens Next\n-\n-::: {.box}\n-[Quick Links]{.boxheader}\n-\n-* [Bug Report Tool](https:\/\/bugreport.java.com\/)\n-* [JDK Bug System (JBS)](https:\/\/bugs.openjdk.java.net\/)\n-:::\n-\n-This section describes what might happen after a changeset gets into the build, for example a bug might be filed or a backport could be requested.\n-\n-## Filing a Bug\n-\n-When a new failure is found in the JDK a bug should be filed to describe and track the issue. Depending on your role in the OpenJDK you can either use the [Bug Report Tool](https:\/\/bugreport.java.com\/) or, if you are [Author](https:\/\/openjdk.java.net\/bylaws#author) in an OpenJDK [Project](https:\/\/openjdk.java.net\/bylaws#project), report the bug directly in the [JDK Bug System](https:\/\/bugs.openjdk.java.net\/). Try to make the bug report as complete as possible to make it easier to triage and investigate the bug.\n-\n-It's not the reporter's responsibility to set a correct priority, but a qualified guess is always better than a default value. To help with setting the right priority consider things like how the bug impacts the product and our testing, how likely is it that the bug triggers, how difficult is it to work around the bug if it's not fixed soon, and whether it's a recent regression, since that may break existing applications. Regressions are often higher priority than long standing bugs and may block a release if not fixed.\n-\n-A few things to keep in mind when filing a new bug:\n-\n-* Before filing a bug, verify that there isn't already a bug filed for this issue.\n-* If you suspect that the bug is a vulnerability, don't file a JBS issue. Instead send your bugreport to [vuln-dev@openjdk.java.net](mailto:vuln-dev@openjdk.java.net)\n-* Make a reasonable attempt to narrow down which build or release the failure first appeared in.\n-* Add relevant labels like [`intermittent`](#intermittent), [`regression`](#regression), [`noreg-self`](#noreg-self), ['tier1'](#tier) etc.\n-* Set affects version to the JDK version(s) where the failure was seen.\n-  * If the failure is found in an update train of the JDK (e.g. 11.0.x), please make an effort to see if the bug is also present in [mainline](https:\/\/hg.openjdk.java.net\/jdk\/jdk\/).\n-* Set priority (see above)\n-* In the description, always include (if possible):\n-  * full name of the failing tests\n-  * error messages\n-  * assert messages\n-  * stack trace\n-  * command line information\n-  * relevant information from the logs\n-* If the failure is not reproducible with an existing OpenJDK test, attach a reproducer if possible.\n-* Only set CPU and\/or OS fields if the bug **ONLY** happens on that particular platform.\n-* Always file separate bugs for different issues.\n-  * If two crashes looks related but not similar enough to for sure be the same, it is easier to close a bug as a duplicate than it is to extract the relevant info from a bug to create a new one later.\n-\n-To find out which component to use for different bugs, consult the [directory to area mapping](#directory-to-area-mapping).\n-\n-## Excluding a Test\n-\n-Sometimes tests break. It could be e.g. due to bugs in the test itself, due to changed functionality in the code that the test is testing, or changes in the environment where the test is executed. While working on a fix, it can be useful to stop the test from being executed in everyone else's testing to reduce noise, especially if the test is expected to fail for more than a day. There are two ways to stop a test from being run in standard test runs: ProblemListing and using the `@ignore` keyword. Removing tests isn't the standard way to remove a failure. A failing test is often a regression and should ideally be handled with high urgency.\n-\n-I'll say it right away so that it's not forgotten at the end: Remember to remove the JBS id from the ProblemList or the test when the bug is closed. This is especially easy to forget if a bug is closed as a duplicate or 'Will Not Fix'. jcheck will report an error and prohibit a push if a PR is created for an issue that is found in a ProblemList if the fix doesn't remove the bug ID from the ProblemList.\n-\n-### ProblemListing jtreg tests\n-\n-ProblemListing should be used for a short term exclusion while a test is being fixed, and for the exclusion of intermittently failing tests that cause too much noise, but can still be useful to run on an ad-hoc basis. ProblemListing is done in the file `ProblemList.txt`. There are actually several ProblemList files to choose from. Their location and name hint about what area or feature each file belongs to. Each file has sections for different components. All ProblemList files complement each other to build the total set of tests to exclude in JTReg runs.\n-\n-~~~\n-test\/hotspot\/jtreg\/ProblemList.txt\n-test\/hotspot\/jtreg\/ProblemList-aot.txt\n-test\/hotspot\/jtreg\/ProblemList-graal.txt\n-test\/hotspot\/jtreg\/ProblemList-non-cds-mode.txt\n-test\/hotspot\/jtreg\/ProblemList-Xcomp.txt\n-test\/hotspot\/jtreg\/ProblemList-zgc.txt\n-test\/jaxp\/ProblemList.txt\n-test\/jdk\/ProblemList.txt\n-test\/jdk\/ProblemList-aot.txt\n-test\/jdk\/ProblemList-graal.txt\n-test\/jdk\/ProblemList-Xcomp.txt\n-test\/langtools\/ProblemList.txt\n-test\/langtools\/ProblemList-graal.txt\n-test\/lib-test\/ProblemList.txt\n-~~~\n-\n-Use the suitable ProblemList and add a line like this in the proper section:\n-\n-~~~\n-foo\/bar\/MyTest.java                        4711   windows-all\n-~~~\n-\n-In this example, `MyTest.java` is ProblemListed on windows, tracked by bug `JDK-4711`.\n-\n-Currently there's [no support for multiple lines for the same test](https:\/\/bugs.openjdk.java.net\/browse\/CODETOOLS-7902481). For this reason it's important to always make sure there's no existing entry for the test before adding a new one, as multiple entries might lead to unexpected results, e.g.\n-\n-~~~\n-foo\/bar\/MyTest.java                        4710   generic-all\n-...\n-foo\/bar\/MyTest.java                        4711   windows-all\n-~~~\n-\n-This would lead to `sun.tools.jcmd.MyTest.java` being ProblemListed only on `windows-all`. The proper way to write this is:\n-\n-~~~\n-foo\/bar\/MyTest.java                        4710,4711   generic-all,windows-all\n-~~~\n-\n-Although `windows-all` isn't strictly required in this example, it's preferable to specify platforms for each bugid (unless they are all `generic-all`), this makes it easier to remove one of the bugs from the list.\n-\n-#### ProblemListing some, but not all, test cases in a file\n-\n-Some tests contain several test cases and there may be a need to ProblemList only a few of them. To do this use the full test name, i.e. `<filename> + # + <test case id>`, where test case id can be specified in the test header. If no id is specified each test case can be referenced with `id` + ordinary number of the test case in the test file.\n-\n-Let's assume we have four test cases in `foo\/bar\/MyTest.java`:\n-\n-~~~\n-\/* @test *\/\n-\/* @test id=fancy_name *\/\n-\/* @test *\/\n-\/* @test *\/\n-~~~\n-\n-A ProblemList entry that excludes the first, second, and third test case would look like this:\n-\n-~~~\n-foo\/bar\/MyTest.java#id0          4720  generic-all\n-foo\/bar\/MyTest.java#fancy_name   4721  generic-all\n-foo\/bar\/MyTest.java#id2          4722  generic-all\n-~~~\n-\n-Due to an issue described in [CODETOOLS-7902712](https:\/\/bugs.openjdk.java.net\/browse\/CODETOOLS-7902712) tests that contains more than one `@test` must actually use this way to specify all test cases if all of them should be ProblemListed. Specifying just the test name will not work.\n-\n-#### Running ProblemListed tests\n-\n-To run ad-hoc runs of ProblemListed tests use `RUN_PROBLEM_LISTS=true`.\n-\n-~~~\n-make test TEST=... JTREG=RUN_PROBLEM_LISTS=true\n-~~~\n-\n-### Exclude jtreg tests using `@ignore`\n-\n-The `@ignore` keyword is used in the test source code. This is mainly used for tests that are so broken that they may be harmful or useless, and is less common than ProblemListing. Examples can be tests that don't compile because something changed in the platform; or a test which might remove your `\/etc\/shadow`. Use `@ignore` with a bug reference in the test case to prevent the test from being run.\n-\n-~~~java\n-\/**\n- *  @test\n- *  @ignore 4711\n- *\n-~~~\n-\n-In this example, `MyTest.java` is excluded, tracked by bug `JDK-4711`. `@ignore` should always be placed directly before the first `@run` line in the test.\n-\n-### Dealing with JBS bugs for test exclusion\n-\n-ProblemListing and `@ignore`-ing are done in the JDK source tree, that means a check-in into the repository is needed. This in turn means that a unique JBS issue and a code review are needed. This is a good thing since it makes test problems visible.\n-\n-* **Code review**: ProblemListing a test is considered a [trivial](#trivial) change.\n-* **JBS issue**: A JBS issue is obviously created for the bug that caused the failure, we call this the _main issue_. To exclude the test, create a subtask to the main issue. Also add the label [`problemlist`](#problemlist) to the main issue.\n-\n-The fix for the main issue should remove the test from the ProblemList or remove the `@ignore` keyword from the test.\n-\n-#### Triage excluded issues\n-\n-After a failure is handled by excluding a test, the main JBS issue should be re-triaged and possibly given a new priority. This should be handled by the standard triage process. A test exclusion results in an outage in our testing. This outage should be taken into consideration when triaging, in addition to the impact of the bug itself.\n-\n@@ -1038,42 +1542,1 @@\n-# About this Guide\n-\n-This guide is being maintained through the [OpenJDK Developers' Guide Project](https:\/\/openjdk.java.net\/census#guide). The [source repository](https:\/\/github.com\/openjdk\/guide) is available at GitHub. The revision hash at the bottom of each page refers to the latest change that modified that particular page.\n-\n-Comments and questions may be sent to [guide-dev (at) openjdk.java.net](mailto:guide-dev-at-openjdk.java.net). Please let us know if there's anything in the guide that isn't clear.\n-\n-# Glossary\n-\n-[**accepted**]{#accepted} (by the CCC)\n-:   The stage of the CCC process after \"DRAFT\", and \"PROPOSED\". At this stage the primary goals are to ensure that the proposed changes are suitable for the release in a general sense and that the requisite JCK and SQE resources will be available.\n-\n-[**approved**]{#approved} (by the CCC)\n-:   The stage of the CCC process after \"FINAL\". The CCC has approved the final version of the request which permits push into the project forest.\n-\n-[**changeset**]{#changeset}\n-:   A collection of changes with respect to the current clone of a repository.\n-\n-[**development freeze**]{#developmentfreeze}\n-:   The date by which all planned work should be complete for a particular line of development. After a line's development freeze, only exit-criteria bugs may be fixed in that line.\n-\n-[**forest**]{#forest}\n-:   A collection of Mercurial repositories which can be managed as a set of nested repositories. The name \"Forest\" originally came from the Mercurial \"Forest Extension\" which can be used with some versions of Mercurial, but in general is no longer recommended. The script `common\/bin\/hgforest.sh` can be used to apply a Mercurial `hg` command to all the repositories in a forest.\n-\n-[**Group**]{#group}\n-:   A collection of [Participants](https:\/\/openjdk.java.net\/bylaws#participant) who engage in open conversation about a common interest. That interest may be in the creation, enhancement, or maintenance of a specific body of code or it may lie in other areas, e.g., quality, documentation, or evangelism. See the [Group overview](https:\/\/openjdk.java.net\/groups\/).\n-\n-[**Mercurial**]{#mercurial}\n-:   A free, cross-platform, distributed source management tool. Source bundles and binary packages for Mercurial are available at [https:\/\/www.selenic.com\/mercurial\/wiki\/index.cgi](https:\/\/www.selenic.com\/mercurial\/wiki\/index.cgi\/Mercurial). The main Mercurial documentation is available at [http:\/\/hgbook.red-bean.com](https:\/\/hgbook.red-bean.com\/).\n-\n-[**Project**]{#project}\n-:   A collaborative effort to produce a specific artifact, which may be a body of code, or documentation, or some other material. See the [Project overview](https:\/\/openjdk.java.net\/projects\/).\n-\n-[**repository**]{#repository}\n-:   A directory tree in the filesystem that Mercurial treats specially. This tree contains the source files and their revision history.\n-\n-[**trivial**]{#trivial}\n-:   A change that is small, well contained, and makes no semantic changes. Typically fixing obvious typos or renaming some local identifier. Trivial changes can also be pushing an already reviewed change that was missed in an earlier push (e.g. forgot to add a file) or generated changes like an [`hg backout`](#backing-out-a-change). It's up to the author of a change to claim that the change is trivial in the RFR, and it's up to the Reviewer whether to approve such a claim. A change is only trivial if the Reviewer says so. Trivial changes does not have to wait 24 hours before being pushed, and only needs one Reviewer, even in areas where stricter rules for pushing normally applies.\n-\n-[**webrev**]{#webrev}\n-:   A tool and its output. In JDK release forests, the script, [`webrev.ksh`](https:\/\/hg.openjdk.java.net\/code-tools\/webrev\/raw-file\/tip\/webrev.ksh), examines a forest or repository to generate a set of web-based views of differences.\n-\n-# Code Owners\n+# Code Owners\n@@ -1274,44 +1737,1 @@\n-# JBS - JDK Bug System\n-\n-[JBS](https:\/\/bugs.openjdk.java.net\/) is an issue tracker used by many OpenJDK projects.\n-\n-## How to fix an incorrect backport creation\n-\n-If a main bug is targeted to a release and the fix is pushed to a different release, then a backport bug is automatically created. Usually this is a \"good thing\", e.g., when you are backporting a fix to an earlier release, but not always... If the main bug is targeted to a later release (due to schedule planning), but someone finds the time to fix that bug in the current release, then the bug should be retargeted to the current release before pushing the fix. However, sometimes we forget to do that.\n-\n-Here is how to fix that:\n-\n-> ---\n-> In this example a fix was pushed to JDK N (a.k.a. the current release) while the JBS bug was targeted to JDK N+1 (a.k.a. a future release).\n-\n-> ---\n-\n-#. Reopen the _backport_ bug that was created automatically\n-   * Use a comment like the following (in the reopen dialog):\n-~~~\n-Fix was pushed while main bug was targeted to 'N+1'. Reset the main bug to fixed in 'N', reset this bug to fix in 'N+1' and closed as 'Not An Issue' since JDK N+1 will automatically get this fix from JDK N.\n-~~~\n-   * Change the 'Fix Version\/s' from 'N' to 'N+1'.\n-   * Close the _backport_ bug as \"Not an Issue\".\n-#. Clean up the _main_ bug\n-   * Copy the open push notification comment from the _backport_ bug to the _main_ bug, e.g.:\n-~~~\n-Changeset: 12345678\n-Author: Duke <duke@openjdk.org>\n-Date: 2020-10-23 15:37:46 +0000\n-URL: https:\/\/git.openjdk.java.net\/jdk\/commit\/12345678\n-~~~\n-   * Add a comment like the following to the _main_ bug:\n-~~~\n-Fix was pushed while main bug was targeted to 'N+1'. Reset the main bug to fixed in 'N' and copied the Robo Duke entry here.\n-~~~\n-   * Reset the _main_ bug 'Fix Version\/s' from 'N+1' to 'N'.\n-   * Resolve the _main_ bug as \"Fixed\" in build \"team\" or in build \"master\" depending on where the fix was pushed. Pushes to 'openjdk\/jdk' are fixed in build \"master\" and pushes to project repositories are fixed in build \"team\".\n-\n-## Resolved - Incomplete\n-\n-To resolve an issue as `Incomplete` is JBS lingo for \"Need More Information\". An issue that is `Resolved - Incomplete` is *not* closed but more information is needed to be able to work on it. If no more information is obtained within reasonable time the issue should be closed (`Closed - Incomplete`). Closing a resolved issue is done using the `Verify` option.\n-\n-## JBS Label Dictionary\n-\n-This table contains some frequently used JBS labels and their meaning. Please help keeping this dictionary up to date by adding your favorite labels. This table doesn’t dictate how to use labels, but rather document how they are used. That said, obviously it will help everyone if we try to follow a common standard and use similar labels in the same way across all entities that use JBS.\n+# About this Guide\n@@ -1319,1 +1739,1 @@\n-Labels are an open namespace, which means that anyone can create new labels at any time. In order to avoid confusion, however, it's best to reuse existing labels where possible. This can be done by editing the \"labels\" field of a bug and entering the first few characters of the label you want to add. JIRA will pop up an autocomplete window with existing labels that match that prefix. Then choose one of the existing labels. Using the autocomplete window is preferable to typing the whole label name (even if you're a good typist) because it's easy for minor spelling errors to creep in, which can inadvertently introduce multiple labels with spurious spelling variations.\n+This guide is being maintained through the [OpenJDK Developers' Guide Project](https:\/\/openjdk.java.net\/census#guide). The [source repository](https:\/\/github.com\/openjdk\/guide) is available at GitHub. The revision hash at the bottom of each page refers to the latest change that modified that particular page.\n@@ -1321,3 +1741,1 @@\n-> ---\n-> ### Labels are case sensitive\n-> When using labels in Jira gadgets (like pie charts, heat maps, and statistics tables) Jira will be case sensitive and treat e.g. OpenJDK and openjdk as two different labels. Searching however is case insensitive. This means that if you group a set of issues in a gadget based on a label, and then click one of the groups to see the list of issues, that list will contain more results than the gadget if there are usages of the label with different casing. This can be very confusing and for this reason the recommendation is to stick with the commonly used case for all labels, regardless of your personal taste for upper or lower case letters. Most labels are lower case only, but there are examples where upper case letters are used in the most common version of a label. Use of the autocomplete popup window (described above) when adding labels will avoid inadvertent introduction of labels with differing case.\n+Comments and questions may be sent to [guide-dev (at) openjdk.java.net](mailto:guide-dev-at-openjdk.java.net). Please let us know if there's anything in the guide that isn't clear.\n@@ -1325,1 +1743,1 @@\n-> ---\n+# Glossary\n@@ -1327,34 +1745,2 @@\n-<table class=\"dictionary\">\n-  <tr style=\"text-align:left;\"><th>Label<\/th><th>Description<\/th><\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [*(Area)***`-interest`**]{#area-interest}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      Used to indicate that an area (usually a team or project) is interested in the issue. This label doesn't indicate ownership of the issue. E.g., **`redhat-interest`**, **`azul-interest`**, **`coin-interest`**\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [*(Area)***`-related`**]{#area-related}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      Used to indicate that an issue is related to a specific area (usually a feature or project). This label doesn't indicate ownership of the issue. E.g., **`graal-related`**, **`testcolo-related`**, **`doc-related`**\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [*(Rel)***`-bp`**]{#rel-bp}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      Used to indicate that a bug would be suitable for backport to a release *(Rel)*. This is not a decision to backport, just a suggestion \/ recommendation. E.g., **`11-bp`**\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [*(Rel)***`-critical-request`**]{#rel-critical-request}<br>\n-      [*(Rel)***`-critical-approved`**]{#rel-critical-approved}<br>\n-      [*(Rel)***`-critical-watch`**]{#rel-critical-watch}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      Used in the rampdown phases of specific releases to request approval of changes that requires project lead approval (or similar) to be included. *(Rel)* is the release in question. E.g., **`jdk11-critical-request`**\n+[**accepted**]{#accepted} (by the CCC)\n+:   The stage of the CCC process after \"DRAFT\", and \"PROPOSED\". At this stage the primary goals are to ensure that the proposed changes are suitable for the release in a general sense and that the requisite JCK and SQE resources will be available.\n@@ -1362,2 +1748,2 @@\n-      *(Rel)***`-critical-approved`** is used to signal that the change has been approved for inclusion. E.g., **`jdk11-critical-approved`**<br>\n-      *(Rel)***`-critical-watch`** is used for issues that must get into a specific release but risk running late. The label is used while the issue is still in progress and is replaced with *(Rel)***`-critical-request`** once the issue is resolved. E.g., **`jdk11-critical-watch`**\n+[**approved**]{#approved} (by the CCC)\n+:   The stage of the CCC process after \"FINAL\". The CCC has approved the final version of the request which permits push into the project forest.\n@@ -1365,11 +1751,2 @@\n-      These labels are always placed on the main JBS issue (the bug), never on backports or subtasks.\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [*(Rel)***`-defer-request`**]{#rel-defer-request}<br>\n-      [*(Rel)***`-defer-yes`**]{#rel-defer-yes}<br>\n-      [*(Rel)***`-defer-no`**]{#rel-defer-no}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      Used to request deferral of changes that requires project lead approval (or similar) to defer. *(Rel)* is the release in question. E.g., **`jdk12-defer-request`**\n+[**changeset**]{#changeset}\n+:   A collection of changes with respect to the current clone of a repository.\n@@ -1377,1 +1754,2 @@\n-      *(Rel)***`-defer-yes`** and *(Rel)***`-defer-no`** are used to indicate wether the deferral has been approved or not. E.g., **`jdk12-defer-yes`**\n+[**development freeze**]{#developmentfreeze}\n+:   The date by which all planned work should be complete for a particular line of development. After a line's development freeze, only exit-criteria bugs may be fixed in that line.\n@@ -1379,12 +1757,2 @@\n-      These labels are always placed on the main JBS issue (the bug), never on backports or subtasks.\n-      Further details are found in the [JDK Release Process](https:\/\/openjdk.java.net\/jeps\/3#Bug-Deferral-Process).\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [*(Rel)***`-enhancement-request`**]{#rel-enhancement-request}<br>\n-      [*(Rel)***`-enhancement-yes`**]{#rel-enhancement-yes}<br>\n-      [*(Rel)***`-enhancement-no`**]{#rel-enhancement-no}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      Used in the rampdown phases to request the late inclusion of an enhancement. *(Rel)* is the release in question. E.g., **`jdk10-enhancement-request`**\n+[**forest**]{#forest}\n+:   A collection of Mercurial repositories which can be managed as a set of nested repositories. The name \"Forest\" originally came from the Mercurial \"Forest Extension\" which can be used with some versions of Mercurial, but in general is no longer recommended. The script `common\/bin\/hgforest.sh` can be used to apply a Mercurial `hg` command to all the repositories in a forest.\n@@ -1392,1 +1760,2 @@\n-      *(Rel)***`-enhancement-yes`** and *(Rel)***`-enhancement-no`** are used to indicate the response on the request. E.g., **`jdk10-enhancement-yes`**, **`jdk10-enhancement-no`**\n+[**Group**]{#group}\n+:   A collection of [Participants](https:\/\/openjdk.java.net\/bylaws#participant) who engage in open conversation about a common interest. That interest may be in the creation, enhancement, or maintenance of a specific body of code or it may lie in other areas, e.g., quality, documentation, or evangelism. See the [Group overview](https:\/\/openjdk.java.net\/groups\/).\n@@ -1394,13 +1763,2 @@\n-      These labels are always placed on the main JBS issue (the bug), never on backports or subtasks.\n-      Further details are found in the [JDK Release Process](http:\/\/openjdk.java.net\/jeps\/3#Late-Enhancement-Request-Process).\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [*(Rel)***`-fix-request`**]{#rel-fix-request}<br>\n-      [*(Rel)***`-fix-SQE-ok`**]{#rel-fix-SQE-ok}<br>\n-      [*(Rel)***`-fix-yes`**]{#rel-fix-yes}<br>\n-      [*(Rel)***`-fix-no`**]{#rel-fix-no}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      Used in rampdown phase 2 to indicate that an issue would be of interest to get integrated into release *(Rel)*. E.g., **`jdk12u-fix-request`**\n+[**Mercurial**]{#mercurial}\n+:   A free, cross-platform, distributed source management tool. Source bundles and binary packages for Mercurial are available at [https:\/\/www.selenic.com\/mercurial\/wiki\/index.cgi](https:\/\/www.selenic.com\/mercurial\/wiki\/index.cgi\/Mercurial). The main Mercurial documentation is available at [http:\/\/hgbook.red-bean.com](https:\/\/hgbook.red-bean.com\/).\n@@ -1408,2 +1766,2 @@\n-      *(Rel)***`-fix-SQE-ok`** is used to indicate that the issue will be covered by the test plan for *(Rel)*. E.g., **`jdk12u-fix-SQE-ok`**<br>\n-      *(Rel)***`-fix-yes`** and *(Rel)***`-fix-no`** are used to indicate wether an issue has been approved for backport to *(Rel)*. E.g., **`jdk12u-fix-yes`**\n+[**Project**]{#project}\n+:   A collaborative effort to produce a specific artifact, which may be a body of code, or documentation, or some other material. See the [Project overview](https:\/\/openjdk.java.net\/projects\/).\n@@ -1411,18 +1769,2 @@\n-      These labels are always placed on the main JBS issue (the bug), never on backports or subtasks.\n-      Further details are found in the [JDK Release Process](http:\/\/openjdk.java.net\/jeps\/3#Fix-Request-Process).\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [*(Rel)***`-na`**]{#rel-na}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      Used to indicate that the issue does not affect release *(Rel)* or later. Could for instance be a bug in code that was removed in *(Rel)*.\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [*(Team)***`-triage-`***(Rel)*]{#team-triage-rel}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      Used to indicate that *(Team)* has triaged this issue for release *(Rel)*. It's encouraged that all open bugs are triaged on a regular basis so that old bugs aren't forgotten. It's therefore common to see several triage labels on the same issue which helps keeping track of which bugs has been triaged for each release. E.g., **`oracle-triage-13`**\n+[**repository**]{#repository}\n+:   A directory tree in the filesystem that Mercurial treats specially. This tree contains the source files and their revision history.\n@@ -1430,34 +1772,2 @@\n-      There are many label variants that include the word triage in some form. The form described above is the only one recommended. Please refrain from using other forms.\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [**`aot`**]{#aot}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      Used to indicate that an issue is related to Ahead of Time Compilation.\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-     [~~**`appcds`**~~]{#appcds}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      **Deprecated.** Was used to indicate that an issue was related to Application Class-Data Sharing. The **`cds`** label is now used instead.\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [**`c1`**]{#c1}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      Used to indicate that an issue is related to the C1 JIT compiler.\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [**`c2`**]{#c2}<br>\n-      **`c2-`**`.*`\n-    <\/td>\n-    <td class=\"dictionary\">\n-      Used to indicate that an issue is related to the C2 JIT compiler.\n+[**trivial**]{#trivial}\n+:   A change that is small, well contained, and makes no semantic changes. Typically fixing obvious typos or renaming some local identifier. Trivial changes can also be pushing an already reviewed change that was missed in an earlier push (e.g. forgot to add a file) or generated changes like an [`hg backout`](#backing-out-a-change). It's up to the author of a change to claim that the change is trivial in the RFR, and it's up to the Reviewer whether to approve such a claim. A change is only trivial if the Reviewer says so. Trivial changes does not have to wait 24 hours before being pushed, and only needs one Reviewer, even in areas where stricter rules for pushing normally applies.\n@@ -1465,320 +1775,2 @@\n-      **`c2-`**`.*` labels are used to identify different c2 features. E.g., **`c2-intrinsic`**, **`c2-loopopts`**\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [**`cds`**]{#cds}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      Used to indicate that an issue is related to Class Data Sharing.\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [**`cleanup`**]{#cleanup}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      The **`cleanup`** label is used to indicate enhancements which has no semantic changes, whose only purpose is to make the code more maintainable or better looking.\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [**`docker`**]{#docker}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      Used to indicate that an issue is related to docker support.\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [**`gc-`**`.*`]{#gc}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      Used to indicate that an issue is related to a specific garbage collector in the JVM. E.g., **`gc-g1`**, **`gc-shenandoah`**, **`gc-serial`**, **`gc-epsilon`**\n-\n-      There are also labels in use to identify different GC features or areas rather than GC algorithms. E.g., **`gc-g1-fullgc`**, **`gc-largeheap`**, **`gc-performance`**\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [**`graal`**]{#graal}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      Used to indicate that this is a Graal issue. (Something that needs to be fixed in Graal rather than in OpenJDK.)\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [**`graal-integration`**]{#graal-integration}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      Reserved for Graal integration umbrella bugs. The automated integration script will break if this label is used for other bugs.\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [**`hgupdate-sync`**]{#hgupdate-sync}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      Used to identify backport issues automatically created by HG Updater (a script that monitors the hg repositories for changes).\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [~~**`hs-nightly`**~~]{#hs-nightly}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      **Deprecated.** Was used to tag bugs found in the HotSpot nightly testing. Since we are now running tiered testing there is no more nightly HotSpot testing. See **`tier`**`[1-8]`.\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [**`hs-sbr`**]{#hs-sbr}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      Used to tag bugs that are found in the \"same binary runs\", a stress testing method used to find intermittent failures.\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [~~**`hs-tier`**~~~~`[1-8]`~~]{#hs-tier}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      **Deprecated.** Was used to identify which HotSpot tier a test failure was seen in. We don't separate HotSpot tiers from the JDK tiers anymore. See **`tier`**`[1-8]`.\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [**`i18n`**]{#i18n}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      Used to indicate that an issue is related to internationalization.\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [**`integration-blocker`**]{#integration-blocker}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      Used to indicate that a bug is present in a downstream repository but not present in the upstream repository and is therefore blocking integration of downstream changes into upstream.\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [**`intermittent`**]{#intermittent}<br>\n-      [**`intermittent-environment`**]{#intermittent-environment}<br>\n-      [**`intermittent-hardware`**]{#intermittent-hardware}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      An intermittent issue is one that fails sometimes but not always. The exact reason for the intermittent failure is per definition unknown. Once the reason has been identified the issue is no more considered intermittent. An issue isn't intermittent if some characteristics has been found that triggers the failure consistently, even if the actual cause for the failure has not been found. For instance if a test fails every time it is executed on a specific host but not on other hosts it wouldn't be considered intermittent as it fails consistently on that specific host. In other cases it may be that we know that a test sometimes is unlucky in some respect and fails due to this. This test could still be considered intermittent even though we know what the reason is if the reason itself appears intermittently.\n-\n-      Some issues may seem intermittent when looking at test results, even though the reason for failing is actually known. One example is where a test fails consistently on a specific host, or due to specific conditions in the environment. These failures should not be considered intermittent but it may still be valuable to tag these in JBS with one of the labels **`intermittent-hardware`** or **`intermittent-environment`**. This will help to faster identify that the cause of the failure is known without having to read through the entire bug.\n-\n-      A test that should be platform agnostic but is consistently failing on a specific OS would for instance be labeled with **`intermittent-environment`**, while a test that fails every time it is run on some specific hardware would be labeled with **`intermittent-hardware`**.\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [**`maintainer-pain`**]{#}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      Bugs that for some reason is wasting engineering time just by existing, or in other ways are causing pain for the maintainers of the JDK. Examples are bugs that occur frequently in testing or test failures that are time consuming to investigate before determining that it is a pre-existing bug.\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [**`noreg-`**`.*`]{#noreg}<br>\n-      [**`nounit-`**`.*`]{#nounit}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      The **`noreg-`**`.*` and **`nounit-`**`.*` labels are used to explain why a bugfix doesn't need\/have a regression test or a unit test. The suffix of the label is described below.\n-\n-[**`-sqe`**]{#noreg-sqe}\n-:    Change can be verified by running an existing SQE test suite; the bug should identify the suite and the specific test case(s).\n-\n-[**`-jck`**]{#noreg-jck}\n-:    Change can be verified by running the JCK; the bug should identify the specific test case(s).\n-\n-[**`-external`**]{#noreg-external}\n-:    Change can be verified by running an existing external test suite; the bug should identify the suite and the specific test case(s).\n-\n-[**`-doc`**]{#noreg-doc}\n-:    Change only affects documentation.\n-\n-[**`-demo`**]{#noreg-demo}\n-:    Change only affects demo code.\n-\n-[**`-build`**]{#noreg-build}\n-:    Change only affects build infrastructure (makefiles, copyrights, scripts, etc.).\n-\n-[**`-self`**]{#noreg-self}\n-:    Change is a fix to a regression or unit test itself.\n-\n-[**`-perf`**]{#noreg-perf}\n-:    Change is for a performance bug for which writing a regression test is infeasible; the bug should describe how to verify the fix.\n-\n-[**`-hard`**]{#noreg-hard}\n-:    It is too hard to write a regression or unit test for this bug (e.g., theoretical race condition, complex setup, reboot required, editing of installed files required, specific graphics card required); the bug should explain why.\n-\n-[**`-long`**]{#noreg-long}\n-:    Testing requires a very long running time (e.g., more than a few minutes).\n-\n-[**`-big`**]{#noreg-big}\n-:    Testing requires an unreasonable quantity of resources (e.g., tens of gigabytes of filesystem space).\n-\n-[**`-trivial`**]{#noreg-trivial}\n-:    Change is so trivial that nothing could possibly go wrong with it.\n-\n-[**`-cleanup`**]{#noreg-cleanup}\n-:    Change is a cleanup or refactoring of existing code that is covered by existing tests.\n-\n-[**`-l10n`**]{#noreg-l10n}\n-:    Change only affects localized text.\n-\n-[**`-undo`**]{#noreg-undo}\n-:    Change is a reversion of a previous faulty change.\n-\n-[**`-other`**]{#noreg-other}\n-:    Regression or unit test is unnecessary or infeasible for some other reason; the bug report should explain why.\n-\n-Examples:  If a bug fix only corrects a change in the build system, then add the **`noreg-build`** label to the corresponding bug. If the change improves loop optimizations in HotSpot, then add **`nounit-perf`** to the corresponding bug.\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [**`performance`**]{#performance}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      Used to identify a bug with noticeable performance impact. Either positive or negative.\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [~~**`pit`**~~]{#pit}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      **Deprecated.** Was used to indicate that a failure happened in product integration testing (PIT). Since we are now running tiered testing there is no more PIT. See **`tier`**`[1-8]`.\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [**`problemlist`**]{#problemlist}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      One or more tests has been problemlisted due to this bug.\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [**`regression`**]{#regression}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      A regression is a bug that did not exist in the previous release. Ideally all regressions must be fixed in order to release the next major version.\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [**`release-note`**]{#release-note}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      Used to indicate that the issue is a release note. The release-note issue is a sub-task to the main JBS issue containing the text to be used in the release note. The release note must also have one of the following labels:\n-\n-[**`RN-NewFeature`**]{#RN-NewFeature}\n-:   New Feature or enhancement.\n-\n-[**`RN-IssueFixed`**]{#RN-IssueFixed}\n-:   A significant issue which has been fixed, would normally be a regression or an issue which unknowingly released in a new feature.\n-\n-[**`RN-KnownIssue`**]{#RN-KnownIssue}\n-:   An issue that was not possible to fix by the time the release was GA'd.\n-\n-[**`RN-Removed`**]{#RN-Removed}\n-:   Covers an API, feature, tool etc. which has been removed from the JDK.\n-\n-[**`RN-Deprecated`**]{#RN-Deprecated}\n-:   Covers an API that has been marked as deprecated in the release.\n-\n-[**`RN-Important`**]{#RN-Important}\n-:   Used to indicate that the release note should be highlighted in some fashion, such as listing it at the beginning of the release notes.\n-\n-[**`RN-`(distro)**]{#RN-distro}\n-:   Used to indicate that the release note is only relevant for a specific JDK distribution. E.g. RN-Oracle\n-\n-[~~**`RN-Change`**~~]{#RN-Change}\n-:   Deprecated.\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [**`release-note=yes`**]{#release-note-yes}<br>\n-      [**`release-note=no`**]{#release-note-no}<br>\n-      [~~**`release-note=done`**~~]{#release-note-done}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      Used to indicate wether a change requires a release note or not. The labels are always placed on the main JBS issue, never on the actual release note issue.\n-\n-      **`release-note=done`** is deprecated and should no longer be used.\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [**`starter`**]{#starter}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      A starter bug is a well contained, small issue that is suitable for someone new to the codebase.\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [**`startup`**]{#startup}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      Used to identify a bug as affecting Java SE startup performance.\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [**`tck-red-`***(Rel)*]{#tck-red-rel}<br>\n-      [~~**`tck-red`**~~]{#tck-red}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      Used to identify TCK conformance stoppers (e.g. failure of a valid TCK test that exists in a shipped TCK). The release number indicates which release of the TCK that failed. E.g., **`tck-red-11`**\n-\n-      There are **`tck-red`** labels without the release number out there as well. This usage is deprecated.\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [~~**`test`**~~]{#test}<br>\n-      [~~**`test-only`**~~]{#test-only}<br>\n-      [~~**`testbug`**~~]{#testbug}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      The labels **`test`**, **`test-only`**, and **`testbug`** are deprecated and should no longer be used. Use [**`noreg-self`**](#noreg) to indicate that an issue is a bug in test code.\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [**`tier`**`[1-8]`]{#tier}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      Used to indicate which tier in the jdk\/jdk CI pipeline a test failure has been seen in. Lower tiers would in general mean higher urgency to fix the issue. E.g., **`tier1`**, **`tier2`**\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [**`webbug`**]{#webbug}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      Used to identify a bug as submitted on [bugs.java.com](https:\/\/bugs.java.com\/bugdatabase\/).\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [**`zgc`**]{#zgc}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      Used to indicate that an issue is related to ZGC.\n-    <\/td>\n-  <\/tr>\n-<\/table>\n+[**webrev**]{#webrev}\n+:   A tool and its output. In JDK release forests, the script, [`webrev.ksh`](https:\/\/hg.openjdk.java.net\/code-tools\/webrev\/raw-file\/tip\/webrev.ksh), examines a forest or repository to generate a set of web-based views of differences.\n","filename":"src\/index.md","additions":794,"deletions":802,"binary":false,"changes":1596,"status":"modified"}]}