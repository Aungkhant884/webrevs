{"files":[{"patch":"@@ -1,117 +0,0 @@\n-% Community Code Review\n-\n-## General\n-\n-The cr.openjdk.java.net server provides storage and display of code review\n-materials such as webrevs and other artifacts related to the\n-[OpenJDK](https:\/\/openjdk.java.net\/) Community. If you\n-are interested in monitoring recent reviews, try our review feed\n-[here](https:\/\/cr.openjdk.java.net\/feed.atom).\n-\n-Any user with push access to the OpenJDK\n-[Mercurial](https:\/\/hg.openjdk.java.net) server can publish\n-materials on the cr.openjdk.java.net server.\n-Users can upload files to temporary\n-storage using secure methods (rsync, scp, and sftp).\n-\n-## Terms and conditions\n-\n-This site is for open source materials related to the OpenJDK\n-Community only. Users uploading inappropriate materials will lose\n-access and the material will be deleted. Please review the\n-[Terms of Use](https:\/\/openjdk.java.net\/legal\/terms.html).\n-\n-Special note to developers working on closed code and tests:\n-This cr.openjdk.java.net\n-server is intended for OpenJDK materials only. Please use your\n-current process for webrevs and reviews of closed code and\n-tests.\n-\n-## Webrev\n-\n-So, what is webrev?\n-\n-[Webrev](webrevHelp.html) is\n-a script that will crawl over your changes, compare the modified\n-files with your parent forest, then generate a set of web pages to\n-display the differences.\n-\n-When you are asking reviewers to check over your proposed\n-changes, it helps to make that job as easy for them as possible,\n-and webrev is one way to do it.\n-\n-For more information about webrev, refer to:\n-\n-* See the [the webrev help page](webrevHelp.html)\n-\n-## Example\n-\n-* A developer called \"username\" runs `webrev -f`\n-  on their work done in a Mercurial forest. This creates output under\n-  a webrev directory.\n-\n-* For clarity, they add the bug ID they are working on, and\n-  perhaps add a sequence number:\n-\n-      mkdir 6543210\n-      mv webrev 6543210\/webrev.00\n-\n-  This will allow subsequent webrevs (if there are any) to be\n-  added as webrev.01 and so on without clobbering the original\n-  files.\n-\n-* **Optional:** If they would like to dress up their entry in\n-  the [Atom feed](https:\/\/cr.openjdk.java.net\/feed.atom),\n-  create `.title` and\/or `.description` files:\n-\n-      echo \"A suitable review title or bug synopsis\" > 6543210\/.title\n-      echo \"Short description of the change to be reviewed\" > 6543210\/.description\n-\n-  Syndication does not recognize line endings or formatting tags,\n-  so it would be a good idea to keep the information in these files\n-  as simple as possible.\n-\n-  If these file(s) are not found by the cr.openjdk.java.net\n-  server, the subdirectory\n-  name (6543210 in this example) will be used for title and\/or\n-  description in the stream.\n-\n-* They transfer the webrev tree to their home directory on\n-  cr.openjdk.java.net using scp or rsync:\n-\n-      scp -r 6543210 username@cr.openjdk.java.net:\n-\n-  or\n-\n-      rsync -av 6543210 username@cr.openjdk.java.net:\n-\n-  Note the final : on the command line. If you omit that, you will\n-  copy the bits into a directory called\n-  \"username@cr.openjdk.java.net\" on your local system.\n-\n-* The results will be published at:\n-\n-      https:\/\/cr.openjdk.java.net\/~username\/6543210\n-\n-* In ten minutes or less, the new information will appear on the\n-  feed:\n-\n-  [https:\/\/cr.openjdk.java.net\/feed.atom](https:\/\/cr.openjdk.java.net\/feed.atom)\n-\n-* Later on, if it is time to clean up, use sftp to access your\n-  code review directory:\n-\n-      sftp username@cr.openjdk.java.net\n-\n-  Use the `rm` command to delete individual files. If you\n-  want to delete a tree of files and directories, use the\n-  `rename` command to move them into your ~\/.trash\n-  subdirectory. To continue with the example for bug ID 6543210:\n-\n-      rename 6543210 .trash\/6543210\n-\n-  A cron job on the cr.openjdk.java.net\n-  server will periodically empty the trash for\n-  all users.\n-\n-Please send feedback to `web-discuss at openjdk dot java dot net`\n","filename":"src\/codeReview.md","additions":0,"deletions":117,"binary":false,"changes":117,"status":"deleted"},{"patch":"@@ -12,0 +12,60 @@\n+\n+## OpenJDK\n+\n+::: {.box}\n+[Quick Links]{.boxheader}\n+\n+* [OpenJDK Groups](https:\/\/openjdk.java.net\/groups\/)\n+* [OpenJDK Projects](https:\/\/openjdk.java.net\/projects\/)\n+* [OpenJDK General Roles (Participant, Contributor, Member)](https:\/\/openjdk.java.net\/bylaws#general-roles)\n+* [OpenJDK Project Roles (Author, Committer, Reviewer)](https:\/\/openjdk.java.net\/bylaws#project-roles)\n+:::\n+\n+OpenJDK consists of a number of [Groups](https:\/\/openjdk.java.net\/groups\/). Members of a group collaborate on an area of mutual interest. The right hand side bar on the [OpenJDK website](https:\/\/openjdk.java.net\/) has a list of all groups in OpenJDK. If you're interested in a specific area, this is where you would start your OpenJDK experience. Look at the group's information and wiki pages, and see what projects they sponsor on the [Census page](https:\/\/openjdk.java.net\/census). The [Census](https:\/\/openjdk.java.net\/census) shows the structure of the OpenJDK Community.\n+\n+[Projects](https:\/\/openjdk.java.net\/projects\/) are where the coding and much of the other work is done in OpenJDK. There are many different projects, some produce shippable artifacts, like the [JDK Project](https:\/\/openjdk.java.net\/projects\/jdk\/), some produce tools to be used by developers of these artifacts, like the [Code Tools Project](https:\/\/openjdk.java.net\/projects\/code-tools\/) or [Project Skara](https:\/\/openjdk.java.net\/projects\/skara\/), and some produce documentation, like the [Developers' Guide Project](https:\/\/openjdk.java.net\/projects\/guide\/). Many projects designs and develops new features for the Java language or the JVM, but there are also less code centric projects like the [Duke Project](https:\/\/openjdk.java.net\/projects\/duke\/) which collects images of the Java mascot, Duke.\n+\n+## Author, Committer, Reviewer\n+\n+OpenJDK has a few different roles that determine who has the right to do what in the different projects. These roles are defined in the [OpenJDK Bylaws](https:\/\/openjdk.java.net\/bylaws#project-roles). The roles are earned based on experience and knowledge within each project.\n+\n+A Contributor can have different roles in different projects. When you're new to a project you don't yet have a formal role in that specific project, even though you might have earned roles in other OpenJDK projects or have been recognized as a [Contributor](https:\/\/openjdk.java.net\/bylaws#contributor) or a [Member](https:\/\/openjdk.java.net\/bylaws#openjdk-member) of OpenJDK. By contributing high-quality content you'll soon be eligible for [OpenJDK roles](https:\/\/openjdk.java.net\/bylaws#project-roles) in the project. First [Author](https:\/\/openjdk.java.net\/bylaws#author), then [Committer](https:\/\/openjdk.java.net\/bylaws#committer), and finally [Reviewer](https:\/\/openjdk.java.net\/bylaws#reviewer) if you stay active and earn the trust of the community. Trust is an important part of earning these roles. There's a [rough guideline](https:\/\/openjdk.java.net\/projects\/) saying that to become a [Committer](https:\/\/openjdk.java.net\/bylaws#committer) you should have contributed 8 significant changes, and to become a [Reviewer](https:\/\/openjdk.java.net\/bylaws#reviewer) you should have contributed 32 significant changes. In reality it's not as easy as \"just\" contributing code. You need to build a track record of good decisions and sound judgment and show that you know what differentiates a good change from a not so good one. It's not only correctness of the code that matters, it's also the appropriateness. In the end the trust you've earned is put to the test through a vote.\n+\n+### Becoming an Author\n+\n+Becoming an [Author](https:\/\/openjdk.java.net\/bylaws#author) is the first step. To achieve this you need to contribute two changes to the project in which you wish to become an Author. Once your changes are pushed into the code base and has been vetted enough to determine that the changes were indeed good changes you can go ahead and send an email to the project lead of that particular project and ask to be added as an Author. The [OpenJDK Project description](https:\/\/openjdk.java.net\/projects\/#project-author) has a template for such an email. In response to your email you will get a time-limited invite which you should fill out.\n+\n+To see who the project lead is for your project, see the [OpenJDK Census](https:\/\/openjdk.java.net\/census). The Census unfortunately doesn't provide email addresses for people, but assuming you have been active on the project mailing list (since you are applying for Author after all), you should be able to find the lead's email address in your local email archive, or ask your sponsor.\n+\n+As an Author you will get your OpenJDK user name. This should be associated with your GitHub account in order for the bots to be able to identify you on GitHub. See the [Skara documentation](https:\/\/wiki.openjdk.java.net\/display\/SKARA#Skara-AssociatingyourGitHubaccountandyourOpenJDKusername) for more details on that. Once that's done you can create PRs and get them reviewed, but you will still need a sponsor to approve your change before it can be integrated. You'll also get write access to [JBS](#jbs---jdk-bug-system) and the [OpenJDK wiki](https:\/\/wiki.openjdk.java.net) related to the project in question, and to [cr.openjdk.java.net](https:\/\/cr.openjdk.java.net) via an SSH key provided at the time you accept your invitation.\n+\n+### Becoming a Committer\n+\n+To become a [Committer](https:\/\/openjdk.java.net\/bylaws#committer) you should show that you can produce non-trivial changes that are accepted for inclusion into the project code base. The number eight has been seen as a formal lower limit on the number of changes, but since the changes must be non-trivial, or \"significant\" as the [OpenJDK Project description](https:\/\/openjdk.java.net\/projects\/) says, and the definition of significant is subjective, the general recommendation is to wait with a Committer nomination until there's at least 10-12 changes pushed to have some margin for different interpretations of \"significant\". It's always a good idea to seek the advice of a sponsor who can guide you through the process to becoming a Committer - you will need one later to run the Committer vote anyway. They probably will have a better idea of what constitutes a \"significant\" change.\n+\n+Once you have the required changes, a Committer in the project can start a vote by sending an email proposing that you should become a Committer. The email should follow the template found in the [OpenJDK Project description](https:\/\/openjdk.java.net\/projects\/#project-committer).\n+\n+A Committer is allowed to push changes without the aid of a sponsor. A Committer is also allowed to nominate other non-Committers to become Committers in the project.\n+\n+### Becoming a Reviewer\n+\n+To become a [Reviewer](https:\/\/openjdk.java.net\/bylaws#reviewer) you must show a track record of sound and correct judgment calls as mentioned above. Being a good Committer doesn't necessarily make you a good Reviewer. As a Reviewer you have the power to approve changes for inclusion into the project source code. This means that a Reviewer needs to be able to judge the quality and appropriateness of any proposed change, not just the mechanics of the code.\n+\n+The assumption is that after having produced 32 significant changes one should have become familiar with the process around reviews and the requirements around getting a change approved. This should really be seen as a minimum requirement though. A more practical consideration would be to look at whether the non-trivial commits of a potential Reviewer are accepted largely intact or whether they are always being refined by the review process. There may be cases where it will take significantly more than 32 changes for a Committer to be ready to become a Reviewer.\n+\n+Once you are deemed ready, a Reviewer in the project can start a vote by sending an email proposing that you should become a Reviewer. The email should follow the template found in the [OpenJDK Project description](https:\/\/openjdk.java.net\/projects\/#project-reviewer).\n+\n+### Non-trivial\/Significant changes\n+\n+One key definition when advancing through the OpenJDK roles is the significant change. What exactly does it take for a change to be significant?\n+\n+Instead of describing the significant change (because that's quite difficult to define) provided here is a few examples of changes that wouldn't be considered significant or for other reasons wouldn't count as significant contributions.\n+\n+* Purely aesthetic changes like renaming or fixing indentation\n+* Repeated follow-up bugfixes from earlier changes\n+* Larger changes where only a non-significant portion of the work was done by the Contributor under vote\n+* Trivial backports of someone else's changes\n+\n+::: {.box}\n+[To the top](#){.boxheader}\n+:::\n","filename":"src\/guide\/introduction.md","additions":60,"deletions":0,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -301,1 +301,2 @@\n-    My change\n+    8272373: Make the JDK mine\n+    Reviewed-by: duke\n@@ -315,1 +316,1 @@\n-[master d454489052d] Revert \"My change\"\n+[master d454489052d] 8280996: [BACKOUT] Make the JDK mine Reviewed-by: duke\n@@ -323,3 +324,2 @@\n-    Revert \"My change\"\n-\n-    This reverts commit aa371b4f02c2f809eb9cd3e52aa12b639bed1ef5.\n+    8280996: [BACKOUT] Make the JDK mine\n+    Reviewed-by: duke\n","filename":"src\/guide\/testing-the-jdk.md","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-   If there are upstream changes that might affect your change, it's likely a good idea to rerun relevant testing as well. The GHA testing that's done automatically by GitHub should only be seen as a smoke test that finds the most severe problems with your change. It's highly unlikely that it will test your actual change in any greater detail - or even at all execute the code that you have changed in most cases.\n+   If there are upstream changes that might affect your change, it's likely a good idea to rerun relevant testing as well. The [GHA testing](#github-actions) that's done automatically by GitHub should only be seen as a smoke test that finds the most severe problems with your change. It's highly unlikely that it will test your actual change in any greater detail - or even at all execute the code that you have changed in most cases.\n@@ -84,0 +84,27 @@\n+\n+## Webrevs\n+\n+::: {.box}\n+[Quick Links]{.boxheader}\n+\n+* [Webrev Source Repository](https:\/\/github.com\/openjdk\/webrev)\n+* [Webrev Mailing List](https:\/\/mail.openjdk.java.net\/pipermail\/webrev-dev\/)\n+:::\n+\n+As all OpenJDK projects are hosted on GitHub, most code reviews takes place there. When you publish a PR to an OpenJDK repository the corresponding JBS issue will get a link to the code review in the PR, making this the natural place to go for review. OpenJDK do however provide other tools and infrastructure for code reviews as well: The **webrevs**.\n+\n+Webrev refers to both the tool used to create them and its output. The script, [`webrev.ksh`](https:\/\/github.com\/openjdk\/webrev\/blob\/master\/webrev.ksh), is maintained in the [Code Tools](..\/projects\/code-tools) project. Please note that this version of webrev is for use with mercurial and won't work with the git based repositories. You don't actually need tools like this anymore unless you want to host code reviews in other locations than GitHub.\n+\n+On the GitHub reviews you will find links to webrevs. These are automatically generated by the bot and are provided as a complement for those who prefer this style of code review. Many OpenJDK developers are used to the webrevs as this was the default way to provide code for review before OpenJDK moved to GitHub. Though webrevs are mainly deprecated today, they used to be a central part of OpenJDK development and you may still see people use the word as a synonym for code review, so they do deserve to be mentioned here as well.\n+\n+## File storage for OpenJDK artifacts - `cr.openjdk.java.net`\n+\n+The `cr.openjdk.java.net` server provides storage and display of code review materials such as webrevs and other artifacts related to the OpenJDK Community. This area can also be used to store design documents and other documentation related OpenJDK but not related to any specific project that have an OpenJDK wiki space for such purposes.\n+\n+Any OpenJDK Author can publish materials on the `cr.openjdk.java.net` server. Users can upload files to temporary storage using secure methods (`rsync`, `scp`, and `sftp`).\n+\n+This site is for open source materials related to the OpenJDK Community only. Users uploading inappropriate materials will lose access and the material will be deleted. Please review the [Terms of Use](https:\/\/openjdk.java.net\/legal\/terms.html) before using this server.\n+\n+::: {.box}\n+[To the top](#){.boxheader}\n+:::\n","filename":"src\/guide\/working-with-pull-requests.md","additions":28,"deletions":1,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -1,12 +0,0 @@\n-% JCK Acquisition\n-\n-::: {.NavBit}\n-[« Previous](testingChanges.html) • [TOC](index.html) • [Next »](producingChangeset.html)\n-:::\n-\n-This section will primarily consist of links to the documentation provided by\n-the OpenJDK [Conformance Group](..\/groups\/conformance). Tips for when the test suite should be run may be provided.\n-\n-::: {.NavBit}\n-[« Previous](testingChanges.html) • [TOC](index.html) • [Next »](producingChangeset.html)\n-:::\n","filename":"src\/jckAcquisition.md","additions":0,"deletions":12,"binary":false,"changes":12,"status":"deleted"},{"patch":"@@ -1,13 +0,0 @@\n-% Review Bodies\n-\n-::: {.NavBit}\n-[« Previous](changePlanning.html) • [TOC](index.html) • [Next »](testingChanges.html)\n-:::\n-\n-For now, this corresponds to the current processes referred to as\n-[_JEP_](http:\/\/openjdk.java.net\/jeps\/0)\n-and [_CSR_](https:\/\/wiki.openjdk.java.net\/display\/csr\/Main). Other processes may be identified later.\n-\n-::: {.NavBit}\n-[« Previous](changePlanning.html) • [TOC](index.html) • [Next »](testingChanges.html)\n-:::\n","filename":"src\/reviewBodies.md","additions":0,"deletions":13,"binary":false,"changes":13,"status":"deleted"},{"patch":"@@ -1,45 +0,0 @@\n-% Webrev Help\n-\n-So, what is webrev?\n-\n-`webrev` refers to both the tool and its output. The script,\n-[`webrev.ksh`](https:\/\/hg.openjdk.java.net\/code-tools\/webrev\/raw-file\/tip\/webrev.ksh),\n-is maintained in the [Code Tools](..\/projects\/code-tools) Project.\n-The latest version of the tool may be downloaded from\n-[https:\/\/hg.openjdk.java.net\/code-tools\/webrev\/raw-file\/tip\/webrev.ksh](https:\/\/hg.openjdk.java.net\/code-tools\/webrev\/raw-file\/tip\/webrev.ksh).\n-\n-`webrev.ksh` crawls over your changes to generate a\n-set of web-based views of the differences in your code. The different views\n-allow reviewers to easily look at your proposed changes, selecting the\n-appropriate difference format based on the type of file, the type of change,\n-and their own preferences.\n-\n-## Examples\n-\n-`ksh .\/webrev.ksh -N -r <REV>`\n-\n->    Generate diffs between revision _`<REV>`_ and the `tip`. Output created under the\n->    `.\/webrev\/` directory.\n-\n-`ksh .\/webrev.ksh -m -N -c <BUGID>`\n-\n->    Force the use of Mercurial to generate diffs between all\n->    modified files and the current `tip`. At the top of\n->    the main page Include a clickable link to _`<BUGID>`_ in the\n->    [OpenJDK Bug System](https:\/\/bugs.openjdk.java.net). Output to `.\/webrev\/`.\n-\n-`ksh WDIR=<OUTDIR> .\/webrev.ksh <FILE>`\n-\n->    Useful when generating diffs across multiple repositories in\n->    the forest, the _`<FILE>`_\n->    contains a list of files to diff. Output to alternate location\n->    _`<OUTDIR>`_.\n-\n-`ksh .\/webrev.ksh -help`\n-\n->    Complete list of options.\n-\n-## Further information\n-\n-* [Source repository](https:\/\/hg.openjdk.java.net\/code-tools\/webrev)\n-* [Mailing list](https:\/\/mail.openjdk.java.net\/pipermail\/webrev-dev\/)\n","filename":"src\/webrevHelp.md","additions":0,"deletions":45,"binary":false,"changes":45,"status":"deleted"}]}