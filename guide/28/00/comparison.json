{"files":[{"patch":"@@ -22,1 +22,1 @@\n-\tpandoc $< --css guidestyle.css --strip-comments --standalone --ascii --to html4 --title-prefix \"The OpenJDK Developers' Guide\" --include-after-body=build\/tmp_footer.html | iconv -f UTF-8 -t ISO-8859-1 > $@\n+\tpandoc $< --css guidestyle.css --strip-comments --standalone --toc --ascii --to html4 --title-prefix \"The OpenJDK Developers' Guide\" --include-after-body=build\/tmp_footer.html | iconv -f UTF-8 -t ISO-8859-1 > $@\n","filename":"Makefile","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,7 +3,1 @@\n-This Project maintains the [OpenJDK Developers' Guide](https:\/\/openjdk.java.net\/guide\/).\n-The goal of this guide is to answer questions that developers of the JDK might have around\n-development process, tooling, standards, and so forth. The formal rules and processes are described in\n-other documents, such as [JEP 1](https:\/\/openjdk.java.net\/jeps\/1) for the JDK Enhancement-Proposal\n-& Roadmap Process, and [JEP 3](https:\/\/openjdk.java.net\/jeps\/3) for the JDK Release Process.\n-This guide is meant to be a complement to such documents, with tutorials and examples\n-for how to follow these rules and how to work together with the rest of the OpenJDK Community.\n+This Project maintains the [OpenJDK Developers' Guide](https:\/\/openjdk.java.net\/guide\/). The goal of this guide is to answer questions that developers of the JDK might have around development process, tooling, standards, and so forth. The formal rules and processes are described in other documents, such as [JEP 1](https:\/\/openjdk.java.net\/jeps\/1) for the JDK Enhancement-Proposal & Roadmap Process, and [JEP 3](https:\/\/openjdk.java.net\/jeps\/3) for the JDK Release Process. This guide is meant to be a complement to such documents, with tutorials and examples for how to follow these rules and how to work together with the rest of the OpenJDK Community.\n@@ -11,2 +5,1 @@\n-There are many common use cases that aren't detailed in the formal process. This guide suggests\n-how to work in such cases.\n+There are many common use cases that aren't detailed in the formal process. This guide suggests how to work in such cases.\n@@ -16,8 +9,1 @@\n-The target audience for this document is anyone in the OpenJDK Community who aims to contribute\n-to the development of the JDK but is not yet\n-familiar with the process. People who are already regular contributors will already know much of\n-what this guide has to offer. Still, the Developers' Guide should work as a source of knowledge also\n-for experienced contributors. Any descriptions in the Guide should thus be self-contained\n-or have explicit references to any information that the reader is expected to already know. The information\n-should also be structured in such a way that it's easy to find the details for any process, so that\n-a reader who already knows the big picture can quickly find a particular detail that was forgotten.\n+The target audience for this document is anyone in the OpenJDK Community who aims to contribute to the development of the JDK but is not yet familiar with the process. People who are already regular contributors will already know much of what this guide has to offer. Still, the Developers' Guide should work as a source of knowledge also for experienced contributors. Any descriptions in the Guide should thus be self-contained or have explicit references to any information that the reader is expected to already know. The information should also be structured in such a way that it's easy to find the details for any process, so that a reader who already knows the big picture can quickly find a particular detail that was forgotten.\n@@ -27,2 +13,1 @@\n-To engage in the development of the Developers' Guide itself, create a private fork and join\n-the dedicated [guide-dev mail list](https:\/\/mail.openjdk.java.net\/mailman\/listinfo\/guide-dev).\n+To engage in the development of the Developers' Guide itself, create a private fork and join the dedicated [guide-dev mail list](https:\/\/mail.openjdk.java.net\/mailman\/listinfo\/guide-dev).\n@@ -32,8 +17,20 @@\n-The project comes with a `Makefile`. Simply type `make` to generate HTML files from the source\n-Markdown. The build requires the tools `pandoc`, `iconv`, and `perl` and assumes a POSIX environment. We recommend using at least pandoc 2.0.\n-The resulting HTML files in the `build` directory are exactly the files published on the\n-[OpenJDK web server](https:\/\/openjdk.java.net\/guide\/). There is, however, a larger framework\n-on the web server with fonts and CSS\n-that is not part of this project. This means that the HTML files as they are generated\n-will not look exactly the same as the final published version. Still they are hopefully good\n-enough to proof read changes and see the layout in a browser.\n+The project comes with a `Makefile`. Simply type `make` to generate HTML files from the source Markdown. The build requires the tools `pandoc`, `iconv`, and `perl` and assumes a POSIX environment. We recommend using at least pandoc 2.0. The resulting HTML files in the `build` directory are exactly the files published on the [OpenJDK web server](https:\/\/openjdk.java.net\/guide\/). There is, however, a larger framework on the web server with fonts and CSS that is not part of this project. This means that the HTML files as they are generated will not look exactly the same as the final published version. Still they are hopefully good enough to proof read changes and see the layout in a browser.\n+\n+## Todo\n+\n+The Developers' Guide is continuously updated and there are several parts still missing. This todo list isn't complete and there is no limitation on current work being tied to any item on this list. It's just a list of things that we know are missing or needs to be updated. The list isn't ordered in any way.\n+\n+* All SCM references should be updated to GIT\n+* Introductory text about how to approach the community - Socialize your patch before asking for reviews\n+* Step-by-step build instructions\n+* JEPs - When do I need one? - Working with JEPs\n+* Reference external CSR pages with small intro that is unlikely to need upates\n+* Document release note process\n+* Add \"stakeholders\" for each section\n+* Add references to current code conventions for Java, C++, Markdown, Makefiles\n+* Text about adding an API\n+* Text about adding a feature\n+* Text about testing\n+* Text about JCK\n+* Text about backports\n+* Text about JBS, triage, priorities, status\n","filename":"README.md","additions":24,"deletions":27,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-% About this Guide\n+% Page moved\n@@ -3,16 +3,1 @@\n-::: {.NavBit}\n-[« Previous](faq.html) • [TOC](index.html) • [Next »](glossary.html)\n-:::\n-\n-This guide is being maintained through the\n-[OpenJDK Developers' Guide Project](https:\/\/openjdk.java.net\/census#guide). The\n-[source repository](https:\/\/github.com\/openjdk\/guide) is available at GitHub.\n-The revision hash at the bottom of each page refers to the latest change that\n-modified that particular page.\n-\n-Comments and questions may be sent to [guide-dev (at) openjdk.java.net](mailto:guide-dev-at-openjdk.java.net).\n-Please let us know if there's anything in the guide that isn't clear.\n-\n-::: {.NavBit}\n-[« Previous](faq.html) • [TOC](index.html) • [Next »](glossary.html)\n-:::\n+The OpenJDK Developers' Guide has been merged into a single document. Please update your links to point to the new location: [OpenJDK Developers' Guide](index.html)\n","filename":"src\/about.md","additions":2,"deletions":17,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-% Bug Database\n+% Page moved\n@@ -3,10 +3,1 @@\n-::: {.NavBit}\n-[« Previous](next.html) • [TOC](index.html) • [Next »](faq.html)\n-:::\n-\n-The Bug Database section will include the guidelines for triage, priorities,\n-and status.\n-\n-::: {.NavBit}\n-[« Previous](next.html) • [TOC](index.html) • [Next »](faq.html)\n-:::\n+The OpenJDK Developers' Guide has been merged into a single document. Please update your links to point to the new location: [OpenJDK Developers' Guide](index.html)\n","filename":"src\/bugDatabase.md","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-% Change Planning and Guidelines\n+% Page moved\n@@ -3,201 +3,1 @@\n-::: {.NavBit}\n-[« Previous](codeConventions.html) • [TOC](index.html) • [Next »](reviewBodies.html)\n-:::\n-\n-This section describes the development process of identifying a bug or\n-enhancement (formerly \"Request for Enhancement\" (RFE)) and providing a\n-solution. The instructions assume that the\n-[Contributor](\/bylaws#contributor) already has a\n-working build environment and has some familiarity with an existing OpenJDK\n-[Project](bylaws#_6) and its repositories.\n-\n-Three classes of changes are treated in separate sections:\n-\n-* [Fixing a Bug](#fixing-a-bug) provides a step-by-step\n-workflow for fixing a simple bug. Of particular note is the list of\n-[noreg bug labels](#noreg) for changes which do not have regression tests.\n-* [Adding an API](#adding-an-api) is TBD.\n-* [Adding a Feature\/JSR](#adding-a-featurejsr) is TBD.\n-\n-## Fixing a Bug\n-\n-This is the list of steps which should be performed when fixing a small bug.\n-Small bugs include typos in code or specification, algorithm improvements for\n-correctness or performance, and code changes required to correctly implement\n-the specification.\n-\n-> ---\n-> Some steps refer to operations which can not be performed directly without the\n-> assistance of a [Project Committer](https:\/\/openjdk.java.net\/bylaws#committer).\n-> For example, any changes to the\n-> [bug database](https:\/\/bugs.openjdk.java.net) fall into\n-> this category. Since these steps are required,\n-> [Contributors](https:\/\/openjdk.java.net\/bylaws#contributor)\n-> are urged to work with their [Sponsors](\/sponsor\/)\n-> to complete these tasks.\n-\n-> ---\n-\n-For the purposes of brevity this document will use the term \"bug\" to refer to\n-both bugs and enhancements unless otherwise noted. Hence \"fix for a bug\" could\n-also imply \"implementation for an enhancement\".\n-\n-#. **Discuss the intended change**\n-\n-   Send an e-mail to the appropriate development mailing list for the Project that\n-   maintains the code. The e-mail should have a subject line of the form:\n-\n-       6543210: My favorite bug\n-\n-   where `6543210` is replaced with the actual bug id number or\n-   \"[NEW BUG]\" if the bug id is not known and `My favorite bug` is\n-   replaced with the bug's summary.  The message should describe the intended\n-   change, which components may be affected, and any other risks or\n-   concerns.\n-\n-#. **Does a bug id exist for the work?**\n-\n-   **Yes**\n-   :   Continue\n-\n-   **No**\n-   :   Create a bug in an appropriate component\/sub-component.\n-\n-#. **Set the bug status to \"Open\"**\n-\n-   This communicates intent to fix the bug to other members of the Project. It\n-   also sets the expectation for downstream teams such as SQE and JCK that the bug\n-   will be fixed in an upcoming integration.\n-\n-#. **Does the fix for the bug require a specification change,\n-   directly affect an external interface, or otherwise have a compatibility\n-   impact?**\n-\n-   **Yes**\n-   :   Submission of a CSR request is required. The CSR must be [approved](glossary.html#approved) before the bug fix is pushed to a feature release or update release repository. The work may begin concurrently with the CSR review, but may need to be modified in response to CSR feedback. A summary of the CSR process may be found in [Review Bodies](reviewBodies.html).\n-\n-   **No**\n-   :   Continue\n-\n-#. **Fix the bug**\n-\n-   Assuming that the development team approves of the intended approach, begin working on the code using the latest source available from the appropriate OpenJDK Project [repository](https:\/\/hg.openjdk.java.net).\n-\n-#. [**Is it possible to write a test to detect the bug?**]{#noreg}\n-\n-   **Yes**\n-   :   For bugs, provide a [jtreg](..\/jtreg\/) regression test as part of the changeset. For enhancements that directly affect one or more exported interfaces, add an adequate set of jtreg unit tests as part of the changeset. By convention all regression and unit tests should contain a [\\@bug tag](https:\/\/openjdk.java.net\/jtreg\/tag-spec.html#INFORMATIONAL_TAGS9) referencing at least one bugid.\n-\n-   :   An entirely new test (or tests) may not be required. For example, if the bug is an existing regression test failure, then when fixing the bug you should just add the new bug ID to the list of space-delimited bugs in the [\\@bug tag](https:\/\/openjdk.java.net\/jtreg\/tag-spec.html#INFORMATIONAL_TAGS) of the failing regression test, even if the test did not need to be updated.\n-\n-   **No**\n-   :   An explanation for why a test is unnecessary or infeasible is required. Such an explanation is recorded by adding a label, and possibly a comment, to the bug report. The label has the prefix **`noreg`** for regression tests and **`nounit`** for unit tests. The suffix of the label is described in detail in the [JBS Label Dictionary](jbslabels.html#noreg)\n-\n-#. **Is modification of shared Java code needed?**\n-\n-   **Yes**\n-   :   It is often sufficient to build and test on a single platform, but sometimes it is not. Use discretion.\n-\n-   **No**\n-   :   Continue\n-\n-#. **Is modification of shared C code needed?**\n-\n-   **Yes**\n-   :   Build and test on at least one instance of all three of the supported operating systems (Solaris, Linux, and Windows).\n-\n-   **No**\n-   :   Continue\n-\n-#. **Is modification of C or Java platform-specific code needed?**\n-\n-   **Yes**\n-   :   Build and test on all relevant platforms.  Code under `src\/solaris` builds on Solaris, Linux, and MacOS X despite its name.\n-\n-   **No**\n-   :   Continue\n-\n-#. **Run relevant regression and unit tests on all relevant platforms**\n-\n-   These include tests for external interfaces as well as other kinds of tests,\n-   e.g., HotSpot tests that use internal verification mechanisms. See\n-   [Testing Changes](testingChanges.html) for more details.\n-\n-#. **Run relevant JCK tests on all relevant platforms**\n-\n-   Running JCK tests is particularly important if the change may have unexpected\n-   side-effects. See [JCK Acquisition](jckAcquisition.html) for more details.\n-\n-#. **Request a review of the changes by sending an e-mail to\n-the development alias**\n-\n-   A patch can be submitted as described in [Contributing](..\/contribute\/). Alternatively, a\n-   [\"webrev\"](webrevHelp.html) may be generated and\n-   uploaded to the [community code review](https:\/\/cr.openjdk.java.net\/) server.\n-   The complete webrev generation and upload procedure is described at\n-   [https:\/\/cr.openjdk.java.net](https:\/\/cr.openjdk.java.net\/).\n-\n-   Changeset pushes before the\n-   [Feature Complete](\/projects\/jdk8\/milestones#Feature_Complete)\n-   require at least one [Reviewer](\/bylaws#reviewer); pushes after\n-   the Feature Complete require at least two Reviewers. In either case, the\n-   more the merrier. Some teams may require more Reviewers. Check with\n-   members of the Project.\n-\n-   Reviewers should examine not only the code being added or\n-   changed but also the relevant unit or regression tests.\n-\n-   A change may require multiple Reviewers because it affects\n-   multiple areas.  Reviewers should be aware that they take full\n-   responsibility for the appropriateness and correctness of any changes in\n-   their area of expertise.  If something goes wrong (e.g., the build breaks)\n-   and the change&apos;s author is unavailable, they may be asked to deal with\n-   the problem.  Potential Reviewers are encouraged to refuse to review code\n-   for which they are not qualified.\n-\n-#. **Create a changeset**\n-\n-   Follow the instructions in [Producing a Changeset](producingChangeset.html).\n-\n-#. **Update the bug content**\n-\n-   Bug descriptions and comments should be written\n-   in a professional manner.\n-\n-#. **Push the changeset into the Project's forest**\n-\n-   Follow the instructions in [Producing a Changeset](producingChangeset.html).\n-   If working with a Sponsor, send the changeset to the\n-   development mailing list so that they can handle the final push.\n-\n-   The push will trigger a update to the bug which will make the\n-   following changes:\n-    \n-    * Set the bug's \"Status\" to \"Resolved\" and \"Resolution to \"Fixed\".\n-    * Set the bug's \"Fix Version\/s\" to an appropriate release.\n-    * Set the bug's \"Resolved in Build\" to \"team\".\n-    * Add a Comment containing a reference to the changeset.\n-\n-_Congratulations!_ Your changeset will now make its\n-way towards a promoted build. When the changeset becomes part of a promoted\n-build, the bug's \"Resolved in Build\" will have a value of \\\"b\\[1-9\\]\\[0-9\\]&ast;\\\"\n-to indicate the build number.\n-\n-## Adding an API\n-\n-TBD\n-\n-This section will cover additional considerations for changes that add new\n-public APIs. For instance, they need to be implementable on all platforms.\n-\n-## Adding a Feature\/JSR\n-\n-TBD\n-\n-This section will describe the process for adding new functionality which\n-requires more than just a few new APIs. In particular, this will cover how the\n-JSR process interacts with the OpenJDK development life cycle.\n-\n-::: {.NavBit}\n-[« Previous](codeConventions.html) • [TOC](index.html) • [Next »](reviewBodies.html)\n-:::\n+The OpenJDK Developers' Guide has been merged into a single document. Please update your links to point to the new location: [OpenJDK Developers' Guide](index.html)\n","filename":"src\/changePlanning.md","additions":2,"deletions":202,"binary":false,"changes":204,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-% Code Conventions\n+% Page moved\n@@ -3,10 +3,1 @@\n-::: {.NavBit}\n-[« Previous](mailinglists.html) • [TOC](index.html) • [Next »](changePlanning.html)\n-:::\n-\n-This section will contain a major revision of our antiquated code conventions\n-[document](https:\/\/www.oracle.com\/technetwork\/java\/codeconvtoc-136057.html).\n-\n-::: {.NavBit}\n-[« Previous](mailinglists.html) • [TOC](index.html) • [Next »](changePlanning.html)\n-:::\n+The OpenJDK Developers' Guide has been merged into a single document. Please update your links to point to the new location: [OpenJDK Developers' Guide](index.html)\n","filename":"src\/codeConventions.md","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-% Code Owners\n+% Page moved\n@@ -3,200 +3,1 @@\n-::: {.NavBit}\n-[TOC](index.html)\n-:::\n-\n-This list is intended to make it easier to identify which email list to include in code reviews when making changes in different areas. The list may also help when assigning bugs based on which code they are found in. Please note that some directories may have been created or removed between releases. The intention here is to include directories that exists in mainline, LTS releases and other releases (post JDK 9) commonly being updated.\n-\n-## Area mailing lists\n-\n-* Build: [`build-dev@openjdk.java.net`](mailto:build-dev@openjdk.java.net)\n-* Client\n-  * AWT: [`awt-dev@openjdk.java.net`](mailto:awt-dev@openjdk.java.net)\n-  * Beans: [`beans-dev@openjdk.java.net`](mailto:beans-dev@openjdk.java.net)\n-  * Java 2D: [`2d-dev@openjdk.java.net`](mailto:2d-dev@openjdk.java.net)\n-  * Java FX: [`openjfx-dev@openjdk.java.net`](mailto:openjfx-dev@openjdk.java.net)\n-  * jpackage: [`core-libs-dev@openjdk.java.net`](mailto:core-libs-dev@openjdk.java.net)\n-  * Sound: [`sound-dev@openjdk.java.net`](mailto:sound-dev@openjdk.java.net)\n-  * Swing: [`swing-dev@openjdk.java.net`](mailto:swing-dev@openjdk.java.net)\n-* Core Libs: [`core-libs-dev@openjdk.java.net`](mailto:core-libs-dev@openjdk.java.net)\n-  * Net: [`net-dev@openjdk.java.net`](mailto:net-dev@openjdk.java.net)\n-  * NIO: [`nio-dev@openjdk.java.net`](mailto:nio-dev@openjdk.java.net)\n-* HotSpot: [`hotspot-dev@openjdk.java.net`](mailto:hotspot-dev@openjdk.java.net)\n-  * Compiler: [`hotspot-compiler-dev@openjdk.java.net`](mailto:hotspot-compiler-dev@openjdk.java.net)\n-  * GC: [`hotspot-gc-dev@openjdk.java.net`](mailto:hotspot-gc-dev@openjdk.java.net)\n-  * Runtime: [`hotspot-runtime-dev@openjdk.java.net`](mailto:hotspot-runtime-dev@openjdk.java.net)\n-  * Serviceability: [`serviceability-dev@openjdk.java.net`](mailto:serviceability-dev@openjdk.java.net)\n-* I18n: [`i18n-dev@openjdk.java.net`](mailto:i18n-dev@openjdk.java.net)\n-* LangTools\n-  * Amber Project: [`amber-dev@openjdk.java.net`](mailto:amber-dev@openjdk.java.net)\n-  * Javac: [`compiler-dev@openjdk.java.net`](mailto:compiler-dev@openjdk.java.net)\n-  * Javadoc: [`javadoc-dev@openjdk.java.net`](mailto:javadoc-dev@openjdk.java.net)\n-  * JShell: [`kulla-dev@openjdk.java.net`](mailto:kulla-dev@openjdk.java.net)\n-  * Panama Project: [`panama-dev@openjdk.java.net`](mailto:panama-dev@openjdk.java.net)\n-  * Valhalla Project: [`valhalla-dev@openjdk.java.net`](mailto:valhalla-dev@openjdk.java.net)\n-* Security: [`security-dev@openjdk.java.net`](mailto:security-dev@openjdk.java.net)\n-\n-## Directory to area mapping\n-\n-* `make` – Build team\n-* `hotspot` – HotSpot\n-  * `cpu` – Compiler, Runtime\n-  * `jdk.*` – Compiler\n-  * `os` – Runtime\n-  * `os_cpu` – Compiler\n-  * `share`\n-    * `adlc` – Compiler\n-    * `aot` – Compiler\n-    * `asm` – Runtime\n-    * `c1` – Compiler\n-    * `ci` – Compiler\n-    * `classfile` – Runtime\n-    * `code` – Compiler\n-    * `compiler` – Compiler\n-    * `gc` – GC\n-    * `include` – HotSpot\n-    * `interpreter` – Runtime\n-    * `jfr` – Runtime\n-    * `jvmci` – Compiler\n-    * `libadt` – Compiler\n-    * `logging` – Runtime\n-    * `memory` – Runtime, GC\n-    * `metaprogramming` – Runtime\n-    * `oops` – Runtime\n-    * `opto` – Compiler\n-    * `precompiled` – Runtime\n-    * `prims` – Runtime, Serviceability\n-    * `runtime` – Runtime\n-    * `services` – Runtime\n-    * `shark` – Compiler\n-    * `trace` – Runtime\n-    * `utilities` – Runtime\n-* `java.base`\n-  * Core Libs should almost always be included but LangTools, HotSpot, Security and\/or I18n may also be involved.\n-  * `classes`\n-    * `crypto` – Security\n-    * `internal` – HotSpot, Core Libs\n-    * `invoke` – Core Libs\n-    * `io` – NIO\n-    * `lang` – Core Libs\n-    * `launcher` – LangTools\n-    * `math` – Core Libs\n-    * `net` – Net\n-    * `nio` – NIO\n-    * `reflect` – Core Libs\n-    * `security` – Security\n-    * `text` – I18n\n-    * `time` – Core Libs\n-    * `util` – I18n, Core Libs\n-  * `conf`\n-    * `sdp` – Net\n-    * `security` – Security\n-  * `legal` –\n-  * `lib\/security` – Security\n-  * `man`\n-    * `java.1` - LangTools\n-    * `jfr.1` - Runtime\n-    * `keytool.1` - Security\n-  * `native`\n-    * `common` –\n-    * `include` – Runtime, Core Libs\n-    * `jspawnhelper` – LangTools\n-    * `launcher` – LangTools\n-    * `libfdlibm` – Core Libs\n-    * `libjava` – Core Libs\n-    * `libjimage` – LangTools, Core Libs\n-    * `libjli` – LangTools\n-    * `libjsig` – HotSpot\n-    * `libnet` – Net\n-    * `libnio` – NIO\n-    * `libosxsecurity` – Security\n-    * `libverify` – LangTools\n-    * `libzip` – Core Libs\n-* `java.compiler` – LangTools\n-* `java.datatransfer` – AWT\n-* `java.desktop` – Client\n-  * Many files in the awt directories are shared between 2D and AWT\n-    * See [https:\/\/openjdk.java.net\/groups\/2d\/2dawtfiles.html](https:\/\/openjdk.java.net\/groups\/2d\/2dawtfiles.html)\n-    * And see [https:\/\/openjdk.java.net\/groups\/2d](https:\/\/openjdk.java.net\/groups\/2d)\n-  * `color`, `font`, `freetype`, `geom`, `imageio`, `java2d`, `jpeg`, `lcms`, `mlib`, `print`, Graphics primitives – 2D\n-  * `splashscreen`, `dnd`, `eawt`, `lwawt` – AWT\n-  * `im`, InputMethods – I18n, AWT\n-  * `libjsound`, `sound` – Sound\n-  * `accessibility`, `laf` – Swing\n-* `java.instrument` – Serviceability\n-* `java.logging` – Core Libs\n-* `java.management` – Serviceability\n-* `java.management.rmi` – Serviceability\n-* `java.naming` – Core Libs\n-* `java.net.http` – Net\n-* `java.prefs` – Core Libs\n-* `java.rmi` – Core Libs\n-* `java.scripting` – LangTools\n-* `java.se` – Core Libs\n-* `java.security.jgss` – Security\n-* `java.security.sasl` – Security\n-* `java.smartcardio` – Security\n-* `java.sql` – Core Libs\n-* `java.sql.rowset` – Core Libs\n-* `java.transaction.xa` – Core Libs\n-* `java.xml` – Core Libs\n-* `java.xml.crypto` – Security\n-* `jdk.accessibility` – Swing\n-* `jdk.aot` – HotSpot Compiler\n-* `jdk.attach` – Serviceability\n-* `jdk.charsets` – I18n, Core Libs\n-* `jdk.compiler` – LangTools\n-* `jdk.crypto.cryptoki` – Security\n-* `jdk.crypto.ec` – Security\n-* `jdk.crypto.mscapi` – Security\n-* `jdk.crypto.ucrypto` – Security\n-* `jdk.dynalink` – LangTools\n-* `jdk.editpad` – LangTools\n-* `jdk.hotspot.agent` – Serviceability\n-* `jdk.httpserver` – Net\n-* `jdk.incubator.foreign` – LangTools\n-* `jdk.incubator.httpclient` – Net\n-* `jdk.incubator.jpackage` –\n-* `jdk.internal.ed` – LangTools\n-* `jdk.internal.jvmstat` – Serviceability\n-* `jdk.internal.le` – LangTools\n-* `jdk.internal.opt` – LangTools\n-* `jdk.internal.vm.ci` – HotSpot Compiler\n-* `jdk.internal.vm.compiler` – HotSpot Compiler\n-* `jdk.internal.vm.compiler.management` – HotSpot Compiler\n-* `jdk.jartool` – LangTools\n-* `jdk.javadoc` – LangTools\n-* `jdk.jcmd` – Serviceability\n-* `jdk.jconsole` – Serviceability\n-* `jdk.jdeps` – Core Libs\n-* `jdk.jdi` – Serviceability\n-* `jdk.jdwp.agent` – Serviceability\n-* `jdk.jfr` – Runtime\n-* `jdk.jlink` – LangTools\n-* `jdk.jshell` – LangTools\n-* `jdk.jsobject` – LangTools\n-* `jdk.jstatd` – Serviceability\n-* `jdk.localedata` – I18n\n-* `jdk.management` – Serviceability\n-* `jdk.management.agent` – Serviceability\n-* `jdk.management.jfr` – Runtime\n-* `jdk.naming.dns` – Core Libs\n-* `jdk.naming.rmi` – Core Libs\n-* `jdk.net` – Net\n-* `jdk.nio.mapmode` – NIO\n-* `jdk.pack` – LangTools\n-* `jdk.rmic` – Core Libs\n-* `jdk.scripting.nashorn` – LangTools\n-* `jdk.scripting.nashorn.shell` – LangTools\n-* `jdk.sctp` – Net\n-* `jdk.security.auth` – Security\n-* `jdk.security.jgss` – Security\n-* `jdk.unsupported` – Core Libs\n-* `jdk.unsupported.desktop` – Swing\n-* `jdk.xml.dom` – Core Libs\n-* `jdk.zipfs` – Core Libs\n-* `sample` –\n-* `utils` – \n-\n-::: {.NavBit}\n-[TOC](index.html)\n-:::\n+The OpenJDK Developers' Guide has been merged into a single document. Please update your links to point to the new location: [OpenJDK Developers' Guide](index.html)\n","filename":"src\/codeowners.md","additions":2,"deletions":201,"binary":false,"changes":203,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-% Frequently Asked Questions\n+% Page moved\n@@ -3,12 +3,1 @@\n-::: {.NavBit}\n-[« Previous](bugDatabase.html) • [TOC](index.html) • [Next »](about.html)\n-:::\n-\n-The FAQ is transient. It should only contain things that have not been\n-integrated into the main document. If questions remain in the FAQ over more\n-than a few revisions, it will be to provide a pointer to the section in the\n-main document which contains the answer.\n-\n-::: {.NavBit}\n-[« Previous](bugDatabase.html) • [TOC](index.html) • [Next »](about.html)\n-:::\n+The OpenJDK Developers' Guide has been merged into a single document. Please update your links to point to the new location: [OpenJDK Developers' Guide](index.html)\n","filename":"src\/faq.md","additions":2,"deletions":13,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -1,107 +0,0 @@\n-% `get_source.sh` Output\n-\n-::: {.NavBit}\n-[« Previous](repositories.html#cloneForest) • [TOC](index.html) • [Next »](repositories.html#cloneSingle)\n-:::\n-\n-    $ sh .\/get_source.sh\n-    # Repositories:  corba jaxp jaxws langtools jdk hotspot nashorn\n-\n-                    corba:   hg clone http:\/\/hg.openjdk.java.net\/jdk9\/dev\/corba corba\n-                     jaxp:   hg clone http:\/\/hg.openjdk.java.net\/jdk9\/dev\/jaxp jaxp\n-                     jaxp:   requesting all changes\n-                    corba:   requesting all changes\n-                     jaxp:   adding changesets\n-                    corba:   adding changesets\n-                    corba:   adding manifests\n-                     jaxp:   adding manifests\n-                    corba:   adding file changes\n-                     jaxp:   adding file changes\n-    Waiting 5 secs before spawning next background command.\n-                    corba:   added 567 changesets with 3577 changes to 1398 files\n-                    corba:   updating to branch default\n-                    corba:   1195 files updated, 0 files merged, 0 files removed, 0 files unresolved\n-                    jaxws:   hg clone http:\/\/hg.openjdk.java.net\/jdk9\/dev\/jaxws jaxws\n-                langtools:   hg clone http:\/\/hg.openjdk.java.net\/jdk9\/dev\/langtools langtools\n-                    jaxws:   requesting all changes\n-                langtools:   requesting all changes\n-                    jaxws:   adding changesets\n-                langtools:   adding changesets\n-                    jaxws:   adding manifests\n-                     jaxp:   added 570 changesets with 6285 changes to 4230 files\n-                     jaxp:   updating to branch default\n-    Waiting 5 secs before spawning next background command.\n-                    jaxws:   adding file changes\n-                     jaxp:   2078 files updated, 0 files merged, 0 files removed, 0 files unresolved\n-                langtools:   adding manifests\n-                langtools:   adding file changes\n-                      jdk:   hg clone http:\/\/hg.openjdk.java.net\/jdk9\/dev\/jdk jdk\n-                  hotspot:   hg clone http:\/\/hg.openjdk.java.net\/jdk9\/dev\/hotspot hotspot\n-                  hotspot:   requesting all changes\n-                      jdk:   requesting all changes\n-                  hotspot:   adding changesets\n-                      jdk:   adding changesets\n-    Waiting 5 secs before spawning next background command.\n-                  hotspot:   adding manifests\n-                  nashorn:   hg clone http:\/\/hg.openjdk.java.net\/jdk9\/dev\/nashorn nashorn\n-                  nashorn:   requesting all changes\n-                  nashorn:   adding changesets\n-                  nashorn:   adding manifests\n-                  nashorn:   adding file changes\n-                  hotspot:   adding file changes\n-                  nashorn:   added 766 changesets with 6302 changes to 2248 files\n-                  nashorn:   updating to branch default\n-                  nashorn:   2121 files updated, 0 files merged, 0 files removed, 0 files unresolved\n-                    jaxws:   added 471 changesets with 15683 changes to 6727 files\n-                    jaxws:   updating to branch default\n-                      jdk:   adding manifests\n-                langtools:   added 2326 changesets with 21344 changes to 7022 files\n-                    jaxws:   3710 files updated, 0 files merged, 0 files removed, 0 files unresolved\n-                langtools:   updating to branch default\n-                langtools:   6212 files updated, 0 files merged, 0 files removed, 0 files unresolved\n-                  hotspot:   added 5876 changesets with 35016 changes to 5071 files\n-                  hotspot:   updating to branch default\n-                  hotspot:   4183 files updated, 0 files merged, 0 files removed, 0 files unresolved\n-                      jdk:   adding file changes\n-                      jdk:   added 9280 changesets with 86814 changes to 26475 files\n-                      jdk:   updating to branch default\n-                      jdk:   22161 files updated, 0 files merged, 0 files removed, 0 files unresolved\n-    # Repositories:  .\/corba . .\/hotspot .\/jaxp .\/jaxws .\/jdk .\/langtools .\/nashorn\n-\n-                  .\/corba:   cd .\/corba && hg pull -u\n-                        .:   cd . && hg pull -u\n-                .\/hotspot:   cd .\/hotspot && hg pull -u\n-                   .\/jaxp:   cd .\/jaxp && hg pull -u\n-                  .\/jaxws:   cd .\/jaxws && hg pull -u\n-                    .\/jdk:   cd .\/jdk && hg pull -u\n-              .\/langtools:   cd .\/langtools && hg pull -u\n-                .\/nashorn:   cd .\/nashorn && hg pull -u\n-                  .\/corba:   pulling from http:\/\/hg.openjdk.java.net\/jdk9\/dev\/corba\n-                        .:   pulling from http:\/\/hg.openjdk.java.net\/jdk9\/dev\n-                  .\/jaxws:   pulling from http:\/\/hg.openjdk.java.net\/jdk9\/dev\/jaxws\n-                  .\/corba:   searching for changes\n-                  .\/corba:   no changes found\n-                    .\/jdk:   pulling from http:\/\/hg.openjdk.java.net\/jdk9\/dev\/jdk\n-                .\/nashorn:   pulling from http:\/\/hg.openjdk.java.net\/jdk9\/dev\/nashorn\n-                        .:   searching for changes\n-                        .:   no changes found\n-                  .\/jaxws:   searching for changes\n-                  .\/jaxws:   no changes found\n-              .\/langtools:   pulling from http:\/\/hg.openjdk.java.net\/jdk9\/dev\/langtools\n-                .\/nashorn:   searching for changes\n-                .\/nashorn:   no changes found\n-                    .\/jdk:   searching for changes\n-                    .\/jdk:   no changes found\n-              .\/langtools:   searching for changes\n-              .\/langtools:   no changes found\n-                   .\/jaxp:   pulling from http:\/\/hg.openjdk.java.net\/jdk9\/dev\/jaxp\n-                .\/hotspot:   pulling from http:\/\/hg.openjdk.java.net\/jdk9\/dev\/hotspot\n-                   .\/jaxp:   searching for changes\n-                   .\/jaxp:   no changes found\n-                .\/hotspot:   searching for changes\n-                .\/hotspot:   no changes found\n-    Waiting 5 secs before spawning next background command.\n-\n-::: {.NavBit}\n-[« Previous](repositories.html#cloneForest) • [TOC](index.html) • [Next »](repositories.html#cloneSingle)\n-:::\n","filename":"src\/getSource.md","additions":0,"deletions":107,"binary":false,"changes":107,"status":"deleted"},{"patch":"@@ -1,1 +1,1 @@\n-% Glossary\n+% Page moved\n@@ -3,66 +3,1 @@\n-::: {.NavBit}\n-[« Previous](about.html) • [TOC](index.html)\n-:::\n-\n-[**accepted**]{#accepted} (by the CCC)\n-:   The stage of the CCC process after \"DRAFT\", and \"PROPOSED\". At this stage the\n-    primary goals are to ensure that the proposed changes are suitable for the\n-    release in a general sense and that the requisite JCK and SQE resources will be\n-    available.\n-\n-[**approved**]{#approved} (by the CCC)\n-:   The stage of the CCC process after \"FINAL\". The CCC has approved the final\n-   version of the request which permits push into the project forest.\n-\n-[**changeset**]{#changeset}\n-:   A collection of changes with respect to the current clone of a repository.\n-\n-[**development freeze**]{#developmentfreeze}\n-:   The date by which all planned work should be complete for a particular line of\n-    development. After a line's development freeze, only exit-criteria bugs may be\n-    fixed in that line.\n-\n-[**forest**]{#forest}\n-:   A collection of Mercurial repositories which can be managed as a set of nested\n-    repositories. The name \"Forest\" originally came from the Mercurial \"Forest\n-    Extension\" which can be used with some versions of Mercurial, but in general is\n-    no longer recommended. The script\n-    `common\/bin\/hgforest.sh` can be used to apply a\n-    Mercurial `hg` command to all the repositories in\n-    a forest.\n-\n-[**Group**]{#group}\n-:   A collection of [Participants](\/bylaws#participant) who engage in\n-    open conversation about a common interest. That interest may be in the\n-    creation, enhancement, or maintenance of a specific body of code or it may lie\n-    in other areas, e.g., quality, documentation, or evangelism. See the\n-    [Group overview](..\/groups\/).\n-\n-[**Mercurial**]{#mercurial}\n-:   A free, cross-platform, distributed source management tool. Source bundles and\n-    binary packages for Mercurial are available at\n-    [https:\/\/www.selenic.com\/mercurial\/wiki\/index.cgi](https:\/\/www.selenic.com\/mercurial\/wiki\/index.cgi\/Mercurial).\n-    The main Mercurial documentation is available at\n-    [http:\/\/hgbook.red-bean.com](https:\/\/hgbook.red-bean.com\/).\n-\n-[**Project**]{#project}\n-:   A collaborative effort to produce a specific artifact, which may be a body of\n-    code, or documentation, or some other material. See the\n-    [Project overview](..\/projects\/).\n-\n-[**repository**]{#repository}\n-:   A directory tree in the filesystem that Mercurial treats specially. This tree\n-   contains the source files and their revision history.\n-\n-[**trivial**]{#trivial}\n-:   A change that is small, well contained, and makes no semantic changes. Typically fixing obvious typos or renaming some local identifier. Trivial changes can also be pushing an already reviewed change that was missed in an earlier push (e.g. forgot to add a file) or generated changes like an [`hg backout`](next.html#backing-out-a-change). It's up to the author of a change to claim that the change is trivial in the RFR, and it's up to the Reviewer whether to approve such a claim. A change is only trivial if the Reviewer says so. Trivial changes does not have to wait 24 hours before being pushed, and only needs one Reviewer, even in areas where stricter rules for pushing normally applies.\n-\n-[**webrev**]{#webrev}\n-:   A tool and its output. In JDK release forests, the script,\n-    [`webrev.ksh`](https:\/\/hg.openjdk.java.net\/code-tools\/webrev\/raw-file\/tip\/webrev.ksh),\n-    examines a forest or repository to generate a set of web-based views of\n-    differences.\n-\n-::: {.NavBit}\n-[« Previous](about.html) • [TOC](index.html)\n-:::\n+The OpenJDK Developers' Guide has been merged into a single document. Please update your links to point to the new location: [OpenJDK Developers' Guide](index.html)\n","filename":"src\/glossary.md","additions":2,"deletions":67,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -1,94 +0,0 @@\n-%`hg help` Output\n-\n-::: {.NavBit}\n-[« Previous](repositories.html#verify) • [TOC](index.html) • [Next »](repositories.html#cloneSandbox)\n-:::\n-\n-    $ hg help\n-    Mercurial Distributed SCM\n-\n-    list of commands:\n-\n-     add           add the specified files on the next commit\n-     addremove     add all new files, delete all missing files\n-     annotate      show changeset information by line for each file\n-     archive       create an unversioned archive of a repository revision\n-     backout       reverse effect of earlier changeset\n-     bisect        subdivision search of changesets\n-     bookmarks     track a line of development with movable markers\n-     branch        set or show the current branch name\n-     branches      list repository named branches\n-     bundle        create a changegroup file\n-     cat           output the current or given revision of files\n-     clone         make a copy of an existing repository\n-     commit        commit the specified files or all outstanding changes\n-     copy          mark files as copied for the next commit\n-     diff          diff repository (or selected files)\n-     export        dump the header and diffs for one or more changesets\n-     forget        forget the specified files on the next commit\n-     graft         copy changes from other branches onto the current branch\n-     grep          search for a pattern in specified files and revisions\n-     heads         show branch heads\n-     help          show help for a given topic or a help overview\n-     identify      identify the working copy or specified revision\n-     import        import an ordered set of patches\n-     incoming      show new changesets found in source\n-     init          create a new repository in the given directory\n-     locate        locate files matching specific patterns\n-     log           show revision history of entire repository or files\n-     manifest      output the current or given revision of the project manifest\n-     merge         merge working directory with another revision\n-     outgoing      show changesets not found in the destination\n-     parents       show the parents of the working directory or revision\n-     paths         show aliases for remote repositories\n-     phase         set or show the current phase name\n-     pull          pull changes from the specified source\n-     push          push changes to the specified destination\n-     recover       roll back an interrupted transaction\n-     remove        remove the specified files on the next commit\n-     rename        rename files; equivalent of copy + remove\n-     resolve       redo merges or set\/view the merge status of files\n-     revert        restore files to their checkout state\n-     root          print the root (top) of the current working directory\n-     serve         start stand-alone webserver\n-     showconfig    show combined config settings from all hgrc files\n-     status        show changed files in the working directory\n-     summary       summarize working directory state\n-     tag           add one or more tags for the current or given revision\n-     tags          list repository tags\n-     unbundle      apply one or more changegroup files\n-     update        update working directory (or switch revisions)\n-     verify        verify the integrity of the repository\n-     version       output version and copyright information\n-\n-    enabled extensions:\n-\n-     jcheck        (no help text available)\n-     trees         manage loosely-coupled nested repositories\n-\n-    additional help topics:\n-\n-     config        Configuration Files\n-     dates         Date Formats\n-     diffs         Diff Formats\n-     environment   Environment Variables\n-     extensions    Using Additional Features\n-     filesets      Specifying File Sets\n-     glossary      Glossary\n-     hgignore      Syntax for Mercurial Ignore Files\n-     hgweb         Configuring hgweb\n-     merge-tools   Merge Tools\n-     multirevs     Specifying Multiple Revisions\n-     patterns      File Name Patterns\n-     phases        Working with Phases\n-     revisions     Specifying Single Revisions\n-     revsets       Specifying Revision Sets\n-     subrepos      Subrepositories\n-     templating    Template Usage\n-     urls          URL Paths\n-\n-    use \"hg -v help\" to show builtin aliases and global options\n-\n-::: {.NavBit}\n-[« Previous](repositories.html#verify) • [TOC](index.html) • [Next »](repositories.html#cloneSandbox)\n-:::\n","filename":"src\/hgHelp.md","additions":0,"deletions":94,"binary":false,"changes":94,"status":"deleted"},{"patch":"@@ -1,1 +1,1 @@\n-% Index\n+% OpenJDK Developers' Guide\n@@ -3,2 +3,42 @@\n-::: {.NavBit}\n-[Next »](intro.html)\n+# Introduction\n+\n+Welcome to the OpenJDK Developers' Guide!\n+\n+The OpenJDK Community is the place to collaborate on open-source implementations of the Java Platform, Standard Edition, and related projects.  It was created in November 2006, when initial portions of the JDK source code were published under the GPLv2 license.\n+\n+In order to work together efficiently, clear directions are sometimes needed to avoid misconceptions and to align developers' views of terminology and process. The OpenJDK Community is a fairly pragmatic place. \"Do the right thing\" is most often the right course of action. Still, if people do things in the same right way then everyone's work becomes more transparent and easier for others to follow. For this reason most parts of the development process have standard flows that are the recommended ways to do things.\n+\n+The goal of this guide is to answer questions that developers of the JDK might have around development process, tooling, standards, and so forth. The formal rules and processes are described in other documents, such as [JEP 1](https:\/\/openjdk.java.net\/jeps\/1) for the JDK Enhancement-Proposal & Roadmap Process, and [JEP 3](https:\/\/openjdk.java.net\/jeps\/3) for the JDK Release Process. This guide is meant to be a complement to such documents, with tutorials and examples for how to follow these rules and how to work together with the rest of the OpenJDK Community.\n+\n+There are many common use cases that aren't detailed in the formal process. This guide suggests how to work in such cases.\n+\n+# Repositories\n+\n+This section describes the OpenJDK repository terminology and naming scheme. It also includes minimal instructions to acquire source from the OpenJDK repository, [`https:\/\/hg.openjdk.java.net\/`](https:\/\/hg.openjdk.java.net\/).\n+\n+> ---\n+> Note that source may be available from other locations, for example `src.zip` from a full JDK distribution. However, OpenJDK contributions must use source from the [OpenJDK Mercurial repository](https:\/\/hg.openjdk.java.net\/) since other source distributions may contain older code or code which differs due to licensing.\n+\n+> ---\n+\n+Operations which are performed repeatedly, such as creating changesets, merging, and pushing are described in [Producing a Changeset](#producing-a-changeset).\n+\n+* [Terminology and Naming Scheme](#terminology-and-naming-scheme) defines the nomenclature used by OpenJDK.\n+* [Installing and Configuring Mercurial](#installing-and-configuring) enumerates the required software, provides links for download, and describes basic installation and configuration.\n+* [Cloning](#clone) covers the procedure for obtaining private copies of source repositories.\n+\n+This document assumes familiarity with the first two chapters of the free on-line book [Mercurial: The Definitive Guide](http:\/\/hgbook.red-bean.com).\n+\n+## Terminology and Naming Scheme\n+\n+The OpenJDK code base for all [Projects](https:\/\/openjdk.java.net\/bylaws#_6) is stored in Mercurial repositories which contain the source files and their change history. Some Projects may choose to organize their code into multiple, possibly related, Mercurial repositories. For instance, [JDK 9](https:\/\/openjdk.java.net\/projects\/jdk9) uses a forest of multiple related repositories which contain components of the entire JDK. Projects which are based on the JDK, such as [IcedTea](https:\/\/openjdk.java.net\/projects\/icedtea) and [Jigsaw](https:\/\/openjdk.java.net\/projects\/jigsaw) also use this model. In contrast, [Code Tools](https:\/\/openjdk.java.net\/projects\/code-tools) uses an unrelated repository for each tool and [Graal](https:\/\/openjdk.java.net\/projects\/graal) uses only a single repository. Regardless of how a Project has chosen to store their code, each [Contributor](https:\/\/openjdk.java.net\/bylaws#contributor) clones the repository associated with the code they are modifying.\n+\n+> ---\n+> Consult the Project's documentation or [mailing list](https:\/\/mail.openjdk.java.net) to determine the appropriate repository, development conventions, and helpful tools.\n+\n+> ---\n+\n+This is the typical development model:\n+\n+::: {style=\"text-align:center;\"}\n+![Diagram of server repos and user's clone](devModel.gif)\n@@ -7,33 +47,501 @@\n-* [Introduction](intro.html)\n-* [Process Workflow](processWorkflow.html)\n-* [Repositories](repositories.html)\n-  * [Terminology and Naming Scheme](repositories.html#terminology-and-naming-scheme)\n-  * [Installing and Configuring Mercurial](repositories.html#installing-and-configuring-mercurial)\n-  * [Cloning](repositories.html#cloning)\n-* [Mailing Lists](mailingLists.html)\n-* [Code Conventions](codeConventions.html)\n-* [Change Planning and Guidelines](changePlanning.html)\n-  * [Fixing a Bug](changePlanning.html#fixing-a-bug)\n-  * [Adding an API](changePlanning.html#adding-an-api)\n-  * [Adding a Feature](changePlanning.html#adding-a-featurejsr)\n-* [Review Bodies](reviewBodies.html)\n-* [Testing Changes](testingChanges.html)\n-* [JCK Acquisition](jckAcquisition.html)\n-* [Producing a Changeset](producingChangeset.html)\n-  * [Setting a JDK User Name](producingChangeset.html#setting-a-jdk-user-name)\n-  * [Creating](producingChangeset.html#creating)\n-  * [Merging](producingChangeset.html#merging)\n-  * [Pushing](producingChangeset.html#pushing)\n-* [What Happens Next](next.html)\n-  * [Requesting a Backport](next.html#requesting-a-backport)\n-  * [Filing a Bug](next.html#filing-a-bug)\n-  * [ProblemListing or `@ignore`-ing a Test](#problemlisting-or-ignore-ing-a-test)\n-  * [Backing Out a Change](next.html#backing-out-a-change)\n-* [Bug Database](bugDatabase.html)\n-* [Frequently Asked Questions](faq.html)\n-* [About this Guide](about.html)\n-* [Glossary](glossary.html)\n-* [Source Code to area mapping](codeowners.html)\n-\n-::: {.NavBit}\n-[Next »](intro.html)\n+A Contributor creates a _clone_ (a local copy called \"9dev\") of a read\/write repository (\"jdk9\/dev\") which resides on the OpenJDK Mercurial server. They work on their change in the clone and locally _commit_ a changeset. After the new changeset(s) are verified, they're either _pushed_ directly from the clone or _exported_ and delivered to a [Committer](https:\/\/openjdk.java.net\/bylaws#committer) who can perform the push into the server repository for all to see.\n+\n+> ---\n+> The use of _gate repositories_ was eliminated when the Mercurial servers were upgraded in March 2014.\n+\n+> ---\n+\n+The repositories use the following naming scheme:\n+\n+> `<project>\/<component_path>`\n+\n+where\n+\n+> ------------------  ----  ----------------------------------------------------\n+> _project_            ::   the short name of an OpenJDK [Project](https:\/\/openjdk.java.net\/bylaws#_6) such as \"jdk9\", \"openjfx\", or \"sumatra\"\n+> _component_path_     ::   the path to a repository containing the code base as designated by the [Project Lead](https:\/\/openjdk.java.net\/bylaws#project-lead).\n+> ------------------  ----  ----------------------------------------------------\n+\n+## Installing and Configuring Mercurial\n+\n+Mercurial is a free, cross-platform, distributed source management tool. Source bundles and binary packages for Mercurial are available at [https:\/\/www.selenic.com\/mercurial\/wiki\/index.cgi](https:\/\/www.selenic.com\/mercurial\/wiki\/index.cgi\/Mercurial). The OpenJDK repositories recommend installation of Mercurial 2.6.3 (or later). A Mercurial installation is sufficient to clone a repository. Contributors who wish to submit changes will need some additional configuration as described below.\n+\n+Some Projects may recommend additional tools or scripts that help with repository manipulation and code development. For instance, in JDK 9, the utility script `common\/bin\/hgforest.sh` may be used to apply commands to all the repositories in the [forest](#forest). Popular extensions for OpenJDK developers include [jcheck](https:\/\/openjdk.java.net\/projects\/code-tools\/jcheck\/), [trees](https:\/\/openjdk.java.net\/projects\/code-tools\/trees\/), and [Mercurial Queues](http:\/\/hgbook.red-bean.com\/read\/managing-change-with-mercurial-queues.html) (mq). Note that `trees` is enabled on the OpenJDK Mercurial server.\n+\n+Create and edit the `~\/.hgrc` file to minimally contain the following entry:\n+\n+    [ui]\n+    username = <openjdk_username>\n+\n+_openjdk\\_username_ is a plain lowercase, alphanumeric token (not an e-mail address) with twelve characters or less. The first character should be alphabetic. This username will be publicly visible in all Mercurial changeset logs. It will be used to verify that the changeset author is at least an [Author](https:\/\/openjdk.java.net\/bylaws#author) for the Project and that the person pushing the changeset is at least a [Committer](https:\/\/openjdk.java.net\/bylaws#committer). It is recommended that the _openjdk\\_username_ be somehow related to the Author's full name, such as the first character of the Author's first name followed by the Author's last name. Refer to the [Becoming an Author](..\/projects\/index.html#project-author) section of the [Project](..\/projects\/index.html) page for additional information.\n+\n+An alphabetical list of all of the assigned _openjdk\\_usernames_ may be found on the [OpenJDK people](https:\/\/db.openjdk.java.net\/people) list. The [Census](..\/census) shows the structure of the OpenJDK Community.\n+\n+#### Verifying the Configuration\n+\n+After installing and configuring Mercurial, validate the configuration using the following steps.\n+\n+#. Verify that Mercurial is version 2.6.3 (or newer).\n+\n+       $ hg version\n+       Mercurial Distributed SCM (version 2.9)\n+       (see http:\/\/mercurial.selenic.com for more information)\n+\n+       Copyright (C) 2005-2014 Matt Mackall and others\n+       This is free software; see the source for copying conditions. There is NO\n+       warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+\n+#. Verify that the list of enabled extensions includes fetch and mq.\n+\n+       $ hg help\n+\n+#. Verify that the `~\/.hgrc` configuration looks correct. Minimally it should contain the following entries:\n+\n+       $ hg showconfig\n+       ui.username=iris\n+\n+At this point, it should be possible to start retrieving source from the repositories.\n+\n+## Cloning\n+\n+With Mercurial each developer works with a clone of the repository which is a snapshot of the files at the time the clone was taken. To update the clone, see [Producing a Changeset](#producing-a-changeset).\n+\n+#### ... a Sandbox Repository {#cloneSandbox}\n+\n+In addition to the Project repositories, there are some test repositories that may be used to run test commands against Mercurial without fear of causing damage to development source. Use them freely but with discretion; content in them may be deleted at any time.\n+\n+    $ mkdir sandbox; cd sandbox\n+    $ hg clone http:\/\/hg.openjdk.java.net\/sandbox\/box\n+    destination directory: box\n+    requesting all changes\n+    adding changesets\n+    adding manifests\n+    adding file changes\n+    added 23 changesets with 24 changes to 5 files\n+    4 files updated, 0 files merged, 0 files removed, 0 files unresolved\n+    $ du -s box\n+    46      box\n+\n+#### ... a Forest {#cloneForest}\n+\n+If a Project uses a forest, It is strongly recommended for developers to clone an entire forest, rather than a single repository. This is the only means to ensure consistency in builds. The following examples illustrate two alternatives for cloning the entire _jdk9\/dev_ forest into the directory `9dev`.\n+\n+#. To clone the forest using the [trees](https:\/\/openjdk.java.net\/projects\/code-tools\/trees\/) extension just use `tclone`:\n+\n+       $ hg tclone http:\/\/hg.openjdk.java.net\/jdk9\/dev 9dev\n+\n+#. To clone the forest using `get_source.sh`, first clone the main tree:\n+\n+       $ hg clone http:\/\/hg.openjdk.java.net\/jdk9\/dev 9dev\n+       requesting all changes\n+       adding changesets\n+       adding manifests\n+       adding file changes\n+       added 997 changesets with 1477 changes to 138 files\n+       updating to branch default\n+       82 files updated, 0 files merged, 0 files removed, 0 files unresolved\n+\n+   Then clone the repositories in the forest:\n+\n+       $ cd 9dev\n+       $ sh .\/get_source.sh\n+\n+Regardless of how the forest was cloned, this is the resulting populated forest.\n+\n+    $ du -s\n+    934532  .\n+    $ ls\n+    ASSEMBLY_EXCEPTION  hotspot    LICENSE   README-builds.html\n+    common              jaxp       make      test\n+    configure           jaxws      Makefile  THIRD_PARTY_README\n+    corba               jdk        nashorn\n+    get_source.sh       langtools  README\n+\n+#### ... a Single Repository {#cloneSingle}\n+\n+If the source for the Project is contained within a single repository or reading a limited portion of the source is the only goal, it is possible to clone a single repository (even if it's part of a forest). For instance, this example shows how to clone the `langtools` repository from _jdk9\/dev_ into the default destination directory.\n+\n+    $ hg clone http:\/\/hg.openjdk.java.net\/jdk9\/dev\/langtools\n+    destination directory: langtools\n+    requesting all changes\n+    adding changesets\n+    adding manifests\n+    adding file changes\n+    added 2289 changesets with 21194 changes to 7004 files\n+    updating to branch default\n+    6212 files updated, 0 files merged, 0 files removed, 0 files unresolved\n+    $ du -s langtools\n+    84396   langtools\n+\n+# Mailing Lists\n+\n+The mailing lists are the key communications mechanism for all OpenJDK work. All participation in an OpenJDK project starts with joining the relevant mailing list. A subscriber to an OpenJDK mailing list is referred to as a Participant in the [Bylaws](https:\/\/openjdk.java.net\/bylaws). As a general recommendation we suggest to subscribe to [announce](https:\/\/mail.openjdk.java.net\/mailman\/listinfo\/announce), [discuss](https:\/\/mail.openjdk.java.net\/mailman\/listinfo\/discuss), and the `-dev` lists covering your explicit area of interest. All OpenJDK mailing lists are found here:\n+\n+> [`mail.openjdk.java.net`](https:\/\/mail.openjdk.java.net\/mailman\/listinfo)\n+\n+The OpenJDK community is a friendly place. To keep it that way it's important to keep a professional tone in emails and be aware that the community is global. Many different people with different backgrounds collaborate in these lists. Even though English is the required language for all lists, many Participants speak other languages as their native language. A high tolerance for non-perfect English is expected from anyone joining these lists.\n+\n+You must be in the list to send to the list. Some lists are moderated to keep the content on topic. Each list has its own archive where you can browse older conversations on the list.\n+\n+There are a few different types of lists. The list name has two parts to explain what the list is intended for, `<name>-<suffix>`. The name often refers to the project that owns the list or a specific area of interest that the list focuses on. The suffix is explained below. Not all projects or areas have all types of lists described here.\n+\n+> `-dev`\n+> :    Technical discussions around the implementation of the project artifacts. This is also where code reviews happen.\n+\n+> `-use`\n+> :    Technical discussions around the usage of the project artifacts.\n+\n+> `-discuss`\n+> :    General discussions around the project. The special case `discuss(at)openjdk.java.net` is used for general discussions around the OpenJDK project. Discussions around new project proposals usually happens here.\n+\n+>  `-changes`\n+> :    Changeset notifications from the source code repositories maintained by the project.\n+\n+> `-announce`\n+> :    General project announcements. These lists are tightly moderated and are expected to be low traffic. The special case `announce(at)openjdk.java.net` is used for announcements for the OpenJDK project.\n+\n+> `-experts`\n+> :    Expert group discussions. The list is restricted; only members of the expert group can subscribe.\n+\n+> `-observers`\n+> :    Open for anyone to subscribe to see what the experts are discussing and potentially to have some dialog with other non-experts. There is no guarantee that an expert is subscribed to the `-observers` list or will see any responses on that list.\n+\n+> `-comments`\n+> :    Used by observers to directly provide feedback\/comments to the experts (typically a lead will process the comments list and forward things on to the experts list).\n+\n+# Code Conventions\n+\n+* [Java code conventions](https:\/\/www.oracle.com\/technetwork\/java\/codeconvtoc-136057.html)\n+\n+# Change Planning and Guidelines\n+\n+This section describes the development process of identifying a bug or enhancement (formerly \"Request for Enhancement\" (RFE)) and providing a solution. The instructions assume that the [Contributor](\/bylaws#contributor) already has a working build environment and has some familiarity with an existing OpenJDK [Project](bylaws#_6) and its repositories.\n+\n+## Fixing a Bug\n+\n+This is the list of steps which should be performed when fixing a small bug. Small bugs include typos in code or specification, algorithm improvements for correctness or performance, and code changes required to correctly implement the specification.\n+\n+> ---\n+> Some steps refer to operations which can not be performed directly without the assistance of a [Project Committer](https:\/\/openjdk.java.net\/bylaws#committer). For example, any changes to the [bug database](https:\/\/bugs.openjdk.java.net) fall into this category. Since these steps are required, [Contributors](https:\/\/openjdk.java.net\/bylaws#contributor) are urged to work with their [Sponsors](\/sponsor\/) to complete these tasks.\n+\n+> ---\n+\n+For the purposes of brevity this document will use the term \"bug\" to refer to both bugs and enhancements unless otherwise noted. Hence \"fix for a bug\" could also imply \"implementation for an enhancement\".\n+\n+#. **Discuss the intended change**\n+\n+   Send an e-mail to the appropriate development mailing list for the Project that maintains the code. The e-mail should have a subject line of the form:\n+\n+       6543210: My favorite bug\n+\n+   where `6543210` is replaced with the actual bug id number or \"[NEW BUG]\" if the bug id is not known and `My favorite bug` is replaced with the bug's summary.  The message should describe the intended change, which components may be affected, and any other risks or concerns.\n+\n+#. **Does a bug id exist for the work?**\n+\n+   **Yes**\n+   :   Continue\n+\n+   **No**\n+   :   Create a bug in an appropriate component\/sub-component.\n+\n+#. **Set the bug status to \"Open\"**\n+\n+   This communicates intent to fix the bug to other members of the Project. It also sets the expectation for downstream teams such as SQE and JCK that the bug will be fixed in an upcoming integration.\n+\n+#. **Does the fix for the bug require a specification change, directly affect an external interface, or otherwise have a compatibility impact?**\n+\n+   **Yes**\n+   :   Submission of a CSR request is required. The CSR must be [approved](#approved) before the bug fix is pushed to a feature release or update release repository. The work may begin concurrently with the CSR review, but may need to be modified in response to CSR feedback.\n+\n+   **No**\n+   :   Continue\n+\n+#. **Fix the bug**\n+\n+   Assuming that the development team approves of the intended approach, begin working on the code using the latest source available from the appropriate OpenJDK Project [repository](https:\/\/hg.openjdk.java.net).\n+\n+#. [**Is it possible to write a test to detect the bug?**]\n+\n+   **Yes**\n+   :   For bugs, provide a [jtreg](..\/jtreg\/) regression test as part of the changeset. For enhancements that directly affect one or more exported interfaces, add an adequate set of jtreg unit tests as part of the changeset. By convention all regression and unit tests should contain a [\\@bug tag](https:\/\/openjdk.java.net\/jtreg\/tag-spec.html#INFORMATIONAL_TAGS9) referencing at least one bugid.\n+\n+   :   An entirely new test (or tests) may not be required. For example, if the bug is an existing regression test failure, then when fixing the bug you should just add the new bug ID to the list of space-delimited bugs in the [\\@bug tag](https:\/\/openjdk.java.net\/jtreg\/tag-spec.html#INFORMATIONAL_TAGS) of the failing regression test, even if the test did not need to be updated.\n+\n+   **No**\n+   :   An explanation for why a test is unnecessary or infeasible is required. Such an explanation is recorded by adding a label, and possibly a comment, to the bug report. The label has the prefix **`noreg`** for regression tests and **`nounit`** for unit tests. The suffix of the label is described in detail in the [JBS Label Dictionary](#noreg)\n+\n+#. **Is modification of shared Java code needed?**\n+\n+   **Yes**\n+   :   It is often sufficient to build and test on a single platform, but sometimes it is not. Use discretion.\n+\n+   **No**\n+   :   Continue\n+\n+#. **Is modification of shared C code needed?**\n+\n+   **Yes**\n+   :   Build and test on at least one instance of all three of the supported operating systems (Solaris, Linux, and Windows).\n+\n+   **No**\n+   :   Continue\n+\n+#. **Is modification of C or Java platform-specific code needed?**\n+\n+   **Yes**\n+   :   Build and test on all relevant platforms.  Code under `src\/solaris` builds on Solaris, Linux, and MacOS X despite its name.\n+\n+   **No**\n+   :   Continue\n+\n+#. **Run relevant regression and unit tests on all relevant platforms**\n+\n+   These include tests for external interfaces as well as other kinds of tests, e.g., HotSpot tests that use internal verification mechanisms.\n+\n+#. **Run relevant JCK tests on all relevant platforms**\n+\n+   Running JCK tests is particularly important if the change may have unexpected side-effects.\n+\n+#. **Request a review of the changes by sending an e-mail to the development alias**\n+\n+   A patch can be submitted as described in [Contributing](..\/contribute\/). Alternatively, a [\"webrev\"](webrevHelp.html) may be generated and uploaded to the [community code review](https:\/\/cr.openjdk.java.net\/) server. The complete webrev generation and upload procedure is described at [https:\/\/cr.openjdk.java.net](https:\/\/cr.openjdk.java.net\/).\n+\n+   Changeset pushes before the [Feature Complete](\/projects\/jdk8\/milestones#Feature_Complete) require at least one [Reviewer](\/bylaws#reviewer); pushes after the Feature Complete require at least two Reviewers. In either case, the more the merrier. Some teams may require more Reviewers. Check with members of the Project.\n+\n+   Reviewers should examine not only the code being added or changed but also the relevant unit or regression tests.\n+\n+   A change may require multiple Reviewers because it affects multiple areas.  Reviewers should be aware that they take full responsibility for the appropriateness and correctness of any changes in their area of expertise.  If something goes wrong (e.g., the build breaks) and the change&apos;s author is unavailable, they may be asked to deal with the problem.  Potential Reviewers are encouraged to refuse to review code for which they are not qualified.\n+\n+#. **Create a changeset**\n+\n+   Follow the instructions in [Producing a Changeset](#producing-a-changeset).\n+\n+#. **Update the bug content**\n+\n+   Bug descriptions and comments should be written in a professional manner.\n+\n+#. **Push the changeset into the Project's forest**\n+\n+   Follow the instructions in [Producing a Changeset](#producing-a-changeset). If working with a Sponsor, send the changeset to the development mailing list so that they can handle the final push.\n+\n+   The push will trigger a update to the bug which will make the following changes:\n+\n+    * Set the bug's \"Status\" to \"Resolved\" and \"Resolution to \"Fixed\".\n+    * Set the bug's \"Fix Version\/s\" to an appropriate release.\n+    * Set the bug's \"Resolved in Build\" to \"team\".\n+    * Add a Comment containing a reference to the changeset.\n+\n+_Congratulations!_ Your changeset will now make its way towards a promoted build. When the changeset becomes part of a promoted build, the bug's \"Resolved in Build\" will have a value of \\\"b\\[1-9\\]\\[0-9\\]&ast;\\\" to indicate the build number.\n+\n+# Producing a Changeset\n+\n+This section is confined to the actual Mercurial mechanics required to produce a changeset:\n+\n+* [Setting a JDK User Name](#setting-a-jdk-user-name) reminds the user to confirm proper configuration.\n+* [Creating](#creating) includes instructions for the required format of a changeset comment and describes how to commit files to a changeset.\n+* [Merging](#merging) describes how to pull changes from a parent forest or clone and incorporate the changes into the current working set of files.\n+* [Pushing](#pushing) covers configuring ssh, setting the `default-push` path, and pushing changesets.\n+\n+## Setting a JDK User Name\n+\n+Ensure that _ui.username_ has a value in the `~\/.hgrc` file as described in [Verifying the Configuration](#verifying-the-configuration).\n+\n+## Creating\n+\n+The timing for creating a changeset is important. Creating the changeset long before it gets pushed into the parent repository may require complex merges. If a changeset is created before sufficient review or testing, a rollback may be required and a new changeset may be required to correct previous mistakes. The [mq extension](http:\/\/hgbook.red-bean.com\/hgbookch12.html#x16-26500012) is recommended for managing changes before they become committed to a changeset.\n+\n+In the examples below, the script `common\/bin\/hgforest.sh` can be used to apply the Mercurial command to all the repositories in the forest. So when you see _**`hg`**_, if you are dealing with one repository, just use \"`hg`\", if it's a forest, use \"`sh common\/bin\/hgforest.sh`\".\n+\n+\n+Each repository in the forest is managed independently. After editing files in the individual cloned repositories of the forest, the `hg status` command may be used to see the changes in a single repository.\n+\n+    $ hg root\n+    \/u\/iris\/sandbox\/box\n+    $ hg status\n+    ? duke\/images\/DukeTubbingSmall.png\n+    $ hg add duke\/images\/DukeTubbingSmall.png\n+    $ hg status\n+    A duke\/images\/DukeTubbingSmall.png\n+\n+To see changes made to the repositories use _**`hg`**_ `status`:\n+\n+    $ hg status\n+    [.]\n+    A duke\/images\/DukeTubbingSmall.png\n+\n+In this example, the repository was previously cloned as described in [Cloning a Sandbox Repository](#clone). A new file `DukeTubbingSmall.png` was added to a new subdirectory.\n+\n+#### Formatting a Changeset Comment\n+\n+A single change is described by a block of text of the following form:\n+\n+    <bugid>: <synopsis-of-symptom>\n+    Summary: <summary-of-code-change>\n+    Reviewed-by: <reviewer>+\n+    Contributed-by: <contributor-email>\n+\n+There may be more than one _bugid_ line, but there must be at least one.\n+\n+The _summary_ line is optional, but authors are strongly encouraged to include one if the nature of the change is not obvious from the synopsis. It's just one line, meant to give the reader a clue as to how the code changed. A more complete description of the change belongs in the bug report.\n+\n+A _reviewed-by_ line is required. Reviewers must have the ability to deal with any adverse consequences of the change, and so must themselves be authors. They are therefore identified by their OpenJDK usernames rather than full e-mail addresses.\n+\n+The _contributed-by_ line is optional. If present, it is a list of comma-separated email addresses. It should be included only when the author or authors of the change do not have commit rights to the target repository and thus would not otherwise receive acknowledgment.\n+\n+There will be exceptions for merge changesets, tag changesets, etc.\n+\n+Example:\n+\n+    1234567: NPE thrown on FileInputStream(\"\")\n+    Summary: Rewrite precondition-checking code in io.c\n+    Reviewed-by: mr\n+    Contributed-by: Ben Bitdiddle <ben at bits.org>\n+\n+If a changeset contains multiple unrelated changes (this is frowned upon, but may happen from time to time) then its comment will contain multiple blocks of the above form, separated by blank lines.\n+\n+The required format of the comments will be enforced whenever the changeset is pushed into the JDK master or team repository forests. Other Projects may copy these conventions, adopt some other conventions, or have no conventions, depending upon their goals.\n+\n+#### Committing a Changeset\n+\n+The following commands commit all of the changes in a repository to a changeset.\n+\n+    $ cat ..\/message\n+    1111111: Missing Duke gif\n+    Summary:  Add missing file\n+    Reviewed-by: iag\n+    $ hg commit -l ..\/message\n+    $ hg toutgoing\n+    [.]\n+    comparing with http:\/\/hg.openjdk.java.net\/sandbox\/box\n+    searching for changes\n+    changeset:   23:fb12953f3a35\n+    tag:         tip\n+    user:        iris\n+    date:        Wed Dec 12 21:05:59 2007 -0800\n+    summary:     1111111: Missing Duke gif\n+\n+## Merging\n+\n+It is often necessary to merge local changes with those made in the parent repositories. The first step in a merge process is to retrieve (or pull) the collection of changesets which have been pushed since the last merge or initial clone. If there if there are merge conflicts, then they must be resolved. [Chapter 3](http:\/\/hgbook.red-bean.com\/hgbookch3.html#x7-530003) of the Mercurial book contains detailed information on the merging process.\n+\n+There are two basic ways to update the working set files in the repositories:\n+\n+Option 1: _**`hg`**_ `pull`\n+\n+> One way to merge the parent repository with the working set of files is to use _**`hg`**_ `pull` all by itself. This option allows merging off-line or at a later time.\n+>\n+>     $ hg pull\n+>     [.]\n+>     pulling from http:\/\/hg.openjdk.java.net\/sandbox\/box\n+>     searching for changes\n+>     no changes found\n+>\n+> In Mercurial, pulling changesets will not update or merge into the working set of files. To update the clone, run _**`hg`**_ `update`. If the update reports conflicts, run _**`hg`**_ `merge` to resolve them.\n+\n+Option 2: _**`hg`**_ `fetch`\n+\n+> Alternatively, use _**`hg`**_ `fetch` to pull the changes, update the working set files, and create simple merge changesets as necessary. The fetch extension is distributed with Mercurial but needs to be enabled. Edit the `.hgrc` to include the following entries:\n+>\n+>     [extensions]\n+>     fetch=\n+>\n+> Once the fetch extension has been enabled, _**`hg`**_ `fetch` may be invoked as follows:\n+>\n+>     $ hg fetch\n+>     [.]\n+>     pulling from http:\/\/hg.openjdk.java.net\/sandbox\/box\n+>     searching for changes\n+>     no changes found\n+\n+> ---\n+> Actual file merging will be done with the selected Mercurial merging tool see [MergeProgram](https:\/\/www.selenic.com\/mercurial\/wiki\/index.cgi\/MergeProgram) for the details on how to define the selected merge tool in ` ~\/.hgrc`.\n+\n+> ---\n+\n+## Pushing\n+\n+In order to push changesets into the parent repository, some additional configuration is required. The following sections describe the operations that will be performed by users with push access.\n+\n+#### Generating an SSH Key\n+\n+All pushes require an ssh key which must be installed on the Mercurial server. The `ssh-keygen` command generates an ssh key. The `-b` option overrides the default number of bits for the key. Allow a few minutes to generate a 4096 bit key; a key of at least 2048 bits is recommended. While it is possible to use ssh without a passphrase, this is **strongly** discouraged. Empty or insecure passphrases may be reset using `ssh-keygen -p`; this does not change the keys.\n+\n+    $ ssh-keygen -t rsa -b 4096\n+    Enter file in which to save the key(\/u\/iris\/.ssh\/id_rsa):\n+    Generating public\/private rsa key pair.\n+    Enter passphrase(empty for no passphrase):\n+    Enter same passphrase again:\n+    Your identification has been saved in \/u\/iris\/.ssh\/id_rsa.\n+    Your public key has been saved in \/u\/iris\/.ssh\/id_rsa.pub.\n+    The key fingerprint is:\n+    md5 4096 c2:b7:00:e6:4b:da:ea:ec:32:30:f5:bd:12:26:04:83 iris@duke\n+    The key's randomart image is:\n+    +--[ RSA 4096]----+\n+    |    E.=          |\n+    |     . *         |\n+    |      o .   .    |\n+    |         + o     |\n+    |        S + .    |\n+    |       .   + .   |\n+    |        + + +..  |\n+    |       * . oo+.  |\n+    |      o . .o..   |\n+    +-----------------+\n+\n+The `~\/.ssh\/id_rsa.pub` is a text file containing the public ssh key. This file should be mailed as an attachment along with the JDK username to [keys(at)openjdk.java.net](mailto:keys-at-openjdk.java.net). An administrator will install your key on the server and notify you on completion. This process may take a couple of days.\n+\n+> ---\n+> Users behind a SOCKS firewall can add a directive to the `~\/.ssh\/config` file to connect to the OpenJDK Mercurial server:\n+>\n+>     Host *.openjdk.java.net\n+>     ProxyCommand \/usr\/lib\/ssh\/ssh-socks5-proxy-connect -h [socks_proxy_address] %h %p\n+>\n+> See the `ssh-socks5-proxy-connect` man page and `ssh-config` man page for more information. Other systems may require proxy access via other programs. Some Linux distributions provide the `corkscrew` package which provides ssh access through HTTP proxies.\n+>\n+> **It is recommended that all users check with their network administrators before installing any kind of TCP forwarding tool on their network. Many corporations and institutions have strict security policies in this area.**\n+\n+> ---\n+\n+#### SSH Shortcuts\n+\n+The following section provides some tips for improving the usability of ssh-related operations.\n+\n+* _Using SSH in multiple shells_\n+\n+  To avoid having to constantly type in the passphrase, use the ssh-agent on your local client to cache your pashphrase:\n+\n+      $ eval `ssh-agent`\n+      Agent pid 17450\n+      $ ssh-add\n+      Enter passphrase for \/u\/iris\/.ssh\/id_rsa:\n+      Identity added: \/u\/iris\/.ssh\/id_rsa(\/u\/iris\/.ssh\/id_rsa)\n+\n+  The same ssh-agent process can be shared with multiple shells. There are various ways to do this. Bash users can accomplish this with the following code in `.bashrc`:\n+\n+      if [ \"$PS1\" -a -d $HOME\/.ssh ]; then\n+        if [ \"x$SSH_AUTH_SOCK\" = x ]; then\n+          eval `ssh-agent | grep -v 'echo Agent pid'`\n+          ssh-add\n+          trap \"echo Killing SSH agent $SSH_AGENT_PID; kill $SSH_AGENT_PID\" 0\n+        fi\n+      fi\n+\n+  For secure operation, only start an ssh-agent when needed and kill it off when the shell completes. Test this by running `ssh 'hostname' echo hello` multiple times.\n+\n+* _Logging in without a password_\n+\n+  To avoid needing to constantly type in the password, add the public key to the list of ssh authorized keys.\n+\n+      $ cat ~\/.ssh\/id_rsa.pub >> ~\/.ssh\/authorized_keys\n+      $ chmod 600 ~\/.ssh\/authorized_keys\n+\n+#### Setting the `default-push` Path to the Server Repositories\n+\n+<!--\n+#. Option 1: Add default-push path to every <code>.hg\/hgrc<\/code>\n+-->\n+\n+This is the typical development model:\n+\n+:::{style=\"text-align:center;\"}\n+![Diagram of server repos and user's clone](devModel.gif)\n@@ -41,0 +549,957 @@\n+\n+Changesets need to be _pushed_ via ssh to the read\/write repository which resides on the OpenJDK Mercurial server. The easiest way to do this is to have each repository define the \"default-push\" path in every repository's `.hg\/hgrc` file. The `.hg\/hgrc` file in is not a managed file - it is private to the repository. The following example defines the \"default\" and \"default-push\" paths for clones of the jdk9\/dev team repository.\n+\n+    [paths]\n+    default = http:\/\/hg.openjdk.java.net\/jdk9\/dev\n+    default-push = ssh:\/\/<JDK_username>@hg.openjdk.java.net\/jdk9\/dev\n+\n+Given a `JDK_username` this simple script will attempt to do this for all the repositories:\n+\n+    #!\/bin\/sh\n+    username=$1\n+    hgdirs=\"`find . -type d -name .hg`\"\n+    for i in ${hgdirs}; do\n+      d=\"`dirname ${i}`\"\n+      defpush=\"`(cd ${d} && hg paths default-push 2> \/dev\/null)`\"\n+      if [ \"${defpush}\" = \"\" ] ; then\n+        defpath=\"`(cd ${d} && hg paths default 2> \/dev\/null)`\"\n+        if [ \"${defpath}\" != \"\" ] ; then\n+          defpush=\"`echo ${defpath} | sed -e 's@http:\/\/\\([^\/]*\/[^\/]*\/[^\/]*\\)\/\\(.*\\)@ssh:\/\/$username\\@\\1\/\\2@'`\"\n+          cp ${i}\/hgrc ${i}\/hgrc.orig\n+          echo \"default-push = ${defpush}\" >> ${i}\/hgrc\n+          echo \"Added default-push: ${defpush}\"\n+        fi\n+      fi\n+    done\n+    for i in ${hgdirs}; do\n+      d=\"`dirname ${i}`\"\n+      echo \"(cd ${d} && hg paths)\"\n+      (cd ${d} && hg paths)\n+    done\n+    exit 0\n+\n+<!--\n+#. Option 2: Use the <code>defpath<\/code> ExtensionAnother way to setup the default-push path is to use the Mercurial defpath extension, which is available in \/java\/jdk\/lib\/hgext\/defpath.py. To enable this extension add the following to the <code>~\/hgrc<\/code> file:\n+<blockquote><pre>\n+[extensions]\n+defpath = \/java\/jdk\/lib\/hgext\/defpath.py  # Or the pathname of a local copy\n+<\/pre><\/blockquote>\n+     The defpath extension actually adds two new Mercurial subcommands:\n+    defpath to operate upon a single repository and fdefpath for an entire\n+    forest. hg help defpath or hg help fdefpath will tell you more. For a\n+    freshly cloned open\/closed forest the command you probably want is\n+<blockquote><pre>\n+$ hg fdefpath -dgv\n+<\/pre><\/blockquote>\n+     Be sure to try this with the -n flag first to see if it will do what\n+    you actually expect. If your OpenJDK username differs from your Oracle\n+    username then add -u name to the command line.\n+     The defpath extension defines the default-push path, which is the path\n+    that Mercurial uses by default in push operations.\n+-->\n+\n+#### Pushing a Changeset\n+\n+[Committers](https:\/\/openjdk.java.net\/bylaws#committer) can use the _**hg**_ `push` command to propagate changesets into the repositories.\n+\n+Most developers will only find a need to create changesets in one or two repositories. However, it is important that before any changesets are pushed, the corresponding forest pull and merge with the destination forest be performed; otherwise there is a risk of breaking the build.\n+\n+    $ hg push\n+\n+After the push has been accepted, an automatic e-mail notification will be sent to the [mailing list](https:\/\/mail.openjdk.java.net) associated with the repository. In most cases notifications are sent to the Project's _-dev_ mailing list. Some Projects with high traffic _-dev_ mailing lists use a dedicated _-changes_ list for notifications.\n+\n+> ---\n+> Who has push access?\n+>\n+> All of a Project's [Committers](https:\/\/openjdk.java.net\/bylaws#committer) can push to all of the the Project's repositories.\n+>\n+> Some Projects may chose to restrict the set of Committers with push to key repositories. For instance, JDK Release Projects restrict push access to MASTER repositories to Committers who are either integrators or members of the Release Engineering Team.\n+>\n+> Refer to the [Nominating a Contributor or Author to be a Committer](..\/projects\/index.html#project-committer) section of the [Project](..\/projects\/index.html) page for information about becoming a Project Committer.\n+\n+> ---\n+\n+# What Happens Next\n+\n+This section describes what might happen after a changeset gets into the build, for example a bug might be filed or a backport could be requested.\n+\n+## Filing a Bug\n+\n+When a new failure is found in the JDK a bug should be filed to describe and track the issue. Depending on your role in the OpenJDK you can either use the [Bug Report Tool](https:\/\/bugreport.java.com\/) or, if you are Author in an OpenJDK Project, report the bug directly in the [JDK Bug System](https:\/\/bugs.openjdk.java.net\/). Try to make the bug report as complete as possible to make it easier to triage and investigate the bug. It's not the reporter's responsibility to set a correct priority, but a qualified guess is always better than a default value. To help with setting the right priority consider things like how the bug impacts the product and our testing, how likely is it that the bug triggers, how difficult is it to work around the bug if it's not fixed soon, and whether it's a recent regression, since that may break existing applications. Regressions are often higher priority than long standing bugs and may block a release if not fixed.\n+\n+A few things to keep in mind when filing a new bug:\n+\n+* Before filing a bug, verify that there isn't already a bug filed for this issue.\n+* If you suspect that the bug is a vulnerability, don't file a JBS issue. Instead send your bugreport to [vuln-dev@openjdk.java.net](mailto:vuln-dev@openjdk.java.net)\n+* Make a reasonable attempt to narrow down which build or release the failure first appeared in.\n+* Add relevant labels like `intermittent`, `regression`, `noreg-self` etc.\n+* Set affects version to the JDK version(s) where the failure was seen.\n+  * If the failure is found in an update train of the JDK (e.g. 11.0.x), please make an effort to see if the bug is also present in [mainline](https:\/\/hg.openjdk.java.net\/jdk\/jdk\/).\n+* In the description, always include (if possible):\n+  * full name of the failing tests\n+  * error messages\n+  * assert messages\n+  * stack trace\n+  * command line information\n+  * relevant information from the logs\n+* If the failure is not reproducible with an existing OpenJDK test, attach a reproducer if possible.\n+* Only set CPU and\/or OS fields if the bug **ONLY** happens on that particular platform.\n+* Always file separate bugs for different issues.\n+  * If two crashes looks related but not similar enough to for sure be the same, it is easier to close a bug as a duplicate than it is to extract the relevant info from a bug to create a new one later.\n+\n+## Excluding a Test\n+\n+Sometimes tests break. It could be e.g. due to bugs in the test itself, due to changed functionality in the code that the test is testing, or changes in the environment where the test is executed. While working on a fix, it can be useful to stop the test from being executed in everyone else's testing to reduce noise, especially if the test is expected to fail for more than a day. There are two ways to stop a test from being run in standard test runs: ProblemListing and using the `@ignore` keyword. Removing tests isn't the standard way to remove a failure. A failing test is often a regression and should ideally be handled with high urgency.\n+\n+I'll say it right away so that it's not forgotten at the end: Remember to remove the JBS id from the ProblemList or the test when the bug is closed. This is especially easy to forget if a bug is closed as a duplicate or 'Will Not Fix'. jcheck will report an error and prohibit a push if a PR is created for an issue that is found in a ProblemList if the fix doesn't remove the bug ID from the ProblemList.\n+\n+### ProblemListing jtreg tests\n+\n+ProblemListing should be used for a short term exclusion while a test is being fixed, and for the exclusion of intermittently failing tests that cause too much noise, but can still be useful to run on an ad-hoc basis. ProblemListing is done in the file `ProblemList.txt`. There are actually several ProblemList files to choose from. Their location and name hint about what area or feature each file belongs to. Each file has sections for different components. All ProblemList files complement each other to build the total set of tests to exclude in JTReg runs.\n+\n+~~~\n+test\/hotspot\/jtreg\/ProblemList.txt\n+test\/hotspot\/jtreg\/ProblemList-aot.txt\n+test\/hotspot\/jtreg\/ProblemList-graal.txt\n+test\/hotspot\/jtreg\/ProblemList-non-cds-mode.txt\n+test\/hotspot\/jtreg\/ProblemList-Xcomp.txt\n+test\/hotspot\/jtreg\/ProblemList-zgc.txt\n+test\/jaxp\/ProblemList.txt\n+test\/jdk\/ProblemList.txt\n+test\/jdk\/ProblemList-aot.txt\n+test\/jdk\/ProblemList-graal.txt\n+test\/jdk\/ProblemList-Xcomp.txt\n+test\/langtools\/ProblemList.txt\n+test\/langtools\/ProblemList-graal.txt\n+test\/lib-test\/ProblemList.txt\n+~~~\n+\n+Use the suitable ProblemList and add a line like this in the proper section:\n+\n+~~~\n+foo\/bar\/MyTest.java                        4711   windows-all\n+~~~\n+\n+In this example, `MyTest.java` is ProblemListed on windows, tracked by bug `JDK-4711`.\n+\n+Currently there's [no support for multiple lines for the same test](https:\/\/bugs.openjdk.java.net\/browse\/CODETOOLS-7902481). For this reason it's important to always make sure there's no existing entry for the test before adding a new one, as multiple entries might lead to unexpected results, e.g.\n+\n+~~~\n+foo\/bar\/MyTest.java                        4710   generic-all\n+...\n+foo\/bar\/MyTest.java                        4711   windows-all\n+~~~\n+\n+This would lead to `sun.tools.jcmd.MyTest.java` being ProblemListed only on `windows-all`. The proper way to write this is:\n+\n+~~~\n+foo\/bar\/MyTest.java                        4710,4711   generic-all,windows-all\n+~~~\n+\n+Although `windows-all` isn't strictly required in this example, it's preferable to specify platforms for each bugid (unless they are all `generic-all`), this makes it easier to remove one of the bugs from the list.\n+\n+#### ProblemListing some, but not all, test cases in a file\n+\n+Some tests contain several test cases and there may be a need to ProblemList only a few of them. To do this use the full test name, i.e. `<filename> + # + <test case id>`, where test case id can be specified in the test header. If no id is specified each test case can be referenced with `id` + ordinary number of the test case in the test file.\n+\n+Let's assume we have four test cases in `foo\/bar\/MyTest.java`:\n+\n+~~~\n+\/* @test *\/\n+\/* @test id=fancy_name *\/\n+\/* @test *\/\n+\/* @test *\/\n+~~~\n+\n+A ProblemList entry that excludes the first, second, and third test case would look like this:\n+\n+~~~\n+foo\/bar\/MyTest.java#id0          4720  generic-all\n+foo\/bar\/MyTest.java#fancy_name   4721  generic-all\n+foo\/bar\/MyTest.java#id2          4722  generic-all\n+~~~\n+\n+Due to an issue described in [CODETOOLS-7902712](https:\/\/bugs.openjdk.java.net\/browse\/CODETOOLS-7902712) tests that contains more than one `@test` must actually use this way to specify all test cases if all of them should be ProblemListed. Specifying just the test name will not work.\n+\n+#### Running ProblemListed tests\n+\n+To run ad-hoc runs of ProblemListed tests use `RUN_PROBLEM_LISTS=true`.\n+\n+~~~\n+make test TEST=... JTREG=RUN_PROBLEM_LISTS=true\n+~~~\n+\n+### Exclude jtreg tests using `@ignore`\n+\n+The `@ignore` keyword is used in the test source code. This is mainly used for tests that are so broken that they may be harmful or useless, and is less common than ProblemListing. Examples can be tests that don't compile because something changed in the platform; or a test which might remove your `\/etc\/shadow`. Use `@ignore` with a bug reference in the test case to prevent the test from being run.\n+\n+~~~java\n+\/**\n+ *  @test\n+ *  @ignore 4711\n+ *\n+~~~\n+\n+In this example, `MyTest.java` is excluded, tracked by bug `JDK-4711`. `@ignore` should always be placed directly before the first `@run` line in the test.\n+\n+### Dealing with JBS bugs for test exclusion\n+\n+ProblemListing and `@ignore`-ing are done in the JDK source tree, that means a check-in into the repository is needed. This in turn means that a unique JBS issue and a code review are needed. This is a good thing since it makes test problems visible.\n+\n+* **Code review**: This is considered a [trivial](#trivial) change.\n+* **JBS issue**: A JBS issue is obviously created for the bug that caused the failure, we call this the _main issue_. To exclude the test, create a subtask to the main issue. Also add the label `problemlist` to the main issue.\n+\n+The fix for the main issue should remove the test from the ProblemList or remove the `@ignore` keyword from the test.\n+\n+#### Triage excluded issues\n+\n+After a failure is handled by excluding a test, the main JBS issue should be re-triaged and possibly given a new priority. This should be handled by the standard triage process. A test exclusion results in an outage in our testing. This outage should be taken into consideration when triaging, in addition to the impact of the bug itself.\n+\n+## Backing Out a Change\n+\n+If a change causes a regression that can't be fixed within reasonable time the best way to handle the regression can be to back out the change. Backing out means that the inverse (anti-delta) of the change is pushed to effectively undo the change in the repository. There are two parts to this task, how to do the bookkeeping in JBS, and how to do the actual backout in mercurial.\n+\n+The backout is a regular change and will have to go through the standard code review process, but is considered a [trivial](#trivial) change. The rationale is that a backout is usually urgent in nature and the change itself is automatically created by hg, and reviewed by the person who is performing the backout, so even though only one additional Reviewer is required the change will in practice get two reviews.\n+\n+### How to work with JBS when a change is backed out\n+\n+#. Close the original JBS issue **(O)**.\n+   * \"Verify\" the issue and choose \"Fix Failed\".\n+#. If the intention is to fix the change and submit it again, create a redo-issue **(R)** to track that the work still needs to be done.\n+   * Clone **(O)** and add the prefix `[REDO]` on the summary - the clone becomes the redo-issue **(R)**.\n+   * Make sure relevant information is brought to **(R)**.\n+   * Remember that comments are not brought over when cloning.\n+#. Create a backout-issue **(B)**:\n+   * Alternative 1 - the regression is identified directly.\n+     * Create a sub-task to **(R)** with the same summary, prefix with `[BACKOUT]`.\n+   * Alternative 2 - an investigation issue is created **(I)**, and during the investigation backing out the change is identified as the best solution.\n+     * Use the investigation issue **(I)** for the backout.\n+     * Change summary of **(I)** to the same as **(O)** and prefix with `[BACKOUT]`.\n+     * Move and change type of **(I)** to become a sub-task of **(R)**.\n+   * Alternative 3 - no redo issue was created.\n+     * Create a backout-issue **(B)** with the same summary as **(O)**, prefix with `[BACKOUT]`.\n+     * Link **(B)** and **(O)**.\n+\n+ProblemList entries and `@ignore` keywords will continue to point to the original bug (unless updated at back out). This is accepted since there is a clone link to follow.\n+\n+### How to work with mercurial when a change is backed out\n+\n+In order to backout a change, the `hg backout` command is recommended, which essentially applies the anti delta of the change. Make sure you perform the backout in the most upstream repostiory the change has escaped to.\n+\n+~~~\n+hg backout [OPTION]... [-r] REV\n+\n+reverse effect of earlier changeset\n+\n+    Prepare a new changeset with the effect of REV undone in the current\n+    working directory.\n+\n+    If REV is the parent of the working directory, then this new changeset is\n+    committed automatically. Otherwise, hg needs to merge the changes and the\n+    merged result is left uncommitted.\n+~~~\n+\n+# About this Guide\n+\n+This guide is being maintained through the [OpenJDK Developers' Guide Project](https:\/\/openjdk.java.net\/census#guide). The [source repository](https:\/\/github.com\/openjdk\/guide) is available at GitHub. The revision hash at the bottom of each page refers to the latest change that modified that particular page.\n+\n+Comments and questions may be sent to [guide-dev (at) openjdk.java.net](mailto:guide-dev-at-openjdk.java.net). Please let us know if there's anything in the guide that isn't clear.\n+\n+# Glossary\n+\n+[**accepted**]{#accepted} (by the CCC)\n+:   The stage of the CCC process after \"DRAFT\", and \"PROPOSED\". At this stage the primary goals are to ensure that the proposed changes are suitable for the release in a general sense and that the requisite JCK and SQE resources will be available.\n+\n+[**approved**]{#approved} (by the CCC)\n+:   The stage of the CCC process after \"FINAL\". The CCC has approved the final version of the request which permits push into the project forest.\n+\n+[**changeset**]{#changeset}\n+:   A collection of changes with respect to the current clone of a repository.\n+\n+[**development freeze**]{#developmentfreeze}\n+:   The date by which all planned work should be complete for a particular line of development. After a line's development freeze, only exit-criteria bugs may be fixed in that line.\n+\n+[**forest**]{#forest}\n+:   A collection of Mercurial repositories which can be managed as a set of nested repositories. The name \"Forest\" originally came from the Mercurial \"Forest Extension\" which can be used with some versions of Mercurial, but in general is no longer recommended. The script `common\/bin\/hgforest.sh` can be used to apply a Mercurial `hg` command to all the repositories in a forest.\n+\n+[**Group**]{#group}\n+:   A collection of [Participants](\/bylaws#participant) who engage in open conversation about a common interest. That interest may be in the creation, enhancement, or maintenance of a specific body of code or it may lie in other areas, e.g., quality, documentation, or evangelism. See the [Group overview](..\/groups\/).\n+\n+[**Mercurial**]{#mercurial}\n+:   A free, cross-platform, distributed source management tool. Source bundles and binary packages for Mercurial are available at [https:\/\/www.selenic.com\/mercurial\/wiki\/index.cgi](https:\/\/www.selenic.com\/mercurial\/wiki\/index.cgi\/Mercurial). The main Mercurial documentation is available at [http:\/\/hgbook.red-bean.com](https:\/\/hgbook.red-bean.com\/).\n+\n+[**Project**]{#project}\n+:   A collaborative effort to produce a specific artifact, which may be a body of code, or documentation, or some other material. See the [Project overview](..\/projects\/).\n+\n+[**repository**]{#repository}\n+:   A directory tree in the filesystem that Mercurial treats specially. This tree contains the source files and their revision history.\n+\n+[**trivial**]{#trivial}\n+:   A change that is small, well contained, and makes no semantic changes. Typically fixing obvious typos or renaming some local identifier. Trivial changes can also be pushing an already reviewed change that was missed in an earlier push (e.g. forgot to add a file) or generated changes like an [`hg backout`](#backing-out-a-change). It's up to the author of a change to claim that the change is trivial in the RFR, and it's up to the Reviewer whether to approve such a claim. A change is only trivial if the Reviewer says so. Trivial changes does not have to wait 24 hours before being pushed, and only needs one Reviewer, even in areas where stricter rules for pushing normally applies.\n+\n+[**webrev**]{#webrev}\n+:   A tool and its output. In JDK release forests, the script, [`webrev.ksh`](https:\/\/hg.openjdk.java.net\/code-tools\/webrev\/raw-file\/tip\/webrev.ksh), examines a forest or repository to generate a set of web-based views of differences.\n+\n+# Code Owners\n+\n+This list is intended to make it easier to identify which email list to include in code reviews when making changes in different areas. The list may also help when assigning bugs based on which code they are found in. Please note that some directories may have been created or removed between releases. The intention here is to include directories that exists in mainline, LTS releases and other releases (post JDK 9) commonly being updated.\n+\n+## Area mailing lists\n+\n+* Build: [`build-dev@openjdk.java.net`](mailto:build-dev@openjdk.java.net)\n+* Client\n+  * AWT: [`awt-dev@openjdk.java.net`](mailto:awt-dev@openjdk.java.net)\n+  * Beans: [`beans-dev@openjdk.java.net`](mailto:beans-dev@openjdk.java.net)\n+  * Java 2D: [`2d-dev@openjdk.java.net`](mailto:2d-dev@openjdk.java.net)\n+  * Java FX: [`openjfx-dev@openjdk.java.net`](mailto:openjfx-dev@openjdk.java.net)\n+  * jpackage: [`core-libs-dev@openjdk.java.net`](mailto:core-libs-dev@openjdk.java.net)\n+  * Sound: [`sound-dev@openjdk.java.net`](mailto:sound-dev@openjdk.java.net)\n+  * Swing: [`swing-dev@openjdk.java.net`](mailto:swing-dev@openjdk.java.net)\n+* Core Libs: [`core-libs-dev@openjdk.java.net`](mailto:core-libs-dev@openjdk.java.net)\n+  * Net: [`net-dev@openjdk.java.net`](mailto:net-dev@openjdk.java.net)\n+  * NIO: [`nio-dev@openjdk.java.net`](mailto:nio-dev@openjdk.java.net)\n+* HotSpot: [`hotspot-dev@openjdk.java.net`](mailto:hotspot-dev@openjdk.java.net)\n+  * Compiler: [`hotspot-compiler-dev@openjdk.java.net`](mailto:hotspot-compiler-dev@openjdk.java.net)\n+  * GC: [`hotspot-gc-dev@openjdk.java.net`](mailto:hotspot-gc-dev@openjdk.java.net)\n+  * Runtime: [`hotspot-runtime-dev@openjdk.java.net`](mailto:hotspot-runtime-dev@openjdk.java.net)\n+  * Serviceability: [`serviceability-dev@openjdk.java.net`](mailto:serviceability-dev@openjdk.java.net)\n+* I18n: [`i18n-dev@openjdk.java.net`](mailto:i18n-dev@openjdk.java.net)\n+* LangTools\n+  * Amber Project: [`amber-dev@openjdk.java.net`](mailto:amber-dev@openjdk.java.net)\n+  * Javac: [`compiler-dev@openjdk.java.net`](mailto:compiler-dev@openjdk.java.net)\n+  * Javadoc: [`javadoc-dev@openjdk.java.net`](mailto:javadoc-dev@openjdk.java.net)\n+  * JShell: [`kulla-dev@openjdk.java.net`](mailto:kulla-dev@openjdk.java.net)\n+  * Panama Project: [`panama-dev@openjdk.java.net`](mailto:panama-dev@openjdk.java.net)\n+  * Valhalla Project: [`valhalla-dev@openjdk.java.net`](mailto:valhalla-dev@openjdk.java.net)\n+* Security: [`security-dev@openjdk.java.net`](mailto:security-dev@openjdk.java.net)\n+\n+## Directory to area mapping\n+\n+* `make` – Build team\n+* `hotspot` – HotSpot\n+  * `cpu` – Compiler, Runtime\n+  * `jdk.*` – Compiler\n+  * `os` – Runtime\n+  * `os_cpu` – Compiler\n+  * `share`\n+    * `adlc` – Compiler\n+    * `aot` – Compiler\n+    * `asm` – Runtime\n+    * `c1` – Compiler\n+    * `ci` – Compiler\n+    * `classfile` – Runtime\n+    * `code` – Compiler\n+    * `compiler` – Compiler\n+    * `gc` – GC\n+    * `include` – HotSpot\n+    * `interpreter` – Runtime\n+    * `jfr` – Runtime\n+    * `jvmci` – Compiler\n+    * `libadt` – Compiler\n+    * `logging` – Runtime\n+    * `memory` – Runtime, GC\n+    * `metaprogramming` – Runtime\n+    * `oops` – Runtime\n+    * `opto` – Compiler\n+    * `precompiled` – Runtime\n+    * `prims` – Runtime, Serviceability\n+    * `runtime` – Runtime\n+    * `services` – Runtime\n+    * `shark` – Compiler\n+    * `trace` – Runtime\n+    * `utilities` – Runtime\n+* `java.base`\n+  * Core Libs should almost always be included but LangTools, HotSpot, Security and\/or I18n may also be involved.\n+  * `classes`\n+    * `crypto` – Security\n+    * `internal` – HotSpot, Core Libs\n+    * `invoke` – Core Libs\n+    * `io` – NIO\n+    * `lang` – Core Libs\n+    * `launcher` – LangTools\n+    * `math` – Core Libs\n+    * `net` – Net\n+    * `nio` – NIO\n+    * `reflect` – Core Libs\n+    * `security` – Security\n+    * `text` – I18n\n+    * `time` – Core Libs\n+    * `util` – I18n, Core Libs\n+  * `conf`\n+    * `sdp` – Net\n+    * `security` – Security\n+  * `legal` –\n+  * `lib\/security` – Security\n+  * `man`\n+    * `java.1` - LangTools\n+    * `jfr.1` - Runtime\n+    * `keytool.1` - Security\n+  * `native`\n+    * `common` –\n+    * `include` – Runtime, Core Libs\n+    * `jspawnhelper` – LangTools\n+    * `launcher` – LangTools\n+    * `libfdlibm` – Core Libs\n+    * `libjava` – Core Libs\n+    * `libjimage` – LangTools, Core Libs\n+    * `libjli` – LangTools\n+    * `libjsig` – HotSpot\n+    * `libnet` – Net\n+    * `libnio` – NIO\n+    * `libosxsecurity` – Security\n+    * `libverify` – LangTools\n+    * `libzip` – Core Libs\n+* `java.compiler` – LangTools\n+* `java.datatransfer` – AWT\n+* `java.desktop` – Client\n+  * Many files in the awt directories are shared between 2D and AWT\n+    * See [https:\/\/openjdk.java.net\/groups\/2d\/2dawtfiles.html](https:\/\/openjdk.java.net\/groups\/2d\/2dawtfiles.html)\n+    * And see [https:\/\/openjdk.java.net\/groups\/2d](https:\/\/openjdk.java.net\/groups\/2d)\n+  * `color`, `font`, `freetype`, `geom`, `imageio`, `java2d`, `jpeg`, `lcms`, `mlib`, `print`, Graphics primitives – 2D\n+  * `splashscreen`, `dnd`, `eawt`, `lwawt` – AWT\n+  * `im`, InputMethods – I18n, AWT\n+  * `libjsound`, `sound` – Sound\n+  * `accessibility`, `laf` – Swing\n+* `java.instrument` – Serviceability\n+* `java.logging` – Core Libs\n+* `java.management` – Serviceability\n+* `java.management.rmi` – Serviceability\n+* `java.naming` – Core Libs\n+* `java.net.http` – Net\n+* `java.prefs` – Core Libs\n+* `java.rmi` – Core Libs\n+* `java.scripting` – LangTools\n+* `java.se` – Core Libs\n+* `java.security.jgss` – Security\n+* `java.security.sasl` – Security\n+* `java.smartcardio` – Security\n+* `java.sql` – Core Libs\n+* `java.sql.rowset` – Core Libs\n+* `java.transaction.xa` – Core Libs\n+* `java.xml` – Core Libs\n+* `java.xml.crypto` – Security\n+* `jdk.accessibility` – Swing\n+* `jdk.aot` – HotSpot Compiler\n+* `jdk.attach` – Serviceability\n+* `jdk.charsets` – I18n, Core Libs\n+* `jdk.compiler` – LangTools\n+* `jdk.crypto.cryptoki` – Security\n+* `jdk.crypto.ec` – Security\n+* `jdk.crypto.mscapi` – Security\n+* `jdk.crypto.ucrypto` – Security\n+* `jdk.dynalink` – LangTools\n+* `jdk.editpad` – LangTools\n+* `jdk.hotspot.agent` – Serviceability\n+* `jdk.httpserver` – Net\n+* `jdk.incubator.foreign` – LangTools\n+* `jdk.incubator.httpclient` – Net\n+* `jdk.incubator.jpackage` –\n+* `jdk.internal.ed` – LangTools\n+* `jdk.internal.jvmstat` – Serviceability\n+* `jdk.internal.le` – LangTools\n+* `jdk.internal.opt` – LangTools\n+* `jdk.internal.vm.ci` – HotSpot Compiler\n+* `jdk.internal.vm.compiler` – HotSpot Compiler\n+* `jdk.internal.vm.compiler.management` – HotSpot Compiler\n+* `jdk.jartool` – LangTools\n+* `jdk.javadoc` – LangTools\n+* `jdk.jcmd` – Serviceability\n+* `jdk.jconsole` – Serviceability\n+* `jdk.jdeps` – Core Libs\n+* `jdk.jdi` – Serviceability\n+* `jdk.jdwp.agent` – Serviceability\n+* `jdk.jfr` – Runtime\n+* `jdk.jlink` – LangTools\n+* `jdk.jshell` – LangTools\n+* `jdk.jsobject` – LangTools\n+* `jdk.jstatd` – Serviceability\n+* `jdk.localedata` – I18n\n+* `jdk.management` – Serviceability\n+* `jdk.management.agent` – Serviceability\n+* `jdk.management.jfr` – Runtime\n+* `jdk.naming.dns` – Core Libs\n+* `jdk.naming.rmi` – Core Libs\n+* `jdk.net` – Net\n+* `jdk.nio.mapmode` – NIO\n+* `jdk.pack` – LangTools\n+* `jdk.rmic` – Core Libs\n+* `jdk.scripting.nashorn` – LangTools\n+* `jdk.scripting.nashorn.shell` – LangTools\n+* `jdk.sctp` – Net\n+* `jdk.security.auth` – Security\n+* `jdk.security.jgss` – Security\n+* `jdk.unsupported` – Core Libs\n+* `jdk.unsupported.desktop` – Swing\n+* `jdk.xml.dom` – Core Libs\n+* `jdk.zipfs` – Core Libs\n+* `sample` –\n+* `utils` –\n+\n+# JBS Label Dictionary\n+\n+This table contains some frequently used JBS labels and their meaning. Please help keeping this dictionary up to date by adding your favorite labels. This table doesn’t dictate how to use labels, but rather document how they are used. That said, obviously it will help everyone if we try to follow a common standard and use similar labels in the same way across all entities that use JBS.\n+\n+> ---\n+> ### Labels are case sensitive\n+> When using labels in Jira gadgets (like pie charts, heat maps, and statistics tables) Jira will be case sensitive and treat e.g. OpenJDK and openjdk as two different labels. Searching however is case insensitive. This means that if you group a set of issues in a gadget based on a label, and then click one of the groups to see the list of issues, that list will contain more results than the gadget if there are usages of the label with different casing. This can be very confusing and for this reason the recommendation is to stick with the commonly used case for all labels, regardless of your personal taste for upper or lower case letters. Most labels are lower case only, but there are examples where upper case letters are used in the most common version of a label.\n+\n+> ---\n+\n+<table class=\"dictionary\">\n+  <tr style=\"text-align:left;\"><th>Label<\/th><th>Description<\/th><\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [*(Area)***`-interest`**]{#area-interest}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      Used to indicate that an area (usually a team or project) is interested in the issue. This label doesn't indicate ownership of the issue. E.g., **`redhat-interest`**, **`azul-interest`**, **`coin-interest`**\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [*(Area)***`-related`**]{#area-related}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      Used to indicate that an issue is related to a specific area (usually a feature or project). This label doesn't indicate ownership of the issue. E.g., **`graal-related`**, **`testcolo-related`**, **`doc-related`**\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [*(Rel)***`-bp`**]{#rel-bp}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      Used to indicate that a bug would be suitable for backport to a release *(Rel)*. This is not a decision to backport, just a suggestion \/ recommendation. E.g., **`11-bp`**\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [*(Rel)***`-critical-request`**]{#rel-critical-request}<br>\n+      [*(Rel)***`-critical-approved`**]{#rel-critical-approved}<br>\n+      [*(Rel)***`-critical-watch`**]{#rel-critical-watch}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      Used in the rampdown phases of specific releases to request approval of changes that requires project lead approval (or similar) to be included. *(Rel)* is the release in question. E.g., **`jdk11-critical-request`**\n+\n+      *(Rel)***`-critical-approved`** is used to signal that the change has been approved for inclusion. E.g., **`jdk11-critical-approved`**<br>\n+      *(Rel)***`-critical-watch`** is used for issues that must get into a specific release but risk running late. The label is used while the issue is still in progress and is replaced with *(Rel)***`-critical-request`** once the issue is resolved. E.g., **`jdk11-critical-watch`**\n+\n+      These labels are always placed on the main JBS issue (the bug), never on backports or subtasks.\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [*(Rel)***`-defer-request`**]{#rel-defer-request}<br>\n+      [*(Rel)***`-defer-yes`**]{#rel-defer-yes}<br>\n+      [*(Rel)***`-defer-no`**]{#rel-defer-no}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      Used to request deferral of changes that requires project lead approval (or similar) to defer. *(Rel)* is the release in question. E.g., **`jdk12-defer-request`**\n+\n+      *(Rel)***`-defer-yes`** and *(Rel)***`-defer-no`** are used to indicate wether the deferral has been approved or not. E.g., **`jdk12-defer-yes`**\n+\n+      These labels are always placed on the main JBS issue (the bug), never on backports or subtasks.\n+      Further details are found in the [JDK Release Process](https:\/\/openjdk.java.net\/jeps\/3#Bug-Deferral-Process).\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [*(Rel)***`-enhancement-request`**]{#rel-enhancement-request}<br>\n+      [*(Rel)***`-enhancement-yes`**]{#rel-enhancement-yes}<br>\n+      [*(Rel)***`-enhancement-no`**]{#rel-enhancement-no}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      Used in the rampdown phases to request the late inclusion of an enhancement. *(Rel)* is the release in question. E.g., **`jdk10-enhancement-request`**\n+\n+      *(Rel)***`-enhancement-yes`** and *(Rel)***`-enhancement-no`** are used to indicate the response on the request. E.g., **`jdk10-enhancement-yes`**, **`jdk10-enhancement-no`**\n+\n+      These labels are always placed on the main JBS issue (the bug), never on backports or subtasks.\n+      Further details are found in the [JDK Release Process](http:\/\/openjdk.java.net\/jeps\/3#Late-Enhancement-Request-Process).\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [*(Rel)***`-fix-request`**]{#rel-fix-request}<br>\n+      [*(Rel)***`-fix-SQE-ok`**]{#rel-fix-SQE-ok}<br>\n+      [*(Rel)***`-fix-yes`**]{#rel-fix-yes}<br>\n+      [*(Rel)***`-fix-no`**]{#rel-fix-no}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      Used in rampdown phase 2 to indicate that an issue would be of interest to get integrated into release *(Rel)*. E.g., **`jdk12u-fix-request`**\n+\n+      *(Rel)***`-fix-SQE-ok`** is used to indicate that the issue will be covered by the test plan for *(Rel)*. E.g., **`jdk12u-fix-SQE-ok`**<br>\n+      *(Rel)***`-fix-yes`** and *(Rel)***`-fix-no`** are used to indicate wether an issue has been approved for backport to *(Rel)*. E.g., **`jdk12u-fix-yes`**\n+\n+      These labels are always placed on the main JBS issue (the bug), never on backports or subtasks.\n+      Further details are found in the [JDK Release Process](http:\/\/openjdk.java.net\/jeps\/3#Fix-Request-Process).\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [*(Rel)***`-na`**]{#rel-na}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      Used to indicate that the issue does not affect release *(Rel)* or later. Could for instance be a bug in code that was removed in *(Rel)*.\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [*(Team)***`-triage-`***(Rel)*]{#team-triage-rel}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      Used to indicate that *(Team)* has triaged this issue for release *(Rel)*. It's encouraged that all open bugs are triaged on a regular basis so that old bugs aren't forgotten. It's therefore common to see several triage labels on the same issue which helps keeping track of which bugs has been triaged for each release. E.g., **`oracle-triage-13`**\n+\n+      There are many label variants that include the word triage in some form. The form described above is the only one recommended. Please refrain from using other forms.\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [**`aot`**]{#aot}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      Used to indicate that an issue is related to Ahead of Time Compilation.\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+     [~~**`appcds`**~~]{#appcds}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      **Deprecated.** Was used to indicate that an issue was related to Application Class-Data Sharing. The **`cds`** label is now used instead.\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [**`c1`**]{#c1}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      Used to indicate that an issue is related to the C1 JIT compiler.\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [**`c2`**]{#c2}<br>\n+      **`c2-`**`.*`\n+    <\/td>\n+    <td class=\"dictionary\">\n+      Used to indicate that an issue is related to the C2 JIT compiler.\n+\n+      **`c2-`**`.*` labels are used to identify different c2 features. E.g., **`c2-intrinsic`**, **`c2-loopopts`**\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [**`cds`**]{#cds}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      Used to indicate that an issue is related to Class Data Sharing.\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [**`cleanup`**]{#cleanup}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      The **`cleanup`** label is used to indicate enhancements which has no semantic changes, whose only purpose is to make the code more maintainable or better looking.\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [**`docker`**]{#docker}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      Used to indicate that an issue is related to docker support.\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [**`gc-`**`.*`]{#gc}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      Used to indicate that an issue is related to a specific garbage collector in the JVM. E.g., **`gc-g1`**, **`gc-shenandoah`**, **`gc-serial`**, **`gc-epsilon`**\n+\n+      There are also labels in use to identify different GC features or areas rather than GC algorithms. E.g., **`gc-g1-fullgc`**, **`gc-largeheap`**, **`gc-performance`**\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [**`graal`**]{#graal}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      Used to indicate that this is a Graal issue. (Something that needs to be fixed in Graal rather than in OpenJDK.)\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [**`graal-integration`**]{#graal-integration}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      Reserved for Graal integration umbrella bugs. The automated integration script will break if this label is used for other bugs.\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [**`hgupdate-sync`**]{#hgupdate-sync}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      Used to identify backport issues automatically created by HG Updater (a script that monitors the hg repositories for changes).\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [~~**`hs-nightly`**~~]{#hs-nightly}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      **Deprecated.** Was used to tag bugs found in the HotSpot nightly testing. Since we are now running tiered testing there is no more nightly HotSpot testing. See **`tier`**`[1-8]`.\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [**`hs-sbr`**]{#hs-sbr}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      Used to tag bugs that are found in the \"same binary runs\", a stress testing method used to find intermittent failures.\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [~~**`hs-tier`**~~~~`[1-8]`~~]{#hs-tier}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      **Deprecated.** Was used to identify which HotSpot tier a test failure was seen in. We don't separate HotSpot tiers from the JDK tiers anymore. See **`tier`**`[1-8]`.\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [**`i18n`**]{#i18n}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      Used to indicate that an issue is related to internationalization.\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [**`integration-blocker`**]{#integration-blocker}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      Used to indicate that a bug is present in a downstream repository but not present in the upstream repository and is therefore blocking integration of downstream changes into upstream.\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [**`intermittent`**]{#intermittent}<br>\n+      [**`intermittent-environment`**]{#intermittent-environment}<br>\n+      [**`intermittent-hardware`**]{#intermittent-hardware}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      An intermittent issue is one that fails sometimes but not always. The exact reason for the intermittent failure is per definition unknown. Once the reason has been identified the issue is no more considered intermittent. An issue isn't intermittent if some characteristics has been found that triggers the failure consistently, even if the actual cause for the failure has not been found. For instance if a test fails every time it is executed on a specific host but not on other hosts it wouldn't be considered intermittent as it fails consistently on that specific host. In other cases it may be that we know that a test sometimes is unlucky in some respect and fails due to this. This test could still be considered intermittent even though we know what the reason is if the reason itself appears intermittently.\n+\n+      Some issues may seem intermittent when looking at test results, even though the reason for failing is actually known. One example is where a test fails consistently on a specific host, or due to specific conditions in the environment. These failures should not be considered intermittent but it may still be valuable to tag these in JBS with one of the labels **`intermittent-hardware`** or **`intermittent-environment`**. This will help to faster identify that the cause of the failure is known without having to read through the entire bug.\n+\n+      A test that should be platform agnostic but is consistently failing on a specific OS would for instance be labeled with **`intermittent-environment`**, while a test that fails every time it is run on some specific hardware would be labeled with **`intermittent-hardware`**.\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [**`maintainer-pain`**]{#}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      Bugs that for some reason is wasting engineering time just by existing, or in other ways are causing pain for the maintainers of the JDK. Examples are bugs that occur frequently in testing or test failures that are time consuming to investigate before determining that it is a pre-existing bug.\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [**`noreg-`**`.*`]{#noreg}<br>\n+      [**`nounit-`**`.*`]{#nounit}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      The **`noreg-`**`.*` and **`nounit-`**`.*` labels are used to explain why a bugfix doesn't need\/have a regression test or a unit test. The suffix of the label is described below.\n+\n+[**`-sqe`**]{#noreg-sqe}\n+:    Change can be verified by running an existing SQE test suite; the bug should identify the suite and the specific test case(s).\n+\n+[**`-jck`**]{#noreg-jck}\n+:    Change can be verified by running the JCK; the bug should identify the specific test case(s).\n+\n+[**`-external`**]{#noreg-external}\n+:    Change can be verified by running an existing external test suite; the bug should identify the suite and the specific test case(s).\n+\n+[**`-doc`**]{#noreg-doc}\n+:    Change only affects documentation.\n+\n+[**`-demo`**]{#noreg-demo}\n+:    Change only affects demo code.\n+\n+[**`-build`**]{#noreg-build}\n+:    Change only affects build infrastructure (makefiles, copyrights, scripts, etc.).\n+\n+[**`-self`**]{#noreg-self}\n+:    Change is a fix to a regression or unit test itself.\n+\n+[**`-perf`**]{#noreg-perf}\n+:    Change is for a performance bug for which writing a regression test is infeasible; the bug should describe how to verify the fix.\n+\n+[**`-hard`**]{#noreg-hard}\n+:    It is too hard to write a regression or unit test for this bug (e.g., theoretical race condition, complex setup, reboot required, editing of installed files required, specific graphics card required); the bug should explain why.\n+\n+[**`-long`**]{#noreg-long}\n+:    Testing requires a very long running time (e.g., more than a few minutes).\n+\n+[**`-big`**]{#noreg-big}\n+:    Testing requires an unreasonable quantity of resources (e.g., tens of gigabytes of filesystem space).\n+\n+[**`-trivial`**]{#noreg-trivial}\n+:    Change is so trivial that nothing could possibly go wrong with it.\n+\n+[**`-cleanup`**]{#noreg-cleanup}\n+:    Change is a cleanup or refactoring of existing code that is covered by existing tests.\n+\n+[**`-l10n`**]{#noreg-l10n}\n+:    Change only affects localized text.\n+\n+[**`-undo`**]{#noreg-undo}\n+:    Change is a reversion of a previous faulty change.\n+\n+[**`-other`**]{#noreg-other}\n+:    Regression or unit test is unnecessary or infeasible for some other reason; the bug report should explain why.\n+\n+Examples:  If a bug fix only corrects a change in the build system, then add the **`noreg-build`** label to the corresponding bug. If the change improves loop optimizations in HotSpot, then add **`nounit-perf`** to the corresponding bug.\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [**`performance`**]{#performance}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      Used to identify a bug with noticeable performance impact. Either positive or negative.\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [~~**`pit`**~~]{#pit}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      **Deprecated.** Was used to indicate that a failure happened in product integration testing (PIT). Since we are now running tiered testing there is no more PIT. See **`tier`**`[1-8]`.\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [**`problemlist`**]{#problemlist}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      One or more tests has been problemlisted due to this bug.\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [**`regression`**]{#regression}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      A regression is a bug that did not exist in the previous release. Ideally all regressions must be fixed in order to release the next major version.\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [**`release-note`**]{#release-note}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      Used to indicate that the issue is a release note. The release-note issue is a sub-task to the main JBS issue containing the text to be used in the release note. The release note must also have one of the following labels:\n+\n+[**`RN-NewFeature`**]{#RN-NewFeature}\n+:   New Feature or enhancement.\n+\n+[**`RN-IssueFixed`**]{#RN-IssueFixed}\n+:   A significant issue which has been fixed, would normally be a regression or an issue which unknowingly released in a new feature.\n+\n+[**`RN-KnownIssue`**]{#RN-KnownIssue}\n+:   An issue that was not possible to fix by the time the release was GA'd.\n+\n+[**`RN-Removed`**]{#RN-Removed}\n+:   Covers an API, feature, tool etc. which has been removed from the JDK.\n+\n+[**`RN-Deprecated`**]{#RN-Deprecated}\n+:   Covers an API that has been marked as deprecated in the release.\n+\n+[**`RN-Important`**]{#RN-Important}\n+:   Used to indicate that the release note should be highlighted in some fashion, such as listing it at the beginning of the release notes.\n+\n+[**`RN-`(distro)**]{#RN-distro}\n+:   Used to indicate that the release note is only relevant for a specific JDK distribution. E.g. RN-Oracle\n+\n+[~~**`RN-Change`**~~]{#RN-Change}\n+:   Deprecated.\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [**`release-note=yes`**]{#release-note-yes}<br>\n+      [**`release-note=no`**]{#release-note-no}<br>\n+      [~~**`release-note=done`**~~]{#release-note-done}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      Used to indicate wether a change requires a release note or not. The labels are always placed on the main JBS issue, never on the actual release note issue.\n+\n+      **`release-note=done`** is deprecated and should no longer be used.\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [**`starter`**]{#starter}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      A starter bug is a well contained, small issue that is suitable for someone new to the codebase.\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [**`startup`**]{#startup}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      Used to identify a bug as affecting Java SE startup performance.\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [**`tck-red-`***(Rel)*]{#tck-red-rel}<br>\n+      [~~**`tck-red`**~~]{#tck-red}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      Used to identify TCK conformance stoppers (e.g. failure of a valid TCK test that exists in a shipped TCK). The release number indicates which release of the TCK that failed. E.g., **`tck-red-11`**\n+\n+      There are **`tck-red`** labels without the release number out there as well. This usage is deprecated.\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [~~**`test`**~~]{#test}<br>\n+      [~~**`test-only`**~~]{#test-only}<br>\n+      [~~**`testbug`**~~]{#testbug}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      The labels **`test`**, **`test-only`**, and **`testbug`** are deprecated and should no longer be used. Use [**`noreg-self`**](#noreg) to indicate that an issue is a bug in test code.\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [**`tier`**`[1-8]`]{#tier}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      Used to indicate which tier in the jdk\/jdk CI pipeline a test failure has been seen in. Lower tiers would in general mean higher urgency to fix the issue. E.g., **`tier1`**, **`tier2`**\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [**`webbug`**]{#webbug}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      Used to identify a bug as submitted on [bugs.java.com](https:\/\/bugs.java.com\/bugdatabase\/).\n+    <\/td>\n+  <\/tr>\n+  <tr>\n+    <td class=\"dictionary\">\n+      [**`zgc`**]{#zgc}\n+    <\/td>\n+    <td class=\"dictionary\">\n+      Used to indicate that an issue is related to ZGC.\n+    <\/td>\n+  <\/tr>\n+<\/table>\n","filename":"src\/index.md","additions":1501,"deletions":36,"binary":false,"changes":1537,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-% Introduction\n+% Page moved\n@@ -3,33 +3,1 @@\n-::: {.NavBit}\n-[« Previous](index.html) • [TOC](index.html) • [Next »](processWorkflow.html)\n-:::\n-\n-Welcome to the OpenJDK Developers' Guide!\n-\n-The OpenJDK Community is the place to collaborate on open-source implementations\n-of the Java Platform, Standard Edition, and related projects.  It was created in\n-November 2006, when initial portions of the JDK source code were published under\n-the GPLv2 license.\n-\n-In order to work together efficiently, clear directions are sometimes needed to\n-avoid misconceptions and to align developers' views of terminology and process.\n-The OpenJDK Community is a fairly pragmatic place. \"Do the right thing\" is most\n-often the right course of action. Still, if people do things in the same right way\n-then everyone's work becomes more transparent and easier for others to follow. For\n-this reason most parts of the development process have standard flows that are the\n-recommended ways to do things.\n-\n-The goal of this guide is to answer questions that developers of the JDK might\n-have around development process, tooling, standards, and so forth. The formal rules and\n-processes are described in other documents, such as [JEP 1](https:\/\/openjdk.java.net\/jeps\/1)\n-for the JDK Enhancement-Proposal & Roadmap Process, and [JEP 3](https:\/\/openjdk.java.net\/jeps\/3)\n-for the JDK Release Process. This guide is meant to be a complement to such documents,\n-with tutorials and examples for how to follow these rules and how to work together with the rest\n-of the OpenJDK Community.\n-\n-There are many common use cases that aren't detailed in the formal process. This\n-guide suggests how to work in such cases.\n-\n-::: {.NavBit}\n-[« Previous](index.html) • [TOC](index.html) • [Next »](processWorkflow.html)\n-:::\n+The OpenJDK Developers' Guide has been merged into a single document. Please update your links to point to the new location: [OpenJDK Developers' Guide](index.html)\n","filename":"src\/intro.md","additions":2,"deletions":34,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -1,476 +0,0 @@\n-% JBS Label Dictionary\n-\n-::: {.NavBit}\n-[TOC](index.html)\n-:::\n-\n-This table contains some frequently used JBS labels and their meaning. Please help keeping this dictionary up to date by adding your favorite labels. This table doesn’t dictate how to use labels, but rather document how they are used. That said, obviously it will help everyone if we try to follow a common standard and use similar labels in the same way across all entities that use JBS.\n-\n-> ---\n-> ### Labels are case sensitive\n-> When using labels in Jira gadgets (like pie charts, heat maps, and statistics tables) Jira will be case sensitive and treat e.g. OpenJDK and openjdk as two different labels. Searching however is case insensitive. This means that if you group a set of issues in a gadget based on a label, and then click one of the groups to see the list of issues, that list will contain more results than the gadget if there are usages of the label with different casing. This can be very confusing and for this reason the recommendation is to stick with the commonly used case for all labels, regardless of your personal taste for upper or lower case letters. Most labels are lower case only, but there are examples where upper case letters are used in the most common version of a label.\n-\n-> ---\n-\n-<table class=\"dictionary\">\n-  <tr style=\"text-align:left;\"><th>Label<\/th><th>Description<\/th><\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [*(Area)***`-interest`**]{#area-interest}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      Used to indicate that an area (usually a team or project) is interested in the issue. This label doesn't indicate ownership of the issue. E.g., **`redhat-interest`**, **`azul-interest`**, **`coin-interest`**\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [*(Area)***`-related`**]{#area-related}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      Used to indicate that an issue is related to a specific area (usually a feature or project). This label doesn't indicate ownership of the issue. E.g., **`graal-related`**, **`testcolo-related`**, **`doc-related`**\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [*(Rel)***`-bp`**]{#rel-bp}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      Used to indicate that a bug would be suitable for backport to a release *(Rel)*. This is not a decision to backport, just a suggestion \/ recommendation. E.g., **`11-bp`**\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [*(Rel)***`-critical-request`**]{#rel-critical-request}<br>\n-      [*(Rel)***`-critical-approved`**]{#rel-critical-approved}<br>\n-      [*(Rel)***`-critical-watch`**]{#rel-critical-watch}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      Used in the rampdown phases of specific releases to request approval of changes that requires project lead approval (or similar) to be included. *(Rel)* is the release in question. E.g., **`jdk11-critical-request`**\n-\n-      *(Rel)***`-critical-approved`** is used to signal that the change has been approved for inclusion. E.g., **`jdk11-critical-approved`**<br>\n-      *(Rel)***`-critical-watch`** is used for issues that must get into a specific release but risk running late. The label is used while the issue is still in progress and is replaced with *(Rel)***`-critical-request`** once the issue is resolved. E.g., **`jdk11-critical-watch`**\n-\n-      These labels are always placed on the main JBS issue (the bug), never on backports or subtasks.\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [*(Rel)***`-defer-request`**]{#rel-defer-request}<br>\n-      [*(Rel)***`-defer-yes`**]{#rel-defer-yes}<br>\n-      [*(Rel)***`-defer-no`**]{#rel-defer-no}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      Used to request deferral of changes that requires project lead approval (or similar) to defer. *(Rel)* is the release in question. E.g., **`jdk12-defer-request`**\n-\n-      *(Rel)***`-defer-yes`** and *(Rel)***`-defer-no`** are used to indicate wether the deferral has been approved or not. E.g., **`jdk12-defer-yes`**\n-\n-      These labels are always placed on the main JBS issue (the bug), never on backports or subtasks.\n-      Further details are found in the [JDK Release Process](https:\/\/openjdk.java.net\/jeps\/3#Bug-Deferral-Process).\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [*(Rel)***`-enhancement-request`**]{#rel-enhancement-request}<br>\n-      [*(Rel)***`-enhancement-yes`**]{#rel-enhancement-yes}<br>\n-      [*(Rel)***`-enhancement-no`**]{#rel-enhancement-no}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      Used in the rampdown phases to request the late inclusion of an enhancement. *(Rel)* is the release in question. E.g., **`jdk10-enhancement-request`**\n-\n-      *(Rel)***`-enhancement-yes`** and *(Rel)***`-enhancement-no`** are used to indicate the response on the request. E.g., **`jdk10-enhancement-yes`**, **`jdk10-enhancement-no`**\n-\n-      These labels are always placed on the main JBS issue (the bug), never on backports or subtasks.\n-      Further details are found in the [JDK Release Process](http:\/\/openjdk.java.net\/jeps\/3#Late-Enhancement-Request-Process).\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [*(Rel)***`-fix-request`**]{#rel-fix-request}<br>\n-      [*(Rel)***`-fix-SQE-ok`**]{#rel-fix-SQE-ok}<br>\n-      [*(Rel)***`-fix-yes`**]{#rel-fix-yes}<br>\n-      [*(Rel)***`-fix-no`**]{#rel-fix-no}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      Used in rampdown phase 2 to indicate that an issue would be of interest to get integrated into release *(Rel)*. E.g., **`jdk12u-fix-request`**\n-\n-      *(Rel)***`-fix-SQE-ok`** is used to indicate that the issue will be covered by the test plan for *(Rel)*. E.g., **`jdk12u-fix-SQE-ok`**<br>\n-      *(Rel)***`-fix-yes`** and *(Rel)***`-fix-no`** are used to indicate wether an issue has been approved for backport to *(Rel)*. E.g., **`jdk12u-fix-yes`**\n-\n-      These labels are always placed on the main JBS issue (the bug), never on backports or subtasks.\n-      Further details are found in the [JDK Release Process](http:\/\/openjdk.java.net\/jeps\/3#Fix-Request-Process).\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [*(Rel)***`-na`**]{#rel-na}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      Used to indicate that the issue does not affect release *(Rel)* or later. Could for instance be a bug in code that was removed in *(Rel)*.\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [*(Team)***`-triage-`***(Rel)*]{#team-triage-rel}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      Used to indicate that *(Team)* has triaged this issue for release *(Rel)*. It's encouraged that all open bugs are triaged on a regular basis so that old bugs aren't forgotten. It's therefore common to see several triage labels on the same issue which helps keeping track of which bugs has been triaged for each release. E.g., **`oracle-triage-13`**\n-\n-      There are many label variants that include the word triage in some form. The form described above is the only one recommended. Please refrain from using other forms.\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [**`aot`**]{#aot}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      Used to indicate that an issue is related to Ahead of Time Compilation.\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-     [~~**`appcds`**~~]{#appcds}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      **Deprecated.** Was used to indicate that an issue was related to Application Class-Data Sharing. The **`cds`** label is now used instead.\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [**`c1`**]{#c1}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      Used to indicate that an issue is related to the C1 JIT compiler.\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [**`c2`**]{#c2}<br>\n-      **`c2-`**`.*`\n-    <\/td>\n-    <td class=\"dictionary\">\n-      Used to indicate that an issue is related to the C2 JIT compiler.\n-\n-      **`c2-`**`.*` labels are used to identify different c2 features. E.g., **`c2-intrinsic`**, **`c2-loopopts`**\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [**`cds`**]{#cds}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      Used to indicate that an issue is related to Class Data Sharing.\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [**`cleanup`**]{#cleanup}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      The **`cleanup`** label is used to indicate enhancements which has no semantic changes, whose only purpose is to make the code more maintainable or better looking.\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [**`docker`**]{#docker}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      Used to indicate that an issue is related to docker support.\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [**`gc-`**`.*`]{#gc}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      Used to indicate that an issue is related to a specific garbage collector in the JVM. E.g., **`gc-g1`**, **`gc-shenandoah`**, **`gc-serial`**, **`gc-epsilon`**\n-\n-      There are also labels in use to identify different GC features or areas rather than GC algorithms. E.g., **`gc-g1-fullgc`**, **`gc-largeheap`**, **`gc-performance`**\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [**`graal`**]{#graal}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      Used to indicate that this is a Graal issue. (Something that needs to be fixed in Graal rather than in OpenJDK.)\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [**`graal-integration`**]{#graal-integration}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      Reserved for Graal integration umbrella bugs. The automated integration script will break if this label is used for other bugs.\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [**`hgupdate-sync`**]{#hgupdate-sync}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      Used to identify backport issues automatically created by HG Updater (a script that monitors the hg repositories for changes).\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [~~**`hs-nightly`**~~]{#hs-nightly}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      **Deprecated.** Was used to tag bugs found in the HotSpot nightly testing. Since we are now running tiered testing there is no more nightly HotSpot testing. See **`tier`**`[1-8]`.\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [**`hs-sbr`**]{#hs-sbr}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      Used to tag bugs that are found in the \"same binary runs\", a stress testing method used to find intermittent failures.\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [~~**`hs-tier`**~~~~`[1-8]`~~]{#hs-tier}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      **Deprecated.** Was used to identify which HotSpot tier a test failure was seen in. We don't separate HotSpot tiers from the JDK tiers anymore. See **`tier`**`[1-8]`.\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [**`i18n`**]{#i18n}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      Used to indicate that an issue is related to internationalization.\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [**`integration-blocker`**]{#integration-blocker}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      Used to indicate that a bug is present in a downstream repository but not present in the upstream repository and is therefore blocking integration of downstream changes into upstream.\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [**`intermittent`**]{#intermittent}<br>\n-      [**`intermittent-environment`**]{#intermittent-environment}<br>\n-      [**`intermittent-hardware`**]{#intermittent-hardware}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      An intermittent issue is one that fails sometimes but not always. The exact reason for the intermittent failure is per definition unknown. Once the reason has been identified the issue is no more considered intermittent. An issue isn't intermittent if some characteristics has been found that triggers the failure consistently, even if the actual cause for the failure has not been found. For instance if a test fails every time it is executed on a specific host but not on other hosts it wouldn't be considered intermittent as it fails consistently on that specific host. In other cases it may be that we know that a test sometimes is unlucky in some respect and fails due to this. This test could still be considered intermittent even though we know what the reason is if the reason itself appears intermittently.\n-\n-      Some issues may seem intermittent when looking at test results, even though the reason for failing is actually known. One example is where a test fails consistently on a specific host, or due to specific conditions in the environment. These failures should not be considered intermittent but it may still be valuable to tag these in JBS with one of the labels **`intermittent-hardware`** or **`intermittent-environment`**. This will help to faster identify that the cause of the failure is known without having to read through the entire bug.\n-\n-      A test that should be platform agnostic but is consistently failing on a specific OS would for instance be labeled with **`intermittent-environment`**, while a test that fails every time it is run on some specific hardware would be labeled with **`intermittent-hardware`**.\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [**`maintainer-pain`**]{#}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      Bugs that for some reason is wasting engineering time just by existing, or in other ways are causing pain for the maintainers of the JDK. Examples are bugs that occur frequently in testing or test failures that are time consuming to investigate before determining that it is a pre-existing bug.\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [**`noreg-`**`.*`]{#noreg}<br>\n-      [**`nounit-`**`.*`]{#nounit}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      The **`noreg-`**`.*` and **`nounit-`**`.*` labels are used to explain why a bugfix doesn't need\/have a regression test or a unit test. The suffix of the label is described below.\n-\n-[**`-sqe`**]{#noreg-sqe}\n-:    Change can be verified by running an existing SQE test suite; the bug should identify the suite and the specific test case(s).\n-\n-[**`-jck`**]{#noreg-jck}\n-:    Change can be verified by running the JCK; the bug should identify the specific test case(s).\n-\n-[**`-external`**]{#noreg-external}\n-:    Change can be verified by running an existing external test suite; the bug should identify the suite and the specific test case(s).\n-\n-[**`-doc`**]{#noreg-doc}\n-:    Change only affects documentation.\n-\n-[**`-demo`**]{#noreg-demo}\n-:    Change only affects demo code.\n-\n-[**`-build`**]{#noreg-build}\n-:    Change only affects build infrastructure (makefiles, copyrights, scripts, etc.).\n-\n-[**`-self`**]{#noreg-self}\n-:    Change is a fix to a regression or unit test itself.\n-\n-[**`-perf`**]{#noreg-perf}\n-:    Change is for a performance bug for which writing a regression test is infeasible; the bug should describe how to verify the fix.\n-\n-[**`-hard`**]{#noreg-hard}\n-:    It is too hard to write a regression or unit test for this bug (e.g., theoretical race condition, complex setup, reboot required, editing of installed files required, specific graphics card required); the bug should explain why.\n-\n-[**`-long`**]{#noreg-long}\n-:    Testing requires a very long running time (e.g., more than a few minutes).\n-\n-[**`-big`**]{#noreg-big}\n-:    Testing requires an unreasonable quantity of resources (e.g., tens of gigabytes of filesystem space).\n-\n-[**`-trivial`**]{#noreg-trivial}\n-:    Change is so trivial that nothing could possibly go wrong with it.\n-\n-[**`-cleanup`**]{#noreg-cleanup}\n-:    Change is a cleanup or refactoring of existing code that is covered by existing tests.\n-\n-[**`-l10n`**]{#noreg-l10n}\n-:    Change only affects localized text.\n-\n-[**`-undo`**]{#noreg-undo}\n-:    Change is a reversion of a previous faulty change.\n-\n-[**`-other`**]{#noreg-other}\n-:    Regression or unit test is unnecessary or infeasible for some other reason; the bug report should explain why.\n-\n-Examples:  If a bug fix only corrects a change in the build system, then add the **`noreg-build`** label to the corresponding bug. If the change improves loop optimizations in HotSpot, then add **`nounit-perf`** to the corresponding bug.\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [**`performance`**]{#performance}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      Used to identify a bug with noticeable performance impact. Either positive or negative.\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [~~**`pit`**~~]{#pit}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      **Deprecated.** Was used to indicate that a failure happened in product integration testing (PIT). Since we are now running tiered testing there is no more PIT. See **`tier`**`[1-8]`.\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [**`problemlist`**]{#problemlist}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      One or more tests has been problemlisted due to this bug.\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [**`regression`**]{#regression}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      A regression is a bug that did not exist in the previous release. Ideally all regressions must be fixed in order to release the next major version.\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [**`release-note`**]{#release-note}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      Used to indicate that the issue is a release note. The release-note issue is a sub-task to the main JBS issue containing the text to be used in the release note. The release note must also have one of the following labels:\n-\n-[**`RN-NewFeature`**]{#RN-NewFeature}\n-:   New Feature or enhancement.\n-\n-[**`RN-IssueFixed`**]{#RN-IssueFixed}\n-:   A significant issue which has been fixed, would normally be a regression or an issue which unknowingly released in a new feature.\n-\n-[**`RN-KnownIssue`**]{#RN-KnownIssue}\n-:   An issue that was not possible to fix by the time the release was GA'd.\n-\n-[**`RN-Removed`**]{#RN-Removed}\n-:   Covers an API, feature, tool etc. which has been removed from the JDK.\n-\n-[**`RN-Deprecated`**]{#RN-Deprecated}\n-:   Covers an API that has been marked as deprecated in the release.\n-\n-[**`RN-Important`**]{#RN-Important}\n-:   Used to indicate that the release note should be highlighted in some fashion, such as listing it at the beginning of the release notes.\n-\n-[**`RN-`(distro)**]{#RN-distro}\n-:   Used to indicate that the release note is only relevant for a specific JDK distribution. E.g. RN-Oracle\n-\n-[~~**`RN-Change`**~~]{#RN-Change}\n-:   Deprecated.\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [**`release-note=yes`**]{#release-note-yes}<br>\n-      [**`release-note=no`**]{#release-note-no}<br>\n-      [~~**`release-note=done`**~~]{#release-note-done}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      Used to indicate wether a change requires a release note or not. The labels are always placed on the main JBS issue, never on the actual release note issue.\n-\n-      **`release-note=done`** is deprecated and should no longer be used.\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [**`starter`**]{#starter}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      A starter bug is a well contained, small issue that is suitable for someone new to the codebase.\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [**`startup`**]{#startup}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      Used to identify a bug as affecting Java SE startup performance.\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [**`tck-red-`***(Rel)*]{#tck-red-rel}<br>\n-      [~~**`tck-red`**~~]{#tck-red}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      Used to identify TCK conformance stoppers (e.g. failure of a valid TCK test that exists in a shipped TCK). The release number indicates which release of the TCK that failed. E.g., **`tck-red-11`**\n-\n-      There are **`tck-red`** labels without the release number out there as well. This usage is deprecated.\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [~~**`test`**~~]{#test}<br>\n-      [~~**`test-only`**~~]{#test-only}<br>\n-      [~~**`testbug`**~~]{#testbug}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      The labels **`test`**, **`test-only`**, and **`testbug`** are deprecated and should no longer be used. Use [**`noreg-self`**](#noreg) to indicate that an issue is a bug in test code.\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [**`tier`**`[1-8]`]{#tier}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      Used to indicate which tier in the jdk\/jdk CI pipeline a test failure has been seen in. Lower tiers would in general mean higher urgency to fix the issue. E.g., **`tier1`**, **`tier2`**\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [**`webbug`**]{#webbug}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      Used to identify a bug as submitted on [bugs.java.com](https:\/\/bugs.java.com\/bugdatabase\/).\n-    <\/td>\n-  <\/tr>\n-  <tr>\n-    <td class=\"dictionary\">\n-      [**`zgc`**]{#zgc}\n-    <\/td>\n-    <td class=\"dictionary\">\n-      Used to indicate that an issue is related to ZGC.\n-    <\/td>\n-  <\/tr>\n-<\/table>\n-\n-::: {.NavBit}\n-[TOC](index.html)\n-:::\n","filename":"src\/jbslabels.md","additions":0,"deletions":476,"binary":false,"changes":476,"status":"deleted"},{"patch":"@@ -1,1 +1,1 @@\n-% Mailing Lists\n+% Page moved\n@@ -3,67 +3,1 @@\n-::: {.NavBit}\n-[« Previous](repositories.html) • [TOC](index.html) • [Next »](codeConventions.html)\n-:::\n-\n-The mailing lists are the key communications mechanism for all OpenJDK work.\n-All participation in an OpenJDK project starts with joining the relevant mailing\n-list. A subscriber to an OpenJDK mailing list is referred to as a Participant\n-in the [Bylaws](https:\/\/openjdk.java.net\/bylaws). As a general recommendation we suggest\n-to subscribe to [announce](https:\/\/mail.openjdk.java.net\/mailman\/listinfo\/announce),\n-[discuss](https:\/\/mail.openjdk.java.net\/mailman\/listinfo\/discuss), and the `-dev` lists\n-covering your explicit area of interest. All OpenJDK mailing lists are found here:\n-\n-> [`mail.openjdk.java.net`](https:\/\/mail.openjdk.java.net\/mailman\/listinfo)\n-\n-The OpenJDK community is a friendly place. To keep it that way it's important to\n-keep a professional tone in emails and be aware that the community is global.\n-Many different people with different backgrounds collaborate in these lists.\n-Even though English is the required language for all lists, many Participants\n-speak other languages as their native language. A high tolerance for non-perfect\n-English is expected from anyone joining these lists.\n-\n-You must be in the list to send to the list. Some lists are moderated to keep the\n-content on topic. Each list has its own archive where you can browse older\n-conversations on the list.\n-\n-There are a few different types of lists. The list name has two parts to explain what\n-the list is intended for, `<name>-<suffix>`. The name often refers to the project\n-that owns the list or a specific area of interest that the list focuses on.\n-The suffix is explained below. Not all projects or areas have all types of\n-lists described here.\n-\n-> `-dev`\n-> :    Technical discussions around the implementation of the project artifacts. This\n-       is also where code reviews happen.\n-\n-> `-use`\n-> :    Technical discussions around the usage of the project artifacts.\n-\n-> `-discuss`\n-> :    General discussions around the project. The special case `discuss(at)openjdk.java.net`\n-       is used for general discussions around the OpenJDK project. Discussions around new\n-       project proposals usually happens here.\n-\n->  `-changes`\n-> :    Changeset notifications from the source code repositories maintained by the project.\n-\n-> `-announce`\n-> :    General project announcements. These lists are tightly moderated and are\n-       expected to be low traffic. The special case `announce(at)openjdk.java.net`\n-       is used for announcements for the OpenJDK project.\n-\n-> `-experts`\n-> :    Expert group discussions. The list is restricted; only members of the expert\n-       group can subscribe.\n-\n-> `-observers`\n-> :    Open for anyone to subscribe to see what the experts are discussing and potentially\n-       to have some dialog with other non-experts. There is no guarantee that an expert is\n-       subscribed to the `-observers` list or will see any responses on that list.\n-\n-> `-comments`\n-> :    Used by observers to directly provide feedback\/comments to the experts (typically\n-       a lead will process the comments list and forward things on to the experts list).\n-\n-::: {.NavBit}\n-[« Previous](repositories.html) • [TOC](index.html) • [Next »](codeConventions.html)\n-:::\n+The OpenJDK Developers' Guide has been merged into a single document. Please update your links to point to the new location: [OpenJDK Developers' Guide](index.html)\n","filename":"src\/mailingLists.md","additions":2,"deletions":68,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-% What Happens Next\n+% Page moved\n@@ -3,195 +3,1 @@\n-::: {.NavBit}\n-[« Previous](producingChangeset.html) • [TOC](index.html) • [Next »](bugDatabase.html)\n-:::\n-\n-This section describes what might happen after a changeset gets into the build,\n-for example a bug might be filed or a backport could be requested.\n-\n-* [Requesting a Backport](#requesting-a-backport)\n-* [Filing a Bug](#filing-a-bug)\n-* [ProblemListing or `@ignore`-ing a Test](#problemlisting-or-ignore-ing-a-test)\n-* [Backing Out a Change](#backing-out-a-change)\n-\n-## Requesting a Backport\n-\n-TBD\n-\n-## Filing a Bug\n-\n-When a new failure is found in the JDK a bug should be filed to describe and track the issue. Depending on your role in the OpenJDK you can either use the [Bug Report Tool](https:\/\/bugreport.java.com\/) or, if you are Author in an OpenJDK Project, report the bug directly in the [JDK Bug System](https:\/\/bugs.openjdk.java.net\/). Try to make the bug report as complete as possible to make it easier to triage and investigate the bug. It's not the reporter's responsibility to set a correct priority, but a qualified guess is always better than a default value. To help with setting the right priority consider things like how the bug impacts the product and our testing, how likely is it that the bug triggers, how difficult is it to work around the bug if it's not fixed soon, and whether it's a recent regression, since that may break existing applications. Regressions are often higher priority than long standing bugs and may block a release if not fixed.\n-\n-A few things to keep in mind when filing a new bug:\n-\n-* Before filing a bug, verify that there isn't already a bug filed for this issue.\n-* If you suspect that the bug is a vulnerability, don't file a JBS issue. Instead send your bugreport to [vuln-dev@openjdk.java.net](mailto:vuln-dev@openjdk.java.net)\n-* Make a reasonable attempt to narrow down which build or release the failure first appeared in.\n-* Add relevant labels like `intermittent`, `regression`, `noreg-self` etc.\n-* Set affects version to the JDK version(s) where the failure was seen.\n-  * If the failure is found in an update train of the JDK (e.g. 11.0.x), please make an effort to see if the bug is also present in [mainline](https:\/\/hg.openjdk.java.net\/jdk\/jdk\/).\n-* In the description, always include (if possible):\n-  * full name of the failing tests\n-  * error messages\n-  * assert messages\n-  * stack trace\n-  * command line information\n-  * relevant information from the logs\n-* If the failure is not reproducible with an existing OpenJDK test, attach a reproducer if possible.\n-* Only set CPU and\/or OS fields if the bug **ONLY** happens on that particular platform.\n-* Always file separate bugs for different issues.\n-  * If two crashes looks related but not similar enough to for sure be the same, it is easier to close a bug as a duplicate than it is to extract the relevant info from a bug to create a new one later.\n-\n-## Excluding a Test\n-\n-Sometimes tests break. It could be e.g. due to bugs in the test itself, due to changed functionality in the code that the test is testing, or changes in the environment where the test is executed. While working on a fix, it can be useful to stop the test from being executed in everyone else's testing to reduce noise, especially if the test is expected to fail for more than a day. There are two ways to stop a test from being run in standard test runs: ProblemListing and using the `@ignore` keyword. Removing tests isn't the standard way to remove a failure. A failing test is often a regression and should ideally be handled with high urgency.\n-\n-I'll say it right away so that it's not forgotten at the end: Remember to remove the JBS id from the ProblemList or the test when the bug is closed. This is especially easy to forget if a bug is closed as a duplicate or 'Will Not Fix'. jcheck will report an error and prohibit a push if a PR is created for an issue that is found in a ProblemList if the fix doesn't remove the bug ID from the ProblemList.\n-\n-### ProblemListing jtreg tests\n-\n-ProblemListing should be used for a short term exclusion while a test is being fixed, and for the exclusion of intermittently failing tests that cause too much noise, but can still be useful to run on an ad-hoc basis. ProblemListing is done in the file `ProblemList.txt`. There are actually several ProblemList files to choose from. Their location and name hint about what area or feature each file belongs to. Each file has sections for different components. All ProblemList files complement each other to build the total set of tests to exclude in JTReg runs.\n-\n-~~~\n-test\/hotspot\/jtreg\/ProblemList.txt\n-test\/hotspot\/jtreg\/ProblemList-aot.txt\n-test\/hotspot\/jtreg\/ProblemList-graal.txt\n-test\/hotspot\/jtreg\/ProblemList-non-cds-mode.txt\n-test\/hotspot\/jtreg\/ProblemList-Xcomp.txt\n-test\/hotspot\/jtreg\/ProblemList-zgc.txt\n-test\/jaxp\/ProblemList.txt\n-test\/jdk\/ProblemList.txt\n-test\/jdk\/ProblemList-aot.txt\n-test\/jdk\/ProblemList-graal.txt\n-test\/jdk\/ProblemList-Xcomp.txt\n-test\/langtools\/ProblemList.txt\n-test\/langtools\/ProblemList-graal.txt\n-test\/lib-test\/ProblemList.txt\n-~~~\n-\n-Use the suitable ProblemList and add a line like this in the proper section:\n-\n-~~~\n-foo\/bar\/MyTest.java                        4711   windows-all\n-~~~\n-\n-In this example, `MyTest.java` is ProblemListed on windows, tracked by bug `JDK-4711`.\n-\n-Currently there's [no support for multiple lines for the same test](https:\/\/bugs.openjdk.java.net\/browse\/CODETOOLS-7902481). For this reason it's important to always make sure there's no existing entry for the test before adding a new one, as multiple entries might lead to unexpected results, e.g.\n-\n-~~~\n-foo\/bar\/MyTest.java                        4710   generic-all\n-...\n-foo\/bar\/MyTest.java                        4711   windows-all\n-~~~\n-\n-This would lead to `sun.tools.jcmd.MyTest.java` being ProblemListed only on `windows-all`. The proper way to write this is:\n-\n-~~~\n-foo\/bar\/MyTest.java                        4710,4711   generic-all,windows-all\n-~~~\n-\n-Although `windows-all` isn't strictly required in this example, it's preferable to specify platforms for each bugid (unless they are all `generic-all`), this makes it easier to remove one of the bugs from the list.\n-\n-#### ProblemListing some, but not all, test cases in a file\n-\n-Some tests contain several test cases and there may be a need to ProblemList only a few of them. To do this use the full test name, i.e. `<filename> + # + <test case id>`, where test case id can be specified in the test header. If no id is specified each test case can be referenced with `id` + ordinary number of the test case in the test file.\n-\n-Let's assume we have four test cases in `foo\/bar\/MyTest.java`:\n-\n-~~~\n-\/* @test *\/\n-\/* @test id=fancy_name *\/\n-\/* @test *\/\n-\/* @test *\/\n-~~~\n-\n-A ProblemList entry that excludes the first, second, and third test case would look like this:\n-\n-~~~\n-foo\/bar\/MyTest.java#id0          4720  generic-all\n-foo\/bar\/MyTest.java#fancy_name   4721  generic-all\n-foo\/bar\/MyTest.java#id2          4722  generic-all\n-~~~\n-\n-Due to an issue described in [CODETOOLS-7902712](https:\/\/bugs.openjdk.java.net\/browse\/CODETOOLS-7902712) tests that contains more than one `@test` must actually use this way to specify all test cases if all of them should be ProblemListed. Specifying just the test name will not work.\n-\n-#### Running ProblemListed tests\n-\n-To run ad-hoc runs of ProblemListed tests use `RUN_PROBLEM_LISTS=true`.\n-\n-~~~\n-make test TEST=... JTREG=RUN_PROBLEM_LISTS=true\n-~~~\n-\n-### Exclude jtreg tests using `@ignore`\n-\n-The `@ignore` keyword is used in the test source code. This is mainly used for tests that are so broken that they may be harmful or useless, and is less common than ProblemListing. Examples can be tests that don't compile because something changed in the platform; or a test which might remove your `\/etc\/shadow`. Use `@ignore` with a bug reference in the test case to prevent the test from being run.\n-\n-~~~java\n-\/**\n- *  @test\n- *  @ignore 4711\n- *\n-~~~\n-\n-In this example, `MyTest.java` is excluded, tracked by bug `JDK-4711`. `@ignore` should always be placed directly before the first `@run` line in the test.\n-\n-### Dealing with JBS bugs for test exclusion\n-\n-ProblemListing and `@ignore`-ing are done in the JDK source tree, that means a check-in into the repository is needed. This in turn means that a unique JBS issue and a code review are needed. This is a good thing since it makes test problems visible.\n-\n-* **Code review**: This is considered a [trivial](glossary.html#trivial) change.\n-* **JBS issue**: A JBS issue is obviously created for the bug that caused the failure, we call this the _main issue_. To exclude the test, create a subtask to the main issue. Also add the label `problemlist` to the main issue.\n-\n-The fix for the main issue should remove the test from the ProblemList or remove the `@ignore` keyword from the test.\n-\n-#### Triage excluded issues\n-\n-After a failure is handled by excluding a test, the main JBS issue should be re-triaged and possibly given a new priority. This should be handled by the standard triage process. A test exclusion results in an outage in our testing. This outage should be taken into consideration when triaging, in addition to the impact of the bug itself.\n-\n-## Backing Out a Change\n-\n-If a change causes a regression that can't be fixed within reasonable time the best way to handle the regression can be to back out the change. Backing out means that the inverse (anti-delta) of the change is pushed to effectively undo the change in the repository. There are two parts to this task, how to do the bookkeeping in JBS, and how to do the actual backout in mercurial.\n-\n-The backout is a regular change and will have to go through the standard code review process, but is considered a [trivial](glossary.html#trivial) change. The rationale is that a backout is usually urgent in nature and the change itself is automatically created by hg, and reviewed by the person who is performing the backout, so even though only one additional Reviewer is required the change will in practice get two reviews.\n-\n-### How to work with JBS when a change is backed out\n-\n-#. Close the original JBS issue **(O)**.\n-   * \"Verify\" the issue and choose \"Fix Failed\".\n-#. If the intention is to fix the change and submit it again, create a redo-issue **(R)** to track that the work still needs to be done.\n-   * Clone **(O)** and add the prefix `[REDO]` on the summary - the clone becomes the redo-issue **(R)**.\n-   * Make sure relevant information is brought to **(R)**.\n-   * Remember that comments are not brought over when cloning.\n-#. Create a backout-issue **(B)**:\n-   * Alternative 1 - the regression is identified directly.\n-     * Create a sub-task to **(R)** with the same summary, prefix with `[BACKOUT]`.\n-   * Alternative 2 - an investigation issue is created **(I)**, and during the investigation backing out the change is identified as the best solution.\n-     * Use the investigation issue **(I)** for the backout.\n-     * Change summary of **(I)** to the same as **(O)** and prefix with `[BACKOUT]`.\n-     * Move and change type of **(I)** to become a sub-task of **(R)**.\n-   * Alternative 3 - no redo issue was created.\n-     * Create a backout-issue **(B)** with the same summary as **(O)**, prefix with `[BACKOUT]`.\n-     * Link **(B)** and **(O)**.\n-\n-ProblemList entries and `@ignore` keywords will continue to point to the original bug (unless updated at back out). This is accepted since there is a clone link to follow.\n-\n-### How to work with mercurial when a change is backed out\n-\n-In order to backout a change, the `hg backout` command is recommended, which essentially applies the anti delta of the change. Make sure you perform the backout in the most upstream repostiory the change has escaped to.\n-\n-~~~\n-hg backout [OPTION]... [-r] REV\n-\n-reverse effect of earlier changeset\n-\n-    Prepare a new changeset with the effect of REV undone in the current\n-    working directory.\n-\n-    If REV is the parent of the working directory, then this new changeset is\n-    committed automatically. Otherwise, hg needs to merge the changes and the\n-    merged result is left uncommitted.\n-~~~\n-\n-::: {.NavBit}\n-[« Previous](producingChangeset.html) • [TOC](index.html) • [Next »](bugDatabase.html)\n-:::\n+The OpenJDK Developers' Guide has been merged into a single document. Please update your links to point to the new location: [OpenJDK Developers' Guide](index.html)\n","filename":"src\/next.md","additions":2,"deletions":196,"binary":false,"changes":198,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-% Process Workflow\n+% Page moved\n@@ -3,12 +3,1 @@\n-::: {.NavBit}\n-[« Previous](intro.html) • [TOC](index.html) • [Next »](repositories.html)\n-:::\n-\n-This is the main navigation for the document and the primary entry point. It is\n-intended to be a quick start and overview which will have a hyperlinked diagram\n-indicating sample work flows for common operations such as submitting a bug fix\n-and adding a new API.\n-\n-::: {.NavBit}\n-[« Previous](intro.html) • [TOC](index.html) • [Next »](repositories.html)\n-:::\n+The OpenJDK Developers' Guide has been merged into a single document. Please update your links to point to the new location: [OpenJDK Developers' Guide](index.html)\n","filename":"src\/processWorkflow.md","additions":2,"deletions":13,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-% Producing a Changeset\n+% Page moved\n@@ -3,402 +3,1 @@\n-::: {.NavBit}\n-[« Previous](jckAcquisition.html) • [TOC](index.html) • [Next »](next.html)\n-:::\n-\n-This section is confined to the actual Mercurial mechanics required to produce\n-a changeset:\n-\n-* [Setting a JDK User Name](#setting-a-jdk-user-name) reminds\n-the user to confirm proper configuration.\n-* [Creating](#creating) includes instructions for the\n-required format of a changeset comment and describes how to commit files to a\n-changeset.\n-* [Merging](#merging) describes how to pull changes\n-from a parent forest or clone and incorporate the changes into the current\n-working set of files.\n-* [Pushing](#pushing) covers configuring ssh, setting\n-the `default-push` path, and pushing changesets.\n-\n-## Setting a JDK User Name\n-\n-Ensure that _ui.username_ has a value in the\n-`~\/.hgrc` file as described in\n-[Verifying the Configuration](repositories.html#verify).\n-\n-## Creating\n-\n-The timing for creating a changeset is important. Creating the changeset long\n-before it gets pushed into the parent repository may require complex merges. If\n-a changeset is created before sufficient review or testing, a rollback may be\n-required and a new changeset may be required to correct previous mistakes. The\n-[mq extension](http:\/\/hgbook.red-bean.com\/hgbookch12.html#x16-26500012) is\n-recommended for managing changes before they become\n-committed to a changeset.\n-\n-In the examples below, the script\n-`common\/bin\/hgforest.sh` can be used to apply the\n-Mercurial command to all the repositories in the forest. So when you see\n-_**`hg`**_, if you are dealing with one repository, just use\n-\"`hg`\", if it's a forest, use \"`sh common\/bin\/hgforest.sh`\".\n-\n-\n-Each repository in the forest is managed independently. After editing files in\n-the individual cloned repositories of the forest, the `hg\n-status` command may be used to see the changes in a single\n-repository.\n-\n-    $ hg root\n-    \/u\/iris\/sandbox\/box\n-    $ hg status\n-    ? duke\/images\/DukeTubbingSmall.png\n-    $ hg add duke\/images\/DukeTubbingSmall.png\n-    $ hg status\n-    A duke\/images\/DukeTubbingSmall.png\n-\n-To see changes made to the repositories use _**`hg`**_ `status`:\n-\n-    $ hg status\n-    [.]\n-    A duke\/images\/DukeTubbingSmall.png\n-\n-In this example, the repository was previously cloned as described in\n-[Cloning a Sandbox Repository](repositories.html#cloneSandbox). A new file\n-`DukeTubbingSmall.png` was added to a new subdirectory.\n-\n-#### Formatting a Changeset Comment\n-\n-A single change is described by a block of text of the following form:\n-\n-    <bugid>: <synopsis-of-symptom>\n-    Summary: <summary-of-code-change>\n-    Reviewed-by: <reviewer>+\n-    Contributed-by: <contributor-email>\n-\n-There may be more than one _bugid_ line, but there\n-must be at least one.\n-\n-The _summary_ line is optional, but authors are\n-strongly encouraged to include one if the nature of the change is not obvious\n-from the synopsis. It's just one line, meant to give the reader a clue as to\n-how the code changed. A more complete description of the change belongs in the\n-bug report.\n-\n-A _reviewed-by_ line is required. Reviewers must have\n-the ability to deal with any adverse consequences of the change, and so must\n-themselves be authors. They are therefore identified by their OpenJDK usernames\n-rather than full e-mail addresses.\n-\n-The _contributed-by_ line is optional. If present, it\n-is a list of comma-separated email addresses. It should be included only when\n-the author or authors of the change do not have commit rights to the target\n-repository and thus would not otherwise receive acknowledgment.\n-\n-There will be exceptions for merge changesets, tag changesets, etc.\n-\n-Example:\n-\n-    1234567: NPE thrown on FileInputStream(\"\")\n-    Summary: Rewrite precondition-checking code in io.c\n-    Reviewed-by: mr\n-    Contributed-by: Ben Bitdiddle <ben at bits.org>\n-\n-If a changeset contains multiple unrelated changes (this is frowned upon, but\n-may happen from time to time) then its comment will contain multiple blocks of\n-the above form, separated by blank lines.\n-\n-The required format of the comments will be enforced whenever the changeset is\n-pushed into the JDK master or team repository forests. Other Projects may copy\n-these conventions, adopt some other conventions, or have no conventions,\n-depending upon their goals.\n-\n-#### Committing a Changeset\n-\n-The following commands commit all of the changes in a repository to a\n-changeset.\n-\n-    $ cat ..\/message\n-    1111111: Missing Duke gif\n-    Summary:  Add missing file\n-    Reviewed-by: iag\n-    $ hg commit -l ..\/message\n-    $ hg toutgoing\n-    [.]\n-    comparing with http:\/\/hg.openjdk.java.net\/sandbox\/box\n-    searching for changes\n-    changeset:   23:fb12953f3a35\n-    tag:         tip\n-    user:        iris\n-    date:        Wed Dec 12 21:05:59 2007 -0800\n-    summary:     1111111: Missing Duke gif\n-\n-## Merging\n-\n-It is often necessary to merge local changes with those made in the parent\n-repositories. The first step in a merge process is to retrieve (or pull) the\n-collection of changesets which have been pushed since the last merge or initial\n-clone. If there if there are merge conflicts, then they must be resolved.\n-[Chapter 3](http:\/\/hgbook.red-bean.com\/hgbookch3.html#x7-530003) of\n-the Mercurial book contains detailed information on the\n-merging process.\n-\n-There are two basic ways to update the working set files in the repositories:\n-\n-Option 1: _**`hg`**_ `pull`\n-\n-> One way to merge the parent repository with the working set of files is to use\n-> _**`hg`**_ `pull` all by itself. This option allows merging off-line or at a\n-> later time.\n->\n->     $ hg pull\n->     [.]\n->     pulling from http:\/\/hg.openjdk.java.net\/sandbox\/box\n->     searching for changes\n->     no changes found\n->\n-> In Mercurial, pulling changesets will not update or merge into the working set\n-> of files. To update the clone, run _**`hg`**_ `update`. If the update\n-> reports conflicts, run _**`hg`**_ `merge` to resolve them.\n-\n-Option 2: _**`hg`**_ `fetch`\n-\n-> Alternatively, use _**`hg`**_ `fetch` to pull the changes, update the\n-> working set files, and create simple merge changesets as necessary. The\n-> fetch extension is distributed with Mercurial but needs to be enabled. Edit\n-> the `.hgrc` to include the following entries:\n->\n->     [extensions]\n->     fetch=\n->\n-> Once the fetch extension has been enabled, _**`hg`**_ `fetch` may be invoked as follows:\n->\n->     $ hg fetch\n->     [.]\n->     pulling from http:\/\/hg.openjdk.java.net\/sandbox\/box\n->     searching for changes\n->     no changes found\n-\n-> ---\n-> Actual file merging will be done with the selected Mercurial merging tool see\n-> [MergeProgram](https:\/\/www.selenic.com\/mercurial\/wiki\/index.cgi\/MergeProgram)\n-> for the details on how to define the selected merge tool in ` ~\/.hgrc`.\n-\n-> ---\n-\n-## Pushing\n-\n-In order to push changesets into the parent repository, some additional\n-configuration is required. The following sections describe the operations that\n-will be performed by users with push access.\n-\n-#### Generating an SSH Key\n-\n-All pushes require an ssh key which must be installed on the Mercurial server.\n-The `ssh-keygen` command generates an ssh key. The\n-`-b` option overrides the default number of bits\n-for the key. Allow a few minutes to generate a 4096 bit key; a key of at least\n-2048 bits is recommended. While it is possible to use ssh without a passphrase,\n-this is **strongly** discouraged. Empty or\n-insecure passphrases may be reset using `ssh-keygen\n--p`; this does not change the keys.\n-\n-    $ ssh-keygen -t rsa -b 4096\n-    Enter file in which to save the key(\/u\/iris\/.ssh\/id_rsa):\n-    Generating public\/private rsa key pair.\n-    Enter passphrase(empty for no passphrase):\n-    Enter same passphrase again:\n-    Your identification has been saved in \/u\/iris\/.ssh\/id_rsa.\n-    Your public key has been saved in \/u\/iris\/.ssh\/id_rsa.pub.\n-    The key fingerprint is:\n-    md5 4096 c2:b7:00:e6:4b:da:ea:ec:32:30:f5:bd:12:26:04:83 iris@duke\n-    The key's randomart image is:\n-    +--[ RSA 4096]----+\n-    |    E.=          |\n-    |     . *         |\n-    |      o .   .    |\n-    |         + o     |\n-    |        S + .    |\n-    |       .   + .   |\n-    |        + + +..  |\n-    |       * . oo+.  |\n-    |      o . .o..   |\n-    +-----------------+\n-\n-The `~\/.ssh\/id_rsa.pub` is a text file\n-containing the public ssh key. This file should be mailed as an attachment\n-along with the JDK username to\n-[keys(at)openjdk.java.net](mailto:keys-at-openjdk.java.net).\n-An administrator will install your key on the server and notify you on\n-completion. This process may take a couple of days.\n-\n-> ---\n-> Users behind a SOCKS firewall can add a directive to the\n-> `~\/.ssh\/config` file to connect to the OpenJDK\n-> Mercurial server:\n-> \n->     Host *.openjdk.java.net\n->     ProxyCommand \/usr\/lib\/ssh\/ssh-socks5-proxy-connect -h [socks_proxy_address] %h %p\n->\n-> See the `ssh-socks5-proxy-connect` man page and\n-> `ssh-config` man page for more information. Other\n-> systems may require proxy access via other programs. Some Linux distributions\n-> provide the `corkscrew` package which provides ssh\n-> access through HTTP proxies.\n-> \n-> **It is recommended that all users check with their network\n-> administrators before installing any kind of TCP forwarding tool on their\n-> network. Many corporations and institutions have strict security policies in\n-> this area.**\n-\n-> ---\n-\n-#### SSH Shortcuts\n-\n-The following section provides some tips for improving the usability of\n-ssh-related operations.\n-\n-* _Using SSH in multiple shells_\n-\n-  To avoid having to constantly type in the passphrase, use the ssh-agent on your\n-  local client to cache your pashphrase:\n-\n-      $ eval `ssh-agent`\n-      Agent pid 17450\n-      $ ssh-add\n-      Enter passphrase for \/u\/iris\/.ssh\/id_rsa:\n-      Identity added: \/u\/iris\/.ssh\/id_rsa(\/u\/iris\/.ssh\/id_rsa)\n-\n-  The same ssh-agent process can be shared with multiple shells. There are\n-  various ways to do this. Bash users can accomplish this with the following code\n-  in `.bashrc`:\n-\n-      if [ \"$PS1\" -a -d $HOME\/.ssh ]; then\n-        if [ \"x$SSH_AUTH_SOCK\" = x ]; then\n-          eval `ssh-agent | grep -v 'echo Agent pid'`\n-          ssh-add\n-          trap \"echo Killing SSH agent $SSH_AGENT_PID; kill $SSH_AGENT_PID\" 0\n-        fi\n-      fi\n-\n-  For secure operation, only start an ssh-agent when needed and kill it off when\n-  the shell completes. Test this by running `ssh 'hostname' echo\n-  hello` multiple times.\n-\n-* _Logging in without a password_\n-\n-  To avoid needing to constantly type in the password, add the public key to the\n-  list of ssh authorized keys.\n-\n-      $ cat ~\/.ssh\/id_rsa.pub >> ~\/.ssh\/authorized_keys\n-      $ chmod 600 ~\/.ssh\/authorized_keys\n-\n-#### Setting the `default-push` Path to the Server Repositories\n-\n-<!-- \n-#. Option 1: Add default-push path to every <code>.hg\/hgrc<\/code>\n--->\n-\n-This is the typical development model:\n-\n-:::{style=\"text-align:center;\"}\n-![Diagram of server repos and user's clone](devModel.gif)\n-:::\n-\n-Changesets need to be _pushed_ via ssh to the\n-read\/write repository which resides on the OpenJDK Mercurial server. The\n-easiest way to do this is to have each repository define the \"default-push\"\n-path in every repository's `.hg\/hgrc` file. The\n-`.hg\/hgrc` file in is not a managed file - it is\n-private to the repository. The following example defines the \"default\" and\n-\"default-push\" paths for clones of the jdk9\/dev team repository.\n-\n-    [paths]\n-    default = http:\/\/hg.openjdk.java.net\/jdk9\/dev\n-    default-push = ssh:\/\/<JDK_username>@hg.openjdk.java.net\/jdk9\/dev\n-\n-Given a `JDK_username` this simple script will\n-attempt to do this for all the repositories:\n-\n-    #!\/bin\/sh\n-    username=$1\n-    hgdirs=\"`find . -type d -name .hg`\"\n-    for i in ${hgdirs}; do\n-      d=\"`dirname ${i}`\"\n-      defpush=\"`(cd ${d} && hg paths default-push 2> \/dev\/null)`\"\n-      if [ \"${defpush}\" = \"\" ] ; then\n-        defpath=\"`(cd ${d} && hg paths default 2> \/dev\/null)`\"\n-        if [ \"${defpath}\" != \"\" ] ; then\n-          defpush=\"`echo ${defpath} | sed -e 's@http:\/\/\\([^\/]*\/[^\/]*\/[^\/]*\\)\/\\(.*\\)@ssh:\/\/$username\\@\\1\/\\2@'`\"\n-          cp ${i}\/hgrc ${i}\/hgrc.orig\n-          echo \"default-push = ${defpush}\" >> ${i}\/hgrc\n-          echo \"Added default-push: ${defpush}\"\n-        fi\n-      fi\n-    done\n-    for i in ${hgdirs}; do\n-      d=\"`dirname ${i}`\"\n-      echo \"(cd ${d} && hg paths)\"\n-      (cd ${d} && hg paths)\n-    done\n-    exit 0\n-\n-<!--\n-#. Option 2: Use the <code>defpath<\/code> ExtensionAnother way to setup the default-push path is to use the Mercurial defpath\n-    extension, which is available in \/java\/jdk\/lib\/hgext\/defpath.py. To enable\n-    this extension add the following to the <code>~\/hgrc<\/code> file:\n-<blockquote><pre>\n-[extensions]\n-defpath = \/java\/jdk\/lib\/hgext\/defpath.py  # Or the pathname of a local copy\n-<\/pre><\/blockquote>\n-     The defpath extension actually adds two new Mercurial subcommands:\n-    defpath to operate upon a single repository and fdefpath for an entire\n-    forest. hg help defpath or hg help fdefpath will tell you more. For a\n-    freshly cloned open\/closed forest the command you probably want is\n-<blockquote><pre>\n-$ hg fdefpath -dgv\n-<\/pre><\/blockquote>\n-     Be sure to try this with the -n flag first to see if it will do what\n-    you actually expect. If your OpenJDK username differs from your Oracle\n-    username then add -u name to the command line.\n-     The defpath extension defines the default-push path, which is the path\n-    that Mercurial uses by default in push operations.\n--->\n-\n-#### Pushing a Changeset\n-\n-[Committers](https:\/\/openjdk.java.net\/bylaws#committer)\n-can use the _**hg**_ `push` command to propagate changesets into the repositories.\n-\n-Most developers will only find a need to create changesets in one or two\n-repositories. However, it is important that before any changesets are pushed,\n-the corresponding forest pull and merge with the destination forest be\n-performed; otherwise there is a risk of breaking the build.\n-\n-    $ hg push\n-\n-After the push has been accepted, an automatic e-mail notification will be sent\n-to the [mailing list](https:\/\/mail.openjdk.java.net) associated with the\n-repository. In most cases notifications\n-are sent to the Project's _-dev_ mailing list. Some\n-Projects with high traffic _-dev_ mailing lists use a\n-dedicated _-changes_ list for notifications.\n-\n-> ---\n-> Who has push access?\n->\n-> All of a Project's [Committers](https:\/\/openjdk.java.net\/bylaws#committer)\n-> can push to all of the the Project's repositories.\n->\n-> Some Projects may chose to restrict the set of Committers with push to key\n-> repositories. For instance, JDK Release Projects restrict push access to MASTER\n-> repositories to Committers who are either integrators or members of the Release\n-> Engineering Team.\n->\n-> Refer to the\n-> [Nominating a Contributor or Author to be a Committer](..\/projects\/index.html#project-committer)\n-> section of the [Project](..\/projects\/index.html) page for\n-> information about becoming a Project Committer.\n-\n-> ---\n-\n-::: {.NavBit}\n-[« Previous](jckAcquisition.html) • [TOC](index.html) • [Next »](next.html)\n-:::\n+The OpenJDK Developers' Guide has been merged into a single document. Please update your links to point to the new location: [OpenJDK Developers' Guide](index.html)\n","filename":"src\/producingChangeset.md","additions":2,"deletions":403,"binary":false,"changes":405,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-% Repositories\n+% Page moved\n@@ -3,260 +3,1 @@\n-::: {.NavBit}\n-[« Previous](processWorkflow.html) • [TOC](index.html) • [Next »](mailingLists.html)\n-:::\n-\n-This section describes the OpenJDK repository terminology and naming scheme. It\n-also includes minimal instructions to acquire source from the OpenJDK\n-repository,\n-[`https:\/\/hg.openjdk.java.net\/`](https:\/\/hg.openjdk.java.net\/).\n-\n-> ---\n-> Note that source may be available from other locations, for example\n-> `src.zip` from a full JDK distribution. However,\n-> OpenJDK contributions must use source from the\n-> [OpenJDK Mercurial repository](https:\/\/hg.openjdk.java.net\/)\n-> since other source distributions may contain older code\n-> or code which differs due to licensing.\n-\n-> ---\n-\n-Operations which are performed repeatedly, such as creating changesets,\n-merging, and pushing are described in [Producing a Changeset](producingChangeset.html).\n-\n-* [Terminology and Naming Scheme](#terminology-and-naming-scheme) defines the\n-nomenclature used by OpenJDK.\n-* [Installing and Configuring Mercurial](#installing-and-configuring) enumerates the required software, provides links for\n-download, and describes basic installation and configuration.\n-* [Cloning](#clone) covers the procedure for\n-obtaining private copies of source repositories.\n-\n-This document assumes familiarity with the first two chapters of the free\n-on-line book [Mercurial: The Definitive Guide](http:\/\/hgbook.red-bean.com).\n-\n-## Terminology and Naming Scheme\n-\n-The OpenJDK code base for all\n-[Projects](https:\/\/openjdk.java.net\/bylaws#_6) is\n-stored in Mercurial repositories which contain the source files and their\n-change history. Some Projects may choose to organize their code into multiple,\n-possibly related, Mercurial repositories. For instance,\n-[JDK 9](https:\/\/openjdk.java.net\/projects\/jdk9)\n-uses a forest of multiple related repositories which contain components of the\n-entire JDK. Projects which are based on the JDK, such as\n-[IcedTea](https:\/\/openjdk.java.net\/projects\/icedtea)\n-and\n-[Jigsaw](https:\/\/openjdk.java.net\/projects\/jigsaw)\n-also use this model. In contrast,\n-[Code Tools](https:\/\/openjdk.java.net\/projects\/code-tools) uses an unrelated repository for each tool and\n-[Graal](https:\/\/openjdk.java.net\/projects\/graal)\n-uses only a single repository. Regardless of how a Project has chosen to store\n-their code, each\n-[Contributor](https:\/\/openjdk.java.net\/bylaws#contributor)\n-clones the repository associated with the code they are modifying.\n-\n-> ---\n-> Consult the Project's documentation or\n-> [mailing list](https:\/\/mail.openjdk.java.net) to\n-> determine the appropriate repository, development conventions, and helpful\n-> tools.\n-\n-> ---\n-\n-This is the typical development model:\n-\n-::: {style=\"text-align:center;\"}\n-![Diagram of server repos and user's clone](devModel.gif)\n-:::\n-\n-A Contributor creates a _clone_ (a local copy called\n-\"9dev\") of a read\/write repository (\"jdk9\/dev\") which resides on the OpenJDK\n-Mercurial server. They work on their change in the clone and locally\n-_commit_ a changeset. After the new changeset(s) are\n-verified, they're either _pushed_ directly from the\n-clone or _exported_ and delivered to a\n-[Committer](https:\/\/openjdk.java.net\/bylaws#committer)\n-who can perform the push into the server repository for all to see.\n-\n-> ---\n-> The use of _gate repositories_ was eliminated when the\n-> Mercurial servers were upgraded in March 2014.\n-\n-> ---\n-\n-The repositories use the following naming scheme:\n-\n-> `<project>\/<component_path>`\n-\n-where\n-\n-> ------------------  ----  ----------------------------------------------------\n-> _project_            ::   the short name of an OpenJDK [Project](https:\/\/openjdk.java.net\/bylaws#_6) such as \"jdk9\", \"openjfx\", or \"sumatra\"\n-> _component_path_     ::   the path to a repository containing the code base as designated by the [Project Lead](https:\/\/openjdk.java.net\/bylaws#project-lead).\n-> ------------------  ----  ----------------------------------------------------\n-\n-## Installing and Configuring Mercurial\n-\n-Mercurial is a free, cross-platform, distributed source management tool. Source\n-bundles and binary packages for Mercurial are available at\n-[https:\/\/www.selenic.com\/mercurial\/wiki\/index.cgi](https:\/\/www.selenic.com\/mercurial\/wiki\/index.cgi\/Mercurial).\n-The OpenJDK repositories recommend installation of Mercurial 2.6.3 (or later).\n-A Mercurial installation is sufficient to clone a repository. Contributors who\n-wish to submit changes will need some additional configuration as described\n-below.\n-\n-Some Projects may recommend additional tools or scripts that help with\n-repository manipulation and code development. For instance, in JDK 9, the\n-utility script `common\/bin\/hgforest.sh` may be\n-used to apply commands to all the repositories in the\n-[forest](glossary.html#forest). Popular extensions for OpenJDK developers include\n-[jcheck](https:\/\/openjdk.java.net\/projects\/code-tools\/jcheck\/),\n-[trees](https:\/\/openjdk.java.net\/projects\/code-tools\/trees\/), and\n-[Mercurial Queues](http:\/\/hgbook.red-bean.com\/read\/managing-change-with-mercurial-queues.html)\n-(mq). Note that `trees` is enabled on the OpenJDK Mercurial server.\n-\n-Create and edit the `~\/.hgrc` file to minimally contain the following entry:\n-\n-    [ui]\n-    username = <openjdk_username>\n-\n-_openjdk\\_username_ is a plain lowercase, alphanumeric\n-token (not an e-mail address) with twelve characters or less. The first\n-character should be alphabetic. This username will be publicly visible in all\n-Mercurial changeset logs. It will be used to verify that the changeset author\n-is at least an\n-[Author](https:\/\/openjdk.java.net\/bylaws#author)\n-for the Project and that the person pushing the changeset is at least a\n-[Committer](https:\/\/openjdk.java.net\/bylaws#committer).\n-It is recommended that the _openjdk\\_username_ be\n-somehow related to the Author's full name, such as the first character of the\n-Author's first name followed by the Author's last name. Refer to the\n-[Becoming an Author](..\/projects\/index.html#project-author) section of the\n-[Project](..\/projects\/index.html) page for\n-additional information.\n-\n-An alphabetical list of all of the assigned\n-_openjdk\\_usernames_ may be found on the\n-[OpenJDK people](https:\/\/db.openjdk.java.net\/people) list. The\n-[Census](..\/census) shows the structure of the OpenJDK Community.\n-\n-#### Verifying the Configuration\n-\n-After installing and configuring Mercurial, validate the configuration using\n-the following steps.\n-\n-#. Verify that Mercurial is version 2.6.3 (or newer).\n-\n-       $ hg version\n-       Mercurial Distributed SCM (version 2.9)\n-       (see http:\/\/mercurial.selenic.com for more information)\n-   \n-       Copyright (C) 2005-2014 Matt Mackall and others\n-       This is free software; see the source for copying conditions. There is NO\n-       warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n-\n-#. Verify that the list of enabled extensions includes fetch and mq.\n-\n-       $ hg help\n-   [full output](hgHelp.html)\n-\n-#. Verify that the `~\/.hgrc` configuration looks correct. Minimally it should contain the following entries:\n-\n-       $ hg showconfig\n-       ui.username=iris\n-\n-At this point, it should be possible to start retrieving source from the\n-repositories.\n-\n-## Cloning\n-\n-With Mercurial each developer works with a clone of the repository which is a\n-snapshot of the files at the time the clone was taken. To update the clone, see\n-[Producing a Changeset](producingChangeset.html).\n-\n-#### ... a Sandbox Repository {#cloneSandbox}\n-\n-In addition to the Project repositories, there are some test repositories that\n-may be used to run test commands against Mercurial without fear of causing\n-damage to development source. Use them freely but with discretion; content in\n-them may be deleted at any time.\n-\n-    $ mkdir sandbox; cd sandbox\n-    $ hg clone http:\/\/hg.openjdk.java.net\/sandbox\/box\n-    destination directory: box\n-    requesting all changes\n-    adding changesets\n-    adding manifests\n-    adding file changes\n-    added 23 changesets with 24 changes to 5 files\n-    4 files updated, 0 files merged, 0 files removed, 0 files unresolved\n-    $ du -s box\n-    46      box\n-\n-#### ... a Forest {#cloneForest}\n-\n-If a Project uses a forest, It is strongly recommended for developers to clone\n-an entire forest, rather than a single repository. This is the only means to\n-ensure consistency in builds. The following examples illustrate two\n-alternatives for cloning the entire _jdk9\/dev_ forest\n-into the directory `9dev`.\n-\n-#. To clone the forest using the\n-[trees](https:\/\/openjdk.java.net\/projects\/code-tools\/trees\/)\n-extension just use `tclone`:\n-\n-       $ hg tclone http:\/\/hg.openjdk.java.net\/jdk9\/dev 9dev\n-   [full output](tClone.html)\n-\n-#. To clone the forest using `get_source.sh`, first\n-clone the main tree:\n-\n-       $ hg clone http:\/\/hg.openjdk.java.net\/jdk9\/dev 9dev\n-       requesting all changes\n-       adding changesets\n-       adding manifests\n-       adding file changes\n-       added 997 changesets with 1477 changes to 138 files\n-       updating to branch default\n-       82 files updated, 0 files merged, 0 files removed, 0 files unresolved\n-\n-   Then clone the repositories in the forest:\n-\n-       $ cd 9dev\n-       $ sh .\/get_source.sh\n-   [full output](getSource.html)\n-\n-Regardless of how the forest was cloned, this is the resulting populated\n-forest.\n-\n-    $ du -s\n-    934532  .\n-    $ ls\n-    ASSEMBLY_EXCEPTION  hotspot    LICENSE   README-builds.html\n-    common              jaxp       make      test\n-    configure           jaxws      Makefile  THIRD_PARTY_README\n-    corba               jdk        nashorn\n-    get_source.sh       langtools  README\n-\n-#### ... a Single Repository {#cloneSingle}\n-\n-If the source for the Project is contained within a single repository or\n-reading a limited portion of the source is the only goal, it is possible to\n-clone a single repository (even if it's part of a forest). For instance, this\n-example shows how to clone the `langtools`\n-repository from _jdk9\/dev_ into the default\n-destination directory.\n-\n-    $ hg clone http:\/\/hg.openjdk.java.net\/jdk9\/dev\/langtools\n-    destination directory: langtools\n-    requesting all changes\n-    adding changesets\n-    adding manifests\n-    adding file changes\n-    added 2289 changesets with 21194 changes to 7004 files\n-    updating to branch default\n-    6212 files updated, 0 files merged, 0 files removed, 0 files unresolved\n-    $ du -s langtools\n-    84396   langtools\n-\n-::: {.NavBit}\n-[« Previous](processWorkflow.html) • [TOC](index.html) • [Next »](mailingLists.html)\n-:::\n+The OpenJDK Developers' Guide has been merged into a single document. Please update your links to point to the new location: [OpenJDK Developers' Guide](index.html)\n","filename":"src\/repositories.md","additions":2,"deletions":261,"binary":false,"changes":263,"status":"modified"},{"patch":"@@ -1,91 +0,0 @@\n-%`tclone` Output\n-\n-::: {.NavBit}\n-[« Previous](repositories.html#cloneForest) • [TOC](index.html) • [Next »](repositories.html#cloneSingle)\n-:::\n-\n-    $ hg tclone http:\/\/hg.openjdk.java.net\/jdk9\/dev 9dev\n-    $ hg tclone http:\/\/hg.openjdk.java.net\/jdk9\/dev 9dev\n-    cloning http:\/\/hg.openjdk.java.net\/jdk9\/dev\n-    requesting all changes\n-    adding changesets\n-    adding manifests\n-    adding file changes\n-    added 997 changesets with 1477 changes to 138 files\n-    updating to branch default\n-    82 files updated, 0 files merged, 0 files removed, 0 files unresolved\n-    created \/home\/iris\/9dev\n-\n-    cloning http:\/\/hg.openjdk.java.net\/jdk9\/dev\/corba\n-    requesting all changes\n-    adding changesets\n-    adding manifests\n-    adding file changes\n-    added 567 changesets with 3577 changes to 1398 files\n-    updating to branch default\n-    1195 files updated, 0 files merged, 0 files removed, 0 files unresolved\n-    created \/home\/iris\/9dev\/corba\n-\n-    cloning http:\/\/hg.openjdk.java.net\/jdk9\/dev\/hotspot\n-    requesting all changes\n-    adding changesets\n-    adding manifests\n-    adding file changes\n-    added 6126 changesets with 36489 changes to 5247 files\n-    updating to branch default\n-    4357 files updated, 0 files merged, 0 files removed, 0 files unresolved\n-    created \/home\/iris\/9dev\/hotspot\n-\n-    cloning http:\/\/hg.openjdk.java.net\/jdk9\/dev\/jaxp\n-    requesting all changes\n-    adding changesets\n-    adding manifests\n-    adding file changes\n-    added 570 changesets with 6285 changes to 4230 files\n-    updating to branch default\n-    2078 files updated, 0 files merged, 0 files removed, 0 files unresolved\n-    created \/home\/iris\/9dev\/jaxp\n-\n-    cloning http:\/\/hg.openjdk.java.net\/jdk9\/dev\/jaxws\n-    requesting all changes\n-    adding changesets\n-    adding manifests\n-    adding file changes\n-    added 471 changesets with 15683 changes to 6727 files\n-    updating to branch default\n-    3710 files updated, 0 files merged, 0 files removed, 0 files unresolved\n-    created \/home\/iris\/9dev\/jaxws\n-\n-    cloning http:\/\/hg.openjdk.java.net\/jdk9\/dev\/jdk\n-    requesting all changes\n-    adding changesets\n-    adding manifests\n-    adding file changes\n-    added 9507 changesets with 91840 changes to 26823 files\n-    updating to branch default\n-    22251 files updated, 0 files merged, 0 files removed, 0 files unresolved\n-    created \/home\/iris\/9dev\/jdk\n-\n-    cloning http:\/\/hg.openjdk.java.net\/jdk9\/dev\/langtools\n-    requesting all changes\n-    adding changesets\n-    adding manifests\n-    adding file changes\n-    added 2326 changesets with 21344 changes to 7022 files\n-    updating to branch default\n-    6196 files updated, 0 files merged, 0 files removed, 0 files unresolved\n-    created \/home\/iris\/9dev\/langtools\n-\n-    cloning http:\/\/hg.openjdk.java.net\/jdk9\/dev\/nashorn\n-    requesting all changes\n-    adding changesets\n-    adding manifests\n-    adding file changes\n-    added 766 changesets with 6302 changes to 2248 files\n-    updating to branch default\n-    2121 files updated, 0 files merged, 0 files removed, 0 files unresolved\n-    created \/home\/iris\/9dev\/nashorn\n-\n-::: {.NavBit}\n-[« Previous](repositories.html#cloneForest) • [TOC](index.html) • [Next »](repositories.html#cloneSingle)\n-:::\n","filename":"src\/tClone.md","additions":0,"deletions":91,"binary":false,"changes":91,"status":"deleted"}]}