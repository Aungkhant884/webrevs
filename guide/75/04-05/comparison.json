{"files":[{"patch":"@@ -51,0 +51,13 @@\n+\/* JBS field names *\/\n+.jbs {\n+    font-weight: bold;\n+    color: #333;\n+}\n+\n+\/* JBS labels *\/\n+.label {\n+    font-family: monospace;\n+    font-weight: bold;\n+    color: #060\n+}\n+\n","filename":"src\/guidestyle.css","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -1468,1 +1468,1 @@\n-Disadvantages of this model are that the list of backports in JBS will still list the old (failed) backport as the 15.0.2 backport, and the new backport will not be linked to using a _backported by_ link. It is assumed that the advantages above outweigths the disadvantages and that the capital letter prefixes for the backout and the redo will be visible enough in JBS to alert that something fishy is going on.\n+Disadvantages of this model are that the list of backports in JBS will still list the old (failed) backport as the 15.0.2 backport, and the new backport will not be linked to using a _backported by_ link. It is assumed that the advantages above outweighs the disadvantages and that the capital letter prefixes for the backout and the redo will be visible enough in JBS to alert that something fishy is going on.\n@@ -1520,1 +1520,1 @@\n-In order to be allowed to push a change to one of the OpenJDK update development repositories (e.g. [`jdk17u-dev`](https:\/\/github.com\/openjdk\/jdk17u-dev)), an approval is required. The [official process for how to request push approval for a backport](https:\/\/openjdk.java.net\/projects\/jdk-updates\/approval.html) describes in detail how to work with JBS when requesting approvals. In short, there's a label `jdk<release>u-fix-request` that should be added to the main JBS issue. Also put a motivation as to why the issue needs to be backported as a comment in the main issue. Once the label and motivation has been added, wait for the maintainers of the release to approve your request. The approval will be indicated with a label, `jdk<release>u-fix-yes`, added to the main issue.\n+In order to be allowed to push a change to one of the OpenJDK update development repositories (e.g. [`jdk17u-dev`](https:\/\/github.com\/openjdk\/jdk17u-dev)), an approval is required. The [official process for how to request push approval for a backport](https:\/\/openjdk.java.net\/projects\/jdk-updates\/approval.html) describes in detail how to work with JBS when requesting approvals. In short, there's a label [jdk<release>u-fix-request]{.label} that should be added to the main JBS issue. Also put a motivation as to why the issue needs to be backported as a comment in the main issue. Once the label and motivation has been added, wait for the maintainers of the release to approve your request. The approval will be indicated with a label, [jdk<release>u-fix-yes]{.label}, added to the main issue.\n@@ -1522,1 +1522,1 @@\n-If the update release is in rampdown, changes are pushed to the release repository (e.g. [`jdk17u`](https:\/\/github.com\/openjdk\/jdk17u)). During rampdown the bar to get changes in are significantly higher and fixes need to be approved with `jdk<release>u-critical-request` \/ `jdk<release>u-critical-yes`.\n+If the update release is in rampdown, changes are pushed to the release repository (e.g. [`jdk17u`](https:\/\/github.com\/openjdk\/jdk17u)). During rampdown the bar to get changes in are significantly higher and fixes need to be approved with [jdk<release>u-critical-request]{.label} \/ [jdk<release>u-critical-yes]{.label}.\n@@ -1526,1 +1526,1 @@\n-The Skara tooling includes support for backports. [The official Skara documentation](https:\/\/wiki.openjdk.java.net\/display\/SKARA\/Backports) describes in detail how to work with the tooling to create backport PRs on GitHub or using the CLI tools. As described in the documentation, the [`\/backport`](https:\/\/wiki.openjdk.java.net\/display\/SKARA\/Commit+Commands#CommitCommands-\/backport) command can be used on a commit (not a PR!) to create the backport PR. If a backport PR is manually created, set the PR title to `Backport <original commit hash>`. This ensures that the bots will recognize it as a backport as opposed to a main fix specifically targeting an older release. One can tell whether or not the bots recognized a PR as a backport by the `backport` label being added if it's recognized.\n+The Skara tooling includes support for backports. [The official Skara documentation](https:\/\/wiki.openjdk.java.net\/display\/SKARA\/Backports) describes in detail how to work with the tooling to create backport PRs on GitHub or using the CLI tools. As described in the documentation, the [`\/backport`](https:\/\/wiki.openjdk.java.net\/display\/SKARA\/Commit+Commands#CommitCommands-\/backport) command can be used on a commit (not a PR!) to create the backport PR. If a backport PR is manually created, set the PR title to `Backport <original commit hash>`. This ensures that the bots will recognize it as a backport as opposed to a main fix specifically targeting an older release. One can tell whether or not the bots recognized a PR as a backport by the [backport]{.label} label being added if it's recognized.\n@@ -1539,0 +1539,2 @@\n+* [CommonMark Spec](https:\/\/spec.commonmark.org\/current\/)\n+* [dingus](https:\/\/spec.commonmark.org\/dingus\/)\n@@ -1541,1 +1543,1 @@\n-Release notes for a product (e.g. the JDK) are part of the release deliverables. They describe changes that are important for a user of the product to know. These are usually things that may affect the user's decision to upgrade to the specific version.\n+Release notes for a product (e.g. the JDK) are part of the release deliverables. They provide a way to highlight information about a fix, such as when it may have changed behavior, or when it's decided not to fix something. While what should go into a release note isn't something that can be precisely defined, it should describe changes that are important for a user of the product to know about. These are usually things that may affect the user's decision to upgrade to the specific version. In general, the release notes should not duplicate information in other documents but can serve to highlight that a change has been made.\n@@ -1543,1 +1545,1 @@\n-When writing a release note for your feature, be prepared for rather picky review comments about grammar, typos, and wording. This is for the sake of the Java community as a whole, as the language of the release note sets the tone for many blogs and news articles. For a widely used product like the JDK, the release notes are often copied verbatim (including typos) and published to highlight news in the release. This means that we need to take extra care to make sure the text in the release note is correct and has a professional language.\n+Release notes are associated with a JBS issue that has been fixed (or in some cases not been fixed) in a release. In the past these notes have been added as comments to the issue and collected at the end of a release into the official release notes. In order to allow the release notes to be generated during the course of the release (for each build) the model is now that the content of a release note is provided in a sub-task linked with the appropriate JBS issue. In OpenJDK, release notes are currently being generated for the JDK and JDK Updates projects.\n@@ -1545,1 +1547,1 @@\n-The release note itself is written in a JBS sub-task to the issue that is used to push the change. There are a few steps to follow for the release note to find its way from JBS to the actual release note document.\n+## Writing a release note\n@@ -1547,3 +1549,7 @@\n-#. Do these steps for the main issue, that is, the JBS issue that is used to push the original change, **not** on backports or the CSR (if there is one).\n-   * Add the label `release-note=yes`.\n-   * Create a sub-task.\n+Writing the release note is the responsibility of the engineer who owns the issue. The note should be generated before the fix is reviewed, or when it's determined that a fix won't be addressed in the release it was found - in the case of known issues.\n+\n+When writing a release note, be prepared for rather picky review comments about grammar, typos, and wording. This is for the sake of the Java community as a whole, as the language of the release note sets the tone for many blogs and news articles. For a widely used product like the JDK, the release notes are often copied verbatim (including typos) and published to highlight news in the release. This means that we need to take extra care to make sure the text in the release note is correct and has a professional language.\n+\n+The release note itself is written in a [JBS](#jbs---jdk-bug-system) sub-task to the issue that is used to push the change. There are a few steps to follow for the release note to find its way from JBS to the actual release note document.\n+\n+#. Create a sub-task (More &rightarrow; Create Sub-Task) for the issue that requires a release note - the main issue, that is, the JBS issue that is used to push the original change, **not** for backports or the CSR (if there is one).\n@@ -1551,9 +1557,13 @@\n-   * The **Summary** should be a one sentence synopsis that is informative (and concise) enough to attract the attention of users, developers, and maintainers who might be impacted by the change. The **Summary** should succinctly describe what has actually changed, not be the original bug title, nor describe the problem that was being solved. It should read well as a sub-section heading in a document.\n-   * Prefix the **Summary** with \"Release Note:\".\n-   * Add the `release-note` label.\n-   * Add the proper `RN-`label (see below).\n-   * Add an **Assignee**.\n-   * Set the **Fix Version** to the same value that the main issue has.\n-   * Enter the text of the release note in the **Description** field using markdown formatting (even though it won't be rendered in JBS).\n-#. Ask your Reviewers to have a look at the release note.\n-#. When you are done, Resolve the release note sub-task as \"Delivered\".\n+   * The [Summary]{.jbs} should be a one sentence synopsis that is informative (and concise) enough to attract the attention of users, developers, and maintainers who might be impacted by the change. It should succinctly describe what has actually changed, not be the original bug title, nor describe the problem that was being solved. It should read well as a sub-section heading in a document.\n+   * Prefix the [Summary]{.jbs} with \"Release Note:\".\n+   * Add the [release-note]{.label} label. This is required for the release note to be included in the release notes.\n+   * Add the proper [RN-]{.label}label if applicable to indicate what section of the release notes it should be included in (see [RN-labels](#rn-labels) below).\n+   * Set the [Assignee]{.jbs} to the same person who owns the main issue.\n+   * Set [Affects Version]{.jbs} to the release versions for which the release note should be published.\n+   * Set the [Fix Version]{.jbs} to the same value that the main issue has.\n+   * Enter the text of the release note in the [Description]{.jbs} field using markdown formatting, following the [CommonMark specification](https:\/\/spec.commonmark.org\/current\/). Markdown won't be rendered in JBS. You can use [dingus](https:\/\/spec.commonmark.org\/dingus\/) to see what the release note will look like. Note that ascii table formatting is supported but will not display correctly in the dingus page. For more information see [General Conventions for Release Notes](#general-conventions-for-release-notes) below.\n+   * While the [Priority]{.jbs} of the sub-task is set by default to be the same as the priority of the issue itself, it can be changed to adjust in what order the release note is listed compared to other release notes in the same build or release note section.\n+#. Ask your Reviewers to have a look at the release note. Ideally you should have the release note reviewed at the same time as the code is reviewed. If it's later determined that a release note is necessary, then go back to the same engineers who reviewed the fix to review the release note.  Special care should be taken when writing a release note that will cover changes related to a vulnerability fix in order to avoid describing the vulnerability in a way that someone can better understand how to exploit it.\n+#. When you are done, _Resolve_ the release note sub-task as `Delivered`. Only release notes where the sub-task has been resolved\tas `Delivered` is considered to be part of the EA\/GA release notes. To avoid mixing up the release notes with the code fixes that have gone into a particular release or build, we don't use `Resolved\/Fixed`.\n+\n+If you see an issue you feel should have a release note but you are not the assignee of the bug, then add the label [release-note=yes]{.label} to the main bug (not on a backport nor a sub-task). This acts as a flag to make sure that the release note is considered. This can be done even with fixes that have been shipped already if it's noticed that there is confusion around the change. If, after discussion, it's decided that a release note isn't required either remove the label, or change it to [release-note=no]{.label} if it makes sense to have a clear indication that a release note isn't required for the fix. The label [release-note=yes]{.label} can be removed once the release note sub-task has been created.\n@@ -1563,1 +1573,1 @@\n-## RN-labels\n+## General Conventions for Release Notes\n@@ -1565,1 +1575,1 @@\n-The RN-label is used to indicate what kind of change the release note is for. All release note sub-tasks must have at least one of these labels.\n+The following are general practices that should be followed when creating release notes.\n@@ -1567,2 +1577,6 @@\n-[**`RN-NewFeature`**]{#RN-NewFeature}\n-:   New Feature or enhancement.\n+* Release notes should be no longer than 2-3 paragraphs.\n+* Don't repeat information that will be included in updates to the docs, keep it to a high level summary or key changes.\n+* Note that where the changes are more fully documented in the JDK documentation, then refer to that document for details. When covering a change in behavior provide some idea to what can be done if a developer or user encounters problems from the change.\n+* Don't include graphics etc. Refer to the main docs if there are more details that need explaining.\n+* Don't include your name or affiliation, make sure however, you are the assignee of the release note sub-task.\n+* If you have a < in the [Summary]{.jbs} then use `&lt;`. For <'s in the [Description]{.jbs} surround them by back-ticks.\n@@ -1570,2 +1584,4 @@\n-[**`RN-IssueFixed`**]{#RN-IssueFixed}\n-:   A significant issue which has been fixed, would normally be a regression or an issue which unknowingly released in a new feature.\n+* Avoid using Latin and abbreviations in the release note.\n+  * Use \"also known as\" instead of \"aka\"\n+  * Use \"that is\" or \"to be specific\" instead of \"i.e.\"\n+  * Use \"for example\" instead of \"e.g.\"\n@@ -1573,2 +1589,14 @@\n-[**`RN-KnownIssue`**]{#RN-KnownIssue}\n-:   An issue that wasn't possible to fix by the time the release was GA'd.\n+* The [Summary]{.jbs} should be in title case instead of sentence case.\n+  * Example: Decode Error with Tomcat Version 7.x\n+\n+* The [Description]{.jbs} should be standardized to follow this pattern:\n+  * Sentence stating the change that was made\n+  * Background info\/context\n+  * Example: A new system property, `jdk.disableLastUsageTracking`, has been introduced to disable JRE last usage tracking for a running VM.\n+\n+* Special case: JEP release note\n+  * [Summary]{.jbs} - If the change is an actual JEP, use the JEP title.\n+  * [Description]{.jbs} - the JEP Summary text have already been heavily reviewed and also approved by the project lead. It should be the first sentence in the release note description. That would be analogous to the \"change that was made\" sentence in other release note descriptions. The remaining text would be composed of the background info from the JEP.\n+  * [Description]{.jbs} - The JEP release note description should contain the link to the JEP.\n+\n+## RN-labels\n@@ -1576,2 +1604,1 @@\n-[**`RN-Removed`**]{#RN-Removed}\n-:   Covers an API, feature, tool etc. which has been removed from the JDK.\n+Unless tagged otherwise it will be assumed that the release note documents a change in behavior (will have likely required a CSR) or other item which should be included in the release notes. If the note covers a more specific type of change, then one of the following labels can be included (notes of a similar type will be listed together).\n@@ -1579,2 +1606,5 @@\n-[**`RN-Deprecated`**]{#RN-Deprecated}\n-:   Covers an API that has been marked as deprecated in the release.\n+[[RN-NewFeature]{.label}]{#RN-NewFeature}\n+:   A New Feature or enhancement in the release.\n+    The [Summary]{.jbs} must be the item\/API or new functionality.\n+    The [Description]{.jbs} must contain the name of the new feature, its intended function, and how a user can utilize it.\n+    Example: [JDK-8193026](https:\/\/bugs.openjdk.java.net\/browse\/JDK-8193026)\n@@ -1582,1 +1612,25 @@\n-[**`RN-Important`**]{#RN-Important}\n+[[RN-IssueFixed]{.label}]{#RN-IssueFixed}\n+:   A significant issue which has been fixed. This would normally be a regression or an issue which was unknowingly released in a new feature.\n+    The [Summary]{.jbs} must be a summary of the error that was fixed.\n+    The [Description]{.jbs} must contain a statement about what was fixed, how the fix effects the user, and any special conditions that a user should be aware of regarding the fix.\n+    Example: [JDK-8184172](https:\/\/bugs.openjdk.java.net\/browse\/JDK-8184172)\n+\n+[[RN-KnownIssue]{.label}]{#RN-KnownIssue}\n+:   An issue that wasn't possible to fix by the time the release was GA'd.\n+    The [Summary]{.jbs} must be a summary of the error that the user sees.\n+    The [Description]{.jbs} must contain details about the error, how it effects the user, and workarounds if any exist.\n+    Example: [JDK-8191040](https:\/\/bugs.openjdk.java.net\/browse\/JDK-8191040)\n+\n+[[RN-Removed]{.label}]{#RN-Removed}\n+:   Only for major releases. The release note covers an API, feature, tool etc. which has been removed from the JDK.\n+    The [Summary]{.jbs} must be of the form \"Removal of\" Item\/API.\n+    The [Description]{.jbs} must contain the list or name of the removed items\/API with (optional) the reason for its removal. Include any special conditions that a user should be aware of regarding the removal.\n+    Example: [JDK-8185066](https:\/\/bugs.openjdk.java.net\/browse\/JDK-8185066)\n+\n+[[RN-Deprecated]{.label}]{#RN-Deprecated}\n+:   Only for major releases. The release notes cover an API, feature, tool etc. that has been marked as deprecated in the release.\n+    The [Summary]{.jbs} must be of the form \"Deprecated\" Item\/API.\n+    The [Description]{.jbs} must contain the name of the item that has been deprecated, the reason for its deprecation, and (optional) any special conditions that a user should be aware of regarding the possible future removal.\n+    Example: [JDK-8179909](https:\/\/bugs.openjdk.java.net\/browse\/JDK-8179909)\n+\n+[[RN-Important]{.label}]{#RN-Important}\n@@ -1585,2 +1639,2 @@\n-[**`RN-`(distro)**]{#RN-distro}\n-:   Used to indicate that the release note is only relevant for a specific JDK distribution. E.g. RN-Oracle\n+[[RN-]{.label}_(distro)_]{#RN-distro}\n+:   Used to indicate that the release note is only relevant for a specific JDK distribution. E.g. [RN-Oracle]{.label}\n@@ -1588,1 +1642,1 @@\n-[~~**`RN-Change`**~~]{#RN-Change}\n+[[~~RN-Change~~]{.label}]{#RN-Change}\n@@ -1591,0 +1645,10 @@\n+## Querying the Release Notes\n+\n+The Release Notes for a particular release can be found using the JBS query\n+\n+~~~\n+affectedversion = <version> and type = sub-task and labels = release-note\n+~~~\n+\n+where `<version>` is the appropriate release value, e.g. 17.\n+\n","filename":"src\/index.md","additions":99,"deletions":35,"binary":false,"changes":134,"status":"modified"}]}