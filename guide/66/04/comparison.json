{"files":[{"patch":"@@ -28,1 +28,0 @@\n-* Step-by-step build instructions\n@@ -30,1 +29,1 @@\n-* Reference external CSR pages with small intro that is unlikely to need upates\n+* Reference external CSR pages with small intro that is unlikely to need updates\n@@ -38,1 +37,0 @@\n-* Text about backports\n","filename":"README.md","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1373,0 +1373,133 @@\n+## Backing Out a Change\n+\n+If a change causes a regression that can't be fixed within reasonable time the best way to handle the regression can be to back out the change. Backing out means that the inverse (anti-delta) of the change is pushed to effectively undo the change in the repository. There are two parts to this task, how to do the bookkeeping in JBS, and how to do the actual backout in git or mercurial.\n+\n+The backout is a regular change and will have to go through the standard code review process, but is considered a [trivial](#trivial) change. The rationale is that a backout is usually urgent in nature and the change itself is automatically generated. In areas where two reviewers are normally required, only one additional Reviewer is required for a backout since the person who is performing the backout also will review the change.\n+\n+### How to work with JBS when a change is backed out\n+\n+#. Close the original JBS issue **(O)**.\n+   * \"Verify\" the issue and choose \"Fix Failed\".\n+#. If the intention is to fix the change and submit it again, create a redo-issue **(R)** to track that the work still needs to be done.\n+   * Clone **(O)** and add the prefix `[REDO]` on the summary - the clone becomes the redo-issue **(R)**.\n+   * Make sure relevant information is brought to **(R)**.\n+   * Remember that comments aren't brought over when cloning.\n+#. Create a backout-issue **(B)**:\n+   * Alternative 1 - the regression is identified directly.\n+     * Create a sub-task to **(R)** with the same summary, prefix with `[BACKOUT]`.\n+   * Alternative 2 - an investigation issue is created **(I)**, and during the investigation backing out the change is identified as the best solution.\n+     * Use the investigation issue **(I)** for the backout.\n+     * Change summary of **(I)** to the same as **(O)** and prefix with `[BACKOUT]`.\n+     * Move and change type of **(I)** to become a sub-task of **(R)**.\n+   * Alternative 3 - no redo issue was created.\n+     * Create a backout-issue **(B)** with the same summary as **(O)**, prefix with `[BACKOUT]`.\n+     * Link **(B)** and **(O)**.\n+\n+ProblemList entries and `@ignore` keywords will continue to point to the original bug (unless updated at back out). This is accepted since there is a clone link to follow.\n+\n+### How to work with git when a change is backed out\n+\n+To backout a change with git, use `git revert`. This will apply (commit) the anti-delta of the change.\n+\n+~~~diff\n+$ git show aa371b4f02c2f809eb9cd3e52aa12b639bed1ef5\n+commit aa371b4f02c2f809eb9cd3e52aa12b639bed1ef5 (HEAD -> master)\n+Author: Jesper Wilhelmsson <jesper.wilhelmsson@oracle.com>\n+Date:   Wed Jun 23 20:31:32 2021 +0200\n+\n+    My change\n+\n+diff --git a\/README.md b\/README.md\n+index 399e7cc311f..4961acb2126 100644\n+--- a\/README.md\n++++ b\/README.md\n+@@ -1,4 +1,4 @@\n+-# Welcome to the JDK!\n++# Welcome to my modified JDK!\n+\n+ For build instructions please see the\n+ [online documentation](https:\/\/openjdk.java.net\/groups\/build\/doc\/building.html),\n+\n+$ git revert aa371b4f02c2f809eb9cd3e52aa12b639bed1ef5\n+[master d454489052d] Revert \"My change\"\n+ 1 file changed, 1 insertion(+), 1 deletion(-)\n+\n+$ git show d454489052dc6ff69a21ad9c8f56b67fdeb435ee\n+commit d454489052dc6ff69a21ad9c8f56b67fdeb435ee (HEAD -> master)\n+Author: Jesper Wilhelmsson <jesper.wilhelmsson@oracle.com>\n+Date:   Wed Jun 23 20:32:08 2021 +0200\n+\n+    Revert \"My change\"\n+\n+    This reverts commit aa371b4f02c2f809eb9cd3e52aa12b639bed1ef5.\n+\n+diff --git a\/README.md b\/README.md\n+index 4961acb2126..399e7cc311f 100644\n+--- a\/README.md\n++++ b\/README.md\n+@@ -1,4 +1,4 @@\n+-# Welcome to my modified JDK!\n++# Welcome to the JDK!\n+\n+ For build instructions please see the\n+ [online documentation](https:\/\/openjdk.java.net\/groups\/build\/doc\/building.html),\n+~~~\n+\n+### How to work with mercurial when a change is backed out\n+\n+In order to backout a change, the `hg backout` command is recommended, which essentially applies the anti-delta of the change. Make sure you perform the backout in the most upstream repository the change has escaped to.\n+\n+~~~\n+hg backout [OPTION]... [-r] REV\n+\n+reverse effect of earlier changeset\n+\n+    Prepare a new changeset with the effect of REV undone in the current\n+    working directory.\n+\n+    If REV is the parent of the working directory, then this new changeset is\n+    committed automatically. Otherwise, hg needs to merge the changes and the\n+    merged result is left uncommitted.\n+~~~\n+\n+# Backporting\n+\n+::: {.box}\n+[Quick Links]{.boxheader}\n+\n+* [Push approval for JDK updates](https:\/\/openjdk.java.net\/projects\/jdk-updates\/approval.html)\n+* [Skara documentation on backports](https:\/\/wiki.openjdk.java.net\/display\/SKARA\/Backports)\n+:::\n+\n+Development of the latest version of the JDK often results in bug fixes that might be interesting to include in some of the JDK update releases still being maintained. Moving a fix from a more recent release train (e.g. JDK 17) to an older release train (e.g. JDK 11) is called *backporting*.\n+\n+The guideline for what to backport into a specific update release will vary over the lifetime of that release. Initially more fixes are expected to be backported as new features and large changes introduced in a mainline release stabilize. Over time the focus will shift from stabilization to keeping it stable - the release will go into maintenance mode. This means that bug fixes that require larger disruptive changes are more likely to be made in mainline and backported to more recent release trains only, and not to older release trains.\n+\n+Over time it's likely that the code base will diverge between mainline and any given update release, and the cost of backporting will increase. The cost in this case is not only the effort needed to perform the actual backport, but also the cost inferred by bugs introduced by the backport. This should be taken into consideration when deciding if a change should be backported or not. For more details on how to reson around what to backport, [this email from JDK 8 Updates Project lead Andrew Haley](https:\/\/mail.openjdk.java.net\/pipermail\/jdk8u-dev\/2020-June\/012002.html) has some guidelines for JDK 8u. The reasoning in this mail is specific to JDK 8u, but will in general apply to any JDK release in maintenance mode.\n+\n+Any change that originally required a CSR will require a new CSR to be backported unless the backport was covered by the initial CSR. Changes to Java SE specifications cannot be made in an update release without a Java SE Maintenance Release. CSR-related issues affect interfaces and behavior and must be very carefully scrutinized.\n+\n+## Working with backports in JBS\n+\n+::: {.box}\n+[Terminology]{.boxheader}\n+\n+Main issue - The top issue in a backport hierarchy. Eg. [JDK-8272373](https:\/\/bugs.openjdk.java.net\/browse\/JDK-8272373) is a main issue, while [JDK-8277498](https:\/\/bugs.openjdk.java.net\/browse\/JDK-8277498) and [JDK-8277499](https:\/\/bugs.openjdk.java.net\/browse\/JDK-8277499) are backport issues of this main issue.\n+:::\n+\n+In general there is no need to create backport issues in JBS manually. All work that is done in JBS in preparation for a backport (requesting approvals etc) is done in the main issue. The backport issue will be created automatically by the bots when you integrate the change to the source code repository.\n+\n+There can be cases where it is motivated to create a backport issue before the fix is done. In these cases set the fix version of the backport to `N-pool`, where `N` is the release train the backport is targeting. E.g. `17-pool`. Please note that even if a backport issue is created ahead of time, all work done in JBS is still done in the main issue.\n+\n+Obviously it's possible to set the fix version to the exact release the backport is targeting, but this isn't recommended. When a change is pushed, the bots will look at the main issue as indicated in the PR title, and look for backports with the current `N.0.x` release version as fix version, if no such backport is found they will look for `N-pool`, and if that isn't found either, a new backport issue will be created. This means that if the backport has an exact fix version set, but is delayed and misses the release indicated by the fix version, a new backport issue is created with a small mess as the result.\n+\n+Setting the fix version of a backport to `N` is always wrong. JDK `N` has already been released (or you wouldn't be backporting to it) and can't get any more fixes.\n+\n+## Requesting approvals for backports\n+\n+In order to be allowed to push a change to one of the OpenJDK Update Release repositories, an approval is required. The [official process for how to request push approval for a backport](https:\/\/openjdk.java.net\/projects\/jdk-updates\/approval.html) describes in detail how to work with JBS when requesting approvals. In short, there's a label `jdk<release>u-fix-request` that should be added to the main JBS issue. Also put a motivation as to why the issue needs to be backported as a comment in the main issue. Once the label and motivation has been added, wait for the maintainers of the release to approve your request. The approval will be indicated with a label, `jdk<release>u-fix-yes`, added to the main issue.\n+\n+## Using the Skara tooling to help with backports\n+\n+The Skara tooling includes support for backports. [The official Skara documentation](https:\/\/wiki.openjdk.java.net\/display\/SKARA\/Backports) describes in detail how to work with the tooling to create backport PRs on GitHub or using the CLI tools. As described in the documentation, the [`\/backport`](https:\/\/wiki.openjdk.java.net\/display\/SKARA\/Commit+Commands#CommitCommands-\/backport) command can be used on a commit (not a PR!) to create the backport PR. If a backport PR is manually created, set the title to `Backport <original commit hash>`.\n+\n@@ -1666,92 +1799,0 @@\n-## Backing Out a Change\n-\n-If a change causes a regression that can't be fixed within reasonable time the best way to handle the regression can be to back out the change. Backing out means that the inverse (anti-delta) of the change is pushed to effectively undo the change in the repository. There are two parts to this task, how to do the bookkeeping in JBS, and how to do the actual backout in git or mercurial.\n-\n-The backout is a regular change and will have to go through the standard code review process, but is considered a [trivial](#trivial) change. The rationale is that a backout is usually urgent in nature and the change itself is automatically generated. In areas where two reviewers are normally required, only one additional Reviewer is required for a backout since the person who is performing the backout also will review the change.\n-\n-### How to work with JBS when a change is backed out\n-\n-#. Close the original JBS issue **(O)**.\n-   * \"Verify\" the issue and choose \"Fix Failed\".\n-#. If the intention is to fix the change and submit it again, create a redo-issue **(R)** to track that the work still needs to be done.\n-   * Clone **(O)** and add the prefix `[REDO]` on the summary - the clone becomes the redo-issue **(R)**.\n-   * Make sure relevant information is brought to **(R)**.\n-   * Remember that comments aren't brought over when cloning.\n-#. Create a backout-issue **(B)**:\n-   * Alternative 1 - the regression is identified directly.\n-     * Create a sub-task to **(R)** with the same summary, prefix with `[BACKOUT]`.\n-   * Alternative 2 - an investigation issue is created **(I)**, and during the investigation backing out the change is identified as the best solution.\n-     * Use the investigation issue **(I)** for the backout.\n-     * Change summary of **(I)** to the same as **(O)** and prefix with `[BACKOUT]`.\n-     * Move and change type of **(I)** to become a sub-task of **(R)**.\n-   * Alternative 3 - no redo issue was created.\n-     * Create a backout-issue **(B)** with the same summary as **(O)**, prefix with `[BACKOUT]`.\n-     * Link **(B)** and **(O)**.\n-\n-ProblemList entries and `@ignore` keywords will continue to point to the original bug (unless updated at back out). This is accepted since there is a clone link to follow.\n-\n-### How to work with git when a change is backed out\n-\n-To backout a change with git, use `git revert`. This will apply (commit) the anti-delta of the change.\n-\n-~~~diff\n-$ git show aa371b4f02c2f809eb9cd3e52aa12b639bed1ef5\n-commit aa371b4f02c2f809eb9cd3e52aa12b639bed1ef5 (HEAD -> master)\n-Author: Jesper Wilhelmsson <jesper.wilhelmsson@oracle.com>\n-Date:   Wed Jun 23 20:31:32 2021 +0200\n-\n-    My change\n-\n-diff --git a\/README.md b\/README.md\n-index 399e7cc311f..4961acb2126 100644\n---- a\/README.md\n-+++ b\/README.md\n-@@ -1,4 +1,4 @@\n--# Welcome to the JDK!\n-+# Welcome to my modified JDK!\n-\n- For build instructions please see the\n- [online documentation](https:\/\/openjdk.java.net\/groups\/build\/doc\/building.html),\n-\n-$ git revert aa371b4f02c2f809eb9cd3e52aa12b639bed1ef5\n-[master d454489052d] Revert \"My change\"\n- 1 file changed, 1 insertion(+), 1 deletion(-)\n-\n-$ git show d454489052dc6ff69a21ad9c8f56b67fdeb435ee\n-commit d454489052dc6ff69a21ad9c8f56b67fdeb435ee (HEAD -> master)\n-Author: Jesper Wilhelmsson <jesper.wilhelmsson@oracle.com>\n-Date:   Wed Jun 23 20:32:08 2021 +0200\n-\n-    Revert \"My change\"\n-\n-    This reverts commit aa371b4f02c2f809eb9cd3e52aa12b639bed1ef5.\n-\n-diff --git a\/README.md b\/README.md\n-index 4961acb2126..399e7cc311f 100644\n---- a\/README.md\n-+++ b\/README.md\n-@@ -1,4 +1,4 @@\n--# Welcome to my modified JDK!\n-+# Welcome to the JDK!\n-\n- For build instructions please see the\n- [online documentation](https:\/\/openjdk.java.net\/groups\/build\/doc\/building.html),\n-~~~\n-\n-### How to work with mercurial when a change is backed out\n-\n-In order to backout a change, the `hg backout` command is recommended, which essentially applies the anti-delta of the change. Make sure you perform the backout in the most upstream repostiory the change has escaped to.\n-\n-~~~\n-hg backout [OPTION]... [-r] REV\n-\n-reverse effect of earlier changeset\n-\n-    Prepare a new changeset with the effect of REV undone in the current\n-    working directory.\n-\n-    If REV is the parent of the working directory, then this new changeset is\n-    committed automatically. Otherwise, hg needs to merge the changes and the\n-    merged result is left uncommitted.\n-~~~\n-\n","filename":"src\/index.md","additions":133,"deletions":92,"binary":false,"changes":225,"status":"modified"}]}