{"files":[{"patch":"@@ -15,1 +15,5 @@\n-The single most important question you need to answer before making any change is: **What is the main intention of your change?**\n+One question to ask yourself is: **What problem are you trying to solve?**\n+\n+The important thing here is to understand the problem itself, independent of any solution (and independently of the solution that currently happens to be in the PR). A number of other questions and lines of thought emanate from thinking about the problem. For example: is this the right problem to solve? Does solving this problem create worse problems elsewhere; that is, is there a net benefit? Does this problem need to be solved in the JDK, or can and should it be solved elsewhere (e.g., in tooling)?\n+\n+The next question you need to answer before making any change is: **What is the main intention of your change?**\n@@ -27,1 +31,1 @@\n-* **Performance** Can you demonstrate a user perceptible change? If you can't measure the change, or a user can't notice the change, or the change only improves code that is used infrequently, then maybe it isn't worth it.\n+* **Performance** Can you demonstrate a user perceptible change? If you can't measure the change, or a user can't notice the change, or the change only improves code that is used infrequently, then maybe it isn't worth it. Do you have benchmarks to back up your results? Do you understand the results? Performance testing is complex and often there are many factors unrelated to your change that affects the numbers. What's the tradeoff? The performance improvements that just make everything better do exist, but they are extremely rare. Most often the code gets more complex, or you speed up one case but slow down another. Are you making the right tradeoff?\n","filename":"src\/guide\/contributing-to-an-open-jdk-project.md","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"}]}