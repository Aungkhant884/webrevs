{"files":[{"patch":"@@ -11,0 +11,20 @@\n+## Things to consider before changing OpenJDK code\n+\n+Every change in JDK code carries risk of changes in behavior which adversely affect applications. Generally we're looking to improve the functionality and capability and sometimes performance of the platform without that negative consequence. We do have many thousands of tests, but they're inevitably incomplete in coverage. So we need to ask ourselves whether each change is worthwhile - and some may not be no matter how well intentioned.\n+\n+The single most important question you need to answer before making any change is: **What is the main intention of your change?**\n+\n+Depending on your answer to that question you will need to consider one or more of the following paragraphs.\n+\n+* **Correctness** If your change improves program correctness, that's important. And to broaden this, fixing of all kinds of bugs that really make things better for applications in ways they can detect is important.\n+\n+* **Robustness** Updating code to use a newer platform API can be a good change. Moving away from APIs that are being deprecated or that are no longer maintained is likely desired. Do note though that supposedly equivalent APIs may not be the drop in replacement you think they are. You'll need to prove that the code has the same behavior after the change through extensive testing.\n+\n+* **Security** If you intend to increase the overall security of the platform, changes following secure coding practices and using appropriate platform APIs for that are usually welcome. The exception might be if it's a potentially destabilizing change in code where there's only a theoretical problem. Please note: If you think you found a real security bug that might compromise the platform you should follow the process [here](https:\/\/openjdk.org\/groups\/vulnerability\/report).\n+\n+* **Refactoring \/ Clean up** Making code easier to understand may be a good change in areas that are under active development. Stable code however isn't a good candidate for refactoring regardless of what the code looks like. The OpenJDK has evolved over many years and some parts have been stable for decades. If there's no immediate need to work on the code for other reasons, then what will a cleanup actually achieve?\n+\n+* **Performance** Can you demonstrate a user perceptible change? If you can't measure the change, or a user can't notice the change, or the change only improves code that is used infrequently, then maybe it isn't worth it.\n+\n+* **Modernizing** Changing code purely for the sake of using a new language feature isn't usually a good change. Be a subject matter expert, not just a language expert. Writing code in \"a better way\" is not guaranteed to be safe. A change of behavior is always possible and unless you understand the code you are changing at more than the core language\/API level, and have looked into appropriate tests and can speak to the risks, then you should first find a subject matter expert to discuss it with. Keep in mind that the OpenJDK code is developed by a large community. If a new language feature is introduced, all developers working in that code must learn this new feature and understand the implications of using it.\n+\n","filename":"src\/guide\/contributing-to-an-open-jdk-project.md","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -11,0 +11,6 @@\n+## Think once more\n+\n+All code reviews in OpenJDK are done in public. Once you open your PR for public review the internet can see it and comment on it. Make sure your code is ready for it. Look through your comments, make sure that temporary code is gone, and make sure you have sanitized your method and variable names.\n+\n+It's also worth taking the extra time to see if the change can be split into a few different separate changes. A large change will take more effort and thus attract fewer Reviewers. Smaller changes will get reviewed faster and get better quality reviews. You can compare proposing a single large change to proposing ten individual small unrelated changes. What happens in practice when all these ten changes are presented as one PR is that there's a focus on say 5-6 of these smaller changes and no one really looks hard at the other 4-5. For complexity, even small changes that are hard to understand and test may be risky.\n+\n","filename":"src\/guide\/working-with-pull-requests.md","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}