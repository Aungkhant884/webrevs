{"files":[{"patch":"@@ -10,1 +10,1 @@\n-Development of the latest version of the JDK often results in bug fixes that might be interesting to include in some of the JDK update releases still being maintained. Moving a fix from a more recent release train (e.g. JDK 17) to an older release train (e.g. JDK 11) is called *backporting*.\n+Development of the latest version of the JDK often results in bug fixes that might be interesting to include in some of the JDK update releases still being maintained or in a [release stabilization repository](https:\/\/openjdk.org\/guide\/#backporting-to-release-stabilization-fork). Moving a fix from a more recent release train (e.g. JDK 17) to an older release train (e.g. JDK 11) is called *backporting*.\n@@ -12,1 +12,1 @@\n-The guideline for what to backport into a specific update release will vary over the lifetime of that release. Initially more fixes are expected to be backported as new features and large changes introduced in a mainline release stabilize. Over time the focus will shift from stabilization to keeping it stable - the release will go into maintenance mode. This means that bug fixes that require larger disruptive changes are more likely to be made in mainline and backported to more recent release trains only, and not to older release trains.\n+The guideline for what to backport into a specific release will vary over the lifetime of that release. Initially more fixes are expected to be backported as new features and large changes introduced in a mainline release stabilize. Over time the focus will shift from stabilization to keeping it stable - the release will go into maintenance mode. This means that bug fixes that require larger disruptive changes are more likely to be made in mainline and backported to more recent release trains only, and not to older release trains. Release stabilization repositories (e.g. [jdk20](https:\/\/git.openjdk.org\/jdk20)) follows the process described in [JEP 3](https:\/\/openjdk.org\/jeps\/3) for deciding the bug fixes that should be backported.\n","filename":"src\/guide\/backporting.md","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-## Forward ports\n+## Backporting to release stabilization repository\n@@ -55,16 +55,1 @@\n-During the rampdown of a release there are two repositories in play, the stabilization fork for the outgoing release, and the mainline repository where the next release is being developed. Any bugfix going into the stabilization fork is likely to be desired in mainline as well. As a developer you should push your fix to the stabilization fork **only**, even if you intend for it to go to both repositories. Your fix will be forward ported to mainline.\n-\n-_All_ fixes that are pushed to the stabilization fork are forward ported to mainline. If you have a fix that is only intended for the stabilization fork you will have to **manually** back it out from mainline once it has been forward ported. In order to remember to do this you should file a backout isue in JBS before pushing your change to the stabilization fork. E.g., To push JDK-xxx to the stabilization fork but not to mainline, you need to file an issue, JDK-yyy, in JBS to back out the fix after it has been merged into mainline. Make sure the two JBS issues (JDK-xxx and JDK-yyy) are related so that it's easy to find one from the other.\n-\n-To clarify, as soon as you know that there is a fix that needs to go into the stabilization fork but not mainline, you should do the following:\n-\n-* File a bug, JDK-yyy, to cover the backout work\n-* [Link]{.jbs-field} JDK-yyy to JDK-xxx using a `relates to` link\n-* Set JDK-yyy's [Fix Version\/s]{.jbs-field} to the release currently being developed in mainline\n-* Add a comment describing the situation\n-* Set the [Priority]{.jbs-field} to be relatively high (e.g., P3)\n-* Make yourself a watcher of JDK-xxx so that you get a notification when it's forward ported\n-\n-Then, you have to wait until the JDK-xxx fix is forward ported to mainline before actually fixing JDK-yyy. Making these settings in JDK-yyy will help ensure that it won't be missed.\n-\n-There are examples in JBS where JDK-yyy has been created as a sub-task of JDK-xxx. This is **not** recommended since JDK-yyy stands a higher risk of being missed when it's not of type *Bug* but rather a *sub-task* of an already closed issue. In general it's not recommended to have open sub-tasks of closed issues - an issue shouldn't be closed unless all it's sub-tasks are closed. Also see [Backing out a change](#backing-out-a-change) for reference.\n+During the rampdown of a release there are two repositories in play, the release stabilization repository for the outgoing release, and the mainline repository where the next release is being developed. Any bugfix going into the release stabilization repository is likely to be desired in mainline as well. As a developer you should always create a pull request targeting the mainline repository first and then, once the pull request is integrated, [backport](https:\/\/openjdk.org\/guide\/#backporting) the resulting commit to the release stabilization repository. For bugfixes that are **only** applicable to the release stablization repository, regular pull requests targeting the stabilization fork should be created.\n","filename":"src\/guide\/the-jdk-release-process.md","additions":2,"deletions":17,"binary":false,"changes":19,"status":"modified"}]}