{"files":[{"patch":"@@ -209,1 +209,1 @@\n-## Filing a Bug\n+## Filing a bug\n@@ -242,1 +242,1 @@\n-## How to fix an incorrect backport creation\n+## How to fix an incorrect backport creation in JBS\n@@ -244,1 +244,1 @@\n-If a main bug is targeted to a release and the fix is pushed to a different release, then a backport bug is automatically created. Usually this is a \"good thing\", e.g., when you are backporting a fix to an earlier release, but not always... If the main bug is targeted to a later release (due to schedule planning), but someone finds the time to fix that bug in the current release, then the bug should be retargeted to the current release before pushing the fix. However, sometimes we forget to do that.\n+If a main bug is targeted to a release and a fix referring to that main bug is pushed to a different release, then a backport bug is automatically created in JBS. Usually this is a \"good thing\", e.g., when you are backporting a fix to an earlier release, but not always... If the main bug is targeted to a later release (due to schedule planning), but someone finds the time to fix that bug in the current release, then the bug should be retargeted to the current release before pushing the fix. However, sometimes we forget to do that.\n@@ -249,2 +249,3 @@\n-> In this example a fix was pushed to JDK N (a.k.a. the current release) while the JBS bug was targeted to JDK N+1 (a.k.a. a future release).\n-\n+>\n+> In this example a fix was pushed to JDK N (a.k.a. the current release) while the JBS bug was targeted to JDK N+1 (a.k.a. a future release). The same procedure can be used in the opposite situation, when a fix has been pushed to JDK N+1 when the JBS bug was targeted to JDK N, by switching N and N+1 below. Remember, to keep the record clean for the future what maters the most is that the bug id used in the commit comment is the main bug, and that the \"backports\" (regardless of if they are to earlier or later releases) are Backport type issues of that main issue.\n+>\n@@ -286,0 +287,1 @@\n+>\n@@ -288,1 +290,1 @@\n-\n+>\n@@ -771,0 +773,1 @@\n+>\n@@ -772,1 +775,1 @@\n-\n+>\n@@ -1065,1 +1068,1 @@\n-* [JTReg Harness Documentation](https:\/\/openjdk.java.net\/jtreg\/)\n+* [jtreg Harness Documentation](https:\/\/openjdk.java.net\/jtreg\/)\n@@ -1069,1 +1072,1 @@\n-In addition to your own Java applications, OpenJDK have support for two test frameworks, JTReg and GTest. JTReg is a Java regression test framework that is used for most of the tests that are included in the OpenJDK source repository. The Google Test (GTest) framework is intended for unit testing of the C++ native code. Currently only JVM testing is supported by the GTest framework. Other areas use JTReg for unit testing of C++ code.\n+In addition to your own Java applications, OpenJDK have support for two test frameworks, jtreg and GTest. jtreg is a Java regression test framework that is used for most of the tests that are included in the OpenJDK source repository. The Google Test (GTest) framework is intended for unit testing of the C++ native code. Currently only JVM testing is supported by the GTest framework. Other areas use jtreg for unit testing of C++ code.\n@@ -1073,1 +1076,1 @@\n-In general all changes should come with a regression test so if you're writing product code you should also be writing test code. There are a few examples where it doesn't make sence to write an explicit regression test. These should be tagged in JBS with one of the [noreg-labels](#noreg).\n+In general all changes should come with a regression test so if you're writing product code you should also be writing test code. There are a few examples where it doesn't make sense to write an explicit regression test. These should be tagged in JBS with one of the [noreg-labels](#noreg).\n@@ -1083,1 +1086,1 @@\n-The JTReg documentation has a section on [how to write good JTReg tests](https:\/\/openjdk.java.net\/jtreg\/writetests.html).\n+The jtreg documentation has a section on [how to write good jtreg tests](https:\/\/openjdk.java.net\/jtreg\/writetests.html).\n@@ -1085,1 +1088,1 @@\n-## JTReg\n+## jtreg\n@@ -1087,1 +1090,1 @@\n-In-depth documentation about the JTReg framework is found here: [JTReg harness](https:\/\/openjdk.java.net\/jtreg\/). JTReg itself is available in the [Code Tools Project](https:\/\/openjdk.java.net\/projects\/code-tools\/).\n+In-depth documentation about the jtreg framework is found here: [jtreg harness](https:\/\/openjdk.java.net\/jtreg\/). jtreg itself is available in the [Code Tools Project](https:\/\/openjdk.java.net\/projects\/code-tools\/).\n@@ -1089,1 +1092,1 @@\n-Below is a small example of a JTReg test. It’s a clean Java class with a main method that is called from the test harness. If the test fails we throw a RuntimeException. This is picked up by the harness and is reported as a test failure. Try to always write a meaningful message in the exception. One that actually helps with understanding what went wrong once the test fails.\n+Below is a small example of a jtreg test. It’s a clean Java class with a main method that is called from the test harness. If the test fails we throw a RuntimeException. This is picked up by the harness and is reported as a test failure. Try to always write a meaningful message in the exception. One that actually helps with understanding what went wrong once the test fails.\n@@ -1105,1 +1108,1 @@\n-This example only utilizes three JTReg specific tags, `@test`, `@summary`, and `@run`. `@test` simply tells JTReg that this class is a test, and `@summary` provides a description of the test. `@run` tells JTReg how to execute the test. In this case we simply tell JTReg to execute the main method of the class `TestXY`. `@run` isn't strictly necessary for JTReg to execute the test, an implicit `@run` tag will be added if none exists. However, for clarity and in order to avoid bugs it's recommended to always explicitly use the `@run` tag.\n+This example only utilizes three jtreg specific tags, `@test`, `@summary`, and `@run`. `@test` simply tells jtreg that this class is a test, and `@summary` provides a description of the test. `@run` tells jtreg how to execute the test. In this case we simply tell jtreg to execute the main method of the class `TestXY`. `@run` isn't strictly necessary for jtreg to execute the test, an implicit `@run` tag will be added if none exists. However, for clarity and in order to avoid bugs it's recommended to always explicitly use the `@run` tag.\n@@ -1107,1 +1110,1 @@\n-There are several other tags that can be used in JTReg tests. You can for instance associate the test with a specific bug that this test is a regression test for.\n+There are several other tags that can be used in jtreg tests. You can for instance associate the test with a specific bug that this test is a regression test for.\n@@ -1111,1 +1114,1 @@\n-Or you can specify a number of requirements that must be fulfilled for JTReg to execute the test.\n+Or you can specify a number of requirements that must be fulfilled for jtreg to execute the test.\n@@ -1125,1 +1128,1 @@\n-JTReg also have support for labeling tests with keys using the `@key` tag. These keywords can then be used to filter the test selection. For instance if you have a UI test which needs to display a window you'll want to make sure the test harness doesn't try to run this test on a system which doesn't support headful tests. You do this by specifying\n+jtreg also have support for labeling tests with keys using the `@key` tag. These keywords can then be used to filter the test selection. For instance if you have a UI test which needs to display a window you'll want to make sure the test harness doesn't try to run this test on a system which doesn't support headful tests. You do this by specifying\n@@ -1133,1 +1136,1 @@\n-The [JTReg documentation](https:\/\/openjdk.java.net\/jtreg\/) provides information on many more tags like these.\n+The [jtreg documentation](https:\/\/openjdk.java.net\/jtreg\/) provides information on many more tags like these.\n@@ -1137,1 +1140,1 @@\n-### Running OpenJDK JTReg Tests\n+### Running OpenJDK jtreg tests\n@@ -1139,1 +1142,1 @@\n-When configuring the OpenJDK build you can tell it where your JTReg installation is located. When providing this information you can later run `make run-test` to execute JTReg tests.\n+When configuring the OpenJDK build you can tell it where your jtreg installation is located. When providing this information you can later run `make run-test` to execute jtreg tests.\n@@ -1144,1 +1147,1 @@\n-In the OpenJDK source tree you can find a directory called `test`. There are a large number of tests in this directory that are written to be used with JTReg.\n+In the OpenJDK source tree you can find a directory called `test`. There are a large number of tests in this directory that are written to be used with jtreg.\n@@ -1148,1 +1151,1 @@\n-You can also run JTReg without invoking make. In this case you’ll need to tell JTReg which JDK to test.\n+You can also run jtreg without invoking make. In this case you’ll need to tell jtreg which JDK to test.\n@@ -1202,1 +1205,1 @@\n-## Excluding a Test\n+## Excluding a test\n@@ -1210,1 +1213,1 @@\n-ProblemListing should be used for a short term exclusion while a test is being fixed, and for the exclusion of intermittently failing tests that cause too much noise, but can still be useful to run on an ad-hoc basis. ProblemListing is done in the file `ProblemList.txt`. There are actually several ProblemList files to choose from. Their location and name hint about what area or feature each file belongs to. Each file has sections for different components. All ProblemList files complement each other to build the total set of tests to exclude in JTReg runs.\n+ProblemListing should be used for a short term exclusion while a test is being fixed, and for the exclusion of intermittently failing tests that cause too much noise, but can still be useful to run on an ad-hoc basis. ProblemListing is done in the file `ProblemList.txt`. There are actually several ProblemList files to choose from. Their location and name hint about what area or feature each file belongs to. Each file has sections for different components. All ProblemList files complement each other to build the total set of tests to exclude in jtreg runs.\n@@ -1310,1 +1313,1 @@\n-## Backing Out a Change\n+## Backing out a change\n@@ -1445,1 +1448,1 @@\n-# Working with the legacy Mercurial servers\n+# Working With the Legacy Mercurial Servers\n@@ -1464,1 +1467,1 @@\n-## Installing and Configuring Mercurial\n+## Installing and configuring mercurial\n@@ -1477,1 +1480,1 @@\n-### Verifying the Configuration\n+### Verifying the configuration\n@@ -1502,1 +1505,1 @@\n-## Cloning a Mercurial Repository\n+## Cloning a Mercurial repository\n@@ -1535,1 +1538,1 @@\n-### Cloning a Single Repository {#cloneSingle}\n+### Cloning a single repository {#cloneSingle}\n@@ -1549,1 +1552,1 @@\n-## Creating a Mercurial Changeset\n+## Creating a Mercurial changeset\n@@ -1573,1 +1576,1 @@\n-### Formatting a Changeset Comment\n+### Formatting a changeset comment\n@@ -1604,1 +1607,1 @@\n-### Committing a Changeset\n+### Committing a changeset\n@@ -1623,1 +1626,1 @@\n-## Merging Mercurial Changesets\n+## Merging Mercurial changesets\n@@ -1662,1 +1665,1 @@\n-## Pushing Mercurial Changesets\n+## Pushing Mercurial changesets\n@@ -1666,1 +1669,1 @@\n-### Get Your SSH key Installed\n+### Get your SSH key installed\n@@ -1683,1 +1686,1 @@\n-### Setting the `default-push` Path to the Server Repositories\n+### Setting the `default-push` path to the server repositories\n@@ -1729,1 +1732,1 @@\n-### Performing the Push\n+### Performing the push\n@@ -1751,1 +1754,1 @@\n-# The JDK Release process\n+# The JDK Release Process\n@@ -2013,1 +2016,1 @@\n-# About this Guide\n+# About This Guide\n","filename":"src\/index.md","additions":44,"deletions":41,"binary":false,"changes":85,"status":"modified"}]}