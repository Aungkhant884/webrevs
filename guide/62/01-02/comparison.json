{"files":[{"patch":"@@ -1696,1 +1696,1 @@\n-# JDK Release process\n+# The JDK Release process\n@@ -1704,1 +1704,1 @@\n-The JDK project has a well defined release process. [JEP 3](https:\/\/openjdk.java.net\/jeps\/3) describes this process in detail. This section tries to clarify some topics that often cause questions.\n+The JDK project has a well defined release process. [JEP 3](https:\/\/openjdk.java.net\/jeps\/3) describes this process in detail. This section intends to clarify some topics that often cause questions.\n@@ -1708,1 +1708,1 @@\n-The release cycle starts when development of a new release begins and ends when that release is delivered to the public. The current release cadence is six months. This means that every six months we start development of a new release, and every six months a new release is delivered. However, this doesn't mean that each release cycle is six months. As described below, the total development time for a release (the release cycle) is actually nine months. Obviously this in turn doesn't mean that all features are developed in nine months. Most features are developed for much longer time than that, and goes through long time development in other project repositories, and through a series of preview and experimental stages. But any feature that is to be included in a specific release has a specific window of nine months to integrate the code into mainline and fix all the remaining bugs.\n+The release cycle starts when development of a new release begins, and ends when that release is delivered to the public. The current release cadence is six months. This means that every six months we start development of a new release, and every six months a new release is delivered. However, this doesn't mean that each release cycle is six months. As described below, the total development time for a release (the release cycle) is actually nine months. Obviously this in turn doesn't mean that all features are developed in nine months. Most features are developed for a much longer time than that, and goes through long time development in other project repositories, and through a series of preview and experimental stages. But any feature that is to be included in a specific release has a specific window of nine months to integrate the code into mainline and fix all the remaining bugs.\n@@ -1719,4 +1719,1 @@\n-:    Since development is always ongoing in the mainline repository ([openjdk\/jdk](https:\/\/github.com\/openjdk\/jdk)), the start of a new release can be said to begin when the former release is forked of from mainline. After the start of the release follows six months of development to implement and integrate all the cool stuff that will go into the next release. After these six months rampdown begins.\n-\n-[**Ramp Down Start (RDS)**]{#rds}\n-:    The ramp down of a release starts with a fork of the mainline repository. A clone of the entire code base is made and hosted in a separate ramp down repository (e.g. [openjdk\/jdk17](https:\/\/github.com\/openjdk\/jdk17)). During the ramp down of a release we focus on bug fixing and stabilization in order to get the JDK ready for release.\n+:    Since development is always ongoing in the mainline repository ([openjdk\/jdk](https:\/\/github.com\/openjdk\/jdk)), the start of a new release can be said to be when the former release is forked from the mainline. After the start of the release follows six months of development to implement and integrate all the cool stuff that will go into the next release. After these six months ramp down begins.\n@@ -1725,4 +1722,1 @@\n-:    At RDS we enter RDP1. During this phase you may continue to fix P1-P3 product bugs. P4 and P5 product bugs should be deferred at this point. Test bugs (labeled `noreg-self`) and documentation bugs (labeled `noreg-doc`) can still be fixed in RDP1 regardless of their priority. To fix an enhancement an approval is required. See the [Late-Enhancement Request Process](https:\/\/openjdk.java.net\/jeps\/3#Late-Enhancement-Request-Process) for details on how to do that. If you want to defer a P1 or P2 bug during RDP1 you will also need an approval. See the [Bug-Deferral Process](https:\/\/openjdk.java.net\/jeps\/3#Bug-Deferral-Process) for more details.\n-\n-[**Feature Complete (FC)**]{#fc}\n-:    Feature Complete is declared when all features that are supposed to be in the release have been integrated into the release. With the six-month release cadence, FC is defined as a date rather than a set of features, so the features that are integrated by FC are the features that should be in the release. FC is normally the same day as RDS.\n+:    The ramp down of a release starts with a fork of the mainline repository. A clone of the entire code base is made and hosted in a separate ramp down repository (e.g. [openjdk\/jdk17](https:\/\/github.com\/openjdk\/jdk17)). During the ramp down of a release we focus on bug fixing and stabilization in order to get the JDK ready for release. In RDP1 you may continue to fix P1-P3 product bugs (and some other issues) in the stabilization repo. For detailed information on what can be fixed when, see [JEP 3](https:\/\/openjdk.java.net\/jeps\/3). The start of RDP1 is essentially the deadline for integrating JEPs and enhancements into this particular release.\n@@ -1731,1 +1725,1 @@\n-:    ATR is not a milestone described in JEP 3, but it's still a concept that might be mentioned in discussions on this topic and is therefore good to know about. ATR (a.k.a. ATR Start) is the start of an approximately six week long test period where all tests in the test plan for the given release is ran. ATR usually starts at RDS.\n+:    ATR is not a milestone described in JEP 3, but it's still a concept that might be mentioned in discussions on this topic and is therefore good to know about. ATR (a.k.a. ATR Start) is the start of an approximately six week long test period where all tests in the test plan for the given release is ran. ATR usually starts at the same time as RDP1.\n@@ -1734,1 +1728,1 @@\n-:    In RDP2 the bar is higher to get changes into the release. For product bugs, only P1:s and P2:s are supposed to be fixed here, and to do so an approval is needed. See the [Fix-Request Process](https:\/\/openjdk.java.net\/jeps\/3#Fix-Request-Process) for details on how to obtain one. All other product bugs should be deferred. Test bugs (labeled `noreg-self`) and documentation bugs (labeled `noreg-doc`) can still be fixed in RDP2. To fix an enhancement an approval is required. See the [Late-Enhancement Request Process](https:\/\/openjdk.java.net\/jeps\/3#Late-Enhancement-Request-Process) for details on how to do that. If you want to defer a P1 or P2 bug during RDP2 you will also need an approval. See the [Bug-Deferral Process](https:\/\/openjdk.java.net\/jeps\/3#Bug-Deferral-Process) for more details.\n+:    In RDP2 the bar is higher to get changes into the release. For product bugs, only P1:s and P2:s are supposed to be fixed here, and to do so an approval is needed. See the [Fix-Request Process](https:\/\/openjdk.java.net\/jeps\/3#Fix-Request-Process) for details on how to obtain one. All other product bugs should be deferred. Again, see [JEP 3](https:\/\/openjdk.java.net\/jeps\/3) for more details.\n@@ -1736,2 +1730,2 @@\n-[**Release Candidate**]{#rc}\n-:    Towards the end of the release cycle, when there are no more open product bugs targeted to the release, a stable build is selected to be the release candidate. This build will go through additional testing and if no more issues are found it will be the build released. If new bugs are found these are investigated and hopefully fixed, and a new build becomes the release candidate. The RC phase has a few milestones with a deadline for finding a candidate build, and another for making sure the build is ready to go live. During the RC phase only P1 bugs are fixed, and to fix one an approval is needed. See the [Fix-Request Process](https:\/\/openjdk.java.net\/jeps\/3#Fix-Request-Process) for details on how to obtain one. All other bugs should be deferred. To defer a P1 bug during RC you will need an approval. See the [Bug-Deferral Process](https:\/\/openjdk.java.net\/jeps\/3#Bug-Deferral-Process) for more details. No enhancements are allowed to be integrated during RC.\n+[**Release Candidate (RC)**]{#rc}\n+:    Towards the end of the release cycle, when there are no more open product bugs targeted to the release, a stable build is selected to be the release candidate. This build will go through additional testing and if no more issues are found it will be the build released. If new bugs are found these are investigated and hopefully fixed, and a new build becomes the release candidate. The RC phase has a few milestones with a deadline for finding a candidate build, and another for making sure the build is ready to go live.\n@@ -1742,3 +1736,1 @@\n-Please note that the priority of a bug doesn't change just because you want to get your fix in late in the release, or if you want to be able to defer it. The priority is based on the severity of the bug and if it was deemed to be a P2 before, you better have a really good explanation to why that conveniently has changed by the end of the release. Being hard to fix is **not** a reason to lower the priority of a bug.\n-\n-### Milestone cheat sheet\n+### Deferring P1 and P2 bugs\n@@ -1746,1 +1738,1 @@\n-Even though there's nothing explicitly written in the process about deferring P1 and P2 bugs during the normal development phase, the assumption is that these aren't deferred unless time runs out at the end of the release cycle.\n+Even though there's nothing explicitly written in the process about deferring P1 and P2 bugs during the initial development phase, the assumption is that these aren't deferred unless time runs out at the end of the release cycle.\n@@ -1748,6 +1740,1 @@\n-|           | P1           | P2           | P3           | P4\/P5        | Doc\/Test     | Enhancement  |\n-|:----------|:-------------|:-------------|:-------------|:-------------|:-------------|:-------------|\n-| Dev phase | Fix          | Fix          | Fix or Defer | Fix or Defer | Fix or Defer | Fix or Defer |\n-| RDP1      | Fix or Defer with approval | Fix or Defer with approval | Fix or Defer | Defer | Fix or Defer | Fix with approval or Defer |\n-| RDP2      | Fix with approval or Defer with approval | Fix with approval or Defer with approval | Defer | Defer | Fix or Defer | Defer |\n-| RC        | Fix with approval or Defer with approval | Defer | Defer | Defer | Defer    | Defer    |\n+Please note that the priority of a bug doesn't change just because you want to get your fix in late in the release, or if you want to be able to defer it. The priority is based on the severity of the bug and if it was deemed to be a P2 before, you better have a really good explanation to why that conveniently has changed by the end of the release. Being hard to fix is **not** a reason to lower the priority of a bug.\n@@ -1761,0 +1748,2 @@\n+For example, if you want to push JDK-xxx to the stabilization fork but not to the mainline, you need to file an issue, JDK-yyy, in JBS to back out the fix after it's merged into the mainline. Make sure the two JBS issues (JDK-xxx and JDK-yyy) are related so that it's easy to find one from the other. One common way to do this is to link the two issues using a \"relates to\" link. There are also examples in JBS where JDK-yyy has been created as a sub-task of JDK-xxx. Also see [Backing out a change](#backing-out-a-change) for reference.\n+\n","filename":"src\/index.md","additions":14,"deletions":25,"binary":false,"changes":39,"status":"modified"}]}