{"files":[{"patch":"@@ -336,0 +336,109 @@\n+# Testing Changes\n+\n+In addition to your own Java applications, OpenJDK have support for two test frameworks, JTReg and GTest. JTReg is a Java regression test framework that is used for most of the tests that are included in the OpenJDK source repository. The Google Test (GTest) framework is intended for unit testing of the C++ native code.\n+\n+## JTReg\n+\n+In depth documentation about the JTReg framework is found here: [JTReg harness](https:\/\/openjdk.java.net\/jtreg\/). JTReg itself is available in the [Code Tools Project](https:\/\/openjdk.java.net\/projects\/code-tools\/).\n+\n+Below is a small example of a JTReg test. It’s a clean Java class with a main method that is called from the test harness. If the test fails we throw a RuntimeException. This is picked up by the harness and is reported as a test failure. Try to always write a meaningful message in the exception. One that actually helps with understanding what went wrong once the test fails.\n+\n+    \/*\n+     * @test\n+     * @summary Make sure feature X handles Y correctly\n+     *\/\n+    public class TestXY {\n+        public static void main(String[] args) throws Exception {\n+            var result = X.y();\n+            if (result != expected_result) {\n+                throw new RuntimeException(\"X.y() gave \" + result + \", expexted \" + expected_result);\n+            }\n+        }\n+    }\n+\n+This example only utilizes two JTReg specific tags, `@test` and `@summary`. `@test` simply tells JTReg that this class is a test, and `@summary` provides a description of the test. There are several other tags that can be used in JTReg tests. You can for instance associate the test with a specific bug that this test is a regression test for.\n+\n+    @bug 7000001\n+\n+Or you can specify a number of requirements that must be fulfilled for JTReg to execute the test.\n+\n+    @requires docker.support\n+    @requires os.family != ”windows”\n+    @requires os.maxMemory > 3G\n+    @requires os.arch==\"x86_64\" | os.arch==\"amd64\"\n+\n+You can also specify if the test requires specific modules, and you can specify command line flags and run the test in several different ways.\n+\n+    @modules java.base\/jdk.internal.misc\n+    @run main\/othervm -Xmx128m TestStringEndify\n+\n+Note that you can have several `@run` tags in the same test with different command line options.\n+\n+The [JTReg documentation](https:\/\/openjdk.java.net\/jtreg\/) provides information on many more tags like these.\n+\n+### Running OpenJDK JTReg Tests\n+\n+When configuring the OpenJDK build you can tell it where your JTReg installation is located. When providing this information you can later run `make run-test` to execute JTReg tests.\n+\n+    sh .\/configure --with-jtreg=\/path\/to\/jtreg\n+    make run-test TEST=tier1\n+\n+In the OpenJDK source tree you can find a directory called `test`. There are a large number of tests in this directory that are written to be used with JTReg.\n+\n+    make run-test TEST=test\/jdk\/java\/lang\/String\/\n+\n+You can also run JTReg without invoking make. In this case you’ll need to tell JTReg which JDK to test.\n+\n+    jtreg -jdk:\/path\/to\/jdk \/path\/to\/test\n+\n+## GTest\n+\n+As mentioned the Google test framework is mainly used for C++ unit tests. There are several of these in the `test\/hotspot` directory. The tests can be run without starting the JVM, which enables testing of JVM data structures that would be fragile to play with in a running JVM.\n+\n+    static int demo_comparator(int a, int b) {\n+      if (a == b) {\n+        return 0;\n+      }\n+      if (a < b) {\n+        return -1;\n+      }\n+      return 1;\n+    }\n+\n+    TEST(Demo, quicksort) {\n+      int test_array[] = {7,1,5,3,6,9,8,2,4,0};\n+      int expected_array[] = {0,1,2,3,4,5,6,7,8,9};\n+\n+      QuickSort::sort(test_array, 10, demo_comparator, false);\n+      for (int i = 0; i < 10; i++) {\n+        ASSERT_EQ(expected_array[i], test_array[i]);\n+      }\n+    }\n+\n+`ASSERT_EQ` is one example of an assertion that can be used in the test. Below are a few other examples. A full list is found in the [Google Test Documentation](https:\/\/github.com\/google\/googletest\/blob\/master\/googletest\/docs\/primer.md).\n+\n+    EXPECT_TRUE(condition);\n+    EXPECT_FALSE(condition);\n+    ASSERT_TRUE(condition);\n+    ASSERT_FALSE(condition);\n+    EXPECT_EQ(expected, actual);\n+    EXPECT_NE(val1, val2);\n+    EXPECT_LT(val1, val2);\n+    EXPECT_LE(val1, val2);\n+    EXPECT_GT(val1, val2);\n+    EXPECT_GE(val1, val2);\n+    EXPECT_STREQ(expected_str, actual_str);\n+\n+`ASSERT` is a fatal assertion and will give you fast failure. That means that test execution will be stopped and the failure will be reported. `EXPECT` is a nonfatal assertion and will report the error but continues to run the test. All assertions have both an `ASSERT` and an `EXPECT` variant.\n+\n+### Running OpenJDK GTests\n+\n+To run GTests in OpenJDK use make:\n+\n+    make test-hotspot-gtest\n+\n+You can use the environment variable `GTEST_FILTER` to select subsets of tests. The filter should be a regular expression.\n+\n+    GTEST_FILTER=\"code.*:os.*\"\n+    GTEST_FILTER=\"os.*-os.page_size_*\"\n+\n","filename":"src\/index.md","additions":109,"deletions":0,"binary":false,"changes":109,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-% Testing Changes\n+% Page moved\n@@ -3,17 +3,1 @@\n-::: {.NavBit}\n-[« Previous](reviewBodies.html) • [TOC](index.html) • [Next »](jckAcquisition.html)\n-:::\n-\n-This section will describe the need for tests and will provide an engineering\n-perspective to the different kinds of test suites, including regression tests\n-as run by the [jtreg harness](..\/jtreg\/) and JCK\n-tests. Characteristics of a good regression test will be provided.\n-\n-<!--\n- See also the <a href=\"https:\/\/openjdk.java.net\/groups\/quality\/\">OpenJDK\n-Quality Group<\/a>. \n--->\n-\n-::: {.NavBit}\n-[« Previous](reviewBodies.html) • [TOC](index.html) • [Next »](jckAcquisition.html)\n-:::\n+The OpenJDK Developers' Guide has been merged into a single document. Please update your links to point to the new location: [OpenJDK Developers' Guide](index.html)\n","filename":"src\/testingChanges.md","additions":2,"deletions":18,"binary":false,"changes":20,"status":"modified"}]}