{"files":[{"patch":"@@ -37,0 +37,1 @@\n+* List JTReg `@key` conventions for different areas\n","filename":"README.md","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -340,0 +340,2 @@\n+This section provides a brief summary of how to get started with testing in OpenJDK. For more information on configuration and how to use the OpenJDK test framework, a.k.a. \"run-test framework\", see [`doc\/testing.md`](https:\/\/github.com\/openjdk\/jdk\/blob\/master\/doc\/testing.md).\n+\n@@ -342,1 +344,1 @@\n-In depth documentation about the JTReg framework is found here: [JTReg harness](https:\/\/openjdk.java.net\/jtreg\/). JTReg itself is available in the [Code Tools Project](https:\/\/openjdk.java.net\/projects\/code-tools\/).\n+In-depth documentation about the JTReg framework is found here: [JTReg harness](https:\/\/openjdk.java.net\/jtreg\/). JTReg itself is available in the [Code Tools Project](https:\/\/openjdk.java.net\/projects\/code-tools\/).\n@@ -349,0 +351,1 @@\n+     * @run main TestXY\n@@ -359,1 +362,3 @@\n-This example only utilizes two JTReg specific tags, `@test` and `@summary`. `@test` simply tells JTReg that this class is a test, and `@summary` provides a description of the test. There are several other tags that can be used in JTReg tests. You can for instance associate the test with a specific bug that this test is a regression test for.\n+This example only utilizes three JTReg specific tags, `@test`, `@summary`, and `@run`. `@test` simply tells JTReg that this class is a test, and `@summary` provides a description of the test. `@run` tells JTReg how to execute the test. In this case we simply tell JTReg to execute the main method of the class `TestXY`. `@run` is not strictly necessary for JTReg to execute the test, an implicit `@run` tag will be added if none exists. However, for clarity and in order to avoid bugs it's recommended to always explicitly use the `@run` tag.\n+\n+There are several other tags that can be used in JTReg tests. You can for instance associate the test with a specific bug that this test is a regression test for.\n@@ -373,1 +378,1 @@\n-    @run main\/othervm -Xmx128m TestStringEndify\n+    @run main\/othervm -Xmx128m TestXY\n@@ -377,0 +382,6 @@\n+JTReg also have support for labeling tests with arbitrary keys using the `@key` tag. These keywords can then be used to filter the test selection. For instance if you have a UI test which needs to display a window you'll want to make sure the test harness doesn't try to run this test on a system which doesn't support headful tests. You do this by specifying\n+\n+    @key headful\n+\n+There are many other keywords in use, like `intermittent` and `randomness`, and their usage may differ between areas in the JDK. Make sure you understand the conventions for the particular area you are testing since this is just an example.\n+\n@@ -396,1 +407,1 @@\n-As mentioned the Google test framework is mainly used for C++ unit tests. There are several of these in the `test\/hotspot` directory. The tests can be run without starting the JVM, which enables testing of JVM data structures that would be fragile to play with in a running JVM.\n+As mentioned the Google test framework is mainly used for C++ unit tests. There are several of these in the `test\/hotspot` directory. Currently, only the C++ code in the JVM area is supported by the OpenJDK GTest framework. The tests can be run without starting the JVM, which enables testing of JVM data structures that would be fragile to play with in a running JVM.\n@@ -434,0 +445,2 @@\n+For more information on how to write good GTests in OpenJDK, see [`doc\/hotspot-unit-tests.md`](https:\/\/github.com\/openjdk\/jdk\/blob\/master\/doc\/hotspot-unit-tests.md).\n+\n@@ -436,1 +449,4 @@\n-To run GTests in OpenJDK use make:\n+When configuring the OpenJDK build you can tell it where your GTest installation is located. Once configured, use make to run GTests.\n+\n+    sh .\/configure --with-gtest=\/path\/to\/gtest\n+    make test TEST=gtest\n@@ -438,1 +454,1 @@\n-    make test-hotspot-gtest\n+You can also use a regular expression to filter which tests to run:\n@@ -440,1 +456,2 @@\n-You can use the environment variable `GTEST_FILTER` to select subsets of tests. The filter should be a regular expression.\n+    make test TEST=gtest:code.*:os.*\n+    make test TEST=gtest:$X\/$variant\n@@ -442,2 +459,1 @@\n-    GTEST_FILTER=\"code.*:os.*\"\n-    GTEST_FILTER=\"os.*-os.page_size_*\"\n+The second example above runs tests which match the regexp `$X.*` on a specific variant of the JVM. The variant is one of client, server, etc.\n","filename":"src\/index.md","additions":25,"deletions":9,"binary":false,"changes":34,"status":"modified"}]}