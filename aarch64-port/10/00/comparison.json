{"files":[{"patch":"@@ -4109,0 +4109,4 @@\n+  \/\/ Go to the execute mode, the initial state of the thread on creation.\n+  \/\/ Use os interface as the thread is not a java one anymore.\n+  os::current_thread_enable_wx(WXExec);\n+\n","filename":"src\/hotspot\/share\/prims\/jni.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,41 @@\n+\/*\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @requires os.arch == \"aarch64\" & os.family == \"mac\"\n+ * @run main\/othervm\/native TestCodegenAttach\n+ *\/\n+\n+public class TestCodegenAttach {\n+\n+    static native void testCodegenAttach();\n+\n+    static {\n+        System.loadLibrary(\"codegenAttach\");\n+    }\n+\n+    public static void main(String[] args) throws Throwable {\n+        testCodegenAttach();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/jni\/codegenAttachThread\/TestCodegenAttach.java","additions":41,"deletions":0,"binary":false,"changes":41,"status":"added"},{"patch":"@@ -0,0 +1,115 @@\n+\/*\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <stdbool.h>\n+\n+#include <pthread.h>\n+#include <string.h>\n+\n+#include <sys\/mman.h>\n+\n+#include \"jni.h\"\n+\n+JavaVM* jvm;\n+\n+#ifdef __APPLE__\n+#define MACOS_ONLY(x) x\n+#else \/\/ __APPLE__\n+#define MACOS_ONLY(x)\n+#endif\n+\n+static void* codegen;\n+\n+static int thread_start2(int val) {\n+  JNIEnv *env;\n+  jclass class_id;\n+  jmethodID method_id;\n+  int res;\n+\n+  printf(\"Native thread is running and attaching ...\\n\");\n+\n+  res = (*jvm)->AttachCurrentThread(jvm, (void **)&env, NULL);\n+  if (res != JNI_OK) {\n+    fprintf(stderr, \"Test ERROR. Can't attach current thread: %d\\n\", res);\n+    exit(1);\n+  }\n+\n+  res = (*jvm)->DetachCurrentThread(jvm);\n+  if (res != JNI_OK) {\n+    fprintf(stderr, \"Test ERROR. Can't detach current thread: %d\\n\", res);\n+    exit(1);\n+  }\n+\n+  printf(\"Native thread is about to finish\\n\");\n+  return 1 + val;\n+}\n+\n+static int trampoline(int(*fn)(int), int arg) {\n+  int val = fn(arg);\n+  \/\/ ensure code in MAP_JIT area after target function returns\n+  return 1 + val;\n+}\n+\n+static void * thread_start(void* unused) {\n+  int val = ((int(*)(int(*)(int),int))codegen)(thread_start2, 10);\n+  printf(\"return val = %d\\n\", val);\n+  return NULL;\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_TestCodegenAttach_testCodegenAttach\n+(JNIEnv *env, jclass cls) {\n+\n+  codegen = mmap(NULL, 0x1000,\n+      PROT_READ | PROT_WRITE | PROT_EXEC,\n+      MAP_PRIVATE | MAP_ANONYMOUS MACOS_ONLY(| MAP_JIT), -1, 0);\n+  if (codegen == MAP_FAILED) {\n+    perror(\"mmap\");\n+    exit(1);\n+  }\n+\n+  MACOS_ONLY(pthread_jit_write_protect_np(false));\n+\n+  memcpy(codegen, trampoline, 128);\n+\n+  MACOS_ONLY(pthread_jit_write_protect_np(true));\n+\n+  pthread_t thread;\n+  int res = (*env)->GetJavaVM(env, &jvm);\n+  if (res != JNI_OK) {\n+    fprintf(stderr, \"Test ERROR. Can't extract JavaVM: %d\\n\", res);\n+    exit(1);\n+  }\n+\n+  if ((res = pthread_create(&thread, NULL, thread_start, NULL)) != 0) {\n+    fprintf(stderr, \"TEST ERROR: pthread_create failed: %s (%d)\\n\", strerror(res), res);\n+    exit(1);\n+  }\n+\n+  if ((res = pthread_join(thread, NULL)) != 0) {\n+    fprintf(stderr, \"TEST ERROR: pthread_join failed: %s (%d)\\n\", strerror(res), res);\n+    exit(1);\n+  }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/jni\/codegenAttachThread\/libcodegenAttach.c","additions":115,"deletions":0,"binary":false,"changes":115,"status":"added"}]}