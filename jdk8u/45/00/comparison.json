{"files":[{"patch":"@@ -37,1 +37,1 @@\n-\n+import sun.nio.cs.ext.GB18030;\n@@ -118,3 +118,8 @@\n-    private String canonicalize(String charsetName) {\n-        String acn = aliasMap.get(charsetName);\n-        return (acn != null) ? acn : charsetName;\n+    private String canonicalize(String csn) {\n+        if (csn.startsWith(\"gb18030-\")) {\n+            return csn.equals(\"gb18030-2022\") && !GB18030.IS_2000 ||\n+                   csn.equals(\"gb18030-2000\") && GB18030.IS_2000 ? \"gb18030\" : csn;\n+        } else {\n+            String acn = aliasMap.get(csn);\n+            return (acn != null) ? acn : csn;\n+        }\n","filename":"jdk\/src\/share\/classes\/sun\/nio\/cs\/AbstractCharsetProvider.java","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,3 +28,0 @@\n-import java.lang.ref.SoftReference;\n-import java.nio.charset.Charset;\n-import java.nio.charset.spi.CharsetProvider;\n@@ -120,1 +117,1 @@\n-                    \"gb18030-2000\"\n+                    GB18030.IS_2000 ? \"gb18030-2000\" : \"gb18030-2022\"\n","filename":"jdk\/src\/share\/classes\/sun\/nio\/cs\/ext\/ExtendedCharsets.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2011, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,1 @@\n+import sun.misc.VM;\n@@ -38,0 +39,1 @@\n+import sun.security.action.GetPropertyAction;\n@@ -46,0 +48,6 @@\n+    \/\/ Assumes non-2000 standard if initialized during System.initPhase1(),\n+    \/\/ as the system property is not ready to be read in that case.\n+    public static final boolean IS_2000 =\n+        VM.isBooted() &&\n+        \"2000\".equals(GetPropertyAction.privilegedGetProperty(\"jdk.charset.GB18030\", \"\"));\n+\n@@ -1048,1 +1056,2 @@\n-        \"\\u1E3E\\u1E3F\\u1E40\\u1E41\\u1E42\\u1E43\\u1E44\\u1E45\"+\n+        (IS_2000 ? \"\\u1E3E\\u1E3F\\u1E40\\u1E41\\u1E42\\u1E43\\u1E44\\u1E45\" :\n+                   \"\\u1E3E\\uE7C7\\u1E40\\u1E41\\u1E42\\u1E43\\u1E44\\u1E45\")+\n@@ -2504,2 +2513,4 @@\n-        \"\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\"+\n-        \"\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\"+\n+        (IS_2000 ? \"\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\"+\n+                   \"\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\" :\n+                   \"\\uFFFD\\uE81E\\uE826\\uE82B\\uE82C\\uE832\\uE843\\uE854\"+\n+                   \"\\uE864\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\\uFFFD\")+\n@@ -2768,2 +2779,4 @@\n-        \"\\uFE0C\\uFE0D\\uFE0E\\uFE0F\\uFE10\\uFE11\\uFE12\\uFE13\"+\n-        \"\\uFE14\\uFE15\\uFE16\\uFE17\\uFE18\\uFE19\\uFE1A\\uFE1B\"+\n+        (IS_2000 ? \"\\uFE0C\\uFE0D\\uFE0E\\uFE0F\\uFE10\\uFE11\\uFE12\\uFE13\"+\n+                   \"\\uFE14\\uFE15\\uFE16\\uFE17\\uFE18\\uFE19\\uFE1A\\uFE1B\" :\n+                   \"\\uFE0C\\uFE0D\\uFE0E\\uFE0F\\uE78D\\uE78F\\uE78E\\uE790\"+\n+                   \"\\uE791\\uE792\\uE793\\uE794\\uE795\\uE796\\uFE1A\\uFE1B\")+\n@@ -3775,4 +3788,8 @@\n-        \"\\u03C7\\u03C8\\u03C9\\uE78D\\uE78E\\uE78F\\uE790\\uE791\"+\n-        \"\\uE792\\uE793\\uFE35\\uFE36\\uFE39\\uFE3A\\uFE3F\\uFE40\"+\n-        \"\\uFE3D\\uFE3E\\uFE41\\uFE42\\uFE43\\uFE44\\uE794\\uE795\"+\n-        \"\\uFE3B\\uFE3C\\uFE37\\uFE38\\uFE31\\uE796\\uFE33\\uFE34\"+\n+        (IS_2000 ? \"\\u03C7\\u03C8\\u03C9\\uE78D\\uE78E\\uE78F\\uE790\\uE791\"+\n+                   \"\\uE792\\uE793\\uFE35\\uFE36\\uFE39\\uFE3A\\uFE3F\\uFE40\"+\n+                   \"\\uFE3D\\uFE3E\\uFE41\\uFE42\\uFE43\\uFE44\\uE794\\uE795\"+\n+                   \"\\uFE3B\\uFE3C\\uFE37\\uFE38\\uFE31\\uE796\\uFE33\\uFE34\" :\n+                   \"\\u03C7\\u03C8\\u03C9\\uFE10\\uFE12\\uFE11\\uFE13\\uFE14\"+\n+                   \"\\uFE15\\uFE16\\uFE35\\uFE36\\uFE39\\uFE3A\\uFE3F\\uFE40\"+\n+                   \"\\uFE3D\\uFE3E\\uFE41\\uFE42\\uFE43\\uFE44\\uFE17\\uFE18\"+\n+                   \"\\uFE3B\\uFE3C\\uFE37\\uFE38\\uFE31\\uFE19\\uFE33\\uFE34\")+\n@@ -3819,1 +3836,2 @@\n-        \"\\u01DC\\u00FC\\u00EA\\u0251\\uE7C7\\u0144\\u0148\\u01F9\"+\n+        (IS_2000 ? \"\\u01DC\\u00FC\\u00EA\\u0251\\uE7C7\\u0144\\u0148\\u01F9\" :\n+                   \"\\u01DC\\u00FC\\u00EA\\u0251\\u1E3F\\u0144\\u0148\\u01F9\")+\n@@ -5870,3 +5888,6 @@\n-        \"\\u3447\\u2E88\\u2E8B\\uE81E\\u359E\\u361A\\u360E\\u2E8C\"+\n-        \"\\u2E97\\u396E\\u3918\\uE826\\u39CF\\u39DF\\u3A73\\u39D0\"+\n-        \"\\uE82B\\uE82C\\u3B4E\\u3C6E\\u3CE0\\u2EA7\\uE831\\uE832\"+\n+        (IS_2000 ? \"\\u3447\\u2E88\\u2E8B\\uE81E\\u359E\\u361A\\u360E\\u2E8C\"+\n+                   \"\\u2E97\\u396E\\u3918\\uE826\\u39CF\\u39DF\\u3A73\\u39D0\"+\n+                   \"\\uE82B\\uE82C\\u3B4E\\u3C6E\\u3CE0\\u2EA7\\uE831\\uE832\" :\n+                   \"\\u3447\\u2E88\\u2E8B\\u9FB4\\u359E\\u361A\\u360E\\u2E8C\"+\n+                   \"\\u2E97\\u396E\\u3918\\u9FB5\\u39CF\\u39DF\\u3A73\\u39D0\"+\n+                   \"\\u9FB6\\u9FB7\\u3B4E\\u3C6E\\u3CE0\\u2EA7\\uE831\\u9FB8\")+\n@@ -5875,1 +5896,2 @@\n-        \"\\uE843\\uFFFD\\u4723\\u4729\\u477C\\u478D\\u2ECA\\u4947\"+\n+        (IS_2000 ? \"\\uE843\\uFFFD\\u4723\\u4729\\u477C\\u478D\\u2ECA\\u4947\" :\n+                   \"\\u9FB9\\uFFFD\\u4723\\u4729\\u477C\\u478D\\u2ECA\\u4947\")+\n@@ -5877,1 +5899,2 @@\n-        \"\\u49B7\\u49B6\\uE854\\uE855\\u4CA3\\u4C9F\\u4CA0\\u4CA1\"+\n+        (IS_2000 ? \"\\u49B7\\u49B6\\uE854\\uE855\\u4CA3\\u4C9F\\u4CA0\\u4CA1\" :\n+                   \"\\u49B7\\u49B6\\u9FBA\\uE855\\u4CA3\\u4C9F\\u4CA0\\u4CA1\")+\n@@ -5879,1 +5902,2 @@\n-        \"\\u4D19\\u4DAE\\uE864\\uE468\\uE469\\uE46A\\uE46B\\uE46C\"+\n+        (IS_2000 ? \"\\u4D19\\u4DAE\\uE864\\uE468\\uE469\\uE46A\\uE46B\\uE46C\" :\n+                   \"\\u4D19\\u4DAE\\u9FBB\\uE468\\uE469\\uE46A\\uE46B\\uE46C\")+\n@@ -6897,1 +6921,2 @@\n-        \"\\u3D1A\\u3D1B\\u3D1C\\u3D1D\\u3D1E\\u3D1F\\u3D20\\u3D21\"+\n+        (IS_2000 ? \"\\u3D1A\\u3D1B\\u3D1C\\u3D1D\\u3D1E\\u3D1F\\u3D20\\u3D21\" :\n+                   \"\\u3D1A\\u3D1B\\u3D1C\\u3D1D\\u3D1E\\u3D1F\\u3D20\\uA8BC\")+\n@@ -11056,2 +11081,4 @@\n-        \"\\u6A6D\\u6A6E\\u6A6F\\u6A70\\u6A71\\u6A72\\u6A73\\u6A74\"+\n-        \"\\u6A75\\u6A76\\u6A77\\u6A78\\u6A79\\u6A7A\\u6A7B\\u6A7C\"+\n+        (IS_2000 ? \"\\u6A6D\\u6A6E\\u6A6F\\u6A70\\u6A71\\u6A72\\u6A73\\u6A74\"+\n+                   \"\\u6A75\\u6A76\\u6A77\\u6A78\\u6A79\\u6A7A\\u6A7B\\u6A7C\" :\n+                   \"\\u6A6D\\u6A6E\\u6A6F\\u6A70\\uFE59\\uFE61\\uFE66\\uFE67\"+\n+                   \"\\uFE6D\\uFE7E\\uFE90\\uFEA0\\u6A79\\u6A7A\\u6A7B\\u6A7C\")+\n@@ -11469,2 +11496,4 @@\n-        \"\\uA6BC\\uA6BD\\uA6BE\\uA6BF\\uA6C0\\uA6D9\\uA6DA\\uA6DB\"+\n-        \"\\uA6DC\\uA6DD\\uA6DE\\uA6DF\\uA6EC\\uA6ED\\uA6F3\\uA6F6\"+\n+        (IS_2000 ? \"\\uA6BC\\uA6BD\\uA6BE\\uA6BF\\uA6C0\\uA6D9\\uA6DA\\uA6DB\"+\n+                   \"\\uA6DC\\uA6DD\\uA6DE\\uA6DF\\uA6EC\\uA6ED\\uA6F3\\uA6F6\" :\n+                   \"\\uA6BC\\uA6BD\\uA6BE\\uA6BF\\uA6C0\\u35E7\\u35E9\\u35E8\"+\n+                   \"\\u35EA\\u35EB\\u35EC\\u35ED\\u35EE\\u35EF\\u35F0\\uA6F6\")+\n@@ -11476,1 +11505,2 @@\n-        \"\\uA89A\\uA89B\\uA89C\\uA89D\\uA89E\\uA89F\\uA8A0\\uA8BC\"+\n+        (IS_2000 ? \"\\uA89A\\uA89B\\uA89C\\uA89D\\uA89E\\uA89F\\uA8A0\\uA8BC\" :\n+                   \"\\uA89A\\uA89B\\uA89C\\uA89D\\uA89E\\uA89F\\uA8A0\\u3D21\")+\n@@ -11487,4 +11517,8 @@\n-        \"\\uFE53\\u2010\\u2011\\u2012\\u2013\\u2014\\uFE59\\u2015\"+\n-        \"\\u2016\\u2017\\u2018\\u2019\\u201A\\u201B\\uFE61\\u201C\"+\n-        \"\\u201D\\u201E\\u201F\\uFE66\\uFE67\\u2020\\u2021\\u2022\"+\n-        \"\\u2023\\uFE6C\\uFE6D\\u2024\\u2025\\u2026\\u2027\\u2028\"+\n+        (IS_2000 ? \"\\uFE53\\u2010\\u2011\\u2012\\u2013\\u2014\\uFE59\\u2015\"+\n+                    \"\\u2016\\u2017\\u2018\\u2019\\u201A\\u201B\\uFE61\\u201C\"+\n+                    \"\\u201D\\u201E\\u201F\\uFE66\\uFE67\\u2020\\u2021\\u2022\"+\n+                    \"\\u2023\\uFE6C\\uFE6D\\u2024\\u2025\\u2026\\u2027\\u2028\" :\n+                    \"\\uFE53\\u2010\\u2011\\u2012\\u2013\\u2014\\u6A71\\u2015\"+\n+                    \"\\u2016\\u2017\\u2018\\u2019\\u201A\\u201B\\u6A72\\u201C\"+\n+                    \"\\u201D\\u201E\\u201F\\u6A73\\u6A74\\u2020\\u2021\\u2022\"+\n+                    \"\\u2023\\uFE6C\\u6A75\\u2024\\u2025\\u2026\\u2027\\u2028\")+\n@@ -11492,1 +11526,2 @@\n-        \"\\u2030\\u2031\\u2032\\uFE7E\\u2033\\u2034\\u2035\\u2036\"+\n+        (IS_2000 ? \"\\u2030\\u2031\\u2032\\uFE7E\\u2033\\u2034\\u2035\\u2036\" :\n+                   \"\\u2030\\u2031\\u2032\\u6A76\\u2033\\u2034\\u2035\\u2036\")+\n@@ -11494,1 +11529,2 @@\n-        \"\\u203F\\u2040\\u2041\\u2042\\uFE90\\uFE91\\u2043\\u2044\"+\n+        (IS_2000 ? \"\\u203F\\u2040\\u2041\\u2042\\uFE90\\uFE91\\u2043\\u2044\" :\n+                   \"\\u203F\\u2040\\u2041\\u2042\\u6A77\\uFE91\\u2043\\u2044\")+\n@@ -11496,1 +11532,2 @@\n-        \"\\u204D\\u204E\\u204F\\u2050\\uFEA0\\u2051\\u2052\\u2053\"+\n+        (IS_2000 ? \"\\u204D\\u204E\\u204F\\u2050\\uFEA0\\u2051\\u2052\\u2053\" :\n+                   \"\\u204D\\u204E\\u204F\\u2050\\u6A78\\u2051\\u2052\\u2053\")+\n@@ -12194,2 +12231,4 @@\n-        \"\\u24FB\\u24FC\\u24FD\\u24FE\\u24FF\\u2500\\u2501\\u2502\"+\n-        \"\\u2503\\u2504\\u2505\\u2506\\u2507\\u2508\\u2509\\u250A\"+\n+        (IS_2000 ? \"\\u24FB\\u24FC\\u24FD\\u24FE\\u24FF\\u2500\\u2501\\u2502\"+\n+                   \"\\u2503\\u2504\\u2505\\u2506\\u2507\\u2508\\u2509\\u250A\" :\n+                   \"\\uA6D9\\uA6DB\\uA6DA\\uA6DC\\uA6DD\\uA6DE\\uA6DF\\uA6EC\"+\n+                   \"\\uA6ED\\uA6F3\\u2505\\u2506\\u2507\\u2508\\u2509\\u250A\")+\n@@ -12412,2 +12451,7 @@\n-                        else if (offset > 0x4A62 && offset <= 0x82BC)\n-                            da[dp++] = (char)(offset + 0x5543);\n+                        else if (offset > 0x4A62 && offset <= 0x82BC) {\n+                            if (offset >= 0x4A71 && offset <= 0x4A78 && !IS_2000) {\n+                                da[dp++] = getChar(offset);\n+                            } else {\n+                                da[dp++] = (char)(offset + 0x5543);\n+                            }\n+                        }\n@@ -12515,2 +12559,7 @@\n-                        else if (offset > 0x4A62 && offset <= 0x82BC)\n-                            dst.put((char)(offset + 0x5543));\n+                        else if (offset > 0x4A62 && offset <= 0x82BC) {\n+                            if (offset >= 0x4A71 && offset <= 0x4A78 && !IS_2000) {\n+                                dst.put(getChar(offset));\n+                            } else {\n+                                dst.put((char)(offset + 0x5543));\n+                            }\n+                        }\n@@ -12629,1 +12678,2 @@\n-                        if (c >= 0xE000 && c < 0xF900)\n+                        if (c >= 0xE000 && c < 0xF900) {\n+                            if (IS_2000) {\n@@ -12631,0 +12681,17 @@\n+                            } else {\n+                                switch (c) {\n+                                    case 0xE7C7:\n+                                    case 0xE81E:\n+                                    case 0xE826:\n+                                    case 0xE82B:\n+                                    case 0xE82C:\n+                                    case 0xE832:\n+                                    case 0xE843:\n+                                    case 0xE854:\n+                                    case 0xE864:\n+                                        break;\n+                                    default:\n+                                        condensedKey += 0x82BD;\n+                                };\n+                            }\n+                        }\n@@ -12632,1 +12699,1 @@\n-                                condensedKey += 0x93A9;\n+                            condensedKey += 0x93A9;\n@@ -12635,1 +12702,1 @@\n-                             currentState = GB18030_DOUBLE_BYTE;\n+                            currentState = GB18030_DOUBLE_BYTE;\n@@ -12637,1 +12704,1 @@\n-                             currentState = GB18030_FOUR_BYTE;\n+                            currentState = GB18030_FOUR_BYTE;\n@@ -12680,1 +12747,1 @@\n-            return CoderResult.UNDERFLOW;\n+                return CoderResult.UNDERFLOW;\n@@ -12720,1 +12787,2 @@\n-                        if (c >= 0xE000 && c < 0xF900)\n+                        if (c >= 0xE000 && c < 0xF900) {\n+                            if (IS_2000) {\n@@ -12722,0 +12790,17 @@\n+                            } else {\n+                                switch (c) {\n+                                    case 0xE7C7:\n+                                    case 0xE81E:\n+                                    case 0xE826:\n+                                    case 0xE82B:\n+                                    case 0xE82C:\n+                                    case 0xE832:\n+                                    case 0xE843:\n+                                    case 0xE854:\n+                                    case 0xE864:\n+                                        break;\n+                                    default:\n+                                        condensedKey += 0x82BD;\n+                                };\n+                            }\n+                        }\n@@ -12723,1 +12808,1 @@\n-                                condensedKey += 0x93A9;\n+                            condensedKey += 0x93A9;\n@@ -12726,1 +12811,1 @@\n-                             currentState = GB18030_DOUBLE_BYTE;\n+                            currentState = GB18030_DOUBLE_BYTE;\n@@ -12728,1 +12813,1 @@\n-                             currentState = GB18030_FOUR_BYTE;\n+                            currentState = GB18030_FOUR_BYTE;\n","filename":"jdk\/src\/share\/classes\/sun\/nio\/cs\/ext\/GB18030.java","additions":130,"deletions":45,"binary":false,"changes":175,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,2 @@\n- * @bug 4473201 4696726 4652234 4482298 4784385 4966197 4267354 5015668 6911753\n+ * @bug 4473201 4696726 4652234 4482298 4784385 4966197 4267354 5015668\n+        6911753 8071447 8301119\n@@ -27,0 +28,2 @@\n+ * @run main RegisteredCharsets\n+ * @run main\/othervm -Djdk.charset.GB18030=2000 RegisteredCharsets\n@@ -253,0 +256,1 @@\n+                \"2000\".equals(System.getProperty(\"jdk.charset.GB18030\")) ?\n@@ -255,0 +259,3 @@\n+                } :\n+                new String[] {\n+                    \"gb18030-2022\"\n","filename":"jdk\/test\/java\/nio\/charset\/Charset\/RegisteredCharsets.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -37,0 +37,2 @@\n+\n+import java.util.Arrays;\n@@ -38,0 +40,2 @@\n+import java.util.Collections;\n+import java.util.HashSet;\n@@ -39,1 +43,0 @@\n-import java.util.Arrays;\n@@ -41,0 +44,2 @@\n+import java.util.Objects;\n+import java.util.Set;\n@@ -46,2 +51,0 @@\n-import java.util.Collections;\n-import java.util.Objects;\n@@ -467,0 +470,778 @@\n+\n+    \/*\n+       List.of implementations\n+       These methods are intended to provide replacements\n+       for the use of List.of() methods in backports,\n+       using existing 8u methods. The returned collections\n+       share the key property of the List.of collections\n+       in being unmodifiable, but may not be equivalent\n+       with regard to other properties such as serialization\n+       and access order.\n+    *\/\n+\n+    \/**\n+     * Returns an unmodifiable list containing zero elements.\n+     *\n+     * @param <E> the {@code List}'s element type\n+     * @return an empty {@code List}\n+     *\/\n+    public static <E> List<E> listOf() {\n+        return Collections.emptyList();\n+    }\n+\n+    \/**\n+     * Returns an unmodifiable list containing one element.\n+     *\n+     * @param <E> the {@code List}'s element type\n+     * @param e1 the single element\n+     * @return a {@code List} containing the specified element\n+     * @throws NullPointerException if the element is {@code null}\n+     *\/\n+    public static <E> List<E> listOf(E e1) {\n+        if (e1 == null) { throw new NullPointerException(\"e1\"); }\n+        return Collections.singletonList(e1);\n+    }\n+\n+    \/**\n+     * Returns an unmodifiable list containing two elements.\n+     *\n+     * @param <E> the {@code List}'s element type\n+     * @param e1 the first element\n+     * @param e2 the second element\n+     * @return a {@code List} containing the specified elements\n+     * @throws NullPointerException if an element is {@code null}\n+     *\/\n+    public static <E> List<E> listOf(E e1, E e2) {\n+        if (e1 == null) { throw new NullPointerException(\"e1\"); }\n+        if (e2 == null) { throw new NullPointerException(\"e2\"); }\n+        List<E> l = new ArrayList<>(2);\n+        l.add(e1);\n+        l.add(e2);\n+        return Collections.unmodifiableList(l);\n+    }\n+\n+    \/**\n+     * Returns an unmodifiable list containing three elements.\n+     *\n+     * @param <E> the {@code List}'s element type\n+     * @param e1 the first element\n+     * @param e2 the second element\n+     * @param e3 the third element\n+     * @return a {@code List} containing the specified elements\n+     * @throws NullPointerException if an element is {@code null}\n+     *\/\n+    public static <E> List<E> listOf(E e1, E e2, E e3) {\n+        if (e1 == null) { throw new NullPointerException(\"e1\"); }\n+        if (e2 == null) { throw new NullPointerException(\"e2\"); }\n+        if (e3 == null) { throw new NullPointerException(\"e3\"); }\n+        List<E> l = new ArrayList<>(3);\n+        l.add(e1);\n+        l.add(e2);\n+        l.add(e3);\n+        return Collections.unmodifiableList(l);\n+    }\n+\n+    \/**\n+     * Returns an unmodifiable list containing four elements.\n+     *\n+     * @param <E> the {@code List}'s element type\n+     * @param e1 the first element\n+     * @param e2 the second element\n+     * @param e3 the third element\n+     * @param e4 the fourth element\n+     * @return a {@code List} containing the specified elements\n+     * @throws NullPointerException if an element is {@code null}\n+     *\/\n+    public static <E> List<E> listOf(E e1, E e2, E e3, E e4) {\n+        if (e1 == null) { throw new NullPointerException(\"e1\"); }\n+        if (e2 == null) { throw new NullPointerException(\"e2\"); }\n+        if (e3 == null) { throw new NullPointerException(\"e3\"); }\n+        if (e4 == null) { throw new NullPointerException(\"e4\"); }\n+        List<E> l = new ArrayList<>(4);\n+        l.add(e1);\n+        l.add(e2);\n+        l.add(e3);\n+        l.add(e4);\n+        return Collections.unmodifiableList(l);\n+    }\n+\n+    \/**\n+     * Returns an unmodifiable list containing five elements.\n+     *\n+     * @param <E> the {@code List}'s element type\n+     * @param e1 the first element\n+     * @param e2 the second element\n+     * @param e3 the third element\n+     * @param e4 the fourth element\n+     * @param e5 the fifth element\n+     * @return a {@code List} containing the specified elements\n+     * @throws NullPointerException if an element is {@code null}\n+     *\/\n+    public static <E> List<E> listOf(E e1, E e2, E e3, E e4, E e5) {\n+        if (e1 == null) { throw new NullPointerException(\"e1\"); }\n+        if (e2 == null) { throw new NullPointerException(\"e2\"); }\n+        if (e3 == null) { throw new NullPointerException(\"e3\"); }\n+        if (e4 == null) { throw new NullPointerException(\"e4\"); }\n+        if (e5 == null) { throw new NullPointerException(\"e5\"); }\n+        List<E> l = new ArrayList<>(5);\n+        l.add(e1);\n+        l.add(e2);\n+        l.add(e3);\n+        l.add(e4);\n+        l.add(e5);\n+        return Collections.unmodifiableList(l);\n+    }\n+\n+    \/**\n+     * Returns an unmodifiable list containing six elements.\n+     *\n+     * @param <E> the {@code List}'s element type\n+     * @param e1 the first element\n+     * @param e2 the second element\n+     * @param e3 the third element\n+     * @param e4 the fourth element\n+     * @param e5 the fifth element\n+     * @param e6 the sixth element\n+     * @return a {@code List} containing the specified elements\n+     * @throws NullPointerException if an element is {@code null}\n+     *\/\n+    public static <E> List<E> listOf(E e1, E e2, E e3, E e4, E e5, E e6) {\n+        if (e1 == null) { throw new NullPointerException(\"e1\"); }\n+        if (e2 == null) { throw new NullPointerException(\"e2\"); }\n+        if (e3 == null) { throw new NullPointerException(\"e3\"); }\n+        if (e4 == null) { throw new NullPointerException(\"e4\"); }\n+        if (e5 == null) { throw new NullPointerException(\"e5\"); }\n+        if (e6 == null) { throw new NullPointerException(\"e6\"); }\n+        List<E> l = new ArrayList<>(6);\n+        l.add(e1);\n+        l.add(e2);\n+        l.add(e3);\n+        l.add(e4);\n+        l.add(e5);\n+        l.add(e6);\n+        return Collections.unmodifiableList(l);\n+    }\n+\n+    \/**\n+     * Returns an unmodifiable list containing seven elements.\n+     *\n+     * @param <E> the {@code List}'s element type\n+     * @param e1 the first element\n+     * @param e2 the second element\n+     * @param e3 the third element\n+     * @param e4 the fourth element\n+     * @param e5 the fifth element\n+     * @param e6 the sixth element\n+     * @param e7 the seventh element\n+     * @return a {@code List} containing the specified elements\n+     * @throws NullPointerException if an element is {@code null}\n+     *\/\n+    public static <E> List<E> listOf(E e1, E e2, E e3, E e4, E e5, E e6, E e7) {\n+        if (e1 == null) { throw new NullPointerException(\"e1\"); }\n+        if (e2 == null) { throw new NullPointerException(\"e2\"); }\n+        if (e3 == null) { throw new NullPointerException(\"e3\"); }\n+        if (e4 == null) { throw new NullPointerException(\"e4\"); }\n+        if (e5 == null) { throw new NullPointerException(\"e5\"); }\n+        if (e6 == null) { throw new NullPointerException(\"e6\"); }\n+        if (e7 == null) { throw new NullPointerException(\"e7\"); }\n+        List<E> l = new ArrayList<>(7);\n+        l.add(e1);\n+        l.add(e2);\n+        l.add(e3);\n+        l.add(e4);\n+        l.add(e5);\n+        l.add(e6);\n+        l.add(e7);\n+        return Collections.unmodifiableList(l);\n+    }\n+\n+    \/**\n+     * Returns an unmodifiable list containing eight elements.\n+     *\n+     * @param <E> the {@code List}'s element type\n+     * @param e1 the first element\n+     * @param e2 the second element\n+     * @param e3 the third element\n+     * @param e4 the fourth element\n+     * @param e5 the fifth element\n+     * @param e6 the sixth element\n+     * @param e7 the seventh element\n+     * @param e8 the eighth element\n+     * @return a {@code List} containing the specified elements\n+     * @throws NullPointerException if an element is {@code null}\n+     *\/\n+    public static <E> List<E> listOf(E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8) {\n+        if (e1 == null) { throw new NullPointerException(\"e1\"); }\n+        if (e2 == null) { throw new NullPointerException(\"e2\"); }\n+        if (e3 == null) { throw new NullPointerException(\"e3\"); }\n+        if (e4 == null) { throw new NullPointerException(\"e4\"); }\n+        if (e5 == null) { throw new NullPointerException(\"e5\"); }\n+        if (e6 == null) { throw new NullPointerException(\"e6\"); }\n+        if (e7 == null) { throw new NullPointerException(\"e7\"); }\n+        if (e8 == null) { throw new NullPointerException(\"e8\"); }\n+        List<E> l = new ArrayList<>(8);\n+        l.add(e1);\n+        l.add(e2);\n+        l.add(e3);\n+        l.add(e4);\n+        l.add(e5);\n+        l.add(e6);\n+        l.add(e7);\n+        l.add(e8);\n+        return Collections.unmodifiableList(l);\n+    }\n+\n+    \/**\n+     * Returns an unmodifiable list containing nine elements.\n+     *\n+     * @param <E> the {@code List}'s element type\n+     * @param e1 the first element\n+     * @param e2 the second element\n+     * @param e3 the third element\n+     * @param e4 the fourth element\n+     * @param e5 the fifth element\n+     * @param e6 the sixth element\n+     * @param e7 the seventh element\n+     * @param e8 the eighth element\n+     * @param e9 the ninth element\n+     * @return a {@code List} containing the specified elements\n+     * @throws NullPointerException if an element is {@code null}\n+     *\/\n+    public static <E> List<E> listOf(E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8, E e9) {\n+        if (e1 == null) { throw new NullPointerException(\"e1\"); }\n+        if (e2 == null) { throw new NullPointerException(\"e2\"); }\n+        if (e3 == null) { throw new NullPointerException(\"e3\"); }\n+        if (e4 == null) { throw new NullPointerException(\"e4\"); }\n+        if (e5 == null) { throw new NullPointerException(\"e5\"); }\n+        if (e6 == null) { throw new NullPointerException(\"e6\"); }\n+        if (e7 == null) { throw new NullPointerException(\"e7\"); }\n+        if (e8 == null) { throw new NullPointerException(\"e8\"); }\n+        if (e9 == null) { throw new NullPointerException(\"e9\"); }\n+        List<E> l = new ArrayList<>(9);\n+        l.add(e1);\n+        l.add(e2);\n+        l.add(e3);\n+        l.add(e4);\n+        l.add(e5);\n+        l.add(e6);\n+        l.add(e7);\n+        l.add(e8);\n+        l.add(e9);\n+        return Collections.unmodifiableList(l);\n+    }\n+\n+    \/**\n+     * Returns an unmodifiable list containing ten elements.\n+     *\n+     * @param <E> the {@code List}'s element type\n+     * @param e1 the first element\n+     * @param e2 the second element\n+     * @param e3 the third element\n+     * @param e4 the fourth element\n+     * @param e5 the fifth element\n+     * @param e6 the sixth element\n+     * @param e7 the seventh element\n+     * @param e8 the eighth element\n+     * @param e9 the ninth element\n+     * @param e10 the tenth element\n+     * @return a {@code List} containing the specified elements\n+     * @throws NullPointerException if an element is {@code null}\n+     *\/\n+    public static <E> List<E> listOf(E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8, E e9, E e10) {\n+        if (e1 == null) { throw new NullPointerException(\"e1\"); }\n+        if (e2 == null) { throw new NullPointerException(\"e2\"); }\n+        if (e3 == null) { throw new NullPointerException(\"e3\"); }\n+        if (e4 == null) { throw new NullPointerException(\"e4\"); }\n+        if (e5 == null) { throw new NullPointerException(\"e5\"); }\n+        if (e6 == null) { throw new NullPointerException(\"e6\"); }\n+        if (e7 == null) { throw new NullPointerException(\"e7\"); }\n+        if (e8 == null) { throw new NullPointerException(\"e8\"); }\n+        if (e9 == null) { throw new NullPointerException(\"e9\"); }\n+        if (e10 == null) { throw new NullPointerException(\"e10\"); }\n+        List<E> l = new ArrayList<>(10);\n+        l.add(e1);\n+        l.add(e2);\n+        l.add(e3);\n+        l.add(e4);\n+        l.add(e5);\n+        l.add(e6);\n+        l.add(e7);\n+        l.add(e8);\n+        l.add(e9);\n+        l.add(e10);\n+        return Collections.unmodifiableList(l);\n+    }\n+\n+    \/**\n+     * Returns an unmodifiable list containing an arbitrary number of elements.\n+     *\n+     * @apiNote\n+     * This method also accepts a single array as an argument. The element type of\n+     * the resulting list will be the component type of the array, and the size of\n+     * the list will be equal to the length of the array. To create a list with\n+     * a single element that is an array, do the following:\n+     *\n+     * <pre>{@code\n+     *     String[] array = ... ;\n+     *     List<String[]> list = Utils.<String[]>listOf(array);\n+     * }<\/pre>\n+     *\n+     * This will cause the {@link Utils#listOf(Object) listOf(E)} method\n+     * to be invoked instead.\n+     *\n+     * @param <E> the {@code List}'s element type\n+     * @param elements the elements to be contained in the list\n+     * @return a {@code List} containing the specified elements\n+     * @throws NullPointerException if an element is {@code null} or if the array is {@code null}\n+     *\/\n+    @SafeVarargs\n+    @SuppressWarnings(\"varargs\")\n+    public static <E> List<E> listOf(E... elements) {\n+        switch (elements.length) { \/\/ implicit null check of elements\n+            case 0:\n+                return listOf();\n+            case 1:\n+                return listOf(elements[0]);\n+            case 2:\n+                return listOf(elements[0], elements[1]);\n+            default:\n+                for (int a = 0; a < elements.length; ++a) {\n+                    if (elements[a] == null) { throw new NullPointerException(\"e\" + a); }\n+                }\n+                return Collections.unmodifiableList(Arrays.asList(elements));\n+        }\n+    }\n+\n+    \/*\n+       Set.of implementations\n+       These methods are intended to provide replacements\n+       for the use of Set.of() methods in backports,\n+       using existing 8u methods. The returned collections\n+       share the key property of the Set.of collections\n+       in being unmodifiable, but may not be equivalent\n+       with regard to other properties such as serialization\n+       and access order.\n+    *\/\n+\n+    \/**\n+     * Returns an unmodifiable set containing zero elements.\n+     *\n+     * @param <E> the {@code Set}'s element type\n+     * @return an empty {@code Set}\n+     *\/\n+    public static <E> Set<E> setOf() {\n+        return Collections.emptySet();\n+    }\n+\n+    \/**\n+     * Returns an unmodifiable set containing one element.\n+     *\n+     * @param <E> the {@code Set}'s element type\n+     * @param e1 the single element\n+     * @return a {@code Set} containing the specified element\n+     * @throws NullPointerException if the element is {@code null}\n+     *\/\n+    public static <E> Set<E> setOf(E e1) {\n+        if (e1 == null) { throw new NullPointerException(\"e1\"); }\n+\n+        Set<E> s = new HashSet<>(1);\n+        boolean added = s.add(e1);\n+        if (!added) { throw new IllegalArgumentException(\"duplicate 1\"); }\n+\n+        return Collections.unmodifiableSet(s);\n+    }\n+\n+    \/**\n+     * Returns an unmodifiable set containing two elements.\n+     *\n+     * @param <E> the {@code Set}'s element type\n+     * @param e1 the first element\n+     * @param e2 the second element\n+     * @return a {@code Set} containing the specified elements\n+     * @throws IllegalArgumentException if the elements are duplicates\n+     * @throws NullPointerException if an element is {@code null}\n+     *\/\n+    public static <E> Set<E> setOf(E e1, E e2) {\n+        if (e1 == null) { throw new NullPointerException(\"e1\"); }\n+        if (e2 == null) { throw new NullPointerException(\"e2\"); }\n+\n+        Set<E> s = new HashSet<>(2);\n+        boolean added = s.add(e1);\n+        if (!added) { throw new IllegalArgumentException(\"duplicate 1\"); }\n+        added = s.add(e2);\n+        if (!added) { throw new IllegalArgumentException(\"duplicate 2\"); }\n+\n+        return Collections.unmodifiableSet(s);\n+    }\n+\n+    \/**\n+     * Returns an unmodifiable set containing three elements.\n+     *\n+     * @param <E> the {@code Set}'s element type\n+     * @param e1 the first element\n+     * @param e2 the second element\n+     * @param e3 the third element\n+     * @return a {@code Set} containing the specified elements\n+     * @throws IllegalArgumentException if there are any duplicate elements\n+     * @throws NullPointerException if an element is {@code null}\n+     *\/\n+    public static <E> Set<E> setOf(E e1, E e2, E e3) {\n+        if (e1 == null) { throw new NullPointerException(\"e1\"); }\n+        if (e2 == null) { throw new NullPointerException(\"e2\"); }\n+        if (e3 == null) { throw new NullPointerException(\"e3\"); }\n+\n+        Set<E> s = new HashSet<>(10);\n+        boolean added = s.add(e1);\n+        if (!added) { throw new IllegalArgumentException(\"duplicate 1\"); }\n+        added = s.add(e2);\n+        if (!added) { throw new IllegalArgumentException(\"duplicate 2\"); }\n+        added = s.add(e3);\n+        if (!added) { throw new IllegalArgumentException(\"duplicate 3\"); }\n+\n+        return Collections.unmodifiableSet(s);\n+    }\n+\n+    \/**\n+     * Returns an unmodifiable set containing four elements.\n+     *\n+     * @param <E> the {@code Set}'s element type\n+     * @param e1 the first element\n+     * @param e2 the second element\n+     * @param e3 the third element\n+     * @param e4 the fourth element\n+     * @return a {@code Set} containing the specified elements\n+     * @throws IllegalArgumentException if there are any duplicate elements\n+     * @throws NullPointerException if an element is {@code null}\n+     *\/\n+    public static <E> Set<E> setOf(E e1, E e2, E e3, E e4) {\n+        if (e1 == null) { throw new NullPointerException(\"e1\"); }\n+        if (e2 == null) { throw new NullPointerException(\"e2\"); }\n+        if (e3 == null) { throw new NullPointerException(\"e3\"); }\n+        if (e4 == null) { throw new NullPointerException(\"e4\"); }\n+\n+        Set<E> s = new HashSet<>(10);\n+        boolean added = s.add(e1);\n+        if (!added) { throw new IllegalArgumentException(\"duplicate 1\"); }\n+        added = s.add(e2);\n+        if (!added) { throw new IllegalArgumentException(\"duplicate 2\"); }\n+        added = s.add(e3);\n+        if (!added) { throw new IllegalArgumentException(\"duplicate 3\"); }\n+        added = s.add(e4);\n+        if (!added) { throw new IllegalArgumentException(\"duplicate 4\"); }\n+\n+        return Collections.unmodifiableSet(s);\n+    }\n+\n+    \/**\n+     * Returns an unmodifiable set containing five elements.\n+     *\n+     * @param <E> the {@code Set}'s element type\n+     * @param e1 the first element\n+     * @param e2 the second element\n+     * @param e3 the third element\n+     * @param e4 the fourth element\n+     * @param e5 the fifth element\n+     * @return a {@code Set} containing the specified elements\n+     * @throws IllegalArgumentException if there are any duplicate elements\n+     * @throws NullPointerException if an element is {@code null}\n+     *\/\n+    public static <E> Set<E> setOf(E e1, E e2, E e3, E e4, E e5) {\n+        if (e1 == null) { throw new NullPointerException(\"e1\"); }\n+        if (e2 == null) { throw new NullPointerException(\"e2\"); }\n+        if (e3 == null) { throw new NullPointerException(\"e3\"); }\n+        if (e4 == null) { throw new NullPointerException(\"e4\"); }\n+        if (e5 == null) { throw new NullPointerException(\"e5\"); }\n+\n+        Set<E> s = new HashSet<>(10);\n+        boolean added = s.add(e1);\n+        if (!added) { throw new IllegalArgumentException(\"duplicate 1\"); }\n+        added = s.add(e2);\n+        if (!added) { throw new IllegalArgumentException(\"duplicate 2\"); }\n+        added = s.add(e3);\n+        if (!added) { throw new IllegalArgumentException(\"duplicate 3\"); }\n+        added = s.add(e4);\n+        if (!added) { throw new IllegalArgumentException(\"duplicate 4\"); }\n+        added = s.add(e5);\n+        if (!added) { throw new IllegalArgumentException(\"duplicate 5\"); }\n+\n+        return Collections.unmodifiableSet(s);\n+    }\n+\n+    \/**\n+     * Returns an unmodifiable set containing six elements.\n+     *\n+     * @param <E> the {@code Set}'s element type\n+     * @param e1 the first element\n+     * @param e2 the second element\n+     * @param e3 the third element\n+     * @param e4 the fourth element\n+     * @param e5 the fifth element\n+     * @param e6 the sixth element\n+     * @return a {@code Set} containing the specified elements\n+     * @throws IllegalArgumentException if there are any duplicate elements\n+     * @throws NullPointerException if an element is {@code null}\n+     *\/\n+    public static <E> Set<E> setOf(E e1, E e2, E e3, E e4, E e5, E e6) {\n+        if (e1 == null) { throw new NullPointerException(\"e1\"); }\n+        if (e2 == null) { throw new NullPointerException(\"e2\"); }\n+        if (e3 == null) { throw new NullPointerException(\"e3\"); }\n+        if (e4 == null) { throw new NullPointerException(\"e4\"); }\n+        if (e5 == null) { throw new NullPointerException(\"e5\"); }\n+        if (e6 == null) { throw new NullPointerException(\"e6\"); }\n+\n+        Set<E> s = new HashSet<>(10);\n+        boolean added = s.add(e1);\n+        if (!added) { throw new IllegalArgumentException(\"duplicate 1\"); }\n+        added = s.add(e2);\n+        if (!added) { throw new IllegalArgumentException(\"duplicate 2\"); }\n+        added = s.add(e3);\n+        if (!added) { throw new IllegalArgumentException(\"duplicate 3\"); }\n+        added = s.add(e4);\n+        if (!added) { throw new IllegalArgumentException(\"duplicate 4\"); }\n+        added = s.add(e5);\n+        if (!added) { throw new IllegalArgumentException(\"duplicate 5\"); }\n+        added = s.add(e6);\n+        if (!added) { throw new IllegalArgumentException(\"duplicate 6\"); }\n+\n+        return Collections.unmodifiableSet(s);\n+    }\n+\n+    \/**\n+     * Returns an unmodifiable set containing seven elements.\n+     *\n+     * @param <E> the {@code Set}'s element type\n+     * @param e1 the first element\n+     * @param e2 the second element\n+     * @param e3 the third element\n+     * @param e4 the fourth element\n+     * @param e5 the fifth element\n+     * @param e6 the sixth element\n+     * @param e7 the seventh element\n+     * @return a {@code Set} containing the specified elements\n+     * @throws IllegalArgumentException if there are any duplicate elements\n+     * @throws NullPointerException if an element is {@code null}\n+     *\/\n+    public static <E> Set<E> setOf(E e1, E e2, E e3, E e4, E e5, E e6, E e7) {\n+        if (e1 == null) { throw new NullPointerException(\"e1\"); }\n+        if (e2 == null) { throw new NullPointerException(\"e2\"); }\n+        if (e3 == null) { throw new NullPointerException(\"e3\"); }\n+        if (e4 == null) { throw new NullPointerException(\"e4\"); }\n+        if (e5 == null) { throw new NullPointerException(\"e5\"); }\n+        if (e6 == null) { throw new NullPointerException(\"e6\"); }\n+        if (e7 == null) { throw new NullPointerException(\"e7\"); }\n+\n+        Set<E> s = new HashSet<>(10);\n+        boolean added = s.add(e1);\n+        if (!added) { throw new IllegalArgumentException(\"duplicate 1\"); }\n+        added = s.add(e2);\n+        if (!added) { throw new IllegalArgumentException(\"duplicate 2\"); }\n+        added = s.add(e3);\n+        if (!added) { throw new IllegalArgumentException(\"duplicate 3\"); }\n+        added = s.add(e4);\n+        if (!added) { throw new IllegalArgumentException(\"duplicate 4\"); }\n+        added = s.add(e5);\n+        if (!added) { throw new IllegalArgumentException(\"duplicate 5\"); }\n+        added = s.add(e6);\n+        if (!added) { throw new IllegalArgumentException(\"duplicate 6\"); }\n+        added = s.add(e7);\n+        if (!added) { throw new IllegalArgumentException(\"duplicate 7\"); }\n+\n+        return Collections.unmodifiableSet(s);\n+    }\n+\n+    \/**\n+     * Returns an unmodifiable set containing eight elements.\n+     *\n+     * @param <E> the {@code Set}'s element type\n+     * @param e1 the first element\n+     * @param e2 the second element\n+     * @param e3 the third element\n+     * @param e4 the fourth element\n+     * @param e5 the fifth element\n+     * @param e6 the sixth element\n+     * @param e7 the seventh element\n+     * @param e8 the eighth element\n+     * @return a {@code Set} containing the specified elements\n+     * @throws IllegalArgumentException if there are any duplicate elements\n+     * @throws NullPointerException if an element is {@code null}\n+     *\/\n+    public static <E> Set<E> setOf(E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8) {\n+        if (e1 == null) { throw new NullPointerException(\"e1\"); }\n+        if (e2 == null) { throw new NullPointerException(\"e2\"); }\n+        if (e3 == null) { throw new NullPointerException(\"e3\"); }\n+        if (e4 == null) { throw new NullPointerException(\"e4\"); }\n+        if (e5 == null) { throw new NullPointerException(\"e5\"); }\n+        if (e6 == null) { throw new NullPointerException(\"e6\"); }\n+        if (e7 == null) { throw new NullPointerException(\"e7\"); }\n+        if (e8 == null) { throw new NullPointerException(\"e8\"); }\n+\n+        Set<E> s = new HashSet<>(10);\n+        boolean added = s.add(e1);\n+        if (!added) { throw new IllegalArgumentException(\"duplicate 1\"); }\n+        added = s.add(e2);\n+        if (!added) { throw new IllegalArgumentException(\"duplicate 2\"); }\n+        added = s.add(e3);\n+        if (!added) { throw new IllegalArgumentException(\"duplicate 3\"); }\n+        added = s.add(e4);\n+        if (!added) { throw new IllegalArgumentException(\"duplicate 4\"); }\n+        added = s.add(e5);\n+        if (!added) { throw new IllegalArgumentException(\"duplicate 5\"); }\n+        added = s.add(e6);\n+        if (!added) { throw new IllegalArgumentException(\"duplicate 6\"); }\n+        added = s.add(e7);\n+        if (!added) { throw new IllegalArgumentException(\"duplicate 7\"); }\n+        added = s.add(e8);\n+        if (!added) { throw new IllegalArgumentException(\"duplicate 8\"); }\n+\n+        return Collections.unmodifiableSet(s);\n+    }\n+\n+    \/**\n+     * Returns an unmodifiable set containing nine elements.\n+     *\n+     * @param <E> the {@code Set}'s element type\n+     * @param e1 the first element\n+     * @param e2 the second element\n+     * @param e3 the third element\n+     * @param e4 the fourth element\n+     * @param e5 the fifth element\n+     * @param e6 the sixth element\n+     * @param e7 the seventh element\n+     * @param e8 the eighth element\n+     * @param e9 the ninth element\n+     * @return a {@code Set} containing the specified elements\n+     * @throws IllegalArgumentException if there are any duplicate elements\n+     * @throws NullPointerException if an element is {@code null}\n+     *\/\n+    public static <E> Set<E> setOf(E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8, E e9) {\n+        if (e1 == null) { throw new NullPointerException(\"e1\"); }\n+        if (e2 == null) { throw new NullPointerException(\"e2\"); }\n+        if (e3 == null) { throw new NullPointerException(\"e3\"); }\n+        if (e4 == null) { throw new NullPointerException(\"e4\"); }\n+        if (e5 == null) { throw new NullPointerException(\"e5\"); }\n+        if (e6 == null) { throw new NullPointerException(\"e6\"); }\n+        if (e7 == null) { throw new NullPointerException(\"e7\"); }\n+        if (e8 == null) { throw new NullPointerException(\"e8\"); }\n+        if (e9 == null) { throw new NullPointerException(\"e9\"); }\n+\n+        Set<E> s = new HashSet<>(10);\n+        boolean added = s.add(e1);\n+        if (!added) { throw new IllegalArgumentException(\"duplicate 1\"); }\n+        added = s.add(e2);\n+        if (!added) { throw new IllegalArgumentException(\"duplicate 2\"); }\n+        added = s.add(e3);\n+        if (!added) { throw new IllegalArgumentException(\"duplicate 3\"); }\n+        added = s.add(e4);\n+        if (!added) { throw new IllegalArgumentException(\"duplicate 4\"); }\n+        added = s.add(e5);\n+        if (!added) { throw new IllegalArgumentException(\"duplicate 5\"); }\n+        added = s.add(e6);\n+        if (!added) { throw new IllegalArgumentException(\"duplicate 6\"); }\n+        added = s.add(e7);\n+        if (!added) { throw new IllegalArgumentException(\"duplicate 7\"); }\n+        added = s.add(e8);\n+        if (!added) { throw new IllegalArgumentException(\"duplicate 8\"); }\n+        added = s.add(e9);\n+        if (!added) { throw new IllegalArgumentException(\"duplicate 9\"); }\n+\n+        return Collections.unmodifiableSet(s);\n+    }\n+\n+    \/**\n+     * Returns an unmodifiable set containing ten elements.\n+     *\n+     * @param <E> the {@code Set}'s element type\n+     * @param e1 the first element\n+     * @param e2 the second element\n+     * @param e3 the third element\n+     * @param e4 the fourth element\n+     * @param e5 the fifth element\n+     * @param e6 the sixth element\n+     * @param e7 the seventh element\n+     * @param e8 the eighth element\n+     * @param e9 the ninth element\n+     * @param e10 the tenth element\n+     * @return a {@code Set} containing the specified elements\n+     * @throws IllegalArgumentException if there are any duplicate elements\n+     * @throws NullPointerException if an element is {@code null}\n+     *\/\n+    public static <E> Set<E> setOf(E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8, E e9, E e10) {\n+        if (e1 == null) { throw new NullPointerException(\"e1\"); }\n+        if (e2 == null) { throw new NullPointerException(\"e2\"); }\n+        if (e3 == null) { throw new NullPointerException(\"e3\"); }\n+        if (e4 == null) { throw new NullPointerException(\"e4\"); }\n+        if (e5 == null) { throw new NullPointerException(\"e5\"); }\n+        if (e6 == null) { throw new NullPointerException(\"e6\"); }\n+        if (e7 == null) { throw new NullPointerException(\"e7\"); }\n+        if (e8 == null) { throw new NullPointerException(\"e8\"); }\n+        if (e9 == null) { throw new NullPointerException(\"e9\"); }\n+        if (e10 == null) { throw new NullPointerException(\"e10\"); }\n+\n+        Set<E> s = new HashSet<>(10);\n+        boolean added = s.add(e1);\n+        if (!added) { throw new IllegalArgumentException(\"duplicate 1\"); }\n+        added = s.add(e2);\n+        if (!added) { throw new IllegalArgumentException(\"duplicate 2\"); }\n+        added = s.add(e3);\n+        if (!added) { throw new IllegalArgumentException(\"duplicate 3\"); }\n+        added = s.add(e4);\n+        if (!added) { throw new IllegalArgumentException(\"duplicate 4\"); }\n+        added = s.add(e5);\n+        if (!added) { throw new IllegalArgumentException(\"duplicate 5\"); }\n+        added = s.add(e6);\n+        if (!added) { throw new IllegalArgumentException(\"duplicate 6\"); }\n+        added = s.add(e7);\n+        if (!added) { throw new IllegalArgumentException(\"duplicate 7\"); }\n+        added = s.add(e8);\n+        if (!added) { throw new IllegalArgumentException(\"duplicate 8\"); }\n+        added = s.add(e9);\n+        if (!added) { throw new IllegalArgumentException(\"duplicate 9\"); }\n+        added = s.add(e10);\n+        if (!added) { throw new IllegalArgumentException(\"duplicate 10\"); }\n+\n+        return Collections.unmodifiableSet(s);\n+    }\n+\n+    \/**\n+     * Returns an unmodifiable set containing an arbitrary number of elements.\n+     *\n+     * @apiNote\n+     * This method also accepts a single array as an argument. The element type of\n+     * the resulting set will be the component type of the array, and the size of\n+     * the set will be equal to the length of the array. To create a set with\n+     * a single element that is an array, do the following:\n+     *\n+     * <pre>{@code\n+     *     String[] array = ... ;\n+     *     Set<String[]> list = Utils.<String[]>setOf(array);\n+     * }<\/pre>\n+     *\n+     * This will cause the {@link Utils#setOf(Object) Utils.setOf(E)} method\n+     * to be invoked instead.\n+     *\n+     * @param <E> the {@code Set}'s element type\n+     * @param elements the elements to be contained in the set\n+     * @return a {@code Set} containing the specified elements\n+     * @throws IllegalArgumentException if there are any duplicate elements\n+     * @throws NullPointerException if an element is {@code null} or if the array is {@code null}\n+     *\/\n+    @SafeVarargs\n+    @SuppressWarnings(\"varargs\")\n+    public static <E> Set<E> setOf(E... elements) {\n+        switch (elements.length) { \/\/ implicit null check of elements\n+            case 0:\n+                return setOf();\n+            case 1:\n+                return setOf(elements[0]);\n+            case 2:\n+                return setOf(elements[1]);\n+            default:\n+                Set<E> s = new HashSet<>(elements.length);\n+                for (int a = 0; a < elements.length; ++a) {\n+                    if (elements[a] == null) { throw new NullPointerException(\"e\" + a); }\n+                    boolean added = s.add(elements[a]);\n+                    if (!added) { throw new IllegalArgumentException(\"duplicate \" + a); }\n+                }\n+                return Collections.unmodifiableSet(s);\n+        }\n+    }\n","filename":"jdk\/test\/lib\/testlibrary\/jdk\/testlibrary\/Utils.java","additions":784,"deletions":3,"binary":false,"changes":787,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n- * @bug 8211382\n+ * @bug 8211382 8301119\n@@ -27,1 +27,4 @@\n- * @modules jdk.charsets\n+ * @library \/lib\/testlibrary\n+ * @build jdk.testlibrary.Utils\n+ * @run main TestGB18030\n+ * @run main\/othervm -Djdk.charset.GB18030=2000 TestGB18030\n@@ -30,1 +33,0 @@\n-import java.io.*;\n@@ -33,0 +35,2 @@\n+import java.util.Set;\n+import jdk.testlibrary.Utils;\n@@ -35,0 +39,1 @@\n+    private static final Charset cs = Charset.forName(\"GB18030\");\n@@ -38,1 +43,0 @@\n-            Charset cs = Charset.forName(\"GB18030\");\n@@ -78,0 +82,10 @@\n+\n+    static void checkAlias() {\n+        boolean IS_2000 = \"2000\".equals(System.getProperty(\"jdk.charset.GB18030\"));\n+        Set<String> expected = IS_2000 ? Utils.setOf(\"gb18030-2000\") : Utils.setOf(\"gb18030-2022\");\n+        Set<String> found = cs.aliases();\n+        System.out.printf(\"checkAlias(): IS_2000: %s, expected: %s, found: %s\\n\", IS_2000, expected, found);\n+        if (!cs.aliases().equals(expected)) {\n+            throw new RuntimeException(\"Result mismatch\");\n+        }\n+    }\n@@ -81,0 +95,1 @@\n+        checkAlias();\n","filename":"jdk\/test\/sun\/nio\/cs\/TestGB18030.java","additions":20,"deletions":5,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n-   @bug 4691554 6221056 6380723 6404504 6419565 6529796\n+   @bug 4691554 6221056 6380723 6404504 6419565 6529796 8301119\n@@ -27,0 +27,2 @@\n+   @run main CoderTest\n+   @run main\/othervm -Djdk.charset.GB18030=2000 CoderTest\n@@ -58,0 +60,3 @@\n+    private static final boolean IS_2000 =\n+            \"2000\".equals(System.getProperty(\"jdk.charset.GB18030\"));\n+\n@@ -468,1 +473,6 @@\n-            File f = testFile(encoding, mode);\n+            String fileName = encoding;\n+            if (fileName.equals(\"GB18030\") && IS_2000) {\n+                \/\/ tweak the map file name\n+                fileName = \"GB18030_2000\";\n+            }\n+            File f = testFile(fileName, mode);\n","filename":"jdk\/test\/sun\/nio\/cs\/mapping\/CoderTest.java","additions":13,"deletions":3,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,1 @@\n+# based on GB18030-2022 mapping\n@@ -7744,1 +7745,1 @@\n-8135F437\t1E3F\n+A8BC\t1E3F\n@@ -40885,8 +40886,8 @@\n-82359037\t9FB4\n-82359038\t9FB5\n-82359039\t9FB6\n-82359130\t9FB7\n-82359131\t9FB8\n-82359132\t9FB9\n-82359133\t9FBA\n-82359134\t9FBB\n+82359037\tE81E\n+82359038\tE826\n+82359039\tE82B\n+82359130\tE82C\n+82359131\tE832\n+82359132\tE843\n+82359133\tE854\n+82359134\tE864\n@@ -57230,10 +57231,10 @@\n-A6D9\tE78D\n-A6DA\tE78E\n-A6DB\tE78F\n-A6DC\tE790\n-A6DD\tE791\n-A6DE\tE792\n-A6DF\tE793\n-A6EC\tE794\n-A6ED\tE795\n-A6F3\tE796\n+A6D9\tFE10\n+A6DA\tFE12\n+A6DB\tFE11\n+A6DC\tFE13\n+A6DD\tFE14\n+A6DE\tFE15\n+A6DF\tFE16\n+A6EC\tFE17\n+A6ED\tFE18\n+A6F3\tFE19\n@@ -57288,1 +57289,1 @@\n-A8BC\tE7C7\n+8135F437\tE7C7\n@@ -57375,1 +57376,1 @@\n-FE59\tE81E\n+FE59\t9FB4\n@@ -57383,1 +57384,1 @@\n-FE61\tE826\n+FE61\t9FB5\n@@ -57388,2 +57389,2 @@\n-FE66\tE82B\n-FE67\tE82C\n+FE66\t9FB6\n+FE67\t9FB7\n@@ -57395,1 +57396,1 @@\n-FE6D\tE832\n+FE6D\t9FB8\n@@ -57412,1 +57413,1 @@\n-FE7E\tE843\n+FE7E\t9FB9\n@@ -57429,1 +57430,1 @@\n-FE90\tE854\n+FE90\t9FBA\n@@ -57445,1 +57446,1 @@\n-FEA0\tE864\n+FEA0\t9FBB\n@@ -62993,10 +62994,10 @@\n-84318236\tFE10\n-84318237\tFE11\n-84318238\tFE12\n-84318239\tFE13\n-84318330\tFE14\n-84318331\tFE15\n-84318332\tFE16\n-84318333\tFE17\n-84318334\tFE18\n-84318335\tFE19\n+84318236\tE78D\n+84318237\tE78F\n+84318238\tE78E\n+84318239\tE790\n+84318330\tE791\n+84318331\tE792\n+84318332\tE793\n+84318333\tE794\n+84318334\tE795\n+84318335\tE796\n@@ -63487,2 +63488,2 @@\n-#8431A438\tFFFE\n-#8431A439\tFFFF\n+8431A438\tFFFE\n+8431A439\tFFFF\n","filename":"jdk\/test\/sun\/nio\/cs\/mapping\/GB18030.b2c","additions":41,"deletions":40,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -1,3 +1,1 @@\n-# GB18030.java is NOT generated from this mapping right now. This\n-# map is here for testing only.\n-#\n+# based on GB18030-2000 mapping\n","filename":"jdk\/test\/sun\/nio\/cs\/mapping\/GB18030_2000.b2c","additions":1,"deletions":3,"binary":false,"changes":4,"previous_filename":"jdk\/make\/data\/charsetmapping\/GB18030.map","status":"renamed"}]}