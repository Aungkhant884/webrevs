{"files":[{"patch":"@@ -38,1 +38,1 @@\n-void EventListenerManager::registerListener(JavaEventListener *ptr, const JLObject &listener)\n+void EventListenerManager::registerListener(JavaEventListener *listener, const JLObject &listenerObj)\n@@ -40,3 +40,3 @@\n-    JavaObjectWrapperHandler *temp_ref = new JavaObjectWrapperHandler(listener);\n-    std::pair<JavaEventListener*, JavaObjectWrapperHandler*> entry{ ptr, temp_ref };\n-    listener_lists.insert(entry);\n+    ListenerJObjectWrapper *temp_ref = new ListenerJObjectWrapper(listenerObj);\n+    std::pair<JavaEventListener*, ListenerJObjectWrapper*> entry{ listener, temp_ref };\n+    listenerJObjectMap.insert(entry);\n@@ -45,1 +45,1 @@\n-void EventListenerManager::unregisterListener(JavaEventListener *ptr)\n+void EventListenerManager::unregisterListener(JavaEventListener *listener)\n@@ -47,2 +47,2 @@\n-     std::map<JavaEventListener*, JavaObjectWrapperHandler*>::iterator it;\n-     it = listener_lists.find(ptr);\n+     std::map<JavaEventListener*, ListenerJObjectWrapper*>::iterator it;\n+     it = listenerJObjectMap.find(listener);\n@@ -50,1 +50,1 @@\n-     if (it != listener_lists.end()) {\n+     if (it != listenerJObjectMap.end()) {\n@@ -54,1 +54,1 @@\n-             listener_lists.erase(it); \/\/ remove from list\n+             listenerJObjectMap.erase(it); \/\/ remove from list\n@@ -62,1 +62,1 @@\n-JGObject EventListenerManager::get_listener(JavaEventListener *ptr)\n+JGObject EventListenerManager::getListenerJObject(JavaEventListener *listener)\n@@ -64,4 +64,4 @@\n-    std::map<JavaEventListener*, JavaObjectWrapperHandler*>::iterator it;\n-    it = listener_lists.find(ptr);\n-    if (it != listener_lists.end())\n-        return it->second->get_listener();\n+    std::map<JavaEventListener*, ListenerJObjectWrapper*>::iterator it;\n+    it = listenerJObjectMap.find(listener);\n+    if (it != listenerJObjectMap.end())\n+        return it->second->getListenerJObject();\n@@ -72,1 +72,1 @@\n-void EventListenerManager::registerDOMWindow(DOMWindow* window, JavaEventListener *ptr)\n+void EventListenerManager::registerDOMWindow(DOMWindow* window, JavaEventListener *listener)\n@@ -74,3 +74,3 @@\n-    std::map<JavaEventListener*, JavaObjectWrapperHandler*>::iterator it;\n-    it = listener_lists.find(ptr);\n-    if (it != listener_lists.end())\n+    std::map<JavaEventListener*, ListenerJObjectWrapper*>::iterator it;\n+    it = listenerJObjectMap.find(listener);\n+    if (it != listenerJObjectMap.end())\n@@ -79,2 +79,2 @@\n-    std::pair<JavaEventListener*, DOMWindow*> entry{ ptr, window};\n-    windowHasEvent.insert(entry);\n+    std::pair<JavaEventListener*, DOMWindow*> entry{ listener, window};\n+    listenerDOMWindowMultiMap.insert(entry);\n@@ -86,1 +86,1 @@\n-    for (win_it = windowHasEvent.begin(); win_it != windowHasEvent.end(); win_it++) {\n+    for (win_it = listenerDOMWindowMultiMap.begin(); win_it != listenerDOMWindowMultiMap.end();) {\n@@ -88,0 +88,1 @@\n+        \/\/ and remove the entry from the map\n@@ -90,17 +91,0 @@\n-        }\n-    }\n-}\n-\n-void EventListenerManager::resetDOMWindow(DOMWindow* window)\n-{\n-    std::multimap<JavaEventListener*, DOMWindow*>::iterator win_it;\n-    std::map<JavaEventListener*, JavaObjectWrapperHandler*>::iterator it;\n-    bool isReferringToOtherListener = true;\n-\n-    for (win_it = windowHasEvent.begin(); win_it != windowHasEvent.end(); win_it++) {\n-        it = listener_lists.find(win_it->first);\n-        if (window == win_it->second && it->second && it != listener_lists.end() && it->second->use_count() == 1)\n-            isReferringToOtherListener = false;\n-        else\n-            isReferringToOtherListener = true;\n-    }\n@@ -108,4 +92,6 @@\n-    if (!isReferringToOtherListener) {\n-        for (win_it = windowHasEvent.begin(); win_it != windowHasEvent.end(); win_it++) {\n-            if (window == win_it->second)\n-                windowHasEvent.erase(win_it->first);\n+            std::multimap<JavaEventListener*, DOMWindow*>::iterator tmp_it;\n+            tmp_it = win_it;\n+            ++win_it;\n+            listenerDOMWindowMultiMap.erase(tmp_it);\n+        } else {\n+            ++win_it;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/bindings\/java\/EventListenerManager.cpp","additions":28,"deletions":42,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -44,1 +44,0 @@\n-class JavaObjectWrapperHandler;\n@@ -47,2 +46,2 @@\n-class JavaObjectWrapperHandler {\n-    JGObject handler_;\n+class ListenerJObjectWrapper {\n+    JGObject listenerObj;\n@@ -51,2 +50,2 @@\n-    JavaObjectWrapperHandler(const JLObject& handler) {\n-        handler_ = handler;\n+    ListenerJObjectWrapper(const JLObject& listenerObj) {\n+        this->listenerObj = listenerObj;\n@@ -55,2 +54,2 @@\n-    ~JavaObjectWrapperHandler() {\n-        handler_.clear();\n+    ~ListenerJObjectWrapper() {\n+        listenerObj.clear();\n@@ -58,1 +57,1 @@\n-    JGObject get_listener() { return handler_; }\n+    JGObject getListenerJObject() { return listenerObj; }\n@@ -65,0 +64,1 @@\n+    EventListenerManager() = default;\n@@ -66,0 +66,4 @@\n+\n+    std::map<JavaEventListener*, ListenerJObjectWrapper*> listenerJObjectMap;\n+    std::multimap<JavaEventListener*, DOMWindow*> listenerDOMWindowMultiMap;\n+\n@@ -67,3 +71,1 @@\n-    std::map<JavaEventListener*, JavaObjectWrapperHandler*> listener_lists;\n-    std::multimap<JavaEventListener*, DOMWindow*> windowHasEvent;\n-    EventListenerManager() = default;\n+\n@@ -72,3 +74,6 @@\n-    void registerListener(JavaEventListener *ptr, const JLObject &listener);\n-    void unregisterListener(JavaEventListener *ptr) ;\n-    void registerDOMWindow(DOMWindow*, JavaEventListener *ptr);\n+\n+    void registerListener(JavaEventListener *listener, const JLObject &listenerJObj);\n+    void unregisterListener(JavaEventListener *listener) ;\n+    JGObject getListenerJObject(JavaEventListener *listener);\n+\n+    void registerDOMWindow(DOMWindow*, JavaEventListener *listener);\n@@ -76,2 +81,0 @@\n-    void resetDOMWindow(DOMWindow*);\n-    JGObject get_listener(JavaEventListener *ptr);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/bindings\/java\/EventListenerManager.h","additions":19,"deletions":16,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-        EventListenerManager::get_instance().get_listener(this),\n+        EventListenerManager::get_instance().getListenerJObject(this),\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/bindings\/java\/JavaEventListener.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -453,1 +453,0 @@\n-    EventListenerManager::get_instance().resetDOMWindow(this);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/DOMWindow.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -607,1 +607,1 @@\n-    public void TestStrongRefNewContentLoad() throws Exception {\n+    public void testStrongRefNewContentLoad() throws Exception {\n@@ -730,1 +730,1 @@\n-        \/\/ Verify that the events are delivered to the listeners (0 and 2 are same)\n+        \/\/ Verify that the events are delivered to the listeners (0, 1 and 2 are same)\n@@ -959,1 +959,1 @@\n-        assertEquals(\"Click count\", 1, listeners.get(0).getClickCount());\n+        assertEquals(\"Click count\", 1, listeners.get(1).getClickCount());\n","filename":"modules\/javafx.web\/src\/test\/java\/test\/javafx\/scene\/web\/EventListenerLeakTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}