{"files":[{"patch":"@@ -29,0 +29,1 @@\n+#include <stdio.h>\n@@ -58,0 +59,1 @@\n+             listener_lists.erase(it); \/\/ remove from list\n@@ -91,1 +93,1 @@\n-        if(window == win_it->second) {\n+        if (window == win_it->second) {\n@@ -97,0 +99,20 @@\n+void EventListenerManager::resetDOMWindow(DOMWindow* window)\n+{\n+    std::multimap<JavaEventListener*, DOMWindow*>::iterator win_it;\n+    std::map<JavaEventListener*, JavaObjectWrapperHandler*>::iterator it;\n+    bool isReferringToOtherListener = true;\n+\n+    for (win_it = windowHasEvent.begin(); win_it != windowHasEvent.end(); win_it++) {\n+        it = listener_lists.find(win_it->first);\n+        if (window == win_it->second && it->second && it != listener_lists.end() && it->second->use_count() == 1)\n+            isReferringToOtherListener = false;\n+        else\n+            isReferringToOtherListener = true;\n+    }\n+\n+    for (win_it = windowHasEvent.begin(); win_it != windowHasEvent.end() && !isReferringToOtherListener; win_it++) {\n+        if (window == win_it->second)\n+           windowHasEvent.erase(win_it->first);\n+    }\n+}\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/bindings\/java\/EventListenerManager.cpp","additions":23,"deletions":1,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -80,0 +80,1 @@\n+    void resetDOMWindow(DOMWindow*);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/bindings\/java\/EventListenerManager.h","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-    return jother && ( this == jother);\n+    return jother && (this == jother);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/bindings\/java\/JavaEventListener.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,3 +30,0 @@\n-#include \"Node.h\"\n-\n-#if PLATFORM(JAVA)\n@@ -34,1 +31,1 @@\n-#endif\n+#include \"Node.h\"\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/bindings\/java\/JavaEventListener.h","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -453,0 +453,1 @@\n+    EventListenerManager::get_instance().resetDOMWindow(this);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/DOMWindow.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n-import org.junit.AfterClass;\n@@ -49,1 +48,0 @@\n-\n@@ -98,0 +96,23 @@\n+    static class MyListener1 implements EventListener {\n+\n+        private final AtomicInteger clickCount = new AtomicInteger(0);\n+\n+        private MyListener1() {\n+        }\n+\n+        int getClickCount() {\n+            return clickCount.get();\n+        }\n+\n+        static MyListener1 create() {\n+            MyListener1 listener = new MyListener1();\n+            listenerRefs.add(new WeakReference<>(listener));\n+            return listener;\n+        }\n+\n+        @Override\n+        public void handleEvent(Event evt) {\n+            clickCount.incrementAndGet();\n+        }\n+    }\n+\n@@ -604,2 +625,3 @@\n-     * Test checks listener is not released in\n-     * WebView , in case WebView load new content.\n+     * Test checks that this check is testing that the immediately previous click\n+     * does not get delivered since the associated DOM node is not part of the page any more.\n+     * This is why the count remains at 1 (from the first click on the original page).\n@@ -630,2 +652,0 @@\n-        \/\/ Verify that all listeners have not been released\n-        Thread.sleep(100);\n@@ -637,0 +657,2 @@\n+        \/\/ Verify that all listeners have not been released\n+        Thread.sleep(100);\n@@ -638,0 +660,357 @@\n+\n+        \/\/ Clear strong reference to listener and WebView\n+        listeners1.clear();\n+        domNodes1.clear();\n+        webViewRefs.clear();\n+        webView1 = null;\n+\n+        \/\/ Verify that there is no strong reference to the WebView\n+        assertNumActive(\"WebView\", webViewRefs, 0);\n+\n+        \/\/ Verify that no listeners are strongly held\n+        assertNumActive(\"MyListener\", listenerRefs, 0);\n+        listenerRefs.clear();\n+    }\n+\n+    \/**\n+     * Test that the listener ref cont increase on addevent and decrease on remove event\n+     *\/\n+    @Test\n+    public void oneWebViewRefCountTest() throws Exception {\n+        webView2 = null; \/\/ unused\n+\n+        \/\/ Load HTML content and get list of DOM nodes\n+        loadContent(webView1, HTML);\n+\n+        final List<WeakReference<MyListener>> listeners = new ArrayList<>();\n+        submit(() -> {\n+            domNodes1 = getDomNodes(webView1);\n+            assertEquals(NUM_DOM_NODES, domNodes1.size());\n+\n+            \/\/ Create listeners\n+            MyListener listener = MyListener.create();\n+            listeners.add(new WeakReference<>(listener));\n+\n+            for (int i = 0; i < 3; i++) {\n+                domNodes1.get(i).addEventListener(\"click\", listeners.get(0).get(), false);\n+            }\n+        });\n+\n+        submit(() -> {\n+            \/\/ Send clilck events\n+            click(webView1, 0);\n+            click(webView1, 1);\n+            click(webView1, 2);\n+        });\n+\n+        \/\/ Verify that the events are delivered to the listeners (0 and 2 are same)\n+        Thread.sleep(100);\n+        assertEquals(\"Click count\", 3, listeners.get(0).get().getClickCount());\n+\n+        \/\/save for later\n+        MyListener tmpListener = listeners.get(0).get();\n+\n+        \/\/ remove previously registered listeners fro dom nodes\n+        submit(() -> {\n+            domNodes1 = getDomNodes(webView1);\n+            assertEquals(NUM_DOM_NODES, domNodes1.size());\n+\n+            \/\/\n+            for (int i = 0; i < 3; i++) {\n+                domNodes1.get(i).removeEventListener(\"click\", listeners.get(0).get(), false);\n+            }\n+        });\n+\n+        submit(() -> {\n+            \/\/ Send clilck events\n+            click(webView1, 0);\n+            click(webView1, 1);\n+            click(webView1, 2);\n+        });\n+\n+        \/\/ Verify that the events are delivered to the listeners (0 and 2 are same)\n+        Thread.sleep(100);\n+        assertEquals(\"Click count\", 3, listeners.get(0).get().getClickCount());\n+\n+\n+        \/\/ add events listeners again\n+        submit(() -> {\n+            domNodes1 = getDomNodes(webView1);\n+            assertEquals(NUM_DOM_NODES, domNodes1.size());\n+\n+            \/\/ Create another listeners\n+            MyListener listener = MyListener.create();\n+            listeners.add(new WeakReference<>(listener));\n+\n+            for (int i = 0; i < 3; i++) {\n+                domNodes1.get(i).addEventListener(\"click\", listeners.get(1).get(), false);\n+            }\n+        });\n+\n+        tmpListener = null;\n+        \/\/save for later\n+        MyListener tmpListener1 = listeners.get(0).get();\n+\n+        submit(() -> {\n+            \/\/ Send clilck events\n+            click(webView1, 0);\n+            click(webView1, 1);\n+            click(webView1, 2);\n+        });\n+\n+        \/\/ Verify that the events are delivered to the listeners (0 and 2 are same)\n+        Thread.sleep(100);\n+        assertEquals(\"Click count\", 6, listeners.get(1).get().getClickCount() + listeners.get(0).get().getClickCount());\n+\n+        \/\/ add events listeners again\n+        submit(() -> {\n+            domNodes1 = getDomNodes(webView1);\n+            assertEquals(NUM_DOM_NODES, domNodes1.size());\n+\n+            \/\/ Create another listeners\n+            MyListener listener = MyListener.create();\n+            listeners.add(new WeakReference<>(listener));\n+\n+            for (int i = 0; i < 3; i++) {\n+                domNodes1.get(i).removeEventListener(\"click\", listeners.get(1).get(), false);\n+            }\n+        });\n+\n+        submit(() -> {\n+            \/\/ Send clilck events\n+            click(webView1, 0);\n+            click(webView1, 1);\n+            click(webView1, 2);\n+        });\n+\n+        \/\/ Verify that the events are delivered to the listeners (0 and 2 are same)\n+        Thread.sleep(100);\n+        assertEquals(\"Click count\", 6, listeners.get(1).get().getClickCount() + listeners.get(0).get().getClickCount());\n+\n+        \/\/ Release strong reference to listener and the DOM nodes\n+        listeners.clear();\n+        domNodes1.clear();\n+        tmpListener1 = null;\n+\n+        \/\/ Verify that no listeners are strongly held\n+        assertNumActive(\"MyListener\", listenerRefs, 0);\n+        listenerRefs.clear();\n+    }\n+\n+    \/**\n+     * Test that there is no leak when a listener is implicitly released when webview goes out of scope.\n+     *\/\n+    @Test\n+    public void oneWebViewMultipleListenersImplicitRelease() throws Exception {\n+        webView2 = null; \/\/ unused\n+\n+        \/\/ Load HTML content and get list of DOM nodes\n+        loadContent(webView1, HTML);\n+\n+        final List<WeakReference<MyListener>> listeners = new ArrayList<>();\n+        submit(() -> {\n+            domNodes1 = getDomNodes(webView1);\n+            assertEquals(NUM_DOM_NODES, domNodes1.size());\n+\n+            \/\/ Create listeners and attach to DOM node 0\n+            MyListener listenerA = MyListener.create();\n+            MyListener listenerB = MyListener.create();\n+\n+            listeners.add(new WeakReference<>(listenerA));\n+            listeners.add(new WeakReference<>(listenerB));\n+            listeners.add(new WeakReference<>(listenerA));\n+\n+            for (int i = 0; i < 3; i++) {\n+                domNodes1.get(i).addEventListener(\"click\", listeners.get(i).get(), false);\n+            }\n+        });\n+\n+        \/\/ Confirm that listeners(0) == listeners(2)\n+        assertSame(listeners.get(0).get(), listeners.get(2).get());\n+\n+        \/\/ Verify that neither listener has been released\n+        assertNumActive(\"MyListener\", listenerRefs, 2);\n+        assertNotNull(listeners.get(0).get());\n+        assertNotNull(listeners.get(1).get());\n+        assertNotNull(listeners.get(2).get());\n+\n+        submit(() -> {\n+            \/\/ Send clilck events\n+            click(webView1, 0);\n+            click(webView1, 1);\n+            click(webView1, 2);\n+        });\n+\n+        \/\/ Verify that the events are delivered\n+        Thread.sleep(100);\n+        assertEquals(\"Click count\", 2, listeners.get(0).get().getClickCount());\n+\n+        \/\/ make web view , goes out of scope\n+        domNodes1.clear();\n+        webView1 = null;\n+\n+        Thread.sleep(100);\n+        \/\/ Verify that active listener\n+        assertNumActive(\"MyListener\", listenerRefs, 0);\n+        listenerRefs.clear();\n+    }\n+\n+    \/**\n+     * Test that there is no leak when a listener is implicitly released when webview goes out of scope.\n+     *\/\n+    @Test\n+    public void multipleWebViewMultipleListenersImplicitRelease() throws Exception {\n+\n+        \/\/ Load HTML content and get list of DOM nodes\n+        loadContent(webView1, HTML);\n+        loadContent(webView2, HTML);\n+\n+        final List<WeakReference<MyListener>> listeners = new ArrayList<>();\n+\n+        submit(() -> {\n+            domNodes1 = getDomNodes(webView1);\n+            assertEquals(NUM_DOM_NODES, domNodes1.size());\n+\n+            \/\/ Create listeners and attach to DOM node\n+            MyListener listenerA = MyListener.create();\n+            MyListener listenerB = MyListener.create();\n+\n+            listeners.add(new WeakReference<>(listenerA));\n+            listeners.add(new WeakReference<>(listenerB));\n+            listeners.add(new WeakReference<>(listenerA));\n+\n+            for (int i = 0; i < 3; i++) {\n+                domNodes1.get(i).addEventListener(\"click\", listeners.get(i).get(), false);\n+            }\n+        });\n+\n+        submit(() -> {\n+            domNodes2 = getDomNodes(webView2);\n+            assertEquals(NUM_DOM_NODES, domNodes1.size());\n+\n+            \/\/ Create listeners and attach to DOM node\n+            MyListener listenerA = MyListener.create();\n+            MyListener listenerB = MyListener.create();\n+\n+            listeners.add(new WeakReference<>(listenerA));\n+            listeners.add(new WeakReference<>(listenerB));\n+\n+            domNodes2.get(0).addEventListener(\"click\", listeners.get(3).get(), false);\n+            domNodes2.get(1).addEventListener(\"click\", listeners.get(4).get(), false);\n+            \/\/ add existing first listener shared\n+            listeners.add(listeners.get(0));\n+            domNodes2.get(2).addEventListener(\"click\", listeners.get(0).get(), false);\n+        });\n+\n+        Thread.sleep(100);\n+        \/\/ verify active listener count\n+        assertNumActive(\"MyListener\", listenerRefs, 4);\n+\n+        submit(() -> {\n+            \/\/ Send clilck events\n+            click(webView1, 0);\n+            click(webView1, 1);\n+            click(webView1, 2);\n+            click(webView2, 0);\n+            click(webView2, 1);\n+            click(webView2, 2);\n+        });\n+\n+        \/\/ Verify that the events are delivered to both webviews\n+        Thread.sleep(100);\n+        assertEquals(\"Click count\", 3, listeners.get(0).get().getClickCount());\n+\n+        domNodes1.clear();\n+        webView1 = null;\n+\n+        submit(() -> {\n+            \/\/ Send clilck events to webview2\n+            click(webView2, 0);\n+            click(webView2, 1);\n+            click(webView2, 2);\n+        });\n+\n+        \/\/ Verify that the events are delivered to webview2\n+        Thread.sleep(100);\n+        assertEquals(\"Click count\", 4, listeners.get(0).get().getClickCount());\n+        assertEquals(\"Click count\", 4, listeners.get(2).get().getClickCount());\n+        \/\/ Verify that listener is still strongly held\n+        assertNumActive(\"listeners\", listenerRefs, 3);\n+\n+        \/\/removed shared listener\n+        submit(() -> {\n+            domNodes2 = getDomNodes(webView2);\n+            domNodes2.get(2).removeEventListener(\"click\", listeners.get(4).get(), false);\n+        });\n+\n+        submit(() -> {\n+            \/\/ Send clilck events to webview2\n+            click(webView2, 2);\n+        });\n+\n+        \/\/ Verify that the event is not delivered to webview2 for shared listener\n+        Thread.sleep(100);\n+        assertEquals(\"Click count\", 2, listeners.get(4).get().getClickCount());\n+\n+        \/\/ check active listeners\n+        listeners.clear();\n+        domNodes2.clear();\n+        webView2 = null;\n+        Thread.sleep(100);\n+        \/\/ Verify that active listener\n+        assertNumActive(\"MyListener\", listenerRefs, 0);\n+        listenerRefs.clear();\n+    }\n+\n+    \/**\n+     * Test that multiple listeners on same node\n+     *\/\n+    @Test\n+    public void oneWebViewMultipleListenerSameNode() throws Exception {\n+        webView2 = null; \/\/ unused\n+\n+        \/\/ Load HTML content and get list of DOM nodes\n+        loadContent(webView1, HTML);\n+\n+        final List<MyListener> listeners = new ArrayList<>();\n+        submit(() -> {\n+            domNodes1 = getDomNodes(webView1);\n+            assertEquals(NUM_DOM_NODES, domNodes1.size());\n+\n+            \/\/ Create listener and attach to DOM node 0\n+            MyListener myListener1 = MyListener.create();\n+            MyListener myListener2 = MyListener.create();\n+            listeners.add(myListener1);\n+            listeners.add(myListener2);\n+            domNodes1.get(0).addEventListener(\"click\", listeners.get(0), false);\n+            domNodes1.get(0).addEventListener(\"click\", listeners.get(1), false);\n+\n+            \/\/ Send clilck event\n+            click(webView1, 0);\n+        });\n+\n+        Thread.sleep(100);\n+        \/\/ Verify that the event is delivered to the listener\n+        assertEquals(\"Click count\", 1, listeners.get(0).getClickCount());\n+        assertEquals(\"Click count\", 1, listeners.get(0).getClickCount());\n+\n+        submit(() -> {\n+            \/\/ Remove event listener\n+            domNodes1.get(0).removeEventListener(\"click\", listeners.get(0), false);\n+            \/\/ Send clilck event\n+            click(webView1, 0);\n+        });\n+\n+        \/\/ Verify that listener has been released\n+        assertEquals(\"Click count\", 1, listeners.get(0).getClickCount());\n+        assertEquals(\"Click count\", 2, listeners.get(1).getClickCount());\n+\n+        \/\/ make web view , goes out of scope\n+        domNodes1.clear();\n+        webView1 = null;\n+        listeners.clear();\n+\n+        Thread.sleep(100);\n+        \/\/ Verify that active listener\n+        assertNumActive(\"MyListener\", listenerRefs, 0);\n+        listenerRefs.clear();\n","filename":"modules\/javafx.web\/src\/test\/java\/test\/javafx\/scene\/web\/EventListenerLeakTest.java","additions":385,"deletions":6,"binary":false,"changes":391,"status":"modified"}]}