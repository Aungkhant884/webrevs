{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -318,2 +318,2 @@\n-    public ObjectProperty<StringConverter<T>> converterProperty() { return converter; }\n-    private ObjectProperty<StringConverter<T>> converter =\n+    public final ObjectProperty<StringConverter<T>> converterProperty() { return converter; }\n+    private final ObjectProperty<StringConverter<T>> converter =\n@@ -332,2 +332,2 @@\n-    public ObjectProperty<T> valueProperty() { return value; }\n-    private ObjectProperty<T> value = new SimpleObjectProperty<>(this, \"value\") {\n+    public final ObjectProperty<T> valueProperty() { return value; }\n+    private final ObjectProperty<T> value = new SimpleObjectProperty<>(this, \"value\") {\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/ChoiceBox.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -311,1 +311,1 @@\n-    private ObjectProperty<ObservableList<T>> items = new SimpleObjectProperty<>(this, \"items\");\n+    private final ObjectProperty<ObservableList<T>> items = new SimpleObjectProperty<>(this, \"items\");\n@@ -314,1 +314,1 @@\n-    public ObjectProperty<ObservableList<T>> itemsProperty() { return items; }\n+    public final ObjectProperty<ObservableList<T>> itemsProperty() { return items; }\n@@ -324,2 +324,2 @@\n-    public ObjectProperty<StringConverter<T>> converterProperty() { return converter; }\n-    private ObjectProperty<StringConverter<T>> converter =\n+    public final ObjectProperty<StringConverter<T>> converterProperty() { return converter; }\n+    private final ObjectProperty<StringConverter<T>> converter =\n@@ -337,1 +337,1 @@\n-    private ObjectProperty<Callback<ListView<T>, ListCell<T>>> cellFactory =\n+    private final ObjectProperty<Callback<ListView<T>, ListCell<T>>> cellFactory =\n@@ -341,1 +341,1 @@\n-    public ObjectProperty<Callback<ListView<T>, ListCell<T>>> cellFactoryProperty() { return cellFactory; }\n+    public final ObjectProperty<Callback<ListView<T>, ListCell<T>>> cellFactoryProperty() { return cellFactory; }\n@@ -353,2 +353,2 @@\n-    public ObjectProperty<ListCell<T>> buttonCellProperty() { return buttonCell; }\n-    private ObjectProperty<ListCell<T>> buttonCell =\n+    public final ObjectProperty<ListCell<T>> buttonCellProperty() { return buttonCell; }\n+    private final ObjectProperty<ListCell<T>> buttonCell =\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/ComboBox.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -148,2 +148,2 @@\n-    public ObjectProperty<T> valueProperty() { return value; }\n-    private ObjectProperty<T> value = new SimpleObjectProperty<>(this, \"value\");\n+    public final ObjectProperty<T> valueProperty() { return value; }\n+    private final ObjectProperty<T> value = new SimpleObjectProperty<>(this, \"value\");\n@@ -165,1 +165,1 @@\n-    public BooleanProperty editableProperty() { return editable; }\n+    public final BooleanProperty editableProperty() { return editable; }\n@@ -168,1 +168,1 @@\n-    private BooleanProperty editable = new SimpleBooleanProperty(this, \"editable\", false) {\n+    private final BooleanProperty editable = new SimpleBooleanProperty(this, \"editable\", false) {\n@@ -181,1 +181,1 @@\n-    public ReadOnlyBooleanProperty showingProperty() { return showingPropertyImpl().getReadOnlyProperty(); }\n+    public final ReadOnlyBooleanProperty showingProperty() { return showingPropertyImpl().getReadOnlyProperty(); }\n@@ -248,1 +248,1 @@\n-    public BooleanProperty armedProperty() { return armed; }\n+    public final BooleanProperty armedProperty() { return armed; }\n@@ -251,1 +251,1 @@\n-    private BooleanProperty armed = new SimpleBooleanProperty(this, \"armed\", false) {\n+    private final BooleanProperty armed = new SimpleBooleanProperty(this, \"armed\", false) {\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/ComboBoxBase.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -116,1 +116,1 @@\n-    public ObjectProperty<Node> labelForProperty() {\n+    public final ObjectProperty<Node> labelForProperty() {\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/Label.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -999,1 +999,1 @@\n-    public void setOnScrollTo(EventHandler<ScrollToEvent<Integer>> value) {\n+    public final void setOnScrollTo(EventHandler<ScrollToEvent<Integer>> value) {\n@@ -1003,1 +1003,1 @@\n-    public EventHandler<ScrollToEvent<Integer>> getOnScrollTo() {\n+    public final EventHandler<ScrollToEvent<Integer>> getOnScrollTo() {\n@@ -1010,1 +1010,1 @@\n-    public ObjectProperty<EventHandler<ScrollToEvent<Integer>>> onScrollToProperty() {\n+    public final ObjectProperty<EventHandler<ScrollToEvent<Integer>>> onScrollToProperty() {\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/ListView.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1409,1 +1409,1 @@\n-    public void setOnSort(EventHandler<SortEvent<TableView<S>>> value) {\n+    public final void setOnSort(EventHandler<SortEvent<TableView<S>>> value) {\n@@ -1413,1 +1413,1 @@\n-    public EventHandler<SortEvent<TableView<S>>> getOnSort() {\n+    public final EventHandler<SortEvent<TableView<S>>> getOnSort() {\n@@ -1420,1 +1420,1 @@\n-    public ObjectProperty<EventHandler<SortEvent<TableView<S>>>> onSortProperty() {\n+    public final ObjectProperty<EventHandler<SortEvent<TableView<S>>>> onSortProperty() {\n@@ -1510,1 +1510,1 @@\n-    public void setOnScrollTo(EventHandler<ScrollToEvent<Integer>> value) {\n+    public final void setOnScrollTo(EventHandler<ScrollToEvent<Integer>> value) {\n@@ -1514,1 +1514,1 @@\n-    public EventHandler<ScrollToEvent<Integer>> getOnScrollTo() {\n+    public final EventHandler<ScrollToEvent<Integer>> getOnScrollTo() {\n@@ -1521,1 +1521,1 @@\n-    public ObjectProperty<EventHandler<ScrollToEvent<Integer>>> onScrollToProperty() {\n+    public final ObjectProperty<EventHandler<ScrollToEvent<Integer>>> onScrollToProperty() {\n@@ -1569,1 +1569,1 @@\n-    public void setOnScrollToColumn(EventHandler<ScrollToEvent<TableColumn<S, ?>>> value) {\n+    public final void setOnScrollToColumn(EventHandler<ScrollToEvent<TableColumn<S, ?>>> value) {\n@@ -1573,1 +1573,1 @@\n-    public EventHandler<ScrollToEvent<TableColumn<S, ?>>> getOnScrollToColumn() {\n+    public final EventHandler<ScrollToEvent<TableColumn<S, ?>>> getOnScrollToColumn() {\n@@ -1580,1 +1580,1 @@\n-    public ObjectProperty<EventHandler<ScrollToEvent<TableColumn<S, ?>>>> onScrollToColumnProperty() {\n+    public final ObjectProperty<EventHandler<ScrollToEvent<TableColumn<S, ?>>>> onScrollToColumnProperty() {\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TableView.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -1635,1 +1635,1 @@\n-    public void setOnSort(EventHandler<SortEvent<TreeTableView<S>>> value) {\n+    public final void setOnSort(EventHandler<SortEvent<TreeTableView<S>>> value) {\n@@ -1639,1 +1639,1 @@\n-    public EventHandler<SortEvent<TreeTableView<S>>> getOnSort() {\n+    public final EventHandler<SortEvent<TreeTableView<S>>> getOnSort() {\n@@ -1646,1 +1646,1 @@\n-    public ObjectProperty<EventHandler<SortEvent<TreeTableView<S>>>> onSortProperty() {\n+    public final ObjectProperty<EventHandler<SortEvent<TreeTableView<S>>>> onSortProperty() {\n@@ -1701,1 +1701,1 @@\n-    public void setOnScrollTo(EventHandler<ScrollToEvent<Integer>> value) {\n+    public final void setOnScrollTo(EventHandler<ScrollToEvent<Integer>> value) {\n@@ -1705,1 +1705,1 @@\n-    public EventHandler<ScrollToEvent<Integer>> getOnScrollTo() {\n+    public final EventHandler<ScrollToEvent<Integer>> getOnScrollTo() {\n@@ -1712,1 +1712,1 @@\n-    public ObjectProperty<EventHandler<ScrollToEvent<Integer>>> onScrollToProperty() {\n+    public final ObjectProperty<EventHandler<ScrollToEvent<Integer>>> onScrollToProperty() {\n@@ -1755,1 +1755,1 @@\n-    public void setOnScrollToColumn(EventHandler<ScrollToEvent<TreeTableColumn<S, ?>>> value) {\n+    public final void setOnScrollToColumn(EventHandler<ScrollToEvent<TreeTableColumn<S, ?>>> value) {\n@@ -1759,1 +1759,1 @@\n-    public EventHandler<ScrollToEvent<TreeTableColumn<S, ?>>> getOnScrollToColumn() {\n+    public final EventHandler<ScrollToEvent<TreeTableColumn<S, ?>>> getOnScrollToColumn() {\n@@ -1766,1 +1766,1 @@\n-    public ObjectProperty<EventHandler<ScrollToEvent<TreeTableColumn<S, ?>>>> onScrollToColumnProperty() {\n+    public final ObjectProperty<EventHandler<ScrollToEvent<TreeTableColumn<S, ?>>>> onScrollToColumnProperty() {\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TreeTableView.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -0,0 +1,219 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package test.javafx.scene.control;\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n+import java.util.Set;\n+import javafx.scene.control.Accordion;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ButtonBar;\n+import javafx.scene.control.ButtonBase;\n+import javafx.scene.control.Cell;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ChoiceBox;\n+import javafx.scene.control.ColorPicker;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.ComboBoxBase;\n+import javafx.scene.control.DateCell;\n+import javafx.scene.control.DatePicker;\n+import javafx.scene.control.Hyperlink;\n+import javafx.scene.control.IndexedCell;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.Labeled;\n+import javafx.scene.control.ListCell;\n+import javafx.scene.control.ListView;\n+import javafx.scene.control.MenuBar;\n+import javafx.scene.control.MenuButton;\n+import javafx.scene.control.Pagination;\n+import javafx.scene.control.PasswordField;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.control.RadioButton;\n+import javafx.scene.control.ScrollBar;\n+import javafx.scene.control.ScrollPane;\n+import javafx.scene.control.Separator;\n+import javafx.scene.control.SeparatorMenuItem;\n+import javafx.scene.control.Slider;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.control.SplitPane;\n+import javafx.scene.control.TabPane;\n+import javafx.scene.control.TableRow;\n+import javafx.scene.control.TableView;\n+import javafx.scene.control.TextArea;\n+import javafx.scene.control.TextField;\n+import javafx.scene.control.TitledPane;\n+import javafx.scene.control.ToggleButton;\n+import javafx.scene.control.TreeCell;\n+import javafx.scene.control.TreeTableCell;\n+import javafx.scene.control.TreeTableRow;\n+import javafx.scene.control.TreeTableView;\n+import javafx.scene.control.cell.CheckBoxListCell;\n+import javafx.scene.control.cell.CheckBoxTableCell;\n+import javafx.scene.control.cell.CheckBoxTreeCell;\n+import javafx.scene.control.cell.CheckBoxTreeTableCell;\n+import javafx.scene.control.cell.ChoiceBoxTreeCell;\n+import javafx.scene.control.cell.ChoiceBoxTreeTableCell;\n+import javafx.scene.control.cell.ComboBoxTreeCell;\n+import javafx.scene.control.cell.ComboBoxTreeTableCell;\n+import javafx.scene.control.cell.ProgressBarTreeTableCell;\n+import javafx.scene.control.cell.TextFieldTreeCell;\n+import javafx.scene.control.cell.TextFieldTreeTableCell;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.scene.control.DoubleField;\n+import com.sun.javafx.scene.control.InputField;\n+import com.sun.javafx.scene.control.IntegerField;\n+import com.sun.javafx.scene.control.WebColorField;\n+import com.sun.javafx.scene.control.skin.FXVK;\n+\n+\/**\n+ * Tests contract for properties and their accessors and mutators\n+ * in the Control type hierarchy.\n+ *\n+ * Currently uses a list of classes, so any new Controls must be added manually.\n+ * Perhaps the test should scan modulepath and find all the Controls automagically.\n+ *\/\n+public class ControlPropertiesTest {\n+\n+    private static final boolean FAIL_FAST = true;\n+\n+    \/\/ list all current descendants of Control class.\n+    private Set<Class> allControlClasses() {\n+        return Set.of(\n+            Accordion.class,\n+            ButtonBar.class,\n+            ButtonBase.class,\n+            Button.class,\n+            Cell.class,\n+            CheckBox.class,\n+            CheckBoxListCell.class,\n+            CheckBoxTableCell.class,\n+            CheckBoxTreeCell.class,\n+            CheckBoxTreeTableCell.class,\n+            ChoiceBox.class,\n+            ChoiceBoxTreeCell.class,\n+            ChoiceBoxTreeTableCell.class,\n+            ColorPicker.class,\n+            ComboBox.class,\n+            ComboBoxBase.class,\n+            ComboBoxTreeCell.class,\n+            ComboBoxTreeTableCell.class,\n+            DateCell.class,\n+            DatePicker.class,\n+            DoubleField.class,\n+            FXVK.class,\n+            \/\/HTMLEditor.class,\n+            Hyperlink.class,\n+            IndexedCell.class,\n+            InputField.class,\n+            IntegerField.class,\n+            Labeled.class,\n+            Label.class,\n+            ListCell.class,\n+            ListView.class,\n+            MenuBar.class,\n+            MenuButton.class,\n+            Pagination.class,\n+            PasswordField.class,\n+            ProgressIndicator.class,\n+            ProgressBarTreeTableCell.class,\n+            RadioButton.class,\n+            ScrollBar.class,\n+            ScrollPane.class,\n+            Separator.class,\n+            SeparatorMenuItem.class,\n+            Slider.class,\n+            Spinner.class,\n+            SplitPane.class,\n+            TableRow.class,\n+            TableView.class,\n+            TabPane.class,\n+            TextArea.class,\n+            TextField.class,\n+            TextFieldTreeCell.class,\n+            TextFieldTreeTableCell.class,\n+            TitledPane.class,\n+            ToggleButton.class,\n+            TreeCell.class,\n+            TreeTableCell.class,\n+            TreeTableRow.class,\n+            TreeTableView.class,\n+            WebColorField.class\n+        );\n+    }\n+\n+    \/**\n+     * Tests for missing final keyword in Control properties and their accessors\/mutators.\n+     *\/\n+    @Test\n+    public void testMissingFinalMethods() {\n+        for (Class c : allControlClasses()) {\n+            check(c);\n+        }\n+    }\n+\n+    private void check(Class cls) {\n+        Method[] publicMethods = cls.getMethods();\n+        for (Method m : publicMethods) {\n+            String name = m.getName();\n+            if (name.endsWith(\"Property\") && (m.getParameterCount() == 0)) {\n+                checkModifiers(m);\n+\n+                String propName = name.substring(0, name.length() - \"Property\".length());\n+                check(publicMethods, propName, \"get\", 0);\n+                check(publicMethods, propName, \"set\", 1);\n+                check(publicMethods, propName, \"is\", 0);\n+            }\n+        }\n+    }\n+\n+    private void check(Method[] methods, String propName, String prefix, int numArgs) {\n+        StringBuilder sb = new StringBuilder(64);\n+        sb.append(prefix);\n+        sb.append(Character.toUpperCase(propName.charAt(0)));\n+        sb.append(propName, 1, propName.length());\n+\n+        String name = sb.toString();\n+        for (Method m : methods) {\n+            if (m.getParameterCount() == numArgs) {\n+                if (name.equals(m.getName())) {\n+                    checkModifiers(m);\n+                    return;\n+                }\n+            }\n+        }\n+    }\n+\n+    private void checkModifiers(Method m) {\n+        int mod = m.getModifiers();\n+        if (Modifier.isPublic(mod) && !Modifier.isFinal(mod)) {\n+            String msg = m + \" is not final.\";\n+            if (FAIL_FAST) {\n+                throw new AssertionError(msg);\n+            } else {\n+                System.err.println(msg);\n+            }\n+        }\n+    }\n+}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ControlPropertiesTest.java","additions":219,"deletions":0,"binary":false,"changes":219,"status":"added"}]}