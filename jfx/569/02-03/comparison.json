{"files":[{"patch":"@@ -44,0 +44,1 @@\n+import java.util.function.Supplier;\n@@ -51,2 +52,1 @@\n- * The {@link CheckBoxListCell} is special as in there the checkbox will be disabled\n- * based of the editability.\n+ * The {@link CheckBoxListCell} is special as in there the checkbox will be disabled based of the editability.\n@@ -60,1 +60,1 @@\n-    private final ListCell<String> listCell;\n+    private final Supplier<ListCell<String>> listCellSupplier;\n@@ -64,2 +64,2 @@\n-        return wrapAsObjectArray(List.of(new ListCell<>(), new ComboBoxListCell<>(), new TextFieldListCell<>(),\n-                new ChoiceBoxListCell<>(), new CheckBoxListCell<>(obj -> new SimpleBooleanProperty())));\n+        return wrapAsObjectArray(List.of(ListCell::new, ComboBoxListCell::new, TextFieldListCell::new,\n+                ChoiceBoxListCell::new, () -> new CheckBoxListCell<>(obj -> new SimpleBooleanProperty())));\n@@ -68,1 +68,1 @@\n-    private static Collection<Object[]> wrapAsObjectArray(List<ListCell<?>> listCells) {\n+    private static Collection<Object[]> wrapAsObjectArray(List<Supplier<ListCell<?>>> listCells) {\n@@ -72,2 +72,2 @@\n-    public ListCellStartEditTest(ListCell<String> listCell) {\n-        this.listCell = listCell;\n+    public ListCellStartEditTest(Supplier<ListCell<String>> listCellSupplier) {\n+        this.listCellSupplier = listCellSupplier;\n@@ -83,2 +83,3 @@\n-    public void testStartEdit() {\n-        \/\/ First test startEdit() without anything set yet.\n+    public void testStartEditMustNotThrowNPE() {\n+        ListCell<String> listCell = listCellSupplier.get();\n+        \/\/ A list cell without anything attached should not throw a NPE.\n@@ -86,0 +87,1 @@\n+    }\n@@ -87,0 +89,3 @@\n+    @Test\n+    public void testStartEditRespectsEditable() {\n+        ListCell<String> listCell = listCellSupplier.get();\n@@ -88,1 +93,0 @@\n-\n@@ -93,1 +97,1 @@\n-                testStartEditImpl(isListViewEditable, isCellEditable);\n+                testStartEditImpl(listCell, isListViewEditable, isCellEditable);\n@@ -102,0 +106,1 @@\n+     * @param listCell the {@link ListCell} where the <code>startEdit<\/code> method is tested\n@@ -105,1 +110,1 @@\n-    private void testStartEditImpl(boolean isListViewEditable, boolean isCellEditable) {\n+    private void testStartEditImpl(ListCell<String> listCell, boolean isListViewEditable, boolean isCellEditable) {\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ListCellStartEditTest.java","additions":18,"deletions":13,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+import java.util.function.Supplier;\n@@ -53,2 +54,1 @@\n- * The {@link CheckBoxTableCell} is special as in there the checkbox will be disabled\n- * based of the editability.\n+ * The {@link CheckBoxTableCell} is special as in there the checkbox will be disabled based of the editability.\n@@ -65,1 +65,1 @@\n-    private final TableCell<String, ?> tableCell;\n+    private final Supplier<TableCell<String, ?>> tableCellSupplier;\n@@ -69,2 +69,2 @@\n-        return wrapAsObjectArray(List.of(new TableCell<>(), new ComboBoxTableCell<>(), new TextFieldTableCell<>(),\n-                new ChoiceBoxTableCell<>(), new CheckBoxTableCell<>(), new ProgressBarTableCell<>()));\n+        return wrapAsObjectArray(List.of(TableCell::new, ComboBoxTableCell::new, TextFieldTableCell::new,\n+                ChoiceBoxTableCell::new, CheckBoxTableCell::new, ProgressBarTableCell::new));\n@@ -73,1 +73,1 @@\n-    private static Collection<Object[]> wrapAsObjectArray(List<TableCell<Object, ?>> tableCells) {\n+    private static Collection<Object[]> wrapAsObjectArray(List<Supplier<TableCell<Object, ?>>> tableCells) {\n@@ -77,2 +77,2 @@\n-    public TableCellStartEditTest(TableCell<String, ?> tableCell) {\n-        this.tableCell = tableCell;\n+    public TableCellStartEditTest(Supplier<TableCell<String, ?>> tableCellSupplier) {\n+        this.tableCellSupplier = tableCellSupplier;\n@@ -93,2 +93,3 @@\n-    public void testStartEdit() {\n-        \/\/ First test startEdit() without anything set yet.\n+    public void testStartEditMustNotThrowNPE() {\n+        TableCell<String, ?> tableCell = tableCellSupplier.get();\n+        \/\/ A table cell without anything attached should not throw a NPE.\n@@ -96,0 +97,1 @@\n+    }\n@@ -97,0 +99,3 @@\n+    @Test\n+    public void testStartEditRespectsEditable() {\n+        TableCell<String, ?> tableCell = tableCellSupplier.get();\n@@ -107,1 +112,1 @@\n-                        testStartEditImpl(isTableEditable, isColumnEditable, isRowEditable, isCellEditable);\n+                        testStartEditImpl(tableCell, isTableEditable, isColumnEditable, isRowEditable, isCellEditable);\n@@ -118,0 +123,1 @@\n+     * @param tableCell the {@link TableCell} where the <code>startEdit<\/code> method is tested\n@@ -123,1 +129,1 @@\n-    private void testStartEditImpl(boolean isTableEditable, boolean isColumnEditable, boolean isRowEditable,\n+    private void testStartEditImpl(TableCell<String, ?> tableCell, boolean isTableEditable, boolean isColumnEditable, boolean isRowEditable,\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TableCellStartEditTest.java","additions":18,"deletions":12,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+import java.util.function.Supplier;\n@@ -50,2 +51,1 @@\n- * The {@link CheckBoxTreeCell} is special as in there the checkbox will be disabled\n- * based of the editability.\n+ * The {@link CheckBoxTreeCell} is special as in there the checkbox will be disabled based of the editability.\n@@ -59,1 +59,1 @@\n-    private final TreeCell<String> treeCell;\n+    private final Supplier<TreeCell<String>> treeCellSupplier;\n@@ -63,2 +63,2 @@\n-        return wrapAsObjectArray(List.of(new TreeCell<>(), new ComboBoxTreeCell<>(), new TextFieldTreeCell<>(),\n-                new ChoiceBoxTreeCell<>(), new CheckBoxTreeCell<>(obj -> new SimpleBooleanProperty())));\n+        return wrapAsObjectArray(List.of(TreeCell::new, ComboBoxTreeCell::new, TextFieldTreeCell::new,\n+                ChoiceBoxTreeCell::new,() ->  new CheckBoxTreeCell<>(obj -> new SimpleBooleanProperty())));\n@@ -67,1 +67,1 @@\n-    private static Collection<Object[]> wrapAsObjectArray(List<TreeCell<String>> treeCells) {\n+    private static Collection<Object[]> wrapAsObjectArray(List<Supplier<TreeCell<String>>> treeCells) {\n@@ -71,2 +71,2 @@\n-    public TreeCellStartEditTest(TreeCell<String> treeCell) {\n-        this.treeCell = treeCell;\n+    public TreeCellStartEditTest(Supplier<TreeCell<String>> treeCellSupplier) {\n+        this.treeCellSupplier = treeCellSupplier;\n@@ -83,2 +83,3 @@\n-    public void testStartEdit() {\n-        \/\/ First test startEdit() without anything set yet.\n+    public void testStartEditMustNotThrowNPE() {\n+        TreeCell<String> treeCell = treeCellSupplier.get();\n+        \/\/ A tree cell without anything attached should not throw a NPE.\n@@ -86,0 +87,1 @@\n+    }\n@@ -87,0 +89,3 @@\n+    @Test\n+    public void testStartEditRespectsEditable() {\n+        TreeCell<String> treeCell = treeCellSupplier.get();\n@@ -93,1 +98,1 @@\n-                testStartEditImpl(isTreeViewEditable, isCellEditable);\n+                testStartEditImpl(treeCell, isTreeViewEditable, isCellEditable);\n@@ -102,0 +107,1 @@\n+     * @param treeCell the {@link TreeCell} where the <code>startEdit<\/code> method is tested\n@@ -105,1 +111,1 @@\n-    private void testStartEditImpl(boolean isTreeViewEditable, boolean isCellEditable) {\n+    private void testStartEditImpl(TreeCell<String> treeCell, boolean isTreeViewEditable, boolean isCellEditable) {\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeCellStartEditTest.java","additions":18,"deletions":12,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+import java.util.function.Supplier;\n@@ -52,2 +53,2 @@\n- * implementations. The {@link CheckBoxTreeTableCell} is special as in there the checkbox will be disabled\n- * based of the editability.\n+ * implementations. The {@link CheckBoxTreeTableCell} is special as in there the checkbox will be disabled based of the\n+ * editability.\n@@ -64,1 +65,1 @@\n-    private final TreeTableCell<String, ?> treeTableCell;\n+    private final Supplier<TreeTableCell<String, ?>> treeTableCellSupplier;\n@@ -69,3 +70,2 @@\n-                List.of(new TreeTableCell<>(), new ComboBoxTreeTableCell<>(), new TextFieldTreeTableCell<>(),\n-                        new ChoiceBoxTreeTableCell<>(), new CheckBoxTreeTableCell<>(),\n-                        new ProgressBarTreeTableCell<>()));\n+                List.of(TreeTableCell::new , ComboBoxTreeTableCell::new, TextFieldTreeTableCell::new,\n+                        ChoiceBoxTreeTableCell::new, CheckBoxTreeTableCell::new, ProgressBarTreeTableCell::new));\n@@ -74,1 +74,1 @@\n-    private static Collection<Object[]> wrapAsObjectArray(List<TreeTableCell<Object, ?>> treeTableCells) {\n+    private static Collection<Object[]> wrapAsObjectArray(List<Supplier<TreeTableCell<Object, ?>>> treeTableCells) {\n@@ -78,2 +78,2 @@\n-    public TreeTableCellStartEditTest(TreeTableCell<String, ?> treeTableCell) {\n-        this.treeTableCell = treeTableCell;\n+    public TreeTableCellStartEditTest(Supplier<TreeTableCell<String, ?>> treeTableCellSupplier) {\n+        this.treeTableCellSupplier = treeTableCellSupplier;\n@@ -95,2 +95,3 @@\n-    public void testStartEdit() {\n-        \/\/ First test startEdit() without anything set yet.\n+    public void testStartEditMustNotThrowNPE() {\n+        TreeTableCell<String, ?> treeTableCell = treeTableCellSupplier.get();\n+        \/\/ A tree table cell without anything attached should not throw a NPE.\n@@ -98,0 +99,1 @@\n+    }\n@@ -99,0 +101,3 @@\n+    @Test\n+    public void testStartEditRespectsEditable() {\n+        TreeTableCell<String, ?> treeTableCell = treeTableCellSupplier.get();\n@@ -109,1 +114,1 @@\n-                        testStartEditImpl(isTableEditable, isColumnEditable, isRowEditable, isCellEditable);\n+                        testStartEditImpl(treeTableCell, isTableEditable, isColumnEditable, isRowEditable, isCellEditable);\n@@ -120,0 +125,1 @@\n+     * @param treeTableCell the {@link TreeTableCell} where the <code>startEdit<\/code> method is tested\n@@ -125,1 +131,1 @@\n-    private void testStartEditImpl(boolean isTreeTableEditable, boolean isColumnEditable, boolean isRowEditable,\n+    private void testStartEditImpl(TreeTableCell<String, ?> treeTableCell, boolean isTreeTableEditable, boolean isColumnEditable, boolean isRowEditable,\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeTableCellStartEditTest.java","additions":19,"deletions":13,"binary":false,"changes":32,"status":"modified"}]}