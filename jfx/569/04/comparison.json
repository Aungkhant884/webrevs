{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -291,1 +291,2 @@\n-        if (! isEditable() || ! getListView().isEditable()) {\n+        super.startEdit();\n+        if (!isEditing()) {\n@@ -301,6 +302,2 @@\n-        super.startEdit();\n-\n-        if (isEditing()) {\n-            setText(null);\n-            setGraphic(choiceBox);\n-        }\n+        setText(null);\n+        setGraphic(choiceBox);\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/cell\/ChoiceBoxListCell.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -306,1 +306,2 @@\n-        if (! isEditable() || ! getTableView().isEditable() || ! getTableColumn().isEditable()) {\n+        super.startEdit();\n+        if (!isEditing()) {\n@@ -316,1 +317,0 @@\n-        super.startEdit();\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/cell\/ChoiceBoxTableCell.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -297,1 +297,2 @@\n-        if (! isEditable() || ! getTreeView().isEditable()) {\n+        TreeItem<T> treeItem = getTreeItem();\n+        if (treeItem == null) {\n@@ -301,2 +302,2 @@\n-        TreeItem<T> treeItem = getTreeItem();\n-        if (treeItem == null) {\n+        super.startEdit();\n+        if (!isEditing()) {\n@@ -315,4 +316,1 @@\n-        super.startEdit();\n-\n-        if (isEditing()) {\n-            setText(null);\n+        setText(null);\n@@ -320,7 +318,6 @@\n-            Node graphic = getTreeItemGraphic();\n-            if (graphic != null) {\n-                hbox.getChildren().setAll(graphic, choiceBox);\n-                setGraphic(hbox);\n-            } else {\n-                setGraphic(choiceBox);\n-            }\n+        Node graphic = getTreeItemGraphic();\n+        if (graphic != null) {\n+            hbox.getChildren().setAll(graphic, choiceBox);\n+            setGraphic(hbox);\n+        } else {\n+            setGraphic(choiceBox);\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/cell\/ChoiceBoxTreeCell.java","additions":12,"deletions":15,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -306,1 +306,2 @@\n-        if (! isEditable() || ! getTreeTableView().isEditable() || ! getTableColumn().isEditable()) {\n+        super.startEdit();\n+        if (!isEditing()) {\n@@ -316,1 +317,0 @@\n-        super.startEdit();\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/cell\/ChoiceBoxTreeTableCell.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -322,1 +322,2 @@\n-        if (! isEditable() || ! getListView().isEditable()) {\n+        super.startEdit();\n+        if (!isEditing()) {\n@@ -333,6 +334,2 @@\n-        super.startEdit();\n-\n-        if (isEditing()) {\n-            setText(null);\n-            setGraphic(comboBox);\n-        }\n+        setText(null);\n+        setGraphic(comboBox);\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/cell\/ComboBoxListCell.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -342,1 +342,2 @@\n-        if (! isEditable() || ! getTableView().isEditable() || ! getTableColumn().isEditable()) {\n+        super.startEdit();\n+        if (!isEditing()) {\n@@ -353,1 +354,0 @@\n-        super.startEdit();\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/cell\/ComboBoxTableCell.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -328,1 +328,2 @@\n-        if (! isEditable() || ! getTreeView().isEditable()) {\n+        TreeItem<T> treeItem = getTreeItem();\n+        if (treeItem == null) {\n@@ -332,2 +333,2 @@\n-        TreeItem<T> treeItem = getTreeItem();\n-        if (treeItem == null) {\n+        super.startEdit();\n+        if (!isEditing()) {\n@@ -347,4 +348,1 @@\n-        super.startEdit();\n-\n-        if (isEditing()) {\n-            setText(null);\n+        setText(null);\n@@ -352,7 +350,6 @@\n-            Node graphic = CellUtils.getGraphic(treeItem);\n-            if (graphic != null) {\n-                hbox.getChildren().setAll(graphic, comboBox);\n-                setGraphic(hbox);\n-            } else {\n-                setGraphic(comboBox);\n-            }\n+        Node graphic = CellUtils.getGraphic(treeItem);\n+        if (graphic != null) {\n+            hbox.getChildren().setAll(graphic, comboBox);\n+            setGraphic(hbox);\n+        } else {\n+            setGraphic(comboBox);\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/cell\/ComboBoxTreeCell.java","additions":12,"deletions":15,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -342,1 +342,2 @@\n-        if (! isEditable() || ! getTreeTableView().isEditable() || ! getTableColumn().isEditable()) {\n+        super.startEdit();\n+        if (!isEditing()) {\n@@ -353,1 +354,0 @@\n-        super.startEdit();\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/cell\/ComboBoxTreeTableCell.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -182,1 +182,2 @@\n-        if (! isEditable() || ! getListView().isEditable()) {\n+        super.startEdit();\n+        if (!isEditing()) {\n@@ -185,1 +186,0 @@\n-        super.startEdit();\n@@ -187,6 +187,2 @@\n-        if (isEditing()) {\n-            if (textField == null) {\n-                textField = CellUtils.createTextField(this, getConverter());\n-            }\n-\n-            CellUtils.startEdit(this, getConverter(), null, null, textField);\n+        if (textField == null) {\n+            textField = CellUtils.createTextField(this, getConverter());\n@@ -194,0 +190,2 @@\n+\n+        CellUtils.startEdit(this, getConverter(), null, null, textField);\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/cell\/TextFieldListCell.java","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -186,3 +186,2 @@\n-        if (! isEditable()\n-                || ! getTableView().isEditable()\n-                || ! getTableColumn().isEditable()) {\n+        super.startEdit();\n+        if (!isEditing()) {\n@@ -191,1 +190,0 @@\n-        super.startEdit();\n@@ -193,6 +191,2 @@\n-        if (isEditing()) {\n-            if (textField == null) {\n-                textField = CellUtils.createTextField(this, getConverter());\n-            }\n-\n-            CellUtils.startEdit(this, getConverter(), null, null, textField);\n+        if (textField == null) {\n+            textField = CellUtils.createTextField(this, getConverter());\n@@ -200,0 +194,2 @@\n+\n+        CellUtils.startEdit(this, getConverter(), null, null, textField);\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/cell\/TextFieldTableCell.java","additions":7,"deletions":11,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -192,1 +192,2 @@\n-        if (! isEditable() || ! getTreeView().isEditable()) {\n+        super.startEdit();\n+        if (!isEditing()) {\n@@ -195,10 +196,0 @@\n-        super.startEdit();\n-\n-        if (isEditing()) {\n-            StringConverter<T> converter = getConverter();\n-            if (textField == null) {\n-                textField = CellUtils.createTextField(this, converter);\n-            }\n-            if (hbox == null) {\n-                hbox = new HBox(CellUtils.TREE_VIEW_HBOX_GRAPHIC_PADDING);\n-            }\n@@ -206,1 +197,3 @@\n-            CellUtils.startEdit(this, converter, hbox, getTreeItemGraphic(), textField);\n+        StringConverter<T> converter = getConverter();\n+        if (textField == null) {\n+            textField = CellUtils.createTextField(this, converter);\n@@ -208,0 +201,5 @@\n+        if (hbox == null) {\n+            hbox = new HBox(CellUtils.TREE_VIEW_HBOX_GRAPHIC_PADDING);\n+        }\n+\n+        CellUtils.startEdit(this, converter, hbox, getTreeItemGraphic(), textField);\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/cell\/TextFieldTreeCell.java","additions":11,"deletions":13,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -188,3 +188,2 @@\n-        if (! isEditable()\n-                || ! getTreeTableView().isEditable()\n-                || ! getTableColumn().isEditable()) {\n+        super.startEdit();\n+        if (!isEditing()) {\n@@ -193,1 +192,0 @@\n-        super.startEdit();\n@@ -195,6 +193,2 @@\n-        if (isEditing()) {\n-            if (textField == null) {\n-                textField = CellUtils.createTextField(this, getConverter());\n-            }\n-\n-            CellUtils.startEdit(this, getConverter(), null, null, textField);\n+        if (textField == null) {\n+            textField = CellUtils.createTextField(this, getConverter());\n@@ -202,0 +196,2 @@\n+\n+        CellUtils.startEdit(this, getConverter(), null, null, textField);\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/cell\/TextFieldTreeTableCell.java","additions":7,"deletions":11,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -245,1 +245,0 @@\n-    @Test(expected = NullPointerException.class)\n@@ -297,8 +296,0 @@\n-    @Test(expected = NullPointerException.class)\n-    public void test_startEdit_cellEditableIsTrue_listViewIsNull_isNotEmpty() {\n-        ChoiceBoxListCell<Object> cell = new ChoiceBoxListCell<>();\n-        cell.updateItem(\"TEST\", false);\n-        cell.setEditable(true);\n-        cell.startEdit();\n-    }\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/cell\/ChoiceBoxListCellTest.java","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -278,16 +278,0 @@\n-    @Test(expected = NullPointerException.class)\n-    public void test_startEdit_cellEditableIsTrue_tableViewIsNull_isEmpty() {\n-        ChoiceBoxTableCell<Object,Object> cell = new ChoiceBoxTableCell<>();\n-        cell.setEditable(true);\n-        cell.startEdit();\n-    }\n-\n-    @Test(expected = NullPointerException.class)\n-    public void test_startEdit_tableViewEditableIsTrue_tableColumnIsNull() {\n-        TableView tableView = new TableView();\n-        tableView.setEditable(true);\n-        ChoiceBoxTableCell<Object,Object> cell = new ChoiceBoxTableCell<>();\n-        cell.updateTableView(tableView);\n-        cell.startEdit();\n-    }\n-\n@@ -343,8 +327,0 @@\n-    @Test(expected = NullPointerException.class)\n-    public void test_startEdit_cellEditableIsTrue_tableViewIsNull_isNotEmpty() {\n-        ChoiceBoxTableCell<Object,Object> cell = new ChoiceBoxTableCell<>();\n-        cell.updateItem(\"TEST\", false);\n-        cell.setEditable(true);\n-        cell.startEdit();\n-    }\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/cell\/ChoiceBoxTableCellTest.java","additions":1,"deletions":25,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -246,7 +246,0 @@\n-    @Test(expected = NullPointerException.class)\n-    public void test_startEdit_cellEditableIsTrue_treeViewIsNull_isEmpty() {\n-        ChoiceBoxTreeCell<Object> cell = new ChoiceBoxTreeCell<>();\n-        cell.setEditable(true);\n-        cell.startEdit();\n-    }\n-\n@@ -298,8 +291,0 @@\n-    @Test(expected = NullPointerException.class)\n-    public void test_startEdit_cellEditableIsTrue_treeViewIsNull_isNotEmpty() {\n-        ChoiceBoxTreeCell<Object> cell = new ChoiceBoxTreeCell<>();\n-        cell.updateItem(\"TEST\", false);\n-        cell.setEditable(true);\n-        cell.startEdit();\n-    }\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/cell\/ChoiceBoxTreeCellTest.java","additions":1,"deletions":16,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -275,16 +275,0 @@\n-    @Test(expected = NullPointerException.class)\n-    public void test_startEdit_cellEditableIsTrue_tableViewIsNull_isEmpty() {\n-        ChoiceBoxTreeTableCell<Object,Object> cell = new ChoiceBoxTreeTableCell<>();\n-        cell.setEditable(true);\n-        cell.startEdit();\n-    }\n-\n-    @Test(expected = NullPointerException.class)\n-    public void test_startEdit_tableViewEditableIsTrue_tableColumnIsNull() {\n-        TreeTableView tableView = new TreeTableView();\n-        tableView.setEditable(true);\n-        ChoiceBoxTreeTableCell<Object,Object> cell = new ChoiceBoxTreeTableCell<>();\n-        cell.updateTreeTableView(tableView);\n-        cell.startEdit();\n-    }\n-\n@@ -340,8 +324,0 @@\n-    @Test(expected = NullPointerException.class)\n-    public void test_startEdit_cellEditableIsTrue_tableViewIsNull_isNotEmpty() {\n-        ChoiceBoxTreeTableCell<Object,Object> cell = new ChoiceBoxTreeTableCell<>();\n-        cell.updateItem(\"TEST\", false);\n-        cell.setEditable(true);\n-        cell.startEdit();\n-    }\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/cell\/ChoiceBoxTreeTableCellTest.java","additions":1,"deletions":25,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -245,7 +245,0 @@\n-    @Test(expected = NullPointerException.class)\n-    public void test_startEdit_cellEditableIsTrue_listViewIsNull_isEmpty() {\n-        ComboBoxListCell<Object> cell = new ComboBoxListCell<>();\n-        cell.setEditable(true);\n-        cell.startEdit();\n-    }\n-\n@@ -297,8 +290,0 @@\n-    @Test(expected = NullPointerException.class)\n-    public void test_startEdit_cellEditableIsTrue_listViewIsNull_isNotEmpty() {\n-        ComboBoxListCell<Object> cell = new ComboBoxListCell<>();\n-        cell.updateItem(\"TEST\", false);\n-        cell.setEditable(true);\n-        cell.startEdit();\n-    }\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/cell\/ComboBoxListCellTest.java","additions":1,"deletions":16,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -311,16 +311,0 @@\n-    @Test(expected = NullPointerException.class)\n-    public void test_startEdit_cellEditableIsTrue_tableViewIsNull_isEmpty() {\n-        ComboBoxTableCell<Object,Object> cell = new ComboBoxTableCell<>();\n-        cell.setEditable(true);\n-        cell.startEdit();\n-    }\n-\n-    @Test(expected = NullPointerException.class)\n-    public void test_startEdit_tableViewEditableIsTrue_tableColumnIsNull() {\n-        TableView tableView = new TableView();\n-        tableView.setEditable(true);\n-        ComboBoxTableCell<Object,Object> cell = new ComboBoxTableCell<>();\n-        cell.updateTableView(tableView);\n-        cell.startEdit();\n-    }\n-\n@@ -376,8 +360,0 @@\n-    @Test(expected = NullPointerException.class)\n-    public void test_startEdit_cellEditableIsTrue_tableViewIsNull_isNotEmpty() {\n-        ComboBoxTableCell<Object,Object> cell = new ComboBoxTableCell<>();\n-        cell.updateItem(\"TEST\", false);\n-        cell.setEditable(true);\n-        cell.startEdit();\n-    }\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/cell\/ComboBoxTableCellTest.java","additions":1,"deletions":25,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -246,7 +246,0 @@\n-    @Test(expected = NullPointerException.class)\n-    public void test_startEdit_cellEditableIsTrue_treeViewIsNull_isEmpty() {\n-        ComboBoxTreeCell<Object> cell = new ComboBoxTreeCell<>();\n-        cell.setEditable(true);\n-        cell.startEdit();\n-    }\n-\n@@ -298,8 +291,0 @@\n-    @Test(expected = NullPointerException.class)\n-    public void test_startEdit_cellEditableIsTrue_treeViewIsNull_isNotEmpty() {\n-        ComboBoxTreeCell<Object> cell = new ComboBoxTreeCell<>();\n-        cell.updateItem(\"TEST\", false);\n-        cell.setEditable(true);\n-        cell.startEdit();\n-    }\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/cell\/ComboBoxTreeCellTest.java","additions":1,"deletions":16,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -298,16 +298,0 @@\n-    @Test(expected = NullPointerException.class)\n-    public void test_startEdit_cellEditableIsTrue_tableViewIsNull_isEmpty() {\n-        ComboBoxTreeTableCell<Object,Object> cell = new ComboBoxTreeTableCell<>();\n-        cell.setEditable(true);\n-        cell.startEdit();\n-    }\n-\n-    @Test(expected = NullPointerException.class)\n-    public void test_startEdit_tableViewEditableIsTrue_tableColumnIsNull() {\n-        TreeTableView tableView = new TreeTableView();\n-        tableView.setEditable(true);\n-        ComboBoxTreeTableCell<Object,Object> cell = new ComboBoxTreeTableCell<>();\n-        cell.updateTreeTableView(tableView);\n-        cell.startEdit();\n-    }\n-\n@@ -363,8 +347,0 @@\n-    @Test(expected = NullPointerException.class)\n-    public void test_startEdit_cellEditableIsTrue_tableViewIsNull_isNotEmpty() {\n-        ComboBoxTreeTableCell<Object,Object> cell = new ComboBoxTreeTableCell<>();\n-        cell.updateItem(\"TEST\", false);\n-        cell.setEditable(true);\n-        cell.startEdit();\n-    }\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/cell\/ComboBoxTreeTableCellTest.java","additions":1,"deletions":25,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -0,0 +1,137 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.javafx.scene.control.cell;\n+\n+import javafx.beans.property.SimpleBooleanProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.scene.control.ListCell;\n+import javafx.scene.control.ListView;\n+import javafx.scene.control.cell.CheckBoxListCell;\n+import javafx.scene.control.cell.ChoiceBoxListCell;\n+import javafx.scene.control.cell.ComboBoxListCell;\n+import javafx.scene.control.cell.TextFieldListCell;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.Supplier;\n+\n+import static java.util.stream.Collectors.toList;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+\n+\/**\n+ * Parameterized tests for the {@link ListCell#startEdit()} method of {@link ListCell} and all sub implementations.\n+ * The {@link CheckBoxListCell} is special as in there the checkbox will be disabled based of the editability.\n+ *\/\n+@RunWith(Parameterized.class)\n+public class ListCellStartEditTest {\n+\n+    private static final boolean[] EDITABLE_STATES = { true, false };\n+\n+    private final Supplier<ListCell<String>> listCellSupplier;\n+\n+    private ListView<String> listView;\n+    private ListCell<String> listCell;\n+\n+    @Parameterized.Parameters\n+    public static Collection<Object[]> data() {\n+        return wrapAsObjectArray(List.of(ListCell::new, ComboBoxListCell::new, TextFieldListCell::new,\n+                ChoiceBoxListCell::new, () -> new CheckBoxListCell<>(obj -> new SimpleBooleanProperty())));\n+    }\n+\n+    private static Collection<Object[]> wrapAsObjectArray(List<Supplier<ListCell<?>>> listCells) {\n+        return listCells.stream().map(cell -> new Object[] { cell }).collect(toList());\n+    }\n+\n+    public ListCellStartEditTest(Supplier<ListCell<String>> listCellSupplier) {\n+        this.listCellSupplier = listCellSupplier;\n+    }\n+\n+    @Before\n+    public void setup() {\n+        ObservableList<String> items = FXCollections.observableArrayList(\"1\", \"2\", \"3\");\n+        listView = new ListView<>(items);\n+\n+        listCell = listCellSupplier.get();\n+    }\n+\n+    @Test\n+    public void testStartEditMustNotThrowNPE() {\n+        \/\/ A list cell without anything attached should not throw a NPE.\n+        listCell.startEdit();\n+    }\n+\n+    @Test\n+    public void testStartEditRespectsEditable() {\n+        listCell.updateIndex(0);\n+        listCell.updateListView(listView);\n+\n+        for (boolean isListViewEditable : EDITABLE_STATES) {\n+            for (boolean isCellEditable : EDITABLE_STATES) {\n+                testStartEditImpl(isListViewEditable, isCellEditable);\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * A {@link ListCell} (or sub implementation) should be editable (thus, can be in editing state), if the\n+     * corresponding list view and cell is editable.\n+     *\n+     * @param isListViewEditable true, when the list view should be editable, false otherwise\n+     * @param isCellEditable true, when the cell should be editable, false otherwise\n+     *\/\n+    private void testStartEditImpl(boolean isListViewEditable, boolean isCellEditable) {\n+        assertFalse(listCell.isEditing());\n+\n+        listView.setEditable(isListViewEditable);\n+        listCell.setEditable(isCellEditable);\n+\n+        listCell.startEdit();\n+\n+        boolean expectedEditingState = isListViewEditable && isCellEditable;\n+        assertEquals(expectedEditingState, listCell.isEditing());\n+\n+        if (listCell instanceof CheckBoxListCell) {\n+            assertNotNull(listCell.getGraphic());\n+            \/\/ Ignored until https:\/\/bugs.openjdk.java.net\/browse\/JDK-8270042 is resolved.\n+            \/\/ Check if the checkbox is disabled when not editable.\n+            \/\/ assertEquals(expectedEditingState, !listCell.getGraphic().isDisabled());\n+        } else if (!listCell.getClass().equals(ListCell.class)) {\n+            \/\/ All other sub implementation should show a graphic when editable.\n+            assertEquals(expectedEditingState, listCell.getGraphic() != null);\n+        }\n+\n+        \/\/ Restore the editing state.\n+        listCell.cancelEdit();\n+    }\n+\n+}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/cell\/ListCellStartEditTest.java","additions":137,"deletions":0,"binary":false,"changes":137,"status":"added"},{"patch":"@@ -0,0 +1,163 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.javafx.scene.control.cell;\n+\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.scene.control.TableCell;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.TableRow;\n+import javafx.scene.control.TableView;\n+import javafx.scene.control.cell.CheckBoxTableCell;\n+import javafx.scene.control.cell.ChoiceBoxTableCell;\n+import javafx.scene.control.cell.ComboBoxTableCell;\n+import javafx.scene.control.cell.ProgressBarTableCell;\n+import javafx.scene.control.cell.TextFieldTableCell;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.Supplier;\n+\n+import static java.util.stream.Collectors.toList;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+\n+\/**\n+ * Parameterized tests for the {@link TableCell#startEdit()} method of {@link TableCell} and all sub implementations.\n+ * The {@link CheckBoxTableCell} is special as in there the checkbox will be disabled based of the editability.\n+ *\/\n+@RunWith(Parameterized.class)\n+public class TableCellStartEditTest {\n+\n+    private static final boolean[] EDITABLE_STATES = { true, false };\n+\n+    private final Supplier<TableCell<String, ?>> tableCellSupplier;\n+\n+    private TableView<String> table;\n+    private TableRow<String> tableRow;\n+    private TableColumn<String, ?> tableColumn;\n+    private TableCell<String, ?> tableCell;\n+\n+\n+    @Parameterized.Parameters\n+    public static Collection<Object[]> data() {\n+        return wrapAsObjectArray(List.of(TableCell::new, ComboBoxTableCell::new, TextFieldTableCell::new,\n+                ChoiceBoxTableCell::new, CheckBoxTableCell::new, ProgressBarTableCell::new));\n+    }\n+\n+    private static Collection<Object[]> wrapAsObjectArray(List<Supplier<TableCell<Object, ?>>> tableCells) {\n+        return tableCells.stream().map(cell -> new Object[] { cell }).collect(toList());\n+    }\n+\n+    public TableCellStartEditTest(Supplier<TableCell<String, ?>> tableCellSupplier) {\n+        this.tableCellSupplier = tableCellSupplier;\n+    }\n+\n+    @Before\n+    public void setup() {\n+        ObservableList<String> items = FXCollections.observableArrayList(\"1\", \"2\", \"3\");\n+        table = new TableView<>(items);\n+\n+        tableColumn = new TableColumn<>();\n+        table.getColumns().add(tableColumn);\n+\n+        tableRow = new TableRow<>();\n+\n+        tableCell = tableCellSupplier.get();\n+    }\n+\n+    @Test\n+    public void testStartEditMustNotThrowNPE() {\n+        \/\/ A table cell without anything attached should not throw a NPE.\n+        tableCell.startEdit();\n+    }\n+\n+    @Test\n+    public void testStartEditRespectsEditable() {\n+        tableCell.updateIndex(0);\n+\n+        tableCell.updateTableColumn(tableColumn);\n+        tableCell.updateTableRow(tableRow);\n+        tableCell.updateTableView(table);\n+\n+        for (boolean isTableEditable : EDITABLE_STATES) {\n+            for (boolean isColumnEditable : EDITABLE_STATES) {\n+                for (boolean isRowEditable : EDITABLE_STATES) {\n+                    for (boolean isCellEditable : EDITABLE_STATES) {\n+                        testStartEditImpl(isTableEditable, isColumnEditable, isRowEditable, isCellEditable);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * A {@link TableCell} (or sub implementation) should be editable (thus, can be in editing state), if the\n+     * corresponding table, column, row  and cell is editable.\n+     *\n+     * @param isTableEditable true, when the table should be editable, false otherwise\n+     * @param isColumnEditable true, when the column should be editable, false otherwise\n+     * @param isRowEditable true, when the row should be editable, false otherwise\n+     * @param isCellEditable true, when the cell should be editable, false otherwise\n+     *\/\n+    private void testStartEditImpl(boolean isTableEditable, boolean isColumnEditable, boolean isRowEditable,\n+            boolean isCellEditable) {\n+        assertFalse(tableCell.isEditing());\n+\n+        table.setEditable(isTableEditable);\n+        tableColumn.setEditable(isColumnEditable);\n+        tableRow.setEditable(isRowEditable);\n+        tableCell.setEditable(isCellEditable);\n+\n+        tableCell.startEdit();\n+\n+        \/\/ Only when the table, column, row and the cell itself is editable, it can get in editing state.\n+        boolean expectedEditingState = isTableEditable && isColumnEditable && isRowEditable && isCellEditable;\n+        assertEquals(expectedEditingState, tableCell.isEditing());\n+\n+        if (tableCell instanceof CheckBoxTableCell) {\n+            assertNotNull(tableCell.getGraphic());\n+            \/\/ Ignored until https:\/\/bugs.openjdk.java.net\/browse\/JDK-8270042 is resolved.\n+            \/\/ Check if the checkbox is disabled when not editable.\n+            \/\/ assertEquals(expectedEditingState, !tableCell.getGraphic().isDisabled());\n+        } else if (tableCell instanceof ProgressBarTableCell) {\n+            \/\/ The progress bar is always shown.\n+            assertNotNull(tableCell.getGraphic());\n+        } else if (!tableCell.getClass().equals(TableCell.class)) {\n+            \/\/ All other sub implementation should show a graphic when editable.\n+            assertEquals(expectedEditingState, tableCell.getGraphic() != null);\n+        }\n+\n+        \/\/ Restore the editing state.\n+        tableCell.cancelEdit();\n+    }\n+\n+}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/cell\/TableCellStartEditTest.java","additions":163,"deletions":0,"binary":false,"changes":163,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -237,7 +237,0 @@\n-    @Test(expected = NullPointerException.class)\n-    public void test_startEdit_cellEditableIsTrue_listViewIsNull_isEmpty() {\n-        TextFieldListCell<Object> cell = new TextFieldListCell<>();\n-        cell.setEditable(true);\n-        cell.startEdit();\n-    }\n-\n@@ -289,8 +282,0 @@\n-    @Test(expected = NullPointerException.class)\n-    public void test_startEdit_cellEditableIsTrue_listViewIsNull_isNotEmpty() {\n-        TextFieldListCell<Object> cell = new TextFieldListCell<>();\n-        cell.updateItem(\"TEST\", false);\n-        cell.setEditable(true);\n-        cell.startEdit();\n-    }\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/cell\/TextFieldListCellTest.java","additions":1,"deletions":16,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -243,7 +243,0 @@\n-    @Test(expected = NullPointerException.class)\n-    public void test_startEdit_cellEditableIsTrue_tableColumnIsNull_isEmpty() {\n-        TextFieldTableCell<Object,Object> cell = new TextFieldTableCell<>();\n-        cell.setEditable(true);\n-        cell.startEdit();\n-    }\n-\n@@ -304,8 +297,0 @@\n-    @Test(expected = NullPointerException.class)\n-    public void test_startEdit_cellEditableIsTrue_tableColumnIsNull_isNotEmpty() {\n-        TextFieldTableCell<Object,Object> cell = new TextFieldTableCell<>();\n-        cell.updateItem(\"TEST\", false);\n-        cell.setEditable(true);\n-        cell.startEdit();\n-    }\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/cell\/TextFieldTableCellTest.java","additions":1,"deletions":16,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -238,7 +238,0 @@\n-    @Test(expected = NullPointerException.class)\n-    public void test_startEdit_cellEditableIsTrue_treeViewIsNull_isEmpty() {\n-        TextFieldTreeCell<Object> cell = new TextFieldTreeCell<>();\n-        cell.setEditable(true);\n-        cell.startEdit();\n-    }\n-\n@@ -290,8 +283,0 @@\n-    @Test(expected = NullPointerException.class)\n-    public void test_startEdit_cellEditableIsTrue_treeViewIsNull_isNotEmpty() {\n-        TextFieldTreeCell<Object> cell = new TextFieldTreeCell<>();\n-        cell.updateItem(\"TEST\", false);\n-        cell.setEditable(true);\n-        cell.startEdit();\n-    }\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/cell\/TextFieldTreeCellTest.java","additions":1,"deletions":16,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -240,7 +240,0 @@\n-    @Test(expected = NullPointerException.class)\n-    public void test_startEdit_cellEditableIsTrue_tableColumnIsNull_isEmpty() {\n-        TextFieldTreeTableCell<Object,Object> cell = new TextFieldTreeTableCell<>();\n-        cell.setEditable(true);\n-        cell.startEdit();\n-    }\n-\n@@ -301,8 +294,0 @@\n-    @Test(expected = NullPointerException.class)\n-    public void test_startEdit_cellEditableIsTrue_tableColumnIsNull_isNotEmpty() {\n-        TextFieldTreeTableCell<Object,Object> cell = new TextFieldTreeTableCell<>();\n-        cell.updateItem(\"TEST\", false);\n-        cell.setEditable(true);\n-        cell.startEdit();\n-    }\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/cell\/TextFieldTreeTableCellTest.java","additions":1,"deletions":16,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -0,0 +1,138 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.javafx.scene.control.cell;\n+\n+import javafx.beans.property.SimpleBooleanProperty;\n+import javafx.scene.control.TreeCell;\n+import javafx.scene.control.TreeItem;\n+import javafx.scene.control.TreeView;\n+import javafx.scene.control.cell.CheckBoxTreeCell;\n+import javafx.scene.control.cell.ChoiceBoxTreeCell;\n+import javafx.scene.control.cell.ComboBoxTreeCell;\n+import javafx.scene.control.cell.TextFieldTreeCell;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.Supplier;\n+\n+import static java.util.stream.Collectors.toList;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+\n+\/**\n+ * Parameterized tests for the {@link TreeCell#startEdit()} method of {@link TreeCell} and all sub implementations.\n+ * The {@link CheckBoxTreeCell} is special as in there the checkbox will be disabled based of the editability.\n+ *\/\n+@RunWith(Parameterized.class)\n+public class TreeCellStartEditTest {\n+\n+    private static final boolean[] EDITABLE_STATES = { true, false };\n+\n+    private final Supplier<TreeCell<String>> treeCellSupplier;\n+\n+    private TreeView<String> treeView;\n+    private TreeCell<String> treeCell;\n+\n+    @Parameterized.Parameters\n+    public static Collection<Object[]> data() {\n+        return wrapAsObjectArray(List.of(TreeCell::new, ComboBoxTreeCell::new, TextFieldTreeCell::new,\n+                ChoiceBoxTreeCell::new,() -> new CheckBoxTreeCell<>(obj -> new SimpleBooleanProperty())));\n+    }\n+\n+    private static Collection<Object[]> wrapAsObjectArray(List<Supplier<TreeCell<String>>> treeCells) {\n+        return treeCells.stream().map(cell -> new Object[] { cell }).collect(toList());\n+    }\n+\n+    public TreeCellStartEditTest(Supplier<TreeCell<String>> treeCellSupplier) {\n+        this.treeCellSupplier = treeCellSupplier;\n+    }\n+\n+    @Before\n+    public void setup() {\n+        TreeItem<String> root = new TreeItem<>(\"1\");\n+        root.getChildren().addAll(List.of(new TreeItem<>(\"2\"), new TreeItem<>(\"3\")));\n+        treeView = new TreeView<>(root);\n+\n+        treeCell = treeCellSupplier.get();\n+    }\n+\n+    @Test\n+    public void testStartEditMustNotThrowNPE() {\n+        \/\/ A tree cell without anything attached should not throw a NPE.\n+        treeCell.startEdit();\n+    }\n+\n+    @Test\n+    public void testStartEditRespectsEditable() {\n+        treeCell.updateIndex(0);\n+\n+        treeCell.updateTreeView(treeView);\n+\n+        for (boolean isTreeViewEditable : EDITABLE_STATES) {\n+            for (boolean isCellEditable : EDITABLE_STATES) {\n+                testStartEditImpl(isTreeViewEditable, isCellEditable);\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * A {@link TreeCell} (or sub implementation) should be editable (thus, can be in editing state), if the\n+     * corresponding tree view and cell is editable.\n+     *\n+     * @param isTreeViewEditable true, when the tree view should be editable, false otherwise\n+     * @param isCellEditable true, when the cell should be editable, false otherwise\n+     *\/\n+    private void testStartEditImpl(boolean isTreeViewEditable, boolean isCellEditable) {\n+        assertFalse(treeCell.isEditing());\n+\n+        treeView.setEditable(isTreeViewEditable);\n+        treeCell.setEditable(isCellEditable);\n+\n+        treeCell.startEdit();\n+\n+        boolean expectedEditingState = isTreeViewEditable && isCellEditable;\n+        assertEquals(expectedEditingState, treeCell.isEditing());\n+\n+        if (treeCell instanceof CheckBoxTreeCell) {\n+            assertNotNull(treeCell.getGraphic());\n+            \/\/ Ignored until https:\/\/bugs.openjdk.java.net\/browse\/JDK-8270042 is resolved.\n+            \/\/ Check if the checkbox is disabled when not editable.\n+            \/\/ assertEquals(expectedEditingState, !treeCell.getGraphic().isDisabled());\n+        } else if (!treeCell.getClass().equals(TreeCell.class)) {\n+            \/\/ All other sub implementation should show a graphic when editable.\n+            assertEquals(expectedEditingState, treeCell.getGraphic() != null);\n+        }\n+\n+        \/\/ Restore the editing state.\n+        treeCell.cancelEdit();\n+    }\n+\n+}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/cell\/TreeCellStartEditTest.java","additions":138,"deletions":0,"binary":false,"changes":138,"status":"added"},{"patch":"@@ -0,0 +1,164 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.javafx.scene.control.cell;\n+\n+import javafx.scene.control.TreeItem;\n+import javafx.scene.control.TreeTableCell;\n+import javafx.scene.control.TreeTableColumn;\n+import javafx.scene.control.TreeTableRow;\n+import javafx.scene.control.TreeTableView;\n+import javafx.scene.control.cell.CheckBoxTreeTableCell;\n+import javafx.scene.control.cell.ChoiceBoxTreeTableCell;\n+import javafx.scene.control.cell.ComboBoxTreeTableCell;\n+import javafx.scene.control.cell.ProgressBarTreeTableCell;\n+import javafx.scene.control.cell.TextFieldTreeTableCell;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.Supplier;\n+\n+import static java.util.stream.Collectors.toList;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+\n+\/**\n+ * Parameterized tests for the {@link TreeTableCell#startEdit()} method of {@link TreeTableCell} and all sub\n+ * implementations. The {@link CheckBoxTreeTableCell} is special as in there the checkbox will be disabled based of the\n+ * editability.\n+ *\/\n+@RunWith(Parameterized.class)\n+public class TreeTableCellStartEditTest {\n+\n+    private static final boolean[] EDITABLE_STATES = { true, false };\n+\n+    private final Supplier<TreeTableCell<String, ?>> treeTableCellSupplier;\n+\n+    private TreeTableView<String> treeTable;\n+    private TreeTableRow<String> treeTableRow;\n+    private TreeTableColumn<String, ?> treeTableColumn;\n+    private TreeTableCell<String, ?> treeTableCell;\n+\n+\n+    @Parameterized.Parameters\n+    public static Collection<Object[]> data() {\n+        return wrapAsObjectArray(\n+                List.of(TreeTableCell::new , ComboBoxTreeTableCell::new, TextFieldTreeTableCell::new,\n+                        ChoiceBoxTreeTableCell::new, CheckBoxTreeTableCell::new, ProgressBarTreeTableCell::new));\n+    }\n+\n+    private static Collection<Object[]> wrapAsObjectArray(List<Supplier<TreeTableCell<Object, ?>>> treeTableCells) {\n+        return treeTableCells.stream().map(cell -> new Object[] { cell }).collect(toList());\n+    }\n+\n+    public TreeTableCellStartEditTest(Supplier<TreeTableCell<String, ?>> treeTableCellSupplier) {\n+        this.treeTableCellSupplier = treeTableCellSupplier;\n+    }\n+\n+    @Before\n+    public void setup() {\n+        TreeItem<String> root = new TreeItem<>(\"1\");\n+        root.getChildren().addAll(List.of(new TreeItem<>(\"2\"), new TreeItem<>(\"3\")));\n+        treeTable = new TreeTableView<>(root);\n+\n+        treeTableColumn = new TreeTableColumn<>();\n+        treeTable.getColumns().add(treeTableColumn);\n+\n+        treeTableRow = new TreeTableRow<>();\n+\n+        treeTableCell = treeTableCellSupplier.get();\n+    }\n+\n+    @Test\n+    public void testStartEditMustNotThrowNPE() {\n+        \/\/ A tree table cell without anything attached should not throw a NPE.\n+        treeTableCell.startEdit();\n+    }\n+\n+    @Test\n+    public void testStartEditRespectsEditable() {\n+        treeTableCell.updateIndex(0);\n+\n+        treeTableCell.updateTreeTableColumn((TreeTableColumn) treeTableColumn);\n+        treeTableCell.updateTreeTableRow(treeTableRow);\n+        treeTableCell.updateTreeTableView(treeTable);\n+\n+        for (boolean isTableEditable : EDITABLE_STATES) {\n+            for (boolean isColumnEditable : EDITABLE_STATES) {\n+                for (boolean isRowEditable : EDITABLE_STATES) {\n+                    for (boolean isCellEditable : EDITABLE_STATES) {\n+                        testStartEditImpl(isTableEditable, isColumnEditable, isRowEditable, isCellEditable);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * A {@link TreeTableCell} (or sub implementation) should be editable (thus, can be in editing state), if the\n+     * corresponding tree table, column, row and cell is editable.\n+     *\n+     * @param isTreeTableEditable true, when the tree table should be editable, false otherwise\n+     * @param isColumnEditable true, when the column should be editable, false otherwise\n+     * @param isRowEditable true, when the row should be editable, false otherwise\n+     * @param isCellEditable true, when the cell should be editable, false otherwise\n+     *\/\n+    private void testStartEditImpl(boolean isTreeTableEditable, boolean isColumnEditable, boolean isRowEditable,\n+            boolean isCellEditable) {\n+        assertFalse(treeTableCell.isEditing());\n+\n+        treeTable.setEditable(isTreeTableEditable);\n+        treeTableColumn.setEditable(isColumnEditable);\n+        treeTableRow.setEditable(isRowEditable);\n+        treeTableCell.setEditable(isCellEditable);\n+\n+        treeTableCell.startEdit();\n+\n+        boolean expectedEditingState = isTreeTableEditable && isColumnEditable && isRowEditable && isCellEditable;\n+        assertEquals(expectedEditingState, treeTableCell.isEditing());\n+\n+        if (treeTableCell instanceof CheckBoxTreeTableCell) {\n+            assertNotNull(treeTableCell.getGraphic());\n+            \/\/ Ignored until https:\/\/bugs.openjdk.java.net\/browse\/JDK-8270042 is resolved.\n+            \/\/ Check if the checkbox is disabled when not editable.\n+            \/\/ assertEquals(expectedEditingState, !treeTableCell.getGraphic().isDisabled());\n+        } else if (treeTableCell instanceof ProgressBarTreeTableCell) {\n+            \/\/ The progress bar is always shown.\n+            assertNotNull(treeTableCell.getGraphic());\n+        } else if (!treeTableCell.getClass().equals(TreeTableCell.class)) {\n+            \/\/ All other sub implementation should show a graphic when editable.\n+            assertEquals(expectedEditingState, treeTableCell.getGraphic() != null);\n+        }\n+\n+        \/\/ Restore the editing state.\n+        treeTableCell.cancelEdit();\n+    }\n+\n+}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/cell\/TreeTableCellStartEditTest.java","additions":164,"deletions":0,"binary":false,"changes":164,"status":"added"}]}