{"files":[{"patch":"@@ -302,4 +302,2 @@\n-        if (isEditing()) {\n-            setText(null);\n-            setGraphic(choiceBox);\n-        }\n+        setText(null);\n+        setGraphic(choiceBox);\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/cell\/ChoiceBoxListCell.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -297,2 +297,2 @@\n-        super.startEdit();\n-        if (!isEditing()) {\n+        TreeItem<T> treeItem = getTreeItem();\n+        if (treeItem == null) {\n@@ -302,2 +302,2 @@\n-        TreeItem<T> treeItem = getTreeItem();\n-        if (treeItem == null) {\n+        super.startEdit();\n+        if (!isEditing()) {\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/cell\/ChoiceBoxTreeCell.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -328,2 +328,2 @@\n-        super.startEdit();\n-        if (!isEditing()) {\n+        TreeItem<T> treeItem = getTreeItem();\n+        if (treeItem == null) {\n@@ -333,2 +333,2 @@\n-        TreeItem<T> treeItem = getTreeItem();\n-        if (treeItem == null) {\n+        super.startEdit();\n+        if (!isEditing()) {\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/cell\/ComboBoxTreeCell.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1,131 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package test.javafx.scene.control;\n-\n-import javafx.beans.property.SimpleBooleanProperty;\n-import javafx.collections.FXCollections;\n-import javafx.collections.ObservableList;\n-import javafx.scene.control.ListCell;\n-import javafx.scene.control.ListView;\n-import javafx.scene.control.cell.CheckBoxListCell;\n-import javafx.scene.control.cell.ChoiceBoxListCell;\n-import javafx.scene.control.cell.ComboBoxListCell;\n-import javafx.scene.control.cell.TextFieldListCell;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-\n-import java.util.Collection;\n-import java.util.List;\n-import java.util.function.Supplier;\n-\n-import static java.util.stream.Collectors.toList;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-\n-\/**\n- * Parameterized tests for the {@link ListCell#startEdit()} method of {@link ListCell} and all sub implementations.\n- * The {@link CheckBoxListCell} is special as in there the checkbox will be disabled based of the editability.\n- *\/\n-@RunWith(Parameterized.class)\n-public class ListCellStartEditTest {\n-\n-    private static final boolean[] EDITABLE_STATES = { true, false };\n-\n-    private ListView<String> listView;\n-    private final Supplier<ListCell<String>> listCellSupplier;\n-\n-    @Parameterized.Parameters\n-    public static Collection<Object[]> data() {\n-        return wrapAsObjectArray(List.of(ListCell::new, ComboBoxListCell::new, TextFieldListCell::new,\n-                ChoiceBoxListCell::new, () -> new CheckBoxListCell<>(obj -> new SimpleBooleanProperty())));\n-    }\n-\n-    private static Collection<Object[]> wrapAsObjectArray(List<Supplier<ListCell<?>>> listCells) {\n-        return listCells.stream().map(tc -> new Object[] { tc }).collect(toList());\n-    }\n-\n-    public ListCellStartEditTest(Supplier<ListCell<String>> listCellSupplier) {\n-        this.listCellSupplier = listCellSupplier;\n-    }\n-\n-    @Before\n-    public void setup() {\n-        ObservableList<String> items = FXCollections.observableArrayList(\"1\", \"2\", \"3\");\n-        listView = new ListView<>(items);\n-    }\n-\n-    @Test\n-    public void testStartEditMustNotThrowNPE() {\n-        ListCell<String> listCell = listCellSupplier.get();\n-        \/\/ A list cell without anything attached should not throw a NPE.\n-        listCell.startEdit();\n-    }\n-\n-    @Test\n-    public void testStartEditRespectsEditable() {\n-        ListCell<String> listCell = listCellSupplier.get();\n-        listCell.updateIndex(0);\n-        listCell.updateListView(listView);\n-\n-        for (boolean isListViewEditable : EDITABLE_STATES) {\n-            for (boolean isCellEditable : EDITABLE_STATES) {\n-                testStartEditImpl(listCell, isListViewEditable, isCellEditable);\n-            }\n-        }\n-    }\n-\n-    \/**\n-     * A {@link ListCell} (or sub implementation) should be editable (thus, can be in editing state), if the\n-     * corresponding list view and cell is editable.\n-     *\n-     * @param listCell the {@link ListCell} where the <code>startEdit<\/code> method is tested\n-     * @param isListViewEditable true, when the list view should be editable, false otherwise\n-     * @param isCellEditable true, when the cell should be editable, false otherwise\n-     *\/\n-    private void testStartEditImpl(ListCell<String> listCell, boolean isListViewEditable, boolean isCellEditable) {\n-        assertFalse(listCell.isEditing());\n-\n-        listView.setEditable(isListViewEditable);\n-        listCell.setEditable(isCellEditable);\n-\n-        listCell.startEdit();\n-\n-        boolean expectedEditingState = isListViewEditable && isCellEditable;\n-        assertEquals(expectedEditingState, listCell.isEditing());\n-\n-        \/\/ Ignored until https:\/\/bugs.openjdk.java.net\/browse\/JDK-8270042 is resolved.\n-        \/\/ Special check for CheckBoxListCell.\n-\/\/        if (listCell instanceof CheckBoxListCell) {\n-\/\/            assertEquals(expectedEditingState, !listCell.getGraphic().isDisabled());\n-\/\/        }\n-\n-        \/\/ Restore the editing state.\n-        listCell.cancelEdit();\n-    }\n-\n-}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ListCellStartEditTest.java","additions":0,"deletions":131,"binary":false,"changes":131,"status":"deleted"},{"patch":"@@ -1,154 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package test.javafx.scene.control;\n-\n-import javafx.collections.FXCollections;\n-import javafx.collections.ObservableList;\n-import javafx.scene.control.TableCell;\n-import javafx.scene.control.TableColumn;\n-import javafx.scene.control.TableRow;\n-import javafx.scene.control.TableView;\n-import javafx.scene.control.cell.CheckBoxTableCell;\n-import javafx.scene.control.cell.ChoiceBoxTableCell;\n-import javafx.scene.control.cell.ComboBoxTableCell;\n-import javafx.scene.control.cell.ProgressBarTableCell;\n-import javafx.scene.control.cell.TextFieldTableCell;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-\n-import java.util.Collection;\n-import java.util.List;\n-import java.util.function.Supplier;\n-\n-import static java.util.stream.Collectors.toList;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-\n-\/**\n- * Parameterized tests for the {@link TableCell#startEdit()} method of {@link TableCell} and all sub implementations.\n- * The {@link CheckBoxTableCell} is special as in there the checkbox will be disabled based of the editability.\n- *\/\n-@RunWith(Parameterized.class)\n-public class TableCellStartEditTest {\n-\n-    private static final boolean[] EDITABLE_STATES = { true, false };\n-\n-    private TableView<String> table;\n-    private TableRow<String> tableRow;\n-    private TableColumn<String, ?> tableColumn;\n-\n-    private final Supplier<TableCell<String, ?>> tableCellSupplier;\n-\n-    @Parameterized.Parameters\n-    public static Collection<Object[]> data() {\n-        return wrapAsObjectArray(List.of(TableCell::new, ComboBoxTableCell::new, TextFieldTableCell::new,\n-                ChoiceBoxTableCell::new, CheckBoxTableCell::new, ProgressBarTableCell::new));\n-    }\n-\n-    private static Collection<Object[]> wrapAsObjectArray(List<Supplier<TableCell<Object, ?>>> tableCells) {\n-        return tableCells.stream().map(tc -> new Object[] { tc }).collect(toList());\n-    }\n-\n-    public TableCellStartEditTest(Supplier<TableCell<String, ?>> tableCellSupplier) {\n-        this.tableCellSupplier = tableCellSupplier;\n-    }\n-\n-    @Before\n-    public void setup() {\n-        ObservableList<String> items = FXCollections.observableArrayList(\"1\", \"2\", \"3\");\n-        table = new TableView<>(items);\n-\n-        tableColumn = new TableColumn<>();\n-        table.getColumns().add(tableColumn);\n-\n-        tableRow = new TableRow<>();\n-    }\n-\n-    @Test\n-    public void testStartEditMustNotThrowNPE() {\n-        TableCell<String, ?> tableCell = tableCellSupplier.get();\n-        \/\/ A table cell without anything attached should not throw a NPE.\n-        tableCell.startEdit();\n-    }\n-\n-    @Test\n-    public void testStartEditRespectsEditable() {\n-        TableCell<String, ?> tableCell = tableCellSupplier.get();\n-        tableCell.updateIndex(0);\n-\n-        tableCell.updateTableColumn(tableColumn);\n-        tableCell.updateTableRow(tableRow);\n-        tableCell.updateTableView(table);\n-\n-        for (boolean isTableEditable : EDITABLE_STATES) {\n-            for (boolean isColumnEditable : EDITABLE_STATES) {\n-                for (boolean isRowEditable : EDITABLE_STATES) {\n-                    for (boolean isCellEditable : EDITABLE_STATES) {\n-                        testStartEditImpl(tableCell, isTableEditable, isColumnEditable, isRowEditable, isCellEditable);\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    \/**\n-     * A {@link TableCell} (or sub implementation) should be editable (thus, can be in editing state), if the\n-     * corresponding table, column, row  and cell is editable.\n-     *\n-     * @param tableCell the {@link TableCell} where the <code>startEdit<\/code> method is tested\n-     * @param isTableEditable true, when the table should be editable, false otherwise\n-     * @param isColumnEditable true, when the column should be editable, false otherwise\n-     * @param isRowEditable true, when the row should be editable, false otherwise\n-     * @param isCellEditable true, when the cell should be editable, false otherwise\n-     *\/\n-    private void testStartEditImpl(TableCell<String, ?> tableCell, boolean isTableEditable, boolean isColumnEditable, boolean isRowEditable,\n-            boolean isCellEditable) {\n-        assertFalse(tableCell.isEditing());\n-\n-        table.setEditable(isTableEditable);\n-        tableColumn.setEditable(isColumnEditable);\n-        tableRow.setEditable(isRowEditable);\n-        tableCell.setEditable(isCellEditable);\n-\n-        tableCell.startEdit();\n-\n-        \/\/ Only when the table, column, row and the cell itself is editable, it can get in editing state.\n-        boolean expectedEditingState = isTableEditable && isColumnEditable && isRowEditable && isCellEditable;\n-        assertEquals(expectedEditingState, tableCell.isEditing());\n-\n-        \/\/ Ignored until https:\/\/bugs.openjdk.java.net\/browse\/JDK-8270042 is resolved.\n-        \/\/ Special check for CheckBoxTableCell.\n-\/\/        if (tableCell instanceof CheckBoxTableCell) {\n-\/\/            assertEquals(expectedEditingState, !tableCell.getGraphic().isDisabled());\n-\/\/        }\n-\n-        \/\/ Restore the editing state.\n-        tableCell.cancelEdit();\n-    }\n-\n-}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TableCellStartEditTest.java","additions":0,"deletions":154,"binary":false,"changes":154,"status":"deleted"},{"patch":"@@ -1,132 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package test.javafx.scene.control;\n-\n-import javafx.beans.property.SimpleBooleanProperty;\n-import javafx.scene.control.TreeCell;\n-import javafx.scene.control.TreeItem;\n-import javafx.scene.control.TreeView;\n-import javafx.scene.control.cell.CheckBoxTreeCell;\n-import javafx.scene.control.cell.ChoiceBoxTreeCell;\n-import javafx.scene.control.cell.ComboBoxTreeCell;\n-import javafx.scene.control.cell.TextFieldTreeCell;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-\n-import java.util.Collection;\n-import java.util.List;\n-import java.util.function.Supplier;\n-\n-import static java.util.stream.Collectors.toList;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-\n-\/**\n- * Parameterized tests for the {@link TreeCell#startEdit()} method of {@link TreeCell} and all sub implementations.\n- * The {@link CheckBoxTreeCell} is special as in there the checkbox will be disabled based of the editability.\n- *\/\n-@RunWith(Parameterized.class)\n-public class TreeCellStartEditTest {\n-\n-    private static final boolean[] EDITABLE_STATES = { true, false };\n-\n-    private TreeView<String> treeView;\n-    private final Supplier<TreeCell<String>> treeCellSupplier;\n-\n-    @Parameterized.Parameters\n-    public static Collection<Object[]> data() {\n-        return wrapAsObjectArray(List.of(TreeCell::new, ComboBoxTreeCell::new, TextFieldTreeCell::new,\n-                ChoiceBoxTreeCell::new,() ->  new CheckBoxTreeCell<>(obj -> new SimpleBooleanProperty())));\n-    }\n-\n-    private static Collection<Object[]> wrapAsObjectArray(List<Supplier<TreeCell<String>>> treeCells) {\n-        return treeCells.stream().map(tc -> new Object[] { tc }).collect(toList());\n-    }\n-\n-    public TreeCellStartEditTest(Supplier<TreeCell<String>> treeCellSupplier) {\n-        this.treeCellSupplier = treeCellSupplier;\n-    }\n-\n-    @Before\n-    public void setup() {\n-        TreeItem<String> root = new TreeItem<>(\"1\");\n-        root.getChildren().addAll(List.of(new TreeItem<>(\"2\"), new TreeItem<>(\"3\")));\n-        treeView = new TreeView<>(root);\n-    }\n-\n-    @Test\n-    public void testStartEditMustNotThrowNPE() {\n-        TreeCell<String> treeCell = treeCellSupplier.get();\n-        \/\/ A tree cell without anything attached should not throw a NPE.\n-        treeCell.startEdit();\n-    }\n-\n-    @Test\n-    public void testStartEditRespectsEditable() {\n-        TreeCell<String> treeCell = treeCellSupplier.get();\n-        treeCell.updateIndex(0);\n-\n-        treeCell.updateTreeView(treeView);\n-\n-        for (boolean isTreeViewEditable : EDITABLE_STATES) {\n-            for (boolean isCellEditable : EDITABLE_STATES) {\n-                testStartEditImpl(treeCell, isTreeViewEditable, isCellEditable);\n-            }\n-        }\n-    }\n-\n-    \/**\n-     * A {@link TreeCell} (or sub implementation) should be editable (thus, can be in editing state), if the\n-     * corresponding tree view and cell is editable.\n-     *\n-     * @param treeCell the {@link TreeCell} where the <code>startEdit<\/code> method is tested\n-     * @param isTreeViewEditable true, when the tree view should be editable, false otherwise\n-     * @param isCellEditable true, when the cell should be editable, false otherwise\n-     *\/\n-    private void testStartEditImpl(TreeCell<String> treeCell, boolean isTreeViewEditable, boolean isCellEditable) {\n-        assertFalse(treeCell.isEditing());\n-\n-        treeView.setEditable(isTreeViewEditable);\n-        treeCell.setEditable(isCellEditable);\n-\n-        treeCell.startEdit();\n-\n-        boolean expectedEditingState = isTreeViewEditable && isCellEditable;\n-        assertEquals(expectedEditingState, treeCell.isEditing());\n-\n-        \/\/ Ignored until https:\/\/bugs.openjdk.java.net\/browse\/JDK-8270042 is resolved.\n-        \/\/ Special check for CheckBoxTreeCell.\n-\/\/        if (treeCell instanceof CheckBoxTreeCell) {\n-\/\/            assertEquals(expectedEditingState, !treeCell.getGraphic().isDisabled());\n-\/\/        }\n-\n-        \/\/ Restore the editing state.\n-        treeCell.cancelEdit();\n-    }\n-\n-}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeCellStartEditTest.java","additions":0,"deletions":132,"binary":false,"changes":132,"status":"deleted"},{"patch":"@@ -1,155 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package test.javafx.scene.control;\n-\n-import javafx.scene.control.TreeItem;\n-import javafx.scene.control.TreeTableCell;\n-import javafx.scene.control.TreeTableColumn;\n-import javafx.scene.control.TreeTableRow;\n-import javafx.scene.control.TreeTableView;\n-import javafx.scene.control.cell.CheckBoxTreeTableCell;\n-import javafx.scene.control.cell.ChoiceBoxTreeTableCell;\n-import javafx.scene.control.cell.ComboBoxTreeTableCell;\n-import javafx.scene.control.cell.ProgressBarTreeTableCell;\n-import javafx.scene.control.cell.TextFieldTreeTableCell;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-\n-import java.util.Collection;\n-import java.util.List;\n-import java.util.function.Supplier;\n-\n-import static java.util.stream.Collectors.toList;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-\n-\/**\n- * Parameterized tests for the {@link TreeTableCell#startEdit()} method of {@link TreeTableCell} and all sub\n- * implementations. The {@link CheckBoxTreeTableCell} is special as in there the checkbox will be disabled based of the\n- * editability.\n- *\/\n-@RunWith(Parameterized.class)\n-public class TreeTableCellStartEditTest {\n-\n-    private static final boolean[] EDITABLE_STATES = { true, false };\n-\n-    private TreeTableView<String> treeTable;\n-    private TreeTableRow<String> treeTableRow;\n-    private TreeTableColumn<String, ?> treeTableColumn;\n-\n-    private final Supplier<TreeTableCell<String, ?>> treeTableCellSupplier;\n-\n-    @Parameterized.Parameters\n-    public static Collection<Object[]> data() {\n-        return wrapAsObjectArray(\n-                List.of(TreeTableCell::new , ComboBoxTreeTableCell::new, TextFieldTreeTableCell::new,\n-                        ChoiceBoxTreeTableCell::new, CheckBoxTreeTableCell::new, ProgressBarTreeTableCell::new));\n-    }\n-\n-    private static Collection<Object[]> wrapAsObjectArray(List<Supplier<TreeTableCell<Object, ?>>> treeTableCells) {\n-        return treeTableCells.stream().map(tc -> new Object[] { tc }).collect(toList());\n-    }\n-\n-    public TreeTableCellStartEditTest(Supplier<TreeTableCell<String, ?>> treeTableCellSupplier) {\n-        this.treeTableCellSupplier = treeTableCellSupplier;\n-    }\n-\n-    @Before\n-    public void setup() {\n-        TreeItem<String> root = new TreeItem<>(\"1\");\n-        root.getChildren().addAll(List.of(new TreeItem<>(\"2\"), new TreeItem<>(\"3\")));\n-        treeTable = new TreeTableView<>(root);\n-\n-        treeTableColumn = new TreeTableColumn<>();\n-        treeTable.getColumns().add(treeTableColumn);\n-\n-        treeTableRow = new TreeTableRow<>();\n-    }\n-\n-    @Test\n-    public void testStartEditMustNotThrowNPE() {\n-        TreeTableCell<String, ?> treeTableCell = treeTableCellSupplier.get();\n-        \/\/ A tree table cell without anything attached should not throw a NPE.\n-        treeTableCell.startEdit();\n-    }\n-\n-    @Test\n-    public void testStartEditRespectsEditable() {\n-        TreeTableCell<String, ?> treeTableCell = treeTableCellSupplier.get();\n-        treeTableCell.updateIndex(0);\n-\n-        treeTableCell.updateTreeTableColumn((TreeTableColumn) treeTableColumn);\n-        treeTableCell.updateTreeTableRow(treeTableRow);\n-        treeTableCell.updateTreeTableView(treeTable);\n-\n-        for (boolean isTableEditable : EDITABLE_STATES) {\n-            for (boolean isColumnEditable : EDITABLE_STATES) {\n-                for (boolean isRowEditable : EDITABLE_STATES) {\n-                    for (boolean isCellEditable : EDITABLE_STATES) {\n-                        testStartEditImpl(treeTableCell, isTableEditable, isColumnEditable, isRowEditable, isCellEditable);\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    \/**\n-     * A {@link TreeTableCell} (or sub implementation) should be editable (thus, can be in editing state), if the\n-     * corresponding tree table, column, row and cell is editable.\n-     *\n-     * @param treeTableCell the {@link TreeTableCell} where the <code>startEdit<\/code> method is tested\n-     * @param isTreeTableEditable true, when the tree table should be editable, false otherwise\n-     * @param isColumnEditable true, when the column should be editable, false otherwise\n-     * @param isRowEditable true, when the row should be editable, false otherwise\n-     * @param isCellEditable true, when the cell should be editable, false otherwise\n-     *\/\n-    private void testStartEditImpl(TreeTableCell<String, ?> treeTableCell, boolean isTreeTableEditable, boolean isColumnEditable, boolean isRowEditable,\n-            boolean isCellEditable) {\n-        assertFalse(treeTableCell.isEditing());\n-\n-        treeTable.setEditable(isTreeTableEditable);\n-        treeTableColumn.setEditable(isColumnEditable);\n-        treeTableRow.setEditable(isRowEditable);\n-        treeTableCell.setEditable(isCellEditable);\n-\n-        treeTableCell.startEdit();\n-\n-        boolean expectedEditingState = isTreeTableEditable && isColumnEditable && isRowEditable && isCellEditable;\n-        assertEquals(expectedEditingState, treeTableCell.isEditing());\n-\n-        \/\/ Ignored until https:\/\/bugs.openjdk.java.net\/browse\/JDK-8270042 is resolved.\n-        \/\/ Special check for CheckBoxTreeTableCell.\n-\/\/        if (treeTableCell instanceof CheckBoxTreeTableCell) {\n-\/\/            assertEquals(expectedEditingState, !treeTableCell.getGraphic().isDisabled());\n-\/\/        }\n-\n-        \/\/ Restore the editing state.\n-        treeTableCell.cancelEdit();\n-    }\n-\n-}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeTableCellStartEditTest.java","additions":0,"deletions":155,"binary":false,"changes":155,"status":"deleted"},{"patch":"@@ -0,0 +1,137 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.javafx.scene.control.cell;\n+\n+import javafx.beans.property.SimpleBooleanProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.scene.control.ListCell;\n+import javafx.scene.control.ListView;\n+import javafx.scene.control.cell.CheckBoxListCell;\n+import javafx.scene.control.cell.ChoiceBoxListCell;\n+import javafx.scene.control.cell.ComboBoxListCell;\n+import javafx.scene.control.cell.TextFieldListCell;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.Supplier;\n+\n+import static java.util.stream.Collectors.toList;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+\n+\/**\n+ * Parameterized tests for the {@link ListCell#startEdit()} method of {@link ListCell} and all sub implementations.\n+ * The {@link CheckBoxListCell} is special as in there the checkbox will be disabled based of the editability.\n+ *\/\n+@RunWith(Parameterized.class)\n+public class ListCellStartEditTest {\n+\n+    private static final boolean[] EDITABLE_STATES = { true, false };\n+\n+    private final Supplier<ListCell<String>> listCellSupplier;\n+\n+    private ListView<String> listView;\n+    private ListCell<String> listCell;\n+\n+    @Parameterized.Parameters\n+    public static Collection<Object[]> data() {\n+        return wrapAsObjectArray(List.of(ListCell::new, ComboBoxListCell::new, TextFieldListCell::new,\n+                ChoiceBoxListCell::new, () -> new CheckBoxListCell<>(obj -> new SimpleBooleanProperty())));\n+    }\n+\n+    private static Collection<Object[]> wrapAsObjectArray(List<Supplier<ListCell<?>>> listCells) {\n+        return listCells.stream().map(cell -> new Object[] { cell }).collect(toList());\n+    }\n+\n+    public ListCellStartEditTest(Supplier<ListCell<String>> listCellSupplier) {\n+        this.listCellSupplier = listCellSupplier;\n+    }\n+\n+    @Before\n+    public void setup() {\n+        ObservableList<String> items = FXCollections.observableArrayList(\"1\", \"2\", \"3\");\n+        listView = new ListView<>(items);\n+\n+        listCell = listCellSupplier.get();\n+    }\n+\n+    @Test\n+    public void testStartEditMustNotThrowNPE() {\n+        \/\/ A list cell without anything attached should not throw a NPE.\n+        listCell.startEdit();\n+    }\n+\n+    @Test\n+    public void testStartEditRespectsEditable() {\n+        listCell.updateIndex(0);\n+        listCell.updateListView(listView);\n+\n+        for (boolean isListViewEditable : EDITABLE_STATES) {\n+            for (boolean isCellEditable : EDITABLE_STATES) {\n+                testStartEditImpl(isListViewEditable, isCellEditable);\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * A {@link ListCell} (or sub implementation) should be editable (thus, can be in editing state), if the\n+     * corresponding list view and cell is editable.\n+     *\n+     * @param isListViewEditable true, when the list view should be editable, false otherwise\n+     * @param isCellEditable true, when the cell should be editable, false otherwise\n+     *\/\n+    private void testStartEditImpl(boolean isListViewEditable, boolean isCellEditable) {\n+        assertFalse(listCell.isEditing());\n+\n+        listView.setEditable(isListViewEditable);\n+        listCell.setEditable(isCellEditable);\n+\n+        listCell.startEdit();\n+\n+        boolean expectedEditingState = isListViewEditable && isCellEditable;\n+        assertEquals(expectedEditingState, listCell.isEditing());\n+\n+        if (listCell instanceof CheckBoxListCell) {\n+            assertNotNull(listCell.getGraphic());\n+            \/\/ Ignored until https:\/\/bugs.openjdk.java.net\/browse\/JDK-8270042 is resolved.\n+            \/\/ Check if the checkbox is disabled when not editable.\n+            \/\/ assertEquals(expectedEditingState, !listCell.getGraphic().isDisabled());\n+        } else if (!listCell.getClass().equals(ListCell.class)) {\n+            \/\/ All other sub implementation should show a graphic when editable.\n+            assertEquals(expectedEditingState, listCell.getGraphic() != null);\n+        }\n+\n+        \/\/ Restore the editing state.\n+        listCell.cancelEdit();\n+    }\n+\n+}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/cell\/ListCellStartEditTest.java","additions":137,"deletions":0,"binary":false,"changes":137,"status":"added"},{"patch":"@@ -0,0 +1,163 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.javafx.scene.control.cell;\n+\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.scene.control.TableCell;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.TableRow;\n+import javafx.scene.control.TableView;\n+import javafx.scene.control.cell.CheckBoxTableCell;\n+import javafx.scene.control.cell.ChoiceBoxTableCell;\n+import javafx.scene.control.cell.ComboBoxTableCell;\n+import javafx.scene.control.cell.ProgressBarTableCell;\n+import javafx.scene.control.cell.TextFieldTableCell;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.Supplier;\n+\n+import static java.util.stream.Collectors.toList;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+\n+\/**\n+ * Parameterized tests for the {@link TableCell#startEdit()} method of {@link TableCell} and all sub implementations.\n+ * The {@link CheckBoxTableCell} is special as in there the checkbox will be disabled based of the editability.\n+ *\/\n+@RunWith(Parameterized.class)\n+public class TableCellStartEditTest {\n+\n+    private static final boolean[] EDITABLE_STATES = { true, false };\n+\n+    private final Supplier<TableCell<String, ?>> tableCellSupplier;\n+\n+    private TableView<String> table;\n+    private TableRow<String> tableRow;\n+    private TableColumn<String, ?> tableColumn;\n+    private TableCell<String, ?> tableCell;\n+\n+\n+    @Parameterized.Parameters\n+    public static Collection<Object[]> data() {\n+        return wrapAsObjectArray(List.of(TableCell::new, ComboBoxTableCell::new, TextFieldTableCell::new,\n+                ChoiceBoxTableCell::new, CheckBoxTableCell::new, ProgressBarTableCell::new));\n+    }\n+\n+    private static Collection<Object[]> wrapAsObjectArray(List<Supplier<TableCell<Object, ?>>> tableCells) {\n+        return tableCells.stream().map(cell -> new Object[] { cell }).collect(toList());\n+    }\n+\n+    public TableCellStartEditTest(Supplier<TableCell<String, ?>> tableCellSupplier) {\n+        this.tableCellSupplier = tableCellSupplier;\n+    }\n+\n+    @Before\n+    public void setup() {\n+        ObservableList<String> items = FXCollections.observableArrayList(\"1\", \"2\", \"3\");\n+        table = new TableView<>(items);\n+\n+        tableColumn = new TableColumn<>();\n+        table.getColumns().add(tableColumn);\n+\n+        tableRow = new TableRow<>();\n+\n+        tableCell = tableCellSupplier.get();\n+    }\n+\n+    @Test\n+    public void testStartEditMustNotThrowNPE() {\n+        \/\/ A table cell without anything attached should not throw a NPE.\n+        tableCell.startEdit();\n+    }\n+\n+    @Test\n+    public void testStartEditRespectsEditable() {\n+        tableCell.updateIndex(0);\n+\n+        tableCell.updateTableColumn(tableColumn);\n+        tableCell.updateTableRow(tableRow);\n+        tableCell.updateTableView(table);\n+\n+        for (boolean isTableEditable : EDITABLE_STATES) {\n+            for (boolean isColumnEditable : EDITABLE_STATES) {\n+                for (boolean isRowEditable : EDITABLE_STATES) {\n+                    for (boolean isCellEditable : EDITABLE_STATES) {\n+                        testStartEditImpl(isTableEditable, isColumnEditable, isRowEditable, isCellEditable);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * A {@link TableCell} (or sub implementation) should be editable (thus, can be in editing state), if the\n+     * corresponding table, column, row  and cell is editable.\n+     *\n+     * @param isTableEditable true, when the table should be editable, false otherwise\n+     * @param isColumnEditable true, when the column should be editable, false otherwise\n+     * @param isRowEditable true, when the row should be editable, false otherwise\n+     * @param isCellEditable true, when the cell should be editable, false otherwise\n+     *\/\n+    private void testStartEditImpl(boolean isTableEditable, boolean isColumnEditable, boolean isRowEditable,\n+            boolean isCellEditable) {\n+        assertFalse(tableCell.isEditing());\n+\n+        table.setEditable(isTableEditable);\n+        tableColumn.setEditable(isColumnEditable);\n+        tableRow.setEditable(isRowEditable);\n+        tableCell.setEditable(isCellEditable);\n+\n+        tableCell.startEdit();\n+\n+        \/\/ Only when the table, column, row and the cell itself is editable, it can get in editing state.\n+        boolean expectedEditingState = isTableEditable && isColumnEditable && isRowEditable && isCellEditable;\n+        assertEquals(expectedEditingState, tableCell.isEditing());\n+\n+        if (tableCell instanceof CheckBoxTableCell) {\n+            assertNotNull(tableCell.getGraphic());\n+            \/\/ Ignored until https:\/\/bugs.openjdk.java.net\/browse\/JDK-8270042 is resolved.\n+            \/\/ Check if the checkbox is disabled when not editable.\n+            \/\/ assertEquals(expectedEditingState, !tableCell.getGraphic().isDisabled());\n+        } else if (tableCell instanceof ProgressBarTableCell) {\n+            \/\/ The progress bar is always shown.\n+            assertNotNull(tableCell.getGraphic());\n+        } else if (!tableCell.getClass().equals(TableCell.class)) {\n+            \/\/ All other sub implementation should show a graphic when editable.\n+            assertEquals(expectedEditingState, tableCell.getGraphic() != null);\n+        }\n+\n+        \/\/ Restore the editing state.\n+        tableCell.cancelEdit();\n+    }\n+\n+}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/cell\/TableCellStartEditTest.java","additions":163,"deletions":0,"binary":false,"changes":163,"status":"added"},{"patch":"@@ -0,0 +1,138 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.javafx.scene.control.cell;\n+\n+import javafx.beans.property.SimpleBooleanProperty;\n+import javafx.scene.control.TreeCell;\n+import javafx.scene.control.TreeItem;\n+import javafx.scene.control.TreeView;\n+import javafx.scene.control.cell.CheckBoxTreeCell;\n+import javafx.scene.control.cell.ChoiceBoxTreeCell;\n+import javafx.scene.control.cell.ComboBoxTreeCell;\n+import javafx.scene.control.cell.TextFieldTreeCell;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.Supplier;\n+\n+import static java.util.stream.Collectors.toList;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+\n+\/**\n+ * Parameterized tests for the {@link TreeCell#startEdit()} method of {@link TreeCell} and all sub implementations.\n+ * The {@link CheckBoxTreeCell} is special as in there the checkbox will be disabled based of the editability.\n+ *\/\n+@RunWith(Parameterized.class)\n+public class TreeCellStartEditTest {\n+\n+    private static final boolean[] EDITABLE_STATES = { true, false };\n+\n+    private final Supplier<TreeCell<String>> treeCellSupplier;\n+\n+    private TreeView<String> treeView;\n+    private TreeCell<String> treeCell;\n+\n+    @Parameterized.Parameters\n+    public static Collection<Object[]> data() {\n+        return wrapAsObjectArray(List.of(TreeCell::new, ComboBoxTreeCell::new, TextFieldTreeCell::new,\n+                ChoiceBoxTreeCell::new,() -> new CheckBoxTreeCell<>(obj -> new SimpleBooleanProperty())));\n+    }\n+\n+    private static Collection<Object[]> wrapAsObjectArray(List<Supplier<TreeCell<String>>> treeCells) {\n+        return treeCells.stream().map(cell -> new Object[] { cell }).collect(toList());\n+    }\n+\n+    public TreeCellStartEditTest(Supplier<TreeCell<String>> treeCellSupplier) {\n+        this.treeCellSupplier = treeCellSupplier;\n+    }\n+\n+    @Before\n+    public void setup() {\n+        TreeItem<String> root = new TreeItem<>(\"1\");\n+        root.getChildren().addAll(List.of(new TreeItem<>(\"2\"), new TreeItem<>(\"3\")));\n+        treeView = new TreeView<>(root);\n+\n+        treeCell = treeCellSupplier.get();\n+    }\n+\n+    @Test\n+    public void testStartEditMustNotThrowNPE() {\n+        \/\/ A tree cell without anything attached should not throw a NPE.\n+        treeCell.startEdit();\n+    }\n+\n+    @Test\n+    public void testStartEditRespectsEditable() {\n+        treeCell.updateIndex(0);\n+\n+        treeCell.updateTreeView(treeView);\n+\n+        for (boolean isTreeViewEditable : EDITABLE_STATES) {\n+            for (boolean isCellEditable : EDITABLE_STATES) {\n+                testStartEditImpl(isTreeViewEditable, isCellEditable);\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * A {@link TreeCell} (or sub implementation) should be editable (thus, can be in editing state), if the\n+     * corresponding tree view and cell is editable.\n+     *\n+     * @param isTreeViewEditable true, when the tree view should be editable, false otherwise\n+     * @param isCellEditable true, when the cell should be editable, false otherwise\n+     *\/\n+    private void testStartEditImpl(boolean isTreeViewEditable, boolean isCellEditable) {\n+        assertFalse(treeCell.isEditing());\n+\n+        treeView.setEditable(isTreeViewEditable);\n+        treeCell.setEditable(isCellEditable);\n+\n+        treeCell.startEdit();\n+\n+        boolean expectedEditingState = isTreeViewEditable && isCellEditable;\n+        assertEquals(expectedEditingState, treeCell.isEditing());\n+\n+        if (treeCell instanceof CheckBoxTreeCell) {\n+            assertNotNull(treeCell.getGraphic());\n+            \/\/ Ignored until https:\/\/bugs.openjdk.java.net\/browse\/JDK-8270042 is resolved.\n+            \/\/ Check if the checkbox is disabled when not editable.\n+            \/\/ assertEquals(expectedEditingState, !treeCell.getGraphic().isDisabled());\n+        } else if (!treeCell.getClass().equals(TreeCell.class)) {\n+            \/\/ All other sub implementation should show a graphic when editable.\n+            assertEquals(expectedEditingState, treeCell.getGraphic() != null);\n+        }\n+\n+        \/\/ Restore the editing state.\n+        treeCell.cancelEdit();\n+    }\n+\n+}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/cell\/TreeCellStartEditTest.java","additions":138,"deletions":0,"binary":false,"changes":138,"status":"added"},{"patch":"@@ -0,0 +1,164 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.javafx.scene.control.cell;\n+\n+import javafx.scene.control.TreeItem;\n+import javafx.scene.control.TreeTableCell;\n+import javafx.scene.control.TreeTableColumn;\n+import javafx.scene.control.TreeTableRow;\n+import javafx.scene.control.TreeTableView;\n+import javafx.scene.control.cell.CheckBoxTreeTableCell;\n+import javafx.scene.control.cell.ChoiceBoxTreeTableCell;\n+import javafx.scene.control.cell.ComboBoxTreeTableCell;\n+import javafx.scene.control.cell.ProgressBarTreeTableCell;\n+import javafx.scene.control.cell.TextFieldTreeTableCell;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.Supplier;\n+\n+import static java.util.stream.Collectors.toList;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+\n+\/**\n+ * Parameterized tests for the {@link TreeTableCell#startEdit()} method of {@link TreeTableCell} and all sub\n+ * implementations. The {@link CheckBoxTreeTableCell} is special as in there the checkbox will be disabled based of the\n+ * editability.\n+ *\/\n+@RunWith(Parameterized.class)\n+public class TreeTableCellStartEditTest {\n+\n+    private static final boolean[] EDITABLE_STATES = { true, false };\n+\n+    private final Supplier<TreeTableCell<String, ?>> treeTableCellSupplier;\n+\n+    private TreeTableView<String> treeTable;\n+    private TreeTableRow<String> treeTableRow;\n+    private TreeTableColumn<String, ?> treeTableColumn;\n+    private TreeTableCell<String, ?> treeTableCell;\n+\n+\n+    @Parameterized.Parameters\n+    public static Collection<Object[]> data() {\n+        return wrapAsObjectArray(\n+                List.of(TreeTableCell::new , ComboBoxTreeTableCell::new, TextFieldTreeTableCell::new,\n+                        ChoiceBoxTreeTableCell::new, CheckBoxTreeTableCell::new, ProgressBarTreeTableCell::new));\n+    }\n+\n+    private static Collection<Object[]> wrapAsObjectArray(List<Supplier<TreeTableCell<Object, ?>>> treeTableCells) {\n+        return treeTableCells.stream().map(cell -> new Object[] { cell }).collect(toList());\n+    }\n+\n+    public TreeTableCellStartEditTest(Supplier<TreeTableCell<String, ?>> treeTableCellSupplier) {\n+        this.treeTableCellSupplier = treeTableCellSupplier;\n+    }\n+\n+    @Before\n+    public void setup() {\n+        TreeItem<String> root = new TreeItem<>(\"1\");\n+        root.getChildren().addAll(List.of(new TreeItem<>(\"2\"), new TreeItem<>(\"3\")));\n+        treeTable = new TreeTableView<>(root);\n+\n+        treeTableColumn = new TreeTableColumn<>();\n+        treeTable.getColumns().add(treeTableColumn);\n+\n+        treeTableRow = new TreeTableRow<>();\n+\n+        treeTableCell = treeTableCellSupplier.get();\n+    }\n+\n+    @Test\n+    public void testStartEditMustNotThrowNPE() {\n+        \/\/ A tree table cell without anything attached should not throw a NPE.\n+        treeTableCell.startEdit();\n+    }\n+\n+    @Test\n+    public void testStartEditRespectsEditable() {\n+        treeTableCell.updateIndex(0);\n+\n+        treeTableCell.updateTreeTableColumn((TreeTableColumn) treeTableColumn);\n+        treeTableCell.updateTreeTableRow(treeTableRow);\n+        treeTableCell.updateTreeTableView(treeTable);\n+\n+        for (boolean isTableEditable : EDITABLE_STATES) {\n+            for (boolean isColumnEditable : EDITABLE_STATES) {\n+                for (boolean isRowEditable : EDITABLE_STATES) {\n+                    for (boolean isCellEditable : EDITABLE_STATES) {\n+                        testStartEditImpl(isTableEditable, isColumnEditable, isRowEditable, isCellEditable);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * A {@link TreeTableCell} (or sub implementation) should be editable (thus, can be in editing state), if the\n+     * corresponding tree table, column, row and cell is editable.\n+     *\n+     * @param isTreeTableEditable true, when the tree table should be editable, false otherwise\n+     * @param isColumnEditable true, when the column should be editable, false otherwise\n+     * @param isRowEditable true, when the row should be editable, false otherwise\n+     * @param isCellEditable true, when the cell should be editable, false otherwise\n+     *\/\n+    private void testStartEditImpl(boolean isTreeTableEditable, boolean isColumnEditable, boolean isRowEditable,\n+            boolean isCellEditable) {\n+        assertFalse(treeTableCell.isEditing());\n+\n+        treeTable.setEditable(isTreeTableEditable);\n+        treeTableColumn.setEditable(isColumnEditable);\n+        treeTableRow.setEditable(isRowEditable);\n+        treeTableCell.setEditable(isCellEditable);\n+\n+        treeTableCell.startEdit();\n+\n+        boolean expectedEditingState = isTreeTableEditable && isColumnEditable && isRowEditable && isCellEditable;\n+        assertEquals(expectedEditingState, treeTableCell.isEditing());\n+\n+        if (treeTableCell instanceof CheckBoxTreeTableCell) {\n+            assertNotNull(treeTableCell.getGraphic());\n+            \/\/ Ignored until https:\/\/bugs.openjdk.java.net\/browse\/JDK-8270042 is resolved.\n+            \/\/ Check if the checkbox is disabled when not editable.\n+            \/\/ assertEquals(expectedEditingState, !treeTableCell.getGraphic().isDisabled());\n+        } else if (treeTableCell instanceof ProgressBarTreeTableCell) {\n+            \/\/ The progress bar is always shown.\n+            assertNotNull(treeTableCell.getGraphic());\n+        } else if (!treeTableCell.getClass().equals(TreeTableCell.class)) {\n+            \/\/ All other sub implementation should show a graphic when editable.\n+            assertEquals(expectedEditingState, treeTableCell.getGraphic() != null);\n+        }\n+\n+        \/\/ Restore the editing state.\n+        treeTableCell.cancelEdit();\n+    }\n+\n+}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/cell\/TreeTableCellStartEditTest.java","additions":164,"deletions":0,"binary":false,"changes":164,"status":"added"}]}