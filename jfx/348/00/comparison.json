{"files":[{"patch":"@@ -359,3 +359,1 @@\n-        if (newCount != oldCount) {\n-            requestRebuildCells();\n-        } else {\n+        if (newCount == oldCount) {\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/ListViewSkin.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -556,7 +556,1 @@\n-        if (newCount != oldCount) {\n-            \/\/ FIXME updateItemCount is called _a lot_. Perhaps we can make rebuildCells\n-            \/\/ smarter. Imagine if items has one million items added - do we really\n-            \/\/ need to rebuildCells a million times? Maybe this is better now that\n-            \/\/ we do rebuildCells instead of recreateCells.\n-            requestRebuildCells();\n-        } else {\n+        if (newCount == oldCount) {\n@@ -564,0 +558,3 @@\n+        } else if (oldCount == 0) {\n+            \/\/ see comments above, this is used as an alternative to flow.setDirtyCell(int)\n+            requestRebuildCells();\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/TableViewSkinBase.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1114,1 +1114,1 @@\n-                        assertEquals(useFixedCellSize ? 39 : 45, rt_35395_counter);\n+                        assertEquals(useFixedCellSize ? 5 : 7, rt_35395_counter);\n@@ -1119,1 +1119,1 @@\n-                            assertEquals(useFixedCellSize ? 39 : 45, rt_35395_counter);\n+                            assertEquals(useFixedCellSize ? 5 : 7, rt_35395_counter);\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ListViewTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,0 +35,2 @@\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n@@ -43,0 +45,3 @@\n+import javafx.collections.ObservableSet;\n+import javafx.collections.SetChangeListener;\n+import javafx.css.PseudoClass;\n@@ -5475,0 +5480,51 @@\n+\n+    @Test\n+    \/\/ see JDK-8177945\n+    public void test_addingNewItemsDoesNotChangePseudoClassSelectedState() {\n+        TableColumn firstNameCol = new TableColumn(\"First Name\");\n+        firstNameCol.setCellValueFactory(new PropertyValueFactory<Person, String>(\"firstName\"));\n+\n+        TableView<Person> table = new TableView<>();\n+        table.setItems(personTestData);\n+        table.getColumns().add(firstNameCol);\n+\n+        sm = table.getSelectionModel();\n+        sm.setCellSelectionEnabled(true);\n+\n+        StageLoader sl = new StageLoader(table);\n+\n+        table.scrollTo(3);\n+        sm.select(3);\n+\n+        Toolkit.getToolkit().firePulse();\n+\n+        assertEquals(1, sm.getSelectedCells().size());\n+\n+        IndexedCell cell = VirtualFlowTestUtils.getCell(table, 3, 0);\n+        assertTrue(cell.isSelected());\n+\n+        ObservableSet<PseudoClass> pseudoClassStates = cell.getPseudoClassStates();\n+        String selectedState = \"selected\";\n+        assertTrue(pseudoClassStates.stream().anyMatch(p -> selectedState.equals(p.getPseudoClassName())));\n+\n+        AtomicInteger counter = new AtomicInteger();\n+        AtomicBoolean selected = new AtomicBoolean(true);\n+        pseudoClassStates.addListener((SetChangeListener<PseudoClass>) change -> {\n+            if (selected.get() && pseudoClassStates.stream().noneMatch(p -> selectedState.equals(p.getPseudoClassName()))) {\n+                counter.incrementAndGet(); \/\/ deselected\n+                selected.set(false);\n+            } else if (!selected.get() && pseudoClassStates.stream().anyMatch(p -> selectedState.equals(p.getPseudoClassName()))) {\n+                counter.incrementAndGet(); \/\/ selected\n+                selected.set(true);\n+            }\n+        });\n+\n+        Toolkit.getToolkit().firePulse();\n+        for (int i = 0; i < 10; i++) {\n+            table.getItems().add(new Person(\"Test\", i));\n+            Toolkit.getToolkit().firePulse();\n+            assertEquals(0, counter.get());\n+        }\n+\n+        sl.dispose();\n+    }\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TableViewTest.java","additions":56,"deletions":0,"binary":false,"changes":56,"status":"modified"}]}