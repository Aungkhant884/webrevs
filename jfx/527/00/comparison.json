{"files":[{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.glass.ui.monocle;\n+\n+import com.sun.glass.ui.Size;\n+\n+class EGLCursor extends NativeCursor {\n+\n+    private static final int CURSOR_WIDTH = 16;\n+    private static final int CURSOR_HEIGHT = 16;\n+\n+\n+    private native void _initEGLCursor(int cursorWidth, int cursorHeight);\n+    private native void _setVisible(boolean visible);\n+    private native void _setLocation(int x, int y);\n+    private native void _setImage(byte[] cursorImage);\n+\n+    EGLCursor() {\n+        _initEGLCursor(CURSOR_WIDTH, CURSOR_HEIGHT);\n+    }\n+\n+    @Override\n+    Size getBestSize() {\n+        return new Size(CURSOR_WIDTH, CURSOR_HEIGHT);\n+    }\n+\n+    @Override\n+    void setVisibility(boolean visibility) {\n+        isVisible = visibility;\n+        _setVisible(visibility);\n+    }\n+\n+    private void updateImage(boolean always) {\n+        System.out.println(\"EGLCursor.updateImage: not implemented\");\n+    }\n+\n+    @Override\n+    void setImage(byte[] cursorImage) {\n+        _setImage(cursorImage);\n+    }\n+\n+    @Override\n+    void setLocation(int x, int y) {\n+        _setLocation(x, y);\n+    }\n+\n+    @Override\n+    void setHotSpot(int hotspotX, int hotspotY) {\n+    }\n+\n+    @Override\n+    void shutdown() {\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/monocle\/EGLCursor.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"},{"patch":"@@ -49,0 +49,10 @@\n+    @Override\n+    protected NativeCursor createCursor() {\n+        \/\/ By default, hardware cursor will be used\n+        \/\/ Fallback to software cursor will be used in case monocle.egl.swcursor is set to true\n+        boolean swcursor = Boolean.getBoolean(\"monocle.egl.swcursor\");\n+        final NativeCursor c = useCursor ? (swcursor ? new SoftwareCursor() : new EGLCursor) : new NullCursor();\n+        return c;\n+    }\n+\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/monocle\/EGLPlatform.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+#include \"com_sun_glass_ui_monocle_EGLCursor.h\"\n@@ -142,0 +143,28 @@\n+\n+JNIEXPORT void JNICALL Java_com_sun_glass_ui_monocle_EGLCursor__1initEGLCursor\n+  (JNIEnv *env, jobject obj, jint width, jint height) {\n+    doInitCursor(width, height);\n+}\n+\n+JNIEXPORT void JNICALL Java_com_sun_glass_ui_monocle_EGLCursor__1setVisible\n+  (JNIEnv *env, jobject obj, jboolean val) {\n+    doSetCursorVisibility(val);\n+}\n+\n+JNIEXPORT void JNICALL Java_com_sun_glass_ui_monocle_EGLCursor__1setLocation\n+  (JNIEnv *env, jobject obj, jint x, jint y) {\n+    doSetLocation(x, y);\n+}\n+\n+JNIEXPORT void JNICALL Java_com_sun_glass_ui_monocle_EGLCursor__1setImage\n+  (JNIEnv *env, jobject obj, jbyteArray jarr) {\n+    int length = (*env)->GetArrayLength(env, jarr);\n+    jbyte *attrArray = (*env)->GetByteArrayElements(env, jarr, JNI_FALSE);\n+    if (attrArray == 0) {\n+        fprintf(stderr, \"Fatal error getting char* from jbyteArray\\n\");\n+        return;\n+    }\n+    doSetCursorImage(attrArray, length);\n+    (*env)->ReleaseByteArrayElements(env, jarr, attrArray, JNI_ABORT);\n+\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/monocle\/egl\/eglBridge.c","additions":29,"deletions":0,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -28,0 +28,5 @@\n+\n+\/\/ This header file declares functions that need to be provided by low-level\n+\/\/ drivers or libraries.\n+\n+\/\/ get a handle to the native window (without specifying what window is)\n@@ -29,0 +34,2 @@\n+\n+\/\/ get a handle to the EGL display\n@@ -30,0 +37,2 @@\n+\n+\/\/ initialize the EGL system with the specified handle\n@@ -31,0 +40,2 @@\n+\n+\/\/ bind a specific API to the EGL system\n@@ -32,0 +43,2 @@\n+\n+\/\/ instruct the system to choose an EGL configuration matching the provided attributes\n@@ -34,0 +47,1 @@\n+\/\/ create an EGL Surface for the given display, configuration and window\n@@ -37,0 +51,1 @@\n+\/\/ create an EGL Context for the given display and configuration\n@@ -39,0 +54,1 @@\n+\/\/ enable the specified EGL system\n@@ -42,0 +58,1 @@\n+\/\/ swap buffers (and render frontbuffer)\n@@ -44,0 +61,5 @@\n+\/\/ get the number of native screens in the current configuration\n+extern jint doGetNumberOfScreens();\n+\n+\/\/ get specific information about each screen\n+\/\/ the idx parameter specifies which screen needs to be queried\n@@ -53,1 +75,12 @@\n-extern jint doGetNumberOfScreens();\n+\n+\/\/ initialize a hardware cursor with specified dimensions\n+extern void doInitCursor(jint width, jint height);\n+\n+\/\/ show\/hide the hardware cursor\n+extern void doSetCursorVisibility(jboolean val);\n+\n+\/\/ point the hardware cursor to the provided location\n+extern void doSetLocation(jint x, jint y);\n+\n+\/\/ use the specified image as cursor image\n+extern void doSetCursorImage(jbyte* img, int length);\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/monocle\/egl\/egl_ext.h","additions":34,"deletions":1,"binary":false,"changes":35,"status":"modified"}]}