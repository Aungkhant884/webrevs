{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import javafx.application.Platform;\n-\n@@ -31,2 +29,2 @@\n-import java.util.concurrent.TimeUnit;\n-import static org.junit.Assert.assertTrue;\n+\n+import test.util.Util;\n@@ -38,1 +36,1 @@\n-        Platform.startup(() -> {\n+        Util.startup(latch, () -> {\n@@ -41,1 +39,0 @@\n-        assertTrue(latch.await(5, TimeUnit.SECONDS));\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/InitializeJavaFXStartupBase.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,2 @@\n-import com.sun.javafx.application.PlatformImplShim;\n+import static org.junit.Assert.assertEquals;\n+\n@@ -30,1 +31,1 @@\n-import java.util.concurrent.TimeUnit;\n+\n@@ -32,1 +33,1 @@\n-import org.junit.Assert;\n+\n@@ -34,1 +35,0 @@\n-import test.util.Util;\n@@ -36,2 +36,3 @@\n-import static org.junit.Assert.assertEquals;\n-import static test.util.Util.TIMEOUT;\n+import com.sun.javafx.application.PlatformImplShim;\n+\n+import test.util.Util;\n@@ -53,3 +54,1 @@\n-        Platform.startup(startupLatch::countDown);\n-        Assert.assertTrue(\"Timeout waiting for FX runtime to start\",\n-                startupLatch.await(TIMEOUT, TimeUnit.MILLISECONDS));\n+        Util.startup(startupLatch, startupLatch::countDown);\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/PlatformExitCommon.java","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,6 @@\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n@@ -30,1 +36,0 @@\n-import javafx.scene.control.Button;\n@@ -32,0 +37,1 @@\n+import javafx.scene.control.Button;\n@@ -33,1 +39,1 @@\n-import junit.framework.Assert;\n+\n@@ -37,0 +43,1 @@\n+\n@@ -39,6 +46,0 @@\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicReference;\n-\n-import static org.junit.Assert.fail;\n-import static org.junit.Assert.assertTrue;\n@@ -52,2 +53,3 @@\n-        Platform.startup(() -> {\n-            Platform.setImplicitExit(false);\n+        Platform.setImplicitExit(false);\n+\n+        Util.startup(startupLatch, () -> {\n@@ -56,1 +58,5 @@\n-        assertTrue(\"Timeout waiting for FX runtime to start\", startupLatch.await(15, TimeUnit.SECONDS));\n+    }\n+\n+    @AfterClass\n+    public static void teardownOnce() {\n+        Util.shutdown();\n@@ -92,5 +98,0 @@\n-\n-    @AfterClass\n-    public static void teardownOnce() {\n-        Platform.exit();\n-    }\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/StyleMemoryLeakTest.java","additions":18,"deletions":17,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,6 @@\n-import javafx.application.Application;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n@@ -30,1 +35,0 @@\n-import javafx.scene.Node;\n@@ -32,0 +36,1 @@\n+import javafx.scene.Node;\n@@ -36,7 +41,0 @@\n-import javafx.stage.WindowEvent;\n-\n-import java.lang.ref.WeakReference;\n-import java.util.LinkedList;\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicReference;\n@@ -44,1 +42,0 @@\n-import junit.framework.Assert;\n@@ -46,0 +43,1 @@\n+import org.junit.Assert;\n@@ -48,2 +46,1 @@\n-import static org.junit.Assert.assertTrue;\n-import static test.util.Util.TIMEOUT;\n+\n@@ -59,3 +56,6 @@\n-        Platform.startup(startupLatch::countDown);\n-        Assert.assertTrue(\"Timeout waiting for FX runtime to start\",\n-                startupLatch.await(TIMEOUT, TimeUnit.MILLISECONDS));\n+        Util.startup(startupLatch, startupLatch::countDown);\n+    }\n+\n+    @AfterClass\n+    public static void teardownOnce() {\n+        Util.shutdown();\n@@ -124,7 +124,0 @@\n-\n-    @AfterClass\n-    public static void teardownOnce() {\n-        Platform.runLater(() -> {\n-            Platform.exit();\n-        });\n-    }\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/control\/ProgressIndicatorLeakTest.java","additions":16,"deletions":23,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,10 @@\n-import com.sun.javafx.PlatformUtil;\n-import javafx.application.Platform;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assume.assumeTrue;\n+\n+import java.awt.Toolkit;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.StringSelection;\n+import java.awt.datatransfer.Transferable;\n+import java.util.concurrent.CountDownLatch;\n+\n@@ -32,0 +40,1 @@\n+\n@@ -35,1 +44,0 @@\n-import test.util.Util;\n@@ -37,6 +45,1 @@\n-import java.awt.Toolkit;\n-import java.awt.datatransfer.DataFlavor;\n-import java.awt.datatransfer.StringSelection;\n-import java.awt.datatransfer.Transferable;\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n+import com.sun.javafx.PlatformUtil;\n@@ -46,3 +49,1 @@\n-\n-import static org.junit.Assert.*;\n-import static org.junit.Assume.assumeTrue;\n+import test.util.Util;\n@@ -52,1 +53,1 @@\n-    static CountDownLatch startupLatch;\n+    static CountDownLatch startupLatch = new CountDownLatch(1);\n@@ -71,2 +72,1 @@\n-        startupLatch = new CountDownLatch(1);\n-        Platform.startup(() -> {\n+        Util.startup(startupLatch, () -> {\n@@ -76,7 +76,5 @@\n-        try {\n-            if (!startupLatch.await(15, TimeUnit.SECONDS)) {\n-                fail(\"Timeout waiting for FX runtime to start\");\n-            }\n-        } catch (InterruptedException ex) {\n-            fail(\"Unexpected exception: \" + ex);\n-        }\n+    }\n+\n+    @AfterClass\n+    public static void teardown() {\n+        Util.shutdown();\n@@ -141,5 +139,0 @@\n-    @AfterClass\n-    public static void teardown() {\n-        Platform.exit();\n-    }\n-\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/input\/ClipboardTest.java","additions":21,"deletions":28,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -28,0 +28,4 @@\n+import java.lang.ref.WeakReference;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n@@ -33,3 +37,1 @@\n-import java.lang.ref.WeakReference;\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n+import org.junit.Assert;\n@@ -37,1 +39,0 @@\n-import junit.framework.Assert;\n@@ -42,1 +43,1 @@\n-    static CountDownLatch startupLatch;\n+    static CountDownLatch startupLatch = new CountDownLatch(1);\n@@ -45,2 +46,0 @@\n-        startupLatch = new CountDownLatch(1);\n-        Platform.startup(startupLatch::countDown);\n@@ -48,2 +47,1 @@\n-        Assert.assertTrue(\"Timeout waiting for FX runtime to start\",\n-                startupLatch.await(15, TimeUnit.MILLISECONDS));\n+        Util.startup(startupLatch, startupLatch::countDown);\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/stage\/FocusedWindowTestBase.java","additions":7,"deletions":9,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,3 @@\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assume.assumeTrue;\n+\n@@ -29,2 +32,1 @@\n-import java.util.concurrent.TimeUnit;\n-import javafx.application.Application;\n+\n@@ -39,0 +41,1 @@\n+\n@@ -44,1 +47,0 @@\n-import test.util.Util;\n@@ -46,2 +48,1 @@\n-import static org.junit.Assert.*;\n-import static org.junit.Assume.*;\n+import test.util.Util;\n@@ -57,4 +58,0 @@\n-    private static void waitForLatch(CountDownLatch latch, int seconds, String msg) throws Exception {\n-        assertTrue(\"Timeout: \" + msg, latch.await(seconds, TimeUnit.SECONDS));\n-    }\n-\n@@ -64,2 +61,1 @@\n-        Platform.startup(startupLatch::countDown);\n-        waitForLatch(startupLatch, 10, \"FX runtime failed to start\");\n+        Util.startup(startupLatch, startupLatch::countDown);\n@@ -84,1 +80,1 @@\n-        Platform.exit();\n+        Util.shutdown();\n@@ -123,1 +119,1 @@\n-        waitForLatch(shownLatch, 5, \"Stage failed to show\");\n+        Util.waitForLatch(shownLatch, 5, \"Stage failed to show\");\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/stage\/MultipleScreensTest.java","additions":10,"deletions":14,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,4 @@\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assume.assumeTrue;\n+\n@@ -29,1 +33,1 @@\n-import java.util.concurrent.TimeUnit;\n+\n@@ -34,0 +38,1 @@\n+\n@@ -37,1 +42,0 @@\n-import test.util.Util;\n@@ -39,2 +43,1 @@\n-import static org.junit.Assert.*;\n-import static org.junit.Assume.assumeTrue;\n+import test.util.Util;\n@@ -48,4 +51,0 @@\n-    private static void waitForLatch(CountDownLatch latch, int seconds, String msg) throws Exception {\n-        assertTrue(\"Timeout: \" + msg, latch.await(seconds, TimeUnit.SECONDS));\n-    }\n-\n@@ -62,1 +61,1 @@\n-        Platform.startup(() -> {\n+        Util.startup(startupLatch, () -> {\n@@ -74,1 +73,0 @@\n-        waitForLatch(startupLatch, 10, \"FX runtime failed to start\");\n@@ -79,1 +77,1 @@\n-        Platform.exit();\n+        Util.shutdown();\n@@ -102,1 +100,0 @@\n-\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/stage\/ScreenTest.java","additions":10,"deletions":13,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -28,0 +28,6 @@\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n+\n@@ -29,2 +35,0 @@\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n@@ -33,0 +37,2 @@\n+import java.util.concurrent.CountDownLatch;\n+\n@@ -35,1 +41,0 @@\n-import javafx.scene.paint.Color;\n@@ -37,0 +42,1 @@\n+import javafx.scene.paint.Color;\n@@ -39,2 +45,1 @@\n-import junit.framework.AssertionFailedError;\n-import netscape.javascript.JSObject;\n+\n@@ -45,1 +50,0 @@\n-import test.util.Util;\n@@ -47,2 +51,3 @@\n-import static org.junit.Assert.*;\n-import static test.util.Util.TIMEOUT;\n+import junit.framework.AssertionFailedError;\n+import netscape.javascript.JSObject;\n+import test.util.Util;\n@@ -187,1 +192,1 @@\n-        Platform.startup(() -> {\n+        Util.startup(launchLatch, () -> {\n@@ -191,4 +196,0 @@\n-        if (!launchLatch.await(TIMEOUT, TimeUnit.MILLISECONDS)) {\n-            fail(\"Timeout waiting for Platform to start\");\n-        }\n-\n@@ -212,1 +213,1 @@\n-        Platform.exit();\n+        Util.shutdown();\n","filename":"tests\/system\/src\/test\/java\/test\/memoryleak\/JSCallbackMemoryTest.java","additions":15,"deletions":14,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,5 @@\n-import com.sun.javafx.PlatformUtil;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assume.assumeTrue;\n+\n@@ -31,1 +35,0 @@\n-import java.util.concurrent.TimeUnit;\n@@ -33,0 +36,1 @@\n+\n@@ -36,1 +40,0 @@\n-import test.util.Util;\n@@ -42,2 +45,3 @@\n-import static org.junit.Assert.*;\n-import static org.junit.Assume.assumeTrue;\n+import com.sun.javafx.PlatformUtil;\n+\n+import test.util.Util;\n@@ -57,3 +61,1 @@\n-        Platform.startup(startupLatch::countDown);\n-        assertTrue(\"Timeout waiting for FX runtime to start\",\n-                startupLatch.await(15, TimeUnit.SECONDS));\n+        Util.startup(startupLatch, startupLatch::countDown);\n@@ -80,1 +82,1 @@\n-        Platform.exit();\n+        Util.shutdown();\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/application\/KeyLockedTest.java","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -47,2 +47,0 @@\n-import com.sun.javafx.application.PlatformImpl;\n-\n@@ -312,1 +310,1 @@\n-     * @param startupLatch\n+     * @param startupLatch - a latch used to communicate successful start of the application\n@@ -331,1 +329,1 @@\n-     * @param startupLatch\n+     * @param startupLatch - a latch used to communicate successful start of the application\n@@ -352,2 +350,21 @@\n-     * This synchronous method first hides all the specified stages (ignoring any null Stages)\n-     * in the platform thread, then calls {@link Platform.exit()}.\n+     * Starts the JavaFX runtime, invoking the specified Runnable on the JavaFX application thread.\n+     * This Runnable must call {@link CountdownLatch#countDown()} once to signal\n+     * its successful start, otherwise an exception will be thrown when no such signal is received\n+     * within 15 seconds.\n+     *\n+     * @param startupLatch - a latch used to communicate successful start of the application\n+     * @param r - code to invoke on the application thread.\n+     *\/\n+    public static void startup(CountDownLatch startupLatch, Runnable r) {\n+        Platform.startup(r);\n+        try {\n+            String msg = \"Timeout waiting for FX runtime to start\";\n+            Assert.assertTrue(msg, startupLatch.await(TIMEOUT, TimeUnit.MILLISECONDS));\n+        } catch (InterruptedException e) {\n+            throw new AssertionError(e);\n+        }\n+    }\n+\n+    \/**\n+     * This synchronous method first hides all the specified stages (ignoring any\n+     * null Stages) in the platform thread, then calls {@link Platform.exit()}.\n","filename":"tests\/system\/src\/test\/java\/test\/util\/Util.java","additions":23,"deletions":6,"binary":false,"changes":29,"status":"modified"}]}